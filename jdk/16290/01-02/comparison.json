{"files":[{"patch":"@@ -44,0 +44,1 @@\n+#include \"prims\/upcallLinker.hpp\"\n@@ -7329,0 +7330,15 @@\n+  \/\/ exception handler for upcall stubs\n+  address generate_upcall_stub_exception_handler() {\n+    StubCodeMark mark(this, \"StubRoutines\", \"upcall stub exception handler\");\n+    address start = __ pc();\n+\n+    \/\/ Native caller has no idea how to handle exceptions,\n+    \/\/ so we just crash here. Up to callee to catch exceptions.\n+    __ verify_oop(r0);\n+    __ movptr(rscratch1, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception));\n+    __ blr(rscratch1);\n+    __ should_not_reach_here();\n+\n+    return start;\n+  }\n+\n@@ -8380,0 +8396,2 @@\n+    StubRoutines::_upcall_stub_exception_handler = generate_upcall_stub_exception_handler();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -308,13 +308,0 @@\n-  __ block_comment(\"{ exception handler\");\n-\n-  intptr_t exception_handler_offset = __ pc() - start;\n-\n-  \/\/ Native caller has no idea how to handle exceptions,\n-  \/\/ so we just crash here. Up to callee to catch exceptions.\n-  __ verify_oop(r0);\n-  __ movptr(rscratch1, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception));\n-  __ blr(rscratch1);\n-  __ should_not_reach_here();\n-\n-  __ block_comment(\"} exception handler\");\n-\n@@ -336,1 +323,0 @@\n-                         exception_handler_offset,\n","filename":"src\/hotspot\/cpu\/aarch64\/upcallLinker_aarch64.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"prims\/upcallLinker.hpp\"\n@@ -4720,0 +4721,14 @@\n+  \/\/ exception handler for upcall stubs\n+  address generate_upcall_stub_exception_handler() {\n+    StubCodeMark mark(this, \"StubRoutines\", \"upcall stub exception handler\");\n+    address start = __ pc();\n+\n+    \/\/ Native caller has no idea how to handle exceptions,\n+    \/\/ so we just crash here. Up to callee to catch exceptions.\n+    __ verify_oop(R3_ARG1);\n+    __ load_const_optimized(R12_scratch2, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception), R0);\n+    __ call_c(R12_scratch2);\n+    __ should_not_reach_here();\n+\n+    return start;\n+  }\n@@ -4799,0 +4814,2 @@\n+\n+    StubRoutines::_upcall_stub_exception_handler = generate_upcall_stub_exception_handler();\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -317,13 +317,0 @@\n-  __ block_comment(\"{ exception handler\");\n-\n-  intptr_t exception_handler_offset = __ pc() - start;\n-\n-  \/\/ Native caller has no idea how to handle exceptions,\n-  \/\/ so we just crash here. Up to callee to catch exceptions.\n-  __ verify_oop(R3_ARG1);\n-  __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception), R0);\n-  __ call_c(call_target_address);\n-  __ should_not_reach_here();\n-\n-  __ block_comment(\"} exception handler\");\n-\n@@ -345,1 +332,0 @@\n-                         exception_handler_offset,\n","filename":"src\/hotspot\/cpu\/ppc\/upcallLinker_ppc.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"prims\/upcallLinker.hpp\"\n@@ -4507,0 +4508,14 @@\n+  \/\/ exception handler for upcall stubs\n+  address generate_upcall_stub_exception_handler() {\n+    StubCodeMark mark(this, \"StubRoutines\", \"upcall stub exception handler\");\n+    address start = __ pc();\n+\n+    \/\/ Native caller has no idea how to handle exceptions,\n+    \/\/ so we just crash here. Up to callee to catch exceptions.\n+    __ verify_oop(x10); \/\/ return a exception oop in a0\n+    __ rt_call(CAST_FROM_FN_PTR(address, UpcallLinker::handle_uncaught_exception));\n+    __ should_not_reach_here();\n+\n+    return start;\n+  }\n+\n@@ -4591,0 +4606,2 @@\n+    StubRoutines::_upcall_stub_exception_handler = generate_upcall_stub_exception_handler();\n+\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -328,11 +328,0 @@\n-  __ block_comment(\"{ exception handler\");\n-\n-  intptr_t exception_handler_offset = __ pc() - start;\n-\n-  \/\/ Native caller has no idea how to handle exceptions,\n-  \/\/ so we just crash here. Up to callee to catch exceptions.\n-  __ verify_oop(x10); \/\/ return a exception oop in a0\n-  __ rt_call(CAST_FROM_FN_PTR(address, UpcallLinker::handle_uncaught_exception));\n-  __ should_not_reach_here();\n-\n-  __ block_comment(\"} exception handler\");\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"prims\/upcallLinker.hpp\"\n@@ -3097,0 +3098,15 @@\n+  \/\/ exception handler for upcall stubs\n+  address generate_upcall_stub_exception_handler() {\n+    StubCodeMark mark(this, \"StubRoutines\", \"upcall stub exception handler\");\n+    address start = __ pc();\n+\n+    \/\/ Native caller has no idea how to handle exceptions,\n+    \/\/ so we just crash here. Up to callee to catch exceptions.\n+    __ verify_oop(Z_ARG1);\n+    __ load_const_optimized(Z_R1_scratch, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception));\n+    __ call_c(Z_R1_scratch);\n+    __ should_not_reach_here();\n+\n+    return start;\n+  }\n+\n@@ -3177,0 +3193,1 @@\n+    StubRoutines::_upcall_stub_exception_handler = generate_upcall_stub_exception_handler();\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -269,13 +269,0 @@\n-  __ block_comment(\"{ exception handler\");\n-\n-  intptr_t exception_handler_offset = __ pc() - start;\n-\n-  \/\/ Native caller has no idea how to handle exceptions,\n-  \/\/ so we just crash here. Up to callee to catch exceptions.\n-  __ verify_oop(Z_ARG1);\n-  __ load_const_optimized(call_target_address, CAST_FROM_FN_PTR(uint64_t, UpcallLinker::handle_uncaught_exception));\n-  __ call_c(call_target_address);\n-  __ should_not_reach_here();\n-\n-  __ block_comment(\"} exception handler\");\n-\n@@ -296,1 +283,0 @@\n-                         exception_handler_offset,\n","filename":"src\/hotspot\/cpu\/s390\/upcallLinker_s390.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"prims\/upcallLinker.hpp\"\n@@ -3890,0 +3891,18 @@\n+\/\/ exception handler for upcall stubs\n+address StubGenerator::generate_upcall_stub_exception_handler() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"upcall stub exception handler\");\n+  address start = __ pc();\n+\n+  \/\/ native caller has no idea how to handle exceptions\n+  \/\/ we just crash here. Up to callee to catch exceptions.\n+  __ verify_oop(rax);\n+  __ vzeroupper();\n+  __ mov(c_rarg0, rax);\n+  __ andptr(rsp, -StackAlignmentInBytes); \/\/ align stack as required by ABI\n+  __ subptr(rsp, frame::arg_reg_save_area_bytes); \/\/ windows\n+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, UpcallLinker::handle_uncaught_exception)));\n+  __ should_not_reach_here();\n+\n+  return start;\n+}\n+\n@@ -4042,0 +4061,2 @@\n+\n+  StubRoutines::_upcall_stub_exception_handler = generate_upcall_stub_exception_handler();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -568,0 +568,3 @@\n+  \/\/ shared exception handler for FFM upcall stubs\n+  address generate_upcall_stub_exception_handler();\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -363,18 +363,0 @@\n-  __ block_comment(\"{ exception handler\");\n-\n-  intptr_t exception_handler_offset = __ pc() - start;\n-\n-  \/\/ TODO: this is always the same, can we bypass and call handle_uncaught_exception directly?\n-\n-  \/\/ native caller has no idea how to handle exceptions\n-  \/\/ we just crash here. Up to callee to catch exceptions.\n-  __ verify_oop(rax);\n-  __ vzeroupper();\n-  __ mov(c_rarg0, rax);\n-  __ andptr(rsp, -StackAlignmentInBytes); \/\/ align stack as required by ABI\n-  __ subptr(rsp, frame::arg_reg_save_area_bytes); \/\/ windows (not really needed)\n-  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, UpcallLinker::handle_uncaught_exception)));\n-  __ should_not_reach_here();\n-\n-  __ block_comment(\"} exception handler\");\n-\n@@ -383,1 +365,0 @@\n-\n@@ -397,1 +378,0 @@\n-                         exception_handler_offset,\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -741,3 +741,1 @@\n-UpcallStub::UpcallStub(const char* name, CodeBuffer* cb, int size,\n-                       intptr_t exception_handler_offset,\n-                       jobject receiver, ByteSize frame_data_offset) :\n+UpcallStub::UpcallStub(const char* name, CodeBuffer* cb, int size, jobject receiver, ByteSize frame_data_offset) :\n@@ -746,1 +744,0 @@\n-  _exception_handler_offset(exception_handler_offset),\n@@ -756,3 +753,1 @@\n-UpcallStub* UpcallStub::create(const char* name, CodeBuffer* cb,\n-                               intptr_t exception_handler_offset,\n-                               jobject receiver, ByteSize frame_data_offset) {\n+UpcallStub* UpcallStub::create(const char* name, CodeBuffer* cb, jobject receiver, ByteSize frame_data_offset) {\n@@ -765,2 +760,1 @@\n-    blob = new (size) UpcallStub(name, cb, size,\n-                                         exception_handler_offset, receiver, frame_data_offset);\n+    blob = new (size) UpcallStub(name, cb, size, receiver, frame_data_offset);\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -736,1 +736,0 @@\n-  intptr_t _exception_handler_offset;\n@@ -740,3 +739,1 @@\n-  UpcallStub(const char* name, CodeBuffer* cb, int size,\n-                     intptr_t exception_handler_offset,\n-                     jobject receiver, ByteSize frame_data_offset);\n+  UpcallStub(const char* name, CodeBuffer* cb, int size, jobject receiver, ByteSize frame_data_offset);\n@@ -757,3 +754,1 @@\n-  static UpcallStub* create(const char* name, CodeBuffer* cb,\n-                            intptr_t exception_handler_offset,\n-                            jobject receiver, ByteSize frame_data_offset);\n+  static UpcallStub* create(const char* name, CodeBuffer* cb, jobject receiver, ByteSize frame_data_offset);\n@@ -763,1 +758,0 @@\n-  address exception_handler() { return code_begin() + _exception_handler_offset; }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-  static void handle_uncaught_exception(oop exception);\n@@ -47,0 +46,3 @@\n+\n+  \/\/ public for stubGenerator\n+  static void handle_uncaught_exception(oop exception);\n","filename":"src\/hotspot\/share\/prims\/upcallLinker.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-    return ((UpcallStub*)blob)->exception_handler();\n+    return StubRoutines::upcall_stub_exception_handler();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,0 +191,2 @@\n+address StubRoutines::_upcall_stub_exception_handler = nullptr;\n+\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -272,0 +272,2 @@\n+  static address _upcall_stub_exception_handler;\n+\n@@ -468,0 +470,5 @@\n+  static address upcall_stub_exception_handler() {\n+    assert(_upcall_stub_exception_handler != nullptr, \"not implemented\");\n+    return _upcall_stub_exception_handler;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}