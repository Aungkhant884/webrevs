{"files":[{"patch":"@@ -544,1 +544,3 @@\n-        return StreamEncoder.forEncoder(ch, enc.reset(), minBufferCap);\n+        Objects.requireNonNull(enc, \"enc\");\n+        OutputStream out = newOutputStream(ch);\n+        return StreamEncoder.forOutputStreamWriter(out, enc.reset());\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/Channels.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.channels.WritableByteChannel;\n@@ -82,6 +81,2 @@\n-\n-    \/\/ Factory for java.nio.channels.Channels.newWriter\n-\n-    public static StreamEncoder forEncoder(WritableByteChannel ch,\n-                                           CharsetEncoder enc,\n-                                           int minBufferCap)\n+    public static StreamEncoder forOutputStreamWriter(OutputStream out,\n+                                                      CharsetEncoder enc)\n@@ -89,1 +84,1 @@\n-        return new StreamEncoder(ch, enc, minBufferCap);\n+        return new StreamEncoder(out, enc);\n@@ -92,1 +87,0 @@\n-\n@@ -255,1 +249,0 @@\n-    \/\/ Exactly one of these is non-null\n@@ -257,1 +250,0 @@\n-    private final WritableByteChannel ch;\n@@ -274,1 +266,0 @@\n-        this.ch = null;\n@@ -282,3 +273,3 @@\n-    private StreamEncoder(WritableByteChannel ch, CharsetEncoder enc, int mbc) {\n-        this.out = null;\n-        this.ch = ch;\n+    private StreamEncoder(OutputStream out, CharsetEncoder enc) {\n+        super();\n+        this.out = out;\n@@ -288,7 +279,2 @@\n-        if (mbc > 0) {\n-            this.bb = ByteBuffer.allocate(mbc);\n-            this.maxBufferCapacity = mbc;\n-        } else {\n-            this.bb = ByteBuffer.allocate(INITIAL_BYTE_BUFFER_CAPACITY);\n-            this.maxBufferCapacity = MAX_BYTE_BUFFER_CAPACITY;\n-        }\n+        this.bb = ByteBuffer.allocate(INITIAL_BYTE_BUFFER_CAPACITY);\n+        this.maxBufferCapacity = MAX_BYTE_BUFFER_CAPACITY;\n@@ -305,6 +291,1 @@\n-            if (ch != null) {\n-                int wc = ch.write(bb);\n-                assert wc == rem : rem;\n-            } else {\n-                out.write(bb.array(), bb.arrayOffset() + pos, rem);\n-            }\n+            out.write(bb.array(), bb.arrayOffset() + pos, rem);\n@@ -411,3 +392,1 @@\n-        if (out != null) {\n-            out.flush();\n-        }\n+        out.flush();\n@@ -417,1 +396,1 @@\n-        try (ch; out) {\n+        try (out) {\n@@ -433,2 +412,1 @@\n-            if (out != null)\n-                out.flush();\n+            out.flush();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/StreamEncoder.java","additions":12,"deletions":34,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.StandardSocketOptions;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.IllegalBlockingModeException;\n+import java.nio.channels.SocketChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8295797\n+ * @summary Test behavior of Channels.newWriter for WritableByteChannels\n+ * @run junit NewWriter\n+ *\/\n+public class NewWriter {\n+    private static final String STRING = \"test\";\n+    private static final int COUNT = 5;\n+    private static final int EXPECTED = (STRING.length() + 1)*COUNT;\n+    private int actual = 0;\n+\n+    @Test\n+    public void oneByteChannel() throws IOException {\n+        try (Writer writer = Channels.newWriter(new WritableByteChannel() {\n+            @Override\n+            public int write(ByteBuffer src) {\n+                System.out.print((char) src.get());\n+                actual++;\n+                return 1;\n+            }\n+\n+            @Override\n+            public boolean isOpen() {\n+                return true;\n+            }\n+\n+            @Override\n+            public void close() {\n+            }\n+        }, StandardCharsets.UTF_8)) {\n+            for (int i = 1; i <= COUNT; i++) {\n+                writer.write(STRING);\n+                writer.flush();\n+                System.out.println(i);\n+                actual++;\n+            }\n+        }\n+        assertEquals(EXPECTED, actual);\n+    }\n+\n+    @Test\n+    public void socketChannel() throws IOException {\n+        Throwable thrown = assertThrows(IllegalBlockingModeException.class,\n+        () -> {\n+            try (ServerSocket ss = new ServerSocket();\n+                 SocketChannel sc = SocketChannel.open()) {\n+\n+                InetAddress lb = InetAddress.getLoopbackAddress();\n+                ss.bind(new InetSocketAddress(lb, 0));\n+                sc.connect(ss.getLocalSocketAddress());\n+                sc.configureBlocking(false);\n+                sc.setOption(StandardSocketOptions.SO_SNDBUF, 8192);\n+                try (Writer writer = Channels.newWriter(sc,\n+                    StandardCharsets.UTF_8)) {\n+                    for (int i = 1; i < Integer.MAX_VALUE; i++) {\n+                        writer.write(\"test\" + i);\n+                    }\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/NewWriter.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}