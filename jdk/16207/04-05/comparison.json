{"files":[{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.io.Writer;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.Channels;\n-import java.nio.channels.IllegalBlockingModeException;\n-import java.nio.channels.WritableByteChannel;\n-import java.nio.charset.StandardCharsets;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-\/**\n- * @test\n- * @bug 8295797\n- * @summary Test behavior of Channels.newWriter for WritableByteChannels\n- * @run junit NewWriter\n- *\/\n-public class NewWriter {\n-    private static final String STRING = \"test\";\n-    private static final int COUNT = 5;\n-    private static final int EXPECTED = (STRING.length() + 1)*COUNT;\n-    private int actual = 0;\n-\n-    @Test\n-    public void OneByteChannel() throws IOException {\n-        try (Writer writer = Channels.newWriter(new WritableByteChannel() {\n-            @Override\n-            public int write(ByteBuffer src) {\n-                System.out.println((char) src.get());\n-                actual++;\n-                return 1;\n-            }\n-\n-            @Override\n-            public boolean isOpen() {\n-                return true;\n-            }\n-\n-            @Override\n-            public void close() {\n-            }\n-        }, StandardCharsets.UTF_8)) {\n-            for (int i = 1; i <= 5; i++) {\n-                writer.write(STRING + i);\n-                writer.flush();\n-            }\n-        }\n-        assertEquals(EXPECTED, actual);\n-    }\n-\n-    @Test\n-    public void SocketChannel() {\n-        ApplicationException thrown =\n-            Assertions.assertThrows(ApplicationException.class, () -> {\n-           \/\/Code under test\n-        });\n-\n-        Assertions.assertEquals(\"some message\", thrown.getMessage());\n-    }\n-}\n","filename":"`","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"}]}