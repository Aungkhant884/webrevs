{"files":[{"patch":"@@ -110,4 +110,0 @@\n-serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatIntervalTest.java 8214032 generic-all\n-serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorInterpreterObjectTest.java 8225313 linux-i586,linux-x64,windows-x64\n-serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatArrayCorrectnessTest.java 8224150 generic-all\n-serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java 8225313 linux-i586,linux-x64,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-  \/\/ Do 100000 iterations and expect maxIteration \/ multiplier samples.\n-  private static final int maxIteration = 100000;\n+  \/\/ Do 200000 iterations and expect maxIteration \/ multiplier samples.\n+  private static final int maxIteration = 200_000;\n@@ -43,0 +43,6 @@\n+  \/\/ 15% error ensures a sanity test without becoming flaky.\n+  \/\/ Flakiness is due to the fact that this test is dependent on the sampling interval, which is a\n+  \/\/ statistical geometric variable around the sampling interval. This means that the test could be\n+  \/\/ unlucky and not achieve the mean average fast enough for the test case.\n+  private static final int acceptedErrorPercentage = 15;\n+\n@@ -88,5 +94,1 @@\n-        \/\/ 10% error ensures a sanity test without becoming flaky.\n-        \/\/ Flakiness is due to the fact that this test is dependent on the sampling interval, which is a\n-        \/\/ statistical geometric variable around the sampling interval. This means that the test could be\n-        \/\/ unlucky and not achieve the mean average fast enough for the test case.\n-        if (HeapMonitor.statsHaveExpectedNumberSamples((int) expected, 10)) {\n+        if (HeapMonitor.statsHaveExpectedNumberSamples((int) expected, acceptedErrorPercentage)) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatArrayCorrectnessTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-  \/\/ Do 200000 iterations and expect maxIteration \/ multiplier samples.\n-  private static final int maxIteration = 200000;\n+  \/\/ Do 400000 iterations and expect maxIteration \/ multiplier samples.\n+  private static final int maxIteration = 400_000;\n@@ -43,1 +43,5 @@\n-  private native static boolean statsHaveExpectedNumberSamples(int expected, int percentError);\n+  \/\/ 15% error ensures a sanity test without becoming flaky.\n+  \/\/ Flakiness is due to the fact that this test is dependent on the sampling interval, which is a\n+  \/\/ statistical geometric variable around the sampling interval. This means that the test could be\n+  \/\/ unlucky and not achieve the mean average fast enough for the test case.\n+  private static final int acceptedErrorPercentage = 15;\n@@ -86,5 +90,1 @@\n-    \/\/ 10% error ensures a sanity test without becoming flaky.\n-    \/\/ Flakiness is due to the fact that this test is dependent on the sampling interval, which is a\n-    \/\/ statistical geometric variable around the sampling interval. This means that the test could be\n-    \/\/ unlucky and not achieve the mean average fast enough for the test case.\n-    if (!HeapMonitor.statsHaveExpectedNumberSamples((int) expected, 10)) {\n+    if (!HeapMonitor.statsHaveExpectedNumberSamples((int) expected, acceptedErrorPercentage)) {\n@@ -111,5 +111,1 @@\n-    \/\/ 10% error ensures a sanity test without becoming flaky.\n-    \/\/ Flakiness is due to the fact that this test is dependent on the sampling interval, which is a\n-    \/\/ statistical geometric variable around the sampling interval. This means that the test could be\n-    \/\/ unlucky and not achieve the mean average fast enough for the test case.\n-    if (!HeapMonitor.statsHaveExpectedNumberSamples((int) expected, 10)) {\n+    if (!HeapMonitor.statsHaveExpectedNumberSamples((int) expected, acceptedErrorPercentage)) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"}]}