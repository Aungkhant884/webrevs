{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -44,0 +45,11 @@\n+void PLAB::startup_initialization() {\n+  if (!FLAG_IS_DEFAULT(MinTLABSize)) {\n+    if (FLAG_IS_DEFAULT(YoungPLABSize)) {\n+      FLAG_SET_ERGO(YoungPLABSize, MAX2(ThreadLocalAllocBuffer::min_size(), YoungPLABSize));\n+    }\n+    if (FLAG_IS_DEFAULT(OldPLABSize)) {\n+      FLAG_SET_ERGO(OldPLABSize, MAX2(ThreadLocalAllocBuffer::min_size(), OldPLABSize));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,2 @@\n+  static void startup_initialization();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/plab.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"gc\/shared\/plab.hpp\"\n@@ -843,0 +844,1 @@\n+  PLAB::startup_initialization();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc;\n+\n+\/*\n+ * @test TestPLABAdaptToMinTLABSize\n+ * @bug 8289137\n+ * @summary Make sure that Young\/OldPLABSize adapt to MinTLABSize setting.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver gc.TestPLABAdaptToMinTLABSize\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestPLABAdaptToMinTLABSize {\n+    private static void runTest(boolean shouldSucceed, String... extraArgs) throws Exception {\n+        ArrayList<String> testArguments = new ArrayList<String>();\n+        testArguments.add(\"-Xmx12m\");\n+        testArguments.add(\"-XX:+PrintFlagsFinal\");\n+        Collections.addAll(testArguments, extraArgs);\n+        testArguments.add(\"-version\");\n+\n+        ProcessBuilder pb = ProcessTools.createTestJvm(testArguments);\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        System.out.println(output.getStderr());\n+\n+        if (shouldSucceed) {\n+            output.shouldHaveExitValue(0);\n+\n+            long oldPLABSize = Long.parseLong(output.firstMatch(\"OldPLABSize\\\\s+=\\\\s(\\\\d+)\",1));\n+            long youngPLABSize = Long.parseLong(output.firstMatch(\"YoungPLABSize\\\\s+=\\\\s(\\\\d+)\",1));\n+            long minTLABSize = Long.parseLong(output.firstMatch(\"MinTLABSize\\\\s+=\\\\s(\\\\d+)\",1));\n+\n+            System.out.println(\"OldPLABSize=\" + oldPLABSize + \" YoungPLABSize=\" + youngPLABSize +\n+                               \"MinTLABSize=\" + minTLABSize);\n+\n+        } else {\n+            output.shouldNotHaveExitValue(0);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(true, \"-XX:MinTLABSize=100k\");\n+        \/\/ Should not succeed when explicitly specifying invalid combination.\n+        runTest(false, \"-XX:MinTLABSize=100k\", \"-XX:OldPLABSize=5k\");\n+        runTest(false, \"-XX:MinTLABSize=100k\", \"-XX:YoungPLABSize=5k\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestPLABAdaptToMinTLABSize.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}