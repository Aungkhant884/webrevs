{"files":[{"patch":"@@ -2272,1 +2272,0 @@\n-        Node* hook = new Node(1);\n@@ -2277,1 +2276,2 @@\n-          hook->add_req(new_base);\n+        } else {\n+          phase->record_for_igvn(new_base);\n@@ -2279,0 +2279,1 @@\n+\n@@ -2281,1 +2282,1 @@\n-          Node *ii = in(i);\n+          Node* ii = in(i);\n@@ -2292,1 +2293,2 @@\n-                  hook->add_req(new_phi);\n+                } else {\n+                  phase->record_for_igvn(new_phi);\n@@ -2311,7 +2313,3 @@\n-        \/\/ now transform the new nodes, and return the mergemem\n-        for (MergeMemStream mms(result); mms.next_non_empty(); ) {\n-          Node* phi = mms.memory();\n-          mms.set_memory(phase->transform(phi));\n-        }\n-        hook->destruct(igvn);\n-        \/\/ Replace self with the result.\n+        \/\/ Replace self with the result without transforming the new phi nodes now. This prevents a\n+        \/\/ potential dead loop because this phi is still alive during the transformations and could\n+        \/\/ let a dead loop check fail even though there is one without this phi.\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"}]}