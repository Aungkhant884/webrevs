{"files":[{"patch":"@@ -1177,11 +1177,0 @@\n-void C2_MacroAssembler::vshiftw_imm(int opcode, XMMRegister dst, int shift) {\n-  if (opcode == Op_RShiftVB) {\n-    psraw(dst, shift);\n-  } else if (opcode == Op_LShiftVB) {\n-    psllw(dst, shift);\n-  } else {\n-    assert((opcode == Op_URShiftVB),\"opcode should be Op_URShiftVB\");\n-    psrlw(dst, shift);\n-  }\n-}\n-\n@@ -1203,11 +1192,0 @@\n-void C2_MacroAssembler::vshiftw_imm(int opcode, XMMRegister dst, XMMRegister nds, int shift, int vector_len) {\n-  if (opcode == Op_RShiftVB) {\n-    vpsraw(dst, nds, shift, vector_len);\n-  } else if (opcode == Op_LShiftVB) {\n-    vpsllw(dst, nds, shift, vector_len);\n-  } else {\n-    assert((opcode == Op_URShiftVB),\"opcode should be Op_URShiftVB\");\n-    vpsrlw(dst, nds, shift, vector_len);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-  void vshiftw_imm(int opcode, XMMRegister dst, int shift);\n@@ -104,1 +103,0 @@\n-  void vshiftw_imm(int opcode, XMMRegister dst, XMMRegister nds, int shift, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5860,20 +5860,0 @@\n-instruct vshiftB_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n-  predicate(vector_length(n) <= 8);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  effect(TEMP dst, USE src, TEMP tmp, TEMP scratch);\n-  format %{\"vshiftB_imm $dst,$src,$shift\" %}\n-  ins_encode %{\n-    assert(UseSSE > 3, \"required\");\n-    int opcode = this->ideal_Opcode();\n-    bool sign = (opcode != Op_URShiftVB);\n-    __ vextendbw(sign, $tmp$$XMMRegister, $src$$XMMRegister);\n-    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $shift$$constant);\n-    __ movdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n-    __ pand($dst$$XMMRegister, $tmp$$XMMRegister);\n-    __ packuswb($dst$$XMMRegister, $dst$$XMMRegister);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -5905,24 +5885,0 @@\n-instruct vshift16B_imm(vec dst, vec src, immI8 shift, vec tmp1, vec tmp2, rRegI scratch) %{\n-  predicate(vector_length(n) == 16 && UseAVX <= 1);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  effect(TEMP dst, USE src, TEMP tmp1, TEMP tmp2, TEMP scratch);\n-  format %{\"vshift16B_imm $dst,$src,$shift\" %}\n-  ins_encode %{\n-    assert(UseSSE > 3, \"required\");\n-    int opcode = this->ideal_Opcode();\n-    bool sign = (opcode != Op_URShiftVB);\n-    __ vextendbw(sign, $tmp1$$XMMRegister, $src$$XMMRegister);\n-    __ vshiftw_imm(opcode, $tmp1$$XMMRegister, $shift$$constant);\n-    __ pshufd($tmp2$$XMMRegister, $src$$XMMRegister, 0xE);\n-    __ vextendbw(sign, $tmp2$$XMMRegister, $tmp2$$XMMRegister);\n-    __ vshiftw_imm(opcode, $tmp2$$XMMRegister, $shift$$constant);\n-    __ movdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n-    __ pand($tmp2$$XMMRegister, $dst$$XMMRegister);\n-    __ pand($dst$$XMMRegister, $tmp1$$XMMRegister);\n-    __ packuswb($dst$$XMMRegister, $tmp2$$XMMRegister);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -5950,20 +5906,0 @@\n-instruct vshift16B_avx_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n-  predicate(vector_length(n) == 16 && UseAVX > 1);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  effect(TEMP dst, TEMP tmp, TEMP scratch);\n-  format %{\"vshift16B_avx_imm $dst,$src,$shift\" %}\n-  ins_encode %{\n-    int opcode = this->ideal_Opcode();\n-    bool sign = (opcode != Op_URShiftVB);\n-    int vlen_enc = Assembler::AVX_256bit;\n-    __ vextendbw(sign, $tmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $tmp$$XMMRegister, $shift$$constant, vlen_enc);\n-    __ vpand($tmp$$XMMRegister, $tmp$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n-    __ vextracti128_high($dst$$XMMRegister, $tmp$$XMMRegister);\n-    __ vpackuswb($dst$$XMMRegister, $tmp$$XMMRegister, $dst$$XMMRegister, 0);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -5995,25 +5931,0 @@\n-instruct vshift32B_avx_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n-  predicate(vector_length(n) == 32);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  effect(TEMP dst, TEMP tmp, TEMP scratch);\n-  format %{\"vshift32B_avx_imm $dst,$src,$shift\" %}\n-  ins_encode %{\n-    assert(UseAVX > 1, \"required\");\n-    int opcode = this->ideal_Opcode();\n-    bool sign = (opcode != Op_URShiftVB);\n-    int vlen_enc = Assembler::AVX_256bit;\n-    __ vextracti128_high($tmp$$XMMRegister, $src$$XMMRegister);\n-    __ vextendbw(sign, $tmp$$XMMRegister, $tmp$$XMMRegister, vlen_enc);\n-    __ vextendbw(sign, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $tmp$$XMMRegister, $shift$$constant, vlen_enc);\n-    __ vshiftw_imm(opcode, $dst$$XMMRegister, $dst$$XMMRegister, $shift$$constant, vlen_enc);\n-    __ vpand($tmp$$XMMRegister, $tmp$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n-    __ vpand($dst$$XMMRegister, $dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n-    __ vpackuswb($dst$$XMMRegister, $dst$$XMMRegister, $tmp$$XMMRegister, vlen_enc);\n-    __ vpermq($dst$$XMMRegister, $dst$$XMMRegister, 0xD8, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n@@ -6048,28 +5959,0 @@\n-instruct vshift64B_avx_imm(vec dst, vec src, immI8 shift, vec tmp1, vec tmp2, rRegI scratch) %{\n-  predicate(vector_length(n) == 64);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP scratch);\n-  format %{\"vshift64B_avx_imm $dst,$src,$shift\" %}\n-  ins_encode %{\n-    assert(UseAVX > 2, \"required\");\n-    int opcode = this->ideal_Opcode();\n-    bool sign = (opcode != Op_URShiftVB);\n-    int vlen_enc = Assembler::AVX_512bit;\n-    __ vextracti64x4($tmp1$$XMMRegister, $src$$XMMRegister, 1);\n-    __ vextendbw(sign, $tmp1$$XMMRegister, $tmp1$$XMMRegister, vlen_enc);\n-    __ vextendbw(sign, $tmp2$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-    __ vshiftw_imm(opcode, $tmp1$$XMMRegister, $tmp1$$XMMRegister, $shift$$constant, vlen_enc);\n-    __ vshiftw_imm(opcode, $tmp2$$XMMRegister, $tmp2$$XMMRegister, $shift$$constant, vlen_enc);\n-    __ vmovdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n-    __ vpbroadcastd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-    __ vpand($tmp1$$XMMRegister, $tmp1$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-    __ vpand($tmp2$$XMMRegister, $tmp2$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-    __ vpackuswb($dst$$XMMRegister, $tmp1$$XMMRegister, $tmp2$$XMMRegister, vlen_enc);\n-    __ evmovdquq($tmp2$$XMMRegister, ExternalAddress(vector_byte_perm_mask()), vlen_enc, $scratch$$Register);\n-    __ vpermq($dst$$XMMRegister, $tmp2$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":0,"deletions":117,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -372,1 +372,1 @@\n-    Node* shift_cnt = gvn().transform(new LShiftCntVNode(cnt, vt));\n+    Node* shift_cnt = vector_shift_count(cnt, Op_LShiftI, elem_bt, num_elem);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}