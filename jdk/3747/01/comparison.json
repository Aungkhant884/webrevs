{"files":[{"patch":"@@ -5291,0 +5291,1 @@\n+  match(Set dst (LShiftVB src shift));\n@@ -5310,0 +5311,1 @@\n+  match(Set dst (LShiftVB src shift));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2057,1 +2057,2 @@\n-  match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n+  ifelse($4, B, match(Set dst (LShiftV$4 src shift));`\n+  ')match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1177,0 +1177,11 @@\n+void C2_MacroAssembler::vshiftw_imm(int opcode, XMMRegister dst, int shift) {\n+  if (opcode == Op_RShiftVB) {\n+    psraw(dst, shift);\n+  } else if (opcode == Op_LShiftVB) {\n+    psllw(dst, shift);\n+  } else {\n+    assert((opcode == Op_URShiftVB),\"opcode should be Op_URShiftVB\");\n+    psrlw(dst, shift);\n+  }\n+}\n+\n@@ -1192,0 +1203,11 @@\n+void C2_MacroAssembler::vshiftw_imm(int opcode, XMMRegister dst, XMMRegister nds, int shift, int vector_len) {\n+  if (opcode == Op_RShiftVB) {\n+    vpsraw(dst, nds, shift, vector_len);\n+  } else if (opcode == Op_LShiftVB) {\n+    vpsllw(dst, nds, shift, vector_len);\n+  } else {\n+    assert((opcode == Op_URShiftVB),\"opcode should be Op_URShiftVB\");\n+    vpsrlw(dst, nds, shift, vector_len);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+  void vshiftw_imm(int opcode, XMMRegister dst, int shift);\n@@ -103,0 +104,1 @@\n+  void vshiftw_imm(int opcode, XMMRegister dst, XMMRegister nds, int shift, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5860,0 +5860,20 @@\n+instruct vshiftB_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n+  predicate(vector_length(n) <= 8);\n+  match(Set dst ( LShiftVB src shift));\n+  match(Set dst ( RShiftVB src shift));\n+  match(Set dst (URShiftVB src shift));\n+  effect(TEMP dst, USE src, TEMP tmp, TEMP scratch);\n+  format %{\"vshiftB_imm $dst,$src,$shift\" %}\n+  ins_encode %{\n+    assert(UseSSE > 3, \"required\");\n+    int opcode = this->ideal_Opcode();\n+    bool sign = (opcode != Op_URShiftVB);\n+    __ vextendbw(sign, $tmp$$XMMRegister, $src$$XMMRegister);\n+    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $shift$$constant);\n+    __ movdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n+    __ pand($dst$$XMMRegister, $tmp$$XMMRegister);\n+    __ packuswb($dst$$XMMRegister, $dst$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -5885,0 +5905,24 @@\n+instruct vshift16B_imm(vec dst, vec src, immI8 shift, vec tmp1, vec tmp2, rRegI scratch) %{\n+  predicate(vector_length(n) == 16 && UseAVX <= 1);\n+  match(Set dst ( LShiftVB src shift));\n+  match(Set dst ( RShiftVB src shift));\n+  match(Set dst (URShiftVB src shift));\n+  effect(TEMP dst, USE src, TEMP tmp1, TEMP tmp2, TEMP scratch);\n+  format %{\"vshift16B_imm $dst,$src,$shift\" %}\n+  ins_encode %{\n+    assert(UseSSE > 3, \"required\");\n+    int opcode = this->ideal_Opcode();\n+    bool sign = (opcode != Op_URShiftVB);\n+    __ vextendbw(sign, $tmp1$$XMMRegister, $src$$XMMRegister);\n+    __ vshiftw_imm(opcode, $tmp1$$XMMRegister, $shift$$constant);\n+    __ pshufd($tmp2$$XMMRegister, $src$$XMMRegister, 0xE);\n+    __ vextendbw(sign, $tmp2$$XMMRegister, $tmp2$$XMMRegister);\n+    __ vshiftw_imm(opcode, $tmp2$$XMMRegister, $shift$$constant);\n+    __ movdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n+    __ pand($tmp2$$XMMRegister, $dst$$XMMRegister);\n+    __ pand($dst$$XMMRegister, $tmp1$$XMMRegister);\n+    __ packuswb($dst$$XMMRegister, $tmp2$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -5906,0 +5950,20 @@\n+instruct vshift16B_avx_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n+  predicate(vector_length(n) == 16 && UseAVX > 1);\n+  match(Set dst ( LShiftVB src shift));\n+  match(Set dst ( RShiftVB src shift));\n+  match(Set dst (URShiftVB src shift));\n+  effect(TEMP dst, TEMP tmp, TEMP scratch);\n+  format %{\"vshift16B_avx_imm $dst,$src,$shift\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    bool sign = (opcode != Op_URShiftVB);\n+    int vlen_enc = Assembler::AVX_256bit;\n+    __ vextendbw(sign, $tmp$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $tmp$$XMMRegister, $shift$$constant, vlen_enc);\n+    __ vpand($tmp$$XMMRegister, $tmp$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n+    __ vextracti128_high($dst$$XMMRegister, $tmp$$XMMRegister);\n+    __ vpackuswb($dst$$XMMRegister, $tmp$$XMMRegister, $dst$$XMMRegister, 0);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -5931,0 +5995,25 @@\n+instruct vshift32B_avx_imm(vec dst, vec src, immI8 shift, vec tmp, rRegI scratch) %{\n+  predicate(vector_length(n) == 32);\n+  match(Set dst ( LShiftVB src shift));\n+  match(Set dst ( RShiftVB src shift));\n+  match(Set dst (URShiftVB src shift));\n+  effect(TEMP dst, TEMP tmp, TEMP scratch);\n+  format %{\"vshift32B_avx_imm $dst,$src,$shift\" %}\n+  ins_encode %{\n+    assert(UseAVX > 1, \"required\");\n+    int opcode = this->ideal_Opcode();\n+    bool sign = (opcode != Op_URShiftVB);\n+    int vlen_enc = Assembler::AVX_256bit;\n+    __ vextracti128_high($tmp$$XMMRegister, $src$$XMMRegister);\n+    __ vextendbw(sign, $tmp$$XMMRegister, $tmp$$XMMRegister, vlen_enc);\n+    __ vextendbw(sign, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+    __ vshiftw_imm(opcode, $tmp$$XMMRegister, $tmp$$XMMRegister, $shift$$constant, vlen_enc);\n+    __ vshiftw_imm(opcode, $dst$$XMMRegister, $dst$$XMMRegister, $shift$$constant, vlen_enc);\n+    __ vpand($tmp$$XMMRegister, $tmp$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n+    __ vpand($dst$$XMMRegister, $dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), vlen_enc, $scratch$$Register);\n+    __ vpackuswb($dst$$XMMRegister, $dst$$XMMRegister, $tmp$$XMMRegister, vlen_enc);\n+    __ vpermq($dst$$XMMRegister, $dst$$XMMRegister, 0xD8, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -5959,0 +6048,28 @@\n+instruct vshift64B_avx_imm(vec dst, vec src, immI8 shift, vec tmp1, vec tmp2, rRegI scratch) %{\n+  predicate(vector_length(n) == 64);\n+  match(Set dst ( LShiftVB src shift));\n+  match(Set dst ( RShiftVB src shift));\n+  match(Set dst (URShiftVB src shift));\n+  effect(TEMP dst, TEMP tmp1, TEMP tmp2, TEMP scratch);\n+  format %{\"vshift64B_avx_imm $dst,$src,$shift\" %}\n+  ins_encode %{\n+    assert(UseAVX > 2, \"required\");\n+    int opcode = this->ideal_Opcode();\n+    bool sign = (opcode != Op_URShiftVB);\n+    int vlen_enc = Assembler::AVX_512bit;\n+    __ vextracti64x4($tmp1$$XMMRegister, $src$$XMMRegister, 1);\n+    __ vextendbw(sign, $tmp1$$XMMRegister, $tmp1$$XMMRegister, vlen_enc);\n+    __ vextendbw(sign, $tmp2$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+    __ vshiftw_imm(opcode, $tmp1$$XMMRegister, $tmp1$$XMMRegister, $shift$$constant, vlen_enc);\n+    __ vshiftw_imm(opcode, $tmp2$$XMMRegister, $tmp2$$XMMRegister, $shift$$constant, vlen_enc);\n+    __ vmovdqu($dst$$XMMRegister, ExternalAddress(vector_short_to_byte_mask()), $scratch$$Register);\n+    __ vpbroadcastd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+    __ vpand($tmp1$$XMMRegister, $tmp1$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+    __ vpand($tmp2$$XMMRegister, $tmp2$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+    __ vpackuswb($dst$$XMMRegister, $tmp1$$XMMRegister, $tmp2$$XMMRegister, vlen_enc);\n+    __ evmovdquq($tmp2$$XMMRegister, ExternalAddress(vector_byte_perm_mask()), vlen_enc, $scratch$$Register);\n+    __ vpermq($dst$$XMMRegister, $tmp2$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":117,"deletions":0,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.ShortVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorShuffle;\n+\n+\/*\n+ * @test\n+ * @bug 8265956\n+ * @modules jdk.incubator.vector\n+ * @run main\/othervm compiler.vectorapi.TestVectorShuffleIotaShort\n+ *\/\n+\n+public class TestVectorShuffleIotaShort {\n+    static final VectorSpecies<Short> SPECIESs = ShortVector.SPECIES_128;\n+\n+    static final int INVOC_COUNT = 50000;\n+\n+    static short[] as = {87, 65, 78, 71, 72, 69, 82, 69};\n+\n+    public static void testShuffleS() {\n+        ShortVector sv = (ShortVector) VectorShuffle.iota(SPECIESs, 0, 2, false).toVector();\n+        sv.intoArray(as, 0);\n+    }\n+\n+    public static void main(String[] args) {\n+\n+        for (int i = 0; i < INVOC_COUNT; i++) {\n+            testShuffleS();\n+        }\n+        for (int i = 0; i < as.length; i++) {\n+            System.out.print(as[i] + \", \");\n+        }\n+        System.out.println();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIotaShort.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}