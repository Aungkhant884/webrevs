{"files":[{"patch":"@@ -69,1 +69,1 @@\n-    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePatterns, true, false);\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePatterns, true \/* check end marker *\/, false \/* verbose *\/);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/BadNativeStackInErrorHandlingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-     * @param output\n-     * @return\n@@ -64,5 +62,5 @@\n-     * Given an open hs-err file, read it line by line and check for existence of a pattern. Will fail\n-     * if pattern are missing, or if the END marker is missing.\n-     * @param f input file\n-     * @param patterns an array of patterns that need to match, in that order\n-     * @param verbose if true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n+     * Given an open hs-err file, read it line by line and check for existence of a set of pattern. Will fail\n+     * if patterns are missing, or if the END marker is missing.\n+     * @param f Input file\n+     * @param patterns An array of patterns that need to match, in that order\n+     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n@@ -80,1 +78,1 @@\n-     *                        pattern cause the test to fail.\n+     *                        patterns cause the test to fail.\n@@ -83,2 +81,2 @@\n-     * @param checkEndMarker If true, we check for the final \"END\" in an hs-err file; it missing indicates hs-err file\n-     *                       printing did not complete successfully.\n+     * @param checkEndMarker If true, we check for the final \"END\" in an hs-err file; if it is missing it indicates\n+     *                        that hs-err file printing did not complete successfully.\n@@ -133,1 +131,1 @@\n-                lineNo ++;\n+                lineNo++;\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/HsErrFileUtils.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePattern, true, false);\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePattern, true \/* check end marker *\/, false \/* verbose *\/);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ResourceMarkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,1 +129,2 @@\n-        try (BufferedReader reader = new BufferedReader(new FileReader(hs_err_file))) {\n+        try (FileReader fr = new FileReader(hs_err_file);\n+             BufferedReader reader = new BufferedReader(fr)) {\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestDwarf.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false,true);\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false \/* check end marker *\/,true \/* verbose *\/);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TimeoutInErrorHandlingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false, true);\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false \/* check end marker *\/, true \/* verbose *\/);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/VeryEarlyAssertTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}