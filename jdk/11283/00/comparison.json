{"files":[{"patch":"@@ -61,16 +61,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-        throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-    }\n-\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-        throw new RuntimeException(\"hs-err file missing at \" +\n-                                   f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -80,13 +65,3 @@\n-    Pattern pattern =\n-        Pattern.compile(\"\\\\[error occurred during error reporting \\\\(printing native stack\\\\), id .*\\\\]\");\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-        if (pattern.matcher(line).matches()) {\n-            System.out.println(\"Found: \" + line + \".\");\n-            throw new RuntimeException(\"hs-err file should not contain: '\" +\n-                                       pattern + \"'\");\n-        }\n-        lastLine = line;\n-    }\n-    br.close();\n+    Pattern negativePatterns[] = {\n+        Pattern.compile(\"\\\\[error occurred during error reporting \\\\(printing native stack\\\\), id .*\\\\]\")\n+    };\n@@ -94,5 +69,1 @@\n-    if (!lastLine.equals(\"END.\")) {\n-        throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-        System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePatterns, true, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/BadNativeStackInErrorHandlingTest.java","additions":5,"deletions":34,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.*;\n@@ -63,2 +64,7 @@\n-     * Given an open hs-err file, read it line by line and check for pattern. Pattern\n-     * need to appear in order, but not necessarily uninterrupted.\n+     * Given an open hs-err file, read it line by line and check for existence of a pattern. Will fail\n+     * if pattern are missing, or if the END marker is missing.\n+     * @param f input file\n+     * @param patterns an array of patterns that need to match, in that order\n+     * @param verbose if true, the content of the hs-err file is printed while matching. If false, only the matched patterns\n+     *                are printed.\n+     * @throws RuntimeException, {@link IOException}\n@@ -67,0 +73,2 @@\n+        checkHsErrFileContent(f, patterns, null, true, verbose);\n+    }\n@@ -68,10 +76,25 @@\n-        FileInputStream fis = new FileInputStream(f);\n-        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-        String line = null;\n-\n-        int currentPattern = 0;\n-\n-        String lastLine = null;\n-        while ((line = br.readLine()) != null) {\n-            if (verbose) {\n-                System.out.println(line);\n+    \/**\n+     * Given an open hs-err file, read it line by line and check for various conditions.\n+     * @param f input file\n+     * @param positivePatterns Optional array of patterns that need to appear, in given order, in the file. Missing\n+     *                        pattern cause the test to fail.\n+     * @param negativePatterns Optional array of patterns that must not appear in the file; test fails if they do.\n+     *                        Order is irrelevant.\n+     * @param checkEndMarker If true, we check for the final \"END\" in an hs-err file; it missing indicates hs-err file\n+     *                       printing did not complete successfully.\n+     * @param verbose If true, the content of the hs-err file is printed while matching. If false, only important\n+     *               information are printed.\n+     * @throws RuntimeException, {@link IOException}\n+     *\/\n+    public static void checkHsErrFileContent(File f, Pattern[] positivePatterns, Pattern[] negativePatterns, boolean checkEndMarker, boolean verbose) throws IOException {\n+        try (\n+                FileInputStream fis = new FileInputStream(f);\n+                BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        ) {\n+            String line = null;\n+            String lastLine = null;\n+            int lineNo = 0;\n+\n+            Deque<Pattern> positivePatternStack = new ArrayDeque<Pattern>();\n+            if (positivePatterns != null) {\n+                Collections.addAll(positivePatternStack, positivePatterns);\n@@ -79,4 +102,28 @@\n-            if (currentPattern < patterns.length) {\n-                if (patterns[currentPattern].matcher(line).matches()) {\n-                    if (!verbose) {\n-                        System.out.println(line);\n+            Pattern currentPositivePattern = positivePatternStack.pollFirst();\n+\n+            while ((line = br.readLine()) != null) {\n+                if (verbose) {\n+                    System.out.println(line);\n+                }\n+                if (currentPositivePattern != null) {\n+                    if (currentPositivePattern.matcher(line).matches()) {\n+                        if (!verbose) {\n+                            System.out.println(line);\n+                        }\n+                        System.out.println(\"^^^ Matches \" + currentPositivePattern + \" at line \" + lineNo + \"^^^\");\n+                        currentPositivePattern = positivePatternStack.pollFirst();\n+                        if (currentPositivePattern == null && negativePatterns == null && checkEndMarker == false) {\n+                            System.out.println(\"Lazily skipping the rest of the hs-err file...\");\n+                            break; \/\/ Shortcut. Nothing to do.\n+                        }\n+                    }\n+                }\n+                if (negativePatterns != null) {\n+                    for (Pattern negativePattern : negativePatterns) {\n+                        if (negativePattern.matcher(line).matches()) {\n+                            if (!verbose) {\n+                                System.out.println(line);\n+                            }\n+                            System.out.println(\"^^^ Forbidden pattern found at line \" + lineNo + \": \" + negativePattern + \"^^^\");\n+                            throw new RuntimeException(\"Forbidden pattern found at line \" + lineNo + \": \" + negativePattern);\n+                        }\n@@ -84,2 +131,0 @@\n-                    System.out.println(\"^^^ Match \" + currentPattern + \": matches \" + patterns[currentPattern] + \"^^^\");\n-                    currentPattern ++;\n@@ -87,0 +132,2 @@\n+                lastLine = line;\n+                lineNo ++;\n@@ -88,11 +135,8 @@\n-            lastLine = line;\n-        }\n-        br.close();\n-\n-        if (currentPattern < patterns.length) {\n-            throw new RuntimeException(\"hs-err file incomplete (found \" + currentPattern + \" matching pattern, \" +\n-                                       \"first missing pattern: \" + patterns[currentPattern] + \")\");\n-        }\n-\n-        if (!lastLine.equals(\"END.\")) {\n-            throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n+            \/\/ Found all positive pattern?\n+            if (!positivePatternStack.isEmpty()) {\n+                throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" + positivePatternStack.peek() + \")\");\n+            }\n+            if (checkEndMarker && !lastLine.equals(\"END.\")) {\n+                throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n+            }\n+            System.out.println(\"hs-err file \" + f.getAbsolutePath() + \" scanned successfully.\");\n@@ -100,3 +144,0 @@\n-\n-        System.out.println(\"Found all expected pattern in hs-err file at \" + f.getAbsolutePath());\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/HsErrFileUtils.java","additions":73,"deletions":32,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.io.File;\n@@ -129,6 +130,2 @@\n-        String hs_err_file = output.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-        if (hs_err_file == null) {\n-            output.reportDiagnosticSummary();\n-            throw new RuntimeException(\"Did not find hs_err_pid file in output\");\n-        }\n-        Path hsErrPath = Paths.get(hs_err_file);\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output);\n+        Path hsErrPath = hs_err_file.toPath();\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/MachCodeFramesInErrorFile.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,16 +73,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-        throw new RuntimeException(\"Did not find hs_err_pid file in output.\\n\");\n-    }\n-\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-        throw new RuntimeException(\"hs_err_pid file missing at \"\n-                                   + f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err_pid file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -104,17 +89,0 @@\n-    int currentPattern = 0;\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-        if (currentPattern < pattern.length) {\n-            if (pattern[currentPattern].matcher(line).matches()) {\n-                System.out.println(\"Found: \" + line + \".\");\n-                currentPattern++;\n-            }\n-        }\n-        lastLine = line;\n-    }\n-    br.close();\n-\n-    if (currentPattern < pattern.length) {\n-        throw new RuntimeException(\"hs_err_pid file incomplete (first missing pattern: \" +  currentPattern + \")\");\n-    }\n@@ -122,5 +90,1 @@\n-    if (!lastLine.equals(\"END.\")) {\n-        throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-        System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false);\n@@ -128,1 +92,0 @@\n-    System.out.println(\"Done scanning hs_err_pid_file.\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/NestedThreadsListHandleInErrorHandlingTest.java","additions":2,"deletions":39,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -66,4 +66,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-      throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-    }\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -76,13 +73,1 @@\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-      throw new RuntimeException(\"hs-err file missing at \"\n-          + f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n-\n-    Pattern [] pattern = new Pattern[] {\n+    Pattern [] negativePattern = new Pattern[] {\n@@ -91,17 +76,0 @@\n-    int currentPattern = 0;\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-      if (currentPattern < pattern.length) {\n-        if (pattern[currentPattern].matcher(line).matches()) {\n-          System.out.println(\"Found: \" + line + \".\");\n-          currentPattern ++;\n-        }\n-      }\n-      lastLine = line;\n-    }\n-    br.close();\n-\n-    if (currentPattern == pattern.length) {\n-      throw new RuntimeException(\"hs-err file found secondary crash for ResourceMark\");\n-    }\n@@ -109,5 +77,1 @@\n-    if (!lastLine.equals(\"END.\")) {\n-      throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-      System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, null, negativePattern, true, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ResourceMarkTest.java","additions":3,"deletions":39,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -63,16 +63,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-      throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-    }\n-\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-      throw new RuntimeException(\"hs-err file missing at \"\n-          + f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -80,0 +65,2 @@\n+    \/\/ File should contain \"Will test SafeFetch, SafeFetch OK\". The latter indicates we survived the SafeFetch without\n+    \/\/ a secondary crash.\n@@ -84,17 +71,0 @@\n-    int currentPattern = 0;\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-      if (currentPattern < pattern.length) {\n-        if (pattern[currentPattern].matcher(line).matches()) {\n-          System.out.println(\"Found: \" + line + \".\");\n-          currentPattern ++;\n-        }\n-      }\n-      lastLine = line;\n-    }\n-    br.close();\n-\n-    if (currentPattern < pattern.length) {\n-      throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" +  currentPattern + \")\");\n-    }\n@@ -102,5 +72,1 @@\n-    if (!lastLine.equals(\"END.\")) {\n-      throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-      System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SafeFetchInErrorHandlingTest.java","additions":4,"deletions":38,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -66,4 +66,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-      throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-    }\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -76,11 +73,0 @@\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-      throw new RuntimeException(\"hs-err file missing at \"\n-          + f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n@@ -94,23 +80,2 @@\n-    int currentPattern = 0;\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-      if (currentPattern < pattern.length) {\n-        if (pattern[currentPattern].matcher(line).matches()) {\n-          System.out.println(\"Found: \" + line + \".\");\n-          currentPattern ++;\n-        }\n-      }\n-      lastLine = line;\n-    }\n-    br.close();\n-\n-    if (currentPattern < pattern.length) {\n-      throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" +  currentPattern + \")\");\n-    }\n-\n-    if (!lastLine.equals(\"END.\")) {\n-      throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-      System.out.println(\"End marker found.\");\n-    }\n+\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SecondaryErrorTest.java","additions":3,"deletions":38,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.regex.Pattern;\n@@ -91,4 +92,1 @@\n-        String hs_err_file = output.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-        if (hs_err_file == null) {\n-            throw new Error(\"Did not find hs-err file in output.\\n\");\n-        }\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output);\n@@ -96,7 +94,6 @@\n-        \/*\n-         * Check if hs_err files exist or not\n-         *\/\n-        File f = new File(hs_err_file);\n-        if (!f.exists()) {\n-            throw new Error(\"hs-err file missing at \"+ f.getAbsolutePath() + \".\\n\");\n-        }\n+        \/\/ Do a perfunctory check of the hs-err file produced by the crash.\n+        Pattern[] pattern = new Pattern[] {\n+            Pattern.compile(\".*fatal error: OutOfMemory encountered: Requested array size exceeds VM limit.*\")\n+        };\n+\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false);\n@@ -104,17 +101,0 @@\n-        \/*\n-         * Checking the completness of hs_err file. If last line of hs_err file is \"END\"\n-         * then it proves that file is complete.\n-         *\/\n-        try (FileInputStream fis = new FileInputStream(f);\n-            BufferedReader br = new BufferedReader(new InputStreamReader(fis))) {\n-            String line = null;\n-            String lastLine = null;\n-            while ((line = br.readLine()) != null) {\n-                lastLine = line;\n-            }\n-            if (!lastLine.equals(\"END.\")) {\n-                throw new Error(\"hs-err file incomplete (missing END marker.)\");\n-            } else {\n-                System.out.println(\"End marker found.\");\n-            }\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestCrashOnOutOfMemoryError.java","additions":8,"deletions":28,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -126,2 +126,0 @@\n-        Pattern pattern = Pattern.compile(\"hs_err_pid[0-9]*.log\");\n-        Matcher matcher = pattern.matcher(crashOutputString);\n@@ -129,5 +127,3 @@\n-        if (matcher.find()) {\n-            String hsErrFileName = matcher.group();\n-            System.out.println(\"hs_err_file: \" + hsErrFileName);\n-            File hs_err_file = new File(hsErrFileName);\n-            BufferedReader reader = new BufferedReader(new FileReader(hs_err_file));\n+\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(crashOut);\n+        try (BufferedReader reader = new BufferedReader(new FileReader(hs_err_file))) {\n@@ -138,0 +134,1 @@\n+            Pattern pattern = Pattern.compile(\"[CV][\\\\s\\\\t]+\\\\[([a-zA-Z0-9_.]+)\\\\+0x.+][\\\\s\\\\t]+.*\\\\+0x.+[\\\\s\\\\t]+\\\\([a-zA-Z0-9_.]+\\\\.[a-z]+:[1-9][0-9]*\\\\)\");\n@@ -150,2 +147,1 @@\n-                        pattern = Pattern.compile(\"[CV][\\\\s\\\\t]+\\\\[([a-zA-Z0-9_.]+)\\\\+0x.+][\\\\s\\\\t]+.*\\\\+0x.+[\\\\s\\\\t]+\\\\([a-zA-Z0-9_.]+\\\\.[a-z]+:[1-9][0-9]*\\\\)\");\n-                        matcher = pattern.matcher(line);\n+                        Matcher matcher = pattern.matcher(line);\n@@ -170,2 +166,0 @@\n-        } else {\n-            throw new RuntimeException(\"Could not find an hs_err_file\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestDwarf.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -73,16 +73,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-        throw new RuntimeException(\"Did not find hs_err_pid file in output.\\n\");\n-    }\n-\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-        throw new RuntimeException(\"hs_err_pid file missing at \"\n-                                   + f.getAbsolutePath() + \".\\n\");\n-    }\n-\n-    System.out.println(\"Found hs_err_pid file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -104,17 +89,0 @@\n-    int currentPattern = 0;\n-\n-    String lastLine = null;\n-    while ((line = br.readLine()) != null) {\n-        if (currentPattern < pattern.length) {\n-            if (pattern[currentPattern].matcher(line).matches()) {\n-                System.out.println(\"Found: \" + line + \".\");\n-                currentPattern++;\n-            }\n-        }\n-        lastLine = line;\n-    }\n-    br.close();\n-\n-    if (currentPattern < pattern.length) {\n-        throw new RuntimeException(\"hs_err_pid file incomplete (first missing pattern: \" +  currentPattern + \")\");\n-    }\n@@ -122,5 +90,1 @@\n-    if (!lastLine.equals(\"END.\")) {\n-        throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-        System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, false);\n@@ -128,1 +92,0 @@\n-    System.out.println(\"Done scanning hs_err_pid_file.\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ThreadsListHandleInErrorHandlingTest.java","additions":2,"deletions":39,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -98,2 +98,4 @@\n-        String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-        if (hs_err_file == null) {\n+        File hs_err_file;\n+        try {\n+            hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n+        } catch (Exception e) {\n@@ -105,12 +107,1 @@\n-            throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-        }\n-\n-        File f = new File(hs_err_file);\n-        if (!f.exists()) {\n-            if (!verbose) {\n-                System.err.println(\"<begin cmd output>\");\n-                System.err.println(output_detail.getOutput());\n-                System.err.println(\"<end cmd output>\");\n-            }\n-            throw new RuntimeException(\"hs-err file missing at \"\n-                + f.getAbsolutePath() + \".\\n\");\n+            throw e;\n@@ -121,5 +112,0 @@\n-        FileInputStream fis = new FileInputStream(f);\n-        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-        String line = null;\n-\n-\n@@ -130,21 +116,0 @@\n-        int currentPattern = 0;\n-\n-        String lastLine = null;\n-        StringBuilder saved_hs_err = new StringBuilder();\n-        while ((line = br.readLine()) != null) {\n-            saved_hs_err.append(line + System.lineSeparator());\n-            if (currentPattern < pattern.length) {\n-                if (pattern[currentPattern].matcher(line).matches()) {\n-                    System.out.println(\"Found: \" + line + \".\");\n-                    currentPattern ++;\n-                }\n-            }\n-            lastLine = line;\n-        }\n-        br.close();\n-\n-        if (verbose) {\n-            System.err.println(\"<begin hs_err contents>\");\n-            System.err.print(saved_hs_err);\n-            System.err.println(\"<end hs_err contents>\");\n-        }\n@@ -152,8 +117,4 @@\n-        if (currentPattern < pattern.length) {\n-            if (!verbose) {\n-                System.err.println(\"<begin hs_err contents>\");\n-                System.err.print(saved_hs_err);\n-                System.err.println(\"<end hs_err contents>\");\n-            }\n-            throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" +  currentPattern + \")\");\n-        }\n+        \/\/ Note: we *dont* check for the end marker, since the hs-err file will likely not have\n+        \/\/ one but a global timeout marker. As explained above, we don't check for that one either\n+        \/\/ since it is too instable.\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false,true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TimeoutInErrorHandlingTest.java","additions":9,"deletions":48,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -64,4 +64,1 @@\n-    String hs_err_file = output_detail.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n-    if (hs_err_file == null) {\n-      throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n-    }\n+    File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n@@ -72,5 +69,2 @@\n-    File f = new File(hs_err_file);\n-    if (!f.exists()) {\n-      throw new RuntimeException(\"hs-err file missing at \"\n-              + f.getAbsolutePath() + \".\\n\");\n-    }\n+    \/\/ It is highly likely that we miss the END marker, too, since its likely we hit the\n+    \/\/ secondary error recursion limit.\n@@ -78,7 +72,1 @@\n-    System.out.println(\"Found hs_err file. Scanning...\");\n-\n-    FileInputStream fis = new FileInputStream(f);\n-    BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-    String line = null;\n-\n-    Pattern[] pattern = new Pattern[]{\n+    Pattern[] pattern = new Pattern[] {\n@@ -87,26 +75,1 @@\n-    int currentPattern = 0;\n-\n-    boolean endMarkerFound = false;\n-    while ((line = br.readLine()) != null) {\n-      if (currentPattern < pattern.length) {\n-        if (pattern[currentPattern].matcher(line).matches()) {\n-          System.out.println(\"Found: \" + line + \".\");\n-          currentPattern++;\n-        }\n-      }\n-      if (line.equals(\"END.\")) {\n-        endMarkerFound = true;\n-        break;\n-      }\n-    }\n-    br.close();\n-\n-    if (currentPattern < pattern.length) {\n-      throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" + currentPattern + \")\");\n-    }\n-\n-    if (!endMarkerFound) {\n-      throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n-    } else {\n-      System.out.println(\"End marker found.\");\n-    }\n+    HsErrFileUtils.checkHsErrFileContent(hs_err_file, pattern, null, false, true);\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/VeryEarlyAssertTest.java","additions":5,"deletions":42,"binary":false,"changes":47,"status":"modified"}]}