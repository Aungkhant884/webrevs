{"files":[{"patch":"@@ -200,2 +200,22 @@\n- * All the native linker implementations limit the function descriptors that they support to those that contain\n- * only so-called <em>canonical<\/em> layouts. A canonical layout has the following characteristics:\n+ * All native linker implementations operate on a subset of memory layouts. More formally, a layout {@code L}\n+ * is supported by a native linker {@code NL} iff:\n+ * <ul>\n+ * <li>{@code L} is a value layout {@code V} and {@code V.withoutName()} is equal to one of the following layout constants:\n+ * <ul>\n+ * <li>{@link ValueLayout#JAVA_BOOLEAN}<\/li>\n+ * <li>{@link ValueLayout#JAVA_BYTE}<\/li>\n+ * <li>{@link ValueLayout#JAVA_CHAR}<\/li>\n+ * <li>{@link ValueLayout#JAVA_SHORT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_INT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_LONG}<\/li>\n+ * <li>{@link ValueLayout#JAVA_FLOAT}<\/li>\n+ * <li>{@link ValueLayout#JAVA_DOUBLE}<\/li>\n+ * <\/ul><\/li>\n+ * <li>{@code L} is an address layout {@code A} and {@code A.withoutTargetLayout().withoutName()} is equal to {@link ValueLayout#ADDRESS}<\/li>\n+ * <li>{@code L} is a sequence layout {@code S} and all the following conditions hold:\n+ * <ol>\n+ * <li>the alignment constraint of {@code S} is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>, and<\/li>\n+ * <li>{@code S.elementLayout()} is a layout supported by {@code NL}.<\/li>\n+ * <\/ol>\n+ * <\/li>\n+ * <li>{@code L} is a group layout {@code G} and all the following conditions hold:\n@@ -203,6 +223,4 @@\n- * <li>Its alignment constraint is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a><\/li>\n- * <li>If it is a {@linkplain ValueLayout value layout}, its {@linkplain ValueLayout#order() byte order} is\n- * the {@linkplain ByteOrder#nativeOrder() native byte order}.\n- * <li>If it is a {@linkplain GroupLayout group layout}, its size is a multiple of its alignment constraint, and<\/li>\n- * <li>It does not contain padding other than what is strictly required to align its non-padding layout elements,\n- * or to satisfy constraint 3<\/li>\n+ * <li>the alignment constraint of {@code G} is set to its <a href=\"MemoryLayout.html#layout-align\">natural alignment<\/a>;<\/li>\n+ * <li>the size of {@code G} is a multiple of its alignment constraint;<\/li>\n+ * <li>each member layout in {@code G.memberLayouts()} is either a padding layout or a layout supported by {@code NL}, and<\/li>\n+ * <li>{@code G} does not contain padding other than what is strictly required to align its non-padding layout elements, or to satisfy (2).<\/li>\n@@ -210,0 +228,5 @@\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ * A native linker only supports function descriptors whose argument\/return layouts are layouts supported by that linker\n+ * and are not sequence layouts.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import java.util.Set;\n@@ -151,1 +152,0 @@\n-        checkHasNaturalAlignment(layout);\n@@ -153,1 +153,1 @@\n-            checkByteOrder(vl);\n+            checkSupported(vl);\n@@ -155,0 +155,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -170,0 +171,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -179,0 +181,1 @@\n+            checkHasNaturalAlignment(layout);\n@@ -203,0 +206,10 @@\n+    private static void checkSupported(ValueLayout valueLayout) {\n+        valueLayout = valueLayout.withoutName();\n+        if (valueLayout instanceof AddressLayout addressLayout) {\n+            valueLayout = addressLayout.withoutTargetLayout();\n+        }\n+        if (!SUPPORTED_LAYOUTS.contains(valueLayout.withoutName())) {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + valueLayout);\n+        }\n+    }\n+\n@@ -235,5 +248,11 @@\n-    private void checkByteOrder(ValueLayout vl) {\n-        if (vl.order() != linkerByteOrder()) {\n-            throw new IllegalArgumentException(\"Layout does not have the right byte order: \" + vl);\n-        }\n-    }\n+    private static final Set<MemoryLayout> SUPPORTED_LAYOUTS = Set.of(\n+            ValueLayout.JAVA_BOOLEAN,\n+            ValueLayout.JAVA_BYTE,\n+            ValueLayout.JAVA_CHAR,\n+            ValueLayout.JAVA_SHORT,\n+            ValueLayout.JAVA_INT,\n+            ValueLayout.JAVA_FLOAT,\n+            ValueLayout.JAVA_LONG,\n+            ValueLayout.JAVA_DOUBLE,\n+            ValueLayout.ADDRESS\n+    );\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 2%i4\"\n@@ -126,1 +126,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 2%a8\"\n@@ -130,1 +130,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 4%c2\"\n@@ -138,1 +138,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%s2\"\n@@ -147,1 +147,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%s2\"\n@@ -154,1 +154,1 @@\n-                    \"Layout alignment must be natural alignment\"\n+                    \"Unsupported layout: 1%i4\"\n@@ -165,1 +165,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n@@ -169,1 +169,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n@@ -173,1 +173,1 @@\n-                    \"Layout does not have the right byte order\"\n+                    \"Unsupported layout: I4\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}