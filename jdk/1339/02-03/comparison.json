{"files":[{"patch":"@@ -161,2 +161,1 @@\n-             \"bad block size in list[%u] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b));\n-      MetaWord* const p = (MetaWord*)b;\n+             \"bad block size in list[%d] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b));\n@@ -166,1 +165,1 @@\n-      return p;\n+      return (MetaWord*)b;\n@@ -189,1 +188,1 @@\n-               \"bad block size in list[%u] at pos %d (\" BLOCK_FORMAT \")\",\n+               \"bad block size in list[%d] at pos %d (\" BLOCK_FORMAT \")\",\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,6 +51,6 @@\n-  ((n) ? (n)->_canary : 0), \\\n-  p2i((n) ? (n)->_parent : NULL), \\\n-  p2i((n) ? (n)->_left : NULL), \\\n-  p2i((n) ? (n)->_right : NULL), \\\n-  p2i((n) ? (n)->_next : NULL), \\\n-  ((n) ? (n)->_word_size : 0)\n+  (n)->_canary, \\\n+  p2i((n)->_parent), \\\n+  p2i((n)->_left), \\\n+  p2i((n)->_right), \\\n+  p2i((n)->_next), \\\n+  (n)->_word_size\n@@ -78,1 +78,0 @@\n-\n@@ -88,0 +87,13 @@\n+\/\/ Helper for verify()\n+void BlockTree::verify_node_pointer(const Node* n) const {\n+  tree_assert(os::is_readable_pointer(n),\n+              \"Invalid node: @\" PTR_FORMAT \" is unreadable.\", p2i(n));\n+  \/\/ If the canary is broken, this is either an invalid node pointer or\n+  \/\/ the node has been overwritten. Either way, print a hex dump, then\n+  \/\/ assert away.\n+  if (n->_canary != Node::_canary_value) {\n+    os::print_hex_dump(tty, (address)n, (address)n + sizeof(Node), 1);\n+    tree_assert(false, \"Invalid node: @\" PTR_FORMAT \" canary broken or pointer invalid\", p2i(n));\n+  }\n+}\n+\n@@ -110,0 +122,2 @@\n+      verify_node_pointer(n);\n+\n@@ -112,1 +126,1 @@\n-      tree_assert(info.depth < 10000, \"too deep (%u)\", info.depth);\n+      tree_assert(info.depth < 10000, \"too deep (%d)\", info.depth);\n@@ -115,3 +129,0 @@\n-      \/\/ Verify node.\n-      tree_assert_invalid_node(n->_canary == Node::_canary_value, n);\n-\n@@ -125,2 +136,2 @@\n-      tree_assert_invalid_node(n->_word_size >= MinWordSize &&\n-                               n->_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE, n);\n+      tree_assert_invalid_node(n->_word_size >= MinWordSize, n);\n+      tree_assert_invalid_node(n->_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE, n);\n@@ -158,2 +169,2 @@\n-        tree_assert_invalid_node(n2->_canary == Node::_canary_value, n2);\n-        tree_assert_invalid_node(n2 != n, n2);\n+        verify_node_pointer(n2);\n+        tree_assert_invalid_node(n2 != n, n2); \/\/ catch simple circles\n@@ -185,1 +196,0 @@\n-\n@@ -202,1 +212,6 @@\n-      st->print_cr(NODE_FORMAT, NODE_FORMAT_ARGS(n));\n+      if (os::is_readable_pointer(n)) {\n+        st->print_cr(NODE_FORMAT, NODE_FORMAT_ARGS(n));\n+      } else {\n+        st->print_cr(\"@\" PTR_FORMAT \": unreadable (skipping subtree)\", p2i(n));\n+        continue; \/\/ don't print this subtree\n+      }\n@@ -207,1 +222,6 @@\n-        st->print_cr(NODE_FORMAT, NODE_FORMAT_ARGS(n2));\n+        if (os::is_readable_pointer(n2)) {\n+          st->print_cr(NODE_FORMAT, NODE_FORMAT_ARGS(n2));\n+        } else {\n+          st->print_cr(\"@\" PTR_FORMAT \": unreadable (skipping rest of chain).\", p2i(n2));\n+          break; \/\/ stop printing this chain.\n+        }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":38,"deletions":18,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -340,0 +340,2 @@\n+  \/\/ Helper for verify()\n+  void verify_node_pointer(const Node* n) const;\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}