{"files":[{"patch":"@@ -189,1 +189,1 @@\n-      for (Block* b = _blocks[i]; b != NULL; b = b->_next, pos ++) {\n+      for (Block* b = _blocks[i]; b != NULL; b = b->_next, pos++) {\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  \": canary: \" INTPTR_FORMAT \\\n+  \": canary \" INTPTR_FORMAT \\\n@@ -55,1 +55,1 @@\n-  p2i((n) ? (n)->_next : 0), \\\n+  p2i((n) ? (n)->_next : NULL), \\\n@@ -62,2 +62,2 @@\n-\/\/ This assert prints the tree, then stops (generic message)\n-#define assrt0(cond, format, ...) \\\n+\/\/ This assert prints the tree too\n+#define tree_assert(cond, format, ...) \\\n@@ -74,0 +74,4 @@\n+\/\/ Assert, prints tree and specific given node\n+#define tree_assert_invalid_node(cond, failure_node) \\\n+  tree_assert(cond, \"Invalid node: \" NODE_FORMAT, NODE_FORMAT_ARGS(failure_node))\n+\n@@ -87,3 +91,0 @@\n-  \/\/ assert a condition with information about node \"n\"\n-  #define assrt0n(cond, failure_node) assrt0(cond, \"Invalid node: \" NODE_FORMAT, NODE_FORMAT_ARGS(failure_node))\n-\n@@ -111,1 +112,1 @@\n-      assrt0(info.depth < 10000, \"too deep (%u)\", info.depth);\n+      tree_assert(info.depth < 10000, \"too deep (%u)\", info.depth);\n@@ -115,1 +116,1 @@\n-      assrt0n(n->_canary == Node::_canary_value, n);\n+      tree_assert_invalid_node(n->_canary == Node::_canary_value, n);\n@@ -118,1 +119,1 @@\n-        assrt0n(n->_parent == NULL, n);\n+        tree_assert_invalid_node(n->_parent == NULL, n);\n@@ -120,1 +121,1 @@\n-        assrt0n(n->_parent != NULL, n);\n+        tree_assert_invalid_node(n->_parent != NULL, n);\n@@ -124,4 +125,4 @@\n-      assrt0n(n->_word_size >= MinWordSize &&\n-              n->_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE, n);\n-      assrt0n(n->_word_size > info.lim1, n);\n-      assrt0n(n->_word_size < info.lim2, n);\n+      tree_assert_invalid_node(n->_word_size >= MinWordSize &&\n+                               n->_word_size <= chunklevel::MAX_CHUNK_WORD_SIZE, n);\n+      tree_assert_invalid_node(n->_word_size > info.lim1, n);\n+      tree_assert_invalid_node(n->_word_size < info.lim2, n);\n@@ -131,2 +132,2 @@\n-        assrt0n(n->_left != n, n);\n-        assrt0n(n->_left->_parent == n, n);\n+        tree_assert_invalid_node(n->_left != n, n);\n+        tree_assert_invalid_node(n->_left->_parent == n, n);\n@@ -143,2 +144,2 @@\n-        assrt0n(n->_right != n, n);\n-        assrt0n(n->_right->_parent == n, n);\n+        tree_assert_invalid_node(n->_right != n, n);\n+        tree_assert_invalid_node(n->_right->_parent == n, n);\n@@ -157,3 +158,3 @@\n-        assrt0n(n2->_canary == Node::_canary_value, n2);\n-        assrt0n(n2 != n, n2);\n-        assrt0n(n2->_word_size == n->_word_size, n2);\n+        tree_assert_invalid_node(n2->_canary == Node::_canary_value, n2);\n+        tree_assert_invalid_node(n2 != n, n2);\n+        tree_assert_invalid_node(n2->_word_size == n->_word_size, n2);\n@@ -178,3 +179,0 @@\n-#undef assrt\n-#undef assrt0\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.cpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"}]}