{"files":[{"patch":"@@ -156,4 +156,1 @@\n-      assert(_blocks[index] != NULL &&\n-             _blocks[index]->_word_size >= word_size, \"sanity\");\n-\n-      MetaWord* const p = (MetaWord*)_blocks[index];\n+      Block* b = _blocks[index];\n@@ -161,3 +158,6 @@\n-\n-      _blocks[index] = _blocks[index]->_next;\n-\n+      assert(b != NULL, \"Sanity\");\n+      assert(b->_word_size >= word_size &&\n+             b->_word_size == real_word_size,\n+             \"bad block size in list[%u] (\" BLOCK_FORMAT \")\", index, BLOCK_FORMAT_ARGS(b));\n+      MetaWord* const p = (MetaWord*)b;\n+      _blocks[index] = b->_next;\n@@ -166,1 +166,0 @@\n-\n@@ -168,1 +167,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+    \/\/  (Note: all null if this is a stacked node)\n@@ -112,0 +113,7 @@\n+#ifdef ASSERT\n+    bool valid() const {\n+      return _canary == _canary_value &&\n+        _word_size >= sizeof(Node) &&\n+        _word_size < chunklevel::MAX_CHUNK_WORD_SIZE;\n+    }\n+#endif\n@@ -117,0 +125,5 @@\n+#ifdef ASSERT\n+  \/\/ Run a quick check on a node; upon suspicion dive into a full tree check.\n+  void check_node(const Node* n) const { if (!n->valid()) verify(); }\n+#endif\n+\n@@ -210,1 +223,1 @@\n-  static void insert(Node* insertion_point, Node* n) {\n+  void insert(Node* insertion_point, Node* n) {\n@@ -213,0 +226,1 @@\n+      DEBUG_ONLY(check_node(insertion_point);)\n@@ -236,1 +250,1 @@\n-  static Node* find_closest_fit(Node* n, size_t s) {\n+  Node* find_closest_fit(Node* n, size_t s) {\n@@ -239,0 +253,1 @@\n+      DEBUG_ONLY(check_node(n);)\n@@ -353,0 +368,1 @@\n+      DEBUG_ONLY(check_node(n);)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}