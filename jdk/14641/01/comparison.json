{"files":[{"patch":"@@ -34,1 +34,1 @@\n-\/\/ by the VM, suhch as java.lang.Object and java.lang.String. These\n+\/\/ by the VM, such as java.lang.Object and java.lang.String. These\n@@ -107,0 +107,1 @@\n+  do_klass(VMSupport_klass,                             jdk_internal_vm_VMSupport                             ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -760,1 +760,1 @@\n-  template(decodeAndThrowThrowable_signature,          \"(JZ)V\")                                                   \\\n+  template(decodeAndThrowThrowable_signature,          \"(IJZ)V\")                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -585,1 +585,1 @@\n-    JVMCI_THROW_MSG_0(InternalError, err_msg(\"Primitive type %s should be handled in Java code\", class_name->as_C_string()));\n+    JVMCI_THROW_MSG_0(InternalError, err_msg(\"Primitive type %s should be handled in Java code\", str));\n@@ -2836,3 +2836,1 @@\n-  \/\/ load VMSupport\n-  Symbol* klass = vmSymbols::jdk_internal_vm_VMSupport();\n-  Klass* k = SystemDictionary::resolve_or_fail(klass, true, CHECK_NULL);\n+  Klass* k = vmClasses::VMSupport_klass();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -387,2 +387,2 @@\n-  \/\/ Decodes the exception in `buffer` in `_to_env` and throws it.\n-  virtual void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) = 0;\n+  \/\/ Decodes the exception in `format` and `buffer` in `_to_env` and throws it.\n+  virtual void decode(JavaThread* THREAD, Klass* vmSupport, jint format, jlong buffer) = 0;\n@@ -392,5 +392,1 @@\n-    \/\/ Resolve VMSupport class explicitly as HotSpotJVMCI::compute_offsets\n-    \/\/ may not have been called.\n-    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n-    guarantee(!HAS_PENDING_EXCEPTION, \"\");\n-\n+    Klass* vmSupport = vmClasses::VMSupport_klass();\n@@ -402,1 +398,1 @@\n-        decode(THREAD, vmSupport, 0L);\n+        decode(THREAD, vmSupport, -1, 0L);\n@@ -410,1 +406,1 @@\n-        decode(THREAD, vmSupport, -2L);\n+        decode(THREAD, vmSupport, -3, 0L);\n@@ -413,1 +409,2 @@\n-        Symbol *ex_name = PENDING_EXCEPTION->klass()->name();\n+        Handle throwable = Handle(THREAD, PENDING_EXCEPTION);\n+        Symbol *ex_name = throwable->klass()->name();\n@@ -416,1 +413,1 @@\n-          decode(THREAD, vmSupport, -1L);\n+          decode(THREAD, vmSupport, -2, 0L);\n@@ -418,1 +415,7 @@\n-          decode(THREAD, vmSupport, -2L);\n+          char* char_buffer = (char*) buffer + 4;\n+          stringStream st(char_buffer, (size_t) buffer_size - 4);\n+          java_lang_Throwable::print_stack_trace(throwable, &st);\n+          int len = st.size();\n+          *((u4*) buffer) = len;\n+          JVMCI_event_1(\"error translating exception: %s\", char_buffer);\n+          decode(THREAD, vmSupport, -3, buffer);\n@@ -427,1 +430,1 @@\n-        decode(THREAD, vmSupport, buffer);\n+        decode(THREAD, vmSupport, 0, buffer);\n@@ -455,1 +458,1 @@\n-  void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) {\n+  void decode(JavaThread* THREAD, Klass* vmSupport, jint format, jlong buffer) {\n@@ -459,1 +462,1 @@\n-                                buffer, false);\n+                                format, buffer, false);\n@@ -478,1 +481,1 @@\n-  void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) {\n+  void decode(JavaThread* THREAD, Klass* vmSupport, jint format, jlong buffer) {\n@@ -480,0 +483,1 @@\n+    jargs.push_int(format);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-static InstanceKlass* load_and_initialize_klass(Symbol* sh, TRAPS) {\n-  Klass* k = SystemDictionary::resolve_or_fail(sh, true, CHECK_NULL);\n+static InstanceKlass* initialize_klass(Klass* k, TRAPS) {\n@@ -71,3 +70,1 @@\n-  \/\/ load VMSupport\n-  Symbol* klass = vmSymbols::jdk_internal_vm_VMSupport();\n-  InstanceKlass* k = load_and_initialize_klass(klass, THREAD);\n+  InstanceKlass* k = initialize_klass(vmClasses::VMSupport_klass(), THREAD);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -331,3 +331,1 @@\n-  \/\/ load VMSupport\n-  Symbol* klass = vmSymbols::jdk_internal_vm_VMSupport();\n-  Klass* k = SystemDictionary::resolve_or_fail(klass, true, CHECK);\n+  Klass* k = vmClasses::VMSupport_klass();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -115,4 +116,1 @@\n-     * Decodes the exception encoded in {@code errorOrBuffer} and throws it.\n-     *\n-     * @param errorOrBuffer an error code or a native byte errorOrBuffer containing an exception encoded by\n-     *            {@link #encodeThrowable}. Error code values and their meanings are:\n+     * Decodes the exception described by {@code format} and {@code buffer} and throws it.\n@@ -120,0 +118,1 @@\n+     * @param format specifies how to interpret {@code buffer}:\n@@ -121,3 +120,5 @@\n-     *             0: native memory for the errorOrBuffer could not be allocated\n-     *            -1: an OutOfMemoryError was thrown while encoding the exception\n-     *            -2: some other throwable was thrown while encoding the exception\n+     *             0: {@code buffer} was created by {@link #encodeThrowable}\n+     *            -1: native memory for {@code buffer} could not be allocated\n+     *            -2: an OutOfMemoryError was thrown while encoding the exception\n+     *            -3: some other problem occured while encoding the exception. If {@code buffer != 0},\n+     *                it contains a {@code struct { u4 len; char[len] desc}} where {@code desc} describes the problem\n@@ -125,2 +126,1 @@\n-     * @param errorOrBuffer a native byte errorOrBuffer containing an exception encoded by\n-     *            {@link #encodeThrowable}\n+     * @param buffer encoded info about the exception to throw (depends on {@code format})\n@@ -129,2 +129,2 @@\n-    public static void decodeAndThrowThrowable(long errorOrBuffer, boolean inJVMHeap) throws Throwable {\n-        if (errorOrBuffer >= -2L && errorOrBuffer <= 0) {\n+    public static void decodeAndThrowThrowable(int format, long buffer, boolean inJVMHeap) throws Throwable {\n+        if (format != 0) {\n@@ -133,1 +133,1 @@\n-            if (errorOrBuffer == 0) {\n+            if (format == -1) {\n@@ -136,1 +136,1 @@\n-            if (errorOrBuffer == -1L) {\n+            if (format == -2L) {\n@@ -139,0 +139,4 @@\n+            if (format == -3L) {\n+                byte[] bytes = bufferToBytes(buffer);\n+                throw new InternalError(\"unexpected problem occurred \" + context + \": \" + new String(bytes, StandardCharsets.UTF_8));\n+            }\n@@ -141,4 +145,8 @@\n-        int encodingLength = U.getInt(errorOrBuffer);\n-        byte[] encoding = new byte[encodingLength];\n-        U.copyMemory(null, errorOrBuffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n-        throw TranslatedException.decodeThrowable(encoding);\n+        throw TranslatedException.decodeThrowable(bufferToBytes(buffer));\n+    }\n+\n+    private static byte[] bufferToBytes(long buffer) {\n+        int len = U.getInt(buffer);\n+        byte[] bytes = new byte[len];\n+        U.copyMemory(null, buffer + 4, bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, len);\n+        return bytes;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+        int format = 0;\n@@ -74,1 +75,1 @@\n-                        VMSupport.decodeAndThrowThrowable(buffer, true);\n+                        VMSupport.decodeAndThrowThrowable(format, buffer, true);\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}