{"files":[{"patch":"@@ -34,1 +34,1 @@\n-\/\/ by the VM, suhch as java.lang.Object and java.lang.String. These\n+\/\/ by the VM, such as java.lang.Object and java.lang.String. These\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -760,1 +760,1 @@\n-  template(decodeAndThrowThrowable_signature,          \"(JZ)V\")                                                   \\\n+  template(decodeAndThrowThrowable_signature,          \"(IJZ)V\")                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -585,1 +585,1 @@\n-    JVMCI_THROW_MSG_0(InternalError, err_msg(\"Primitive type %s should be handled in Java code\", class_name->as_C_string()));\n+    JVMCI_THROW_MSG_0(InternalError, err_msg(\"Primitive type %s should be handled in Java code\", str));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -377,0 +377,9 @@\n+  enum DecodeFormat {\n+    _encoded_ok        = 0, \/\/ exception was successfully encoded into buffer\n+    _buffer_alloc_fail = 1, \/\/ native memory for buffer could not be allocated\n+    _encode_oome_fail  = 2, \/\/ OutOfMemoryError thrown during encoding\n+    _encode_fail       = 3  \/\/ some other problem occured during encoding. If buffer != 0,\n+                            \/\/ buffer contains a `struct { u4 len; char[len] desc}`\n+                            \/\/ describing the problem\n+  };\n+\n@@ -385,1 +394,1 @@\n-  virtual int encode(JavaThread* THREAD, Klass* vmSupport, jlong buffer, int buffer_size) = 0;\n+  virtual int encode(JavaThread* THREAD, jlong buffer, int buffer_size) = 0;\n@@ -388,1 +397,1 @@\n-  virtual void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) = 0;\n+  virtual void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) = 0;\n@@ -392,5 +401,0 @@\n-    \/\/ Resolve VMSupport class explicitly as HotSpotJVMCI::compute_offsets\n-    \/\/ may not have been called.\n-    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n-    guarantee(!HAS_PENDING_EXCEPTION, \"\");\n-\n@@ -402,1 +406,2 @@\n-        decode(THREAD, vmSupport, 0L);\n+        JVMCI_event_1(\"error translating exception: translation buffer allocation failed\");\n+        decode(THREAD, _buffer_alloc_fail, 0L);\n@@ -405,15 +410,3 @@\n-      int res = encode(THREAD, vmSupport, buffer, buffer_size);\n-      if (_from_env != nullptr && !_from_env->is_hotspot() && _from_env->has_pending_exception()) {\n-        \/\/ Cannot get name of exception thrown by `encode` as that involves\n-        \/\/ calling into libjvmci which in turn can raise another exception.\n-        _from_env->clear_pending_exception();\n-        decode(THREAD, vmSupport, -2L);\n-        return;\n-      } else if (HAS_PENDING_EXCEPTION) {\n-        Symbol *ex_name = PENDING_EXCEPTION->klass()->name();\n-        CLEAR_PENDING_EXCEPTION;\n-        if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n-          decode(THREAD, vmSupport, -1L);\n-        } else {\n-          decode(THREAD, vmSupport, -2L);\n-        }\n+      int res = encode(THREAD, buffer, buffer_size);\n+      if (_to_env->has_pending_exception()) {\n+        \/\/ Propagate pending exception\n@@ -421,1 +414,2 @@\n-      } else if (res < 0) {\n+      }\n+      if (res < 0) {\n@@ -427,1 +421,1 @@\n-        decode(THREAD, vmSupport, buffer);\n+        decode(THREAD, _encoded_ok, buffer);\n@@ -442,1 +436,20 @@\n-  int encode(JavaThread* THREAD, Klass* vmSupport, jlong buffer, int buffer_size) {\n+  int encode(JavaThread* THREAD, jlong buffer, int buffer_size) {\n+    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n+    if (HAS_PENDING_EXCEPTION) {\n+      Handle throwable = Handle(THREAD, PENDING_EXCEPTION);\n+      Symbol *ex_name = throwable->klass()->name();\n+      CLEAR_PENDING_EXCEPTION;\n+      if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+        JVMCI_event_1(\"error translating exception: OutOfMemoryError\");\n+        decode(THREAD, _encode_oome_fail, 0L);\n+      } else {\n+        char* char_buffer = (char*) buffer + 4;\n+        stringStream st(char_buffer, (size_t) buffer_size - 4);\n+        java_lang_Throwable::print_stack_trace(throwable, &st);\n+        int len = st.size();\n+        *((u4*) buffer) = len;\n+        JVMCI_event_1(\"error translating exception: %s\", char_buffer);\n+        decode(THREAD, _encode_fail, buffer);\n+      }\n+      return 0;\n+    }\n@@ -455,1 +468,1 @@\n-  void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) {\n+  void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) {\n@@ -459,1 +472,1 @@\n-                                buffer, false);\n+                                format, buffer, false);\n@@ -471,1 +484,1 @@\n-  int encode(JavaThread* THREAD, Klass* vmSupport, jlong buffer, int buffer_size) {\n+  int encode(JavaThread* THREAD, jlong buffer, int buffer_size) {\n@@ -473,1 +486,1 @@\n-    return jni()->CallStaticIntMethod(JNIJVMCI::VMSupport::clazz(),\n+    int res = jni()->CallStaticIntMethod(JNIJVMCI::VMSupport::clazz(),\n@@ -476,0 +489,8 @@\n+    if (jni()->ExceptionCheck()) {\n+      \/\/ Cannot get name of exception thrown as that can raise another exception.\n+      jni()->ExceptionClear();\n+      JVMCI_event_1(\"error translating exception: unknown error\");\n+      decode(THREAD, _encode_fail, 0L);\n+      return 0;\n+    }\n+    return res;\n@@ -478,1 +499,2 @@\n-  void decode(JavaThread* THREAD, Klass* vmSupport, jlong buffer) {\n+  void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) {\n+    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, CHECK);\n@@ -480,0 +502,1 @@\n+    jargs.push_int(format);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":54,"deletions":31,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -115,4 +116,1 @@\n-     * Decodes the exception encoded in {@code errorOrBuffer} and throws it.\n-     *\n-     * @param errorOrBuffer an error code or a native byte errorOrBuffer containing an exception encoded by\n-     *            {@link #encodeThrowable}. Error code values and their meanings are:\n+     * Decodes the exception described by {@code format} and {@code buffer} and throws it.\n@@ -120,0 +118,1 @@\n+     * @param format specifies how to interpret {@code buffer}:\n@@ -121,3 +120,5 @@\n-     *             0: native memory for the errorOrBuffer could not be allocated\n-     *            -1: an OutOfMemoryError was thrown while encoding the exception\n-     *            -2: some other throwable was thrown while encoding the exception\n+     *             0: {@code buffer} was created by {@link #encodeThrowable}\n+     *             1: native memory for {@code buffer} could not be allocated\n+     *             2: an OutOfMemoryError was thrown while encoding the exception\n+     *             3: some other problem occured while encoding the exception. If {@code buffer != 0},\n+     *                it contains a {@code struct { u4 len; char[len] desc}} where {@code desc} describes the problem\n@@ -125,2 +126,1 @@\n-     * @param errorOrBuffer a native byte errorOrBuffer containing an exception encoded by\n-     *            {@link #encodeThrowable}\n+     * @param buffer encoded info about the exception to throw (depends on {@code format})\n@@ -129,2 +129,2 @@\n-    public static void decodeAndThrowThrowable(long errorOrBuffer, boolean inJVMHeap) throws Throwable {\n-        if (errorOrBuffer >= -2L && errorOrBuffer <= 0) {\n+    public static void decodeAndThrowThrowable(int format, long buffer, boolean inJVMHeap) throws Throwable {\n+        if (format != 0) {\n@@ -133,2 +133,2 @@\n-            if (errorOrBuffer == 0) {\n-                throw new InternalError(\"native errorOrBuffer could not be allocated \" + context);\n+            if (format == 1) {\n+                throw new InternalError(\"native buffer could not be allocated \" + context);\n@@ -136,1 +136,1 @@\n-            if (errorOrBuffer == -1L) {\n+            if (format == 2) {\n@@ -139,0 +139,4 @@\n+            if (format == 3 && buffer != 0L) {\n+                byte[] bytes = bufferToBytes(buffer);\n+                throw new InternalError(\"unexpected problem occurred \" + context + \": \" + new String(bytes, StandardCharsets.UTF_8));\n+            }\n@@ -141,4 +145,11 @@\n-        int encodingLength = U.getInt(errorOrBuffer);\n-        byte[] encoding = new byte[encodingLength];\n-        U.copyMemory(null, errorOrBuffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n-        throw TranslatedException.decodeThrowable(encoding);\n+        throw TranslatedException.decodeThrowable(bufferToBytes(buffer));\n+    }\n+\n+    private static byte[] bufferToBytes(long buffer) {\n+        if (buffer == 0) {\n+            return null;\n+        }\n+        int len = U.getInt(buffer);\n+        byte[] bytes = new byte[len];\n+        U.copyMemory(null, buffer + 4, bytes, Unsafe.ARRAY_BYTE_BASE_OFFSET, len);\n+        return bytes;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -60,0 +61,66 @@\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(0, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (NullPointerException decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(1, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            if (!decoded.getMessage().startsWith(\"native buffer could not be allocated\")) {\n+                throw new AssertionError(\"unexpected exception: \" + decoded);\n+            }\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(2, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (OutOfMemoryError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(3, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(4, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        Unsafe unsafe = Unsafe.getUnsafe();\n+        byte[] problem = \"very unlikely problem\".getBytes(StandardCharsets.UTF_8);\n+        long buffer = unsafe.allocateMemory(problem.length + 4);\n+        try {\n+            unsafe.putInt(buffer, problem.length);\n+            unsafe.copyMemory(problem, Unsafe.ARRAY_BYTE_BASE_OFFSET, null, buffer + 4, problem.length);\n+            VMSupport.decodeAndThrowThrowable(3, buffer, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            String msg = decoded.getMessage();\n+            if (!msg.endsWith(\"very unlikely problem\")) {\n+                throw new AssertionError(\"unexpected exception: \" + decoded);\n+            }\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        } finally {\n+            unsafe.freeMemory(buffer);\n+        }\n@@ -65,0 +132,1 @@\n+        int format = 0;\n@@ -74,1 +142,1 @@\n-                        VMSupport.decodeAndThrowThrowable(buffer, true);\n+                        VMSupport.decodeAndThrowThrowable(format, buffer, true);\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":69,"deletions":1,"binary":false,"changes":70,"status":"modified"}]}