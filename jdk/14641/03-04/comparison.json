{"files":[{"patch":"@@ -377,0 +377,9 @@\n+  enum DecodeFormat {\n+    _encoded_ok        = 0, \/\/ exception was successfully encoded into buffer\n+    _buffer_alloc_fail = 1, \/\/ native memory for buffer could not be allocated\n+    _encode_oome_fail  = 2, \/\/ OutOfMemoryError thrown during encoding\n+    _encode_fail       = 3  \/\/ some other problem occured during encoding. If buffer != 0,\n+                            \/\/ buffer contains a `struct { u4 len; char[len] desc}`\n+                            \/\/ describing the problem\n+  };\n+\n@@ -387,2 +396,2 @@\n-  \/\/ Decodes the exception in `format` and `buffer` in `_to_env` and throws it.\n-  virtual void decode(JavaThread* THREAD, jint format, jlong buffer) = 0;\n+  \/\/ Decodes the exception in `buffer` in `_to_env` and throws it.\n+  virtual void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) = 0;\n@@ -398,1 +407,1 @@\n-        decode(THREAD, -1, 0L);\n+        decode(THREAD, _buffer_alloc_fail, 0L);\n@@ -402,23 +411,2 @@\n-      if (_from_env != nullptr && !_from_env->is_hotspot() && _from_env->has_pending_exception()) {\n-        \/\/ Cannot get name of exception thrown by `encode` as that involves\n-        \/\/ calling into libjvmci which in turn can raise another exception.\n-        _from_env->clear_pending_exception();\n-        JVMCI_event_1(\"error translating exception: unknown error\");\n-        decode(THREAD, -3, 0L);\n-        return;\n-      } else if (HAS_PENDING_EXCEPTION) {\n-        Handle throwable = Handle(THREAD, PENDING_EXCEPTION);\n-        Symbol *ex_name = throwable->klass()->name();\n-        CLEAR_PENDING_EXCEPTION;\n-        if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n-          JVMCI_event_1(\"error translating exception: OutOfMemoryError\");\n-          decode(THREAD, -2, 0L);\n-        } else {\n-          char* char_buffer = (char*) buffer + 4;\n-          stringStream st(char_buffer, (size_t) buffer_size - 4);\n-          java_lang_Throwable::print_stack_trace(throwable, &st);\n-          int len = st.size();\n-          *((u4*) buffer) = len;\n-          JVMCI_event_1(\"error translating exception: %s\", char_buffer);\n-          decode(THREAD, -3, buffer);\n-        }\n+      if (_to_env->has_pending_exception()) {\n+        \/\/ Propagate pending exception\n@@ -426,1 +414,2 @@\n-      } else if (res < 0) {\n+      }\n+      if (res < 0) {\n@@ -432,1 +421,1 @@\n-        decode(THREAD, 0, buffer);\n+        decode(THREAD, _encoded_ok, buffer);\n@@ -450,1 +439,15 @@\n-      \/\/ Propagate pending exception\n+      Handle throwable = Handle(THREAD, PENDING_EXCEPTION);\n+      Symbol *ex_name = throwable->klass()->name();\n+      CLEAR_PENDING_EXCEPTION;\n+      if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+        JVMCI_event_1(\"error translating exception: OutOfMemoryError\");\n+        decode(THREAD, _encode_oome_fail, 0L);\n+      } else {\n+        char* char_buffer = (char*) buffer + 4;\n+        stringStream st(char_buffer, (size_t) buffer_size - 4);\n+        java_lang_Throwable::print_stack_trace(throwable, &st);\n+        int len = st.size();\n+        *((u4*) buffer) = len;\n+        JVMCI_event_1(\"error translating exception: %s\", char_buffer);\n+        decode(THREAD, _encode_fail, buffer);\n+      }\n@@ -465,1 +468,1 @@\n-  void decode(JavaThread* THREAD, jint format, jlong buffer) {\n+  void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) {\n@@ -483,1 +486,1 @@\n-    return jni()->CallStaticIntMethod(JNIJVMCI::VMSupport::clazz(),\n+    int res = jni()->CallStaticIntMethod(JNIJVMCI::VMSupport::clazz(),\n@@ -486,0 +489,8 @@\n+    if (jni()->ExceptionCheck()) {\n+      \/\/ Cannot get name of exception thrown as that can raise another exception.\n+      jni()->ExceptionClear();\n+      JVMCI_event_1(\"error translating exception: unknown error\");\n+      decode(THREAD, _encode_fail, 0L);\n+      return 0;\n+    }\n+    return res;\n@@ -488,6 +499,2 @@\n-  void decode(JavaThread* THREAD, jint format, jlong buffer) {\n-    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, THREAD);\n-    if (HAS_PENDING_EXCEPTION) {\n-      \/\/ Propagate pending exception\n-      return;\n-    }\n+  void decode(JavaThread* THREAD, DecodeFormat format, jlong buffer) {\n+    Klass* vmSupport = SystemDictionary::resolve_or_fail(vmSymbols::jdk_internal_vm_VMSupport(), true, CHECK);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":44,"deletions":37,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -121,3 +121,3 @@\n-     *            -1: native memory for {@code buffer} could not be allocated\n-     *            -2: an OutOfMemoryError was thrown while encoding the exception\n-     *            -3: some other problem occured while encoding the exception. If {@code buffer != 0},\n+     *             1: native memory for {@code buffer} could not be allocated\n+     *             2: an OutOfMemoryError was thrown while encoding the exception\n+     *             3: some other problem occured while encoding the exception. If {@code buffer != 0},\n@@ -133,1 +133,1 @@\n-            if (format == -1) {\n+            if (format == 1) {\n@@ -136,1 +136,1 @@\n-            if (format == -2L) {\n+            if (format == 2) {\n@@ -139,1 +139,1 @@\n-            if (format == -3L) {\n+            if (format == 3 && buffer != 0L) {\n@@ -149,0 +149,3 @@\n+        if (buffer == 0) {\n+            return null;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -60,0 +61,66 @@\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(0, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (NullPointerException decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(1, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            if (!decoded.getMessage().startsWith(\"native buffer could not be allocated\")) {\n+                throw new AssertionError(\"unexpected exception: \" + decoded);\n+            }\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(2, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (OutOfMemoryError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(3, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(4, 0L, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            \/\/ Expected\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        Unsafe unsafe = Unsafe.getUnsafe();\n+        byte[] problem = \"very unlikely problem\".getBytes(StandardCharsets.UTF_8);\n+        long buffer = unsafe.allocateMemory(problem.length + 4);\n+        try {\n+            unsafe.putInt(buffer, problem.length);\n+            unsafe.copyMemory(problem, Unsafe.ARRAY_BYTE_BASE_OFFSET, null, buffer + 4, problem.length);\n+            VMSupport.decodeAndThrowThrowable(3, buffer, true);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n+        } catch (InternalError decoded) {\n+            String msg = decoded.getMessage();\n+            if (!msg.endsWith(\"very unlikely problem\")) {\n+                throw new AssertionError(\"unexpected exception: \" + decoded);\n+            }\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        } finally {\n+            unsafe.freeMemory(buffer);\n+        }\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}