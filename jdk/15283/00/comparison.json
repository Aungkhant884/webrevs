{"files":[{"patch":"@@ -952,20 +952,0 @@\n-    \/**\n-     * Check for a resolved dynamic adapter method at the specified index, resulting from either a\n-     * resolved invokedynamic or invokevirtual on a signature polymorphic MethodHandle method\n-     * (HotSpot invokehandle).\n-     *\n-     * @param cpi the constant pool index\n-     * @param opcode the opcode of the instruction for which the lookup is being performed\n-     * @return {@code true} if a signature polymorphic method reference was found, otherwise\n-     *         {@code false}\n-     *\/\n-    public boolean isResolvedDynamicInvoke(int cpi, int opcode) {\n-        if (Bytecodes.isInvokeHandleAlias(opcode)) {\n-            final int methodRefCacheIndex = rawIndexToConstantPoolCacheIndex(cpi, opcode);\n-            checkTag(compilerToVM().constantPoolRemapInstructionOperandFromCache(this, methodRefCacheIndex), constants.jvmMethodref);\n-            int op = compilerToVM().isResolvedInvokeHandleInPool(this, methodRefCacheIndex);\n-            return op == opcode;\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"}]}