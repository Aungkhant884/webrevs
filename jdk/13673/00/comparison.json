{"files":[{"patch":"@@ -39,3 +39,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -51,0 +48,1 @@\n+import java.io.Closeable;\n@@ -60,0 +58,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -77,1 +76,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -79,2 +77,1 @@\n-import static java.lang.String.format;\n-import static java.lang.System.in;\n+import static java.lang.System.err;\n@@ -84,1 +81,0 @@\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -97,2 +93,2 @@\n-    DummyServer    httpDummyServer;    \/\/ HTTP\/1.1    [ 2 servers ]\n-    DummyServer    httpsDummyServer;   \/\/ HTTPS\/1.1\n+    DummyServer    httpDummyServer;   \/\/ HTTP\/1.1    [ 2 servers ]\n+    DummyServer    httpsDummyServer;  \/\/ HTTPS\/1.1\n@@ -143,2 +139,2 @@\n-                    System.out.printf(now() + \"Task %s failed: %s%n\", id, t);\n-                    System.err.printf(now() + \"Task %s failed: %s%n\", id, t);\n+                    out.printf(now() + \"Task %s failed: %s%n\", id, t);\n+                    err.printf(now() + \"Task %s failed: %s%n\", id, t);\n@@ -165,1 +161,1 @@\n-                System.out.println(\"WARNING: Some tasks failed\");\n+                out.println(\"WARNING: Some tasks failed\");\n@@ -204,0 +200,8 @@\n+    static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\") || uri.contains(\"\/https1\/\"))\n+            return HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\") || uri.contains(\"\/https2\/\"))\n+            return HTTP_2;\n+        return null;\n+    }\n+\n@@ -228,0 +232,8 @@\n+    record CloseableClient(HttpClient client, boolean shared)\n+            implements Closeable {\n+        public void close() {\n+            if (shared) return;\n+            client.close();\n+        }\n+    }\n+\n@@ -235,1 +247,1 @@\n-            if (!sameClient || client == null)\n+            if (!sameClient || client == null) {\n@@ -237,15 +249,18 @@\n-\n-            BodyPublisher bodyPublisher = BodyPublishers.ofString(uri);\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                    .POST(bodyPublisher)\n-                    .build();\n-            BodyHandler<String> handler = BodyHandlers.ofString();\n-            CompletableFuture<HttpResponse<String>> responseCF = client.sendAsync(req, handler);\n-            HttpResponse<String> response = responseCF.join();\n-            String body = response.body();\n-            if (!uri.contains(body)) {\n-                System.err.println(\"Test failed: \" + response);\n-                throw new RuntimeException(uri + \" doesn't contain '\" + body + \"'\");\n-            } else {\n-                System.out.println(\"Found expected \" + body + \" in \" + uri);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                BodyPublisher bodyPublisher = BodyPublishers.ofString(uri);\n+\n+                HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n+                        .POST(bodyPublisher)\n+                        .build();\n+                BodyHandler<String> handler = BodyHandlers.ofString();\n+                CompletableFuture<HttpResponse<String>> responseCF = client.sendAsync(req, handler);\n+                HttpResponse<String> response = responseCF.join();\n+                String body = response.body();\n+                if (!uri.contains(body)) {\n+                    err.println(\"Test failed: \" + response);\n+                    throw new RuntimeException(uri + \" doesn't contain '\" + body + \"'\");\n+                } else {\n+                    out.println(\"Found expected \" + body + \" in \" + uri);\n+                }\n+                assertEquals(response.version(), version(uri));\n@@ -258,0 +273,2 @@\n+        out.println(now() + \"begin setup\");\n+\n@@ -300,0 +317,1 @@\n+        err.println(now() + \"Starting servers\");\n@@ -308,0 +326,10 @@\n+\n+        out.println(\"HTTP\/1.1 dummy server (http) listening at: \" + httpDummyServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 dummy server (TLS)  listening at: \" + httpsDummyServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 server       (http) listening at: \" + httpTestServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 server       (TLS)  listening at: \" + httpsTestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server       (h2c)  listening at: \" + http2TestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server       (h2)   listening at: \" + https2TestServer.serverAuthority());\n+\n+        out.println(now() + \"setup done\");\n+        err.println(now() + \"setup done\");\n@@ -312,1 +340,1 @@\n-        sharedClient = null;\n+        sharedClient.close();\n@@ -393,1 +421,1 @@\n-                    System.out.println(now() + getName() + \": Client accepted\");\n+                    out.println(now() + getName() + \": Client accepted\");\n@@ -395,1 +423,0 @@\n-                    Socket targetConnection = null;\n@@ -398,1 +425,1 @@\n-                    System.out.println(now() + getName() + \": Reading request line\");\n+                    out.println(now() + getName() + \": Reading request line\");\n@@ -400,1 +427,1 @@\n-                    System.out.println(now() + getName() + \": Request line: \" + requestLine);\n+                    out.println(now() + getName() + \": Request line: \" + requestLine);\n@@ -411,1 +438,1 @@\n-                        System.err.printf(\"Bad target address: \\\"%s\\\" in \\\"%s\\\"%n\",\n+                        err.printf(\"Bad target address: \\\"%s\\\" in \\\"%s\\\"%n\",\n@@ -421,1 +448,1 @@\n-                        System.out.println(now() + getName() + \": Reading header: \"\n+                        out.println(now() + getName() + \": Reading header: \"\n@@ -438,1 +465,1 @@\n-                        System.out.println(now() + getName()\n+                        out.println(now() + getName()\n@@ -442,1 +469,1 @@\n-                    System.out.println(now()\n+                    out.println(now()\n@@ -450,1 +477,1 @@\n-                    System.out.println(now() + getName() + \": Sending \"\n+                    out.println(now() + getName() + \": Sending \"\n@@ -454,1 +481,1 @@\n-                    System.out.println(now() + getName() + \": sent response headers\");\n+                    out.println(now() + getName() + \": sent response headers\");\n@@ -458,1 +485,1 @@\n-                    System.out.println(now() + getName() + \": sent \" + b.length + \" body bytes\");\n+                    out.println(now() + getName() + \": sent \" + b.length + \" body bytes\");\n@@ -464,1 +491,1 @@\n-                    System.out.println(now() + getName() + \": failed: \" + t);\n+                    out.println(now() + getName() + \": failed: \" + t);\n@@ -473,1 +500,1 @@\n-                System.out.println(now() + getName() + \": exiting\");\n+                out.println(now() + getName() + \": exiting\");\n@@ -507,1 +534,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/EncodedCharsInURI.java","additions":69,"deletions":43,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -35,5 +35,1 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n+import java.io.Closeable;\n@@ -48,0 +44,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -54,3 +51,2 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n-import jdk.httpclient.test.lib.http2.Http2TestExchange;\n-import jdk.httpclient.test.lib.http2.Http2Handler;\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n@@ -62,0 +58,2 @@\n+\n+import static java.lang.System.err;\n@@ -63,0 +61,2 @@\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n@@ -67,1 +67,1 @@\n-public class EscapedOctetsInURI {\n+public class EscapedOctetsInURI implements HttpServerAdapters {\n@@ -70,4 +70,4 @@\n-    HttpServer httpTestServer;         \/\/ HTTP\/1.1    [ 4 servers ]\n-    HttpsServer httpsTestServer;       \/\/ HTTPS\/1.1\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    HttpTestServer httpTestServer;    \/\/ HTTP\/1.1    [ 4 servers ]\n+    HttpTestServer httpsTestServer;   \/\/ HTTPS\/1.1\n+    HttpTestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n+    HttpTestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n@@ -79,0 +79,2 @@\n+    private volatile HttpClient sharedClient;\n+\n@@ -113,0 +115,46 @@\n+    static final long start = System.nanoTime();\n+    public static String now() {\n+        long now = System.nanoTime() - start;\n+        long secs = now \/ 1000_000_000;\n+        long mill = (now % 1000_000_000) \/ 1000_000;\n+        long nan = now % 1000_000;\n+        return String.format(\"[%d s, %d ms, %d ns] \", secs, mill, nan);\n+    }\n+\n+    static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\") || uri.contains(\"\/https1\/\"))\n+            return HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\") || uri.contains(\"\/https2\/\"))\n+            return HTTP_2;\n+        return null;\n+    }\n+\n+\n+    private HttpClient makeNewClient() {\n+        return HttpClient.newBuilder()\n+                .proxy(NO_PROXY)\n+                .sslContext(sslContext)\n+                .build();\n+    }\n+\n+    HttpClient newHttpClient(boolean share) {\n+        if (!share) return makeNewClient();\n+        HttpClient shared = sharedClient;\n+        if (shared != null) return shared;\n+        synchronized (this) {\n+            shared = sharedClient;\n+            if (shared == null) {\n+                shared = sharedClient = makeNewClient();\n+            }\n+            return shared;\n+        }\n+    }\n+\n+    record CloseableClient(HttpClient client, boolean shared)\n+            implements Closeable {\n+        public void close() {\n+            if (shared) return;\n+            client.close();\n+        }\n+    }\n+\n@@ -124,18 +172,19 @@\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-\n-            HttpRequest request = HttpRequest.newBuilder(uri).build();\n-            HttpResponse<String> resp = client.send(request, BodyHandlers.ofString());\n-\n-            out.println(\"Got response: \" + resp);\n-            out.println(\"Got body: \" + resp.body());\n-            assertEquals(resp.statusCode(), 200,\n-                    \"Expected 200, got:\" + resp.statusCode());\n-\n-            \/\/ the response body should contain the exact escaped request URI\n-            URI retrievedURI = URI.create(resp.body());\n-            assertEquals(retrievedURI.getRawPath(),  uri.getRawPath());\n-            assertEquals(retrievedURI.getRawQuery(), uri.getRawQuery());\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest request = HttpRequest.newBuilder(uri).build();\n+                HttpResponse<String> resp = client.send(request, BodyHandlers.ofString());\n+\n+                out.println(\"Got response: \" + resp);\n+                out.println(\"Got body: \" + resp.body());\n+                assertEquals(resp.statusCode(), 200,\n+                        \"Expected 200, got:\" + resp.statusCode());\n+\n+                \/\/ the response body should contain the exact escaped request URI\n+                URI retrievedURI = URI.create(resp.body());\n+                assertEquals(retrievedURI.getRawPath(), uri.getRawPath());\n+                assertEquals(retrievedURI.getRawQuery(), uri.getRawQuery());\n+                assertEquals(resp.version(), version(uriString));\n+            }\n@@ -146,1 +195,1 @@\n-    void testAsync(String uriString, boolean sameClient) {\n+    void testAsync(String uriString, boolean sameClient) throws Exception {\n@@ -152,22 +201,3 @@\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-\n-            HttpRequest request = HttpRequest.newBuilder(uri).build();\n-\n-            client.sendAsync(request, BodyHandlers.ofString())\n-                  .thenApply(response -> {\n-                      out.println(\"Got response: \" + response);\n-                      out.println(\"Got body: \" + response.body());\n-                      assertEquals(response.statusCode(), 200);\n-                      return response.body(); })\n-                  .thenApply(body -> URI.create(body))\n-                  .thenAccept(retrievedURI -> {\n-                      \/\/ the body should contain the exact escaped request URI\n-                      assertEquals(retrievedURI.getRawPath(), uri.getRawPath());\n-                      assertEquals(retrievedURI.getRawQuery(), uri.getRawQuery()); })\n-                  .join();\n-        }\n-    }\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n@@ -175,3 +205,18 @@\n-    static String serverAuthority(HttpServer server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getAddress().getPort();\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest request = HttpRequest.newBuilder(uri).build();\n+                client.sendAsync(request, BodyHandlers.ofString())\n+                        .thenApply(response -> {\n+                            out.println(\"Got response: \" + response);\n+                            out.println(\"Got body: \" + response.body());\n+                            assertEquals(response.statusCode(), 200);\n+                            assertEquals(response.version(), version(uriString));\n+                            return response.body();\n+                        })\n+                        .thenApply(body -> URI.create(body))\n+                        .thenAccept(retrievedURI -> {\n+                            \/\/ the body should contain the exact escaped request URI\n+                            assertEquals(retrievedURI.getRawPath(), uri.getRawPath());\n+                            assertEquals(retrievedURI.getRawQuery(), uri.getRawQuery());\n+                        }).join();\n+            }\n+        }\n@@ -182,0 +227,2 @@\n+        out.println(now() + \"begin setup\");\n+\n@@ -187,3 +234,3 @@\n-        httpTestServer = HttpServer.create(sa, 0);\n-        httpTestServer.createContext(\"\/http1\", new Http1ASCIIUriStringHandler());\n-        httpURI = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\";\n+        httpTestServer = HttpTestServer.create(HTTP_1_1);\n+        httpTestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/http1\/get\");\n+        httpURI = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/get\";\n@@ -191,4 +238,3 @@\n-        httpsTestServer = HttpsServer.create(sa, 0);\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n-        httpsTestServer.createContext(\"\/https1\", new Http1ASCIIUriStringHandler());\n-        httpsURI = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\";\n+        httpsTestServer = HttpTestServer.create(HTTP_1_1, sslContext);\n+        httpsTestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/https1\/get\");\n+        httpsURI = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/get\";\n@@ -196,3 +242,3 @@\n-        http2TestServer = new Http2TestServer(\"localhost\", false, 0);\n-        http2TestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/http2\");\n-        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\";\n+        http2TestServer = HttpTestServer.create(HTTP_2);\n+        http2TestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/http2\/get\");\n+        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/get\";\n@@ -200,3 +246,3 @@\n-        https2TestServer = new Http2TestServer(\"localhost\", true, sslContext);\n-        https2TestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/https2\");\n-        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\";\n+        https2TestServer = HttpTestServer.create(HTTP_2, sslContext);\n+        https2TestServer.addHandler(new HttpASCIIUriStringHandler(), \"\/https2\/get\");\n+        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\/get\";\n@@ -204,0 +250,1 @@\n+        err.println(now() + \"Starting servers\");\n@@ -208,0 +255,8 @@\n+\n+        out.println(\"HTTP\/1.1 server (http) listening at: \" + httpTestServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 server (TLS)  listening at: \" + httpsTestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server (h2c)  listening at: \" + http2TestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server (h2)   listening at: \" + https2TestServer.serverAuthority());\n+\n+        out.println(now() + \"setup done\");\n+        err.println(now() + \"setup done\");\n@@ -212,2 +267,3 @@\n-        httpTestServer.stop(0);\n-        httpsTestServer.stop(0);\n+        sharedClient.close();\n+        httpTestServer.stop();\n+        httpsTestServer.stop();\n@@ -219,17 +275,1 @@\n-    static class Http1ASCIIUriStringHandler implements HttpHandler {\n-        @Override\n-        public void handle(HttpExchange t) throws IOException {\n-            String asciiUriString = t.getRequestURI().toASCIIString();\n-            out.println(\"Http1ASCIIUriString received, asciiUriString: \" + asciiUriString);\n-            try (InputStream is = t.getRequestBody();\n-                 OutputStream os = t.getResponseBody()) {\n-                is.readAllBytes();\n-                byte[] bytes = asciiUriString.getBytes(US_ASCII);\n-                t.sendResponseHeaders(200, bytes.length);\n-                os.write(bytes);\n-            }\n-        }\n-    }\n-\n-    \/** A handler that returns as its body the exact escaped request URI. *\/\n-    static class HttpASCIIUriStringHandler implements Http2Handler {\n+    static class HttpASCIIUriStringHandler implements HttpTestHandler {\n@@ -237,1 +277,1 @@\n-        public void handle(Http2TestExchange t) throws IOException {\n+        public void handle(HttpTestExchange t) throws IOException {\n","filename":"test\/jdk\/java\/net\/httpclient\/EscapedOctetsInURI.java","additions":130,"deletions":90,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -37,3 +37,1 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n+import java.io.Closeable;\n@@ -43,2 +41,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -48,0 +44,1 @@\n+import java.net.http.HttpClient.Version;\n@@ -55,1 +52,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -81,0 +77,2 @@\n+    private volatile HttpClient sharedClient;\n+\n@@ -113,0 +111,45 @@\n+    static final long start = System.nanoTime();\n+    public static String now() {\n+        long now = System.nanoTime() - start;\n+        long secs = now \/ 1000_000_000;\n+        long mill = (now % 1000_000_000) \/ 1000_000;\n+        long nan = now % 1000_000;\n+        return String.format(\"[%d s, %d ms, %d ns] \", secs, mill, nan);\n+    }\n+\n+    static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\") || uri.contains(\"\/https1\/\"))\n+            return HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\") || uri.contains(\"\/https2\/\"))\n+            return HTTP_2;\n+        return null;\n+    }\n+\n+    private HttpClient makeNewClient() {\n+        return HttpClient.newBuilder()\n+                .proxy(NO_PROXY)\n+                .sslContext(sslContext)\n+                .build();\n+    }\n+\n+    HttpClient newHttpClient(boolean share) {\n+        if (!share) return makeNewClient();\n+        HttpClient shared = sharedClient;\n+        if (shared != null) return shared;\n+        synchronized (this) {\n+            shared = sharedClient;\n+            if (shared == null) {\n+                shared = sharedClient = makeNewClient();\n+            }\n+            return shared;\n+        }\n+    }\n+\n+    record CloseableClient(HttpClient client, boolean shared)\n+            implements Closeable {\n+        public void close() {\n+            if (shared) return;\n+            client.close();\n+        }\n+    }\n+\n@@ -125,23 +168,25 @@\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-\n-            HttpRequest request = HttpRequest.newBuilder(uri).build();\n-            HttpResponse<String> resp = client.send(request, BodyHandlers.ofString());\n-\n-            out.println(\"Got response: \" + resp);\n-            out.println(\"Got body: \" + resp.body());\n-            assertEquals(resp.statusCode(), 200,\n-                    \"Expected 200, got:\" + resp.statusCode());\n-\n-            \/\/ the response body should contain the toASCIIString\n-            \/\/ representation of the URI\n-            String expectedURIString = uri.toASCIIString();\n-            if (!expectedURIString.contains(resp.body())) {\n-                err.println(\"Test failed: \" + resp);\n-                throw new AssertionError(expectedURIString +\n-                                         \" does not contain '\" + resp.body() + \"'\");\n-            } else {\n-                out.println(\"Found expected \" + resp.body() + \" in \" + expectedURIString);\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+\n+\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest request = HttpRequest.newBuilder(uri).build();\n+                HttpResponse<String> resp = client.send(request, BodyHandlers.ofString());\n+\n+                out.println(\"Got response: \" + resp);\n+                out.println(\"Got body: \" + resp.body());\n+                assertEquals(resp.statusCode(), 200,\n+                        \"Expected 200, got:\" + resp.statusCode());\n+\n+                \/\/ the response body should contain the toASCIIString\n+                \/\/ representation of the URI\n+                String expectedURIString = uri.toASCIIString();\n+                if (!expectedURIString.contains(resp.body())) {\n+                    err.println(\"Test failed: \" + resp);\n+                    throw new AssertionError(expectedURIString +\n+                            \" does not contain '\" + resp.body() + \"'\");\n+                } else {\n+                    out.println(\"Found expected \" + resp.body() + \" in \" + expectedURIString);\n+                }\n+                assertEquals(resp.version(), version(uriString));\n@@ -153,1 +198,1 @@\n-    void testAsync(String uriString, boolean sameClient) {\n+    void testAsync(String uriString, boolean sameClient) throws Exception {\n@@ -159,24 +204,25 @@\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-\n-            HttpRequest request = HttpRequest.newBuilder(uri).build();\n-\n-            client.sendAsync(request, BodyHandlers.ofString())\n-                    .thenApply(response -> {\n-                        out.println(\"Got response: \" + response);\n-                        out.println(\"Got body: \" + response.body());\n-                        assertEquals(response.statusCode(), 200);\n-                        return response.body(); })\n-                    .thenAccept(body -> {\n-                        \/\/ the response body should contain the toASCIIString\n-                        \/\/ representation of the URI\n-                        String expectedURIString = uri.toASCIIString();\n-                        if (!expectedURIString.contains(body)) {\n-                            err.println(\"Test failed: \" + body);\n-                            throw new AssertionError(expectedURIString +\n-                                    \" does not contain '\" + body + \"'\");\n-                        } else {\n-                            out.println(\"Found expected \" + body + \" in \"\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest request = HttpRequest.newBuilder(uri).build();\n+\n+                client.sendAsync(request, BodyHandlers.ofString())\n+                        .thenApply(response -> {\n+                            out.println(\"Got response: \" + response);\n+                            out.println(\"Got body: \" + response.body());\n+                            assertEquals(response.statusCode(), 200);\n+                            assertEquals(response.version(), version(uriString));\n+                            return response.body();\n+                        })\n+                        .thenAccept(body -> {\n+                            \/\/ the response body should contain the toASCIIString\n+                            \/\/ representation of the URI\n+                            String expectedURIString = uri.toASCIIString();\n+                            if (!expectedURIString.contains(body)) {\n+                                err.println(\"Test failed: \" + body);\n+                                throw new AssertionError(expectedURIString +\n+                                        \" does not contain '\" + body + \"'\");\n+                            } else {\n+                                out.println(\"Found expected \" + body + \" in \"\n@@ -184,2 +230,4 @@\n-                        } })\n-                    .join();\n+                            }\n+                        })\n+                        .join();\n+            }\n@@ -189,5 +237,0 @@\n-    static String serverAuthority(HttpTestServer server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getAddress().getPort();\n-    }\n-\n@@ -196,0 +239,2 @@\n+        out.println(now() + \"begin setup\");\n+\n@@ -202,2 +247,2 @@\n-        httpTestServer.addHandler(handler, \"\/http1\");\n-        httpURI = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\";\n+        httpTestServer.addHandler(handler, \"\/http1\/get\");\n+        httpURI = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/get\";\n@@ -206,2 +251,2 @@\n-        httpsTestServer.addHandler(handler, \"\/https1\");\n-        httpsURI = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\";\n+        httpsTestServer.addHandler(handler, \"\/https1\/get\");\n+        httpsURI = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/get\";\n@@ -210,2 +255,2 @@\n-        http2TestServer.addHandler(handler, \"\/http2\");\n-        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\";\n+        http2TestServer.addHandler(handler, \"\/http2\/get\");\n+        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/get\";\n@@ -214,2 +259,2 @@\n-        https2TestServer.addHandler(handler, \"\/https2\");\n-        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\";\n+        https2TestServer.addHandler(handler, \"\/https2\/get\");\n+        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\/get\";\n@@ -217,0 +262,1 @@\n+        err.println(now() + \"Starting servers\");\n@@ -221,0 +267,8 @@\n+\n+        out.println(\"HTTP\/1.1 server (http) listening at: \" + httpTestServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 server (TLS)  listening at: \" + httpsTestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server (h2c)  listening at: \" + http2TestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server (h2)   listening at: \" + https2TestServer.serverAuthority());\n+\n+        out.println(now() + \"setup done\");\n+        err.println(now() + \"setup done\");\n@@ -225,0 +279,1 @@\n+        sharedClient.close();\n@@ -236,1 +291,1 @@\n-            out.println(\"Http1UriStringHandler received, uri: \" + uri);\n+            out.println(\"HttpUriStringHandler received, uri: \" + uri);\n","filename":"test\/jdk\/java\/net\/httpclient\/NonAsciiCharsInURI.java","additions":125,"deletions":70,"binary":false,"changes":195,"status":"modified"}]}