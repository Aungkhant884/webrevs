{"files":[{"patch":"@@ -236,6 +236,12 @@\n-        if (!closed) {\n-            finish();\n-            if (usesDefaultDeflater)\n-                def.end();\n-            out.close();\n-            closed = true;\n+        try {\n+            if (!closed) {\n+              finish();\n+              if (usesDefaultDeflater)\n+                 def.end();\n+              out.close();\n+              closed = true;\n+           }\n+        } catch(IOException e) {\n+               if (usesDefaultDeflater)\n+                 def.end();\n+               throw e;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -159,0 +159,1 @@\n+    try {\n@@ -179,0 +180,4 @@\n+    } catch (IOException e) {\n+        if (usesDefaultDeflater)\n+            def.end();\n+        throw e;\n@@ -180,0 +185,1 @@\n+  }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPOutputStream.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8193682\n+ * @summary Test DeflatorOutputStream for infinite loop while writing on closed stream\n+ * @run testng GZipLoopTest\n+ *\/\n+import java.io.*;\n+import java.util.Random;\n+import java.util.zip.GZIPOutputStream;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n+\n+\n+public class GZipLoopTest {\n+    private static final int FINISH_NUM = 512;\n+    private static OutputStream outStream = new OutputStream() {\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            \/\/throw exception during write\n+            throw new IOException();\n+        }\n+        @Override\n+        public void write(byte b[]) throws IOException {}\n+        @Override\n+        public void write(int b) throws IOException {}\n+    };\n+    private static byte[] b = new byte[FINISH_NUM];\n+    private static Random rand = new Random();\n+\n+    @Test\n+    public void testGZipClose() throws IOException {\n+        rand.nextBytes(b);\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n+        try {\n+            zip.write(b, 0, FINISH_NUM);\n+            \/\/close zip\n+            zip.close();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 0, FINISH_NUM);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testGZipFinish() throws IOException {\n+        rand.nextBytes(b);\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n+        try {\n+            zip.write(b, 0, FINISH_NUM);\n+            \/\/close zip using finish()\n+            zip.finish();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 0, FINISH_NUM);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testZipClose() throws IOException {\n+        rand.nextBytes(b);\n+        ZipOutputStream zip = new ZipOutputStream(outStream);\n+        try {\n+            zip.write(b, 1, FINISH_NUM-1);\n+            \/\/close zip\n+            zip.close();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 1, FINISH_NUM-1);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testZipFinish() throws IOException {\n+        rand.nextBytes(b);\n+        ZipOutputStream zip = new ZipOutputStream(outStream);\n+        try {\n+            zip.write(b, 0, FINISH_NUM);\n+            \/\/close zip using finish()\n+            zip.finish();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 1, FINISH_NUM-1);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            }\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}