{"files":[{"patch":"@@ -238,5 +238,5 @@\n-              finish();\n-              if (usesDefaultDeflater)\n-                 def.end();\n-              out.close();\n-              closed = true;\n+                finish();\n+                if (usesDefaultDeflater)\n+                    def.end();\n+                out.close();\n+                closed = true;\n@@ -245,3 +245,3 @@\n-               if (usesDefaultDeflater)\n-                 def.end();\n-               throw e;\n+            if (usesDefaultDeflater)\n+                def.end();\n+            throw e;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -159,11 +159,14 @@\n-    try {\n-        if (!def.finished()) {\n-            def.finish();\n-            while (!def.finished()) {\n-                int len = def.deflate(buf, 0, buf.length);\n-                if (def.finished() && len <= buf.length - TRAILER_SIZE) {\n-                    \/\/ last deflater buffer. Fit trailer at the end\n-                    writeTrailer(buf, len);\n-                    len = len + TRAILER_SIZE;\n-                    out.write(buf, 0, len);\n-                    return;\n+        try {\n+            if (!def.finished()) {\n+                def.finish();\n+                while (!def.finished()) {\n+                    int len = def.deflate(buf, 0, buf.length);\n+                    if (def.finished() && len <= buf.length - TRAILER_SIZE) {\n+                        \/\/ last deflater buffer. Fit trailer at the end\n+                        writeTrailer(buf, len);\n+                        len = len + TRAILER_SIZE;\n+                        out.write(buf, 0, len);\n+                        return;\n+                    }\n+                    if (len > 0)\n+                        out.write(buf, 0, len);\n@@ -171,2 +174,5 @@\n-                if (len > 0)\n-                    out.write(buf, 0, len);\n+                \/\/ if we can't fit the trailer at the end of the last\n+                \/\/ deflater buffer, we write it separately\n+                byte[] trailer = new byte[TRAILER_SIZE];\n+                writeTrailer(trailer, 0);\n+                out.write(trailer);\n@@ -174,5 +180,4 @@\n-            \/\/ if we can't fit the trailer at the end of the last\n-            \/\/ deflater buffer, we write it separately\n-            byte[] trailer = new byte[TRAILER_SIZE];\n-            writeTrailer(trailer, 0);\n-            out.write(trailer);\n+        } catch (IOException e) {\n+            if (usesDefaultDeflater)\n+                def.end();\n+            throw e;\n@@ -180,4 +185,0 @@\n-    } catch (IOException e) {\n-        if (usesDefaultDeflater)\n-            def.end();\n-        throw e;\n@@ -185,1 +186,0 @@\n-  }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPOutputStream.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.zip.ZipOutputStream;\n@@ -35,0 +34,2 @@\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n@@ -40,1 +41,4 @@\n-    private static final int FINISH_NUM = 512;\n+\n+    \/\/number of bytes to write\n+    private static final int INPUT_LENGTH= 512;\n+    \/\/OutputStream that will throw an exception during a write operation\n@@ -52,1 +56,1 @@\n-    private static byte[] b = new byte[FINISH_NUM];\n+    private static byte[] b = new byte[INPUT_LENGTH];\n@@ -55,21 +59,7 @@\n-    @Test\n-    public void testGZipClose() throws IOException {\n-        rand.nextBytes(b);\n-        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n-        try {\n-            zip.write(b, 0, FINISH_NUM);\n-            \/\/close zip\n-            zip.close();\n-        } catch (IOException e) {\n-            \/\/expected\n-        }\n-        for (int i = 0; i < 3; i++) {\n-            try {\n-                zip.write(b, 0, FINISH_NUM);\n-                fail(\"Deflater closed exception not thrown\");\n-            } catch (NullPointerException | IOException e) {\n-                \/\/for the first write operation IOException will be thrown\n-                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n-            }\n-        }\n-    }\n+    @DataProvider(name = \"testinput\")\n+      public Object[][] testInput() {\n+       return new Object[][] {\n+        { GZIPOutputStream.class, true },\n+        { GZIPOutputStream.class, false },\n+       };\n+      }\n@@ -77,20 +67,4 @@\n-    @Test\n-    public void testGZipFinish() throws IOException {\n-        rand.nextBytes(b);\n-        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n-        try {\n-            zip.write(b, 0, FINISH_NUM);\n-            \/\/close zip using finish()\n-            zip.finish();\n-        } catch (IOException e) {\n-            \/\/expected\n-        }\n-        for (int i = 0; i < 3; i++) {\n-            try {\n-                zip.write(b, 0, FINISH_NUM);\n-                fail(\"Deflater closed exception not thrown\");\n-            } catch (NullPointerException | IOException e) {\n-                \/\/for the first write operation IOException will be thrown\n-                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n-            }\n-        }\n+    @BeforeTest\n+    public void before_test()\n+    {\n+       rand.nextBytes(b);\n@@ -99,4 +73,3 @@\n-    @Test\n-    public void testZipClose() throws IOException {\n-        rand.nextBytes(b);\n-        ZipOutputStream zip = new ZipOutputStream(outStream);\n+    @Test(dataProvider = \"testinput\")\n+    public void testGZip(Class<?> type, boolean useCloseMethod) throws IOException {\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n@@ -104,1 +77,1 @@\n-            zip.write(b, 1, FINISH_NUM-1);\n+            zip.write(b, 0, INPUT_LENGTH);\n@@ -106,11 +79,4 @@\n-            zip.close();\n-        } catch (IOException e) {\n-            \/\/expected\n-        }\n-        for (int i = 0; i < 3; i++) {\n-            try {\n-                zip.write(b, 1, FINISH_NUM-1);\n-                fail(\"Deflater closed exception not thrown\");\n-            } catch (NullPointerException | IOException e) {\n-                \/\/for the first write operation IOException will be thrown\n-                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            if(useCloseMethod) {\n+               zip.close();\n+            } else {\n+               zip.finish();\n@@ -118,11 +84,0 @@\n-        }\n-    }\n-\n-    @Test\n-    public void testZipFinish() throws IOException {\n-        rand.nextBytes(b);\n-        ZipOutputStream zip = new ZipOutputStream(outStream);\n-        try {\n-            zip.write(b, 0, FINISH_NUM);\n-            \/\/close zip using finish()\n-            zip.finish();\n@@ -134,1 +89,1 @@\n-                zip.write(b, 1, FINISH_NUM-1);\n+                zip.write(b, 0, INPUT_LENGTH);\n@@ -136,3 +91,2 @@\n-            } catch (NullPointerException | IOException e) {\n-                \/\/for the first write operation IOException will be thrown\n-                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            } catch (NullPointerException e) {\n+                \/\/expected , Deflater has been closed exception\n@@ -143,1 +97,0 @@\n-\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":29,"deletions":76,"binary":false,"changes":105,"status":"modified"}]}