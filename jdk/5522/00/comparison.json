{"files":[{"patch":"@@ -236,3 +236,10 @@\n-        if (!closed) {\n-            finish();\n-            if (usesDefaultDeflater)\n+        try {\n+            if (!closed) {\n+                finish();\n+                if (usesDefaultDeflater)\n+                   def.end();\n+                out.close();\n+                closed = true;\n+            }\n+        } catch(IOException ioe) {\n+             if (usesDefaultDeflater)\n@@ -240,2 +247,3 @@\n-            out.close();\n-            closed = true;\n+             out.close();\n+             closed = true;\n+             throw ioe;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8193682\n+ * @summary Test DeflatorOutputStream for infinite loop while writing on closed stream\n+ * @key randomness\n+ * @run main\/othervm\/timeout=180 GZipLoopTest\n+ *\/\n+import java.io.*;\n+import java.util.Random;\n+import java.util.zip.GZIPOutputStream;\n+\n+public class GZipLoopTest {\n+    private static final int FINISH_NUM = 512;\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+\n+    private static void test() {\n+        try {\n+            byte[] b = new byte[FINISH_NUM];\n+            Random rand = new Random();\n+            rand.nextBytes(b);\n+            GZIPOutputStream zip = new GZIPOutputStream(new OutputStream() {\n+                @Override\n+                public void write(byte[] b, int off, int len) throws IOException {\n+                    throw new IOException();\n+                }\n+                @Override\n+                public void write(byte b[]) throws IOException {}\n+                @Override\n+                public void write(int b) throws IOException {}\n+            });\n+            try {\n+                zip.write(b, 0, FINISH_NUM);\n+                zip.close();\n+            } catch (IOException ex) {\n+                ex.printStackTrace();\n+            }\n+            for (int i = 0; i < 3; i++) {\n+                try {\n+                    zip.write(b, 0, FINISH_NUM);\n+                } catch (Exception e) {\n+                    if (e instanceof NullPointerException) {\n+                        System.out.println(\"Test Passed : \" + e.getMessage());\n+                    } else {\n+                        throw new RuntimeException(\"Test failed : Expected exception is not thrown\");\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}