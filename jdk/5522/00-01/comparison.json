{"files":[{"patch":"@@ -236,10 +236,3 @@\n-        try {\n-            if (!closed) {\n-                finish();\n-                if (usesDefaultDeflater)\n-                   def.end();\n-                out.close();\n-                closed = true;\n-            }\n-        } catch(IOException ioe) {\n-             if (usesDefaultDeflater)\n+        if (!closed) {\n+            finish();\n+            if (usesDefaultDeflater)\n@@ -247,3 +240,2 @@\n-             out.close();\n-             closed = true;\n-             throw ioe;\n+            out.close();\n+            closed = true;\n@@ -260,1 +252,8 @@\n-            out.write(buf, 0, len);\n+            try {\n+                out.write(buf, 0, len);\n+            } catch (Exception e) {\n+                def.end();\n+                out.close();\n+                closed = true;\n+                throw e;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @key randomness\n- * @run main\/othervm\/timeout=180 GZipLoopTest\n+ * @run testng GZipLoopTest\n@@ -35,0 +34,4 @@\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n+\n+\n@@ -37,0 +40,13 @@\n+    private static OutputStream outStream = new OutputStream() {\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            \/\/throw exception during write\n+            throw new IOException();\n+        }\n+        @Override\n+        public void write(byte b[]) throws IOException {}\n+        @Override\n+        public void write(int b) throws IOException {}\n+    };\n+    private static byte[] b = new byte[FINISH_NUM];\n+    private static Random rand = new Random();\n@@ -38,2 +54,20 @@\n-    public static void main(String[] args) {\n-        test();\n+    @Test\n+    public void testZipClose() throws IOException {\n+        rand.nextBytes(b);\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n+        try {\n+            zip.write(b, 0, FINISH_NUM);\n+            \/\/close zip\n+            zip.close();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 0, FINISH_NUM);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n+            }\n+        }\n@@ -42,1 +76,4 @@\n-    private static void test() {\n+    @Test\n+    public void testZipFinish() throws IOException {\n+        rand.nextBytes(b);\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n@@ -44,13 +81,7 @@\n-            byte[] b = new byte[FINISH_NUM];\n-            Random rand = new Random();\n-            rand.nextBytes(b);\n-            GZIPOutputStream zip = new GZIPOutputStream(new OutputStream() {\n-                @Override\n-                public void write(byte[] b, int off, int len) throws IOException {\n-                    throw new IOException();\n-                }\n-                @Override\n-                public void write(byte b[]) throws IOException {}\n-                @Override\n-                public void write(int b) throws IOException {}\n-            });\n+            zip.write(b, 0, FINISH_NUM);\n+            \/\/close zip using finish()\n+            zip.finish();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n@@ -59,3 +90,4 @@\n-                zip.close();\n-            } catch (IOException ex) {\n-                ex.printStackTrace();\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException | IOException e) {\n+                \/\/for the first write operation IOException will be thrown\n+                \/\/second write operation should throw NPE with deflator closed error instead of infinite loop\n@@ -63,13 +95,0 @@\n-            for (int i = 0; i < 3; i++) {\n-                try {\n-                    zip.write(b, 0, FINISH_NUM);\n-                } catch (Exception e) {\n-                    if (e instanceof NullPointerException) {\n-                        System.out.println(\"Test Passed : \" + e.getMessage());\n-                    } else {\n-                        throw new RuntimeException(\"Test failed : Expected exception is not thrown\");\n-                    }\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Test failed\");\n@@ -79,0 +98,2 @@\n+\n+\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":55,"deletions":34,"binary":false,"changes":89,"status":"modified"}]}