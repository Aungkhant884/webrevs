{"files":[{"patch":"@@ -313,1 +313,1 @@\n-        } catch (Exception e) {\n+        } catch (IOException e) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test DeflatorOutputStream for infinite loop while writing on closed GZipOutputStream and ZipOutputStream.\n+ * @summary Test DeflatorOutputStream for infinite loop while writing on closed GZipOutputStream , ZipOutputStream and JarOutputStream.\n@@ -32,0 +32,1 @@\n+import java.util.jar.JarOutputStream;\n@@ -62,8 +63,18 @@\n-      public Object[][] testInput() {\n-       \/\/testGZip will close the GZipOutputStream using close() method when the boolean\n-       \/\/useCloseMethod is set to true and finish() method if the value is set to false\n-       return new Object[][] {\n-        { GZIPOutputStream.class, true },\n-        { GZIPOutputStream.class, false },\n-       };\n-      }\n+    public Object[][] testGZipInput() {\n+     \/\/testGZip will close the GZipOutputStream using close() method when the boolean\n+     \/\/useCloseMethod is set to true and finish() method if the value is set to false\n+     return new Object[][] {\n+      { GZIPOutputStream.class, true },\n+      { GZIPOutputStream.class, false },\n+     };\n+    }\n+\n+    @DataProvider(name = \"testzipjarinput\")\n+    public Object[][] testZipAndJarInput() {\n+     \/\/testZipAndJarInput will perfrom write\/closeEntry operations on JarOutputStream when the boolean\n+     \/\/useJar is set to true and on ZipOutputStream if the value is set to false\n+     return new Object[][] {\n+      { JarOutputStream.class, true },\n+      { ZipOutputStream.class, false },\n+     };\n+    }\n@@ -104,4 +115,9 @@\n-    \/\/Test for infinite loop by writing bytes to closed ZipOutputStream\n-    @Test\n-    public void testZipCloseEntry() throws IOException {\n-        ZipOutputStream zip = new ZipOutputStream(outStream);\n+    \/\/Test for infinite loop by writing bytes to closed ZipOutputStream\/JarOutputStream\n+    @Test(dataProvider = \"testzipjarinput\")\n+    public void testZipCloseEntry(Class<?> type,boolean useJar) throws IOException {\n+        ZipOutputStream zip = null;\n+        if(useJar) {\n+           zip = new JarOutputStream(outStream);\n+        } else {\n+           zip = new ZipOutputStream(outStream);\n+        }\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":29,"deletions":13,"binary":false,"changes":42,"status":"modified"}]}