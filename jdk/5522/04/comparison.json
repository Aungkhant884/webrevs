{"files":[{"patch":"@@ -236,2 +236,9 @@\n-        if (!closed) {\n-            finish();\n+        try {\n+            if (!closed) {\n+                finish();\n+                if (usesDefaultDeflater)\n+                    def.end();\n+                out.close();\n+                closed = true;\n+           }\n+        } catch(IOException e) {\n@@ -240,2 +247,1 @@\n-            out.close();\n-            closed = true;\n+            throw e;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -159,10 +159,14 @@\n-        if (!def.finished()) {\n-            def.finish();\n-            while (!def.finished()) {\n-                int len = def.deflate(buf, 0, buf.length);\n-                if (def.finished() && len <= buf.length - TRAILER_SIZE) {\n-                    \/\/ last deflater buffer. Fit trailer at the end\n-                    writeTrailer(buf, len);\n-                    len = len + TRAILER_SIZE;\n-                    out.write(buf, 0, len);\n-                    return;\n+        try {\n+            if (!def.finished()) {\n+                def.finish();\n+                while (!def.finished()) {\n+                    int len = def.deflate(buf, 0, buf.length);\n+                    if (def.finished() && len <= buf.length - TRAILER_SIZE) {\n+                        \/\/ last deflater buffer. Fit trailer at the end\n+                        writeTrailer(buf, len);\n+                        len = len + TRAILER_SIZE;\n+                        out.write(buf, 0, len);\n+                        return;\n+                    }\n+                    if (len > 0)\n+                        out.write(buf, 0, len);\n@@ -170,2 +174,5 @@\n-                if (len > 0)\n-                    out.write(buf, 0, len);\n+                \/\/ if we can't fit the trailer at the end of the last\n+                \/\/ deflater buffer, we write it separately\n+                byte[] trailer = new byte[TRAILER_SIZE];\n+                writeTrailer(trailer, 0);\n+                out.write(trailer);\n@@ -173,5 +180,4 @@\n-            \/\/ if we can't fit the trailer at the end of the last\n-            \/\/ deflater buffer, we write it separately\n-            byte[] trailer = new byte[TRAILER_SIZE];\n-            writeTrailer(trailer, 0);\n-            out.write(trailer);\n+        } catch (IOException e) {\n+            if (usesDefaultDeflater)\n+                def.end();\n+            throw e;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPOutputStream.java","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8193682\n+ * @summary Test DeflatorOutputStream for infinite loop while writing on closed stream\n+ * @run testng GZipLoopTest\n+ *\/\n+import java.io.*;\n+import java.util.Random;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n+\n+\n+public class GZipLoopTest {\n+\n+    \/\/number of bytes to write\n+    private static final int INPUT_LENGTH= 512;\n+    \/\/OutputStream that will throw an exception during a write operation\n+    private static OutputStream outStream = new OutputStream() {\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            \/\/throw exception during write\n+            throw new IOException();\n+        }\n+        @Override\n+        public void write(byte b[]) throws IOException {}\n+        @Override\n+        public void write(int b) throws IOException {}\n+    };\n+    private static byte[] b = new byte[INPUT_LENGTH];\n+    private static Random rand = new Random();\n+\n+    @DataProvider(name = \"testinput\")\n+      public Object[][] testInput() {\n+       return new Object[][] {\n+        { GZIPOutputStream.class, true },\n+        { GZIPOutputStream.class, false },\n+       };\n+      }\n+\n+    @BeforeTest\n+    public void before_test()\n+    {\n+       rand.nextBytes(b);\n+    }\n+\n+    @Test(dataProvider = \"testinput\")\n+    public void testGZip(Class<?> type, boolean useCloseMethod) throws IOException {\n+        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n+        try {\n+            zip.write(b, 0, INPUT_LENGTH);\n+            \/\/close zip\n+            if(useCloseMethod) {\n+               zip.close();\n+            } else {\n+               zip.finish();\n+            }\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                zip.write(b, 0, INPUT_LENGTH);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException e) {\n+                \/\/expected , Deflater has been closed exception\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}