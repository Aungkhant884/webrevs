{"files":[{"patch":"@@ -257,20 +257,36 @@\n-        ensureOpen();\n-        if (current != null) {\n-            ZipEntry e = current.entry;\n-            switch (e.method) {\n-            case DEFLATED -> {\n-                def.finish();\n-                while (!def.finished()) {\n-                    deflate();\n-                }\n-                if ((e.flag & 8) == 0) {\n-                    \/\/ verify size, compressed size, and crc-32 settings\n-                    if (e.size != def.getBytesRead()) {\n-                        throw new ZipException(\n-                            \"invalid entry size (expected \" + e.size +\n-                            \" but got \" + def.getBytesRead() + \" bytes)\");\n-                    }\n-                    if (e.csize != def.getBytesWritten()) {\n-                        throw new ZipException(\n-                            \"invalid entry compressed size (expected \" +\n-                            e.csize + \" but got \" + def.getBytesWritten() + \" bytes)\");\n+        try {\n+            ensureOpen();\n+            if (current != null) {\n+                ZipEntry e = current.entry;\n+                switch (e.method) {\n+                    case DEFLATED - > {\n+                        def.finish();\n+                        while (!def.finished()) {\n+                            deflate();\n+                        }\n+                        if ((e.flag & 8) == 0) {\n+                            \/\/ verify size, compressed size, and crc-32 settings\n+                            if (e.size != def.getBytesRead()) {\n+                                throw new ZipException(\n+                                    \"invalid entry size (expected \" + e.size +\n+                                    \" but got \" + def.getBytesRead() + \" bytes)\");\n+                            }\n+                            if (e.csize != def.getBytesWritten()) {\n+                                throw new ZipException(\n+                                    \"invalid entry compressed size (expected \" +\n+                                    e.csize + \" but got \" + def.getBytesWritten() + \" bytes)\");\n+                            }\n+                            if (e.crc != crc.getValue()) {\n+                                throw new ZipException(\n+                                    \"invalid entry CRC-32 (expected 0x\" +\n+                                    Long.toHexString(e.crc) + \" but got 0x\" +\n+                                    Long.toHexString(crc.getValue()) + \")\");\n+                            }\n+                        } else {\n+                            e.size = def.getBytesRead();\n+                            e.csize = def.getBytesWritten();\n+                            e.crc = crc.getValue();\n+                            writeEXT(e);\n+                        }\n+                        def.reset();\n+                        written += e.csize;\n@@ -278,5 +294,13 @@\n-                    if (e.crc != crc.getValue()) {\n-                        throw new ZipException(\n-                            \"invalid entry CRC-32 (expected 0x\" +\n-                            Long.toHexString(e.crc) + \" but got 0x\" +\n-                            Long.toHexString(crc.getValue()) + \")\");\n+                    case STORED - > {\n+                        \/\/ we already know that both e.size and e.csize are the same\n+                        if (e.size != written - locoff) {\n+                            throw new ZipException(\n+                                \"invalid entry size (expected \" + e.size +\n+                                \" but got \" + (written - locoff) + \" bytes)\");\n+                        }\n+                        if (e.crc != crc.getValue()) {\n+                            throw new ZipException(\n+                                \"invalid entry crc-32 (expected 0x\" +\n+                                Long.toHexString(e.crc) + \" but got 0x\" +\n+                                Long.toHexString(crc.getValue()) + \")\");\n+                        }\n@@ -284,5 +308,1 @@\n-                } else {\n-                    e.size = def.getBytesRead();\n-                    e.csize = def.getBytesWritten();\n-                    e.crc = crc.getValue();\n-                    writeEXT(e);\n+                    default - > throw new ZipException(\"invalid compression method\");\n@@ -290,18 +310,2 @@\n-                def.reset();\n-                written += e.csize;\n-            }\n-            case STORED -> {\n-                \/\/ we already know that both e.size and e.csize are the same\n-                if (e.size != written - locoff) {\n-                    throw new ZipException(\n-                        \"invalid entry size (expected \" + e.size +\n-                        \" but got \" + (written - locoff) + \" bytes)\");\n-                }\n-                if (e.crc != crc.getValue()) {\n-                    throw new ZipException(\n-                        \"invalid entry crc-32 (expected 0x\" +\n-                        Long.toHexString(e.crc) + \" but got 0x\" +\n-                        Long.toHexString(crc.getValue()) + \")\");\n-                }\n-            }\n-            default -> throw new ZipException(\"invalid compression method\");\n+                crc.reset();\n+                current = null;\n@@ -309,2 +313,3 @@\n-            crc.reset();\n-            current = null;\n+        } catch (Exception e) {\n+            def.end();\n+            throw e;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":55,"deletions":50,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test DeflatorOutputStream for infinite loop while writing on closed stream\n+ * @summary Test DeflatorOutputStream for infinite loop while writing on closed GZipOutputStream and ZipOutputStream.\n@@ -33,0 +33,2 @@\n+import java.util.zip.ZipOutputStream;\n+import java.util.zip.ZipEntry;\n@@ -56,1 +58,1 @@\n-    private static byte[] b = new byte[INPUT_LENGTH];\n+    private static byte[] inputBytes = new byte[INPUT_LENGTH];\n@@ -59,1 +61,1 @@\n-    @DataProvider(name = \"testinput\")\n+    @DataProvider(name = \"testgzipinput\")\n@@ -61,0 +63,2 @@\n+       \/\/testGZip will close the GZipOutputStream using close() method when the boolean  \n+       \/\/useCloseMethod is set to true and finish() method if the value is set to false\n@@ -70,1 +74,2 @@\n-       rand.nextBytes(b);\n+       \/\/add inputBytes array with random bytes to write into Zip\n+       rand.nextBytes(inputBytes);\n@@ -73,1 +78,2 @@\n-    @Test(dataProvider = \"testinput\")\n+    \/\/Test for infinite loop by writing bytes to closed GZIPOutputStream\n+    @Test(dataProvider = \"testgzipinput\")\n@@ -77,1 +83,1 @@\n-            zip.write(b, 0, INPUT_LENGTH);\n+            zip.write(inputBytes, 0, INPUT_LENGTH);\n@@ -89,1 +95,29 @@\n-                zip.write(b, 0, INPUT_LENGTH);\n+                \/\/write on a closed GZIPOutputStream\n+                zip.write(inputBytes, 0, INPUT_LENGTH);\n+                fail(\"Deflater closed exception not thrown\");\n+            } catch (NullPointerException e) {\n+                \/\/expected , Deflater has been closed exception\n+            }\n+        }\n+    }\n+\n+    \/\/Test for infinite loop by writing bytes to closed ZipOutputStream\n+    @Test\n+    public void testZipCloseEntry() throws IOException {\n+        ZipOutputStream zip = new ZipOutputStream(outStream);\n+        try {\n+            zip.putNextEntry(new ZipEntry(\"\"));\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        try {\n+            zip.write(inputBytes, 0, INPUT_LENGTH);\n+            \/\/close zip entry\n+            zip.closeEntry();\n+        } catch (IOException e) {\n+            \/\/expected\n+        }\n+        for (int i = 0; i < 3; i++) {\n+            try {\n+                \/\/write on a closed ZipOutputStream\n+                zip.write(inputBytes, 0, INPUT_LENGTH);\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZipLoopTest.java","additions":41,"deletions":7,"binary":false,"changes":48,"status":"modified"}]}