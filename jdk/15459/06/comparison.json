{"files":[{"patch":"@@ -498,1 +498,5 @@\n-     * Generates a hash code for the message format object.\n+     * {@return the hash code for this {@code ChoiceFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the values returned by\n+     * {@link #getFormats()} and {@link #getLimits()}.\n+     * @see Object#hashCode()\n@@ -511,1 +515,11 @@\n-     * Equality comparison between two\n+     * Compares the specified object with this {@code ChoiceFormat} for equality.\n+     * Returns true if the object is also a {@code ChoiceFormat} and the\n+     * two formats would format any value the same.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code ChoiceFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2346,4 +2346,3 @@\n-     * Checks if this {@code CompactNumberFormat} is equal to the\n-     * specified {@code obj}. The objects of type {@code CompactNumberFormat}\n-     * are compared, other types return false; obeys the general contract of\n-     * {@link java.lang.Object#equals(java.lang.Object) Object.equals}.\n+     * Compares the specified object with this {@code CompactNumberFormat} for equality.\n+     * Returns true if the object is also a {@code CompactNumberFormat} and the\n+     * two formats would format any value the same.\n@@ -2351,0 +2350,4 @@\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n@@ -2353,0 +2356,1 @@\n+     * @see Object#hashCode()\n@@ -2376,1 +2380,5 @@\n-     * {@return the hash code for this {@code CompactNumberFormat} instance}\n+     * {@return the hash code for this {@code CompactNumberFormat}}\n+     *\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n+     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -770,1 +770,5 @@\n-     * Overrides hashCode\n+     * {@return the hash code for this {@code DateFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the value returned by\n+     * {@link #getNumberFormat()}.\n+     * @see Object#hashCode()\n@@ -778,1 +782,11 @@\n-     * Overrides equals\n+     * Compares the specified object with this {@code DateFormat} for equality.\n+     * Returns true if the object is also a {@code DateFormat} and the\n+     * two formats would format any value the same.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DateFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -659,2 +659,5 @@\n-     * Override hashCode.\n-     * Generates a hash code for the DateFormatSymbols object.\n+     * {@return the hash code for this {@code DateFormatSymbols}}\n+     *\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n+     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}.\n+     * @see Object#hashCode()\n@@ -684,1 +687,11 @@\n-     * Override equals\n+     * Compares the specified object with this {@code DateFormatSymbols} for equality.\n+     * Returns true if the object is also a {@code DateFormatSymbols} and the two\n+     * {@code DateFormatSymbols} objects represent the same date-time formatting data.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DateFormatSymbols}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2916,1 +2916,11 @@\n-     * Overrides equals\n+     * Compares the specified object with this {@code DecimalFormat} for equality.\n+     * Returns true if the object is also a {@code DecimalFormat} and the\n+     * two formats would format any value the same.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DecimalFormat}\n+     * @see Object#equals(Object)\n@@ -2961,1 +2971,6 @@\n-     * Overrides hashCode\n+     * {@return the hash code for this {@code DecimalFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the values returned from\n+     * {@link #getPositivePrefix()} and {@link NumberFormat#hashCode()}.\n+     * @see Object#hashCode()\n+     * @see NumberFormat#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -740,1 +740,11 @@\n-     * Override equals.\n+     * Compares the specified object with this {@code DecimalFormatSymbols} for equality.\n+     * Returns true if the object is also a {@code DecimalFormatSymbols} and the two\n+     * {@code DecimalFormatSymbols} objects represent the same set of symbols.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DecimalFormatSymbols}\n+     * @see Object#equals(Object)\n@@ -770,1 +780,5 @@\n-     * Override hashCode.\n+     * {@return the hash code for this {@code DecimalFormatSymbols}}\n+     *\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n+     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}.\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1144,1 +1144,11 @@\n-     * Equality comparison between two message format objects\n+     * Compares the specified object with this {@code MessageFormat} for equality.\n+     * Returns true if the object is also a {@code MessageFormat} and the\n+     * two formats would format any value the same.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code MessageFormat}\n+     * @see Object#equals(Object)\n@@ -1162,1 +1172,5 @@\n-     * Generates a hash code for the message format object.\n+     * {@return the hash code value for this {@code MessageFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the value returned by\n+     * {@link #toPattern()}.\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -701,1 +701,5 @@\n-     * Overrides hashCode.\n+     * {@return the hash code for this {@code NumberFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the values returned by\n+     * {@link #getMaximumIntegerDigits()} and {@link #getMaximumFractionDigits()}.\n+     * @see Object#hashCode()\n@@ -710,1 +714,11 @@\n-     * Overrides equals.\n+     * Compares the specified object with this {@code NumberFormat} for equality.\n+     * Returns true if the object is also a {@code NumberFormat} and the\n+     * two formats would format any value the same.\n+     *\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code NumberFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2412,1 +2412,5 @@\n-     * {@return the hash code value for this {@code SimpleDateFormat} object}\n+     * {@return the hash code value for this {@code SimpleDateFormat}}\n+     *\n+     * @implSpec This method calculates the hash code value using the value returned by\n+     * {@link #toPattern()}.\n+     * @see Object#hashCode()\n@@ -2422,2 +2426,3 @@\n-     * Compares the given object with this {@code SimpleDateFormat} for\n-     * equality.\n+     * Compares the specified object with this {@code SimpleDateFormat} for equality.\n+     * Returns true if the object is also a {@code SimpleDateFormat} and the\n+     * two formats would format any value the same.\n@@ -2425,2 +2430,7 @@\n-     * @return true if the given object is equal to this\n-     * {@code SimpleDateFormat}\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code SimpleDateFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}