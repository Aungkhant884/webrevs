{"files":[{"patch":"@@ -500,2 +500,2 @@\n-     * The hash code value is based on the values returned by {@link #getLimits()} and\n-     * {@link #getFormats()}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code ChoiceFormat} object.\n@@ -517,3 +517,2 @@\n-     * Returns true if the object is also a {@code ChoiceFormat} and the values\n-     * returned by {@link #getLimits()} and {@link #getFormats()} of the two\n-     * {@code ChoiceFormat}s are equal.\n+     * Returns true if the object is also a {@code ChoiceFormat} and the\n+     * two formats would format any value the same.\n@@ -521,0 +520,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2348,1 +2348,1 @@\n-     * two formats represent the same formatting configuration.\n+     * two formats would format any value the same.\n@@ -2350,0 +2350,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n@@ -2378,3 +2381,2 @@\n-     * The hash code value is based on the formatting configuration, which\n-     * is represented by a number of fields from this {@code CompactNumberFormat}\n-     * object.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code CompactNumberFormat} object.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -772,1 +772,2 @@\n-     * The hash code value is based on the value returned by {@link #getNumberFormat()}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code DateFormat} object.\n@@ -783,2 +784,2 @@\n-     * Returns true if the object is also a {@code DateFormat} and the two formats\n-     * represent the same formatting configuration.\n+     * Returns true if the object is also a {@code DateFormat} and the\n+     * two formats would format any value the same.\n@@ -786,0 +787,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -692,0 +692,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2917,2 +2917,2 @@\n-     * Returns true if the object is also a {@code DecimalFormat} and the two formats\n-     * represent the same formatting configuration.\n+     * Returns true if the object is also a {@code DecimalFormat} and the\n+     * two formats would format any value the same.\n@@ -2920,0 +2920,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n@@ -2969,2 +2972,2 @@\n-     * The hash code value is based on the value returned by {@link #getPositivePrefix()}\n-     * and {@link NumberFormat#hashCode()}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code DecimalFormat} object.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -744,0 +744,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1145,2 +1145,2 @@\n-     * Returns true if the object is also a {@code MessageFormat} and the two formats\n-     * represent the same formatting configuration.\n+     * Returns true if the object is also a {@code MessageFormat} and the\n+     * two formats would format any value the same.\n@@ -1148,0 +1148,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n@@ -1170,3 +1173,2 @@\n-     * The hash code value is based on the string pattern supplied to this\n-     * {@code MessageFormat} either during construction or set by\n-     * {@link #applyPattern(String)}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code MessageFormat} object.\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -703,2 +703,2 @@\n-     * The hash code value is based on the values returned by {@link #getMaximumIntegerDigits()}\n-     * and {@link #getMaximumFractionDigits()}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code NumberFormat} object.\n@@ -716,2 +716,2 @@\n-     * Returns true if the object is also a {@code NumberFormat} and the two formats\n-     * represent the same formatting configuration.\n+     * Returns true if the object is also a {@code NumberFormat} and the\n+     * two formats would format any value the same.\n@@ -719,0 +719,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2414,1 +2414,2 @@\n-     * The hash code value is based on the value returned by {@link #toPattern()}.\n+     * The hash code value is calculated using any number of fields from the\n+     * formatting configuration of this {@code SimpleDateFormat} object.\n@@ -2427,3 +2428,2 @@\n-     * Returns true if the object is also a {@code SimpleDateFormat} and the values\n-     * returned by {@link #toPattern()} and {@link #getDateFormatSymbols()} of the\n-     * two {@code SimpleDateFormat}s are equal.\n+     * Returns true if the object is also a {@code SimpleDateFormat} and the\n+     * two formats would format any value the same.\n@@ -2431,0 +2431,3 @@\n+     * @implNote Implementers should be aware that the default implementation does an\n+     * equality check using {@code getClass} rather than {@code instanceOf} when\n+     * deciding if they should override this method.\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}