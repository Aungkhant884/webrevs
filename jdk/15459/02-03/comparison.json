{"files":[{"patch":"@@ -500,2 +500,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code ChoiceFormat} object.\n+     * The hash code value is calculated using the values returned by\n+     * {@link #getFormats()} and {@link #getLimits()}.\n@@ -520,3 +520,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -220,0 +220,2 @@\n+    \/\/ Non-transient \/ non-static fields should be added to hashCode impl\n+\n@@ -2350,3 +2352,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n@@ -2381,2 +2383,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code CompactNumberFormat} object.\n+     * All fields of this class that are non-transient and non-static are used\n+     * to calculate the hash code value.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -772,2 +772,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code DateFormat} object.\n+     * The hash code value is calculated using the value returned by\n+     * {@link #getNumberFormat()}.\n@@ -787,3 +787,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -160,0 +160,2 @@\n+    \/\/ Non-transient \/ non-static fields should be added to hashCode impl\n+\n@@ -661,2 +663,2 @@\n-     * The hash code value is based on the date-time formatting data, which is\n-     * represented by a number of fields from this {@code DateFormatSymbols} object.\n+     * All fields of this class that are non-transient and non-static are used\n+     * to calculate the hash code value.\n@@ -692,3 +694,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2920,3 +2920,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n@@ -2972,2 +2972,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code DecimalFormat} object.\n+     * The hash code value is calculated using the values returned from\n+     * {@link #getPositivePrefix()} and {@link NumberFormat#hashCode()}.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -744,3 +744,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n@@ -781,2 +781,2 @@\n-     * The hash code value is based on the set of symbols, which is represented\n-     * by a number of fields from this {@code DecimalFormatSymbols} object.\n+     * All fields of this class that are non-transient and non-static are used\n+     * to calculate the hash code value.\n@@ -996,0 +996,2 @@\n+    \/\/ Non-transient \/ non-static fields should be added to hashCode impl\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1148,3 +1148,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n@@ -1173,2 +1173,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code MessageFormat} object.\n+     * The hash code value is calculated using the value returned by\n+     * {@link #toPattern()}.\n@@ -1239,0 +1239,2 @@\n+    \/\/ Non-transient \/ non-static fields should be added to hashCode impl\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -703,2 +703,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code NumberFormat} object.\n+     * The hash code value is calculated using the values returned by\n+     * {@link #getMaximumIntegerDigits()} and {@link #getMaximumFractionDigits()}.\n@@ -719,3 +719,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2414,2 +2414,2 @@\n-     * The hash code value is calculated using any number of fields from the\n-     * formatting configuration of this {@code SimpleDateFormat} object.\n+     * The hash code value is calculated using the value returned by\n+     * {@link #toPattern()}.\n@@ -2431,3 +2431,3 @@\n-     * @implNote Implementers should be aware that the default implementation does an\n-     * equality check using {@code getClass} rather than {@code instanceof} when\n-     * deciding if they should override this method.\n+     * @implSpec The default implementation performs an equality check with a\n+     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n+     * overriding methods should do so as well.\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}