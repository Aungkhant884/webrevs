{"files":[{"patch":"@@ -498,1 +498,6 @@\n-     * Generates a hash code for the message format object.\n+     * {@return the hash code for this {@code ChoiceFormat}}\n+     *\n+     * The hash code value is based on the values returned by {@link #getLimits()} and\n+     * {@link #getFormats()}.\n+     *\n+     * @see Object#hashCode()\n@@ -511,1 +516,8 @@\n-     * Equality comparison between two\n+     * Compares the specified object with this {@code ChoiceFormat} for equality.\n+     * Returns true if the object is also a {@code ChoiceFormat} and the values\n+     * returned by {@link #getLimits()} and {@link #getFormats()} of the two\n+     * {@code ChoiceFormat}s are equal.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code ChoiceFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2346,4 +2346,3 @@\n-     * Checks if this {@code CompactNumberFormat} is equal to the\n-     * specified {@code obj}. The objects of type {@code CompactNumberFormat}\n-     * are compared, other types return false; obeys the general contract of\n-     * {@link java.lang.Object#equals(java.lang.Object) Object.equals}.\n+     * Compares the specified object with this {@code CompactNumberFormat} for equality.\n+     * Returns true if the object is also a {@code CompactNumberFormat} and the\n+     * two formats represent the same formatting configuration.\n@@ -2353,0 +2352,1 @@\n+     * @see Object#hashCode()\n@@ -2376,1 +2376,7 @@\n-     * {@return the hash code for this {@code CompactNumberFormat} instance}\n+     * {@return the hash code for this {@code CompactNumberFormat}}\n+     *\n+     * The hash code value is based on the formatting configuration, which\n+     * is represented by a number of fields from this {@code CompactNumberFormat}\n+     * object.\n+     *\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -770,1 +770,5 @@\n-     * Overrides hashCode\n+     * {@return the hash code for this {@code DateFormat}}\n+     *\n+     * The hash code value is based on the value returned by {@link #getNumberFormat()}.\n+     *\n+     * @see Object#hashCode()\n@@ -778,1 +782,7 @@\n-     * Overrides equals\n+     * Compares the specified object with this {@code DateFormat} for equality.\n+     * Returns true if the object is also a {@code DateFormat} and the two formats\n+     * represent the same formatting configuration.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DateFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -659,2 +659,6 @@\n-     * Override hashCode.\n-     * Generates a hash code for the DateFormatSymbols object.\n+     * {@return the hash code for this {@code DateFormatSymbols}}\n+     *\n+     * The hash code value is based on the date-time formatting data, which is\n+     * represented by a number of fields from this {@code DateFormatSymbols} object.\n+     *\n+     * @see Object#hashCode()\n@@ -684,1 +688,7 @@\n-     * Override equals\n+     * Compares the specified object with this {@code DateFormatSymbols} for equality.\n+     * Returns true if the object is also a {@code DateFormatSymbols} and the two\n+     * {@code DateFormatSymbols} objects represent the same date-time formatting data.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DateFormatSymbols}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2916,1 +2916,7 @@\n-     * Overrides equals\n+     * Compares the specified object with this {@code DecimalFormat} for equality.\n+     * Returns true if the object is also a {@code DecimalFormat} and the two formats\n+     * represent the same formatting configuration.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DecimalFormat}\n+     * @see Object#equals(Object)\n@@ -2961,1 +2967,7 @@\n-     * Overrides hashCode\n+     * {@return the hash code for this {@code DecimalFormat}}\n+     *\n+     * The hash code value is based on the value returned by {@link #getPositivePrefix()}\n+     * and {@link NumberFormat#hashCode()}.\n+     *\n+     * @see Object#hashCode()\n+     * @see NumberFormat#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -740,1 +740,7 @@\n-     * Override equals.\n+     * Compares the specified object with this {@code DecimalFormatSymbols} for equality.\n+     * Returns true if the object is also a {@code DecimalFormatSymbols} and the two\n+     * {@code DecimalFormatSymbols} objects represent the same set of symbols.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code DecimalFormatSymbols}\n+     * @see Object#equals(Object)\n@@ -770,1 +776,6 @@\n-     * Override hashCode.\n+     * {@return the hash code for this {@code DecimalFormatSymbols}}\n+     *\n+     * The hash code value is based on the set of symbols, which is represented\n+     * by a number of fields from this {@code DecimalFormatSymbols} object.\n+     *\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1144,1 +1144,7 @@\n-     * Equality comparison between two message format objects\n+     * Compares the specified object with this {@code MessageFormat} for equality.\n+     * Returns true if the object is also a {@code MessageFormat} and the two formats\n+     * represent the same formatting configuration.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code MessageFormat}\n+     * @see Object#equals(Object)\n@@ -1162,1 +1168,7 @@\n-     * Generates a hash code for the message format object.\n+     * {@return the hash code value for this {@code MessageFormat}}\n+     *\n+     * The hash code value is based on the string pattern supplied to this\n+     * {@code MessageFormat} either during construction or set by\n+     * {@link #applyPattern(String)}.\n+     *\n+     * @see Object#hashCode()\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -701,1 +701,6 @@\n-     * Overrides hashCode.\n+     * {@return the hash code for this {@code NumberFormat}}\n+     *\n+     * The hash code value is based on the values returned by {@link #getMaximumIntegerDigits()}\n+     * and {@link #getMaximumFractionDigits()}.\n+     *\n+     * @see Object#hashCode()\n@@ -710,1 +715,7 @@\n-     * Overrides equals.\n+     * Compares the specified object with this {@code NumberFormat} for equality.\n+     * Returns true if the object is also a {@code NumberFormat} and the two formats\n+     * represent the same formatting configuration.\n+     *\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code NumberFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2412,1 +2412,5 @@\n-     * {@return the hash code value for this {@code SimpleDateFormat} object}\n+     * {@return the hash code value for this {@code SimpleDateFormat}}\n+     *\n+     * The hash code value is based on the value returned by {@link #toPattern()}.\n+     *\n+     * @see Object#hashCode()\n@@ -2422,2 +2426,4 @@\n-     * Compares the given object with this {@code SimpleDateFormat} for\n-     * equality.\n+     * Compares the specified object with this {@code SimpleDateFormat} for equality.\n+     * Returns true if the object is also a {@code SimpleDateFormat} and the values\n+     * returned by {@link #toPattern()} and {@link #getDateFormatSymbols()} of the\n+     * two {@code SimpleDateFormat}s are equal.\n@@ -2425,2 +2431,3 @@\n-     * @return true if the given object is equal to this\n-     * {@code SimpleDateFormat}\n+     * @param  obj object to be compared for equality\n+     * @return {@code true} if the specified object is equal to this {@code SimpleDateFormat}\n+     * @see Object#equals(Object)\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"}]}