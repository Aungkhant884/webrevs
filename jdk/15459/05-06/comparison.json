{"files":[{"patch":"@@ -500,1 +500,1 @@\n-     * The hash code value is calculated using the values returned by\n+     * @implSpec This method calculates the hash code value using the values returned by\n@@ -502,1 +502,0 @@\n-     *\n@@ -520,3 +519,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -220,1 +220,0 @@\n-\n@@ -2351,3 +2350,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n@@ -2382,1 +2382,1 @@\n-     * Non-transient instance fields of this class are used to calculate\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n@@ -2384,1 +2384,0 @@\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -772,1 +772,1 @@\n-     * The hash code value is calculated using the value returned by\n+     * @implSpec This method calculates the hash code value using the value returned by\n@@ -774,1 +774,0 @@\n-     *\n@@ -787,3 +786,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -661,3 +661,2 @@\n-     * Non-transient instance fields of this class are used to calculate\n-     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}\n-     *\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n+     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}.\n@@ -692,3 +691,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2920,3 +2920,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n@@ -2972,1 +2973,1 @@\n-     * The hash code value is calculated using the values returned from\n+     * @implSpec This method calculates the hash code value using the values returned from\n@@ -2974,1 +2975,0 @@\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -744,3 +744,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n@@ -781,3 +782,2 @@\n-     * Non-transient instance fields of this class are used to calculate\n-     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}\n-     *\n+     * @implSpec Non-transient instance fields of this class are used to calculate\n+     * a hash code value which adheres to the contract defined in {@link Objects#hashCode}.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1148,3 +1148,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n@@ -1173,1 +1174,1 @@\n-     * The hash code value is calculated using the value returned by\n+     * @implSpec This method calculates the hash code value using the value returned by\n@@ -1175,1 +1176,0 @@\n-     *\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -703,1 +703,1 @@\n-     * The hash code value is calculated using the values returned by\n+     * @implSpec This method calculates the hash code value using the values returned by\n@@ -705,1 +705,0 @@\n-     *\n@@ -719,3 +718,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2414,1 +2414,1 @@\n-     * The hash code value is calculated using the value returned by\n+     * @implSpec This method calculates the hash code value using the value returned by\n@@ -2416,1 +2416,0 @@\n-     *\n@@ -2431,3 +2430,4 @@\n-     * @implSpec The default implementation performs an equality check with a\n-     * notion of class identity based on {@code getClass()}, not {@code instanceof};\n-     * overriding methods should do so as well.\n+     * @implSpec This method performs an equality check with a notion of class\n+     * identity based on {@code getClass()}, rather than {@code instanceof}.\n+     * Therefore, in the equals methods in subclasses, no instance of this class\n+     * should compare as equal to an instance of a subclass.\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}