{"files":[{"patch":"@@ -1467,9 +1467,9 @@\n-     * During parsing, the text will be parsed into a day period type first. If\n-     * {@code HOUR_OF_DAY}, and optionally {@code MINUTE_OF_HOUR} exists,\n-     * those values are validated with the parsed day period. If they are within the\n-     * parsed day period, those values remain intact, otherwise {@code DateTimeException}\n-     * is thrown. If {@code HOUR_OF_AMPM} exists and validated with the day period,\n-     * {@code HOUR_OF_DAY} is derived from the parsed day period. If neither\n-     * {@code HOUR_OF_DAY} nor {@code HOUR_OF_AMPM} exists, {@code HOUR_OF_DAY} and\n-     * {@code MINUTE_OF_HOUR} are resolved to the mid-point of the day period in\n-     * {@link ResolverStyle#SMART SMART} or {@link ResolverStyle#LENIENT LENIENT} mode.\n+     * During parsing, the text will be parsed into a day period type first. Then\n+     * the parsed day period is combined with other fields to make a {@code LocalTime} in\n+     * the resolving phase. If the {@code HOUR_OF_AMPM} field is present, it is combined\n+     * with the day period to make {@code HOUR_OF_DAY} taking into account any\n+     * {@code MINUTE_OF_HOUR} value. If {@code HOUR_OF_DAY} is present, it is validated\n+     * against the day period taking into account any {@code MINUTE_OF_HOUR} value. If a\n+     * day period is present without {@code HOUR_OF_DAY}, {@code MINUTE_OF_HOUR},\n+     * {@code SECOND_OF_MINUTE} and {@code NANO_OF_SECOND} then the midpoint of the\n+     * day period is set as the time in {@code SMART} and {@code LENIENT} mode.\n@@ -1477,5 +1477,5 @@\n-     * for it in the formatter locale is from 21:00 to 06:00, then {@code HOUR_OF_DAY}\n-     * is set to '1' and {@code MINUTE_OF_HOUR} set to '30'. If {@code AMPM_OF_DAY} exists\n-     * and no {@code HOUR_OF_DAY} is resolved, the parsed day period takes precedence.\n-     * If any conflict occurs in {@link ResolverStyle#LENIENT LENIENT} mode, no\n-     * exception is thrown and the day period is ignored.\n+     * for it in the formatter locale is from 21:00 to 06:00, then it results in\n+     * the {@code LocalTime} of 01:30.\n+     * If the resolved time conflicts with the day period, {@code DateTimeException} is\n+     * thrown in {@code STRICT} and {@code SMART} mode. In {@code LENIENT} mode, no\n+     * exception is thrown and the parsed day period is ignored.\n@@ -5063,4 +5063,1 @@\n-            long value = (hod * 60 + (moh != null ? moh : 0)) % 1_440;\n-            if (value < 0) {\n-                value += 1_440;\n-            }\n+            long value = Math.floorMod(hod, 24) * 60 + (moh != null ? Math.floorMod(moh, 60) : 0);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"}]}