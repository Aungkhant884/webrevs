{"files":[{"patch":"@@ -86,0 +86,1 @@\n+import java.time.temporal.ChronoField;\n@@ -88,0 +89,3 @@\n+import java.time.temporal.TemporalField;\n+import java.time.temporal.TemporalUnit;\n+import java.time.temporal.ValueRange;\n@@ -807,0 +811,72 @@\n+    @Test\n+    public void test_dayPeriodUserFieldResolution() {\n+        var dtf = builder\n+                .appendValue(new TemporalField() {\n+                                 @Override\n+                                 public TemporalUnit getBaseUnit() {\n+                                     return null;\n+                                 }\n+\n+                                 @Override\n+                                 public TemporalUnit getRangeUnit() {\n+                                     return null;\n+                                 }\n+\n+                                 @Override\n+                                 public ValueRange range() {\n+                                     return null;\n+                                 }\n+\n+                                 @Override\n+                                 public boolean isDateBased() {\n+                                     return false;\n+                                 }\n+\n+                                 @Override\n+                                 public boolean isTimeBased() {\n+                                     return false;\n+                                 }\n+\n+                                 @Override\n+                                 public boolean isSupportedBy(TemporalAccessor temporal) {\n+                                     return false;\n+                                 }\n+\n+                                 @Override\n+                                 public ValueRange rangeRefinedBy(TemporalAccessor temporal) {\n+                                     return null;\n+                                 }\n+\n+                                 @Override\n+                                 public long getFrom(TemporalAccessor temporal) {\n+                                     return 0;\n+                                 }\n+\n+                                 @Override\n+                                 public <R extends Temporal> R adjustInto(R temporal, long newValue) {\n+                                     return null;\n+                                 }\n+\n+                                 @Override\n+                                 public TemporalAccessor resolve(\n+                                         Map<TemporalField, Long> fieldValues,\n+                                         TemporalAccessor partialTemporal,\n+                                         ResolverStyle resolverStyle) {\n+                                     fieldValues.remove(this);\n+                                     fieldValues.put(ChronoField.HOUR_OF_DAY, 6L);\n+                                     return null;\n+                                 }\n+                             },\n+                        1)\n+                .appendPattern(\" B\")\n+                .toFormatter()\n+                .withLocale(Locale.US);\n+        assertEquals((long)dtf.parse(\"0 in the morning\").getLong(ChronoField.HOUR_OF_DAY), 6L);\n+        try {\n+            dtf.parse(\"0 at night\");\n+            throw new RuntimeException(\"DateTimeParseException should be thrown\");\n+        } catch (DateTimeParseException e) {\n+            \/\/ success\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeFormatterBuilder.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"}]}