{"files":[{"patch":"@@ -1466,1 +1466,1 @@\n-     * locale in the formatter.\n+     * locale in the formatter. \"midnight\" type designates \"00:00\".\n@@ -1478,3 +1478,4 @@\n-     * is set to '1' and {@code MINUTE_OF_HOUR} set to '30'. If any conflict occurs in\n-     * {@link ResolverStyle#LENIENT LENIENT} mode, no exception is thrown and the day\n-     * period is ignored.\n+     * is set to '1' and {@code MINUTE_OF_HOUR} set to '30'. If {@code AMPM_OF_DAY} exists\n+     * and no {@code HOUR_OF_DAY} is resolved, the parsed day period takes the precedence.\n+     * If any conflict occurs in {@link ResolverStyle#LENIENT LENIENT} mode, no\n+     * exception is thrown and the day period is ignored.\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-import java.util.Locale;\n@@ -420,21 +419,9 @@\n-        if (fieldValues.containsKey(AMPM_OF_DAY)) {\n-            if (fieldValues.containsKey(HOUR_OF_AMPM)) {\n-                long ap = fieldValues.remove(AMPM_OF_DAY);\n-                long hap = fieldValues.remove(HOUR_OF_AMPM);\n-                if (resolverStyle == ResolverStyle.LENIENT) {\n-                    updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), hap));\n-                } else {  \/\/ STRICT or SMART\n-                    AMPM_OF_DAY.checkValidValue(ap);\n-                    HOUR_OF_AMPM.checkValidValue(hap);\n-                    updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + hap);\n-                }\n-            } else if (dayPeriod == null) {\n-                \/\/ Convert to DayPeriod for later resolution. Locale does not care, so\n-                \/\/ just use the default, whose DayPeriod instance may already be cached.\n-                long ap = fieldValues.remove(AMPM_OF_DAY);\n-                if (resolverStyle == ResolverStyle.LENIENT) {\n-                    ap = Math.abs(ap) % 2;\n-                } else {  \/\/ STRICT or SMART\n-                    AMPM_OF_DAY.checkValidValue(ap);\n-                }\n-                dayPeriod = DayPeriod.ofLocale(Locale.getDefault(Locale.Category.FORMAT), ap);\n+        if (fieldValues.containsKey(AMPM_OF_DAY) && fieldValues.containsKey(HOUR_OF_AMPM)) {\n+            long ap = fieldValues.remove(AMPM_OF_DAY);\n+            long hap = fieldValues.remove(HOUR_OF_AMPM);\n+            if (resolverStyle == ResolverStyle.LENIENT) {\n+                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), hap));\n+            } else {  \/\/ STRICT or SMART\n+                AMPM_OF_DAY.checkValidValue(ap);\n+                HOUR_OF_AMPM.checkValidValue(hap);\n+                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + hap);\n@@ -506,7 +493,11 @@\n-                \/\/ dayPeriod precedes AmPm. Override it if exists.\n-                if (fieldValues.containsKey(AMPM_OF_DAY)) {\n-                    long ap = fieldValues.remove(AMPM_OF_DAY);\n-                    if (resolverStyle != ResolverStyle.LENIENT) {\n-                        AMPM_OF_DAY.checkValidValue(ap);\n-                    }\n-                }\n+            }\n+        } else if (fieldValues.containsKey(AMPM_OF_DAY) && !fieldValues.containsKey(HOUR_OF_DAY)) {\n+            \/\/ If no day period exists and ampm-of-day is not resolved yet,\n+            \/\/ give the midpoint time 06:00 and 18:00 for am\/pm respectively, unless\n+            \/\/ hour-of-day is resolved at this point.\n+            long ap = fieldValues.remove(AMPM_OF_DAY);\n+            if (resolverStyle == ResolverStyle.LENIENT) {\n+                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), 6));\n+            } else {  \/\/ STRICT or SMART\n+                AMPM_OF_DAY.checkValidValue(ap);\n+                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + 6);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":20,"deletions":29,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -336,2 +336,3 @@\n-     * {@code HOUR_OF_AMPM} to form {@code HOUR_OF_DAY} by multiplying\n-     * the {@code AMPM_OF_DAY} value by 12.\n+     * {@code HOUR_OF_AMPM} (if not present, it defaults to '6') to form\n+     * {@code HOUR_OF_DAY} by multiplying the {@code AMPM_OF_DAY} value\n+     * by 12.\n","filename":"src\/java.base\/share\/classes\/java\/time\/temporal\/ChronoField.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}