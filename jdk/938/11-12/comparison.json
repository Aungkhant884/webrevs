{"files":[{"patch":"@@ -1483,1 +1483,1 @@\n-     * \"midnight\" type allows both \"00:00\" as the start-of-day and \"24:00\" as the\n+     * The \"midnight\" type allows both \"00:00\" as the start-of-day and \"24:00\" as the\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -341,17 +341,0 @@\n-    private void updateCheckDayPeriodConflict(TemporalField changeField, Long changeValue) {\n-        Long old = fieldValues.put(changeField, changeValue);\n-        if (resolverStyle != ResolverStyle.LENIENT) {\n-            if (old != null && old.longValue() != changeValue.longValue()) {\n-                throw new DateTimeException(\"Conflict found: \" + changeField + \" \" + old +\n-                        \" differs from \" + changeField + \" \" + changeValue +\n-                        \" while resolving \" + dayPeriod);\n-            }\n-            long hod = fieldValues.get(HOUR_OF_DAY);\n-            long moh = fieldValues.containsKey(MINUTE_OF_HOUR) ? fieldValues.get(MINUTE_OF_HOUR) : 0;\n-            long mod =  hod * 60 + moh;\n-            if (!dayPeriod.includes(mod)) {\n-                throw new DateTimeException(\"Conflict found: Resolved time %02d:%02d\".formatted(hod, moh) +\n-                        \" conflicts with \" + dayPeriod);\n-            }\n-        }\n-    }\n@@ -502,4 +485,5 @@\n-            if (dayPeriod.includes((hoap % 24 + 12) * 60)) {\n-                hoap += 12;\n-            }\n-            updateCheckDayPeriodConflict(HOUR_OF_DAY, hoap);\n+            Long mohObj = fieldValues.get(MINUTE_OF_HOUR);\n+            long moh = mohObj != null ? Math.floorMod(mohObj, 60) : 0;\n+            long excessHours = dayPeriod.includes((Math.floorMod(hoap, 12) + 12) * 60 + moh) ? 12 : 0;\n+            long hod = Math.addExact(hoap, excessHours);\n+            updateCheckConflict(HOUR_OF_AMPM, HOUR_OF_DAY, hod);\n@@ -546,1 +530,5 @@\n-            if (!fieldValues.containsKey(HOUR_OF_DAY) && resolverStyle != ResolverStyle.STRICT) {\n+            if (!fieldValues.containsKey(HOUR_OF_DAY) &&\n+                    !fieldValues.containsKey(MINUTE_OF_HOUR) &&\n+                    !fieldValues.containsKey(SECOND_OF_MINUTE) &&\n+                    !fieldValues.containsKey(NANO_OF_SECOND) &&\n+                    resolverStyle != ResolverStyle.STRICT) {\n@@ -549,2 +537,2 @@\n-                    fieldValues.put(HOUR_OF_DAY, midpoint \/ 60);\n-                    fieldValues.put(MINUTE_OF_HOUR, midpoint % 60);\n+                    resolveTime(midpoint \/ 60, midpoint % 60, 0, 0);\n+                    dayPeriod = null;\n@@ -552,1 +540,0 @@\n-                    \/\/ Set the midpoint time 06:00 and 18:00 for am\/pm respectively\n@@ -555,1 +542,1 @@\n-                        updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), 6));\n+                        resolveTime(Math.addExact(Math.multiplyExact(ap, 12), 6), 0, 0, 0);\n@@ -558,1 +545,1 @@\n-                        updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + 6);\n+                        resolveTime(ap * 12 + 6, 0, 0, 0);\n@@ -566,5 +553,0 @@\n-                if (dayPeriod != null) {\n-                    \/\/ Check whether the hod is within the day period\n-                    updateCheckDayPeriodConflict(HOUR_OF_DAY, hod);\n-                }\n-\n@@ -585,0 +567,9 @@\n+\n+                if (dayPeriod != null && resolverStyle != ResolverStyle.LENIENT) {\n+                    \/\/ Check whether the hod\/mohVal is within the day period\n+                    if (!dayPeriod.includes(hod * 60 + mohVal)) {\n+                        throw new DateTimeException(\"Conflict found: Resolved time %02d:%02d\".formatted(hod, mohVal) +\n+                                \" conflicts with \" + dayPeriod);\n+                    }\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":23,"deletions":32,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import static org.testng.Assert.fail;\n@@ -75,0 +76,1 @@\n+import java.time.Period;\n@@ -769,17 +771,23 @@\n-                {\"H B\", ResolverStyle.SMART, \"47 at night\", 23},\n-                {\"H B\", ResolverStyle.SMART, \"51 at night\", 3},\n-                {\"K B\", ResolverStyle.SMART, \"59 at night\", 23},\n-                {\"K B\", ResolverStyle.SMART, \"51 at night\", 3},\n-                {\"K B\", ResolverStyle.SMART, \"59 in the morning\", 11},\n-                {\"h B\", ResolverStyle.SMART, \"59 at night\", 23},\n-                {\"h B\", ResolverStyle.SMART, \"51 at night\", 3},\n-                {\"h B\", ResolverStyle.SMART, \"59 in the morning\", 11},\n-\n-                {\"H B\", ResolverStyle.LENIENT, \"47 at night\", 23},\n-                {\"H B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n-                {\"K B\", ResolverStyle.LENIENT, \"59 at night\", 23},\n-                {\"K B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n-                {\"K B\", ResolverStyle.LENIENT, \"59 in the morning\", 11},\n-                {\"h B\", ResolverStyle.LENIENT, \"59 at night\", 23},\n-                {\"h B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n-                {\"h B\", ResolverStyle.LENIENT, \"59 in the morning\", 11},\n+                {\"H B\", ResolverStyle.SMART, \"47 at night\", 23, null},\n+                {\"H B\", ResolverStyle.SMART, \"51 at night\", 3, null},\n+                {\"H B\", ResolverStyle.SMART, \"-2 at night\", 22, null},\n+                {\"K B\", ResolverStyle.SMART, \"59 at night\", 23, null},\n+                {\"K B\", ResolverStyle.SMART, \"51 at night\", 3, null},\n+                {\"K B\", ResolverStyle.SMART, \"59 in the morning\", 11, null},\n+                {\"K B\", ResolverStyle.SMART, \"-2 in the morning\", 22, null},\n+                {\"h B\", ResolverStyle.SMART, \"59 at night\", 23, null},\n+                {\"h B\", ResolverStyle.SMART, \"51 at night\", 3, null},\n+                {\"h B\", ResolverStyle.SMART, \"59 in the morning\", 11, null},\n+                {\"h B\", ResolverStyle.SMART, \"-2 in the morning\", 22, null},\n+\n+                {\"H B\", ResolverStyle.LENIENT, \"47 at night\", 23, Period.ofDays(1)},\n+                {\"H B\", ResolverStyle.LENIENT, \"51 at night\", 3, Period.ofDays(2)},\n+                {\"H B\", ResolverStyle.LENIENT, \"-2 at night\", 22, Period.ofDays(-1)},\n+                {\"K B\", ResolverStyle.LENIENT, \"59 at night\", 23, Period.ofDays(2)},\n+                {\"K B\", ResolverStyle.LENIENT, \"51 at night\", 3, Period.ofDays(2)},\n+                {\"K B\", ResolverStyle.LENIENT, \"59 in the morning\", 11, Period.ofDays(2)},\n+                {\"K B\", ResolverStyle.LENIENT, \"-2 in the morning\", 22, Period.ofDays(-1)},\n+                {\"h B\", ResolverStyle.LENIENT, \"59 at night\", 23, Period.ofDays(2)},\n+                {\"h B\", ResolverStyle.LENIENT, \"51 at night\", 3, Period.ofDays(2)},\n+                {\"h B\", ResolverStyle.LENIENT, \"59 in the morning\", 11, Period.ofDays(2)},\n+                {\"h B\", ResolverStyle.LENIENT, \"-2 in the morning\", 22, Period.ofDays(-1)},\n@@ -790,1 +798,1 @@\n-    public void test_dayPeriodParsePatternInvalid(String pattern, ResolverStyle rs, String hourDayPeriod, long expected) throws Exception {\n+    public void test_dayPeriodParsePatternInvalid(String pattern, ResolverStyle rs, String hourDayPeriod, long expected, Period expectedExcessDays) throws Exception {\n@@ -799,0 +807,1 @@\n+            assertEquals(p.query(DateTimeFormatter.parsedExcessDays()), expectedExcessDays);\n@@ -877,1 +886,1 @@\n-            throw new RuntimeException(\"DateTimeParseException should be thrown\");\n+            fail(\"DateTimeParseException should be thrown\");\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeFormatterBuilder.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"}]}