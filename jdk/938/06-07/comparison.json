{"files":[{"patch":"@@ -1475,1 +1475,2 @@\n-     * {@code MINUTE_OF_HOUR} are resolved to the mid-point of the day period.\n+     * {@code MINUTE_OF_HOUR} are resolved to the mid-point of the day period in\n+     * {@link ResolverStyle#SMART SMART} or {@link ResolverStyle#LENIENT LENIENT} mode.\n@@ -5055,2 +5056,2 @@\n-            Long value = context.getValue(MINUTE_OF_DAY);\n-            if (value == null) {\n+            Long hod = context.getValue(HOUR_OF_DAY);\n+            if (hod == null) {\n@@ -5059,0 +5060,5 @@\n+            Long moh = context.getValue(MINUTE_OF_HOUR);\n+            Long value = (hod * 60 + (moh != null ? moh : 0)) % 1_440;\n+            if (value < 0) {\n+                value += 1_440;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -489,1 +489,1 @@\n-            } else {\n+            } else if (resolverStyle != ResolverStyle.STRICT){\n@@ -494,3 +494,4 @@\n-        } else if (fieldValues.containsKey(AMPM_OF_DAY) && !fieldValues.containsKey(HOUR_OF_DAY)) {\n-            \/\/ If no day period exists and ampm-of-day is not resolved yet,\n-            \/\/ give the midpoint time 06:00 and 18:00 for am\/pm respectively, unless\n+        } else if (fieldValues.containsKey(AMPM_OF_DAY) && !fieldValues.containsKey(HOUR_OF_DAY) &&\n+                    resolverStyle != ResolverStyle.STRICT) {\n+            \/\/ If no day period exists, ampm-of-day is not resolved yet, and in non-STRICT mode,\n+            \/\/ set the midpoint time 06:00 and 18:00 for am\/pm respectively, unless\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -857,4 +857,4 @@\n-                {STRICT, 0, LocalTime.of(6, 0), 0},\n-                {STRICT, 1, LocalTime.of(18, 0), 1},\n-                {STRICT, -1, null, -1},\n-                {STRICT, 2, null, 2},\n+                {STRICT, 0, null, 0},\n+                {STRICT, 1, null, 1},\n+                {STRICT, -1, null, null},\n+                {STRICT, 2, null, null},\n@@ -864,2 +864,2 @@\n-                {SMART, -1, null, -1},\n-                {SMART, 2, null, -2},\n+                {SMART, -1, null, null},\n+                {SMART, 2, null, null},\n@@ -879,1 +879,1 @@\n-        if (expectedTime != null) {\n+        if (expectedValue != null) {\n","filename":"test\/jdk\/java\/time\/tck\/java\/time\/format\/TCKDateTimeParseResolver.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -783,0 +783,7 @@\n+    @Test (expectedExceptions = DateTimeParseException.class)\n+    public void test_dayPeriodParseStrictNoTime() {\n+        builder.appendPattern(\"B\");\n+        DateTimeFormatter f = builder.toFormatter().withLocale(Locale.US).withResolverStyle(ResolverStyle.STRICT);\n+        LocalTime.parse(\"at night\", f);\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeFormatterBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}