{"files":[{"patch":"@@ -1488,2 +1488,5 @@\n-        if (style != TextStyle.FULL && style != TextStyle.SHORT && style != TextStyle.NARROW) {\n-            throw new IllegalArgumentException(\"Style must be either full, short, or narrow\");\n+        switch (style) {\n+            \/\/ Stand-alone is not applicable. Convert to standard text style\n+            case FULL_STANDALONE -> style = TextStyle.FULL;\n+            case SHORT_STANDALONE -> style = TextStyle.SHORT;\n+            case NARROW_STANDALONE -> style = TextStyle.NARROW;\n@@ -1869,1 +1872,1 @@\n-                        case 1, 2, 3 -> appendDayPeriodText(TextStyle.SHORT);\n+                        case 1 -> appendDayPeriodText(TextStyle.SHORT);\n@@ -5094,1 +5097,1 @@\n-            return \"Text(DayPeriod,\" + textStyle + \")\";\n+            return \"DayPeriod(\" + textStyle + \")\";\n@@ -5136,0 +5139,1 @@\n+     * This is a value-based class.\n@@ -5172,1 +5176,1 @@\n-        DayPeriod(long from, long to, long index) {\n+        private DayPeriod(long from, long to, long index) {\n@@ -5252,1 +5256,1 @@\n-                final Map<DayPeriod, Long> pm = new ConcurrentHashMap<>();\n+                final Map<DayPeriod, Long> periodMap = new ConcurrentHashMap<>();\n@@ -5263,1 +5267,1 @@\n-                            pm.putIfAbsent(\n+                            periodMap.putIfAbsent(\n@@ -5273,3 +5277,3 @@\n-                pm.putIfAbsent(new DayPeriod(0, 720, 0), 0L);\n-                pm.putIfAbsent(new DayPeriod(720, 1_440, 1), 1L);\n-                return pm;\n+                periodMap.putIfAbsent(new DayPeriod(0, 720, 0), 0L);\n+                periodMap.putIfAbsent(new DayPeriod(720, 1_440, 1), 1L);\n+                return periodMap;\n@@ -5289,1 +5293,3 @@\n-                .orElseThrow();\n+                .orElseThrow(() -> new DateTimeException(\n+                    \"DayPeriod could not be determined for the locale \" +\n+                    locale + \" at type index \" + index));\n@@ -5306,0 +5312,6 @@\n+\n+        @Override\n+        public String toString() {\n+            return \"DayPeriod(%02d:%02d\".formatted(from \/ 60, from % 60) +\n+                    (from == to ? \")\" : \"-%02d:%02d)\".formatted(to \/ 60, to % 60));\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-                        \" while resolving  \" + dayPeriod);\n+                        \" while resolving \" + dayPeriod);\n@@ -349,2 +349,3 @@\n-            long mod = fieldValues.get(HOUR_OF_DAY) * 60 +\n-                    (fieldValues.containsKey(MINUTE_OF_HOUR) ? fieldValues.get(MINUTE_OF_HOUR) : 0);\n+            long hod = fieldValues.get(HOUR_OF_DAY);\n+            long moh = fieldValues.containsKey(MINUTE_OF_HOUR) ? fieldValues.get(MINUTE_OF_HOUR) : 0;\n+            long mod =  hod * 60 + moh;\n@@ -352,1 +353,2 @@\n-                throw new DateTimeException(\"Conflict found: \" + changeField + \" conflict with day period\");\n+                throw new DateTimeException(\"Conflict found: Resolved time %02d:%02d\".formatted(hod, moh) +\n+                        \" conflicts with \" + dayPeriod);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+import java.time.format.ResolverStyle;\n@@ -540,1 +541,1 @@\n-        assertEquals(f.toString(), \"Text(DayPeriod,FULL)\");\n+        assertEquals(f.toString(), \"DayPeriod(FULL)\");\n@@ -670,27 +671,55 @@\n-                {TextStyle.FULL, Locale.US, \"00:01 midnight\"},\n-                {TextStyle.FULL, Locale.US, \"06:01 at night\"},\n-                {TextStyle.FULL, Locale.US, \"05:59 in the morning\"},\n-                {TextStyle.FULL, Locale.US, \"11:59 noon\"},\n-                {TextStyle.FULL, Locale.US, \"18:00 in the afternoon\"},\n-                {TextStyle.FULL, Locale.US, \"17:59 in the evening\"},\n-                {TextStyle.NARROW, Locale.US, \"00:01 mi\"},\n-                {TextStyle.NARROW, Locale.US, \"06:01 at night\"},\n-                {TextStyle.NARROW, Locale.US, \"05:59 in the morning\"},\n-                {TextStyle.NARROW, Locale.US, \"11:59 n\"},\n-                {TextStyle.NARROW, Locale.US, \"18:00 in the afternoon\"},\n-                {TextStyle.NARROW, Locale.US, \"17:59 in the evening\"},\n-\n-                {TextStyle.FULL, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"03:59 \\u671d\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"12:01 \\u6b63\\u5348\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"16:00 \\u663c\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"19:01 \\u5915\\u65b9\"},\n-                {TextStyle.FULL, Locale.JAPAN, \"23:00 \\u591c\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"03:59 \\u671d\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"12:01 \\u6b63\\u5348\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"16:00 \\u663c\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"19:01 \\u5915\\u65b9\"},\n-                {TextStyle.NARROW, Locale.JAPAN, \"23:00 \\u591c\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"00:01 midnight\", \"00:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"06:01 at night\", \"21:00-06:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"05:59 in the morning\", \"06:00-12:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"11:59 noon\", \"12:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"18:00 in the afternoon\", \"12:00-18:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.US, \"17:59 in the evening\", \"18:00-21:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"00:01 mi\", \"00:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"06:01 at night\", \"21:00-06:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"05:59 in the morning\", \"06:00-12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"11:59 n\", \"12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"18:00 in the afternoon\", \"12:00-18:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.US, \"17:59 in the evening\", \"18:00-21:00\"},\n+\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\", \"00:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\", \"23:00-04:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"03:59 \\u671d\", \"04:00-12:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"12:01 \\u6b63\\u5348\", \"12:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"16:00 \\u663c\", \"12:00-16:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"19:01 \\u5915\\u65b9\", \"16:00-19:00\"},\n+                {TextStyle.FULL, ResolverStyle.SMART, Locale.JAPAN, \"23:00 \\u591c\", \"19:00-23:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\", \"00:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\", \"23:00-04:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"03:59 \\u671d\", \"04:00-12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"12:01 \\u6b63\\u5348\", \"12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"16:00 \\u663c\", \"12:00-16:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"19:01 \\u5915\\u65b9\", \"16:00-19:00\"},\n+                {TextStyle.NARROW, ResolverStyle.SMART, Locale.JAPAN, \"23:00 \\u591c\", \"19:00-23:00\"},\n+\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"00:01 midnight\", \"00:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"06:01 at night\", \"21:00-06:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"05:59 in the morning\", \"06:00-12:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"11:59 noon\", \"12:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"18:00 in the afternoon\", \"12:00-18:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.US, \"17:59 in the evening\", \"18:00-21:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"00:01 mi\", \"00:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"06:01 at night\", \"21:00-06:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"05:59 in the morning\", \"06:00-12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"11:59 n\", \"12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"18:00 in the afternoon\", \"12:00-18:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.US, \"17:59 in the evening\", \"18:00-21:00\"},\n+\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\", \"00:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\", \"23:00-04:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"03:59 \\u671d\", \"04:00-12:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"12:01 \\u6b63\\u5348\", \"12:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"16:00 \\u663c\", \"12:00-16:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"19:01 \\u5915\\u65b9\", \"16:00-19:00\"},\n+                {TextStyle.FULL, ResolverStyle.LENIENT, Locale.JAPAN, \"23:00 \\u591c\", \"19:00-23:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"00:01 \\u771f\\u591c\\u4e2d\", \"00:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"04:00 \\u591c\\u4e2d\", \"23:00-04:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"03:59 \\u671d\", \"04:00-12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"12:01 \\u6b63\\u5348\", \"12:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"16:00 \\u663c\", \"12:00-16:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"19:01 \\u5915\\u65b9\", \"16:00-19:00\"},\n+                {TextStyle.NARROW, ResolverStyle.LENIENT, Locale.JAPAN, \"23:00 \\u591c\", \"19:00-23:00\"},\n@@ -700,1 +729,1 @@\n-    public void test_dayPeriodParseInvalid(TextStyle ts, Locale l, String dayPeriod) throws Exception {\n+    public void test_dayPeriodParseInvalid(TextStyle ts, ResolverStyle rs, Locale l, String dayPeriod, String periodRange) throws Exception {\n@@ -706,1 +735,3 @@\n-            throw new RuntimeException(\"DateTimeParseException should be thrown\");\n+            if (rs != ResolverStyle.LENIENT) {\n+                throw new RuntimeException(\"DateTimeParseException should be thrown\");\n+            }\n@@ -709,1 +740,2 @@\n-                    \"Conflict found: \" + HOUR_OF_DAY + \" conflict with day period\");\n+                    \"Conflict found: Resolved time \" + dayPeriod.substring(0, 5) + \" conflicts with \" +\n+                    \"DayPeriod(\" + periodRange + \")\");\n@@ -980,5 +1012,3 @@\n-            {\"B\", \"Text(DayPeriod,SHORT)\"},\n-            {\"BB\", \"Text(DayPeriod,SHORT)\"},\n-            {\"BBB\", \"Text(DayPeriod,SHORT)\"},\n-            {\"BBBB\", \"Text(DayPeriod,FULL)\"},\n-            {\"BBBBB\", \"Text(DayPeriod,NARROW)\"},\n+            {\"B\", \"DayPeriod(SHORT)\"},\n+            {\"BBBB\", \"DayPeriod(FULL)\"},\n+            {\"BBBBB\", \"DayPeriod(NARROW)\"},\n@@ -1061,0 +1091,2 @@\n+            {\"BB\"},\n+            {\"BBB\"},\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeFormatterBuilder.java","additions":68,"deletions":36,"binary":false,"changes":104,"status":"modified"}]}