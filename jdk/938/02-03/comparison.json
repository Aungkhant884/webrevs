{"files":[{"patch":"@@ -102,0 +102,1 @@\n+import java.util.Locale;\n@@ -419,9 +420,21 @@\n-        if (fieldValues.containsKey(AMPM_OF_DAY) && fieldValues.containsKey(HOUR_OF_AMPM)) {\n-            long ap = fieldValues.remove(AMPM_OF_DAY);\n-            long hap = fieldValues.remove(HOUR_OF_AMPM);\n-            if (resolverStyle == ResolverStyle.LENIENT) {\n-                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), hap));\n-            } else {  \/\/ STRICT or SMART\n-                AMPM_OF_DAY.checkValidValue(ap);\n-                HOUR_OF_AMPM.checkValidValue(hap);\n-                updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + hap);\n+        if (fieldValues.containsKey(AMPM_OF_DAY)) {\n+            if (fieldValues.containsKey(HOUR_OF_AMPM)) {\n+                long ap = fieldValues.remove(AMPM_OF_DAY);\n+                long hap = fieldValues.remove(HOUR_OF_AMPM);\n+                if (resolverStyle == ResolverStyle.LENIENT) {\n+                    updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, Math.addExact(Math.multiplyExact(ap, 12), hap));\n+                } else {  \/\/ STRICT or SMART\n+                    AMPM_OF_DAY.checkValidValue(ap);\n+                    HOUR_OF_AMPM.checkValidValue(hap);\n+                    updateCheckConflict(AMPM_OF_DAY, HOUR_OF_DAY, ap * 12 + hap);\n+                }\n+            } else if (dayPeriod == null) {\n+                \/\/ Convert to DayPeriod for later resolution. Locale does not care, so\n+                \/\/ just use the default, whose DayPeriod instance may already be cached.\n+                long ap = fieldValues.remove(AMPM_OF_DAY);\n+                if (resolverStyle == ResolverStyle.LENIENT) {\n+                    ap = Math.abs(ap) % 2;\n+                } else {  \/\/ STRICT or SMART\n+                    AMPM_OF_DAY.checkValidValue(ap);\n+                }\n+                dayPeriod = DayPeriod.ofLocale(Locale.getDefault(Locale.Category.FORMAT), ap);\n@@ -485,1 +498,1 @@\n-                if (dayPeriod.includes((hoap + 12) * 60)) {\n+                if (dayPeriod.includes((hoap % 24 + 12) * 60)) {\n@@ -499,1 +512,0 @@\n-                    updateCheckDayPeriodConflict(AMPM_OF_DAY, midpoint \/ 720);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/Parsed.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-import java.time.DateTimeException;\n@@ -87,1 +86,0 @@\n-import java.time.temporal.ChronoField;\n@@ -657,0 +655,2 @@\n+            {\"a\", \"AM\", 6},\n+            {\"a\", \"PM\", 18},\n@@ -745,0 +745,38 @@\n+    @DataProvider(name=\"dayPeriodParsePatternInvalid\")\n+    Object[][] data_dayPeriodParsePatternInvalid() {\n+        return new Object[][] {\n+                {\"H B\", ResolverStyle.SMART, \"47 at night\", 23},\n+                {\"H B\", ResolverStyle.SMART, \"51 at night\", 3},\n+                {\"K B\", ResolverStyle.SMART, \"59 at night\", 23},\n+                {\"K B\", ResolverStyle.SMART, \"51 at night\", 3},\n+                {\"K B\", ResolverStyle.SMART, \"59 in the morning\", 11},\n+                {\"h B\", ResolverStyle.SMART, \"59 at night\", 23},\n+                {\"h B\", ResolverStyle.SMART, \"51 at night\", 3},\n+                {\"h B\", ResolverStyle.SMART, \"59 in the morning\", 11},\n+\n+                {\"H B\", ResolverStyle.LENIENT, \"47 at night\", 23},\n+                {\"H B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n+                {\"K B\", ResolverStyle.LENIENT, \"59 at night\", 23},\n+                {\"K B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n+                {\"K B\", ResolverStyle.LENIENT, \"59 in the morning\", 11},\n+                {\"h B\", ResolverStyle.LENIENT, \"59 at night\", 23},\n+                {\"h B\", ResolverStyle.LENIENT, \"51 at night\", 3},\n+                {\"h B\", ResolverStyle.LENIENT, \"59 in the morning\", 11},\n+        };\n+    }\n+\n+    @Test (dataProvider=\"dayPeriodParsePatternInvalid\")\n+    public void test_dayPeriodParsePatternInvalid(String pattern, ResolverStyle rs, String hourDayPeriod, long expected) throws Exception {\n+        try {\n+            builder.appendPattern(pattern);\n+            DateTimeFormatter f = builder.toFormatter().withLocale(Locale.US).withResolverStyle(rs);\n+            var p = f.parse(hourDayPeriod);\n+            if (rs != ResolverStyle.LENIENT) {\n+                throw new RuntimeException(\"DateTimeParseException should be thrown\");\n+            }\n+            assertEquals(p.getLong(HOUR_OF_DAY), expected);\n+        } catch (DateTimeParseException e) {\n+            \/\/ exception successfully thrown\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestDateTimeFormatterBuilder.java","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"}]}