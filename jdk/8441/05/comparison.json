{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SystemTray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.util.EventObject;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TrayIcon.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.awt.Graphics2D;\n@@ -31,0 +30,1 @@\n+import java.awt.Graphics2D;\n@@ -32,1 +32,1 @@\n-import java.awt.PopupMenu;\n+import java.awt.Image;\n@@ -34,0 +34,1 @@\n+import java.awt.PopupMenu;\n@@ -35,1 +36,0 @@\n-import java.awt.Image;\n@@ -37,0 +37,4 @@\n+import java.awt.image.BufferedImage;\n+import java.awt.image.DataBufferInt;\n+import java.awt.image.ImageObserver;\n+import java.awt.image.Raster;\n@@ -38,1 +42,0 @@\n-import java.awt.image.*;\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WTrayIconPeer.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,1 @@\n+jmethodID AwtTrayIcon::idUpdateImage = NULL;\n@@ -77,0 +78,1 @@\n+bool AwtTrayIcon::m_bDPIChanged = false;\n@@ -224,0 +226,16 @@\n+\/\/ Call updateImage() method on the peer when screen scale changes\n+void AwtTrayIcon::UpdateImageDPI()\n+{\n+    JNIEnv *env =(JNIEnv *)JNU_GetEnv(jvm, JNI_VERSION_1_2);\n+\n+    jobject peer = GetPeer(env);\n+    if (peer != NULL) {\n+        env->CallVoidMethod(peer, idUpdateImage);\n+    }\n+\n+    if (safe_ExceptionOccurred(env)) {\n+        env->ExceptionDescribe();\n+        env->ExceptionClear();\n+    }\n+}\n+\n@@ -251,0 +269,4 @@\n+        case WM_DPICHANGED:\n+            \/\/ Set the flag to update icon images, see WmTaskbarCreated\n+            m_bDPIChanged = true;\n+            break;\n@@ -477,0 +499,4 @@\n+        if (m_bDPIChanged) {\n+            \/\/ Update the icon image\n+            item->m_trayIcon->UpdateImageDPI();\n+        }\n@@ -483,0 +509,1 @@\n+    m_bDPIChanged = false;\n@@ -920,0 +947,8 @@\n+    jclass wPeerCls = env->FindClass(\"sun\/awt\/windows\/WTrayIconPeer\");\n+    DASSERT(wPeerCls != NULL);\n+    CHECK_NULL(wPeerCls);\n+\n+    AwtTrayIcon::idUpdateImage = env->GetMethodID(wPeerCls, \"updateImage\", \"()V\");\n+    DASSERT(AwtTrayIcon::idUpdateImageDPI != NULL);\n+    CHECK_NULL(AwtTrayIcon::idUpdateImage);\n+\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TrayIcon.cpp","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,0 +89,2 @@\n+    void UpdateImageDPI();\n+\n@@ -124,0 +126,1 @@\n+    static jmethodID idUpdateImage;\n@@ -154,0 +157,2 @@\n+    static bool m_bDPIChanged;\n+\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TrayIcon.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255439\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary To test tray icon scaling with on-the-fly DPI\/Scale changes on Windows\n+ * @run main\/manual TrayIconScalingTest\n+ * @requires (os.family == \"windows\")\n+ *\/\n+\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.RenderingHints;\n+import java.awt.SystemTray;\n+import java.awt.TrayIcon;\n+import java.awt.font.TextLayout;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+\n+public class TrayIconScalingTest {\n+\n+    private static SystemTray tray;\n+    private static TrayIcon icon;\n+\n+    private static final String INSTRUCTIONS =\n+            \"This test case checks the scaling of tray icons for on-the-fly\" +\n+                    \" DPI\/ Scale changes on Windows.\\n\\n\" +\n+                    \"STEPS: \\n\\n\" +\n+                    \"1. When you run this test check the system tray\/\" +\n+                    \" notification area on windows, a white multi-resolution\" +\n+                    \" image (MRI) icon should be visible.\\n\\n\"+\n+                    \"2. Navigate to Settings > System > Display and change the\" +\n+                    \" display scale by selecting any value from\" +\n+                    \" Scale & Layout dropdown.\\n\\n\"+\n+                    \"3. On scale changes observe the white tray icon,\" +\n+                    \" if there is NO distortion then press PASS.\\n\\n\";\n+\n+    private static Font font = new Font(\"Dialog\", Font.BOLD, 12);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+\n+        \/\/ Check if SystemTray supported on the machine\n+        if (!SystemTray.isSupported()) {\n+            System.out.println(\"SystemTray is not supported\");\n+            return;\n+        }\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"TrayIcon \" +\n+                \"Test Instructions\", INSTRUCTIONS, 8, 18, 85);\n+        createAndShowGUI();\n+        try {\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            tray.remove(icon);\n+        }\n+    }\n+\n+    private static void createAndShowGUI() {\n+        \/\/ Create Multi Resolution Image\n+        ArrayList<Image> images = new ArrayList<>();\n+        for (int size = 16; size <= 48; size += 4) {\n+            createIcon(size, images);\n+        }\n+        Image mRImage =\n+                new BaseMultiResolutionImage(images.toArray(new Image[0]));\n+\n+        tray = SystemTray.getSystemTray();\n+        icon = new TrayIcon(mRImage);\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding icon to system tray\");\n+        }\n+    }\n+\n+    \/\/ to create different size icons for MRI\n+    private static void createIcon(int size, ArrayList<Image> imageArrayList) {\n+\n+        BufferedImage image = new BufferedImage(size, size,\n+                BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g = image.createGraphics();\n+        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, size, size);\n+        g.setFont(font);\n+        g.setColor(Color.BLACK);\n+\n+        TextLayout layout = new TextLayout(String.valueOf(size),\n+                g.getFont(), g.getFontRenderContext());\n+        int height = (int) layout.getBounds().getHeight();\n+        int width = (int) layout.getBounds().getWidth();\n+        layout.draw(g, (size - width) \/ 2f - 1, (size + height) \/ 2f);\n+        imageArrayList.add(image);\n+        g.dispose();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconScalingTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}