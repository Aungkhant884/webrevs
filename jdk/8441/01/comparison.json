{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import javax.swing.SwingUtilities;\n@@ -288,0 +289,18 @@\n+    \/\/ updateTrayIcons method called from native side\n+    \/\/ when WM_POSCHANGING msg received\n+    static void updateTrayIcons() {\n+        SwingUtilities.invokeLater(()->{\n+            TrayIcon[] trayIconList = null;\n+            trayIconList = systemTray.getTrayIcons();\n+\n+            if (trayIconList == null || trayIconList.length == 0) {\n+                \/\/ no tray icons present so do nothing\n+                return;\n+            }\n+            for (TrayIcon trayIcon: trayIconList) {\n+                trayIcon.updateNotify();\n+            }\n+        });\n+    }\n+\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SystemTray.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.util.EventObject;\n@@ -711,0 +710,7 @@\n+    void updateNotify() {\n+        TrayIconPeer peer = this.peer;\n+        if (peer != null) {\n+            peer.updateImage();\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TrayIcon.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,0 +224,20 @@\n+\/\/ trayicon update handler called when Screen scale changes\n+void AwtTrayIcon::UpdateTrayIconHandler()\n+{\n+        jmethodID updateTrayFn;\n+        jclass systemTrayClass;\n+\n+        JNIEnv *env =(JNIEnv *)JNU_GetEnv(jvm, JNI_VERSION_1_2);\n+        systemTrayClass = env->FindClass(\"java\/awt\/SystemTray\");\n+\n+        if (systemTrayClass != NULL) {\n+             updateTrayFn = env->GetStaticMethodID(\n+                         systemTrayClass, \"updateTrayIcons\", \"()V\");\n+             if (updateTrayFn != NULL) {\n+                 env->CallStaticVoidMethod(systemTrayClass,\n+                          updateTrayFn);\n+             }\n+             env->DeleteLocalRef(systemTrayClass);\n+        }\n+}\n+\n@@ -239,0 +259,7 @@\n+         \/\/ calling update handler on Windows position change\n+         \/\/ (generated when DPI changes)\n+        case WM_WINDOWPOSCHANGING:\n+            if (hwnd == AwtTrayIcon::sm_msgWindow) {\n+                AwtTrayIcon::UpdateTrayIconHandler();\n+            }\n+            break;\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TrayIcon.cpp","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,1 @@\n+    static void UpdateTrayIconHandler();\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_TrayIcon.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255439\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary To test tray icon scaling with on-the-fly DPI\/Scale changes on Windows\n+ * @run main\/manual TrayIconScalingTest\n+ * @requires (os.family == \"windows\")\n+ *\/\n+\n+import java.awt.font.TextLayout;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+import java.awt.*;\n+import java.awt.image.MultiResolutionImage;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+\n+public class TrayIconScalingTest {\n+\n+    private static final String INSTRUCTIONS =\n+            \"This test case checks the scaling of tray icons for on-the-fly\" +\n+                    \" DPI\/ Scale changes on Windows.\\n\\n\" +\n+                    \"STEPS: \\n\\n\" +\n+                    \"1. When you run this test check the system tray\/\" +\n+                    \" notification area on windows, a white multi-resolution\" +\n+                    \" image (MRI) icon should be visible.\\n\\n\"+\n+                    \"2. Navigate to Settings > System > Display and change the\" +\n+                    \" display scale by selecting any value from\" +\n+                    \" Scale & Layout dropdown.\\n\\n\"+\n+                    \"3. On scale changes observe the white tray icon,\" +\n+                    \" if there is NO distortion then press PASS.\\n\\n\";\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"TrayIcon \" +\n+                \"Test Instructions\", INSTRUCTIONS, 8, 18, 85);\n+        createAndShowGUI();\n+        passFailJFrame.awaitAndCheck();\n+\n+    }\n+\n+    private static void createAndShowGUI() {\n+\n+        \/\/ Check if SystemTray supported on the machine\n+        if (!SystemTray.isSupported()) {\n+            System.out.println(\"SystemTray is not supported\");\n+            return;\n+        }\n+\n+        \/\/ Create Multi Resolution Image\n+        ArrayList<Image> images = new ArrayList<>();\n+        for (int size = 16; size <= 34; size++) {\n+            createIcon(size, images);\n+        }\n+        MultiResolutionImage multiResolutionImage =\n+                new BaseMultiResolutionImage(images.toArray(new Image[0]));\n+\n+        SystemTray tray = SystemTray.getSystemTray();\n+        TrayIcon icon = new TrayIcon((Image) multiResolutionImage);\n+\n+        PopupMenu popup = new PopupMenu();\n+        MenuItem exitItem = new MenuItem(\"Exit\");\n+        popup.add(exitItem);\n+        icon.setPopupMenu(popup);\n+\n+        try {\n+            tray.add(icon);\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\"Error while adding icon to system tray\");\n+        }\n+\n+        exitItem.addActionListener(e -> {\n+            tray.remove(icon);\n+            System.exit(0);\n+        });\n+\n+    }\n+\n+    \/\/ to create different size icon for MRI\n+    private static void createIcon(int size, ArrayList<Image> imageArrayList) {\n+\n+        BufferedImage image = new BufferedImage(size, size,\n+                BufferedImage.TYPE_INT_ARGB);\n+\n+        Graphics2D g = image.createGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, size, size);\n+        g.setFont(new Font(\"Dialog\", Font.BOLD, 12));\n+        g.setColor(Color.BLACK);\n+\n+        TextLayout layout = new TextLayout(String.valueOf(size),\n+                g.getFont(), g.getFontRenderContext());\n+        int height = (int) layout.getBounds().getHeight();\n+        int width = (int) layout.getBounds().getWidth();\n+        layout.draw(g, (size - width) \/ 2f - 1, (size + height) \/ 2f);\n+        imageArrayList.add(image);\n+        g.dispose();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/TrayIcon\/TrayIconScalingTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}