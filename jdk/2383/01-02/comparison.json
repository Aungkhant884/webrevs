{"files":[{"patch":"@@ -78,1 +78,1 @@\n-  _process_strong_tasks.all_tasks_completed(G1RP_PS_CodeCache_oops_do);\n+  _process_strong_tasks.all_tasks_claimed(G1RP_PS_CodeCache_oops_do);\n@@ -109,2 +109,2 @@\n-  _process_strong_tasks.all_tasks_completed(G1RP_PS_CodeCache_oops_do,\n-                                            G1RP_PS_refProcessor_oops_do);\n+  _process_strong_tasks.all_tasks_claimed(G1RP_PS_CodeCache_oops_do,\n+                                          G1RP_PS_refProcessor_oops_do);\n@@ -146,1 +146,1 @@\n-  _process_strong_tasks.all_tasks_completed(G1RP_PS_refProcessor_oops_do);\n+  _process_strong_tasks.all_tasks_claimed(G1RP_PS_refProcessor_oops_do);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-void SubTasksDone::all_tasks_completed_impl(uint skipped[], size_t skipped_size) {\n+void SubTasksDone::all_tasks_claimed_impl(uint skipped[], size_t skipped_size) {\n@@ -390,4 +390,0 @@\n-bool SubTasksDone::valid() {\n-  return _tasks != NULL;\n-}\n-\n@@ -400,1 +396,1 @@\n-  assert(_verification_done, \"all_tasks_completed must have been called.\");\n+  assert(_verification_done, \"all_tasks_claimed must have been called.\");\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -308,5 +308,3 @@\n-#ifdef ASSERT\n-  \/\/ make sure verification logic is run exactly once\n-  volatile bool _verification_done = false;\n-  void all_tasks_completed_impl(uint skipped[], size_t skipped_size);\n-#endif\n+  \/\/ make sure verification logic is run exactly once to avoid duplicate assertion failures\n+  DEBUG_ONLY(volatile bool _verification_done = false;)\n+  void all_tasks_claimed_impl(uint skipped[], size_t skipped_size) NOT_DEBUG_RETURN;\n@@ -318,2 +316,1 @@\n-  \/\/ processed, none of the which are originally claimed.  The number of\n-  \/\/ threads doing the tasks is initialized 1.\n+  \/\/ processed, none of the which are originally claimed.\n@@ -322,3 +319,0 @@\n-  \/\/ True iff the object is in a valid state.\n-  bool valid();\n-\n@@ -334,5 +328,0 @@\n-  void all_tasks_completed() {\n-    DEBUG_ONLY(all_tasks_completed_impl(nullptr, 0);)\n-  }\n-\n-  \/\/ Augmented by variadic args, each for a skipped task.\n@@ -341,1 +330,1 @@\n-  void all_tasks_completed(T0 first_skipped, Ts... more_skipped) {\n+  void all_tasks_claimed(T0 first_skipped, Ts... more_skipped) {\n@@ -344,1 +333,5 @@\n-    DEBUG_ONLY(all_tasks_completed_impl(skipped, ARRAY_SIZE(skipped));)\n+    all_tasks_claimed_impl(skipped, ARRAY_SIZE(skipped));\n+  }\n+  \/\/ if there are no skipped tasks.\n+  void all_tasks_claimed() {\n+    all_tasks_claimed_impl(nullptr, 0);\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-    _subtasks.all_tasks_completed();\n+    _subtasks.all_tasks_claimed();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}