{"files":[{"patch":"@@ -78,1 +78,1 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_CodeCache_oops_do);\n+  _process_strong_tasks.all_tasks_completed(G1RP_PS_CodeCache_oops_do);\n@@ -109,2 +109,1 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers(),\n-                                            G1RP_PS_CodeCache_oops_do,\n+  _process_strong_tasks.all_tasks_completed(G1RP_PS_CodeCache_oops_do,\n@@ -147,1 +146,1 @@\n-  _process_strong_tasks.all_tasks_completed(n_workers(), G1RP_PS_refProcessor_oops_do);\n+  _process_strong_tasks.all_tasks_completed(G1RP_PS_refProcessor_oops_do);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RootProcessor.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -355,1 +355,1 @@\n-  _tasks(NULL), _n_tasks(n), _threads_completed(0) {\n+  _tasks(NULL), _n_tasks(n) {\n@@ -357,8 +357,0 @@\n-  clear();\n-}\n-\n-bool SubTasksDone::valid() {\n-  return _tasks != NULL;\n-}\n-\n-void SubTasksDone::clear() {\n@@ -368,1 +360,0 @@\n-  _threads_completed = 0;\n@@ -371,3 +362,0 @@\n-void SubTasksDone::all_tasks_completed_impl(uint n_threads,\n-                                            uint skipped[],\n-                                            size_t skipped_size) {\n@@ -375,0 +363,5 @@\n+void SubTasksDone::all_tasks_completed_impl(uint skipped[], size_t skipped_size) {\n+  if (Atomic::cmpxchg(&_verification_done, false, true)) {\n+    \/\/ another thread has done the verification\n+    return;\n+  }\n@@ -394,0 +387,1 @@\n+}\n@@ -395,11 +389,3 @@\n-  uint observed = _threads_completed;\n-  uint old;\n-  do {\n-    old = observed;\n-    observed = Atomic::cmpxchg(&_threads_completed, old, old+1);\n-  } while (observed != old);\n-  \/\/ If this was the last thread checking in, clear the tasks.\n-  uint adjusted_thread_count = (n_threads == 0 ? 1 : n_threads);\n-  if (observed + 1 == adjusted_thread_count) {\n-    clear();\n-  }\n+\n+bool SubTasksDone::valid() {\n+  return _tasks != NULL;\n@@ -414,0 +400,1 @@\n+  assert(_verification_done, \"all_tasks_completed must have been called.\");\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -307,1 +307,0 @@\n-  volatile uint _threads_completed;\n@@ -309,4 +308,5 @@\n-  \/\/ Set all tasks to unclaimed.\n-  void clear();\n-\n-  void all_tasks_completed_impl(uint n_threads, uint skipped[], size_t skipped_size);\n+#ifdef ASSERT\n+  \/\/ make sure verification logic is run exactly once\n+  volatile bool _verification_done = false;\n+  void all_tasks_completed_impl(uint skipped[], size_t skipped_size);\n+#endif\n@@ -333,6 +333,3 @@\n-  \/\/ must execute this.  (When the last thread does so, the task array is\n-  \/\/ cleared.)\n-  \/\/\n-  \/\/ n_threads - Number of threads executing the sub-tasks.\n-  void all_tasks_completed(uint n_threads) {\n-    all_tasks_completed_impl(n_threads, nullptr, 0);\n+  \/\/ must execute this.\n+  void all_tasks_completed() {\n+    DEBUG_ONLY(all_tasks_completed_impl(nullptr, 0);)\n@@ -344,1 +341,1 @@\n-  void all_tasks_completed(uint n_threads, T0 first_skipped, Ts... more_skipped) {\n+  void all_tasks_completed(T0 first_skipped, Ts... more_skipped) {\n@@ -347,1 +344,1 @@\n-    all_tasks_completed_impl(n_threads, skipped, ARRAY_SIZE(skipped));\n+    DEBUG_ONLY(all_tasks_completed_impl(skipped, ARRAY_SIZE(skipped));)\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -594,1 +594,1 @@\n-    _subtasks.all_tasks_completed(_num_workers);\n+    _subtasks.all_tasks_completed();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}