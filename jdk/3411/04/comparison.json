{"files":[{"patch":"@@ -31,0 +31,1 @@\n+#include \"classfile\/systemDictionary.hpp\"\n@@ -285,0 +286,25 @@\n+static bool is_klass_initialized(Symbol* klass_name) {\n+  VM_ENTRY_MARK;\n+  InstanceKlass* ik = SystemDictionary::find_instance_klass(klass_name, Handle(), Handle());\n+  return ik != nullptr && ik->is_initialized();\n+}\n+\n+bool ciInstanceKlass::is_box_cache_valid() const {\n+  BasicType box_type = box_klass_type();\n+\n+  if (box_type != T_OBJECT) {\n+    switch(box_type) {\n+      case T_INT:     return is_klass_initialized(java_lang_Integer_IntegerCache::symbol());\n+      case T_CHAR:    return is_klass_initialized(java_lang_Character_CharacterCache::symbol());\n+      case T_SHORT:   return is_klass_initialized(java_lang_Short_ShortCache::symbol());\n+      case T_BYTE:    return is_klass_initialized(java_lang_Byte_ByteCache::symbol());\n+      case T_LONG:    return is_klass_initialized(java_lang_Long_LongCache::symbol());\n+      case T_BOOLEAN:\n+      case T_FLOAT:\n+      case T_DOUBLE:  return true;\n+      default:;\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -274,0 +274,1 @@\n+  bool is_box_cache_valid() const;\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -568,0 +568,5 @@\n+static bool is_box_cache_valid(CallNode* call) {\n+  ciInstanceKlass* klass = call->as_CallStaticJava()->method()->holder();\n+  return klass->is_box_cache_valid();\n+}\n+\n@@ -663,1 +668,1 @@\n-        if (!has_non_debug_usages(callprojs.resproj)) {\n+        if (!has_non_debug_usages(callprojs.resproj) && is_box_cache_valid(call)) {\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}