{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -532,1 +532,2 @@\n-        (context->transform.yx == 0) && (context->transform.xy == 0))\n+        (context->transform.yx == 0) && (context->transform.xy == 0) &&\n+        (context->transform.xx > 0) && (context->transform.yy > 0))\n","filename":"src\/java.desktop\/share\/native\/libfontmanager\/freetypeScaler.c","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test MirrorTest\n+ * @bug 8255387\n+ * @summary Mirrored characters should be drawn correctly\n+ * @run main MirrorTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.RenderingHints;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+\n+public class MirrorTest {\n+    static String target = \"\\u3042\";\n+    static final int SIZE = 50;\n+    static final int SHIFT = 20;\n+    static final int LIMIT = 5;\n+\n+    static Point getCenterOfGravity(BufferedImage img) {\n+        int count = 0;\n+        int sx = 0;\n+        int sy = 0;\n+        for (int y = 0; y < SIZE; y++) {\n+            for (int x = 0; x < SIZE; x++) {\n+                int c = img.getRGB(x, y) & 0xFFFFFF;\n+                if (c == 0) {\n+                    count++;\n+                    sx += x;\n+                    sy += y;\n+                }\n+            }\n+        }\n+        if (count == 0) {\n+            return null;\n+        } else {\n+            return new Point(sx\/count, sy\/count);\n+        }\n+    }\n+\n+    static BufferedImage drawNormal(Font font) {\n+        BufferedImage image = new BufferedImage(SIZE, SIZE,\n+                                      BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, image.getWidth(), image.getHeight());\n+        g2d.setColor(Color.black);\n+        \/\/Set antialias on not to use embedded bitmap for reference\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_ON);\n+\n+        g2d.setFont(font);\n+        FontMetrics fm = g2d.getFontMetrics();\n+        g2d.drawString(target, SHIFT, SHIFT+fm.getAscent());\n+        g2d.dispose();\n+        return image;\n+    }\n+\n+    static BufferedImage drawVerticalMirror(Font font) {\n+        BufferedImage image = new BufferedImage(SIZE, SIZE,\n+                                      BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, image.getWidth(), image.getHeight());\n+        g2d.setColor(Color.black);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+\n+        AffineTransform base = g2d.getTransform();\n+        AffineTransform trans = new AffineTransform(1.0, 0, 0, -1.0, 0, 0);\n+        trans.concatenate(base);\n+        g2d.setTransform(trans);\n+\n+        g2d.setFont(font);\n+        FontMetrics fm = g2d.getFontMetrics();\n+        g2d.drawString(target, SHIFT, SHIFT-image.getHeight()+fm.getAscent());\n+        g2d.dispose();\n+        return image;\n+    }\n+\n+    static BufferedImage drawHorizontalMirror(Font font) {\n+        BufferedImage image = new BufferedImage(SIZE, SIZE,\n+                                      BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+        g2d.setColor(Color.white);\n+        g2d.fillRect(0, 0, image.getWidth(), image.getHeight());\n+        g2d.setColor(Color.black);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+\n+        AffineTransform base = g2d.getTransform();\n+        AffineTransform trans = new AffineTransform(-1.0, 0, 0, 1.0, 0, 0);\n+        trans.concatenate(base);\n+        g2d.setTransform(trans);\n+\n+        g2d.setFont(font);\n+        FontMetrics fm = g2d.getFontMetrics();\n+        g2d.drawString(target, SHIFT-image.getWidth(), SHIFT+fm.getAscent());\n+        g2d.dispose();\n+        return image;\n+    }\n+\n+    public static void main(String[] args) {\n+        GraphicsEnvironment ge =\n+            GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        Font fonts[] = ge.getAllFonts();\n+\n+        for (Font font: fonts) {\n+            if (!font.canDisplay(target.charAt(0))) {\n+                continue;\n+            }\n+            font = font.deriveFont(12.0f);\n+            BufferedImage img1 = drawNormal(font);\n+            BufferedImage img2 = drawVerticalMirror(font);\n+            BufferedImage img3 = drawHorizontalMirror(font);\n+            Point p1 = getCenterOfGravity(img1);\n+            Point p2 = getCenterOfGravity(img2);\n+            Point p3 = getCenterOfGravity(img3);\n+            if (p1 == null || p2 == null || p3 == null ) {\n+                continue;\n+            }\n+            p2.y = SIZE - p2.y - 2; \/\/ Back from vertical mirror\n+            p3.x = SIZE - p3.x - 2; \/\/ Back from horizontal mirror\n+\n+            if (Math.abs(p1.x - p2.x) > LIMIT ||\n+                Math.abs(p1.y - p2.y) > LIMIT ||\n+                Math.abs(p1.x - p3.x) > LIMIT ||\n+                Math.abs(p1.y - p3.y) > LIMIT) {\n+                System.out.println(\"Error: \"+p1+\",\"+p2+\",\"+p3);\n+                throw new RuntimeException(\n+                    \"Incorrect mirrored character with \" + font);\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/font\/Rotate\/MirrorTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"}]}