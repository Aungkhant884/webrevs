{"files":[{"patch":"@@ -945,1 +945,2 @@\n-        __ lis(R0, oop_addr.value() >> 16); \/\/ Don't care about sign extend (will use stw).\n+        \/\/ Don't care about sign extend (will use stw).\n+        __ lis(R0, 0); \/\/ Will get patched.\n@@ -947,1 +948,1 @@\n-        __ ori(R0, R0, oop_addr.value() & 0xffff);\n+        __ ori(R0, R0, 0); \/\/ Will get patched.\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-\/\/ Get compressed oop or klass constant.\n+\/\/ Get compressed oop constant.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-  \/\/ Patch narrow oop constants. Use this also for narrow klass.\n+  \/\/ Patch narrow oop constants.\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5956,1 +5956,1 @@\n-    __ lis($dst$$Register, (int)(short)(($src$$constant >> 16) & 0xffff));\n+    __ lis($dst$$Register, 0); \/\/ Will get patched.\n@@ -5969,5 +5969,3 @@\n-    assert(__ oop_recorder() != NULL, \"this assembler needs an OopRecorder\");\n-    int oop_index = __ oop_recorder()->find_index((jobject)$src2$$constant);\n-    RelocationHolder rspec = oop_Relocation::spec(oop_index);\n-    __ relocate(rspec, 1);\n-    __ ori($dst$$Register, $src1$$Register, $src2$$constant & 0xffff);\n+    AddressLiteral addrlit = __ constant_oop_address((jobject)$src2$$constant);\n+    __ relocate(addrlit.rspec(), \/*compressed format*\/ 1);\n+    __ ori($dst$$Register, $src1$$Register, 0); \/\/ Will get patched.\n@@ -6088,6 +6086,3 @@\n-    intptr_t Csrc = CompressedKlassPointers::encode((Klass *)$src1$$constant);\n-    assert(__ oop_recorder() != NULL, \"this assembler needs an OopRecorder\");\n-    int klass_index = __ oop_recorder()->find_index((Klass *)$src1$$constant);\n-    RelocationHolder rspec = metadata_Relocation::spec(klass_index);\n-\n-    __ relocate(rspec, 1);\n+    \/\/ Notify OOP recorder (don't need the relocation)\n+    AddressLiteral md = __ constant_metadata_address((Klass*)$src1$$constant);\n+    intptr_t Csrc = CompressedKlassPointers::encode((Klass*)md.value());\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,16 +36,1 @@\n-  \/\/ The following comment is from the declaration of DataRelocation:\n-  \/\/\n-  \/\/  \"The \"o\" (displacement) argument is relevant only to split relocations\n-  \/\/   on RISC machines.  In some CPUs (SPARC), the set-hi and set-lo ins'ns\n-  \/\/   can encode more than 32 bits between them.  This allows compilers to\n-  \/\/   share set-hi instructions between addresses that differ by a small\n-  \/\/   offset (e.g., different static variables in the same class).\n-  \/\/   On such machines, the \"x\" argument to set_value on all set-lo\n-  \/\/   instructions must be the same as the \"x\" argument for the\n-  \/\/   corresponding set-hi instructions.  The \"o\" arguments for the\n-  \/\/   set-hi instructions are ignored, and must not affect the high-half\n-  \/\/   immediate constant.  The \"o\" arguments for the set-lo instructions are\n-  \/\/   added into the low-half immediate constant, and must not overflow it.\"\n-  \/\/\n-  \/\/ Currently we don't support splitting of relocations, so o must be\n-  \/\/ zero:\n+  \/\/ Currently we don't support splitting of relocations.\n@@ -58,6 +43,2 @@\n-      assert(type() == relocInfo::oop_type || type() == relocInfo::metadata_type,\n-             \"how to encode else?\");\n-      narrowOop no = (type() == relocInfo::oop_type) ?\n-          CompressedOops::encode(cast_to_oop(x)) :\n-          \/\/ Type punning compressed klass pointer as narrowOop.\n-          CompressedOops::narrow_oop_cast(CompressedKlassPointers::encode((Klass*)x));\n+      assert(type() == relocInfo::oop_type, \"how to encode else?\");\n+      narrowOop no = CompressedOops::encode(cast_to_oop(x));\n","filename":"src\/hotspot\/cpu\/ppc\/relocInfo_ppc.cpp","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"}]}