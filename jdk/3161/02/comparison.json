{"files":[{"patch":"@@ -50,1 +50,1 @@\n-    public final static String NAME = \"enabled\";\n+    public static final String NAME = \"enabled\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Enabled.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-abstract public class Event extends jdk.internal.event.Event {\n+public abstract class Event extends jdk.internal.event.Event {\n@@ -101,1 +101,1 @@\n-    final public void begin() {\n+    public final void begin() {\n@@ -110,1 +110,1 @@\n-    final public void end() {\n+    public final void end() {\n@@ -122,1 +122,1 @@\n-    final public void commit() {\n+    public final void commit() {\n@@ -133,1 +133,1 @@\n-    final public boolean isEnabled() {\n+    public final boolean isEnabled() {\n@@ -147,1 +147,1 @@\n-    final public boolean shouldCommit() {\n+    public final boolean shouldCommit() {\n@@ -173,1 +173,1 @@\n-    final public void set(int index, Object value) {\n+    public final void set(int index, Object value) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Event.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    final public EventSettings withStackTrace() {\n+    public final EventSettings withStackTrace() {\n@@ -102,1 +102,1 @@\n-    final public EventSettings withoutStackTrace() {\n+    public final EventSettings withoutStackTrace() {\n@@ -114,1 +114,1 @@\n-    final public EventSettings withoutThreshold() {\n+    public final EventSettings withoutThreshold() {\n@@ -125,1 +125,1 @@\n-    final public EventSettings withPeriod(Duration duration) {\n+    public final EventSettings withPeriod(Duration duration) {\n@@ -136,1 +136,1 @@\n-    final public EventSettings withThreshold(Duration duration) {\n+    public final EventSettings withThreshold(Duration duration) {\n@@ -154,1 +154,1 @@\n-    abstract public EventSettings with(String name, String value);\n+    public abstract EventSettings with(String name, String value);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/EventSettings.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    private final static class InternalAccess extends PrivateAccess {\n+    private static final class InternalAccess extends PrivateAccess {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/FlightRecorderPermission.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    public final static String NAME = \"period\";\n+    public static final String NAME = \"period\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Period.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public final static String NAME = \"stackTrace\";\n+    public static final String NAME = \"stackTrace\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/StackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public final static String NAME = \"threshold\";\n+    public static final String NAME = \"threshold\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Threshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    public final static String MILLISECONDS_SINCE_EPOCH = \"MILLISECONDS_SINCE_EPOCH\";\n+    public static final String MILLISECONDS_SINCE_EPOCH = \"MILLISECONDS_SINCE_EPOCH\";\n@@ -55,1 +55,1 @@\n-    public final static String TICKS = \"TICKS\";\n+    public static final String TICKS = \"TICKS\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/Timestamp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    private final static class UnsignedValue {\n+    private static final class UnsignedValue {\n@@ -264,1 +264,1 @@\n-    final public <T> T getValue(String name) {\n+    public final <T> T getValue(String name) {\n@@ -981,1 +981,1 @@\n-    final public String toString() {\n+    public final String toString() {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    final static class ChunkConsumer implements Consumer<Long> {\n+    static final class ChunkConsumer implements Consumer<Long> {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordingStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,7 +31,7 @@\n-    public final static EventHandler SOCKET_READ = Utils.getHandler(SocketReadEvent.class);\n-    public final static EventHandler SOCKET_WRITE = Utils.getHandler(SocketWriteEvent.class);\n-    public final static EventHandler FILE_READ = Utils.getHandler(FileReadEvent.class);\n-    public final static EventHandler FILE_WRITE = Utils.getHandler(FileWriteEvent.class);\n-    public final static EventHandler FILE_FORCE = Utils.getHandler(FileForceEvent.class);\n-    public final static EventHandler ERROR_THROWN = Utils.getHandler(ErrorThrownEvent.class);\n-    public final static EventHandler EXCEPTION_THROWN = Utils.getHandler(ExceptionThrownEvent.class);\n+    public static final EventHandler SOCKET_READ = Utils.getHandler(SocketReadEvent.class);\n+    public static final EventHandler SOCKET_WRITE = Utils.getHandler(SocketWriteEvent.class);\n+    public static final EventHandler FILE_READ = Utils.getHandler(FileReadEvent.class);\n+    public static final EventHandler FILE_WRITE = Utils.getHandler(FileWriteEvent.class);\n+    public static final EventHandler FILE_FORCE = Utils.getHandler(FileForceEvent.class);\n+    public static final EventHandler ERROR_THROWN = Utils.getHandler(ErrorThrownEvent.class);\n+    public static final EventHandler EXCEPTION_THROWN = Utils.getHandler(ExceptionThrownEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/Handlers.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private final static int CACHE_SIZE = 5;\n+    private static final int CACHE_SIZE = 5;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Control.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-    public final static String NAME = \"cutoff\";\n-    public final static String INFINITY = \"infinity\";\n+    public static final String NAME = \"cutoff\";\n+    public static final String INFINITY = \"infinity\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Cutoff.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    final static class NamedControl {\n+    static final class NamedControl {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,11 +66,11 @@\n-    private final static Type TYPE_STRING_POOL = Type.getType(StringPool.class);\n-    private final static Type TYPE_EVENT_WRITER = Type.getType(EventWriter.class);\n-    private final static Type TYPE_PLATFORM_EVENT_TYPE = Type.getType(PlatformEventType.class);\n-    private final static Type TYPE_EVENT_HANDLER = Type.getType(EventHandler.class);\n-    private final static Type TYPE_SETTING_CONTROL = Type.getType(SettingControl.class);\n-    private final static Type TYPE_EVENT_TYPE = Type.getType(EventType.class);\n-    private final static Type TYPE_EVENT_CONTROL = Type.getType(EventControl.class);\n-    private final static String DESCRIPTOR_EVENT_HANDLER = \"(\" + Type.BOOLEAN_TYPE.getDescriptor() + TYPE_EVENT_TYPE.getDescriptor() + TYPE_EVENT_CONTROL.getDescriptor() + \")V\";\n-    private final static Method METHOD_GET_EVENT_WRITER = new Method(\"getEventWriter\", \"()\" + TYPE_EVENT_WRITER.getDescriptor());\n-    private final static Method METHOD_EVENT_HANDLER_CONSTRUCTOR = new Method(\"<init>\", DESCRIPTOR_EVENT_HANDLER);\n-    private final static Method METHOD_RESET = new Method(\"reset\", \"()V\");\n+    private static final Type TYPE_STRING_POOL = Type.getType(StringPool.class);\n+    private static final Type TYPE_EVENT_WRITER = Type.getType(EventWriter.class);\n+    private static final Type TYPE_PLATFORM_EVENT_TYPE = Type.getType(PlatformEventType.class);\n+    private static final Type TYPE_EVENT_HANDLER = Type.getType(EventHandler.class);\n+    private static final Type TYPE_SETTING_CONTROL = Type.getType(SettingControl.class);\n+    private static final Type TYPE_EVENT_TYPE = Type.getType(EventType.class);\n+    private static final Type TYPE_EVENT_CONTROL = Type.getType(EventControl.class);\n+    private static final String DESCRIPTOR_EVENT_HANDLER = \"(\" + Type.BOOLEAN_TYPE.getDescriptor() + TYPE_EVENT_TYPE.getDescriptor() + TYPE_EVENT_CONTROL.getDescriptor() + \")V\";\n+    private static final Method METHOD_GET_EVENT_WRITER = new Method(\"getEventWriter\", \"()\" + TYPE_EVENT_WRITER.getDescriptor());\n+    private static final Method METHOD_EVENT_HANDLER_CONSTRUCTOR = new Method(\"<init>\", DESCRIPTOR_EVENT_HANDLER);\n+    private static final Method METHOD_RESET = new Method(\"reset\", \"()V\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventHandlerCreator.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        private final static Type STRING = Type.getType(String.class);\n+        private static final Type STRING = Type.getType(String.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private final static JVM jvm = JVM.getJVM();\n+    private static final JVM jvm = JVM.getJVM();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    private final static Set<SafePath> paths = new LinkedHashSet<>();\n+    private static final Set<SafePath> paths = new LinkedHashSet<>();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/FilePurger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private final static int MAX_SIZE = 10000;\n+    private static final int MAX_SIZE = 10000;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Logger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    private final static class TypeElement {\n+    private static final class TypeElement {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-    private final static JVM jvm = JVM.getJVM();\n-    private final static long WAIT_INTERVAL = 1000; \/\/ ms;\n+    private static final JVM jvm = JVM.getJVM();\n+    private static final long WAIT_INTERVAL = 1000; \/\/ ms;\n@@ -42,1 +42,1 @@\n-    private final static long MIN_MAX_CHUNKSIZE = 1024 * 1024;\n+    private static final long MIN_MAX_CHUNKSIZE = 1024 * 1024;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private final static List<SecureRecorderListener> changeListeners = new ArrayList<>();\n+    private static final List<SecureRecorderListener> changeListeners = new ArrayList<>();\n@@ -68,1 +68,1 @@\n-    private final static JVM jvm = JVM.getJVM();\n+    private static final JVM jvm = JVM.getJVM();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private final static JVM jvm = JVM.getJVM();\n+    private static final JVM jvm = JVM.getJVM();\n@@ -45,1 +45,1 @@\n-    final static class RequestHook {\n+    static final class RequestHook {\n@@ -102,1 +102,1 @@\n-    private final static List<RequestHook> entries = new CopyOnWriteArrayList<>();\n+    private static final List<RequestHook> entries = new CopyOnWriteArrayList<>();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RequestEngine.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,4 +75,4 @@\n-    private final static MethodHandles.Lookup LOOKUP = MethodHandles.lookup();\n-    private final static Module JFR_MODULE = Event.class.getModule();\n-    public  final static SafePath JFC_DIRECTORY = getPathInProperty(\"java.home\", \"lib\/jfr\");\n-    public final static FileAccess PRIVILEGED = new Privileged();\n+    private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();\n+    private static final Module JFR_MODULE = Event.class.getModule();\n+    public  static final SafePath JFC_DIRECTORY = getPathInProperty(\"java.home\", \"lib\/jfr\");\n+    public static final FileAccess PRIVILEGED = new Privileged();\n@@ -90,1 +90,1 @@\n-    final static class SecureRecorderListener implements FlightRecorderListener {\n+    static final class SecureRecorderListener implements FlightRecorderListener {\n@@ -480,1 +480,1 @@\n-    private final static class Privileged extends FileAccess {\n+    private static final class Privileged extends FileAccess {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-    public final static String NAME = \"throttle\";\n-    public final static String DEFAULT = \"off\";\n+    public static final String NAME = \"throttle\";\n+    public static final String DEFAULT = \"off\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Throttle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    private final static Map<Type, Class<?>> knownTypes = new LinkedHashMap<>();\n+    private static final Map<Type, Class<?>> knownTypes = new LinkedHashMap<>();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    private final static String LEGACY_EVENT_NAME_PREFIX = \"com.oracle.jdk.\";\n+    private static final String LEGACY_EVENT_NAME_PREFIX = \"com.oracle.jdk.\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private final static AtomicLong counter = new AtomicLong();\n+    private static final AtomicLong counter = new AtomicLong();\n@@ -76,1 +76,1 @@\n-    abstract public void start();\n+    public abstract void start();\n@@ -79,1 +79,1 @@\n-    abstract public void startAsync();\n+    public abstract void startAsync();\n@@ -82,1 +82,1 @@\n-    abstract public void close();\n+    public abstract void close();\n@@ -236,1 +236,1 @@\n-    final protected void onFlush() {\n+    protected final void onFlush() {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/AbstractEventStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    public final static RecordedEvent FLUSH_MARKER = JdkJfrConsumer.instance().newRecordedEvent(null, null, 0L, 0L);\n+    public static final RecordedEvent FLUSH_MARKER = JdkJfrConsumer.instance().newRecordedEvent(null, null, 0L, 0L);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private final static class Reference {\n+    private static final class Reference {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ConstantMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    final static class EventDispatcher {\n-        private final static EventDispatcher[] NO_DISPATCHERS = new EventDispatcher[0];\n+    static final class EventDispatcher {\n+        private static final EventDispatcher[] NO_DISPATCHERS = new EventDispatcher[0];\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/Dispatcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    private final static Comparator<? super RecordedEvent> EVENT_COMPARATOR = JdkJfrConsumer.instance().eventComparator();\n+    private static final Comparator<? super RecordedEvent> EVENT_COMPARATOR = JdkJfrConsumer.instance().eventComparator();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventDirectoryStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    private final static Comparator<? super RecordedEvent> EVENT_COMPARATOR = JdkJfrConsumer.instance().eventComparator();\n+    private static final Comparator<? super RecordedEvent> EVENT_COMPARATOR = JdkJfrConsumer.instance().eventComparator();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/EventFileStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    public final static FileAccess UNPRIVILEGED = new UnPrivileged();\n+    public static final FileAccess UNPRIVILEGED = new UnPrivileged();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/FileAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,4 +43,4 @@\n-    private final static String TYPE_PREFIX_VERSION_1 = \"com.oracle.jfr.types.\";\n-    private final static String TYPE_PREFIX_VERSION_2 = Type.TYPES_PREFIX;\n-    public final static String STACK_FRAME_VERSION_1 = TYPE_PREFIX_VERSION_1 + \"StackFrame\";\n-    public final static String STACK_FRAME_VERSION_2 = TYPE_PREFIX_VERSION_2 + \"StackFrame\";\n+    private static final String TYPE_PREFIX_VERSION_1 = \"com.oracle.jfr.types.\";\n+    private static final String TYPE_PREFIX_VERSION_2 = Type.TYPES_PREFIX;\n+    public static final String STACK_FRAME_VERSION_1 = TYPE_PREFIX_VERSION_1 + \"StackFrame\";\n+    public static final String STACK_FRAME_VERSION_2 = TYPE_PREFIX_VERSION_2 + \"StackFrame\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ObjectFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-    private final static class ArrayParser extends Parser {\n+    private static final class ArrayParser extends Parser {\n@@ -315,1 +315,1 @@\n-    private final static class CompositeParser extends Parser {\n+    private static final class CompositeParser extends Parser {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ParserFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private final static int DEFAULT_BLOCK_SIZE = 64_000;\n+    private static final int DEFAULT_BLOCK_SIZE = 64_000;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/RecordingInput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-    private final static Charset UTF8 = Charset.forName(\"UTF-8\");\n-    private final static Charset LATIN1 = Charset.forName(\"ISO-8859-1\");\n+    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n+    private static final Charset LATIN1 = Charset.forName(\"ISO-8859-1\");\n@@ -59,1 +59,1 @@\n-    private final static class CharsetParser extends Parser {\n+    private static final class CharsetParser extends Parser {\n@@ -109,1 +109,1 @@\n-    private final static class CharArrayParser extends Parser {\n+    private static final class CharArrayParser extends Parser {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/StringParser.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    final protected StringPool createStringFieldWriter() {\n+    protected final StringPool createStringFieldWriter() {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/handlers\/EventHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    final protected void touch() {\n+    protected final void touch() {\n@@ -62,1 +62,1 @@\n-    final public long getLastTouched() {\n+    public final long getLastTouched() {\n@@ -66,1 +66,1 @@\n-    abstract public byte[] read() throws IOException;\n+    public abstract byte[] read() throws IOException;\n@@ -68,1 +68,1 @@\n-    final public long getId() {\n+    public final long getId() {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/management\/EventByteStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private final static long typeId = Type.getTypeId(CutoffSetting.class);\n+    private static final long typeId = Type.getTypeId(CutoffSetting.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/CutoffSetting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private final static long typeId =  Type.getTypeId(StackTraceSetting.class);\n+    private static final long typeId =  Type.getTypeId(StackTraceSetting.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/StackTraceSetting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private final static long typeId = Type.getTypeId(ThresholdSetting.class);\n+    private static final long typeId = Type.getTypeId(ThresholdSetting.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/ThresholdSetting.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-    private final static long typeId = Type.getTypeId(ThrottleSetting.class);\n-    private final static long OFF = -2;\n+    private static final long typeId = Type.getTypeId(ThrottleSetting.class);\n+    private static final long OFF = -2;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/ThrottleSetting.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-    public final static String title = \"Tool for working with Flight Recorder files\";\n-    private final static Command HELP = new Help();\n-    private final static List<Command> COMMANDS = createCommands();\n+    public static final String title = \"Tool for working with Flight Recorder files\";\n+    private static final Command HELP = new Help();\n+    private static final List<Command> COMMANDS = createCommands();\n@@ -73,1 +73,1 @@\n-    abstract public String getName();\n+    public abstract String getName();\n@@ -75,1 +75,1 @@\n-    abstract public String getDescription();\n+    public abstract String getDescription();\n@@ -77,1 +77,1 @@\n-    abstract public void execute(Deque<String> argList) throws UserSyntaxException, UserDataException;\n+    public abstract void execute(Deque<String> argList) throws UserSyntaxException, UserDataException;\n@@ -207,1 +207,1 @@\n-    final protected void ensureMaxArgumentCount(Deque<String> options, int maxCount) throws UserSyntaxException {\n+    protected final void ensureMaxArgumentCount(Deque<String> options, int maxCount) throws UserSyntaxException {\n@@ -213,1 +213,1 @@\n-    final protected void ensureMinArgumentCount(Deque<String> options, int minCount) throws UserSyntaxException {\n+    protected final void ensureMinArgumentCount(Deque<String> options, int minCount) throws UserSyntaxException {\n@@ -219,1 +219,1 @@\n-    final protected Path getDirectory(String pathText) throws UserDataException {\n+    protected final Path getDirectory(String pathText) throws UserDataException {\n@@ -234,1 +234,1 @@\n-    final protected Path getJFRInputFile(Deque<String> options) throws UserSyntaxException, UserDataException {\n+    protected final Path getJFRInputFile(Deque<String> options) throws UserSyntaxException, UserDataException {\n@@ -254,1 +254,1 @@\n-    final protected void ensureAccess(Path path) throws UserDataException {\n+    protected final void ensureAccess(Path path) throws UserDataException {\n@@ -267,1 +267,1 @@\n-    final protected void couldNotReadError(Path p, IOException e) throws UserDataException {\n+    protected final void couldNotReadError(Path p, IOException e) throws UserDataException {\n@@ -271,1 +271,1 @@\n-    final protected Path ensureFileDoesNotExist(Path file) throws UserDataException {\n+    protected final Path ensureFileDoesNotExist(Path file) throws UserDataException {\n@@ -278,1 +278,1 @@\n-    final protected void ensureFileExtension(Path path, String extension) throws UserDataException {\n+    protected final void ensureFileExtension(Path path, String extension) throws UserDataException {\n@@ -290,1 +290,1 @@\n-    final protected void println() {\n+    protected final void println() {\n@@ -294,1 +294,1 @@\n-    final protected void print(String text) {\n+    protected final void print(String text) {\n@@ -298,1 +298,1 @@\n-    final protected void println(String text) {\n+    protected final void println(String text) {\n@@ -302,1 +302,1 @@\n-    final protected boolean matches(String command) {\n+    protected final boolean matches(String command) {\n@@ -328,1 +328,1 @@\n-    final protected static char quoteCharacter() {\n+    protected static final char quoteCharacter() {\n@@ -385,1 +385,1 @@\n-    final protected static Predicate<EventType> addCategoryFilter(String filterText, Predicate<EventType> eventFilter) throws UserSyntaxException {\n+    protected static final Predicate<EventType> addCategoryFilter(String filterText, Predicate<EventType> eventFilter) throws UserSyntaxException {\n@@ -403,1 +403,1 @@\n-    final protected static Predicate<EventType> addEventFilter(String filterText, final Predicate<EventType> eventFilter) throws UserSyntaxException {\n+    protected static final Predicate<EventType> addEventFilter(String filterText, final Predicate<EventType> eventFilter) throws UserSyntaxException {\n@@ -421,1 +421,1 @@\n-    final protected static <T, X> Predicate<T> addCache(final Predicate<T> filter, Function<T, X> cacheFunction) {\n+    protected static final <T, X> Predicate<T> addCache(final Predicate<T> filter, Function<T, X> cacheFunction) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    abstract protected void print(List<RecordedEvent> events);\n+    protected abstract void print(List<RecordedEvent> events);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/EventPrintWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private final static JdkJfrConsumer PRIVATE_ACCESS = JdkJfrConsumer.instance();\n+    private static final JdkJfrConsumer PRIVATE_ACCESS = JdkJfrConsumer.instance();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Metadata.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-    private final static DateTimeFormatter TIME_FORMAT = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSS\");\n-    private final static Long ZERO = 0L;\n+    private static final DateTimeFormatter TIME_FORMAT = DateTimeFormatter.ofPattern(\"HH:mm:ss.SSS\");\n+    private static final Long ZERO = 0L;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/PrettyWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    private final static String LINE_SEPARATOR = String.format(\"%n\");\n+    private static final String LINE_SEPARATOR = String.format(\"%n\");\n@@ -46,1 +46,1 @@\n-    final protected int getColumn() {\n+    protected final int getColumn() {\n@@ -64,1 +64,1 @@\n-    final public void printIndent() {\n+    public final void printIndent() {\n@@ -69,1 +69,1 @@\n-    final public void println() {\n+    public final void println() {\n@@ -74,1 +74,1 @@\n-    final public void print(String... texts) {\n+    public final void print(String... texts) {\n@@ -80,1 +80,1 @@\n-    final public void printAsString(Object o) {\n+    public final void printAsString(Object o) {\n@@ -84,1 +84,1 @@\n-    final public void print(String text) {\n+    public final void print(String text) {\n@@ -89,1 +89,1 @@\n-    final public void print(char c) {\n+    public final void print(char c) {\n@@ -94,1 +94,1 @@\n-    final public void print(int value) {\n+    public final void print(int value) {\n@@ -98,1 +98,1 @@\n-    final public void indent() {\n+    public final void indent() {\n@@ -103,1 +103,1 @@\n-    final public void retract() {\n+    public final void retract() {\n@@ -108,1 +108,1 @@\n-    final public void println(String text) {\n+    public final void println(String text) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/StructuredWriter.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    final static class DiskChunk {\n+    static final class DiskChunk {\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/DiskRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    final static class ChunkConsumer implements Consumer<Long> {\n+    static final class ChunkConsumer implements Consumer<Long> {\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/RemoteRecordingStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private final static class SingleMBeanComponent\n+    private static final class SingleMBeanComponent\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/internal\/FlightRecorderMXBeanProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}