{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -35,1 +34,1 @@\n-#include \"runtime\/os.inline.hpp\"\n+#include \"runtime\/os.hpp\"\n@@ -48,1 +47,1 @@\n-  volatile unsigned _num_trims_performed;\n+  unsigned _num_trims_performed;\n@@ -135,2 +134,2 @@\n-        Atomic::inc(&_num_trims_performed);\n-        log_debug(trimnh)(\"Total trims: %u.\", Atomic::load(&_num_trims_performed));\n+        _num_trims_performed++;\n+        log_debug(trimnh)(\"Total trims: %u.\", _num_trims_performed);\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative test\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNative\n@@ -39,0 +39,1 @@\n+ * @summary High interval trimming should not even kick in for short program runtimes\n@@ -44,1 +45,12 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative testWithHighTrimInterval\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNativeHighInterval\n+ *\/\n+\n+\/*\n+ * @test id=trimNativeLowInterval\n+ * @summary Very low (sub-second) interval, nothing should explode\n+ * @requires (os.family==\"linux\") & !vm.musl\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNativeLowInterval\n@@ -121,1 +133,0 @@\n-        allOptions.add(TestTrimNative.Tester.class.getName());\n@@ -165,1 +176,0 @@\n-                System.out.println(\"Parsed Trim Line. rss1: \" + rss1 + \" rss2: \" + rss2);\n@@ -201,0 +211,2 @@\n+            long sleeptime = Long.parseLong(args[0]);\n+\n@@ -212,1 +224,0 @@\n-            \/\/ Do a system GC. Native trimming should be paused in that time.\n@@ -218,1 +229,1 @@\n-            Thread.sleep(3000);\n+            Thread.sleep(sleeptime);\n@@ -230,1 +241,1 @@\n-            case \"test\": {\n+            case \"trimNative\": {\n@@ -234,4 +245,2 @@\n-                        new String[]{\"-XX:+UnlockExperimentalVMOptions\",\n-                                \"-XX:+TrimNativeHeap\",\n-                                \"-XX:TrimNativeHeapInterval=\" + trimInterval},\n-                        new String[]{\"RUN\", \"5000\"}\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=\" + trimInterval },\n+                        new String[] { TestTrimNative.Tester.class.getName(), \"5000\" }\n@@ -249,1 +258,1 @@\n-            case \"testWithHighTrimInterval\": {\n+            case \"trimNativeHighInterval\": {\n@@ -251,2 +260,2 @@\n-                        new String[]{\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE},\n-                        new String[]{\"RUN\", \"5000\"}\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE },\n+                        new String[] { TestTrimNative.Tester.class.getName(), \"5000\" }\n@@ -259,0 +268,9 @@\n+            case \"trimNativeLowInterval\": {\n+                OutputAnalyzer output = runTestWithOptions(\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=1\" },\n+                        new String[] { TestTrimNative.Tester.class.getName(), \"0\" }\n+                );\n+                checkExpectedLogMessages(output, true, 1);\n+                parseOutputAndLookForNegativeTrim(output, 1, 3000);\n+            } break;\n+\n@@ -261,2 +279,2 @@\n-                        new String[]{\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\"},\n-                        new String[]{\"RUN\", \"0\"}\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\" },\n+                        new String[] { \"-version\" }\n@@ -271,2 +289,2 @@\n-                        new String[]{\"-XX:+UnlockExperimentalVMOptions\", \"-XX:-TrimNativeHeap\"},\n-                        new String[]{\"RUN\", \"0\"}\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:-TrimNativeHeap\" },\n+                        new String[] { \"-version\" }\n@@ -279,1 +297,1 @@\n-                OutputAnalyzer output = runTestWithOptions(null, new String[]{\"RUN\", \"0\"});\n+                OutputAnalyzer output = runTestWithOptions(null, new String[] { \"-version\" } );\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":37,"deletions":19,"binary":false,"changes":56,"status":"modified"}]}