{"files":[{"patch":"@@ -40,1 +40,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -57,0 +56,1 @@\n+#include \"runtime\/trimNative.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -41,0 +40,1 @@\n+#include \"runtime\/trimNative.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -918,2 +917,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n-\n@@ -2555,1 +2552,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -1238,2 +1237,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n-\n@@ -1454,2 +1451,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -1713,3 +1712,0 @@\n-  \/\/ Pause native trimming for the duration of the GC\n-  TrimNative::SuspendMark tnsm(\"gc\");\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -446,2 +445,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -426,1 +425,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n@@ -441,1 +439,0 @@\n-  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -177,1 +177,0 @@\n-  f(conc_trim,                                      \"Concurrent Trim\")                 \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPhaseTimings.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -118,2 +117,0 @@\n-    TrimNative::SuspendMark tnsm(\"gc\");\n-\n","filename":"src\/hotspot\/share\/gc\/x\/xDriver.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -435,2 +434,0 @@\n-    TrimNative::SuspendMark tnsm(\"gc\");\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"runtime\/trimNative.hpp\"\n@@ -56,1 +56,1 @@\n-  static constexpr int _num_pools = 4;\n+  static const int _num_pools = 4;\n@@ -84,0 +84,1 @@\n+    ThreadCritical tc;\n@@ -94,13 +95,0 @@\n-  bool empty() const {\n-    return _first == nullptr;\n-  }\n-\n-  static bool needs_cleaning() {\n-    for (int i = 0; i < _num_pools; i++) {\n-      if (!_pools[i].empty()) {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n@@ -108,6 +96,3 @@\n-    ThreadCritical tc;\n-    if (needs_cleaning()) {\n-      TrimNative::SuspendMark tnsm(\"chunk pool cleaner\");\n-      for (int i = 0; i < _num_pools; i++) {\n-        _pools[i].prune();\n-      }\n+    TrimNative::SuspendMark tnsm(\"chunk pool cleaner\");\n+    for (int i = 0; i < _num_pools; i++) {\n+      _pools[i].prune();\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":6,"deletions":21,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -1060,4 +1059,0 @@\n-  if (TrimNativeHeap) {\n-    TrimNative::initialize();\n-  }\n-\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -74,0 +73,1 @@\n+#include \"runtime\/trimNative.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"runtime\/trimNative.hpp\"\n@@ -58,0 +57,1 @@\n+#include \"runtime\/trimNative.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+#include \"runtime\/trimNative.hpp\"\n@@ -758,0 +759,4 @@\n+  if (TrimNativeHeap) {\n+    TrimNative::initialize();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/safepoint.hpp\"\n@@ -43,0 +44,1 @@\n+  unsigned _suspend_count;\n@@ -44,2 +46,31 @@\n-  \/\/ Pausing\n-  int _pausers;\n+  \/\/ Statistics\n+  uint64_t _num_trims_performed;\n+\n+  bool suspended() const {\n+    assert(_lock->is_locked(), \"Must be\");\n+    return _suspend_count > 0;\n+  }\n+\n+  unsigned inc_suspend_count() {\n+    assert(_lock->is_locked(), \"Must be\");\n+    assert(_suspend_count < UINT_MAX, \"Sanity\");\n+    return ++_suspend_count;\n+  }\n+\n+  unsigned dec_suspend_count() {\n+    assert(_lock->is_locked(), \"Must be\");\n+    assert(_suspend_count != 0, \"Sanity\");\n+    return --_suspend_count;\n+  }\n+\n+  bool stopped() const {\n+    assert(_lock->is_locked(), \"Must be\");\n+    return _stop;\n+  }\n+\n+  bool at_or_nearing_safepoint() const {\n+    return\n+        SafepointSynchronize::is_at_safepoint() ||\n+        SafepointSynchronize::is_synchronizing();\n+  }\n+  static constexpr int safepoint_poll_ms = 250;\n@@ -47,1 +78,0 @@\n-  bool paused() const { return _pausers > 0; }\n@@ -58,2 +88,1 @@\n-    int64_t ntt = 0; \/\/ next trim time\n-    int64_t tnow = 0;\n+    bool trim_result = false;\n@@ -62,1 +91,4 @@\n-      \/\/ 1 - Wait for _next_trim_time. Handle spurious wakeups and shutdown.\n+\n+      int64_t tnow = now();\n+      int64_t next_trim_time = tnow + TrimNativeHeapInterval;\n+\n@@ -66,4 +98,3 @@\n-        tnow = now();\n-\n-        \/\/ Set next trim time\n-        ntt = tnow + TrimNativeHeapInterval;\n+        if (trim_result) {\n+          _num_trims_performed++;\n+        }\n@@ -72,0 +103,1 @@\n+\n@@ -75,1 +107,2 @@\n-          if (paused()) {\n+\n+          if (suspended()) {\n@@ -77,2 +110,4 @@\n-          } else if (ntt > tnow) {\n-            ml.wait(ntt - tnow);\n+          } else if (next_trim_time > tnow) {\n+            ml.wait(next_trim_time - tnow);\n+          } else if (at_or_nearing_safepoint()) {\n+            ml.wait(safepoint_poll_ms);\n@@ -80,0 +115,1 @@\n+\n@@ -83,0 +119,1 @@\n+\n@@ -84,2 +121,4 @@\n-        } while (paused() || ntt > tnow);\n-      }\n+\n+        } while (at_or_nearing_safepoint() || suspended() || next_trim_time > tnow);\n+\n+      } \/\/ Lock scope\n@@ -88,1 +127,1 @@\n-      execute_trim_and_log();\n+      trim_result = execute_trim_and_log();\n@@ -94,1 +133,1 @@\n-  void execute_trim_and_log() const {\n+  bool execute_trim_and_log() const {\n@@ -108,0 +147,2 @@\n+        log_debug(trim)(\"Total trims: \" UINT64_FORMAT \".\", _num_trims_performed);\n+        return true;\n@@ -112,0 +153,1 @@\n+    return false;\n@@ -119,1 +161,2 @@\n-    _pausers(0)\n+    _suspend_count(0),\n+    _num_trims_performed(0)\n@@ -129,2 +172,1 @@\n-    assert(TrimNativeHeapInterval > 0, \"Only call if periodic trimming is enabled\");\n-    int lvl = 0;\n+    unsigned n = 0;\n@@ -133,1 +175,1 @@\n-      lvl = ++_pausers;\n+      n = inc_suspend_count();\n@@ -136,1 +178,1 @@\n-    log_debug(trim)(\"NativeTrimmer pause (%s) (%d)\", reason, lvl);\n+    log_debug(trim)(\"NativeTrimmer pause (%s) (%u)\", reason, n);\n@@ -141,2 +183,1 @@\n-    assert(TrimNativeHeapInterval > 0, \"Only call if periodic trimming is enabled\");\n-    int lvl = 0;\n+    unsigned n = 0;\n@@ -145,2 +186,2 @@\n-      lvl = _pausers--;\n-      if (_pausers == 0) {\n+      n = dec_suspend_count();\n+      if (n == 0) {\n@@ -150,1 +191,6 @@\n-    log_debug(trim)(\"NativeTrimmer unpause (%s) (%d)\", reason, lvl);\n+    log_debug(trim)(\"NativeTrimmer unpause (%s) (%u)\", reason, n);\n+  }\n+\n+  uint64_t num_trims_performed() const {\n+    MonitorLocker ml(_lock, Mutex::_no_safepoint_check_flag);\n+    return _num_trims_performed;\n@@ -195,0 +241,7 @@\n+uint64_t TrimNative::num_trims_performed() {\n+  if (g_trimmer_thread != nullptr) {\n+    return g_trimmer_thread->num_trims_performed();\n+  }\n+  return 0;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/trimNative.cpp","additions":80,"deletions":27,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -34,4 +34,0 @@\n-public:\n-\n-  static void initialize();\n-  static void cleanup();\n@@ -45,0 +41,7 @@\n+public:\n+\n+  static void initialize();\n+  static void cleanup();\n+\n+  static uint64_t num_trims_performed();\n+\n","filename":"src\/hotspot\/share\/runtime\/trimNative.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @test id=serial\n- * @requires vm.gc.Serial\n+ * @test\n@@ -33,1 +32,1 @@\n- * @run driver TestTrimNative test -XX:+UseSerialGC\n+ * @run driver TestTrimNative test\n@@ -36,38 +35,0 @@\n-\/*\n- * @test id=parallel\n- * @requires vm.gc.Serial\n- * @requires (os.family==\"linux\") & !vm.musl\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run driver TestTrimNative test -XX:+UseParallelGC\n- *\/\n-\n-\/*\n- * @test id=shenandoah\n- * @requires vm.gc.Serial\n- * @requires (os.family==\"linux\") & !vm.musl\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run driver TestTrimNative test -XX:+UseShenandoahGC\n- *\/\n-\n-\/*\n- * @test id=Znongen\n- * @requires vm.gc.Serial\n- * @requires (os.family==\"linux\") & !vm.musl\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run driver TestTrimNative test -XX:+UseZGC -XX:-ZGenerational\n- *\/\n-\n-\/*\n- * @test id=Zgen\n- * @requires vm.gc.Serial\n- * @requires (os.family==\"linux\") & !vm.musl\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run driver TestTrimNative test -XX:+UseZGC -XX:+ZGenerational\n- *\/\n-\n-\/\/ Other tests\n-\n@@ -130,2 +91,1 @@\n-    private static OutputAnalyzer runTestWithOptions(String[] extraOptions) throws IOException {\n-\n+    private static String[] prepareOptions(String[] extraVMOptions, String[] programOptions) {\n@@ -133,1 +93,3 @@\n-        allOptions.addAll(Arrays.asList(extraOptions));\n+        if (extraVMOptions != null) {\n+            allOptions.addAll(Arrays.asList(extraVMOptions));\n+        }\n@@ -140,1 +102,0 @@\n-\n@@ -142,2 +103,8 @@\n-        allOptions.add(\"RUN\");\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(allOptions.toArray(new String[0]));\n+        if (programOptions != null) {\n+            allOptions.addAll(Arrays.asList(programOptions));\n+        }\n+        return allOptions.toArray(new String[0]);\n+    }\n+\n+    private static OutputAnalyzer runTestWithOptions(String[] extraOptions, String[] programOptions) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(prepareOptions(extraOptions, programOptions));\n@@ -217,2 +184,2 @@\n-                               \"-XX:TrimNativeHeapInterval=\" + trimInterval\n-                }\n+                               \"-XX:TrimNativeHeapInterval=\" + trimInterval },\n+                new String[] { \"RUN\", \"5000\" }\n@@ -225,4 +192,0 @@\n-        \/\/ We expect to see at least one GC-related trimming pause\n-        output.shouldMatch(\"NativeTrimmer pause.*(gc)\");\n-        output.shouldMatch(\"NativeTrimmer unpause.*(gc)\");\n-\n@@ -239,2 +202,3 @@\n-                               \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE\n-                });\n+                               \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE },\n+                new String[] { \"RUN\", \"5000\" }\n+        );\n@@ -249,2 +213,3 @@\n-                               \"-XX:+TrimNativeHeap\"\n-                });\n+                               \"-XX:+TrimNativeHeap\" },\n+                new String[] { \"RUN\", \"0\" }\n+        );\n@@ -260,1 +225,3 @@\n-                });\n+                },\n+                new String[] { \"RUN\", \"0\" }\n+                );\n@@ -266,1 +233,1 @@\n-        OutputAnalyzer output = runTestWithOptions (new String[] { });\n+        OutputAnalyzer output = runTestWithOptions (null, new String[] { \"RUN\", \"0\" } );\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":26,"deletions":59,"binary":false,"changes":85,"status":"modified"}]}