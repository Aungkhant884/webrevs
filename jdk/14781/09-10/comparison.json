{"files":[{"patch":"@@ -1992,1 +1992,1 @@\n-          \"(default) disables the native heap trimming.\")                   \\\n+          \"(default) disables native heap trimming.\")                       \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1650,1 +1650,1 @@\n-  NativeHeapTrimmer::SuspendMark trim_native_pause(\"monitor deletion\");\n+  NativeHeapTrimmer::SuspendMark sm(\"monitor deletion\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+#include \"utilities\/ostream.hpp\"\n+#include \"utilities\/vmError.hpp\"\n@@ -103,0 +105,4 @@\n+      unsigned times_suspended = 0;\n+      unsigned times_waited = 0;\n+      unsigned times_safepoint = 0;\n+\n@@ -109,0 +115,1 @@\n+            times_suspended ++;\n@@ -111,0 +118,1 @@\n+            times_waited ++;\n@@ -114,0 +122,1 @@\n+            times_safepoint ++;\n@@ -124,0 +133,3 @@\n+      log_trace(trimnative)(\"Times %u suspended, %u timed, %u safepoint\",\n+                            times_suspended, times_waited, times_safepoint);\n+\n@@ -179,1 +191,1 @@\n-    log_debug(trimnative)(\"Native heap trimmer suspended for %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"Trim suspended for %s (%u suspend requests)\", reason, n);\n@@ -192,1 +204,1 @@\n-    log_debug(trimnative)(\"Native heap trimmer resumed after %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"Trim resumed after %s (%u suspend requests)\", reason, n);\n@@ -201,0 +213,16 @@\n+  void print_state(outputStream* st) const {\n+    \/\/ Don't pull lock during error reporting\n+    Mutex* const lock = VMError::is_error_reported() ? nullptr : _lock;\n+    int64_t num_trims = 0;\n+    bool stopped = false;\n+    uint16_t suspenders = 0;\n+    {\n+      MutexLocker ml(lock, Mutex::_no_safepoint_check_flag);\n+      num_trims = _num_trims_performed;\n+      stopped = _stop;\n+      suspenders = _suspend_count;\n+    }\n+    st->print_cr(\"Trims performed: \" UINT64_FORMAT \", current suspend count: %d, stopped: %d\",\n+                 num_trims, suspenders, stopped);\n+  }\n+\n@@ -235,0 +263,9 @@\n+\n+void NativeHeapTrimmer::print_state(outputStream* st) {\n+  if (g_trimmer_thread != nullptr) {\n+    st->print_cr(\"Periodic native trim enabled (interval: %u ms)\", TrimNativeHeapInterval);\n+    g_trimmer_thread->print_state(st);\n+  } else {\n+    st->print_cr(\"Periodic native trim disabled\");\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+class outputStream;\n+\n@@ -48,0 +50,2 @@\n+  static void print_state(outputStream* st);\n+\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+#include \"runtime\/trimNativeHeap.hpp\"\n@@ -1289,0 +1290,1 @@\n+    st->cr();\n@@ -1290,1 +1292,2 @@\n-  STEP_IF(\"printing system\", _verbose)\n+  STEP_IF(\"printing periodic trim state\", _verbose)\n+    NativeHeapTrimmer::print_state(st);\n@@ -1292,0 +1295,2 @@\n+\n+  STEP_IF(\"printing system\", _verbose)\n@@ -1458,0 +1463,1 @@\n+  st->cr();\n@@ -1459,2 +1465,2 @@\n-  \/\/ STEP(\"printing system\")\n-\n+  \/\/ STEP(\"printing periodic trim state\")\n+  NativeHeapTrimmer::print_state(st);\n@@ -1462,0 +1468,3 @@\n+\n+\n+  \/\/ STEP(\"printing system\")\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include \"testutils.hpp\"\n@@ -32,1 +35,41 @@\n-TEST_VM(TrimNative, SuspendMark) {\n+using ::testing::HasSubstr;\n+\n+\/\/ Check the state of the trimmer via print_state; returns the suspend count\n+static int check_trim_state() {\n+  char buf [1024];\n+  stringStream ss(buf, sizeof(buf));\n+  NativeHeapTrimmer::print_state(&ss);\n+  if (NativeHeapTrimmer::enabled()) {\n+    assert(TrimNativeHeapInterval > 0, \"Sanity\");\n+    EXPECT_THAT(buf, HasSubstr(\"Periodic native trim enabled\"));\n+\n+    const char* s = ::strstr(buf, \"Trims performed\");\n+    EXPECT_NOT_NULL(s);\n+\n+    uint64_t num_trims = 0;\n+    int suspend_count = 0;\n+    int stopped = 0;\n+    EXPECT_EQ(::sscanf(s, \"Trims performed: \" UINT64_FORMAT \", current suspend count: %d, stopped: %d\",\n+                       &num_trims, &suspend_count, &stopped), 3);\n+\n+    \/\/ Number of trims we can reasonably expect should be limited\n+    const double fudge_factor = 1.5;\n+    const uint64_t elapsed_ms = (uint64_t)(os::elapsedTime() * fudge_factor * 1000.0);\n+    const uint64_t max_num_trims = (elapsed_ms \/ TrimNativeHeapInterval) + 1;\n+    EXPECT_LE(num_trims, max_num_trims);\n+\n+    \/\/ We should not be stopped\n+    EXPECT_EQ(stopped, 0);\n+\n+    \/\/ Suspend count must not underflow\n+    EXPECT_GE(suspend_count, 0);\n+    return suspend_count;\n+\n+  } else {\n+    EXPECT_THAT(buf, HasSubstr(\"Periodic native trim disabled\"));\n+    EXPECT_THAT(buf, Not(HasSubstr(\"Trims performed\")));\n+    return 0;\n+  }\n+}\n+\n+TEST_VM(os, TrimNative) {\n@@ -38,1 +81,3 @@\n-  \/\/ Try recursive pausing\n+  \/\/ Try recursive pausing. This tests that we are able to pause, that pauses stack,\n+  \/\/ and that stacking works within the same thread.\n+  int c1 = 0, c2 = 0, c3 = 0;\n@@ -41,0 +86,1 @@\n+    c1 = check_trim_state();\n@@ -43,0 +89,1 @@\n+      c2 = check_trim_state();\n@@ -45,0 +92,1 @@\n+        c3 = check_trim_state();\n@@ -48,0 +96,5 @@\n+  \/\/ We also check the state: the suspend count should go up. But since we don't know\n+  \/\/ whether concurrent code will have increased the suspend count too, this is fuzzy and\n+  \/\/ we must avoid intermittent false positives.\n+  EXPECT_GT(c2, c1);\n+  EXPECT_GT(c3, c2);\n","filename":"test\/hotspot\/gtest\/runtime\/test_trim_native.cpp","additions":55,"deletions":2,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023 Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/* @test\n+ * @summary Run a subset of gtests with the native trimmer activated.\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.xml\n+ * @run main\/native GTestWrapper --gtest_filter=os.trim* -Xlog:trimnative -XX:+UnlockExperimentalVMOptions -XX:TrimNativeHeapInterval=100\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gtest\/NativeHeapTrimmerGtest.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -285,1 +285,1 @@\n-                output.shouldContain(\"Native trim not supported on this platform\");\n+                output.shouldContain(\"Native heap trim is not supported on this platform\");\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}