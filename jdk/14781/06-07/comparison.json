{"files":[{"patch":"@@ -55,1 +55,1 @@\n-\/\/ stubbed-out trim-native support\n+\/\/ Trim-native support, stubbed out for now, may be enabled later\n","filename":"src\/hotspot\/os\/aix\/os_aix.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-\/\/ stubbed-out trim-native support\n+\/\/ Trim-native support, stubbed out for now, may be enabled later\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-\/\/ stubbed-out trim-native support\n+\/\/ Trim-native support, stubbed out for now, may be enabled later\n","filename":"src\/hotspot\/os\/windows\/os_windows.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-  LOG_TAG(trimnh) \/* trim native heap *\/ \\\n+  LOG_TAG(trimnative) \/* trim native heap *\/ \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1988,8 +1988,6 @@\n-  product(bool, TrimNativeHeap, false, EXPERIMENTAL,                        \\\n-          \"JVM will attempt to trim the native heap periodically. \"         \\\n-          \"Interval is controlled by TrimNativeHeapInterval.\")              \\\n-                                                                            \\\n-  product(uint, TrimNativeHeapInterval, 60 * 1000, EXPERIMENTAL,            \\\n-          \"If TrimNativeHeap is enabled: interval, in ms, at which \"        \\\n-          \"the to trim the native heap.\")                                   \\\n-          range(1, UINT_MAX)                                                \\\n+  product(uint, TrimNativeHeapInterval, 0, EXPERIMENTAL,                    \\\n+          \"Interval, in ms, at which the JVM will trim the native heap if \" \\\n+          \"the platform supports that. Lower values will reclaim memory \"   \\\n+          \"more eagerly at the cost of higher overhead. A value of 0 \"      \\\n+          \"(default) disables the native heap trimming.\")                   \\\n+          range(0, UINT_MAX)                                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -759,1 +759,1 @@\n-  if (TrimNativeHeap) {\n+  if (NativeHeapTrimmer::enabled()) {\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"runtime\/os.hpp\"\n+#include \"runtime\/os.inline.hpp\"\n@@ -54,1 +54,1 @@\n-  unsigned inc_suspend_count() {\n+  uint16_t inc_suspend_count() {\n@@ -60,1 +60,1 @@\n-  unsigned dec_suspend_count() {\n+  uint16_t dec_suspend_count() {\n@@ -75,1 +75,1 @@\n-  static constexpr int safepoint_poll_ms = 250;\n+  static constexpr int64_t safepoint_poll_ms = 250;\n@@ -81,4 +81,4 @@\n-  struct LogStartStop {\n-    void log(const char* s) { log_info(trimnh)(\"NativeTrimmer %s.\", s); }\n-    LogStartStop()  { log(\"start\"); }\n-    ~LogStartStop() { log(\"stop\"); }\n+  struct LogStartStopMark {\n+    void log(const char* s) { log_info(trimnative)(\"NativeTrimmer %s.\", s); }\n+    LogStartStopMark()  { log(\"start\"); }\n+    ~LogStartStopMark() { log(\"stop\"); }\n@@ -88,1 +88,5 @@\n-    LogStartStop logStartStop;\n+    assert(NativeHeapTrimmer::enabled(), \"Only call if enabled\");\n+\n+    LogStartStopMark logStartStop;\n+\n+    const double interval_secs = (double)TrimNativeHeapInterval \/ 1000;\n@@ -92,1 +96,0 @@\n-      const double interval_secs = (double)TrimNativeHeapInterval \/ 1000;\n@@ -106,0 +109,1 @@\n+            const int64_t wait_ms = MIN2((int64_t)TrimNativeHeapInterval, safepoint_poll_ms);\n@@ -124,0 +128,1 @@\n+\n@@ -125,13 +130,18 @@\n-    log_debug(trimnh)(\"Trim native heap started...\");\n-    if (os::trim_native_heap(&sc)) {\n-      double t2 = now();\n-      if (sc.after != SIZE_MAX) {\n-        const size_t delta = sc.after < sc.before ? (sc.before - sc.after) : (sc.after - sc.before);\n-        const char sign = sc.after < sc.before ? '-' : '+';\n-        log_info(trimnh)(\"Trim native heap: RSS+Swap: \" PROPERFMT \"->\" PROPERFMT \" (%c\" PROPERFMT \"), %1.3fms\",\n-                           PROPERFMTARGS(sc.before), PROPERFMTARGS(sc.after), sign, PROPERFMTARGS(delta),\n-                           to_ms(t2 - t1));\n-        _num_trims_performed++;\n-        log_debug(trimnh)(\"Total trims: %u.\", _num_trims_performed);\n-      } else {\n-        log_info(trimnh)(\"Trim native heap: complete, no details, %1.3fms\", to_ms(t2 - t1));\n+    LogTarget(Info, trimnative) lt;\n+    const bool logging_enabled = lt.is_enabled();\n+\n+    \/\/ We only collect size change information if we are logging; save the access to procfs otherwise.\n+    if (os::trim_native_heap(logging_enabled ? &sc : nullptr)) {\n+      _num_trims_performed++;\n+      if (logging_enabled) {\n+        double t2 = now();\n+        if (sc.after != SIZE_MAX) {\n+          const size_t delta = sc.after < sc.before ? (sc.before - sc.after) : (sc.after - sc.before);\n+          const char sign = sc.after < sc.before ? '-' : '+';\n+          log_info(trimnative)(\"Trim native heap (%u): RSS+Swap: \" PROPERFMT \"->\" PROPERFMT \" (%c\" PROPERFMT \"), %1.3fms\",\n+                               _num_trims_performed,\n+                               PROPERFMTARGS(sc.before), PROPERFMTARGS(sc.after), sign, PROPERFMTARGS(delta),\n+                               to_ms(t2 - t1));\n+        } else {\n+          log_info(trimnative)(\"Trim native heap (%u): complete, no details, %1.3fms\", _num_trims_performed, to_ms(t2 - t1));\n+        }\n@@ -157,2 +167,2 @@\n-    assert(TrimNativeHeap, \"Only call if enabled\");\n-    unsigned n = 0;\n+    assert(NativeHeapTrimmer::enabled(), \"Only call if enabled\");\n+    uint16_t n = 0;\n@@ -164,1 +174,1 @@\n-    log_debug(trimnh)(\"NativeTrimmer pause for %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"NativeTrimmer pause for %s (%u suspend requests)\", reason, n);\n@@ -168,2 +178,2 @@\n-    assert(TrimNativeHeap, \"Only call if enabled\");\n-    unsigned n = 0;\n+    assert(NativeHeapTrimmer::enabled(), \"Only call if enabled\");\n+    uint16_t n = 0;\n@@ -177,1 +187,1 @@\n-    log_debug(trimnh)(\"NativeTrimmer unpause for %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"NativeTrimmer unpause for %s (%u suspend requests)\", reason, n);\n@@ -192,1 +202,1 @@\n-  if (TrimNativeHeap) {\n+  if (TrimNativeHeapInterval > 0) {\n@@ -194,2 +204,2 @@\n-      FLAG_SET_ERGO(TrimNativeHeap, false);\n-      log_info(trimnh)(\"Native trim not supported on this platform.\");\n+      FLAG_SET_ERGO(TrimNativeHeapInterval, 0);\n+      log_info(trimnative)(\"Native trim not supported on this platform.\");\n@@ -199,1 +209,1 @@\n-    log_info(trimnh)(\"Periodic native trim enabled (interval: %u ms)\", TrimNativeHeapInterval);\n+    log_info(trimnative)(\"Periodic native trim enabled (interval: %u ms)\", TrimNativeHeapInterval);\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":43,"deletions":33,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+  static inline bool enabled() { return TrimNativeHeapInterval > 0; }\n+\n@@ -53,1 +55,1 @@\n-      if (TrimNativeHeap) {\n+      if (NativeHeapTrimmer::enabled()) {\n@@ -58,1 +60,1 @@\n-      if (TrimNativeHeap) {\n+      if (NativeHeapTrimmer::enabled()) {\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  if (!TrimNativeHeap) {\n+  if (!NativeHeapTrimmer::enabled()) {\n","filename":"test\/hotspot\/gtest\/runtime\/test_trim_native.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-    static final int szAllocations = 16;\n-    static final int totalAllocationsSize = 16 * 1024 * 1024; \/\/ 16 MB total\n+    static final int szAllocations = 128;\n+    static final int totalAllocationsSize = 128 * 1024 * 1024; \/\/ 128 MB total\n@@ -128,0 +128,1 @@\n+        allOptions.add(\"-XX:+UnlockDiagnosticVMOptions\"); \/\/ For whitebox\n@@ -131,1 +132,1 @@\n-        allOptions.add(\"-Xlog:trimnh=debug\");\n+        allOptions.add(\"-Xlog:trimnative=debug\");\n@@ -168,1 +169,1 @@\n-        Pattern pat = Pattern.compile(\".*\\\\[trimnh\\\\] Trim native heap: RSS\\\\+Swap: (\\\\d+)([BKMG])->(\\\\d+)([BKMG]).*\");\n+        Pattern pat = Pattern.compile(\".*\\\\[trimnative\\\\] Trim native heap \\\\(\\\\d+\\\\): RSS\\\\+Swap: (\\\\d+)([BKMG])->(\\\\d+)([BKMG]).*\");\n@@ -245,1 +246,1 @@\n-                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=\" + trimInterval },\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:TrimNativeHeapInterval=\" + trimInterval },\n@@ -260,1 +261,1 @@\n-                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE },\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE },\n@@ -270,1 +271,1 @@\n-                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\", \"-XX:TrimNativeHeapInterval=1\" },\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:TrimNativeHeapInterval=1\" },\n@@ -279,1 +280,1 @@\n-                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+TrimNativeHeap\" },\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:TrimNativeHeapInterval=1\" },\n@@ -289,1 +290,1 @@\n-                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:-TrimNativeHeap\" },\n+                        new String[] { \"-XX:+UnlockExperimentalVMOptions\", \"-XX:TrimNativeHeapInterval=0\" },\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}