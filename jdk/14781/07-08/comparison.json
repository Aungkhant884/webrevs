{"files":[{"patch":"@@ -40,1 +40,7 @@\n-class NativeTrimmerThread : public NamedThread {\n+class NativeHeapTrimmerThread : public NamedThread {\n+\n+  \/\/ Upper limit for the backoff during pending\/in-progress safepoint.\n+  \/\/ Chosen as reasonable value to balance the overheads of waking up\n+  \/\/ during the safepoint, which might have undesired effects on latencies,\n+  \/\/ and the accuracy in tracking the trimming interval.\n+  static constexpr int64_t safepoint_poll_ms = 250;\n@@ -47,1 +53,1 @@\n-  unsigned _num_trims_performed;\n+  uint64_t _num_trims_performed;\n@@ -73,1 +79,1 @@\n-        SafepointSynchronize::is_synchronizing();\n+           SafepointSynchronize::is_synchronizing();\n@@ -75,1 +81,0 @@\n-  static constexpr int64_t safepoint_poll_ms = 250;\n@@ -82,1 +87,1 @@\n-    void log(const char* s) { log_info(trimnative)(\"NativeTrimmer %s.\", s); }\n+    void log(const char* s) { log_info(trimnative)(\"Native heap trimmer %s\", s); }\n@@ -90,1 +95,1 @@\n-    LogStartStopMark logStartStop;\n+    LogStartStopMark lssm;\n@@ -94,1 +99,1 @@\n-    for (;;) {\n+    while (true) {\n@@ -102,1 +107,1 @@\n-        do { \/\/ handle spurious wakeups\n+        while (at_or_nearing_safepoint() || is_suspended() || next_trim_time > tnow) {\n@@ -109,2 +114,2 @@\n-            const int64_t wait_ms = MIN2((int64_t)TrimNativeHeapInterval, safepoint_poll_ms);\n-            ml.wait(safepoint_poll_ms);\n+            const int64_t wait_ms = MIN2<int64_t>(TrimNativeHeapInterval, safepoint_poll_ms);\n+            ml.wait(wait_ms);\n@@ -116,0 +121,2 @@\n+        }\n+      }\n@@ -117,4 +124,0 @@\n-        } while (at_or_nearing_safepoint() || is_suspended() || next_trim_time > tnow);\n-      } \/\/ Lock scope\n-\n-      \/\/ 2 - Trim outside of lock protection.\n@@ -122,1 +125,1 @@\n-    } \/\/ end for(;;)\n+    }\n@@ -129,1 +132,1 @@\n-    os::size_change_t sc;\n+    os::size_change_t sc = { 0, 0 };\n@@ -141,1 +144,1 @@\n-          log_info(trimnative)(\"Trim native heap (%u): RSS+Swap: \" PROPERFMT \"->\" PROPERFMT \" (%c\" PROPERFMT \"), %1.3fms\",\n+          log_info(trimnative)(\"Trim native heap (\" UINT64_FORMAT \"): RSS+Swap: \" PROPERFMT \"->\" PROPERFMT \" (%c\" PROPERFMT \"), %.3fms\",\n@@ -146,1 +149,3 @@\n-          log_info(trimnative)(\"Trim native heap (%u): complete, no details, %1.3fms\", _num_trims_performed, to_ms(t2 - t1));\n+          log_info(trimnative)(\"Trim native heap (\" UINT64_FORMAT \"): complete, no details, %.3fms\",\n+                               _num_trims_performed,\n+                               to_ms(t2 - t1));\n@@ -154,2 +159,2 @@\n-  NativeTrimmerThread() :\n-    _lock(new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, \"NativeTrimmer_lock\")),\n+  NativeHeapTrimmerThread() :\n+    _lock(new (std::nothrow) PaddedMonitor(Mutex::nosafepoint, \"NativeHeapTrimmer_lock\")),\n@@ -174,1 +179,1 @@\n-    log_debug(trimnative)(\"NativeTrimmer pause for %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"Native heap trimmer suspended for %s (%u suspend requests)\", reason, n);\n@@ -187,1 +192,1 @@\n-    log_debug(trimnative)(\"NativeTrimmer unpause for %s (%u suspend requests)\", reason, n);\n+    log_debug(trimnative)(\"Native heap trimmer resumed after %s (%u suspend requests)\", reason, n);\n@@ -196,1 +201,1 @@\n-}; \/\/ NativeTrimmer\n+}; \/\/ NativeHeapTrimmer\n@@ -198,1 +203,1 @@\n-static NativeTrimmerThread* g_trimmer_thread = nullptr;\n+static NativeHeapTrimmerThread* g_trimmer_thread = nullptr;\n@@ -205,1 +210,1 @@\n-      log_info(trimnative)(\"Native trim not supported on this platform.\");\n+      log_info(trimnative)(\"Native heap trim is not supported on this platform\");\n@@ -208,1 +213,1 @@\n-    g_trimmer_thread = new NativeTrimmerThread();\n+    g_trimmer_thread = new NativeHeapTrimmerThread();\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.cpp","additions":31,"deletions":26,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-  static uint64_t num_trims_performed();\n-\n","filename":"src\/hotspot\/share\/runtime\/trimNativeHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNative\n+ * @run driver TestTrimNative trimNative\n@@ -45,1 +45,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNativeHighInterval\n+ * @run driver TestTrimNative trimNativeHighInterval\n@@ -56,1 +56,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative trimNativeLowInterval\n+ * @run driver TestTrimNative trimNativeLowInterval\n@@ -67,1 +67,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative testOffByDefault\n+ * @run driver TestTrimNative testOffByDefault\n@@ -78,1 +78,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative testOffExplicit\n+ * @run driver TestTrimNative testOffExplicit\n@@ -89,1 +89,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestTrimNative testOffOnNonCompliantPlatforms\n+ * @run driver TestTrimNative testOffOnNonCompliantPlatforms\n@@ -151,2 +151,2 @@\n-            output.shouldContain(\"NativeTrimmer start\");\n-            output.shouldContain(\"NativeTrimmer stop\");\n+            output.shouldContain(\"Native heap trimmer start\");\n+            output.shouldContain(\"Native heap trimmer stop\");\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}