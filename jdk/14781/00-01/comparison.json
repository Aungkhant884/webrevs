{"files":[{"patch":"@@ -460,1 +460,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"stringtable\");\n+  TrimNative::SuspendMark tnsm(\"stringtable\");\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -741,1 +741,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"symboltable\");\n+  TrimNative::SuspendMark tnsm(\"symboltable\");\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -918,1 +918,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n@@ -2555,1 +2555,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1238,1 +1238,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n@@ -1454,1 +1454,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1714,1 +1714,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n@@ -441,1 +441,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"gc\");\n+  TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    TrimNative::PauseMark trim_native_pause(\"gc\");\n+    TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/x\/xDriver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-    TrimNative::PauseMark trim_native_pause(\"gc\");\n+    TrimNative::SuspendMark tnsm(\"gc\");\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-        return false;\n+        return true;\n@@ -104,1 +104,1 @@\n-    return true;\n+    return false;\n@@ -110,1 +110,1 @@\n-      TrimNative::PauseMark trim_native_pause(\"chunk pool cleaner\");\n+      TrimNative::SuspendMark tnsm(\"chunk pool cleaner\");\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1984,1 +1984,1 @@\n-          \"GC will attempt to trim the native heap periodically. By \"       \\\n+          \"JVM will attempt to trim the native heap periodically. By \"      \\\n@@ -1988,2 +1988,2 @@\n-  product(uint, TrimNativeHeapInterval, 60, EXPERIMENTAL,                   \\\n-          \"If TrimNativeHeap is enabled: interval, in seconds, in which \"   \\\n+  product(uint, TrimNativeHeapInterval, 60 * 1000, EXPERIMENTAL,            \\\n+          \"If TrimNativeHeap is enabled: interval, in ms, at which \"        \\\n@@ -1991,1 +1991,1 @@\n-          range(1, UINT_MAX)                                                \\\n+          range(100, UINT_MAX)                                              \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1650,1 +1650,1 @@\n-  TrimNative::PauseMark trim_native_pause(\"monitor deletion\");\n+  TrimNative::SuspendMark trim_native_pause(\"monitor deletion\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        ntt = tnow + (TrimNativeHeapInterval * 1000);\n+        ntt = tnow + TrimNativeHeapInterval;\n@@ -127,1 +127,1 @@\n-  void pause(const char* reason) {\n+  void suspend(const char* reason) {\n@@ -139,1 +139,1 @@\n-  void unpause(const char* reason) {\n+  void resume(const char* reason) {\n@@ -173,1 +173,1 @@\n-    log_info(trim)(\"Periodic native trim enabled (interval: %u seconds)\", TrimNativeHeapInterval);\n+    log_info(trim)(\"Periodic native trim enabled (interval: %u ms)\", TrimNativeHeapInterval);\n@@ -183,1 +183,1 @@\n-void TrimNative::pause_periodic_trim(const char* reason) {\n+void TrimNative::suspend_periodic_trim(const char* reason) {\n@@ -185,1 +185,1 @@\n-    g_trimmer_thread->pause(reason);\n+    g_trimmer_thread->suspend(reason);\n@@ -189,1 +189,1 @@\n-void TrimNative::unpause_periodic_trim(const char* reason) {\n+void TrimNative::resume_periodic_trim(const char* reason) {\n@@ -191,1 +191,1 @@\n-    g_trimmer_thread->unpause(reason);\n+    g_trimmer_thread->resume(reason);\n","filename":"src\/hotspot\/share\/runtime\/trimNative.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  static void pause_periodic_trim(const char* reason);\n+  static void suspend_periodic_trim(const char* reason);\n@@ -43,1 +43,1 @@\n-  static void unpause_periodic_trim(const char* reason);\n+  static void resume_periodic_trim(const char* reason);\n@@ -47,1 +47,1 @@\n-  struct PauseMark {\n+  struct SuspendMark {\n@@ -49,1 +49,1 @@\n-    PauseMark(const char* reason = \"unknown\") : _reason(reason) {\n+    SuspendMark(const char* reason = \"unknown\") : _reason(reason) {\n@@ -51,1 +51,1 @@\n-        pause_periodic_trim(_reason);\n+        suspend_periodic_trim(_reason);\n@@ -54,1 +54,1 @@\n-    ~PauseMark()  {\n+    ~SuspendMark()  {\n@@ -56,1 +56,1 @@\n-        unpause_periodic_trim(_reason);\n+        resume_periodic_trim(_reason);\n","filename":"src\/hotspot\/share\/runtime\/trimNative.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-            output.shouldContain(\"Periodic native trim enabled (interval: \" + expectedInterval + \" seconds\");\n+            output.shouldContain(\"Periodic native trim enabled (interval: \" + expectedInterval + \" ms\");\n@@ -212,0 +212,2 @@\n+        long trimInterval = 500; \/\/ twice per second\n+        long ms1 = System.currentTimeMillis();\n@@ -215,1 +217,1 @@\n-                               \"-XX:TrimNativeHeapInterval=1\"\n+                               \"-XX:TrimNativeHeapInterval=\" + trimInterval\n@@ -218,0 +220,2 @@\n+        long ms2 = System.currentTimeMillis();\n+        long runtime_ms = ms2 - ms1;\n@@ -219,1 +223,1 @@\n-        checkExpectedLogMessages(output, true, 1);\n+        checkExpectedLogMessages(output, true, 500);\n@@ -225,1 +229,3 @@\n-        parseOutputAndLookForNegativeTrim(output,0, \/*  minTrimsExpected *\/ 10  \/*  maxTrimsExpected *\/);\n+        long maxTrimsExpected = runtime_ms \/ trimInterval;\n+        long minTrimsExpected = maxTrimsExpected \/ 2;\n+        parseOutputAndLookForNegativeTrim(output, (int)minTrimsExpected, (int)maxTrimsExpected);\n@@ -233,1 +239,1 @@\n-                               \"-XX:TrimNativeHeapInterval=3600\"\n+                               \"-XX:TrimNativeHeapInterval=\" + Integer.MAX_VALUE\n@@ -235,1 +241,1 @@\n-        checkExpectedLogMessages(output, true, 3600);\n+        checkExpectedLogMessages(output, true, Integer.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}