{"files":[{"patch":"@@ -1233,5 +1233,1 @@\n-  INSN(vfcvt_xu_f_v, 0b1010111, 0b001, 0b00000, 0b010010);\n-  INSN(vfcvt_x_f_v,  0b1010111, 0b001, 0b00001, 0b010010);\n-  INSN(vfcvt_f_xu_v, 0b1010111, 0b001, 0b00010, 0b010010);\n-  INSN(vfcvt_f_x_v,  0b1010111, 0b001, 0b00011, 0b010010);\n-  INSN(vfcvt_rtz_xu_f_v, 0b1010111, 0b001, 0b00110, 0b010010);\n+  INSN(vfcvt_f_x_v,      0b1010111, 0b001, 0b00011, 0b010010);\n@@ -1240,0 +1236,10 @@\n+  \/\/ Vector Widening Floating-Point\/Integer Type-Convert Instructions\n+  INSN(vfwcvt_f_x_v,      0b1010111, 0b001, 0b01011, 0b010010);\n+  INSN(vfwcvt_f_f_v,      0b1010111, 0b001, 0b01100, 0b010010);\n+  INSN(vfwcvt_rtz_x_f_v,  0b1010111, 0b001, 0b01111, 0b010010);\n+\n+  \/\/ Vector Narrowing Floating-Point\/Integer Type-Convert Instructions\n+  INSN(vfncvt_f_x_w,      0b1010111, 0b001, 0b10011, 0b010010);\n+  INSN(vfncvt_f_f_w,      0b1010111, 0b001, 0b10100, 0b010010);\n+  INSN(vfncvt_rtz_x_f_w,  0b1010111, 0b001, 0b10111, 0b010010);\n+\n@@ -1434,0 +1440,3 @@\n+  \/\/ Vector Register Gather Instructions\n+  INSN(vrgather_vv,     0b1010111, 0b000, 0b001100);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1620,1 +1620,1 @@\n-                                    bool is_double, bool is_min, int length_in_bytes) {\n+                                    bool is_double, bool is_min, int vector_length) {\n@@ -1623,1 +1623,1 @@\n-  rvv_vsetvli(is_double ? T_DOUBLE : T_FLOAT, length_in_bytes);\n+  vsetvli_helper(is_double ? T_DOUBLE : T_FLOAT, vector_length);\n@@ -1638,1 +1638,1 @@\n-                                           bool is_double, bool is_min, int length_in_bytes) {\n+                                           bool is_double, bool is_min, int vector_length) {\n@@ -1642,1 +1642,1 @@\n-  rvv_vsetvli(is_double ? T_DOUBLE : T_FLOAT, length_in_bytes);\n+  vsetvli_helper(is_double ? T_DOUBLE : T_FLOAT, vector_length);\n@@ -1673,3 +1673,3 @@\n-void C2_MacroAssembler::rvv_reduce_integral(Register dst, VectorRegister tmp,\n-                                            Register src1, VectorRegister src2,\n-                                            BasicType bt, int opc, int length_in_bytes) {\n+void C2_MacroAssembler::reduce_integral_v(Register dst, VectorRegister tmp,\n+                                          Register src1, VectorRegister src2,\n+                                          BasicType bt, int opc, int vector_length) {\n@@ -1678,1 +1678,1 @@\n-  rvv_vsetvli(bt, length_in_bytes);\n+  vsetvli_helper(bt, vector_length);\n@@ -1710,2 +1710,2 @@\n-\/\/ (vlmul = m1, vma = mu, vta = tu, vill = false)\n-void C2_MacroAssembler::rvv_vsetvli(BasicType bt, int length_in_bytes, Register tmp) {\n+\/\/ (vma = mu, vta = tu, vill = false)\n+void C2_MacroAssembler::vsetvli_helper(BasicType bt, int vector_length, LMUL vlmul, Register tmp) {\n@@ -1713,2 +1713,4 @@\n-  if (length_in_bytes == MaxVectorSize) {\n-    vsetvli(tmp, x0, sew);\n+  if (vector_length <= 31) {\n+    vsetivli(tmp, vector_length, sew, vlmul);\n+  } else if (vector_length == (MaxVectorSize \/ type2aelembytes(bt))) {\n+    vsetvli(tmp, x0, sew, vlmul);\n@@ -1716,7 +1718,2 @@\n-    int num_elements = length_in_bytes \/ type2aelembytes(bt);\n-    if (num_elements <= 31) {\n-      vsetivli(tmp, num_elements, sew);\n-    } else {\n-      mv(tmp, num_elements);\n-      vsetvli(tmp, tmp, sew);\n-    }\n+    mv(tmp, vector_length);\n+    vsetvli(tmp, tmp, sew, vlmul);\n@@ -1726,1 +1723,1 @@\n-void C2_MacroAssembler::compare_integral_v(VectorRegister vd, BasicType bt, int length_in_bytes,\n+void C2_MacroAssembler::compare_integral_v(VectorRegister vd, BasicType bt, int vector_length,\n@@ -1730,1 +1727,1 @@\n-  rvv_vsetvli(bt, length_in_bytes);\n+  vsetvli_helper(bt, vector_length);\n@@ -1745,1 +1742,1 @@\n-void C2_MacroAssembler::compare_floating_point_v(VectorRegister vd, BasicType bt, int length_in_bytes,\n+void C2_MacroAssembler::compare_floating_point_v(VectorRegister vd, BasicType bt, int vector_length,\n@@ -1752,2 +1749,2 @@\n-  rvv_vsetvli(bt, length_in_bytes);\n-  \/\/ Check vector elements of src1 and src2 for quiet or signaling NaN.\n+  vsetvli_helper(bt, vector_length);\n+  \/\/ Check vector elements of src1 and src2 for quiet and signaling NaN.\n@@ -1785,1 +1782,88 @@\n-}\n\\ No newline at end of file\n+}\n+\n+void C2_MacroAssembler::integer_extend_v(VectorRegister dst, BasicType dst_bt, int vector_length,\n+                                         VectorRegister src, BasicType src_bt) {\n+  assert(type2aelembytes(dst_bt) > type2aelembytes(src_bt) && type2aelembytes(dst_bt) <= 8 && type2aelembytes(src_bt) <= 4, \"invalid element size\");\n+  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"unsupported element type\");\n+  \/\/ https:\/\/github.com\/riscv\/riscv-v-spec\/blob\/master\/v-spec.adoc#52-vector-operands\n+  \/\/ The destination EEW is greater than the source EEW, the source EMUL is at least 1,\n+  \/\/ and the overlap is in the highest-numbered part of the destination register group.\n+  \/\/ Since LMUL=1, vd and vs cannot be the same.\n+  assert_different_registers(dst, src);\n+\n+  vsetvli_helper(dst_bt, vector_length);\n+  if (src_bt == T_BYTE) {\n+    switch (dst_bt) {\n+    case T_SHORT:\n+      vsext_vf2(dst, src);\n+      break;\n+    case T_INT:\n+      vsext_vf4(dst, src);\n+      break;\n+    case T_LONG:\n+      vsext_vf8(dst, src);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+    }\n+  } else if (src_bt == T_SHORT) {\n+    if (dst_bt == T_INT) {\n+      vsext_vf2(dst, src);\n+    } else {\n+      vsext_vf4(dst, src);\n+    }\n+  } else if (src_bt == T_INT) {\n+    vsext_vf2(dst, src);\n+  }\n+}\n+\n+\/\/ Vector narrow from src to dst with specified element sizes.\n+\/\/ High part of dst vector will be filled with zero.\n+void C2_MacroAssembler::integer_narrow_v(VectorRegister dst, BasicType dst_bt, int vector_length,\n+                                         VectorRegister src, BasicType src_bt) {\n+  assert(type2aelembytes(dst_bt) < type2aelembytes(src_bt) && type2aelembytes(dst_bt) <= 4 && type2aelembytes(src_bt) <= 8, \"invalid element size\");\n+  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"unsupported element type\");\n+  mv(t0, vector_length);\n+  if (src_bt == T_LONG) {\n+    \/\/ https:\/\/github.com\/riscv\/riscv-v-spec\/blob\/master\/v-spec.adoc#117-vector-narrowing-integer-right-shift-instructions\n+    \/\/ Future extensions might add support for versions that narrow to a destination that is 1\/4 the width of the source.\n+    \/\/ So we can currently only scale down by 1\/2 the width at a time.\n+    vsetvli(t0, t0, Assembler::e32, Assembler::mf2);\n+    vncvt_x_x_w(dst, src);\n+    if (dst_bt == T_SHORT || dst_bt == T_BYTE) {\n+      vsetvli(t0, t0, Assembler::e16, Assembler::mf2);\n+      vncvt_x_x_w(dst, dst);\n+      if (dst_bt == T_BYTE) {\n+        vsetvli(t0, t0, Assembler::e8, Assembler::mf2);\n+        vncvt_x_x_w(dst, dst);\n+      }\n+    }\n+  } else if (src_bt == T_INT) {\n+      \/\/ T_SHORT\n+      vsetvli(t0, t0, Assembler::e16, Assembler::mf2);\n+      vncvt_x_x_w(dst, src);\n+      if (dst_bt == T_BYTE) {\n+        vsetvli(t0, t0, Assembler::e8, Assembler::mf2);\n+        vncvt_x_x_w(dst, dst);\n+      }\n+  } else if (src_bt == T_SHORT) {\n+    vsetvli(t0, t0, Assembler::e8, Assembler::mf2);\n+    vncvt_x_x_w(dst, src);\n+  }\n+}\n+\n+#define VFCVT_SAFE(VFLOATCVT)                                                      \\\n+void C2_MacroAssembler::VFLOATCVT##_safe(VectorRegister dst, VectorRegister src) { \\\n+  assert_different_registers(dst, src);                                            \\\n+  vfclass_v(v0, src);                                                              \\\n+  vxor_vv(dst, dst, dst);                                                          \\\n+  vsrl_vi(v0, v0, 8);                                                              \\\n+  vmseq_vx(v0, v0, zr);                                                            \\\n+  VFLOATCVT(dst, src, Assembler::v0_t);                                            \\\n+}\n+\n+VFCVT_SAFE(vfcvt_rtz_x_f_v);\n+VFCVT_SAFE(vfwcvt_rtz_x_f_v);\n+VFCVT_SAFE(vfncvt_rtz_x_f_w);\n+\n+#undef VFCVT_SAFE\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":109,"deletions":25,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-                  bool is_double, bool is_min, int length_in_bytes);\n+                  bool is_double, bool is_min, int vector_length);\n@@ -195,1 +195,1 @@\n-                         bool is_double, bool is_min, int length_in_bytes);\n+                         bool is_double, bool is_min, int vector_length);\n@@ -197,3 +197,3 @@\n- void rvv_reduce_integral(Register dst, VectorRegister tmp,\n-                          Register src1, VectorRegister src2,\n-                          BasicType bt, int opc, int length_in_bytes);\n+ void reduce_integral_v(Register dst, VectorRegister tmp,\n+                        Register src1, VectorRegister src2,\n+                        BasicType bt, int opc, int vector_length);\n@@ -201,1 +201,1 @@\n- void rvv_vsetvli(BasicType bt, int length_in_bytes, Register tmp = t0);\n+ void vsetvli_helper(BasicType bt, int vector_length, LMUL vlmul = Assembler::m1, Register tmp = t0);\n@@ -203,1 +203,1 @@\n- void compare_integral_v(VectorRegister dst, BasicType bt, int length_in_bytes,\n+ void compare_integral_v(VectorRegister dst, BasicType bt, int vector_length,\n@@ -206,1 +206,1 @@\n- void compare_floating_point_v(VectorRegister dst, BasicType bt, int length_in_bytes,\n+ void compare_floating_point_v(VectorRegister dst, BasicType bt, int vector_length,\n@@ -214,1 +214,1 @@\n-   rvv_vsetvli(T_BYTE, MaxVectorSize >> 3);\n+   vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n@@ -220,1 +220,1 @@\n-   rvv_vsetvli(T_BYTE, MaxVectorSize >> 3);\n+   vsetvli_helper(T_BYTE, MaxVectorSize >> 3);\n@@ -233,0 +233,10 @@\n+  void integer_extend_v(VectorRegister dst, BasicType dst_bt, int vector_length,\n+                        VectorRegister src, BasicType src_bt);\n+\n+  void integer_narrow_v(VectorRegister dst, BasicType dst_bt, int vector_length,\n+                        VectorRegister src, BasicType src_bt);\n+\n+  void vfcvt_rtz_x_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfwcvt_rtz_x_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfncvt_rtz_x_f_w_safe(VectorRegister dst, VectorRegister src);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1947,0 +1947,1 @@\n+    case Op_VectorReinterpret:\n@@ -2033,1 +2034,4 @@\n-  if (bt == T_BOOLEAN) {\n+  if (bt == T_BYTE) {\n+    \/\/ To support vector api shuffle\/rearrange.\n+    size = 4;\n+  } else if (bt == T_BOOLEAN) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                        int length_in_bytes, Assembler::VectorMask vm = Assembler::unmasked) {\n+                        int vector_length, Assembler::VectorMask vm = Assembler::unmasked) {\n@@ -41,1 +41,1 @@\n-    masm.rvv_vsetvli(bt, length_in_bytes);\n+    masm.vsetvli_helper(bt, vector_length);\n@@ -73,7 +73,0 @@\n-      case Op_VectorCast:\n-      case Op_VectorCastB2X:\n-      case Op_VectorCastD2X:\n-      case Op_VectorCastF2X:\n-      case Op_VectorCastI2X:\n-      case Op_VectorCastL2X:\n-      case Op_VectorCastS2X:\n@@ -81,3 +74,0 @@\n-      case Op_VectorLoadShuffle:\n-      case Op_VectorRearrange:\n-      case Op_VectorReinterpret:\n@@ -109,1 +99,1 @@\n-              Matcher::vector_element_basic_type(this), as_Register($mem$$base), Matcher::vector_length_in_bytes(this));\n+              Matcher::vector_element_basic_type(this), as_Register($mem$$base), Matcher::vector_length(this));\n@@ -121,1 +111,1 @@\n-              Matcher::vector_element_basic_type(this, $src), as_Register($mem$$base), Matcher::vector_length_in_bytes(this, $src));\n+              Matcher::vector_element_basic_type(this, $src), as_Register($mem$$base), Matcher::vector_length(this, $src));\n@@ -132,1 +122,1 @@\n-    __ rvv_vsetvli(T_BOOLEAN, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_BOOLEAN, Matcher::vector_length(this));\n@@ -142,1 +132,1 @@\n-    __ rvv_vsetvli(T_BOOLEAN, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_BOOLEAN, Matcher::vector_length(this));\n@@ -153,0 +143,1 @@\n+  format %{ \"vstoremask $dst, V0 # elem size is $size byte[s]\" %}\n@@ -154,2 +145,2 @@\n-    __ rvv_vsetvli(T_BOOLEAN, Matcher::vector_length(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), zr);\n+    __ vsetvli_helper(T_BOOLEAN, Matcher::vector_length(this));\n+    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n@@ -172,2 +163,2 @@\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ compare_integral_v(as_VectorRegister($dst$$reg), bt, length_in_bytes, as_VectorRegister($src1$$reg),\n+    uint vector_length = Matcher::vector_length(this);\n+    __ compare_integral_v(as_VectorRegister($dst$$reg), bt, vector_length, as_VectorRegister($src1$$reg),\n@@ -189,2 +180,2 @@\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ compare_integral_v(as_VectorRegister($dst$$reg), bt, length_in_bytes, as_VectorRegister($src1$$reg),\n+    uint vector_length = Matcher::vector_length(this);\n+    __ compare_integral_v(as_VectorRegister($dst$$reg), bt, vector_length, as_VectorRegister($src1$$reg),\n@@ -206,2 +197,2 @@\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ compare_floating_point_v(as_VectorRegister($dst$$reg), bt, length_in_bytes,\n+    uint vector_length = Matcher::vector_length(this);\n+    __ compare_floating_point_v(as_VectorRegister($dst$$reg), bt, vector_length,\n@@ -223,2 +214,2 @@\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ compare_floating_point_v(as_VectorRegister($dst$$reg), bt, length_in_bytes,\n+    uint vector_length = Matcher::vector_length(this);\n+    __ compare_floating_point_v(as_VectorRegister($dst$$reg), bt, vector_length,\n@@ -241,1 +232,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -255,1 +246,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -269,1 +260,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -283,1 +274,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -295,1 +286,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -306,1 +297,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -319,1 +310,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -332,1 +323,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -345,1 +336,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -358,1 +349,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -371,1 +362,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -384,1 +375,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -403,1 +394,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -418,1 +409,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -434,1 +425,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -450,1 +441,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -466,1 +457,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -481,1 +472,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -494,1 +485,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -511,1 +502,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -529,1 +520,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -544,1 +535,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -562,1 +553,1 @@\n-                   false \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this));\n+                   false \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length(this));\n@@ -576,1 +567,1 @@\n-                   true \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this));\n+                   true \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length(this));\n@@ -590,1 +581,1 @@\n-                   false \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this));\n+                   false \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length(this));\n@@ -604,1 +595,1 @@\n-                   true \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this));\n+                   true \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length(this));\n@@ -618,1 +609,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -632,1 +623,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -650,1 +641,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -666,1 +657,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -684,1 +675,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -700,1 +691,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -716,1 +707,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -730,1 +721,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -745,1 +736,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -758,1 +749,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -771,1 +762,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -784,1 +775,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -799,1 +790,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -812,1 +803,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -825,1 +816,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -838,1 +829,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -852,1 +843,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -864,1 +855,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -876,1 +867,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -888,1 +879,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -900,1 +891,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -912,1 +903,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -930,1 +921,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -944,1 +935,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -959,1 +950,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -970,1 +961,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -983,1 +974,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -994,1 +985,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -1014,3 +1005,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1031,3 +1022,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1052,3 +1043,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1069,3 +1060,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1090,3 +1081,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1107,3 +1098,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1128,3 +1119,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1145,3 +1136,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1160,1 +1151,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this, $src2));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this, $src2));\n@@ -1177,1 +1168,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this, $src2));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this, $src2));\n@@ -1198,3 +1189,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1213,3 +1204,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1232,3 +1223,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1247,3 +1238,3 @@\n-    __ rvv_reduce_integral($dst$$Register, as_VectorRegister($tmp$$reg),\n-                           $src1$$Register, as_VectorRegister($src2$$reg), bt,\n-                           this->ideal_Opcode(), Matcher::vector_length_in_bytes(this, $src2));\n+    __ reduce_integral_v($dst$$Register, as_VectorRegister($tmp$$reg),\n+                         $src1$$Register, as_VectorRegister($src2$$reg), bt,\n+                         this->ideal_Opcode(), Matcher::vector_length(this, $src2));\n@@ -1266,1 +1257,1 @@\n-                          false \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n+                          false \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length(this, $src2));\n@@ -1281,1 +1272,1 @@\n-                          true \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n+                          true \/* is_double *\/, false \/* is_min *\/, Matcher::vector_length(this, $src2));\n@@ -1298,1 +1289,1 @@\n-                          false \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n+                          false \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length(this, $src2));\n@@ -1313,29 +1304,1 @@\n-                          true \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length_in_bytes(this, $src2));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ vector Math.rint, floor, ceil\n-\n-instruct vroundD(vReg dst, vReg src, immI rmode) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n-  match(Set dst (RoundDoubleModeV src rmode));\n-  format %{ \"vroundD $dst, $src, $rmode\" %}\n-  ins_encode %{\n-    switch ($rmode$$constant) {\n-      case RoundDoubleModeNode::rmode_rint:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_floor:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rdn);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_ceil:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rup);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-        break;\n-    }\n+                          true \/* is_double *\/, true \/* is_min *\/, Matcher::vector_length(this, $src2));\n@@ -1353,1 +1316,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1364,1 +1327,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1375,1 +1338,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1386,1 +1349,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1397,1 +1360,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1408,1 +1371,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1419,1 +1382,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1430,1 +1393,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1441,1 +1404,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -1452,1 +1415,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -1466,1 +1429,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1485,1 +1448,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1503,1 +1466,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1515,1 +1478,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1528,1 +1491,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1546,1 +1509,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1564,1 +1527,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1577,1 +1540,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1590,1 +1553,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1609,1 +1572,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1627,1 +1590,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1639,1 +1602,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1652,1 +1615,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1673,1 +1636,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1694,1 +1657,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1707,1 +1670,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1720,1 +1683,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1739,1 +1702,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1757,1 +1720,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1769,1 +1732,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1782,1 +1745,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1803,1 +1766,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1824,1 +1787,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1837,1 +1800,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1850,1 +1813,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1868,1 +1831,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1886,1 +1849,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1904,1 +1867,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -1921,1 +1884,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -1943,1 +1906,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -1965,1 +1928,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -1983,1 +1946,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -2000,1 +1963,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -2017,1 +1980,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -2034,1 +1997,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -2047,1 +2010,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -2053,36 +2016,1 @@\n-instruct vshiftcntB(vReg dst, iRegIorL2I cnt) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n-  format %{ \"vmv.v.x $dst, $cnt\\t#@vshiftcntB\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), as_Register($cnt$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vshiftcntS(vReg dst, iRegIorL2I cnt) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_SHORT ||\n-            Matcher::vector_element_basic_type(n) == T_CHAR);\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n-  format %{ \"vmv.v.x $dst, $cnt\\t#@vshiftcntS\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), as_Register($cnt$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vshiftcntI(vReg dst, iRegIorL2I cnt) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_INT);\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n-  format %{ \"vmv.v.x $dst, $cnt\\t#@vshiftcntI\" %}\n-  ins_encode %{\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n-    __ vmv_v_x(as_VectorRegister($dst$$reg), as_Register($cnt$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n+\/\/ vector shift count\n@@ -2090,2 +2018,1 @@\n-instruct vshiftcntL(vReg dst, iRegIorL2I cnt) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+instruct vshiftcnt(vReg dst, iRegIorL2I cnt) %{\n@@ -2094,1 +2021,1 @@\n-  format %{ \"vmv.v.x $dst, $cnt\\t#@vshiftcntL\" %}\n+  format %{ \"vshiftcnt $dst, $cnt\" %}\n@@ -2096,1 +2023,2 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2109,1 +2037,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -2120,1 +2048,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -2133,1 +2061,1 @@\n-    __ rvv_vsetvli(T_BYTE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_BYTE, Matcher::vector_length(this));\n@@ -2145,1 +2073,1 @@\n-    __ rvv_vsetvli(T_SHORT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this));\n@@ -2157,1 +2085,1 @@\n-    __ rvv_vsetvli(T_INT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this));\n@@ -2169,1 +2097,1 @@\n-    __ rvv_vsetvli(T_LONG, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n@@ -2181,1 +2109,1 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n@@ -2193,1 +2121,1 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -2211,1 +2139,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2225,1 +2153,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2499,1 +2427,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2502,0 +2430,1 @@\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2537,1 +2466,1 @@\n-    __ rvv_vsetvli(bt, (uint)($con$$constant));\n+    __ vsetvli_helper(bt, (uint)($con$$constant));\n@@ -2548,1 +2477,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2565,1 +2494,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2577,1 +2506,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2594,1 +2523,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2610,1 +2539,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2623,1 +2552,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2636,1 +2565,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2661,1 +2590,1 @@\n-              Matcher::vector_length_in_bytes(this), Assembler::v0_t);\n+              Matcher::vector_length(this), Assembler::v0_t);\n@@ -2673,1 +2602,1 @@\n-              Matcher::vector_length_in_bytes(this, $src), Assembler::v0_t);\n+              Matcher::vector_length(this, $src), Assembler::v0_t);\n@@ -2685,1 +2614,1 @@\n-    __ rvv_vsetvli(bt, Matcher::vector_length_in_bytes(this));\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n@@ -2690,0 +2619,338 @@\n+%}\n+\n+\/\/ ------------------------------ Vector cast ----------------------------------\n+\n+\/\/ VectorCastB2X\n+\n+instruct vcvtBtoX(vReg dst, vReg src) %{\n+  match(Set dst (VectorCastB2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtBtoX $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    if (is_floating_point_type(bt)) {\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt == T_FLOAT ? T_INT : T_LONG,\n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE);\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+      __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    } else {\n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt, \n+                          Matcher::vector_length(this), as_VectorRegister($src$$reg), T_BYTE);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastS2X\n+\n+instruct vcvtStoB(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (VectorCastS2X src));\n+  format %{ \"vcvtStoB $dst, $src\" %}\n+  ins_encode %{\n+    __ integer_narrow_v(as_VectorRegister($dst$$reg), T_BYTE, Matcher::vector_length(this),\n+                        as_VectorRegister($src$$reg), T_SHORT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtStoX_extend(vReg dst, vReg src) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT ||\n+             Matcher::vector_element_basic_type(n) == T_LONG));\n+  match(Set dst (VectorCastS2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtStoX_extend $dst, $src\" %}\n+  ins_encode %{\n+    __ integer_extend_v(as_VectorRegister($dst$$reg), Matcher::vector_element_basic_type(this),\n+                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtStoX_fp_extend(vReg dst, vReg src) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_FLOAT ||\n+             Matcher::vector_element_basic_type(n) == T_DOUBLE));\n+  match(Set dst (VectorCastS2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtStoX_fp_extend $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    if (Matcher::vector_element_basic_type(this) == T_DOUBLE) {\n+      __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+      __ vfwcvt_f_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastI2X\n+\n+instruct vcvtItoX_narrow(vReg dst, vReg src) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_BYTE ||\n+             Matcher::vector_element_basic_type(n) == T_SHORT));\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"vcvtItoX_narrow $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ integer_narrow_v(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n+                        as_VectorRegister($src$$reg), T_INT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtItoL(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (VectorCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtItoL $dst, $src\" %}\n+  ins_encode %{\n+    __ integer_extend_v(as_VectorRegister($dst$$reg), T_LONG,\n+                        Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtItoF(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"vcvtItoF $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtItoD(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (VectorCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtItoD $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastL2X\n+\n+instruct vcvtLtoI(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT ||\n+            Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"vcvtLtoI $dst, $src\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ integer_narrow_v(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n+                        as_VectorRegister($src$$reg), T_LONG);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtLtoF(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"vcvtLtoF $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfncvt_f_x_w(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtLtoD(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"vcvtLtoD $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastF2X\n+\n+instruct vcvtFtoX_narrow(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtFtoX_narrow $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_SHORT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfncvt_rtz_x_f_w_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    if (Matcher::vector_element_basic_type(this) == T_BYTE) {\n+      __ vsetvli_helper(T_BYTE, Matcher::vector_length(this), Assembler::mf2);\n+      __ vncvt_x_x_w(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoI(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtFtoI $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n+    __ vfcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoL(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtFtoL $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfwcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoD(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtFtoD $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ VectorCastD2X\n+\n+instruct vcvtDtoX_narrow(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE ||\n+            Matcher::vector_element_basic_type(n) == T_SHORT ||\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (VectorCastD2X src));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtDtoX_narrow $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_INT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfncvt_rtz_x_f_w_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    if (bt == T_BYTE || bt == T_SHORT) {\n+      __ integer_narrow_v(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n+                          as_VectorRegister($dst$$reg), T_INT);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtDtoL(vReg dst, vReg src, vRegMask_V0 v0) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (VectorCastD2X src));\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtDtoL $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_LONG, Matcher::vector_length(this));\n+    __ vfcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtDtoF(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"vcvtDtoF $dst, $src\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfncvt_f_f_w(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector reinterpret\n+\n+instruct reinterpret(vReg dst_src) %{\n+  predicate(Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)));\n+  match(Set dst_src (VectorReinterpret dst_src));\n+  ins_cost(0);\n+  format %{ \"# reinterpret $dst_src\\t# do nothing\" %}\n+  ins_encode %{\n+    \/\/ empty\n+  %}\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct reinterpretResize(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_length_in_bytes(n) != Matcher::vector_length_in_bytes(n->in(1)));\n+  match(Set dst (VectorReinterpret src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"reinterpretResize $dst, $src\" %}\n+  ins_encode %{\n+    uint length_in_bytes_src = Matcher::vector_length_in_bytes(this, $src);\n+    uint length_in_bytes_dst = Matcher::vector_length_in_bytes(this);\n+    uint length_in_bytes_resize = length_in_bytes_src < length_in_bytes_dst ?\n+                                  length_in_bytes_src : length_in_bytes_dst;\n+    assert(length_in_bytes_src <= MaxVectorSize && length_in_bytes_dst <= MaxVectorSize,\n+           \"invalid vector length\");\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    __ vsetvli_helper(T_BYTE, length_in_bytes_resize);\n+    __ vmv_v_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector mask reinterpret\n+\n+instruct vmask_reinterpret_same_esize(vRegMask dst_src) %{\n+  predicate(Matcher::vector_length(n) == Matcher::vector_length(n->in(1)) &&\n+            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)));\n+  match(Set dst_src (VectorReinterpret dst_src));\n+  ins_cost(0);\n+  format %{ \"vmask_reinterpret_same_esize $dst_src\\t# do nothing\" %}\n+  ins_encode(\/* empty encoding *\/);\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct vmask_reinterpret_diff_esize(vRegMask dst, vRegMask_V0 src, vReg tmp) %{\n+  predicate(Matcher::vector_length(n) != Matcher::vector_length(n->in(1)) &&\n+            Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1)));\n+  match(Set dst (VectorReinterpret src));\n+  effect(TEMP tmp);\n+  format %{ \"vmask_reinterpret_diff_esize $dst, $src\\t# KILL $tmp\" %}\n+  ins_encode %{\n+    BasicType from_bt = Matcher::vector_element_basic_type(this, $src);\n+    __ vsetvli_helper(from_bt, Matcher::vector_length(this, $src));\n+    __ vxor_vv(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg));\n+    __ vmerge_vim(as_VectorRegister($tmp$$reg), as_VectorRegister($tmp$$reg), -1);\n+    BasicType to_bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(to_bt, Matcher::vector_length(this));\n+    __ vmseq_vi(as_VectorRegister($dst$$reg), as_VectorRegister($tmp$$reg), -1);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ Vector rearrange -----------------------------\n+\n+instruct rearrange(vReg dst, vReg src, vReg shuffle) %{\n+  match(Set dst (VectorRearrange src shuffle));\n+  effect(TEMP_DEF dst);\n+  format %{ \"rearrange $dst, $src, $shuffle\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vrgather_vv(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg), as_VectorRegister($shuffle$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":525,"deletions":258,"binary":false,"changes":783,"status":"modified"}]}