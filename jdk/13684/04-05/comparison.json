{"files":[{"patch":"@@ -1787,1 +1787,1 @@\n-  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"should be integer element\");\n+  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"unsupported element type\");\n@@ -1825,1 +1825,1 @@\n-  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"should be integer element\");\n+  assert(dst_bt != T_FLOAT && dst_bt != T_DOUBLE && src_bt != T_FLOAT && src_bt != T_DOUBLE, \"unsupported element type\");\n@@ -1855,1 +1855,20 @@\n-}\n\\ No newline at end of file\n+}\n+\n+#define VFCVT_SAFE(VFLOATCVT)                                                      \\\n+void C2_MacroAssembler::VFLOATCVT##_safe(VectorRegister dst, VectorRegister src) { \\\n+  assert_different_registers(dst, src);                                            \\\n+  vfclass_v(v0, src);                                                              \\\n+  vxor_vv(dst, dst, dst);                                                          \\\n+  vsrl_vi(v0, v0, 8);                                                              \\\n+  vmseq_vx(v0, v0, zr);                                                            \\\n+  VFLOATCVT(dst, src, Assembler::v0_t);                                            \\\n+}\n+\n+VFCVT_SAFE(vfcvt_rtz_xu_f_v);\n+VFCVT_SAFE(vfcvt_rtz_x_f_v);\n+VFCVT_SAFE(vfwcvt_rtz_xu_f_v);\n+VFCVT_SAFE(vfwcvt_rtz_x_f_v);\n+VFCVT_SAFE(vfncvt_rtz_xu_f_w);\n+VFCVT_SAFE(vfncvt_rtz_x_f_w);\n+\n+#undef VFCVT_SAFE\n\\ No newline at end of file\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -239,0 +239,7 @@\n+  void vfcvt_rtz_xu_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfcvt_rtz_x_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfwcvt_rtz_xu_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfwcvt_rtz_x_f_v_safe(VectorRegister dst, VectorRegister src);\n+  void vfncvt_rtz_xu_f_w_safe(VectorRegister dst, VectorRegister src);\n+  void vfncvt_rtz_x_f_w_safe(VectorRegister dst, VectorRegister src);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1308,28 +1308,0 @@\n-\/\/ vector Math.rint, floor, ceil\n-\n-instruct vroundD(vReg dst, vReg src, immI rmode) %{\n-  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n-  match(Set dst (RoundDoubleModeV src rmode));\n-  format %{ \"vroundD $dst, $src, $rmode\" %}\n-  ins_encode %{\n-    switch ($rmode$$constant) {\n-      case RoundDoubleModeNode::rmode_rint:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_floor:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rdn);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_ceil:\n-        __ csrwi(CSR_FRM, C2_MacroAssembler::rup);\n-        __ vfcvt_rtz_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-        break;\n-      default:\n-        ShouldNotReachHere();\n-        break;\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -2457,0 +2429,1 @@\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2660,0 +2633,1 @@\n+      __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2674,1 +2648,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n+  effect(TEMP tmp);\n@@ -2684,1 +2658,2 @@\n-  predicate(type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4);\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT ||\n+             Matcher::vector_element_basic_type(n) == T_LONG));\n@@ -2689,8 +2664,19 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    if (is_floating_point_type(bt)) {\n-      __ vector_integer_extend(as_VectorRegister($dst$$reg), bt == T_FLOAT ? T_INT : T_LONG,\n-                               Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n-      __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n-    } else {\n-      __ vector_integer_extend(as_VectorRegister($dst$$reg), bt,\n-                               Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n+    __ vector_integer_extend(as_VectorRegister($dst$$reg), Matcher::vector_element_basic_type(this),\n+                             Matcher::vector_length(this), as_VectorRegister($src$$reg), T_SHORT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtStoX_fp_extend(vReg dst, vReg src) %{\n+  predicate((Matcher::vector_element_basic_type(n) == T_FLOAT ||\n+             Matcher::vector_element_basic_type(n) == T_DOUBLE));\n+  match(Set dst (VectorCastS2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtStoX_fp_extend $dst, $src\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    if (Matcher::vector_element_basic_type(this) == T_DOUBLE) {\n+      __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+      __ vfwcvt_f_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n@@ -2708,1 +2694,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n+  effect(TEMP tmp);\n@@ -2718,2 +2704,2 @@\n-instruct vcvtItoX(vReg dst, vReg src) %{\n-  predicate(type2aelembytes(Matcher::vector_element_basic_type(n)) >= 4);\n+instruct vcvtItoL(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n@@ -2722,1 +2708,1 @@\n-  format %{ \"vcvtItoX $dst, $src\" %}\n+  format %{ \"vcvtItoL $dst, $src\" %}\n@@ -2724,11 +2710,27 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    if (bt == T_FLOAT) {\n-      __ rvv_vsetvli(bt, Matcher::vector_length(this));\n-      __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-    } else {\n-      __ vector_integer_extend(as_VectorRegister($dst$$reg), T_LONG,\n-                               Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT);\n-      if (bt == T_DOUBLE) {\n-        __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n-      }\n-    }\n+    __ vector_integer_extend(as_VectorRegister($dst$$reg), T_LONG,\n+                             Matcher::vector_length(this), as_VectorRegister($src$$reg), T_INT);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtItoF(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"vcvtItoF $dst, $src\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this));\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtItoD(vReg dst, vReg src) %{\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (VectorCastI2X src));\n+  effect(TEMP_DEF dst);\n+  format %{ \"vcvtItoD $dst, $src\" %}\n+  ins_encode %{\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfwcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2746,1 +2748,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n+  effect(TEMP tmp);\n@@ -2756,1 +2758,1 @@\n-instruct vcvtLtoF(vReg dst, vReg src, vReg tmp) %{\n+instruct vcvtLtoF(vReg dst, vReg src) %{\n@@ -2759,2 +2761,1 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"vcvtLtoF $dst, $src\\t# KILL $tmp\" %}\n+  format %{ \"vcvtLtoF $dst, $src\" %}\n@@ -2762,3 +2763,3 @@\n-    __ vector_integer_narrow(as_VectorRegister($dst$$reg), T_INT, Matcher::vector_length(this),\n-                             as_VectorRegister($src$$reg), T_LONG, as_VectorRegister($tmp$$reg));\n-    __ vfcvt_f_x_v(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n+    __ vfncvt_f_x_w(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2775,0 +2776,1 @@\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2782,1 +2784,1 @@\n-instruct vcvtFtoX_narrow(vReg dst, vReg src, vReg tmp) %{\n+instruct vcvtFtoX_narrow(vReg dst, vReg src, vRegMask_V0 v0) %{\n@@ -2786,2 +2788,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"vcvtFtoX_narrow $dst, $src\\t# KILL $tmp\" %}\n+  effect(TEMP_DEF dst, TEMP v0);\n+  format %{ \"vcvtFtoX_narrow $dst, $src\" %}\n@@ -2789,5 +2791,6 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this, $src));\n-    __ vfcvt_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vector_integer_narrow(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n-                             as_VectorRegister($dst$$reg), T_INT, as_VectorRegister($tmp$$reg));\n+    __ rvv_vsetvli(T_SHORT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfncvt_rtz_x_f_w_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    if (Matcher::vector_element_basic_type(this) == T_BYTE) {\n+      __ rvv_vsetvli(T_BYTE, Matcher::vector_length(this), Assembler::mf2);\n+      __ vncvt_x_x_w(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n+    }\n@@ -2798,1 +2801,1 @@\n-instruct vcvtFtoI(vReg dst, vReg src) %{\n+instruct vcvtFtoI(vReg dst, vReg src, vRegMask_V0 v0) %{\n@@ -2801,0 +2804,1 @@\n+  effect(TEMP_DEF dst, TEMP v0);\n@@ -2803,2 +2807,2 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this, $src));\n-    __ vfcvt_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this));\n+    __ vfcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2809,1 +2813,1 @@\n-instruct vcvtFtoL(vReg dst, vReg src) %{\n+instruct vcvtFtoL(vReg dst, vReg src, vRegMask_V0 v0) %{\n@@ -2812,1 +2816,1 @@\n-  effect(TEMP_DEF dst);\n+  effect(TEMP_DEF dst, TEMP v0);\n@@ -2815,2 +2819,2 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this, $src), Assembler::mf2);\n-    __ vfwcvt_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfwcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2827,1 +2831,2 @@\n-    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this, $src), Assembler::mf2);\n+    __ rvv_vsetvli(T_FLOAT, Matcher::vector_length(this), Assembler::mf2);\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2835,1 +2840,1 @@\n-instruct vcvtDtoI(vReg dst, vReg src, vReg tmp) %{\n+instruct vcvtDtoX_narrow(vReg dst, vReg src, vReg tmp, vRegMask_V0 v0) %{\n@@ -2840,2 +2845,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"vcvtDtoI $dst, $src\\t# KILL $tmp\" %}\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP v0);\n+  format %{ \"vcvtDtoX_narrow $dst, $src\\t# KILL $tmp\" %}\n@@ -2843,2 +2848,2 @@\n-    __ rvv_vsetvli(T_DOUBLE, Matcher::vector_length(this, $src));\n-    __ vfcvt_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    __ rvv_vsetvli(T_INT, Matcher::vector_length(this), Assembler::mf2);\n+    __ vfncvt_rtz_x_f_w_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2846,2 +2851,4 @@\n-    __ vector_integer_narrow(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n-                             as_VectorRegister($dst$$reg), T_LONG, as_VectorRegister($tmp$$reg));\n+    if (bt == T_BYTE || bt == T_SHORT) {\n+      __ vector_integer_narrow(as_VectorRegister($dst$$reg), bt, Matcher::vector_length(this),\n+                               as_VectorRegister($dst$$reg), T_INT, as_VectorRegister($tmp$$reg));\n+    }\n@@ -2852,1 +2859,1 @@\n-instruct vcvtDtoL(vReg dst, vReg src) %{\n+instruct vcvtDtoL(vReg dst, vReg src, vRegMask_V0 v0) %{\n@@ -2855,0 +2862,1 @@\n+  effect(TEMP_DEF dst, TEMP v0);\n@@ -2858,1 +2866,1 @@\n-    __ vfcvt_x_f_v(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n+    __ vfcvt_rtz_x_f_v_safe(as_VectorRegister($dst$$reg), as_VectorRegister($src$$reg));\n@@ -2869,0 +2877,1 @@\n+    __ csrwi(CSR_FRM, C2_MacroAssembler::rne);\n@@ -2902,2 +2911,3 @@\n-    __ vsetvli(t0, x0, Assembler::e8);\n-    __ vmclr_m(as_VectorRegister($dst$$reg));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ rvv_vsetvli(bt, Matcher::vector_length(this));\n+    __ vxor_vv(as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg), as_VectorRegister($dst$$reg));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":97,"deletions":87,"binary":false,"changes":184,"status":"modified"}]}