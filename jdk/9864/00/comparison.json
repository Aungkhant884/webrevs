{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.ArrayList;\n@@ -37,1 +38,0 @@\n-import java.util.concurrent.ConcurrentLinkedDeque;\n@@ -148,1 +148,1 @@\n-                safeDispose(rec);\n+                rec.dispose();\n@@ -153,1 +153,1 @@\n-                e.printStackTrace(System.err);\n+                System.out.println(\"Exception while removing reference.\");\n@@ -167,9 +167,1 @@\n-    private static ConcurrentLinkedDeque<DisposerRecord> deferredRecords = new ConcurrentLinkedDeque<>();\n-\n-    private static void safeDispose(DisposerRecord rec) {\n-        try {\n-            rec.dispose();\n-        } catch (final Exception e) {\n-            e.printStackTrace(System.err);\n-        }\n-    }\n+    private static ArrayList<DisposerRecord> deferredRecords = null;\n@@ -178,4 +170,9 @@\n-        while (!deferredRecords.isEmpty()) {\n-            final DisposerRecord rec = deferredRecords.pollFirst();\n-            if (rec != null) {\n-                safeDispose(rec);\n+        if (deferredRecords == null || deferredRecords.isEmpty()) {\n+            return;\n+        }\n+        for (int i=0;i<deferredRecords.size(); i++) {\n+            try {\n+                DisposerRecord rec = deferredRecords.get(i);\n+                rec.dispose();\n+            } catch (Exception e) {\n+                System.out.println(\"Exception while disposing deferred rec.\");\n@@ -184,0 +181,1 @@\n+        deferredRecords.clear();\n@@ -216,1 +214,1 @@\n-                    safeDispose(rec);\n+                    rec.dispose();\n@@ -224,1 +222,4 @@\n-                    deferredRecords.offerLast(rec);\n+                    if (deferredRecords == null) {\n+                      deferredRecords = new ArrayList<DisposerRecord>(5);\n+                    }\n+                    deferredRecords.add(rec);\n@@ -228,1 +229,1 @@\n-            e.printStackTrace(System.err);\n+            System.out.println(\"Exception while removing reference.\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/Disposer.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n- * @bug 8065373 8289208\n- * @key headful\n+ * @bug 8065373\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawString\/DrawRotatedStringUsingRotatedFont.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import java.util.LinkedList;\n-import java.util.List;\n-import javax.swing.SwingUtilities;\n-\n-import sun.java2d.Disposer;\n-import sun.java2d.DisposerRecord;\n-\n-\/**\n- * @test\n- * @bug 8289208\n- * @summary Verifies Disposer robustness in a multi-threaded environment.\n- * @run main\/othervm -mx128m TestDisposerRace\n- * @modules java.desktop\/sun.java2d\n- *\/\n-public final class TestDisposerRace {\n-    private static volatile int recordsCount = 0;\n-    private static volatile boolean disposerDone = false;\n-\n-    public static void main(String[] args) throws Exception {\n-        TestDisposerRace test = new TestDisposerRace();\n-        test.run();\n-\n-        checkRecordsCountIsSane();\n-        if (recordsCount > 0) {\n-            throw new RuntimeException(\"Some records (\" + recordsCount + \") have not been disposed\");\n-        }\n-    }\n-\n-    TestDisposerRace() {\n-        addRecordsToDisposer(30_000);\n-    }\n-\n-    void run() throws Exception {\n-        generateOOME();\n-        for (int i = 0; i < 1000; ++i) {\n-            SwingUtilities.invokeAndWait(Disposer::pollRemove);\n-            if (i % 10 == 0) {\n-                \/\/ Adding records will race with the diposer trying to remove them\n-                addRecordsToDisposer(1000);\n-            }\n-        }\n-\n-        Disposer.addObjectRecord(new Object(), new FinalDisposerRecord());\n-\n-        while (!disposerDone) {\n-             generateOOME();\n-        }\n-    }\n-\n-    private static void checkRecordsCountIsSane() {\n-        if (recordsCount < 0) {\n-            throw new RuntimeException(\"Disposed more records than were added\");\n-        }\n-    }\n-    private void addRecordsToDisposer(int count) {\n-        checkRecordsCountIsSane();\n-\n-        recordsCount += count;\n-\n-        MyDisposerRecord disposerRecord = new MyDisposerRecord();\n-        for (int i = 0; i < count; i++) {\n-            Disposer.addObjectRecord(new Object(), disposerRecord);\n-        }\n-    }\n-\n-    class MyDisposerRecord implements DisposerRecord {\n-        public void dispose() {\n-            recordsCount--;\n-        }\n-    }\n-\n-    class FinalDisposerRecord implements DisposerRecord {\n-        public void dispose() {\n-            disposerDone = true;\n-        }\n-    }\n-\n-    private static void giveGCAChance() {\n-        try {\n-            Thread.sleep(2000);\n-        } catch (InterruptedException ignored) {}\n-    }\n-\n-    private static void generateOOME() throws Exception {\n-        final List<Object> leak = new LinkedList<>();\n-        try {\n-            while (true) {\n-                leak.add(new byte[1024 * 1024]);\n-            }\n-        } catch (OutOfMemoryError ignored) {}\n-        giveGCAChance();\n-    }\n-}\n","filename":"test\/jdk\/sun\/java2d\/Disposer\/TestDisposerRace.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"}]}