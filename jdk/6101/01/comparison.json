{"files":[{"patch":"@@ -1532,0 +1532,37 @@\n+  const int cmp1_op = cmp1->Opcode();\n+  const int cmp2_op = cmp2->Opcode();\n+\n+  \/\/ Change x +- Integer.MIN_VALUE <=> y +- Integer.MIN_VALUE into x u<=> y\n+  if ((_test._test == BoolTest::lt || _test._test == BoolTest::le ||\n+        _test._test == BoolTest::gt || _test._test == BoolTest::ge) &&\n+      cop == Op_CmpI &&\n+      (cmp1_op == Op_AddI || cmp1_op == Op_SubI) &&\n+      phase->type(cmp1->in(2)) == TypeInt::MIN) {\n+    if (cmp2_op == Op_ConI) {\n+      Node *ncmp2 = phase->intcon(java_add(cmp2->get_int(), min_jint));\n+      Node *ncmp = phase->transform(new CmpUNode(cmp1->in(1), ncmp2));\n+      return new BoolNode(ncmp, _test._test);\n+    } else if ((cmp2_op == Op_AddI || cmp2_op == Op_SubI) &&\n+        phase->type(cmp2->in(2)) == TypeInt::MIN) {\n+      Node *ncmp = phase->transform(new CmpUNode(cmp1->in(1), cmp2->in(1)));\n+      return new BoolNode(ncmp, _test._test);\n+    }\n+  }\n+\n+  \/\/ Change x +- Long.MIN_VALUE <=> y +- Long.MIN_VALUE into x u<=> y\n+  if ((_test._test == BoolTest::lt || _test._test == BoolTest::le ||\n+        _test._test == BoolTest::gt || _test._test == BoolTest::ge) &&\n+      cop == Op_CmpL &&\n+      (cmp1_op == Op_AddL || cmp1_op == Op_SubL) &&\n+      phase->type(cmp1->in(2)) == TypeLong::MIN) {\n+    if (cmp2_op == Op_ConL) {\n+      Node *ncmp2 = phase->longcon(java_add(cmp2->get_long(), min_jlong));\n+      Node *ncmp = phase->transform(new CmpULNode(cmp1->in(1), ncmp2));\n+      return new BoolNode(ncmp, _test._test);\n+    } else if ((cmp2_op == Op_AddL || cmp2_op == Op_SubL) &&\n+        phase->type(cmp2->in(2)) == TypeLong::MIN) {\n+      Node *ncmp = phase->transform(new CmpULNode(cmp1->in(1), cmp2->in(1)));\n+      return new BoolNode(ncmp, _test._test);\n+    }\n+  }\n+\n@@ -1535,1 +1572,0 @@\n-  int cmp1_op = cmp1->Opcode();\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class UnsignedComparison {\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long compareInt(int arg0, int arg1) {\n+        return arg0 + Integer.MIN_VALUE < arg1 + Integer.MIN_VALUE ? 1 : 0;\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public long compareLong(long arg0, long arg1) {\n+        return arg0 + Long.MIN_VALUE < arg1 + Long.MIN_VALUE ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public void runInt() {\n+        compareInt(0, -1);\n+        compareInt(-1, 0);\n+    }\n+\n+    @Benchmark\n+    public void runLong() {\n+        compareLong(0L, -1L);\n+        compareLong(-1L, 0L);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/UnsignedComparison.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}