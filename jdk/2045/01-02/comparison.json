{"files":[{"patch":"@@ -2516,1 +2516,6 @@\n-        *p_scale = ((jlong)1) << exp->in(2)->get_int();\n+        jint shift_amount = exp->in(2)->get_int();\n+        if (shift_amount == 31 && bt == T_INT) {\n+          *p_scale = min_jint;\n+        } else {\n+          *p_scale = ((jlong)1) << shift_amount;\n+        }\n@@ -2578,0 +2583,3 @@\n+        if (*p_scale == min_signed_integer(bt)) {\n+          return false;\n+        }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1280,1 +1280,1 @@\n-    if (is_scaled_iv_plus_offset(exp, iv, &long_scale, p_offset, T_INT) && long_scale != -((jlong)min_jint)) {\n+    if (is_scaled_iv_plus_offset(exp, iv, &long_scale, p_offset, T_INT)) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8259609\n+ * @summary range checks with min int scale value\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation TestRCMinInt\n+ *\n+ *\/\n+\n+import java.util.Objects;\n+\n+public class TestRCMinInt {\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(0, 10, 10);\n+            test2(0, 10, 10);\n+        }\n+    }\n+\n+    private static float test1(int start, int stop, int offset) {\n+        float v = 1;\n+        for (int i = start; i < stop; i+=2) {\n+            final int index = offset + Integer.MIN_VALUE * i;\n+            Objects.checkIndex(index, 100);\n+        }\n+        return v;\n+    }\n+\n+    private static float test2(int start, int stop, int offset) {\n+        float v = 1;\n+        for (int i = start; i < stop; i+=2) {\n+            final int index = offset - Integer.MIN_VALUE * i;\n+            Objects.checkIndex(index, 100);\n+        }\n+        return v;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRCMinInt.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}