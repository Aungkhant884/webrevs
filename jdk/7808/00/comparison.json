{"files":[{"patch":"@@ -88,1 +88,1 @@\n-bool PSPromotionLAB::unallocate_object(HeapWord* obj, size_t obj_size) {\n+void PSPromotionLAB::unallocate_object(HeapWord* obj, size_t obj_size) {\n@@ -91,0 +91,2 @@\n+  \/\/ If the object is inside this LAB, we just bump-down the `top` pointer.\n+  \/\/ Otherwise, we overwrite it with a filler object.\n@@ -96,1 +98,2 @@\n-    return true;\n+  } else {\n+    CollectedHeap::fill_with_object(obj, obj_size);\n@@ -98,2 +101,0 @@\n-\n-  return false;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  bool unallocate_object(HeapWord* obj, size_t obj_size);\n+  void unallocate_object(HeapWord* obj, size_t obj_size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,3 +293,0 @@\n-    \/\/ Try to deallocate the space.  If it was directly allocated we cannot\n-    \/\/ deallocate it, so we have to test.  If the deallocation fails,\n-    \/\/ overwrite with a filler object.\n@@ -297,5 +294,3 @@\n-      if (!_old_lab.unallocate_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size)) {\n-        CollectedHeap::fill_with_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size);\n-      }\n-    } else if (!_young_lab.unallocate_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size)) {\n-      CollectedHeap::fill_with_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size);\n+      _old_lab.unallocate_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size);\n+    } else {\n+      _young_lab.unallocate_object(cast_from_oop<HeapWord*>(new_obj), new_obj_size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}