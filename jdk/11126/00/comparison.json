{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -49,2 +50,2 @@\n-    private Date        notBefore;\n-    private Date        notAfter;\n+    private final Date        notBefore;\n+    private final Date        notAfter;\n@@ -62,2 +63,21 @@\n-    \/\/ Construct the class from the DerValue\n-    private void construct(DerValue derVal) throws IOException {\n+    \/**\n+     * The constructor for this class for the specified interval.\n+     *\n+     * @param notBefore the date and time before which the certificate\n+     *                   is not valid\n+     * @param notAfter the date and time after which the certificate is\n+     *                  not valid\n+     *\/\n+    public CertificateValidity(Date notBefore, Date notAfter) {\n+        this.notBefore = Objects.requireNonNull(notBefore);\n+        this.notAfter = Objects.requireNonNull(notAfter);\n+    }\n+\n+    \/**\n+     * Create the object, decoding the values from the passed DER stream.\n+     *\n+     * @param in the DerInputStream to read the CertificateValidity from\n+     * @exception IOException on decoding errors.\n+     *\/\n+    public CertificateValidity(DerInputStream in) throws IOException {\n+        DerValue derVal = in.getDerValue();\n@@ -94,29 +114,0 @@\n-    \/**\n-     * Default constructor for the class.\n-     *\/\n-    public CertificateValidity() { }\n-\n-    \/**\n-     * The default constructor for this class for the specified interval.\n-     *\n-     * @param notBefore the date and time before which the certificate\n-     *                   is not valid.\n-     * @param notAfter the date and time after which the certificate is\n-     *                  not valid.\n-     *\/\n-    public CertificateValidity(Date notBefore, Date notAfter) {\n-        this.notBefore = notBefore;\n-        this.notAfter = notAfter;\n-    }\n-\n-    \/**\n-     * Create the object, decoding the values from the passed DER stream.\n-     *\n-     * @param in the DerInputStream to read the CertificateValidity from.\n-     * @exception IOException on decoding errors.\n-     *\/\n-    public CertificateValidity(DerInputStream in) throws IOException {\n-        DerValue derVal = in.getDerValue();\n-        construct(derVal);\n-    }\n-\n@@ -127,2 +118,0 @@\n-        if (notBefore == null || notAfter == null)\n-            return \"\";\n@@ -142,6 +131,0 @@\n-        \/\/ in cases where default constructor is used check for\n-        \/\/ null values\n-        if (notBefore == null || notAfter == null) {\n-            throw new IOException(\"CertificateValidity:\" +\n-                                  \" null values to encode.\\n\");\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateValidity.java","additions":24,"deletions":41,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8296900\n+ * @summary CertificateValidity fields are not be optional\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import sun.security.x509.CertificateValidity;\n+\n+import java.util.Date;\n+\n+public class NullName {\n+\n+    public static void main(String[] argv) throws Exception {\n+        Date now = new Date();\n+        Utils.runAndCheckException(\n+                () -> new CertificateValidity(null, null),\n+                NullPointerException.class);\n+        Utils.runAndCheckException(\n+                () -> new CertificateValidity(now, null),\n+                NullPointerException.class);\n+        Utils.runAndCheckException(\n+                () -> new CertificateValidity(null, now),\n+                NullPointerException.class);\n+        new CertificateValidity(now, now);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/CertificateValidity\/NullName.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}