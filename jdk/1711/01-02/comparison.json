{"files":[{"patch":"@@ -317,1 +317,1 @@\n-  RegSet                _fp_regs;\n+  FloatRegSet           _fp_regs;\n@@ -330,1 +330,1 @@\n-          _fp_regs += RegSet::of((Register)vm_reg->as_FloatRegister());\n+          _fp_regs += FloatRegSet::of(vm_reg->as_FloatRegister());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -477,2 +477,2 @@\n-  void push_fp(RegSet regs, Register stack) { if (regs.bits()) push_fp(regs.bits(), stack); }\n-  void pop_fp(RegSet regs, Register stack) { if (regs.bits()) pop_fp(regs.bits(), stack); }\n+  void push_fp(FloatRegSet regs, Register stack) { if (regs.bits()) push_fp(regs.bits(), stack); }\n+  void pop_fp(FloatRegSet regs, Register stack) { if (regs.bits()) pop_fp(regs.bits(), stack); }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,4 +66,0 @@\n-\n-  \/\/ Return the bit which represents this register.  This is intended\n-  \/\/ to be ORed into a bitmask: for usage see class RegSet below.\n-  uint64_t bit(bool should_set = true) const { return should_set ? 1 << encoding() : 0; }\n@@ -307,1 +303,1 @@\n-class RegSetIterator;\n+template <class RegImpl = Register> class RegSetIterator;\n@@ -310,1 +306,2 @@\n-class RegSet {\n+template <class RegImpl>\n+class AbstractRegSet {\n@@ -313,1 +310,1 @@\n-  RegSet(uint32_t bitset) : _bitset(bitset) { }\n+  AbstractRegSet(uint32_t bitset) : _bitset(bitset) { }\n@@ -317,1 +314,1 @@\n-  RegSet() : _bitset(0) { }\n+  AbstractRegSet() : _bitset(0) { }\n@@ -319,1 +316,1 @@\n-  RegSet(Register r1) : _bitset(r1->bit()) { }\n+  AbstractRegSet(RegImpl r1) : _bitset(1 << r1->encoding()) { }\n@@ -321,2 +318,2 @@\n-  RegSet operator+(const RegSet aSet) const {\n-    RegSet result(_bitset | aSet._bitset);\n+  AbstractRegSet operator+(const AbstractRegSet aSet) const {\n+    AbstractRegSet result(_bitset | aSet._bitset);\n@@ -326,2 +323,2 @@\n-  RegSet operator-(const RegSet aSet) const {\n-    RegSet result(_bitset & ~aSet._bitset);\n+  AbstractRegSet operator-(const AbstractRegSet aSet) const {\n+    AbstractRegSet result(_bitset & ~aSet._bitset);\n@@ -331,1 +328,1 @@\n-  RegSet &operator+=(const RegSet aSet) {\n+  AbstractRegSet &operator+=(const AbstractRegSet aSet) {\n@@ -336,1 +333,1 @@\n-  RegSet &operator-=(const RegSet aSet) {\n+  AbstractRegSet &operator-=(const AbstractRegSet aSet) {\n@@ -341,2 +338,2 @@\n-  static RegSet of(Register r1) {\n-    return RegSet(r1);\n+  static AbstractRegSet of(RegImpl r1) {\n+    return AbstractRegSet(r1);\n@@ -345,1 +342,1 @@\n-  static RegSet of(Register r1, Register r2) {\n+  static AbstractRegSet of(RegImpl r1, RegImpl r2) {\n@@ -349,1 +346,1 @@\n-  static RegSet of(Register r1, Register r2, Register r3) {\n+  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3) {\n@@ -353,1 +350,1 @@\n-  static RegSet of(Register r1, Register r2, Register r3, Register r4) {\n+  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3, RegImpl r4) {\n@@ -357,1 +354,1 @@\n-  static RegSet range(Register start, Register end) {\n+  static AbstractRegSet range(RegImpl start, RegImpl end) {\n@@ -363,1 +360,1 @@\n-    return RegSet(bits);\n+    return AbstractRegSet(bits);\n@@ -370,4 +367,1 @@\n-  Register first() {\n-    uint32_t first = _bitset & -_bitset;\n-    return first ? as_Register(exact_log2(first)) : noreg;\n-  }\n+  RegImpl first();\n@@ -377,1 +371,1 @@\n-  friend class RegSetIterator;\n+  friend class RegSetIterator<RegImpl>;\n@@ -379,1 +373,1 @@\n-  RegSetIterator begin();\n+  RegSetIterator<RegImpl> begin();\n@@ -382,0 +376,4 @@\n+typedef AbstractRegSet<Register> RegSet;\n+typedef AbstractRegSet<FloatRegister> FloatRegSet;\n+\n+template <class RegImpl>\n@@ -383,1 +381,1 @@\n-  RegSet _regs;\n+  AbstractRegSet<RegImpl> _regs;\n@@ -386,1 +384,1 @@\n-  RegSetIterator(RegSet x): _regs(x) {}\n+  RegSetIterator(AbstractRegSet<RegImpl> x): _regs(x) {}\n@@ -390,2 +388,2 @@\n-    Register r = _regs.first();\n-    if (r != noreg)\n+    RegImpl r = _regs.first();\n+    if (r->is_valid())\n@@ -403,1 +401,1 @@\n-  Register operator*() {\n+  RegImpl operator*() {\n@@ -408,2 +406,15 @@\n-inline RegSetIterator RegSet::begin() {\n-  return RegSetIterator(*this);\n+template <class RegImpl>\n+inline RegSetIterator<RegImpl> AbstractRegSet<RegImpl>::begin() {\n+  return RegSetIterator<RegImpl>(*this);\n+}\n+\n+template <>\n+inline Register AbstractRegSet<Register>::first() {\n+  uint32_t first = _bitset & -_bitset;\n+  return first ? as_Register(exact_log2(first)) : noreg;\n+}\n+\n+template <>\n+inline FloatRegister AbstractRegSet<FloatRegister>::first() {\n+  uint32_t first = _bitset & -_bitset;\n+  return first ? as_FloatRegister(exact_log2(first)) : fnoreg;\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":46,"deletions":35,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -3100,0 +3100,2 @@\n+static const int native_invoker_code_size = 1024;\n+\n@@ -3105,1 +3107,1 @@\n-    BufferBlob::create(\"nep_invoker_blob\", MethodHandles::adapter_code_size);\n+    BufferBlob::create(\"nep_invoker_blob\", native_invoker_code_size);\n@@ -3187,1 +3189,2 @@\n-  RegSet spills, fp_spills;\n+  RegSet spills;\n+  FloatRegSet fp_spills;\n@@ -3193,1 +3196,1 @@\n-      fp_spills += RegSet::of((Register)output->as_FloatRegister());\n+      fp_spills += FloatRegSet::of(output->as_FloatRegister());\n@@ -3198,1 +3201,1 @@\n-  __ push(fp_spills, sp);\n+  __ push_fp(fp_spills, sp);\n@@ -3205,1 +3208,1 @@\n-  __ pop(fp_spills, sp);\n+  __ pop_fp(fp_spills, sp);\n@@ -3217,1 +3220,1 @@\n-  __ push(fp_spills, sp);\n+  __ push_fp(fp_spills, sp);\n@@ -3221,1 +3224,1 @@\n-  __ pop(fp_spills, sp);\n+  __ pop_fp(fp_spills, sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1322,1 +1322,1 @@\n-    for (RegSetIterator it = clobbered.begin(); *it != noreg; ++it) {\n+    for (RegSetIterator<> it = clobbered.begin(); *it != noreg; ++it) {\n@@ -5699,1 +5699,1 @@\n-      RegSetIterator regs = (RegSet::range(r0, r26) - r18_tls).begin();\n+      RegSetIterator<> regs = (RegSet::range(r0, r26) - r18_tls).begin();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}