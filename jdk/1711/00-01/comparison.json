{"files":[{"patch":"@@ -5297,0 +5297,2 @@\n+  \/\/ Make sure that native code does not change SVE vector length.\n+  if (!UseSVE) return;\n@@ -5298,1 +5300,0 @@\n-  assert(UseSVE > 0, \"should only be used for SVE\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1857,4 +1857,1 @@\n-  if (UseSVE > 0) {\n-    \/\/ Make sure that jni code does not change SVE vector length.\n-    __ verify_sve_vector_length();\n-  }\n+  __ verify_sve_vector_length();\n@@ -3094,24 +3091,0 @@\n-  void spill_register(VMReg reg) {\n-    assert(reg->is_reg(), \"must be a register\");\n-    MacroAssembler* masm = _masm;\n-    if (reg->is_Register()) {\n-      __ push(RegSet::of(reg->as_Register()), sp);\n-    } else if (reg->is_FloatRegister()) {\n-      __ strq(reg->as_FloatRegister(), Address(__ pre(sp, 16)));\n-    } else {\n-      ShouldNotReachHere();\n-    }\n-  }\n-\n-  void fill_register(VMReg reg) {\n-    assert(reg->is_reg(), \"must be a register\");\n-    MacroAssembler* masm = _masm;\n-    if (reg->is_Register()) {\n-      __ pop(RegSet::of(reg->as_Register()), sp);\n-    } else if (reg->is_FloatRegister()) {\n-      __ ldrq(reg->as_FloatRegister(), Address(__ post(sp, 16)));\n-    } else {\n-      ShouldNotReachHere();\n-    }\n-  }\n-\n@@ -3155,2 +3128,2 @@\n-  \/\/ Store a pointer to the previous R29 saved on the stack as it may\n-  \/\/ contain an oop if PreserveFramePointer is off. This value is\n+  \/\/ Store a pointer to the previous R29 (RFP) saved on the stack as it\n+  \/\/ may contain an oop if PreserveFramePointer is off. This value is\n@@ -3170,6 +3143,0 @@\n-  assert(_output_registers.length() <= 1\n-         || (_output_registers.length() == 2 && !_output_registers.at(1)->is_valid()),\n-         \"no multi-reg returns\");\n-  bool need_spills = _output_registers.length() != 0;\n-  VMReg ret_reg = need_spills ? _output_registers.at(0) : VMRegImpl::Bad();\n-\n@@ -3183,4 +3150,1 @@\n-  if (UseSVE > 0) {\n-    \/\/ Make sure that native code does not change SVE vector length.\n-    __ verify_sve_vector_length();\n-  }\n+  __ verify_sve_vector_length();\n@@ -3221,2 +3185,9 @@\n-  if (need_spills) {\n-    spill_register(ret_reg);\n+  \/\/ Need to save the native result registers around any runtime calls.\n+  RegSet spills, fp_spills;\n+  for (int i = 0; i < _output_registers.length(); i++) {\n+    VMReg output = _output_registers.at(i);\n+    if (output->is_Register()) {\n+      spills += RegSet::of(output->as_Register());\n+    } else if (output->is_FloatRegister()) {\n+      fp_spills += RegSet::of((Register)output->as_FloatRegister());\n+    }\n@@ -3225,0 +3196,3 @@\n+  __ push(spills, sp);\n+  __ push(fp_spills, sp);\n+\n@@ -3226,1 +3200,0 @@\n-#ifndef PRODUCT\n@@ -3228,1 +3201,0 @@\n-#endif\n@@ -3232,3 +3204,2 @@\n-  if (need_spills) {\n-    fill_register(ret_reg);\n-  }\n+  __ pop(fp_spills, sp);\n+  __ pop(spills, sp);\n@@ -3244,3 +3215,2 @@\n-  if (need_spills) {\n-    spill_register(ret_reg);\n-  }\n+  __ push(spills, sp);\n+  __ push(fp_spills, sp);\n@@ -3250,3 +3220,2 @@\n-  if (need_spills) {\n-    fill_register(ret_reg);\n-  }\n+  __ pop(fp_spills, sp);\n+  __ pop(spills, sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":22,"deletions":53,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -1375,4 +1375,1 @@\n-  if (UseSVE > 0) {\n-    \/\/ Make sure that jni code does not change SVE vector length.\n-    __ verify_sve_vector_length();\n-  }\n+  __ verify_sve_vector_length();\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}