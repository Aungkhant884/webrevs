{"files":[{"patch":"@@ -187,8 +187,0 @@\n-    public TypeMirror getIllegalArgumentExceptionType() {\n-        return getSymbol(\"java.lang.IllegalArgumentException\");\n-    }\n-\n-    public TypeMirror getNullPointerExceptionType() {\n-        return getSymbol(\"java.lang.NullPointerException\");\n-    }\n-\n@@ -203,16 +195,0 @@\n-    \/**\n-     * Return array of class members whose documentation is to be generated.\n-     * If the member is deprecated do not include such a member in the\n-     * returned array.\n-     *\n-     * @param  members    Array of members to choose from.\n-     * @return List       List of eligible members for whom\n-     *                    documentation is getting generated.\n-     *\/\n-    public List<Element> excludeDeprecatedMembers(List<? extends Element> members) {\n-        return members.stream()\n-                      .filter(member -> !isDeprecated(member))\n-                      .sorted(comparators.makeGeneralPurposeComparator())\n-                      .collect(Collectors.toCollection(ArrayList::new));\n-    }\n-\n@@ -312,4 +288,0 @@\n-    public boolean isAnnotated(Element e) {\n-        return !e.getAnnotationMirrors().isEmpty();\n-    }\n-\n@@ -353,4 +325,0 @@\n-    boolean isEnumConstant(Element e) {\n-        return e.getKind() == ENUM_CONSTANT;\n-    }\n-\n@@ -503,22 +471,0 @@\n-    public boolean isPrimitive(TypeMirror t) {\n-        return new SimpleTypeVisitor14<Boolean, Void>() {\n-\n-            @Override\n-            public Boolean visitNoType(NoType t, Void p) {\n-                return t.getKind() == VOID;\n-            }\n-            @Override\n-            public Boolean visitPrimitive(PrimitiveType t, Void p) {\n-                return true;\n-            }\n-            @Override\n-            public Boolean visitArray(ArrayType t, Void p) {\n-                return visit(t.getComponentType());\n-            }\n-            @Override\n-            protected Boolean defaultAction(TypeMirror e, Void p) {\n-                return false;\n-            }\n-        }.visit(t);\n-    }\n-\n@@ -676,8 +622,0 @@\n-    public boolean isErrorType(TypeMirror t) {\n-        return t.getKind() == ERROR;\n-    }\n-\n-    public boolean isIntersectionType(TypeMirror t) {\n-        return t.getKind() == INTERSECTION;\n-    }\n-\n@@ -696,4 +634,0 @@\n-    public boolean isWildCard(TypeMirror t) {\n-        return t.getKind() == WILDCARD;\n-    }\n-\n@@ -792,14 +726,0 @@\n-    \/**\n-     * Return the class that originally defined the method that\n-     * is overridden by the current definition, or null if no\n-     * such class exists.\n-     *\n-     * @return a TypeElement representing the superclass that\n-     * originally defined this method, or null if this method does\n-     * not override a definition in a superclass.\n-     *\/\n-    public TypeElement overriddenClass(ExecutableElement ee) {\n-        TypeMirror type = overriddenType(ee);\n-        return (type != null) ? asTypeElement(type) : null;\n-    }\n-\n@@ -988,7 +908,0 @@\n-    \/**\n-     * Enclose in quotes, used for paths and filenames that contains spaces\n-     *\/\n-    public String quote(String filepath) {\n-        return (\"\\\"\" + filepath + \"\\\"\");\n-    }\n-\n@@ -1561,13 +1474,0 @@\n-    \/**\n-     * A general purpose case sensitive String comparator, which\n-     * compares two Strings using a Collator strength of \"SECONDARY\".\n-     *\n-     * @param s1 first String to compare.\n-     * @param s2 second String to compare.\n-     * @return a negative integer, zero, or a positive integer as the first\n-     *         argument is less than, equal to, or greater than the second.\n-     *\/\n-    public int compareCaseCompare(String s1, String s2) {\n-        return compareStrings(false, s1, s2);\n-    }\n-\n@@ -1765,20 +1665,0 @@\n-    \/**\n-     * Returns the documented annotation interfaces in a package.\n-     *\n-     * @param pkg the package\n-     * @return the annotation interfaces\n-     *\/\n-    public List<TypeElement> getAnnotationTypes(PackageElement pkg) {\n-        return getDocumentedItems(pkg, ANNOTATION_TYPE, TypeElement.class);\n-    }\n-\n-    \/**\n-     * Returns the documented record classes in a package.\n-     *\n-     * @param pkg the package\n-     * @return the record classes\n-     *\/\n-    public List<TypeElement> getRecords(PackageElement pkg) {\n-        return getDocumentedItems(pkg, RECORD, TypeElement.class);\n-    }\n-\n@@ -1837,7 +1717,0 @@\n-    public int getOrdinalValue(VariableElement member) {\n-        if (member == null || member.getKind() != ENUM_CONSTANT) {\n-            throw new IllegalArgumentException(\"must be an enum constant: \" + member);\n-        }\n-        return member.getEnclosingElement().getEnclosedElements().indexOf(member);\n-    }\n-\n@@ -1915,10 +1788,0 @@\n-    \/**\n-     * Returns the documented interfaces in a package.\n-     *\n-     * @param pkg the package\n-     * @return the interfaces\n-     *\/\n-    public List<TypeElement> getInterfaces(PackageElement pkg)  {\n-        return getDocumentedItems(pkg, INTERFACE, TypeElement.class);\n-    }\n-\n@@ -1935,10 +1798,0 @@\n-    \/**\n-     * Returns the documented enum classes in a package.\n-     *\n-     * @param pkg the package\n-     * @return the interfaces\n-     *\/\n-    public List<TypeElement> getEnums(PackageElement pkg) {\n-        return getDocumentedItems(pkg, ENUM, TypeElement.class);\n-    }\n-\n@@ -2346,96 +2199,0 @@\n-    public boolean isAttribute(DocTree doctree) {\n-        return isKind(doctree, ATTRIBUTE);\n-    }\n-\n-    public boolean isAuthor(DocTree doctree) {\n-        return isKind(doctree, AUTHOR);\n-    }\n-\n-    public boolean isComment(DocTree doctree) {\n-        return isKind(doctree, COMMENT);\n-    }\n-\n-    public boolean isDeprecated(DocTree doctree) {\n-        return isKind(doctree, DEPRECATED);\n-    }\n-\n-    public boolean isDocComment(DocTree doctree) {\n-        return isKind(doctree, DOC_COMMENT);\n-    }\n-\n-    public boolean isDocRoot(DocTree doctree) {\n-        return isKind(doctree, DOC_ROOT);\n-    }\n-\n-    public boolean isEndElement(DocTree doctree) {\n-        return isKind(doctree, END_ELEMENT);\n-    }\n-\n-    public boolean isEntity(DocTree doctree) {\n-        return isKind(doctree, ENTITY);\n-    }\n-\n-    public boolean isErroneous(DocTree doctree) {\n-        return isKind(doctree, ERRONEOUS);\n-    }\n-\n-    public boolean isException(DocTree doctree) {\n-        return isKind(doctree, EXCEPTION);\n-    }\n-\n-    public boolean isIdentifier(DocTree doctree) {\n-        return isKind(doctree, IDENTIFIER);\n-    }\n-\n-    public boolean isInheritDoc(DocTree doctree) {\n-        return isKind(doctree, INHERIT_DOC);\n-    }\n-\n-    public boolean isLink(DocTree doctree) {\n-        return isKind(doctree, LINK);\n-    }\n-\n-    public boolean isLinkPlain(DocTree doctree) {\n-        return isKind(doctree, LINK_PLAIN);\n-    }\n-\n-    public boolean isLiteral(DocTree doctree) {\n-        return isKind(doctree, LITERAL);\n-    }\n-\n-    public boolean isOther(DocTree doctree) {\n-        return doctree.getKind() == DocTree.Kind.OTHER;\n-    }\n-\n-    public boolean isParam(DocTree doctree) {\n-        return isKind(doctree, PARAM);\n-    }\n-\n-    public boolean isReference(DocTree doctree) {\n-        return isKind(doctree, REFERENCE);\n-    }\n-\n-    public boolean isReturn(DocTree doctree) {\n-        return isKind(doctree, RETURN);\n-    }\n-\n-    public boolean isSee(DocTree doctree) {\n-        return isKind(doctree, SEE);\n-    }\n-\n-    public boolean isSerial(DocTree doctree) {\n-        return isKind(doctree, SERIAL);\n-    }\n-\n-    public boolean isSerialData(DocTree doctree) {\n-        return isKind(doctree, SERIAL_DATA);\n-    }\n-\n-    public boolean isSerialField(DocTree doctree) {\n-        return isKind(doctree, SERIAL_FIELD);\n-    }\n-\n-    public boolean isSince(DocTree doctree) {\n-        return isKind(doctree, SINCE);\n-    }\n-\n@@ -2450,20 +2207,0 @@\n-    public boolean isThrows(DocTree doctree) {\n-        return isKind(doctree, THROWS);\n-    }\n-\n-    public boolean isUnknownBlockTag(DocTree doctree) {\n-        return isKind(doctree, UNKNOWN_BLOCK_TAG);\n-    }\n-\n-    public boolean isUnknownInlineTag(DocTree doctree) {\n-        return isKind(doctree, UNKNOWN_INLINE_TAG);\n-    }\n-\n-    public boolean isValue(DocTree doctree) {\n-        return isKind(doctree, VALUE);\n-    }\n-\n-    public boolean isVersion(DocTree doctree) {\n-        return isKind(doctree, VERSION);\n-    }\n-\n@@ -2515,4 +2252,0 @@\n-    public List<? extends DocTree> getBlockTags(Element element, DocTree.Kind kind, DocTree.Kind altKind) {\n-        return getBlockTags(element, t -> t.getKind() == kind || t.getKind() == altKind);\n-    }\n-\n@@ -2794,13 +2527,0 @@\n-    public TypeElement getTopMostContainingTypeElement(Element e) {\n-        if (isPackage(e)) {\n-            return null;\n-        }\n-        TypeElement outer = getEnclosingTypeElement(e);\n-        if (outer == null)\n-            return (TypeElement)e;\n-        while (outer != null && outer.getNestingKind().isNested()) {\n-            outer = getEnclosingTypeElement(outer);\n-        }\n-        return outer;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":280,"binary":false,"changes":280,"status":"modified"}]}