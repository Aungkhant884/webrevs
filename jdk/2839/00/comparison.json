{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,2 +71,0 @@\n-    public static File jsa;        \/\/ will be updated during test\n-    public static File orgJsaFile; \/\/ kept the original file not touched.\n@@ -255,2 +253,2 @@\n-    public static void modifyJvmIdent() throws Exception {\n-        FileChannel fc = getFileChannel(jsa);\n+    public static void modifyJvmIdent(File jsaFile) throws Exception {\n+        FileChannel fc = getFileChannel(jsaFile);\n@@ -267,2 +265,2 @@\n-    public static void modifyHeaderIntField(long offset, int value) throws Exception {\n-        FileChannel fc = getFileChannel(jsa);\n+    public static void modifyHeaderIntField(File jsaFile, long offset, int value) throws Exception {\n+        FileChannel fc = getFileChannel(jsaFile);\n@@ -279,4 +277,13 @@\n-    public static void copyFile(File from, File to) throws Exception {\n-        if (to.exists()) {\n-            if(!to.delete()) {\n-                throw new IOException(\"Could not delete file \" + to);\n+    static int testCount = 0;\n+    public static String startNewTestArchive(String testName) {\n+        ++ testCount;\n+        String newArchiveName = TestCommon.getNewArchiveName(String.format(\"%02d\", testCount) + \"-\" + testName);\n+        TestCommon.setCurrentArchiveName(newArchiveName);\n+        return newArchiveName;\n+    }\n+\n+    public static File copyFile(File orgJsaFile, String testName) throws Exception {\n+        File newJsaFile = new File(startNewTestArchive(testName));\n+        if (newJsaFile.exists()) {\n+            if (!newJsaFile.delete()) {\n+                throw new IOException(\"Could not delete file \" + newJsaFile);\n@@ -285,3 +292,8 @@\n-        to.createNewFile();\n-        setReadWritePermission(to);\n-        Files.copy(from.toPath(), to.toPath(), REPLACE_EXISTING);\n+        newJsaFile.createNewFile();\n+        Files.copy(orgJsaFile.toPath(), newJsaFile.toPath(), REPLACE_EXISTING);\n+\n+        \/\/ orgJsaFile is read only, and Files.copy passes on this attribute to newJsaFile.\n+        \/\/ Since we need to modify newJsaFile later, let's set it to r\/w\n+        setReadWritePermission(newJsaFile);\n+\n+        return newJsaFile;\n@@ -292,1 +304,2 @@\n-    public static void copyFile(File from, File to, boolean del) throws Exception {\n+    public static File insertOrDeleteBytes(File orgJsaFile, boolean del) throws Exception {\n+        File newJsaFile = new File(startNewTestArchive(del ? \"delete-bytes\" : \"insert-bytes\"));\n@@ -294,2 +307,2 @@\n-            FileChannel inputChannel = new FileInputStream(from).getChannel();\n-            FileChannel outputChannel = new FileOutputStream(to).getChannel()\n+            FileChannel inputChannel = new FileInputStream(orgJsaFile).getChannel();\n+            FileChannel outputChannel = new FileOutputStream(newJsaFile).getChannel()\n@@ -312,1 +325,0 @@\n-    }\n@@ -314,2 +326,1 @@\n-    public static void restoreJsaFile() throws Exception {\n-        Files.copy(orgJsaFile.toPath(), jsa.toPath(), REPLACE_EXISTING);\n+        return newJsaFile;\n@@ -368,1 +379,1 @@\n-        String[] execArgs = {\"-Xlog:cds\", \"-cp\", jarFile, \"Hello\"};\n+        String[] execArgs = {\"-Xlog:cds=debug\", \"-cp\", jarFile, \"Hello\"};\n@@ -381,4 +392,4 @@\n-        \/\/ get current archive name\n-        jsa = new File(TestCommon.getCurrentArchiveName());\n-        if (!jsa.exists()) {\n-            throw new IOException(jsa + \" does not exist!\");\n+        \/\/ get the archive that has just been created.\n+        File orgJsaFile = new File(TestCommon.getCurrentArchiveName());\n+        if (!orgJsaFile.exists()) {\n+            throw new IOException(orgJsaFile + \" does not exist!\");\n@@ -387,6 +398,0 @@\n-        setReadWritePermission(jsa);\n-\n-        \/\/ save as original untouched\n-        orgJsaFile = new File(new File(currentDir), \"appcds.jsa.bak\");\n-        copyFile(jsa, orgJsaFile);\n-\n@@ -395,1 +400,1 @@\n-        modifyJsaHeader(jsa);\n+        modifyJsaHeader(copyFile(orgJsaFile, \"corrupt-header\"));\n@@ -400,1 +405,0 @@\n-        copyFile(orgJsaFile, jsa);\n@@ -403,1 +407,1 @@\n-        modifyJvmIdent();\n+        modifyJvmIdent(copyFile(orgJsaFile, \"modify-jvm-ident\"));\n@@ -408,2 +412,1 @@\n-        copyFile(orgJsaFile, jsa);\n-        \/\/ modify _jvm_ident and run with -Xshare:auto\n+        \/\/ use the same archive as above, but run with -Xshare:auto\n@@ -411,1 +414,0 @@\n-        modifyJvmIdent();\n@@ -416,1 +418,0 @@\n-        copyFile(orgJsaFile, jsa);\n@@ -419,1 +420,1 @@\n-        modifyHeaderIntField(offset_magic, 0x00000000);\n+        modifyHeaderIntField(copyFile(orgJsaFile, \"modify-magic\"), offset_magic, 0x00000000);\n@@ -424,1 +425,0 @@\n-        copyFile(orgJsaFile, jsa);\n@@ -427,1 +427,1 @@\n-        modifyHeaderIntField(offset_version, 0x00000000);\n+        modifyHeaderIntField(copyFile(orgJsaFile, \"modify-version\"), offset_version, 0x00000000);\n@@ -432,2 +432,1 @@\n-        File newJsaFile = null;\n-        \/\/ modify content\n+        \/\/ modify content inside regions\n@@ -436,3 +435,1 @@\n-            newJsaFile = new File(TestCommon.getNewArchiveName(shared_region_name[i]));\n-            copyFile(orgJsaFile, newJsaFile);\n-            TestCommon.setCurrentArchiveName(newJsaFile.toString());\n+            File newJsaFile = copyFile(orgJsaFile, (shared_region_name[i]));\n@@ -446,3 +443,1 @@\n-        newJsaFile = new File(TestCommon.getNewArchiveName(\"header-and-content\"));\n-        copyFile(orgJsaFile, newJsaFile);\n-        TestCommon.setCurrentArchiveName(newJsaFile.toString());\n+        File newJsaFile = copyFile(orgJsaFile, \"header-and-content\");\n@@ -457,2 +452,1 @@\n-        copyFile(orgJsaFile, jsa, true);\n-        TestCommon.setCurrentArchiveName(jsa.toString());\n+        insertOrDeleteBytes(orgJsaFile, true);\n@@ -463,1 +457,1 @@\n-        copyFile(orgJsaFile, jsa, false);\n+        insertOrDeleteBytes(orgJsaFile, false);\n@@ -467,4 +461,1 @@\n-        newJsaFile = new File(TestCommon.getNewArchiveName(\"random-areas\"));\n-        copyFile(orgJsaFile, newJsaFile);\n-        TestCommon.setCurrentArchiveName(newJsaFile.toString());\n-        modifyJsaContentRandomly(newJsaFile);\n+        modifyJsaContentRandomly(copyFile(orgJsaFile, \"random-areas\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":47,"deletions":56,"binary":false,"changes":103,"status":"modified"}]}