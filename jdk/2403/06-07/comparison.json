{"files":[{"patch":"@@ -375,1 +375,1 @@\n-    _useStencil = [_mtlc.clip isShape];\n+    _useStencil = [_mtlc.clip isShape] && !_mtlc.clip.stencilMaskGenerationInProgress;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/EncoderManager.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -702,1 +702,0 @@\n-            [blitEncoder synchronizeTexture:srcOps->pTexture slice:0 level:0];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -120,1 +120,2 @@\n-    [retArray addObject: [NSString stringWithUTF8String: JNU_GetStringPlatformChars(env, shadersLibName, 0)]];\n+    char *str = JNU_GetStringPlatformChars(env, shadersLibName, 0);\n+    [retArray addObject: [NSString stringWithUTF8String: str]];\n@@ -128,0 +129,1 @@\n+    JNU_ReleaseStringPlatformChars(env, shadersLibName, str);\n@@ -151,1 +153,2 @@\n-    [retArray addObject: [NSString stringWithUTF8String: JNU_GetStringPlatformChars(env, mtlShadersLib, 0)]];\n+    char *str = JNU_GetStringPlatformChars(env, mtlShadersLib, 0);\n+    [retArray addObject: [NSString stringWithUTF8String: str]];\n@@ -159,0 +162,1 @@\n+    JNU_ReleaseStringPlatformChars(env, mtlShadersLib, str);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLGraphicsConfig.m","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -94,0 +94,11 @@\n+\n+        NSUInteger src_x = self.leftInset * self.contentsScale;\n+        NSUInteger src_y = self.topInset * self.contentsScale;\n+        NSUInteger src_w = self.buffer.width - src_x;\n+        NSUInteger src_h = self.buffer.height - src_y;\n+\n+        if (src_h <= 0 || src_w <= 0) {\n+           J2dTraceLn(J2D_TRACE_VERBOSE, \"MTLLayer.blitTexture: Invalid src width or height.\");\n+           return;\n+        }\n+\n@@ -105,0 +116,1 @@\n+\n@@ -109,2 +121,2 @@\n-                sourceOrigin:MTLOriginMake((jint)(self.leftInset*self.contentsScale), (jint)(self.topInset*self.contentsScale), 0)\n-                sourceSize:MTLSizeMake(self.buffer.width, self.buffer.height, 1)\n+                sourceOrigin:MTLOriginMake(src_x, src_y, 0)\n+                sourceSize:MTLSizeMake(src_w, src_h, 1)\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLLayer.m","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,5 @@\n+- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor\n+                                 vertexShaderId:(NSString *)vertexShaderId\n+                               fragmentShaderId:(NSString *)fragmentShaderId\n+                                  stencilNeeded:(bool)stencilNeeded;\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPipelineStatesStorage.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -96,0 +96,14 @@\n+- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor\n+                                 vertexShaderId:(NSString *)vertexShaderId\n+                               fragmentShaderId:(NSString *)fragmentShaderId\n+                               stencilNeeded:(bool)stencilNeeded\n+{\n+    RenderOptions defaultOptions = {JNI_FALSE, JNI_FALSE, 0\/*unused*\/, {JNI_FALSE, JNI_TRUE}, {JNI_FALSE, JNI_TRUE}, JNI_FALSE};\n+    return [self getPipelineState:pipelineDescriptor\n+                   vertexShaderId:vertexShaderId\n+                 fragmentShaderId:fragmentShaderId\n+                        composite:nil\n+                    renderOptions:&defaultOptions\n+                    stencilNeeded:stencilNeeded];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLPipelineStatesStorage.m","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -318,0 +318,4 @@\n+const int SCANLINE_MAX_VERTEX_SIZE = 4096;\n+const int VERTEX_STRUCT_SIZE = 8;\n+const int NUM_OF_VERTICES_PER_SCANLINE = 3;\n+\n@@ -328,0 +332,5 @@\n+    RETURN_IF_NULL(scanlines);\n+    int vertexSize = NUM_OF_VERTICES_PER_SCANLINE\n+        * scanlineCount * VERTEX_STRUCT_SIZE;\n+    J2dTraceLn1(J2D_TRACE_INFO, \"MTLRenderer_DrawScanlines: Total vertex size : %d\", vertexSize);\n+    if (vertexSize == 0) return;\n@@ -333,13 +342,14 @@\n-    struct Vertex verts[2*scanlineCount];\n-\n-    for (int j = 0, i = 0; j < scanlineCount; j++) {\n-        \/\/ Translate each vertex by a fraction so\n-        \/\/ that we hit pixel centers.\n-        float x1 = ((float)*(scanlines++)) + 0.2f;\n-        float x2 = ((float)*(scanlines++)) + 1.2f;\n-        float y  = ((float)*(scanlines++)) + 0.5f;\n-        struct Vertex v1 = {{x1, y}};\n-        struct Vertex v2 = {{x2, y}};\n-        verts[i++] = v1;\n-        verts[i++] = v2;\n-    }\n+    if (vertexSize <= SCANLINE_MAX_VERTEX_SIZE) {\n+        struct Vertex verts[NUM_OF_VERTICES_PER_SCANLINE * scanlineCount];\n+\n+        for (int j = 0, i = 0; j < scanlineCount; j++) {\n+            \/\/ Translate each vertex by a fraction so\n+            \/\/ that we hit pixel centers.\n+            float x1 = ((float)*(scanlines++)) + 0.2f;\n+            float x2 = ((float)*(scanlines++)) + 1.2f;\n+            float y  = ((float)*(scanlines++)) + 0.5f;\n+            struct Vertex v1 = {{x1, y}};\n+            struct Vertex v2 = {{x2, y}};\n+            verts[i++] = v1;\n+            verts[i++] = v2;\n+        }\n@@ -347,2 +357,49 @@\n-    [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n-    [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0 vertexCount:2*scanlineCount];\n+        [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+        [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+            vertexCount:NUM_OF_VERTICES_PER_SCANLINE * scanlineCount];\n+    } else {\n+        int remainingScanlineCount = vertexSize;\n+        do {\n+            if (remainingScanlineCount > SCANLINE_MAX_VERTEX_SIZE) {\n+                struct Vertex verts[SCANLINE_MAX_VERTEX_SIZE\/ VERTEX_STRUCT_SIZE];\n+\n+                for (int j = 0, i = 0; j < (SCANLINE_MAX_VERTEX_SIZE \/ (VERTEX_STRUCT_SIZE * 2)); j++) {\n+                    \/\/ Translate each vertex by a fraction so\n+                    \/\/ that we hit pixel centers.\n+                    float x1 = ((float)*(scanlines++)) + 0.2f;\n+                    float x2 = ((float)*(scanlines++)) + 1.2f;\n+                    float y  = ((float)*(scanlines++)) + 0.5f;\n+                    struct Vertex v1 = {{x1, y}};\n+                    struct Vertex v2 = {{x2, y}};\n+                    verts[i++] = v1;\n+                    verts[i++] = v2;\n+                }\n+\n+                [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+                [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+                    vertexCount:(SCANLINE_MAX_VERTEX_SIZE \/ VERTEX_STRUCT_SIZE)];\n+                remainingScanlineCount -= SCANLINE_MAX_VERTEX_SIZE;\n+            } else {\n+                struct Vertex verts[remainingScanlineCount \/ VERTEX_STRUCT_SIZE];\n+\n+                for (int j = 0, i = 0; j < (remainingScanlineCount \/ (VERTEX_STRUCT_SIZE * 2)); j++) {\n+                    \/\/ Translate each vertex by a fraction so\n+                    \/\/ that we hit pixel centers.\n+                    float x1 = ((float)*(scanlines++)) + 0.2f;\n+                    float x2 = ((float)*(scanlines++)) + 1.2f;\n+                    float y  = ((float)*(scanlines++)) + 0.5f;\n+                    struct Vertex v1 = {{x1, y}};\n+                    struct Vertex v2 = {{x2, y}};\n+                    verts[i++] = v1;\n+                    verts[i++] = v2;\n+                }\n+\n+                [mtlEncoder setVertexBytes:verts length:sizeof(verts) atIndex:MeshVertexBuffer];\n+                [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0\n+                    vertexCount:(remainingScanlineCount \/ VERTEX_STRUCT_SIZE)];\n+                remainingScanlineCount -= remainingScanlineCount;\n+            }\n+            J2dTraceLn1(J2D_TRACE_INFO,\n+                \"MTLRenderer_DrawScanlines: Remaining vertex size %d\", remainingScanlineCount);\n+        } while (remainingScanlineCount != 0);\n+    }\n@@ -717,1 +774,1 @@\n-                    vertexShaderId:@\"vert_col_aa\"\n+                      vertexShaderId:@\"vert_col_aa\"\n@@ -719,0 +776,1 @@\n+                       stencilNeeded:mtlc.clip.isShape\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLRenderer.m","additions":74,"deletions":16,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#define MTLVC_MAX_INDEX         1536\n+#define MTLVC_MAX_INDEX         250\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLVertexCache.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}