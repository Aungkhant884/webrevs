{"files":[{"patch":"@@ -703,1 +703,1 @@\n-                ? attr.attribBase(enumBase(tree.pos, sym), baseEnv,\n+                ? attr.attribBase(extending = enumBase(tree.pos, sym), baseEnv,\n@@ -708,1 +708,1 @@\n-                ? attr.attribBase(recordBase(tree.pos, sym), baseEnv,\n+                ? attr.attribBase(extending = recordBase(tree.pos, sym), baseEnv,\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273584\n+ * @summary Verify TypeElement.getSuperclass works for records when j.l.Record is unavailable\n+ * @modules jdk.compiler\n+ *\/\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.StreamSupport;\n+import javax.lang.model.element.TypeElement;\n+import javax.tools.JavaCompiler;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreePath;\n+import com.sun.source.util.Trees;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n+import javax.tools.ForwardingJavaFileManager;\n+import javax.tools.JavaFileManager;\n+import javax.tools.JavaFileObject;\n+\n+import static javax.tools.JavaFileObject.Kind.CLASS;\n+import static javax.tools.JavaFileObject.Kind.SOURCE;\n+\n+public class RecordsErrorRecovery {\n+    public static void main(String... args) throws IOException {\n+        new RecordsErrorRecovery().getSuperclass();\n+    }\n+\n+    public void getSuperclass() throws IOException {\n+        JavaCompiler c = ToolProvider.getSystemJavaCompiler();\n+        try (JavaFileManager fm = c.getStandardFileManager(null, null, null);\n+             JavaFileManager filtering = new FilteringJavaFileManager(fm)) {\n+            for (String code : new String[] {\"record R(String s) {}\", \"enum E {A}\"}) {\n+                JavacTask t = (JavacTask) c.getTask(null, filtering, null, null, null,\n+                        List.of(new MyFileObject(code)));\n+                CompilationUnitTree cut = t.parse().iterator().next();\n+\n+                t.analyze();\n+\n+                Trees trees = Trees.instance(t);\n+                TreePath tp = new TreePath(new TreePath(cut), cut.getTypeDecls().get(0));\n+                TypeElement record = (TypeElement) trees.getElement(tp);\n+                TypeMirror superclass = record.getSuperclass();\n+\n+                if (superclass.getKind() != TypeKind.ERROR) {\n+                    throw new AssertionError(\"Unexpected superclass!\");\n+                }\n+            }\n+        }\n+    }\n+\n+    class MyFileObject extends SimpleJavaFileObject {\n+        private final String code;\n+\n+        MyFileObject(String code) {\n+            super(URI.create(\"myfo:\/\/\/Test.java\"), SOURCE);\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String getCharContent(boolean ignoreEncodingErrors) {\n+            return code;\n+        }\n+\n+    }\n+\n+    private static final class FilteringJavaFileManager extends ForwardingJavaFileManager<JavaFileManager> {\n+\n+        public FilteringJavaFileManager(JavaFileManager fileManager) {\n+            super(fileManager);\n+        }\n+\n+        @Override\n+        public Iterable<JavaFileObject> list(JavaFileManager.Location location,\n+                                             String packageName,\n+                                             Set<JavaFileObject.Kind> kinds,\n+                                             boolean recurse) throws IOException {\n+            Iterable<JavaFileObject> files = super.list(location, packageName, kinds, recurse);\n+\n+            if (\"java.lang\".equals(packageName)) {\n+                files = StreamSupport.stream(files.spliterator(), false)\n+                                     .filter(fo -> !fo.isNameCompatible(\"Record\", CLASS))\n+                                     .filter(fo -> !fo.isNameCompatible(\"Enum\", CLASS))\n+                                     .toList();\n+            }\n+            return files;\n+        }\n+\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/RecordsErrorRecovery.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}