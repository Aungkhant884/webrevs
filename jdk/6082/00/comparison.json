{"files":[{"patch":"@@ -1368,0 +1368,26 @@\n+\n+#\n+# Policy for non-forwardable service ticket in a S4U2proxy request\n+#\n+# The Service for User to Proxy (S4U2proxy) Kerberos extension enables a middle service\n+# to obtain a service ticket to another service on behalf of a user. It requires that\n+# the user's service ticket to the first service has the forwardable flag set [1].\n+# However, some implementations ignore this requirement and accept service tickets with\n+# the flag unset.\n+#\n+# If this security property is set to \"true\", then\n+#\n+# 1) The user service ticket, when obtained by the middle service after a S4U2self\n+#    impersonation, is not required to have the forwardable flag set; and,\n+#\n+# 2) If a S4U2proxy request receives a KRB_ERROR of the KDC_ERR_BADOPTION error code\n+#    and the ticket to the middle service is not forwardable, OpenJDK will try the same\n+#    request in another KDC instead of treating it as a fatal failure.\n+#\n+# The default value is \"false\".\n+#\n+# If a system property of the same name is also specified, it supersedes the\n+# security property value defined here.\n+#\n+# [1] https:\/\/docs.microsoft.com\/en-us\/openspecs\/windows_protocols\/ms-sfu\/bde93b0e-f3c9-4ddf-9f44-e1453be7af5a\n+#jdk.security.krb5.s4u2proxy.acceptNonForwardableServiceTicket=false\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import sun.security.krb5.internal.Ticket;\n@@ -123,0 +122,4 @@\n+\n+    \/\/ On the Initiator side, contains the final TGS to a service on both\n+    \/\/ delegation and no-delegation scenarios.\n+    \/\/ On the Acceptor side, contains a user TGS usable for delegation.\n@@ -125,1 +128,0 @@\n-    Ticket serviceTicket;\n@@ -551,1 +553,1 @@\n-                        peerName, serviceTicket);\n+                        peerName, serviceCreds);\n@@ -626,1 +628,1 @@\n-                    final Krb5ProxyCredential second;\n+                    final Krb5ProxyCredential proxyCreds;\n@@ -628,1 +630,1 @@\n-                        second = null;\n+                        proxyCreds = null;\n@@ -631,2 +633,2 @@\n-                        second = (Krb5ProxyCredential) myCred;\n-                        tgt = second.self.getKrb5Credentials();\n+                        proxyCreds = (Krb5ProxyCredential) myCred;\n+                        tgt = proxyCreds.self.getKrb5Credentials();\n@@ -660,1 +662,1 @@\n-                                        second == null ?\n+                                        proxyCreds == null ?\n@@ -662,1 +664,1 @@\n-                                            second.getName().getKrb5PrincipalName().getName(),\n+                                            proxyCreds.getName().getKrb5PrincipalName().getName(),\n@@ -693,1 +695,1 @@\n-                        if (second == null) {\n+                        if (proxyCreds == null) {\n@@ -700,2 +702,2 @@\n-                                    second.tkt,\n-                                    second.getName().getKrb5PrincipalName(),\n+                                    proxyCreds.userCreds,\n+                                    proxyCreds.getName().getKrb5PrincipalName(),\n@@ -847,1 +849,1 @@\n-                serviceTicket = token.getKrbApReq().getCreds().getTicket();\n+                serviceCreds = token.getKrbApReq().getCreds();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Context.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -395,1 +395,1 @@\n-            return new Krb5ProxyCredential(this, kname, newCred.getTicket());\n+            return new Krb5ProxyCredential(this, kname, newCred);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5InitCredential.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import sun.security.krb5.internal.Ticket;\n@@ -53,1 +52,1 @@\n-    private final Krb5NameElement client;     \/\/ the client\n+    private final Krb5NameElement user;     \/\/ the user\n@@ -55,3 +54,3 @@\n-    \/\/ The ticket with cname=client and sname=self. This can be a normal\n-    \/\/ service ticket or an S4U2self ticket.\n-    public final Ticket tkt;\n+    \/\/ The creds with cname=user and sname=self. The ticket inside can\n+    \/\/ be either a normal service ticket or an S4U2self ticket.\n+    public final Credentials userCreds;\n@@ -59,2 +58,2 @@\n-    Krb5ProxyCredential(Krb5InitCredential self, Krb5NameElement client,\n-            Ticket tkt) {\n+    Krb5ProxyCredential(Krb5InitCredential self, Krb5NameElement user,\n+            Credentials userCreds) {\n@@ -62,2 +61,2 @@\n-        this.tkt = tkt;\n-        this.client = client;\n+        this.userCreds = userCreds;\n+        this.user = user;\n@@ -66,1 +65,1 @@\n-    \/\/ The client name behind the proxy\n+    \/\/ The user name behind the proxy\n@@ -69,1 +68,1 @@\n-        return client;\n+        return user;\n@@ -133,1 +132,1 @@\n-                        proxyCreds.getTicket());\n+                        proxyCreds);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5ProxyCredential.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import sun.security.util.SecurityProperties;\n+\n@@ -67,0 +69,4 @@\n+    public final static boolean S4U2PROXY_ACCEPT_NON_FORWARDABLE\n+            = \"true\".equalsIgnoreCase(SecurityProperties.privilegedGetOverridable(\n+                    \"jdk.security.krb5.s4u2proxy.acceptNonForwardableServiceTicket\"));\n+\n@@ -100,1 +106,1 @@\n-    \/\/ Warning: called by NativeCreds.c and nativeccache.c\n+    \/\/ Warning: also called by NativeCreds.c and nativeccache.c\n@@ -481,1 +487,1 @@\n-     * @param ccreds client's initial credential.\n+     * @param initCreds client's initial credential.\n@@ -489,1 +495,1 @@\n-                                                  Credentials ccreds)\n+                                                  Credentials initCreds)\n@@ -491,1 +497,1 @@\n-        return CredentialsUtil.acquireServiceCreds(service, ccreds);\n+        return CredentialsUtil.acquireServiceCreds(service, initCreds);\n@@ -495,2 +501,2 @@\n-            Credentials ccreds) throws KrbException, IOException {\n-        return CredentialsUtil.acquireS4U2selfCreds(user, ccreds);\n+            Credentials middleTGT) throws KrbException, IOException {\n+        return CredentialsUtil.acquireS4U2selfCreds(user, middleTGT);\n@@ -500,1 +506,1 @@\n-            Ticket second, PrincipalName client, Credentials ccreds)\n+            Credentials userCreds, PrincipalName client, Credentials middleTGT)\n@@ -503,1 +509,1 @@\n-                service, second, client, ccreds);\n+                service, userCreds, client, middleTGT);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Credentials.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-    public byte[] send(byte[] obuf)\n+    public byte[] send(KrbKdcReq req)\n@@ -196,0 +196,1 @@\n+        byte[] obuf = req.encoding();\n@@ -199,1 +200,1 @@\n-        return send(obuf, useTCP);\n+        return send(req, useTCP);\n@@ -202,1 +203,1 @@\n-    private byte[] send(byte[] obuf, boolean useTCP)\n+    private byte[] send(KrbKdcReq req, boolean useTCP)\n@@ -205,1 +206,1 @@\n-        if (obuf == null)\n+        if (req == null)\n@@ -228,1 +229,1 @@\n-            ibuf = sendIfPossible(obuf, tempKdc.next(), useTCP);\n+            ibuf = sendIfPossible(req, tempKdc.next(), useTCP);\n@@ -233,1 +234,1 @@\n-                    ibuf = sendIfPossible(obuf, tempKdc.next(), useTCP);\n+                    ibuf = sendIfPossible(req, tempKdc.next(), useTCP);\n@@ -246,1 +247,1 @@\n-    \/\/ send the AS Request to the specified KDC\n+    \/\/ send the KDC Request to the specified KDC\n@@ -248,1 +249,1 @@\n-    private byte[] sendIfPossible(byte[] obuf, String tempKdc, boolean useTCP)\n+    private byte[] sendIfPossible(KrbKdcReq req, String tempKdc, boolean useTCP)\n@@ -252,1 +253,1 @@\n-            byte[] ibuf = send(obuf, tempKdc, useTCP);\n+            byte[] ibuf = send(req, tempKdc, useTCP);\n@@ -262,1 +263,1 @@\n-                    ibuf = send(obuf, tempKdc, true);\n+                    ibuf = send(req, tempKdc, true);\n@@ -266,0 +267,7 @@\n+                } else if (ke.getErrorCode() == Krb5.KDC_ERR_BADOPTION\n+                        && Credentials.S4U2PROXY_ACCEPT_NON_FORWARDABLE\n+                        && req instanceof KrbTgsReq tgsReq) {\n+                    Credentials extra = tgsReq.getAdditionalCreds();\n+                    if (extra != null && !extra.isForwardable()) {\n+                        throw new KrbException(\"S4U2Proxy with non-forwardable ticket\");\n+                    }\n@@ -281,1 +289,1 @@\n-    \/\/ send the AS Request to the specified KDC\n+    \/\/ send the KDC Request to the specified KDC\n@@ -283,1 +291,1 @@\n-    private byte[] send(byte[] obuf, String tempKdc, boolean useTCP)\n+    private byte[] send(KrbKdcReq req, String tempKdc, boolean useTCP)\n@@ -286,1 +294,1 @@\n-        if (obuf == null)\n+        if (req == null)\n@@ -339,0 +347,1 @@\n+        byte[] obuf = req.encoding();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KdcComm.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-public class KrbAsReq {\n+public class KrbAsReq extends KrbKdcReq {\n@@ -168,4 +168,1 @@\n-    }\n-\n-    byte[] encoding() throws IOException, Asn1Exception {\n-        return asReqMessg.asn1Encode();\n+        obuf = asReqMessg.asn1Encode();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbAsReq.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -345,1 +345,1 @@\n-                rep = new KrbAsRep(comm.send(req.encoding()));\n+                rep = new KrbAsRep(comm.send(req));\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbAsReqBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.security.krb5;\n+\n+\/**\n+ * Parent class for KrbAsReq and KrbTgsReq.\n+ *\/\n+abstract class KrbKdcReq {\n+\n+    protected byte[] obuf;\n+\n+    public byte[] encoding() {\n+        return obuf;\n+    }\n+}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbKdcReq.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    private Ticket secondTicket;\n+    private Credentials additionalCreds;\n@@ -118,1 +118,1 @@\n-        this.secondTicket = tgsReq.getSecondTicket();\n+        this.additionalCreds = tgsReq.getAdditionalCreds();\n@@ -129,1 +129,2 @@\n-        return new sun.security.krb5.internal.ccache.Credentials(rep, secondTicket);\n+        return new sun.security.krb5.internal.ccache.Credentials(\n+                rep, additionalCreds == null ? null : additionalCreds.ticket);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbTgsRep.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public class KrbTgsReq {\n+public class KrbTgsReq extends KrbKdcReq {\n@@ -53,1 +53,1 @@\n-    private Ticket secondTicket = null;\n+    private Credentials additionalCreds = null;\n@@ -57,3 +57,0 @@\n-    private byte[] obuf;\n-    private byte[] ibuf;\n-\n@@ -64,2 +61,2 @@\n-            Ticket[] additionalTickets, PAData[] extraPAs)\n-        throws KrbException, IOException {\n+            Credentials additionalCreds, PAData[] extraPAs)\n+            throws KrbException, IOException {\n@@ -67,14 +64,14 @@\n-             asCreds,\n-             cname,\n-             clientAlias,\n-             sname,\n-             serverAlias,\n-             null, \/\/ KerberosTime from\n-             null, \/\/ KerberosTime till\n-             null, \/\/ KerberosTime rtime\n-             null, \/\/ int[] eTypes\n-             null, \/\/ HostAddresses addresses\n-             null, \/\/ AuthorizationData authorizationData\n-             additionalTickets,\n-             null, \/\/ EncryptionKey subKey\n-             extraPAs);\n+                asCreds,\n+                cname,\n+                clientAlias,\n+                sname,\n+                serverAlias,\n+                null, \/\/ KerberosTime from\n+                null, \/\/ KerberosTime till\n+                null, \/\/ KerberosTime rtime\n+                null, \/\/ int[] eTypes\n+                null, \/\/ HostAddresses addresses\n+                null, \/\/ AuthorizationData authorizationData\n+                additionalCreds,\n+                null, \/\/ EncryptionKey subKey\n+                extraPAs);\n@@ -95,1 +92,1 @@\n-            Ticket[] additionalTickets,\n+            Credentials additionalCreds,\n@@ -99,1 +96,1 @@\n-                addresses, authorizationData, additionalTickets, subKey, null);\n+                addresses, authorizationData, additionalCreds, subKey, null);\n@@ -115,1 +112,1 @@\n-            Ticket[] additionalTickets,\n+            Credentials additionalCreds,\n@@ -157,1 +154,1 @@\n-            if (from != null)  from = null;\n+            if (from != null) from = null;\n@@ -163,1 +160,1 @@\n-            if (rtime != null)  rtime = null;\n+            if (rtime != null) rtime = null;\n@@ -166,1 +163,1 @@\n-            if (additionalTickets == null)\n+            if (additionalCreds == null)\n@@ -171,1 +168,1 @@\n-            secondTicket = additionalTickets[0];\n+            this.additionalCreds = additionalCreds;\n@@ -173,2 +170,2 @@\n-            if (additionalTickets != null)\n-                additionalTickets = null;\n+            if (additionalCreds != null)\n+                additionalCreds = null;\n@@ -190,1 +187,1 @@\n-                additionalTickets,\n+                additionalCreds,\n@@ -209,18 +206,0 @@\n-    \/**\n-     * Sends a TGS request to the realm of the target.\n-     * @throws KrbException\n-     * @throws IOException\n-     *\/\n-    public void send() throws IOException, KrbException {\n-        String realmStr = null;\n-        if (servName != null)\n-            realmStr = servName.getRealmString();\n-        KdcComm comm = new KdcComm(realmStr);\n-        ibuf = comm.send(obuf);\n-    }\n-\n-    public KrbTgsRep getReply()\n-        throws KrbException, IOException {\n-        return new KrbTgsRep(ibuf, this);\n-    }\n-\n@@ -232,5 +211,5 @@\n-        KrbTgsRep tgs_rep = null;\n-        String kdc = null;\n-        send();\n-        tgs_rep = getReply();\n-        return tgs_rep.getCreds();\n+        String realmStr = servName != null\n+                ? servName.getRealmString()\n+                : null;\n+        KdcComm comm = new KdcComm(realmStr);\n+        return new KrbTgsRep(comm.send(this), this).getCreds();\n@@ -256,1 +235,1 @@\n-                         Ticket[] additionalTickets,\n+                         Credentials additionalCreds,\n@@ -305,0 +284,2 @@\n+        Ticket[] additionalTickets = additionalCreds == null ? null\n+                : new Ticket[] { additionalCreds.getTicket() };\n@@ -350,2 +331,2 @@\n-    Ticket getSecondTicket() {\n-        return secondTicket;\n+    Credentials getAdditionalCreds() {\n+        return additionalCreds;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbTgsReq.java","additions":38,"deletions":57,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import sun.security.util.DerValue;\n@@ -58,1 +57,1 @@\n-     * @param ccreds the TGT of the middle service\n+     * @param middleTGT the TGT of the middle service\n@@ -62,5 +61,2 @@\n-            Credentials ccreds) throws KrbException, IOException {\n-        if (!ccreds.isForwardable()) {\n-            throw new KrbException(\"S4U2self needs a FORWARDABLE ticket\");\n-        }\n-        PrincipalName sname = ccreds.getClient();\n+            Credentials middleTGT) throws KrbException, IOException {\n+        PrincipalName sname = middleTGT.getClient();\n@@ -68,1 +64,1 @@\n-        String localRealm = ccreds.getClient().getRealmString();\n+        String localRealm = middleTGT.getClient().getRealmString();\n@@ -76,1 +72,1 @@\n-            if (ccreds.getClientAlias() != null) {\n+            if (middleTGT.getClientAlias() != null) {\n@@ -83,1 +79,1 @@\n-                sname = ccreds.getClientAlias();\n+                sname = middleTGT.getClientAlias();\n@@ -90,1 +86,1 @@\n-                ccreds, ccreds.getClient(), sname, user,\n+                middleTGT, middleTGT.getClient(), sname, user,\n@@ -94,1 +90,1 @@\n-                                        ccreds.getSessionKey()).asn1Encode()),\n+                                        middleTGT.getSessionKey()).asn1Encode()),\n@@ -104,1 +100,1 @@\n-        if (!creds.isForwardable()) {\n+        if (!creds.isForwardable() && !Credentials.S4U2PROXY_ACCEPT_NON_FORWARDABLE) {\n@@ -114,3 +110,3 @@\n-     * @param second the client's service ticket to the middle server\n-     * @param ccreds the TGT of the middle server\n-     * @return the creds (cname=client, sname=backend)\n+     * @param userCreds containing the user's service ticket to the middle server\n+     * @param middleTGT the TGT of the middle server\n+     * @return the creds (cname=user, sname=backend)\n@@ -119,2 +115,2 @@\n-                String backend, Ticket second,\n-                PrincipalName client, Credentials ccreds)\n+                String backend, Credentials userCreds,\n+                PrincipalName client, Credentials middleTGT)\n@@ -124,1 +120,1 @@\n-        String localRealm = ccreds.getClient().getRealmString();\n+        String localRealm = middleTGT.getClient().getRealmString();\n@@ -139,2 +135,2 @@\n-                ccreds, ccreds.getClient(), backendPrincipal, null,\n-                new Ticket[] {second}, new PAData[] {\n+                middleTGT, middleTGT.getClient(), backendPrincipal, null,\n+                userCreds, new PAData[] {\n@@ -162,1 +158,1 @@\n-     * @param ccreds client's initial credential\n+     * @param initCreds client's initial credential\n@@ -165,1 +161,1 @@\n-                String service, Credentials ccreds)\n+                String service, Credentials initCreds)\n@@ -167,3 +163,5 @@\n-        PrincipalName sname = new PrincipalName(service,\n-                PrincipalName.KRB_NT_UNKNOWN);\n-        return serviceCreds(sname, ccreds);\n+        return serviceCreds(new KDCOptions(), initCreds,\n+                initCreds.getClient(),\n+                new PrincipalName(service, PrincipalName.KRB_NT_UNKNOWN),\n+                null, null,\n+                null, S4U2Type.NONE);\n@@ -176,1 +174,1 @@\n-     * @param ccreds TGT in this realm\n+     * @param localTGT TGT in this realm\n@@ -183,1 +181,1 @@\n-            String serviceRealm, Credentials ccreds, boolean[] okAsDelegate)\n+            String serviceRealm, Credentials localTGT, boolean[] okAsDelegate)\n@@ -195,1 +193,1 @@\n-        for (cTgt = ccreds, i = 0; i < realms.length;) {\n+        for (cTgt = localTGT, i = 0; i < realms.length;) {\n@@ -312,1 +310,1 @@\n-            PrincipalName service, Credentials ccreds)\n+            PrincipalName service, Credentials initCreds)\n@@ -314,2 +312,2 @@\n-        return serviceCreds(new KDCOptions(), ccreds,\n-                ccreds.getClient(), service, null, null,\n+        return serviceCreds(new KDCOptions(), initCreds,\n+                initCreds.getClient(), service, null, null,\n@@ -328,1 +326,1 @@\n-            PrincipalName user, Ticket[] additionalTickets,\n+            PrincipalName user, Credentials additionalCreds,\n@@ -334,1 +332,1 @@\n-                        s4u2Type, user, additionalTickets, extraPAs);\n+                        s4u2Type, user, additionalCreds, extraPAs);\n@@ -342,1 +340,1 @@\n-                user, additionalTickets, extraPAs);\n+                user, additionalCreds, extraPAs);\n@@ -353,1 +351,1 @@\n-            Ticket[] additionalTickets, PAData[] extraPAs)\n+            Credentials additionalCreds, PAData[] extraPAs)\n@@ -366,1 +364,1 @@\n-                            additionalTickets, refSname.getRealmString());\n+                            additionalCreds, refSname.getRealmString());\n@@ -371,1 +369,1 @@\n-                        user, additionalTickets, extraPAs);\n+                        user, additionalCreds, extraPAs);\n@@ -383,1 +381,1 @@\n-                                additionalTickets, server.getRealmString(),\n+                                additionalCreds, server.getRealmString(),\n@@ -401,3 +399,1 @@\n-                    if (additionalTickets == null ||\n-                            additionalTickets.length == 0 ||\n-                            credsInOut[1] == null) {\n+                    if (additionalCreds == null || credsInOut[1] == null) {\n@@ -407,1 +403,1 @@\n-                    additionalTickets[0] = credsInOut[1].getTicket();\n+                    additionalCreds = credsInOut[1];\n@@ -439,1 +435,1 @@\n-            Ticket[] additionalTickets, PAData[] extraPAs)\n+            Credentials additionalCreds, PAData[] extraPAs)\n@@ -476,1 +472,1 @@\n-                refSname, sname, additionalTickets, extraPAs);\n+                refSname, sname, additionalCreds, extraPAs);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/CredentialsUtil.java","additions":41,"deletions":45,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Vector;\n@@ -195,4 +194,0 @@\n-\n-    public byte[] asn1EncodeReqBody() throws Asn1Exception, IOException {\n-        return reqBody.asn1Encode(msgType);\n-    }\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/KDCReq.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-            PrincipalName user, Ticket[] userSvcTickets, String fromRealm,\n+            PrincipalName user, Credentials additionalCreds, String fromRealm,\n@@ -117,2 +117,2 @@\n-        Ticket userSvcTicket = (userSvcTickets != null ?\n-                userSvcTickets[0] : null);\n+        Ticket userSvcTicket = (additionalCreds != null ?\n+                additionalCreds.getTicket() : null);\n@@ -155,3 +155,3 @@\n-            Ticket[] userSvcTickets, String fromRealm) {\n-        Ticket userSvcTicket = (userSvcTickets != null ?\n-                userSvcTickets[0] : null);\n+            Credentials additionalCreds, String fromRealm) {\n+        Ticket userSvcTicket = (additionalCreds != null ?\n+                additionalCreds.getTicket() : null);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ReferralsCache.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    RealmException, KrbApErrException, IOException {\n+            RealmException, KrbApErrException, IOException {\n@@ -93,1 +93,1 @@\n-    RealmException, KrbApErrException, IOException {\n+            RealmException, KrbApErrException, IOException {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/Ticket.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -34,0 +35,2 @@\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -252,0 +255,8 @@\n+        \/**\n+         * If true, S4U2self ticket is not set forwardable.\n+         *\/\n+        S4U2SELF_NOT_FORWARDABLE,\n+        \/**\n+         * If true, allow S4U2self ticket not forwardable.\n+         *\/\n+        S4U2SELF_ALLOW_NOT_FORWARDABLE,\n@@ -444,1 +455,1 @@\n-     * Adds a new principal to this realm with a random password\n+     * Adds a new principal to this realm with a generated password\n@@ -449,1 +460,1 @@\n-        addPrincipal(user, randomPassword());\n+        addPrincipal(user, randomPassword(user + \"@\" + realm));\n@@ -610,1 +621,2 @@\n-     * Generates a 32-char random password\n+     * Generates a 32-char password\n+     * @param user the string to generate from, random is null\n@@ -613,5 +625,19 @@\n-    private static char[] randomPassword() {\n-        char[] pass = new char[32];\n-        Random r = new Random();\n-        for (int i=0; i<31; i++)\n-            pass[i] = (char)('a' + r.nextInt(26));\n+    private static char[] randomPassword(String user) {\n+        char[] pass;\n+        if (user == null) {\n+            pass = new char[32];\n+            Random r = new Random();\n+            for (int i = 0; i < 31; i++) {\n+                pass[i] = (char) ('a' + r.nextInt(26));\n+            }\n+        } else {\n+            try {\n+                pass = Base64.getEncoder().encodeToString(\n+                        MessageDigest.getInstance(\"SHA-256\").digest((user)\n+                                .getBytes(StandardCharsets.UTF_8)))\n+                        .substring(0, 32)\n+                        .toCharArray();\n+            } catch (NoSuchAlgorithmException e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n@@ -632,1 +658,1 @@\n-        return genKey0(randomPassword(), \"NOTHING\", null, eType, null);\n+        return genKey0(randomPassword(null), \"NOTHING\", null, eType, null);\n@@ -793,1 +819,1 @@\n-            System.out.println(realm + \"> \" + tgsReq.reqBody.cname +\n+            log(tgsReq.reqBody.cname +\n@@ -813,1 +839,1 @@\n-                System.out.println(realm + \"> verifying referral for \" +\n+                log(\"verifying referral for \" +\n@@ -822,1 +848,1 @@\n-                    System.out.println(realm + \"> referral to \" +\n+                    log(\"referral to \" +\n@@ -845,1 +871,1 @@\n-                        System.out.println(realm + \"> presenting a ticket of \"\n+                        log(\"presenting a ticket of \"\n@@ -852,1 +878,1 @@\n-                            System.out.println(realm + \"> See PA_FOR_USER \"\n+                            log(\"See PA_FOR_USER \"\n@@ -865,0 +891,3 @@\n+                    } else if (options.get(Option.S4U2SELF_NOT_FORWARDABLE) == Boolean.TRUE) {\n+                        \/\/ Requsted not forwardable\n+                        allowForwardable = false;\n@@ -939,2 +968,3 @@\n-                    if (!tktEncPart.flags.get(Krb5.TKT_OPTS_FORWARDABLE)) {\n-                        \/\/throw new KrbException(Krb5.KDC_ERR_BADOPTION);\n+                    if (!tktEncPart.flags.get(Krb5.TKT_OPTS_FORWARDABLE)\n+                            && options.get(Option.S4U2SELF_ALLOW_NOT_FORWARDABLE) != Boolean.TRUE) {\n+                        throw new KrbException(Krb5.KDC_ERR_BADOPTION);\n@@ -943,1 +973,1 @@\n-                    System.out.println(realm + \"> and an additional ticket of \"\n+                    log(\"and an additional ticket of \"\n@@ -947,1 +977,1 @@\n-                            System.out.println(realm + \"> S4U2proxy OK\");\n+                            log(\"S4U2proxy OK\");\n@@ -1069,1 +1099,1 @@\n-            System.out.println(realm + \"> \" + asReq.reqBody.cname +\n+            log(asReq.reqBody.cname +\n@@ -1604,0 +1634,4 @@\n+    void log(String s) {\n+        System.out.println(realm + \":\" + port + \"> \" + s);\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/KDC.java","additions":54,"deletions":20,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8272162\n+ * @summary S4U2Self ticket without forwardable flag\n+ * @library \/test\/lib\n+ * @compile -XDignore.symbol.file S4U2selfNotF.java\n+ * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts\n+ *                   -Djdk.security.krb5.s4u2proxy.acceptNonForwardableServiceTicket=true\n+ *                   S4U2selfNotF\n+ *\/\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.jgss.GSSUtil;\n+import sun.security.krb5.Config;\n+\n+public class S4U2selfNotF {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Create 2 KDCs that has almost the same settings\n+        OneKDC[] kdcs = new OneKDC[2];\n+        boolean[] touched = new boolean[2];\n+        for (int i = 0; i < 2; i++) {\n+            final int pos = i;\n+            kdcs[i] = new OneKDC(null) {\n+                protected byte[] processTgsReq(byte[] in) throws Exception {\n+                    touched[pos] = true;\n+                    return super.processTgsReq(in);\n+                }\n+            };\n+            kdcs[i].setOption(KDC.Option.ALLOW_S4U2SELF,\n+                    List.of(OneKDC.USER + \"@\" + OneKDC.REALM));\n+            kdcs[i].setOption(KDC.Option.ALLOW_S4U2PROXY, Map.of(\n+                    OneKDC.USER + \"@\" + OneKDC.REALM,\n+                    List.of(OneKDC.BACKEND + \"@\" + OneKDC.REALM)));\n+        }\n+        kdcs[0].writeJAASConf();\n+\n+        \/\/ except that the 1st issues a non-forwardable S4U2self\n+        \/\/ ticket and only the 2nd accepts it\n+        kdcs[0].setOption(KDC.Option.S4U2SELF_NOT_FORWARDABLE, true);\n+        kdcs[1].setOption(KDC.Option.S4U2SELF_ALLOW_NOT_FORWARDABLE, true);\n+\n+        Files.write(Path.of(OneKDC.KRB5_CONF), String.format(\"\"\"\n+                [libdefaults]\n+                default_realm = RABBIT.HOLE\n+                forwardable = true\n+                default_keytab_name = localkdc.ktab\n+\n+                [realms]\n+                RABBIT.HOLE = {\n+                    kdc = kdc.rabbit.hole:%d kdc.rabbit.hole:%d\n+                }\n+                \"\"\", kdcs[0].getPort(), kdcs[1].getPort())\n+                .getBytes(StandardCharsets.UTF_8));\n+        Config.refresh();\n+\n+        Context c = Context.fromJAAS(\"client\");\n+        c = c.impersonate(OneKDC.USER2);\n+        c.startAsClient(OneKDC.BACKEND, GSSUtil.GSS_KRB5_MECH_OID);\n+        c.take(new byte[0]);\n+\n+        Asserts.assertTrue(touched[0]);     \/\/ get S4U2self from 1st one\n+        Asserts.assertTrue(touched[1]);     \/\/ get S4U2proxy from 2nd one\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/S4U2selfNotF.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}