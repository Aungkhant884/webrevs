{"files":[{"patch":"@@ -353,5 +353,12 @@\n-                ArrayList<ByteBuffer> l = new ArrayList<>(3);\n-                l.add(getHeader(chunklen));\n-                l.add(item);\n-                l.add(ByteBuffer.wrap(CRLF));\n-                http1Exchange.appendToOutgoing(l);\n+                if (chunklen > 0) {\n+                    ArrayList<ByteBuffer> l = new ArrayList<>(3);\n+                    l.add(getHeader(chunklen));\n+                    l.add(item);\n+                    l.add(ByteBuffer.wrap(CRLF));\n+                    http1Exchange.appendToOutgoing(l);\n+                } else {\n+                    if (debug.on()) {\n+                        debug.log(\"dropping empty buffer, request one more\");\n+                    }\n+                    request(1);\n+                }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.Closeable;\n@@ -26,3 +27,8 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.util.concurrent.Executor;\n+import java.net.URI;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n@@ -31,5 +37,0 @@\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -37,0 +38,1 @@\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -38,3 +40,2 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n-import jdk.httpclient.test.lib.http2.Http2TestExchange;\n-import jdk.httpclient.test.lib.http2.Http2Handler;\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n@@ -46,1 +47,8 @@\n-public abstract class AbstractNoBody {\n+import static java.lang.System.err;\n+import static java.lang.System.out;\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static org.testng.Assert.assertEquals;\n+\n+public abstract class AbstractNoBody implements HttpServerAdapters {\n@@ -49,4 +57,4 @@\n-    HttpServer httpTestServer;         \/\/ HTTP\/1.1    [ 4 servers ]\n-    HttpsServer httpsTestServer;       \/\/ HTTPS\/1.1\n-    Http2TestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n-    Http2TestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n+    HttpTestServer httpTestServer;         \/\/ HTTP\/1.1    [ 4 servers ]\n+    HttpTestServer httpsTestServer;       \/\/ HTTPS\/1.1\n+    HttpTestServer http2TestServer;   \/\/ HTTP\/2 ( h2c )\n+    HttpTestServer https2TestServer;  \/\/ HTTP\/2 ( h2  )\n@@ -65,1 +73,1 @@\n-    static final Executor executor = Executors.newFixedThreadPool(ITERATION_COUNT * 2);\n+    static final ExecutorService executor = Executors.newFixedThreadPool(ITERATION_COUNT * 2);\n@@ -67,0 +75,9 @@\n+    static final AtomicLong clientCount = new AtomicLong();\n+    static final long start = System.nanoTime();\n+    public static String now() {\n+        long now = System.nanoTime() - start;\n+        long secs = now \/ 1000_000_000;\n+        long mill = (now % 1000_000_000) \/ 1000_000;\n+        long nan = now % 1000_000;\n+        return String.format(\"[%d s, %d ms, %d ns] \", secs, mill, nan);\n+    }\n@@ -91,1 +108,17 @@\n-    HttpClient newHttpClient() {\n+    private volatile HttpClient sharedClient;\n+\n+    static Version version(String uri) {\n+        if (uri.contains(\"\/http1\/\") || uri.contains(\"\/https1\/\"))\n+            return HTTP_1_1;\n+        if (uri.contains(\"\/http2\/\") || uri.contains(\"\/https2\/\"))\n+            return HTTP_2;\n+        return null;\n+    }\n+\n+    HttpRequest.Builder newRequestBuilder(String uri) {\n+        var builder = HttpRequest.newBuilder(URI.create(uri));\n+        return builder;\n+    }\n+\n+    private HttpClient makeNewClient() {\n+        clientCount.incrementAndGet();\n@@ -94,0 +127,1 @@\n+                .proxy(NO_PROXY)\n@@ -98,3 +132,19 @@\n-    static String serverAuthority(HttpServer server) {\n-        return InetAddress.getLoopbackAddress().getHostName() + \":\"\n-                + server.getAddress().getPort();\n+    HttpClient newHttpClient(boolean share) {\n+        if (!share) return makeNewClient();\n+        HttpClient shared = sharedClient;\n+        if (shared != null) return shared;\n+        synchronized (this) {\n+            shared = sharedClient;\n+            if (shared == null) {\n+                shared = sharedClient = makeNewClient();\n+            }\n+            return shared;\n+        }\n+    }\n+\n+    record CloseableClient(HttpClient client, boolean shared)\n+            implements Closeable {\n+        public void close() {\n+            if (shared) return;\n+            client.close();\n+        }\n@@ -106,0 +156,1 @@\n+        HttpServerAdapters.enableServerLogging();\n@@ -111,17 +162,14 @@\n-        HttpHandler h1_fixedLengthNoBodyHandler = new HTTP1_FixedLengthNoBodyHandler();\n-        HttpHandler h1_chunkNoBodyHandler = new HTTP1_ChunkedNoBodyHandler();\n-        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-        httpTestServer = HttpServer.create(sa, 0);\n-        httpTestServer.setExecutor(serverExecutor);\n-        httpTestServer.createContext(\"\/http1\/noBodyFixed\", h1_fixedLengthNoBodyHandler);\n-        httpTestServer.createContext(\"\/http1\/noBodyChunk\", h1_chunkNoBodyHandler);\n-        httpURI_fixed = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\/noBodyFixed\";\n-        httpURI_chunk = \"http:\/\/\" + serverAuthority(httpTestServer) + \"\/http1\/noBodyChunk\";\n-\n-        httpsTestServer = HttpsServer.create(sa, 0);\n-        httpsTestServer.setExecutor(serverExecutor);\n-        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n-        httpsTestServer.createContext(\"\/https1\/noBodyFixed\", h1_fixedLengthNoBodyHandler);\n-        httpsTestServer.createContext(\"\/https1\/noBodyChunk\", h1_chunkNoBodyHandler);\n-        httpsURI_fixed = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\/noBodyFixed\";\n-        httpsURI_chunk = \"https:\/\/\" + serverAuthority(httpsTestServer) + \"\/https1\/noBodyChunk\";\n+        HttpTestHandler h1_fixedLengthNoBodyHandler = new FixedLengthNoBodyHandler();\n+        HttpTestHandler h1_chunkNoBodyHandler = new ChunkedNoBodyHandler();\n+\n+        httpTestServer = HttpTestServer.create(HTTP_1_1, null, serverExecutor);\n+        httpTestServer.addHandler(h1_fixedLengthNoBodyHandler,\"\/http1\/noBodyFixed\");\n+        httpTestServer.addHandler(h1_chunkNoBodyHandler, \"\/http1\/noBodyChunk\");\n+        httpURI_fixed = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/noBodyFixed\";\n+        httpURI_chunk = \"http:\/\/\" + httpTestServer.serverAuthority() + \"\/http1\/noBodyChunk\";\n+\n+        httpsTestServer = HttpTestServer.create(HTTP_1_1, sslContext, serverExecutor);\n+        httpsTestServer.addHandler(h1_fixedLengthNoBodyHandler,\"\/https1\/noBodyFixed\");\n+        httpsTestServer.addHandler(h1_chunkNoBodyHandler, \"\/https1\/noBodyChunk\");\n+        httpsURI_fixed = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/noBodyFixed\";\n+        httpsURI_chunk = \"https:\/\/\" + httpsTestServer.serverAuthority() + \"\/https1\/noBodyChunk\";\n@@ -130,2 +178,2 @@\n-        Http2Handler h2_fixedLengthNoBodyHandler = new HTTP2_FixedLengthNoBodyHandler();\n-        Http2Handler h2_chunkedNoBodyHandler = new HTTP2_ChunkedNoBodyHandler();\n+        HttpTestHandler h2_fixedLengthNoBodyHandler = new FixedLengthNoBodyHandler();\n+        HttpTestHandler h2_chunkedNoBodyHandler = new ChunkedNoBodyHandler();\n@@ -133,1 +181,1 @@\n-        http2TestServer = new Http2TestServer(\"localhost\", false, 0, serverExecutor, null);\n+        http2TestServer = HttpTestServer.create(HTTP_2, null, serverExecutor);\n@@ -139,1 +187,1 @@\n-        https2TestServer = new Http2TestServer(\"localhost\", true, 0, serverExecutor, sslContext);\n+        https2TestServer = HttpTestServer.create(HTTP_2, sslContext, serverExecutor);\n@@ -149,0 +197,10 @@\n+\n+        var shared = newHttpClient(true);\n+\n+        out.println(\"HTTP\/1.1 server       (http) listening at: \" + httpTestServer.serverAuthority());\n+        out.println(\"HTTP\/1.1 server       (TLS)  listening at: \" + httpsTestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server       (h2c)  listening at: \" + http2TestServer.serverAuthority());\n+        out.println(\"HTTP\/2   server       (h2)   listening at: \" + https2TestServer.serverAuthority());\n+\n+        out.println(\"Shared client is: \" + shared);\n+\n@@ -155,2 +213,3 @@\n-        httpTestServer.stop(0);\n-        httpsTestServer.stop(0);\n+        sharedClient.close();\n+        httpTestServer.stop();\n+        httpsTestServer.stop();\n@@ -159,0 +218,2 @@\n+        executor.close();\n+        serverExecutor.close();\n@@ -162,1 +223,0 @@\n-    static final long start = System.nanoTime();\n@@ -165,1 +225,0 @@\n-    static long elapsed() { return (System.nanoTime() - start)\/1000_000;}\n@@ -167,5 +226,0 @@\n-        long elapsed = elapsed();\n-        long sec = elapsed\/1000;\n-        long ms  = elapsed % 1000;\n-        String time = sec > 0 ? sec + \"sec \" : \"\";\n-        time = time + ms + \"ms\";\n@@ -173,1 +227,1 @@\n-                getClass().getSimpleName(), what, time, String.format(fmt,args));\n+                getClass().getSimpleName(), what, now(), String.format(fmt,args));\n@@ -177,1 +231,1 @@\n-    static class HTTP1_FixedLengthNoBodyHandler implements HttpHandler {\n+    static class FixedLengthNoBodyHandler implements HttpTestHandler {\n@@ -179,1 +233,1 @@\n-        public void handle(HttpExchange t) throws IOException {\n+        public void handle(HttpTestExchange t) throws IOException {\n@@ -181,0 +235,2 @@\n+            boolean echo = \"echo\".equals(t.getRequestURI().getRawQuery());\n+            byte[] reqbytes;\n@@ -182,1 +238,11 @@\n-                is.readAllBytes();\n+                reqbytes = is.readAllBytes();\n+            }\n+            if (echo) {\n+                t.sendResponseHeaders(200, reqbytes.length);\n+                if (reqbytes.length > 0) {\n+                    try (var os = t.getResponseBody()) {\n+                        os.write(reqbytes);\n+                    }\n+                }\n+            } else {\n+                t.sendResponseHeaders(200, 0); \/\/ no body\n@@ -184,1 +250,0 @@\n-            t.sendResponseHeaders(200, -1); \/\/ no body\n@@ -188,1 +253,1 @@\n-    static class HTTP1_ChunkedNoBodyHandler implements HttpHandler {\n+    static class ChunkedNoBodyHandler implements HttpTestHandler {\n@@ -190,1 +255,1 @@\n-        public void handle(HttpExchange t) throws IOException {\n+        public void handle(HttpTestExchange t) throws IOException {\n@@ -192,0 +257,2 @@\n+            boolean echo = \"echo\".equals(t.getRequestURI().getRawQuery());\n+            byte[] reqbytes;\n@@ -193,1 +260,10 @@\n-                is.readAllBytes();\n+                reqbytes = is.readAllBytes();\n+            }\n+            if (echo) {\n+                t.sendResponseHeaders(200, -1);\n+                try (var os = t.getResponseBody()) {\n+                    os.write(reqbytes);\n+                }\n+            } else {\n+                t.sendResponseHeaders(200, -1); \/\/ chunked\n+                t.getResponseBody().close();  \/\/ write nothing\n@@ -195,2 +271,0 @@\n-            t.sendResponseHeaders(200, 0); \/\/ chunked\n-            t.getResponseBody().close();  \/\/ write nothing\n@@ -200,9 +274,11 @@\n-    static class HTTP2_FixedLengthNoBodyHandler implements Http2Handler {\n-        @Override\n-        public void handle(Http2TestExchange t) throws IOException {\n-            \/\/out.println(\"NoBodyHandler received request to \" + t.getRequestURI());\n-            try (InputStream is = t.getRequestBody()) {\n-                is.readAllBytes();\n-            }\n-            t.sendResponseHeaders(200, 0);\n-        }\n+    \/*\n+     * Converts a ByteBuffer containing bytes encoded using\n+     * the given charset into a string.\n+     * This method does not throw but will replace\n+     * unrecognized sequences with the replacement character.\n+     *\/\n+    public static String asString(ByteBuffer buffer, Charset charset) {\n+        var decoded = charset.decode(buffer);\n+        char[] chars = new char[decoded.length()];\n+        decoded.get(chars);\n+        return new String(chars);\n@@ -211,10 +287,7 @@\n-    static class HTTP2_ChunkedNoBodyHandler implements Http2Handler {\n-        @Override\n-        public void handle(Http2TestExchange t) throws IOException {\n-            \/\/out.println(\"NoBodyHandler received request to \" + t.getRequestURI());\n-            try (InputStream is = t.getRequestBody()) {\n-                is.readAllBytes();\n-            }\n-            t.sendResponseHeaders(200, -1);\n-            t.getResponseBody().close();  \/\/ write nothing\n-        }\n+    \/*\n+     * Converts a ByteBuffer containing UTF-8 bytes into a\n+     * string. This method does not throw but will replace\n+     * unrecognized sequences with the replacement character.\n+     *\/\n+    public static String asString(ByteBuffer buffer) {\n+        return asString(buffer, StandardCharsets.UTF_8);\n","filename":"test\/jdk\/java\/net\/httpclient\/AbstractNoBody.java","additions":153,"deletions":80,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.net.URI;\n@@ -47,0 +46,1 @@\n+\n@@ -58,11 +58,13 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                                         .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                                         .build();\n-            BodyHandler<String> handler = i % 2 == 0 ? BodyHandlers.ofString()\n-                                                     : BodyHandlers.ofString(UTF_8);\n-            HttpResponse<String> response = client.send(req, handler);\n-            String body = response.body();\n-            assertEquals(body, \"\");\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                BodyHandler<String> handler = i % 2 == 0 ? BodyHandlers.ofString()\n+                        : BodyHandlers.ofString(UTF_8);\n+                HttpResponse<String> response = client.send(req, handler);\n+                String body = response.body();\n+                assertEquals(body, \"\");\n+            }\n@@ -70,2 +72,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n@@ -79,2 +79,3 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n@@ -82,8 +83,11 @@\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                                         .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                                         .build();\n-            Path p = Paths.get(\"NoBody_testAsFile.txt\");\n-            HttpResponse<Path> response = client.send(req, BodyHandlers.ofFile(p));\n-            Path bodyPath = response.body();\n-            assertTrue(Files.exists(bodyPath));\n-            assertEquals(Files.size(bodyPath), 0);\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                Path p = Paths.get(\"NoBody_testAsFile.txt\");\n+                HttpResponse<Path> response = client.send(req, BodyHandlers.ofFile(p));\n+                Path bodyPath = response.body();\n+                assertEquals(response.statusCode(), 200);\n+                assertTrue(Files.exists(bodyPath));\n+                assertEquals(Files.size(bodyPath), 0, Files.readString(bodyPath));\n+            }\n@@ -91,2 +95,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n@@ -100,2 +102,3 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n@@ -103,6 +106,8 @@\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                                         .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                                         .build();\n-            HttpResponse<byte[]> response = client.send(req, BodyHandlers.ofByteArray());\n-            byte[] body = response.body();\n-            assertEquals(body.length, 0);\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                HttpResponse<byte[]> response = client.send(req, BodyHandlers.ofByteArray());\n+                byte[] body = response.body();\n+                assertEquals(body.length, 0);\n+            }\n@@ -110,2 +115,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n","filename":"test\/jdk\/java\/net\/httpclient\/NoBodyPartOne.java","additions":39,"deletions":36,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308024\n+ * @summary Test request and response body handlers\/subscribers when there is no body\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.test.lib.net.SimpleSSLContext jdk.httpclient.test.lib.http2.Http2TestServer\n+ * @run testng\/othervm\n+ *      -Djdk.httpclient.HttpClient.log=all\n+ *      NoBodyPartThree\n+ *\/\n+\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+public class NoBodyPartThree extends AbstractNoBody {\n+\n+    static final AtomicInteger REQID = new AtomicInteger();\n+\n+    volatile boolean consumerHasBeenCalled;\n+    @Test(dataProvider = \"variants\")\n+    public void testAsByteArrayPublisher(String uri, boolean sameClient) throws Exception {\n+        printStamp(START, \"testAsByteArrayPublisher(\\\"%s\\\", %s)\", uri, sameClient);\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                var u = uri + \"\/testAsByteArrayPublisher\/first\/\" + REQID.getAndIncrement();\n+                HttpRequest req = newRequestBuilder(u + \"?echo\")\n+                        .PUT(BodyPublishers.ofByteArrays(List.of()))\n+                        .build();\n+                System.out.println(\"sending \" + req);\n+                Consumer<Optional<byte[]>> consumer = oba -> {\n+                    consumerHasBeenCalled = true;\n+                    oba.ifPresent(ba -> fail(\"Unexpected non-empty optional:\"\n+                            + asString(ByteBuffer.wrap(ba))));\n+                };\n+                consumerHasBeenCalled = false;\n+                var response = client.send(req, BodyHandlers.ofByteArrayConsumer(consumer));\n+                assertTrue(consumerHasBeenCalled);\n+                assertEquals(response.statusCode(), 200);\n+\n+                u = uri + \"\/testAsByteArrayPublisher\/second\/\" + REQID.getAndIncrement();\n+                req = newRequestBuilder(u + \"?echo\")\n+                        .PUT(BodyPublishers.ofByteArrays(List.of(new byte[0])))\n+                        .build();\n+                System.out.println(\"sending \" + req);\n+                consumerHasBeenCalled = false;\n+                response = client.send(req, BodyHandlers.ofByteArrayConsumer(consumer));\n+                assertTrue(consumerHasBeenCalled);\n+                assertEquals(response.statusCode(), 200);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"variants\")\n+    public void testStringPublisher(String uri, boolean sameClient) throws Exception {\n+        printStamp(START, \"testStringPublisher(\\\"%s\\\", %s)\", uri, sameClient);\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                var u = uri + \"\/testStringPublisher\/\" + REQID.getAndIncrement();\n+                HttpRequest req = newRequestBuilder(u + \"?echo\")\n+                        .PUT(BodyPublishers.ofString(\"\"))\n+                        .build();\n+                System.out.println(\"sending \" + req);\n+                HttpResponse<InputStream> response = client.send(req, BodyHandlers.ofInputStream());\n+                assertEquals(response.statusCode(), 200);\n+                byte[] body = response.body().readAllBytes();\n+                assertEquals(body.length, 0);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"variants\")\n+    public void testInputStreamPublisherBuffering(String uri, boolean sameClient) throws Exception {\n+        printStamp(START, \"testInputStreamPublisherBuffering(\\\"%s\\\", %s)\", uri, sameClient);\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                var u = uri + \"\/testInputStreamPublisherBuffering\/\" + REQID.getAndIncrement();\n+                HttpRequest req = newRequestBuilder(u + \"?echo\")\n+                        .PUT(BodyPublishers.ofInputStream(InputStream::nullInputStream))\n+                        .build();\n+                System.out.println(\"sending \" + req);\n+                HttpResponse<byte[]> response = client.send(req,\n+                        BodyHandlers.buffering(BodyHandlers.ofByteArray(), 1024));\n+                assertEquals(response.statusCode(), 200);\n+                byte[] body = response.body();\n+                assertEquals(body.length, 0);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"variants\")\n+    public void testEmptyArrayPublisher(String uri, boolean sameClient) throws Exception {\n+        printStamp(START, \"testEmptyArrayPublisher(\\\"%s\\\", %s)\", uri, sameClient);\n+        HttpClient client = null;\n+        for (int i=0; i< ITERATION_COUNT; i++) {\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                var u = uri + \"\/testEmptyArrayPublisher\/\" + REQID.getAndIncrement();\n+                HttpRequest req = newRequestBuilder(u + \"?echo\")\n+                        .PUT(BodyPublishers.ofByteArray(new byte[0]))\n+                        .build();\n+                System.out.println(\"sending \" + req);\n+                var response = client.send(req, BodyHandlers.ofLines());\n+                assertEquals(response.statusCode(), 200);\n+                assertEquals(response.body().toList(), List.of());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/NoBodyPartThree.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-import java.net.URI;\n+import java.nio.ByteBuffer;\n@@ -45,0 +45,1 @@\n+\n@@ -46,0 +47,1 @@\n+\n@@ -58,13 +60,16 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                    .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                    .build();\n-            Consumer<Optional<byte[]>>  consumer = oba -> {\n-                consumerHasBeenCalled = true;\n-                oba.ifPresent(ba -> fail(\"Unexpected non-empty optional:\" + ba));\n-            };\n-            consumerHasBeenCalled = false;\n-            client.send(req, BodyHandlers.ofByteArrayConsumer(consumer));\n-            assertTrue(consumerHasBeenCalled);\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                Consumer<Optional<byte[]>> consumer = oba -> {\n+                    consumerHasBeenCalled = true;\n+                    oba.ifPresent(ba -> fail(\"Unexpected non-empty optional: \"\n+                            + asString(ByteBuffer.wrap(ba))));\n+                };\n+                consumerHasBeenCalled = false;\n+                client.send(req, BodyHandlers.ofByteArrayConsumer(consumer));\n+                assertTrue(consumerHasBeenCalled);\n+            }\n@@ -72,2 +77,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n@@ -81,9 +84,11 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                    .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                    .build();\n-            HttpResponse<InputStream> response = client.send(req, BodyHandlers.ofInputStream());\n-            byte[] body = response.body().readAllBytes();\n-            assertEquals(body.length, 0);\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                HttpResponse<InputStream> response = client.send(req, BodyHandlers.ofInputStream());\n+                byte[] body = response.body().readAllBytes();\n+                assertEquals(body.length, 0);\n+            }\n@@ -91,2 +96,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n@@ -100,10 +103,12 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                    .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                    .build();\n-            HttpResponse<byte[]> response = client.send(req,\n-                    BodyHandlers.buffering(BodyHandlers.ofByteArray(), 1024));\n-            byte[] body = response.body();\n-            assertEquals(body.length, 0);\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                HttpResponse<byte[]> response = client.send(req,\n+                        BodyHandlers.buffering(BodyHandlers.ofByteArray(), 1024));\n+                byte[] body = response.body();\n+                assertEquals(body.length, 0);\n+            }\n@@ -111,2 +116,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n@@ -120,9 +123,11 @@\n-            if (!sameClient || client == null)\n-                client = newHttpClient();\n-\n-            HttpRequest req = HttpRequest.newBuilder(URI.create(uri))\n-                    .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n-                    .build();\n-            Object obj = new Object();\n-            HttpResponse<Object> response = client.send(req, BodyHandlers.replacing(obj));\n-            assertEquals(response.body(), obj);\n+            if (!sameClient || client == null) {\n+                client = newHttpClient(sameClient);\n+            }\n+            try (var cl = new CloseableClient(client, sameClient)) {\n+                HttpRequest req = newRequestBuilder(uri)\n+                        .PUT(BodyPublishers.ofString(SIMPLE_STRING))\n+                        .build();\n+                Object obj = new Object();\n+                HttpResponse<Object> response = client.send(req, BodyHandlers.replacing(obj));\n+                assertEquals(response.body(), obj);\n+            }\n@@ -130,2 +135,0 @@\n-        \/\/ We have created many clients here. Try to speed up their release.\n-        if (!sameClient) System.gc();\n","filename":"test\/jdk\/java\/net\/httpclient\/NoBodyPartTwo.java","additions":53,"deletions":50,"binary":false,"changes":103,"status":"modified"}]}