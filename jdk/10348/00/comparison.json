{"files":[{"patch":"@@ -1903,0 +1903,2 @@\n+\n+                        var.flags_field |= Flags.FINAL;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3665,1 +3665,0 @@\n-        int startPos = token.pos;\n@@ -3667,1 +3666,1 @@\n-            JCModifiers mods = optFinal(Flags.FINAL);\n+            JCModifiers mods = optFinal(0);\n@@ -3673,1 +3672,1 @@\n-            JCModifiers mods = toP(F.at(startPos).Modifiers(Flags.FINAL));\n+            JCModifiers mods = F.Modifiers(0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774 8256411 8256149 8259050 8266436 8267221 8271928 8275097 8293897\n@@ -74,0 +74,1 @@\n+import javax.lang.model.element.Modifier;\n@@ -1910,0 +1911,64 @@\n+    @Test \/\/JDK-8293897\n+    void testImplicitFinalInTryWithResources() throws IOException {\n+        String code = \"\"\"\n+                      package t;\n+                      class Test {\n+                          void test1() {\n+                              try (AutoCloseable ac = null) {}\n+                          }\n+                          void test2() {\n+                              try (@Ann AutoCloseable withAnnotation = null) {}\n+                          }\n+                          @interface Ann {}\n+                      }\n+                      \"\"\";\n+\n+        JavacTaskImpl ct = (JavacTaskImpl) tool.getTask(null, fm, null, null,\n+                null, Arrays.asList(new MyFileObject(code)));\n+        CompilationUnitTree cut = ct.parse().iterator().next();\n+        Trees t = Trees.instance(ct);\n+        SourcePositions sp = t.getSourcePositions();\n+        new TreeScanner<Void, Void>() {\n+            boolean modifiersHaveSpan;\n+\n+            @Override\n+            public Void visitVariable(VariableTree node, Void p) {\n+                boolean prevModifiersHaveSpan = modifiersHaveSpan;\n+                try {\n+                    modifiersHaveSpan = node.getName().contentEquals(\"withAnnotation\");\n+                    return super.visitVariable(node, p);\n+                } finally {\n+                    modifiersHaveSpan = prevModifiersHaveSpan;\n+                }\n+            }\n+            @Override\n+            public Void visitClass(ClassTree node, Void p) {\n+                boolean prevModifiersHaveSpan = modifiersHaveSpan;\n+                try {\n+                    modifiersHaveSpan = node.getKind() == Kind.ANNOTATION_TYPE;\n+                    return super.visitClass(node, p);\n+                } finally {\n+                    modifiersHaveSpan = prevModifiersHaveSpan;\n+                }\n+            }\n+            @Override\n+            public Void visitModifiers(ModifiersTree node, Void p) {\n+                if (node.getFlags().contains(Modifier.FINAL)) {\n+                    throw new AssertionError(\"Unexpected final modified.\");\n+                }\n+                long start = sp.getStartPosition(cut, node);\n+                long end = sp.getEndPosition(cut, node);\n+                if (modifiersHaveSpan) {\n+                    if (start == (-1) || end == (-1)) {\n+                        throw new AssertionError(\"Incorrect modifier span: \" + start + \"-\" + end);\n+                    }\n+                } else {\n+                    if (start != (-1) || end != (-1)) {\n+                        throw new AssertionError(\"Incorrect modifier span: \" + start + \"-\" + end);\n+                    }\n+                }\n+                return super.visitModifiers(node, p);\n+            }\n+        }.scan(cut, null);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"}]}