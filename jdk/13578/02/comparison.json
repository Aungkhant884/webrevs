{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n@@ -36,1 +38,0 @@\n-import java.awt.event.MouseEvent;\n@@ -38,0 +39,2 @@\n+import java.awt.event.MouseEvent;\n+\n@@ -50,1 +53,0 @@\n-import javax.swing.event.PopupMenuListener;\n@@ -52,0 +54,3 @@\n+import javax.swing.event.PopupMenuListener;\n+\n+import jtreg.SkippedException;\n@@ -53,1 +58,1 @@\n-\/**\n+\/*\n@@ -59,0 +64,2 @@\n+ * The test uses Ctrl+Down Arrow (â†“) which is a system shortcut on macOS,\n+ * disable it in system settings, otherwise the test will fail\n@@ -60,0 +67,1 @@\n+ * @library \/test\/lib\n@@ -61,0 +69,1 @@\n+ * @build jtreg.SkippedException\n@@ -65,3 +74,0 @@\n-    private boolean done;\n-    private Throwable error;\n-    private static TaskbarPositionTest test;\n@@ -71,0 +77,1 @@\n+\n@@ -73,1 +80,1 @@\n-    private static JMenuBar menubar;\n+\n@@ -76,0 +83,2 @@\n+    private static JMenu submenu;\n+\n@@ -79,1 +88,2 @@\n-    private static String[] numData = {\n+\n+    private static final String[] numData = {\n@@ -82,1 +92,1 @@\n-    private static String[] dayData = {\n+    private static final String[] dayData = {\n@@ -85,1 +95,1 @@\n-    private static char[] mnDayData = {\n+    private static final char[] mnDayData = {\n@@ -92,1 +102,1 @@\n-        frame.setJMenuBar(createMenuBar(\"1 - First Menu\", true));\n+        frame.setJMenuBar(createMenuBar());\n@@ -97,1 +107,1 @@\n-                KeyEvent.VK_DOWN, InputEvent.CTRL_MASK), \"OPEN_POPUP\");\n+                KeyEvent.VK_DOWN, InputEvent.CTRL_DOWN_MASK), \"OPEN_POPUP\");\n@@ -106,1 +116,0 @@\n-\n@@ -119,1 +128,2 @@\n-        frame.setLocation(0, screenBounds.y + screenBounds.height - frame.getHeight());\n+        frame.setLocation(screenBounds.x,\n+                screenBounds.y + screenBounds.height - frame.getHeight());\n@@ -123,1 +133,1 @@\n-    public static class ComboPopupCheckListener implements PopupMenuListener {\n+    private static class ComboPopupCheckListener implements PopupMenuListener {\n@@ -125,0 +135,1 @@\n+        @Override\n@@ -128,0 +139,1 @@\n+        @Override\n@@ -131,0 +143,1 @@\n+        @Override\n@@ -132,12 +145,27 @@\n-            Point cpos = combo1.getLocation();\n-            SwingUtilities.convertPointToScreen(cpos, panel);\n-\n-            JPopupMenu pm = (JPopupMenu) combo1.getUI().getAccessibleChild(combo1, 0);\n-\n-            if (pm != null) {\n-                Point p = pm.getLocation();\n-                SwingUtilities.convertPointToScreen(p, pm);\n-                if (p.y+1 < cpos.y) {\n-                    System.out.println(\"p.y \" + p.y + \" cpos.y \" + cpos.y);\n-                    throw new RuntimeException(\"ComboBox popup is wrongly aligned\");\n-                }  \/\/ check that popup was opened down\n+            JComboBox<?> combo = (JComboBox<?>) ev.getSource();\n+            Point comboLoc = combo.getLocationOnScreen();\n+\n+            JPopupMenu popupMenu = (JPopupMenu) combo.getUI().getAccessibleChild(combo, 0);\n+\n+            Point popupMenuLoc = popupMenu.getLocationOnScreen();\n+            Dimension popupSize = popupMenu.getSize();\n+\n+            isPopupOnScreen(popupMenu, fullScreenBounds);\n+\n+            if (comboLoc.x > 0) {\n+                \/\/ The frame is located at the bottom of the screen,\n+                \/\/ the combo popups should open upwards\n+                if (popupMenuLoc.y + popupSize.height < comboLoc.y) {\n+                    System.err.println(\"popup \" + popupMenuLoc\n+                            + \" combo \" + comboLoc);\n+                    throw new RuntimeException(\"ComboBox popup should open upwards\");\n+                }\n+            } else {\n+                \/\/ The frame has been moved to negative position away from\n+                \/\/ the bottom of the screen, the combo popup should\n+                \/\/ open downwards in this case\n+                if (popupMenuLoc.y + 1 < comboLoc.y) {\n+                    System.err.println(\"popup \" + popupMenuLoc\n+                            + \" combo \" + comboLoc);\n+                    throw new RuntimeException(\"ComboBox popup should open downwards\");\n+                }\n@@ -148,2 +176,2 @@\n-    private class PopupHandler extends AbstractAction {\n-\n+    private static class PopupHandler extends AbstractAction {\n+        @Override\n@@ -158,1 +186,1 @@\n-    class PopupListener extends MouseAdapter {\n+    private static class PopupListener extends MouseAdapter {\n@@ -160,1 +188,1 @@\n-        private JPopupMenu popup;\n+        private final JPopupMenu popup;\n@@ -166,0 +194,1 @@\n+        @Override\n@@ -170,0 +199,1 @@\n+        @Override\n@@ -185,1 +215,4 @@\n-    public static void isPopupOnScreen(JPopupMenu popup, Rectangle checkBounds) {\n+    private static void isPopupOnScreen(JPopupMenu popup, Rectangle checkBounds) {\n+        if (!popup.isVisible()) {\n+            throw new RuntimeException(\"Popup not visible\");\n+        }\n@@ -187,2 +220,1 @@\n-        Point pt = new Point();\n-        SwingUtilities.convertPointToScreen(pt, popup);\n+        Point pt = popup.getLocationOnScreen();\n@@ -192,1 +224,2 @@\n-            throw new RuntimeException(\"We do not match! \" + checkBounds + \" \/ \" + bounds);\n+            throw new RuntimeException(\"Popup is outside of screen bounds \"\n+                    + checkBounds + \" \/ \" + bounds);\n@@ -194,0 +227,1 @@\n+    }\n@@ -195,0 +229,6 @@\n+    private static void isComboPopupOnScreen(JComboBox<?> comboBox) {\n+        if (!comboBox.isPopupVisible()) {\n+            throw new RuntimeException(\"ComboBox popup not visible\");\n+        }\n+        JPopupMenu popupMenu = (JPopupMenu) comboBox.getUI().getAccessibleChild(comboBox, 0);\n+        isPopupOnScreen(popupMenu, screenBounds);\n@@ -197,2 +237,0 @@\n-    private JPanel createContentPane() {\n-        JPanel panel = new JPanel();\n@@ -200,0 +238,1 @@\n+    private JPanel createContentPane() {\n@@ -201,1 +240,2 @@\n-        panel.add(combo1);\n+        combo1.addPopupMenuListener(new ComboPopupCheckListener());\n+\n@@ -204,2 +244,1 @@\n-        panel.add(combo2);\n-        panel.setSize(300, 200);\n+        combo2.addPopupMenuListener(new ComboPopupCheckListener());\n@@ -208,1 +247,0 @@\n-        JMenuItem item;\n@@ -210,1 +248,1 @@\n-            item = popupMenu.add(new JMenuItem(dayData[i], mnDayData[i]));\n+            JMenuItem item = popupMenu.add(new JMenuItem(dayData[i], mnDayData[i]));\n@@ -213,1 +251,0 @@\n-        panel.addMouseListener(new PopupListener(popupMenu));\n@@ -218,1 +255,1 @@\n-                KeyEvent.VK_DOWN, InputEvent.CTRL_MASK), \"OPEN_POPUP\");\n+                KeyEvent.VK_DOWN, InputEvent.CTRL_DOWN_MASK), \"OPEN_POPUP\");\n@@ -221,0 +258,5 @@\n+        JPanel panel = new JPanel();\n+        panel.add(combo1);\n+        panel.add(combo2);\n+        panel.setSize(300, 200);\n+        panel.addMouseListener(new PopupListener(popupMenu));\n@@ -226,10 +268,2 @@\n-    \/**\n-     * @param str name of Menu\n-     * @param bFlag set mnemonics on menu items\n-     *\/\n-    private JMenuBar createMenuBar(String str, boolean bFlag) {\n-        menubar = new JMenuBar();\n-\n-        menu1 = new JMenu(str);\n-        menu1.setMnemonic(str.charAt(0));\n-        menu1.addActionListener(this);\n+    private JMenuBar createMenuBar() {\n+        JMenuBar menubar = new JMenuBar();\n@@ -237,0 +271,3 @@\n+        menu1 = new JMenu(\"1 - First Menu\");\n+        menu1.setMnemonic('1');\n+        createSubMenu(menu1, \"1 JMenuItem\", 8, null);\n@@ -238,8 +275,0 @@\n-        for (int i = 0; i < 8; i++) {\n-            JMenuItem menuitem = new JMenuItem(\"1 JMenuItem\" + i);\n-            menuitem.addActionListener(this);\n-            if (bFlag) {\n-                menuitem.setMnemonic('0' + i);\n-            }\n-            menu1.add(menuitem);\n-        }\n@@ -247,1 +276,0 @@\n-        \/\/ second menu\n@@ -249,1 +277,0 @@\n-        menu2.addActionListener(this);\n@@ -251,1 +278,2 @@\n-\n+        createSubMenu(menu2, \"2 JMenuItem\", 4, null);\n+        menu2.add(new JSeparator());\n@@ -253,3 +281,0 @@\n-        for (int i = 0; i < 5; i++) {\n-            JMenuItem menuitem = new JMenuItem(\"2 JMenuItem\" + i);\n-            menuitem.addActionListener(this);\n@@ -257,6 +282,1 @@\n-            if (bFlag) {\n-                menuitem.setMnemonic('0' + i);\n-            }\n-            menu2.add(menuitem);\n-        }\n-        JMenu submenu = new JMenu(\"Sub Menu\");\n+        submenu = new JMenu(\"Sub Menu\");\n@@ -264,10 +284,1 @@\n-        submenu.addActionListener(this);\n-        for (int i = 0; i < 5; i++) {\n-            JMenuItem menuitem = new JMenuItem(\"S JMenuItem\" + i);\n-            menuitem.addActionListener(this);\n-            if (bFlag) {\n-                menuitem.setMnemonic('0' + i);\n-            }\n-            submenu.add(menuitem);\n-        }\n-        menu2.add(new JSeparator());\n+        createSubMenu(submenu, \"S JMenuItem\", 4, this);\n@@ -279,0 +290,11 @@\n+    private static void createSubMenu(JMenu menu, String prefix, int count, ActionListener action) {\n+        for (int i = 0; i < count; ++i) {\n+            JMenuItem menuitem = new JMenuItem(prefix + i);\n+            menu.add(menuitem);\n+            if (action != null) {\n+                menuitem.addActionListener(action);\n+            }\n+        }\n+    }\n+\n+\n@@ -282,1 +304,1 @@\n-            \/\/ put the focus on the noneditable combo.\n+            \/\/ put the focus on the non-editable combo.\n@@ -287,0 +309,5 @@\n+    private static void hidePopup(Robot robot) {\n+        robot.keyPress(KeyEvent.VK_ESCAPE);\n+        robot.keyRelease(KeyEvent.VK_ESCAPE);\n+    }\n+\n@@ -288,0 +315,24 @@\n+        GraphicsDevice mainScreen = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                       .getDefaultScreenDevice();\n+        Rectangle mainScreenBounds = mainScreen.getDefaultConfiguration()\n+                                               .getBounds();\n+        GraphicsDevice[] screens = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                      .getScreenDevices();\n+        for (GraphicsDevice screen : screens) {\n+            if (screen == mainScreen) {\n+                continue;\n+            }\n+\n+            Rectangle bounds = screen.getDefaultConfiguration()\n+                                     .getBounds();\n+            if (bounds.x < 0) {\n+                \/\/ The test may fail if a screen have negative origin\n+                throw new SkippedException(\"Configurations with negative screen\"\n+                                           + \" origin are not supported\");\n+            }\n+            if (bounds.y >= mainScreenBounds.height) {\n+                \/\/ The test may fail if there's a screen to bottom of the main monitor\n+                throw new SkippedException(\"Configurations with a screen beneath\"\n+                                           + \" the main one are not supported\");\n+            }\n+        }\n@@ -291,2 +342,1 @@\n-            Robot robot;\n-            robot = new Robot();\n+            Robot robot = new Robot();\n@@ -295,5 +345,1 @@\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    test = new TaskbarPositionTest();\n-                }\n-            });\n+            SwingUtilities.invokeAndWait(TaskbarPositionTest::new);\n@@ -313,1 +359,3 @@\n-            Util.hitMnemonics(robot, KeyEvent.VK_S);\n+            \/\/ Open the submenu\n+            robot.keyPress(KeyEvent.VK_S);\n+            robot.keyRelease(KeyEvent.VK_S);\n@@ -317,0 +365,1 @@\n+            SwingUtilities.invokeAndWait(() -> isPopupOnScreen(submenu.getPopupMenu(), screenBounds));\n@@ -318,0 +367,3 @@\n+            \/\/ Hit Enter to perform the action of\n+            \/\/ a selected menu item in the submenu\n+            \/\/ which requests focus on combo1, non-editable combo box\n@@ -321,1 +373,0 @@\n-            \/\/ Focus should go to non editable combo box\n@@ -323,1 +374,0 @@\n-            robot.delay(500);\n@@ -325,0 +375,2 @@\n+            \/\/ Focus should go to combo1\n+            \/\/ Open combo1 popup\n@@ -326,0 +378,1 @@\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n@@ -327,1 +380,3 @@\n-            \/\/ How do we check combo boxes?\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isComboPopupOnScreen(combo1));\n+            hidePopup(robot);\n@@ -329,1 +384,1 @@\n-            \/\/ Editable combo box\n+            \/\/ Move focus to combo2, editable combo box\n@@ -332,0 +387,4 @@\n+\n+            robot.waitForIdle();\n+\n+            \/\/ Open combo2 popup\n@@ -335,1 +394,3 @@\n-            \/\/ combo1.getUI();\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isComboPopupOnScreen(combo2));\n+            hidePopup(robot);\n@@ -337,1 +398,1 @@\n-            \/\/ Popup from Text field\n+            \/\/ Move focus to the text field\n@@ -340,0 +401,4 @@\n+\n+            robot.waitForIdle();\n+\n+            \/\/ Open its popup\n@@ -345,6 +410,12 @@\n-            \/\/ Popup from a mouse click.\n-            Point pt = new Point(2, 2);\n-            SwingUtilities.convertPointToScreen(pt, panel);\n-            robot.mouseMove(pt.x, pt.y);\n-            robot.mousePress(InputEvent.BUTTON3_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON3_MASK);\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isPopupOnScreen(popupMenu, fullScreenBounds));\n+            hidePopup(robot);\n+\n+            \/\/ Popup from a mouse click\n+            SwingUtilities.invokeAndWait(() -> {\n+                Point pt = panel.getLocationOnScreen();\n+                pt.translate(4, 4);\n+                robot.mouseMove(pt.x, pt.y);\n+            });\n+            robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n@@ -352,0 +423,1 @@\n+            \/\/ Ensure popupMenu is shown within screen bounds\n@@ -353,6 +425,7 @@\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                public void run() {\n-                    frame.setLocation(-30, 100);\n-                    combo1.addPopupMenuListener(new ComboPopupCheckListener());\n-                    combo1.requestFocus();\n-                }\n+            SwingUtilities.invokeAndWait(() -> isPopupOnScreen(popupMenu, fullScreenBounds));\n+            hidePopup(robot);\n+\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame.setLocation(-30, 100);\n+                combo1.requestFocus();\n@@ -361,0 +434,3 @@\n+            robot.waitForIdle();\n+\n+            \/\/ Open combo1 popup again\n@@ -363,2 +439,4 @@\n-            robot.keyPress(KeyEvent.VK_ESCAPE);\n-            robot.keyRelease(KeyEvent.VK_ESCAPE);\n+\n+            robot.waitForIdle();\n+            SwingUtilities.invokeAndWait(() -> isComboPopupOnScreen(combo1));\n+            hidePopup(robot);\n","filename":"test\/jdk\/javax\/swing\/Popup\/TaskbarPositionTest.java","additions":192,"deletions":114,"binary":false,"changes":306,"status":"modified"}]}