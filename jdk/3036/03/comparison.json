{"files":[{"patch":"@@ -1269,0 +1269,3 @@\n+     * @see <a\n+     * href=\"{@docRoot}\/java.base\/java\/lang\/reflect\/package-summary.html#LanguageJvmModel\">Java\n+     * programming language and JVM modeling in core reflection<\/a>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -204,2 +204,2 @@\n-     * Returns the Java language {@linkplain Modifier modifiers} for\n-     * the executable represented by this object.\n+     * {@return the Java language {@linkplain Modifier modifiers} for\n+     * the executable represented by this object}\n@@ -260,7 +260,14 @@\n-     * Returns an array of {@code Type} objects that represent the formal\n-     * parameter types, in declaration order, of the executable represented by\n-     * this object. Returns an array of length 0 if the\n-     * underlying executable takes no parameters.\n-     * Note that the constructors of some inner classes\n-     * may have an implicitly declared parameter in addition to\n-     * explicitly declared ones.\n+     * Returns an array of {@code Type} objects that represent the\n+     * formal parameter types, in declaration order, of the executable\n+     * represented by this object. An array of length 0 is returned if the\n+     * underlying executable takes no parameters.  Note that the\n+     * constructors of some inner classes may have an implicitly\n+     * declared parameter in addition to explicitly declared ones.\n+     * Also note that as a <a\n+     * href=\"{@docRoot}\/java.base\/java\/lang\/reflect\/package-summary.html#LanguageJvmModel\">modeling\n+     * artifact<\/a>, the number of returned parameters can differ\n+     * depending on whether or not generic information is present. If\n+     * generic information is present, only parameters explicitly\n+     * present in the source will be returned; if generic information\n+     * is not present, implicit and synthetic parameters may be\n+     * returned as well.\n@@ -343,1 +350,1 @@\n-     * Returns an array of {@code Parameter} objects that represent\n+     * {@return an array of {@code Parameter} objects representing\n@@ -345,1 +352,1 @@\n-     * this object.  Returns an array of length 0 if the executable\n+     * this object} An array of length 0 is returned if the executable\n@@ -350,1 +357,1 @@\n-     * Java programming language (JLS 3.8).\n+     * Java programming language (JLS {@jls 3.8}).\n@@ -354,2 +361,0 @@\n-     * @return an array of {@code Parameter} objects representing all\n-     * the parameters to the executable this object represents.\n@@ -495,4 +500,2 @@\n-     * Returns a string describing this {@code Executable}, including\n-     * any type parameters.\n-     * @return a string describing this {@code Executable}, including\n-     * any type parameters\n+     * {@return a string describing this {@code Executable}, including\n+     * any type parameters}\n@@ -503,5 +506,2 @@\n-     * Returns {@code true} if this executable was declared to take a\n-     * variable number of arguments; returns {@code false} otherwise.\n-     *\n-     * @return {@code true} if an only if this executable was declared\n-     * to take a variable number of arguments.\n+     * {@return {@code true} if this executable was declared to take a\n+     * variable number of arguments; returns {@code false} otherwise}\n@@ -675,1 +675,1 @@\n-     * method\/constructor has a receiver parameter (JLS 8.4.1). If this {@code\n+     * method\/constructor has a receiver parameter (JLS {@jls 8.4.1}). If this {@code\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,3 +148,1 @@\n-     * Return the {@code Executable} which declares this parameter.\n-     *\n-     * @return The {@code Executable} declaring this parameter.\n+     * {@return the {@code Executable} declaring this parameter}\n@@ -157,2 +155,2 @@\n-     * Get the modifier flags for this the parameter represented by\n-     * this {@code Parameter} object.\n+     * {@return the Java language {@linkplain Modifier modifiers} for\n+     * the parameter represented by this object}\n@@ -160,1 +158,4 @@\n-     * @return The modifier flags for this parameter.\n+     * @jls 8.4.1 Formal Parameters\n+     * @see <a\n+     * href=\"{@docRoot}\/java.base\/java\/lang\/reflect\/package-summary.html#LanguageJvmModel\">Java\n+     * programming language and JVM modeling in core reflection<\/a>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * about the fields, methods and constructors of loaded classes, and the use\n+ * about the fields, methods, and constructors of loaded classes, and the use\n@@ -33,6 +33,0 @@\n- * <p>{@code AccessibleObject} allows suppression of access checks if\n- * the necessary {@code ReflectPermission} is available.\n- *\n- * <p>{@code Array} provides static methods to dynamically create and\n- * access arrays.\n- *\n@@ -46,0 +40,56 @@\n+ * <p>{@link AccessibleObject} allows suppression of access checks if\n+ * the necessary {@link ReflectPermission} is available.\n+ *\n+ * <p>{@link Array} provides static methods to dynamically create and\n+ * access arrays.\n+ *\n+ * <h2><a id=\"LanguageJvmModel\">Java programming language and JVM modeling in core reflection<\/a><\/h2>\n+ *\n+ * The components of core reflection, which include types in this\n+ * package as well as {@link java.lang.Class Class}, {@link\n+ * java.lang.Package Package}, and {@link java.lang.Module Module},\n+ * fundamentally present a JVM model of the entities in question\n+ * rather than a Java programming language model.  A Java compiler,\n+ * such as {@code javac}, translates Java source code into executable\n+ * output that can be run on a JVM, primarily {@code class}\n+ * files. Compilers for source languages other than Java can and do\n+ * target the JVM as well.\n+ *\n+ * <p>The translation process, including from Java language sources,\n+ * to executable output for the JVM is not a one-to-one\n+ * mapping. Structures present in the source language may have no\n+ * representation in the output and structures <em>not<\/em> present in\n+ * the source language may be present in the output. The latter are\n+ * called <i>synthetic<\/i> structures. Synthetic structures can\n+ * include {@linkplain Method#isSynthetic() methods}, {@linkplain\n+ * Field#isSynthetic() fields}, {@linkplain Parameter#isSynthetic()\n+ * parameters}, {@linkplain Class#isSynthetic() classes and\n+ * interfaces}. One particular kind of synthetic method is a\n+ * {@linkplain Method#isBridge() bridge method}. It is possible a\n+ * synthetic structure may not be marked as such. In particular, not\n+ * all {@code class} file versions support marking a parameter as\n+ * synthetic. A source language compiler generally has multiple ways\n+ * to translate a source program into a {@code class} file\n+ * representation. The translation may also depend on the version of\n+ * the {@code class} file format being targeted as different {@code\n+ * class} file versions have different capabilities and features. In\n+ * some cases the modifiers present in the {@code class} file\n+ * representation may differ from the modifiers on the originating\n+ * element in the source language, including {@link Modifier#FINAL\n+ * final} on a {@linkplain Parameter#getModifiers() parameter} and\n+ * {@code protected}, {@code private}, and {@code static} on\n+ * {@linkplain java.lang.Class#getModifiers() classes and interfaces}.\n+ *\n+ * <p>Besides differences in structural representation between the\n+ * source language and the JVM representation, core reflection also\n+ * exposes runtime specific information. For example, the {@linkplain\n+ * java.lang.Class#getClassLoader() class loaders} and {@linkplain\n+ * java.lang.Class#getProtectionDomain() protection domains} of a\n+ * {@code Class} are runtime concepts without a direct analogue in\n+ * source code.\n+ *\n+ * @jls 13.1 The Form of a Binary\n+ * @jvms 1.2 The Java Virtual Machine\n+ * @jvms 4.7.8 The Synthetic Attribute\n+ * @jvms 5.3.1 Loading Using the Bootstrap Class Loader\n+ * @jvms 5.3.2 Loading Using a User-defined Class Loader\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/package-info.java","additions":58,"deletions":8,"binary":false,"changes":66,"status":"modified"}]}