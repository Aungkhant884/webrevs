{"files":[{"patch":"@@ -64,18 +64,18 @@\n- * include {@linkplain Class#isSynthetic() types}, {@linkplain\n- * Method#isSynthetic() methods}, {@linkplain Field#isSynthetic()\n- * fields}, and {@linkplain Parameter#isSynthetic() parameters}. One\n- * particular kind of synthetic method is a {@linkplain\n- * Method#isBridge() bridge method}. It is possible a synthetic\n- * structure may not be marked as such. In particular, not all {@code\n- * class} file versions support marking a parameter as synthetic. A\n- * source language compiler generally has multiple ways to translate a\n- * source program into a {@code class} file representation. The\n- * translation may also depend on the version of the {@code class}\n- * file format being targeted as different {@code class} file versions\n- * have different capabilities and features. In some cases the\n- * modifiers present in the {@code class} file representation may\n- * differ from the modifiers on the originating element in the source\n- * language, including {@link Modifier#FINAL final} on a {@linkplain\n- * Parameter#getModifiers() parameter} and {@code protected},\n- * {@code private}, and {@code static} on {@linkplain\n- * java.lang.Class#getModifiers() classes and interfaces}.\n+ * include {@linkplain Method#isSynthetic() methods}, {@linkplain\n+ * Field#isSynthetic() fields}, {@linkplain Parameter#isSynthetic()\n+ * parameters}, {@linkplain Class#isSynthetic() classes and\n+ * interfaces}. One particular kind of synthetic method is a\n+ * {@linkplain Method#isBridge() bridge method}. It is possible a\n+ * synthetic structure may not be marked as such. In particular, not\n+ * all {@code class} file versions support marking a parameter as\n+ * synthetic. A source language compiler generally has multiple ways\n+ * to translate a source program into a {@code class} file\n+ * representation. The translation may also depend on the version of\n+ * the {@code class} file format being targeted as different {@code\n+ * class} file versions have different capabilities and features. In\n+ * some cases the modifiers present in the {@code class} file\n+ * representation may differ from the modifiers on the originating\n+ * element in the source language, including {@link Modifier#FINAL\n+ * final} on a {@linkplain Parameter#getModifiers() parameter} and\n+ * {@code protected}, {@code private}, and {@code static} on\n+ * {@linkplain java.lang.Class#getModifiers() classes and interfaces}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/package-info.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}