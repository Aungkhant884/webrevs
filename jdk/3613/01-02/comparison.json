{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Collections;\n@@ -85,0 +86,2 @@\n+    private static final Set<String> previewModifiers = Collections.emptySet();\n+\n@@ -192,2 +195,7 @@\n-\n-            mods.add(modifiersPart);\n+            if (previewModifiers.contains(modifiersPart)) {\n+                mods.add(modifiersPart);\n+                mods.add(HtmlTree.SUP(links.createLink(htmlIds.forPreviewSection(typeElement),\n+                        contents.previewMark)));\n+            } else {\n+                mods.add(modifiersPart);\n+            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -108,0 +108,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils.DeclarationPreviewLanguageFeatures;\n@@ -2239,0 +2240,1 @@\n+        Set<DeclarationPreviewLanguageFeatures> previewLanguageFeatures = new HashSet<>();\n@@ -2248,0 +2250,3 @@\n+                previewLanguageFeatures.addAll(utils.previewLanguageFeaturesUsed(enclosed));\n+            } else if (!utils.previewLanguageFeaturesUsed(enclosed).isEmpty()) {\n+                declaredUsingPreviewFeature.add((TypeElement) enclosed);\n@@ -2250,0 +2255,1 @@\n+        previewLanguageFeatures.addAll(utils.previewLanguageFeaturesUsed(el));\n@@ -2262,0 +2268,15 @@\n+    private Content withPreviewFeatures(String key, String className, String featureName, List<String> features) {\n+        String[] sep = new String[] {\"\"};\n+        ContentBuilder featureCodes = new ContentBuilder();\n+        features.stream()\n+                .forEach(c -> {\n+                    featureCodes.add(sep[0]);\n+                    featureCodes.add(HtmlTree.CODE(new ContentBuilder().add(c)));\n+                    sep[0] = \", \";\n+                });\n+        return contents.getContent(key,\n+                HtmlTree.CODE(Text.of(className)),\n+                new HtmlTree(TagName.EM).add(featureName),\n+                featureCodes);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2965,0 +2965,19 @@\n+    \/**\n+     * Return the set of preview language features used to declare the given element.\n+     *\n+     * @param e the Element to check.\n+     * @return the set of preview language features used to declare the given element\n+     *\/\n+    public Set<DeclarationPreviewLanguageFeatures> previewLanguageFeaturesUsed(Element e) {\n+        return new HashSet<>();\n+    }\n+\n+    public enum DeclarationPreviewLanguageFeatures {\n+        NONE(List.of(\"\"));\n+        public final List<String> features;\n+\n+        private DeclarationPreviewLanguageFeatures(List<String> features) {\n+            this.features = features;\n+        }\n+    }\n+\n@@ -3014,0 +3033,3 @@\n+            if (!previewLanguageFeaturesUsed(type).isEmpty()) {\n+                declaredUsingPreviewFeature.add(type);\n+            }\n@@ -3155,1 +3177,2 @@\n-        if (configuration.workArounds.isPreviewAPI(el) ||\n+        if (!previewLanguageFeaturesUsed(el).isEmpty() ||\n+            configuration.workArounds.isPreviewAPI(el) ||\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}