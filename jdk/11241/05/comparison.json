{"files":[{"patch":"@@ -28,1 +28,119 @@\n- *\n+ * <p>\n+ * <b id=\"httpclientprops\">System properties used by the java.net.http API<\/b>\n+ * <p>\n+ * The following is a list of system networking properties used by the java.net.http\n+ * client implementation in the JDK. Any properties below that take a numeric value\n+ * assume the default value if given a string that does not parse as a number.\n+ * Unless otherwise specified below, all values can be set in the {@code conf\/net.properties}\n+ * file. In all cases, values can be specified as system properties on the command line,\n+ * in which case, any value in {@code conf\/net.properties} is overridden. No guarantee is\n+ * provided that property values can be set programatically with {@code System.setProperty()}.\n+ * Other implementations of this API may choose not to support these properties.\n+ * <ul>\n+ * <li><p><b>{@systemProperty jdk.httpclient.allowRestrictedHeaders}<\/b> (default: see below)<br>\n+ * A comma-separated list of normally restricted HTTP header names that users may set in HTTP requests\n+ * or by user code in HttpRequest instances. By default, the following request headers are not allowed\n+ * to be set by user code: connection, content-length, expect, host, and upgrade. You can override this\n+ * behavior with this property. The names are case-insensitive and whitespace is ignored. Note that this\n+ * property is intended for testing and not for real-world deployments. Protocol errors or other undefined\n+ * behavior are likely to occur when using this property. There may be other headers that are restricted\n+ * from being set depending on the context. This includes the \"Authorization\" header when the relevant\n+ * HttpClient has an authenticator set. These restrictions cannot be overridden by this property.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.bufsize}<\/b> (default: 16384 bytes or 16 kB)<br>\n+ * The size to use for internal allocated buffers in bytes.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.connectionPoolSize}<\/b> (default: 0)<br>\n+ * The maximum number of connections to keep in the HTTP\/1.1 keep alive cache. A value of 0 means that\n+ * the cache is unbounded.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.connectionWindowSize}<\/b> (default: 2^26)<br>\n+ * The HTTP\/2 client connection window size in bytes. The maximum size is 2^31-1. This value cannot be\n+ * smaller than the stream window size.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.disableRetryConnect}<\/b> (default: false)<br>\n+ * Whether automatic retry of connection failures is disabled. If false, then retries are attempted\n+ * (subject to the retry limit).\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.enableAllMethodRetry}<\/b> (default: false)<br>\n+ * Whether it is permitted to automatically retry non-idempotent HTTP requests.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.enablepush}<\/b> (default: 1)<br>\n+ * Whether HTTP\/2 push promise is enabled. A value of 1 enables push promise; a value of 0 disables it.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.hpack.maxheadertablesize}<\/b> (default: 16384 or 16 kB)<br>\n+ * The HTTP\/2 client maximum HPACK header table size in bytes.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.HttpClient.log}<\/b> (default: none)<br>\n+ * Enables high-level logging of various events through the Java Logging API (which is contained in the\n+ * package java.util.logging). The value contains a comma-separated list of any of the following items:\n+ * <ul>\n+ *   <li>errors<\/li>\n+ *   <li>requests<\/li>\n+ *   <li>headers<\/li>\n+ *   <li>frames<\/li>\n+ *   <li>ssl<\/li>\n+ *   <li>trace<\/li>\n+ *   <li>channel<\/li>\n+ * <\/ul><br>\n+ * You can append the frames item with a colon-separated list of any of the following items:\n+ * <ul>\n+ *   <li>control<\/li>\n+ *   <li>data<\/li>\n+ *   <li>window<\/li>\n+ *   <li>all<\/li>\n+ * <\/ul><br>\n+ * Specifying an item adds it to the HTTP client's log. For example, if you specify the following value,\n+ * then the Java Logging API logs all possible HTTP Client events:<br>\n+ * \"errors,requests,headers,frames:control:data:window,ssl,trace,channel\"<br>\n+ * Note that you can replace control:data:window with all. The name of the logger is\n+ * \"jdk.httpclient.HttpClient\", and all logging is at level INFO.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.keepalive.timeout}<\/b> (default: 1200)<br>\n+ * The number of seconds to keep idle HTTP connections alive in the keep alive cache. This property\n+ * applies to both HTTP\/1.1 and HTTP\/2. The value for HTTP\/2 can be overridden with the\n+ * jdk.httpclient.keepalive.timeout.h2 property.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.keepalive.timeout.h2}<\/b> (default: see below)<br>\n+ * The number of seconds to keep idle HTTP\/2 connections alive. If not set, then the\n+ * jdk.httpclient.keepalive.timeout setting is used.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.maxframesize}<\/b> (default: 16384 or 16kB)<br>\n+ * The HTTP\/2 client maximum frame size in bytes. The server is not permitted to send a frame larger than this.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.maxstreams}<\/b> (default: 100)<br>\n+ * The maximum number of HTTP\/2 push streams that the client will permit servers to open simultaneously.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.receiveBufferSize}<\/b> (default: operating system default)<br>\n+ * The HTTP client <a href=\"..\/java.base\/java\/net\/StandardSocketOptions.html#SO_RCVBUF\">socket receive\n+ * buffer size<\/a> in bytes.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.redirects.retrylimit}<\/b> (default: 5)<br>\n+ * The maximum number of attempts to send a HTTP request when redirected or any failure occurs for any reason.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.websocket.writeBufferSize}<\/b> (default: 16384 or 16kB)<br>\n+ * The buffer size used by the web socket implementation for socket writes.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.windowsize}<\/b> (default: 16777216 or 16 MB)<br>\n+ * The HTTP\/2 client stream window size in bytes.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.auth.retrylimit}<\/b> (default: 3)<br>\n+ * The number of attempts the Basic authentication filter will attempt to retry a failed authentication.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.httpclient.sendBufferSize}<\/b> (default: operating system default)<br>\n+ * The HTTP client socket <a href=\"..\/java.base\/java\/net\/StandardSocketOptions.html#SO_SNDBUF\">send\n+ * buffer size<\/a>. Values less than or equal to zero are ignored.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.internal.httpclient.disableHostnameVerification}<\/b> (default: false)<br>\n+ * If true, hostname verification in SSL certificates is disabled. This is a system property only and not\n+ * available in {@code conf\/net.properties}. It is provided for testing purposes only.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.http.auth.proxying.disabledSchemes}<\/b> (default: see conf\/net.properties)<br>\n+ * A comma separated list of HTTP authentication scheme names, that are disallowed for use by\n+ * the HTTP client implementation, for HTTP proxying.\n+ * <\/li>\n+ * <li><p><b>{@systemProperty jdk.http.auth.tunneling.disabledSchemes}<\/b> (default: see conf\/net.properties)<br>\n+ * A comma separated list of HTTP authentication scheme names, that are disallowed for use by\n+ * the HTTP client implementation, for HTTP CONNECT tunneling.\n+ * <\/li>\n+ * <\/ul>\n","filename":"src\/java.net.http\/share\/classes\/module-info.java","additions":119,"deletions":1,"binary":false,"changes":120,"status":"modified"}]}