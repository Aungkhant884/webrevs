{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Comparator;\n@@ -52,1 +53,0 @@\n-\n@@ -54,0 +54,2 @@\n+        Class<? extends IntlTest> testClass = getClass();\n+        testName = testClass.getCanonicalName();\n@@ -55,1 +57,1 @@\n-        Method[] methods = getClass().getDeclaredMethods();\n+        Method[] methods = testClass.getDeclaredMethods();\n@@ -70,2 +72,1 @@\n-    protected void run(String[] args) throws Exception\n-    {\n+    protected void run(String[] args) throws Exception {\n@@ -76,37 +77,2 @@\n-\n-        \/\/ Parse the test arguments.  They can be either the flag\n-        \/\/ \"-verbose\" or names of test methods. Create a list of\n-        \/\/ tests to be run.\n-        List<Method> testsToRun = new ArrayList<>(args.length);\n-        for (String arg : args) {\n-            switch (arg) {\n-            case \"-verbose\":\n-                verbose = true;\n-                break;\n-            case \"-prompt\":\n-                prompt = true;\n-                break;\n-            case \"-nothrow\":\n-                nothrow = true;\n-                break;\n-            case \"-exitcode\":\n-                exitCode = true;\n-                break;\n-            default:\n-                Method m = testMethods.get(arg);\n-                if (m == null) {\n-                    System.out.println(\"Method \" + arg + \": not found\");\n-                    usage();\n-                    return;\n-                }\n-                testsToRun.add(m);\n-                break;\n-            }\n-        }\n-\n-        \/\/ If no test method names were given explicitly, run them all.\n-        if (testsToRun.isEmpty()) {\n-            testsToRun.addAll(testMethods.values());\n-        }\n-\n-        System.out.println(getClass().getName() + \" {\");\n+        List<Method> testsToRun = configureTestsAndArgs(args);\n+        System.out.println(testName + \" {\");\n@@ -118,1 +84,0 @@\n-\n@@ -120,1 +85,0 @@\n-\n@@ -122,1 +86,1 @@\n-                testMethod.invoke(this, new Object[0]);\n+                testMethod.invoke(this);\n@@ -124,1 +88,1 @@\n-                errln(\"Can't acces test method \" + testMethod.getName());\n+                errln(\"Can't access test method \" + testMethod.getName());\n@@ -126,3 +90,5 @@\n-                errln(\"Uncaught exception thrown in test method \"\n-                        + testMethod.getName());\n-                e.getTargetException().printStackTrace(this.log);\n+                \/\/ Log exception first, that way if -nothrow is\n+                \/\/ not an arg, the original exception is still logged\n+                logExc(e);\n+                errln(String.format(\"$$$ Uncaught exception thrown in %s,\" +\n+                        \" see above for cause\", testMethod.getName()));\n@@ -133,2 +99,0 @@\n-        writeTestResult(errorCount);\n-\n@@ -148,1 +112,28 @@\n-                throw new IllegalArgumentException(\"encountered \" + errorCount + \" errors\");\n+                throw new RuntimeException(String.format(\n+                        \"$$$ %s FAILED with %s failures%n\", testName, errorCount));\n+            } else {\n+                log.println(String.format(\"\\t$$$ %s PASSED%n\", testName));\n+            }\n+        }\n+    }\n+\n+    private List<Method> configureTestsAndArgs(String[] args) {\n+        \/\/ Parse the test arguments. They can be either the flag\n+        \/\/ \"-verbose\" or names of test methods. Create a list of\n+        \/\/ tests to be run.\n+        List<Method> testsToRun = new ArrayList<>(args.length);\n+        for (String arg : args) {\n+            switch (arg) {\n+                case \"-verbose\" -> verbose = true;\n+                case \"-prompt\" -> prompt = true;\n+                case \"-nothrow\" -> nothrow = true;\n+                case \"-exitcode\" -> exitCode = true;\n+                default -> {\n+                    Method m = testMethods.get(arg);\n+                    if (m == null) {\n+                        System.out.println(\"Method \" + arg + \": not found\");\n+                        usage();\n+                        return testsToRun;\n+                    }\n+                    testsToRun.add(m);\n+                }\n@@ -151,0 +142,7 @@\n+        \/\/ If no test method names were given explicitly, run them all.\n+        if (testsToRun.isEmpty()) {\n+            testsToRun.addAll(testMethods.values());\n+        }\n+        \/\/ Arbitrarily sort the tests, so that they are run in the same order every time\n+        testsToRun.sort(Comparator.comparing(Method::getName));\n+        return testsToRun;\n@@ -180,0 +178,5 @@\n+    private void logExc(InvocationTargetException ite) {\n+        indent(indentLevel);\n+        ite.getTargetException().printStackTrace(this.log);\n+    }\n+\n@@ -202,4 +205,0 @@\n-    protected int getErrorCount() {\n-        return errorCount;\n-    }\n-\n@@ -227,0 +226,4 @@\n+    protected int getErrorCount() {\n+        return errorCount;\n+    }\n+\n@@ -228,1 +231,1 @@\n-     * Returns a spece-delimited hex String.\n+     * Returns a space-delimited hex String.\n@@ -261,1 +264,1 @@\n-\n+    private final String testName;\n","filename":"test\/jdk\/java\/text\/testlib\/IntlTest.java","additions":61,"deletions":58,"binary":false,"changes":119,"status":"modified"}]}