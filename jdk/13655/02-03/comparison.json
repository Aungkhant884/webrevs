{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import java.util.HexFormat;\n+\n@@ -152,1 +154,2 @@\n-                  toHexString(expected) + \" Got: \"+ toHexString(result));\n+                  HexFormat.of().withDelimiter(\" \").formatHex(expected.getBytes())\n+                    + \" Got: \"+ HexFormat.of().withDelimiter(\" \").formatHex(result.getBytes()));\n@@ -194,3 +197,6 @@\n-                errln(\"FAIL input: \" + toHexString(input) + \"\\n\" +\n-                      \" decompose: \" + toHexString(result) + \"\\n\" +\n-                      \"  expected: \" + toHexString(output));\n+                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(input.getBytes()) + \"\\n\" +\n+                      \" decompose: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(result.getBytes()) + \"\\n\" +\n+                      \"  expected: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()));\n@@ -201,3 +207,6 @@\n-                errln(\"FAIL input: \" + toHexString(input) + \"\\n\" +\n-                      \"   compose: \" + toHexString(result) + \"\\n\" +\n-                      \"  expected: \" + toHexString(output));\n+                errln(\"FAIL input: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(input.getBytes()) + \"\\n\" +\n+                      \"   compose: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()) + \"\\n\" +\n+                      \"  expected: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(output.getBytes()));\n@@ -234,2 +243,4 @@\n-                logln(\"Ok: \" + toHexString(a) + \" x COMPOSE_COMPAT => \" +\n-                      toHexString(b));\n+                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(a.getBytes()) + \" x COMPOSE_COMPAT => \" +\n+                      HexFormat.of().withDelimiter(\" \")\n+                              .formatHex(b.getBytes()));\n@@ -237,2 +248,6 @@\n-                errln(\"FAIL: \" + toHexString(a) + \" x COMPOSE_COMPAT => \" +\n-                      toHexString(b) + \", expect \" + toHexString(exp));\n+                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                        .formatHex(b.getBytes()) + \" x COMPOSE_COMPAT => \" +\n+                      HexFormat.of().withDelimiter(\" \")\n+                              .formatHex(a.getBytes()) + \", expect \" +\n+                        HexFormat.of().withDelimiter(\" \")\n+                                .formatHex(exp.getBytes()));\n@@ -244,2 +259,2 @@\n-                logln(\"Ok: \" + toHexString(b) + \" x DECOMP => \" +\n-                      toHexString(a));\n+                logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                      HexFormat.of().withDelimiter(\" \").formatHex(a.getBytes()));\n@@ -247,2 +262,2 @@\n-                errln(\"FAIL: \" + toHexString(b) + \" x DECOMP => \" +\n-                      toHexString(a) + \", expect \" + toHexString(exp));\n+                errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x DECOMP => \" +\n+                      HexFormat.of().withDelimiter(\" \").formatHex(a.getBytes()) + \", expect \" + HexFormat.of().withDelimiter(\" \").formatHex(exp.getBytes()));\n@@ -385,3 +400,6 @@\n-            errln(\"FAIL: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for the latest Unicode\");\n+            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(c.getBytes()) + \" for the latest Unicode\");\n@@ -389,3 +407,6 @@\n-            logln(\"Ok: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for the latest Unicode\");\n+            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \")\n+                          .formatHex(c.getBytes()) + \" for the latest Unicode\");\n@@ -397,3 +418,4 @@\n-            errln(\"FAIL: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for Unicode 3.2.0\");\n+            errln(\"FAIL: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(c.getBytes()) + \" for Unicode 3.2.0\");\n@@ -401,3 +423,4 @@\n-            logln(\"Ok: \" + toHexString(a) + \" x DECOMP_COMPAT => \" +\n-                  toHexString(b) + \" x COMPOSE => \" +\n-                  toHexString(c) + \" for Unicode 3.2.0\");\n+            logln(\"Ok: \" + HexFormat.of().withDelimiter(\" \")\n+                    .formatHex(a.getBytes()) + \" x DECOMP_COMPAT => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(b.getBytes()) + \" x COMPOSE => \" +\n+                  HexFormat.of().withDelimiter(\" \").formatHex(c.getBytes()) + \" for Unicode 3.2.0\");\n@@ -575,1 +598,2 @@\n-            logln(\"Normalizing '\" + input + \"' (\" + toHexString(input) + \")\" );\n+            logln(\"Normalizing '\" + input + \"' (\" + HexFormat.of()\n+                    .withDelimiter(\" \").formatHex(input.getBytes()) + \")\" );\n@@ -582,2 +606,4 @@\n-                    + \" expected '\" + expect + \"' (\" + toHexString(expect) + \")\"\n-                    + \" but got '\" + output + \"' (\" + toHexString(output) + \")\"\n+                    + \" expected '\" + expect + \"' (\" + HexFormat.of()\n+                        .withDelimiter(\" \").formatHex(expect.getBytes()) + \")\"\n+                    + \" but got '\" + output + \"' (\" + HexFormat.of()\n+                        .withDelimiter(\" \").formatHex(output.getBytes()) + \")\"\n","filename":"test\/jdk\/java\/text\/Normalizer\/ICUBasicTest.java","additions":56,"deletions":30,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -229,14 +229,0 @@\n-    \/*\n-     * Returns a space-delimited hex String.\n-     *\/\n-    protected static String toHexString(String s) {\n-        StringBuilder sb = new StringBuilder(\" \");\n-\n-        for (int i = 0; i < s.length(); i++) {\n-            sb.append(Integer.toHexString(s.charAt(i)));\n-            sb.append(' ');\n-        }\n-\n-        return sb.toString();\n-    }\n-\n","filename":"test\/jdk\/java\/text\/testlib\/IntlTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}