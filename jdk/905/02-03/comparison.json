{"files":[{"patch":"@@ -163,1 +163,1 @@\n-  err_msg message(\"NonNMethodCodeHeapSize (\" SIZE_FORMAT \"K) + ProfiledCodeHeapSize (\" SIZE_FORMAT \"K)\"\n+  FormatBuffer<> message(\"NonNMethodCodeHeapSize (\" SIZE_FORMAT \"K) + ProfiledCodeHeapSize (\" SIZE_FORMAT \"K)\"\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-  char* buffer() { return _buf; }\n-  int size() { return bufsz; }\n+  char* buffer() const { return _buf; }\n+  int size() const { return bufsz; }\n@@ -117,1 +117,1 @@\n-class FormatErrBuffer : public FormatBuffer<bufsz> {\n+class FormatErrBuffer : private FormatBuffer<bufsz> {\n@@ -121,0 +121,2 @@\n+  operator const char *() const { return FormatBuffer<bufsz>::buffer(); }\n+\n@@ -124,1 +126,3 @@\n-  inline FormatErrBuffer(const char* msg) { ShouldNotReachHere(); }\n+  \/\/ It is also intentionally not defined to produce a link-time failure, in case of\n+  \/\/ (not sane) compiler selects this by some way.\n+  FormatErrBuffer(const char* msg);\n","filename":"src\/hotspot\/share\/utilities\/formatBuffer.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-    SCOPED_TRACE(err_msg(\"Running test with %u threads\", nthreads).buffer());\n+    SCOPED_TRACE((const char*)err_msg(\"Running test with %u threads\", nthreads));\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#define log(...) SCOPED_TRACE(err_msg(__VA_ARGS__).buffer())\n+#define log(...) SCOPED_TRACE((const char*)err_msg(__VA_ARGS__))\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}