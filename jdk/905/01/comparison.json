{"files":[{"patch":"@@ -2249,1 +2249,1 @@\n-      vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n+      vm_exit_during_initialization(\"Error in mapping Java heap at the given filesystem directory\");\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1913,1 +1913,1 @@\n-      vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n+      vm_exit_during_initialization(\"Error in mapping Java heap at the given filesystem directory\");\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4222,1 +4222,1 @@\n-      vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n+      vm_exit_during_initialization(\"Error in mapping Java heap at the given filesystem directory\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-    vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n+    vm_exit_during_initialization(\"Error in mapping Java heap at the given filesystem directory\");\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3091,1 +3091,1 @@\n-      vm_exit_during_initialization(err_msg(\"Could not allocate sufficient disk space for Java heap\"));\n+      vm_exit_during_initialization(\"Could not allocate sufficient disk space for Java heap\");\n@@ -3094,1 +3094,1 @@\n-      vm_exit_during_initialization(err_msg(\"Error in mapping Java heap at the given filesystem directory\"));\n+      vm_exit_during_initialization(\"Error in mapping Java heap at the given filesystem directory\");\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-                err_msg(\"Bad package name\"));\n+                \"Bad package name\");\n@@ -330,1 +330,1 @@\n-                err_msg(\"Bad package name\"));\n+                \"Bad package name\");\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-      err_msg message(\"GC mode needs -XX:+\" #name \" to work correctly\");    \\\n-      vm_exit_during_initialization(\"Error\", message);                      \\\n+      const char* msg = \"GC mode needs -XX:+\" #name \" to work correctly\";   \\\n+      vm_exit_during_initialization(\"Error\", msg);                          \\\n@@ -43,2 +43,2 @@\n-      err_msg message(\"GC mode needs -XX:-\" #name \" to work correctly\");    \\\n-      vm_exit_during_initialization(\"Error\", message);                      \\\n+      const char* msg = \"GC mode needs -XX:-\" #name \" to work correctly\";   \\\n+      vm_exit_during_initialization(\"Error\", msg);                          \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahMode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-        err_msg(\"Cannot call into HotSpot from JVMCI shared library without attaching current thread\")); \\\n+        \"Cannot call into HotSpot from JVMCI shared library without attaching current thread\"); \\\n@@ -166,1 +166,1 @@\n-        err_msg(\"Cannot call into HotSpot from JVMCI shared library without attaching current thread\")); \\\n+        \"Cannot call into HotSpot from JVMCI shared library without attaching current thread\"); \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,2 +116,20 @@\n-\/\/ Used to format messages.\n-typedef FormatBuffer<> err_msg;\n+template <size_t bufsz = FormatBufferBase::BufferSize>\n+class FormatErrBuffer : public FormatBuffer<bufsz> {\n+public:\n+  inline FormatErrBuffer(const char* format, ...) ATTRIBUTE_PRINTF(2, 3);\n+\n+  \/\/ Dummy overload preventing misuse of err_msg for a string without format arguments.\n+  \/\/ If compilation fails because of ambiguity between this and real constructor, you\n+  \/\/ could drop err_msg use at all.\n+  inline FormatErrBuffer(const char* msg) { ShouldNotReachHere(); }\n+};\n+\n+template <size_t bufsz>\n+FormatErrBuffer<bufsz>::FormatErrBuffer(const char * format, ...) : FormatBuffer<bufsz>() {\n+  va_list argp;\n+  va_start(argp, format);\n+  FormatBuffer<bufsz>::printv(format, argp);\n+  va_end(argp);\n+}\n+\n+typedef FormatErrBuffer<> err_msg;\n","filename":"src\/hotspot\/share\/utilities\/formatBuffer.hpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}