{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import jdk.internal.misc.InnocuousThread;\n+\n@@ -92,4 +94,0 @@\n-                ThreadGroup tg = Thread.currentThread().getThreadGroup();\n-                while (tg.getParent() != null) tg = tg.getParent();\n-                ThreadGroup systemThreadGroup = tg;\n-\n@@ -103,2 +101,2 @@\n-                    Thread t = new Thread(systemThreadGroup, grimReaper,\n-                            \"process reaper\", stackSize, false);\n+                    Thread t = InnocuousThread.newSystemThread(\"process reaper\", grimReaper,\n+                            stackSize, Thread.MAX_PRIORITY);\n@@ -106,2 +104,0 @@\n-                    \/\/ A small attempt (probably futile) to avoid priority inversion\n-                    t.setPriority(Thread.MAX_PRIORITY);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-            return createThread(name, target, ClassLoader.getSystemClassLoader(), priority);\n+            return createThread(name, target, 0L, ClassLoader.getSystemClassLoader(), priority);\n@@ -81,1 +81,1 @@\n-                        return createThread(name, target, ClassLoader.getSystemClassLoader(), priority);\n+                        return createThread(name, target, 0L, ClassLoader.getSystemClassLoader(), priority);\n@@ -107,1 +107,1 @@\n-            return createThread(name, target, null, priority);\n+            return createThread(name, target, 0L, null, priority);\n@@ -113,1 +113,1 @@\n-                        return createThread(name, target, null, priority);\n+                        return createThread(name, target, 0L, null, priority);\n@@ -118,1 +118,18 @@\n-    private static Thread createThread(String name, Runnable target, ClassLoader loader, int priority) {\n+    \/**\n+     * Returns a new InnocuousThread with null context class loader.\n+     * Thread priority is set to the given priority.\n+     *\/\n+    public static Thread newSystemThread(String name, Runnable target, long stackSize, int priority) {\n+        if (System.getSecurityManager() == null) {\n+            return createThread(name, target, stackSize, null, priority);\n+        }\n+        return AccessController.doPrivileged(\n+                new PrivilegedAction<Thread>() {\n+                    @Override\n+                    public Thread run() {\n+                        return createThread(name, target, 0L, null, priority);\n+                    }\n+                });\n+    }\n+\n+    private static Thread createThread(String name, Runnable target, long stackSize, ClassLoader loader, int priority) {\n@@ -120,1 +137,1 @@\n-                target, name, loader);\n+                target, name, stackSize, loader);\n@@ -127,2 +144,3 @@\n-    private InnocuousThread(ThreadGroup group, Runnable target, String name, ClassLoader tccl) {\n-        super(group, target, name, 0L, false);\n+    private InnocuousThread(ThreadGroup group, Runnable target, String name,\n+                            long stackSize, ClassLoader tccl) {\n+        super(group, target, name, stackSize, false);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/InnocuousThread.java","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8269488\n+ * @summary verify that Process Reaper threads have a null CCL\n+ * @run testng ProcessReaperCCL\n+ *\/\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class ProcessReaperCCL {\n+\n+    @Test\n+    static void test() throws Exception {\n+        \/\/ create a class loader\n+        File dir = new File(\".\");\n+        URL[] urls = new URL[] {dir.toURI().toURL()};\n+        ClassLoader cl = new URLClassLoader(urls);\n+        Thread.currentThread().setContextClassLoader(cl);\n+\n+        \/\/ Invoke a subprocess with processBuilder\n+        ProcessBuilder pb = new ProcessBuilder(List.of(\"echo\", \"abc\", \"xyz\"));\n+        Process p = pb.start();\n+        CompletableFuture<Process> cf = p.onExit();\n+        int exitValue = cf.get().exitValue();\n+        Assert.assertEquals(exitValue, 0, \"error exit value\");\n+\n+        \/\/ Verify all \"Process Reaper\" threads have a null CCL\n+        for (Thread th : Thread.getAllStackTraces().keySet()) {\n+            if (\"process reaper\".equals(th.getName())) {\n+                Assert.assertEquals(th.getContextClassLoader(), null, \"CCL not null\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessReaperCCL.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}