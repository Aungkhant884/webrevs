{"files":[{"patch":"@@ -1918,27 +1918,16 @@\n-        if (Thread.interrupted())\n-            return null;\n-        if (nanos > 0L) {\n-            long d = System.nanoTime() + nanos;\n-            long deadline = (d == 0L) ? 1L : d; \/\/ avoid 0\n-            Signaller q = null;\n-            boolean queued = false;\n-            Object r;\n-            while ((r = result) == null) { \/\/ similar to untimed\n-                if (q == null) {\n-                    q = new Signaller(true, nanos, deadline);\n-                    if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n-                        ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n-                }\n-                else if (!queued)\n-                    queued = tryPushStack(q);\n-                else if (q.nanos <= 0L)\n-                    break;\n-                else {\n-                    try {\n-                        ForkJoinPool.managedBlock(q);\n-                    } catch (InterruptedException ie) {\n-                        q.interrupted = true;\n-                    }\n-                    if (q.interrupted)\n-                        break;\n-                }\n+        long d = System.nanoTime() + nanos;\n+        long deadline = (d == 0L) ? 1L : d; \/\/ avoid 0\n+        boolean interrupted = false, queued = false;\n+        Signaller q = null;\n+        Object r = null;\n+        for (;;) { \/\/ order of checking interrupt, result, timeout matters\n+            if (interrupted || (interrupted = Thread.interrupted()))\n+                break;\n+            else if ((r = result) != null)\n+                break;\n+            else if (nanos <= 0L)\n+                break;\n+            else if (q == null) {\n+                q = new Signaller(true, nanos, deadline);\n+                if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n+                    ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n@@ -1946,4 +1935,10 @@\n-            if (q != null && queued) {\n-                q.thread = null;\n-                if (r == null)\n-                    cleanStack();\n+            else if (!queued)\n+                queued = tryPushStack(q);\n+            else {\n+                try {\n+                    ForkJoinPool.managedBlock(q);\n+                    interrupted = q.interrupted;\n+                    nanos = q.nanos;\n+                } catch (InterruptedException ie) {\n+                    interrupted = true;\n+                }\n@@ -1951,5 +1946,14 @@\n-            if (r != null || (r = result) != null)\n-                postComplete();\n-            if (r != null || (q != null && q.interrupted))\n-                return r;\n-        throw new TimeoutException();\n+        if (q != null) {\n+            q.thread = null;\n+            if (r == null)\n+                cleanStack();\n+        }\n+        if (r != null) {\n+            if (interrupted)\n+                Thread.currentThread().interrupt();\n+            postComplete();\n+            return r;\n+        } else if (interrupted)\n+            return null;\n+        else\n+            throw new TimeoutException();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":40,"deletions":36,"binary":false,"changes":76,"status":"modified"}]}