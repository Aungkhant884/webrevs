{"files":[{"patch":"@@ -252,0 +252,2 @@\n+  OopHandle class_loader_handle() const { return _class_loader; }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/arguments.hpp\"\n@@ -502,0 +503,1 @@\n+  SystemDictionary::set_platform_loader(platform_loader_data);\n@@ -505,0 +507,6 @@\n+  SystemDictionary::set_system_loader(system_loader_data);\n+  \/\/ system_loader_data here is always an instance of jdk.internal.loader.ClassLoader$AppClassLoader.\n+  \/\/ However, if -Djava.system.class.loader=xxx is specified, java_platform_loader() would\n+  \/\/ be an instance of a user-defined class, so make sure this never happens.\n+  assert(Arguments::get_property(\"java.system.class.loader\") == NULL,\n+           \"archived full module should have been disabled\");\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,0 +123,27 @@\n+  if (_java_system_loader.is_empty()) {\n+    oop system_loader = get_system_class_loader_impl(CHECK);\n+    _java_system_loader = OopHandle(Universe::vm_global(), system_loader);\n+  } else {\n+    \/\/ It must have been restored from the archived module graph\n+    assert(UseSharedSpaces, \"must be\");\n+    assert(MetaspaceShared::use_full_module_graph(), \"must be\");\n+    DEBUG_ONLY(\n+      oop system_loader = get_system_class_loader_impl(CHECK);\n+      assert(_java_system_loader.resolve() == system_loader, \"must be\");\n+    )\n+ }\n+\n+  if (_java_platform_loader.is_empty()) {\n+    JavaValue result(T_OBJECT);\n+    InstanceKlass* class_loader_klass = vmClasses::ClassLoader_klass();\n+    JavaCalls::call_static(&result,\n+                           class_loader_klass,\n+                           vmSymbols::getPlatformClassLoader_name(),\n+                           vmSymbols::void_classloader_signature(),\n+                           CHECK);\n+\n+    _java_platform_loader = OopHandle(Universe::vm_global(), result.get_oop());\n+  }\n+}\n+\n+oop SystemDictionary::get_system_class_loader_impl(TRAPS) {\n@@ -129,11 +156,2 @@\n-                         CHECK);\n-\n-  _java_system_loader = OopHandle(Universe::vm_global(), result.get_oop());\n-\n-  JavaCalls::call_static(&result,\n-                         class_loader_klass,\n-                         vmSymbols::getPlatformClassLoader_name(),\n-                         vmSymbols::void_classloader_signature(),\n-                         CHECK);\n-\n-  _java_platform_loader = OopHandle(Universe::vm_global(), result.get_oop());\n+                         CHECK_NULL);\n+  return result.get_oop();\n@@ -152,0 +170,12 @@\n+void SystemDictionary::set_system_loader(ClassLoaderData *cld) {\n+  if (_java_system_loader.is_empty()) {\n+    _java_system_loader = cld->class_loader_handle();\n+  }\n+}\n+\n+void SystemDictionary::set_platform_loader(ClassLoaderData *cld) {\n+  if (_java_platform_loader.is_empty()) {\n+    _java_platform_loader = cld->class_loader_handle();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":41,"deletions":11,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -136,0 +136,2 @@\n+  static oop get_system_class_loader_impl(TRAPS);\n+\n@@ -221,0 +223,3 @@\n+  static void set_system_loader(ClassLoaderData *cld);\n+  static void set_platform_loader(ClassLoaderData *cld);\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}