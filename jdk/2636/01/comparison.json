{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.io.UncheckedIOException;\n@@ -224,0 +225,3 @@\n+     * @throws UncheckedIOException\n+     *         If the underlying operation fails\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedByteBuffer.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n@@ -97,1 +99,6 @@\n-            force0(fd, mappingAddress(address, offset, index), mappingLength(offset, length));\n+            try {\n+                force0(fd, mappingAddress(address, offset, index),\n+                    mappingLength(offset, length));\n+            } catch (IOException cause) {\n+                throw new UncheckedIOException(cause);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/MappedMemoryUtils.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-    } while (retry < 3);\n+    } while (retry < 5);\n","filename":"src\/java.base\/windows\/native\/libnio\/MappedMemoryUtils.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.io.UncheckedIOException;\n@@ -152,0 +153,1 @@\n+     * @throws UncheckedIOException if the underlying native operation fails\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MappedMemorySegments.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 6539707\n+ * @summary Test behavior of force() with respect to throwing exceptions\n+ * @run main ForceException\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.io.UncheckedIOException;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+\n+public class ForceException {\n+    public static void main(String[] args) throws IOException {\n+        int blockSize = 2048 * 1024;\n+        int numberOfBlocks = 200;\n+        int fileLength = numberOfBlocks * blockSize;\n+\n+        File file = new File(System.getProperty(\"test.src\", \".\"), \"test.dat\");\n+        file.deleteOnExit();\n+        try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\")) {\n+            raf.setLength(fileLength);\n+\n+            int pos = (numberOfBlocks - 1) * blockSize;\n+            int size = (int)Math.min(blockSize, fileLength - pos);\n+            MappedByteBuffer mbb =\n+                raf.getChannel().map(FileChannel.MapMode.READ_WRITE, pos, size);\n+\n+            System.out.printf(\"Write region 0x%s..0x%s%n\",\n+                Long.toHexString(pos), Long.toHexString(size));\n+            for (int k = 0; k < mbb.limit(); k++) {\n+                mbb.put(k, (byte)65);\n+            }\n+\n+            \/\/ Catch and process UncheckedIOException; other Throwables fail\n+            try {\n+                System.out.println(\"Force\");\n+                mbb.force();\n+            } catch (UncheckedIOException legal) {\n+                System.out.printf(\"Caught legal exception %s%n\", legal);\n+                IOException cause = legal.getCause(); \/\/ can't be null\n+                \/\/ Throw the cause if flush failed (should be only on Windows)\n+                if (cause.getMessage().startsWith(\"Flush failed\")) {\n+                    throw cause;\n+                }\n+            }\n+\n+            System.out.println(\"OK\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/MappedByteBuffer\/ForceException.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}