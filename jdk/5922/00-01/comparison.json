{"files":[{"patch":"@@ -259,2 +259,1 @@\n-     * Constructs a channel that reads bytes from the given stream into one\n-     * buffer or a sequence of buffers.\n+     * Constructs a channel that reads bytes from the given stream.\n@@ -271,1 +270,1 @@\n-    public static ScatteringByteChannel newChannel(InputStream in) {\n+    public static ReadableByteChannel newChannel(InputStream in) {\n@@ -278,1 +277,1 @@\n-        return new ScatteringByteChannelImpl(in);\n+        return new ReadableByteChannelImpl(in);\n@@ -281,1 +280,1 @@\n-    private static class ScatteringByteChannelImpl\n+    private static class ReadableByteChannelImpl\n@@ -283,1 +282,1 @@\n-        implements ScatteringByteChannel\n+        implements ReadableByteChannel\n@@ -290,1 +289,1 @@\n-        ScatteringByteChannelImpl(InputStream in) {\n+        ReadableByteChannelImpl(InputStream in) {\n@@ -330,0 +329,37 @@\n+        @Override\n+        protected void implCloseChannel() throws IOException {\n+            in.close();\n+        }\n+    }\n+\n+    \/**\n+     * Constructs a channel that reads bytes from the given stream into one\n+     * buffer or a sequence of buffers.\n+     *\n+     * <p> The resulting channel will not be buffered; it will simply redirect\n+     * its I\/O operations to the given stream.  Closing the channel will in\n+     * turn cause the stream to be closed.  <\/p>\n+     *\n+     * @param  in\n+     *         The stream from which bytes are to be read\n+     *\n+     * @return  A new scatterin byte channel\n+     *\/\n+    public static ScatteringByteChannel newScatteringChannel(InputStream in) {\n+        Objects.requireNonNull(in, \"in\");\n+\n+        if (in.getClass() == FileInputStream.class) {\n+            return ((FileInputStream) in).getChannel();\n+        }\n+\n+        return new ScatteringByteChannelImpl(in);\n+    }\n+\n+    private static class ScatteringByteChannelImpl\n+        extends ReadableByteChannelImpl\n+        implements ScatteringByteChannel\n+    {\n+        ScatteringByteChannelImpl(InputStream in) {\n+            super(in);\n+        }\n+\n@@ -372,5 +408,0 @@\n-\n-        @Override\n-        protected void implCloseChannel() throws IOException {\n-            in.close();\n-        }\n@@ -379,1 +410,0 @@\n-\n@@ -381,2 +411,1 @@\n-     * Constructs a channel that writes bytes to the given stream from one\n-     * buffer or a sequence of buffers.\n+     * Constructs a channel that writes bytes to the given stream.\n@@ -393,1 +422,1 @@\n-    public static GatheringByteChannel newChannel(OutputStream out) {\n+    public static WritableByteChannel newChannel(OutputStream out) {\n@@ -400,1 +429,1 @@\n-        return new GatheringByteChannelImpl(out);\n+        return new WritableByteChannelImpl(out);\n@@ -403,1 +432,1 @@\n-    private static class GatheringByteChannelImpl\n+    private static class WritableByteChannelImpl\n@@ -405,1 +434,1 @@\n-        implements GatheringByteChannel\n+        implements WritableByteChannel\n@@ -412,1 +441,1 @@\n-        GatheringByteChannelImpl(OutputStream out) {\n+        WritableByteChannelImpl(OutputStream out) {\n@@ -443,0 +472,37 @@\n+        @Override\n+        protected void implCloseChannel() throws IOException {\n+            out.close();\n+        }\n+    }\n+\n+    \/**\n+     * Constructs a channel that writes bytes to the given stream from one\n+     * buffer or a sequence of buffers.\n+     *\n+     * <p> The resulting channel will not be buffered; it will simply redirect\n+     * its I\/O operations to the given stream.  Closing the channel will in\n+     * turn cause the stream to be closed.  <\/p>\n+     *\n+     * @param  out\n+     *         The stream to which bytes are to be written\n+     *\n+     * @return  A new gathering byte channel\n+     *\/\n+    public static GatheringByteChannel newGatheringChannel(OutputStream out) {\n+        Objects.requireNonNull(out, \"out\");\n+\n+        if (out.getClass() == FileOutputStream.class) {\n+            return ((FileOutputStream) out).getChannel();\n+        }\n+\n+        return new GatheringByteChannelImpl(out);\n+    }\n+\n+    private static class GatheringByteChannelImpl\n+        extends WritableByteChannelImpl\n+        implements GatheringByteChannel\n+    {\n+        GatheringByteChannelImpl(OutputStream out) {\n+            super(out);\n+        }\n+\n@@ -479,5 +545,0 @@\n-\n-        @Override\n-        protected void implCloseChannel() throws IOException {\n-            out.close();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/nio\/channels\/Channels.java","additions":86,"deletions":25,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-            try (GatheringByteChannel gbc = Channels.newChannel(filfos)) {\n+            try (GatheringByteChannel gbc = Channels.newGatheringChannel(filfos)) {\n@@ -168,1 +168,1 @@\n-            try (ScatteringByteChannel sbc = Channels.newChannel(filfis)) {\n+            try (ScatteringByteChannel sbc = Channels.newScatteringChannel(filfis)) {\n@@ -254,1 +254,1 @@\n-            try (GatheringByteChannel gbc = Channels.newChannel(filfos)) {\n+            try (GatheringByteChannel gbc = Channels.newGatheringChannel(filfos)) {\n@@ -332,1 +332,1 @@\n-            try (ScatteringByteChannel sbc = Channels.newChannel(filfis)) {\n+            try (ScatteringByteChannel sbc = Channels.newScatteringChannel(filfis)) {\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/GatherAndScatter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}