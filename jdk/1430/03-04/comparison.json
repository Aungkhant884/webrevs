{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,9 +36,1 @@\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.CharBuffer;\n-import java.nio.DoubleBuffer;\n-import java.nio.FloatBuffer;\n-import java.nio.IntBuffer;\n-import java.nio.LongBuffer;\n-import java.nio.ShortBuffer;\n-import java.util.Arrays;\n+import java.nio.*;\n@@ -47,1 +39,0 @@\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -54,1 +45,1 @@\n- *   test(Direct|Heap)(Bulk|Loop)(Get|Put)(Byte|Char|Short|Int|Long|Float|Double)(View)?(Swap)?\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)(Byte|Char|Short|Int|Long|Float|Double)(Swap)?(RO)?\n@@ -58,1 +49,0 @@\n- *   Char only   :- \"org.openjdk.bench.java.nio.ByteBuffers.test.*Char.*\"\n@@ -60,2 +50,2 @@\n- *   Put with Int or Long carrier :-\n- *      test(Direct|Heap)(Loop)(Put)(Int|Long)(View)?(Swap)?\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Byte(View)+(Swap)+\"\n@@ -71,0 +61,2 @@\n+    static final int CARRIER_BYTE_WIDTH = 1;\n+\n@@ -74,54 +66,17 @@\n-    public byte dummyByte;\n-    public char dummyChar;\n-    public short dummyShort;\n-    public int dummyInt;\n-    public long dummyLong;\n-    public float dummyFloat;\n-    public double dummyDouble;\n-\n-    public ByteBuffer   heapBuffer;\n-    public CharBuffer   heapCharBufferView;\n-    public ShortBuffer  heapShortBufferView;\n-    public IntBuffer    heapIntBufferView;\n-    public LongBuffer   heapLongBufferView;\n-    public FloatBuffer  heapFloatBufferView;\n-    public DoubleBuffer heapDoubleBufferView;\n-\n-    public ByteBuffer   directBuffer;\n-    public CharBuffer   directCharBufferView;\n-    public ShortBuffer  directShortBufferView;\n-    public IntBuffer    directIntBufferView;\n-    public LongBuffer   directLongBufferView;\n-    public FloatBuffer  directFloatBufferView;\n-    public DoubleBuffer directDoubleBufferView;\n-\n-    public ByteBuffer   heapBufferSwap;\n-    public CharBuffer   heapCharBufferViewSwap;\n-    public ShortBuffer  heapShortBufferViewSwap;\n-    public IntBuffer    heapIntBufferViewSwap;\n-    public LongBuffer   heapLongBufferViewSwap;\n-    public FloatBuffer  heapFloatBufferViewSwap;\n-    public DoubleBuffer heapDoubleBufferViewSwap;\n-\n-    public ByteBuffer   directBufferSwap;\n-    public CharBuffer   directCharBufferViewSwap;\n-    public ShortBuffer  directShortBufferViewSwap;\n-    public IntBuffer    directIntBufferViewSwap;\n-    public LongBuffer   directLongBufferViewSwap;\n-    public FloatBuffer  directFloatBufferViewSwap;\n-    public DoubleBuffer directDoubleBufferViewSwap;\n-\n-    public CharBuffer   heapAllocCharBuffer;\n-    public ShortBuffer  heapAllocShortBuffer;\n-    public IntBuffer    heapAllocIntBuffer;\n-    public LongBuffer   heapAllocLongBuffer;\n-    public FloatBuffer  heapAllocFloatBuffer;\n-    public DoubleBuffer heapAllocDoubleBuffer;\n-\n-    public byte[]   dummyByteArray;\n-    public char[]   dummyCharArray;\n-    public short[]  dummyShortArray;\n-    public int[]    dummyIntArray;\n-    public long[]   dummyLongArray;\n-    public float[]  dummyFloatArray;\n-    public double[] dummyDoubleArray;\n+    public byte byteValue;\n+    public char charValue;\n+    public short shortValue;\n+    public int intValue;\n+    public long longValue;\n+    public float floatValue;\n+    public double doubleValue;\n+    public byte[] byteArray;\n+\n+    public ByteBuffer heapByteBuffer;\n+    public ByteBuffer heapByteBufferRO;\n+    public ByteBuffer directByteBuffer;\n+    public ByteBuffer directByteBufferRO;\n+    public ByteBuffer heapByteBufferSwap;\n+    public ByteBuffer heapByteBufferSwapRO;\n+    public ByteBuffer directByteBufferSwap;\n+    public ByteBuffer directByteBufferSwapRO;\n@@ -131,86 +86,1 @@\n-        dummyByteArray   = new byte[size];\n-        dummyCharArray   = new char[size \/ 2];\n-        dummyShortArray  = new short[size \/ 2];\n-        dummyIntArray    = new int[size \/ 4];\n-        dummyLongArray   = new long[size \/ 8];\n-        dummyFloatArray  = new float[size \/ 4];\n-        dummyDoubleArray = new double[size \/ 8];\n-\n-        heapBuffer = ByteBuffer.allocate(size).order(nativeOrder());\n-        heapCharBufferView   = heapBuffer.asCharBuffer();\n-        heapShortBufferView  = heapBuffer.asShortBuffer();\n-        heapIntBufferView    = heapBuffer.asIntBuffer();\n-        heapLongBufferView   = heapBuffer.asLongBuffer();\n-        heapFloatBufferView  = heapBuffer.asFloatBuffer();\n-        heapDoubleBufferView = heapBuffer.asDoubleBuffer();\n-\n-        directBuffer = ByteBuffer.allocateDirect(size).order(nativeOrder());\n-        directCharBufferView   = directBuffer.asCharBuffer();\n-        directShortBufferView  = directBuffer.asShortBuffer();\n-        directIntBufferView    = directBuffer.asIntBuffer();\n-        directLongBufferView   = directBuffer.asLongBuffer();\n-        directFloatBufferView  = directBuffer.asFloatBuffer();\n-        directDoubleBufferView = directBuffer.asDoubleBuffer();\n-\n-        \/\/ endianness swapped\n-        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n-\n-        heapBufferSwap = ByteBuffer.allocate(size).order(nonNativeOrder);\n-        heapCharBufferViewSwap   = heapBufferSwap.asCharBuffer();\n-        heapShortBufferViewSwap  = heapBufferSwap.asShortBuffer();\n-        heapIntBufferViewSwap    = heapBufferSwap.asIntBuffer();\n-        heapLongBufferViewSwap   = heapBufferSwap.asLongBuffer();\n-        heapFloatBufferViewSwap  = heapBufferSwap.asFloatBuffer();\n-        heapDoubleBufferViewSwap = heapBufferSwap.asDoubleBuffer();\n-\n-        directBufferSwap = ByteBuffer.allocateDirect(size).order(nonNativeOrder);\n-        directCharBufferViewSwap   = directBufferSwap.asCharBuffer();\n-        directShortBufferViewSwap  = directBufferSwap.asShortBuffer();\n-        directIntBufferViewSwap    = directBufferSwap.asIntBuffer();\n-        directLongBufferViewSwap   = directBufferSwap.asLongBuffer();\n-        directFloatBufferViewSwap  = directBufferSwap.asFloatBuffer();\n-        directDoubleBufferViewSwap = directBufferSwap.asDoubleBuffer();\n-\n-        \/\/ explicitly allocated heap carrier buffers\n-        heapAllocCharBuffer   = CharBuffer.allocate(size \/2);\n-        heapAllocShortBuffer  = ShortBuffer.allocate(size \/ 2);\n-        heapAllocIntBuffer    = IntBuffer.allocate(size \/ 4);\n-        heapAllocLongBuffer   = LongBuffer.allocate(size \/ 8);\n-        heapAllocFloatBuffer  = FloatBuffer.allocate(size \/ 4);\n-        heapAllocDoubleBuffer = DoubleBuffer.allocate(size \/ 8);\n-    }\n-\n-    \/\/ ---------------- BULK GET TESTS\n-\n-    @Benchmark\n-    public byte[] testHeapBulkGetByte() {\n-        heapBuffer.get(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    @Benchmark\n-    public byte[] testDirectBulkGetByte() {\n-        directBuffer.get(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    \/\/ ---------------- BULK PUT TESTS\n-\n-    @Benchmark\n-    public byte[] testHeapBulkPutByte() {\n-        heapBuffer.put(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    @Benchmark\n-    public byte[] testDirectBulkPutByte() {\n-        directBuffer.put(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    \/\/ ---------------- LOOP GET TESTS\n-\n-    @Benchmark\n-    public int testHeapLoopGetByte() {\n-        return innerLoopGetByte(heapBuffer);\n-    }\n+        byteArray = new byte[size \/ CARRIER_BYTE_WIDTH];\n@@ -218,4 +88,3 @@\n-    @Benchmark\n-    public int testHeapLoopGetChar() {\n-        return innerLoopGetChar(heapBuffer);\n-    }\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapByteBuffer = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapByteBufferRO = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n@@ -223,3 +92,6 @@\n-    @Benchmark\n-    public int testHeapLoopGetShort() {\n-        return innerLoopGetShort(heapBuffer);\n+        heapByteBufferSwap     = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN);\n+        heapByteBufferSwapRO   = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN).asReadOnlyBuffer();\n+        directByteBuffer       = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH);\n+        directByteBufferRO     = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+        directByteBufferSwap   = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN);\n+        directByteBufferSwapRO = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN).asReadOnlyBuffer();\n@@ -228,4 +100,0 @@\n-    @Benchmark\n-    public int testHeapLoopGetInt() {\n-        return innerLoopGetInt(heapBuffer);\n-    }\n@@ -233,4 +101,1 @@\n-    @Benchmark\n-    public long testHeapLoopGetLong() {\n-        return innerLoopGetLong(heapBuffer);\n-    }\n+    \/\/ -- Heap   \n@@ -239,2 +104,3 @@\n-    public float testHeapLoopGetFloat() {\n-        return innerLoopGetFloat(heapBuffer);\n+    public byte[] testHeapBulkPutByte() {\n+        heapByteBuffer.put(0, byteArray);\n+        return byteArray;\n@@ -244,2 +110,3 @@\n-    public double testHeapLoopGetDouble() {\n-        return innerLoopGetDouble(heapBuffer);\n+    public byte[] testHeapBulkGetByte() {\n+        heapByteBuffer.get(0, byteArray);\n+        return byteArray;\n@@ -248,4 +115,1 @@\n-    @Benchmark\n-    public int testDirectLoopGetByte() {\n-        return innerLoopGetByte(directBuffer);\n-    }\n+    \/\/ -- Heap Byte Swap RO\n@@ -254,2 +118,6 @@\n-    public int testDirectLoopGetChar() {\n-        return innerLoopGetChar(directBuffer);\n+    public int testHeapLoopGetByteSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=1) {\n+            r += heapByteBufferSwapRO.get(i);\n+        }\n+        return r;\n@@ -258,4 +126,1 @@\n-    @Benchmark\n-    public int testDirectLoopGetShort() {\n-        return innerLoopGetShort(directBuffer);\n-    }\n+    \/\/ -- Heap Byte Swap \n@@ -264,2 +129,4 @@\n-    public int testDirectLoopGetInt() {\n-        return innerLoopGetInt(directBuffer);\n+    public void testHeapLoopPutByteSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=1) {\n+            heapByteBufferSwap.put(i, byteValue);\n+        }\n@@ -269,2 +136,6 @@\n-    public long testDirectLoopGetLong() {\n-        return innerLoopGetLong(directBuffer);\n+    public int testHeapLoopGetByteSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=1) {\n+            r += heapByteBufferSwap.get(i);\n+        }\n+        return r;\n@@ -273,4 +144,1 @@\n-    @Benchmark\n-    public float testDirectLoopGetFloat() {\n-        return innerLoopGetFloat(directBuffer);\n-    }\n+    \/\/ -- Heap Byte  RO\n@@ -279,2 +147,6 @@\n-    public double testDirectLoopGetDouble() {\n-        return innerLoopGetDouble(directBuffer);\n+    public int testHeapLoopGetByteRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=1) {\n+            r += heapByteBufferRO.get(i);\n+        }\n+        return r;\n@@ -283,1 +155,1 @@\n-    \/\/ ---------------- LOOP PUT TESTS\n+    \/\/ -- Heap Byte  \n@@ -287,517 +159,3 @@\n-        innerLoopPutByte(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutChar() {\n-        innerLoopPutChar(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutShort() {\n-        innerLoopPutShort(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutInt() {\n-        innerLoopPutInt(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutLong() {\n-        innerLoopPutLong(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutFloat() {\n-        innerLoopPutFloat(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutDouble() {\n-        innerLoopPutDouble(heapBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutByte() {\n-        innerLoopPutByte(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutChar() {\n-        innerLoopPutChar(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutShort() {\n-        innerLoopPutShort(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutInt() {\n-        innerLoopPutInt(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutLong() {\n-        innerLoopPutLong(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutFloat() {\n-        innerLoopPutFloat(directBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutDouble() {\n-        innerLoopPutDouble(directBuffer);\n-    }\n-\n-    \/\/ ----- BULK PUT\/GET TESTS HEAP (explicitly allocated carrier buffer)\n-\n-    @Benchmark\n-    public char[] testHeapBulkPutChar() {\n-        heapAllocCharBuffer.put(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public char[] testHeapBulkGetChar() {\n-        heapAllocCharBuffer.get(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testHeapBulkPutShor() {\n-        heapAllocShortBuffer.put(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testHeapBulkGetShort() {\n-        heapAllocShortBuffer.get(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testHeapBulkPutInt() {\n-        heapAllocIntBuffer.put(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testHeapBulkGetInt() {\n-        heapAllocIntBuffer.get(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testHeapBulkGetLong() {\n-        heapAllocLongBuffer.get(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testHeapBulkPutLong() {\n-        heapAllocLongBuffer.put(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testHeapBulkGetFloat() {\n-        heapAllocFloatBuffer.get(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testHeapBulkPutFloat() {\n-        heapAllocFloatBuffer.put(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testHeapBulkGetDouble() {\n-        heapAllocDoubleBuffer.get(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testHeapBulkPutDouble() {\n-        heapAllocDoubleBuffer.put(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    \/\/ ----- LOOP PUT\/GET TESTS HEAP (explicitly allocated carrier buffer)\n-\n-    @Benchmark\n-    public int testHeapLoopGetChar2() {\n-        return innerLoopGetChar(heapAllocCharBuffer);\n-    }\n-\n-    @Benchmark\n-    public int testHeapLoopGetShort2() {\n-        return innerLoopGetShort(heapAllocShortBuffer);\n-    }\n-\n-    @Benchmark\n-    public int testHeapLoopGetInt2() {\n-        return innerLoopGetInt(heapAllocIntBuffer);\n-    }\n-\n-    @Benchmark\n-    public long testHeapLoopGetLong2() {\n-        return innerLoopGetLong(heapAllocLongBuffer);\n-    }\n-\n-    @Benchmark\n-    public float testHeapLoopGetFloat2() {\n-        return innerLoopGetFloat(heapAllocFloatBuffer);\n-    }\n-\n-    @Benchmark\n-    public double testHeapLoopGetDouble2() {\n-        return innerLoopGetDouble(heapAllocDoubleBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutChar2() {\n-        innerLoopPutChar(heapAllocCharBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutShort2() {\n-        innerLoopPutShort(heapAllocShortBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutInt2() {\n-        innerLoopPutInt(heapAllocIntBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutLong2() {\n-        innerLoopPutLong(heapAllocLongBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutFloat2() {\n-        innerLoopPutFloat(heapAllocFloatBuffer);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutDouble2() {\n-        innerLoopPutDouble(heapAllocDoubleBuffer);\n-    }\n-\n-    \/\/ ---------------- Views ----------------\n-\n-    \/\/ ---------------- BULK PUT\/GET TESTS HEAP (Views)\n-\n-    @Benchmark\n-    public char[] testHeapBulkPutCharView() {\n-        heapCharBufferView.put(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public char[] testHeapBulkGetCharView() {\n-        heapCharBufferView.get(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testHeapBulkPutShortView() {\n-        heapShortBufferView.put(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testHeapBulkGetShortView() {\n-        heapShortBufferView.get(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testHeapBulkPutIntView() {\n-        heapIntBufferView.put(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testHeapBulkGetIntView() {\n-        heapIntBufferView.get(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testHeapBulkGetLongView() {\n-        heapLongBufferView.get(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testHeapBulkPutLongView() {\n-        heapLongBufferView.put(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testHeapBulkGetFloatView() {\n-        heapFloatBufferView.get(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testHeapBulkPutFloatView() {\n-        heapFloatBufferView.put(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testHeapBulkGetDoubleView() {\n-        heapDoubleBufferView.get(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testHeapBulkPutDoubleView() {\n-        heapDoubleBufferView.put(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    \/\/ ---------------- BULK PUT\/GET TESTS Direct (Views)\n-    @Benchmark\n-    public char[] testDirectBulkPutCharView() {\n-        directCharBufferView.put(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public char[] testDirectBulkGetCharView() {\n-        directCharBufferView.get(0, dummyCharArray);\n-        return dummyCharArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testDirectBulkPutShortView() {\n-        directShortBufferView.put(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public short[] testDirectBulkGetShortView() {\n-        directShortBufferView.get(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testDirectBulkPutIntView() {\n-        directIntBufferView.put(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public int[] testDirectBulkGetIntView() {\n-        directIntBufferView.get(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testDirectBulkGetLongView() {\n-        directLongBufferView.get(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public long[] testDirectBulkPutLongView() {\n-        directLongBufferView.put(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testDirectBulkGetFloatView() {\n-        directFloatBufferView.get(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public float[] testDirectBulkPutFloatView() {\n-        directFloatBufferView.put(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testDirectBulkGetDoubleView() {\n-        directDoubleBufferView.get(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    @Benchmark\n-    public double[] testDirectBulkPutDoubleView() {\n-        directDoubleBufferView.put(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n-    }\n-\n-    \/\/ ---------------- LOOP GET TESTS (Views)\n-\n-    @Benchmark\n-    public int testHeapLoopGetCharView() {\n-        return innerLoopGetChar(heapCharBufferView);\n-    }\n-\n-    @Benchmark\n-    public int testHeapLoopGetShortView() {\n-        return innerLoopGetShort(heapShortBufferView);\n-    }\n-\n-    @Benchmark\n-    public int testHeapLoopGetIntView() {\n-        return innerLoopGetInt(heapIntBufferView);\n-    }\n-\n-    @Benchmark\n-    public long testHeapLoopGetLongView() {\n-        return innerLoopGetLong(heapLongBufferView);\n-    }\n-\n-    @Benchmark\n-    public float testHeapLoopGetFloatView() {\n-        return innerLoopGetFloat(heapFloatBufferView);\n-    }\n-\n-    @Benchmark\n-    public double testHeapLoopGetDoubleView() {\n-        return innerLoopGetDouble(heapDoubleBufferView);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetCharView() {\n-        return innerLoopGetChar(directCharBufferView);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetShortView() {\n-        return innerLoopGetShort(directShortBufferView);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetIntView() {\n-        return innerLoopGetInt(directIntBufferView);\n-    }\n-\n-    @Benchmark\n-    public long testDirectLoopGetLongView() {\n-        return innerLoopGetLong(directLongBufferView);\n-    }\n-\n-    @Benchmark\n-    public float testDirectLoopGetFloatView() {\n-        return innerLoopGetFloat(directFloatBufferView);\n-    }\n-\n-    @Benchmark\n-    public double testDirectLoopGetDoubleView() {\n-        return innerLoopGetDouble(directDoubleBufferView);\n-    }\n-\n-    \/\/ ---------------- LOOP PUT TESTS (Views)\n-\n-    @Benchmark\n-    public void testHeapLoopPutCharView() {\n-        innerLoopPutChar(heapCharBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutShortView() {\n-        innerLoopPutShort(heapShortBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutIntView() {\n-        innerLoopPutInt(heapIntBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutLongView() {\n-        innerLoopPutLong(heapLongBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutFloatView() {\n-        innerLoopPutFloat(heapFloatBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutDoubleView() {\n-        innerLoopPutDouble(heapDoubleBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutCharView() {\n-        innerLoopPutChar(directCharBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutShortView() {\n-        innerLoopPutShort(directShortBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutIntView() {\n-        innerLoopPutInt(directIntBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutLongView() {\n-        innerLoopPutLong(directLongBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutFloatView() {\n-        innerLoopPutFloat(directFloatBufferView);\n-    }\n-\n-    @Benchmark\n-    public void testDirectLoopPutDoubleView() {\n-        innerLoopPutDouble(directDoubleBufferView);\n-    }\n-\n-    \/\/ -- Swapped endianness follows\n-\n-    \/\/ ---------------- BULK GET TESTS (swap)\n-\n-    @Benchmark\n-    public byte[] testHeapBulkGetByteSwap() {\n-        heapBufferSwap.get(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    @Benchmark\n-    public byte[] testDirectBulkGetByteSwap() {\n-        directBufferSwap.get(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    \/\/ ---------------- BULK PUT TESTS (swap)\n-\n-    @Benchmark\n-    public byte[] testHeapBulkPutByteSwap() {\n-        heapBufferSwap.put(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    @Benchmark\n-    public byte[] testDirectBulkPutByteSwap() {\n-        directBufferSwap.put(0, dummyByteArray);\n-        return dummyByteArray;\n-    }\n-\n-    \/\/ ---------------- LOOP GET TESTS (swap)\n-\n-    @Benchmark\n-    public int testHeapLoopGetByteSwap() {\n-        return innerLoopGetByte(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public int testHeapLoopGetCharSwap() {\n-        return innerLoopGetChar(heapBufferSwap);\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=1) {\n+            heapByteBuffer.put(i, byteValue);\n+        }\n@@ -807,2 +165,6 @@\n-    public int testHeapLoopGetShortSwap() {\n-        return innerLoopGetShort(heapBufferSwap);\n+    public int testHeapLoopGetByte() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=1) {\n+            r += heapByteBuffer.get(i);\n+        }\n+        return r;\n@@ -811,4 +173,1 @@\n-    @Benchmark\n-    public int testHeapLoopGetIntSwap() {\n-        return innerLoopGetInt(heapBufferSwap);\n-    }\n+    \/\/ -- Direct Byte Swap RO\n@@ -817,2 +176,6 @@\n-    public long testHeapLoopGetLongSwap() {\n-        return innerLoopGetLong(heapBufferSwap);\n+    public int testDirectLoopGetByteSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=1) {\n+            r += directByteBufferSwapRO.get(i);\n+        }\n+        return r;\n@@ -821,4 +184,1 @@\n-    @Benchmark\n-    public float testHeapLoopGetFloatSwap() {\n-        return innerLoopGetFloat(heapBufferSwap);\n-    }\n+    \/\/ -- Direct Byte Swap \n@@ -827,2 +187,4 @@\n-    public double testHeapLoopGetDoubleSwap() {\n-        return innerLoopGetDouble(heapBufferSwap);\n+    public void testDirectLoopPutByteSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=1) {\n+            directByteBufferSwap.put(i, byteValue);\n+        }\n@@ -833,68 +195,5 @@\n-        return innerLoopGetByte(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetCharSwap() {\n-        return innerLoopGetChar(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetShortSwap() {\n-        return innerLoopGetShort(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public int testDirectLoopGetIntSwap() {\n-        return innerLoopGetInt(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public long testDirectLoopGetLongSwap() {\n-        return innerLoopGetLong(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public float testDirectLoopGetFloatSwap() {\n-        return innerLoopGetFloat(directBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public double testDirectLoopGetDoubleSwap() {\n-        return innerLoopGetDouble(directBufferSwap);\n-    }\n-\n-    \/\/ ---------------- LOOP PUT TESTS (swap)\n-\n-    @Benchmark\n-    public void testHeapLoopPutByteSwap() {\n-        innerLoopPutByte(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutCharSwap() {\n-        innerLoopPutChar(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutShortSwap() {\n-        innerLoopPutShort(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutIntSwap() {\n-        innerLoopPutInt(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutLongSwap() {\n-        innerLoopPutLong(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutFloatSwap() {\n-        innerLoopPutFloat(heapBufferSwap);\n-    }\n-\n-    @Benchmark\n-    public void testHeapLoopPutDoubleSwap() {\n-        innerLoopPutDouble(heapBufferSwap);\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=1) {\n+            r += directByteBufferSwap.get(i);\n+        }\n+        return r;\n@@ -903,4 +202,1 @@\n-    @Benchmark\n-    public void testDirectLoopPutByteSwap() {\n-        innerLoopPutByte(directBufferSwap);\n-    }\n+    \/\/ -- Direct Byte  RO\n@@ -909,2 +205,6 @@\n-    public void testDirectLoopPutCharSwap() {\n-        innerLoopPutChar(directBufferSwap);\n+    public int testDirectLoopGetByteRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=1) {\n+            r += directByteBufferRO.get(i);\n+        }\n+        return r;\n@@ -913,4 +213,1 @@\n-    @Benchmark\n-    public void testDirectLoopPutShortSwap() {\n-        innerLoopPutShort(directBufferSwap);\n-    }\n+    \/\/ -- Direct Byte  \n@@ -919,2 +216,4 @@\n-    public void testDirectLoopPutIntSwap() {\n-        innerLoopPutInt(directBufferSwap);\n+    public void testDirectLoopPutByte() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=1) {\n+            directByteBuffer.put(i, byteValue);\n+        }\n@@ -924,2 +223,6 @@\n-    public void testDirectLoopPutLongSwap() {\n-        innerLoopPutLong(directBufferSwap);\n+    public int testDirectLoopGetByte() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=1) {\n+            r += directByteBuffer.get(i);\n+        }\n+        return r;\n@@ -928,4 +231,1 @@\n-    @Benchmark\n-    public void testDirectLoopPutFloatSwap() {\n-        innerLoopPutFloat(directBufferSwap);\n-    }\n+    \/\/ -- Heap Char Swap RO\n@@ -934,2 +234,6 @@\n-    public void testDirectLoopPutDoubleSwap() {\n-        innerLoopPutDouble(directBufferSwap);\n+    public int testHeapLoopGetCharSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=2) {\n+            r += heapByteBufferSwapRO.getChar(i);\n+        }\n+        return r;\n@@ -938,3 +242,1 @@\n-    \/\/ ---------------- Views (swap) ----------------\n-\n-    \/\/ ---------------- BULK GET TESTS HEAP (Views) (swap)\n+    \/\/ -- Heap Char Swap \n@@ -943,3 +245,4 @@\n-    public char[] testHeapBulkPutCharViewSwap() {\n-        heapCharBufferViewSwap.put(0, dummyCharArray);\n-        return dummyCharArray;\n+    public void testHeapLoopPutCharSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=2) {\n+            heapByteBufferSwap.putChar(i, charValue);\n+        }\n@@ -949,3 +252,6 @@\n-    public char[] testHeapBulkGetCharViewSwap() {\n-        heapCharBufferViewSwap.get(0, dummyCharArray);\n-        return dummyCharArray;\n+    public int testHeapLoopGetCharSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=2) {\n+            r += heapByteBufferSwap.getChar(i);\n+        }\n+        return r;\n@@ -954,5 +260,1 @@\n-    @Benchmark\n-    public short[] testHeapBulkPutShortViewSwap() {\n-        heapShortBufferViewSwap.put(0, dummyShortArray);\n-        return dummyShortArray;\n-    }\n+    \/\/ -- Heap Char  RO\n@@ -961,3 +263,6 @@\n-    public short[] testHeapBulkGetShortViewSwap() {\n-        heapShortBufferViewSwap.get(0, dummyShortArray);\n-        return dummyShortArray;\n+    public int testHeapLoopGetCharRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=2) {\n+            r += heapByteBufferRO.getChar(i);\n+        }\n+        return r;\n@@ -966,5 +271,1 @@\n-    @Benchmark\n-    public int[] testHeapBulkPutIntViewSwap() {\n-        heapIntBufferViewSwap.put(0, dummyIntArray);\n-        return dummyIntArray;\n-    }\n+    \/\/ -- Heap Char  \n@@ -973,3 +274,4 @@\n-    public int[] testHeapBulkGetIntViewSwap() {\n-        heapIntBufferViewSwap.get(0, dummyIntArray);\n-        return dummyIntArray;\n+    public void testHeapLoopPutChar() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=2) {\n+            heapByteBuffer.putChar(i, charValue);\n+        }\n@@ -979,3 +281,6 @@\n-    public long[] testHeapBulkGetLongViewSwap() {\n-        heapLongBufferViewSwap.get(0, dummyLongArray);\n-        return dummyLongArray;\n+    public int testHeapLoopGetChar() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=2) {\n+            r += heapByteBuffer.getChar(i);\n+        }\n+        return r;\n@@ -984,5 +289,1 @@\n-    @Benchmark\n-    public long[] testHeapBulkPutLongViewSwap() {\n-        heapLongBufferViewSwap.put(0, dummyLongArray);\n-        return dummyLongArray;\n-    }\n+    \/\/ -- Direct Char Swap RO\n@@ -991,3 +292,6 @@\n-    public float[] testHeapBulkGetFloatViewSwap() {\n-        heapFloatBufferViewSwap.get(0, dummyFloatArray);\n-        return dummyFloatArray;\n+    public int testDirectLoopGetCharSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=2) {\n+            r += directByteBufferSwapRO.getChar(i);\n+        }\n+        return r;\n@@ -996,5 +300,1 @@\n-    @Benchmark\n-    public float[] testHeapBulkPutFloatViewSwap() {\n-        heapFloatBufferViewSwap.put(0, dummyFloatArray);\n-        return dummyFloatArray;\n-    }\n+    \/\/ -- Direct Char Swap \n@@ -1003,3 +303,4 @@\n-    public double[] testHeapBulkGetDoubleViewSwap() {\n-        heapDoubleBufferViewSwap.get(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n+    public void testDirectLoopPutCharSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=2) {\n+            directByteBufferSwap.putChar(i, charValue);\n+        }\n@@ -1009,3 +310,6 @@\n-    public double[] testHeapBulkPutDoubleViewSwap() {\n-        heapDoubleBufferViewSwap.put(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n+    public int testDirectLoopGetCharSwap() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=2) {\n+            r += directByteBufferSwap.getChar(i);\n+        }\n+        return r;\n@@ -1014,1 +318,2 @@\n-    \/\/ ---------------- BULK GET TESTS Direct (Views) (swap)\n+    \/\/ -- Direct Char  RO\n+\n@@ -1016,3 +321,6 @@\n-    public char[] testDirectBulkPutCharViewSwap() {\n-        directCharBufferViewSwap.put(0, dummyCharArray);\n-        return dummyCharArray;\n+    public int testDirectLoopGetCharRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=2) {\n+            r += directByteBufferRO.getChar(i);\n+        }\n+        return r;\n@@ -1021,0 +329,2 @@\n+    \/\/ -- Direct Char  \n+\n@@ -1022,3 +332,4 @@\n-    public char[] testDirectBulkGetCharViewSwap() {\n-        directCharBufferViewSwap.get(0, dummyCharArray);\n-        return dummyCharArray;\n+    public void testDirectLoopPutChar() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=2) {\n+            directByteBuffer.putChar(i, charValue);\n+        }\n@@ -1028,3 +339,6 @@\n-    public short[] testDirectBulkPutShortViewSwap() {\n-        directShortBufferViewSwap.put(0, dummyShortArray);\n-        return dummyShortArray;\n+    public int testDirectLoopGetChar() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=2) {\n+            r += directByteBuffer.getChar(i);\n+        }\n+        return r;\n@@ -1033,0 +347,2 @@\n+    \/\/ -- Heap Short Swap RO\n+\n@@ -1034,3 +350,6 @@\n-    public short[] testDirectBulkGetShortViewSwap() {\n-        directShortBufferViewSwap.get(0, dummyShortArray);\n-        return dummyShortArray;\n+    public int testHeapLoopGetShortSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=2) {\n+            r += heapByteBufferSwapRO.getShort(i);\n+        }\n+        return r;\n@@ -1039,0 +358,2 @@\n+    \/\/ -- Heap Short Swap \n+\n@@ -1040,3 +361,4 @@\n-    public int[] testDirectBulkPutIntViewSwap() {\n-        directIntBufferViewSwap.put(0, dummyIntArray);\n-        return dummyIntArray;\n+    public void testHeapLoopPutShortSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=2) {\n+            heapByteBufferSwap.putShort(i, shortValue);\n+        }\n@@ -1046,3 +368,6 @@\n-    public int[] testDirectBulkGetIntViewSwap() {\n-        directIntBufferViewSwap.get(0, dummyIntArray);\n-        return dummyIntArray;\n+    public int testHeapLoopGetShortSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=2) {\n+            r += heapByteBufferSwap.getShort(i);\n+        }\n+        return r;\n@@ -1051,0 +376,2 @@\n+    \/\/ -- Heap Short  RO\n+\n@@ -1052,3 +379,6 @@\n-    public long[] testDirectBulkGetLongViewSwap() {\n-        directLongBufferViewSwap.get(0, dummyLongArray);\n-        return dummyLongArray;\n+    public int testHeapLoopGetShortRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=2) {\n+            r += heapByteBufferRO.getShort(i);\n+        }\n+        return r;\n@@ -1057,0 +387,2 @@\n+    \/\/ -- Heap Short  \n+\n@@ -1058,3 +390,4 @@\n-    public long[] testDirectBulkPutLongViewSwap() {\n-        directLongBufferViewSwap.put(0, dummyLongArray);\n-        return dummyLongArray;\n+    public void testHeapLoopPutShort() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=2) {\n+            heapByteBuffer.putShort(i, shortValue);\n+        }\n@@ -1064,3 +397,6 @@\n-    public float[] testDirectBulkGetFloatViewSwap() {\n-        directFloatBufferViewSwap.get(0, dummyFloatArray);\n-        return dummyFloatArray;\n+    public int testHeapLoopGetShort() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=2) {\n+            r += heapByteBuffer.getShort(i);\n+        }\n+        return r;\n@@ -1069,0 +405,2 @@\n+    \/\/ -- Direct Short Swap RO\n+\n@@ -1070,3 +408,6 @@\n-    public float[] testDirectBulkPutFloatViewSwap() {\n-        directFloatBufferViewSwap.put(0, dummyFloatArray);\n-        return dummyFloatArray;\n+    public int testDirectLoopGetShortSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=2) {\n+            r += directByteBufferSwapRO.getShort(i);\n+        }\n+        return r;\n@@ -1075,0 +416,2 @@\n+    \/\/ -- Direct Short Swap \n+\n@@ -1076,3 +419,4 @@\n-    public double[] testDirectBulkGetDoubleViewSwap() {\n-        directDoubleBufferViewSwap.get(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n+    public void testDirectLoopPutShortSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=2) {\n+            directByteBufferSwap.putShort(i, shortValue);\n+        }\n@@ -1082,3 +426,6 @@\n-    public double[] testDirectBulkPutDoubleViewSwap() {\n-        directDoubleBufferViewSwap.put(0, dummyDoubleArray);\n-        return dummyDoubleArray;\n+    public int testDirectLoopGetShortSwap() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=2) {\n+            r += directByteBufferSwap.getShort(i);\n+        }\n+        return r;\n@@ -1087,1 +434,1 @@\n-    \/\/ ---------------- LOOP GET TESTS (Views) (swap)\n+    \/\/ -- Direct Short  RO\n@@ -1090,2 +437,6 @@\n-    public int testHeapLoopGetCharViewSwap() {\n-        return innerLoopGetChar(heapCharBufferViewSwap);\n+    public int testDirectLoopGetShortRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=2) {\n+            r += directByteBufferRO.getShort(i);\n+        }\n+        return r;\n@@ -1094,0 +445,2 @@\n+    \/\/ -- Direct Short  \n+\n@@ -1095,2 +448,4 @@\n-    public int testHeapLoopGetShortViewSwap() {\n-        return innerLoopGetShort(heapShortBufferViewSwap);\n+    public void testDirectLoopPutShort() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=2) {\n+            directByteBuffer.putShort(i, shortValue);\n+        }\n@@ -1100,2 +455,6 @@\n-    public int testHeapLoopGetIntViewSwap() {\n-        return innerLoopGetInt(heapIntBufferViewSwap);\n+    public int testDirectLoopGetShort() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=2) {\n+            r += directByteBuffer.getShort(i);\n+        }\n+        return r;\n@@ -1104,0 +463,2 @@\n+    \/\/ -- Heap Int Swap RO\n+\n@@ -1105,2 +466,6 @@\n-    public long testHeapLoopGetLongViewSwap() {\n-        return innerLoopGetLong(heapLongBufferViewSwap);\n+    public int testHeapLoopGetIntSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=4) {\n+            r += heapByteBufferSwapRO.getInt(i);\n+        }\n+        return r;\n@@ -1109,0 +474,2 @@\n+    \/\/ -- Heap Int Swap \n+\n@@ -1110,2 +477,4 @@\n-    public float testHeapLoopGetFloatViewSwap() {\n-        return innerLoopGetFloat(heapFloatBufferViewSwap);\n+    public void testHeapLoopPutIntSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=4) {\n+            heapByteBufferSwap.putInt(i, intValue);\n+        }\n@@ -1115,2 +484,6 @@\n-    public double testHeapLoopGetDoubleViewSwap() {\n-        return innerLoopGetDouble(heapDoubleBufferViewSwap);\n+    public int testHeapLoopGetIntSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=4) {\n+            r += heapByteBufferSwap.getInt(i);\n+        }\n+        return r;\n@@ -1119,0 +492,2 @@\n+    \/\/ -- Heap Int  RO\n+\n@@ -1120,2 +495,6 @@\n-    public int testDirectLoopGetCharViewSwap() {\n-        return innerLoopGetChar(directCharBufferViewSwap);\n+    public int testHeapLoopGetIntRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=4) {\n+            r += heapByteBufferRO.getInt(i);\n+        }\n+        return r;\n@@ -1124,0 +503,2 @@\n+    \/\/ -- Heap Int  \n+\n@@ -1125,2 +506,4 @@\n-    public int testDirectLoopGetShortViewSwap() {\n-        return innerLoopGetShort(directShortBufferViewSwap);\n+    public void testHeapLoopPutInt() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=4) {\n+            heapByteBuffer.putInt(i, intValue);\n+        }\n@@ -1130,2 +513,6 @@\n-    public int testDirectLoopGetIntViewSwap() {\n-        return innerLoopGetInt(directIntBufferViewSwap);\n+    public int testHeapLoopGetInt() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=4) {\n+            r += heapByteBuffer.getInt(i);\n+        }\n+        return r;\n@@ -1134,0 +521,2 @@\n+    \/\/ -- Direct Int Swap RO\n+\n@@ -1135,2 +524,6 @@\n-    public long testDirectLoopGetLongViewSwap() {\n-        return innerLoopGetLong(directLongBufferViewSwap);\n+    public int testDirectLoopGetIntSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=4) {\n+            r += directByteBufferSwapRO.getInt(i);\n+        }\n+        return r;\n@@ -1139,0 +532,2 @@\n+    \/\/ -- Direct Int Swap \n+\n@@ -1140,2 +535,4 @@\n-    public float testDirectLoopGetFloatViewSwap() {\n-        return innerLoopGetFloat(directFloatBufferViewSwap);\n+    public void testDirectLoopPutIntSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=4) {\n+            directByteBufferSwap.putInt(i, intValue);\n+        }\n@@ -1145,2 +542,6 @@\n-    public double testDirectLoopGetDoubleViewSwap() {\n-        return innerLoopGetDouble(directDoubleBufferViewSwap);\n+    public int testDirectLoopGetIntSwap() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=4) {\n+            r += directByteBufferSwap.getInt(i);\n+        }\n+        return r;\n@@ -1149,1 +550,1 @@\n-    \/\/ ---------------- LOOP PUT TESTS (Views) (swap)\n+    \/\/ -- Direct Int  RO\n@@ -1152,2 +553,6 @@\n-    public void testHeapLoopPutCharViewSwap() {\n-        innerLoopPutChar(heapCharBufferViewSwap);\n+    public int testDirectLoopGetIntRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=4) {\n+            r += directByteBufferRO.getInt(i);\n+        }\n+        return r;\n@@ -1156,4 +561,1 @@\n-    @Benchmark\n-    public void testHeapLoopPutShortViewSwap() {\n-        innerLoopPutShort(heapShortBufferViewSwap);\n-    }\n+    \/\/ -- Direct Int  \n@@ -1162,2 +564,4 @@\n-    public void testHeapLoopPutIntViewSwap() {\n-        innerLoopPutInt(heapIntBufferViewSwap);\n+    public void testDirectLoopPutInt() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=4) {\n+            directByteBuffer.putInt(i, intValue);\n+        }\n@@ -1167,2 +571,6 @@\n-    public void testHeapLoopPutLongViewSwap() {\n-        innerLoopPutLong(heapLongBufferViewSwap);\n+    public int testDirectLoopGetInt() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=4) {\n+            r += directByteBuffer.getInt(i);\n+        }\n+        return r;\n@@ -1171,0 +579,2 @@\n+    \/\/ -- Heap Long Swap RO\n+\n@@ -1172,2 +582,6 @@\n-    public void testHeapLoopPutFloatViewSwap() {\n-        innerLoopPutFloat(heapFloatBufferViewSwap);\n+    public int testHeapLoopGetLongSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=8) {\n+            r += heapByteBufferSwapRO.getLong(i);\n+        }\n+        return r;\n@@ -1176,0 +590,2 @@\n+    \/\/ -- Heap Long Swap \n+\n@@ -1177,2 +593,4 @@\n-    public void testHeapLoopPutDoubleViewSwap() {\n-        innerLoopPutDouble(heapDoubleBufferViewSwap);\n+    public void testHeapLoopPutLongSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=8) {\n+            heapByteBufferSwap.putLong(i, longValue);\n+        }\n@@ -1182,2 +600,6 @@\n-    public void testDirectLoopPutCharViewSwap() {\n-        innerLoopPutChar(directCharBufferViewSwap);\n+    public int testHeapLoopGetLongSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=8) {\n+            r += heapByteBufferSwap.getLong(i);\n+        }\n+        return r;\n@@ -1186,0 +608,2 @@\n+    \/\/ -- Heap Long  RO\n+\n@@ -1187,2 +611,6 @@\n-    public void testDirectLoopPutShortViewSwap() {\n-        innerLoopPutShort(directShortBufferViewSwap);\n+    public int testHeapLoopGetLongRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=8) {\n+            r += heapByteBufferRO.getLong(i);\n+        }\n+        return r;\n@@ -1191,0 +619,2 @@\n+    \/\/ -- Heap Long  \n+\n@@ -1192,2 +622,4 @@\n-    public void testDirectLoopPutIntViewSwap() {\n-        innerLoopPutInt(directIntBufferViewSwap);\n+    public void testHeapLoopPutLong() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=8) {\n+            heapByteBuffer.putLong(i, longValue);\n+        }\n@@ -1197,2 +629,6 @@\n-    public void testDirectLoopPutLongViewSwap() {\n-        innerLoopPutLong(directLongBufferViewSwap);\n+    public int testHeapLoopGetLong() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=8) {\n+            r += heapByteBuffer.getLong(i);\n+        }\n+        return r;\n@@ -1201,0 +637,2 @@\n+    \/\/ -- Direct Long Swap RO\n+\n@@ -1202,2 +640,6 @@\n-    public void testDirectLoopPutFloatViewSwap() {\n-        innerLoopPutFloat(directFloatBufferViewSwap);\n+    public int testDirectLoopGetLongSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=8) {\n+            r += directByteBufferSwapRO.getLong(i);\n+        }\n+        return r;\n@@ -1206,0 +648,2 @@\n+    \/\/ -- Direct Long Swap \n+\n@@ -1207,2 +651,4 @@\n-    public void testDirectLoopPutDoubleViewSwap() {\n-        innerLoopPutDouble(directDoubleBufferViewSwap);\n+    public void testDirectLoopPutLongSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=8) {\n+            directByteBufferSwap.putLong(i, longValue);\n+        }\n@@ -1211,3 +657,2 @@\n-    \/\/ ---------------- HELPER METHODS\n-\n-    private int innerLoopGetByte(ByteBuffer bb) {\n+    @Benchmark\n+    public int testDirectLoopGetLongSwap() {\n@@ -1215,2 +660,2 @@\n-        for (int i = 0; i < bb.capacity(); i++) {\n-            r += bb.get(i);\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=8) {\n+            r += directByteBufferSwap.getLong(i);\n@@ -1221,1 +666,4 @@\n-    private int innerLoopGetChar(ByteBuffer bb) {\n+    \/\/ -- Direct Long  RO\n+\n+    @Benchmark\n+    public int testDirectLoopGetLongRO() {\n@@ -1223,2 +671,2 @@\n-        for (int i = 0; i < bb.capacity(); i += 2) {\n-            r += bb.getChar(i);\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=8) {\n+            r += directByteBufferRO.getLong(i);\n@@ -1229,4 +677,6 @@\n-    private int innerLoopGetChar(CharBuffer cb) {\n-        int r = 0;\n-        for (int i = 0; i < cb.capacity(); i++) {\n-            r += cb.get(i);\n+    \/\/ -- Direct Long  \n+\n+    @Benchmark\n+    public void testDirectLoopPutLong() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=8) {\n+            directByteBuffer.putLong(i, longValue);\n@@ -1234,1 +684,0 @@\n-        return r;\n@@ -1237,1 +686,2 @@\n-    private int innerLoopGetShort(ByteBuffer bb) {\n+    @Benchmark\n+    public int testDirectLoopGetLong() {\n@@ -1239,2 +689,2 @@\n-        for (int i = 0; i < bb.capacity(); i += 2) {\n-            r += bb.getShort(i);\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=8) {\n+            r += directByteBuffer.getLong(i);\n@@ -1245,1 +695,4 @@\n-    private int innerLoopGetShort(ShortBuffer sb) {\n+    \/\/ -- Heap Float Swap RO\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatSwapRO() {\n@@ -1247,2 +700,2 @@\n-        for (int i = 0; i < sb.capacity(); i++) {\n-            r += sb.get(i);\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=4) {\n+            r += heapByteBufferSwapRO.getFloat(i);\n@@ -1253,4 +706,6 @@\n-    private int innerLoopGetInt(ByteBuffer bb) {\n-        int r = 0;\n-        for (int i = 0; i < bb.capacity(); i += 4) {\n-            r += bb.getInt(i);\n+    \/\/ -- Heap Float Swap \n+\n+    @Benchmark\n+    public void testHeapLoopPutFloatSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=4) {\n+            heapByteBufferSwap.putFloat(i, floatValue);\n@@ -1258,1 +713,0 @@\n-        return r;\n@@ -1261,1 +715,2 @@\n-    private int innerLoopGetInt(IntBuffer ib) {\n+    @Benchmark\n+    public int testHeapLoopGetFloatSwap() {\n@@ -1263,2 +718,2 @@\n-        for (int i = 0; i < ib.capacity(); i++) {\n-            r += ib.get(i);\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=4) {\n+            r += heapByteBufferSwap.getFloat(i);\n@@ -1269,4 +724,7 @@\n-    private long innerLoopGetLong(ByteBuffer bb) {\n-        long r = 0;\n-        for (int i = 0; i < bb.capacity(); i += 8) {\n-            r += bb.getLong(i);\n+    \/\/ -- Heap Float  RO\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=4) {\n+            r += heapByteBufferRO.getFloat(i);\n@@ -1277,4 +735,6 @@\n-    private long innerLoopGetLong(LongBuffer lb) {\n-        long r = 0;\n-        for (int i = 0; i < lb.capacity(); i++) {\n-            r += lb.get(i);\n+    \/\/ -- Heap Float  \n+\n+    @Benchmark\n+    public void testHeapLoopPutFloat() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=4) {\n+            heapByteBuffer.putFloat(i, floatValue);\n@@ -1282,1 +742,0 @@\n-        return r;\n@@ -1285,4 +744,5 @@\n-    private float innerLoopGetFloat(ByteBuffer bb) {\n-        float r = 0;\n-        for (int i = 0; i < bb.capacity(); i += 4) {\n-            r += bb.getFloat(i);\n+    @Benchmark\n+    public int testHeapLoopGetFloat() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=4) {\n+            r += heapByteBuffer.getFloat(i);\n@@ -1293,4 +753,7 @@\n-    private float innerLoopGetFloat(FloatBuffer fb) {\n-        float r = 0;\n-        for (int i = 0; i < fb.capacity(); i++) {\n-            r += fb.get(i);\n+    \/\/ -- Direct Float Swap RO\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=4) {\n+            r += directByteBufferSwapRO.getFloat(i);\n@@ -1301,7 +764,1 @@\n-    private double innerLoopGetDouble(ByteBuffer bb) {\n-        double d = 0;\n-        for (int i = 0; i < bb.capacity(); i += 8) {\n-            d += bb.getDouble(i);\n-        }\n-        return d;\n-    }\n+    \/\/ -- Direct Float Swap \n@@ -1309,4 +766,4 @@\n-    private double innerLoopGetDouble(DoubleBuffer db) {\n-        double d = 0;\n-        for (int i = 0; i < db.capacity(); i++) {\n-            d += db.get(i);\n+    @Benchmark\n+    public void testDirectLoopPutFloatSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=4) {\n+            directByteBufferSwap.putFloat(i, floatValue);\n@@ -1314,1 +771,0 @@\n-        return d;\n@@ -1317,3 +773,5 @@\n-    private void innerLoopPutByte(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i++) {\n-            bb.put(i, dummyByte);\n+    @Benchmark\n+    public int testDirectLoopGetFloatSwap() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=4) {\n+            r += directByteBufferSwap.getFloat(i);\n@@ -1321,0 +779,1 @@\n+        return r;\n@@ -1323,3 +782,7 @@\n-    private void innerLoopPutChar(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 2) {\n-            bb.putChar(i, dummyChar);\n+    \/\/ -- Direct Float  RO\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=4) {\n+            r += directByteBufferRO.getFloat(i);\n@@ -1327,0 +790,1 @@\n+        return r;\n@@ -1329,3 +793,6 @@\n-    private void innerLoopPutChar(CharBuffer cb) {\n-        for (int i = 0; i < cb.capacity(); i++) {\n-            cb.put(i, dummyChar);\n+    \/\/ -- Direct Float  \n+\n+    @Benchmark\n+    public void testDirectLoopPutFloat() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=4) {\n+            directByteBuffer.putFloat(i, floatValue);\n@@ -1335,3 +802,5 @@\n-    private void innerLoopPutShort(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 2) {\n-            bb.putShort(i, dummyShort);\n+    @Benchmark\n+    public int testDirectLoopGetFloat() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=4) {\n+            r += directByteBuffer.getFloat(i);\n@@ -1339,0 +808,1 @@\n+        return r;\n@@ -1341,3 +811,7 @@\n-    private void innerLoopPutShort(ShortBuffer sb) {\n-        for (int i = 0; i < sb.capacity(); i++) {\n-            sb.put(i, dummyShort);\n+    \/\/ -- Heap Double Swap RO\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwapRO.capacity(); i+=8) {\n+            r += heapByteBufferSwapRO.getDouble(i);\n@@ -1345,0 +819,1 @@\n+        return r;\n@@ -1347,3 +822,6 @@\n-    private void innerLoopPutInt(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 4) {\n-            bb.putInt(i, dummyInt);\n+    \/\/ -- Heap Double Swap \n+\n+    @Benchmark\n+    public void testHeapLoopPutDoubleSwap() {\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=8) {\n+            heapByteBufferSwap.putDouble(i, doubleValue);\n@@ -1353,3 +831,5 @@\n-    private void innerLoopPutInt(IntBuffer ib) {\n-        for (int i = 0; i < ib.capacity(); i++) {\n-            ib.put(i, dummyInt);\n+    @Benchmark\n+    public int testHeapLoopGetDoubleSwap() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferSwap.capacity(); i+=8) {\n+            r += heapByteBufferSwap.getDouble(i);\n@@ -1357,0 +837,1 @@\n+        return r;\n@@ -1359,3 +840,7 @@\n-    private void innerLoopPutLong(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 8) {\n-            bb.putLong(i, dummyLong);\n+    \/\/ -- Heap Double  RO\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleRO() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBufferRO.capacity(); i+=8) {\n+            r += heapByteBufferRO.getDouble(i);\n@@ -1363,0 +848,1 @@\n+        return r;\n@@ -1365,3 +851,6 @@\n-    private void innerLoopPutLong(LongBuffer lb) {\n-        for (int i = 0; i < lb.capacity(); i++) {\n-            lb.put(i, dummyLong);\n+    \/\/ -- Heap Double  \n+\n+    @Benchmark\n+    public void testHeapLoopPutDouble() {\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=8) {\n+            heapByteBuffer.putDouble(i, doubleValue);\n@@ -1371,3 +860,5 @@\n-    private void innerLoopPutFloat(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 4) {\n-            bb.putFloat(i, dummyFloat);\n+    @Benchmark\n+    public int testHeapLoopGetDouble() {\n+        int r = 0;\n+        for (int i = 0; i < heapByteBuffer.capacity(); i+=8) {\n+            r += heapByteBuffer.getDouble(i);\n@@ -1375,0 +866,1 @@\n+        return r;\n@@ -1376,3 +868,8 @@\n-    private void innerLoopPutFloat(FloatBuffer fb) {\n-        for (int i = 0; i < fb.capacity(); i++) {\n-            fb.put(i, dummyFloat);\n+\n+    \/\/ -- Direct Double Swap RO\n+\n+    @Benchmark\n+    public int testDirectLoopGetDoubleSwapRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwapRO.capacity(); i+=8) {\n+            r += directByteBufferSwapRO.getDouble(i);\n@@ -1380,0 +877,1 @@\n+        return r;\n@@ -1382,3 +880,6 @@\n-    private void innerLoopPutDouble(ByteBuffer bb) {\n-        for (int i = 0; i < bb.capacity(); i += 8) {\n-            bb.putDouble(i, dummyDouble);\n+    \/\/ -- Direct Double Swap \n+\n+    @Benchmark\n+    public void testDirectLoopPutDoubleSwap() {\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=8) {\n+            directByteBufferSwap.putDouble(i, doubleValue);\n@@ -1388,3 +889,5 @@\n-    private void innerLoopPutDouble(DoubleBuffer db) {\n-        for (int i = 0; i < db.capacity(); i++) {\n-            db.put(i, dummyDouble);\n+    @Benchmark\n+    public int testDirectLoopGetDoubleSwap() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferSwap.capacity(); i+=8) {\n+            r += directByteBufferSwap.getDouble(i);\n@@ -1392,0 +895,1 @@\n+        return r;\n@@ -1394,28 +898,1 @@\n-    \/\/ -- sanity\n-\n-    \/\/ A subset of operations, as a basic correctness sanity\n-    public static void main(String ...args) {\n-        var test = new ByteBuffers();\n-        test.size = 16;\n-        test.setup();\n-\n-        \/\/ byte\n-        test.dummyByteArray = \"0123456789ABCDEF\".getBytes(US_ASCII);\n-        test.testHeapBulkPutByte();\n-        var ba = test.testHeapBulkGetByte();\n-        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n-\n-        test.dummyByteArray = \"FEDCBA9876543210\".getBytes(US_ASCII);\n-        test.testDirectBulkPutByte();\n-        ba = test.testDirectBulkGetByte();\n-        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n-\n-        test.dummyByte = 0x01;\n-        test.testHeapLoopPutByte();\n-        int x = test.testHeapLoopGetByte();\n-        assertTrue(x == (0x01 * 16));\n-\n-        test.dummyByte = 0x03;\n-        test.testDirectLoopPutByte();\n-        x = test.testDirectLoopGetByte();\n-        assertTrue(x == (0x03 * 16));\n+    \/\/ -- Direct Double  RO\n@@ -1423,20 +900,8 @@\n-        \/\/ char\n-        test.dummyCharArray = \"FFEEFFEE\".toCharArray();\n-        test.testHeapBulkPutCharView();\n-        var ca = test.testHeapBulkGetCharView();\n-        assertTrue(Arrays.equals(ca, test.dummyCharArray));\n-\n-        test.dummyChar = 0x03;\n-        test.testHeapLoopPutChar();\n-        var v = test.testHeapLoopGetChar();\n-        assertTrue(v == 0x03 * 8);\n-\n-        test.dummyChar = 0x05;\n-        test.testHeapLoopPutCharView();\n-        v = test.testHeapLoopGetCharView();\n-        assertTrue(v == 0x05 * 8);\n-\n-        test.dummyChar = 0x07;\n-        test.testDirectLoopPutCharView();\n-        v = test.testDirectLoopGetCharView();\n-        assertTrue(v == 0x07 * 8);\n+    @Benchmark\n+    public int testDirectLoopGetDoubleRO() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBufferRO.capacity(); i+=8) {\n+            r += directByteBufferRO.getDouble(i);\n+        }\n+        return r;\n+    }\n@@ -1444,6 +909,1 @@\n-        \/\/ int\n-        test.dummyIntArray = new int[] { 0x01020304, 0x01020304, 0x01020304, 0x01020304 };\n-        test.testHeapBulkPutIntView();\n-        test.testHeapBulkPutIntViewSwap();\n-        test.testDirectBulkPutIntView();\n-        test.testDirectBulkPutIntViewSwap();\n+    \/\/ -- Direct Double  \n@@ -1451,11 +911,4 @@\n-        byte[] heapLil, heapBig, directLil, directBig;\n-        if (nativeOrder() == LITTLE_ENDIAN) {\n-            var b1 = test.testHeapBulkGetByte();       heapLil   = Arrays.copyOf(b1, b1.length);\n-            var b2 = test.testHeapBulkGetByteSwap();   heapBig   = Arrays.copyOf(b2, b2.length);\n-            var b3 = test.testDirectBulkGetByte();     directLil = Arrays.copyOf(b3, b3.length);\n-            var b4 = test.testDirectBulkGetByteSwap(); directBig = Arrays.copyOf(b4, b4.length);\n-        } else {\n-            var b1 = test.testHeapBulkGetByteSwap();   heapLil   = Arrays.copyOf(b1, b1.length);\n-            var b2 = test.testHeapBulkGetByte();       heapBig   = Arrays.copyOf(b2, b2.length);\n-            var b3 = test.testDirectBulkGetByteSwap(); directLil = Arrays.copyOf(b3, b3.length);\n-            var b4 = test.testDirectBulkGetByte();     directBig = Arrays.copyOf(b4, b4.length);\n+    @Benchmark\n+    public void testDirectLoopPutDouble() {\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=8) {\n+            directByteBuffer.putDouble(i, doubleValue);\n@@ -1463,0 +916,1 @@\n+    }\n@@ -1464,24 +918,7 @@\n-        for (int i=0; i<16; i+=4) {\n-            assertTrue(heapLil[i + 0] == 0x04);\n-            assertTrue(heapLil[i + 1] == 0x03);\n-            assertTrue(heapLil[i + 2] == 0x02);\n-            assertTrue(heapLil[i + 3] == 0x01);\n-            assertTrue(heapBig[i + 0] == 0x01);\n-            assertTrue(heapBig[i + 1] == 0x02);\n-            assertTrue(heapBig[i + 2] == 0x03);\n-            assertTrue(heapBig[i + 3] == 0x04);\n-\n-            assertTrue(directLil[i + 0] == 0x04);\n-            assertTrue(directLil[i + 1] == 0x03);\n-            assertTrue(directLil[i + 2] == 0x02);\n-            assertTrue(directLil[i + 3] == 0x01);\n-            assertTrue(directBig[i + 0] == 0x01);\n-            assertTrue(directBig[i + 1] == 0x02);\n-            assertTrue(directBig[i + 2] == 0x03);\n-            assertTrue(directBig[i + 3] == 0x04);\n-        }\n-    }\n-\n-    private static void assertTrue(boolean condition) {\n-        if (!condition)\n-            throw new AssertionError();\n+    @Benchmark\n+    public int testDirectLoopGetDouble() {\n+        int r = 0;\n+        for (int i = 0; i < directByteBuffer.capacity(); i+=8) {\n+            r += directByteBuffer.getDouble(i);\n+        }\n+        return r;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBuffers.java","additions":571,"deletions":1134,"binary":false,"changes":1705,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n@@ -27,4 +25,0 @@\n-import java.nio.CharBuffer;\n-import java.util.Arrays;\n-import java.util.concurrent.TimeUnit;\n-\n@@ -33,1 +27,2 @@\n-import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -40,0 +35,4 @@\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n@@ -41,0 +40,13 @@\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Char(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.CharBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.CharBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Char(View)+(Swap)+\"\n+ *\/\n@@ -42,0 +54,2 @@\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n@@ -44,0 +58,1 @@\n+@Fork(3)\n@@ -46,2 +61,40 @@\n-    @Param({\"2\", \"256\", \"16384\"})\n-    public int numChars;\n+    static final int CARRIER_BYTE_WIDTH = 2;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public char charValue;\n+    public char[] charArray;\n+\n+    public CharBuffer heapCharBuffer;\n+    public CharBuffer heapCharBufferRO;\n+    public CharBuffer heapByteBufferAsCharBufferView;\n+    public CharBuffer heapByteBufferAsCharBufferViewRO;\n+    public CharBuffer heapByteBufferAsCharBufferViewSwap;\n+    public CharBuffer heapByteBufferAsCharBufferViewSwapRO;\n+    public CharBuffer directByteBufferAsCharBufferView;\n+    public CharBuffer directByteBufferAsCharBufferViewRO;\n+    public CharBuffer directByteBufferAsCharBufferViewSwap;\n+    public CharBuffer directByteBufferAsCharBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        charArray = new char[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapCharBuffer = CharBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapCharBufferRO = CharBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsCharBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asCharBuffer();\n+        heapByteBufferAsCharBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asCharBuffer().asReadOnlyBuffer();\n+        directByteBufferAsCharBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asCharBuffer();\n+        directByteBufferAsCharBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asCharBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsCharBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asCharBuffer();\n+        heapByteBufferAsCharBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asCharBuffer().asReadOnlyBuffer();\n+        directByteBufferAsCharBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asCharBuffer();\n+        directByteBufferAsCharBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asCharBuffer().asReadOnlyBuffer();\n+    }\n@@ -49,2 +102,1 @@\n-    public String str;\n-    public CharBuffer buf;\n+    \/\/ ---------------- HELPER METHODS\n@@ -52,6 +104,81 @@\n-    @Setup(Level.Iteration)\n-    public void createString() {\n-        char[] c = new char[numChars];\n-        Arrays.fill(c, 'X');\n-        str = String.valueOf(c);\n-        buf = CharBuffer.allocate(numChars);\n+    private int innerLoopGetChar(CharBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutChar(CharBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, charValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public char[] testHeapBulkPutChar() {\n+        heapCharBuffer.put(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetChar() {\n+        heapCharBuffer.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutChar() {\n+        innerLoopPutChar(heapCharBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetChar() {\n+        return innerLoopGetChar(heapCharBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharViewSwapRO() {\n+        heapByteBufferAsCharBufferViewSwapRO.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetCharViewSwapRO() {\n+        return innerLoopGetChar(heapByteBufferAsCharBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharViewSwap() {\n+        heapByteBufferAsCharBufferViewSwap.put(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharViewSwap() {\n+        heapByteBufferAsCharBufferViewSwap.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutCharViewSwap() {\n+        innerLoopPutChar(heapByteBufferAsCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetCharViewSwap() {\n+        return innerLoopGetChar(heapByteBufferAsCharBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharViewRO() {\n+        heapByteBufferAsCharBufferViewRO.get(0, charArray);\n+        return charArray;\n@@ -61,3 +188,2 @@\n-    public CharBuffer putString() {\n-        buf.clear();\n-        return buf.put(str);\n+    public int testHeapLoopGetCharViewRO() {\n+        return innerLoopGetChar(heapByteBufferAsCharBufferViewRO);\n@@ -66,0 +192,97 @@\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharView() {\n+        heapByteBufferAsCharBufferView.put(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharView() {\n+        heapByteBufferAsCharBufferView.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutCharView() {\n+        innerLoopPutChar(heapByteBufferAsCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetCharView() {\n+        return innerLoopGetChar(heapByteBufferAsCharBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharViewSwapRO() {\n+        directByteBufferAsCharBufferViewSwapRO.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharViewSwapRO() {\n+        return innerLoopGetChar(directByteBufferAsCharBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public char[] testDirectBulkPutCharViewSwap() {\n+        directByteBufferAsCharBufferViewSwap.put(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharViewSwap() {\n+        directByteBufferAsCharBufferViewSwap.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutCharViewSwap() {\n+        innerLoopPutChar(directByteBufferAsCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharViewSwap() {\n+        return innerLoopGetChar(directByteBufferAsCharBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharViewRO() {\n+        directByteBufferAsCharBufferViewRO.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharViewRO() {\n+        return innerLoopGetChar(directByteBufferAsCharBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public char[] testDirectBulkPutCharView() {\n+        directByteBufferAsCharBufferView.put(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharView() {\n+        directByteBufferAsCharBufferView.get(0, charArray);\n+        return charArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutCharView() {\n+        innerLoopPutChar(directByteBufferAsCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharView() {\n+        return innerLoopGetChar(directByteBufferAsCharBufferView);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/CharBuffers.java","additions":245,"deletions":22,"binary":false,"changes":267,"status":"modified"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Double(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.DoubleBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.DoubleBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Double(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class DoubleBuffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = 8;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public double doubleValue;\n+    public double[] doubleArray;\n+\n+    public DoubleBuffer heapDoubleBuffer;\n+    public DoubleBuffer heapDoubleBufferRO;\n+    public DoubleBuffer heapByteBufferAsDoubleBufferView;\n+    public DoubleBuffer heapByteBufferAsDoubleBufferViewRO;\n+    public DoubleBuffer heapByteBufferAsDoubleBufferViewSwap;\n+    public DoubleBuffer heapByteBufferAsDoubleBufferViewSwapRO;\n+    public DoubleBuffer directByteBufferAsDoubleBufferView;\n+    public DoubleBuffer directByteBufferAsDoubleBufferViewRO;\n+    public DoubleBuffer directByteBufferAsDoubleBufferViewSwap;\n+    public DoubleBuffer directByteBufferAsDoubleBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        doubleArray = new double[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapDoubleBuffer = DoubleBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapDoubleBufferRO = DoubleBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsDoubleBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asDoubleBuffer();\n+        heapByteBufferAsDoubleBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asDoubleBuffer().asReadOnlyBuffer();\n+        directByteBufferAsDoubleBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asDoubleBuffer();\n+        directByteBufferAsDoubleBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asDoubleBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsDoubleBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asDoubleBuffer();\n+        heapByteBufferAsDoubleBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asDoubleBuffer().asReadOnlyBuffer();\n+        directByteBufferAsDoubleBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asDoubleBuffer();\n+        directByteBufferAsDoubleBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asDoubleBuffer().asReadOnlyBuffer();\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetDouble(DoubleBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutDouble(DoubleBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, doubleValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDouble() {\n+        heapDoubleBuffer.put(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDouble() {\n+        heapDoubleBuffer.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDouble() {\n+        innerLoopPutDouble(heapDoubleBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetDouble() {\n+        return innerLoopGetDouble(heapDoubleBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleViewSwapRO() {\n+        heapByteBufferAsDoubleBufferViewSwapRO.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleViewSwapRO() {\n+        return innerLoopGetDouble(heapByteBufferAsDoubleBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleViewSwap() {\n+        heapByteBufferAsDoubleBufferViewSwap.put(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleViewSwap() {\n+        heapByteBufferAsDoubleBufferViewSwap.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDoubleViewSwap() {\n+        innerLoopPutDouble(heapByteBufferAsDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleViewSwap() {\n+        return innerLoopGetDouble(heapByteBufferAsDoubleBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleViewRO() {\n+        heapByteBufferAsDoubleBufferViewRO.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleViewRO() {\n+        return innerLoopGetDouble(heapByteBufferAsDoubleBufferViewRO);\n+    }\n+\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleView() {\n+        heapByteBufferAsDoubleBufferView.put(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleView() {\n+        heapByteBufferAsDoubleBufferView.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDoubleView() {\n+        innerLoopPutDouble(heapByteBufferAsDoubleBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetDoubleView() {\n+        return innerLoopGetDouble(heapByteBufferAsDoubleBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleViewSwapRO() {\n+        directByteBufferAsDoubleBufferViewSwapRO.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetDoubleViewSwapRO() {\n+        return innerLoopGetDouble(directByteBufferAsDoubleBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleViewSwap() {\n+        directByteBufferAsDoubleBufferViewSwap.put(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleViewSwap() {\n+        directByteBufferAsDoubleBufferViewSwap.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutDoubleViewSwap() {\n+        innerLoopPutDouble(directByteBufferAsDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetDoubleViewSwap() {\n+        return innerLoopGetDouble(directByteBufferAsDoubleBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleViewRO() {\n+        directByteBufferAsDoubleBufferViewRO.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetDoubleViewRO() {\n+        return innerLoopGetDouble(directByteBufferAsDoubleBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleView() {\n+        directByteBufferAsDoubleBufferView.put(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleView() {\n+        directByteBufferAsDoubleBufferView.get(0, doubleArray);\n+        return doubleArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutDoubleView() {\n+        innerLoopPutDouble(directByteBufferAsDoubleBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetDoubleView() {\n+        return innerLoopGetDouble(directByteBufferAsDoubleBufferView);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/DoubleBuffers.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Float(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.FloatBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.FloatBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Float(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class FloatBuffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = 4;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public float floatValue;\n+    public float[] floatArray;\n+\n+    public FloatBuffer heapFloatBuffer;\n+    public FloatBuffer heapFloatBufferRO;\n+    public FloatBuffer heapByteBufferAsFloatBufferView;\n+    public FloatBuffer heapByteBufferAsFloatBufferViewRO;\n+    public FloatBuffer heapByteBufferAsFloatBufferViewSwap;\n+    public FloatBuffer heapByteBufferAsFloatBufferViewSwapRO;\n+    public FloatBuffer directByteBufferAsFloatBufferView;\n+    public FloatBuffer directByteBufferAsFloatBufferViewRO;\n+    public FloatBuffer directByteBufferAsFloatBufferViewSwap;\n+    public FloatBuffer directByteBufferAsFloatBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        floatArray = new float[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapFloatBuffer = FloatBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapFloatBufferRO = FloatBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsFloatBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asFloatBuffer();\n+        heapByteBufferAsFloatBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asFloatBuffer().asReadOnlyBuffer();\n+        directByteBufferAsFloatBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asFloatBuffer();\n+        directByteBufferAsFloatBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asFloatBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsFloatBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asFloatBuffer();\n+        heapByteBufferAsFloatBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asFloatBuffer().asReadOnlyBuffer();\n+        directByteBufferAsFloatBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asFloatBuffer();\n+        directByteBufferAsFloatBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asFloatBuffer().asReadOnlyBuffer();\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetFloat(FloatBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutFloat(FloatBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, floatValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloat() {\n+        heapFloatBuffer.put(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloat() {\n+        heapFloatBuffer.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloat() {\n+        innerLoopPutFloat(heapFloatBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloat() {\n+        return innerLoopGetFloat(heapFloatBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatViewSwapRO() {\n+        heapByteBufferAsFloatBufferViewSwapRO.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatViewSwapRO() {\n+        return innerLoopGetFloat(heapByteBufferAsFloatBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatViewSwap() {\n+        heapByteBufferAsFloatBufferViewSwap.put(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatViewSwap() {\n+        heapByteBufferAsFloatBufferViewSwap.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloatViewSwap() {\n+        innerLoopPutFloat(heapByteBufferAsFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatViewSwap() {\n+        return innerLoopGetFloat(heapByteBufferAsFloatBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatViewRO() {\n+        heapByteBufferAsFloatBufferViewRO.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatViewRO() {\n+        return innerLoopGetFloat(heapByteBufferAsFloatBufferViewRO);\n+    }\n+\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatView() {\n+        heapByteBufferAsFloatBufferView.put(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatView() {\n+        heapByteBufferAsFloatBufferView.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloatView() {\n+        innerLoopPutFloat(heapByteBufferAsFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetFloatView() {\n+        return innerLoopGetFloat(heapByteBufferAsFloatBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatViewSwapRO() {\n+        directByteBufferAsFloatBufferViewSwapRO.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatViewSwapRO() {\n+        return innerLoopGetFloat(directByteBufferAsFloatBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatViewSwap() {\n+        directByteBufferAsFloatBufferViewSwap.put(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatViewSwap() {\n+        directByteBufferAsFloatBufferViewSwap.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutFloatViewSwap() {\n+        innerLoopPutFloat(directByteBufferAsFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatViewSwap() {\n+        return innerLoopGetFloat(directByteBufferAsFloatBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatViewRO() {\n+        directByteBufferAsFloatBufferViewRO.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatViewRO() {\n+        return innerLoopGetFloat(directByteBufferAsFloatBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatView() {\n+        directByteBufferAsFloatBufferView.put(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatView() {\n+        directByteBufferAsFloatBufferView.get(0, floatArray);\n+        return floatArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutFloatView() {\n+        innerLoopPutFloat(directByteBufferAsFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetFloatView() {\n+        return innerLoopGetFloat(directByteBufferAsFloatBufferView);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/FloatBuffers.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Int(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.IntBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.IntBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Int(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class IntBuffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = 4;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public int intValue;\n+    public int[] intArray;\n+\n+    public IntBuffer heapIntBuffer;\n+    public IntBuffer heapIntBufferRO;\n+    public IntBuffer heapByteBufferAsIntBufferView;\n+    public IntBuffer heapByteBufferAsIntBufferViewRO;\n+    public IntBuffer heapByteBufferAsIntBufferViewSwap;\n+    public IntBuffer heapByteBufferAsIntBufferViewSwapRO;\n+    public IntBuffer directByteBufferAsIntBufferView;\n+    public IntBuffer directByteBufferAsIntBufferViewRO;\n+    public IntBuffer directByteBufferAsIntBufferViewSwap;\n+    public IntBuffer directByteBufferAsIntBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        intArray = new int[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapIntBuffer = IntBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapIntBufferRO = IntBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsIntBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asIntBuffer();\n+        heapByteBufferAsIntBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asIntBuffer().asReadOnlyBuffer();\n+        directByteBufferAsIntBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asIntBuffer();\n+        directByteBufferAsIntBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asIntBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsIntBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asIntBuffer();\n+        heapByteBufferAsIntBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asIntBuffer().asReadOnlyBuffer();\n+        directByteBufferAsIntBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asIntBuffer();\n+        directByteBufferAsIntBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asIntBuffer().asReadOnlyBuffer();\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetInt(IntBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutInt(IntBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, intValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public int[] testHeapBulkPutInt() {\n+        heapIntBuffer.put(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetInt() {\n+        heapIntBuffer.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutInt() {\n+        innerLoopPutInt(heapIntBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetInt() {\n+        return innerLoopGetInt(heapIntBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntViewSwapRO() {\n+        heapByteBufferAsIntBufferViewSwapRO.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntViewSwapRO() {\n+        return innerLoopGetInt(heapByteBufferAsIntBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntViewSwap() {\n+        heapByteBufferAsIntBufferViewSwap.put(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntViewSwap() {\n+        heapByteBufferAsIntBufferViewSwap.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutIntViewSwap() {\n+        innerLoopPutInt(heapByteBufferAsIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntViewSwap() {\n+        return innerLoopGetInt(heapByteBufferAsIntBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntViewRO() {\n+        heapByteBufferAsIntBufferViewRO.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntViewRO() {\n+        return innerLoopGetInt(heapByteBufferAsIntBufferViewRO);\n+    }\n+\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntView() {\n+        heapByteBufferAsIntBufferView.put(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntView() {\n+        heapByteBufferAsIntBufferView.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutIntView() {\n+        innerLoopPutInt(heapByteBufferAsIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntView() {\n+        return innerLoopGetInt(heapByteBufferAsIntBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntViewSwapRO() {\n+        directByteBufferAsIntBufferViewSwapRO.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntViewSwapRO() {\n+        return innerLoopGetInt(directByteBufferAsIntBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntViewSwap() {\n+        directByteBufferAsIntBufferViewSwap.put(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntViewSwap() {\n+        directByteBufferAsIntBufferViewSwap.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutIntViewSwap() {\n+        innerLoopPutInt(directByteBufferAsIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntViewSwap() {\n+        return innerLoopGetInt(directByteBufferAsIntBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntViewRO() {\n+        directByteBufferAsIntBufferViewRO.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntViewRO() {\n+        return innerLoopGetInt(directByteBufferAsIntBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntView() {\n+        directByteBufferAsIntBufferView.put(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntView() {\n+        directByteBufferAsIntBufferView.get(0, intArray);\n+        return intArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutIntView() {\n+        innerLoopPutInt(directByteBufferAsIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntView() {\n+        return innerLoopGetInt(directByteBufferAsIntBufferView);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/IntBuffers.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Long(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.LongBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.LongBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Long(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class LongBuffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = 8;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public long longValue;\n+    public long[] longArray;\n+\n+    public LongBuffer heapLongBuffer;\n+    public LongBuffer heapLongBufferRO;\n+    public LongBuffer heapByteBufferAsLongBufferView;\n+    public LongBuffer heapByteBufferAsLongBufferViewRO;\n+    public LongBuffer heapByteBufferAsLongBufferViewSwap;\n+    public LongBuffer heapByteBufferAsLongBufferViewSwapRO;\n+    public LongBuffer directByteBufferAsLongBufferView;\n+    public LongBuffer directByteBufferAsLongBufferViewRO;\n+    public LongBuffer directByteBufferAsLongBufferViewSwap;\n+    public LongBuffer directByteBufferAsLongBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        longArray = new long[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapLongBuffer = LongBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapLongBufferRO = LongBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsLongBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asLongBuffer();\n+        heapByteBufferAsLongBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asLongBuffer().asReadOnlyBuffer();\n+        directByteBufferAsLongBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asLongBuffer();\n+        directByteBufferAsLongBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asLongBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsLongBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asLongBuffer();\n+        heapByteBufferAsLongBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asLongBuffer().asReadOnlyBuffer();\n+        directByteBufferAsLongBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asLongBuffer();\n+        directByteBufferAsLongBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asLongBuffer().asReadOnlyBuffer();\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetLong(LongBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutLong(LongBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, longValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLong() {\n+        heapLongBuffer.put(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLong() {\n+        heapLongBuffer.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLong() {\n+        innerLoopPutLong(heapLongBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetLong() {\n+        return innerLoopGetLong(heapLongBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongViewSwapRO() {\n+        heapByteBufferAsLongBufferViewSwapRO.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetLongViewSwapRO() {\n+        return innerLoopGetLong(heapByteBufferAsLongBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongViewSwap() {\n+        heapByteBufferAsLongBufferViewSwap.put(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongViewSwap() {\n+        heapByteBufferAsLongBufferViewSwap.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLongViewSwap() {\n+        innerLoopPutLong(heapByteBufferAsLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetLongViewSwap() {\n+        return innerLoopGetLong(heapByteBufferAsLongBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongViewRO() {\n+        heapByteBufferAsLongBufferViewRO.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetLongViewRO() {\n+        return innerLoopGetLong(heapByteBufferAsLongBufferViewRO);\n+    }\n+\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongView() {\n+        heapByteBufferAsLongBufferView.put(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongView() {\n+        heapByteBufferAsLongBufferView.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLongView() {\n+        innerLoopPutLong(heapByteBufferAsLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetLongView() {\n+        return innerLoopGetLong(heapByteBufferAsLongBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongViewSwapRO() {\n+        directByteBufferAsLongBufferViewSwapRO.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetLongViewSwapRO() {\n+        return innerLoopGetLong(directByteBufferAsLongBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongViewSwap() {\n+        directByteBufferAsLongBufferViewSwap.put(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongViewSwap() {\n+        directByteBufferAsLongBufferViewSwap.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutLongViewSwap() {\n+        innerLoopPutLong(directByteBufferAsLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetLongViewSwap() {\n+        return innerLoopGetLong(directByteBufferAsLongBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongViewRO() {\n+        directByteBufferAsLongBufferViewRO.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetLongViewRO() {\n+        return innerLoopGetLong(directByteBufferAsLongBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongView() {\n+        directByteBufferAsLongBufferView.put(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongView() {\n+        directByteBufferAsLongBufferView.get(0, longArray);\n+        return longArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutLongView() {\n+        innerLoopPutLong(directByteBufferAsLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetLongView() {\n+        return innerLoopGetLong(directByteBufferAsLongBufferView);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/LongBuffers.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,289 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)Short(View)?(Swap)?(RO)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.ShortBuffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.ShortBuffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)Short(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class ShortBuffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = 2;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public short shortValue;\n+    public short[] shortArray;\n+\n+    public ShortBuffer heapShortBuffer;\n+    public ShortBuffer heapShortBufferRO;\n+    public ShortBuffer heapByteBufferAsShortBufferView;\n+    public ShortBuffer heapByteBufferAsShortBufferViewRO;\n+    public ShortBuffer heapByteBufferAsShortBufferViewSwap;\n+    public ShortBuffer heapByteBufferAsShortBufferViewSwapRO;\n+    public ShortBuffer directByteBufferAsShortBufferView;\n+    public ShortBuffer directByteBufferAsShortBufferViewRO;\n+    public ShortBuffer directByteBufferAsShortBufferViewSwap;\n+    public ShortBuffer directByteBufferAsShortBufferViewSwapRO;\n+\n+    @Setup\n+    public void setup() {\n+        shortArray = new short[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heapShortBuffer = ShortBuffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heapShortBufferRO = ShortBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAsShortBufferView     = ByteBuffer.allocate(size).order(nativeOrder()).asShortBuffer();\n+        heapByteBufferAsShortBufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).asShortBuffer().asReadOnlyBuffer();\n+        directByteBufferAsShortBufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).asShortBuffer();\n+        directByteBufferAsShortBufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).asShortBuffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAsShortBufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).asShortBuffer();\n+        heapByteBufferAsShortBufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).asShortBuffer().asReadOnlyBuffer();\n+        directByteBufferAsShortBufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asShortBuffer();\n+        directByteBufferAsShortBufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).asShortBuffer().asReadOnlyBuffer();\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetShort(ShortBuffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPutShort(ShortBuffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, shortValue);\n+        }\n+    }\n+\n+    \/\/ -- Heap   \n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShort() {\n+        heapShortBuffer.put(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShort() {\n+        heapShortBuffer.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShort() {\n+        innerLoopPutShort(heapShortBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShort() {\n+        return innerLoopGetShort(heapShortBuffer);\n+    }\n+\n+    \/\/ -- Heap View Swap RO\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortViewSwapRO() {\n+        heapByteBufferAsShortBufferViewSwapRO.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortViewSwapRO() {\n+        return innerLoopGetShort(heapByteBufferAsShortBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Heap View Swap \n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortViewSwap() {\n+        heapByteBufferAsShortBufferViewSwap.put(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortViewSwap() {\n+        heapByteBufferAsShortBufferViewSwap.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShortViewSwap() {\n+        innerLoopPutShort(heapByteBufferAsShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortViewSwap() {\n+        return innerLoopGetShort(heapByteBufferAsShortBufferViewSwap);\n+    }\n+\n+    \/\/ -- Heap View  RO\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortViewRO() {\n+        heapByteBufferAsShortBufferViewRO.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortViewRO() {\n+        return innerLoopGetShort(heapByteBufferAsShortBufferViewRO);\n+    }\n+\n+    \/\/ -- Heap View  \n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortView() {\n+        heapByteBufferAsShortBufferView.put(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortView() {\n+        heapByteBufferAsShortBufferView.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShortView() {\n+        innerLoopPutShort(heapByteBufferAsShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortView() {\n+        return innerLoopGetShort(heapByteBufferAsShortBufferView);\n+    }\n+\n+    \/\/ -- Direct View Swap RO\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortViewSwapRO() {\n+        directByteBufferAsShortBufferViewSwapRO.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortViewSwapRO() {\n+        return innerLoopGetShort(directByteBufferAsShortBufferViewSwapRO);\n+    }\n+\n+    \/\/ -- Direct View Swap \n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortViewSwap() {\n+        directByteBufferAsShortBufferViewSwap.put(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortViewSwap() {\n+        directByteBufferAsShortBufferViewSwap.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutShortViewSwap() {\n+        innerLoopPutShort(directByteBufferAsShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortViewSwap() {\n+        return innerLoopGetShort(directByteBufferAsShortBufferViewSwap);\n+    }\n+\n+    \/\/ -- Direct View  RO\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortViewRO() {\n+        directByteBufferAsShortBufferViewRO.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortViewRO() {\n+        return innerLoopGetShort(directByteBufferAsShortBufferViewRO);\n+    }\n+\n+    \/\/ -- Direct View  \n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortView() {\n+        directByteBufferAsShortBufferView.put(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortView() {\n+        directByteBufferAsShortBufferView.get(0, shortArray);\n+        return shortArray;\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutShortView() {\n+        innerLoopPutShort(directByteBufferAsShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortView() {\n+        return innerLoopGetShort(directByteBufferAsShortBufferView);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ShortBuffers.java","additions":289,"deletions":0,"binary":false,"changes":289,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#warn This file is preprocessed before being compiled\n+\n+class XXX {\n+#begin\n+\n+    \/\/ -- $Ms$ {#if[view]?View} $SWAP$ $RO$\n+#if[!RO]\n+\n+    @Benchmark\n+    public $type$[] test$Ms$BulkPut$Type${#if[view]?View}$SWAP$$RO$() {\n+        $ms${#if[view]?ByteBufferAs}$Type$Buffer{#if[view]?View}$SWAP$$RO$.put(0, $type$Array);\n+        return $type$Array;\n+    }\n+#end[RO]\n+\n+    @Benchmark\n+    public $type$[] test$Ms$BulkGet$Type${#if[view]?View}$SWAP$$RO$() {\n+        $ms${#if[view]?ByteBufferAs}$Type$Buffer{#if[view]?View}$SWAP$$RO$.get(0, $type$Array);\n+        return $type$Array;\n+    }\n+#if[!byte]\n+#if[!RO]\n+\n+    @Benchmark\n+    public void test$Ms$LoopPut$Type${#if[view]?View$SWAP$}$RO$() {\n+        innerLoopPut$Type$($ms${#if[view]?ByteBufferAs}$Type$Buffer{#if[view]?View}$SWAP$$RO$);\n+    }\n+#end[RO]\n+\n+    @Benchmark\n+    public int test$Ms$LoopGet$Type${#if[view]?View}$SWAP$$RO$() {\n+        return innerLoopGet$Type$($ms${#if[view]?ByteBufferAs}$Type$Buffer{#if[view]?View}$SWAP$$RO$);\n+    }\n+#end[byte]\n+#end\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/X-Buffers-bin.java.template","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.*;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+#if[byte]\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)(Byte|Char|Short|Int|Long|Float|Double)(Swap)?(RO)?\n+#else[byte]\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)$Type$(View)?(Swap)?(RO)?\n+#end[byte]\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.$Type$Buffers.testDirect.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.$Type$Buffers.test.*Bulk.*\"\n+ *   Loop Put Swapped Views: -\n+ *      test(Direct|Heap)(Loop)(Put)$Type$(View)+(Swap)+\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class $Type$Buffers {\n+\n+    static final int CARRIER_BYTE_WIDTH = $CarrierBW$;\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public $type$ $type$Value;\n+#if[byte]\n+    public char charValue;\n+    public short shortValue;\n+    public int intValue;\n+    public long longValue;\n+    public float floatValue;\n+    public double doubleValue;\n+#end[byte]\n+    public $type$[] $type$Array;\n+\n+    public $Type$Buffer heap$Type$Buffer;\n+    public $Type$Buffer heap$Type$BufferRO;\n+#if[byte]\n+    public ByteBuffer directByteBuffer;\n+    public ByteBuffer directByteBufferRO;\n+    public ByteBuffer heapByteBufferSwap;\n+    public ByteBuffer heapByteBufferSwapRO;\n+    public ByteBuffer directByteBufferSwap;\n+    public ByteBuffer directByteBufferSwapRO;\n+#else[byte]\n+    public $Type$Buffer heapByteBufferAs$Type$BufferView;\n+    public $Type$Buffer heapByteBufferAs$Type$BufferViewRO;\n+    public $Type$Buffer heapByteBufferAs$Type$BufferViewSwap;\n+    public $Type$Buffer heapByteBufferAs$Type$BufferViewSwapRO;\n+    public $Type$Buffer directByteBufferAs$Type$BufferView;\n+    public $Type$Buffer directByteBufferAs$Type$BufferViewRO;\n+    public $Type$Buffer directByteBufferAs$Type$BufferViewSwap;\n+    public $Type$Buffer directByteBufferAs$Type$BufferViewSwapRO;\n+#end[byte]\n+\n+    @Setup\n+    public void setup() {\n+        $type$Array = new $type$[size \/ CARRIER_BYTE_WIDTH];\n+\n+        \/\/ explicitly allocated heap carrier buffer\n+        heap$Type$Buffer = $Type$Buffer.allocate(size \/ CARRIER_BYTE_WIDTH);\n+        heap$Type$BufferRO = $Type$Buffer.allocate(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+#if[byte]\n+\n+        heapByteBufferSwap     = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN);\n+        heapByteBufferSwapRO   = ByteBuffer.allocate(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN).asReadOnlyBuffer();\n+        directByteBuffer       = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH);\n+        directByteBufferRO     = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).asReadOnlyBuffer();\n+        directByteBufferSwap   = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN);\n+        directByteBufferSwapRO = ByteBuffer.allocateDirect(size \/ CARRIER_BYTE_WIDTH).order(LITTLE_ENDIAN).asReadOnlyBuffer();\n+#else[byte]\n+\n+        \/\/ ByteBuffer views\n+        heapByteBufferAs$Type$BufferView     = ByteBuffer.allocate(size).order(nativeOrder()).as$Type$Buffer();\n+        heapByteBufferAs$Type$BufferViewRO   = ByteBuffer.allocate(size).order(nativeOrder()).as$Type$Buffer().asReadOnlyBuffer();\n+        directByteBufferAs$Type$BufferView   = ByteBuffer.allocateDirect(size).order(nativeOrder()).as$Type$Buffer();\n+        directByteBufferAs$Type$BufferViewRO = ByteBuffer.allocateDirect(size).order(nativeOrder()).as$Type$Buffer().asReadOnlyBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+        heapByteBufferAs$Type$BufferViewSwap     = ByteBuffer.allocate(size).order(nonNativeOrder).as$Type$Buffer();\n+        heapByteBufferAs$Type$BufferViewSwapRO   = ByteBuffer.allocate(size).order(nonNativeOrder).as$Type$Buffer().asReadOnlyBuffer();\n+        directByteBufferAs$Type$BufferViewSwap   = ByteBuffer.allocateDirect(size).order(nonNativeOrder).as$Type$Buffer();\n+        directByteBufferAs$Type$BufferViewSwapRO = ByteBuffer.allocateDirect(size).order(nonNativeOrder).as$Type$Buffer().asReadOnlyBuffer();\n+#end[byte]\n+    }\n+\n+#if[!byte]\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGet$Type$($Type$Buffer buf) {\n+        int r = 0;\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            r += buf.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private void innerLoopPut$Type$($Type$Buffer buf) {\n+        for (int i = 0; i < buf.capacity(); i++) {\n+            buf.put(i, $type$Value);\n+        }\n+    }\n+#end[byte]\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/X-Buffers.java.template","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#warn This file is preprocessed before being compiled\n+\n+class XXX {\n+#begin\n+\n+    \/\/ -- $Ms$ $Type$ $SWAP$ $RO$\n+#if[!RO]\n+\n+    @Benchmark\n+    public void test$Ms$LoopPut$Type$$SWAP$$RO$() {\n+        for (int i = 0; i < $ms$ByteBuffer$SWAP$$RO$.capacity(); i+=$CarrierBW$) {\n+            $ms$ByteBuffer$SWAP$$RO$.put{#if[!byte]?$Type$}(i, $type$Value);\n+        }\n+    }\n+#end[RO]\n+\n+    @Benchmark\n+    public int test$Ms$LoopGet$Type$$SWAP$$RO$() {\n+        int r = 0;\n+        for (int i = 0; i < $ms$ByteBuffer$SWAP$$RO$.capacity(); i+=$CarrierBW$) {\n+            r += $ms$ByteBuffer$SWAP$$RO$.get{#if[!byte]?$Type$}(i);\n+        }\n+        return r;\n+    }\n+#end\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/X-ByteBuffers-bin.java.template","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+#! \/bin\/sh\n+\n+#\n+# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+javac -d . ..\/..\/..\/..\/..\/..\/..\/make\/jdk\/src\/classes\/build\/tools\/spp\/Spp.java\n+\n+genBin() {\n+  for MS in \"Heap\" \"Direct\"\n+    do\n+      for SWAP in \"Swap\" \"\"\n+      do\n+        for RO in \"RO\" \"\"\n+        do\n+        extraArgs=\"\"\n+        if [ \"$RO\" == \"RO\" ] ; then\n+          extraArgs=\"-KRO\"\n+        fi\n+        java build.tools.spp.Spp -be -nel -K$1 -Dtype=$1 -DType=$2 -DFulltype=$3 \\\n+              $extraArgs \\\n+              -Kview \\\n+              -DMs=$MS \\\n+              -Dms=`echo \"$MS\" | awk '{print tolower($0)}'` \\\n+              -DSWAP=$SWAP \\\n+              -DRO=$RO \\\n+              -DCarrierBW=$4 \\\n+              -i$5 \\\n+              -o$out\n+        done\n+      done\n+    done\n+}\n+\n+gen() {\n+    out=$2Buffers.java\n+    rm -f $out\n+    java build.tools.spp.Spp -be -nel -K$1 -Dtype=$1 -DType=$2 -DFulltype=$3 \\\n+          -DCarrierBW=$4 -iX-Buffers.java.template -o$out\n+\n+    java build.tools.spp.Spp -be -nel -K$1 -Dtype=$1 -DType=$2 -DFulltype=$3 \\\n+          -DMs=Heap -Dms=heap -DSWAP=\"\" -DRO=\"\" -iX-Buffers-bin.java.template -o$out\n+\n+    if [ \"$1\" == \"byte\" ] ; then\n+      genBin $1 $2 $3 $4 X-ByteBuffers-bin.java.template\n+      genBin char Char Character 2 X-ByteBuffers-bin.java.template\n+      genBin short Short Short 2 X-ByteBuffers-bin.java.template\n+      genBin int Int Integer 4 X-ByteBuffers-bin.java.template\n+      genBin long Long Long 8 X-ByteBuffers-bin.java.template\n+      genBin float Float Float 4 X-ByteBuffers-bin.java.template\n+      genBin double Double Double 8 X-ByteBuffers-bin.java.template\n+    else\n+      genBin $1 $2 $3 $4 X-Buffers-bin.java.template\n+    fi\n+\n+    printf \"}\\n\" >> $out\n+}\n+\n+gen byte Byte Byte 1\n+gen char Char Character 2\n+gen short Short Short 2\n+gen int Int Integer 4\n+gen long Long Long 8\n+gen float Float Float 4\n+gen double Double Double 8\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/genBuffers.sh","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}