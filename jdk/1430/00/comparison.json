{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -31,0 +33,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n@@ -32,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -40,0 +44,2 @@\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n@@ -42,0 +48,1 @@\n+@Fork(3)\n@@ -55,0 +62,11 @@\n+    public ByteBuffer heapBuffer;\n+    public ByteBuffer directBuffer;\n+    public byte[] dummyByteArray;\n+\n+    @Setup\n+    public void setup() {\n+        heapBuffer = ByteBuffer.allocate(size);\n+        directBuffer = ByteBuffer.allocateDirect(size);\n+        dummyByteArray = new byte[size];\n+    }\n+\n@@ -59,1 +77,2 @@\n-        return innerBufferBulkGet(ByteBuffer.allocate(size));\n+        heapBuffer.get(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -64,1 +83,2 @@\n-        return innerBufferBulkGet(ByteBuffer.allocateDirect(size));\n+        directBuffer.get(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -71,1 +91,2 @@\n-        return innerBufferBulkPut(ByteBuffer.allocate(size));\n+        heapBuffer.put(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -76,1 +97,2 @@\n-        return innerBufferBulkPut(ByteBuffer.allocateDirect(size));\n+        directBuffer.put(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -83,1 +105,1 @@\n-        return innerSingleGetByte(ByteBuffer.allocate(1000));\n+        return innerSingleGetByte(heapBuffer);\n@@ -88,1 +110,1 @@\n-        return innerSingleGetChar(ByteBuffer.allocate(1000));\n+        return innerSingleGetChar(heapBuffer);\n@@ -93,1 +115,1 @@\n-        return innerSingleGetShort(ByteBuffer.allocate(1000));\n+        return innerSingleGetShort(heapBuffer);\n@@ -98,1 +120,1 @@\n-        return innerSingleGetInt(ByteBuffer.allocate(1000));\n+        return innerSingleGetInt(heapBuffer);\n@@ -103,1 +125,1 @@\n-        return innerSingleGetLong(ByteBuffer.allocate(1000));\n+        return innerSingleGetLong(heapBuffer);\n@@ -108,1 +130,1 @@\n-        return innerSingleGetFloat(ByteBuffer.allocate(1000));\n+        return innerSingleGetFloat(heapBuffer);\n@@ -113,1 +135,1 @@\n-        return innerSingleGetDouble(ByteBuffer.allocate(1000));\n+        return innerSingleGetDouble(heapBuffer);\n@@ -118,1 +140,1 @@\n-        return innerSingleGetByte(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetByte(directBuffer);\n@@ -123,1 +145,1 @@\n-        return innerSingleGetChar(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetChar(directBuffer);\n@@ -128,1 +150,1 @@\n-        return innerSingleGetShort(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetShort(directBuffer);\n@@ -133,1 +155,1 @@\n-        return innerSingleGetInt(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetInt(directBuffer);\n@@ -138,1 +160,1 @@\n-        return innerSingleGetLong(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetLong(directBuffer);\n@@ -143,1 +165,1 @@\n-        return innerSingleGetFloat(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetFloat(directBuffer);\n@@ -148,1 +170,1 @@\n-        return innerSingleGetDouble(ByteBuffer.allocateDirect(1000));\n+        return innerSingleGetDouble(directBuffer);\n@@ -155,1 +177,1 @@\n-        innerSinglePutByte(ByteBuffer.allocate(1000));\n+        innerSinglePutByte(heapBuffer);\n@@ -160,1 +182,1 @@\n-        innerSinglePutChar(ByteBuffer.allocate(1000));\n+        innerSinglePutChar(heapBuffer);\n@@ -165,1 +187,1 @@\n-        innerSinglePutShort(ByteBuffer.allocate(1000));\n+        innerSinglePutShort(heapBuffer);\n@@ -170,1 +192,1 @@\n-        innerSinglePutInt(ByteBuffer.allocate(1000));\n+        innerSinglePutInt(heapBuffer);\n@@ -175,1 +197,1 @@\n-        innerSinglePutLong(ByteBuffer.allocate(1000));\n+        innerSinglePutLong(heapBuffer);\n@@ -180,1 +202,1 @@\n-        innerSinglePutFloat(ByteBuffer.allocate(1000));\n+        innerSinglePutFloat(heapBuffer);\n@@ -185,1 +207,1 @@\n-        innerSinglePutDouble(ByteBuffer.allocate(1000));\n+        innerSinglePutDouble(heapBuffer);\n@@ -190,1 +212,1 @@\n-        innerSinglePutByte(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutByte(directBuffer);\n@@ -195,1 +217,1 @@\n-        innerSinglePutChar(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutChar(directBuffer);\n@@ -200,1 +222,1 @@\n-        innerSinglePutShort(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutShort(directBuffer);\n@@ -205,1 +227,1 @@\n-        innerSinglePutInt(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutInt(directBuffer);\n@@ -210,1 +232,1 @@\n-        innerSinglePutLong(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutLong(directBuffer);\n@@ -215,1 +237,1 @@\n-        innerSinglePutFloat(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutFloat(directBuffer);\n@@ -220,1 +242,1 @@\n-        innerSinglePutDouble(ByteBuffer.allocateDirect(1000));\n+        innerSinglePutDouble(directBuffer);\n@@ -225,14 +247,0 @@\n-    private byte[] innerBufferBulkGet(ByteBuffer bb) {\n-        byte[] dummyByteArray = new byte[bb.capacity()];\n-        bb.get(dummyByteArray);\n-        bb.flip();\n-        return dummyByteArray;\n-    }\n-\n-    private byte[] innerBufferBulkPut(ByteBuffer bb) {\n-        byte[] dummyByteArray = new byte[bb.capacity()];\n-        bb.put(dummyByteArray);\n-        bb.flip();\n-        return dummyByteArray;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBuffers.java","additions":55,"deletions":47,"binary":false,"changes":102,"status":"modified"}]}