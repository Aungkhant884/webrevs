{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -31,0 +33,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n@@ -32,0 +35,693 @@\n+import org.openjdk.jmh.annotations.Warmup;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.CharBuffer;\n+import java.nio.DoubleBuffer;\n+import java.nio.FloatBuffer;\n+import java.nio.IntBuffer;\n+import java.nio.LongBuffer;\n+import java.nio.ShortBuffer;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import static java.nio.ByteOrder.*;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+\n+\/**\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Loop)(Get|Put)(Byte|Char|Short|Int|Long|Float|Double)(View)?(Swap)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.ByteBuffers.testDirect.*\"\n+ *   Char only   :- \"org.openjdk.bench.java.nio.ByteBuffers.test.*Char.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.ByteBuffers.test.*Bulk.*\"\n+ *   Put with Int or Long carrier :-\n+ *      test(Direct|Heap)(Loop)(Put)(Int|Long)(View)?(Swap)?\"\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Fork(3)\n+public class ByteBuffers {\n+\n+    @Param({\"16\", \"1024\", \"131072\"})\n+    private int size;\n+\n+    public byte dummyByte;\n+    public char dummyChar;\n+    public short dummyShort;\n+    public int dummyInt;\n+    public long dummyLong;\n+    public float dummyFloat;\n+    public double dummyDouble;\n+\n+    public ByteBuffer   heapBuffer;\n+    public CharBuffer   heapCharBufferView;\n+    public ShortBuffer  heapShortBufferView;\n+    public IntBuffer    heapIntBufferView;\n+    public LongBuffer   heapLongBufferView;\n+    public FloatBuffer  heapFloatBufferView;\n+    public DoubleBuffer heapDoubleBufferView;\n+\n+    public ByteBuffer   directBuffer;\n+    public CharBuffer   directCharBufferView;\n+    public ShortBuffer  directShortBufferView;\n+    public IntBuffer    directIntBufferView;\n+    public LongBuffer   directLongBufferView;\n+    public FloatBuffer  directFloatBufferView;\n+    public DoubleBuffer directDoubleBufferView;\n+\n+    public ByteBuffer   heapBufferSwap;\n+    public CharBuffer   heapCharBufferViewSwap;\n+    public ShortBuffer  heapShortBufferViewSwap;\n+    public IntBuffer    heapIntBufferViewSwap;\n+    public LongBuffer   heapLongBufferViewSwap;\n+    public FloatBuffer  heapFloatBufferViewSwap;\n+    public DoubleBuffer heapDoubleBufferViewSwap;\n+\n+    public ByteBuffer   directBufferSwap;\n+    public CharBuffer   directCharBufferViewSwap;\n+    public ShortBuffer  directShortBufferViewSwap;\n+    public IntBuffer    directIntBufferViewSwap;\n+    public LongBuffer   directLongBufferViewSwap;\n+    public FloatBuffer  directFloatBufferViewSwap;\n+    public DoubleBuffer directDoubleBufferViewSwap;\n+\n+    public CharBuffer   heapAllocCharBuffer;\n+    public ShortBuffer  heapAllocShortBuffer;\n+    public IntBuffer    heapAllocIntBuffer;\n+    public LongBuffer   heapAllocLongBuffer;\n+    public FloatBuffer  heapAllocFloatBuffer;\n+    public DoubleBuffer heapAllocDoubleBuffer;\n+\n+    public byte[]   dummyByteArray;\n+    public char[]   dummyCharArray;\n+    public short[]  dummyShortArray;\n+    public int[]    dummyIntArray;\n+    public long[]   dummyLongArray;\n+    public float[]  dummyFloatArray;\n+    public double[] dummyDoubleArray;\n+\n+    @Setup\n+    public void setup() {\n+        dummyByteArray   = new byte[size];\n+        dummyCharArray   = new char[size \/ 2];\n+        dummyShortArray  = new short[size \/ 2];\n+        dummyIntArray    = new int[size \/ 4];\n+        dummyLongArray   = new long[size \/ 8];\n+        dummyFloatArray  = new float[size \/ 4];\n+        dummyDoubleArray = new double[size \/ 8];\n+\n+        heapBuffer = ByteBuffer.allocate(size).order(nativeOrder());\n+        heapCharBufferView   = heapBuffer.asCharBuffer();\n+        heapShortBufferView  = heapBuffer.asShortBuffer();\n+        heapIntBufferView    = heapBuffer.asIntBuffer();\n+        heapLongBufferView   = heapBuffer.asLongBuffer();\n+        heapFloatBufferView  = heapBuffer.asFloatBuffer();\n+        heapDoubleBufferView = heapBuffer.asDoubleBuffer();\n+\n+        directBuffer = ByteBuffer.allocateDirect(size).order(nativeOrder());\n+        directCharBufferView   = directBuffer.asCharBuffer();\n+        directShortBufferView  = directBuffer.asShortBuffer();\n+        directIntBufferView    = directBuffer.asIntBuffer();\n+        directLongBufferView   = directBuffer.asLongBuffer();\n+        directFloatBufferView  = directBuffer.asFloatBuffer();\n+        directDoubleBufferView = directBuffer.asDoubleBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+\n+        heapBufferSwap = ByteBuffer.allocate(size).order(nonNativeOrder);\n+        heapCharBufferViewSwap   = heapBufferSwap.asCharBuffer();\n+        heapShortBufferViewSwap  = heapBufferSwap.asShortBuffer();\n+        heapIntBufferViewSwap    = heapBufferSwap.asIntBuffer();\n+        heapLongBufferViewSwap   = heapBufferSwap.asLongBuffer();\n+        heapFloatBufferViewSwap  = heapBufferSwap.asFloatBuffer();\n+        heapDoubleBufferViewSwap = heapBufferSwap.asDoubleBuffer();\n+\n+        directBufferSwap = ByteBuffer.allocateDirect(size).order(nonNativeOrder);\n+        directCharBufferViewSwap   = directBufferSwap.asCharBuffer();\n+        directShortBufferViewSwap  = directBufferSwap.asShortBuffer();\n+        directIntBufferViewSwap    = directBufferSwap.asIntBuffer();\n+        directLongBufferViewSwap   = directBufferSwap.asLongBuffer();\n+        directFloatBufferViewSwap  = directBufferSwap.asFloatBuffer();\n+        directDoubleBufferViewSwap = directBufferSwap.asDoubleBuffer();\n+\n+        \/\/ explicitly allocated heap carrier buffers\n+        heapAllocCharBuffer   = CharBuffer.allocate(size \/2);\n+        heapAllocShortBuffer  = ShortBuffer.allocate(size \/ 2);\n+        heapAllocIntBuffer    = IntBuffer.allocate(size \/ 4);\n+        heapAllocLongBuffer   = LongBuffer.allocate(size \/ 8);\n+        heapAllocFloatBuffer  = FloatBuffer.allocate(size \/ 4);\n+        heapAllocDoubleBuffer = DoubleBuffer.allocate(size \/ 8);\n+    }\n+\n+    \/\/ ---------------- BULK GET TESTS\n+\n+    @Benchmark\n+    public byte[] testHeapBulkGetByte() {\n+        heapBuffer.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    @Benchmark\n+    public byte[] testDirectBulkGetByte() {\n+        directBuffer.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    \/\/ ---------------- BULK PUT TESTS\n+\n+    @Benchmark\n+    public byte[] testHeapBulkPutByte() {\n+        heapBuffer.put(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    @Benchmark\n+    public byte[] testDirectBulkPutByte() {\n+        directBuffer.put(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    \/\/ ---------------- LOOP GET TESTS\n+\n+    @Benchmark\n+    public int testHeapLoopGetByte() {\n+        return innerLoopGetByte(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetChar() {\n+        return innerLoopGetChar(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShort() {\n+        return innerLoopGetShort(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetInt() {\n+        return innerLoopGetInt(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public long testHeapLoopGetLong() {\n+        return innerLoopGetLong(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public float testHeapLoopGetFloat() {\n+        return innerLoopGetFloat(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public double testHeapLoopGetDouble() {\n+        return innerLoopGetDouble(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetByte() {\n+        return innerLoopGetByte(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetChar() {\n+        return innerLoopGetChar(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShort() {\n+        return innerLoopGetShort(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetInt() {\n+        return innerLoopGetInt(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public long testDirectLoopGetLong() {\n+        return innerLoopGetLong(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public float testDirectLoopGetFloat() {\n+        return innerLoopGetFloat(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public double testDirectLoopGetDouble() {\n+        return innerLoopGetDouble(directBuffer);\n+    }\n+\n+    \/\/ ---------------- LOOP PUT TESTS\n+\n+    @Benchmark\n+    public void testHeapLoopPutByte() {\n+        innerLoopPutByte(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutChar() {\n+        innerLoopPutChar(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShort() {\n+        innerLoopPutShort(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutInt() {\n+        innerLoopPutInt(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLong() {\n+        innerLoopPutLong(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloat() {\n+        innerLoopPutFloat(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDouble() {\n+        innerLoopPutDouble(heapBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutByte() {\n+        innerLoopPutByte(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutChar() {\n+        innerLoopPutChar(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutShort() {\n+        innerLoopPutShort(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutInt() {\n+        innerLoopPutInt(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutLong() {\n+        innerLoopPutLong(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutFloat() {\n+        innerLoopPutFloat(directBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutDouble() {\n+        innerLoopPutDouble(directBuffer);\n+    }\n+\n+    \/\/ ----- BULK PUT\/GET TESTS HEAP (explicitly allocated carrier buffer)\n+\n+    @Benchmark\n+    public char[] testHeapBulkPutChar() {\n+        heapAllocCharBuffer.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetChar() {\n+        heapAllocCharBuffer.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShor() {\n+        heapAllocShortBuffer.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShort() {\n+        heapAllocShortBuffer.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkPutInt() {\n+        heapAllocIntBuffer.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetInt() {\n+        heapAllocIntBuffer.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLong() {\n+        heapAllocLongBuffer.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLong() {\n+        heapAllocLongBuffer.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloat() {\n+        heapAllocFloatBuffer.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloat() {\n+        heapAllocFloatBuffer.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDouble() {\n+        heapAllocDoubleBuffer.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDouble() {\n+        heapAllocDoubleBuffer.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ----- LOOP PUT\/GET TESTS HEAP (explicitly allocated carrier buffer)\n+\n+    @Benchmark\n+    public int testHeapLoopGetChar2() {\n+        return innerLoopGetChar(heapAllocCharBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShort2() {\n+        return innerLoopGetShort(heapAllocShortBuffer);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetInt2() {\n+        return innerLoopGetInt(heapAllocIntBuffer);\n+    }\n+\n+    @Benchmark\n+    public long testHeapLoopGetLong2() {\n+        return innerLoopGetLong(heapAllocLongBuffer);\n+    }\n+\n+    @Benchmark\n+    public float testHeapLoopGetFloat2() {\n+        return innerLoopGetFloat(heapAllocFloatBuffer);\n+    }\n+\n+    @Benchmark\n+    public double testHeapLoopGetDouble2() {\n+        return innerLoopGetDouble(heapAllocDoubleBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutChar2() {\n+        innerLoopPutChar(heapAllocCharBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShort2() {\n+        innerLoopPutShort(heapAllocShortBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutInt2() {\n+        innerLoopPutInt(heapAllocIntBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLong2() {\n+        innerLoopPutLong(heapAllocLongBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloat2() {\n+        innerLoopPutFloat(heapAllocFloatBuffer);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDouble2() {\n+        innerLoopPutDouble(heapAllocDoubleBuffer);\n+    }\n+\n+    \/\/ ---------------- Views ----------------\n+\n+    \/\/ ---------------- BULK PUT\/GET TESTS HEAP (Views)\n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharView() {\n+        heapCharBufferView.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharView() {\n+        heapCharBufferView.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortView() {\n+        heapShortBufferView.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortView() {\n+        heapShortBufferView.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntView() {\n+        heapIntBufferView.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntView() {\n+        heapIntBufferView.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongView() {\n+        heapLongBufferView.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongView() {\n+        heapLongBufferView.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatView() {\n+        heapFloatBufferView.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatView() {\n+        heapFloatBufferView.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleView() {\n+        heapDoubleBufferView.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleView() {\n+        heapDoubleBufferView.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- BULK PUT\/GET TESTS Direct (Views)\n+    @Benchmark\n+    public char[] testDirectBulkPutCharView() {\n+        directCharBufferView.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharView() {\n+        directCharBufferView.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortView() {\n+        directShortBufferView.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortView() {\n+        directShortBufferView.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntView() {\n+        directIntBufferView.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntView() {\n+        directIntBufferView.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongView() {\n+        directLongBufferView.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongView() {\n+        directLongBufferView.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatView() {\n+        directFloatBufferView.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatView() {\n+        directFloatBufferView.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleView() {\n+        directDoubleBufferView.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleView() {\n+        directDoubleBufferView.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- LOOP GET TESTS (Views)\n+\n+    @Benchmark\n+    public int testHeapLoopGetCharView() {\n+        return innerLoopGetChar(heapCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortView() {\n+        return innerLoopGetShort(heapShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntView() {\n+        return innerLoopGetInt(heapIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public long testHeapLoopGetLongView() {\n+        return innerLoopGetLong(heapLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public float testHeapLoopGetFloatView() {\n+        return innerLoopGetFloat(heapFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public double testHeapLoopGetDoubleView() {\n+        return innerLoopGetDouble(heapDoubleBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharView() {\n+        return innerLoopGetChar(directCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortView() {\n+        return innerLoopGetShort(directShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntView() {\n+        return innerLoopGetInt(directIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public long testDirectLoopGetLongView() {\n+        return innerLoopGetLong(directLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public float testDirectLoopGetFloatView() {\n+        return innerLoopGetFloat(directFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public double testDirectLoopGetDoubleView() {\n+        return innerLoopGetDouble(directDoubleBufferView);\n+    }\n+\n+    \/\/ ---------------- LOOP PUT TESTS (Views)\n+\n+    @Benchmark\n+    public void testHeapLoopPutCharView() {\n+        innerLoopPutChar(heapCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShortView() {\n+        innerLoopPutShort(heapShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutIntView() {\n+        innerLoopPutInt(heapIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLongView() {\n+        innerLoopPutLong(heapLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloatView() {\n+        innerLoopPutFloat(heapFloatBufferView);\n+    }\n@@ -33,2 +729,4 @@\n-import java.nio.ByteBuffer;\n-import java.util.concurrent.TimeUnit;\n+    @Benchmark\n+    public void testHeapLoopPutDoubleView() {\n+        innerLoopPutDouble(heapDoubleBufferView);\n+    }\n@@ -36,7 +734,4 @@\n-\/**\n- * Benchmark operations on java.nio.Buffer.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@State(Scope.Thread)\n-public class ByteBuffers {\n+    @Benchmark\n+    public void testDirectLoopPutCharView() {\n+        innerLoopPutChar(directCharBufferView);\n+    }\n@@ -44,2 +739,4 @@\n-    @Param({\"10\", \"1000\", \"100000\"})\n-    private int size;\n+    @Benchmark\n+    public void testDirectLoopPutShortView() {\n+        innerLoopPutShort(directShortBufferView);\n+    }\n@@ -47,7 +744,4 @@\n-    public byte dummyByte;\n-    public char dummyChar;\n-    public short dummyShort;\n-    public int dummyInt;\n-    public long dummyLong;\n-    public float dummyFloat;\n-    public double dummyDouble;\n+    @Benchmark\n+    public void testDirectLoopPutIntView() {\n+        innerLoopPutInt(directIntBufferView);\n+    }\n@@ -55,1 +749,4 @@\n-    \/\/ ---------------- BULK GET TESTS\n+    @Benchmark\n+    public void testDirectLoopPutLongView() {\n+        innerLoopPutLong(directLongBufferView);\n+    }\n@@ -58,2 +755,2 @@\n-    public byte[] testBulkGet() {\n-        return innerBufferBulkGet(ByteBuffer.allocate(size));\n+    public void testDirectLoopPutFloatView() {\n+        innerLoopPutFloat(directFloatBufferView);\n@@ -63,2 +760,2 @@\n-    public byte[] testDirectBulkGet() {\n-        return innerBufferBulkGet(ByteBuffer.allocateDirect(size));\n+    public void testDirectLoopPutDoubleView() {\n+        innerLoopPutDouble(directDoubleBufferView);\n@@ -67,1 +764,17 @@\n-    \/\/ ---------------- BULK PUT TESTS\n+    \/\/ -- Swapped endianness follows\n+\n+    \/\/ ---------------- BULK GET TESTS (swap)\n+\n+    @Benchmark\n+    public byte[] testHeapBulkGetByteSwap() {\n+        heapBufferSwap.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    @Benchmark\n+    public byte[] testDirectBulkGetByteSwap() {\n+        directBufferSwap.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    \/\/ ---------------- BULK PUT TESTS (swap)\n@@ -70,2 +783,3 @@\n-    public byte[] testBulkPut() {\n-        return innerBufferBulkPut(ByteBuffer.allocate(size));\n+    public byte[] testHeapBulkPutByteSwap() {\n+        heapBufferSwap.put(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -75,2 +789,3 @@\n-    public byte[] testDirectBulkPut() {\n-        return innerBufferBulkPut(ByteBuffer.allocateDirect(size));\n+    public byte[] testDirectBulkPutByteSwap() {\n+        directBufferSwap.put(0, dummyByteArray);\n+        return dummyByteArray;\n@@ -79,1 +794,1 @@\n-    \/\/ ---------------- SINGLE GET TESTS\n+    \/\/ ---------------- LOOP GET TESTS (swap)\n@@ -82,2 +797,2 @@\n-    public int testSingleGetByte() {\n-        return innerSingleGetByte(ByteBuffer.allocate(1000));\n+    public int testHeapLoopGetByteSwap() {\n+        return innerLoopGetByte(heapBufferSwap);\n@@ -87,2 +802,2 @@\n-    public int testSingleGetChar() {\n-        return innerSingleGetChar(ByteBuffer.allocate(1000));\n+    public int testHeapLoopGetCharSwap() {\n+        return innerLoopGetChar(heapBufferSwap);\n@@ -92,2 +807,2 @@\n-    public int testSingleGetShort() {\n-        return innerSingleGetShort(ByteBuffer.allocate(1000));\n+    public int testHeapLoopGetShortSwap() {\n+        return innerLoopGetShort(heapBufferSwap);\n@@ -97,2 +812,2 @@\n-    public int testSingleGetInt() {\n-        return innerSingleGetInt(ByteBuffer.allocate(1000));\n+    public int testHeapLoopGetIntSwap() {\n+        return innerLoopGetInt(heapBufferSwap);\n@@ -102,2 +817,2 @@\n-    public long testSingleGetLong() {\n-        return innerSingleGetLong(ByteBuffer.allocate(1000));\n+    public long testHeapLoopGetLongSwap() {\n+        return innerLoopGetLong(heapBufferSwap);\n@@ -107,2 +822,2 @@\n-    public float testSingleGetFloat() {\n-        return innerSingleGetFloat(ByteBuffer.allocate(1000));\n+    public float testHeapLoopGetFloatSwap() {\n+        return innerLoopGetFloat(heapBufferSwap);\n@@ -112,2 +827,2 @@\n-    public double testSingleGetDouble() {\n-        return innerSingleGetDouble(ByteBuffer.allocate(1000));\n+    public double testHeapLoopGetDoubleSwap() {\n+        return innerLoopGetDouble(heapBufferSwap);\n@@ -117,2 +832,2 @@\n-    public int testDirectSingleGetByte() {\n-        return innerSingleGetByte(ByteBuffer.allocateDirect(1000));\n+    public int testDirectLoopGetByteSwap() {\n+        return innerLoopGetByte(directBufferSwap);\n@@ -122,2 +837,2 @@\n-    public int testDirectSingleGetChar() {\n-        return innerSingleGetChar(ByteBuffer.allocateDirect(1000));\n+    public int testDirectLoopGetCharSwap() {\n+        return innerLoopGetChar(directBufferSwap);\n@@ -127,2 +842,2 @@\n-    public int testDirectSingleGetShort() {\n-        return innerSingleGetShort(ByteBuffer.allocateDirect(1000));\n+    public int testDirectLoopGetShortSwap() {\n+        return innerLoopGetShort(directBufferSwap);\n@@ -132,2 +847,2 @@\n-    public int testDirectSingleGetInt() {\n-        return innerSingleGetInt(ByteBuffer.allocateDirect(1000));\n+    public int testDirectLoopGetIntSwap() {\n+        return innerLoopGetInt(directBufferSwap);\n@@ -137,2 +852,2 @@\n-    public long testDirectSingleGetLong() {\n-        return innerSingleGetLong(ByteBuffer.allocateDirect(1000));\n+    public long testDirectLoopGetLongSwap() {\n+        return innerLoopGetLong(directBufferSwap);\n@@ -142,2 +857,2 @@\n-    public float testDirectSingleGetFloat() {\n-        return innerSingleGetFloat(ByteBuffer.allocateDirect(1000));\n+    public float testDirectLoopGetFloatSwap() {\n+        return innerLoopGetFloat(directBufferSwap);\n@@ -147,2 +862,2 @@\n-    public double testDirectSingleGetDouble() {\n-        return innerSingleGetDouble(ByteBuffer.allocateDirect(1000));\n+    public double testDirectLoopGetDoubleSwap() {\n+        return innerLoopGetDouble(directBufferSwap);\n@@ -151,1 +866,1 @@\n-    \/\/ ---------------- SINGLE PUT TESTS\n+    \/\/ ---------------- LOOP PUT TESTS (swap)\n@@ -154,2 +869,2 @@\n-    public void testSinglePutByte() {\n-        innerSinglePutByte(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutByteSwap() {\n+        innerLoopPutByte(heapBufferSwap);\n@@ -159,2 +874,2 @@\n-    public void testSinglePutChar() {\n-        innerSinglePutChar(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutCharSwap() {\n+        innerLoopPutChar(heapBufferSwap);\n@@ -164,2 +879,2 @@\n-    public void testSinglePutShort() {\n-        innerSinglePutShort(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutShortSwap() {\n+        innerLoopPutShort(heapBufferSwap);\n@@ -169,2 +884,2 @@\n-    public void testSinglePutInt() {\n-        innerSinglePutInt(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutIntSwap() {\n+        innerLoopPutInt(heapBufferSwap);\n@@ -174,2 +889,2 @@\n-    public void testSinglePutLong() {\n-        innerSinglePutLong(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutLongSwap() {\n+        innerLoopPutLong(heapBufferSwap);\n@@ -179,2 +894,2 @@\n-    public void testSinglePutFloat() {\n-        innerSinglePutFloat(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutFloatSwap() {\n+        innerLoopPutFloat(heapBufferSwap);\n@@ -184,2 +899,2 @@\n-    public void testSinglePutDouble() {\n-        innerSinglePutDouble(ByteBuffer.allocate(1000));\n+    public void testHeapLoopPutDoubleSwap() {\n+        innerLoopPutDouble(heapBufferSwap);\n@@ -189,2 +904,2 @@\n-    public void testDirectSinglePutByte() {\n-        innerSinglePutByte(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutByteSwap() {\n+        innerLoopPutByte(directBufferSwap);\n@@ -194,2 +909,2 @@\n-    public void testDirectSinglePutChar() {\n-        innerSinglePutChar(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutCharSwap() {\n+        innerLoopPutChar(directBufferSwap);\n@@ -199,2 +914,2 @@\n-    public void testDirectSinglePutShort() {\n-        innerSinglePutShort(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutShortSwap() {\n+        innerLoopPutShort(directBufferSwap);\n@@ -204,2 +919,2 @@\n-    public void testDirectSinglePutInt() {\n-        innerSinglePutInt(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutIntSwap() {\n+        innerLoopPutInt(directBufferSwap);\n@@ -209,2 +924,2 @@\n-    public void testDirectSinglePutLong() {\n-        innerSinglePutLong(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutLongSwap() {\n+        innerLoopPutLong(directBufferSwap);\n@@ -214,2 +929,2 @@\n-    public void testDirectSinglePutFloat() {\n-        innerSinglePutFloat(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutFloatSwap() {\n+        innerLoopPutFloat(directBufferSwap);\n@@ -219,2 +934,2 @@\n-    public void testDirectSinglePutDouble() {\n-        innerSinglePutDouble(ByteBuffer.allocateDirect(1000));\n+    public void testDirectLoopPutDoubleSwap() {\n+        innerLoopPutDouble(directBufferSwap);\n@@ -223,1 +938,1 @@\n-    \/\/ ---------------- HELPER METHODS\n+    \/\/ ---------------- Views (swap) ----------------\n@@ -225,5 +940,6 @@\n-    private byte[] innerBufferBulkGet(ByteBuffer bb) {\n-        byte[] dummyByteArray = new byte[bb.capacity()];\n-        bb.get(dummyByteArray);\n-        bb.flip();\n-        return dummyByteArray;\n+    \/\/ ---------------- BULK GET TESTS HEAP (Views) (swap)\n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharViewSwap() {\n+        heapCharBufferViewSwap.put(0, dummyCharArray);\n+        return dummyCharArray;\n@@ -232,5 +948,241 @@\n-    private byte[] innerBufferBulkPut(ByteBuffer bb) {\n-        byte[] dummyByteArray = new byte[bb.capacity()];\n-        bb.put(dummyByteArray);\n-        bb.flip();\n-        return dummyByteArray;\n+    @Benchmark\n+    public char[] testHeapBulkGetCharViewSwap() {\n+        heapCharBufferViewSwap.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortViewSwap() {\n+        heapShortBufferViewSwap.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortViewSwap() {\n+        heapShortBufferViewSwap.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntViewSwap() {\n+        heapIntBufferViewSwap.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntViewSwap() {\n+        heapIntBufferViewSwap.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongViewSwap() {\n+        heapLongBufferViewSwap.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongViewSwap() {\n+        heapLongBufferViewSwap.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatViewSwap() {\n+        heapFloatBufferViewSwap.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatViewSwap() {\n+        heapFloatBufferViewSwap.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleViewSwap() {\n+        heapDoubleBufferViewSwap.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleViewSwap() {\n+        heapDoubleBufferViewSwap.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- BULK GET TESTS Direct (Views) (swap)\n+    @Benchmark\n+    public char[] testDirectBulkPutCharViewSwap() {\n+        directCharBufferViewSwap.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharViewSwap() {\n+        directCharBufferViewSwap.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortViewSwap() {\n+        directShortBufferViewSwap.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortViewSwap() {\n+        directShortBufferViewSwap.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntViewSwap() {\n+        directIntBufferViewSwap.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntViewSwap() {\n+        directIntBufferViewSwap.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongViewSwap() {\n+        directLongBufferViewSwap.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongViewSwap() {\n+        directLongBufferViewSwap.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatViewSwap() {\n+        directFloatBufferViewSwap.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatViewSwap() {\n+        directFloatBufferViewSwap.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleViewSwap() {\n+        directDoubleBufferViewSwap.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleViewSwap() {\n+        directDoubleBufferViewSwap.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- LOOP GET TESTS (Views) (swap)\n+\n+    @Benchmark\n+    public int testHeapLoopGetCharViewSwap() {\n+        return innerLoopGetChar(heapCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetShortViewSwap() {\n+        return innerLoopGetShort(heapShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapLoopGetIntViewSwap() {\n+        return innerLoopGetInt(heapIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public long testHeapLoopGetLongViewSwap() {\n+        return innerLoopGetLong(heapLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public float testHeapLoopGetFloatViewSwap() {\n+        return innerLoopGetFloat(heapFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public double testHeapLoopGetDoubleViewSwap() {\n+        return innerLoopGetDouble(heapDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetCharViewSwap() {\n+        return innerLoopGetChar(directCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetShortViewSwap() {\n+        return innerLoopGetShort(directShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectLoopGetIntViewSwap() {\n+        return innerLoopGetInt(directIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public long testDirectLoopGetLongViewSwap() {\n+        return innerLoopGetLong(directLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public float testDirectLoopGetFloatViewSwap() {\n+        return innerLoopGetFloat(directFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public double testDirectLoopGetDoubleViewSwap() {\n+        return innerLoopGetDouble(directDoubleBufferViewSwap);\n+    }\n+\n+    \/\/ ---------------- LOOP PUT TESTS (Views) (swap)\n+\n+    @Benchmark\n+    public void testHeapLoopPutCharViewSwap() {\n+        innerLoopPutChar(heapCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutShortViewSwap() {\n+        innerLoopPutShort(heapShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutIntViewSwap() {\n+        innerLoopPutInt(heapIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutLongViewSwap() {\n+        innerLoopPutLong(heapLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutFloatViewSwap() {\n+        innerLoopPutFloat(heapFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapLoopPutDoubleViewSwap() {\n+        innerLoopPutDouble(heapDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutCharViewSwap() {\n+        innerLoopPutChar(directCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutShortViewSwap() {\n+        innerLoopPutShort(directShortBufferViewSwap);\n@@ -239,1 +1191,23 @@\n-    private int innerSingleGetByte(ByteBuffer bb) {\n+    @Benchmark\n+    public void testDirectLoopPutIntViewSwap() {\n+        innerLoopPutInt(directIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutLongViewSwap() {\n+        innerLoopPutLong(directLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutFloatViewSwap() {\n+        innerLoopPutFloat(directFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectLoopPutDoubleViewSwap() {\n+        innerLoopPutDouble(directDoubleBufferViewSwap);\n+    }\n+\n+    \/\/ ---------------- HELPER METHODS\n+\n+    private int innerLoopGetByte(ByteBuffer bb) {\n@@ -247,1 +1221,1 @@\n-    private int innerSingleGetChar(ByteBuffer bb) {\n+    private int innerLoopGetChar(ByteBuffer bb) {\n@@ -255,1 +1229,9 @@\n-    private int innerSingleGetShort(ByteBuffer bb) {\n+    private int innerLoopGetChar(CharBuffer cb) {\n+        int r = 0;\n+        for (int i = 0; i < cb.capacity(); i++) {\n+            r += cb.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private int innerLoopGetShort(ByteBuffer bb) {\n@@ -263,1 +1245,9 @@\n-    private int innerSingleGetInt(ByteBuffer bb) {\n+    private int innerLoopGetShort(ShortBuffer sb) {\n+        int r = 0;\n+        for (int i = 0; i < sb.capacity(); i++) {\n+            r += sb.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private int innerLoopGetInt(ByteBuffer bb) {\n@@ -271,1 +1261,9 @@\n-    private long innerSingleGetLong(ByteBuffer bb) {\n+    private int innerLoopGetInt(IntBuffer ib) {\n+        int r = 0;\n+        for (int i = 0; i < ib.capacity(); i++) {\n+            r += ib.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private long innerLoopGetLong(ByteBuffer bb) {\n@@ -279,1 +1277,9 @@\n-    private float innerSingleGetFloat(ByteBuffer bb) {\n+    private long innerLoopGetLong(LongBuffer lb) {\n+        long r = 0;\n+        for (int i = 0; i < lb.capacity(); i++) {\n+            r += lb.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private float innerLoopGetFloat(ByteBuffer bb) {\n@@ -287,1 +1293,9 @@\n-    private double innerSingleGetDouble(ByteBuffer bb) {\n+    private float innerLoopGetFloat(FloatBuffer fb) {\n+        float r = 0;\n+        for (int i = 0; i < fb.capacity(); i++) {\n+            r += fb.get(i);\n+        }\n+        return r;\n+    }\n+\n+    private double innerLoopGetDouble(ByteBuffer bb) {\n@@ -295,1 +1309,9 @@\n-    private void innerSinglePutByte(ByteBuffer bb) {\n+    private double innerLoopGetDouble(DoubleBuffer db) {\n+        double d = 0;\n+        for (int i = 0; i < db.capacity(); i++) {\n+            d += db.get(i);\n+        }\n+        return d;\n+    }\n+\n+    private void innerLoopPutByte(ByteBuffer bb) {\n@@ -301,1 +1323,1 @@\n-    private void innerSinglePutChar(ByteBuffer bb) {\n+    private void innerLoopPutChar(ByteBuffer bb) {\n@@ -307,1 +1329,7 @@\n-    private void innerSinglePutShort(ByteBuffer bb) {\n+    private void innerLoopPutChar(CharBuffer cb) {\n+        for (int i = 0; i < cb.capacity(); i++) {\n+            cb.put(i, dummyChar);\n+        }\n+    }\n+\n+    private void innerLoopPutShort(ByteBuffer bb) {\n@@ -313,1 +1341,7 @@\n-    private void innerSinglePutInt(ByteBuffer bb) {\n+    private void innerLoopPutShort(ShortBuffer sb) {\n+        for (int i = 0; i < sb.capacity(); i++) {\n+            sb.put(i, dummyShort);\n+        }\n+    }\n+\n+    private void innerLoopPutInt(ByteBuffer bb) {\n@@ -319,1 +1353,7 @@\n-    private void innerSinglePutLong(ByteBuffer bb) {\n+    private void innerLoopPutInt(IntBuffer ib) {\n+        for (int i = 0; i < ib.capacity(); i++) {\n+            ib.put(i, dummyInt);\n+        }\n+    }\n+\n+    private void innerLoopPutLong(ByteBuffer bb) {\n@@ -325,1 +1365,7 @@\n-    private void innerSinglePutFloat(ByteBuffer bb) {\n+    private void innerLoopPutLong(LongBuffer lb) {\n+        for (int i = 0; i < lb.capacity(); i++) {\n+            lb.put(i, dummyLong);\n+        }\n+    }\n+\n+    private void innerLoopPutFloat(ByteBuffer bb) {\n@@ -330,0 +1376,5 @@\n+    private void innerLoopPutFloat(FloatBuffer fb) {\n+        for (int i = 0; i < fb.capacity(); i++) {\n+            fb.put(i, dummyFloat);\n+        }\n+    }\n@@ -331,1 +1382,1 @@\n-    private void innerSinglePutDouble(ByteBuffer bb) {\n+    private void innerLoopPutDouble(ByteBuffer bb) {\n@@ -336,0 +1387,102 @@\n+\n+    private void innerLoopPutDouble(DoubleBuffer db) {\n+        for (int i = 0; i < db.capacity(); i++) {\n+            db.put(i, dummyDouble);\n+        }\n+    }\n+\n+    \/\/ -- sanity\n+\n+    \/\/ A subset of operations, as a basic correctness sanity\n+    public static void main(String ...args) {\n+        var test = new ByteBuffers();\n+        test.size = 16;\n+        test.setup();\n+\n+        \/\/ byte\n+        test.dummyByteArray = \"0123456789ABCDEF\".getBytes(US_ASCII);\n+        test.testHeapBulkPutByte();\n+        var ba = test.testHeapBulkGetByte();\n+        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n+\n+        test.dummyByteArray = \"FEDCBA9876543210\".getBytes(US_ASCII);\n+        test.testDirectBulkPutByte();\n+        ba = test.testDirectBulkGetByte();\n+        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n+\n+        test.dummyByte = 0x01;\n+        test.testHeapLoopPutByte();\n+        int x = test.testHeapLoopGetByte();\n+        assertTrue(x == (0x01 * 16));\n+\n+        test.dummyByte = 0x03;\n+        test.testDirectLoopPutByte();\n+        x = test.testDirectLoopGetByte();\n+        assertTrue(x == (0x03 * 16));\n+\n+        \/\/ char\n+        test.dummyCharArray = \"FFEEFFEE\".toCharArray();\n+        test.testHeapBulkPutCharView();\n+        var ca = test.testHeapBulkGetCharView();\n+        assertTrue(Arrays.equals(ca, test.dummyCharArray));\n+\n+        test.dummyChar = 0x03;\n+        test.testHeapLoopPutChar();\n+        var v = test.testHeapLoopGetChar();\n+        assertTrue(v == 0x03 * 8);\n+\n+        test.dummyChar = 0x05;\n+        test.testHeapLoopPutCharView();\n+        v = test.testHeapLoopGetCharView();\n+        assertTrue(v == 0x05 * 8);\n+\n+        test.dummyChar = 0x07;\n+        test.testDirectLoopPutCharView();\n+        v = test.testDirectLoopGetCharView();\n+        assertTrue(v == 0x07 * 8);\n+\n+        \/\/ int\n+        test.dummyIntArray = new int[] { 0x01020304, 0x01020304, 0x01020304, 0x01020304 };\n+        test.testHeapBulkPutIntView();\n+        test.testHeapBulkPutIntViewSwap();\n+        test.testDirectBulkPutIntView();\n+        test.testDirectBulkPutIntViewSwap();\n+\n+        byte[] heapLil, heapBig, directLil, directBig;\n+        if (nativeOrder() == LITTLE_ENDIAN) {\n+            var b1 = test.testHeapBulkGetByte();       heapLil   = Arrays.copyOf(b1, b1.length);\n+            var b2 = test.testHeapBulkGetByteSwap();   heapBig   = Arrays.copyOf(b2, b2.length);\n+            var b3 = test.testDirectBulkGetByte();     directLil = Arrays.copyOf(b3, b3.length);\n+            var b4 = test.testDirectBulkGetByteSwap(); directBig = Arrays.copyOf(b4, b4.length);\n+        } else {\n+            var b1 = test.testHeapBulkGetByteSwap();   heapLil   = Arrays.copyOf(b1, b1.length);\n+            var b2 = test.testHeapBulkGetByte();       heapBig   = Arrays.copyOf(b2, b2.length);\n+            var b3 = test.testDirectBulkGetByteSwap(); directLil = Arrays.copyOf(b3, b3.length);\n+            var b4 = test.testDirectBulkGetByte();     directBig = Arrays.copyOf(b4, b4.length);\n+        }\n+\n+        for (int i=0; i<16; i+=4) {\n+            assertTrue(heapLil[i + 0] == 0x04);\n+            assertTrue(heapLil[i + 1] == 0x03);\n+            assertTrue(heapLil[i + 2] == 0x02);\n+            assertTrue(heapLil[i + 3] == 0x01);\n+            assertTrue(heapBig[i + 0] == 0x01);\n+            assertTrue(heapBig[i + 1] == 0x02);\n+            assertTrue(heapBig[i + 2] == 0x03);\n+            assertTrue(heapBig[i + 3] == 0x04);\n+\n+            assertTrue(directLil[i + 0] == 0x04);\n+            assertTrue(directLil[i + 1] == 0x03);\n+            assertTrue(directLil[i + 2] == 0x02);\n+            assertTrue(directLil[i + 3] == 0x01);\n+            assertTrue(directBig[i + 0] == 0x01);\n+            assertTrue(directBig[i + 1] == 0x02);\n+            assertTrue(directBig[i + 2] == 0x03);\n+            assertTrue(directBig[i + 3] == 0x04);\n+        }\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition)\n+            throw new AssertionError();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBuffers.java","additions":1265,"deletions":112,"binary":false,"changes":1377,"status":"modified"}]}