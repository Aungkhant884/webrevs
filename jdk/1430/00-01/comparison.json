{"files":[{"patch":"@@ -36,1 +36,0 @@\n-\n@@ -38,0 +37,8 @@\n+import java.nio.ByteOrder;\n+import java.nio.CharBuffer;\n+import java.nio.DoubleBuffer;\n+import java.nio.FloatBuffer;\n+import java.nio.IntBuffer;\n+import java.nio.LongBuffer;\n+import java.nio.ShortBuffer;\n+import java.util.Arrays;\n@@ -39,0 +46,2 @@\n+import static java.nio.ByteOrder.*;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -41,1 +50,12 @@\n- * Benchmark operations on java.nio.Buffer.\n+ * Benchmark for memory access operations on java.nio.Buffer ( and its views )\n+ *\n+ * A large number of variants are covered. The individual benchmarks conform to\n+ * the following convention:\n+ *   test(Direct|Heap)(Bulk|Single)(Get|Put)(Byte|Char|Short|Int|Long|Float|Double)(View)?(Swap)?\n+ *\n+ * This allows to easily run a subset of particular interest. For example:\n+ *   Direct only :- \"org.openjdk.bench.java.nio.ByteBuffers.testDirect.*\"\n+ *   Char only   :- \"org.openjdk.bench.java.nio.ByteBuffers.test.*Char.*\"\n+ *   Bulk only   :- \"org.openjdk.bench.java.nio.ByteBuffers.test.*Bulk.*\"\n+ *   Put with Int or Long carrier :-\n+ *      test(Direct|Heap)(Single)(Put)(Int|Long)(View)?(Swap)?\"\n@@ -51,1 +71,1 @@\n-    @Param({\"10\", \"1000\", \"100000\"})\n+    @Param({\"16\", \"1024\", \"131072\"})\n@@ -62,3 +82,39 @@\n-    public ByteBuffer heapBuffer;\n-    public ByteBuffer directBuffer;\n-    public byte[] dummyByteArray;\n+    public ByteBuffer   heapBuffer;\n+    public CharBuffer   heapCharBufferView;\n+    public ShortBuffer  heapShortBufferView;\n+    public IntBuffer    heapIntBufferView;\n+    public LongBuffer   heapLongBufferView;\n+    public FloatBuffer  heapFloatBufferView;\n+    public DoubleBuffer heapDoubleBufferView;\n+\n+    public ByteBuffer   directBuffer;\n+    public CharBuffer   directCharBufferView;\n+    public ShortBuffer  directShortBufferView;\n+    public IntBuffer    directIntBufferView;\n+    public LongBuffer   directLongBufferView;\n+    public FloatBuffer  directFloatBufferView;\n+    public DoubleBuffer directDoubleBufferView;\n+\n+    public ByteBuffer   heapBufferSwap;\n+    public CharBuffer   heapCharBufferViewSwap;\n+    public ShortBuffer  heapShortBufferViewSwap;\n+    public IntBuffer    heapIntBufferViewSwap;\n+    public LongBuffer   heapLongBufferViewSwap;\n+    public FloatBuffer  heapFloatBufferViewSwap;\n+    public DoubleBuffer heapDoubleBufferViewSwap;\n+\n+    public ByteBuffer   directBufferSwap;\n+    public CharBuffer   directCharBufferViewSwap;\n+    public ShortBuffer  directShortBufferViewSwap;\n+    public IntBuffer    directIntBufferViewSwap;\n+    public LongBuffer   directLongBufferViewSwap;\n+    public FloatBuffer  directFloatBufferViewSwap;\n+    public DoubleBuffer directDoubleBufferViewSwap;\n+\n+    public byte[]   dummyByteArray;\n+    public char[]   dummyCharArray;\n+    public short[]  dummyShortArray;\n+    public int[]    dummyIntArray;\n+    public long[]   dummyLongArray;\n+    public float[]  dummyFloatArray;\n+    public double[] dummyDoubleArray;\n@@ -68,3 +124,42 @@\n-        heapBuffer = ByteBuffer.allocate(size);\n-        directBuffer = ByteBuffer.allocateDirect(size);\n-        dummyByteArray = new byte[size];\n+        dummyByteArray   = new byte[size];\n+        dummyCharArray   = new char[size \/ 2];\n+        dummyShortArray  = new short[size \/ 2];\n+        dummyIntArray    = new int[size \/ 4];\n+        dummyLongArray   = new long[size \/ 8];\n+        dummyFloatArray  = new float[size \/ 4];\n+        dummyDoubleArray = new double[size \/ 8];\n+\n+        heapBuffer = ByteBuffer.allocate(size).order(nativeOrder());\n+        heapCharBufferView   = heapBuffer.asCharBuffer();\n+        heapShortBufferView  = heapBuffer.asShortBuffer();\n+        heapIntBufferView    = heapBuffer.asIntBuffer();\n+        heapLongBufferView   = heapBuffer.asLongBuffer();\n+        heapFloatBufferView  = heapBuffer.asFloatBuffer();\n+        heapDoubleBufferView = heapBuffer.asDoubleBuffer();\n+\n+        directBuffer = ByteBuffer.allocateDirect(size).order(nativeOrder());\n+        directCharBufferView   = directBuffer.asCharBuffer();\n+        directShortBufferView  = directBuffer.asShortBuffer();\n+        directIntBufferView    = directBuffer.asIntBuffer();\n+        directLongBufferView   = directBuffer.asLongBuffer();\n+        directFloatBufferView  = directBuffer.asFloatBuffer();\n+        directDoubleBufferView = directBuffer.asDoubleBuffer();\n+\n+        \/\/ endianness swapped\n+        ByteOrder nonNativeOrder = nativeOrder() == BIG_ENDIAN ? LITTLE_ENDIAN : BIG_ENDIAN;\n+\n+        heapBufferSwap = ByteBuffer.allocate(size).order(nonNativeOrder);\n+        heapCharBufferViewSwap   = heapBufferSwap.asCharBuffer();\n+        heapShortBufferViewSwap  = heapBufferSwap.asShortBuffer();\n+        heapIntBufferViewSwap    = heapBufferSwap.asIntBuffer();\n+        heapLongBufferViewSwap   = heapBufferSwap.asLongBuffer();\n+        heapFloatBufferViewSwap  = heapBufferSwap.asFloatBuffer();\n+        heapDoubleBufferViewSwap = heapBufferSwap.asDoubleBuffer();\n+\n+        directBufferSwap = ByteBuffer.allocateDirect(size).order(nonNativeOrder);\n+        directCharBufferViewSwap   = directBufferSwap.asCharBuffer();\n+        directShortBufferViewSwap  = directBufferSwap.asShortBuffer();\n+        directIntBufferViewSwap    = directBufferSwap.asIntBuffer();\n+        directLongBufferViewSwap   = directBufferSwap.asLongBuffer();\n+        directFloatBufferViewSwap  = directBufferSwap.asFloatBuffer();\n+        directDoubleBufferViewSwap = directBufferSwap.asDoubleBuffer();\n@@ -76,1 +171,1 @@\n-    public byte[] testBulkGet() {\n+    public byte[] testHeapBulkGetByte() {\n@@ -82,1 +177,1 @@\n-    public byte[] testDirectBulkGet() {\n+    public byte[] testDirectBulkGetByte() {\n@@ -90,1 +185,1 @@\n-    public byte[] testBulkPut() {\n+    public byte[] testHeapBulkPutByte() {\n@@ -96,1 +191,1 @@\n-    public byte[] testDirectBulkPut() {\n+    public byte[] testDirectBulkPutByte() {\n@@ -104,1 +199,1 @@\n-    public int testSingleGetByte() {\n+    public int testHeapSingleGetByte() {\n@@ -109,1 +204,1 @@\n-    public int testSingleGetChar() {\n+    public int testHeapSingleGetChar() {\n@@ -114,1 +209,1 @@\n-    public int testSingleGetShort() {\n+    public int testHeapSingleGetShort() {\n@@ -119,1 +214,1 @@\n-    public int testSingleGetInt() {\n+    public int testHeapSingleGetInt() {\n@@ -124,1 +219,1 @@\n-    public long testSingleGetLong() {\n+    public long testHeapSingleGetLong() {\n@@ -129,1 +224,1 @@\n-    public float testSingleGetFloat() {\n+    public float testHeapSingleGetFloat() {\n@@ -134,1 +229,1 @@\n-    public double testSingleGetDouble() {\n+    public double testHeapSingleGetDouble() {\n@@ -176,1 +271,1 @@\n-    public void testSinglePutByte() {\n+    public void testHeapSinglePutByte() {\n@@ -181,1 +276,1 @@\n-    public void testSinglePutChar() {\n+    public void testHeapSinglePutChar() {\n@@ -186,1 +281,1 @@\n-    public void testSinglePutShort() {\n+    public void testHeapSinglePutShort() {\n@@ -191,1 +286,1 @@\n-    public void testSinglePutInt() {\n+    public void testHeapSinglePutInt() {\n@@ -196,1 +291,1 @@\n-    public void testSinglePutLong() {\n+    public void testHeapSinglePutLong() {\n@@ -201,1 +296,1 @@\n-    public void testSinglePutFloat() {\n+    public void testHeapSinglePutFloat() {\n@@ -206,1 +301,1 @@\n-    public void testSinglePutDouble() {\n+    public void testHeapSinglePutDouble() {\n@@ -245,0 +340,720 @@\n+    \/\/ ---------------- Views ----------------\n+\n+    \/\/ ---------------- BULK GET TESTS HEAP (Views)\n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharView() {\n+        heapCharBufferView.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharView() {\n+        heapCharBufferView.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortView() {\n+        heapShortBufferView.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortView() {\n+        heapShortBufferView.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntView() {\n+        heapIntBufferView.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntView() {\n+        heapIntBufferView.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongView() {\n+        heapLongBufferView.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongView() {\n+        heapLongBufferView.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatView() {\n+        heapFloatBufferView.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatView() {\n+        heapFloatBufferView.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleView() {\n+        heapDoubleBufferView.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleView() {\n+        heapDoubleBufferView.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- BULK GET TESTS Direct (Views)\n+    @Benchmark\n+    public char[] testDirectBulkPutCharView() {\n+        directCharBufferView.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharView() {\n+        directCharBufferView.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortView() {\n+        directShortBufferView.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortView() {\n+        directShortBufferView.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntView() {\n+        directIntBufferView.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntView() {\n+        directIntBufferView.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongView() {\n+        directLongBufferView.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongView() {\n+        directLongBufferView.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatView() {\n+        directFloatBufferView.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatView() {\n+        directFloatBufferView.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleView() {\n+        directDoubleBufferView.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleView() {\n+        directDoubleBufferView.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- SINGLE GET TESTS (Views)\n+\n+    @Benchmark\n+    public int testHeapSingleGetCharView() {\n+        return innerSingleGetChar(heapCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetShortView() {\n+        return innerSingleGetShort(heapShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetIntView() {\n+        return innerSingleGetInt(heapIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public long testHeapSingleGetLongView() {\n+        return innerSingleGetLong(heapLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public float testHeapSingleGetFloatView() {\n+        return innerSingleGetFloat(heapFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public double testHeapSingleGetDoubleView() {\n+        return innerSingleGetDouble(heapDoubleBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetCharView() {\n+        return innerSingleGetChar(directCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetShortView() {\n+        return innerSingleGetShort(directShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetIntView() {\n+        return innerSingleGetInt(directIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public long testDirectSingleGetLongView() {\n+        return innerSingleGetLong(directLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public float testDirectSingleGetFloatView() {\n+        return innerSingleGetFloat(directFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public double testDirectSingleGetDoubleView() {\n+        return innerSingleGetDouble(directDoubleBufferView);\n+    }\n+\n+    \/\/ ---------------- SINGLE PUT TESTS (Views)\n+\n+    @Benchmark\n+    public void testHeapSinglePutCharView() {\n+        innerSinglePutChar(heapCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutShortView() {\n+        innerSinglePutShort(heapShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutIntView() {\n+        innerSinglePutInt(heapIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutLongView() {\n+        innerSinglePutLong(heapLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutFloatView() {\n+        innerSinglePutFloat(heapFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutDoubleView() {\n+        innerSinglePutDouble(heapDoubleBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutCharView() {\n+        innerSinglePutChar(directCharBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutShortView() {\n+        innerSinglePutShort(directShortBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutIntView() {\n+        innerSinglePutInt(directIntBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutLongView() {\n+        innerSinglePutLong(directLongBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutFloatView() {\n+        innerSinglePutFloat(directFloatBufferView);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutDoubleView() {\n+        innerSinglePutDouble(directDoubleBufferView);\n+    }\n+\n+    \/\/ -- Swapped endianness follows\n+\n+    \/\/ ---------------- BULK GET TESTS (swap)\n+\n+    @Benchmark\n+    public byte[] testHeapBulkGetByteSwap() {\n+        heapBufferSwap.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    @Benchmark\n+    public byte[] testDirectBulkGetByteSwap() {\n+        directBufferSwap.get(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    \/\/ ---------------- BULK PUT TESTS (swap)\n+\n+    @Benchmark\n+    public byte[] testHeapBulkPutByteSwap() {\n+        heapBufferSwap.put(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    @Benchmark\n+    public byte[] testDirectBulkPutByteSwap() {\n+        directBufferSwap.put(0, dummyByteArray);\n+        return dummyByteArray;\n+    }\n+\n+    \/\/ ---------------- SINGLE GET TESTS (swap)\n+\n+    @Benchmark\n+    public int testHeapSingleGetByteSwap() {\n+        return innerSingleGetByte(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetCharSwap() {\n+        return innerSingleGetChar(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetShortSwap() {\n+        return innerSingleGetShort(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetIntSwap() {\n+        return innerSingleGetInt(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public long testHeapSingleGetLongSwap() {\n+        return innerSingleGetLong(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public float testHeapSingleGetFloatSwap() {\n+        return innerSingleGetFloat(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public double testHeapSingleGetDoubleSwap() {\n+        return innerSingleGetDouble(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetByteSwap() {\n+        return innerSingleGetByte(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetCharSwap() {\n+        return innerSingleGetChar(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetShortSwap() {\n+        return innerSingleGetShort(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetIntSwap() {\n+        return innerSingleGetInt(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public long testDirectSingleGetLongSwap() {\n+        return innerSingleGetLong(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public float testDirectSingleGetFloatSwap() {\n+        return innerSingleGetFloat(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public double testDirectSingleGetDoubleSwap() {\n+        return innerSingleGetDouble(directBufferSwap);\n+    }\n+\n+    \/\/ ---------------- SINGLE PUT TESTS (swap)\n+\n+    @Benchmark\n+    public void testHeapSinglePutByteSwap() {\n+        innerSinglePutByte(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutCharSwap() {\n+        innerSinglePutChar(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutShortSwap() {\n+        innerSinglePutShort(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutIntSwap() {\n+        innerSinglePutInt(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutLongSwap() {\n+        innerSinglePutLong(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutFloatSwap() {\n+        innerSinglePutFloat(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutDoubleSwap() {\n+        innerSinglePutDouble(heapBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutByteSwap() {\n+        innerSinglePutByte(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutCharSwap() {\n+        innerSinglePutChar(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutShortSwap() {\n+        innerSinglePutShort(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutIntSwap() {\n+        innerSinglePutInt(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutLongSwap() {\n+        innerSinglePutLong(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutFloatSwap() {\n+        innerSinglePutFloat(directBufferSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutDoubleSwap() {\n+        innerSinglePutDouble(directBufferSwap);\n+    }\n+\n+    \/\/ ---------------- Views (swap) ----------------\n+\n+    \/\/ ---------------- BULK GET TESTS HEAP (Views) (swap)\n+\n+    @Benchmark\n+    public char[] testHeapBulkPutCharViewSwap() {\n+        heapCharBufferViewSwap.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testHeapBulkGetCharViewSwap() {\n+        heapCharBufferViewSwap.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkPutShortViewSwap() {\n+        heapShortBufferViewSwap.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testHeapBulkGetShortViewSwap() {\n+        heapShortBufferViewSwap.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkPutIntViewSwap() {\n+        heapIntBufferViewSwap.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testHeapBulkGetIntViewSwap() {\n+        heapIntBufferViewSwap.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkGetLongViewSwap() {\n+        heapLongBufferViewSwap.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testHeapBulkPutLongViewSwap() {\n+        heapLongBufferViewSwap.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkGetFloatViewSwap() {\n+        heapFloatBufferViewSwap.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testHeapBulkPutFloatViewSwap() {\n+        heapFloatBufferViewSwap.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkGetDoubleViewSwap() {\n+        heapDoubleBufferViewSwap.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testHeapBulkPutDoubleViewSwap() {\n+        heapDoubleBufferViewSwap.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- BULK GET TESTS Direct (Views) (swap)\n+    @Benchmark\n+    public char[] testDirectBulkPutCharViewSwap() {\n+        directCharBufferViewSwap.put(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public char[] testDirectBulkGetCharViewSwap() {\n+        directCharBufferViewSwap.get(0, dummyCharArray);\n+        return dummyCharArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkPutShortViewSwap() {\n+        directShortBufferViewSwap.put(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public short[] testDirectBulkGetShortViewSwap() {\n+        directShortBufferViewSwap.get(0, dummyShortArray);\n+        return dummyShortArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkPutIntViewSwap() {\n+        directIntBufferViewSwap.put(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public int[] testDirectBulkGetIntViewSwap() {\n+        directIntBufferViewSwap.get(0, dummyIntArray);\n+        return dummyIntArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkGetLongViewSwap() {\n+        directLongBufferViewSwap.get(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public long[] testDirectBulkPutLongViewSwap() {\n+        directLongBufferViewSwap.put(0, dummyLongArray);\n+        return dummyLongArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkGetFloatViewSwap() {\n+        directFloatBufferViewSwap.get(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public float[] testDirectBulkPutFloatViewSwap() {\n+        directFloatBufferViewSwap.put(0, dummyFloatArray);\n+        return dummyFloatArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkGetDoubleViewSwap() {\n+        directDoubleBufferViewSwap.get(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    @Benchmark\n+    public double[] testDirectBulkPutDoubleViewSwap() {\n+        directDoubleBufferViewSwap.put(0, dummyDoubleArray);\n+        return dummyDoubleArray;\n+    }\n+\n+    \/\/ ---------------- SINGLE GET TESTS (Views) (swap)\n+\n+    @Benchmark\n+    public int testHeapSingleGetCharViewSwap() {\n+        return innerSingleGetChar(heapCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetShortViewSwap() {\n+        return innerSingleGetShort(heapShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testHeapSingleGetIntViewSwap() {\n+        return innerSingleGetInt(heapIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public long testHeapSingleGetLongViewSwap() {\n+        return innerSingleGetLong(heapLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public float testHeapSingleGetFloatViewSwap() {\n+        return innerSingleGetFloat(heapFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public double testHeapSingleGetDoubleViewSwap() {\n+        return innerSingleGetDouble(heapDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetCharViewSwap() {\n+        return innerSingleGetChar(directCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetShortViewSwap() {\n+        return innerSingleGetShort(directShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public int testDirectSingleGetIntViewSwap() {\n+        return innerSingleGetInt(directIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public long testDirectSingleGetLongViewSwap() {\n+        return innerSingleGetLong(directLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public float testDirectSingleGetFloatViewSwap() {\n+        return innerSingleGetFloat(directFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public double testDirectSingleGetDoubleViewSwap() {\n+        return innerSingleGetDouble(directDoubleBufferViewSwap);\n+    }\n+\n+    \/\/ ---------------- SINGLE PUT TESTS (Views) (swap)\n+\n+    @Benchmark\n+    public void testHeapSinglePutCharViewSwap() {\n+        innerSinglePutChar(heapCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutShortViewSwap() {\n+        innerSinglePutShort(heapShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutIntViewSwap() {\n+        innerSinglePutInt(heapIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutLongViewSwap() {\n+        innerSinglePutLong(heapLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutFloatViewSwap() {\n+        innerSinglePutFloat(heapFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testHeapSinglePutDoubleViewSwap() {\n+        innerSinglePutDouble(heapDoubleBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutCharViewSwap() {\n+        innerSinglePutChar(directCharBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutShortViewSwap() {\n+        innerSinglePutShort(directShortBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutIntViewSwap() {\n+        innerSinglePutInt(directIntBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutLongViewSwap() {\n+        innerSinglePutLong(directLongBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutFloatViewSwap() {\n+        innerSinglePutFloat(directFloatBufferViewSwap);\n+    }\n+\n+    @Benchmark\n+    public void testDirectSinglePutDoubleViewSwap() {\n+        innerSinglePutDouble(directDoubleBufferViewSwap);\n+    }\n+\n@@ -263,0 +1078,8 @@\n+    private int innerSingleGetChar(CharBuffer cb) {\n+        int r = 0;\n+        for (int i = 0; i < cb.capacity(); i++) {\n+            r += cb.get(i);\n+        }\n+        return r;\n+    }\n+\n@@ -271,0 +1094,8 @@\n+    private int innerSingleGetShort(ShortBuffer sb) {\n+        int r = 0;\n+        for (int i = 0; i < sb.capacity(); i++) {\n+            r += sb.get(i);\n+        }\n+        return r;\n+    }\n+\n@@ -279,0 +1110,8 @@\n+    private int innerSingleGetInt(IntBuffer ib) {\n+        int r = 0;\n+        for (int i = 0; i < ib.capacity(); i++) {\n+            r += ib.get(i);\n+        }\n+        return r;\n+    }\n+\n@@ -287,0 +1126,8 @@\n+    private long innerSingleGetLong(LongBuffer lb) {\n+        long r = 0;\n+        for (int i = 0; i < lb.capacity(); i++) {\n+            r += lb.get(i);\n+        }\n+        return r;\n+    }\n+\n@@ -295,0 +1142,8 @@\n+    private float innerSingleGetFloat(FloatBuffer fb) {\n+        float r = 0;\n+        for (int i = 0; i < fb.capacity(); i++) {\n+            r += fb.get(i);\n+        }\n+        return r;\n+    }\n+\n@@ -303,0 +1158,8 @@\n+    private double innerSingleGetDouble(DoubleBuffer db) {\n+        double d = 0;\n+        for (int i = 0; i < db.capacity(); i++) {\n+            d += db.get(i);\n+        }\n+        return d;\n+    }\n+\n@@ -315,0 +1178,6 @@\n+    private void innerSinglePutChar(CharBuffer cb) {\n+        for (int i = 0; i < cb.capacity(); i++) {\n+            cb.put(i, dummyChar);\n+        }\n+    }\n+\n@@ -321,0 +1190,6 @@\n+    private void innerSinglePutShort(ShortBuffer sb) {\n+        for (int i = 0; i < sb.capacity(); i++) {\n+            sb.put(i, dummyShort);\n+        }\n+    }\n+\n@@ -327,0 +1202,6 @@\n+    private void innerSinglePutInt(IntBuffer ib) {\n+        for (int i = 0; i < ib.capacity(); i++) {\n+            ib.put(i, dummyInt);\n+        }\n+    }\n+\n@@ -333,0 +1214,6 @@\n+    private void innerSinglePutLong(LongBuffer lb) {\n+        for (int i = 0; i < lb.capacity(); i++) {\n+            lb.put(i, dummyLong);\n+        }\n+    }\n+\n@@ -338,0 +1225,5 @@\n+    private void innerSinglePutFloat(FloatBuffer fb) {\n+        for (int i = 0; i < fb.capacity(); i++) {\n+            fb.put(i, dummyFloat);\n+        }\n+    }\n@@ -344,0 +1236,102 @@\n+\n+    private void innerSinglePutDouble(DoubleBuffer db) {\n+        for (int i = 0; i < db.capacity(); i++) {\n+            db.put(i, dummyDouble);\n+        }\n+    }\n+\n+    \/\/ -- sanity\n+\n+    \/\/ A subset of operations, as a basic correctness sanity\n+    public static void main(String ...args) {\n+        var test = new ByteBuffers();\n+        test.size = 16;\n+        test.setup();\n+\n+        \/\/ byte\n+        test.dummyByteArray = \"0123456789ABCDEF\".getBytes(US_ASCII);\n+        test.testHeapBulkPutByte();\n+        var ba = test.testHeapBulkGetByte();\n+        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n+\n+        test.dummyByteArray = \"FEDCBA9876543210\".getBytes(US_ASCII);\n+        test.testDirectBulkPutByte();\n+        ba = test.testDirectBulkGetByte();\n+        assertTrue(Arrays.equals(ba, test.dummyByteArray));\n+\n+        test.dummyByte = 0x01;\n+        test.testHeapSinglePutByte();\n+        int x = test.testHeapSingleGetByte();\n+        assertTrue(x == (0x01 * 16));\n+\n+        test.dummyByte = 0x03;\n+        test.testDirectSinglePutByte();\n+        x = test.testDirectSingleGetByte();\n+        assertTrue(x == (0x03* 16));\n+\n+        \/\/ char\n+        test.dummyCharArray = \"FFEEFFEE\".toCharArray();\n+        test.testHeapBulkPutCharView();\n+        var ca = test.testHeapBulkGetCharView();\n+        assertTrue(Arrays.equals(ca, test.dummyCharArray));\n+\n+        test.dummyChar = 0x03;\n+        test.testHeapSinglePutChar();\n+        var v = test.testHeapSingleGetChar();\n+        assertTrue(v == 0x03 * 8);\n+\n+        test.dummyChar = 0x05;\n+        test.testHeapSinglePutCharView();\n+        v = test.testHeapSingleGetCharView();\n+        assertTrue(v == 0x05 * 8);\n+\n+        test.dummyChar = 0x07;\n+        test.testDirectSinglePutCharView();\n+        v = test.testDirectSingleGetCharView();\n+        assertTrue(v == 0x07 * 8);\n+\n+        \/\/ int\n+        test.dummyIntArray = new int[] { 0x01020304, 0x01020304, 0x01020304, 0x01020304 };\n+        test.testHeapBulkPutIntView();\n+        test.testHeapBulkPutIntViewSwap();\n+        test.testDirectBulkPutIntView();\n+        test.testDirectBulkPutIntViewSwap();\n+\n+        byte[] heapLil, heapBig, directLil, directBig;\n+        if (nativeOrder() == LITTLE_ENDIAN) {\n+            var b1 = test.testHeapBulkGetByte();       heapLil   = Arrays.copyOf(b1, b1.length);\n+            var b2 = test.testHeapBulkGetByteSwap();   heapBig   = Arrays.copyOf(b2, b2.length);\n+            var b3 = test.testDirectBulkGetByte();     directLil = Arrays.copyOf(b3, b3.length);\n+            var b4 = test.testDirectBulkGetByteSwap(); directBig = Arrays.copyOf(b4, b4.length);\n+        } else {\n+            var b1 = test.testHeapBulkGetByteSwap();   heapLil   = Arrays.copyOf(b1, b1.length);\n+            var b2 = test.testHeapBulkGetByte();       heapBig   = Arrays.copyOf(b2, b2.length);\n+            var b3 = test.testDirectBulkGetByteSwap(); directLil = Arrays.copyOf(b3, b3.length);\n+            var b4 = test.testDirectBulkGetByte();     directBig = Arrays.copyOf(b4, b4.length);\n+        }\n+\n+        for (int i=0; i<16; i+=4) {\n+            assertTrue(heapLil[i + 0] == 0x04);\n+            assertTrue(heapLil[i + 1] == 0x03);\n+            assertTrue(heapLil[i + 2] == 0x02);\n+            assertTrue(heapLil[i + 3] == 0x01);\n+            assertTrue(heapBig[i + 0] == 0x01);\n+            assertTrue(heapBig[i + 1] == 0x02);\n+            assertTrue(heapBig[i + 2] == 0x03);\n+            assertTrue(heapBig[i + 3] == 0x04);\n+            \n+            assertTrue(directLil[i + 0] == 0x04);\n+            assertTrue(directLil[i + 1] == 0x03);\n+            assertTrue(directLil[i + 2] == 0x02);\n+            assertTrue(directLil[i + 3] == 0x01);\n+            assertTrue(directBig[i + 0] == 0x01);\n+            assertTrue(directBig[i + 1] == 0x02);\n+            assertTrue(directBig[i + 2] == 0x03);\n+            assertTrue(directBig[i + 3] == 0x04);\n+        }\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition)\n+            throw new AssertionError();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/ByteBuffers.java","additions":1021,"deletions":27,"binary":false,"changes":1048,"status":"modified"}]}