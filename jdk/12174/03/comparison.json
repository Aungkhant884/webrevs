{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -41,0 +42,1 @@\n+import java.util.List;\n@@ -43,0 +45,2 @@\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n@@ -740,0 +744,12 @@\n+    \/**\n+     * Exception formatter that returns an {@link IndexOutOfBoundsException}\n+     * with no detail message.\n+     *\/\n+    private static final BiFunction<String,List<Number>,IndexOutOfBoundsException>\n+        IOOBE_FORMATTER = Preconditions.outOfBoundsExceptionFormatter(new Function<>() {\n+        @Override\n+        public IndexOutOfBoundsException apply(String s) {\n+            return new IndexOutOfBoundsException();\n+        }\n+    });\n+\n@@ -742,2 +758,2 @@\n-     * IndexOutOfBoundsException} if it is not smaller than the limit\n-     * or is smaller than zero.\n+     * IndexOutOfBoundsException} if it is greater than the limit\n+     * or is negative.\n@@ -745,0 +761,1 @@\n+    @ForceInline\n@@ -746,1 +763,1 @@\n-        return Objects.checkIndex(i, limit);\n+        return Preconditions.checkIndex(i, limit, IOOBE_FORMATTER);\n@@ -749,0 +766,7 @@\n+    \/**\n+     * Checks the given index and number of bytes against the range\n+     * {@code [0, limit]}, throwing an {@link\n+     * IndexOutOfBoundsException} if the index is negative or the index\n+     * plus the number of bytes is greater than the limit.\n+     *\/\n+    @ForceInline\n@@ -750,3 +774,1 @@\n-        if ((i < 0) || (nb > limit - i))\n-            throw new IndexOutOfBoundsException();\n-        return i;\n+        return Preconditions.checkIndex(i, limit - nb + 1, IOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"}]}