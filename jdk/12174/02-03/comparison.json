{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -44,0 +45,2 @@\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n@@ -741,0 +744,12 @@\n+    \/**\n+     * Exception formatter that returns an {@link IndexOutOfBoundsException}\n+     * with no detail message.\n+     *\/\n+    private static final BiFunction<String,List<Number>,IndexOutOfBoundsException>\n+        IOOBE_FORMATTER = Preconditions.outOfBoundsExceptionFormatter(new Function<>() {\n+        @Override\n+        public IndexOutOfBoundsException apply(String s) {\n+            return new IndexOutOfBoundsException();\n+        }\n+    });\n+\n@@ -743,2 +758,2 @@\n-     * IndexOutOfBoundsException} if it is not smaller than the limit\n-     * or is smaller than zero.\n+     * IndexOutOfBoundsException} if it is greater than the limit\n+     * or is negative.\n@@ -746,0 +761,1 @@\n+    @ForceInline\n@@ -747,1 +763,1 @@\n-        return Objects.checkIndex(i, limit);\n+        return Preconditions.checkIndex(i, limit, IOOBE_FORMATTER);\n@@ -750,0 +766,6 @@\n+    \/**\n+     * Checks the given index and number of bytes against the range\n+     * {@code [0, limit]}, throwing an {@link\n+     * IndexOutOfBoundsException} if the index is negative or the index\n+     * plus the number of bytes is greater than the limit.\n+     *\/\n@@ -752,8 +774,1 @@\n-        return Preconditions.checkIndex(i, limit - nb + 1,\n-            (x, y) -> {\n-                String msg = i < 0\n-                    ? \"position (\" + i + \") < 0\"\n-                    : \"position (\" + i + \") + length (\" + nb + \") > limit (\" + limit + \")\";\n-                return new IndexOutOfBoundsException(msg);\n-            }\n-        );\n+        return Preconditions.checkIndex(i, limit - nb + 1, IOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":26,"deletions":11,"binary":false,"changes":37,"status":"modified"}]}