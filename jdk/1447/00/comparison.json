{"files":[{"patch":"@@ -485,17 +485,0 @@\n-G1RemSet::G1RemSet(G1CollectedHeap* g1h,\n-                   G1CardTable* ct,\n-                   G1HotCardCache* hot_card_cache) :\n-  _scan_state(new G1RemSetScanState()),\n-  _prev_period_summary(false),\n-  _g1h(g1h),\n-  _ct(ct),\n-  _g1p(_g1h->policy()),\n-  _hot_card_cache(hot_card_cache),\n-  _sampling_task(NULL) {\n-}\n-\n-G1RemSet::~G1RemSet() {\n-  delete _scan_state;\n-  delete _sampling_task;\n-}\n-\n@@ -540,0 +523,13 @@\n+  \/\/ Helper to account virtual time.\n+  class VTimer {\n+    double _start;\n+  public:\n+    VTimer() : _start(os::elapsedVTime()) { }\n+    double duration() { return os::elapsedVTime() - _start; }\n+  };\n+\n+  double _vtime_accum;  \/\/ Accumulated virtual time.\n+  void update_vtime_accum(double duration) {\n+    _vtime_accum += duration;\n+  }\n+\n@@ -554,0 +550,1 @@\n+    VTimer vtime;\n@@ -565,0 +562,1 @@\n+    update_vtime_accum(vtime.duration());\n@@ -599,0 +597,8 @@\n+\n+  double vtime_accum() {\n+    \/\/ Only report vtime if supported by the os.\n+    if (!os::supports_vtime()) {\n+      return 0.0;\n+    }\n+    return _vtime_accum;\n+  }\n@@ -601,0 +607,17 @@\n+G1RemSet::G1RemSet(G1CollectedHeap* g1h,\n+                   G1CardTable* ct,\n+                   G1HotCardCache* hot_card_cache) :\n+  _scan_state(new G1RemSetScanState()),\n+  _prev_period_summary(false),\n+  _g1h(g1h),\n+  _ct(ct),\n+  _g1p(_g1h->policy()),\n+  _hot_card_cache(hot_card_cache),\n+  _sampling_task(NULL) {\n+}\n+\n+G1RemSet::~G1RemSet() {\n+  delete _scan_state;\n+  delete _sampling_task;\n+}\n+\n@@ -607,0 +630,6 @@\n+double G1RemSet::sampling_task_vtime() {\n+  assert(_sampling_task != NULL, \"Must have been initialized\");\n+  return _sampling_task->vtime_accum();\n+}\n+\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":46,"deletions":17,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+class G1RemSetSamplingTask;\n@@ -52,1 +53,0 @@\n-class G1ServiceTask;\n@@ -70,1 +70,1 @@\n-  G1ServiceTask*         _sampling_task;\n+  G1RemSetSamplingTask*  _sampling_task;\n@@ -90,0 +90,3 @@\n+  \/\/ Accumulated vtime used by the sampling task.\n+  double sampling_task_vtime();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/g1\/g1ServiceThread.hpp\"\n@@ -56,1 +55,1 @@\n-  set_service_thread_vtime(g1h->service_thread()->vtime_accum());\n+  set_sampling_task_vtime(g1h->rem_set()->sampling_task_vtime());\n@@ -75,1 +74,1 @@\n-  _service_thread_vtime(0.0f) {\n+  _sampling_task_vtime(0.0f) {\n@@ -96,1 +95,1 @@\n-  set_service_thread_vtime(other->service_thread_vtime());\n+  set_sampling_task_vtime(other->sampling_task_vtime());\n@@ -109,1 +108,1 @@\n-  _service_thread_vtime = other->service_thread_vtime() - _service_thread_vtime;\n+  _sampling_task_vtime = other->sampling_task_vtime() - _sampling_task_vtime;\n@@ -330,2 +329,2 @@\n-  out->print_cr(\"  Service thread time (s)\");\n-  out->print_cr(\"         %5.2f\", service_thread_vtime());\n+  out->print_cr(\"  Sampling task time (ms)\");\n+  out->print_cr(\"         %5.3f\", sampling_task_vtime() * MILLIUNITS);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  double _service_thread_vtime;\n+  double _sampling_task_vtime;\n@@ -44,2 +44,2 @@\n-  void set_service_thread_vtime(double value) {\n-    _service_thread_vtime = value;\n+  void set_sampling_task_vtime(double value) {\n+    _sampling_task_vtime = value;\n@@ -65,2 +65,2 @@\n-  double service_thread_vtime() const {\n-    return _service_thread_vtime;\n+  double sampling_task_vtime() const {\n+    return _sampling_task_vtime;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -105,2 +105,1 @@\n-    _periodic_gc_task(new G1PeriodicGCTask(\"Periodic GC Task\")),\n-    _vtime_accum(0) {\n+    _periodic_gc_task(new G1PeriodicGCTask(\"Periodic GC Task\")) {\n@@ -218,2 +217,0 @@\n-  double vtime_start = os::elapsedVTime();\n-\n@@ -229,5 +226,0 @@\n-    if (os::supports_vtime()) {\n-      _vtime_accum = (os::elapsedVTime() - vtime_start);\n-    } else {\n-      _vtime_accum = 0.0;\n-    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -110,2 +110,0 @@\n-  double _vtime_accum;  \/\/ Accumulated virtual time.\n-\n@@ -136,1 +134,0 @@\n-  double vtime_accum() { return _vtime_accum; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ServiceThread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}