{"files":[{"patch":"@@ -213,1 +213,1 @@\n-  _oop_storage = OopStorageSet::create_weak(\"StringTable Weak\");\n+  _oop_storage = OopStorageSet::create_weak(\"StringTable Weak\", mtSymbol);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,3 @@\n-OopStorage::ActiveArray* OopStorage::ActiveArray::create(size_t size, AllocFailType alloc_fail) {\n+OopStorage::ActiveArray* OopStorage::ActiveArray::create(size_t size,\n+                                                         MEMFLAGS memflags,\n+                                                         AllocFailType alloc_fail) {\n@@ -126,1 +128,1 @@\n-  void* mem = NEW_C_HEAP_ARRAY3(char, size_in_bytes, mtGC, CURRENT_PC, alloc_fail);\n+  void* mem = NEW_C_HEAP_ARRAY3(char, size_in_bytes, memflags, CURRENT_PC, alloc_fail);\n@@ -324,1 +326,1 @@\n-  void* memory = NEW_C_HEAP_ARRAY_RETURN_NULL(char, size_needed, mtGC);\n+  void* memory = NEW_C_HEAP_ARRAY_RETURN_NULL(char, size_needed, owner->memflags());\n@@ -502,1 +504,3 @@\n-  ActiveArray* new_array = ActiveArray::create(new_size, AllocFailStrategy::RETURN_NULL);\n+  ActiveArray* new_array = ActiveArray::create(new_size,\n+                                               memflags(),\n+                                               AllocFailStrategy::RETURN_NULL);\n@@ -742,1 +746,10 @@\n-OopStorage::OopStorage(const char* name) :\n+void* OopStorage::operator new(size_t size, MEMFLAGS memflags) {\n+  assert(size >= sizeof(OopStorage), \"precondition\");\n+  return NEW_C_HEAP_ARRAY(char, size, memflags);\n+}\n+\n+void OopStorage::operator delete(void* obj, MEMFLAGS \/* memflags *\/) {\n+  FREE_C_HEAP_ARRAY(char, obj);\n+}\n+\n+OopStorage::OopStorage(const char* name, MEMFLAGS memflags) :\n@@ -744,1 +757,1 @@\n-  _active_array(ActiveArray::create(initial_active_array_size)),\n+  _active_array(ActiveArray::create(initial_active_array_size, memflags)),\n@@ -752,0 +765,1 @@\n+  _memflags(memflags),\n@@ -974,0 +988,2 @@\n+MEMFLAGS OopStorage::memflags() const { return _memflags; }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-class OopStorage : public CHeapObj<mtGC> {\n+class OopStorage {\n@@ -77,1 +77,1 @@\n-  explicit OopStorage(const char* name);\n+  explicit OopStorage(const char* name, MEMFLAGS memflags);\n@@ -80,0 +80,3 @@\n+  void* operator new(size_t size, MEMFLAGS memflags);\n+  void operator delete(void* obj, MEMFLAGS memflags);\n+\n@@ -92,0 +95,3 @@\n+  \/\/ The memory type for allocations.\n+  MEMFLAGS memflags() const;\n+\n@@ -254,0 +260,4 @@\n+  \/\/ The memory type for allocations.\n+  MEMFLAGS _memflags;\n+\n+  \/\/ Flag indicating this storage object is a candidate for empty block deletion.\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -60,1 +61,3 @@\n-  static ActiveArray* create(size_t size, AllocFailType alloc_fail = AllocFailStrategy::EXIT_OOM);\n+  static ActiveArray* create(size_t size,\n+                             MEMFLAGS memflags = mtGC,\n+                             AllocFailType alloc_fail = AllocFailStrategy::EXIT_OOM);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-OopStorage* OopStorageSet::create_strong(const char* name) {\n+OopStorage* OopStorageSet::create_strong(const char* name, MEMFLAGS memflags) {\n@@ -37,1 +37,1 @@\n-  OopStorage* storage = new OopStorage(name);\n+  OopStorage* storage = new (memflags) OopStorage(name, memflags);\n@@ -42,1 +42,1 @@\n-OopStorage* OopStorageSet::create_weak(const char* name) {\n+OopStorage* OopStorageSet::create_weak(const char* name, MEMFLAGS memflags) {\n@@ -45,1 +45,1 @@\n-  OopStorage* storage = new OopStorage(name);\n+  OopStorage* storage = new (memflags) OopStorage(name, memflags);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,2 +82,2 @@\n-  static OopStorage* create_strong(const char* name);\n-  static OopStorage* create_weak(const char* name);\n+  static OopStorage* create_strong(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create_weak(const char* name, MEMFLAGS memflags);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  _oop_storage = OopStorageSet::create_weak(\"Weak JFR Old Object Samples\");\n+  _oop_storage = OopStorageSet::create_weak(\"Weak JFR Old Object Samples\", mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/sampling\/objectSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -871,2 +871,2 @@\n-  Universe::_vm_global = OopStorageSet::create_strong(\"VM Global\");\n-  Universe::_vm_weak = OopStorageSet::create_weak(\"VM Weak\");\n+  Universe::_vm_global = OopStorageSet::create_strong(\"VM Global\", mtInternal);\n+  Universe::_vm_weak = OopStorageSet::create_weak(\"VM Weak\", mtInternal);\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -702,2 +702,2 @@\n-  _jvmti_oop_storage = OopStorageSet::create_strong(\"JVMTI OopStorage\");\n-  _weak_tag_storage  = OopStorageSet::create_weak(\"JVMTI Tag Weak OopStorage\");\n+  _jvmti_oop_storage = OopStorageSet::create_strong(\"JVMTI OopStorage\", mtServiceability);\n+  _weak_tag_storage  = OopStorageSet::create_weak(\"JVMTI Tag Weak OopStorage\", mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-  _oop_storage = OopStorageSet::create_weak(\"ResolvedMethodTable Weak\");\n+  _oop_storage = OopStorageSet::create_weak(\"ResolvedMethodTable Weak\", mtClass);\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-  JNIHandles::_global_handles = OopStorageSet::create_strong(\"JNI Global\");\n-  JNIHandles::_weak_global_handles = OopStorageSet::create_weak(\"JNI Weak\");\n+  JNIHandles::_global_handles = OopStorageSet::create_strong(\"JNI Global\", mtInternal);\n+  JNIHandles::_weak_global_handles = OopStorageSet::create_weak(\"JNI Weak\", mtInternal);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2190,1 +2190,1 @@\n-  _oop_storage = OopStorageSet::create_weak(\"ObjectSynchronizer Weak\");\n+  _oop_storage = OopStorageSet::create_weak(\"ObjectSynchronizer Weak\", mtSynchronizer);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3135,1 +3135,1 @@\n-  _thread_oop_storage = OopStorageSet::create_strong(\"Thread OopStorage\");\n+  _thread_oop_storage = OopStorageSet::create_strong(\"Thread OopStorage\", mtThread);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,2 @@\n-  _thread_service_storage = OopStorageSet::create_strong(\"ThreadService OopStorage\");\n+  _thread_service_storage = OopStorageSet::create_strong(\"ThreadService OopStorage\",\n+                                                         mtServiceability);\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,1 +193,1 @@\n-  _storage(\"Test Storage\")\n+  _storage(\"Test Storage\", mtGC)\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  _storage(\"Test Storage\")\n+  _storage(\"Test Storage\", mtGC)\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}