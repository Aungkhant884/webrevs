{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -49,0 +52,3 @@\n+@Warmup(iterations = 10, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/CallSiteSetTarget.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -31,0 +33,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -46,0 +49,3 @@\n+@Warmup(iterations = 10, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/CallSiteSetTargetSelf.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -31,0 +33,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -46,0 +49,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/CallSiteStable.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -45,25 +51,0 @@\n-    \/*\n-        Implementation notes:\n-            - this test assesses acquiring lookup object only\n-            - baseline includes returning cached lookup object, i.e. measures infra overheads\n-            - additional baseline includes allocating object to understand Lookup instantiation costs\n-            - cached instance is static, because that provides (unbeatably) best performance\n-     *\/\n-\n-    public static MethodHandles.Lookup cached;\n-\n-    @Setup\n-    public void setup() {\n-        cached = MethodHandles.lookup();\n-    }\n-\n-    @Benchmark\n-    public MethodHandles.Lookup baselineCached() throws Exception {\n-        return cached;\n-    }\n-\n-    @Benchmark\n-    public MyLookup baselineNew() throws Exception {\n-        return new MyLookup(Object.class, 1);\n-    }\n-\n@@ -79,15 +60,0 @@\n-\n-    \/**\n-     * Dummy Lookup-looking class.\n-     * Lookup is final, and all constructors are private.\n-     * This class mocks the hotpath.\n-     *\/\n-    private static class MyLookup {\n-        private final Class<?> klass;\n-        private final int mode;\n-\n-        public MyLookup(Class<?> klass, int i) {\n-            this.klass = klass;\n-            this.mode = i;\n-        }\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LookupAcquire.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LookupDefaultFind.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/LookupPublicFind.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -64,1 +70,1 @@\n-        cachedArgs = new int[]{1, 2, 3, 4, 5};\n+        cachedArgs = new int[]{ 1, 2, 3, 4, 5 };\n@@ -79,1 +85,1 @@\n-        doWork(new int[] { 1, 2, 3, 4, 5});\n+        doWork(1, 2, 3, 4, 5);\n@@ -97,1 +103,1 @@\n-    public void doWork(int[] args) {\n+    public void doWork(int... args) {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleAsCollector.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -48,5 +54,2 @@\n-    *   - simple array-parameter method is being called\n-    *   - baselineRaw calls method directly with dynamically instantiating the array\n-    *   - baselineCached calls method directly with pre-cached array\n-    *   - additional testCreate() test harnesses the collector acquisition performance\n-    *   - testCollector() can be faster than both baselines: it can wrapping array at all\n+    *   - simple five parameter method is being called using MH.asSpreader\n+    *   - baselineMH invokes method directly without going through spreader\n@@ -72,5 +75,0 @@\n-    @Benchmark\n-    public void baselineRaw() throws Throwable {\n-        doWork(1, 2, 3, 4, 5);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleAsSpreader.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -48,3 +54,1 @@\n-    *   - simple array-parameter method is being called\n-    *   - baselineRaw calls method directly with dynamically instantiating the array\n-    *   - baselineCached calls method directly with pre-cached array\n+    *   - simple array-parameter method is being called using MH.asVarargsCollector\n@@ -52,1 +56,1 @@\n-    *   - testCollector() can be faster than both baselines: it can wrapping array at all\n+    *   - testCollector() can be faster than both baselines: it can elide wrapping array at all\n@@ -77,10 +81,0 @@\n-    @Benchmark\n-    public void baselineRaw() throws Throwable {\n-        doWork(1, 2, 3, 4, 5);\n-    }\n-\n-    @Benchmark\n-    public void baselineRawCached() throws Throwable {\n-        doWork(cachedArgs);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleAsVarargsCollector.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -50,2 +56,0 @@\n-     *   - baselines include calling method directly, and doing the same via reflection\n-     *   - baselineRaw is known to be super-fast with good inlining\n@@ -69,5 +73,0 @@\n-    @Benchmark\n-    public int baselineRaw() throws Throwable {\n-        return doWork();\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleBasicInvoke.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -63,5 +69,0 @@\n-    @Benchmark\n-    public Object baselineRaw() {\n-        return mhOrig;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleBindToBinding.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleBindToCurry.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertBoxing.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertCast.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertReturnPrimitive.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertReturnReference.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertReturnVoid.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertUnboxing.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleConvertWidening.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleInvokeWithArgs.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleProxiesAsIFInstance.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -47,0 +50,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -62,5 +68,0 @@\n-    @Benchmark\n-    public Object baselineReturn() {\n-        return instance;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandleProxiesSuppl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesArrayElementGetter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -45,0 +48,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesArrayElementSetter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesCatchException.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -46,1 +52,0 @@\n-    private Integer cachedInt;\n@@ -50,1 +55,0 @@\n-        cachedInt = 42;\n@@ -54,5 +58,0 @@\n-    @Benchmark\n-    public Integer baselineReturn() {\n-        return cachedInt;\n-    }\n-\n@@ -64,5 +63,0 @@\n-    @Benchmark\n-    public MethodHandle interCreateCached() throws Throwable {\n-        return MethodHandles.constant(Integer.class, cachedInt);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesConstant.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesDropArguments.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesExactInvoker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesFilterArgs.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesFilterReturn.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesFoldArguments.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesGuardWithTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -54,10 +60,0 @@\n-    @Benchmark\n-    public Object baselineRaw() throws Throwable {\n-        return new Object();\n-    }\n-\n-    @Benchmark\n-    public Object baselineRawCached() throws Throwable {\n-        return cachedArg;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesIdentity.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesInsertArguments.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesInvoker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesPermuteArguments.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -44,0 +47,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesSpreadInvoker.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -43,0 +46,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -64,10 +70,1 @@\n-    public int baselineRaw() {\n-        try {\n-            throw new MyException();\n-        } catch (MyException my) {\n-            return my.getFlag();\n-        }\n-    }\n-\n-    @Benchmark\n-    public int baselineRawCached() {\n+    public int baselineThrow() {\n@@ -83,10 +80,0 @@\n-        try {\n-            mh.invoke(new MyException());\n-            throw new IllegalStateException(\"Should throw exception\");\n-        } catch (MyException my) {\n-            return my.getFlag();\n-        }\n-    }\n-\n-    @Benchmark\n-    public int testInvokeCached() throws Throwable {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesThrowException.java","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n-@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n@@ -60,5 +60,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return pTypes;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeAcquire.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -57,5 +63,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeAppendParams.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -51,5 +57,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeChangeParam.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -51,5 +57,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeChangeReturn.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -51,5 +57,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeDropParams.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -51,5 +57,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeGenerify.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n@@ -51,5 +57,0 @@\n-    @Benchmark\n-    public MethodType baselineRaw() {\n-        return mt;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodTypeInsertParams.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -47,0 +50,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/SwitchPointAdhoc.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -32,0 +34,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -42,0 +45,3 @@\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/SwitchPointGuard.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}