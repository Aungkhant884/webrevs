{"files":[{"patch":"@@ -449,0 +449,2 @@\n+            } catch (SocketException se) {\n+                handleException(se);\n@@ -1411,0 +1413,3 @@\n+            } catch (SocketException se) {\n+                \/\/ don't change exception in case of SocketException\n+                throw se;\n@@ -1474,0 +1479,3 @@\n+            } catch (SocketException se) {\n+                \/\/ don't change exception in case of SocketException\n+                throw se;\n@@ -1681,0 +1689,20 @@\n+        if (cause instanceof SocketException) {\n+            if (!conContext.isInboundClosed()) {\n+                try {\n+                    decode(null);\n+                } catch (SSLException ssle) {\n+                    handleException(ssle);\n+                } catch (Exception e) {\n+                    cause.addSuppressed(e);\n+                }\n+            }\n+\n+            try {\n+                conContext.fatal(alert, cause);\n+            } catch (Exception e) {\n+                \/\/ Just delivering the fatal alert, re-throw the socket exception instead.\n+            }\n+\n+            throw (SocketException)cause;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLSocketImpl.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.SocketException;\n@@ -143,0 +144,3 @@\n+        } catch (SocketException se) {\n+            \/\/ don't change exception in case of SocketException\n+            throw se;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLTransport.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.net.SocketException;\n@@ -176,2 +177,2 @@\n-                    } catch (SSLException he) {\n-                        System.out.println(\"SERVER: caught expected \" + he);\n+                    } catch (SSLException | SocketException se) {\n+                        System.out.println(\"SERVER: caught expected \" + se);\n","filename":"test\/jdk\/java\/net\/httpclient\/InvalidSSLContextTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,293 @@\n+\/*\n+ * Copyright (c) 2021, Amazon and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\/\/\n+\n+\/*\n+ * @test\n+ * @summary The test sets the Trust Manager in the client as empty, This\n+ * causes a quick failure in the client. The server would still be processing\n+ * the request in the producers causing a SocketException from the producer.\n+ * The exception handler should check inputStream to identify the root cause\n+ * of the issue instead of bubbling up the SocketException.\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm ShouldThrowSSLExceptionWhenPeerClosesSocket\n+ *\/\n+\n+import java.net.*;\n+import java.io.*;\n+import javax.net.ssl.*;\n+import java.security.*;\n+import java.security.cert.*;\n+import java.security.spec.*;\n+import java.security.interfaces.*;\n+import java.util.Base64;\n+\n+public class ShouldThrowSSLExceptionWhenPeerClosesSocket extends SSLSocketTemplate {\n+\n+    \/*\n+     * Certificates and key used in the test.\n+     *\/\n+\n+    \/\/ It's a trust anchor signed with MD2 hash function.\n+    static String trustedCertStr =\n+        \"-----BEGIN CERTIFICATE-----\\n\" +\n+        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQIFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+        \"MTExMTE4MTExNDA0WhcNMzIxMDI4MTExNDA0WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n+        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAPGyB9tugUGgxtdeqe0qJEwf9x1Gy4BOi1yR\\n\" +\n+        \"wzDZY4H5LquvIfQ2V3J9X1MQENVsFvkvp65ZcFcy+ObOucXUUPFcd\/iw2DVb5QXA\\n\" +\n+        \"ffyeVqWD56GPi8Qe37wrJO3L6fBhN9oxp\/BbdRLgjU81zx8qLEyPODhPMxV4OkcA\\n\" +\n+        \"SDwZTSxxAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLOAtr\/YrYj9H04EDLA0fd14jisF\\n\" +\n+        \"MGMGA1UdIwRcMFqAFLOAtr\/YrYj9H04EDLA0fd14jisFoT+kPTA7MQswCQYDVQQG\\n\" +\n+        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEC\\n\" +\n+        \"BQADgYEAr8ExpXu\/FTIRiMzPm0ubqwME4lniilwQUiEOD\/4DbksNjEIcUyS2hIk1\\n\" +\n+        \"qsmjJz3SHBnwhxl9dhJVwk2tZLkPGW86Zn0TPVRsttK4inTgCC9GFGeqQBdrU\/uf\\n\" +\n+        \"lipBzXWljrfbg4N\/kK8m2LabtKUMMnGysM8rN0Fx2PYm5xxGvtM=\\n\" +\n+        \"-----END CERTIFICATE-----\";\n+\n+    \/\/ The certificate issued by above trust anchor, signed with MD5\n+    static String targetCertStr =\n+        \"-----BEGIN CERTIFICATE-----\\n\" +\n+        \"MIICeDCCAeGgAwIBAgIBAjANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+        \"MTExMTE4MTExNDA2WhcNMzEwODA1MTExNDA2WjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n+        \"BAMTCWxvY2FsaG9zdDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAwDnm96mw\\n\" +\n+        \"fXCH4bgXk1US0VcJsQVxUtGMyncAveMuzBzNzOmKZPeqyYX1Fuh4q+cuza03WTJd\\n\" +\n+        \"G9nOkNr364e3Rn1aaHjCMcBmFflObnGnhhufNmIGYogJ9dJPmhUVPEVAXrMG+Ces\\n\" +\n+        \"NKy2E8woGnLMrqu6yiuTClbLBPK8fWzTXrECAwEAAaN4MHYwCwYDVR0PBAQDAgPo\\n\" +\n+        \"MB0GA1UdDgQWBBSdRrpocLPJXyGfDmMWJrcEf29WGDAfBgNVHSMEGDAWgBSzgLa\/\\n\" +\n+        \"2K2I\/R9OBAywNH3deI4rBTAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIG\\n\" +\n+        \"CCsGAQUFBwMDMA0GCSqGSIb3DQEBBAUAA4GBAKJ71ZiCUykkJrCLYUxlFlhvUcr9\\n\" +\n+        \"sTcOc67QdroW5f412NI15SXWDiley\/JOasIiuIFPjaJBjOKoHOvTjG\/snVu9wEgq\\n\" +\n+        \"YNR8dPsO+NM8r79C6jO+Jx5fYAC7os2XxS75h3NX0ElJcbwIXGBJ6xRrsFh\/BGYH\\n\" +\n+        \"yvudOlX4BkVR0l1K\\n\" +\n+        \"-----END CERTIFICATE-----\";\n+\n+    \/\/ Private key in the format of PKCS#8.\n+    static String targetPrivateKey =\n+        \"MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMA55vepsH1wh+G4\\n\" +\n+        \"F5NVEtFXCbEFcVLRjMp3AL3jLswczczpimT3qsmF9RboeKvnLs2tN1kyXRvZzpDa\\n\" +\n+        \"9+uHt0Z9Wmh4wjHAZhX5Tm5xp4YbnzZiBmKICfXST5oVFTxFQF6zBvgnrDSsthPM\\n\" +\n+        \"KBpyzK6rusorkwpWywTyvH1s016xAgMBAAECgYEAn9bF3oRkdDoBU0i\/mcww5I+K\\n\" +\n+        \"SH9tFt+WQbiojjz9ac49trkvUfu7MO1Jui2+QbrvaSkyj+HYGFOJd1wMsPXeB7ck\\n\" +\n+        \"5mOIYV4uZK8jfNMSQ8v0tFEeIPp5lKdw1XnrQfSe+abo2eL5Lwso437Y4s3w37+H\\n\" +\n+        \"aY3d76hR5qly+Ys+Ww0CQQDjeOoX89d\/xhRqGXKjCx8ImE\/dPmsI8O27cwtKrDYJ\\n\" +\n+        \"6t0v\/xryVIdvOYcRBvKnqEogOH7T1kI+LnWKUTJ2ehJ7AkEA2FVloPVqCehXcc7e\\n\" +\n+        \"z3TDpU9w1B0JXklcV5HddYsRqp9RukN\/VK4szKE7F1yoarIUtfE9Lr9082Jwyp3M\\n\" +\n+        \"L11xwwJBAKsZ+Hur3x0tUY29No2Nf\/pnFyvEF57SGwA0uPmiL8Ol9lpz+UDudDEl\\n\" +\n+        \"hIM6Rqv12kwCMuQE9i7vo1o3WU3k5KECQEqhg1L49yD935TqiiFFpe0Ur9btQXse\\n\" +\n+        \"kdXAA4d2d5zGI7q\/aGD9SYU6phkUJSHR16VA2RuUfzMrpb+wmm1IrmMCQFtLoKRT\\n\" +\n+        \"A5kokFb+E3Gplu29tJvCUpfwgBFRS+wmkvtiaU\/tiyDcVgDO+An5DwedxxdVzqiE\\n\" +\n+        \"njWHoKY3axDQ8OU=\\n\";\n+\n+    static char passphrase[] = \"passphrase\".toCharArray();\n+\n+    @Override\n+    protected SSLContext createServerSSLContext() throws Exception {\n+        return generateSSLContext(true);\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket socket) {\n+        socket.setNeedClientAuth(true);\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        InputStream sslIS = socket.getInputStream();\n+        OutputStream sslOS = socket.getOutputStream();\n+\n+        try {\n+            sslIS.read();\n+            sslOS.write('A');\n+            sslOS.flush();\n+        } catch (SSLHandshakeException se) {\n+            \/\/ Ignore exception as this is expected.\n+        }\n+    }\n+\n+    @Override\n+    protected SSLContext createClientSSLContext() throws Exception {\n+        return generateSSLContext(false);\n+    }\n+\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        \/\/ enable the specified TLS protocol\n+        socket.setEnabledProtocols(new String[] { tlsProtocol });\n+\n+        InputStream sslIS = socket.getInputStream();\n+        OutputStream sslOS = socket.getOutputStream();\n+\n+        try {\n+            sslOS.write('B');\n+            sslOS.flush();\n+            sslIS.read();\n+        } catch (SSLHandshakeException e) {\n+            \/\/ Ignore exception as this is expected.\n+        }\n+    }\n+\n+    \/*\n+     * =============================================================\n+     * The remainder is just support stuff\n+     *\/\n+    private static String tmAlgorithm = \"SunX509\";        \/\/ trust manager\n+    private static String tlsProtocol = \"TLSv1.2\";        \/\/ trust manager\n+\n+    private static SSLContext generateSSLContext(boolean isServer) throws Exception {\n+\n+        \/\/ generate certificate from cert string\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        \/\/ create a key store\n+        KeyStore ks = KeyStore.getInstance(\"JKS\");\n+        ks.load(null, null);\n+\n+        \/\/ import the trused cert\n+        X509Certificate trusedCert = null;\n+        ByteArrayInputStream is =\n+                new ByteArrayInputStream(trustedCertStr.getBytes());\n+        trusedCert = (X509Certificate)cf.generateCertificate(is);\n+        is.close();\n+\n+        ks.setCertificateEntry(\"Trusted RSA Signer\", trusedCert);\n+\n+        \/\/ generate the private key.\n+        PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n+                            Base64.getMimeDecoder().decode(targetPrivateKey));\n+        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n+        RSAPrivateKey priKey =\n+                (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n+\n+        \/\/ generate certificate chain\n+        is = new ByteArrayInputStream(targetCertStr.getBytes());\n+        X509Certificate keyCert = (X509Certificate)cf.generateCertificate(is);\n+        is.close();\n+\n+        X509Certificate[] chain = new X509Certificate[2];\n+        chain[0] = keyCert;\n+        chain[1] = trusedCert;\n+\n+        \/\/ import the key entry and the chain\n+        ks.setKeyEntry(\"TheKey\", priKey, passphrase, chain);\n+\n+        \/\/ create SSL context\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n+        tmf.init(ks);\n+\n+        \/\/ create the customized KM and TM\n+        NoneExtendedX509TM myTM =\n+            new NoneExtendedX509TM(tmf.getTrustManagers()[0]);\n+        NoneExtendedX509KM myKM =\n+            new NoneExtendedX509KM(\"TheKey\", chain, priKey);\n+\n+        SSLContext ctx = SSLContext.getInstance(tlsProtocol);\n+\n+        if (!isServer) {\n+            myTM = null;\n+        }\n+\n+        ctx.init(new KeyManager[]{myKM}, new TrustManager[]{myTM}, null);\n+        ks = null;\n+\n+        return ctx;\n+    }\n+\n+    static class NoneExtendedX509TM implements X509TrustManager {\n+        X509TrustManager tm;\n+\n+        NoneExtendedX509TM(TrustManager tm) {\n+            this.tm = (X509TrustManager)tm;\n+        }\n+\n+        public void checkClientTrusted(X509Certificate chain[], String authType)\n+                throws CertificateException {\n+            tm.checkClientTrusted(chain, authType);\n+        }\n+\n+        public void checkServerTrusted(X509Certificate chain[], String authType)\n+                throws CertificateException {\n+            tm.checkServerTrusted(chain, authType);\n+        }\n+\n+        public X509Certificate[] getAcceptedIssuers() {\n+            return tm.getAcceptedIssuers();\n+        }\n+    }\n+\n+    static class NoneExtendedX509KM implements X509KeyManager {\n+        private String keyAlias;\n+        private X509Certificate[] chain;\n+        private PrivateKey privateKey;\n+\n+        NoneExtendedX509KM(String keyAlias, X509Certificate[] chain,\n+                PrivateKey privateKey) {\n+            this.keyAlias = keyAlias;\n+            this.chain = chain;\n+            this.privateKey = privateKey;\n+        }\n+\n+        public String[] getClientAliases(String keyType, Principal[] issuers) {\n+            return new String[] {keyAlias};\n+        }\n+\n+        public String chooseClientAlias(String[] keyType, Principal[] issuers,\n+                Socket socket) {\n+            return keyAlias;\n+        }\n+\n+        public String[] getServerAliases(String keyType, Principal[] issuers) {\n+            return new String[] {keyAlias};\n+        }\n+\n+        public String chooseServerAlias(String keyType, Principal[] issuers,\n+                Socket socket) {\n+            return keyAlias;\n+        }\n+\n+        public X509Certificate[] getCertificateChain(String alias) {\n+            return chain;\n+        }\n+\n+        public PrivateKey getPrivateKey(String alias) {\n+            return privateKey;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/*\n+         * Start the tests.\n+         *\/\n+        new ShouldThrowSSLExceptionWhenPeerClosesSocket().run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/ShouldThrowSSLExceptionWhenPeerClosesSocket.java","additions":293,"deletions":0,"binary":false,"changes":293,"status":"added"},{"patch":"@@ -134,1 +134,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SSLHandshakeException se) {\n@@ -136,1 +136,1 @@\n-                throw ssle;\n+                throw se;\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLContextImpl\/TrustTrustedCert.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2017, 2020, Amazon and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8214339\n+ * @summary When a SocketException is thrown by the underlying layer, It\n+ *      should be thrown as is and not be transformed to an SSLException.\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm SSLSocketShouldThrowSocketException\n+ *\/\n+\n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n+import java.security.*;\n+import javax.net.ssl.*;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SSLSocketShouldThrowSocketException extends SSLSocketTemplate {\n+\n+    boolean handshake;\n+\n+    private final CountDownLatch clientTerminatedCondition = new CountDownLatch(1);\n+\n+    SSLSocketShouldThrowSocketException(boolean handshake) {\n+        this.handshake = handshake;\n+    }\n+\n+    @Override\n+    protected boolean isCustomizedClientConnection() {\n+        return true;\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        clientTerminatedCondition.await(30L, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    protected void runClientApplication(int serverPort) throws Exception {\n+        Socket baseSocket = new Socket(\"localhost\", this.serverPort);\n+\n+        SSLSocketFactory sslsf =\n+                (SSLSocketFactory) SSLSocketFactory.getDefault();\n+        SSLSocket sslSocket = (SSLSocket)\n+                sslsf.createSocket(baseSocket, \"localhost\", serverPort, false);\n+\n+        if (this.handshake) {\n+            testHandshakeClose(baseSocket, sslSocket);\n+        } else {\n+            testDataClose(baseSocket, sslSocket);\n+        }\n+\n+        clientTerminatedCondition.countDown();\n+\n+    }\n+\n+    private void testHandshakeClose(Socket baseSocket, SSLSocket sslSocket) throws Exception {\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    Thread.sleep(10);\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+    }\n+\n+    private void testDataClose(Socket baseSocket, SSLSocket sslSocket) throws Exception{\n+\n+        CountDownLatch handshakeCondition = new CountDownLatch(1);\n+\n+        Thread aborter = new Thread() {\n+            @Override\n+            public void run() {\n+\n+                try {\n+                    handshakeCondition.await(10L, TimeUnit.SECONDS);\n+                    System.err.println(\"Closing the client socket : \" + System.nanoTime());\n+                    baseSocket.close();\n+                } catch (Exception ieo) {\n+                    ieo.printStackTrace();\n+                }\n+            }\n+        };\n+\n+        aborter.start();\n+\n+        try {\n+            \/\/ handshaking\n+            System.err.println(\"Client starting handshake: \" + System.nanoTime());\n+            sslSocket.startHandshake();\n+            handshakeCondition.countDown();\n+            System.err.println(\"Reading data from server\");\n+            BufferedReader is = new BufferedReader(\n+                    new InputStreamReader(sslSocket.getInputStream()));\n+            String data = is.readLine();\n+            throw new Exception(\"Start handshake did not throw an exception\");\n+        } catch (SocketException se) {\n+            System.err.println(\"Caught Expected SocketException\");\n+        }\n+\n+        aborter.join();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ SocketException should be throws during a handshake phase.\n+        (new SSLSocketShouldThrowSocketException(true)).run();\n+        \/\/ SocketException should be throw during the application data phase.\n+        (new SSLSocketShouldThrowSocketException(false)).run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketShouldThrowSocketException.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm SSLExceptionForIOIssue\n+ * @run main\/othervm SocketExceptionForSocketIssues\n@@ -41,1 +41,1 @@\n-public class SSLExceptionForIOIssue implements SSLContextTemplate {\n+public class SocketExceptionForSocketIssues implements SSLContextTemplate {\n@@ -45,1 +45,1 @@\n-        new SSLExceptionForIOIssue().test();\n+        new SocketExceptionForSocketIssues().test();\n@@ -82,1 +82,1 @@\n-        } catch (SSLException ssle) {\n+        } catch (SocketException se) {\n@@ -84,1 +84,1 @@\n-            System.err.println(\"server exception: \" + ssle);\n+            System.err.println(\"server exception: \" + se);\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SocketExceptionForSocketIssues.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLExceptionForIOIssue.java","status":"renamed"}]}