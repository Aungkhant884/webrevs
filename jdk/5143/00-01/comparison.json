{"files":[{"patch":"@@ -227,2 +227,1 @@\n-    \/\/ Set as Invalid by default.\n-    _region_attr_table.verify_is_invalid(hr->hrm_index());\n+    _region_attr_table.set_free(hr->hrm_index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-  inline void set_invalid(uint region_idx);\n-  inline bool is_invalid(uint region_idx) const;\n+  inline void set_free(uint region_idx);\n+  inline bool is_free(uint region_idx) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-void G1FullCollector::set_invalid(uint region_idx) {\n-  _region_attr_table.set_invalid(region_idx);\n+void G1FullCollector::set_free(uint region_idx) {\n+  _region_attr_table.set_free(region_idx);\n@@ -50,2 +50,2 @@\n-bool G1FullCollector::is_invalid(uint region_idx) const {\n-  return _region_attr_table.is_invalid(region_idx);\n+bool G1FullCollector::is_free(uint region_idx) const {\n+  return _region_attr_table.is_free(region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  if (!collector()->is_invalid(hr->hrm_index())) {\n+  if (!collector()->is_free(hr->hrm_index())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+  static const uint8_t Free = 3;             \/\/ Regions is free.\n@@ -47,2 +48,2 @@\n-  bool is_invalid(HeapWord* obj) const {\n-    return get_by_address(obj) == Invalid;\n+  bool is_free(HeapWord* obj) const {\n+    return get_by_address(obj) == Free;\n@@ -60,0 +61,1 @@\n+  void set_free(uint idx) { set_by_index(idx, Free); }\n@@ -62,1 +64,1 @@\n-    assert(!is_invalid(obj), \"not initialized yet\");\n+    assert(!is_free(obj), \"Should not have objects in free regions.\");\n@@ -67,1 +69,1 @@\n-    assert(!is_invalid(obj), \"not initialized yet\");\n+    assert(!is_free(obj), \"Should not have objects in free regions.\");\n@@ -75,2 +77,2 @@\n-  bool is_invalid(uint idx) const {\n-    return get_by_index(idx) == Invalid;\n+  bool is_free(uint idx) const {\n+    return get_by_index(idx) == Free;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  _collector->set_invalid(hr->hrm_index());\n+  _collector->set_free(hr->hrm_index());\n@@ -186,1 +186,1 @@\n-  if (!_collector->is_invalid(hr->hrm_index())) {\n+  if (!_collector->is_free(hr->hrm_index())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}