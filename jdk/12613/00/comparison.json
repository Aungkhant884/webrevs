{"files":[{"patch":"@@ -3539,1 +3539,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3547,7 +3547,0 @@\n-    @ForceInline\n-    private static byte[] copyOf(byte[] original) {\n-        byte[] copy = new byte[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3573,1 +3566,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3581,7 +3574,0 @@\n-    @ForceInline\n-    private static short[] copyOf(short[] original) {\n-        short[] copy = new short[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3607,1 +3593,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3615,6 +3601,0 @@\n-    @ForceInline\n-    private static int[] copyOf(int[] original) {\n-        int[] copy = new int[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n@@ -3641,1 +3621,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3649,7 +3629,0 @@\n-    @ForceInline\n-    private static long[] copyOf(long[] original) {\n-        long[] copy = new long[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3675,1 +3648,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3683,7 +3656,0 @@\n-    @ForceInline\n-    private static char[] copyOf(char[] original) {\n-        char[] copy = new char[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3709,1 +3675,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3717,7 +3683,0 @@\n-    @ForceInline\n-    private static float[] copyOf(float[] original) {\n-        float[] copy = new float[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3743,1 +3702,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3751,7 +3710,0 @@\n-    @ForceInline\n-    private static double[] copyOf(double[] original) {\n-        double[] copy = new double[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3777,1 +3729,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3785,7 +3737,0 @@\n-    @ForceInline\n-    private static boolean[] copyOf(boolean[] original) {\n-        boolean[] copy = new boolean[original.length];\n-        System.arraycopy(original, 0, copy, 0, original.length);\n-        return copy;\n-    }\n-\n@@ -3911,1 +3856,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3955,1 +3900,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -3999,1 +3944,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -4043,1 +3988,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -4087,1 +4032,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -4131,1 +4076,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -4175,1 +4120,1 @@\n-            return copyOf(original);\n+            return original.clone();\n@@ -4219,1 +4164,1 @@\n-            return copyOf(original);\n+            return original.clone();\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":16,"deletions":71,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+\/**\n+ * Compare array clone with equivalent System.arraycopy-based routines\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 2, time = 3, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 15, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(1)\n+@State(Scope.Benchmark)\n+public class ArrayClone {\n+\n+    @Param({\"0\", \"10\", \"100\", \"1000\"})\n+    int size;\n+\n+    private byte[] bytes;\n+    private int[] ints;\n+\n+    @Setup\n+    public void setup() {\n+        bytes = new byte[size];\n+        ints = new int[size];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        for (int i = 0; i < ints.length; i++) {\n+            ints[i] = ThreadLocalRandom.current().nextInt();\n+        }\n+    }\n+\n+    @Benchmark\n+    public byte[] byteClone() {\n+        return bytes.clone();\n+    }\n+\n+    @Benchmark\n+    public byte[] byteArraycopy() {\n+        byte[] copy = new byte[bytes.length];\n+        System.arraycopy(bytes, 0, copy, 0, bytes.length);\n+        return copy;\n+    }\n+\n+    @Benchmark\n+    public int[] intClone() {\n+        return ints.clone();\n+    }\n+\n+    @Benchmark\n+    public int[] intArraycopy() {\n+        int[] copy = new int[ints.length];\n+        System.arraycopy(ints, 0, copy, 0, ints.length);\n+        return copy;\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ArrayClone.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}