{"files":[{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+\n+\/*\n+ * @test\n+ * @bug 8289508\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ *\n+ * @run testng\/othervm xpath.XPathAncestorsTest\n+ * @summary Tests for XPath ancestor and ancestor-or-self axis specifiers.\n+ *\/\n+public class XPathAncestorsTest {\n+\n+    private static final String XML = \"\"\"\n+            <store>\n+               <book id=\"1\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"1\"\/>\n+                  <isbn>1234<\/isbn>\n+               <\/book>\n+               <book id=\"2\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"2\"\/>\n+                  <isbn>5678<\/isbn>\n+               <\/book>\n+            <\/store>\n+            \"\"\";\n+    private static final Document doc;\n+\n+    static {\n+        try {\n+            var builder =\n+                    DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            InputStream s = new ByteArrayInputStream(XML.getBytes());\n+            doc = builder.parse(s);\n+        } catch (Exception e) {\n+            System.out.println(\"Exception while initializing XML document\");\n+            throw new RuntimeException(e.getMessage());\n+        }\n+    }\n+\n+    \/*\n+     * DataProvider:provides XPath expression using ancestor\/ancestor-or-self and the expected node(s) from the expression\n+     *\/\n+    @DataProvider(name = \"ancestors_axes\")\n+    public Object[][] getXPathAncestors() {\n+        return new Object[][]{\n+                \/\/test ancestor\n+\n+                \/\/ abbreviated text\n+                {\"\/\/author\/ancestor::book\/ancestor::store\", \"\/store\"},\n+                {\"\/\/isbn\/ancestor::store\", \"\/store\"},\n+                {\"\/\/ancestor::book[1]\", \"\/\/book[1]\"},\n+\n+                \/\/ any node\n+                {\"\/\/book\/ancestor::*\", \"\/store\"},\n+                {\"\/\/author\/ancestor::*[ancestor::store]\/ancestor::store\", \"\/store\"},\n+                {\"\/\/author\/ancestor::node()[ancestor::store]\", \"\/\/book\"},\n+\n+                \/\/ dot reference\n+                {\"\/\/author\/ancestor::book\/..\", \"\/store\"},\n+                {\"\/\/author\/ancestor::*[ancestor::store]\/..\", \"\/store\"},\n+                {\"\/\/ancestor::book\/..\", \"\/store\"},\n+\n+                \/\/ attributes\n+                {\"\/\/author\/ancestor::*[@id]\/parent::*\", \"\/store\"},\n+                {\"\/\/author\/parent::*[@id]\/ancestor::*\", \"\/store\"},\n+                {\"\/\/author[@id='1']\/ancestor::book[1]\", \"\/\/book[1]\"},\n+                {\"\/\/author[@*]\/ancestor::book[1]\", \"\/\/book[1]\"},\n+\n+                \/\/test ancestor-or-self\n+\n+                \/\/ any node, indexing, id\n+                {\"\/store\/ancestor-or-self::*\", \"\/store\"},\n+                {\"\/\/book[*]\/ancestor-or-self::book[1]\", \"\/\/book[1]\"},\n+                {\"\/store\/book[@*]\/ancestor-or-self::book[1]\", \"\/\/book[1]\"},\n+                {\"\/\/book[@id='1']\/ancestor-or-self::book[1]\", \"\/\/book[1]\"},\n+                {\"\/\/author[@id='2']\/ancestor-or-self::book\", \"\/\/book[2]\"},\n+                {\"\/\/book[1]\/ancestor-or-self::store\", \"\/store\"},\n+\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath expressions that return null\n+     *\/\n+    @DataProvider(name = \"noResults\")\n+    public Object[][] getNoResults() {\n+        return new Object[][]{\n+                \/\/ test ancestor\n+\n+                \/\/ abbreviated text\n+                {\"\/store\/book\/ancestor::book\"},\n+                {\"\/\/author\/ancestor::store[2]\"},\n+                {\"\/\/author[3]\/ancestor::store\"},\n+\n+                \/\/ any nodes\n+                {\"\/store\/ancestor::*\"},\n+                {\"\/store\/book[3]\/ancestor::*\"},\n+                {\"\/\/book[*]\/..\/ancestor::*\"},\n+                {\"\/store\/book[@id='3']\/ancestor::*\"},\n+                {\"\/\/book\/ssn\/ancestor::*\"},\n+                {\"\/\/author\/ancestor::*[ancestor::isbn]\"},\n+                {\"\/store\/..\/ancestor::*\"},\n+                {\"\/\/ancestor::author\"},\n+\n+                \/\/ id\n+                {\"\/store\/book[@id='3']\/ancestor::*\"},\n+                {\"\/store[@*]\/ancestor::*\"},\n+                {\"\/book[@*]\/ancestor::*\/ancestor::*\"},\n+                {\"\/\/book[@category]\/ancestor::*\"},\n+\n+                \/\/test ancestor-or-self\n+\n+                \/\/ any nodes, id\n+                {\"\/store\/..\/ancestor-or-self::*\"},\n+                {\"\/\/book[3]\/ancestor-or-self::*\"},\n+                {\"\/\/author\/ancestor-or-self::title\"},\n+                {\"\/\/author[@id='2']\/ancestor-or-self::*[@id='1']\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies XPath ancestor and ancestor-or-self axis specifiers by comparing expression and expected result.\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test failed\n+     *\/\n+    @Test(dataProvider = \"ancestors_axes\")\n+    void testXPathAncestors(String exp, String parent) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node result = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node expected = xPath.evaluateExpression(parent, doc, Node.class);\n+        Assert.assertEquals(result, expected);\n+    }\n+\n+    \/**\n+     * Verifies no nodes returned from the XPath expression.\n+     *\n+     * @param exp XPath expression\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"noResults\")\n+    void testNoResults(String exp) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node result = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertEquals(result, null);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathAncestorsTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+\n+\/*\n+ * @test\n+ * @bug 8289508\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ *\n+ * @run testng\/othervm xpath.XPathPrecedingTest\n+ * @summary Tests for XPath preceding and preceding-sibling axis specifiers.\n+ *\/\n+public class XPathPrecedingTest {\n+\n+    private static final String XML = \"\"\"\n+            <store>\n+               <book id=\"1\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"1\"\/>\n+                  <isbn>1234<\/isbn>\n+               <\/book>\n+               <book id=\"2\" lang=\"en\">\n+                  <title\/>\n+                  <author id=\"2\"\/>\n+                  <isbn>5678<\/isbn>\n+               <\/book>\n+            <\/store>\n+            \"\"\";\n+    private static final Document doc;\n+\n+    static {\n+        try {\n+            var builder =\n+                    DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            InputStream s = new ByteArrayInputStream(XML.getBytes());\n+            doc = builder.parse(s);\n+        } catch (Exception e) {\n+            System.out.println(\"Exception while initializing XML document\");\n+            throw new RuntimeException(e.getMessage());\n+        }\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath expression using preceding\/preceding-sibling and the expected node(s) from the expression\n+     *\/\n+    @DataProvider(name = \"preceding_axes\")\n+    public Object[][] getXPathPreceding() {\n+        return new Object[][]{\n+                \/\/ test preceding\n+\n+                \/\/ any nodes\n+                {\"\/store\/book[1]\/author\/preceding::*\", \"\/\/book[1]\/title\"},\n+\n+                \/\/ abbreviated text\n+                {\"\/\/author\/preceding::title\", \"\/\/title\"},\n+                {\"\/\/isbn\/preceding::book\", \"\/\/book[1]\"},\n+                {\"\/\/book[2]\/preceding::book\", \"\/\/book[1]\"},\n+                {\"\/store\/book[preceding::book]\", \"\/\/book[2]\"},\n+                {\"\/store\/book[preceding::book]\/preceding::book\", \"\/\/book[1]\"},\n+\n+                \/\/ id\n+                {\"\/\/author[@id='2']\/..\/preceding::book\", \"\/\/book[1]\"},\n+                {\"\/\/author[@id='2']\/preceding::node()\/preceding::book\", \"\/\/book[1]\"},\n+                {\"\/\/author[@id='1']\/preceding::title\", \"\/\/book[1]\/title\"},\n+\n+                \/\/test preceding-sibling\n+\n+                \/\/ any node\n+                {\"\/store\/book[1]\/author\/preceding-sibling::*\", \"\/store\/book[1]\/title\"},\n+                {\"\/store\/book[2]\/preceding-sibling::*\", \"\/\/book[1]\"},\n+                {\"\/\/author\/preceding-sibling::*\", \"\/\/title\"},\n+\n+                \/\/ abbreviated text\n+                {\"\/store\/book[preceding::book]\/preceding-sibling::book\", \"\/\/book[1]\"},\n+\n+                \/\/ id\n+                {\"\/store\/book[1]\/isbn[preceding-sibling::author[@id='1']]\", \"\/store\/book[1]\/isbn\"},\n+\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath expressions that return null\n+     *\/\n+    @DataProvider(name = \"noResults\")\n+    public Object[][] getNoResults() {\n+        return new Object[][]{\n+                \/\/test preceding\n+\n+                \/\/ abbreviated text\n+                {\"\/store\/preceding::book\"},\n+                {\"\/store\/book[1]\/author\/preceding::author\"},\n+\n+                \/\/ any nodes\/id\n+                {\"\/store\/book[1]\/preceding::*\"},\n+                {\"\/store\/book[1]\/title\/preceding::*\"},\n+                {\"\/store\/book[@id='1']\/preceding::*\"},\n+\n+                \/\/test preceding-sibling\n+\n+                \/\/ any nodes\n+                {\"\/store\/book[1]\/preceding-sibling::*\"},\n+                {\"\/store\/book[2]\/title\/preceding-sibling::*\"},\n+\n+                \/\/ abbreviated text \/ id\n+                {\"\/store\/book[1]\/author\/preceding-sibling::isbn\"},\n+                {\"\/\/author[@id='2']\/preceding-sibling::book\"},\n+                {\"\/\/author[@id='2']\/preceding-sibling::node()\/preceding-sibling::author\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies XPath preceding and preceding-sibling axis specifiers by comparing expression and expected result.\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test failed\n+     *\/\n+    @Test(dataProvider = \"preceding_axes\")\n+    void testXPathPreceding(String exp, String parent) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node result = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node expected = xPath.evaluateExpression(parent, doc, Node.class);\n+        Assert.assertEquals(result, expected);\n+    }\n+\n+    \/**\n+     * Verifies no nodes returned from the XPath expression.\n+     *\n+     * @param exp XPath expression\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"noResults\")\n+    void testNoResults(String exp) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node result = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertEquals(result, null);\n+    }\n+}\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathPrecedingTest.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}