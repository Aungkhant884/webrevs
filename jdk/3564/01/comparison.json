{"files":[{"patch":"@@ -5263,1 +5263,1 @@\n-      method->init_intrinsic_id();\n+      method->init_intrinsic_id(klass_id);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -681,0 +681,40 @@\n+class vmIntrinsicsLookup {\n+  bool _class_map[vmSymbols::number_of_symbols()];\n+\n+  constexpr int as_index(vmSymbolID id) const {\n+    int index = vmSymbols::as_int(id);\n+    assert(0 <= index && index < int(sizeof(_class_map)), \"must be\");\n+    return index;\n+  }\n+\n+  constexpr void set_class_map(vmSymbolID id) {\n+    _class_map[as_index(id)] = true;\n+  }\n+\n+public:\n+  constexpr vmIntrinsicsLookup() : _class_map() {\n+\n+#define VM_INTRINSIC_CLASS_MAP(id, klass, name, sig, fcode) \\\n+    set_class_map(SID_ENUM(klass));\n+\n+    VM_INTRINSICS_DO(VM_INTRINSIC_CLASS_MAP,\n+                     VM_SYMBOL_IGNORE, VM_SYMBOL_IGNORE, VM_SYMBOL_IGNORE, VM_ALIAS_IGNORE);\n+#undef VM_INTRINSIC_CLASS_MAP\n+\n+\n+    \/\/ A few slightly irregular cases. See Method::init_intrinsic_id\n+    set_class_map(SID_ENUM(java_lang_StrictMath));\n+    set_class_map(SID_ENUM(java_lang_invoke_MethodHandle));\n+    set_class_map(SID_ENUM(java_lang_invoke_VarHandle));\n+  }\n+\n+  bool class_has_intrinsics(vmSymbolID holder) const {\n+    return _class_map[as_index(holder)];\n+  }\n+};\n+\n+constexpr vmIntrinsicsLookup _intrinsics_lookup;\n+\n+bool vmIntrinsics::class_has_intrinsics(vmSymbolID holder) {\n+  return _intrinsics_lookup.class_has_intrinsics(holder);\n+}\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1144,0 +1144,2 @@\n+  static bool class_has_intrinsics(vmSymbolID holder);\n+\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1407,1 +1407,1 @@\n-  m->init_intrinsic_id();\n+  m->init_intrinsic_id(klass_id_for_intrinsics(m->method_holder()));\n@@ -1561,1 +1561,6 @@\n-  return vmSymbols::find_sid(klass_name);\n+  vmSymbolID id = vmSymbols::find_sid(klass_name);\n+  if (id != vmSymbolID::NO_SID && vmIntrinsics::class_has_intrinsics(id)) {\n+    return id;\n+  } else {\n+    return vmSymbolID::NO_SID;\n+  }\n@@ -1564,1 +1569,1 @@\n-void Method::init_intrinsic_id() {\n+void Method::init_intrinsic_id(vmSymbolID klass_id) {\n@@ -1571,1 +1576,1 @@\n-  vmSymbolID klass_id = klass_id_for_intrinsics(method_holder());\n+  assert(klass_id == klass_id_for_intrinsics(method_holder()), \"must be\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-  void init_intrinsic_id();     \/\/ updates from _none if a match\n+  void init_intrinsic_id(vmSymbolID klass_id);     \/\/ updates from _none if a match\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}