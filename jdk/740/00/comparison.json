{"files":[{"patch":"@@ -3570,0 +3570,6 @@\n+bool ClassFileParser::supports_records() {\n+  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&\n+         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&\n+         Arguments::enable_preview();\n+}\n+\n@@ -3817,19 +3823,1 @@\n-\n-        } else if (_major_version >= JAVA_15_VERSION) {\n-          \/\/ Check for PermittedSubclasses tag\n-          if (tag == vmSymbols::tag_permitted_subclasses()) {\n-            if (supports_sealed_types()) {\n-              if (parsed_permitted_subclasses_attribute) {\n-                classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", CHECK);\n-              }\n-              \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n-              if (_access_flags.is_final()) {\n-                classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", CHECK);\n-              }\n-              parsed_permitted_subclasses_attribute = true;\n-              permitted_subclasses_attribute_start = cfs->current();\n-              permitted_subclasses_attribute_length = attribute_length;\n-            }\n-            cfs->skip_u1(attribute_length, CHECK);\n-\n-          } else if (_major_version >= JAVA_16_VERSION) {\n+        } else if (_major_version >= JAVA_14_VERSION) {\n@@ -3837,2 +3825,4 @@\n-              \/\/ Skip over Record attribute if super class is not java.lang.Record.\n-              if (cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n+            \/\/ Skip over Record attribute if not supported or if super class is\n+            \/\/ not java.lang.Record.\n+            if (supports_records() &&\n+                cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n@@ -3852,0 +3842,4 @@\n+              \/\/ Log why the Record attribute was ignored.  Note that if the\n+              \/\/ class file version is JVM_CLASSFILE_MAJOR_VERSION.65535 and\n+              \/\/ --enable-preview wasn't specified then a java.lang.UnsupportedClassVersionError\n+              \/\/ exception would have been thrown.\n@@ -3853,0 +3847,1 @@\n+              if (supports_records()) {\n@@ -3856,0 +3851,4 @@\n+              } else {\n+                log_info(class, record)(\n+                  \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n+                   _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n@@ -3859,0 +3858,22 @@\n+          } else if (_major_version >= JAVA_15_VERSION) {\n+            \/\/ Check for PermittedSubclasses tag\n+            if (tag == vmSymbols::tag_permitted_subclasses()) {\n+              if (supports_sealed_types()) {\n+                if (parsed_permitted_subclasses_attribute) {\n+                  classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", THREAD);\n+                  return;\n+                }\n+                \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n+                if (_access_flags.is_final()) {\n+                  classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", THREAD);\n+                  return;\n+                }\n+                parsed_permitted_subclasses_attribute = true;\n+                permitted_subclasses_attribute_start = cfs->current();\n+                permitted_subclasses_attribute_length = attribute_length;\n+              }\n+              cfs->skip_u1(attribute_length, CHECK);\n+            } else {\n+              \/\/ Unknown attribute\n+              cfs->skip_u1(attribute_length, CHECK);\n+            }\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":42,"deletions":21,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2345,0 +2345,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -2381,1 +2388,1 @@\n-     * @since 16\n+     * @since 14\n@@ -2383,0 +2390,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n@@ -3681,0 +3691,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -3693,1 +3710,1 @@\n-     * @since 16\n+     * @since 14\n@@ -3695,0 +3712,2 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,8 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Programs can only use this\n+ *           class when preview features are enabled. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -81,1 +89,1 @@\n- * @since 16\n+ * @since 14\n@@ -83,0 +91,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Record.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -121,0 +121,8 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This constant is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Programs can only use this\n+     *           constant when preview features are enabled. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -126,1 +134,1 @@\n-     * @since 16\n+     * @since 14\n@@ -128,0 +136,2 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/annotation\/ElementType.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,0 +41,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -47,1 +54,1 @@\n- * @since 16\n+ * @since 14\n@@ -49,0 +56,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/RecordComponent.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,0 +41,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -47,1 +54,1 @@\n- * @since 16\n+ * @since 14\n@@ -49,0 +56,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -65,5 +65,0 @@\n-        \/\/ The RECORDS enum constant is not used in the JDK 16 codebase, but\n-        \/\/ exists to support the bootcycle build of JDK 16. The bootcycle build\n-        \/\/ of JDK 16 is performed with JDK 15 and the PreviewFeature type from\n-        \/\/ JDK 16. Since the JDK 15 codebase uses the enum constant, it is\n-        \/\/ necessary for PreviewFeature in JDK 16 to declare the enum constant.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/PreviewFeature.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,1 +95,7 @@\n-         * @since 16\n+         * {@preview Associated with records, a preview feature of the Java language.\n+         *\n+         *           This enum constant is associated with <i>records<\/i>, a preview\n+         *           feature of the Java language. Preview features\n+         *           may be removed in a future release, or upgraded to permanent\n+         *           features of the Java language.}\n+         * @since 14\n@@ -97,0 +103,2 @@\n+        @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                     essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/TypeAnnotation.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -113,0 +113,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This enum constant is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -114,1 +121,1 @@\n-     * @since 16\n+     * @since 14\n@@ -116,0 +123,2 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n@@ -119,0 +128,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This enum constant is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -120,1 +136,1 @@\n-     * @since 16\n+     * @since 14\n@@ -122,0 +138,2 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -215,0 +215,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -223,1 +230,1 @@\n-     * @since 16\n+     * @since 14\n@@ -225,0 +232,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementVisitor.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -31,1 +38,1 @@\n- * @since 16\n+ * @since 14\n@@ -33,0 +40,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/RecordComponentElement.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -183,0 +183,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -192,1 +199,1 @@\n-     * @since 16\n+     * @since 14\n@@ -194,0 +201,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -50,1 +57,1 @@\n- * @since 16\n+ * @since 14\n@@ -52,0 +59,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n@@ -71,0 +80,1 @@\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractElementVisitor14.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -115,0 +115,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -118,1 +125,1 @@\n-     * @since 16\n+     * @since 14\n@@ -120,0 +127,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n@@ -126,0 +136,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -129,1 +146,1 @@\n-     * @since 16\n+     * @since 14\n@@ -131,0 +148,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementFilter.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -34,0 +34,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -62,1 +69,1 @@\n- * @since 16\n+ * @since 14\n@@ -64,0 +71,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n@@ -93,0 +102,1 @@\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitor14.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -220,0 +220,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -228,1 +235,1 @@\n-     * @since 16\n+     * @since 14\n@@ -230,0 +237,2 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitor6.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -77,1 +84,1 @@\n- * @since 16\n+ * @since 14\n@@ -79,0 +86,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n@@ -150,0 +159,1 @@\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner14.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -637,0 +637,7 @@\n+     * {@preview Associated with records, a preview feature of the Java language.\n+     *\n+     *           This method is associated with <i>records<\/i>, a preview\n+     *           feature of the Java language. Preview features\n+     *           may be removed in a future release, or upgraded to permanent\n+     *           features of the Java language.}\n+     *\n@@ -651,1 +658,1 @@\n-     * @since 16\n+     * @since 14\n@@ -653,0 +660,3 @@\n+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                 essentialAPI=false)\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,0 +34,7 @@\n+ * {@preview Associated with records, a preview feature of the Java language.\n+ *\n+ *           This class is associated with <i>records<\/i>, a preview\n+ *           feature of the Java language. Preview features\n+ *           may be removed in a future release, or upgraded to permanent\n+ *           features of the Java language.}\n+ *\n@@ -58,1 +65,1 @@\n- * @since 16\n+ * @since 14\n@@ -60,0 +67,2 @@\n+@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                             essentialAPI=false)\n@@ -90,0 +99,1 @@\n+    @SuppressWarnings(\"preview\")\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleElementVisitor14.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -652,0 +652,7 @@\n+         * {@preview Associated with records, a preview feature of the Java language.\n+         *\n+         *           This enum constant is associated with <i>records<\/i>, a preview\n+         *           feature of the Java language. Preview features\n+         *           may be removed in a future release, or upgraded to permanent\n+         *           features of the Java language.}\n+         *\n@@ -653,1 +660,2 @@\n-         * @since 16\n+         *\n+         * @since 14\n@@ -655,0 +663,2 @@\n+        @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n+                                     essentialAPI=false)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -170,0 +170,1 @@\n+            feature == Feature.RECORDS ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -162,1 +162,2 @@\n-        allowRecords = Feature.RECORDS.allowedInSource(source);\n+        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n+                Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -153,1 +153,2 @@\n-        allowRecords = Feature.RECORDS.allowedInSource(source);\n+        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n+                Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -275,1 +275,2 @@\n-        allowRecords = Feature.RECORDS.allowedInSource(source);\n+        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n+                Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -187,1 +187,2 @@\n-        this.allowRecords = Feature.RECORDS.allowedInSource(source);\n+        this.allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n+                Feature.RECORDS.allowedInSource(source);\n@@ -3719,1 +3720,1 @@\n-            if (token.kind == IDENTIFIER && token.name() == names.record) {\n+            if (token.kind == IDENTIFIER && token.name() == names.record && preview.isEnabled()) {\n@@ -4216,1 +4217,1 @@\n-            checkSourceLevel(Feature.RECORDS);\n+             checkSourceLevel(Feature.RECORDS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -33,2 +32,3 @@\n- * @run main RedefineRecord buildagent\n- * @run main\/othervm\/timeout=6000 RedefineRecord runtest\n+ * @compile --enable-preview -source ${jdk.version} RedefineRecord.java\n+ * @run main\/othervm --enable-preview RedefineRecord buildagent\n+ * @run main\/othervm\/timeout=6000 --enable-preview RedefineRecord runtest\n@@ -103,0 +103,1 @@\n+                \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/RedefineRecord.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/abstractRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/badRecordAttribute.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -29,1 +28,1 @@\n- * @compile superNotJLRecord.jcod\n+ * @compile superNotJLRecord.jcod recordIgnoredVersion.jcod\n@@ -40,1 +39,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"--enable-preview\",\n@@ -45,0 +44,6 @@\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\"--enable-preview\",\n+            \"-Xlog:class+record\", \"-Xshare:off\", \"recordIgnoredVersion\");\n+        output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Ignoring Record attribute\");\n+        output.shouldContain(\"because class file version is not \" + MAJOR_VERSION + \".65535\");\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/ignoreRecordAttribute.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/notFinalRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -29,1 +28,2 @@\n- * @run main recordAttributeTest\n+ *\n+ * @run main\/othervm --enable-preview recordAttributeTest\n@@ -40,1 +40,1 @@\n-            throw new RuntimeException(\"Expected ClassFormatError exception not thrown\");\n+            throw new RuntimeException(\"Expected ClasFormatError exception not thrown\");\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordAttributeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,256 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ Record attribute is ignored because class file minor version is 0.\n+class recordIgnoredVersion {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  60; \/\/ version\n+  [52] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Record\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"recordIgnoredVersion\"; \/\/ #10     at 0x46\n+    Utf8 \"x\"; \/\/ #11     at 0x56\n+    Utf8 \"I\"; \/\/ #12     at 0x5A\n+    Field #8 #9; \/\/ #13     at 0x5E\n+    InvokeDynamic 0s #15; \/\/ #14     at 0x63\n+    NameAndType #16 #17; \/\/ #15     at 0x68\n+    Utf8 \"toString\"; \/\/ #16     at 0x6D\n+    Utf8 \"(LrecordIgnoredVersion;)Ljava\/lang\/String;\"; \/\/ #17     at 0x78\n+    InvokeDynamic 0s #19; \/\/ #18     at 0x9E\n+    NameAndType #20 #21; \/\/ #19     at 0xA3\n+    Utf8 \"hashCode\"; \/\/ #20     at 0xA8\n+    Utf8 \"(LrecordIgnoredVersion;)I\"; \/\/ #21     at 0xB3\n+    InvokeDynamic 0s #23; \/\/ #22     at 0xC8\n+    NameAndType #24 #25; \/\/ #23     at 0xCD\n+    Utf8 \"equals\"; \/\/ #24     at 0xD2\n+    Utf8 \"(LrecordIgnoredVersion;Ljava\/lang\/Object;)Z\"; \/\/ #25     at 0xDB\n+    Utf8 \"(I)V\"; \/\/ #26     at 0x0102\n+    Utf8 \"Code\"; \/\/ #27     at 0x0109\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0x0110\n+    Utf8 \"MethodParameters\"; \/\/ #29     at 0x0122\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #30     at 0x0135\n+    Utf8 \"()I\"; \/\/ #31     at 0x014C\n+    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #32     at 0x0152\n+    Utf8 \"SourceFile\"; \/\/ #33     at 0x016A\n+    Utf8 \"recordIgnoredVersion.java\"; \/\/ #34     at 0x0177\n+    Utf8 \"Record\"; \/\/ #35     at 0x018C\n+    Utf8 \"BootstrapMethods\"; \/\/ #36     at 0x0195\n+    MethodHandle 6b #38; \/\/ #37     at 0x01A8\n+    Method #39 #40; \/\/ #38     at 0x01AC\n+    class #41; \/\/ #39     at 0x01B1\n+    NameAndType #42 #43; \/\/ #40     at 0x01B4\n+    Utf8 \"java\/lang\/runtime\/ObjectMethods\"; \/\/ #41     at 0x01B9\n+    Utf8 \"bootstrap\"; \/\/ #42     at 0x01DB\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\"; \/\/ #43     at 0x01E7\n+    String #11; \/\/ #44     at 0x029B\n+    MethodHandle 1b #7; \/\/ #45     at 0x029E\n+    Utf8 \"InnerClasses\"; \/\/ #46     at 0x02A2\n+    class #48; \/\/ #47     at 0x02B1\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #48     at 0x02B4\n+    class #50; \/\/ #49     at 0x02DC\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #50     at 0x02DF\n+    Utf8 \"Lookup\"; \/\/ #51     at 0x0300\n+  } \/\/ Constant Pool\n+\n+  0x0030; \/\/ access [ ACC_SUPER ACC_FINAL ]\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0x0313\n+      0x8012; \/\/ access\n+      #11; \/\/ name_cpx\n+      #12; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [5] { \/\/ methods\n+    { \/\/ Member at 0x031D\n+      0x0001; \/\/ access\n+      #5; \/\/ name_cpx\n+      #26; \/\/ sig_cpx\n+      [2] { \/\/ Attributes\n+        Attr(#27, 34) { \/\/ Code at 0x0325\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[10]{\n+            0x2AB700012A1BB500;\n+            0x07B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0341\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x034D\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#29, 5) { \/\/ MethodParameters at 0x034D\n+          0x01000B8000;\n+        } \/\/ end MethodParameters\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0358\n+      0x8001; \/\/ access\n+      #16; \/\/ name_cpx\n+      #30; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 31) { \/\/ Code at 0x0360\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA000E0000B0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0379\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0385\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0385\n+      0x8011; \/\/ access\n+      #20; \/\/ name_cpx\n+      #31; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 31) { \/\/ Code at 0x038D\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00120000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03A6\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x03B2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03B2\n+      0x8011; \/\/ access\n+      #24; \/\/ name_cpx\n+      #32; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 32) { \/\/ Code at 0x03BA\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[8]{\n+            0x2A2BBA00160000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03D4\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x03E0\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03E0\n+      0x8001; \/\/ access\n+      #11; \/\/ name_cpx\n+      #31; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x03E8\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB4000DAC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03FF\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x040B\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [4] { \/\/ Attributes\n+    Attr(#33, 2) { \/\/ SourceFile at 0x040D\n+      #34;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#35, 8) { \/\/ Record at 0x0415\n+      0x0001000B000C0000;\n+    } \/\/ end Record\n+    ;\n+    Attr(#36, 12) { \/\/ BootstrapMethods at 0x0423\n+      [1] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #37; \/\/ bootstrap_method_ref\n+          [3] { \/\/ bootstrap_arguments\n+            #8; \/\/  at 0x0431\n+            #44; \/\/  at 0x0433\n+            #45; \/\/  at 0x0435\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+    ;\n+    Attr(#46, 10) { \/\/ InnerClasses at 0x0435\n+      [1] { \/\/ InnerClasses\n+        #47 #49 #51 25; \/\/  at 0x0445\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class recordIgnoredVersion\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordIgnoredVersion.jcod","additions":256,"deletions":0,"binary":false,"changes":256,"status":"added"},{"patch":"@@ -26,2 +26,2 @@\n- * @bug 8246774\n- * @summary testing reflection APIs for record classes\n+ * @compile --enable-preview --source ${jdk.version} recordReflectionTest.java\n+ * @run main\/othervm --enable-preview recordReflectionTest\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordReflectionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/shortRecordAttribute.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/superNotJLRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  0; \/\/ minor version\n+  65535; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/twoRecordAttributes.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng AbsentStreamValuesTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy AbsentStreamValuesTest\n+ * @compile --enable-preview -source ${jdk.version} AbsentStreamValuesTest.java\n+ * @run testng\/othervm --enable-preview AbsentStreamValuesTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview AbsentStreamValuesTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/AbsentStreamValuesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -31,1 +30,2 @@\n- * @run testng BadCanonicalCtrTest\n+ * @compile --enable-preview -source ${jdk.version} BadCanonicalCtrTest.java\n+ * @run testng\/othervm --enable-preview BadCanonicalCtrTest\n@@ -62,0 +62,1 @@\n+    private static final String VERSION = Integer.toString(Runtime.version().feature());\n@@ -81,1 +82,2 @@\n-                    \"public record R1 () implements java.io.Serializable { }\");\n+                    \"public record R1 () implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -90,1 +92,2 @@\n-                    \"public record R2 (int x, int y) implements java.io.Serializable { }\");\n+                    \"public record R2 (int x, int y) implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -101,1 +104,2 @@\n-                    \"    public void readExternal(java.io.ObjectInput in)    { } }\");\n+                    \"    public void readExternal(java.io.ObjectInput in)    { } }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BadCanonicalCtrTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng BasicRecordSer\n- * @run testng\/othervm\/java.security.policy=empty_security.policy BasicRecordSer\n+ * @compile --enable-preview -source ${jdk.version} BasicRecordSer.java\n+ * @run testng\/othervm --enable-preview BasicRecordSer\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview BasicRecordSer\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/BasicRecordSer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -29,2 +28,3 @@\n- * @run testng ConstructorAccessTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ConstructorAccessTest\n+ * @compile --enable-preview -source ${jdk.version} ConstructorAccessTest.java\n+ * @run testng\/othervm --enable-preview ConstructorAccessTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview ConstructorAccessTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ConstructorAccessTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -29,1 +28,2 @@\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ConstructorPermissionTest\n+ * @compile --enable-preview -source ${jdk.version} ConstructorPermissionTest.java\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview ConstructorPermissionTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ConstructorPermissionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng CycleTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy CycleTest\n+ * @compile --enable-preview -source ${jdk.version} CycleTest.java\n+ * @run testng\/othervm --enable-preview CycleTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview CycleTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/CycleTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -29,2 +28,3 @@\n- * @run testng DifferentStreamFieldsTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy DifferentStreamFieldsTest\n+ * @compile --enable-preview -source ${jdk.version} DifferentStreamFieldsTest.java\n+ * @run testng\/othervm --enable-preview DifferentStreamFieldsTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview DifferentStreamFieldsTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/DifferentStreamFieldsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -30,1 +29,2 @@\n- * @run testng ProhibitedMethods\n+ * @compile --enable-preview -source ${jdk.version} ProhibitedMethods.java\n+ * @run testng\/othervm --enable-preview ProhibitedMethods\n@@ -72,0 +72,1 @@\n+    private static final String VERSION = Integer.toString(Runtime.version().feature());\n@@ -108,1 +109,2 @@\n-                    \"public record Foo () implements java.io.Serializable { }\");\n+                    \"public record Foo () implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -116,1 +118,2 @@\n-                    \"public record Bar (int x, int y) implements java.io.Serializable { }\");\n+                    \"public record Bar (int x, int y) implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -125,1 +128,2 @@\n-                    \"public record Baz<U extends Serializable,V extends Serializable>(U u, V v) implements Serializable { }\");\n+                    \"public record Baz<U extends Serializable,V extends Serializable>(U u, V v) implements Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ProhibitedMethods.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng ReadResolveTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ReadResolveTest\n+ * @compile --enable-preview -source ${jdk.version} ReadResolveTest.java\n+ * @run testng\/othervm --enable-preview ReadResolveTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview ReadResolveTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ReadResolveTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng RecordClassTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy RecordClassTest\n+ * @compile --enable-preview -source ${jdk.version} RecordClassTest.java\n+ * @run testng\/othervm --enable-preview RecordClassTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview RecordClassTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/RecordClassTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -30,1 +29,2 @@\n- * @run testng SerialPersistentFieldsTest\n+ * @compile --enable-preview -source ${jdk.version} SerialPersistentFieldsTest.java\n+ * @run testng\/othervm --enable-preview SerialPersistentFieldsTest\n@@ -65,0 +65,1 @@\n+    private static final String VERSION = Integer.toString(Runtime.version().feature());\n@@ -85,1 +86,2 @@\n-                    \"public record R1 () implements java.io.Serializable { }\");\n+                    \"public record R1 () implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -97,1 +99,2 @@\n-                    \"public record R2 (int x) implements java.io.Serializable { }\");\n+                    \"public record R2 (int x) implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -106,1 +109,2 @@\n-                    \"public record R3 (int x, int y) implements java.io.Serializable { }\");\n+                    \"public record R3 (int x, int y) implements java.io.Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -114,1 +118,2 @@\n-                    \"public record R4<U extends Serializable,V extends Serializable>(U u, V v) implements Serializable { }\");\n+                    \"public record R4<U extends Serializable,V extends Serializable>(U u, V v) implements Serializable { }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n@@ -130,1 +135,2 @@\n-                    \"    }  }\");\n+                    \"    }  }\",\n+                    \"--enable-preview\", \"-source\", VERSION);\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialPersistentFieldsTest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng SerialVersionUIDTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy SerialVersionUIDTest\n+ * @compile --enable-preview -source ${jdk.version} SerialVersionUIDTest.java\n+ * @run testng\/othervm --enable-preview SerialVersionUIDTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview SerialVersionUIDTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/SerialVersionUIDTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,1 +27,2 @@\n- * @run testng StreamRefTest\n+ * @compile --enable-preview -source ${jdk.version} StreamRefTest.java\n+ * @run testng\/othervm --enable-preview StreamRefTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/StreamRefTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng ThrowingConstructorTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy ThrowingConstructorTest\n+ * @compile --enable-preview -source ${jdk.version} ThrowingConstructorTest.java\n+ * @run testng\/othervm --enable-preview ThrowingConstructorTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview ThrowingConstructorTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/ThrowingConstructorTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8238763 8246774\n+ * @bug 8238763\n@@ -28,1 +28,2 @@\n- * @run testng UnsharedTest\n+ * @compile --enable-preview -source ${jdk.version} UnsharedTest.java\n+ * @run testng\/othervm --enable-preview UnsharedTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/UnsharedTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng WriteReplaceTest\n- * @run testng\/othervm\/java.security.policy=empty_security.policy WriteReplaceTest\n+ * @compile --enable-preview -source ${jdk.version} WriteReplaceTest.java\n+ * @run testng\/othervm --enable-preview WriteReplaceTest\n+ * @run testng\/othervm\/java.security.policy=empty_security.policy --enable-preview WriteReplaceTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/WriteReplaceTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,2 @@\n+    private static final String VERSION = Integer.toString(Runtime.version().feature());\n+\n@@ -60,0 +62,1 @@\n+                   \"--enable-preview\", \"-source\", VERSION,\n@@ -63,0 +66,1 @@\n+                   \"--enable-preview\", \"-source\", VERSION,\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/migration\/AbstractTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -30,3 +29,3 @@\n- * @compile AssignableFrom.java Point.java\n- *          DefaultValues.java SuperStreamFields.java\n- * @run testng AssignableFromTest\n+ * @compile --enable-preview -source ${jdk.version} AssignableFrom.java Point.java\n+ *          DefaultValues.java SuperStreamFields.java AssignableFromTest.java\n+ * @run testng\/othervm --enable-preview AssignableFromTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/migration\/AssignableFromTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -30,2 +29,3 @@\n- * @compile AssignableFrom.java Point.java DefaultValues.java SuperStreamFields.java\n- * @run testng DefaultValuesTest\n+ * @compile --enable-preview -source ${jdk.version} AssignableFrom.java Point.java\n+ *          DefaultValues.java SuperStreamFields.java DefaultValuesTest.java\n+ * @run testng\/othervm --enable-preview DefaultValuesTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/migration\/DefaultValuesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -30,2 +29,3 @@\n- * @compile AssignableFrom.java Point.java DefaultValues.java SuperStreamFields.java\n- * @run testng SuperStreamFieldsTest\n+ * @compile --enable-preview -source ${jdk.version} AssignableFrom.java Point.java\n+ *          DefaultValues.java SuperStreamFields.java SuperStreamFieldsTest.java\n+ * @run testng\/othervm --enable-preview SuperStreamFieldsTest\n","filename":"test\/jdk\/java\/io\/Serializable\/records\/migration\/SuperStreamFieldsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -37,8 +36,9 @@\n- * @compile Host\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr Host\n- * @compile HostA\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostA\n- * @compile HostAB\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostAB\n- * @compile HostABC\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostABC\n+ * @compile --enable-preview -source ${jdk.version} Host\/Host.java\n+ * @compile --enable-preview -source ${jdk.version} TestRecordAttr.java\n+ * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr Host\n+ * @compile --enable-preview -source ${jdk.version} HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostA\n+ * @compile --enable-preview -source ${jdk.version} HostAB\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostAB\n+ * @compile --enable-preview -source ${jdk.version} HostABC\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostABC\n@@ -272,1 +272,3 @@\n-                              false \/* don't recurse *\/);\n+                              false \/* don't recurse *\/,\n+                              \"--enable-preview\",\n+                              \"--source\", VERSION);\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/TestRecordAttr.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -37,4 +36,5 @@\n- * @compile Host\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttrGenericSig Host\n- * @compile HostA\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttrGenericSig HostA\n+ * @compile --enable-preview --source ${jdk.version} Host\/Host.java\n+ * @compile --enable-preview --source ${jdk.version} TestRecordAttrGenericSig.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace --enable-preview TestRecordAttrGenericSig Host\n+ * @compile --enable-preview --source ${jdk.version} HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace --enable-preview TestRecordAttrGenericSig HostA\n@@ -210,1 +210,3 @@\n-                              false \/* don't recurse *\/);\n+                              false \/* don't recurse *\/,\n+                              \"--enable-preview\",\n+                              \"--source\", VERSION);\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttrGenericSig\/TestRecordAttrGenericSig.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,3 @@\n- * @run testng ObjectMethodsTest\n- * @run testng\/othervm\/java.security.policy=empty.policy ObjectMethodsTest\n+ * @compile --enable-preview -source ${jdk.version} ObjectMethodsTest.java\n+ * @run testng\/othervm --enable-preview ObjectMethodsTest\n+ * @run testng\/othervm\/java.security.policy=empty.policy --enable-preview ObjectMethodsTest\n","filename":"test\/jdk\/java\/lang\/runtime\/ObjectMethodsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      8236539 8246774\n+ * @bug      8236539\n@@ -31,0 +31,1 @@\n+ * @compile TestRecordLinks.java\n@@ -76,0 +77,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordLinks\/TestRecordLinks.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      8225055 8239804 8246774\n+ * @bug      8225055 8239804\n@@ -31,1 +31,2 @@\n- * @run main TestRecordTypes\n+ * @compile --enable-preview --source ${jdk.version} TestRecordTypes.java\n+ * @run main\/othervm --enable-preview TestRecordTypes\n@@ -71,0 +72,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -92,0 +94,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -113,0 +116,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -138,0 +142,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -169,0 +174,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -201,0 +207,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -264,0 +271,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -344,0 +352,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -369,0 +378,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -399,0 +409,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -407,0 +418,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n@@ -412,0 +424,1 @@\n+    @SuppressWarnings(\"preview\")\n@@ -458,0 +471,1 @@\n+                \"--enable-preview\", \"--source\", thisRelease,\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 6493690 8246774\n+ * @bug 6493690\n@@ -81,1 +81,1 @@\n-                        \"compiler.err.expected4\",   \/\/ class, interface, enum, or record expected\n+                        \"compiler.err.expected3\",   \/\/ class, interface, enum, or __datum expected\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/GetTask_DiagListenerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8149524 8131024 8165211 8080071 8130454 8167343 8129559 8114842 8182268 8223782 8235474 8246774\n+ * @bug 8149524 8131024 8165211 8080071 8130454 8167343 8129559 8114842 8182268 8223782 8235474\n@@ -382,0 +382,6 @@\n+\n+    @BeforeMethod\n+    public void setUp() {\n+        setUp(b -> b.compilerOptions(\"--enable-preview\", \"-source\", String.valueOf(SourceVersion.latest().ordinal())));\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8235474 8236715 8246774\n+ * @bug 8235474 8236715\n@@ -79,0 +79,6 @@\n+\n+    @BeforeMethod\n+    public void setUp() {\n+        setUp(b -> b.compilerOptions(\"--enable-preview\", \"-source\", String.valueOf(SourceVersion.latest().ordinal()))\n+                    .remoteVMOptions(\"--enable-preview\"));\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/RecordsTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8153716 8143955 8151754 8150382 8153920 8156910 8131024 8160089 8153897 8167128 8154513 8170015 8170368 8172102 8172103  8165405 8173073 8173848 8174041 8173916 8174028 8174262 8174797 8177079 8180508 8177466 8172154 8192979 8191842 8198573 8198801 8210596 8210959 8215099 8199623 8236715 8239536 8247456 8246774\n+ * @bug 8153716 8143955 8151754 8150382 8153920 8156910 8131024 8160089 8153897 8167128 8154513 8170015 8170368 8172102 8172103  8165405 8173073 8173848 8174041 8173916 8174028 8174262 8174797 8177079 8180508 8177466 8172154 8192979 8191842 8198573 8198801 8210596 8210959 8215099 8199623 8236715 8239536 8247456\n@@ -33,1 +33,1 @@\n- * @run testng ToolSimpleTest\n+ * @run testng\/othervm ToolSimpleTest\n@@ -920,1 +920,1 @@\n-        test(new String[] {},\n+        test(new String[] {\"--enable-preview\"},\n","filename":"test\/langtools\/jdk\/jshell\/ToolSimpleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 5012028 6384539 8074364 8250741 8246774\n+ * @bug 5012028 6384539 8074364 8250741\n@@ -7,0 +7,1 @@\n+ * @compile\/fail\/ref=IllegalAnnotation.out -XDrawDiagnostics --enable-preview -source ${jdk.version} IllegalAnnotation.java\n","filename":"test\/langtools\/tools\/javac\/IllegalAnnotation.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-IllegalAnnotation.java:10:10: compiler.err.annotation.decl.not.allowed.here\n+IllegalAnnotation.java:11:10: compiler.err.annotation.decl.not.allowed.here\n","filename":"test\/langtools\/tools\/javac\/IllegalAnnotation.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8242478 8246774\n+ * @bug 8242478\n@@ -5,2 +5,2 @@\n- * @compile\/fail\/ref=LocalInterface.out -XDrawDiagnostics -source 15 LocalInterface.java\n- * @compile LocalInterface.java\n+ * @compile\/fail\/ref=LocalInterface.out -XDrawDiagnostics LocalInterface.java\n+ * @compile --enable-preview -source ${jdk.version} LocalInterface.java\n","filename":"test\/langtools\/tools\/javac\/LocalInterface.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 15\n@@ -4,1 +3,0 @@\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/LocalInterface.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8242478 8246774\n+ * @bug 8242478\n@@ -28,1 +28,1 @@\n- * @compile LocalRecord.java\n+ * @compile --enable-preview -source ${jdk.version} LocalRecord.java\n","filename":"test\/langtools\/tools\/javac\/LocalRecord.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8241312 8246774\n+ * @bug 8241312\n@@ -31,1 +31,2 @@\n- * @run main ApplicableAnnotationsOnRecords\n+ * @compile --enable-preview -source ${jdk.version} ApplicableAnnotationsOnRecords.java\n+ * @run main\/othervm --enable-preview ApplicableAnnotationsOnRecords\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug      7151010 8006547 8007766 8029017 8246774\n+ * @bug      7151010 8006547 8007766 8029017\n@@ -207,2 +207,5 @@\n-    \/\/ options to be passed if target RECORD_COMPONENT can't be considered\n-    List<String> source8 = List.of(\"-source\", \"8\");\n+    \/\/ options to be passed if all targets, including RECORD_COMPONENTS, are to be considered\n+    List<String> previewOptions = List.of(\n+            \"--enable-preview\",\n+            \"-source\", Integer.toString(Runtime.version().feature())\n+    );\n@@ -214,1 +217,1 @@\n-    \/*  0*\/     new TestCase(noSet, noSet),\n+                new TestCase(noSet, noSet),\n@@ -216,1 +219,1 @@\n-    \/*  1*\/     new TestCase(noSet, empty),\n+                new TestCase(noSet, empty),\n@@ -218,1 +221,1 @@\n-                new TestCase(noSet, less(jdk8, TYPE_PARAMETER), source8),\n+                new TestCase(noSet, less(jdk8, TYPE_PARAMETER)),\n@@ -220,1 +223,1 @@\n-                new TestCase(noSet, less(jdk8, TYPE_USE), source8),\n+                new TestCase(noSet, less(jdk8, TYPE_USE)),\n@@ -222,1 +225,1 @@\n-                new TestCase(noSet, jdk8, source8),\n+                new TestCase(noSet, jdk8),\n@@ -233,1 +236,1 @@\n-    \/*  10*\/    new TestCase(noSet, plus(empty, METHOD)),\n+                new TestCase(noSet, plus(empty, METHOD)),\n@@ -246,1 +249,1 @@\n-    \/*  20*\/    new TestCase(empty, plus(empty, METHOD)),\n+                new TestCase(empty, plus(empty, METHOD)),\n@@ -251,2 +254,2 @@\n-                new TestCase(empty, less(jdk8, TYPE_USE), source8),\n-                new TestCase(empty, less(jdk8, TYPE_PARAMETER), source8),\n+                new TestCase(empty, less(jdk8, TYPE_USE)),\n+                new TestCase(empty, less(jdk8, TYPE_PARAMETER)),\n@@ -254,8 +257,8 @@\n-                new TestCase(less(jdk7, TYPE), noSet, source8),\n-                new TestCase(less(jdk7, PARAMETER), noSet, source8),\n-                new TestCase(less(jdk7, PACKAGE), noSet, source8),\n-    \/*  30*\/    new TestCase(less(jdk7, METHOD), noSet, source8),\n-                new TestCase(less(jdk7, LOCAL_VARIABLE), noSet, source8),\n-                new TestCase(less(jdk7, FIELD), noSet, source8),\n-                new TestCase(less(jdk7, CONSTRUCTOR), noSet, source8),\n-                new TestCase(less(jdk7, ANNOTATION_TYPE), noSet, source8),\n+                new TestCase(less(jdk7, TYPE), noSet),\n+                new TestCase(less(jdk7, PARAMETER), noSet),\n+                new TestCase(less(jdk7, PACKAGE), noSet),\n+                new TestCase(less(jdk7, METHOD), noSet),\n+                new TestCase(less(jdk7, LOCAL_VARIABLE), noSet),\n+                new TestCase(less(jdk7, FIELD), noSet),\n+                new TestCase(less(jdk7, CONSTRUCTOR), noSet),\n+                new TestCase(less(jdk7, ANNOTATION_TYPE), noSet),\n@@ -265,1 +268,1 @@\n-                new TestCase(jdk7, noSet, source8),\n+                new TestCase(jdk7, noSet),\n@@ -267,3 +270,3 @@\n-                new TestCase(plus(jdk7, TYPE_USE), noSet, source8),\n-                new TestCase(plus(jdk7, TYPE_PARAMETER), noSet, source8),\n-                new TestCase(allTargets, noSet, null),\n+                new TestCase(plus(jdk7, TYPE_USE), noSet),\n+                new TestCase(plus(jdk7, TYPE_PARAMETER), noSet),\n+                new TestCase(allTargets, noSet, previewOptions),\n@@ -271,1 +274,1 @@\n-    \/*  40*\/    new TestCase(plus(empty, TYPE), empty),\n+                new TestCase(plus(empty, TYPE), empty),\n@@ -282,1 +285,1 @@\n-    \/*  50*\/    new TestCase(allTargets, allTargets),\n+                new TestCase(allTargets, allTargets, previewOptions),\n@@ -284,10 +287,10 @@\n-                new TestCase(allTargets, less(allTargets, TYPE)),\n-                new TestCase(allTargets, less(allTargets, PARAMETER)),\n-                new TestCase(allTargets, less(allTargets, PACKAGE)),\n-                new TestCase(allTargets, less(allTargets, METHOD)),\n-                new TestCase(allTargets, less(allTargets, LOCAL_VARIABLE)),\n-                new TestCase(allTargets, less(allTargets, FIELD)),\n-                new TestCase(allTargets, less(allTargets, CONSTRUCTOR)),\n-                new TestCase(allTargets, less(allTargets, ANNOTATION_TYPE)),\n-                new TestCase(allTargets, less(allTargets, TYPE_USE)),\n-    \/*  60*\/    new TestCase(allTargets, less(allTargets, TYPE_PARAMETER)),\n+                new TestCase(allTargets, less(allTargets, TYPE), previewOptions),\n+                new TestCase(allTargets, less(allTargets, PARAMETER), previewOptions),\n+                new TestCase(allTargets, less(allTargets, PACKAGE), previewOptions),\n+                new TestCase(allTargets, less(allTargets, METHOD), previewOptions),\n+                new TestCase(allTargets, less(allTargets, LOCAL_VARIABLE), previewOptions),\n+                new TestCase(allTargets, less(allTargets, FIELD), previewOptions),\n+                new TestCase(allTargets, less(allTargets, CONSTRUCTOR), previewOptions),\n+                new TestCase(allTargets, less(allTargets, ANNOTATION_TYPE), previewOptions),\n+                new TestCase(allTargets, less(allTargets, TYPE_USE), previewOptions),\n+                new TestCase(allTargets, less(allTargets, TYPE_PARAMETER), previewOptions),\n@@ -295,10 +298,10 @@\n-                new TestCase(less(allTargets, TYPE), allTargets),\n-                new TestCase(less(allTargets, PARAMETER), allTargets),\n-                new TestCase(less(allTargets, PACKAGE), allTargets),\n-                new TestCase(less(allTargets, METHOD), allTargets),\n-                new TestCase(less(allTargets, LOCAL_VARIABLE), allTargets),\n-                new TestCase(less(allTargets, FIELD), allTargets),\n-                new TestCase(less(allTargets, CONSTRUCTOR), allTargets),\n-                new TestCase(less(allTargets, ANNOTATION_TYPE), allTargets),\n-                new TestCase(less(allTargets, TYPE_USE), allTargets),\n-    \/*  70*\/    new TestCase(less(allTargets, TYPE_PARAMETER), allTargets)));\n+                new TestCase(less(allTargets, TYPE), allTargets, previewOptions),\n+                new TestCase(less(allTargets, PARAMETER), allTargets, previewOptions),\n+                new TestCase(less(allTargets, PACKAGE), allTargets, previewOptions),\n+                new TestCase(less(allTargets, METHOD), allTargets, previewOptions),\n+                new TestCase(less(allTargets, LOCAL_VARIABLE), allTargets, previewOptions),\n+                new TestCase(less(allTargets, FIELD), allTargets, previewOptions),\n+                new TestCase(less(allTargets, CONSTRUCTOR), allTargets, previewOptions),\n+                new TestCase(less(allTargets, ANNOTATION_TYPE), allTargets, previewOptions),\n+                new TestCase(less(allTargets, TYPE_USE), allTargets, previewOptions),\n+                new TestCase(less(allTargets, TYPE_PARAMETER), allTargets, previewOptions)));\n@@ -309,1 +312,1 @@\n-                testCases.add(new TestCase(plus(empty, b), plus(empty, c)));\n+                testCases.add(new TestCase(plus(empty, b), plus(empty, c), previewOptions));\n@@ -456,1 +459,1 @@\n-                    errMesg = \"Test failed, should have compiled successfully.\";\n+                    errMesg = \"Test failed, compiled unexpectedly.\";\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/combo\/TargetAnnoCombo.java","additions":51,"deletions":48,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -36,1 +35,2 @@\n- * @run main TypeAnnotationsPositionsOnRecords\n+ * @compile --enable-preview -source ${jdk.version} TypeAnnotationsPositionsOnRecords.java\n+ * @run main\/othervm --enable-preview TypeAnnotationsPositionsOnRecords\n@@ -108,0 +108,1 @@\n+                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedImport.java:10:16: compiler.err.expected4: class, interface, enum, record\n+AnnotatedImport.java:10:16: compiler.err.expected3: class, interface, enum\n@@ -4,1 +4,1 @@\n-AnnotatedImport.java:11:11: compiler.err.expected4: class, interface, enum, record\n+AnnotatedImport.java:11:11: compiler.err.expected3: class, interface, enum\n@@ -6,1 +6,1 @@\n-AnnotatedImport.java:12:21: compiler.err.expected4: class, interface, enum, record\n+AnnotatedImport.java:12:21: compiler.err.expected3: class, interface, enum\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedImport.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedPackage1.java:9:17: compiler.err.expected4: class, interface, enum, record\n+AnnotatedPackage1.java:9:17: compiler.err.expected3: class, interface, enum\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage1.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedPackage2.java:9:12: compiler.err.expected4: class, interface, enum, record\n+AnnotatedPackage2.java:9:12: compiler.err.expected3: class, interface, enum\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658 8246774\n+ * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658\n@@ -32,0 +32,1 @@\n+ * @compile TestGetScopeResult.java\n@@ -561,1 +562,3 @@\n-            JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n+            List<String> options = List.of(\"--enable-preview\",\n+                                           \"-source\", System.getProperty(\"java.specification.version\"));\n+            JavacTask t = (JavacTask) c.getTask(null, fm, null, options, null,\n@@ -636,1 +639,3 @@\n-                JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n+                List<String> options = List.of(\"--enable-preview\",\n+                                               \"-source\", System.getProperty(\"java.specification.version\"));\n+                JavacTask t = (JavacTask) c.getTask(null, fm, null, options, null,\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorCantBeGeneric.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorCantThrowException.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorMethodCantBeStatic.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorReturnTypeDoesntMatch.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalCantHaveStrongerAccessPrivileges.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalCantInvokeOtherConstructor.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorArgumentMismatch.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorCantHaveReturn.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorCantHaveThrowsClause.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalMustNotDeclareTypeVariables.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n@@ -27,0 +29,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ConstructorWithSameErasureAsCanonical.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\/\/ key: compiler.warn.source.no.system.modules.path\n-\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/Expected3.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FirstInvocationMustBeAnotherConstructor.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalRecordComponentName.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IncorrectRecordDeclaration.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceInitializersNotAllowedInRecords.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\/\/ key: compiler.warn.source.no.system.modules.path\n-\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InterfaceNotAllowed.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidSuperTypeRecord.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ key: compiler.note.note\n@@ -31,0 +34,1 @@\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/KindnameRecord.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-\/\/ key: compiler.warn.source.no.system.modules.path\n-\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/LocalEnum.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MethodMustBePublic.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,2 @@\n-\/\/ key: compiler.err.feature.not.supported.in.source.plural\n-\/\/ key: compiler.warn.source.no.system.modules.path\n-\/\/ options: -source 15\n+\/\/ key: compiler.warn.preview.feature.use.plural\n+\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/Records.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsCanNotDeclareInstanceFields.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsCantDeclareComponentModifiers.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsComponentsCanNotDeclareCStyleArrays.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\/\/ key: compiler.note.preview.filename\n+\/\/ key: compiler.note.preview.recompile\n+\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsNotAllowedInInnerClasses.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+ * @compile\/fail\/ref=FauxEnum3.out -XDrawDiagnostics --enable-preview -source ${jdk.version} FauxEnum3.java\n","filename":"test\/langtools\/tools\/javac\/enum\/FauxEnum3.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-FauxEnum3.java:10:14: compiler.err.enum.types.not.extensible\n-1 error\n+FauxEnum3.java:11:14: compiler.err.enum.types.not.extensible\n+1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/enum\/FauxEnum3.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 5019609 8246774\n+ * @bug 5019609\n@@ -6,2 +6,2 @@\n- * @compile\/fail\/ref=LocalEnum.out -XDrawDiagnostics -source 15 LocalEnum.java\n- * @compile LocalEnum.java\n+ * @compile\/fail\/ref=LocalEnum.out -XDrawDiagnostics  LocalEnum.java\n+ * @compile --enable-preview -source ${jdk.version}  LocalEnum.java\n","filename":"test\/langtools\/tools\/javac\/enum\/LocalEnum.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-- compiler.warn.source.no.system.modules.path: 15\n@@ -4,1 +3,0 @@\n-1 warning\n","filename":"test\/langtools\/tools\/javac\/enum\/LocalEnum.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8192920 8204588 8246774\n+ * @bug 8192920 8204588\n@@ -302,1 +302,1 @@\n-            file + \":1: error: class, interface, enum, or record expected\\n\" +\n+            file + \":1: error: class, interface, or enum expected\\n\" +\n@@ -508,1 +508,1 @@\n-            file + \":1: error: class, interface, enum, or record expected\\n\" +\n+            file + \":1: error: class, interface, or enum expected\\n\" +\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584 8246774\n+ * @bug 7073631 7159445 7156633 8028235 8065753 8205418 8205913 8228451 8237041 8253584\n@@ -1002,1 +1002,1 @@\n-        String expectedErrors = \"Test.java:1:1: compiler.err.expected4: class, interface, enum, record\\n\" +\n+        String expectedErrors = \"Test.java:1:1: compiler.err.expected3: class, interface, enum\\n\" +\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-SingleCommaAnnotationValueFail.java:34:14: compiler.err.expected4: class, interface, enum, record\n+SingleCommaAnnotationValueFail.java:34:14: compiler.err.expected3: class, interface, enum\n","filename":"test\/langtools\/tools\/javac\/parser\/SingleCommaAnnotationValueFail.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -71,0 +70,1 @@\n+        System.out.println(System.getProperties());\n@@ -108,3 +108,5 @@\n-        List<String> expected = List.of(\n-                \"Note: field: i\",\n-                \"Note: record component: i\");\n+        List<String> expected = List.of(\"Note: field: i\",\n+                \"Note: record component: i\",\n+                \"Note: testQualifiedClassForProcessing\" + File.separator + \"src\" + File.separator\n+                     + \"R\" + File.separator + \"R.java uses preview language features.\",\n+                \"Note: Recompile with -Xlint:preview for details.\");\n@@ -114,1 +116,3 @@\n-                    .options(\"-processor\", QualifiedClassForProcessing.class.getName())\n+                    .options(\"-processor\", QualifiedClassForProcessing.class.getName(),\n+                            \"--enable-preview\",\n+                            \"-source\", Integer.toString(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/JavaxLangModelForRecords.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8241312 8246774\n+ * @bug 8241312\n@@ -50,1 +50,2 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null,\n+                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n","filename":"test\/langtools\/tools\/javac\/records\/ElementFilterRecordComponentTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8242293 8246774\n+ * @bug 8242293\n@@ -33,1 +33,2 @@\n- * @run main LocalStaticDeclarations\n+ * @compile --enable-preview -source ${jdk.version} LocalStaticDeclarations.java\n+ * @run main\/othervm --enable-preview LocalStaticDeclarations\n@@ -177,0 +178,1 @@\n+                .withOptions(new String[]{\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())})\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -55,1 +54,2 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null,\n+                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n","filename":"test\/langtools\/tools\/javac\/records\/MapAccessorToComponent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @test\n- * @bug 8250629 8252307 8247352 8241151 8246774\n+ * @test 8250629 8252307 8247352 8241151\n@@ -39,2 +38,3 @@\n- * @run testng\/othervm -DuseAP=false RecordCompilationTests\n- * @run testng\/othervm -DuseAP=true RecordCompilationTests\n+ * @compile --enable-preview -source ${jdk.version} RecordCompilationTests.java\n+ * @run testng\/othervm -DuseAP=false --enable-preview RecordCompilationTests\n+ * @run testng\/othervm -DuseAP=true --enable-preview RecordCompilationTests\n@@ -122,1 +122,11 @@\n-    private static String[] OPTIONS_WITH_AP = {\"-processor\", SimplestAP.class.getName()};\n+    \/\/ @@@ When records become a permanent feature, we don't need these any more\n+    private static String[] PREVIEW_OPTIONS = {\n+            \"--enable-preview\",\n+            \"-source\", Integer.toString(Runtime.version().feature())\n+    };\n+\n+    private static String[] PREVIEW_OPTIONS_WITH_AP = {\n+            \"--enable-preview\",\n+            \"-source\", Integer.toString(Runtime.version().feature()),\n+            \"-processor\", SimplestAP.class.getName()\n+    };\n@@ -143,3 +153,1 @@\n-        if (useAP) {\n-            setCompileOptions(OPTIONS_WITH_AP);\n-        }\n+        setCompileOptions(useAP ? PREVIEW_OPTIONS_WITH_AP : PREVIEW_OPTIONS);\n@@ -1005,1 +1013,1 @@\n-        assertFail(\"compiler.err.illegal.start.of.type\",\n+        assertOKWithWarning(\"compiler.warn.restricted.type.not.allowed.preview\",\n@@ -1057,0 +1065,2 @@\n+                \"--enable-preview\",\n+                \"-source\", Integer.toString(Runtime.version().feature()),\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+ * RecordMemberTests\n+ *\n@@ -28,3 +30,2 @@\n- * @bug 8246774\n- * @summary test several assertions on record classes members\n- * @run testng RecordMemberTests\n+ * @compile --enable-preview -source ${jdk.version} RecordMemberTests.java\n+ * @run testng\/othervm --enable-preview RecordMemberTests\n","filename":"test\/langtools\/tools\/javac\/records\/RecordMemberTests.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+ * VarargsRecordsTest\n+ *\n@@ -37,3 +39,2 @@\n- * @bug 8246774\n- * @summary test for varargs record components\n- * @run testng VarargsRecordsTest\n+ * @compile --enable-preview -source ${jdk.version} VarargsRecordsTest.java\n+ * @run testng\/othervm --enable-preview VarargsRecordsTest\n","filename":"test\/langtools\/tools\/javac\/records\/VarargsRecordsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @bug 8246774\n@@ -36,1 +35,1 @@\n- * @run main CheckRecordMembers\n+ * @run main\/othervm --enable-preview CheckRecordMembers\n@@ -106,0 +105,1 @@\n+                .withOptions(new String[]{\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())})\n","filename":"test\/langtools\/tools\/javac\/records\/mandated_members\/CheckRecordMembers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @bug 8246774\n@@ -28,2 +27,2 @@\n- * @compile Record.java\n- * @compile WriteReadTest.java\n+ * @compile --enable-preview -source ${jdk.version} Record.java\n+ * @compile --enable-preview -source ${jdk.version} WriteReadTest.java\n","filename":"test\/langtools\/tools\/javac\/records\/writeread\/WriteReadTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-import com.sun.tools.javac.tree.JCTree.JCMethodDecl;\n@@ -423,8 +422,0 @@\n-        @Override\n-        public void visitMethodDef(JCMethodDecl tree) {\n-            \/\/ ignore compact record constructors\n-            if ((tree.mods.flags & Flags.COMPACT_RECORD_CONSTRUCTOR) == 0) {\n-                super.visitMethodDef(tree);\n-            }\n-        }\n-\n","filename":"test\/langtools\/tools\/javac\/tree\/TreePosTest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8241312 8246774\n+ * @bug 8241312\n@@ -32,0 +32,1 @@\n+ * @run main PubApisTest\n@@ -50,1 +51,2 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null,\n+                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n","filename":"test\/langtools\/tools\/sjavac\/PubApisTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}