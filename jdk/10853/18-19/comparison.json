{"files":[{"patch":"@@ -78,14 +78,0 @@\n-<<<<<<< HEAD\n-<p>This creates a file named <code>jvm.vcxproj<\/code> in <code>ide\\hotspot-visualstudio<\/code> subfolder of the build output folder. The file can be opened in Visual Studio via <code>File -&gt; Open -&gt; Project\/Solution<\/code>.<\/p>\n-<h4 id=\"eclipse-cdt\">Eclipse CDT<\/h4>\n-<p>The make system can generate an Eclipse CDT Workspace that enables Eclipse indexing for the C and C++ sources throughout the entire codebase, as well as registering all common make targets to be runnable from the Eclipse explorer. This can be done after configuring by running:<\/p>\n-<pre class=\"shell\"><code>make eclipse-native-env<\/code><\/pre>\n-<p>After this is run, simply open and import the workspace in Eclipse through <code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and at <code>Import source<\/code> click on the directory <code>ide\\eclipse<\/code>, which can be found in the build output folder.<\/p>\n-<p>Setting up an Eclipse Workspace is relatively lightweight compared to other supported IDEs, but requires that your CDT installation has Cross GCC support enabled at the moment, even if you aren't cross compiling. The Visual C++ compiler is, at present, not supported as an indexer.<\/p>\n-<p>If desired, you can instead request make to only include indexing support for just the Java Virtual Machine instead of the entire native codebase, by running:<\/p>\n-<pre class=\"shell\"><code>make eclipse-hotspot-env<\/code><\/pre>\n-<p>A quick tip for development with Eclipse in general, which also applies to indexing the Java sources in the JDK (see below), is to enable dark mode before doing so. Trust us, it looks much better than Eclipse's default look and feel. ;)<\/p>\n-<p>If you think your particular Eclipse installation can handle the strain, the make system also supports generating a combined Java and C\/C++ Workspace for Eclipse which can then conveniently switch between Java and C\/C++ natures during development by running:<\/p>\n-<pre class=\"shell\"><code>make eclipse-full-env<\/code><\/pre>\n-<p>Do note that this generates all features that come with both Java and C\/C++ natures.<\/p>\n-=======\n@@ -96,1 +82,32 @@\n->>>>>>> upstream\/master\n+<h4 id=\"eclipse-cdt\">Eclipse CDT<\/h4>\n+<p>The make system can generate an Eclipse CDT Workspace that enables\n+Eclipse indexing for the C and C++ sources throughout the entire\n+codebase, as well as registering all common make targets to be runnable\n+from the Eclipse explorer. This can be done after configuring by\n+running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-native-env<\/code><\/pre>\n+<p>After this is run, simply open and import the workspace in Eclipse\n+through\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+at <code>Import source<\/code> click on the directory\n+<code>ide\\eclipse<\/code>, which can be found in the build output\n+folder.<\/p>\n+<p>Setting up an Eclipse Workspace is relatively lightweight compared to\n+other supported IDEs, but requires that your CDT installation has Cross\n+GCC support enabled at the moment, even if you aren't cross compiling.\n+The Visual C++ compiler is, at present, not supported as an indexer.<\/p>\n+<p>If desired, you can instead request make to only include indexing\n+support for just the Java Virtual Machine instead of the entire native\n+codebase, by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-hotspot-env<\/code><\/pre>\n+<p>A quick tip for development with Eclipse in general, which also\n+applies to indexing the Java sources in the JDK (see below), is to\n+enable dark mode before doing so. Trust us, it looks much better than\n+Eclipse's default look and feel. ;)<\/p>\n+<p>If you think your particular Eclipse installation can handle the\n+strain, the make system also supports generating a combined Java and\n+C\/C++ Workspace for Eclipse which can then conveniently switch between\n+Java and C\/C++ natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-full-env<\/code><\/pre>\n+<p>Do note that this generates all features that come with both Java and\n+C\/C++ natures.<\/p>\n@@ -115,12 +132,0 @@\n-<<<<<<< HEAD\n-<p>To use it, choose <code>File -&gt; Open...<\/code> in IntelliJ and select the folder where you ran the above script.<\/p>\n-<p>Next, configure the project SDK in IntelliJ. Open <code>File -&gt; Project Structure -&gt; Project<\/code> and select <code>build\/&lt;config&gt;\/images\/jdk<\/code> as the SDK to use.<\/p>\n-<p>In order to run the tests from the IDE, you can use the JTReg plugin. Instructions for building and using the plugin can be found <a href=\"https:\/\/github.com\/openjdk\/jtreg\/tree\/master\/plugins\/idea\">here<\/a>.<\/p>\n-<h4 id=\"eclipse\">Eclipse<\/h4>\n-<p>Eclipse JDT is a widely used Java IDE and has been for a very long time, being a popular choice alongside IntelliJ IDEA for Java development. Likewise, the JDK now includes support for developing its Java sources with Eclipse, which can be achieved by setting up a Java Workspace by running:<\/p>\n-<pre class=\"shell\"><code>make eclipse-java-env<\/code><\/pre>\n-<p>After the workspace has been generated you can import it in the same way as you would with Eclipse CDT:<\/p>\n-<p>Follow <code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and select the <code>ide\\eclipse<\/code> directory in the build output folder. The Java Workspace comes with an automatically generated Ant buildfile to match the CDT's managed make targets, which you can invoke by dragging onto the Eclipse Ant view in the sidebar.<\/p>\n-<p>A common bug with Eclipse is that running an Ant target will trigger the building of every single codebase it knows of. To avoid this pitfall and the headaches that come with it, head to:<\/p>\n-<p><code>External Tools Configurations -&gt; Ant Build -&gt; &lt;build.xml&gt; -&gt; Build<\/code> and make sure the <code>Build before launch<\/code> option is unchecked.<\/p>\n-=======\n@@ -135,1 +140,21 @@\n->>>>>>> upstream\/master\n+<h4 id=\"eclipse\">Eclipse<\/h4>\n+<p>Eclipse JDT is a widely used Java IDE and has been for a very long\n+time, being a popular choice alongside IntelliJ IDEA for Java\n+development. Likewise, the JDK now includes support for developing its\n+Java sources with Eclipse, which can be achieved by setting up a Java\n+Workspace by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-java-env<\/code><\/pre>\n+<p>After the workspace has been generated you can import it in the same\n+way as you would with Eclipse CDT:<\/p>\n+<p>Follow\n+<code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and\n+select the <code>ide\\eclipse<\/code> directory in the build output\n+folder. The Java Workspace comes with an automatically generated Ant\n+buildfile to match the CDT's managed make targets, which you can invoke\n+by dragging onto the Eclipse Ant view in the sidebar.<\/p>\n+<p>A common bug with Eclipse is that running an Ant target will trigger\n+the building of every single codebase it knows of. To avoid this pitfall\n+and the headaches that come with it, head to:<\/p>\n+<p><code>External Tools Configurations -&gt; Ant Build -&gt; &lt;build.xml&gt; -&gt; Build<\/code>\n+and make sure the <code>Build before launch<\/code> option is\n+unchecked.<\/p>\n","filename":"doc\/ide.html","additions":53,"deletions":28,"binary":false,"changes":81,"status":"modified"}]}