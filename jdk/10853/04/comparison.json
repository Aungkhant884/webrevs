{"files":[{"patch":"@@ -47,0 +47,11 @@\n+<h4 id=\"eclipse-cdt\">Eclipse CDT<\/h4>\n+<p>The make system can generate an Eclipse CDT Workspace that enables Eclipse indexing for the C and C++ sources throughout the entire codebase, as well as registering all common make targets to be runnable from the Eclipse explorer. This can be done after configuring by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-native-env<\/code><\/pre>\n+<p>After this is run, simply open and import the workspace in Eclipse through <code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and at <code>Import source<\/code> click on the directory <code>ide\\eclipse<\/code>, which can be found in the build output folder.<\/p>\n+<p>Setting up an Eclipse Workspace is relatively lightweight compared to other supported IDEs, but requires that your CDT installation has Cross GCC support enabled at the moment, even if you aren't cross compiling. The Visual C++ compiler is, at present, not supported as an indexer.<\/p>\n+<p>If desired, you can instead request make to only include indexing support for just the Java Virtual Machine instead of the entire native codebase, by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-hotspot-env<\/code><\/pre>\n+<p>A quick tip for development with Eclipse in general, which also applies to indexing the Java sources in the JDK (see below), is to enable dark mode before doing so. Trust us, it looks much better than Eclipse's default look and feel. ;)<\/p>\n+<p>If you think your particular Eclipse installation can handle the strain, the make system also supports generating a combined Java and C\/C++ Workspace for Eclipse which can then conveniently switch between Java and C\/C++ natures during development by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-full-env<\/code><\/pre>\n+<p>Do note that this generates all features that come with both Java and C\/C++ natures.<\/p>\n@@ -59,0 +70,7 @@\n+<h4 id=\"eclipse\">Eclipse<\/h4>\n+<p>Eclipse JDT is a widely used Java IDE and has been for a very long time, being a popular choice alongside IntelliJ IDEA for Java development. Likewise, the JDK now includes support for developing its Java sources with Eclipse, which can be achieved by setting up a Java Workspace by running:<\/p>\n+<pre class=\"shell\"><code>make eclipse-java-env<\/code><\/pre>\n+<p>After the workspace has been generated you can import it in the same way as you would with Eclipse CDT:<\/p>\n+<p>Follow <code>File -&gt; Import -&gt; Projects from Folder or Archive<\/code> and select the <code>ide\\eclipse<\/code> directory in the build output folder. The Java Workspace comes with an automatically generated Ant buildfile to match the CDT's managed make targets, which you can invoke by dragging onto the Eclipse Ant view in the sidebar.<\/p>\n+<p>A common bug with Eclipse is that running an Ant target will trigger the building of every single codebase it knows of. To avoid this pitfall and the headaches that come with it, head to:<\/p>\n+<p><code>External Tools Configurations -&gt; Ant Build -&gt; &lt;build.xml&gt; -&gt; Build<\/code> and make sure the <code>Build before launch<\/code> option is unchecked.<\/p>\n","filename":"doc\/ide.html","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,0 +59,45 @@\n+#### Eclipse CDT\n+\n+The make system can generate an Eclipse CDT Workspace that enables Eclipse\n+indexing for the C and C++ sources throughout the entire codebase, as well as\n+registering all common make targets to be runnable from the Eclipse explorer.\n+This can be done after configuring by running:\n+\n+```shell\n+make eclipse-native-env\n+```\n+\n+After this is run, simply open and import the workspace in Eclipse through\n+`File -> Import -> Projects from Folder or Archive` and at `Import source`\n+click on the directory `ide\\eclipse`, which can be found in the build output\n+folder.\n+\n+Setting up an Eclipse Workspace is relatively lightweight compared to other\n+supported IDEs, but requires that your CDT installation has Cross GCC support\n+enabled at the moment, even if you aren't cross compiling. The Visual C++\n+compiler is, at present, not supported as an indexer.\n+\n+If desired, you can instead request make to only include indexing support for\n+just the Java Virtual Machine instead of the entire native codebase, by running:\n+\n+```shell\n+make eclipse-hotspot-env\n+```\n+\n+A quick tip for development with Eclipse in general, which also applies to\n+indexing the Java sources in the JDK (see below), is to enable dark mode\n+before doing so. Trust us, it looks much better than Eclipse's default look\n+and feel. ;)\n+\n+If you think your particular Eclipse installation can handle the strain, the\n+make system also supports generating a combined Java and C\/C++ Workspace for\n+Eclipse which can then conveniently switch between Java and C\/C++ natures\n+during development by running:\n+\n+```shell\n+make eclipse-full-env\n+```\n+\n+Do note that this generates all features that come with both Java and C\/C++\n+natures.\n+\n@@ -99,0 +144,26 @@\n+\n+#### Eclipse\n+\n+Eclipse JDT is a widely used Java IDE and has been for a very long time, being\n+a popular choice alongside IntelliJ IDEA for Java development. Likewise, the\n+JDK now includes support for developing its Java sources with Eclipse, which\n+can be achieved by setting up a Java Workspace by running:\n+\n+```shell\n+make eclipse-java-env\n+```\n+\n+After the workspace has been generated you can import it in the same way as\n+you would with Eclipse CDT:\n+\n+Follow `File -> Import -> Projects from Folder or Archive` and select the\n+`ide\\eclipse` directory in the build output folder. The Java Workspace comes with\n+an automatically generated Ant buildfile to match the CDT's managed make targets,\n+which you can invoke by dragging onto the Eclipse Ant view in the sidebar.\n+\n+A common bug with Eclipse is that running an Ant target will trigger the building\n+of every single codebase it knows of. To avoid this pitfall and the headaches\n+that come with it, head to:\n+\n+`External Tools Configurations -> Ant Build -> <build.xml> -> Build` and make sure\n+the `Build before launch` option is unchecked.\n\\ No newline at end of file\n","filename":"doc\/ide.md","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -260,0 +260,19 @@\n+$(eval $(call SetupTarget, eclipse-java-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-java, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-hotspot-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-hotspot, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-native-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+    TARGET := workspace-native, \\\n+))\n+\n+$(eval $(call SetupTarget, eclipse-full-env, \\\n+    MAKEFILE := ide\/eclipse\/CreateWorkspace, \\\n+))\n+\n","filename":"make\/Main.gmk","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,341 @@\n+#\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+default: all\n+\n+include $(SPEC)\n+include MakeBase.gmk\n+include MakeIO.gmk\n+include Utils.gmk\n+include Modules.gmk\n+\n+IDE_OUTPUTDIR := $(OUTPUTDIR)\/ide\/eclipse\n+\n+CLASSPATH_FILE := $(IDE_OUTPUTDIR)\/.classpath\n+WORKSPACE_FILE := $(IDE_OUTPUTDIR)\/.project\n+NATIVE_FILE := $(IDE_OUTPUTDIR)\/.cproject\n+ANT_BUILDFILE := $(IDE_OUTPUTDIR)\/build.xml\n+\n+# FixPath already removes $(FIXPATH) automatically, but if we rely on FixPath\n+# to do it for us dir won't be able to handle the converted path (if on Windows).\n+# Reversing the order causes dir to mangle the preceeding $(FIXPATH) which breaks\n+# the ability of FixPath to remove it, so it has to be manually removed here.\n+# This currently does not support Visual C++\n+COMPILER_PATH := $(call FixPath, $(dir $(patsubst $(FIXPATH), , $(CC))))\n+\n+# Sidestep annoying issue of WSL path conversion not working properly with true\n+# Unix paths. Eclipse can't run the WSL make by itself anyway, even if we could\n+# properly convert the path.\n+ifeq ($(call isBuildOsEnv, windows.wsl1 windows.wsl2), true)\n+  MAKE_EXE := wsl.exe $(MAKE)\n+else\n+  MAKE_EXE := $(call FixPath, $(MAKE))\n+endif\n+\n+# Random number generation, with the amount of specified digits\n+# No need to check if the parameter passed is a valid number, the shell will\n+# be more than happy to complain if it isn't ;)\n+RandomDigits = \\\n+    $(shell od -An -N8 -d \/dev\/urandom | sed -e 's| ||g' -e 's|\\(.\\{$(strip $1)\\}\\).*|\\1|')\n+\n+# Modified version of utility from JdkNativeCompilation.gmk\n+# The full path could be omitted, but it was chosen not to so wildcard\n+# can work properly for existing directories. The pathsubst below that\n+# this necessitates is a relatively small price to pay.\n+FindModuleNativeDirs = \\\n+  $(call uniq, $(wildcard \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS_TYPE)\/native \\\n+      $(TOPDIR)\/src\/$(strip $1)\/share\/native))\n+\n+JAVA_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+    $(patsubst $(TOPDIR)\/%,%,$(filter-out $(OUTPUTDIR)%, \\\n+    $(call FindModuleSrcDirs, $(module))))))\n+\n+NATIVE_DIRS := $(strip $(foreach module, $(call FindAllModules), \\\n+    $(patsubst $(TOPDIR)\/%,%,$(call FindModuleNativeDirs, $(module)))))\n+\n+EmitEmptyLine = $(call AppendFile,,$(1))\n+\n+# Important note: We only run strip on our own relative source directories\n+# Absolute paths should not be passed to strip!\n+\n+EmitLinkedDirectory = \\\n+    $(call AppendFile,        <link>, $(WORKSPACE_FILE)) \\\n+    $(call AppendFile,            <name>$(strip $(1))<\/name>, $(WORKSPACE_FILE)) \\\n+    $(call AppendFile,            <type>2<\/type>, $(WORKSPACE_FILE)) \\\n+    $(call AppendFile,            <location>$(subst \\\\,\/,$(call FixPath, $(2)))<\/location>, $(WORKSPACE_FILE)) \\\n+    $(call AppendFile,        <\/link>, $(WORKSPACE_FILE))\n+\n+EmitNativeDir = \\\n+    $(call AppendFile,                        <entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"$(strip $(1))\"\/>, $(NATIVE_FILE))\n+\n+# This is so named because Eclipse is able to create virtual make targets that call\n+# to the real target which can have a different name. For now we don't need to use\n+# this functionality that Eclipse provides.\n+EmitMatchingMakeTarget = \\\n+    $(call AppendFile,            <target name=\"$(strip $(1))\" path=\"\" targetID=\"org.eclipse.cdt.build.MakeTargetBuilder\">, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <buildCommand>$(MAKE_EXE)<\/buildCommand>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <buildArguments>-C $(call FixPath, $(TOPDIR))<\/buildArguments>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <buildTarget>$(strip $(1))<\/buildTarget>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <stopOnError>true<\/stopOnError>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <useDefaultCommand>false<\/useDefaultCommand>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,                <runAllBuilders>true<\/runAllBuilders>, $(NATIVE_FILE)) \\\n+    $(call AppendFile,            <\/target>, $(NATIVE_FILE))\n+\n+# Similar reasoning to EmitMatchingMakeTarget\n+EmitMatchingAntTarget = \\\n+    $(call AppendFile,    <target name=\"$(strip $(1))\">, $(ANT_BUILDFILE)) \\\n+    $(call AppendFile,        <call-make args = \"$(strip $(1))\"\/>, $(ANT_BUILDFILE)) \\\n+    $(call AppendFile,    <\/target>, $(ANT_BUILDFILE)) \\\n+    $(call EmitEmptyLine, $(ANT_BUILDFILE))\n+\n+################################################################################\n+# Define a native toolchain configuration that can be used by\n+# SetupNativeCompilation calls\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# Remaining parameter(s) are named arguments:\n+#   NATURE - Which Eclipse Workspace nature to generate for the Workspace. Can\n+#       be one of JAVA, HOTSPOT, NATIVE, or FULL.\n+SetupEclipseWorkspace = $(NamedParamsMacroTemplate)\n+define SetupEclipseWorkspaceBody\n+\n+  ifeq ($$($1_NATURE), )\n+    $$(error No nature specified for Eclipse Workspace, cannot continue)\n+  endif\n+\n+  ifeq ($$(findstring $$($1_NATURE), JAVA HOTSPOT NATIVE FULL), )\n+    $$(error Unrecognised nature $$($1_NATURE) specified for Eclipse Workspace)\n+  endif\n+\n+  $$(shell mkdir -p $(IDE_OUTPUTDIR))\n+\n+  # Start with the Workspace file first\n+  $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\"?>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,<projectDescription>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <name>Java SE<\/name>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <comment><\/comment>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <projects>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <\/projects>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <buildSpec>, $(WORKSPACE_FILE))\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+    $$(call AppendFile,        <buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <name>org.eclipse.cdt.managedbuilder.core.genmakebuilder<\/name>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <triggers>clean$$(COMMA)full$$(COMMA)incremental$$(COMMA)<\/triggers>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <\/arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <\/buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <buildCommand>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder<\/name>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <triggers>full$$(COMMA)incremental$$(COMMA)<\/triggers>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,            <\/arguments>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <\/buildCommand>, $(WORKSPACE_FILE))\n+  endif\n+\n+  $$(call AppendFile,    <\/buildSpec>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <natures>, $(WORKSPACE_FILE))\n+\n+  ifneq ($$(findstring $$($1_NATURE), JAVA FULL), )\n+\n+    $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\"?>, $(CLASSPATH_FILE))\n+    $$(call AppendFile,<classpath>, $(CLASSPATH_FILE))\n+\n+    # Eclipse crashes when processing multiple module-info.java files\n+    # This is an annoying bug that has not been fixed for some time now\n+    $$(foreach src,$(JAVA_DIRS),$$(call AppendFile,    <classpathentry excluding=\"module-info.java|module-info.java.extra\" kind=\"src\" path=\"$$(src)\"\/>, $(CLASSPATH_FILE)))\n+\n+    $$(call AppendFile,<\/classpath>, $(CLASSPATH_FILE))\n+\n+    $$(call AppendFile,        <nature>org.eclipse.jdt.core.javanature<\/nature>, $(WORKSPACE_FILE))\n+\n+    $$(call WriteFile,<project name=\"Java SE\">, $(ANT_BUILDFILE))\n+\n+    $$(call EmitEmptyLine, $(ANT_BUILDFILE))\n+    $$(call AppendFile,    <macrodef name=\"call-make\">, $(ANT_BUILDFILE))\n+    $$(call AppendFile,        <attribute name=\"args\"\/>, $(ANT_BUILDFILE))\n+    $$(call AppendFile,        <sequential>, $(ANT_BUILDFILE))\n+    $$(call AppendFile,            <exec executable=\"$(MAKE_EXE)\" dir=\"$$(call FixPath, $(TOPDIR))\" failonerror=\"true\">, $(ANT_BUILDFILE))\n+    $$(call AppendFile,                <arg line=\"@{args}\"\/>, $(ANT_BUILDFILE))\n+    $$(call AppendFile,            <\/exec>, $(ANT_BUILDFILE))\n+    $$(call AppendFile,        <\/sequential>, $(ANT_BUILDFILE))\n+    $$(call AppendFile,    <\/macrodef>, $(ANT_BUILDFILE))\n+    $$(call EmitEmptyLine, $(ANT_BUILDFILE))\n+\n+    # For now just expose the same targets we do with the regular make system\n+    $$(call EmitMatchingAntTarget, update-build-docs)\n+    $$(call EmitMatchingAntTarget, docs)\n+    $$(call EmitMatchingAntTarget, gensrc)\n+    $$(call EmitMatchingAntTarget, gendata)\n+    $$(call EmitMatchingAntTarget, copy)\n+    $$(call EmitMatchingAntTarget, java)\n+    $$(call EmitMatchingAntTarget, launchers)\n+    $$(call EmitMatchingAntTarget, libs)\n+    $$(call EmitMatchingAntTarget, hotspot)\n+    $$(call EmitMatchingAntTarget, jdk)\n+    $$(call EmitMatchingAntTarget, product-images)\n+    $$(call EmitMatchingAntTarget, bootcycle-images)\n+    $$(call EmitMatchingAntTarget, all-images)\n+    $$(call EmitMatchingAntTarget, test-image)\n+    $$(call EmitMatchingAntTarget, clean)\n+\n+    $$(call AppendFile,<\/project>, $(ANT_BUILDFILE))\n+\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.core.cnature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.core.ccnature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature<\/nature>, $(WORKSPACE_FILE))\n+    $$(call AppendFile,        <nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature<\/nature>, $(WORKSPACE_FILE))\n+\n+    # Now emit the native file\n+    $$(call WriteFile,<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>, $(NATIVE_FILE))\n+    $$(call AppendFile,<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"scannerConfiguration\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"\/>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.core.settings\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <cconfiguration id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 10)\">, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"\/>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 10)\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Java SE\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                <externalSettings\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                <extensions>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                <\/extensions>, $(NATIVE_FILE))\n+    $$(call AppendFile,            <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,            <storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                <configuration buildProperties=\"\" description=\"\" id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 10)\" name=\"Java SE\" parent=\"org.eclipse.cdt.build.core.emptycfg\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <folderInfo id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 10).$(call RandomDigits, 9)\" name=\"\/\" resourcePath=\"\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                        <toolChain id=\"cdt.managedbuild.toolchain.gnu.cross.base.$(call RandomDigits, 9)\" name=\"Cross GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.cross.base\">, $(NATIVE_FILE))\n+    $$(call AppendFile,                            <option id=\"cdt.managedbuild.option.gnu.cross.path.$(call RandomDigits, 9)\" name=\"Path\" superClass=\"cdt.managedbuild.option.gnu.cross.path\" value=\"$(COMPILER_PATH)\" valueType=\"string\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                            <builder command=\"$(MAKE_EXE)\" arguments=\"-C $(call FixPath, $(TOPDIR))\" id=\"cdt.managedbuild.builder.gnu.cross.$(call RandomDigits, 9)\" incrementalBuildTarget=\"jdk\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"false\" superClass=\"cdt.managedbuild.builder.gnu.cross\"\/>, $(NATIVE_FILE))\n+    $$(call AppendFile,                        <\/toolChain>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <\/folderInfo>, $(NATIVE_FILE))\n+    $$(call AppendFile,                    <sourceEntries>, $(NATIVE_FILE))\n+\n+    # This is always emitted, no matter which of the 3 natures were selected\n+    $$(call EmitNativeDir, src\/hotspot)\n+\n+    ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+      $$(foreach src,$(NATIVE_DIRS),$$(call EmitNativeDir, $$(src)))\n+    endif\n+\n+    $$(call AppendFile,                    <\/sourceEntries>, $(NATIVE_FILE))\n+    $$(call AppendFile,                <\/configuration>, $(NATIVE_FILE))\n+    $$(call AppendFile,            <\/storageModule>, $(NATIVE_FILE))\n+    $$(call AppendFile,        <\/cconfiguration>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call EmitEmptyLine, $(NATIVE_FILE))\n+    $$(call AppendFile,    <storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\">, $(NATIVE_FILE))\n+    $$(call AppendFile,        <buildTargets>, $(NATIVE_FILE))\n+\n+    # Omitted: reconfigure and dist-clean\n+    # The former is sensitive to the make, shell and environment used\n+    # The latter would destroy the virtual workspace\n+    $$(call EmitMatchingMakeTarget, update-build-docs)\n+    $$(call EmitMatchingMakeTarget, docs)\n+    $$(call EmitMatchingMakeTarget, gensrc)\n+    $$(call EmitMatchingMakeTarget, gendata)\n+    $$(call EmitMatchingMakeTarget, copy)\n+    $$(call EmitMatchingMakeTarget, java)\n+    $$(call EmitMatchingMakeTarget, launchers)\n+    $$(call EmitMatchingMakeTarget, libs)\n+    $$(call EmitMatchingMakeTarget, hotspot)\n+    $$(call EmitMatchingMakeTarget, jdk)\n+    $$(call EmitMatchingMakeTarget, product-images)\n+    $$(call EmitMatchingMakeTarget, bootcycle-images)\n+    $$(call EmitMatchingMakeTarget, all-images)\n+    $$(call EmitMatchingMakeTarget, test-image)\n+    $$(call EmitMatchingMakeTarget, clean)\n+\n+    $$(call AppendFile,        <\/buildTargets>, $(NATIVE_FILE))\n+    $$(call AppendFile,    <\/storageModule>, $(NATIVE_FILE))\n+    $$(call AppendFile,<\/cproject>, $(NATIVE_FILE))\n+\n+  endif\n+\n+  $$(call AppendFile,    <\/natures>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,    <linkedResources>, $(WORKSPACE_FILE))\n+\n+  ifneq ($$(findstring $$($1_NATURE), JAVA FULL), )\n+    $$(foreach src,$(JAVA_DIRS),$$(call EmitLinkedDirectory, $$(src),$(TOPDIR)\/$$(src)))\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), HOTSPOT NATIVE FULL), )\n+\n+    # If CDT support was indicated there's no harm in including make, the cost of\n+    # indexing the make system is virtually non-existent\n+    $$(call EmitLinkedDirectory, make,$(TOPDIR)\/make)\n+\n+    $$(call EmitLinkedDirectory, src\/hotspot,$(TOPDIR)\/src\/hotspot)\n+\n+  endif\n+\n+  ifneq ($$(findstring $$($1_NATURE), NATIVE FULL), )\n+    $$(foreach src,$(NATIVE_DIRS),$$(call EmitLinkedDirectory, $$(src),$(TOPDIR)\/$$(src)))\n+  endif\n+\n+  $$(call AppendFile,    <\/linkedResources>, $(WORKSPACE_FILE))\n+  $$(call AppendFile,<\/projectDescription>, $(WORKSPACE_FILE))\n+\n+endef\n+\n+workspace-java:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := JAVA, \\\n+\t))\n+\n+workspace-hotspot:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := HOTSPOT, \\\n+\t))\n+\n+workspace-native:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := NATIVE, \\\n+\t))\n+\n+workspace-full:\n+\t$(eval $(call SetupEclipseWorkspace, SETUP_WORKSPACE, \\\n+\t    NATURE := FULL, \\\n+\t))\n+\n+all: workspace-full\n\\ No newline at end of file\n","filename":"make\/ide\/eclipse\/CreateWorkspace.gmk","additions":341,"deletions":0,"binary":false,"changes":341,"status":"added"}]}