[{"commit":{"message":"Update according to reviewers' feedback (Part-2)."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"cad42d79667775afefac7cfaf80b63575f71465b"},{"commit":{"message":"Add threadump support for AsyncLog Thread.\n\nwhen jstack requests to dump threads:\n\"AsyncLog Thread\" os_prio=0 cpu=239.26ms elapsed=52.13s tid=0x00007fb814c76ec0 nid=0x9023 runnable\n\nWhen jvm crash, thread dump is written to hs_err_pid$pid.log.\n0x00007fa8d824e450 Thread \"AsyncLog Thread\" [stack: 0x00007fa880d44000,0x00007fa880e44000] [id=126290]"},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp"}],"sha":"2381ba19e854ef86cb2072f61b29ee94383514d8"},{"commit":{"message":"Update according to reviewer's feedback."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"348edfc0e822677aec20269d4553fb8f9f9cd589"},{"commit":{"message":"Implement the new discard policy: drop the incoming message.\n\nThis patch also fix a bug. meta messages append to the temp logs instead\nof directly calling output->write_blocking(). This guranatees logsites are non-blocking."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"test\/hotspot\/jtreg\/gtest\/AsyncLogGtest.java"}],"sha":"be83aafdcb8b177bb830aa50939060ec13e1e1e9"},{"commit":{"message":"refactor code and update per reviewers' feedback.\n\n1. change classname from logAsyncFlusher to logAsyncWriter.\n2. completely remove Terminate(), which is not safe.\n3. refactor Initialize() and ensure it can handle concurrent synchronuous logging writers.\n4. refactor gtest. make sure the 1st parameter of EXPECT\/ASSERT is the epxected value.\n5. add a GTestWrapper in jtreg, which ran the gtest in async mode."},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/logging\/logOutputList.hpp"},{"filename":"src\/hotspot\/share\/logging\/logTagSet.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"},{"filename":"test\/hotspot\/jtreg\/gtest\/AsyncLogGtest.java"}],"sha":"e19e90a8b3c10cc770e97441c925c3d04025f18b"},{"commit":{"message":"Replace Mutex with Semaphore.\n\nUse 2 sempahores to replace the Monitor*.\nMonitor in hotspot is combination of pthread_mutex_t and pthread_cond_t.\n_lock has the initial value 1. it acts as a 'mutex'.\n_sem has the initial value 0, which denotes how many messages have enqueued."},"files":[],"sha":"cade304605daae1642474b7ef8ddebdba308af98"},{"commit":{"message":"Refactor Initialize() and Termiante().\n\nDefine they are 2 synchronization points. async logging exclusively takes\nover from synchronous logging between 2 points."},"files":[],"sha":"8f7b3b1fd1361e36d3d6526f8ea9ec4ada696b77"},{"commit":{"message":"Fix build on Windows.\n\nIt seems that headers on Windows define WAIT_TIMEOUT somewhere. rename it."},"files":[],"sha":"7df8b1eda389f1058b214df0d547e374994e5663"},{"commit":{"message":"Update based on the feedbacks from reviwers.\n\nSince I have incorporated in JDK-8266503, store LogDecoration by value in\nAsyncLogMessage.\nRemove AsyncLogMessage::destroy()\nchange dropped message counters to uint32_t.\nAdd more comments."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"908d2a3654fa7471d9f23bc16febd8ec0baf503d"},{"commit":{"message":"Merge branch 'master' into JDK-8229517"},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logTagSet.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"}],"sha":"e3ee430b05b430073294678930d639a22787e534"},{"commit":{"message":"Change option AsyncLogBufferEntries to AsyncLogBufferSize.\n\nAsyncLogBufferSize is the memory budget in bytes for Asynchronous Logging.\nUser can specify it in shorthand form. eg. -XX:AsyncLogBufferSize=10M."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logTagSet.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"c67d74e81f8a208172f85449b9ccc78a64bec3b7"},{"commit":{"message":"Use LogTagSetMapping<LogTag::__NO_TAG>::tagset() instead of NULL pointer."},"files":[{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"}],"sha":"1d5e540769823efb0439399a41e2f45d674e9b09"},{"commit":{"message":"Implement the global option -Xlog:async per CSR.\n\nThe old options -XX:+AsyncLogging and the output option are both removed.\nThis patch also deliver the zero-cost promise. ie. No AsyncLog thread will be\nlaunched if async_mode is not eanbled."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"98ae33fb6f1b65b5bae6c62d4cac50a72abebfc8"},{"commit":{"message":"Reimplement Accurate Decorations for AsyncLogging.\n\nLogDecorations defines a copy constructutor. Each log message copys it\nonce."},"files":[{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"}],"sha":"e035ee3a2706059af3fdeb12cbbc31ac21e37903"},{"commit":{"message":"Revert \"Accurate Decorations for AsyncLogging.\"\n\nThis reverts commit 1f06be3126f829055aff3720aea7e82544fd0c3a."},"files":[{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"}],"sha":"78d8f2c63f564b5be454c467afedaae5ec0bb92f"},{"commit":{"message":"Fix bugs\/style\/typo based on reviewers' feedbacks."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"e2d6f9e04b968f7bfbe07e8aa2b2a4d5f9bb5a9d"},{"commit":{"message":"Accurate Decorations for AsyncLogging.\n\nA lightweight LogDecorationRef is created to keep LogDecorations at\nlogging site. It uses refcnt to keep track multiple usage and\nautomatically clean up. If no decorator is in use, no LogDecorationRef\nis created."},"files":[{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"}],"sha":"1f06be3126f829055aff3720aea7e82544fd0c3a"},{"commit":{"message":"Refactor LogAsyncFlusher::abort()\n\nThis change makes sure LogAsyncFlusher::abort() is lock-less.\nTherefore, it's not subject to mutex rank issue. Newly added\ngtest(mutex_lock_access_leaf)  may deliberately trigger SIGSEGV\nwhile holding access rank mutex, so abort() must be lockless."},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"}],"sha":"4cf4a57fb57bf8f5947e96c530333b969bb7b13b"},{"commit":{"message":"Merge branch 'master' into JDK-8229517"},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.hpp"},{"filename":"src\/hotspot\/share\/utilities\/hashtable.cpp"}],"sha":"13c1c2b158fff513ab45a4a4e090c6f91b1cbb76"},{"commit":{"message":"Fix a race condition bug on LogAsyncFlusher termination.\n\nI saw intermitent crashes of java with the following arguments.\n-Xlog:'all=trace:file=hotspot-x.log:level,tags:filecount=0,async=true' --version\n\nThe root cause is that there is a race condition between main thread _exit and\nLogAsyncFlusher::run. This patch added a synchronization using\nTerminator_lock in LogAsyncFlusher::terminate. This guranatees that no\nlog entry will emit when main thread is exiting."},"files":[],"sha":"b2ad511cae438af1fd42e34af5bb3757f88a5bea"},{"commit":{"message":"Resolve rank conflict between tty_lock and LogAsyncFlusher's _lock.\n\nLogAsyncFlusher::_lock ranks Mutex::tty on purpose, which is same as tty_lock.\nIdeally, they are orthogonal. In reality, it's possible that a thread emits logs\nto a log file while (mistakenly) holding tty_lock. ttyUnlocker is placed in enqueue\nmember functions to resolve conflicts betwen them.\n\nThis patch fixed the jtreg test: runtime\/logging\/RedefineClasses.java and the\nfull brunt logging -Xlog:'all:file=hotspot.log::async=true'"},"files":[],"sha":"11c2b7a1cb32134a70edeac7890e53b07fd0a7af"},{"commit":{"message":"Remove LogAsyncInterval completely\n\nIt was used as a timeout parameter of the monitor. Now the monitor is waked up\nwhen the occupancy of asynclog buffer is more 3\/4."},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"edb15c61ce4b4588869e63494efffd8f37e6bd79"},{"commit":{"message":"Support Jcmd pid VM.log disable\n\nThis patch also supports to add a new output dynamically. If\noutput_option specifies async=true, the new output will use\nasynchronous writing.\n\nCurrently jcmd VM.log prohibts users from changing established\noutput_options in runtime. users can disable them all and then\nrecreate them with the new output_options."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"}],"sha":"2bd104ff211f118d19643afe40925f1773124c95"},{"commit":{"message":"Fix build issue with `--disable-precompiled-headers`"},"files":[],"sha":"3d74a32be0f73ae4a7985d311774724c202e72b6"},{"commit":{"message":"Inject the number of dropped messages since last dumpping.\n\nEach LogOutput has an independent counter. The out-of-band message\n\"[number] messages dropped...\" will be dumped into its corresponding\nLogOutput."},"files":[{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/utilities\/hashtable.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"f453d03f3c5cd820169029c0a9c94c434dd23a42"},{"commit":{"message":"Revert \"fix runtime\/logging\/RedefineClasses.java crashed with -XX:+AsyncLogging\"\n\nThis reverts commit 81b2a0cb2a6cf57b1cd0baacdf8c0419f14819b4.\n\nThis problem is sidetracked by JDK-8265102."},"files":[],"sha":"54aadfaf221dd826ca54a3834193b18d99f368e3"},{"commit":{"message":"fix runtime\/logging\/RedefineClasses.java crashed with -XX:+AsyncLogging\n\nnmethod::print(outputStream* st) should not obtain tty_lock by assuming\nst is defaultStream. It could be logStream as well.\n\nCurrently, AyncLogFlusher::_lock has the same rank of tty_lock.\nhttps:\/\/issues.amazon.com\/issues\/JVM-563"},"files":[],"sha":"81b2a0cb2a6cf57b1cd0baacdf8c0419f14819b4"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nMove LogAsyncFlusher from WatcherThread to a standalone NonJavaThread\nhttps:\/\/issues.amazon.com\/issues\/JVM-565"},"files":[{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"}],"sha":"9211121c7afeb7a9fe602fd2a4d20bd98ddb1569"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nre-introduce the global option AsyncLogging."},"files":[{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"09c058d176ed0f2c50cd97401f7c95bc8e0fa18d"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nadd a constraint for the option LogAsyncInterval."},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"bcefbecb97ee9db8cdd0f3cc55251693b6b77a27"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nLogMessage supports async_mode.\nremove the option AsyncLogging\nrenanme  the option GCLogBufferSize to AsyncLogBufferSize\nmove drop_log() to LogAsyncFlusher."},"files":[{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"760ec76685652dd41db3e41aef169fd6619b655b"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\ncorrect assertion."},"files":[{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"}],"sha":"28718943acd1744ceeaaf6eecd8ed8b8c75873b8"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nfix a warning from c++11: \"The generation of the implicitly-defined copy\nassignment operator is deprecated if T has a user-declared destructor or\nuser-declared copy constructor.\""},"files":[{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"}],"sha":"e23657f378d6a7b3b2db8c4596c7ca7fb794a1ab"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nAdd an option async for the file-based outputs. The option conforms to\noutput-option in JEP-158."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"a3945d0f474b51cc52712d79715e03f681578204"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging"},"files":[{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"06975875592ef50ba32f40b3851bca42d9b88608"}]