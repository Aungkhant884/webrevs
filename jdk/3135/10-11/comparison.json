{"files":[{"patch":"@@ -42,1 +42,1 @@\n-  if (_buffer.size() >= AsyncLogBufferEntries)  {\n+  if (_buffer.size() >= _buffer_max_size)  {\n@@ -63,1 +63,1 @@\n-  assert(_buffer.size() < AsyncLogBufferEntries, \"_buffer is over-sized.\");\n+  assert(_buffer.size() < _buffer_max_size, \"_buffer is over-sized.\");\n@@ -68,1 +68,1 @@\n-  if (sz > (AsyncLogBufferEntries >> 2) * 3 ) {\n+  if (sz > (_buffer_max_size >> 2) * 3 ) {\n@@ -104,0 +104,3 @@\n+\n+  log_info(logging)(\"The maximum entries of AsyncLogBuffer: \" SIZE_FORMAT \", estimated memory use: \" SIZE_FORMAT \" bytes\",\n+                    _buffer_max_size, AsyncLogBufferSize);\n","filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -146,0 +146,5 @@\n+  \/\/ The memory use of each AsyncLogMessage(payload) consist of itself, a logDecoration object\n+  \/\/ and a variable-length c-string message.\n+  \/\/ A normal logging  message is smaller than vwrite_buffer_size, which is defined in logtagset.cpp\n+  const size_t _buffer_max_size = {AsyncLogBufferSize \/ (sizeof(AsyncLogMessage) + sizeof(LogDecorations) + vwrite_buffer_size)};\n+\n","filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -557,3 +557,3 @@\n-  out->print_cr(\"  All log messages write to an intermediate buffer first defined by AsyncLogBufferEntries \"\n-                \" and then will be flushed to the corresponding log outputs by a standalone thread. Write operation at logsites \"\n-                \" guarantee non-blocking.\");\n+  out->print_cr(\"  All log messages write to an intermediate buffer first and then will be flushed\"\n+                \" to the corresponding log outputs by a standalone thread. Write operations at logsites are\"\n+                \" guaranteed non-blocking.\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+extern const size_t vwrite_buffer_size;\n","filename":"src\/hotspot\/share\/logging\/logTagSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2024,6 +2024,3 @@\n-  product(size_t, AsyncLogBufferEntries, 2*K,                               \\\n-          \"Entries of the buffer for AsyncLogging. \"                        \\\n-          \"Each entry consists of the log messages and decorations \"        \\\n-          \"which are variable-length. The maximal memory taken by \"         \\\n-          \"an entry is roughly 520 bytes\")                                  \\\n-          range(100, 500*K)                                                 \\\n+  product(size_t, AsyncLogBufferSize, 2*M,                                  \\\n+          \"Memory budget(in bytes) for the buffer of AsyncLogging. \")       \\\n+          range(100*K, 50*M)                                                \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-  AutoModifyRestore<size_t> saver(AsyncLogBufferEntries, sz);\n+  AutoModifyRestore<size_t> saver(AsyncLogBufferSize, sz * 1024 \/*in byte*\/);\n","filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}