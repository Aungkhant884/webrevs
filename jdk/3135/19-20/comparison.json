{"files":[{"patch":"@@ -32,1 +32,0 @@\n-#include \"logging\/logAsyncWriter.hpp\"\n@@ -1950,3 +1949,0 @@\n-  \/\/ flush buffered messages\n-  AsyncLogWriter::flush();\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-#include \"logging\/logAsyncWriter.hpp\"\n@@ -1099,3 +1098,0 @@\n-  \/\/ flush buffered messages\n-  AsyncLogWriter::flush();\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  : _state(ThreadState::NotReady),\n+  : _initialized(false),\n@@ -87,1 +87,1 @@\n-    _state = ThreadState::Initialized;\n+    _initialized = true;\n@@ -125,0 +125,2 @@\n+  bool own_io = false;\n+\n@@ -132,0 +134,1 @@\n+    own_io = _io_sem.trywait();\n@@ -135,1 +138,4 @@\n-  _io_sem.wait();\n+  if (!own_io) {\n+    _io_sem.wait();\n+  }\n+\n@@ -165,1 +171,1 @@\n-  if (self->_state == ThreadState::Initialized) {\n+  if (self->_initialized) {\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -131,3 +131,3 @@\n-\/\/ The static member function flush() is designated to flush out all pending messages when JVM is terminating or aborting.\n-\/\/ In normal JVM termination, flush() is invoked in LogConfiguration::finalize(). In abortion situation, flush() is invoked in\n-\/\/ os::shutdown(). flush() is MT-safe and can be invoked arbitrary times. It is no-op if async logging is not established.\n+\/\/ The static member function flush() is designated to flush out all pending messages when JVM is terminating.\n+\/\/ In normal JVM termination, flush() is invoked in LogConfiguration::finalize(). flush() is MT-safe and can be invoked arbitrary\n+\/\/ times. It is no-op if async logging is not established.\n@@ -143,8 +143,1 @@\n-  enum class ThreadState {\n-    NotReady,\n-    Initialized,\n-    Running,\n-    Terminated,\n-  };\n-\n-  volatile ThreadState _state;\n+  volatile bool _initialized;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * Note: This runs the asynclog parts of gtest in async mode.\n+ * Note: This runs the unified logging part of gtest in async mode.\n@@ -32,1 +32,1 @@\n- * @summary Run asynclog gtest in async mode.\n+ * @summary Run logging gtest in async mode.\n@@ -37,0 +37,1 @@\n+ * @run main\/native GTestWrapper --gtest_filter=Log*Test* -Xlog:async\n","filename":"test\/hotspot\/jtreg\/gtest\/AsyncLogGtest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}