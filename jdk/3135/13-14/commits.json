[{"commit":{"message":"refactor code and update per reviewers' feedback.\n\n1. change classname from logAsyncFlusher to logAsyncWriter.\n2. completely remove Terminate(), which is not safe.\n3. refactor Initialize() and ensure it can handle concurrent synchronuous logging writers.\n4. refactor gtest. make sure the 1st parameter of EXPECT\/ASSERT is the epxected value.\n5. add a GTestWrapper in jtreg, which ran the gtest in async mode."},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/logging\/logOutputList.hpp"},{"filename":"src\/hotspot\/share\/logging\/logTagSet.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"},{"filename":"test\/hotspot\/jtreg\/gtest\/AsyncLogGtest.java"}],"sha":"e19e90a8b3c10cc770e97441c925c3d04025f18b"},{"commit":{"message":"Replace Mutex with Semaphore.\n\nUse 2 sempahores to replace the Monitor*.\nMonitor in hotspot is combination of pthread_mutex_t and pthread_cond_t.\n_lock has the initial value 1. it acts as a 'mutex'.\n_sem has the initial value 0, which denotes how many messages have enqueued."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"}],"sha":"cade304605daae1642474b7ef8ddebdba308af98"},{"commit":{"message":"Refactor Initialize() and Termiante().\n\nDefine they are 2 synchronization points. async logging exclusively takes\nover from synchronous logging between 2 points."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp"}],"sha":"8f7b3b1fd1361e36d3d6526f8ea9ec4ada696b77"}]