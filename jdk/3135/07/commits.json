[{"commit":{"message":"Refactor LogAsyncFlusher::abort()\n\nThis change makes sure LogAsyncFlusher::abort() is lock-less.\nTherefore, it's not subject to mutex rank issue. Newly added\ngtest(mutex_lock_access_leaf)  may deliberately trigger SIGSEGV\nwhile holding access rank mutex, so abort() must be lockless."},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"}],"sha":"4cf4a57fb57bf8f5947e96c530333b969bb7b13b"},{"commit":{"message":"Merge branch 'master' into JDK-8229517"},"files":[{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"},{"filename":"src\/hotspot\/share\/utilities\/hashtable.cpp"}],"sha":"13c1c2b158fff513ab45a4a4e090c6f91b1cbb76"},{"commit":{"message":"Fix a race condition bug on LogAsyncFlusher termination.\n\nI saw intermitent crashes of java with the following arguments.\n-Xlog:'all=trace:file=hotspot-x.log:level,tags:filecount=0,async=true' --version\n\nThe root cause is that there is a race condition between main thread _exit and\nLogAsyncFlusher::run. This patch added a synchronization using\nTerminator_lock in LogAsyncFlusher::terminate. This guranatees that no\nlog entry will emit when main thread is exiting."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"}],"sha":"b2ad511cae438af1fd42e34af5bb3757f88a5bea"},{"commit":{"message":"Resolve rank conflict between tty_lock and LogAsyncFlusher's _lock.\n\nLogAsyncFlusher::_lock ranks Mutex::tty on purpose, which is same as tty_lock.\nIdeally, they are orthogonal. In reality, it's possible that a thread emits logs\nto a log file while (mistakenly) holding tty_lock. ttyUnlocker is placed in enqueue\nmember functions to resolve conflicts betwen them.\n\nThis patch fixed the jtreg test: runtime\/logging\/RedefineClasses.java and the\nfull brunt logging -Xlog:'all:file=hotspot.log::async=true'"},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"}],"sha":"11c2b7a1cb32134a70edeac7890e53b07fd0a7af"},{"commit":{"message":"Remove LogAsyncInterval completely\n\nIt was used as a timeout parameter of the monitor. Now the monitor is waked up\nwhen the occupancy of asynclog buffer is more 3\/4."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"edb15c61ce4b4588869e63494efffd8f37e6bd79"},{"commit":{"message":"Support Jcmd pid VM.log disable\n\nThis patch also supports to add a new output dynamically. If\noutput_option specifies async=true, the new output will use\nasynchronous writing.\n\nCurrently jcmd VM.log prohibts users from changing established\noutput_options in runtime. users can disable them all and then\nrecreate them with the new output_options."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"}],"sha":"2bd104ff211f118d19643afe40925f1773124c95"},{"commit":{"message":"Fix build issue with `--disable-precompiled-headers`"},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/logTestUtils.inline.hpp"}],"sha":"3d74a32be0f73ae4a7985d311774724c202e72b6"},{"commit":{"message":"Inject the number of dropped messages since last dumpping.\n\nEach LogOutput has an independent counter. The out-of-band message\n\"[number] messages dropped...\" will be dumped into its corresponding\nLogOutput."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.cpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.hpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/utilities\/hashtable.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"f453d03f3c5cd820169029c0a9c94c434dd23a42"},{"commit":{"message":"Revert \"fix runtime\/logging\/RedefineClasses.java crashed with -XX:+AsyncLogging\"\n\nThis reverts commit 81b2a0cb2a6cf57b1cd0baacdf8c0419f14819b4.\n\nThis problem is sidetracked by JDK-8265102."},"files":[],"sha":"54aadfaf221dd826ca54a3834193b18d99f368e3"},{"commit":{"message":"fix runtime\/logging\/RedefineClasses.java crashed with -XX:+AsyncLogging\n\nnmethod::print(outputStream* st) should not obtain tty_lock by assuming\nst is defaultStream. It could be logStream as well.\n\nCurrently, AyncLogFlusher::_lock has the same rank of tty_lock.\nhttps:\/\/issues.amazon.com\/issues\/JVM-563"},"files":[],"sha":"81b2a0cb2a6cf57b1cd0baacdf8c0419f14819b4"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nMove LogAsyncFlusher from WatcherThread to a standalone NonJavaThread\nhttps:\/\/issues.amazon.com\/issues\/JVM-565"},"files":[{"filename":"src\/hotspot\/os\/windows\/os_windows.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/runtime\/os.hpp"},{"filename":"src\/hotspot\/share\/runtime\/thread.cpp"}],"sha":"9211121c7afeb7a9fe602fd2a4d20bd98ddb1569"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nre-introduce the global option AsyncLogging."},"files":[{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"09c058d176ed0f2c50cd97401f7c95bc8e0fa18d"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nadd a constraint for the option LogAsyncInterval."},"files":[{"filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"bcefbecb97ee9db8cdd0f3cc55251693b6b77a27"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nLogMessage supports async_mode.\nremove the option AsyncLogging\nrenanme  the option GCLogBufferSize to AsyncLogBufferSize\nmove drop_log() to LogAsyncFlusher."},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"760ec76685652dd41db3e41aef169fd6619b655b"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\ncorrect assertion."},"files":[{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"}],"sha":"28718943acd1744ceeaaf6eecd8ed8b8c75873b8"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nfix a warning from c++11: \"The generation of the implicitly-defined copy\nassignment operator is deprecated if T has a user-declared destructor or\nuser-declared copy constructor.\""},"files":[{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"}],"sha":"e23657f378d6a7b3b2db8c4596c7ca7fb794a1ab"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging\n\nAdd an option async for the file-based outputs. The option conforms to\noutput-option in JEP-158."},"files":[{"filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"a3945d0f474b51cc52712d79715e03f681578204"},{"commit":{"message":"8229517: Support for optional asynchronous\/buffered logging"},"files":[{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp"},{"filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.cpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorations.hpp"},{"filename":"src\/hotspot\/share\/logging\/logDecorators.hpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp"},{"filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/init.cpp"},{"filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp"}],"sha":"06975875592ef50ba32f40b3851bca42d9b88608"}]