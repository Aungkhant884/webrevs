{"files":[{"patch":"@@ -25,1 +25,0 @@\n-#include \"jvm.h\"\n@@ -55,8 +54,3 @@\n-    const AsyncLogMessage* h = _buffer.front();\n-    assert(h != NULL, \"sanity check\");\n-\n-    if (h->message() != nullptr) {\n-      bool p_created;\n-      uint32_t* counter = _stats.add_if_absent(h->output(), 0, &p_created);\n-      *counter = *counter + 1;\n-    }\n+    bool p_created;\n+    uint32_t* counter = _stats.add_if_absent(msg.output(), 0, &p_created);\n+    *counter = *counter + 1;\n@@ -125,2 +119,2 @@\n-  \/\/ use kind of copy-and-swap idiom here.\n-  \/\/ Empty 'logs' 'swaps' the content with _buffer.\n+  \/\/ Use kind of copy-and-swap idiom here.\n+  \/\/ Empty 'logs' swaps the content with _buffer.\n@@ -129,2 +123,2 @@\n-  \/\/ the atomic operation 'move' is done in O(1). All I\/O jobs are done without lock.\n-  \/\/ This guarantees I\/O jobs don't block logsites.\n+  \/\/ The operation 'pop_all()' is done in O(1). All I\/O jobs are then performed without\n+  \/\/ lock protection. This guarantees I\/O jobs don't block logsites.\n@@ -137,1 +131,1 @@\n-    \/\/ append meta-message of dropped counters\n+    \/\/ append meta-messages of dropped counters\n@@ -175,4 +169,3 @@\n-      \/\/ all readers of _instance after fence see NULL,\n-      \/\/ but we still need to ensure no active reader of any tagset.\n-      \/\/ After then, we start AsyncLog Thread and it exclusively takes\n-      \/\/ over all logging I\/O.\n+      \/\/ All readers of _instance after the fence see non-NULL.\n+      \/\/ We make use LogOutputList's RCU counters to ensure all synchronous logsites have completed.\n+      \/\/ After that, we start AsyncLog Thread and it exclusively takee over all logging I\/O.\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    return static_cast<const LinkedList<E>* >(this)->head();\n+    return this->_head;\n@@ -114,1 +114,0 @@\n- private:\n@@ -129,4 +128,3 @@\n-  \/\/ The memory use of each AsyncLogMessage(payload) consist of itself, a logDecoration object\n-  \/\/ and a variable-length c-string message.\n-  \/\/ A normal logging  message is smaller than vwrite_buffer_size, which is defined in logtagset.cpp\n-  const size_t _buffer_max_size = {AsyncLogBufferSize \/ (sizeof(AsyncLogMessage) + sizeof(LogDecorations) + vwrite_buffer_size)};\n+  \/\/ The memory use of each AsyncLogMessage(payload) consist of itself and a variable-length c-str message.\n+  \/\/ A regular logging message is smaller than vwrite_buffer_size, which is defined in logtagset.cpp\n+  const size_t _buffer_max_size = {AsyncLogBufferSize \/ (sizeof(AsyncLogMessage) + vwrite_buffer_size)};\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -557,1 +557,1 @@\n-  out->print_cr(\"  All log messages write to an intermediate buffer first and then will be flushed\"\n+  out->print_cr(\"  All log messages are written to an intermediate buffer first and will then be flushed\"\n@@ -606,1 +606,1 @@\n-  out->print_cr(\"\\t and messages tagged with 'gc' up to 'trace' level to file 'gc.log'.\");\n+  out->print_cr(\"\\t and messages tagged with 'gc' up to 'debug' level to file 'gc.log'.\");\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/logging\/logDecorations.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-\/\/     - LogAsyncFlusher\n+\/\/     - LogAsyncWriter\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-#include \"jvm.h\"\n","filename":"test\/hotspot\/gtest\/logging\/logTestUtils.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"jvm.h\"\n@@ -26,2 +27,0 @@\n-#include \"logTestFixture.hpp\"\n-#include \"logTestUtils.inline.hpp\"\n@@ -30,3 +29,2 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n-#include \"runtime\/vmOperations.hpp\"\n-#include \"runtime\/vmThread.hpp\"\n+#include \"logTestFixture.hpp\"\n+#include \"logTestUtils.inline.hpp\"\n","filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}