{"files":[{"patch":"@@ -730,0 +730,1 @@\n+    case os::asynclog_thread:\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -921,1 +921,0 @@\n-    ttyLocker ttyl;\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -58,4 +59,0 @@\n-}\n-\n-void LogAsyncFlusher::task() {\n-  LinkedListImpl<AsyncLogMessage, ResourceObj::C_HEAP, mtLogging> logs;\n@@ -63,9 +60,3 @@\n-  { \/\/ critical area\n-    MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n-    _buffer.pop_all(&logs);\n-  }\n-\n-  LinkedListIterator<AsyncLogMessage> it(logs.head());\n-  while (!it.is_empty()) {\n-    AsyncLogMessage* e = it.next();\n-    e->writeback();\n+  size_t sz = _buffer.size();\n+  if (sz == (AsyncLogBufferSize >> 1) || sz == AsyncLogBufferSize) {\n+    _lock.notify();\n@@ -95,1 +86,34 @@\n-LogAsyncFlusher* LogAsyncFlusher::_instance = NULL;\n+LogAsyncFlusher::LogAsyncFlusher()\n+  : _should_terminate(false),\n+    _lock(Mutex::tty, \"async-log-monitor\", true \/* allow_vm_block *\/, Mutex::_safepoint_check_never) {\n+  if (os::create_thread(this, os::asynclog_thread)) {\n+    os::start_thread(this);\n+  }\n+}\n+\n+void LogAsyncFlusher::flush() {\n+  LinkedListImpl<AsyncLogMessage, ResourceObj::C_HEAP, mtLogging> logs;\n+\n+  { \/\/ critical area\n+    MutexLocker ml(&_lock, Mutex::_no_safepoint_check_flag);\n+    _buffer.pop_all(&logs);\n+  }\n+\n+  LinkedListIterator<AsyncLogMessage> it(logs.head());\n+  while (!it.is_empty()) {\n+    AsyncLogMessage* e = it.next();\n+    e->writeback();\n+  }\n+}\n+\n+void LogAsyncFlusher::run() {\n+  while (!_should_terminate) {\n+    {\n+      MonitorLocker m(&_lock, Mutex::_no_safepoint_check_flag);\n+      m.wait(LogAsyncInterval);\n+    }\n+    flush();\n+  }\n+}\n+\n+LogAsyncFlusher* LogAsyncFlusher::_instance = nullptr;\n@@ -99,1 +123,1 @@\n-    _instance = new LogAsyncFlusher(LogAsyncInterval);\n+    _instance = new LogAsyncFlusher();\n@@ -103,1 +127,6 @@\n-void LogAsyncFlusher::cleanup() {\n+\/\/ Termination\n+\/\/ 1. issue an atomic store-&-fence to close the logging window.\n+\/\/ 2. flush itself in-place\n+\/\/ 3. signal the flusher thread to exit\n+\/\/ 4. (optional) deletes this in post_run()\n+void LogAsyncFlusher::terminate() {\n@@ -105,3 +134,10 @@\n-    _instance->flush();\n-    delete _instance;\n-    _instance = NULL;\n+    LogAsyncFlusher* self = _instance;\n+\n+    \/\/ make sure no new log entry will be enqueued after.\n+    Atomic::release_store_fence<LogAsyncFlusher*, LogAsyncFlusher*>(&_instance, nullptr);\n+    self->flush();\n+    {\n+      MonitorLocker m(&self->_lock, Mutex::_no_safepoint_check_flag);\n+      self->_should_terminate = true;\n+      m.notify();\n+    }\n@@ -112,1 +148,6 @@\n-  return _instance;\n+  if (Thread::current_or_null() != nullptr) {\n+    return _instance;\n+  } else {\n+    \/\/ current thread may has been detached.\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.cpp","additions":61,"deletions":20,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/nonJavaThread.hpp\"\n@@ -121,1 +122,2 @@\n-class LogAsyncFlusher : public PeriodicTask {\n+\/\/ Flusher is a NonJavaThread which manages a FIFO capacity-bound buffer.\n+class LogAsyncFlusher : public NonJavaThread {\n@@ -124,1 +126,10 @@\n-  Mutex _lock;\n+\n+  volatile bool _should_terminate;\n+  \/\/ The semantics of _lock is like JVM monitor.\n+  \/\/ This thread sleeps and only wakes up by the monitor if any of events happen.\n+  \/\/   1. buffer is half-full\n+  \/\/   2. buffer is full\n+  \/\/   3. timeout defined by LogAsyncInterval\n+  \/\/\n+  \/\/ It also roles as a lock to consolidate buffer's MT-safety.\n+  Monitor _lock;\n@@ -127,5 +138,1 @@\n-  LogAsyncFlusher(size_t interval\/*ms*\/) : PeriodicTask(interval),\n-                  _lock(Mutex::tty, \"logAsyncFlusher\",\n-                  Mutex::_allow_vm_block_flag, Mutex::_safepoint_check_never) {\n-    this->enroll();\n-  }\n+  LogAsyncFlusher();\n@@ -134,4 +141,2 @@\n-\n- protected:\n-  void task();\n-\n+  void run() override;\n+  char* name() const override { return (char*)\"AsyncLog Thread\"; }\n@@ -141,1 +146,1 @@\n-  void flush() { task(); }\n+  void flush();\n@@ -143,4 +148,0 @@\n-  \/\/ none of following functions are thread-safe.\n-  \/\/ Meyer's singleton is not thread-safe until C++11.\n-  static void initialize();\n-  static void cleanup();\n@@ -148,0 +149,3 @@\n+  \/\/ None of following functions are thread-safe.\n+  static void initialize();\n+  static void terminate();\n","filename":"src\/hotspot\/share\/logging\/logAsyncFlusher.hpp","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-      _file_count(DefaultFileCount), _is_default_file_count(true), _async_mode(false), _archive_name_len(0),\n+      _file_count(DefaultFileCount), _is_default_file_count(true), _async_mode(AsyncLogging), _archive_name_len(0),\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2030,0 +2030,3 @@\n+  product(bool, AsyncLogging, false,                                        \\\n+          \"Enble asynchronous mode for all file-based log outputs\")         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -437,0 +437,1 @@\n+    asynclog_thread,  \/\/ dedicated to flushing logs\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+#include \"logging\/logAsyncFlusher.hpp\"\n@@ -3744,0 +3745,3 @@\n+  \/\/ stop AsyncLog Thread\n+  LogAsyncFlusher::terminate();\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -961,1 +961,0 @@\n-  LogAsyncFlusher::cleanup();\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}