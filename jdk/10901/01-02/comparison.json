{"files":[{"patch":"@@ -72,0 +72,1 @@\n+  _transitive_interfaces = NULL;\n@@ -732,11 +733,18 @@\n-GrowableArray<ciInstanceKlass*>* ciInstanceKlass::transitive_interfaces() const {\n-  GrowableArray<ciInstanceKlass*>* result = NULL;\n-  GUARDED_VM_ENTRY(\n-    InstanceKlass* ik = get_instanceKlass();\n-    Array<InstanceKlass*>* interfaces = ik->transitive_interfaces();\n-    result = new GrowableArray<ciInstanceKlass*>(interfaces->length());\n-    for (int i = 0; i < interfaces->length(); i++) {\n-      result->append(CURRENT_ENV->get_instance_klass(interfaces->at(i)));\n-    }\n-  );\n-  return result;\n+GrowableArray<ciInstanceKlass*>* ciInstanceKlass::transitive_interfaces() {\n+  if (_transitive_interfaces == NULL) {\n+    GUARDED_VM_ENTRY(\n+            InstanceKlass* ik = get_instanceKlass();\n+            Array<InstanceKlass*>* interfaces = ik->transitive_interfaces();\n+            Arena* arena = CURRENT_ENV->arena();\n+            int len = interfaces->length() + (is_interface() ? 1 : 0);\n+            GrowableArray<ciInstanceKlass*>* transitive_interfaces = new (arena)GrowableArray<ciInstanceKlass*>(arena, len, 0, NULL);\n+            for (int i = 0; i < interfaces->length(); i++) {\n+              transitive_interfaces->append(CURRENT_ENV->get_instance_klass(interfaces->at(i)));\n+            }\n+            if (is_interface()) {\n+              transitive_interfaces->append(this);\n+            }\n+            _transitive_interfaces = transitive_interfaces;\n+    );\n+  }\n+  return _transitive_interfaces;\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+  GrowableArray<ciInstanceKlass*>* _transitive_interfaces;\n@@ -295,1 +296,1 @@\n-  GrowableArray<ciInstanceKlass*>* transitive_interfaces() const;\n+  GrowableArray<ciInstanceKlass*>* transitive_interfaces();\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -156,0 +156,1 @@\n+  \/\/ ciInstanceKlass objects for interfaces that the vm class implements must also be allocated from the long lived arena\n@@ -177,0 +178,1 @@\n+        obj->as_instance_klass()->transitive_interfaces();\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-    Node* cls_node = makecon(TypeKlassPtr::make(receiver_constraint, true));\n+    Node* cls_node = makecon(TypeKlassPtr::make(receiver_constraint, Type::trust_interfaces));\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2185,1 +2185,1 @@\n-    const TypeKlassPtr* tklass = TypeKlassPtr::make(exact_kls, true);\n+    const TypeKlassPtr* tklass = TypeKlassPtr::make(exact_kls, Type::trust_interfaces);\n@@ -2847,1 +2847,1 @@\n-  const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, true);\n+  const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, Type::trust_interfaces);\n@@ -2876,1 +2876,1 @@\n-  const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, true)->try_improve();\n+  const TypeKlassPtr* tklass = TypeKlassPtr::make(klass, Type::trust_interfaces)->try_improve();\n@@ -2999,1 +2999,1 @@\n-        C->static_subtype_check(require_klass, TypeKlassPtr::make(exact_kls, true)) == Compile::SSC_always_true) {\n+        C->static_subtype_check(require_klass, TypeKlassPtr::make(exact_kls, Type::trust_interfaces)) == Compile::SSC_always_true) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3667,1 +3667,1 @@\n-      int static_res = C->static_subtype_check(TypeKlassPtr::make(tm->as_klass(), true), tp->as_klass_type());\n+      int static_res = C->static_subtype_check(TypeKlassPtr::make(tm->as_klass(), Type::trust_interfaces), tp->as_klass_type());\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2035,1 +2035,1 @@\n-        return ss ? TypeKlassPtr::make(ss, true) : TypePtr::NULL_PTR;\n+        return ss ? TypeKlassPtr::make(ss, Type::trust_interfaces) : TypePtr::NULL_PTR;\n@@ -2066,1 +2066,1 @@\n-          return ss ? TypeKlassPtr::make(ss, true) : TypePtr::NULL_PTR;\n+          return ss ? TypeKlassPtr::make(ss, Type::trust_interfaces) : TypePtr::NULL_PTR;\n@@ -2326,1 +2326,1 @@\n-          return TypeKlassPtr::make(ciArrayKlass::make(t), true);\n+          return TypeKlassPtr::make(ciArrayKlass::make(t), Type::trust_interfaces);\n@@ -2333,1 +2333,1 @@\n-        return TypeKlassPtr::make(t->as_klass(), true);\n+        return TypeKlassPtr::make(t->as_klass(), Type::trust_interfaces);\n@@ -2371,1 +2371,1 @@\n-      return sup ? TypeKlassPtr::make(sup, true) : TypePtr::NULL_PTR;\n+      return sup ? TypeKlassPtr::make(sup, Type::trust_interfaces) : TypePtr::NULL_PTR;\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1202,1 +1202,1 @@\n-    const Type* holder_type = TypeInstPtr::make(TypePtr::BotPTR, callee_holder, true);\n+    const Type* holder_type = TypeInstPtr::make(TypePtr::BotPTR, callee_holder, Type::trust_interfaces);\n@@ -1215,1 +1215,1 @@\n-      Node* holder_klass = _gvn.makecon(TypeKlassPtr::make(callee_holder, true));\n+      Node* holder_klass = _gvn.makecon(TypeKlassPtr::make(callee_holder, Type::trust_interfaces));\n@@ -2135,1 +2135,1 @@\n-  Node* holder = makecon(TypeKlassPtr::make(method()->holder(), true));\n+  Node* holder = makecon(TypeKlassPtr::make(method()->holder(), Type::trust_interfaces));\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  const TypeKlassPtr* array_klass_type = TypeKlassPtr::make(array_klass, true);\n+  const TypeKlassPtr* array_klass_type = TypeKlassPtr::make(array_klass, Type::trust_interfaces);\n@@ -302,1 +302,1 @@\n-  Node* array = new_array(makecon(TypeKlassPtr::make(array_klass, true)), length, nargs);\n+  Node* array = new_array(makecon(TypeKlassPtr::make(array_klass, Type::trust_interfaces)), length, nargs);\n@@ -388,1 +388,1 @@\n-                          makecon(TypeKlassPtr::make(array_klass, true)),\n+                          makecon(TypeKlassPtr::make(array_klass, Type::trust_interfaces)),\n@@ -410,1 +410,1 @@\n-                          makecon(TypeKlassPtr::make(array_klass, true)),\n+                          makecon(TypeKlassPtr::make(array_klass, Type::trust_interfaces)),\n@@ -417,1 +417,1 @@\n-  const Type* type = TypeOopPtr::make_from_klass_raw(array_klass, true);\n+  const Type* type = TypeOopPtr::make_from_klass_raw(array_klass, Type::trust_interfaces);\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  Node* res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass, true)));\n+  Node* res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass, Type::trust_interfaces)));\n@@ -132,1 +132,1 @@\n-  Node* res = gen_instanceof(peek(), makecon(TypeKlassPtr::make(klass, true)), true);\n+  Node* res = gen_instanceof(peek(), makecon(TypeKlassPtr::make(klass, Type::trust_interfaces)), true);\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1050,1 +1050,1 @@\n-  return phase->makecon(TypeKlassPtr::make(mirror_type->as_klass(),  true));\n+  return phase->makecon(TypeKlassPtr::make(mirror_type->as_klass(),  Type::trust_interfaces));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-const Type* Type::get_const_type(ciType* type, bool trust_interface) {\n+const Type* Type::get_const_type(ciType* type, InterfaceHandling interface_handling) {\n@@ -145,1 +145,1 @@\n-    return TypeOopPtr::make_from_klass(type->as_klass(), trust_interface);\n+    return TypeOopPtr::make_from_klass(type->as_klass(), interface_handling);\n@@ -571,5 +571,1 @@\n-  TypeAryPtr::_array_interfaces = new TypePtr::InterfaceSet();\n-  GrowableArray<ciInstanceKlass*>* array_interfaces = ciArrayKlass::interfaces();\n-  for (int i = 0; i < array_interfaces->length(); i++) {\n-    TypeAryPtr::_array_interfaces->add(array_interfaces->at(i));\n-  }\n+  TypeAryPtr::_array_interfaces = new TypePtr::InterfaceSet(ciArrayKlass::interfaces());\n@@ -1987,1 +1983,1 @@\n-const TypeTuple *TypeTuple::make_range(ciSignature* sig, bool trust_interface) {\n+const TypeTuple *TypeTuple::make_range(ciSignature* sig, InterfaceHandling interface_handling) {\n@@ -2008,1 +2004,1 @@\n-    field_array[TypeFunc::Parms] = get_const_type(return_type, trust_interface);\n+    field_array[TypeFunc::Parms] = get_const_type(return_type, interface_handling);\n@@ -2019,1 +2015,1 @@\n-const TypeTuple *TypeTuple::make_domain(ciInstanceKlass* recv, ciSignature* sig, bool trust_interface) {\n+const TypeTuple *TypeTuple::make_domain(ciInstanceKlass* recv, ciSignature* sig, InterfaceHandling interface_handling) {\n@@ -2028,1 +2024,1 @@\n-    field_array[pos++] = get_const_type(recv, trust_interface)->join_speculative(TypePtr::NOTNULL);\n+    field_array[pos++] = get_const_type(recv, interface_handling)->join_speculative(TypePtr::NOTNULL);\n@@ -2050,1 +2046,1 @@\n-      field_array[pos++] = get_const_type(type, trust_interface);\n+      field_array[pos++] = get_const_type(type, interface_handling);\n@@ -3120,1 +3116,10 @@\n-  : _list(Compile::current()->type_arena(), 0, 0, NULL) {\n+        : _list(Compile::current()->type_arena(), 0, 0, NULL),\n+          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+}\n+\n+TypePtr::InterfaceSet::InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces)\n+        : _list(Compile::current()->type_arena(), interfaces->length(), 0, NULL),\n+          _hash_computed(0), _exact_klass_computed(0), _is_loaded_computed(0) {\n+  for (int i = 0; i < interfaces->length(); i++) {\n+    add(interfaces->at(i));\n+  }\n@@ -3123,0 +3128,1 @@\n+\n@@ -3158,0 +3164,9 @@\n+  if (_hash_computed) {\n+    return _hash;\n+  }\n+  const_cast<InterfaceSet*>(this)->compute_hash();\n+  assert(_hash_computed, \"should be computed now\");\n+  return _hash;\n+}\n+\n+void TypePtr::InterfaceSet::compute_hash() {\n@@ -3163,1 +3178,2 @@\n-  return hash;\n+  _hash_computed = 1;\n+  _hash = hash;\n@@ -3270,3 +3286,4 @@\n-GrowableArray<ciKlass*>* TypePtr::InterfaceSet::list() const {\n-  if (_list.length() == 0) {\n-    return NULL;\n+\/\/ Is there a single ciKlass* that can represent the interface set?\n+ciKlass* TypePtr::InterfaceSet::exact_klass() const {\n+  if (_exact_klass_computed) {\n+    return _exact_klass;\n@@ -3274,3 +3291,3 @@\n-  GrowableArray<ciKlass*>* result = new GrowableArray<ciKlass*>();\n-  result->appendAll(&_list);\n-  return result;\n+  const_cast<InterfaceSet*>(this)->compute_exact_klass();\n+  assert(_exact_klass_computed, \"should be computed now\");\n+  return _exact_klass;\n@@ -3279,2 +3296,1 @@\n-\/\/ Is there a single ciKlass* that can represent the interface set?\n-ciKlass* TypePtr::InterfaceSet::exact_klass() const {\n+void TypePtr::InterfaceSet::compute_exact_klass() {\n@@ -3282,1 +3298,3 @@\n-    return NULL;\n+    _exact_klass_computed = 1;\n+    _exact_klass = NULL;\n+    return;\n@@ -3287,1 +3305,1 @@\n-    if (eq(TypePtr::interfaces(interface, false, true, false, true))) {\n+    if (eq(interfaces(interface, false, true, false, trust_interfaces))) {\n@@ -3292,1 +3310,2 @@\n-  return res;\n+  _exact_klass_computed = 1;\n+  _exact_klass = res;\n@@ -3296,0 +3315,10 @@\n+  if (_is_loaded_computed) {\n+    return _is_loaded;\n+  }\n+  const_cast<InterfaceSet*>(this)->compute_is_loaded();\n+  assert(_is_loaded_computed, \"should be computed now\");\n+  return _is_loaded;\n+}\n+\n+void TypePtr::InterfaceSet::compute_is_loaded() {\n+  _is_loaded_computed = 1;\n@@ -3299,1 +3328,2 @@\n-      return false;\n+      _is_loaded = false;\n+      return;\n@@ -3302,1 +3332,1 @@\n-  return true;\n+  _is_loaded = true;\n@@ -3509,1 +3539,1 @@\n-const TypeOopPtr* TypeOopPtr::make_from_klass_common(ciKlass* klass, bool klass_change, bool try_for_exact, bool trust_interface) {\n+const TypeOopPtr* TypeOopPtr::make_from_klass_common(ciKlass* klass, bool klass_change, bool try_for_exact, InterfaceHandling interface_handling) {\n@@ -3536,1 +3566,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, trust_interface);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -3541,1 +3571,1 @@\n-    const TypeOopPtr *etype = TypeOopPtr::make_from_klass_common(eklass, try_for_exact, false, trust_interface);\n+    const TypeOopPtr *etype = TypeOopPtr::make_from_klass_common(eklass, try_for_exact, false, interface_handling);\n@@ -3581,1 +3611,1 @@\n-      TypeOopPtr::make_from_klass_raw(klass->as_obj_array_klass()->element_klass(), true);\n+      TypeOopPtr::make_from_klass_raw(klass->as_obj_array_klass()->element_klass(), trust_interfaces);\n@@ -3810,1 +3840,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -3864,2 +3894,1 @@\n-TypePtr::InterfaceSet TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, bool trust_interface) {\n-  InterfaceSet interfaces;\n+TypePtr::InterfaceSet TypePtr::interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling) {\n@@ -3868,1 +3897,1 @@\n-      if (k->is_interface() && !trust_interface) {\n+      if (k->is_interface() && interface_handling == ignore_interfaces) {\n@@ -3871,0 +3900,1 @@\n+        InterfaceSet interfaces;\n@@ -3874,3 +3904,1 @@\n-      for (int i = 0; i < k_interfaces->length(); i++) {\n-        interfaces.add(k_interfaces->at(i));\n-      }\n+      InterfaceSet interfaces(k_interfaces);\n@@ -3879,1 +3907,0 @@\n-        interfaces.add(k);\n@@ -3884,0 +3911,1 @@\n+      return interfaces;\n@@ -3885,0 +3913,1 @@\n+    InterfaceSet interfaces;\n@@ -3891,1 +3920,1 @@\n-    if (!trust_interface) {\n+    if (interface_handling == ignore_interfaces) {\n@@ -4414,1 +4443,1 @@\n-    TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -4438,1 +4467,1 @@\n-         (!this_xk || this_one->_interfaces.intersection_with(other->_interfaces).eq(other->_interfaces));\n+         (!this_xk || this_one->_interfaces.contains(other->_interfaces));\n@@ -4453,1 +4482,1 @@\n-    return other->klass() == ciEnv::current()->Object_klass() && other->_interfaces.intersection_with(this_one->_interfaces).eq(other->_interfaces);\n+    return other->klass() == ciEnv::current()->Object_klass() && this_one->_interfaces.contains(other->_interfaces);\n@@ -4806,1 +4835,1 @@\n-      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(tp_interfaces) && !tp->klass_is_exact()) {\n+      if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -4825,1 +4854,1 @@\n-        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(tp_interfaces) && !tp->klass_is_exact()) {\n+        if (tp->klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.contains(tp_interfaces) && !tp->klass_is_exact()) {\n@@ -4840,1 +4869,1 @@\n-      return TypeInstPtr::make(ptr, ciEnv::current()->Object_klass(), interfaces, false, NULL,offset, instance_id, speculative, depth);\n+      return TypeInstPtr::make(ptr, ciEnv::current()->Object_klass(), interfaces, false, NULL, offset, instance_id, speculative, depth);\n@@ -5389,1 +5418,1 @@\n-const TypeKlassPtr* TypeKlassPtr::make(ciKlass *klass, bool trust_interface) {\n+const TypeKlassPtr* TypeKlassPtr::make(ciKlass *klass, InterfaceHandling interface_handling) {\n@@ -5391,1 +5420,1 @@\n-    return TypeInstKlassPtr::make(klass, trust_interface);\n+    return TypeInstKlassPtr::make(klass, interface_handling);\n@@ -5393,1 +5422,1 @@\n-  return TypeAryKlassPtr::make(klass, trust_interface);\n+  return TypeAryKlassPtr::make(klass, interface_handling);\n@@ -5396,1 +5425,1 @@\n-const TypeKlassPtr* TypeKlassPtr::make(PTR ptr, ciKlass* klass, int offset, bool trust_interface) {\n+const TypeKlassPtr* TypeKlassPtr::make(PTR ptr, ciKlass* klass, int offset, InterfaceHandling interface_handling) {\n@@ -5398,1 +5427,1 @@\n-    const InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, trust_interface);\n+    const InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -5401,1 +5430,1 @@\n-  return TypeAryKlassPtr::make(ptr, klass, offset, trust_interface);\n+  return TypeAryKlassPtr::make(ptr, klass, offset, interface_handling);\n@@ -5420,1 +5449,1 @@\n-    if (_interfaces.eq(TypePtr::interfaces(k, true, false, true, false))) {\n+    if (_interfaces.eq(TypePtr::interfaces(k, true, false, true, ignore_interfaces))) {\n@@ -5618,1 +5647,1 @@\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, false);\n+        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n@@ -5737,1 +5766,1 @@\n-      if (klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(this_interfaces) && !klass_is_exact()) {\n+      if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces.contains(this_interfaces) && !klass_is_exact()) {\n@@ -5755,1 +5784,1 @@\n-        if (klass()->equals(ciEnv::current()->Object_klass()) && this_interfaces.intersection_with(tp_interfaces).eq(this_interfaces) && !klass_is_exact()) {\n+        if (klass()->equals(ciEnv::current()->Object_klass()) && tp_interfaces.contains(this_interfaces) && !klass_is_exact()) {\n@@ -5798,1 +5827,1 @@\n-  return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.intersection_with(other->_interfaces).eq(other->_interfaces);\n+  return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.contains(other->_interfaces);\n@@ -5827,1 +5856,1 @@\n-    return !this_exact && this_one->_klass->equals(ciEnv::current()->Object_klass())  && this_one->_interfaces.intersection_with(other->_interfaces).eq(this_one->_interfaces);\n+    return !this_exact && this_one->_klass->equals(ciEnv::current()->Object_klass())  && other->_interfaces.contains(this_one->_interfaces);\n@@ -5841,1 +5870,1 @@\n-    return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.intersection_with(other->_interfaces).eq(other->_interfaces);\n+    return this_one->_klass->is_subtype_of(other->_klass) && this_one->_interfaces.contains(other->_interfaces);\n@@ -5852,0 +5881,3 @@\n+  if (!UseUniqueSubclasses) {\n+    return this;\n+  }\n@@ -5861,1 +5893,1 @@\n-        deps != NULL && UseUniqueSubclasses) {\n+        deps != NULL) {\n@@ -5865,1 +5897,1 @@\n-        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, false);\n+        TypePtr::InterfaceSet sub_interfaces = TypePtr::interfaces(sub_k, true, false, false, ignore_interfaces);\n@@ -5884,2 +5916,2 @@\n-const TypeAryKlassPtr *TypeAryKlassPtr::make(PTR ptr, ciKlass* klass, int offset, bool trust_interface) {\n-  if (klass->is_obj_array_klass()) {\n+const TypeAryKlassPtr *TypeAryKlassPtr::make(PTR ptr, ciKlass* k, int offset, InterfaceHandling interface_handling) {\n+  if (k->is_obj_array_klass()) {\n@@ -5887,2 +5919,2 @@\n-    ciKlass* eklass = klass->as_obj_array_klass()->element_klass();\n-    const TypeKlassPtr *etype = TypeKlassPtr::make(eklass, trust_interface)->cast_to_exactness(false);\n+    ciKlass* eklass = k->as_obj_array_klass()->element_klass();\n+    const TypeKlassPtr *etype = TypeKlassPtr::make(eklass, interface_handling)->cast_to_exactness(false);\n@@ -5890,1 +5922,1 @@\n-  } else if (klass->is_type_array_klass()) {\n+  } else if (k->is_type_array_klass()) {\n@@ -5892,2 +5924,2 @@\n-    const Type* etype = get_const_basic_type(klass->as_type_array_klass()->element_type());\n-    return TypeAryKlassPtr::make(ptr, etype, klass, offset);\n+    const Type* etype = get_const_basic_type(k->as_type_array_klass()->element_type());\n+    return TypeAryKlassPtr::make(ptr, etype, k, offset);\n@@ -5900,2 +5932,2 @@\n-const TypeAryKlassPtr* TypeAryKlassPtr::make(ciKlass* klass, bool trust_interface) {\n-  return TypeAryKlassPtr::make(Constant, klass, 0, trust_interface);\n+const TypeAryKlassPtr* TypeAryKlassPtr::make(ciKlass* klass, InterfaceHandling interface_handling) {\n+  return TypeAryKlassPtr::make(Constant, klass, 0, interface_handling);\n@@ -6416,1 +6448,1 @@\n-    domain = TypeTuple::make_domain(NULL, method->signature(), false);\n+    domain = TypeTuple::make_domain(NULL, method->signature(), ignore_interfaces);\n@@ -6418,1 +6450,1 @@\n-    domain = TypeTuple::make_domain(method->holder(), method->signature(), false);\n+    domain = TypeTuple::make_domain(method->holder(), method->signature(), ignore_interfaces);\n@@ -6420,1 +6452,1 @@\n-  const TypeTuple *range  = TypeTuple::make_range(method->signature(), false);\n+  const TypeTuple *range  = TypeTuple::make_range(method->signature(), ignore_interfaces);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":105,"deletions":73,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -397,0 +397,4 @@\n+  enum InterfaceHandling {\n+      trust_interfaces,\n+      ignore_interfaces\n+  };\n@@ -398,1 +402,1 @@\n-  static const Type* get_const_type(ciType* type, bool trust_interface = false);\n+  static const Type* get_const_type(ciType* type, InterfaceHandling interface_handling = ignore_interfaces);\n@@ -717,2 +721,2 @@\n-  static const TypeTuple *make_range(ciSignature *sig, bool trust_interface = false);\n-  static const TypeTuple *make_domain(ciInstanceKlass* recv, ciSignature *sig, bool trust_interface);\n+  static const TypeTuple *make_range(ciSignature *sig, InterfaceHandling interface_handling = ignore_interfaces);\n+  static const TypeTuple *make_domain(ciInstanceKlass* recv, ciSignature *sig, InterfaceHandling interface_handling);\n@@ -880,0 +884,1 @@\n+    void add(ciKlass* interface);\n@@ -881,0 +886,8 @@\n+    int _hash_computed:1;\n+    int _exact_klass_computed:1;\n+    int _is_loaded_computed:1;\n+    int _hash;\n+    ciKlass* _exact_klass;\n+    bool _is_loaded;\n+    void compute_hash();\n+    void compute_exact_klass();\n@@ -883,1 +896,1 @@\n-    void add(ciKlass* interface);\n+    InterfaceSet(GrowableArray<ciInstanceKlass*>* interfaces);\n@@ -889,0 +902,3 @@\n+    bool contains(const InterfaceSet& other) const {\n+      return intersection_with(other).eq(other);\n+    }\n@@ -890,1 +906,0 @@\n-    GrowableArray<ciKlass*>* list() const;\n@@ -892,1 +907,1 @@\n-    inline void* operator new( size_t x ) throw() {\n+    inline void* operator new(size_t x) throw() {\n@@ -903,0 +918,2 @@\n+\n+    void compute_is_loaded();\n@@ -905,1 +922,1 @@\n-  static InterfaceSet interfaces(ciKlass*& k, bool klass, bool interface, bool array, bool trust_interface);\n+  static InterfaceSet interfaces(ciKlass*& k, bool klass, bool interface, bool array, InterfaceHandling interface_handling);\n@@ -1117,1 +1134,1 @@\n-  static const TypeOopPtr* make_from_klass_common(ciKlass* klass, bool klass_change, bool try_for_exact, bool trust_interface);\n+  static const TypeOopPtr* make_from_klass_common(ciKlass* klass, bool klass_change, bool try_for_exact, InterfaceHandling interface_handling);\n@@ -1154,2 +1171,2 @@\n-  static const TypeOopPtr* make_from_klass(ciKlass* klass, bool trust_interface = false) {\n-    return make_from_klass_common(klass, true, false, trust_interface);\n+  static const TypeOopPtr* make_from_klass(ciKlass* klass, InterfaceHandling interface_handling = ignore_interfaces) {\n+    return make_from_klass_common(klass, true, false, interface_handling);\n@@ -1159,2 +1176,2 @@\n-  static const TypeOopPtr* make_from_klass_unique(ciKlass* klass, bool trust_interface= false) {\n-    return make_from_klass_common(klass, true, true, trust_interface);\n+  static const TypeOopPtr* make_from_klass_unique(ciKlass* klass, InterfaceHandling interface_handling= ignore_interfaces) {\n+    return make_from_klass_common(klass, true, true, interface_handling);\n@@ -1164,2 +1181,2 @@\n-  static const TypeOopPtr* make_from_klass_raw(ciKlass* klass, bool trust_interface = false) {\n-    return make_from_klass_common(klass, false, false, trust_interface);\n+  static const TypeOopPtr* make_from_klass_raw(ciKlass* klass, InterfaceHandling interface_handling = ignore_interfaces) {\n+    return make_from_klass_common(klass, false, false, interface_handling);\n@@ -1279,1 +1296,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1285,1 +1302,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1290,2 +1307,2 @@\n-  static const TypeInstPtr *make(PTR ptr, ciKlass* klass, bool trust_interface = false) {\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, trust_interface);\n+  static const TypeInstPtr *make(PTR ptr, ciKlass* klass, InterfaceHandling interface_handling = ignore_interfaces) {\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, true, false, interface_handling);\n@@ -1297,1 +1314,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n@@ -1303,1 +1320,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(klass, true, false, false, ignore_interfaces);\n@@ -1313,1 +1330,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1573,2 +1590,2 @@\n-  static const TypeKlassPtr* make(ciKlass* klass, bool trust_interface = false);\n-  static const TypeKlassPtr *make(PTR ptr, ciKlass* klass, int offset, bool trust_interface = false);\n+  static const TypeKlassPtr* make(ciKlass* klass, InterfaceHandling interface_handling = ignore_interfaces);\n+  static const TypeKlassPtr *make(PTR ptr, ciKlass* klass, int offset, InterfaceHandling interface_handling = ignore_interfaces);\n@@ -1645,2 +1662,2 @@\n-  static const TypeInstKlassPtr *make(ciKlass* k, bool trust_interface) {\n-    InterfaceSet interfaces = TypePtr::interfaces(k, true, true, false, trust_interface);\n+  static const TypeInstKlassPtr *make(ciKlass* k, InterfaceHandling interface_handling) {\n+    InterfaceSet interfaces = TypePtr::interfaces(k, true, true, false, interface_handling);\n@@ -1652,1 +1669,1 @@\n-    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, false);\n+    const TypePtr::InterfaceSet interfaces = TypePtr::interfaces(k, true, false, false, ignore_interfaces);\n@@ -1704,1 +1721,1 @@\n-  static const TypeAryKlassPtr *make(PTR ptr, ciKlass* k, int offset, bool trust_interface);\n+  static const TypeAryKlassPtr *make(PTR ptr, ciKlass* k, int offset, InterfaceHandling interface_handling);\n@@ -1713,1 +1730,1 @@\n-  static const TypeAryKlassPtr* make(ciKlass* klass, bool trust_interface);\n+  static const TypeAryKlassPtr* make(ciKlass* klass, InterfaceHandling interface_handling);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":45,"deletions":28,"binary":false,"changes":73,"status":"modified"}]}