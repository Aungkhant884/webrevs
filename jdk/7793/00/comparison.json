{"files":[{"patch":"@@ -28,1 +28,1 @@\n-    .icns .scpt .wxs .wxl .wxi .ico .bmp .tiff\n+    .icns .scpt .wxs .wxl .wxi .ico .bmp .tiff .service\n","filename":"make\/modules\/jdk.jpackage\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.BufferedReader;\n@@ -31,2 +30,0 @@\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n@@ -42,0 +39,1 @@\n+import java.util.Optional;\n@@ -43,1 +41,0 @@\n-import java.util.regex.Pattern;\n@@ -59,1 +56,1 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.SHORTCUT_HINT;;\n+import static jdk.jpackage.internal.StandardBundlerParam.SHORTCUT_HINT;\n@@ -64,1 +61,1 @@\n-final class DesktopIntegration {\n+final class DesktopIntegration extends ShellCustomAction {\n@@ -66,3 +63,6 @@\n-    static final String DESKTOP_COMMANDS_INSTALL = \"DESKTOP_COMMANDS_INSTALL\";\n-    static final String DESKTOP_COMMANDS_UNINSTALL = \"DESKTOP_COMMANDS_UNINSTALL\";\n-    static final String UTILITY_SCRIPTS = \"UTILITY_SCRIPTS\";\n+    private static final String COMMANDS_INSTALL = \"DESKTOP_COMMANDS_INSTALL\";\n+    private static final String COMMANDS_UNINSTALL = \"DESKTOP_COMMANDS_UNINSTALL\";\n+    private static final String SCRIPTS = \"DESKTOP_SCRIPTS\";\n+\n+    private static final List<String> REPLACEMENT_STRING_IDS = List.of(\n+            COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS);\n@@ -174,1 +174,1 @@\n-    static DesktopIntegration create(PlatformPackage thePackage,\n+    static ShellCustomAction create(PlatformPackage thePackage,\n@@ -177,1 +177,1 @@\n-            return null;\n+            return ShellCustomAction.nop(REPLACEMENT_STRING_IDS);\n@@ -182,0 +182,1 @@\n+    @Override\n@@ -188,1 +189,7 @@\n-    Map<String, String> create() throws IOException {\n+    @Override\n+    protected List<String> replacementStringIds() {\n+        return REPLACEMENT_STRING_IDS;\n+    }\n+\n+    @Override\n+    protected Map<String, String> createImpl() throws IOException {\n@@ -233,1 +240,1 @@\n-                data.get(DESKTOP_COMMANDS_INSTALL)));\n+                data.get(COMMANDS_INSTALL)));\n@@ -235,1 +242,1 @@\n-                data.get(DESKTOP_COMMANDS_UNINSTALL)));\n+                data.get(COMMANDS_UNINSTALL)));\n@@ -243,3 +250,2 @@\n-            installShellCmds.add(launcherData.get(DESKTOP_COMMANDS_INSTALL));\n-            uninstallShellCmds.add(launcherData.get(\n-                    DESKTOP_COMMANDS_UNINSTALL));\n+            installShellCmds.add(launcherData.get(COMMANDS_INSTALL));\n+            uninstallShellCmds.add(launcherData.get(COMMANDS_UNINSTALL));\n@@ -248,4 +254,2 @@\n-        data.put(DESKTOP_COMMANDS_INSTALL, stringifyShellCommands(\n-                installShellCmds));\n-        data.put(DESKTOP_COMMANDS_UNINSTALL, stringifyShellCommands(\n-                uninstallShellCmds));\n+        data.put(COMMANDS_INSTALL, stringifyShellCommands(installShellCmds));\n+        data.put(COMMANDS_UNINSTALL, stringifyShellCommands(uninstallShellCmds));\n@@ -254,9 +258,2 @@\n-            \/\/ Pull in utils.sh scrips library.\n-            try (InputStream is = OverridableResource.readDefault(\"utils.sh\");\n-                    InputStreamReader isr = new InputStreamReader(is);\n-                    BufferedReader reader = new BufferedReader(isr)) {\n-                data.put(UTILITY_SCRIPTS, reader.lines().collect(\n-                        Collectors.joining(System.lineSeparator())));\n-            }\n-        } else {\n-            data.put(UTILITY_SCRIPTS, \"\");\n+            \/\/ Pull in desktop_utils.sh scrips library.\n+            data.put(SCRIPTS, stringifyTextFile(\"desktop_utils.sh\"));\n@@ -280,2 +277,2 @@\n-        data.put(\"APPLICATION_ICON\",\n-                iconFile != null ? iconFile.installPath().toString() : null);\n+        data.put(\"APPLICATION_ICON\", Optional.ofNullable(iconFile).map(\n+                f -> f.installPath().toString()).orElse(null));\n@@ -283,8 +280,3 @@\n-\n-        String appLauncher = thePackage.installedApplicationLayout().launchersDirectory().resolve(\n-                LinuxAppImageBuilder.getLauncherName(params)).toString();\n-        if (Pattern.compile(\"\\\\s\").matcher(appLauncher).find()) {\n-            \/\/ Path contains whitespace(s). Enclose in double quotes.\n-            appLauncher = \"\\\"\" + appLauncher + \"\\\"\";\n-        }\n-        data.put(\"APPLICATION_LAUNCHER\", appLauncher);\n+        data.put(\"APPLICATION_LAUNCHER\", Enquoter.forPropertyValues().applyTo(\n+                thePackage.installedApplicationLayout().launchersDirectory().resolve(\n+                        LinuxAppImageBuilder.getLauncherName(params)).toString()));\n@@ -359,1 +351,1 @@\n-            data.put(DESKTOP_COMMANDS_INSTALL, stringifyShellCommands(cmds));\n+            data.put(COMMANDS_INSTALL, stringifyShellCommands(cmds));\n@@ -365,1 +357,1 @@\n-            data.put(DESKTOP_COMMANDS_UNINSTALL, stringifyShellCommands(cmds));\n+            data.put(COMMANDS_UNINSTALL, stringifyShellCommands(cmds));\n@@ -388,1 +380,1 @@\n-            installPath = thePackage\n+            var installPath = thePackage\n@@ -391,1 +383,1 @@\n-            srcPath = thePackage\n+            var srcPath = thePackage\n@@ -394,1 +386,0 @@\n-        }\n@@ -396,2 +387,2 @@\n-        private final Path installPath;\n-        private final Path srcPath;\n+            impl = new InstallableFile(srcPath, installPath);\n+        }\n@@ -400,1 +391,1 @@\n-            return installPath;\n+            return impl.installPath();\n@@ -404,1 +395,1 @@\n-            return srcPath;\n+            return impl.srcPath();\n@@ -406,0 +397,2 @@\n+\n+        private final InstallableFile impl;\n@@ -529,9 +522,0 @@\n-    private static String stringifyShellCommands(String... commands) {\n-        return stringifyShellCommands(Arrays.asList(commands));\n-    }\n-\n-    private static String stringifyShellCommands(List<String> commands) {\n-        return String.join(System.lineSeparator(), commands.stream().filter(\n-                s -> s != null && !s.isEmpty()).toList());\n-    }\n-\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/DesktopIntegration.java","additions":43,"deletions":59,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import static jdk.jpackage.internal.OverridableResource.createResource;\n+\n+\/**\n+ * Helper to install launchers as services using \"systemd\".\n+ *\/\n+public final class LinuxLaunchersAsServices extends UnixLaunchersAsServices {\n+\n+    private LinuxLaunchersAsServices(PlatformPackage thePackage,\n+            Map<String, Object> params) throws IOException {\n+        super(thePackage, REQUIRED_PACKAGES, params, li -> {\n+            return new Launcher(thePackage, li.getName(), params);\n+        });\n+    }\n+\n+    static ShellCustomAction create(PlatformPackage thePackage,\n+            Map<String, Object> params) throws IOException {\n+        if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            return ShellCustomAction.nop(REPLACEMENT_STRING_IDS);\n+        }\n+        return new LinuxLaunchersAsServices(thePackage, params);\n+    }\n+\n+    public static Path getServiceUnitFileName(String packageName,\n+            String launcherName) {\n+        String baseName = launcherName.replaceAll(\"[\\\\s]\", \"_\");\n+        return Path.of(packageName + \"-\" + baseName + \".service\");\n+    }\n+\n+    private static class Launcher extends UnixLauncherAsService {\n+\n+        Launcher(PlatformPackage thePackage, String name,\n+                Map<String, Object> mainParams) {\n+            super(name, mainParams, createResource(\"unit-template.service\",\n+                    mainParams).setCategory(I18N.getString(\n+                            \"resource.systemd-unit-file\")));\n+\n+            unitFilename = getServiceUnitFileName(thePackage.name(), getName());\n+\n+            getResource()\n+                    .setPublicName(unitFilename)\n+                    .addSubstitutionDataEntry(\"APPLICATION_LAUNCHER\",\n+                            Enquoter.forPropertyValues().applyTo(\n+                                    thePackage.installedApplicationLayout().launchersDirectory().resolve(\n+                                            getName()).toString()));\n+        }\n+\n+        @Override\n+        Path descriptorFilePath(Path root) {\n+            return root.resolve(\"lib\/systemd\/system\").resolve(unitFilename);\n+        }\n+\n+        private final Path unitFilename;\n+    }\n+\n+    private final static List<String> REQUIRED_PACKAGES = List.of(\"systemd\",\n+            \"coreutils\" \/* \/usr\/bin\/wc *\/, \"grep\");\n+}\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxLaunchersAsServices.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import java.util.stream.Collectors;\n@@ -43,1 +42,0 @@\n-import static jdk.jpackage.internal.DesktopIntegration.*;\n@@ -46,1 +44,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.RELEASE;\n@@ -56,0 +53,3 @@\n+        customActions = List.of(new CustomActionInstance(\n+                DesktopIntegration::create), new CustomActionInstance(\n+                LinuxLaunchersAsServices::create));\n@@ -151,1 +151,3 @@\n-            desktopIntegration = DesktopIntegration.create(thePackage, params);\n+            for (var ca : customActions) {\n+                ca.init(thePackage, params);\n+            }\n@@ -154,5 +156,3 @@\n-            if (desktopIntegration != null) {\n-                data.putAll(desktopIntegration.create());\n-            } else {\n-                Stream.of(DESKTOP_COMMANDS_INSTALL, DESKTOP_COMMANDS_UNINSTALL,\n-                        UTILITY_SCRIPTS).forEach(v -> data.put(v, \"\"));\n+\n+            for (var ca : customActions) {\n+                data.putAll(ca.instance.create());\n@@ -185,6 +185,4 @@\n-        final List<String> xdgUtilsPackage;\n-        if (desktopIntegration != null) {\n-            xdgUtilsPackage = desktopIntegration.requiredPackages();\n-        } else {\n-            xdgUtilsPackage = Collections.emptyList();\n-        }\n+        final List<String> caPackages = customActions.stream()\n+                .map(ca -> ca.instance)\n+                .map(ShellCustomAction::requiredPackages)\n+                .flatMap(List::stream).toList();\n@@ -207,1 +205,1 @@\n-        List<String> result = Stream.of(xdgUtilsPackage, neededLibPackages).flatMap(\n+        List<String> result = Stream.of(caPackages, neededLibPackages).flatMap(\n@@ -348,1 +346,17 @@\n-    private DesktopIntegration desktopIntegration;\n+    private final List<CustomActionInstance> customActions;\n+\n+    private static final class CustomActionInstance {\n+\n+        CustomActionInstance(ShellCustomActionFactory factory) {\n+            this.factory = factory;\n+        }\n+\n+        void init(PlatformPackage thePackage, Map<String, ? super Object> params)\n+                throws IOException {\n+            instance = factory.create(thePackage, params);\n+            Objects.requireNonNull(instance);\n+        }\n+\n+        private final ShellCustomActionFactory factory;\n+        ShellCustomAction instance;\n+    }\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/LinuxPackageBundler.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.systemd-unit-file=systemd unit file\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/LinuxResources.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.systemd-unit-file=systemd unit file\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/LinuxResources_ja.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.systemd-unit-file=systemd unit file\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/LinuxResources_zh_CN.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/desktop_utils.sh","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/utils.sh","status":"renamed"},{"patch":"@@ -0,0 +1,38 @@\n+#\n+# Register $@ unit files with systemd service.\n+#\n+register_services ()\n+{\n+  for unit in \"$@\"; do\n+    systemctl enable --now \"$unit\"\n+  done\n+}\n+\n+\n+#\n+# Unregister $@ unit files with systemd service.\n+#\n+unregister_services ()\n+{\n+  for unit in \"$@\"; do\n+    if file_belongs_to_single_package \"$unit\"; then\n+      local unit_name=`basename \"$unit\"`\n+      if systemctl list-units --full -all | grep -q \"$unit_name\"; then\n+        systemctl disable --now \"$unit_name\"\n+      fi\n+    fi\n+  done\n+}\n+\n+file_belongs_to_single_package ()\n+{\n+  if [ ! -e \"$1\" ]; then\n+    false\n+  elif [ \"$package_type\" = rpm ]; then\n+    test `rpm -q --whatprovides \"$1\" | wc -l` = 1\n+  elif [ \"$package_type\" = deb ]; then\n+    test `dpkg -S \"$1\" | wc -l` = 1\n+  else\n+    exit 1\n+  fi\n+}\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/services_utils.sh","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -20,0 +20,3 @@\n+package_type=deb\n+LAUNCHER_AS_SERVICE_SCRIPTS\n+\n@@ -23,0 +26,1 @@\n+LAUNCHER_AS_SERVICE_COMMANDS_INSTALL\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.postinst","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -16,0 +16,2 @@\n+package_type=deb\n+LAUNCHER_AS_SERVICE_SCRIPTS\n@@ -19,0 +21,3 @@\n+if [ -n \"$2\" ]; then\n+  true; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n+fi\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.preinst","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -20,1 +20,3 @@\n-UTILITY_SCRIPTS\n+package_type=deb\n+DESKTOP_SCRIPTS\n+LAUNCHER_AS_SERVICE_SCRIPTS\n@@ -25,0 +27,1 @@\n+LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n@@ -37,1 +40,0 @@\n-\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.prerm","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,4 @@\n+if [ \"$(echo %{_sourcedir}\/lib\/systemd\/system\/*.service)\" != '%{_sourcedir}\/lib\/systemd\/system\/*.service' ]; then\n+  install -d -m 755 %{buildroot}\/lib\/systemd\/system\n+  cp %{_sourcedir}\/lib\/systemd\/system\/*.service %{buildroot}\/lib\/systemd\/system\n+fi\n@@ -57,1 +61,1 @@\n-(cd %{buildroot} && find . -type d) | sed -e 's\/^\\.\/\/' -e '\/^$\/d' | sort > %{app_filelist}\n+(cd %{buildroot} && find . -path .\/lib\/systemd -prune -o -type d -print) | sed -e 's\/^\\.\/\/' -e '\/^$\/d' | sort > %{app_filelist}\n@@ -72,0 +76,2 @@\n+package_type=rpm\n+LAUNCHER_AS_SERVICE_SCRIPTS\n@@ -73,0 +79,8 @@\n+LAUNCHER_AS_SERVICE_COMMANDS_INSTALL\n+\n+%pre\n+package_type=rpm\n+LAUNCHER_AS_SERVICE_SCRIPTS\n+if [ \"$1\" = 2 ]; then\n+  true; LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n+fi\n@@ -75,1 +89,3 @@\n-UTILITY_SCRIPTS\n+package_type=rpm\n+DESKTOP_SCRIPTS\n+LAUNCHER_AS_SERVICE_SCRIPTS\n@@ -77,0 +93,1 @@\n+LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/template.spec","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,9 @@\n+[Unit]\n+Description=SERVICE_DESCRIPTION\n+\n+[Service]\n+ExecStart=APPLICATION_LAUNCHER\n+Restart=on-failure\n+\n+[Install]\n+WantedBy=multi-user.target\n","filename":"src\/jdk.jpackage\/linux\/classes\/jdk\/jpackage\/internal\/resources\/unit-template.service","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.VERBOSE;\n@@ -48,7 +47,0 @@\n-    public static final BundlerParamInfo<String> MAC_CF_BUNDLE_NAME =\n-            new StandardBundlerParam<>(\n-                    Arguments.CLIOptions.MAC_BUNDLE_NAME.getId(),\n-                    String.class,\n-                    params -> null,\n-                    (s, p) -> s);\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-    protected static String getInstallDir(\n+    static String getInstallDir(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import static jdk.jpackage.internal.MacAppImageBuilder.MAC_CF_BUNDLE_IDENTIFIER;\n+import static jdk.jpackage.internal.OverridableResource.createResource;\n+import static jdk.jpackage.internal.StandardBundlerParam.APP_NAME;\n+\n+\/**\n+ * Helper to install launchers as services using \"launchd\".\n+ *\/\n+public final class MacLaunchersAsServices extends UnixLaunchersAsServices {\n+\n+    private MacLaunchersAsServices(PlatformPackage thePackage,\n+            Map<String, Object> params) throws IOException {\n+        super(thePackage, List.of(), params, li -> {\n+            return new Launcher(thePackage, li.getName(), params);\n+        });\n+    }\n+\n+    static ShellCustomAction create(Map<String, Object> params,\n+            Path outputDir) throws IOException {\n+        if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            return null;\n+        }\n+        return Optional.of(new MacLaunchersAsServices(new PlatformPackage() {\n+            @Override\n+            public String name() {\n+                return MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params);\n+            }\n+\n+            @Override\n+            public Path sourceRoot() {\n+                return outputDir;\n+            }\n+\n+            @Override\n+            public ApplicationLayout sourceApplicationLayout() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public ApplicationLayout installedApplicationLayout() {\n+                return ApplicationLayout.macAppImage().resolveAt(Path.of(\n+                        MacBaseInstallerBundler.getInstallDir(params, false),\n+                        APP_NAME.fetchFrom(params) + \".app\"));\n+            }\n+        }, params)).filter(Predicate.not(MacLaunchersAsServices::isEmpty)).orElse(\n+                null);\n+    }\n+\n+    public static Path getServicePListFileName(String packageName,\n+            String launcherName) {\n+        String baseName = launcherName.replaceAll(\"[\\\\s]\", \"_\");\n+        return Path.of(packageName + \"-\" + baseName + \".plist\");\n+    }\n+\n+    private static class Launcher extends UnixLauncherAsService {\n+\n+        Launcher(PlatformPackage thePackage, String name,\n+                Map<String, Object> mainParams) {\n+            super(name, mainParams, createResource(\"launchd.plist.template\",\n+                    mainParams).setCategory(I18N.getString(\n+                            \"resource.launchd-plist-file\")));\n+\n+            plistFilename = getServicePListFileName(thePackage.name(), getName());\n+\n+            \/\/ It is recommended to set value of \"label\" property in launchd\n+            \/\/ .plist file equal to the name of this .plist file without the suffix.\n+            String label = IOUtils.replaceSuffix(plistFilename.getFileName(), \"\").toString();\n+\n+            getResource()\n+                    .setPublicName(plistFilename)\n+                    .addSubstitutionDataEntry(\"LABEL\", label)\n+                    .addSubstitutionDataEntry(\"APPLICATION_LAUNCHER\",\n+                            thePackage.installedApplicationLayout().launchersDirectory().resolve(\n+                                    getName()).toString());\n+        }\n+\n+        @Override\n+        Path descriptorFilePath(Path root) {\n+            return root.resolve(\"Library\/LaunchDaemons\").resolve(plistFilename);\n+        }\n+\n+        private final Path plistFilename;\n+    }\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacLaunchersAsServices.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.LinkedHashMap;\n@@ -42,0 +43,2 @@\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n@@ -45,1 +48,0 @@\n-import static jdk.jpackage.internal.StandardBundlerParam.VERBOSE;\n@@ -55,0 +57,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.RESOURCE_DIR;\n@@ -64,5 +67,0 @@\n-    private static final String TEMPLATE_PREINSTALL_SCRIPT =\n-            \"preinstall.template\";\n-    private static final String TEMPLATE_POSTINSTALL_SCRIPT =\n-            \"postinstall.template\";\n-\n@@ -174,0 +172,10 @@\n+    private Path getPackages_ServicesPackage(Map<String, ? super Object> params) {\n+        return PACKAGES_ROOT.fetchFrom(params).resolve(\n+                APP_NAME.fetchFrom(params) + \"-services.pkg\");\n+    }\n+\n+    private Path getPackages_SupportPackage(Map<String, ? super Object> params) {\n+        return PACKAGES_ROOT.fetchFrom(params).resolve(\n+                APP_NAME.fetchFrom(params) + \"-support.pkg\");\n+    }\n+\n@@ -193,2 +201,2 @@\n-    private Path getScripts_PreinstallFile(Map<String, ? super Object> params) {\n-        return SCRIPTS_DIR.fetchFrom(params).resolve(\"preinstall\");\n+    private String getAppIdentifier(Map<String, ? super Object> params) {\n+        return MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params);\n@@ -197,3 +205,2 @@\n-    private Path getScripts_PostinstallFile(\n-            Map<String, ? super Object> params) {\n-        return SCRIPTS_DIR.fetchFrom(params).resolve(\"postinstall\");\n+    private String getServicesIdentifier(Map<String, ? super Object> params) {\n+        return MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params) + \".services\";\n@@ -202,2 +209,2 @@\n-    private String getAppIdentifier(Map<String, ? super Object> params) {\n-        return MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params);\n+    private String getSupportIdentifier(Map<String, ? super Object> params) {\n+        return MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params) + \".support\";\n@@ -218,8 +225,2 @@\n-        createResource(TEMPLATE_PREINSTALL_SCRIPT, params)\n-                .setCategory(I18N.getString(\"resource.pkg-preinstall-script\"))\n-                .setSubstitutionData(data)\n-                .saveToFile(getScripts_PreinstallFile(params));\n-        getScripts_PreinstallFile(params).toFile().setExecutable(true, false);\n-\n-        createResource(TEMPLATE_POSTINSTALL_SCRIPT, params)\n-                .setCategory(I18N.getString(\"resource.pkg-postinstall-script\"))\n+        MacPkgInstallerScripts.createAppScripts()\n+                .setResourceDir(RESOURCE_DIR.fetchFrom(params))\n@@ -227,2 +228,1 @@\n-                .saveToFile(getScripts_PostinstallFile(params));\n-        getScripts_PostinstallFile(params).toFile().setExecutable(true, false);\n+                .saveInFolder(SCRIPTS_DIR.fetchFrom(params));\n@@ -231,3 +231,23 @@\n-    private static String URLEncoding(String pkgName) throws URISyntaxException {\n-        URI uri = new URI(null, null, pkgName, null);\n-        return uri.toASCIIString();\n+    private void addPackageToInstallerGuiScript(XMLStreamWriter xml,\n+            String pkgId, String pkgName, String pkgVersion) throws IOException,\n+            XMLStreamException {\n+        xml.writeStartElement(\"pkg-ref\");\n+        xml.writeAttribute(\"id\", pkgId);\n+        xml.writeEndElement(); \/\/ <\/pkg-ref>\n+        xml.writeStartElement(\"choice\");\n+        xml.writeAttribute(\"id\", pkgId);\n+        xml.writeAttribute(\"visible\", \"false\");\n+        xml.writeStartElement(\"pkg-ref\");\n+        xml.writeAttribute(\"id\", pkgId);\n+        xml.writeEndElement(); \/\/ <\/pkg-ref>\n+        xml.writeEndElement(); \/\/ <\/choice>\n+        xml.writeStartElement(\"pkg-ref\");\n+        xml.writeAttribute(\"id\", pkgId);\n+        xml.writeAttribute(\"version\", pkgVersion);\n+        xml.writeAttribute(\"onConclusion\", \"none\");\n+        try {\n+            xml.writeCharacters(new URI(null, null, pkgName, null).toASCIIString());\n+        } catch (URISyntaxException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        xml.writeEndElement(); \/\/ <\/pkg-ref>\n@@ -280,1 +300,0 @@\n-            String appId = getAppIdentifier(params);\n@@ -282,3 +301,16 @@\n-            xml.writeStartElement(\"pkg-ref\");\n-            xml.writeAttribute(\"id\", appId);\n-            xml.writeEndElement(); \/\/ <\/pkg-ref>\n+            Map<String, Path> pkgs = new LinkedHashMap<>();\n+\n+            pkgs.put(getAppIdentifier(params), getPackages_AppPackage(params));\n+            if (withServicesPkg(params)) {\n+                pkgs.put(getServicesIdentifier(params),\n+                        getPackages_ServicesPackage(params));\n+                pkgs.put(getSupportIdentifier(params),\n+                        getPackages_SupportPackage(params));\n+            }\n+\n+            for (var pkg : pkgs.entrySet()) {\n+                addPackageToInstallerGuiScript(xml, pkg.getKey(),\n+                        pkg.getValue().getFileName().toString(),\n+                        VERSION.fetchFrom(params));\n+            }\n+\n@@ -294,3 +326,5 @@\n-            xml.writeStartElement(\"line\");\n-            xml.writeAttribute(\"choice\", appId);\n-            xml.writeEndElement(); \/\/ <\/line>\n+            for (var pkgId : pkgs.keySet()) {\n+                xml.writeStartElement(\"line\");\n+                xml.writeAttribute(\"choice\", pkgId);\n+                xml.writeEndElement(); \/\/ <\/line>\n+            }\n@@ -302,18 +336,0 @@\n-            xml.writeStartElement(\"choice\");\n-            xml.writeAttribute(\"id\", appId);\n-            xml.writeAttribute(\"visible\", \"false\");\n-            xml.writeStartElement(\"pkg-ref\");\n-            xml.writeAttribute(\"id\", appId);\n-            xml.writeEndElement(); \/\/ <\/pkg-ref>\n-            xml.writeEndElement(); \/\/ <\/choice>\n-            xml.writeStartElement(\"pkg-ref\");\n-            xml.writeAttribute(\"id\", appId);\n-            xml.writeAttribute(\"version\", VERSION.fetchFrom(params));\n-            xml.writeAttribute(\"onConclusion\", \"none\");\n-            try {\n-                xml.writeCharacters(URLEncoding(\n-                        getPackages_AppPackage(params).getFileName().toString()));\n-            } catch (URISyntaxException ex) {\n-                throw new IOException(ex);\n-            }\n-            xml.writeEndElement(); \/\/ <\/pkg-ref>\n@@ -437,0 +453,75 @@\n+    private boolean withServicesPkg(Map<String, Object> params) {\n+        try {\n+            return !APP_STORE.fetchFrom(params)\n+                    && MacLaunchersAsServices.create(params, null) != null;\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private void createServicesPkg(Map<String, Object> params) throws\n+            IOException {\n+        Path root = TEMP_ROOT.fetchFrom(params).resolve(\"services\");\n+\n+        Path srcRoot = root.resolve(\"src\");\n+\n+        var services = MacLaunchersAsServices.create(params, srcRoot);\n+\n+        Path scriptsDir = root.resolve(\"scripts\");\n+\n+        var data = services.create();\n+        data.put(\"SERVICES_PACKAGE_ID\", getServicesIdentifier(params));\n+\n+        MacPkgInstallerScripts.createServicesScripts()\n+                .setResourceDir(RESOURCE_DIR.fetchFrom(params))\n+                .setSubstitutionData(data)\n+                .saveInFolder(scriptsDir);\n+\n+        var pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n+                \"--root\",\n+                srcRoot.toString(),\n+                \"--install-location\",\n+                \"\/\",\n+                \"--scripts\",\n+                scriptsDir.toString(),\n+                \"--identifier\",\n+                getServicesIdentifier(params),\n+                getPackages_ServicesPackage(params).toAbsolutePath().toString());\n+        IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+\n+        createSupportPkg(params, data);\n+    }\n+\n+    private void createSupportPkg(Map<String, Object> params,\n+            Map<String, String> servicesSubstitutionData) throws IOException {\n+        Path root = TEMP_ROOT.fetchFrom(params).resolve(\"support\");\n+\n+        Path srcRoot = root.resolve(\"src\");\n+\n+        var enqouter = Enquoter.forShellLiterals().setEnquotePredicate(str -> true);\n+\n+        Map<String, String> data = new HashMap<>(servicesSubstitutionData);\n+        data.put(\"APP_INSTALLATION_FOLDER\", enqouter.applyTo(Path.of(\n+                getInstallDir(params, false), APP_NAME.fetchFrom(params)\n+                + \".app\").toString()));\n+        data.put(\"SUPPORT_INSTALLATION_FOLDER\", enqouter.applyTo(Path.of(\n+                \"\/Library\/Application Support\", APP_NAME.fetchFrom(params)).toString()));\n+\n+        new ShellScriptResource(\"uninstall.command\")\n+                .setResource(createResource(\"uninstall.command.template\", params)\n+                        .setCategory(I18N.getString(\"resource.pkg-uninstall-script\"))\n+                        .setPublicName(\"uninstaller\")\n+                        .setSubstitutionData(data))\n+                .saveInFolder(srcRoot.resolve(APP_NAME.fetchFrom(params)));\n+\n+        var pb = new ProcessBuilder(\"\/usr\/bin\/pkgbuild\",\n+                \"--root\",\n+                srcRoot.toString(),\n+                \"--install-location\",\n+                \"\/Library\/Application Support\",\n+                \"--identifier\",\n+                getSupportIdentifier(params),\n+                getPackages_SupportPackage(params).toAbsolutePath().toString());\n+        IOUtils.exec(pb, false, null, true, Executor.INFINITE_TIMEOUT);\n+    }\n+\n@@ -445,0 +536,4 @@\n+            if (withServicesPkg(params)) {\n+                createServicesPkg(params);\n+            }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":147,"deletions":52,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.function.Supplier;\n+import jdk.jpackage.internal.PackageScripts.ResourceConfig;\n+\n+\/**\n+ * MacOS PKG installer scripts.\n+ *\/\n+final class MacPkgInstallerScripts {\n+\n+    enum AppScripts implements Supplier<OverridableResource> {\n+        preinstall(new ResourceConfig(\"preinstall.template\",\n+                \"resource.pkg-preinstall-script\")),\n+        postinstall(new ResourceConfig(\"postinstall.template\",\n+                \"resource.pkg-postinstall-script\"));\n+\n+        AppScripts(ResourceConfig cfg) {\n+            this.cfg = cfg;\n+        }\n+\n+        @Override\n+        public OverridableResource get() {\n+            return cfg.createResource();\n+        }\n+\n+        private final ResourceConfig cfg;\n+    }\n+\n+    enum ServicesScripts implements Supplier<OverridableResource> {\n+        preinstall(new ResourceConfig(\"services-preinstall.template\",\n+                \"resource.pkg-services-preinstall-script\")),\n+        postinstall(new ResourceConfig(\"services-postinstall.template\",\n+                \"resource.pkg-services-postinstall-script\"));\n+\n+        ServicesScripts(ResourceConfig cfg) {\n+            this.cfg = cfg;\n+        }\n+\n+        @Override\n+        public OverridableResource get() {\n+            return cfg.createResource();\n+        }\n+\n+        private final ResourceConfig cfg;\n+    }\n+\n+    static PackageScripts<AppScripts> createAppScripts() {\n+        return PackageScripts.create(AppScripts.class);\n+    }\n+\n+    static PackageScripts<ServicesScripts> createServicesScripts() {\n+        return PackageScripts.create(ServicesScripts.class);\n+    }\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgInstallerScripts.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,3 @@\n+resource.pkg-services-preinstall-script=PKG preinstall script for services package\n+resource.pkg-services-postinstall-script=PKG postinstall script for services package\n+resource.pkg-uninstall-script=PKG uninstaller script\n@@ -59,0 +62,1 @@\n+resource.launchd-plist-file=launchd plist file\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,3 @@\n+resource.pkg-services-preinstall-script=PKG preinstall script for services package\n+resource.pkg-services-postinstall-script=PKG postinstall script for services package\n+resource.pkg-uninstall-script=PKG uninstaller script\n@@ -58,0 +61,2 @@\n+resource.pkg-pdf=project definition file\n+resource.launchd-plist-file=launchd plist file\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_ja.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,3 @@\n+resource.pkg-services-preinstall-script=PKG preinstall script for services package\n+resource.pkg-services-postinstall-script=PKG postinstall script for services package\n+resource.pkg-uninstall-script=PKG uninstaller script\n@@ -58,0 +61,2 @@\n+resource.pkg-pdf=project definition file\n+resource.launchd-plist-file=launchd plist file\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_zh_CN.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-\/\/Apple\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+  <dict>\n+    <key>Label<\/key>\n+    <string>LABEL<\/string>\n+    <key>ProgramArguments<\/key>\n+    <array>\n+      <string>APPLICATION_LAUNCHER<\/string>\n+    <\/array>\n+    <key>RunAtLoad<\/key><true\/>\n+    <key>KeepAlive<\/key><true\/>\n+  <\/dict>\n+<\/plist>\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/launchd.plist.template","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+#!\/usr\/bin\/env sh\n+\n+LAUNCHER_AS_SERVICE_SCRIPTS\n+LAUNCHER_AS_SERVICE_COMMANDS_INSTALL\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/services-postinstall.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+#!\/usr\/bin\/env sh\n+\n+LAUNCHER_AS_SERVICE_SCRIPTS\n+\n+unregister_services `\/usr\/sbin\/pkgutil --files SERVICES_PACKAGE_ID | \/usr\/bin\/grep '\\.plist$' | \/usr\/bin\/awk '{print \"\/\"$0}'`\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/services-preinstall.template","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+#\n+# Register $@ .plist files with launchd service.\n+#\n+register_services ()\n+{\n+  for daemonPlistFilePath in \"$@\"; do\n+    daemonPlistFileName=\"${daemonPlistFilePath#\/Library\/LaunchDaemons\/}\";\n+\n+    \/bin\/launchctl load \"$daemonPlistFilePath\"\n+\n+    \/bin\/launchctl start \"${daemonPlistFileName%.plist}\"\n+  done\n+}\n+\n+\n+#\n+# Unregister $@ .plist files with launchd service.\n+#\n+unregister_services ()\n+{\n+  for daemonPlistFilePath in \"$@\"; do\n+    daemonPlistFileName=\"${daemonPlistFilePath#\/Library\/LaunchDaemons\/}\";\n+\n+    sudo \/bin\/launchctl stop \"${daemonPlistFileName%.plist}\"\n+\n+    sudo \/bin\/launchctl unload \"$daemonPlistFilePath\"\n+\n+    test -z \"$delete_plist_files\" || sudo rm -f \"$daemonPlistFilePath\"\n+  done\n+}\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/services_utils.sh","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+#!\/usr\/bin\/env sh\n+\n+LAUNCHER_AS_SERVICE_SCRIPTS\n+\n+delete_plist_files=yes\n+LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\n+\n+sudo rm -rf APP_INSTALLATION_FOLDER\n+sudo rm -rf SUPPORT_INSTALLATION_FOLDER\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/uninstall.command.template","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Optional;\n@@ -63,0 +64,1 @@\n+ * launcher-as-service\n@@ -117,1 +119,0 @@\n-        String value = getOptionValue(CLIOptions.ICON);\n@@ -119,1 +120,6 @@\n-                (value == null) ? null : Path.of(value));\n+                Optional.ofNullable(getOptionValue(CLIOptions.ICON)).map(\n+                        Path::of).orElse(null));\n+\n+        Arguments.putUnlessNull(bundleParams,\n+                CLIOptions.LAUNCHER_AS_SERVICE.getId(), getOptionValue(\n+                CLIOptions.LAUNCHER_AS_SERVICE));\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AddLauncherArguments.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -51,0 +52,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.LAUNCHER_AS_SERVICE;\n@@ -55,1 +57,1 @@\n-public class AppImageFile {\n+public final class AppImageFile {\n@@ -146,2 +148,2 @@\n-            for (int i = 0; i < addLaunchers.size(); i++) {\n-                Map<String, ? super Object> sl = addLaunchers.get(i);\n+            for (var launcherParams : addLaunchers) {\n+                var li = new LauncherInfo(launcherParams);\n@@ -149,4 +151,4 @@\n-                xml.writeAttribute(\"name\", APP_NAME.fetchFrom(sl));\n-                xml.writeAttribute(\"shortcut\",\n-                        SHORTCUT_HINT.fetchFrom(sl).toString());\n-                xml.writeAttribute(\"menu\", MENU_HINT.fetchFrom(sl).toString());\n+                xml.writeAttribute(\"name\", li.getName());\n+                xml.writeAttribute(\"shortcut\", Boolean.toString(li.isShortcut()));\n+                xml.writeAttribute(\"menu\", Boolean.toString(li.isMenu()));\n+                xml.writeAttribute(\"service\", Boolean.toString(li.isService()));\n@@ -193,8 +195,1 @@\n-                 Node item = launcherNodes.item(i);\n-                 String name = getAttribute(item, \"name\");\n-                 String shortcut = getAttribute(item, \"shortcut\");\n-                 String menu = getAttribute(item, \"menu\");\n-\n-                 launcherInfos.add(new LauncherInfo(name,\n-                         !(\"false\".equals(shortcut)),\n-                         !(\"false\".equals(menu))));\n+                 launcherInfos.add(new LauncherInfo(launcherNodes.item(i)));\n@@ -244,1 +239,1 @@\n-            Map<String, ? super Object> params) {\n+            Map<String, Object> params) {\n@@ -246,7 +241,17 @@\n-        try {\n-            AppImageFile appImageInfo = AppImageFile.load(appImageDir);\n-            if (appImageInfo != null) {\n-                launchers.add(new LauncherInfo(\n-                        appImageInfo.getLauncherName(), true, true));\n-                launchers.addAll(appImageInfo.getAddLaunchers());\n-                return launchers;\n+        if (appImageDir != null) {\n+            try {\n+                AppImageFile appImageInfo = AppImageFile.load(appImageDir);\n+                if (appImageInfo != null) {\n+                    launchers.add(new LauncherInfo(\n+                            appImageInfo.getLauncherName(), params));\n+                    launchers.addAll(appImageInfo.getAddLaunchers());\n+                    return launchers;\n+                }\n+            } catch (NoSuchFileException nsfe) {\n+                \/\/ non jpackage generated app-image (no app\/.jpackage.xml)\n+                Log.info(MessageFormat.format(I18N.getString(\n+                        \"warning.foreign-app-image\"), appImageDir));\n+            } catch (IOException ioe) {\n+                Log.verbose(ioe);\n+                Log.info(MessageFormat.format(I18N.getString(\n+                        \"warning.invalid-app-image\"), appImageDir));\n@@ -254,9 +259,0 @@\n-        } catch (NoSuchFileException nsfe) {\n-            \/\/ non jpackage generated app-image (no app\/.jpackage.xml)\n-            Log.info(MessageFormat.format(I18N.getString(\n-                    \"warning.foreign-app-image\"), appImageDir));\n-        } catch (IOException ioe) {\n-            Log.verbose(ioe);\n-            Log.info(MessageFormat.format(I18N.getString(\n-                    \"warning.invalid-app-image\"), appImageDir));\n-\n@@ -264,2 +260,0 @@\n-        \/\/ this should never be the case, but maintaining behavior of\n-        \/\/ creating default launchers without AppImageFile present\n@@ -267,2 +261,4 @@\n-        ADD_LAUNCHERS.fetchFrom(params).stream().map(APP_NAME::fetchFrom).map(\n-                name -> new LauncherInfo(name, true, true)).forEach(launchers::add);\n+        launchers.add(new LauncherInfo(params));\n+        ADD_LAUNCHERS.fetchFrom(params).stream()\n+                .map(launcherParams -> new LauncherInfo(launcherParams))\n+                .forEach(launchers::add);\n@@ -292,2 +288,2 @@\n-    private static String getVersion() {\n-        return System.getProperty(\"java.version\");\n+    static String getVersion() {\n+        return \"1.0\";\n@@ -296,1 +292,1 @@\n-    private static String getPlatform() {\n+    static String getPlatform() {\n@@ -304,0 +300,1 @@\n+\n@@ -310,0 +307,8 @@\n+        if (!Objects.equals(getVersion(), creatorVersion)) {\n+            return false;\n+        }\n+\n+        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n+            return false;\n+        }\n+\n@@ -314,3 +319,8 @@\n-        private String name;\n-        private boolean shortcut;\n-        private boolean menu;\n+        private final String name;\n+        private final boolean shortcut;\n+        private final boolean menu;\n+        private final boolean service;\n+\n+        private LauncherInfo(Map<String, Object> params) {\n+            this(APP_NAME.fetchFrom(params), params);\n+        }\n@@ -318,1 +328,1 @@\n-        public LauncherInfo(String name, boolean shortcut, boolean menu) {\n+        private LauncherInfo(String name, Map<String, Object> params) {\n@@ -320,2 +330,10 @@\n-            this.shortcut = shortcut;\n-            this.menu = menu;\n+            this.shortcut = SHORTCUT_HINT.fetchFrom(params);\n+            this.menu = MENU_HINT.fetchFrom(params);\n+            this.service = LAUNCHER_AS_SERVICE.fetchFrom(params);\n+        }\n+\n+        private LauncherInfo(Node node) {\n+            this.name = getAttribute(node, \"name\");\n+            this.shortcut = !\"false\".equals(getAttribute(node, \"shortcut\"));\n+            this.menu = !\"false\".equals(getAttribute(node, \"menu\"));\n+            this.service = !\"false\".equals(getAttribute(node, \"service\"));\n@@ -323,0 +341,1 @@\n+\n@@ -326,0 +345,1 @@\n+\n@@ -329,0 +349,1 @@\n+\n@@ -332,0 +353,4 @@\n+\n+        public boolean isService() {\n+            return service;\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":70,"deletions":45,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -317,0 +317,4 @@\n+        LAUNCHER_AS_SERVICE (\"launcher-as-service\", OptionCategories.PROPERTY, () -> {\n+            setOptionValue(\"launcher-as-service\", true);\n+        }),\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Add quotes to the given string in a configurable way.\n+ *\/\n+final class Enquoter {\n+\n+    private Enquoter() {\n+        setQuoteChar('\"');\n+    }\n+\n+    static Enquoter forPropertyValues() {\n+        return new Enquoter()\n+                .setEnquotePredicate(QUOTE_IF_WHITESPACES)\n+                .setEscaper(PREPEND_BACKSLASH);\n+    }\n+\n+    static Enquoter forShellLiterals() {\n+        return forShellLiterals('\\'');\n+    }\n+\n+    static Enquoter forShellLiterals(char quoteChar) {\n+        return new Enquoter()\n+                .setQuoteChar(quoteChar)\n+                .setEnquotePredicate(x -> true)\n+                .setEscaper(PREPEND_BACKSLASH);\n+    }\n+\n+    String applyTo(String v) {\n+        if (!needQuotes.test(v)) {\n+            return v;\n+        } else {\n+            var buf = new StringBuilder();\n+            buf.appendCodePoint(beginQuoteChr);\n+            Optional.of(escaper).ifPresentOrElse(op -> {\n+                v.codePoints().forEachOrdered(chr -> {\n+                    if (chr == beginQuoteChr || chr == endQuoteChr) {\n+                        escaper.accept(chr, buf);\n+                    } else {\n+                        buf.appendCodePoint(chr);\n+                    }\n+                });\n+            }, () -> {\n+                buf.append(v);\n+            });\n+            buf.appendCodePoint(endQuoteChr);\n+            return buf.toString();\n+        }\n+    }\n+\n+    Enquoter setQuoteChar(char chr) {\n+        beginQuoteChr = chr;\n+        endQuoteChr = chr;\n+        return this;\n+    }\n+\n+    Enquoter setEscaper(BiConsumer<Integer, StringBuilder> v) {\n+        escaper = v;\n+        return this;\n+    }\n+\n+    Enquoter setEnquotePredicate(Predicate<String> v) {\n+        needQuotes = v;\n+        return this;\n+    }\n+\n+    private int beginQuoteChr;\n+    private int endQuoteChr;\n+    private BiConsumer<Integer, StringBuilder> escaper;\n+    private Predicate<String> needQuotes = str -> false;\n+\n+    private final static Predicate<String> QUOTE_IF_WHITESPACES = new Predicate<String>() {\n+        @Override\n+        public boolean test(String t) {\n+            return pattern.matcher(t).find();\n+        }\n+        private final Pattern pattern = Pattern.compile(\"\\\\s\");\n+    };\n+\n+    private final static BiConsumer<Integer, StringBuilder> PREPEND_BACKSLASH = (chr, buf) -> {\n+        buf.append('\\\\');\n+        buf.appendCodePoint(chr);\n+    };\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Enquoter.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.Collection;\n@@ -47,1 +48,4 @@\n-import  java.util.concurrent.atomic.AtomicReference;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n@@ -51,0 +55,5 @@\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stax.StAXResult;\n@@ -326,0 +335,38 @@\n+    public static void mergeXmls(XMLStreamWriter xml, Collection<Source> sources)\n+            throws XMLStreamException, IOException {\n+        xml = (XMLStreamWriter) Proxy.newProxyInstance(\n+                XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n+            XMLStreamWriter.class}, new SkipDocumentHandler(xml));\n+\n+        try {\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            Result result = new StAXResult(xml);\n+            for (var src : sources) {\n+                tf.newTransformer().transform(src, result);\n+            }\n+        } catch (TransformerException ex) {\n+            \/\/ Should never happen\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    public static DocumentBuilderFactory initDocumentBuilderFactory() {\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newDefaultInstance();\n+        try {\n+            dbf.setFeature(\n+                    \"http:\/\/apache.org\/xml\/features\/nonvalidating\/load-external-dtd\",\n+                    false);\n+        } catch (ParserConfigurationException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+        return dbf;\n+    }\n+\n+    public static DocumentBuilder initDocumentBuilder() {\n+        try {\n+            return initDocumentBuilderFactory().newDocumentBuilder();\n+        } catch (ParserConfigurationException ex) {\n+            throw new IllegalStateException(ex);\n+        }\n+    }\n+\n@@ -419,0 +466,20 @@\n+\n+    private static class SkipDocumentHandler implements InvocationHandler {\n+\n+        SkipDocumentHandler(XMLStreamWriter target) {\n+            this.target = target;\n+        }\n+\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws\n+                Throwable {\n+            switch (method.getName()) {\n+                case \"writeStartDocument\", \"writeEndDocument\" -> {\n+                }\n+                default -> method.invoke(target, args);\n+            }\n+            return null;\n+        }\n+\n+        private final XMLStreamWriter target;\n+    }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":68,"deletions":1,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+\n+final class InstallableFile {\n+\n+    InstallableFile(Path srcPath, Path installPath) {\n+        Objects.requireNonNull(srcPath);\n+\n+        this.srcPath = srcPath;\n+        this.installPath = installPath;\n+    }\n+\n+    Path installPath() {\n+        return installPath;\n+    }\n+\n+    Path srcPath() {\n+        return srcPath;\n+    }\n+\n+    void applyToApplicationLayouts(ApplicationLayout src,\n+            ApplicationLayout install) {\n+        var key = new Object();\n+        src.pathGroup().setPath(key, srcPath);\n+        if (installPath != null && install != null) {\n+            install.pathGroup().setPath(key, installPath);\n+        }\n+    }\n+\n+    void excludeFromApplicationLayout(ApplicationLayout layout) {\n+        applyToApplicationLayouts(layout, null);\n+    }\n+\n+    private final Path installPath;\n+    private final Path srcPath;\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/InstallableFile.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.util.Map;\n+import static jdk.jpackage.internal.StandardBundlerParam.APP_NAME;\n+import static jdk.jpackage.internal.StandardBundlerParam.DESCRIPTION;\n+\n+class LauncherAsService {\n+\n+    LauncherAsService(String name, Map<String, Object> mainParams,\n+            OverridableResource resource) {\n+        if (name == null || APP_NAME.fetchFrom(mainParams).equals(name)) {\n+            \/\/ Main launcher\n+            name = APP_NAME.fetchFrom(mainParams);\n+            this.description = DESCRIPTION.fetchFrom(mainParams);\n+        } else {\n+            \/\/ Additional launcher\n+            this.description = String.format(\"%s (%s)\", DESCRIPTION.fetchFrom(\n+                    mainParams), name);\n+        }\n+\n+        this.name = name;\n+        this.resource = resource;\n+        resource.addSubstitutionDataEntry(\"SERVICE_DESCRIPTION\", description);\n+    }\n+\n+    protected OverridableResource getResource() {\n+        return resource;\n+    }\n+\n+    protected String getName() {\n+        return name;\n+    }\n+\n+    protected String getDescription() {\n+        return description;\n+    }\n+\n+    private final String name;\n+    private final String description;\n+    private final OverridableResource resource;\n+}\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherAsService.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,16 @@\n+    Path getResourceDir() {\n+        return resourceDir;\n+    }\n+\n+    String getDefaultName() {\n+        return defaultName;\n+    }\n+\n+    Path getPublicName() {\n+        return publicName;\n+    }\n+\n+    Path getExternalPath() {\n+        return externalPath;\n+    }\n+\n@@ -89,0 +105,7 @@\n+    OverridableResource addSubstitutionDataEntry(String key, String value) {\n+        var entry = Map.of(key, value);\n+        Optional.ofNullable(substitutionData).ifPresentOrElse(v -> v.putAll(\n+                entry), () -> setSubstitutionData(entry));\n+        return this;\n+    }\n+\n@@ -166,0 +189,4 @@\n+    Source saveInFolder(Path folderPath) throws IOException {\n+        return saveToFile(folderPath.resolve(getPublicName()));\n+    }\n+\n@@ -243,6 +270,2 @@\n-                final Path logResourceName;\n-                if (logPublicName != null) {\n-                    logResourceName = logPublicName.normalize();\n-                } else {\n-                    logResourceName = resourceName.normalize();\n-                }\n+                final Path logResourceName = Optional.ofNullable(logPublicName).orElse(\n+                        resourceName).normalize();\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/OverridableResource.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+\n@@ -40,1 +41,2 @@\n-     * Root directory where sources for packaging tool should be stored\n+     * Root directory where sources for packaging tool should be stored. On Unix\n+     * systems contents of this directory will be installed in \"\/\" directory.\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PlatformPackage.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -348,0 +348,10 @@\n+    static final StandardBundlerParam<Boolean> LAUNCHER_AS_SERVICE =\n+            new StandardBundlerParam<>(\n+                    Arguments.CLIOptions.LAUNCHER_AS_SERVICE.getId(),\n+                    Boolean.class,\n+                    params -> false,\n+                    \/\/ valueOf(null) is false, and we actually do want null\n+                    (s, p) -> (s == null || \"null\".equalsIgnoreCase(s)) ?\n+                            true : Boolean.valueOf(s)\n+            );\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+        options.put(CLIOptions.LAUNCHER_AS_SERVICE.getId(), USE.INSTALL);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,1 @@\n+\\          \"launcher-as-service\",\\n\\\n@@ -200,0 +201,3 @@\n+\\  --launcher-as-service\\n\\\n+\\          Request to create an installer that will register the main\\n\\\n+\\          application launcher as a background service-type application.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,1 @@\n+\\          \"launcher-as-service\",\\n\\\n@@ -200,0 +201,3 @@\n+\\  --launcher-as-service\\n\\\n+\\          Request to create an installer that will register the main\\n\\\n+\\          application launcher as a background service-type application.\\n\\\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_ja.properties","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,1 @@\n+\\          \"launcher-as-service\",\\n\\\n@@ -200,0 +201,3 @@\n+\\  --launcher-as-service\\n\\\n+\\          Request to create an installer that will register the main\\n\\\n+\\          application launcher as a background service-type application.\\n\\\n@@ -203,0 +207,1 @@\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/HelpResources_zh_CN.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * Shell scripts of a package.\n+ *\/\n+final class PackageScripts<T extends Enum<T> & Supplier<OverridableResource>> {\n+\n+    static <T extends Enum<T> & Supplier<OverridableResource>> PackageScripts<T> create(\n+            Class<T> scriptIdsType) {\n+        return new PackageScripts<>(scriptIdsType);\n+    }\n+\n+    PackageScripts(Class<T> scriptIdsType) {\n+        scripts = EnumSet.allOf(scriptIdsType).stream().collect(\n+                Collectors.toMap(UnaryOperator.identity(), scriptId -> {\n+                    return new ShellScriptResource(scriptId.name()).setResource(\n+                            scriptId.get());\n+                }));\n+    }\n+\n+    PackageScripts<T> setSubstitutionData(T id, Map<String, String> data) {\n+        scripts.get(id).getResource().setSubstitutionData(data);\n+        return this;\n+    }\n+\n+    PackageScripts<T> setSubstitutionData(Map<String, String> data) {\n+        scripts.values().forEach(\n+                script -> script.getResource().setSubstitutionData(data));\n+        return this;\n+    }\n+\n+    PackageScripts<T> setResourceDir(Path v) throws IOException {\n+        for (var script : scripts.values()) {\n+            script.getResource().setResourceDir(v);\n+        }\n+        return this;\n+    }\n+\n+    void saveInFolder(Path folder) throws IOException {\n+        for (var script : scripts.values()) {\n+            script.saveInFolder(folder);\n+        }\n+    }\n+\n+    static class ResourceConfig {\n+\n+        ResourceConfig(String defaultName, String categoryId) {\n+            this.defaultName = defaultName;\n+            this.category = I18N.getString(categoryId);\n+        }\n+\n+        OverridableResource createResource() {\n+            var resource = new OverridableResource(defaultName).setCategory(category);\n+            return getDefaultPublicName().map(resource::setPublicName).orElse(\n+                    resource);\n+        }\n+\n+        private Optional<String> getDefaultPublicName() {\n+            final String wellKnownSuffix = \".template\";\n+            if (defaultName.endsWith(wellKnownSuffix)) {\n+                return Optional.of(defaultName.substring(0, defaultName.length()\n+                        - wellKnownSuffix.length()));\n+            }\n+            return Optional.ofNullable(null);\n+        }\n+\n+        private final String defaultName;\n+        private final String category;\n+    }\n+\n+    private final Map<T, ShellScriptResource> scripts;\n+}\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/PackageScripts.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * Interface to add custom actions composed of shell commands to installers.\n+ *\/\n+abstract class ShellCustomAction {\n+\n+    List<String> requiredPackages() {\n+        return Collections.emptyList();\n+    }\n+\n+    final Map<String, String> create() throws IOException {\n+        Map<String, String> result = new HashMap<>();\n+        replacementStringIds().forEach(key -> {\n+            result.put(key, \"\");\n+        });\n+        result.putAll(createImpl());\n+        return result;\n+    }\n+\n+    protected List<String> replacementStringIds() {\n+        return Collections.emptyList();\n+    }\n+\n+    protected abstract Map<String, String> createImpl() throws IOException;\n+\n+    static ShellCustomAction nop(List<String> replacementStringIds) {\n+        return new ShellCustomAction() {\n+            @Override\n+            protected List<String> replacementStringIds() {\n+                return replacementStringIds;\n+            }\n+\n+            @Override\n+            protected Map<String, String> createImpl() throws IOException {\n+                return Map.of();\n+            }\n+        };\n+    }\n+\n+    protected static String stringifyShellCommands(String... commands) {\n+        return stringifyShellCommands(Arrays.asList(commands));\n+    }\n+\n+    protected static String stringifyShellCommands(List<String> commands) {\n+        return String.join(\"\\n\", commands.stream().filter(\n+                s -> s != null && !s.isEmpty()).toList());\n+    }\n+\n+    protected static String stringifyTextFile(String resourceName) throws IOException {\n+        try ( InputStream is = OverridableResource.readDefault(resourceName);\n+                InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);\n+                BufferedReader reader = new BufferedReader(isr)) {\n+            return reader.lines().collect(Collectors.joining(\"\\n\"));\n+        }\n+    }\n+}\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellCustomAction.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+interface ShellCustomActionFactory {\n+\n+    ShellCustomAction create(PlatformPackage thePackage,\n+            Map<String, ? super Object> params) throws IOException;\n+}\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellCustomActionFactory.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * Shell script resource.\n+ *\/\n+final class ShellScriptResource {\n+\n+    ShellScriptResource(String publicFileName) {\n+        this.publicFileName = Path.of(publicFileName);\n+    }\n+\n+    void saveInFolder(Path folder) throws IOException {\n+        Path dstFile = folder.resolve(publicFileName);\n+        resource.saveToFile(dstFile);\n+\n+        Files.setPosixFilePermissions(dstFile, Stream.of(execPerms, Set.of(\n+            PosixFilePermission.OWNER_READ,\n+            PosixFilePermission.OWNER_WRITE,\n+            PosixFilePermission.GROUP_READ,\n+            PosixFilePermission.OTHERS_READ\n+        )).flatMap(x -> x.stream()).collect(Collectors.toSet()));\n+    }\n+\n+    ShellScriptResource setResource(OverridableResource v) {\n+        resource = v;\n+        return this;\n+    }\n+\n+    ShellScriptResource onlyOwnerCanExecute(boolean v) {\n+        execPerms = v ? OWNER_CAN_EXECUTE : ALL_CAN_EXECUTE;\n+        return this;\n+    }\n+\n+    OverridableResource getResource() {\n+        return resource;\n+    }\n+\n+    final Path publicFileName;\n+    private Set<PosixFilePermission> execPerms = ALL_CAN_EXECUTE;\n+    private OverridableResource resource;\n+\n+    private final static Set<PosixFilePermission> ALL_CAN_EXECUTE = Set.of(\n+            PosixFilePermission.OWNER_EXECUTE, PosixFilePermission.GROUP_EXECUTE,\n+            PosixFilePermission.OTHERS_EXECUTE);\n+    private final static Set<PosixFilePermission> OWNER_CAN_EXECUTE = Set.of(\n+            PosixFilePermission.OWNER_EXECUTE);\n+}\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/ShellScriptResource.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n+import static jdk.jpackage.internal.StandardBundlerParam.PREDEFINED_APP_IMAGE;\n+\n+\/**\n+ * Helper to install launchers as services for Unix installers.\n+ *\/\n+class UnixLaunchersAsServices extends ShellCustomAction {\n+\n+    UnixLaunchersAsServices(PlatformPackage thePackage,\n+            List<String> requiredPackages, Map<String, Object> params,\n+            Function<LauncherInfo, UnixLauncherAsService> factory) throws\n+            IOException {\n+\n+        this.thePackage = thePackage;\n+        this.requiredPackages = requiredPackages;\n+\n+        \/\/ Read launchers information\n+        launchers = AppImageFile.getLaunchers(PREDEFINED_APP_IMAGE.fetchFrom(\n+                params), params).stream().filter(LauncherInfo::isService).map(\n+                factory::apply).toList();\n+    }\n+\n+    @Override\n+    final List<String> requiredPackages() {\n+        if (launchers.isEmpty()) {\n+            return Collections.emptyList();\n+        } else {\n+            return requiredPackages;\n+        }\n+    }\n+\n+    @Override\n+    final protected List<String> replacementStringIds() {\n+        return List.of(COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS);\n+    }\n+\n+    @Override\n+    final protected Map<String, String> createImpl() throws IOException {\n+        Map<String, String> data = new HashMap<>();\n+\n+        if (launchers.isEmpty()) {\n+            return data;\n+        }\n+\n+        var installedDescriptorFiles = launchers.stream().map(\n+                launcher -> enqouter.applyTo(launcher.descriptorFilePath(\n+                        Path.of(\"\/\")).toString())).toList();\n+\n+        Function<String, String> strigifier = cmd -> {\n+            return stringifyShellCommands(Stream.of(List.of(\n+                    cmd), installedDescriptorFiles).flatMap(x -> x.stream()).collect(\n+                    Collectors.joining(\" \")));\n+        };\n+\n+        try {\n+            data.put(SCRIPTS, stringifyTextFile(\"services_utils.sh\"));\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+\n+        data.put(COMMANDS_INSTALL, strigifier.apply(\"register_services\"));\n+        data.put(COMMANDS_UNINSTALL, strigifier.apply(\"unregister_services\"));\n+\n+        for (var launcher : launchers) {\n+            launcher.getResource().saveToFile(launcher.descriptorFilePath(\n+                    thePackage.sourceRoot()));\n+        }\n+\n+        return data;\n+    }\n+\n+    boolean isEmpty() {\n+        return launchers.isEmpty();\n+    }\n+\n+    static abstract class UnixLauncherAsService extends LauncherAsService {\n+\n+        UnixLauncherAsService(String name, Map<String, Object> mainParams,\n+                OverridableResource resource) {\n+            super(name, mainParams, resource);\n+        }\n+\n+        abstract Path descriptorFilePath(Path root);\n+    }\n+\n+    private final PlatformPackage thePackage;\n+    private final List<String> requiredPackages;\n+    private final List<UnixLauncherAsService> launchers;\n+    private final Enquoter enqouter = Enquoter.forShellLiterals();\n+\n+    private static final String COMMANDS_INSTALL = \"LAUNCHER_AS_SERVICE_COMMANDS_INSTALL\";\n+    private static final String COMMANDS_UNINSTALL = \"LAUNCHER_AS_SERVICE_COMMANDS_UNINSTALL\";\n+    private static final String SCRIPTS = \"LAUNCHER_AS_SERVICE_SCRIPTS\";\n+\n+    protected static final List<String> REPLACEMENT_STRING_IDS = List.of(\n+            COMMANDS_INSTALL, COMMANDS_UNINSTALL, SCRIPTS);\n+}\n","filename":"src\/jdk.jpackage\/unix\/classes\/jdk\/jpackage\/internal\/UnixLaunchersAsServices.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n@@ -160,0 +161,8 @@\n+    static final StandardBundlerParam<InstallableFile> SERVICE_INSTALLER\n+            = new StandardBundlerParam<>(\n+                    \"win.msi.serviceInstaller\",\n+                    InstallableFile.class,\n+                    null,\n+                    null\n+            );\n+\n@@ -326,0 +335,9 @@\n+            var serviceInstallerResource = initServiceInstallerResource(params);\n+            if (serviceInstallerResource != null) {\n+                if (!Files.exists(serviceInstallerResource.getExternalPath())) {\n+                    throw new ConfigException(I18N.getString(\n+                            \"error.missing-service-installer\"), I18N.getString(\n+                                    \"error.missing-service-installer.advice\"));\n+                }\n+            }\n+\n@@ -388,0 +406,7 @@\n+\n+        var serviceInstallerResource = initServiceInstallerResource(params);\n+        if (serviceInstallerResource != null) {\n+            var serviceInstallerPath = serviceInstallerResource.getExternalPath();\n+            params.put(SERVICE_INSTALLER.getID(), new InstallableFile(\n+                    serviceInstallerPath, serviceInstallerPath.getFileName()));\n+        }\n@@ -679,0 +704,27 @@\n+    private static OverridableResource initServiceInstallerResource(\n+            Map<String, ? super Object> params) {\n+        if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+            \/\/ Runtime installer doesn't install launchers,\n+            \/\/ service installer not needed\n+            return null;\n+        }\n+\n+        if (!AppImageFile.getLaunchers(\n+                StandardBundlerParam.getPredefinedAppImage(params), params).stream().anyMatch(\n+                LauncherInfo::isService)) {\n+            \/\/ Not a single launcher is requested to be installed as a service,\n+            \/\/ service installer not needed\n+            return null;\n+        }\n+\n+        var result = createResource(null, params)\n+                .setPublicName(\"service-installer.exe\")\n+                .setSourceOrder(OverridableResource.Source.External);\n+        if (result.getResourceDir() == null) {\n+            return null;\n+        }\n+\n+        return result.setExternal(result.getResourceDir().resolve(\n+                result.getPublicName()));\n+    }\n+\n@@ -682,2 +734,1 @@\n-    private List<WixFragmentBuilder> wixFragments;\n-\n+    private final List<WixFragmentBuilder> wixFragments;\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":54,"deletions":3,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import javax.xml.stream.XMLOutputFactory;\n@@ -52,0 +53,6 @@\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import jdk.jpackage.internal.AppImageFile.LauncherInfo;\n@@ -58,0 +65,1 @@\n+import static jdk.jpackage.internal.WinMsiBundler.SERVICE_INSTALLER;\n@@ -59,0 +67,1 @@\n+import org.w3c.dom.NodeList;\n@@ -92,4 +101,2 @@\n-            \/\/ Register it with app image at a role without a match in installed\n-            \/\/ app layout to exclude it from layout transformation.\n-            layout.pathGroup().setPath(new Object(),\n-                    AppImageFile.getPathInAppImage(Path.of(\"\")));\n+            new InstallableFile(AppImageFile.getPathInAppImage(Path.of(\"\")),\n+                    null).excludeFromApplicationLayout(layout);\n@@ -115,0 +122,21 @@\n+        launchersAsServices = launchers.stream()\n+                .filter(LauncherInfo::isService)\n+                .map(launcher -> {\n+                    var launcherPath = addExeSuffixToPath(\n+                    installedAppImage.launchersDirectory().resolve(\n+                            launcher.getName()));\n+                    var id = Id.File.of(launcherPath);\n+                    return new WixLauncherAsService(launcher.getName(), params)\n+                            .setLauncherInstallPath(toWixPath(launcherPath))\n+                            .setLauncherInstallPathId(id);\n+                }).toList();\n+\n+        if (!launchersAsServices.isEmpty()) {\n+            serviceInstaller = SERVICE_INSTALLER.fetchFrom(params);\n+            \/\/ Service installer tool will be installed in launchers directory\n+            serviceInstaller = new InstallableFile(\n+                    serviceInstaller.srcPath().toAbsolutePath().normalize(),\n+                    installedAppImage.launchersDirectory().resolve(\n+                            serviceInstaller.installPath()));\n+        }\n+\n@@ -391,0 +419,7 @@\n+        if (role == Component.File && serviceInstaller != null && path.equals(\n+                serviceInstaller.installPath())) {\n+            for (var launcherAsService : launchersAsServices) {\n+                launcherAsService.writeServiceInstall(xml);\n+            }\n+        }\n+\n@@ -646,0 +681,5 @@\n+        if (serviceInstaller != null) {\n+            files.add(Map.entry(serviceInstaller.srcPath(),\n+                    serviceInstaller.installPath()));\n+        }\n+\n@@ -664,0 +704,2 @@\n+        componentIds.addAll(addServiceConfigs(xml));\n+\n@@ -667,0 +709,41 @@\n+    private List<String> addServiceConfigs(XMLStreamWriter xml) throws\n+            XMLStreamException, IOException {\n+        if (launchersAsServices.isEmpty()) {\n+            return List.of();\n+        }\n+\n+        try {\n+            var buffer = new DOMResult(IOUtils.initDocumentBuilder().newDocument());\n+            var bufferWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(\n+                    buffer);\n+\n+            bufferWriter.writeStartDocument();\n+            bufferWriter.writeStartElement(\"Include\");\n+            for (var launcherAsService : launchersAsServices) {\n+                launcherAsService.writeServiceConfig(xml);\n+                launcherAsService.writeServiceConfig(bufferWriter);\n+            }\n+            bufferWriter.writeEndElement();\n+            bufferWriter.writeEndDocument();\n+            bufferWriter.flush();\n+            bufferWriter.close();\n+\n+            XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+            NodeList nodes = (NodeList) xPath.evaluate(\"\/Include\/descendant::Component\/@Id\",\n+                    buffer.getNode(), XPathConstants.NODESET);\n+\n+            List<String> componentIds = new ArrayList<>();\n+            for (int i = 0; i != nodes.getLength(); i++) {\n+                var node = nodes.item(i);\n+                componentIds.add(node.getNodeValue());\n+            }\n+            return componentIds;\n+        } catch (XMLStreamException ex) {\n+            throw new IOException(ex);\n+        } catch (XPathExpressionException ex) {\n+            \/\/ Should never happen\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n@@ -750,12 +833,1 @@\n-            \/\/ The following code converts a path to value to be saved in registry.\n-            \/\/ E.g.:\n-            \/\/  INSTALLDIR -> [INSTALLDIR]\n-            \/\/  TERGETDIR\/ProgramFiles64Folder\/foo\/bar -> [ProgramFiles64Folder]foo\/bar\n-            final Path rootDir = KNOWN_DIRS.stream()\n-                    .sorted(Comparator.comparing(Path::getNameCount).reversed())\n-                    .filter(path::startsWith)\n-                    .findFirst().get();\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(String.format(\"[%s]\", rootDir.getFileName().toString()));\n-            sb.append(rootDir.relativize(path).toString());\n-            return sb.toString();\n+            return toWixPath(path);\n@@ -776,0 +848,14 @@\n+    \/\/ Does the following conversions:\n+    \/\/  INSTALLDIR -> [INSTALLDIR]\n+    \/\/  TARGETDIR\/ProgramFiles64Folder\/foo\/bar -> [ProgramFiles64Folder]foo\/bar\n+    private static String toWixPath(Path path) {\n+        final Path rootDir = KNOWN_DIRS.stream()\n+                .sorted(Comparator.comparing(Path::getNameCount).reversed())\n+                .filter(path::startsWith)\n+                .findFirst().get();\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(String.format(\"[%s]\", rootDir.getFileName().toString()));\n+        sb.append(rootDir.relativize(path).toString());\n+        return sb.toString();\n+    }\n+\n@@ -834,1 +920,5 @@\n-    private List<AppImageFile.LauncherInfo> launchers;\n+    private List<LauncherInfo> launchers;\n+\n+    private List<WixLauncherAsService> launchersAsServices;\n+\n+    private InstallableFile serviceInstaller;\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixAppImageFragmentBuilder.java","additions":108,"deletions":18,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import static jdk.jpackage.internal.OverridableResource.createResource;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+class WixLauncherAsService extends LauncherAsService {\n+\n+    WixLauncherAsService(String name, Map<String, ? super Object> mainParams) {\n+        super(name, mainParams,\n+                createResource(\"service-install.wxi\", mainParams).setCategory(\n+                        I18N.getString(\"resource.launcher-as-service-wix-file\")));\n+\n+        serviceConfigResource = createResource(\"service-config.wxi\", mainParams).setCategory(\n+                I18N.getString(\"resource.launcher-as-service-wix-file\"));\n+\n+        addSubstitutionDataEntry(\"SERVICE_NAME\", getName());\n+\n+        setPublicName(getResource());\n+        setPublicName(serviceConfigResource);\n+    }\n+\n+    WixLauncherAsService setLauncherInstallPath(String v) {\n+        return addSubstitutionDataEntry(\"APPLICATION_LAUNCHER\", v);\n+    }\n+\n+    WixLauncherAsService setLauncherInstallPathId(String v) {\n+        return addSubstitutionDataEntry(\"APPLICATION_LAUNCHER_ID\", v);\n+    }\n+\n+    void writeServiceConfig(XMLStreamWriter xml) throws XMLStreamException,\n+            IOException {\n+        writeResource(serviceConfigResource, xml);\n+    }\n+\n+    void writeServiceInstall(XMLStreamWriter xml) throws XMLStreamException,\n+            IOException {\n+        writeResource(getResource(), xml);\n+    }\n+\n+    private WixLauncherAsService addSubstitutionDataEntry(String name,\n+            String value) {\n+        getResource().addSubstitutionDataEntry(name, value);\n+        serviceConfigResource.addSubstitutionDataEntry(name, value);\n+        return this;\n+    }\n+\n+    private OverridableResource setPublicName(OverridableResource r) {\n+        return r.setPublicName(getName() + \"-\" + r.getDefaultName());\n+    }\n+\n+    private void writeResource(OverridableResource resource, XMLStreamWriter xml)\n+            throws XMLStreamException, IOException {\n+        var buffer = new ByteArrayOutputStream();\n+        resource.saveToStream(buffer);\n+\n+        try {\n+            Document doc = IOUtils.initDocumentBuilder().parse(\n+                    new ByteArrayInputStream(buffer.toByteArray()));\n+\n+            XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+            NodeList nodes = (NodeList) xPath.evaluate(\"\/Include\/*\", doc,\n+                    XPathConstants.NODESET);\n+\n+            List<Source> sources = new ArrayList<>();\n+            for (int i = 0; i != nodes.getLength(); i++) {\n+                Node n = nodes.item(i);\n+                sources.add(new DOMSource(n));\n+            }\n+\n+            IOUtils.mergeXmls(xml, sources);\n+\n+        } catch (SAXException ex) {\n+            throw new IOException(ex);\n+        } catch (XPathExpressionException ex) {\n+            \/\/ Should never happen\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private final OverridableResource serviceConfigResource;\n+}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixLauncherAsService.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.launcher-as-service-wix-file=Service installer WiX project file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.launcher-as-service-wix-file=Service installer WiX project file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+resource.launcher-as-service-wix-file=Service installer WiX project file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+\n+<Include xmlns=\"http:\/\/schemas.microsoft.com\/wix\/2006\/wi\"\n+         xmlns:util=\"http:\/\/schemas.microsoft.com\/wix\/UtilExtension\">\n+  <!--\n+    Configuration correponds to NSSM\n+  -->\n+  <DirectoryRef Id=\"INSTALLDIR\">\n+    <Component Id=\"nssm_Application_APPLICATION_LAUNCHER_ID\" Guid=\"*\">\n+      <RegistryValue Root=\"HKLM\"\n+                     Key=\"System\\CurrentControlSet\\Services\\SERVICE_NAME\\Parameters\"\n+                     Type=\"string\"\n+                     KeyPath=\"yes\"\n+                     Name=\"Application\"\n+                     Value=\"APPLICATION_LAUNCHER\"\n+      \/>\n+    <\/Component>\n+    <Component Id=\"nssm_AppDirectory_APPLICATION_LAUNCHER_ID\" Guid=\"*\">\n+      <RegistryValue Root=\"HKLM\"\n+                     Key=\"System\\CurrentControlSet\\Services\\SERVICE_NAME\\Parameters\"\n+                     Type=\"string\"\n+                     KeyPath=\"yes\"\n+                     Name=\"AppDirectory\"\n+                     Value=\"[INSTALLDIR]\"\n+      \/>\n+    <\/Component>\n+  <\/DirectoryRef>\n+<\/Include>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/service-config.wxi","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+\n+<Include xmlns=\"http:\/\/schemas.microsoft.com\/wix\/2006\/wi\"\n+         xmlns:util=\"http:\/\/schemas.microsoft.com\/wix\/UtilExtension\">\n+\n+  <ServiceInstall Type=\"ownProcess\"\n+                  Start=\"auto\"\n+                  Id=\"si_APPLICATION_LAUNCHER_ID\"\n+                  Name=\"SERVICE_NAME\"\n+                  Description=\"SERVICE_DESCRIPTION\"\n+                  ErrorControl=\"normal\"\n+                  Account=\"LocalSystem\"\n+                  Vital=\"yes\"\n+  \/>\n+  <ServiceControl Start=\"install\"\n+                  Stop=\"both\"\n+                  Remove=\"uninstall\"\n+                  Wait=\"yes\"\n+                  Id=\"sc_APPLICATION_LAUNCHER_ID\"\n+                  Name=\"SERVICE_NAME\"\n+  \/>\n+<\/Include>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/service-install.wxi","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -78,0 +78,4 @@\n+    final public AdditionalLauncher setLauncherAsService() {\n+        return addRawProperties(LAUNCHER_AS_SERVICE);\n+    }\n+\n@@ -307,1 +311,7 @@\n-        appVerifier.executeAndVerifyOutput();\n+        if (!rawProperties.contains(LAUNCHER_AS_SERVICE)) {\n+            appVerifier.executeAndVerifyOutput();\n+        } else if (!cmd.isPackageUnpacked(String.format(\n+                \"Not verifying contents of test output file for [%s] launcher\",\n+                launcherPath))) {\n+            appVerifier.verifyOutput();\n+        }\n@@ -363,0 +373,2 @@\n+    private final static Map.Entry<String, String> LAUNCHER_AS_SERVICE = Map.entry(\n+            \"launcher-as-service\", \"true\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,0 +54,8 @@\n+    public String getValueUnchecked(String section, String key) {\n+        Objects.requireNonNull(section);\n+        Objects.requireNonNull(key);\n+\n+        return Optional.ofNullable(data.get(section)).map(v -> v.get(key)).orElse(\n+                null);\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CfgFile.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,342 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.IOUtils;\n+import static jdk.jpackage.test.Functional.ThrowingConsumer.toConsumer;\n+import static jdk.jpackage.test.PackageType.LINUX;\n+import static jdk.jpackage.test.PackageType.MAC_PKG;\n+import static jdk.jpackage.test.PackageType.WINDOWS;\n+\n+public final class LauncherAsServiceVerifier {\n+\n+    public final static class Builder {\n+\n+        public Builder setExpectedValue(String v) {\n+            expectedValue = v;\n+            return this;\n+        }\n+\n+        public Builder setLauncherName(String v) {\n+            launcherName = v;\n+            return this;\n+        }\n+\n+        public Builder setAppOutputFileName(String v) {\n+            appOutputFileName = v;\n+            return this;\n+        }\n+\n+        public LauncherAsServiceVerifier create() {\n+            Objects.requireNonNull(expectedValue);\n+            return new LauncherAsServiceVerifier(launcherName, appOutputFileName,\n+                    expectedValue);\n+        }\n+\n+        public Builder applyTo(PackageTest pkg) {\n+            create().applyTo(pkg);\n+            return this;\n+        }\n+\n+        private String launcherName;\n+        private String expectedValue;\n+        private String appOutputFileName = \"launcher-as-service.txt\";\n+    }\n+\n+    public static Builder build() {\n+        return new Builder();\n+    }\n+\n+    private LauncherAsServiceVerifier(String launcherName,\n+            String appOutputFileName,\n+            String expectedArgValue) {\n+        this.expectedValue = expectedArgValue;\n+        this.launcherName = launcherName;\n+        this.appOutputFileName = Path.of(appOutputFileName);\n+    }\n+\n+    public void applyTo(PackageTest pkg) {\n+        if (launcherName == null) {\n+            pkg.forTypes(WINDOWS, () -> {\n+                pkg.addInitializer(cmd -> {\n+                    \/\/ Remove parameter added to jpackage command line in HelloApp.addTo()\n+                    cmd.removeArgument(\"--win-console\");\n+                });\n+            });\n+            applyToMainLauncher(pkg);\n+        } else {\n+            applyToAdditionalLauncher(pkg);\n+        }\n+    }\n+\n+    static void verify(JPackageCommand cmd) {\n+        cmd.verifyIsOfType(SUPPORTED_PACKAGES);\n+\n+        var launcherNames = getLaunchersAsServices(cmd);\n+\n+        launcherNames.forEach(toConsumer(launcherName -> {\n+            verify(cmd, launcherName);\n+        }));\n+\n+        if (WINDOWS.contains(cmd.packageType()) && !cmd.isRuntime()) {\n+            Path serviceInstallerPath = cmd.appLayout().launchersDirectory().resolve(\n+                    \"service-installer.exe\");\n+            if (launcherNames.isEmpty()) {\n+                TKit.assertPathExists(serviceInstallerPath, false);\n+\n+            } else {\n+                TKit.assertFileExists(serviceInstallerPath);\n+            }\n+        }\n+\n+        List<Path> servicesSpecificFiles = new ArrayList<>();\n+        List<Path> servicesSpecificFolders = new ArrayList<>();\n+\n+        if (MAC_PKG.equals(cmd.packageType())) {\n+            servicesSpecificFiles.add(MacHelper.getUninstallCommand(cmd));\n+\n+            if (cmd.isPackageUnpacked()) {\n+                servicesSpecificFolders.add(MacHelper.getServicePlistFilePath(\n+                        cmd, null).getParent());\n+            }\n+        } else if (LINUX.contains(cmd.packageType())) {\n+            if (cmd.isPackageUnpacked()) {\n+                servicesSpecificFolders.add(LinuxHelper.getServiceUnitFilePath(\n+                        cmd, null).getParent());\n+            }\n+        }\n+\n+        if (launcherNames.isEmpty() || cmd.isRuntime()) {\n+            servicesSpecificFiles.forEach(path -> TKit.assertPathExists(path,\n+                    false));\n+            servicesSpecificFolders.forEach(path -> TKit.assertPathExists(path,\n+                    false));\n+        } else {\n+            servicesSpecificFiles.forEach(TKit::assertFileExists);\n+            servicesSpecificFolders.forEach(TKit::assertDirectoryExists);\n+        }\n+    }\n+\n+    static void verifyUninstalled(JPackageCommand cmd) {\n+        cmd.verifyIsOfType(SUPPORTED_PACKAGES);\n+\n+        var launcherNames = getLaunchersAsServices(cmd);\n+        for (var launcherName : launcherNames) {\n+            if (TKit.isLinux()) {\n+                TKit.assertPathExists(LinuxHelper.getServiceUnitFilePath(cmd,\n+                        launcherName), false);\n+            } else if (TKit.isOSX()) {\n+                TKit.assertPathExists(MacHelper.getServicePlistFilePath(cmd,\n+                        launcherName), false);\n+            }\n+        }\n+\n+        if (TKit.isOSX()) {\n+            TKit.assertPathExists(MacHelper.getUninstallCommand(cmd).getParent(),\n+                    false);\n+        }\n+    }\n+\n+    static List<String> getLaunchersAsServices(JPackageCommand cmd) {\n+        List<String> launcherNames = new ArrayList<>();\n+\n+        if (cmd.hasArgument(\"--launcher-as-service\")) {\n+            launcherNames.add(null);\n+        }\n+\n+        AdditionalLauncher.forEachAdditionalLauncher(cmd,\n+                Functional.ThrowingBiConsumer.toBiConsumer(\n+                        (launcherName, propFilePath) -> {\n+                            if (Files.readAllLines(propFilePath).stream().anyMatch(\n+                                    line -> {\n+                                        if (line.startsWith(\n+                                                \"launcher-as-service=\")) {\n+                                            return Boolean.parseBoolean(\n+                                                    line.substring(\n+                                                            \"launcher-as-service=\".length()));\n+                                        } else {\n+                                            return false;\n+                                        }\n+                                    })) {\n+                                launcherNames.add(launcherName);\n+                            }\n+                        }));\n+\n+        return launcherNames;\n+    }\n+\n+    private boolean canVerifyInstall(JPackageCommand cmd) throws IOException {\n+        String msg = String.format(\n+                \"Not verifying contents of test output file [%s] for %s launcher\",\n+                appOutputFilePathInitialize(),\n+                Optional.ofNullable(launcherName).orElse(\"the main\"));\n+        if (cmd.isPackageUnpacked(msg) || cmd.isFakeRuntime(msg)) {\n+            return false;\n+        }\n+        var cfgFile = CfgFile.readFromFile(cmd.appLauncherCfgPath(launcherName));\n+        if (!expectedValue.equals(cfgFile.getValueUnchecked(\"ArgOptions\",\n+                \"arguments\"))) {\n+            TKit.trace(String.format(\n+                    \"%s because different version of the package is installed\",\n+                    msg));\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void applyToMainLauncher(PackageTest pkg) {\n+        pkg.addInitializer(cmd -> {\n+            cmd.addArgument(\"--launcher-as-service\");\n+            cmd.addArguments(\"--arguments\",\n+                    JPackageCommand.escapeAndJoin(expectedValue));\n+            cmd.addArguments(\"--java-options\", \"-Djpackage.test.appOutput=\"\n+                    + appOutputFilePathInitialize().toString());\n+            cmd.addArguments(\"--java-options\", \"-Djpackage.test.noexit=true\");\n+        });\n+        pkg.addInstallVerifier(cmd -> {\n+            if (canVerifyInstall(cmd)) {\n+                delayInstallVerify();\n+                HelloApp.assertApp(cmd.appLauncherPath())\n+                        .addParam(\"jpackage.test.appOutput\",\n+                                appOutputFilePathVerify(cmd).toString())\n+                        .addDefaultArguments(expectedValue)\n+                        .verifyOutput();\n+                TKit.deleteIfExists(appOutputFileName);\n+            }\n+        });\n+        pkg.addInstallVerifier(cmd -> {\n+            verify(cmd, launcherName);\n+        });\n+    }\n+\n+    private void applyToAdditionalLauncher(PackageTest pkg) {\n+        new AdditionalLauncher(launcherName) {\n+            @Override\n+            protected void verify(JPackageCommand cmd) throws IOException {\n+                if (canVerifyInstall(cmd)) {\n+                    delayInstallVerify();\n+                    super.verify(cmd);\n+                    TKit.deleteIfExists(appOutputFileName);\n+                }\n+                LauncherAsServiceVerifier.verify(cmd, launcherName);\n+            }\n+        }.setLauncherAsService()\n+                .addJavaOptions(\"-Djpackage.test.appOutput=\"\n+                        + appOutputFilePathInitialize().toString())\n+                .addJavaOptions(\"-Djpackage.test.noexit=true\")\n+                .addDefaultArguments(expectedValue)\n+                .applyTo(pkg);\n+    }\n+\n+    private static void verify(JPackageCommand cmd, String launcherName) throws\n+            IOException {\n+        if (LINUX.contains(cmd.packageType())) {\n+            verifyLinuxUnitFile(cmd, launcherName);\n+        } else if (MAC_PKG.equals(cmd.packageType())) {\n+            verifyMacDaemonPlistFile(cmd, launcherName);\n+        }\n+    }\n+\n+    private static void verifyLinuxUnitFile(JPackageCommand cmd,\n+            String launcherName) throws IOException {\n+\n+        var serviceUnitFile = LinuxHelper.getServiceUnitFilePath(cmd, launcherName);\n+\n+        TKit.traceFileContents(serviceUnitFile, \"unit file\");\n+\n+        var installedLauncherPath = cmd.pathToPackageFile(cmd.appLauncherPath(\n+                launcherName));\n+\n+        var execStartValue = (Pattern.compile(\"\\\\s\").matcher(\n+                installedLauncherPath.toString()).find() ? String.format(\n+                \"\\\"%s\\\"\", installedLauncherPath) : installedLauncherPath);\n+        TKit.assertTextStream(\"ExecStart=\" + execStartValue)\n+                .label(\"unit file\")\n+                .predicate(String::equals)\n+                .apply(Files.readAllLines(serviceUnitFile).stream());\n+    }\n+\n+    private static void verifyMacDaemonPlistFile(JPackageCommand cmd,\n+            String launcherName) throws IOException {\n+\n+        var servicePlistFile = MacHelper.getServicePlistFilePath(cmd, launcherName);\n+\n+        TKit.traceFileContents(servicePlistFile, \"property file\");\n+\n+        var installedLauncherPath = cmd.pathToPackageFile(cmd.appLauncherPath(\n+                launcherName));\n+\n+        var servicePlist = MacHelper.readPList(servicePlistFile);\n+\n+        var args = servicePlist.queryArrayValue(\"ProgramArguments\");\n+        TKit.assertEquals(1, args.size(),\n+                \"Check number of array elements in 'ProgramArguments' property in the property file\");\n+        TKit.assertEquals(installedLauncherPath.toString(), args.get(0),\n+                \"Check path to launcher in 'ProgramArguments' property in the property file\");\n+\n+        var expectedLabel = IOUtils.replaceSuffix(servicePlistFile.getFileName(), \"\").toString();\n+        TKit.assertEquals(expectedLabel, servicePlist.queryValue(\"Label\"),\n+                \"Check value of 'Label' property in the property file\");\n+    }\n+\n+    private static void delayInstallVerify() {\n+        \/\/ Sleep a bit to let system launch the service\n+        Functional.ThrowingRunnable.toRunnable(() -> Thread.sleep(5 * 1000)).run();\n+    }\n+\n+    private Path appOutputFilePathInitialize() {\n+        final Path dir;\n+        if (TKit.isWindows()) {\n+            dir = Path.of(\"$ROOTDIR\");\n+        } else {\n+            dir = Path.of(System.getProperty(\"java.io.tmpdir\"));\n+        }\n+        return dir.resolve(appOutputFileName);\n+    }\n+\n+    private Path appOutputFilePathVerify(JPackageCommand cmd) {\n+        if (TKit.isWindows()) {\n+            return cmd.appInstallationDirectory().resolve(appOutputFileName);\n+        } else {\n+            return appOutputFilePathInitialize();\n+        }\n+    }\n+\n+    private final String expectedValue;\n+    private final String launcherName;\n+    private final Path appOutputFileName;\n+\n+    final static Set<PackageType> SUPPORTED_PACKAGES = Stream.of(LINUX, WINDOWS,\n+            Set.of(MAC_PKG)).flatMap(x -> x.stream()).collect(Collectors.toSet());\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherAsServiceVerifier.java","additions":342,"deletions":0,"binary":false,"changes":342,"status":"added"},{"patch":"@@ -26,0 +26,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -83,0 +85,8 @@\n+    static Path getServiceUnitFilePath(JPackageCommand cmd, String launcherName) {\n+        cmd.verifyIsOfType(PackageType.LINUX);\n+        return cmd.pathToUnpackedPackageFile(\n+                Path.of(\"\/lib\/systemd\/system\").resolve(getServiceUnitFileName(\n+                        getPackageName(cmd),\n+                        Optional.ofNullable(launcherName).orElseGet(cmd::name))));\n+    }\n+\n@@ -671,0 +681,25 @@\n+    private static String getServiceUnitFileName(String packageName,\n+            String launcherName) {\n+        try {\n+            return getServiceUnitFileName.invoke(null, packageName, launcherName).toString();\n+        } catch (InvocationTargetException | IllegalAccessException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private static Method initGetServiceUnitFileName() {\n+        try {\n+            return Class.forName(\n+                    \"jdk.jpackage.internal.LinuxLaunchersAsServices\").getMethod(\n+                            \"getServiceUnitFileName\", String.class, String.class);\n+        } catch (ClassNotFoundException ex) {\n+            if (TKit.isLinux()) {\n+                throw new RuntimeException(ex);\n+            } else {\n+                return null;\n+            }\n+        } catch (NoSuchMethodException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n@@ -680,0 +715,2 @@\n+\n+    private final static Method getServiceUnitFileName = initGetServiceUnitFileName();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -32,0 +34,1 @@\n+import java.util.Optional;\n@@ -228,4 +231,8 @@\n-            Executor.of(\"sudo\", \"rm\", \"-rf\")\n-                    .addArgument(cmd.appInstallationDirectory())\n-                    .execute();\n-\n+            if (Files.exists(getUninstallCommand(cmd))) {\n+                Executor.of(\"sudo\", \"\/bin\/sh\",\n+                        getUninstallCommand(cmd).toString()).execute();\n+            } else {\n+                Executor.of(\"sudo\", \"rm\", \"-rf\")\n+                        .addArgument(cmd.appInstallationDirectory())\n+                        .execute();\n+            }\n@@ -250,0 +257,16 @@\n+    static Path getUninstallCommand(JPackageCommand cmd) {\n+        cmd.verifyIsOfType(PackageType.MAC_PKG);\n+        return cmd.pathToUnpackedPackageFile(Path.of(\n+                \"\/Library\/Application Support\", getPackageName(cmd),\n+                \"uninstall.command\"));\n+    }\n+\n+    static Path getServicePlistFilePath(JPackageCommand cmd, String launcherName) {\n+        cmd.verifyIsOfType(PackageType.MAC_PKG);\n+        return cmd.pathToUnpackedPackageFile(\n+                Path.of(\"\/Library\/LaunchDaemons\").resolve(\n+                        getServicePListFileName(getPackageId(cmd),\n+                                Optional.ofNullable(launcherName).orElseGet(\n+                                        cmd::name))));\n+    }\n+\n@@ -254,0 +277,8 @@\n+    private static String getPackageId(JPackageCommand cmd) {\n+        return cmd.getArgumentValue(\"--mac-package-identifier\", () -> {\n+            return cmd.getArgumentValue(\"--main-class\", cmd::name, className -> {\n+                return JavaAppDesc.parse(className).packageName();\n+            });\n+        });\n+    }\n+\n@@ -317,0 +348,26 @@\n+    private static String getServicePListFileName(String packageName,\n+            String launcherName) {\n+        try {\n+            return getServicePListFileName.invoke(null, packageName,\n+                    launcherName).toString();\n+        } catch (InvocationTargetException | IllegalAccessException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private static Method initGetServicePListFileName() {\n+        try {\n+            return Class.forName(\n+                    \"jdk.jpackage.internal.MacLaunchersAsServices\").getMethod(\n+                            \"getServicePListFileName\", String.class, String.class);\n+        } catch (ClassNotFoundException ex) {\n+            if (TKit.isOSX()) {\n+                throw new RuntimeException(ex);\n+            } else {\n+                return null;\n+            }\n+        } catch (NoSuchMethodException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n@@ -319,0 +376,2 @@\n+\n+    private final static Method getServicePListFileName = initGetServicePListFileName();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":63,"deletions":4,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -327,0 +327,7 @@\n+    public PackageTest addHelloAppInitializer(String javaAppDesc) {\n+        addInitializer(\n+                cmd -> new HelloApp(JavaAppDesc.parse(javaAppDesc)).addTo(cmd),\n+                \"HelloApp\");\n+        return this;\n+    }\n+\n@@ -370,6 +377,0 @@\n-    private void addHelloAppInitializer(String javaAppDesc) {\n-        addInitializer(\n-                cmd -> new HelloApp(JavaAppDesc.parse(javaAppDesc)).addTo(cmd),\n-                \"HelloApp\");\n-    }\n-\n@@ -603,0 +604,5 @@\n+            if (LauncherAsServiceVerifier.SUPPORTED_PACKAGES.contains(\n+                    cmd.packageType())) {\n+                LauncherAsServiceVerifier.verify(cmd);\n+            }\n+\n@@ -611,0 +617,3 @@\n+            final boolean withServices = !cmd.isRuntime()\n+                    && !LauncherAsServiceVerifier.getLaunchersAsServices(cmd).isEmpty();\n+\n@@ -616,0 +625,2 @@\n+            } else if (withServices && MAC_PKG.equals(cmd.packageType())) {\n+                expectedRootCount = 2;\n@@ -620,0 +631,4 @@\n+                if (withServices) {\n+                    \/\/ \/lib\/systemd\n+                    roots.add(Path.of(\"\/lib\"));\n+                }\n@@ -676,0 +691,5 @@\n+            if (LauncherAsServiceVerifier.SUPPORTED_PACKAGES.contains(\n+                    cmd.packageType())) {\n+                LauncherAsServiceVerifier.verifyUninstalled(cmd);\n+            }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -240,0 +240,7 @@\n+    public static void traceFileContents(Path path, String label) throws IOException {\n+        assertFileExists(path);\n+        trace(String.format(\"Dump [%s] %s...\", path, label));\n+        Files.readAllLines(path).forEach(TKit::trace);\n+        trace(\"Done\");\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        Map<String, ? super Object> params = new LinkedHashMap<>();\n+        Map<String, Object> params = new LinkedHashMap<>();\n@@ -61,1 +61,1 @@\n-        Map<String, ? super Object> params = new LinkedHashMap<>();\n+        Map<String, Object> params = new LinkedHashMap<>();\n@@ -77,0 +77,1 @@\n+        assertInvalid(createFromXml(JPACKAGE_STATE_OPEN, \"<\/jpackage-state>\"));\n@@ -78,1 +79,1 @@\n-                \"<jpackage-state>\",\n+                JPACKAGE_STATE_OPEN,\n@@ -82,1 +83,1 @@\n-                \"<jpackage-state>\",\n+                JPACKAGE_STATE_OPEN,\n@@ -91,1 +92,1 @@\n-                \"<jpackage-state>\",\n+                JPACKAGE_STATE_OPEN,\n@@ -96,1 +97,1 @@\n-                \"<jpackage-state>\",\n+                JPACKAGE_STATE_OPEN,\n@@ -102,1 +103,1 @@\n-                \"<jpackage-state>\",\n+                JPACKAGE_STATE_OPEN,\n@@ -113,1 +114,1 @@\n-        Map<String, ? super Object> params = new LinkedHashMap<>();\n+        Map<String, Object> params = new LinkedHashMap<>();\n@@ -123,2 +124,2 @@\n-        Map<String, ? super Object> params = new LinkedHashMap<>();\n-        List<Map<String, ? super Object>> launchersAsMap = new ArrayList<>();\n+        Map<String, Object> params = new LinkedHashMap<>();\n+        List<Map<String, Object>> launchersAsMap = new ArrayList<>();\n@@ -126,1 +127,1 @@\n-        Map<String, ? super Object> addLauncher2Params = new LinkedHashMap();\n+        Map<String, Object> addLauncher2Params = new LinkedHashMap<>();\n@@ -130,1 +131,1 @@\n-        Map<String, ? super Object> addLauncher3Params = new LinkedHashMap();\n+        Map<String, Object> addLauncher3Params = new LinkedHashMap<>();\n@@ -141,1 +142,1 @@\n-        List<String> names = new ArrayList<String>();\n+        List<String> names = new ArrayList<>();\n@@ -166,1 +167,1 @@\n-        ArrayList<String> data = new ArrayList();\n+        List<String> data = new ArrayList<>();\n@@ -177,0 +178,4 @@\n+    private final static String JPACKAGE_STATE_OPEN = String.format(\n+            \"<jpackage-state platform=\\\"%s\\\" version=\\\"%s\\\">\",\n+            AppImageFile.getPlatform(), AppImageFile.getVersion());\n+\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import org.junit.Test;\n+\n+\n+public class EnquoterTest {\n+\n+    @Test\n+    public void testForShellLiterals() {\n+        var enquoter = Enquoter.forShellLiterals();\n+\n+        assertEquals(null, \"''\", enquoter.applyTo(\"\"));\n+        assertEquals(null, \"'foo'\", enquoter.applyTo(\"foo\"));\n+        assertEquals(null, \"' foo '\", enquoter.applyTo(\" foo \"));\n+        assertEquals(null, \"'foo bar'\", enquoter.applyTo(\"foo bar\"));\n+        assertEquals(null, \"'foo\\\\' bar'\", enquoter.applyTo(\"foo' bar\"));\n+    }\n+\n+    @Test\n+    public void testForPropertyValues() {\n+        var enquoter = Enquoter.forPropertyValues();\n+\n+        assertEquals(null, \"\", enquoter.applyTo(\"\"));\n+        assertEquals(null, \"foo\", enquoter.applyTo(\"foo\"));\n+        assertEquals(null, \"\\\" foo \\\"\", enquoter.applyTo(\" foo \"));\n+        assertEquals(null, \"\\\"foo bar\\\"\", enquoter.applyTo(\"foo bar\"));\n+        assertEquals(null, \"\\\"foo' bar\\\"\", enquoter.applyTo(\"foo' bar\"));\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/EnquoterTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.LauncherAsServiceVerifier;\n+import static jdk.jpackage.test.PackageType.MAC_DMG;\n+import static jdk.jpackage.test.PackageType.WINDOWS;\n+import jdk.jpackage.test.RunnablePackageTest;\n+import jdk.jpackage.test.TKit;\n+\n+\/**\n+ * Launcher as service packaging test. Output of the test should be\n+ * servicetest*.* and updateservicetest*.* package bundles.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Launcher as service packaging test\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile ServiceTest.java\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=ServiceTest\n+ *\/\n+public class ServiceTest {\n+\n+    public ServiceTest() {\n+        if (TKit.isWindows()) {\n+            final String propName = \"jpackage.test.ServiceTest.service-installer\";\n+            String serviceInstallerExec = System.getProperty(propName);\n+            if (serviceInstallerExec == null) {\n+                if (Stream.of(RunnablePackageTest.Action.CREATE,\n+                        RunnablePackageTest.Action.INSTALL).allMatch(\n+                                RunnablePackageTest::hasAction)) {\n+                    TKit.throwSkippedException(String.format(\n+                            \"%s system property not set\", propName));\n+                } else {\n+                    \/\/ Use cmd.exe as a stub as the output packages will not be\n+                    \/\/ created and installed in the test run\n+                    serviceInstallerExec = Optional.ofNullable(System.getenv(\n+                            \"COMSPEC\")).orElseGet(() -> {\n+                                return JavaTool.JAVA.getPath().toString();\n+                            });\n+                    TKit.trace(\n+                            String.format(\"Using [%s] as a service installer\",\n+                                    serviceInstallerExec));\n+                }\n+            }\n+\n+            winServiceInstaller = Path.of(serviceInstallerExec);\n+\n+        } else {\n+            winServiceInstaller = null;\n+        }\n+    }\n+\n+    @Test\n+    public void test() throws Throwable {\n+        var testInitializer = createTestInitializer();\n+        var pkg = createPackageTest().addHelloAppInitializer(\"com.foo.ServiceTest\");\n+        LauncherAsServiceVerifier.build().setExpectedValue(\"A1\").applyTo(pkg);\n+        testInitializer.applyTo(pkg);\n+        pkg.run();\n+    }\n+\n+    @Test\n+    public void testUpdate() throws Throwable {\n+        var testInitializer = createTestInitializer().setUpgradeCode(\n+                \"4050AD4D-D6CC-452A-9CB0-58E5FA8C410F\");\n+\n+        \/\/ Package name will be used as package ID on macOS. Keep it the same for\n+        \/\/ both packages to allow update installation.\n+        final String packageName = \"com.bar\";\n+\n+        var pkg = createPackageTest()\n+                .addHelloAppInitializer(String.join(\".\", packageName, \"Hello\"))\n+                .disablePackageUninstaller();\n+        testInitializer.applyTo(pkg);\n+\n+        LauncherAsServiceVerifier.build().setExpectedValue(\"Default\").applyTo(pkg);\n+\n+        var pkg2 = createPackageTest()\n+                .addHelloAppInitializer(String.join(\".\", packageName, \"Bye\"))\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--app-version\", \"2.0\");\n+                });\n+        testInitializer.applyTo(pkg2);\n+\n+        var builder = LauncherAsServiceVerifier.build()\n+                .setLauncherName(\"foo\")\n+                .setAppOutputFileName(\"foo-launcher-as-service.txt\");\n+\n+        builder.setExpectedValue(\"Foo\").applyTo(pkg);\n+\n+        builder.setExpectedValue(\"Foo2\").applyTo(pkg2);\n+\n+        builder.setExpectedValue(\"Bar\")\n+                .setLauncherName(\"bar\")\n+                .setAppOutputFileName(\"bar-launcher-as-service.txt\")\n+                .applyTo(pkg2);\n+\n+        new PackageTest.Group(pkg, pkg2).run();\n+    }\n+\n+    private final class TestInitializer {\n+\n+        TestInitializer setUpgradeCode(String v) {\n+            upgradeCode = v;\n+            return this;\n+        }\n+\n+        void applyTo(PackageTest test) throws IOException {\n+            if (winServiceInstaller != null) {\n+                var resourceDir = TKit.createTempDirectory(\"resource-dir\");\n+                Files.copy(winServiceInstaller, resourceDir.resolve(\n+                        \"service-installer.exe\"));\n+\n+                test.forTypes(WINDOWS, () -> test.addInitializer(cmd -> {\n+                    cmd.addArguments(\"--resource-dir\", resourceDir);\n+                }));\n+            }\n+\n+            if (upgradeCode != null) {\n+                test.forTypes(WINDOWS, () -> test.addInitializer(cmd -> {\n+                    cmd.addArguments(\"--win-upgrade-uuid\", upgradeCode);\n+                }));\n+            }\n+        }\n+\n+        private String upgradeCode;\n+    }\n+\n+    private TestInitializer createTestInitializer() {\n+        return new TestInitializer();\n+    }\n+\n+    private static PackageTest createPackageTest() {\n+        return new PackageTest()\n+                .excludeTypes(MAC_DMG) \/\/ DMG not supported\n+                .addInitializer(JPackageCommand::setInputToEmptyDirectory);\n+    }\n+\n+    private final Path winServiceInstaller;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/ServiceTest.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"}]}