{"files":[{"patch":"@@ -34,3 +34,0 @@\n-#include <stdio.h>\n-#include <sys\/types.h>\n-#include <sys\/stat.h>\n@@ -68,20 +65,7 @@\n-    struct stat stat_src;\n-    if (fstat(src, &stat_src) == 0) {\n-        size_t count = stat_src.st_size;\n-        while (count > 0) {\n-            off_t bytes_sent = sendfile(dst, src, NULL, count);\n-            if (bytes_sent == -1) {\n-                \/\/ Reset positions, throwing if impossible\n-                int errno_sendfile = errno;\n-                if (lseek(src, 0, SEEK_SET) < 0 ||\n-                    lseek(dst, 0, SEEK_SET) < 0) {\n-                    throwUnixException(env, errno_sendfile);\n-                }\n-                \/\/ Fall back to transfer via user-space buffers\n-                break;\n-            }\n-            count -= bytes_sent;\n-            if (cancel != NULL && *cancel != 0) {\n-                throwUnixException(env, ECANCELED);\n-                return;\n-            }\n+    ssize_t bytes_sent;\n+    do {\n+        \/\/ sendfile() will transfer at most 0x7ffff000 bytes\n+        RESTARTABLE(sendfile64(dst, src, NULL, 0x7ffff000), bytes_sent);\n+        if (cancel != NULL && *cancel != 0) {\n+            throwUnixException(env, ECANCELED);\n+            return;\n@@ -89,0 +73,4 @@\n+    } while (bytes_sent > 0);\n+\n+    \/\/ sendfile() returns zero at src EOF\n+    if (bytes_sent == 0) {\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixCopyFile.c","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"}]}