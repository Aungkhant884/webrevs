{"files":[{"patch":"@@ -3,0 +3,1 @@\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n@@ -768,0 +769,10 @@\n+ATTRIBUTE_ALIGNED(8) juint _DOUBLE0[] =\n+{\n+    0x00000000UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _DOUBLE0DOT5[] =\n+{\n+    0x00000000UL, 0x3fe00000UL\n+};\n+\n@@ -792,0 +803,1 @@\n+  Label L_POW;\n@@ -807,0 +819,2 @@\n+  address DOUBLE0 = (address)_DOUBLE0;\n+  address DOUBLE0DOT5 = (address)_DOUBLE0DOT5;\n@@ -821,0 +835,1 @@\n+  \/\/ Special case: pow(x, 0.5) => sqrt(x)\n@@ -822,0 +837,9 @@\n+  cmp64(tmp1, ExternalAddress(DOUBLE0DOT5));\n+  jccb(Assembler::notEqual, L_POW); \/\/ For pow(x, y), check whether y == 0.5\n+  movdq(tmp2, xmm0);\n+  cmp64(tmp2, ExternalAddress(DOUBLE0));\n+  jccb(Assembler::less, L_POW); \/\/ pow(x, 0.5) => sqrt(x) only for x >= 0.0 or x is +inf\/NaN\n+  sqrtsd(xmm0, xmm0);\n+  jmp(B1_5);\n+\n+  bind(L_POW);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_pow.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265325\n+ * @summary test the optimization of pow(x, 0.5)\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ * @run main\/othervm TestPow0Dot5Opt\n+ * @run main\/othervm -Xint TestPow0Dot5Opt\n+ * @run main\/othervm -Xbatch -XX:TieredStopAtLevel=1 TestPow0Dot5Opt\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation  TestPow0Dot5Opt\n+ *\/\n+\n+public class TestPow0Dot5Opt {\n+\n+  static void test(double a) throws Exception {\n+    \/\/ pow(x, 0.5) isn't replaced with sqrt(x) for x < 0.0\n+    if (a < 0.0) return;\n+\n+    double r1 = Math.sqrt(a);\n+    double r2 = Math.pow(a, 0.5);\n+    if (r1 != r2) {\n+      throw new RuntimeException(\"pow(\" + a + \", 0.5), expected: \" + r1 + \", actual: \" + r2);\n+    }\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    for (int i = 0; i < 10; i++) {\n+      for (int j = 1; j < 100000; j++) {\n+        test(j * 1.0);\n+        test(1.0 \/ j);\n+      }\n+    }\n+\n+    test(0.0);\n+\n+    \/\/ Special case: pow(+0.0, 0.5) = 0.0\n+    double r = Math.pow(+0.0, 0.5);\n+    if (Double.doubleToRawLongBits(r) != Double.doubleToRawLongBits(0.0)) {\n+      throw new RuntimeException(\"pow(+0.0, 0.5), expected: 0.0, actual: \" + r);\n+    }\n+\n+    \/\/ Special case: pow(-0.0, 0.5) = 0.0\n+    r = Math.pow(-0.0, 0.5);\n+    if (Double.doubleToRawLongBits(r) != Double.doubleToRawLongBits(0.0)) {\n+      throw new RuntimeException(\"pow(-0.0, 0.5), expected: 0.0, actual: \" + r);\n+    }\n+\n+    \/\/ Special case: pow(Double.POSITIVE_INFINITY, 0.5) = Infinity\n+    r = Math.pow(Double.POSITIVE_INFINITY, 0.5);\n+    if (!(r > 0 && Double.isInfinite(r))) {\n+      throw new RuntimeException(\"pow(+Infinity, 0.5), expected: Infinity, actual: \" + r);\n+    }\n+\n+    \/\/ Special case: pow(Double.NEGATIVE_INFINITY, 0.5) = Infinity\n+    r = Math.pow(Double.NEGATIVE_INFINITY, 0.5);\n+    if (!(r > 0 && Double.isInfinite(r))) {\n+      throw new RuntimeException(\"pow(-Infinity, 0.5), expected: Infinity, actual: \" + r);\n+    }\n+\n+    \/\/ Special case: pow(Double.NaN, 0.5) = NaN\n+    r = Math.pow(Double.NaN, 0.5);\n+    if (!Double.isNaN(r)) {\n+      throw new RuntimeException(\"pow(NaN, 0.5), expected: NaN, actual: \" + r);\n+    }\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestPow0Dot5Opt.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -63,1 +63,1 @@\n-    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d, double0Dot5 = 0.5d;\n@@ -411,0 +411,32 @@\n+    @Benchmark\n+    public double  powDoubleLoop() {\n+        double sum = 0.0;\n+        for (int i = 0; i < 1000; i++) {\n+            for (int j = 0; j < 1000; j++) {\n+                sum += i + Math.pow(j * 1.0, i * 1.0);\n+            }\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public double  powDouble0Dot5() {\n+        return  Math.pow(double4Dot1, double0Dot5);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble0Dot5Const() {\n+        return  Math.pow(double4Dot1, 0.5);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble0Dot5Loop() {\n+        double sum = 0.0;\n+        for (int i = 0; i < 1000; i++) {\n+            for (int j = 0; j < 1000; j++) {\n+                sum += i + Math.pow(j * 1.0, 0.5);\n+            }\n+        }\n+        return sum;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}