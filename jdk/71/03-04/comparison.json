{"files":[{"patch":"@@ -15,4 +15,4 @@\n- * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseSSE=0 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n- * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=1 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n- * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=2 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n- * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=3 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:+IgnoreUnrecognizedVMOptions -XX:UseSSE=0 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=1 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=2 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:+IgnoreUnrecognizedVMOptions -XX:UseAVX=3 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n@@ -30,1 +30,2 @@\n-            maintest();\n+            findOneItem();\n+            withOffsetTest();\n@@ -43,1 +44,26 @@\n-    private static void maintest(){\n+    private static void findOneItem(){\n+        \/\/test strings of varying length ensuring that for all lengths one instance of the\n+        \/\/search char can be found. We check what happens when the search character is in\n+        \/\/each position of the search string (including first and last positions)\n+        for(int strLength : new int[]{1, 15, 31, 32, 79}){\n+            for(int searchPos = 0; searchPos < strLength; searchPos++){\n+                String totest = makeOneItemStringLatin1(strLength, searchPos);\n+\n+                int intri = totest.indexOf(SEARCH_CHAR);\n+                int nonintri = indexOfCharNonIntrinsic(totest, SEARCH_CHAR, 0);\n+                Asserts.assertEQ(intri, nonintri);\n+            }\n+        }\n+    }\n+\n+    private static String makeOneItemStringLatin1(int length, int searchPos){\n+        StringBuilder sb = new StringBuilder(length);\n+\n+        for(int n =0; n < length; n++){\n+            sb.append(searchPos==n?SEARCH_CHAR:INVERLEAVING_CHAR);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    private static void withOffsetTest(){\n@@ -50,1 +76,1 @@\n-            String totest = makeCandidateStringLatin1(aInstances);\n+            String totest = makeWithOffsetStringLatin1(aInstances);\n@@ -74,1 +100,1 @@\n-    private static String makeCandidateStringLatin1(int aInstances){\n+    private static String makeWithOffsetStringLatin1(int aInstances){\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringLatin1IndexOfChar.java","additions":34,"deletions":8,"binary":false,"changes":42,"status":"modified"}]}