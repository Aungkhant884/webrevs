{"files":[{"patch":"@@ -1889,1 +1889,1 @@\n-    vpcmpeqb(vec3, vec3, vec1, 1);\n+    vpcmpeqb(vec3, vec3, vec1, Assembler::AVX_256bit);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,4 @@\n- * correct functionality\n+ * correct functionality. We also ensure the strings are long enough to trigger\n+ * the looping conditions of the individual code paths.\n+ *\n+ * Run with varing levels of AVX and SSE support, also without the intrinsic at all\n@@ -10,2 +13,6 @@\n- * @run main\/othervm -Xbatch -XX:CompileThreshold=100 -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_indexOfL_char compiler.intrinsics.string.TestStringLatin1IndexOfChar\n- * @run main\/othervm -Xbatch -XX:CompileThreshold=100 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_indexOfL_char compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseSSE=0 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=1 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=2 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n+ * @run main\/othervm -Xbatch -XX:Tier4InvocationThreshold=200 -XX:CompileThreshold=100 -XX:UseAVX=3 compiler.intrinsics.string.TestStringLatin1IndexOfChar\n@@ -17,2 +24,0 @@\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -21,1 +26,1 @@\n-    private final static int MAX_LENGTH = 513;\/\/future proof for AVX-512 instructions\n+    private final static int MAX_LENGTH = 2048;\/\/future proof for AVX-512 instructions\n@@ -24,1 +29,1 @@\n-        for (int i = 0; i < 100_0; ++i) {\/\/repeat such that we enter into C2 code...\n+        for (int i = 0; i < 1_000; ++i) {\/\/repeat such that we enter into C2 code...\n@@ -34,1 +39,3 @@\n-    private static final char[] alphabet = new char[]{'a', 'b', 'c'};\/\/Latin1 are made of these\n+    private final static char SEARCH_CHAR = 'z';\n+    private final static char INVERLEAVING_CHAR = 'a';\n+    private final static char MISSING_CHAR = 'd';\n@@ -38,2 +45,3 @@\n-        for(int strLength = alphabet.length; strLength < MAX_LENGTH; strLength++){\n-            String totest = makeCandidateStringLatin1(strLength);\n+        \/\/string is of form azaza, aazaazaa, aaazaaazaaa, etc\n+        \/\/we find n s.t. maxlength = (n*3) + 2\n+        int maxaInstances = (MAX_LENGTH-2)\/3;\n@@ -41,5 +49,7 @@\n-            \/\/track starting offset here\n-            Map<Character, Integer> lastIndexOf = new HashMap<Character, Integer>();\n-            for(Character c : alphabet){\n-                lastIndexOf.put(c, 0);\n-            }\n+        for(int aInstances = 5; aInstances < MAX_LENGTH; aInstances++){\n+            String totest = makeCandidateStringLatin1(aInstances);\n+\n+            int startoffset;\n+            {\n+                int intri = totest.indexOf(SEARCH_CHAR);\n+                int nonintri = indexOfCharNonIntrinsic(totest, SEARCH_CHAR, 0);\n@@ -47,3 +57,3 @@\n-            for(int alphaidx = 0; ; alphaidx++){\n-                char wanted = alphabet[alphaidx % alphabet.length];\n-                int lastInst = lastIndexOf.get(wanted);\n+                Asserts.assertEQ(intri, nonintri);\n+                startoffset = intri+1;\n+            }\n@@ -51,2 +61,3 @@\n-                int intri = totest.indexOf(wanted, lastInst);\n-                int nonintri = indexOfChar(totest, wanted, lastInst);\n+            {\n+                int intri = totest.indexOf(SEARCH_CHAR, startoffset);\n+                int nonintri = indexOfCharNonIntrinsic(totest, SEARCH_CHAR, startoffset);\n@@ -55,4 +66,1 @@\n-                if(intri == -1 || intri == strLength-1){\n-                    break;\n-                }\n-                lastIndexOf.put(wanted, intri+1);\n+                startoffset = intri+1;\n@@ -61,1 +69,2 @@\n-            Asserts.assertEQ(totest.indexOf('d'), -1);\n+            Asserts.assertEQ(totest.indexOf(SEARCH_CHAR, startoffset), -1);\/\/only two SEARCH_CHAR per string\n+            Asserts.assertEQ(totest.indexOf(MISSING_CHAR), -1);\n@@ -65,4 +74,16 @@\n-    private static String makeCandidateStringLatin1(int strLength){\n-        StringBuilder sb = new StringBuilder(strLength);\n-        for(int n =0; n < strLength; n++){\/\/only 1 byte elements...\n-            sb.append(alphabet[n % alphabet.length]);\n+    private static String makeCandidateStringLatin1(int aInstances){\n+        StringBuilder sb = new StringBuilder((aInstances*3) + 2);\n+        for(int n =0; n < aInstances; n++){\n+            sb.append(INVERLEAVING_CHAR);\n+        }\n+\n+        sb.append(SEARCH_CHAR);\n+\n+        for(int n =0; n < aInstances; n++){\n+            sb.append(INVERLEAVING_CHAR);\n+        }\n+\n+        sb.append(SEARCH_CHAR);\n+\n+        for(int n =0; n < aInstances; n++){\n+            sb.append(INVERLEAVING_CHAR);\n@@ -73,1 +94,1 @@\n-    private static int indexOfChar(String value, int ch, int fromIndex) {\n+    private static int indexOfCharNonIntrinsic(String value, int ch, int fromIndex) {\n@@ -83,2 +104,1 @@\n-\n- }\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestStringLatin1IndexOfChar.java","additions":52,"deletions":32,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringIndexOfChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}