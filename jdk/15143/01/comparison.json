{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -646,8 +646,6 @@\n-                    try {\n-                        outStream.flush();\n-                        sock.close();\n-                        unpauseReader();\n-                    } catch (IOException ie) {\n-                        if (debug)\n-                            System.err.println(\"Connection: problem closing socket: \" + ie);\n-                    }\n+\n+                    flushCloseOutputStream();\n+                    \/\/ 8313657 socket is not closed until GC is run\n+                    closeConnectionSocket();\n+                    tryUnpauseReader();\n+\n@@ -687,0 +685,35 @@\n+    \/\/ flush and close output stream\n+    private void flushCloseOutputStream() {\n+        try {\n+            outStream.flush();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.flushOutputStream: OutputStream flush problem \" + ioEx);\n+        }\n+        try {\n+            outStream.close();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.closeOutputStream: OutputStream close problem \" + ioEx);\n+        }\n+    }\n+\n+    \/\/ close socket\n+    private void closeConnectionSocket() {\n+        try {\n+            sock.close();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.closeConnectionSocket: Socket closing problem \" + ioEx);\n+        }\n+    }\n+\n+    \/\/ unpause reader\n+    private void tryUnpauseReader() {\n+        try {\n+            unpauseReader();\n+        } catch (IOException ioEx) {\n+            if (debug)\n+                System.err.println(\"Connection.tryUnpauseReader: unpauseReader problem \" + ioEx);\n+        }\n+    }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":42,"deletions":9,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.naming.Context;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.net.SocketFactory;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Hashtable;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8313657\n+ * @summary make sure socket is closed when the error happens for OutputStream flushing\n+ * The value of provider url can be random, not necessary to be the one in the code\n+ * @library \/test\/lib\n+ *\/\n+\n+public class SocketCloseTest {\n+    public static String SOCKET_CLOSED_MSG = \"The socket has been closed.\";\n+    public static String SOCKET_NOT_CLOSED_MSG = \"The socket was not closed.\";\n+    public static String BAD_FLUSH = \"Bad flush!\";\n+    private static final byte[] BIND_RESPONSE = new byte[]{\n+            48, 12, 2, 1, 1, 97, 7, 10, 1, 0, 4, 0, 4, 0\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        Hashtable<String, Object> props = new Hashtable<>();\n+\n+        props.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        props.put(Context.PROVIDER_URL, \"ldap:\/\/localhost:1389\/o=example\");\n+        props.put(\"java.naming.ldap.factory.socket\", CustomSocketFactory.class.getName());\n+        try {\n+            final DirContext ctx = new InitialDirContext(props);\n+        } catch (Exception e) {\n+            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0) {\n+                System.out.println(SOCKET_CLOSED_MSG);\n+            } else {\n+                System.out.println(SOCKET_NOT_CLOSED_MSG);\n+            }\n+        }\n+\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(\"SocketCloseTest\");\n+        outputAnalyzer.stdoutShouldContain(SOCKET_CLOSED_MSG);\n+        outputAnalyzer.stdoutShouldNotContain(SOCKET_NOT_CLOSED_MSG);\n+        outputAnalyzer.stdoutShouldContain(BAD_FLUSH);\n+    }\n+\n+    public static class CustomSocketFactory extends SocketFactory {\n+        public static CustomSocket customSocket = new CustomSocket();\n+\n+        public static CustomSocketFactory getDefault() {\n+            return new CustomSocketFactory();\n+        }\n+\n+        @Override\n+        public Socket createSocket() {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String s, int timeout) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String host, int port, InetAddress localHost,\n+                                   int localPort) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress address, int port,\n+                                   InetAddress localAddress, int localPort) {\n+            return customSocket;\n+        }\n+    }\n+\n+    public static class LdapInputStream extends InputStream {\n+        private LdapOutputStream los;\n+        private ByteArrayInputStream bos;\n+        int pos = 0;\n+\n+        public LdapInputStream(LdapOutputStream los) {\n+            this.los = los;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            bos = new ByteArrayInputStream(BIND_RESPONSE);\n+            int next = bos.read();\n+            return next;\n+        }\n+    }\n+\n+    public static class LdapOutputStream extends OutputStream {\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            System.out.println(\"output stream writing\");\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+            System.out.println(BAD_FLUSH);\n+            throw new IOException(BAD_FLUSH);\n+        }\n+    }\n+\n+    public static class CustomSocket extends Socket {\n+        private int closeMethodCalled = 0;\n+        private LdapOutputStream output = new LdapOutputStream();\n+        private LdapInputStream input = new LdapInputStream(output);\n+\n+        public void connect(SocketAddress address, int timeout) {\n+        }\n+\n+        public InputStream getInputStream() {\n+            return input;\n+        }\n+\n+        public OutputStream getOutputStream() {\n+            return output;\n+        }\n+\n+        public int closeMethodCalledCount() {\n+            return closeMethodCalled;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            closeMethodCalled++;\n+            super.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/SocketCloseTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}