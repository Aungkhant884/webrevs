{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-        painter.paint(g, c, newX - 1, newY - 1, newWidth + 1, newHeight);\n+        painter.paint(g, c, newX - 1, newY - 1, newWidth + 1, newHeight + 1);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaTableHeaderBorder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8016524\n+ * @requires (os.family==\"mac\")\n+ * @key headful\n+ * @summary Tests whether the bottom line of JTableHeader border is visible for MacOS default LAF\n+ * @run main JTHeaderBorderTest\n+ *\/\n+\n+import java.awt.*;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+public class JTHeaderBorderTest {\n+\n+    private static JFrame frame;\n+    private static JTable table;\n+    private static JScrollPane scrollableTable;\n+\n+    private static final int FRAME_HT = 300;\n+    private static final int FRAME_WT = 300;\n+    private static final int TABLE_COLS = 3;\n+    private static final int TABLE_ROWS = 2;\n+    private static final int Y_OFFSET = 30;\n+    private static final int X_OFFSET = 25;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try {\n+            try {\n+                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+                    | UnsupportedLookAndFeelException e) {\n+                throw new RuntimeException(\"Unsupported Look&Feel Class\");\n+            }\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                table = new JTable(TABLE_ROWS, TABLE_COLS);\n+                scrollableTable = new JScrollPane(table);\n+\n+                frame = new JFrame();\n+                frame.getContentPane().add(scrollableTable);\n+                frame.setSize(FRAME_WT, FRAME_HT);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\n+                \/\/ paint JFrame to BufferedImage\n+                BufferedImage image = new BufferedImage(FRAME_WT, FRAME_HT, TYPE_INT_ARGB);\n+                Graphics2D graphics2D = image.createGraphics();\n+                frame.paint(graphics2D);\n+                graphics2D.dispose();\n+\n+                String tableColor = Integer.toHexString(table.getBackground().getRGB());\n+                String headerColor = Integer.toHexString(table.getTableHeader().getBackground().getRGB());\n+                String pixelColor = tableColor;\n+                boolean isBottomLineVisible = false;\n+\n+                \/\/ scan table header region to check if bottom border of JTableHeader is visible\n+                for (int y = Y_OFFSET; y <= Y_OFFSET+25; y++) {\n+                    pixelColor = Integer.toHexString(image.getRGB(X_OFFSET, y));\n+                    System.out.println(\"Y offset: \"+ y + \" Color: \"+ (Integer.toHexString(image.getRGB(X_OFFSET, y))));\n+                    if (!pixelColor.equalsIgnoreCase(tableColor) || !pixelColor.equalsIgnoreCase(headerColor)) {\n+                        isBottomLineVisible = true;\n+                        break;\n+                    }\n+                }\n+                \/\/ throw Runtime Exception if border is not visible in the scanned region\n+                if (!isBottomLineVisible) {\n+                    saveImage(image, \"JTableHeader.png\");\n+                    throw new RuntimeException(\"JTableHeader Bottom Border not visible\");\n+                }\n+            });\n+        } finally {\n+            if (frame != null) {\n+                SwingUtilities.invokeAndWait(()-> frame.dispose());\n+            }\n+        }\n+    }\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/8016524\/JTHeaderBorderTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}