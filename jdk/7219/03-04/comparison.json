{"files":[{"patch":"@@ -28,1 +28,0 @@\n- * @summary Tests whether the bottom line of JTableHeader border is visible for MacOS default LAF\n@@ -30,0 +29,1 @@\n+ * @summary Tests whether the bottom line of JTableHeader border is visible for MacOS default LAF\n@@ -37,1 +37,0 @@\n-import javax.swing.JScrollPane;\n@@ -39,1 +38,1 @@\n-import javax.swing.UIManager;\n+import javax.swing.JScrollPane;\n@@ -41,0 +40,1 @@\n+import javax.swing.UIManager;\n@@ -42,0 +42,2 @@\n+import javax.swing.UnsupportedLookAndFeelException;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -57,1 +59,1 @@\n-    public static final int TABLE_COLS = 5;\n+    public static final int TABLE_COLS = 3;\n@@ -60,2 +62,0 @@\n-    private static final int WHITE_RGB = Color.WHITE.getRGB();\n-\n@@ -68,1 +68,2 @@\n-            robot.setAutoDelay(100);\n+            AtomicReference<Color> tableColor = new AtomicReference<>();\n+            AtomicReference<Color> tableHeaderColor = new AtomicReference<>();\n@@ -72,2 +73,3 @@\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                throw new RuntimeException(\"Unsupported LookAndFeel Class\");\n+            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n+                    | UnsupportedLookAndFeelException e) {\n+                throw new RuntimeException(\"Unsupported Look&Feel Class\");\n@@ -75,1 +77,0 @@\n-\n@@ -78,2 +79,0 @@\n-                table.setBackground(Color.WHITE);\n-                table.getTableHeader().setBackground(Color.WHITE);\n@@ -95,0 +94,2 @@\n+                tableColor.set(table.getBackground());\n+                tableHeaderColor.set(table.getTableHeader().getBackground());\n@@ -97,0 +98,1 @@\n+            robot.delay(200);\n@@ -101,0 +103,1 @@\n+            robot.delay(500);\n@@ -103,1 +106,1 @@\n-            \/\/ get pixel color at lower left and lower right on the JTableHeader border\n+            \/\/ get pixel color at lower left of JTableHeader\n@@ -105,0 +108,7 @@\n+            robot.delay(500);\n+\n+            \/\/ to check mouse pointer position on screen\n+            robot.mouseMove(point.x + header_dim[1] - X_OFFSET, point.y + header_dim[0] - Y_OFFSET);\n+            robot.delay(500);\n+            robot.waitForIdle();\n+            \/\/ get pixel color at lower right of JTableHeader\n@@ -106,0 +116,2 @@\n+            robot.delay(500);\n+\n@@ -107,2 +119,9 @@\n-            \/\/ if pixel color is white then border not visible, throw Exception\n-            if (lowerLeft.getRGB() == WHITE_RGB || lowerRight.getRGB() == WHITE_RGB) {\n+            System.out.println(\"RGB Lower Left: \" + lowerLeft.toString());\n+            System.out.println(\"RGB Lower Right: \" + lowerRight.toString());\n+            System.out.println(\"Table-Header Background Color: \" + tableHeaderColor.get().toString());\n+            System.out.println(\"Table Background Color: \" + tableColor.get().toString());\n+\n+\n+            \/\/ if pixel color is either table-header or table background color then throw an Exception\n+            if (lowerLeft.getRGB() == tableColor.get().getRGB() || lowerLeft.getRGB() == tableHeaderColor.get().getRGB()\n+                    || lowerRight.getRGB() == tableColor.get().getRGB() || lowerRight.getRGB() == tableHeaderColor.get().getRGB()) {\n@@ -111,5 +130,0 @@\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-                throw new RuntimeException(e);\n-            }\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/8016524\/JTHeaderBorderTest.java","additions":34,"deletions":20,"binary":false,"changes":54,"status":"modified"}]}