{"files":[{"patch":"@@ -27,1 +27,0 @@\n- * @key headful\n@@ -29,0 +28,1 @@\n+ * @key headful\n@@ -33,3 +33,2 @@\n-import java.awt.Point;\n-import java.awt.Robot;\n-import java.awt.Color;\n+import java.awt.*;\n+import javax.imageio.ImageIO;\n@@ -41,1 +40,0 @@\n-import javax.swing.table.JTableHeader;\n@@ -43,1 +41,5 @@\n-import java.util.concurrent.atomic.AtomicReference;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n@@ -50,2 +52,0 @@\n-    private static JTableHeader header;\n-    private static Point point;\n@@ -53,8 +53,6 @@\n-    \/\/ added so as to get the correct pixel value of the bottom border\n-    public static final int X_OFFSET = 10;\n-    public static final int Y_OFFSET = 1;\n-\n-    public static final int FRAME_HT = 300;\n-    public static final int FRAME_WT = 300;\n-    public static final int TABLE_COLS = 3;\n-    public static final int TABLE_ROWS = 2;\n+    private static final int FRAME_HT = 300;\n+    private static final int FRAME_WT = 300;\n+    private static final int TABLE_COLS = 3;\n+    private static final int TABLE_ROWS = 2;\n+    private static final int Y_OFFSET = 30;\n+    private static final int X_OFFSET = 25;\n@@ -65,6 +63,0 @@\n-            \/\/to keep track of header dimensions\n-            final int[] header_dim = new int[2];\n-            Robot robot = new Robot();\n-            AtomicReference<Color> tableColor = new AtomicReference<>();\n-            AtomicReference<Color> tableHeaderColor = new AtomicReference<>();\n-\n@@ -77,0 +69,1 @@\n+\n@@ -80,0 +73,1 @@\n+\n@@ -84,1 +78,0 @@\n-                frame.pack();\n@@ -88,8 +81,25 @@\n-                \/\/ retrieve JTableHeader coordinate position on screen (x,y)\n-                point = table.getTableHeader().getLocationOnScreen();\n-                \/\/ retrieve height and width of the header\n-                header = table.getTableHeader();\n-                header_dim[0] = header.getHeight();\n-                header_dim[1] = header.getWidth();\n-                tableColor.set(table.getBackground());\n-                tableHeaderColor.set(table.getTableHeader().getBackground());\n+                \/\/ paint JFrame to BufferedImage\n+                BufferedImage image = new BufferedImage(FRAME_WT, FRAME_HT, TYPE_INT_ARGB);\n+                Graphics2D graphics2D = image.createGraphics();\n+                frame.paint(graphics2D);\n+                graphics2D.dispose();\n+\n+                String tableColor = Integer.toHexString(table.getBackground().getRGB());\n+                String headerColor = Integer.toHexString(table.getTableHeader().getBackground().getRGB());\n+                String pixelColor = tableColor;\n+                boolean isBottomLineVisible = false;\n+\n+                \/\/ scan table header region to check if bottom border of JTableHeader is visible\n+                for (int y = Y_OFFSET; y <= Y_OFFSET+25; y++) {\n+                    pixelColor = Integer.toHexString(image.getRGB(X_OFFSET, y));\n+                    System.out.println(\"Y offset: \"+ y + \" Color: \"+ (Integer.toHexString(image.getRGB(X_OFFSET, y))));\n+                    if (!pixelColor.equalsIgnoreCase(tableColor) || !pixelColor.equalsIgnoreCase(headerColor)) {\n+                        isBottomLineVisible = true;\n+                        break;\n+                    }\n+                }\n+                \/\/ throw Runtime Exception if border is not visible in the scanned region\n+                if (!isBottomLineVisible) {\n+                    saveImage(image, \"JTableHeader.png\");\n+                    throw new RuntimeException(\"JTableHeader Bottom Border not visible\");\n+                }\n@@ -97,35 +107,1 @@\n-\n-            robot.delay(200);\n-            robot.waitForIdle();\n-\n-            \/\/ to check mouse pointer position on screen\n-            robot.mouseMove(point.x + X_OFFSET, point.y + header_dim[0] - Y_OFFSET);\n-            robot.delay(500);\n-            robot.waitForIdle();\n-\n-            \/\/ get pixel color at lower left of JTableHeader\n-            Color lowerLeft = robot.getPixelColor(point.x + X_OFFSET, point.y + header_dim[0] - Y_OFFSET);\n-            robot.delay(500);\n-\n-            \/\/ to check mouse pointer position on screen\n-            robot.mouseMove(point.x + header_dim[1] - X_OFFSET, point.y + header_dim[0] - Y_OFFSET);\n-            robot.delay(500);\n-            robot.waitForIdle();\n-            \/\/ get pixel color at lower right of JTableHeader\n-            Color lowerRight = robot.getPixelColor(point.x + header_dim[1] - X_OFFSET, point.y + header_dim[0] - Y_OFFSET);\n-            robot.delay(500);\n-\n-\n-            System.out.println(\"RGB Lower Left: \" + lowerLeft.toString());\n-            System.out.println(\"RGB Lower Right: \" + lowerRight.toString());\n-            System.out.println(\"Table-Header Background Color: \" + tableHeaderColor.get().toString());\n-            System.out.println(\"Table Background Color: \" + tableColor.get().toString());\n-\n-\n-            \/\/ if pixel color is either table-header or table background color then throw an Exception\n-            if (lowerLeft.getRGB() == tableColor.get().getRGB() || lowerLeft.getRGB() == tableHeaderColor.get().getRGB()\n-                    || lowerRight.getRGB() == tableColor.get().getRGB() || lowerRight.getRGB() == tableHeaderColor.get().getRGB()) {\n-                throw new RuntimeException(\"JTableHeader Bottom Border not visible\");\n-            }\n-        }\n-        finally {\n+        } finally {\n@@ -137,0 +113,7 @@\n+    private static void saveImage(BufferedImage image, String filename) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n","filename":"test\/jdk\/javax\/swing\/JTableHeader\/8016524\/JTHeaderBorderTest.java","additions":49,"deletions":66,"binary":false,"changes":115,"status":"modified"}]}