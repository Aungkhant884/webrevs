{"files":[{"patch":"@@ -173,1 +173,1 @@\n-     * {@link DPathConsumer2D} object as it is calculated.\n+     * {@link PathConsumer2D} object as it is calculated.\n@@ -176,0 +176,2 @@\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n@@ -178,0 +180,2 @@\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n@@ -182,1 +186,1 @@\n-     * @param consumer the {@code DPathConsumer2D} instance to forward\n+     * @param consumer the {@code PathConsumer2D} instance to forward\n@@ -195,0 +199,49 @@\n+        strokeTo(src, at, null, bs, thin, normalize, antialias, consumer);\n+    }\n+\n+    \/**\n+     * Sends the geometry for a widened path as specified by the parameters\n+     * to the specified consumer.\n+     * <p>\n+     * The specified {@code src} {@link Shape} is widened according\n+     * to the parameters specified by the {@link BasicStroke} object.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_STROKE_NORMALIZE} hint if the\n+     * {@code normalize} boolean parameter is true.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_ANTIALIAS_ON} hint if the\n+     * {@code antialias} boolean parameter is true.\n+     * <p>\n+     * The geometry of the widened path is forwarded to the indicated\n+     * {@link PathConsumer2D} object as it is calculated.\n+     *\n+     * @param src the source path to be widened\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n+     * @param clip the current clip in effect in device coordinates\n+     * @param bs the {@code BasicSroke} object specifying the\n+     *           decorations to be applied to the widened path\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n+     * @param normalize indicates whether stroke normalization should\n+     *                  be applied\n+     * @param antialias indicates whether or not adjustments appropriate\n+     *                  to antialiased rendering should be applied\n+     * @param consumer the {@code PathConsumer2D} instance to forward\n+     *                 the widened geometry to\n+     * @since 17\n+     *\/\n+\/*    @Override (only for 17+) *\/\n+    public void strokeTo(Shape src,\n+                         AffineTransform at,\n+                         Region clip,\n+                         BasicStroke bs,\n+                         boolean thin,\n+                         boolean normalize,\n+                         boolean antialias,\n+                         final PathConsumer2D consumer)\n+    {\n+        \/\/ Test if at is identity:\n+        final AffineTransform _at = (at != null && !at.isIdentity()) ? at\n+                                    : null;\n+\n@@ -201,1 +254,31 @@\n-            strokeTo(rdrCtx, src, at, bs, thin, norm, antialias,\n+            if ((clip != null) &&\n+                    (DO_CLIP || (DO_CLIP_RUNTIME_ENABLE && MarlinProperties.isDoClipAtRuntime()))) {\n+                \/\/ Define the initial clip bounds:\n+                final double[] clipRect = rdrCtx.clipRect;\n+\n+                \/\/ Adjust the clipping rectangle with the renderer offsets\n+                final double rdrOffX = 0.25d; \/\/ LBO: is it correct for AA or non AA cases ?\n+                final double rdrOffY = 0.25d; \/\/ see NearestPixelQuarter (depends on normalization ?)\n+\n+                \/\/ add a small rounding error:\n+                final double margin = 1e-3d;\n+\n+                clipRect[0] = clip.getLoY()\n+                                - margin + rdrOffY;\n+                clipRect[1] = clip.getLoY() + clip.getHeight()\n+                                + margin + rdrOffY;\n+                clipRect[2] = clip.getLoX()\n+                                - margin + rdrOffX;\n+                clipRect[3] = clip.getLoX() + clip.getWidth()\n+                                + margin + rdrOffX;\n+\n+                if (MarlinConst.DO_LOG_CLIP) {\n+                    MarlinUtils.logInfo(\"clipRect (clip): \"\n+                                        + Arrays.toString(rdrCtx.clipRect));\n+                }\n+\n+                \/\/ Enable clipping:\n+                rdrCtx.doClip = true;\n+            }\n+\n+            strokeTo(rdrCtx, src, _at, bs, thin, norm, antialias,\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DMarlinRenderingEngine.java","additions":86,"deletions":3,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -176,0 +176,2 @@\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n@@ -178,0 +180,2 @@\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n@@ -195,0 +199,49 @@\n+        strokeTo(src, at, null, bs, thin, normalize, antialias, consumer);\n+    }\n+\n+    \/**\n+     * Sends the geometry for a widened path as specified by the parameters\n+     * to the specified consumer.\n+     * <p>\n+     * The specified {@code src} {@link Shape} is widened according\n+     * to the parameters specified by the {@link BasicStroke} object.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_STROKE_NORMALIZE} hint if the\n+     * {@code normalize} boolean parameter is true.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_ANTIALIAS_ON} hint if the\n+     * {@code antialias} boolean parameter is true.\n+     * <p>\n+     * The geometry of the widened path is forwarded to the indicated\n+     * {@link PathConsumer2D} object as it is calculated.\n+     *\n+     * @param src the source path to be widened\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n+     * @param clip the current clip in effect in device coordinates\n+     * @param bs the {@code BasicSroke} object specifying the\n+     *           decorations to be applied to the widened path\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n+     * @param normalize indicates whether stroke normalization should\n+     *                  be applied\n+     * @param antialias indicates whether or not adjustments appropriate\n+     *                  to antialiased rendering should be applied\n+     * @param consumer the {@code PathConsumer2D} instance to forward\n+     *                 the widened geometry to\n+     * @since 17\n+     *\/\n+\/*    @Override (only for 17+) *\/\n+    public void strokeTo(Shape src,\n+                         AffineTransform at,\n+                         Region clip,\n+                         BasicStroke bs,\n+                         boolean thin,\n+                         boolean normalize,\n+                         boolean antialias,\n+                         final PathConsumer2D consumer)\n+    {\n+        \/\/ Test if at is identity:\n+        final AffineTransform _at = (at != null && !at.isIdentity()) ? at\n+                                    : null;\n+\n@@ -201,1 +254,31 @@\n-            strokeTo(rdrCtx, src, at, bs, thin, norm, antialias, consumer);\n+            if ((clip != null) &&\n+                    (DO_CLIP || (DO_CLIP_RUNTIME_ENABLE && MarlinProperties.isDoClipAtRuntime()))) {\n+                \/\/ Define the initial clip bounds:\n+                final float[] clipRect = rdrCtx.clipRect;\n+\n+                \/\/ Adjust the clipping rectangle with the renderer offsets\n+                final float rdrOffX = 0.25f; \/\/ LBO: is it correct for AA or non AA cases ?\n+                final float rdrOffY = 0.25f; \/\/ see NearestPixelQuarter (depends on normalization ?)\n+\n+                \/\/ add a small rounding error:\n+                final float margin = 1e-3f;\n+\n+                clipRect[0] = clip.getLoY()\n+                                - margin + rdrOffY;\n+                clipRect[1] = clip.getLoY() + clip.getHeight()\n+                                + margin + rdrOffY;\n+                clipRect[2] = clip.getLoX()\n+                                - margin + rdrOffX;\n+                clipRect[3] = clip.getLoX() + clip.getWidth()\n+                                + margin + rdrOffX;\n+\n+                if (MarlinConst.DO_LOG_CLIP) {\n+                    MarlinUtils.logInfo(\"clipRect (clip): \"\n+                                        + Arrays.toString(rdrCtx.clipRect));\n+                }\n+\n+                \/\/ Enable clipping:\n+                rdrCtx.doClip = true;\n+            }\n+\n+            strokeTo(rdrCtx, src, _at, bs, thin, norm, antialias, consumer);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinRenderingEngine.java","additions":84,"deletions":1,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -264,1 +264,2 @@\n-            sr.setOutputArea(sg2d.getCompClip());\n+            final Region clip = sg2d.getCompClip();\n+            sr.setOutputArea(clip);\n@@ -272,0 +273,2 @@\n+\/\/ No clipping (pre-jdk17)\n+\/*\n@@ -275,0 +278,5 @@\n+*\/\n+\/\/ lbourges: give clip in jdk17+\n+            RenderEngine.strokeTo(s,\n+                                  sg2d.transform, clip, bs,\n+                                  thin, normalize, false, sr);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/LoopPipe.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -203,0 +203,2 @@\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n@@ -205,0 +207,2 @@\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n@@ -221,0 +225,41 @@\n+    \/**\n+     * Sends the geometry for a widened path as specified by the parameters\n+     * to the specified consumer.\n+     * <p>\n+     * The specified {@code src} {@link Shape} is widened according\n+     * to the parameters specified by the {@link BasicStroke} object.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_STROKE_NORMALIZE} hint if the\n+     * {@code normalize} boolean parameter is true.\n+     * Adjustments are made to the path as appropriate for the\n+     * {@link java.awt.RenderingHints#VALUE_ANTIALIAS_ON} hint if the\n+     * {@code antialias} boolean parameter is true.\n+     * <p>\n+     * The geometry of the widened path is forwarded to the indicated\n+     * {@link PathConsumer2D} object as it is calculated.\n+     *\n+     * @param src the source path to be widened\n+     * @param at the transform to be applied to the shape and the\n+     *           stroke attributes\n+     * @param clip the current clip in effect in device coordinates\n+     * @param bs the {@code BasicSroke} object specifying the\n+     *           decorations to be applied to the widened path\n+     * @param thin true if the transformed stroke attributes are smaller\n+     *             than the minimum dropout pen width\n+     * @param normalize indicates whether stroke normalization should\n+     *                  be applied\n+     * @param antialias indicates whether or not adjustments appropriate\n+     *                  to antialiased rendering should be applied\n+     * @param consumer the {@code PathConsumer2D} instance to forward\n+     *                 the widened geometry to\n+     * @since 17\n+     *\/\n+    public abstract void strokeTo(Shape src,\n+                                  AffineTransform at,\n+                                  Region clip,\n+                                  BasicStroke bs,\n+                                  boolean thin,\n+                                  boolean normalize,\n+                                  boolean antialias,\n+                                  final PathConsumer2D consumer);\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/RenderingEngine.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    static final RenderingEngine RenderEngine = RenderingEngine.getInstance();\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/SpanShapeRenderer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}