{"files":[{"patch":"@@ -883,0 +883,1 @@\n+    \/* note: CurveClipSplitter uses double-precision for higher accuracy *\/\n@@ -901,1 +902,1 @@\n-        final float[] clipRectPad = new float[4];\n+        final double[] clipRectPad = new double[4];\n@@ -906,1 +907,1 @@\n-        final float[] middle = new float[MAX_N_CURVES * 8 + 2];\n+        final double[] middle = new double[MAX_N_CURVES * 8 + 2];\n@@ -908,1 +909,1 @@\n-        private final float[] subdivTs = new float[MAX_N_CURVES];\n+        private final double[] subdivTs = new double[MAX_N_CURVES];\n@@ -911,1 +912,1 @@\n-        private final Curve curve;\n+        private final DCurve curve;\n@@ -916,1 +917,1 @@\n-            this.curve = rdrCtx.curve;\n+            this.curve = \/* rdrCtx.curve *\/ new DCurve(); \/\/ double-precision curve\n@@ -938,1 +939,1 @@\n-            final float[] _clipRectPad = clipRectPad;\n+            final double[] _clipRectPad = clipRectPad;\n@@ -964,1 +965,1 @@\n-            final float[] mid = middle;\n+            final double[] mid = middle;\n@@ -985,1 +986,1 @@\n-            final float[] mid = middle;\n+            final double[] mid = middle;\n@@ -1008,1 +1009,1 @@\n-            final float[] mid = middle;\n+            final double[] mid = middle;\n@@ -1020,2 +1021,2 @@\n-            final float[] mid = middle;\n-            final float[] subTs = subdivTs;\n+            final double[] mid = middle;\n+            final double[] subTs = subdivTs;\n@@ -1028,1 +1029,1 @@\n-            final int nSplits = Helpers.findClipPoints(curve, mid, subTs, type,\n+            final int nSplits = DHelpers.findClipPoints(curve, mid, subTs, type,\n@@ -1039,1 +1040,1 @@\n-            float prevT = 0.0f;\n+            double prevT = 0.0d;\n@@ -1042,1 +1043,1 @@\n-                final float t = subTs[i];\n+                final double t = subTs[i];\n@@ -1044,1 +1045,1 @@\n-                Helpers.subdivideAt((t - prevT) \/ (1.0f - prevT),\n+                DHelpers.subdivideAt((t - prevT) \/ (1.0d - prevT),\n@@ -1058,1 +1059,1 @@\n-        static void emitCurrent(final int type, final float[] pts,\n+        static void emitCurrent(final int type, final double[] pts,\n@@ -1063,3 +1064,3 @@\n-                out.curveTo(pts[off + 2], pts[off + 3],\n-                            pts[off + 4], pts[off + 5],\n-                            pts[off + 6], pts[off + 7]);\n+                out.curveTo((float)pts[off + 2], (float)pts[off + 3],\n+                            (float)pts[off + 4], (float)pts[off + 5],\n+                            (float)pts[off + 6], (float)pts[off + 7]);\n@@ -1067,1 +1068,1 @@\n-                out.lineTo(pts[off + 2], pts[off + 3]);\n+                out.lineTo((float)pts[off + 2], (float)pts[off + 3]);\n@@ -1069,2 +1070,2 @@\n-                out.quadTo(pts[off + 2], pts[off + 3],\n-                           pts[off + 4], pts[off + 5]);\n+                out.quadTo((float)pts[off + 2], (float)pts[off + 3],\n+                           (float)pts[off + 4], (float)pts[off + 5]);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/TransformingPathConsumer2D.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -231,0 +231,2 @@\n+     * The clip region can be optionally given to let the renderer only\n+     * send geometries overlapping the clip region.\n@@ -257,8 +259,12 @@\n-    public abstract void strokeTo(Shape src,\n-                                  AffineTransform at,\n-                                  Region clip,\n-                                  BasicStroke bs,\n-                                  boolean thin,\n-                                  boolean normalize,\n-                                  boolean antialias,\n-                                  final PathConsumer2D consumer);\n+    public void strokeTo(Shape src,\n+                         AffineTransform at,\n+                         Region clip,\n+                         BasicStroke bs,\n+                         boolean thin,\n+                         boolean normalize,\n+                         boolean antialias,\n+                         final PathConsumer2D consumer)\n+    {\n+        \/\/ As default implementation, call the strokeTo() method without the clip region.\n+        strokeTo(src, at, bs, thin, normalize, antialias, consumer);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/RenderingEngine.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import java.awt.BasicStroke;\n-import java.awt.BorderLayout;\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.RenderingHints;\n-import java.awt.Stroke;\n-import java.awt.geom.Line2D;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-\n-\/*\n- * @test\n- * @bug 7018932\n- * @summary fix LoopPipe.getStrokedSpans() performance (clipping enabled by Marlin renderer)\n- * @run main DrawingTest7018932\n- *\/\n-public class DrawingTest7018932 extends JPanel {\n-\n-    private static final boolean USE_AA = false;\n-\n-    private static final long MAX_TIME = 5 * 1000L; \/\/ 5s\n-\n-    public static void main(String[] args) {\n-        JFrame frame = new JFrame();\n-        frame.getContentPane().setLayout(new BorderLayout());\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.getContentPane().add(new DrawingTest7018932(), BorderLayout.CENTER);\n-        frame.setSize(400, 400);\n-        frame.setVisible(true);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    Thread.sleep(MAX_TIME);\n-                } catch (InterruptedException ie) {\n-                    System.err.println(\"DrawingTest7018932: interrupted.\");\n-                    ie.printStackTrace(System.err);\n-                }\n-                \/\/ too long, exit KO:\n-                end(false);\n-            }\n-\n-        }).start();\n-    }\n-\n-    @Override\n-    public void paintComponent(Graphics g) {\n-        final long start = System.nanoTime();\n-\n-        Graphics2D g2 = (Graphics2D) g;\n-\n-        if (USE_AA) {\n-            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n-        }\n-\n-\/\/ clip - doesn't help\n-        g2.setClip(0, 0, getWidth(), getHeight());\n-\n-\/\/ this part is just testing the drawing - so I can see I am actually drawing something\n-\/\/ IGNORE\n-        \/**\n-     g.setColor(Color.GREEN);\n-     g.fillRect(0, 0, getWidth(), getHeight());\n-     g.setColor(Color.black);\n-        g2.setStroke(new BasicStroke(2));\n-     g2.draw(new Line2D.Double(20, 20, 200, 20));\n-\n-     \/**\/\n-\/\/ Now we re-create the exact conditions that lead to the system crash in the JDK\n-\/\/ BUG HERE - setting the stroke leads to the crash\n-        Stroke stroke = new BasicStroke(2.0f, 1, 0, 1.0f, new float[]{0.0f, 4.0f}, 0.0f);\n-        g2.setStroke(stroke);\n-\n-        \/\/ NOTE: Large values to trigger crash \/ infinite loop?\n-        g2.draw(new Line2D.Double(4.0, 1.794369841E9, 567.0, -2.147483648E9));\n-\n-        \/\/ after 1 draw finishes, exit OK:\n-        System.out.println(\"DrawingTest7018932: duration= \" + (1e-6 * (System.nanoTime() - start)) + \" ms.\");\n-        end(true);\n-    }\n-\n-    static void end(boolean ok) {\n-        System.out.println(\"DrawingTest7018932: \" + ((ok) ? \"PASS\" : \"FAIL\"));\n-        System.exit((ok) ? 0 : 1);\n-    }\n-\n-}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/DrawingTest7018932.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BasicStroke;\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.Stroke;\n+import java.awt.geom.Line2D;\n+import java.awt.image.BufferedImage;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE;\n+\n+\/**\n+ * @test\n+ * @bug 7018932\n+ * @summary fix LoopPipe.getStrokedSpans() performance (clipping enabled by Marlin renderer)\n+ * @run main DrawingTest7018932\n+ * @run main\/othervm\/timeout=10 -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine StrokedLinePerf\n+ * @run main\/othervm\/timeout=10 -Dsun.java2d.renderer=sun.java2d.marlin.DMarlinRenderingEngine StrokedLinePerf\n+ *\/\n+public class StrokedLinePerf {\n+\n+    public static void main(String[] unused) {\n+        BufferedImage bi = new BufferedImage(400, 400, TYPE_INT_ARGB_PRE);\n+        test(bi, true);\n+        test(bi, false);\n+    }\n+\n+    private static void test(BufferedImage bi, boolean useAA) {\n+        final long start = System.nanoTime();\n+\n+        final Graphics2D g2d = bi.createGraphics();\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                (useAA) ? RenderingHints.VALUE_ANTIALIAS_ON\n+                        : RenderingHints.VALUE_ANTIALIAS_OFF);\n+\n+        Stroke stroke = new BasicStroke(2.0f, 1, 0, 1.0f, new float[]{0.0f, 4.0f}, 0.0f);\n+        g2d.setStroke(stroke);\n+\n+        \/\/Large values to trigger crash \/ infinite loop.\n+        g2d.draw(new Line2D.Double(4.0, 1.794369841E9, 567.0, -2.147483648E9));\n+\n+        System.out.println(\"StrokedLinePerf(\" + useAA + \"): Test duration= \" + (1e-6 * (System.nanoTime() - start)) + \" ms.\");\n+        g2d.dispose();\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/StrokedLinePerf.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}