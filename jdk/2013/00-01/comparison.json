{"files":[{"patch":"@@ -476,0 +476,22 @@\n+        public void strokeTo(Shape src,\n+                             AffineTransform at,\n+                             Region clip,\n+                             BasicStroke bs,\n+                             boolean thin,\n+                             boolean normalize,\n+                             boolean antialias,\n+                             PathConsumer2D consumer)\n+        {\n+            System.out.println(name+\".strokeTo(\"+\n+                               src.getClass().getName()+\", \"+\n+                               at+\", \"+\n+                               clip+\", \"+\n+                               bs+\", \"+\n+                               (thin ? \"thin\" : \"wide\")+\", \"+\n+                               (normalize ? \"normalized\" : \"pure\")+\", \"+\n+                               (antialias ? \"AA\" : \"non-AA\")+\", \"+\n+                               consumer.getClass().getName()+\")\");\n+            target.strokeTo(src, at, clip, bs, thin, normalize, antialias, consumer);\n+        }\n+\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/RenderingEngine.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.awt.BasicStroke;\n+import java.awt.BorderLayout;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.Stroke;\n+import java.awt.geom.Line2D;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 7018932\n+ * @summary fix LoopPipe.getStrokedSpans() performance (clipping enabled by Marlin renderer)\n+ * @run main DrawingTest7018932\n+ *\/\n+public class DrawingTest7018932 extends JPanel {\n+\n+    private static final boolean USE_AA = false;\n+\n+    private static final long MAX_TIME = 5 * 1000L; \/\/ 5s\n+\n+    public static void main(String[] args) {\n+        JFrame frame = new JFrame();\n+        frame.getContentPane().setLayout(new BorderLayout());\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.getContentPane().add(new DrawingTest7018932(), BorderLayout.CENTER);\n+        frame.setSize(400, 400);\n+        frame.setVisible(true);\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    Thread.sleep(MAX_TIME);\n+                } catch (InterruptedException ie) {\n+                    System.err.println(\"DrawingTest7018932: interrupted.\");\n+                    ie.printStackTrace(System.err);\n+                }\n+                \/\/ too long, exit KO:\n+                end(false);\n+            }\n+\n+        }).start();\n+    }\n+\n+    @Override\n+    public void paintComponent(Graphics g) {\n+        final long start = System.nanoTime();\n+\n+        Graphics2D g2 = (Graphics2D) g;\n+\n+        if (USE_AA) {\n+            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+        }\n+\n+\/\/ clip - doesn't help\n+        g2.setClip(0, 0, getWidth(), getHeight());\n+\n+\/\/ this part is just testing the drawing - so I can see I am actually drawing something\n+\/\/ IGNORE\n+        \/**\n+     g.setColor(Color.GREEN);\n+     g.fillRect(0, 0, getWidth(), getHeight());\n+     g.setColor(Color.black);\n+        g2.setStroke(new BasicStroke(2));\n+     g2.draw(new Line2D.Double(20, 20, 200, 20));\n+    \n+     \/**\/\n+\/\/ Now we re-create the exact conditions that lead to the system crash in the JDK\n+\/\/ BUG HERE - setting the stroke leads to the crash\n+        Stroke stroke = new BasicStroke(2.0f, 1, 0, 1.0f, new float[]{0.0f, 4.0f}, 0.0f);\n+        g2.setStroke(stroke);\n+\n+        \/\/ NOTE: Large values to trigger crash \/ infinite loop?\n+        g2.draw(new Line2D.Double(4.0, 1.794369841E9, 567.0, -2.147483648E9));\n+\n+        \/\/ after 1 draw finishes, exit OK:\n+        System.out.println(\"DrawingTest7018932: duration= \" + (1e-6 * (System.nanoTime() - start)) + \" ms.\");\n+        end(true);\n+    }\n+\n+    static void end(boolean ok) {\n+        System.out.println(\"DrawingTest7018932: \" + ((ok) ? \"PASS\" : \"FAIL\"));\n+        System.exit((ok) ? 0 : 1);\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/DrawingTest7018932.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}