{"files":[{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/DE1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/DI1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/DS1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/PR1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/RO1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/RS1.gif","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/SE1.gif","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 5049549 7132413\n+   @summary Tests that the proper icon is used for different states.\n+   @library ..\/..\/regtesthelpers\n+   @build Blocker\n+   @run main\/manual bug5049549\n+*\/\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug5049549 {\n+\n+    private static ImageIcon DE = new ImageIcon(bug5049549.class.getResource(\"DE1.GIF\"));\n+    private static ImageIcon DI = new ImageIcon(bug5049549.class.getResource(\"DI1.GIF\"));\n+    private static ImageIcon DS = new ImageIcon(bug5049549.class.getResource(\"DS1.GIF\"));\n+    private static ImageIcon RO = new ImageIcon(bug5049549.class.getResource(\"RO1.GIF\"));\n+    private static ImageIcon RS = new ImageIcon(bug5049549.class.getResource(\"RS1.GIF\"));\n+    private static ImageIcon SE = new ImageIcon(bug5049549.class.getResource(\"SE1.GIF\"));\n+    private static ImageIcon PR = new ImageIcon(bug5049549.class.getResource(\"PR1.GIF\"));\n+\n+    private static Blocker blocker = new Blocker();\n+\n+    private static class KButton extends JButton {\n+\n+            KButton(String ex) {\n+                super(ex);\n+            }\n+\n+            private Icon disabledIcon;\n+            private Icon disabledSelectedIcon;\n+\n+            public Icon getDisabledIcon() {\n+                return disabledIcon;\n+            }\n+\n+            public Icon getDisabledSelectedIcon() {\n+                return disabledSelectedIcon;\n+            }\n+\n+            public void setDisabledIcon(Icon icon) {\n+                disabledIcon = icon;\n+            }\n+\n+            public void setDisabledSelectedIcon(Icon icon) {\n+                disabledSelectedIcon = icon;\n+            }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        SwingUtilities.invokeLater(new Runnable() {\n+            public void run() {\n+                UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n+                runTest();\n+            }\n+        });\n+\n+        blocker.blockTillDone();\n+    }\n+\n+    private static void runTest() {\n+        JFrame frame = blocker.createFrameWithPassFailButtons(\"Wrong icon is used.\");\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n+\n+        JLabel label = new JLabel(\"The following disabled buttons should have white icons\");\n+        panel.add(label);\n+        label = new JLabel(\"with red text that matches the button text.\");\n+        panel.add(label);\n+\n+        KButton button;\n+\n+        \/* disabled: default icon *\/\n+        button = new KButton(\"DE\");\n+        button.setEnabled(false);\n+        button.setIcon(DE);\n+        panel.add(button);\n+\n+        \/* disabled-selected: default icon *\/\n+        button = new KButton(\"DE\");\n+        button.setEnabled(false);\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        panel.add(button);\n+\n+        \/* disabled: default and disabled icons *\/\n+        button = new KButton(\"DI\");\n+        button.setEnabled(false);\n+        button.setIcon(DE);\n+        button.setDisabledIcon(DI);\n+        panel.add(button);\n+\n+        \/* disabled-selected: default and disabled icons *\/\n+        button = new KButton(\"DI\");\n+        button.setEnabled(false);\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setDisabledIcon(DI);\n+        panel.add(button);\n+\n+        \/* disabled-selected: default, selected and disabled icons *\/\n+        button = new KButton(\"SE\");\n+        button.setEnabled(false);\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setSelectedIcon(SE);\n+        button.setDisabledIcon(DI);\n+        panel.add(button);\n+\n+        \/* disabled-selected: default, disabled-selected, selected and disabled icons *\/\n+        button = new KButton(\"DS\");\n+        button.setEnabled(false);\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setSelectedIcon(SE);\n+        button.setDisabledIcon(DI);\n+        button.setDisabledSelectedIcon(DS);\n+        panel.add(button);\n+\n+        label = new JLabel(\"The following buttons have a white icon with red text,\");\n+        panel.add(label);\n+        label = new JLabel(\"and a triplet of strings separated by commas. The first\");\n+        panel.add(label);\n+        label = new JLabel(\"string says what the icon text should show in the normal\");\n+        panel.add(label);\n+        label = new JLabel(\"state. The second the rollover state. And the third shows\");\n+        panel.add(label);\n+        label = new JLabel(\"what it should show when pressed. Verify each of these\");\n+        panel.add(label);\n+        label = new JLabel(\"states for each button.\");\n+        panel.add(label);\n+\n+        \/* normal: default, rollover icons *\/\n+        button = new KButton(\"DE, RO, DE\");\n+        button.setIcon(DE);\n+        button.setRolloverIcon(RO);\n+        panel.add(button);\n+\n+        \/* normal: default, rollover, pressed icons *\/\n+        button = new KButton(\"DE, RO, PR\");\n+        button.setIcon(DE);\n+        button.setRolloverIcon(RO);\n+        button.setPressedIcon(PR);\n+        panel.add(button);\n+\n+        \/* selected: default, rollover, pressed icons *\/\n+        button = new KButton(\"DE, RO, PR\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setRolloverIcon(RO);\n+        button.setPressedIcon(PR);\n+        panel.add(button);\n+\n+        \/* selected: default, rollover, pressed icons *\/\n+        button = new KButton(\"DE, DE, PR\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setPressedIcon(PR);\n+        panel.add(button);\n+\n+        \/* selected: default, selected, rollover, pressed icons *\/\n+        button = new KButton(\"SE, SE, PR\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setSelectedIcon(SE);\n+        button.setRolloverIcon(RO);\n+        button.setPressedIcon(PR);\n+        panel.add(button);\n+\n+        \/* selected: default, selected, rollover, rollover-selected, pressed icons *\/\n+        button = new KButton(\"SE, RS, PR\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setRolloverSelectedIcon(RS);\n+        button.setSelectedIcon(SE);\n+        button.setRolloverIcon(RO);\n+        button.setPressedIcon(PR);\n+        panel.add(button);\n+\n+        \/* selected: default, selected, rollover, rollover-selected icons *\/\n+        button = new KButton(\"SE, RS, SE\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setRolloverSelectedIcon(RS);\n+        button.setSelectedIcon(SE);\n+        button.setRolloverIcon(RO);\n+        panel.add(button);\n+\n+        \/* selected: default, selected icons *\/\n+        button = new KButton(\"SE, SE, SE\");\n+        button.setSelected(true);\n+        button.setIcon(DE);\n+        button.setSelectedIcon(SE);\n+        button.setRolloverIcon(RO);\n+        panel.add(button);\n+\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/5049549\/bug5049549.java","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Blocker can be used to block a thread until another thread\n+ * messages the blocker to stop. This is useful for regression\n+ * tests that use swing, as most of the work for testing a swing component\n+ * is done in the event dispatching thread and the testing harness ends when\n+ * main returns.\n+ * <p>The following shows the typical usable of this class:\n+ * <pre>\n+     public static void main(String[] args) throws Throwable {\n+         ... set up the gui ...\n+         Blocker blocker = new Blocker();\n+         blocker.blockTillDone();\n+     }\n+\n+     public void actionPerformed(ActionEvent ae) {\n+         if (failed) {\n+             blocker.testFailed(new RuntimeException(\"FAILED!\"));\n+         }\n+         else {\n+             blocker.testPassed();\n+         }\n+     }\n+   <\/pre>\n+ * When using jtreg you would include this class via something like:\n+ * <pre>\n+     @library ..\/..\/..\/regtesthelpers\n+     @build Blocker\n+     @run main YourTest\n+   <\/pre>\n+ *\n+ * <p>You can also use the method <code>createFrameWithPassFailButtons<\/code>\n+ * that will create a JFrame containing two buttons (pass and fail), with\n+ * the two buttons wired to pass\/fail the test. Refer to the javadoc for\n+ * more info.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.Box;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+\n+public class Blocker {\n+    private boolean       done;\n+    private Throwable     error;\n+\n+    \/**\n+     * Call this from the main thread to block the reciever. Then call\n+     * either <code>testPassed<\/code> or <code>testFailed<\/code>, from\n+     * another thread to unblock the receiver. This will only throw an\n+     * exception if <code>testFailed<\/code> is invoked.\n+     *\/\n+    public void blockTillDone() throws Throwable {\n+        synchronized(this) {\n+            while (!done) {\n+                wait();\n+            }\n+        }\n+        if (error != null) {\n+            throw error;\n+        }\n+    }\n+\n+    \/**\n+     * Invoke this to stop the blocker thread.  This does not change the\n+     * status of the test.  This is intended for cases where you don't\n+     * know if you've failed, but want to stop the test.\n+     *\/\n+    public void stopTest() {\n+        synchronized(this) {\n+            done = true;\n+            notifyAll();\n+        }\n+    }\n+\n+    \/**\n+     * Invoke if the test has suceeded. This will notify the main thread\n+     * causing it to stop waiting and continue, which will\n+     * cause the test to finish.\n+     *\/\n+    public void testPassed() {\n+        stopTest(null);\n+    }\n+\n+    \/**\n+     * Invoke if the test has failed. <code>error<\/code> gives the\n+     * exception that will be thrown from the main thread. This will notify\n+     * the main thread causing it to stop waiting and continue, which will\n+     * cause the test to finish. If <code>error<\/code> is null, this has\n+     * The same effect as calling <code>testPassed<\/code>.\n+     *\/\n+    public void testFailed(Throwable error) {\n+        stopTest(error);\n+    }\n+\n+    \/**\n+     * Both <code>testPassed<\/code> and <code>testFailed<\/code> call into\n+     * this. Sets the ivar, <code>done<\/code>, and notifies listeners\n+     * which will unblock the caller of <code>blockTillDone<\/code>.\n+     *\/\n+    protected void stopTest(Throwable error) {\n+        synchronized(this) {\n+            this.error = error;\n+            done = true;\n+            notify();\n+        }\n+    }\n+\n+    \/**\n+     * Creates and returns a JFrame with two button, one that says pass,\n+     * another that says fail. The fail button is wired to call\n+     * <code>uiTestFailed<\/code> with <code>failString<\/code> and the pass\n+     * button is wired to invoked <code>uiTestPassed<\/code>.\n+     * <p>The content pane of the JFrame uses a BorderLayout with the\n+     * buttons inside a horizontal box with filler between them and the\n+     * pass button on the left.\n+     * <p>The returned frame has not been packed, or made visible, it is\n+     * up to the caller to do that (after putting in some useful components).\n+     *\/\n+    public JFrame createFrameWithPassFailButtons(final String failString) {\n+        JFrame         retFrame = new JFrame(\"TEST\");\n+        Box            buttonBox = Box.createHorizontalBox();\n+        JButton        passButton = new JButton(\"Pass\");\n+        JButton        failButton = new JButton(\"Fail\");\n+\n+        passButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ae) {\n+                uiTestPassed();\n+            }\n+        });\n+        failButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ae) {\n+                uiTestFailed(failString);\n+            }\n+        });\n+        retFrame.getContentPane().setLayout(new BorderLayout());\n+        buttonBox.add(passButton);\n+        buttonBox.add(Box.createGlue());\n+        buttonBox.add(failButton);\n+        retFrame.getContentPane().add(buttonBox, BorderLayout.SOUTH);\n+        retFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n+        return retFrame;\n+    }\n+\n+    \/**\n+     * This is invoked from the pass button. It in turn invokes\n+     * <code>testPassed<\/code>.\n+     *\/\n+    protected void uiTestPassed() {\n+        testPassed();\n+    }\n+\n+    \/**\n+     * This is invoked from the fail button. It in turn invokes\n+     * <code>testFailed<\/code> with a RuntimeException, the contents of\n+     * which are <code>failString<\/code>.\n+     *\/\n+    protected void uiTestFailed(String failString) {\n+        testFailed(new RuntimeException(failString));\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/regtesthelpers\/Blocker.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}