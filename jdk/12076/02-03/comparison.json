{"files":[{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(2)\n+@Warmup(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 2, timeUnit = TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+\n+public class PrimitiveFieldSerializationBenchmark {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        Options options = new OptionsBuilder()\n+                .include(PrimitiveFieldSerializationBenchmark.class.getSimpleName())\n+                .build();\n+        new Runner(options).run();\n+    }\n+\n+    @State(Scope.Benchmark)\n+    public static class Log {\n+\n+        MyData myData = new MyData((byte) 1, 'a', (short) 47, 1234, 0.01f, 1234L, 0.01d);\n+        MyRecord myRecord = new MyRecord((byte) 1, 'a', (short) 47, 1234, 0.01f, 1234L, 0.01d);\n+    }\n+\n+    private OutputStream bos;\n+    private ObjectOutputStream os;\n+\n+    @Setup\n+    public void setupStreams(Blackhole bh) throws IOException {\n+        bos = new BlackholeOutputStream(bh);\n+        os = new ObjectOutputStream(bos);\n+    }\n+\n+    @TearDown\n+    public void tearDownStreams() throws IOException {\n+        os.close();\n+        bos.close();\n+    }\n+\n+    private static final class MyData implements Serializable {\n+        byte b;\n+        char c;\n+        short s;\n+        int i;\n+        float f;\n+        long l;\n+        double d;\n+\n+        public MyData(byte b, char c, short s, int i, float f, long l, double d) {\n+            this.b = b;\n+            this.c = c;\n+            this.s = s;\n+            this.i = i;\n+            this.f = f;\n+            this.l = l;\n+            this.d = d;\n+        }\n+    }\n+\n+    private record MyRecord(byte b,\n+                            char c,\n+                            short s,\n+                            int i,\n+                            float f,\n+                            long l,\n+                            double d) implements Serializable {\n+    }\n+\n+    @Benchmark\n+    public void serializeData(Log input) throws IOException {\n+        os.writeObject(input.myData);\n+    }\n+\n+    @Benchmark\n+    public void serializeRecord(Log input) throws IOException {\n+        os.writeObject(input.myRecord);\n+    }\n+\n+    public static final class BlackholeOutputStream extends OutputStream {\n+\n+        private final Blackhole bh;\n+\n+        public BlackholeOutputStream(Blackhole bh) {\n+            this.bh = bh;\n+        }\n+\n+        @Override\n+        public void write(int b) {\n+            bh.consume(b);\n+        }\n+\n+        @Override\n+        public void write(byte[] b) {\n+            bh.consume(b);\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+            bh.consume(b);\n+        }\n+    }\n+\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/PrimitiveFieldSerializationBenchmark.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}