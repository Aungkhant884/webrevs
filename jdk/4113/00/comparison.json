{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Optional;\n@@ -343,1 +344,13 @@\n-                getWMSetInsets(XAtom.get(ev.get_atom()));\n+                if (getMWMDecorTitleProperty().isPresent()) {\n+                    \/\/ Insets might have changed \"in-flight\" if that property\n+                    \/\/ is present, so we need to get the actual values of\n+                    \/\/ insets from the WM and propagate them through all the\n+                    \/\/ proper channels.\n+                    wm_set_insets = null;\n+                    Insets in = getWMSetInsets(XAtom.get(ev.get_atom()));\n+                    if (in != null && !in.equals(dimensions.getInsets())) {\n+                        handleCorrectInsets(in);\n+                    }\n+                } else {\n+                    getWMSetInsets(XAtom.get(ev.get_atom()));\n+                }\n@@ -1308,0 +1321,20 @@\n+\n+    public static final String MWM_DECOR_TITLE_PROPERTY_NAME = \"xawt.mwm_decor_title\";\n+\n+    public final Optional<Boolean> getMWMDecorTitleProperty() {\n+        Optional<Boolean> res = Optional.empty();\n+\n+        if (target instanceof javax.swing.RootPaneContainer) {\n+            javax.swing.JRootPane rootpane = ((javax.swing.RootPaneContainer) target).getRootPane();\n+            Object prop = rootpane.getClientProperty(MWM_DECOR_TITLE_PROPERTY_NAME);\n+            if (prop != null) {\n+                res = Optional.of(Boolean.parseBoolean(prop.toString()));\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+    public final boolean getWindowTitleVisible() {\n+        return getMWMDecorTitleProperty().orElse(true);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDecoratedPeer.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -69,5 +69,1 @@\n-        if (winAttr.nativeDecor) {\n-            winAttr.decorations = XWindowAttributesData.AWT_DECOR_ALL;\n-        } else {\n-            winAttr.decorations = XWindowAttributesData.AWT_DECOR_NONE;\n-        }\n+        winAttr.decorations = getWindowDecorationBits();\n@@ -83,0 +79,32 @@\n+\n+        registerWindowDecorationChangeListener();\n+    }\n+\n+    private void registerWindowDecorationChangeListener() {\n+        if (target instanceof javax.swing.RootPaneContainer) {\n+            javax.swing.JRootPane rootpane = ((javax.swing.RootPaneContainer) target).getRootPane();\n+            rootpane.addPropertyChangeListener(MWM_DECOR_TITLE_PROPERTY_NAME, e -> winAttr.decorations = getWindowDecorationBits() );\n+        }\n+    }\n+\n+    private int getWindowDecorationBits() {\n+        int decorations = XWindowAttributesData.AWT_DECOR_NONE;\n+        final Frame target = (Frame)(this.target);\n+        final boolean useNativeDecor = !target.isUndecorated();\n+        if (useNativeDecor) {\n+            decorations = XWindowAttributesData.AWT_DECOR_ALL;\n+\n+            if (!getWindowTitleVisible()) {\n+                \/\/ NB: the window must be [re-]mapped to make this change effective. Also, window insets will probably\n+                \/\/ change and that'll be caught by one of the subsequent property change events in XDecoratedPeer\n+                \/\/ (not necessarily the very next event, though).\n+                decorations = XWindowAttributesData.AWT_DECOR_BORDER;\n+            }\n+\n+            if (log.isLoggable(PlatformLogger.Level.FINE)) {\n+                log.fine(\"Frame''s initial decorations affected by the client property {0}={1}\",\n+                         MWM_DECOR_TITLE_PROPERTY_NAME, getMWMDecorTitleProperty());\n+            }\n+        }\n+\n+        return decorations;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XFramePeer.java","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @summary Verifies the client property xawt.mwm_decor_title for Linux.\n+ *          Note: the test requires GNOME Shell window manager and will automatically\n+ *          pass with any other WM.\n+ * @requires (os.family == \"linux\")\n+ * @run main WindowTitleVisibleTestLinuxGnome\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.*;\n+import java.nio.charset.StandardCharsets;\n+import java.io.File;\n+import javax.imageio.*;\n+\n+public class WindowTitleVisibleTestLinuxGnome\n+{\n+    private static WindowTitleVisibleTestLinuxGnome theTest;\n+\n+    private Robot robot;\n+\n+    private JFrame frame;\n+    private JRootPane rootPane;\n+\n+    private Rectangle titleBarBounds;\n+    private BufferedImage titleBarImageVisible;\n+    private BufferedImage titleBarImageNotVisible;\n+\n+    private int DELAY = 1000;\n+\n+    public WindowTitleVisibleTestLinuxGnome() {\n+        try {\n+            robot = new Robot();\n+        } catch (AWTException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    public void performTest() {\n+        constructAndShowFrame();\n+\n+        robot.delay(DELAY);\n+\n+        Insets insets = frame.getInsets();\n+        Rectangle bounds = frame.getBounds();\n+        titleBarBounds = new Rectangle(bounds.x, bounds.y, bounds.width, insets.top);\n+        captureTitleBarVisible();\n+\n+        robot.delay(DELAY);\n+\n+        hideTitleBar();\n+\n+        robot.delay(DELAY);\n+\n+        captureTitleBarNotVisible();\n+\n+        if (imagesEqual(titleBarImageVisible, titleBarImageNotVisible)) {\n+            throw new RuntimeException(\"Test failed: title bars shown and hidden are the same.\");\n+        }\n+\n+        runSwing(() -> frame.dispose());\n+\n+        frame = null;\n+        rootPane = null;\n+    }\n+\n+    private static boolean imagesEqual(BufferedImage img1, BufferedImage img2) {\n+        for (int px = 0; px < img1.getWidth(); px++) {\n+            for (int py = 0; py < img1.getHeight(); py++) {\n+                int rgb1 = img1.getRGB(px, py);\n+                int rgb2 = img2.getRGB(px, py);\n+                if (rgb1 != rgb2) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private void captureTitleBarNotVisible() {\n+        runSwing( () -> {\n+            titleBarImageNotVisible = robot.createScreenCapture(titleBarBounds);\n+        });\n+    }\n+\n+    private void hideTitleBar() {\n+        runSwing( () -> {\n+            rootPane.putClientProperty(\"xawt.mwm_decor_title\", false);\n+            frame.setVisible(false);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    private void captureTitleBarVisible() {\n+        runSwing( () -> {\n+            titleBarImageVisible = robot.createScreenCapture(titleBarBounds);\n+        });\n+    }\n+\n+    private void constructAndShowFrame() {\n+        runSwing(() -> {\n+            frame = new JFrame(\"IIIIIIIIIIIIIIII\");\n+            frame.setBounds(100, 100, 300, 150);\n+            rootPane = frame.getRootPane();\n+            rootPane.putClientProperty(\"xawt.mwm_decor_title\", true);\n+            JComponent contentPane = (JComponent) frame.getContentPane();\n+            JPanel comp = new JPanel();\n+            contentPane.add(comp);\n+            comp.setBackground(Color.RED);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    public void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static void runSwing(Runnable r) {\n+        try {\n+            SwingUtilities.invokeAndWait(r);\n+        } catch (InterruptedException e) {\n+        } catch (InvocationTargetException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static String getWindowManagerID() {\n+        String WMID = null;\n+        try {\n+            Process p = new ProcessBuilder(\"xprop\", \"-root\", \"_NET_SUPPORTING_WM_CHECK\").start();\n+            System.out.println( new String(p.getErrorStream().readAllBytes(), StandardCharsets.UTF_8) );\n+            String stdout = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            final String windowID = stdout.substring(stdout.lastIndexOf(\" \")).strip();\n+\n+            p = new ProcessBuilder(\"xprop\", \"-id\", windowID, \"_NET_WM_NAME\").start();\n+            System.out.println( new String(p.getErrorStream().readAllBytes(), StandardCharsets.UTF_8) );\n+            stdout = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            WMID = stdout.substring(stdout.lastIndexOf(\"=\")).strip();\n+            System.out.println(\"WM name: \" + WMID);\n+        }\n+        catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+        return WMID;\n+    }\n+\n+    public static void main(String[] args) {\n+        final String WMID = getWindowManagerID();\n+        if (WMID == null) {\n+            System.out.println(\"Failed to determine Window Manager. The test will not run and is considered passed.\");\n+            return;\n+        } else if (!WMID.toLowerCase().contains(\"gnome\")) {\n+            System.out.println(\"Window Manager \" + WMID + \" is not supported, only GNOME is. The test will not run and is considered passed.\");\n+            return;\n+        }\n+\n+        try {\n+            runSwing(() -> theTest = new WindowTitleVisibleTestLinuxGnome());\n+            theTest.performTest();\n+        } finally {\n+            if (theTest != null) {\n+                runSwing(() -> theTest.dispose());\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Window\/WindowTitleVisibleTest\/WindowTitleVisibleTestLinuxGnome.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"}]}