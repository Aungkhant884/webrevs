{"files":[{"patch":"@@ -267,1 +267,1 @@\n-      (intptr_t)CompressedOops::encode_not_null(*o));\n+      UseCompressedOops ? (intptr_t)CompressedOops::encode_not_null(*o) : (intptr_t)((void*)(*o)));\n@@ -309,3 +309,9 @@\n-  narrowOop o = CompressedOops::narrow_oop_cast(nextPtr());\n-  if (CompressedOops::is_null(o) || !HeapShared::is_fully_available()) {\n-    *p = NULL;\n+  if (UseCompressedOops) {\n+    narrowOop o = CompressedOops::narrow_oop_cast(nextPtr());\n+    if (CompressedOops::is_null(o) || !HeapShared::is_fully_available()) {\n+      *p = NULL;\n+    } else {\n+      assert(HeapShared::can_use(), \"sanity\");\n+      assert(HeapShared::is_fully_available(), \"must be\");\n+      *p = HeapShared::decode_from_archive(o);\n+    }\n@@ -313,3 +319,7 @@\n-    assert(HeapShared::can_use(), \"sanity\");\n-    assert(HeapShared::is_fully_available(), \"must be\");\n-    *p = HeapShared::decode_from_archive(o);\n+    intptr_t dumptime_oop = nextPtr();\n+    if (dumptime_oop == 0 || !HeapShared::is_fully_available()) {\n+      *p = NULL;\n+    } else {\n+      intptr_t runtime_oop = dumptime_oop + HeapShared::runtime_delta();\n+      *p = cast_to_oop(runtime_oop);\n+    }\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -248,2 +248,7 @@\n-    _heap_begin = CompressedOops::begin();\n-    _heap_end = CompressedOops::end();\n+    if (UseCompressedOops) {\n+      _heap_begin = CompressedOops::begin();\n+      _heap_end = CompressedOops::end();\n+    } else {\n+      _heap_begin = (address)G1CollectedHeap::heap()->reserved().start();\n+      _heap_end = (address)G1CollectedHeap::heap()->reserved().end();\n+    }\n@@ -319,0 +324,1 @@\n+  st->print_cr(\"- heap_begin:                     \" INTPTR_FORMAT, p2i(_heap_begin));\n@@ -1494,1 +1500,5 @@\n-    mapping_offset = (size_t)CompressedOops::encode_not_null(cast_to_oop(base));\n+    if (UseCompressedOops) {\n+      mapping_offset = (size_t)CompressedOops::encode_not_null(cast_to_oop(base));\n+    } else {\n+      mapping_offset = requested_base - (char*)G1CollectedHeap::heap()->reserved().start();\n+    }\n@@ -2016,1 +2026,4 @@\n-                p2i(CompressedOops::begin()), p2i(CompressedOops::end()));\n+                UseCompressedOops ? p2i(CompressedOops::begin()) :\n+                                    UseG1GC ? p2i((address)G1CollectedHeap::heap()->reserved().start()) : 0L,\n+                UseCompressedOops ? p2i(CompressedOops::end()) :\n+                                    UseG1GC ? p2i((address)G1CollectedHeap::heap()->reserved().end()) : 0L);\n@@ -2026,0 +2039,22 @@\n+\/\/ The address where the bottom of this shared heap region should be mapped\n+\/\/ at runtime\n+address FileMapInfo::heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) {\n+  assert(UseSharedSpaces, \"runtime only\");\n+  spc->assert_is_heap_region();\n+  if (UseCompressedOops) {\n+    return start_address_as_decoded_from_archive(spc);\n+  } else {\n+    assert(is_aligned(spc->mapping_offset(), sizeof(HeapWord)), \"must be\");\n+    return header()->heap_begin() + spc->mapping_offset() + delta;\n+  }\n+}\n+\n+void FileMapInfo::set_shared_heap_runtime_delta(ptrdiff_t delta) {\n+  if (UseCompressedOops) {\n+    HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+  } else {\n+    if (delta != 0) {\n+      HeapShared::set_runtime_delta(delta);\n+    }\n+  }\n+}\n@@ -2048,9 +2083,23 @@\n-    MemRegion range = get_heap_regions_range_with_current_oop_encoding_mode();\n-    if (!CompressedOops::is_in(range)) {\n-      log_info(cds)(\"CDS heap data needs to be relocated because\");\n-      log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(range.start()), p2i(range.end()));\n-      log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(CompressedOops::begin()), p2i(CompressedOops::end()));\n-      _heap_pointers_need_patching = true;\n-    } else if (header()->heap_end() != CompressedOops::end()) {\n-      log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n-      _heap_pointers_need_patching = true;\n+    if (UseCompressedOops) {\n+      MemRegion range = get_heap_regions_range_with_current_oop_encoding_mode();\n+      if (!CompressedOops::is_in(range)) {\n+        log_info(cds)(\"CDS heap data needs to be relocated because\");\n+        log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(range.start()), p2i(range.end()));\n+        log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(CompressedOops::begin()), p2i(CompressedOops::end()));\n+        _heap_pointers_need_patching = true;\n+      } else if (header()->heap_end() != CompressedOops::end()) {\n+        log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n+        _heap_pointers_need_patching = true;\n+      }\n+    } else {\n+      MemRegion range((HeapWord*)header()->heap_begin(), (HeapWord*)header()->heap_end());\n+      if (!G1CollectedHeap::heap()->reserved().contains(range)) {\n+        log_info(cds)(\"CDS heap data needs to be relocated because\");\n+        log_info(cds)(\"the desired range \" PTR_FORMAT \" - \"  PTR_FORMAT, p2i(range.start()), p2i(range.end()));\n+        log_info(cds)(\"is outside of the heap \" PTR_FORMAT \" - \"  PTR_FORMAT,\n+            p2i((address)G1CollectedHeap::heap()->reserved().start()), p2i((address)G1CollectedHeap::heap()->reserved().end()));\n+        _heap_pointers_need_patching = true;\n+      } else if (header()->heap_end() != (address)G1CollectedHeap::heap()->reserved().end()) {\n+        log_info(cds)(\"CDS heap data needs to be relocated to the end of the runtime heap to reduce fragmentation\");\n+        _heap_pointers_need_patching = true;\n+      }\n@@ -2063,1 +2112,1 @@\n-    \/\/   [      |archived heap regions| ]         runtime heap end ------v\n+    \/\/   [      |archived heap regions| ]         run time heap end -----v\n@@ -2065,0 +2114,3 @@\n+    \/\/          ^\n+    \/\/          D                                ^\n+    \/\/                                           R\n@@ -2068,2 +2120,2 @@\n-    \/\/ At run time, they may not be inside the heap, so we move them so\n-    \/\/ that they are now near the top of the runtime time. This can be done by\n+    \/\/ At run time, if the heap ends at a different address, we need to\n+    \/\/ move them near to top of the run time heap. This can be done by\n@@ -2071,0 +2123,7 @@\n+    \/\/\n+    \/\/ Also: D = bottom of a heap region at dump time\n+    \/\/       R = bottom of a heap region at run time\n+    \/\/\n+    \/\/ FileMapRegion* spc = ...;\n+    \/\/   address D = header()->heap_begin() + spc->mapping_offset();\n+    \/\/   address R = D + delta;\n@@ -2072,1 +2131,2 @@\n-    address runtime_heap_end = CompressedOops::end();\n+    address runtime_heap_end = UseCompressedOops ? CompressedOops::end() :\n+                                                   (address)G1CollectedHeap::heap()->reserved().end();\n@@ -2077,1 +2137,4 @@\n-  HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+  if (UseCompressedOops) {\n+    \/\/ Need to set it for the heap_region_runtime_start_address() call below.\n+    HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+  }\n@@ -2080,1 +2143,2 @@\n-  address relocated_closed_heap_region_bottom = start_address_as_decoded_from_archive(si);\n+  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n+\n@@ -2091,1 +2155,2 @@\n-    HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+    set_shared_heap_runtime_delta(delta);\n+    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n@@ -2093,1 +2158,0 @@\n-    relocated_closed_heap_region_bottom = start_address_as_decoded_from_archive(si);\n@@ -2151,1 +2215,6 @@\n-      HeapWord* start = (HeapWord*)start_address_as_decoded_from_archive(si);\n+      HeapWord* start;\n+      if (UseCompressedOops) {\n+        start = (HeapWord*)start_address_as_decoded_from_archive(si);\n+      } else {\n+        start = (HeapWord*)heap_region_runtime_start_address(si, HeapShared::runtime_delta());\n+      }\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":91,"deletions":22,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -354,2 +354,0 @@\n-  FileMapHeader *header() const       { return _header; }\n-\n@@ -357,0 +355,1 @@\n+  FileMapHeader *header() const       { return _header; }\n@@ -571,0 +570,2 @@\n+  address heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  void set_shared_heap_runtime_delta(ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+\/\/ Support for loaded heap.\n@@ -91,0 +92,4 @@\n+\n+\/\/ Suport for mapped heap (!UseCompressedOops only)\n+ptrdiff_t HeapShared::_runtime_delta = 0;\n+\n@@ -365,1 +370,4 @@\n-                  p2i(CompressedOops::begin()), p2i(CompressedOops::end()));\n+                   UseCompressedOops ? p2i(CompressedOops::begin()) :\n+                                       p2i((address)G1CollectedHeap::heap()->reserved().start()),\n+                   UseCompressedOops ? p2i(CompressedOops::end()) :\n+                                       p2i((address)G1CollectedHeap::heap()->reserved().end()));\n@@ -661,1 +669,0 @@\n-\n@@ -1403,1 +1410,1 @@\n-  narrowOop* _start;\n+  void* _start;\n@@ -1408,1 +1415,1 @@\n-  FindEmbeddedNonNullPointers(narrowOop* start, BitMap* oopmap)\n+  FindEmbeddedNonNullPointers(void* start, BitMap* oopmap)\n@@ -1415,1 +1422,1 @@\n-      size_t idx = p - _start;\n+      size_t idx = p - (narrowOop*)_start;\n@@ -1421,2 +1428,8 @@\n-  virtual void do_oop(oop *p) {\n-    ShouldNotReachHere();\n+  virtual void do_oop(oop* p) {\n+    _num_total_oops ++;\n+    if ((*p) != NULL) {\n+      size_t idx = p - (oop*)_start;\n+      _oopmap->set_bit(idx);\n+    } else {\n+      _num_null_oops ++;\n+    }\n@@ -1429,2 +1442,1 @@\n-  assert(UseCompressedOops, \"must be\");\n-  size_t num_bits = region.byte_size() \/ sizeof(narrowOop);\n+  size_t num_bits = region.byte_size() \/ (UseCompressedOops ? sizeof(narrowOop) : sizeof(oop));\n@@ -1435,1 +1447,1 @@\n-  FindEmbeddedNonNullPointers finder((narrowOop*)p, &oopmap);\n+  FindEmbeddedNonNullPointers finder((void*)p, &oopmap);\n@@ -1456,1 +1468,1 @@\n-class PatchEmbeddedPointers: public BitMapClosure {\n+class PatchCompressedEmbeddedPointers: public BitMapClosure {\n@@ -1460,1 +1472,1 @@\n-  PatchEmbeddedPointers(narrowOop* start) : _start(start) {}\n+  PatchCompressedEmbeddedPointers(narrowOop* start) : _start(start) {}\n@@ -1472,0 +1484,16 @@\n+class PatchUncompressedEmbeddedPointers: public BitMapClosure {\n+  oop* _start;\n+\n+ public:\n+  PatchUncompressedEmbeddedPointers(oop* start) : _start(start) {}\n+\n+  bool do_bit(size_t offset) {\n+    oop* p = _start + offset;\n+    intptr_t dumptime_oop = (intptr_t)((void*)*p);\n+    assert(dumptime_oop != 0, \"null oops should have been filtered out at dump time\");\n+    intptr_t runtime_oop = dumptime_oop + HeapShared::runtime_delta();\n+    RawAccess<IS_NOT_NULL>::oop_store(p, cast_to_oop(runtime_oop));\n+    return true;\n+  }\n+};\n+\n@@ -1484,2 +1512,7 @@\n-  PatchEmbeddedPointers patcher((narrowOop*)region.start());\n-  bm.iterate(&patcher);\n+  if (UseCompressedOops) {\n+    PatchCompressedEmbeddedPointers patcher((narrowOop*)region.start());\n+    bm.iterate(&patcher);\n+  } else {\n+    PatchUncompressedEmbeddedPointers patcher((oop*)region.start());\n+    bm.iterate(&patcher);\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":47,"deletions":14,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-      return (UseG1GC && UseCompressedOops && UseCompressedClassPointers);\n+      return (UseG1GC && UseCompressedClassPointers);\n@@ -172,1 +172,1 @@\n-    CDS_JAVA_HEAP_ONLY(return (UseG1GC && UseCompressedOops && UseCompressedClassPointers);)\n+    CDS_JAVA_HEAP_ONLY(return (UseG1GC && UseCompressedClassPointers);)\n@@ -300,1 +300,1 @@\n-  \/\/ Used by decode_from_archive\n+  \/\/ UseCompressedOops only: Used by decode_from_archive\n@@ -304,0 +304,3 @@\n+  \/\/ !UseCompressedOops only: used to relocate pointers to the archived objects\n+  static ptrdiff_t _runtime_delta;\n+\n@@ -421,0 +424,6 @@\n+\n+  static void set_runtime_delta(ptrdiff_t delta) {\n+    assert(!UseCompressedOops, \"must be\");\n+    _runtime_delta = delta;\n+  }\n+\n@@ -424,0 +433,6 @@\n+  static ptrdiff_t runtime_delta() {\n+    assert(!UseCompressedOops, \"must be\");\n+    CDS_JAVA_HEAP_ONLY(return _runtime_delta;)\n+    NOT_CDS_JAVA_HEAP_RETURN_(0L);\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -710,0 +711,24 @@\n+#if INCLUDE_CDS_JAVA_HEAP && defined(_LP64)\n+void MetaspaceShared::adjust_heap_sizes_for_dumping() {\n+  if (!DumpSharedSpaces || UseCompressedOops) {\n+    return;\n+  }\n+  \/\/ CDS heap dumping requires all string oops to have an offset\n+  \/\/ from the heap bottom that can be encoded in 32-bit.\n+  julong max_heap_size = (julong)(4 * G);\n+\n+  if (MinHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MinHeapSize\/M);\n+    FLAG_SET_ERGO(MinHeapSize, max_heap_size);\n+  }\n+  if (InitialHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", InitialHeapSize\/M);\n+    FLAG_SET_ERGO(InitialHeapSize, max_heap_size);\n+  }\n+  if (MaxHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+    FLAG_SET_ERGO(MaxHeapSize, max_heap_size);\n+  }\n+}\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP && _LP64\n+\n@@ -835,5 +860,4 @@\n-      \"Archived java heap is not supported as UseG1GC, \"\n-      \"UseCompressedOops and UseCompressedClassPointers are required.\"\n-      \"Current settings: UseG1GC=%s, UseCompressedOops=%s, UseCompressedClassPointers=%s.\",\n-      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedOops),\n-      BOOL_TO_STR(UseCompressedClassPointers));\n+      \"Archived java heap is not supported as UseG1GC \"\n+      \"and UseCompressedClassPointers are required.\"\n+      \"Current settings: UseG1GC=%s, UseCompressedClassPointers=%s.\",\n+      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedClassPointers));\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+#ifdef _LP64\n+  static void adjust_heap_sizes_for_dumping() NOT_CDS_JAVA_HEAP_RETURN;\n+#endif\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/filemap.hpp\"\n@@ -58,0 +59,3 @@\n+#if INCLUDE_G1GC\n+#include \"gc\/g1\/g1CollectedHeap.hpp\"\n+#endif\n@@ -70,3 +74,12 @@\n-  assert(sizeof(narrowOop) == sizeof(offset), \"must be\");\n-  narrowOop v = CompressedOops::narrow_oop_cast(offset);\n-  return HeapShared::decode_from_archive(v);\n+  if (UseCompressedOops) {\n+    assert(sizeof(narrowOop) == sizeof(offset), \"must be\");\n+    narrowOop v = CompressedOops::narrow_oop_cast(offset);\n+    return HeapShared::decode_from_archive(v);\n+  } else {\n+    intptr_t dumptime_oop = (uintptr_t)offset;\n+    assert(dumptime_oop != 0, \"null strings cannot be interned\");\n+    intptr_t runtime_oop = dumptime_oop +\n+                           (intptr_t)FileMapInfo::current_info()->header()->heap_begin() +\n+                           (intptr_t)HeapShared::runtime_delta();\n+    return (oop)cast_to_oop(runtime_oop);\n+  }\n@@ -749,0 +762,10 @@\n+private:\n+  u4 compute_delta(oop s) {\n+    HeapWord* start = G1CollectedHeap::heap()->reserved().start();\n+    intx offset = ((address)(void*)s) - ((address)(void*)start);\n+    assert(offset >= 0, \"must be\");\n+    if (offset > 0xffffffff) {\n+      fatal(\"too large\");\n+    }\n+    return (u4)offset;\n+  }\n@@ -760,1 +783,5 @@\n-    _writer->add(hash, CompressedOops::narrow_oop_value(new_s));\n+    if (UseCompressedOops) {\n+      _writer->add(hash, CompressedOops::narrow_oop_value(new_s));\n+    } else {\n+      _writer->add(hash, compute_delta(new_s));\n+    }\n@@ -774,1 +801,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  virtual bool can_load_archived_objects() const { return true; }\n+  virtual bool can_load_archived_objects() const { return UseCompressedOops; }\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  bool can_load_archived_objects() const { return true; }\n+  bool can_load_archived_objects() const { return UseCompressedOops; }\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -751,0 +751,4 @@\n+#ifdef _LP64\n+  MetaspaceShared::adjust_heap_sizes_for_dumping();\n+#endif \/\/ _LP64\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+hotspot_runtime_no_cds = \\\n+  runtime \\\n+  -runtime\/cds\n+\n@@ -387,0 +391,2 @@\n+hotspot_cds_only = \\\n+  runtime\/cds\/\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        boolean useCompressedOops = wb.getBooleanVMFlag(\"UseCompressedOops\");\n@@ -74,1 +76,1 @@\n-                if (runSize < 32768) {\n+                if (runSize < 32768 || !useCompressedOops) {\n@@ -91,1 +93,1 @@\n-        long default_base = WhiteBox.getWhiteBox().getSizeTVMFlag(\"HeapBaseMinAddress\").longValue();\n+        long default_base = wb.getSizeTVMFlag(\"HeapBaseMinAddress\").longValue();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/DifferentHeapSizes.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}