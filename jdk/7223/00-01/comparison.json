{"files":[{"patch":"@@ -2039,0 +2039,22 @@\n+\/\/ The address where the bottom of this shared heap region should be mapped\n+\/\/ at runtime\n+address FileMapInfo::heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) {\n+  assert(UseSharedSpaces, \"runtime only\");\n+  spc->assert_is_heap_region();\n+  if (UseCompressedOops) {\n+    return start_address_as_decoded_from_archive(spc);\n+  } else {\n+    assert(is_aligned(spc->mapping_offset(), sizeof(HeapWord)), \"must be\");\n+    return header()->heap_begin() + spc->mapping_offset() + delta;\n+  }\n+}\n+\n+void FileMapInfo::set_shared_heap_runtime_delta(ptrdiff_t delta) {\n+  if (UseCompressedOops) {\n+    HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n+  } else {\n+    if (delta != 0) {\n+      HeapShared::set_runtime_delta(delta);\n+    }\n+  }\n+}\n@@ -2116,1 +2138,1 @@\n-    \/\/ Need to set it for the start_address_as_decoded_from_archive() call below.\n+    \/\/ Need to set it for the heap_region_runtime_start_address() call below.\n@@ -2121,6 +2143,2 @@\n-  address relocated_closed_heap_region_bottom;\n-  if (UseCompressedOops) {\n-    relocated_closed_heap_region_bottom = start_address_as_decoded_from_archive(si);\n-  } else {\n-    relocated_closed_heap_region_bottom = header()->heap_begin() + si->mapping_offset() + delta;\n-  }\n+  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n+\n@@ -2137,6 +2155,2 @@\n-    if (UseCompressedOops) {\n-      HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n-      relocated_closed_heap_region_bottom = start_address_as_decoded_from_archive(si);\n-    } else {\n-      relocated_closed_heap_region_bottom = si->mapping_offset() + header()->heap_begin() + delta;\n-    }\n+    set_shared_heap_runtime_delta(delta);\n+    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n@@ -2148,4 +2162,0 @@\n-  if (!UseCompressedOops && delta != 0) {\n-    HeapShared::set_runtime_delta(delta);\n-  }\n-\n@@ -2209,2 +2219,1 @@\n-        assert(is_aligned(si->mapping_offset(), sizeof(HeapWord)), \"must be\");\n-        start = (HeapWord*)(header()->heap_begin() + si->mapping_offset() + HeapShared::runtime_delta());\n+        start = (HeapWord*)heap_region_runtime_start_address(si, HeapShared::runtime_delta());\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -570,0 +570,2 @@\n+  address heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  void set_shared_heap_runtime_delta(ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-  static void set_runtime_delta(ptrdiff_t offset) {\n+  static void set_runtime_delta(ptrdiff_t delta) {\n@@ -427,1 +427,1 @@\n-    _runtime_delta = offset;\n+    _runtime_delta = delta;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -710,0 +711,24 @@\n+#if INCLUDE_CDS_JAVA_HEAP && defined(_LP64)\n+void MetaspaceShared::adjust_heap_sizes_for_dumping() {\n+  if (!DumpSharedSpaces || UseCompressedOops) {\n+    return;\n+  }\n+  \/\/ CDS heap dumping requires all string oops to have an offset\n+  \/\/ from the heap bottom that can be encoded in 32-bit.\n+  julong max_heap_size = (julong)(4 * G);\n+\n+  if (MinHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting MinHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MinHeapSize\/M);\n+    FLAG_SET_ERGO(MinHeapSize, max_heap_size);\n+  }\n+  if (InitialHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting InitialHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", InitialHeapSize\/M);\n+    FLAG_SET_ERGO(InitialHeapSize, max_heap_size);\n+  }\n+  if (MaxHeapSize > max_heap_size) {\n+    log_debug(cds)(\"Setting MaxHeapSize to 4G for CDS dumping, original size = \" SIZE_FORMAT \"M\", MaxHeapSize\/M);\n+    FLAG_SET_ERGO(MaxHeapSize, max_heap_size);\n+  }\n+}\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP && _LP64\n+\n@@ -835,5 +860,4 @@\n-      \"Archived java heap is not supported as UseG1GC, \"\n-      \"UseCompressedOops and UseCompressedClassPointers are required.\"\n-      \"Current settings: UseG1GC=%s, UseCompressedOops=%s, UseCompressedClassPointers=%s.\",\n-      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedOops),\n-      BOOL_TO_STR(UseCompressedClassPointers));\n+      \"Archived java heap is not supported as UseG1GC \"\n+      \"and UseCompressedClassPointers are required.\"\n+      \"Current settings: UseG1GC=%s, UseCompressedClassPointers=%s.\",\n+      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedClassPointers));\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+#ifdef _LP64\n+  static void adjust_heap_sizes_for_dumping() NOT_CDS_JAVA_HEAP_RETURN;\n+#endif\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -751,0 +751,4 @@\n+#ifdef _LP64\n+  MetaspaceShared::adjust_heap_sizes_for_dumping();\n+#endif \/\/ _LP64\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3452,5 +3452,0 @@\n-\n-  if (DumpSharedSpaces && !UseCompressedOops) {\n-    FLAG_SET_CMDLINE(MaxHeapSize, (size_t)4 * G);\n-    log_info(cds)(\"Dumping CDS archive with compressed oops disabled, setting MaxHeapSize to 4G\");\n-  }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @requires vm.opt.final.UseCompressedOops == true\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/HumongousDuringDump.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}