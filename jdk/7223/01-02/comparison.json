{"files":[{"patch":"@@ -2041,1 +2041,1 @@\n-address FileMapInfo::heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) {\n+address FileMapInfo::heap_region_runtime_start_address(FileMapRegion* spc) {\n@@ -2048,1 +2048,1 @@\n-    return header()->heap_begin() + spc->mapping_offset() + delta;\n+    return header()->heap_begin() + spc->mapping_offset() + HeapShared::runtime_delta();\n@@ -2056,3 +2056,1 @@\n-    if (delta != 0) {\n-      HeapShared::set_runtime_delta(delta);\n-    }\n+    HeapShared::set_runtime_delta(delta);\n@@ -2137,4 +2135,2 @@\n-  if (UseCompressedOops) {\n-    \/\/ Need to set it for the heap_region_runtime_start_address() call below.\n-    HeapShared::init_narrow_oop_decoding(narrow_oop_base() + delta, narrow_oop_shift());\n-  }\n+\n+  set_shared_heap_runtime_delta(delta);\n@@ -2143,1 +2139,1 @@\n-  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n+  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si);\n@@ -2156,1 +2152,1 @@\n-    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si, delta);\n+    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si);\n@@ -2215,6 +2211,1 @@\n-      HeapWord* start;\n-      if (UseCompressedOops) {\n-        start = (HeapWord*)start_address_as_decoded_from_archive(si);\n-      } else {\n-        start = (HeapWord*)heap_region_runtime_start_address(si, HeapShared::runtime_delta());\n-      }\n+      HeapWord* start = (HeapWord*)heap_region_runtime_start_address(si);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -570,1 +570,1 @@\n-  address heap_region_runtime_start_address(FileMapRegion* spc, ptrdiff_t delta) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n+  address heap_region_runtime_start_address(FileMapRegion* spc) NOT_CDS_JAVA_HEAP_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -414,0 +414,1 @@\n+ -runtime\/cds\/appcds\/DumpingWithNoCoops.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255495\n+ * @summary Test CDS with UseCompressedOops disable with various heap sizes.\n+ * @requires vm.cds.write.archived.java.heap\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver DumpingWithNoCoops\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DumpingWithNoCoops {\n+    static class HeapArgs {\n+        int initialSize, minSize, maxSize;\n+        HeapArgs(int initial, int min, int max) {\n+            initialSize = initial;\n+            minSize = min;\n+            maxSize = max;\n+        }\n+        String heapArgsString(HeapArgs ha) {\n+            String heapArgs = \"\";\n+            if (ha.initialSize > 0) {\n+                heapArgs += \"-XX:InitialHeapSize=\" + ha.initialSize + \"g\";\n+            }\n+            if (ha.minSize > 0) {\n+                if (heapArgs.length() > 0) {\n+                    heapArgs += \" \";\n+                }\n+                heapArgs += \"-XX:MinHeapSize=\" + ha.minSize + \"g\";\n+            }\n+            if (ha.maxSize > 0) {\n+                if (heapArgs.length() > 0) {\n+                    heapArgs += \" \";\n+                }\n+                heapArgs += \"-XX:MaxHeapSize=\" + ha.maxSize + \"g\";\n+            }\n+            return heapArgs;\n+        }\n+    }\n+\n+    static HeapArgs[] heapArgsCases = {\n+        \/\/ InitialHeapSize, MinHeapSize, MaxHeapSize\n+        \/\/ all sizes are in the unit of GB\n+        \/\/ size of 0 means don't set the heap size\n+        new HeapArgs( 0, 0, 0),\n+        new HeapArgs( 8, 0, 0),\n+        new HeapArgs( 0, 8, 0),\n+        new HeapArgs( 0, 0, 8),\n+        new HeapArgs( 8, 8, 0),\n+        new HeapArgs( 0, 8, 8),\n+        new HeapArgs( 8, 0, 8),\n+        new HeapArgs( 8, 8, 8),\n+        new HeapArgs( 2, 1, 33),\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        final String noCoops = \"-XX:-UseCompressedOops\";\n+        final String logArg = \"-Xlog:gc+heap=trace,cds=debug\";\n+        JarBuilder.getOrCreateHelloJar();\n+        String appJar = TestCommon.getTestJar(\"hello.jar\");\n+        String appClasses[] = TestCommon.list(\"Hello\");\n+\n+        for (HeapArgs ha : heapArgsCases) {\n+            String heapArg = ha.heapArgsString(ha);\n+            List<String> dumptimeArgs = new ArrayList<String>();\n+            \/\/ UseCompressedOops is ergonomically disabled for MaxHeapSize > 32g.\n+            if (ha.maxSize < 32) {\n+                dumptimeArgs.add(noCoops);\n+            }\n+            dumptimeArgs.add(logArg);\n+            OutputAnalyzer output;\n+            if (heapArg.length() == 0) {\n+                System.out.println(\"\\n    Test without heap args\\n\");\n+                output = TestCommon.dump(appJar, appClasses, dumptimeArgs.toArray(new String[0]));\n+            } else {\n+                System.out.println(\"\\n    Test with heap args: \" + heapArg + \"\\n\");\n+                String[] heapSizes = heapArg.split(\" \");\n+                for (String heapSize : heapSizes) {\n+                    dumptimeArgs.add(heapSize);\n+                }\n+                output = TestCommon.dump(appJar, appClasses, dumptimeArgs.toArray(new String[0]));\n+                output.shouldContain(\"Setting MaxHeapSize to 4G for CDS dumping\");\n+            }\n+            TestCommon.checkDump(output);\n+\n+            TestCommon.run(\"-cp\", appJar,\n+                        logArg, \"-Xlog:class+load\", noCoops, \"Hello\")\n+                .assertNormalExit(\"Hello source: shared objects file\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpingWithNoCoops.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}