{"files":[{"patch":"@@ -894,1 +894,1 @@\n-  bool has_ctrl( Node *n ) const { return ((intptr_t)_nodes[n->_idx]) & 1; }\n+  bool has_ctrl(const Node* n) const { return ((intptr_t)_nodes[n->_idx]) & 1; }\n@@ -971,1 +971,1 @@\n-  bool has_node( Node* n ) const {\n+  bool has_node(const Node* n) const {\n@@ -1002,2 +1002,1 @@\n-  Node *get_ctrl( Node *i ) {\n-\n+  Node* get_ctrl(const Node* i) {\n@@ -1023,1 +1022,1 @@\n-  Node *get_ctrl_no_update_helper(Node *i) const {\n+  Node* get_ctrl_no_update_helper(const Node* i) const {\n@@ -1028,1 +1027,1 @@\n-  Node *get_ctrl_no_update(Node *i) const {\n+  Node* get_ctrl_no_update(const Node* i) const {\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2351,0 +2351,17 @@\n+\/\/ The PacksetGraph combines the DepPreds graph with the packset. In the PackSet\n+\/\/ graph, we have two kinds of nodes:\n+\/\/  (1) pack-node:   Represents all nodes of some pack p in a single node, which\n+\/\/                   shall later become a vector node.\n+\/\/  (2) scalar-node: Represents a node that is not in any pack.\n+\/\/ For any edge (n1, n2) in DepPreds, we add an edge to the PacksetGraph for the\n+\/\/ PacksetGraph nodes corresponding to n1 and n2.\n+\/\/ We work from the DepPreds graph, because it gives us all the data-dependencies,\n+\/\/ as well as more refined memory-dependencies than the C2 graph. DepPreds does\n+\/\/ not have cycles. But packing nodes can introduce cyclic dependencies. Example:\n+\/\/\n+\/\/                                                       +--------+\n+\/\/  A -> X                                               |        v\n+\/\/                     Pack [A,B] and [X,Y]             [A,B]    [X,Y]\n+\/\/  Y -> B                                                 ^        |\n+\/\/                                                         +--------+\n+\/\/\n@@ -2354,3 +2371,3 @@\n-  GrowableArray<int> _pid; \/\/ Node.idx -> pid\n-  GrowableArray<int> _incnt;\n-  GrowableArray<GrowableArray<int>> _out;\n+  GrowableArray<int> _pid;                 \/\/ bb_idx(n) -> pid\n+  GrowableArray<GrowableArray<int>> _out;  \/\/ out-edges\n+  GrowableArray<int> _incnt;               \/\/ number of (implicit) in-edges\n@@ -2359,3 +2376,1 @@\n-  GrowableArray<Node*> &_block;\n-  GrowableArray<Node_List*> &_packset;\n-  DepGraph &_dg;\n+  SuperWord* _slp;\n@@ -2363,5 +2378,2 @@\n-  PacksetGraph(Arena* a,\n-                GrowableArray<Node*> &block,\n-                GrowableArray<Node_List*> &packset,\n-                DepGraph &dg)\n-  : _pid(a, 8, 0, \/* default *\/ 0), _block(block), _packset(packset), _dg(dg) {\n+  PacksetGraph(SuperWord* slp)\n+  : _pid(8, 0, \/* default *\/ 0), _slp(slp) {\n@@ -2371,1 +2383,5 @@\n-    if ((int)n->_idx >= _pid.length()) {\n+    if (!_slp->in_bb(n)) {\n+      return 0;\n+    }\n+    int idx = _slp->bb_idx(n);\n+    if (idx >= _pid.length()) {\n@@ -2374,1 +2390,1 @@\n-      return _pid.at(n->_idx);\n+      return _pid.at(idx);\n@@ -2384,1 +2400,3 @@\n-    _pid.at_put_grow(n->_idx, pid);\n+    assert(_slp->in_bb(n), \"must be\");\n+    int idx = _slp->bb_idx(n);\n+    _pid.at_put_grow(idx, pid);\n@@ -2397,0 +2415,3 @@\n+    const GrowableArray<Node_List*> &packset = _slp->packset();\n+    const GrowableArray<Node*> &block = _slp->block();\n+    const DepGraph &dg = _slp->dg();\n@@ -2398,2 +2419,2 @@\n-    for (int i = 0; i < _packset.length(); i++) {\n-      Node_List* p = _packset.at(i);\n+    for (int i = 0; i < packset.length(); i++) {\n+      Node_List* p = packset.at(i);\n@@ -2410,2 +2431,2 @@\n-    for (int i = 0; i < _block.length(); i++) {\n-      Node* n = _block.at(i);\n+    for (int i = 0; i < block.length(); i++) {\n+      Node* n = block.at(i);\n@@ -2424,2 +2445,2 @@\n-    for (int i = 0; i < _packset.length(); i++) {\n-      Node_List* p = _packset.at(i);\n+    for (int i = 0; i < packset.length(); i++) {\n+      Node_List* p = packset.at(i);\n@@ -2427,0 +2448,1 @@\n+      int pid = get_pid(p->at(0));\n@@ -2429,2 +2451,2 @@\n-        int pid = get_pid(n);\n-        for (DepPreds preds(n, _dg); !preds.done(); preds.next()) {\n+        assert(pid == get_pid(n), \"all nodes in pack have same pid\");\n+        for (DepPreds preds(n, dg); !preds.done(); preds.next()) {\n@@ -2436,1 +2458,1 @@\n-          \/\/ Only add edges once, and only for mapped nodes (in _block)\n+          \/\/ Only add edges once, and only for mapped nodes (in block)\n@@ -2446,4 +2468,4 @@\n-    for (int i = 0; i < _block.length(); i++) {\n-      Node* n = _block.at(i);\n-      int pid = get_pid_or_zero(n);\n-      if (pid == 0 || pid <= max_pid_packset) {\n+    for (int i = 0; i < block.length(); i++) {\n+      Node* n = block.at(i);\n+      int pid = get_pid_or_zero(n); \/\/ zero for Phi or CFG\n+      if (pid <= max_pid_packset) {\n@@ -2452,1 +2474,1 @@\n-      for (DepPreds preds(n, _dg); !preds.done(); preds.next()) {\n+      for (DepPreds preds(n, dg); !preds.done(); preds.next()) {\n@@ -2455,1 +2477,1 @@\n-        \/\/ Only add edges for mapped nodes (in _block)\n+        \/\/ Only add edges for mapped nodes (in block)\n@@ -2491,0 +2513,3 @@\n+  \/\/ Print the PacksetGraph.\n+  \/\/ print_nodes = true: print all C2 nodes beloning to PacksetGrahp node.\n+  \/\/ print_zero_incnt = false: do not print nodes that have no in-edges (any more).\n@@ -2492,0 +2517,1 @@\n+    const GrowableArray<Node*> &block = _slp->block();\n@@ -2504,2 +2530,2 @@\n-        for (int i = 0; i < _block.length(); i++) {\n-          Node* n = _block.at(i);\n+        for (int i = 0; i < block.length(); i++) {\n+          Node* n = block.at(i);\n@@ -2535,1 +2561,1 @@\n-  PacksetGraph graph(arena(), _block, _packset, _dg);\n+  PacksetGraph graph(this);\n@@ -5133,1 +5159,1 @@\n-DepPreds::DepPreds(Node* n, DepGraph& dg) {\n+DepPreds::DepPreds(Node* n, const DepGraph& dg) {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":59,"deletions":33,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-  DepMem* dep(Node* node) { return _map.at(node->_idx); }\n+  DepMem* dep(Node* node) const { return _map.at(node->_idx); }\n@@ -164,1 +164,1 @@\n-  DepPreds(Node* n, DepGraph& dg);\n+  DepPreds(Node* n, const DepGraph& dg);\n@@ -354,0 +354,4 @@\n+\n+  const GrowableArray<Node_List*>& packset() const { return _packset; }\n+  const GrowableArray<Node*>&      block()   const { return _block; }\n+  const DepGraph&                  dg()      const { return _dg; }\n@@ -417,1 +421,1 @@\n-  Node* ctrl(Node* n) const { return _phase->has_ctrl(n) ? _phase->get_ctrl(n) : n; }\n+  const Node* ctrl(const Node* n) const { return _phase->has_ctrl(n) ? _phase->get_ctrl(n) : n; }\n@@ -420,3 +424,5 @@\n-  bool in_bb(Node* n)      { return n != nullptr && n->outcnt() > 0 && ctrl(n) == _bb; }\n-  int  bb_idx(Node* n)     { assert(in_bb(n), \"must be\"); return _bb_idx.at(n->_idx); }\n-  void set_bb_idx(Node* n, int i) { _bb_idx.at_put_grow(n->_idx, i); }\n+ public:\n+  bool in_bb(const Node* n) const  { return n != nullptr && n->outcnt() > 0 && ctrl(n) == _bb; }\n+  int  bb_idx(const Node* n) const { assert(in_bb(n), \"must be\"); return _bb_idx.at(n->_idx); }\n+ private:\n+  void set_bb_idx(Node* n, int i)  { _bb_idx.at_put_grow(n->_idx, i); }\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}