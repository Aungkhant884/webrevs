{"files":[{"patch":"@@ -26,1 +26,2 @@\n-import jdk.internal.classfile.impl.BoundAttribute;\n+import jdk.internal.classfile.constantpool.ConstantPoolBuilder;\n+import jdk.internal.classfile.impl.*;\n@@ -72,3 +73,4 @@\n-            \/\/ need API to return unknown AnnotationValue's length\n-\/\/            testCase.checkEquals(((BoundAttribute<?>)attr).payloadLen(), 1 + attr.defaultValue().payloadLen(),\n-\/\/                    \"attribute_length\");\n+            BufWriter buf = new BufWriterImpl(ConstantPoolBuilder.of(), (ClassfileImpl) Classfile.of());\n+            attr.defaultValue().writeTo(buf);\n+            testCase.checkEquals(((BoundAttribute<?>)attr).payloadLen(), buf.size(),\n+                    \"attribute_length\");\n@@ -249,11 +251,1 @@\n-        @Override\n-        public void testLength(TestResult testCase, AnnotationDefaultAttribute attr) {\n-            AnnotationValue.OfArray ev =\n-                    (AnnotationValue.OfArray) attr.defaultValue();\n-            int sizeOfTag = ev.values().get(0).tag() == 'e' ? 0 : 1;\n-            \/\/ tag (1 byte) + array header (2 byte) + length of entries\n-            \/\/ need ev.length() api to check length\n-\/\/            testCase.checkEquals(((BoundAttribute<?>)attr).payloadLen(), 1 + 2 +\n-\/\/                    (sizeOfTag + ev.length() \/ ev.values().size()) * ev.values().size(), \"attribute_length\");\n-        }\n-\n+        \/\/ testLength method is the same as in TestElementValue class\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"}]}