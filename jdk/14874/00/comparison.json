{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -29,3 +31,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool.UnexpectedEntry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -329,2 +330,2 @@\n-         * @param Whether or not the annotation is visible at runtime.\n-         * @return Whether or not this template matches the visibility.\n+         * @param visibility Whether the annotation is visible at runtime.\n+         * @return Whether this template matches the visibility.\n@@ -343,3 +344,2 @@\n-        public void matchAnnotation(ConstantPool cpool,\n-                                    Annotation anno) {\n-            if (checkMatch(cpool, anno)) {\n+        public void matchAnnotation(Annotation anno) {\n+            if (checkMatch(anno)) {\n@@ -354,1 +354,0 @@\n-         * @param ConstantPool The constant pool to use.\n@@ -358,7 +357,2 @@\n-        protected boolean checkMatch(ConstantPool cpool,\n-                                     Annotation anno) {\n-            try {\n-                return cpool.getUTF8Info(anno.type_index).value.equals(\"L\" + expectedName + \";\");\n-            } catch (InvalidIndex | UnexpectedEntry e) {\n-                return false;\n-            }\n+        protected boolean checkMatch(Annotation anno) {\n+            return anno.classSymbol().descriptorString().equals(\"L\" + expectedName + \";\");\n@@ -535,1 +529,1 @@\n-        protected final TypeAnnotation.Position.TypePathEntry[] typePath;\n+        protected final List<TypeAnnotation.TypePathComponent> typePath;\n@@ -564,1 +558,1 @@\n-                                      TypeAnnotation.Position.TypePathEntry... typePath) {\n+                                      List<TypeAnnotation.TypePathComponent> typePath) {\n@@ -592,1 +586,1 @@\n-            for(int i = 0; i < typePath.length; i++) {\n+            for(int i = 0; i < typePath.size(); i++) {\n@@ -596,1 +590,1 @@\n-                sb.append(typePath[i]);\n+                sb.append(typePath.get(i));\n@@ -603,2 +597,1 @@\n-        public void matchAnnotation(ConstantPool cpool,\n-                                    Annotation anno) {}\n+        public void matchAnnotation(Annotation anno) {}\n@@ -613,8 +606,27 @@\n-            boolean matches = checkMatch(anno.constant_pool, anno.annotation);\n-\n-            matches = matches && anno.position.type == targetType;\n-            matches = matches && anno.position.bound_index == bound_index;\n-            matches = matches && anno.position.parameter_index == parameter_index;\n-            matches = matches && anno.position.type_index == type_index;\n-            matches = matches && anno.position.exception_index == exception_index;\n-            matches = matches && anno.position.location.size() == typePath.length;\n+            boolean matches = checkMatch((Annotation) anno);\n+            int boundIdx = Integer.MIN_VALUE, paraIdx = Integer.MIN_VALUE, tIdx = Integer.MIN_VALUE, exIdx = Integer.MIN_VALUE;\n+            switch (anno.targetInfo()) {\n+                case TypeAnnotation.TypeParameterBoundTarget binfo -> {\n+                    boundIdx = binfo.boundIndex();\n+                    paraIdx = binfo.typeParameterIndex();\n+                }\n+                case TypeAnnotation.FormalParameterTarget fpinfo -> {\n+                    paraIdx = fpinfo.formalParameterIndex();\n+                }\n+                case TypeAnnotation.TypeParameterTarget pinfo -> {\n+                    paraIdx = pinfo.typeParameterIndex();\n+                }\n+                case TypeAnnotation.TypeArgumentTarget ainfo -> {\n+                    tIdx = ainfo.typeArgumentIndex();\n+                }\n+                case TypeAnnotation.CatchTarget cinfo -> {\n+                    exIdx = cinfo.exceptionTableIndex();\n+                }\n+                default -> {}\n+            }\n+            matches = matches && anno.targetInfo().targetType() == targetType;\n+            matches = matches && boundIdx == bound_index;\n+            matches = matches && paraIdx == parameter_index;\n+            matches = matches && tIdx == type_index;\n+            matches = matches && exIdx == exception_index;\n+            matches = matches && anno.targetPath().size() == typePath.size();\n@@ -624,3 +636,3 @@\n-                for(TypeAnnotation.Position.TypePathEntry entry :\n-                         anno.position.location) {\n-                    matches = matches && typePath[i++].equals(entry);\n+                for(TypeAnnotation.TypePathComponent entry :\n+                        anno.targetPath()) {\n+                    matches = matches && typePath.get(i++).equals(entry);\n@@ -650,2 +662,2 @@\n-            protected TypeAnnotation.Position.TypePathEntry[] typePath =\n-                new TypeAnnotation.Position.TypePathEntry[0];\n+            protected List<TypeAnnotation.TypePathComponent> typePath =\n+                new ArrayList<TypeAnnotation.TypePathComponent>();\n@@ -699,1 +711,1 @@\n-             * @param bound_index The parameter_index value.\n+             * @param parameter_index The parameter_index value.\n@@ -731,1 +743,1 @@\n-            public Builder setTypePath(TypeAnnotation.Position.TypePathEntry[] typePath) {\n+            public Builder setTypePath(List<TypeAnnotation.TypePathComponent> typePath) {\n@@ -771,1 +783,1 @@\n-                                            TypeAnnotation.Position.TypePathEntry... typePath) {\n+                                            List<TypeAnnotation.TypePathComponent> typePath) {\n@@ -795,1 +807,1 @@\n-            for(int i = 0; i < typePath.length; i++) {\n+            for(int i = 0; i < typePath.size(); i++) {\n@@ -799,1 +811,1 @@\n-                sb.append(typePath[i]);\n+                sb.append(typePath.get(i));\n@@ -897,1 +909,1 @@\n-                                           TypeAnnotation.Position.TypePathEntry... typePath) {\n+                                           List<TypeAnnotation.TypePathComponent> typePath) {\n@@ -916,1 +928,1 @@\n-            for(int i = 0; i < typePath.length; i++) {\n+            for(int i = 0; i < typePath.size(); i++) {\n@@ -920,1 +932,1 @@\n-                sb.append(typePath[i]);\n+                sb.append(typePath.get(i));\n@@ -984,5 +996,4 @@\n-    private void matchClassAnnotation(ClassFile classfile,\n-                                      ExpectedAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Attribute attr : classfile.attributes) {\n-            attr.accept(annoMatcher(classfile.constant_pool), expected);\n+    private void matchClassAnnotation(ClassModel classfile,\n+                                      ExpectedAnnotation expected) {\n+        for(Attribute<?> attr : classfile.attributes()) {\n+            annoMatcher(attr, expected);\n@@ -992,7 +1003,6 @@\n-    private void matchMethodAnnotation(ClassFile classfile,\n-                                       ExpectedMethodAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Method meth : classfile.methods) {\n-            if (expected.matchMethodName(meth.getName(classfile.constant_pool))) {\n-                for(Attribute attr : meth.attributes) {\n-                    attr.accept(annoMatcher(classfile.constant_pool), expected);\n+    private void matchMethodAnnotation(ClassModel classfile,\n+                                       ExpectedMethodAnnotation expected) {\n+        for(MethodModel meth : classfile.methods()) {\n+            if (expected.matchMethodName(meth.methodName().stringValue())) {\n+                for(Attribute<?> attr : meth.attributes()) {\n+                    annoMatcher(attr, expected);\n@@ -1004,7 +1014,6 @@\n-    private void matchParameterAnnotation(ClassFile classfile,\n-                                          ExpectedParameterAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Method meth : classfile.methods) {\n-            if (expected.matchMethodName(meth.getName(classfile.constant_pool))) {\n-                for(Attribute attr : meth.attributes) {\n-                    attr.accept(paramMatcher(classfile.constant_pool), expected);\n+    private void matchParameterAnnotation(ClassModel classfile,\n+                                          ExpectedParameterAnnotation expected) {\n+        for(MethodModel meth : classfile.methods()) {\n+            if (expected.matchMethodName(meth.methodName().stringValue())) {\n+                for(Attribute<?> attr : meth.attributes()) {\n+                    paramMatcher(attr, expected);\n@@ -1016,7 +1025,6 @@\n-    private void matchFieldAnnotation(ClassFile classfile,\n-                                      ExpectedFieldAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Field field : classfile.fields) {\n-            if (expected.matchFieldName(field.getName(classfile.constant_pool))) {\n-                for(Attribute attr : field.attributes) {\n-                    attr.accept(annoMatcher(classfile.constant_pool), expected);\n+    private void matchFieldAnnotation(ClassModel classfile,\n+                                      ExpectedFieldAnnotation expected) {\n+        for(FieldModel field : classfile.fields()) {\n+            if (expected.matchFieldName(field.fieldName().stringValue())) {\n+                for(Attribute<?> attr : field.attributes()) {\n+                    annoMatcher(attr, expected);\n@@ -1028,5 +1036,4 @@\n-    private void matchClassTypeAnnotation(ClassFile classfile,\n-                                          ExpectedTypeAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Attribute attr : classfile.attributes) {\n-            attr.accept(typeAnnoMatcher, expected);\n+    private void matchClassTypeAnnotation(ClassModel classfile,\n+                                          ExpectedTypeAnnotation expected) {\n+        for(Attribute<?> attr : classfile.attributes()) {\n+            typeAnnoMatcher(attr, expected);\n@@ -1036,7 +1043,6 @@\n-    private void matchMethodTypeAnnotation(ClassFile classfile,\n-                                           ExpectedMethodTypeAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Method meth : classfile.methods) {\n-            if (expected.matchMethodName(meth.getName(classfile.constant_pool))) {\n-                for(Attribute attr : meth.attributes) {\n-                    attr.accept(typeAnnoMatcher, expected);\n+    private void matchMethodTypeAnnotation(ClassModel classfile,\n+                                           ExpectedMethodTypeAnnotation expected) {\n+        for(MethodModel meth : classfile.methods()) {\n+            if (expected.matchMethodName(meth.methodName().stringValue())) {\n+                for(Attribute<?> attr : meth.attributes()) {\n+                    typeAnnoMatcher(attr, expected);\n@@ -1048,7 +1054,6 @@\n-    private void matchFieldTypeAnnotation(ClassFile classfile,\n-                                          ExpectedFieldTypeAnnotation expected)\n-        throws ConstantPoolException {\n-        for(Field field : classfile.fields) {\n-            if (expected.matchFieldName(field.getName(classfile.constant_pool))) {\n-                for(Attribute attr : field.attributes) {\n-                    attr.accept(typeAnnoMatcher, expected);\n+    private void matchFieldTypeAnnotation(ClassModel classfile,\n+                                          ExpectedFieldTypeAnnotation expected) {\n+        for(FieldModel field : classfile.fields()) {\n+            if (expected.matchFieldName(field.fieldName().stringValue())) {\n+                for(Attribute<?> attr : field.attributes()) {\n+                    typeAnnoMatcher(attr, expected);\n@@ -1060,3 +1065,2 @@\n-    private void matchClassAnnotations(ClassFile classfile,\n-                                       ExpectedAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchClassAnnotations(ClassModel classfile,\n+                                       ExpectedAnnotation[] expected) {\n@@ -1068,3 +1072,2 @@\n-    private void matchMethodAnnotations(ClassFile classfile,\n-                                        ExpectedMethodAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchMethodAnnotations(ClassModel classfile,\n+                                        ExpectedMethodAnnotation[] expected) {\n@@ -1076,3 +1079,2 @@\n-    private void matchParameterAnnotations(ClassFile classfile,\n-                                           ExpectedParameterAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchParameterAnnotations(ClassModel classfile,\n+                                           ExpectedParameterAnnotation[] expected) {\n@@ -1084,3 +1086,2 @@\n-    private void matchFieldAnnotations(ClassFile classfile,\n-                                       ExpectedFieldAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchFieldAnnotations(ClassModel classfile,\n+                                       ExpectedFieldAnnotation[] expected) {\n@@ -1092,3 +1093,2 @@\n-    private void matchClassTypeAnnotations(ClassFile classfile,\n-                                           ExpectedTypeAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchClassTypeAnnotations(ClassModel classfile,\n+                                           ExpectedTypeAnnotation[] expected) {\n@@ -1100,3 +1100,2 @@\n-    private void matchMethodTypeAnnotations(ClassFile classfile,\n-                                            ExpectedMethodTypeAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchMethodTypeAnnotations(ClassModel classfile,\n+                                            ExpectedMethodTypeAnnotation[] expected) {\n@@ -1108,3 +1107,2 @@\n-    private void matchFieldTypeAnnotations(ClassFile classfile,\n-                                           ExpectedFieldTypeAnnotation[] expected)\n-        throws ConstantPoolException {\n+    private void matchFieldTypeAnnotations(ClassModel classfile,\n+                                           ExpectedFieldTypeAnnotation[] expected) {\n@@ -1117,1 +1115,1 @@\n-     * Run a template on a single {@code ClassFile}.\n+     * Run a template on a single {@code ClassModel}.\n@@ -1119,1 +1117,1 @@\n-     * @param classfile The {@code ClassFile} on which to run tests.\n+     * @param classfile The {@code ClassModel} on which to run tests.\n@@ -1122,4 +1120,3 @@\n-    public void run(ClassFile classfile,\n-                    Expected... expected)\n-            throws ConstantPoolException {\n-        run(new ClassFile[] { classfile }, expected);\n+    public void run(ClassModel classfile,\n+                    Expected... expected) {\n+        run(new ClassModel[] { classfile }, expected);\n@@ -1129,1 +1126,1 @@\n-     * Run a template on multiple {@code ClassFile}s.\n+     * Run a template on multiple {@code ClassModel}s.\n@@ -1131,1 +1128,1 @@\n-     * @param classfile The {@code ClassFile}s on which to run tests.\n+     * @param classfiles The {@code ClassModel}s on which to run tests.\n@@ -1134,4 +1131,3 @@\n-    public void run(ClassFile[] classfiles,\n-                    Expected... expected)\n-            throws ConstantPoolException {\n-        for(ClassFile classfile : classfiles) {\n+    public void run(ClassModel[] classfiles,\n+                    Expected... expected) {\n+        for(ClassModel classfile : classfiles) {\n@@ -1139,1 +1135,1 @@\n-                if (one.matchClassName(classfile.getName())) {\n+                if (one.matchClassName(classfile.thisClass().name().stringValue())) {\n@@ -1168,1 +1164,1 @@\n-     * Get a {@code ClassFile} from its file name.\n+     * Get a {@code ClassModel} from its file name.\n@@ -1172,1 +1168,1 @@\n-     * @return The {@code ClassFile}\n+     * @return The {@code ClassModel}\n@@ -1174,1 +1170,1 @@\n-    public static ClassFile getClassFile(String name,\n+    public static ClassModel getClassFile(String name,\n@@ -1176,1 +1172,1 @@\n-        throws IOException, ConstantPoolException {\n+        throws IOException {\n@@ -1178,0 +1174,1 @@\n+        assert url != null;\n@@ -1179,1 +1176,1 @@\n-            return ClassFile.read(in);\n+            return Classfile.of().parse(in.readAllBytes());\n@@ -1183,206 +1180,5 @@\n-    private static class AbstractAttributeVisitor<T> implements Attribute.Visitor<Void, T> {\n-\n-        @Override\n-        public Void visitDefault(DefaultAttribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitAnnotationDefault(AnnotationDefault_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitBootstrapMethods(BootstrapMethods_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitCharacterRangeTable(CharacterRangeTable_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitCode(Code_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitCompilationID(CompilationID_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitConstantValue(ConstantValue_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitDeprecated(Deprecated_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitEnclosingMethod(EnclosingMethod_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitExceptions(Exceptions_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitInnerClasses(InnerClasses_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLineNumberTable(LineNumberTable_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLocalVariableTable(LocalVariableTable_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitLocalVariableTypeTable(LocalVariableTypeTable_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-          public Void visitNestHost(NestHost_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitMethodParameters(MethodParameters_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModule(Module_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModuleHashes(ModuleHashes_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModuleMainClass(ModuleMainClass_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModulePackages(ModulePackages_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModuleResolution(ModuleResolution_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitModuleTarget(ModuleTarget_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitNestMembers(NestMembers_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeInvisibleAnnotations(RuntimeInvisibleAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeInvisibleParameterAnnotations(RuntimeInvisibleParameterAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeInvisibleTypeAnnotations(RuntimeInvisibleTypeAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeVisibleAnnotations(RuntimeVisibleAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeVisibleParameterAnnotations(RuntimeVisibleParameterAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRuntimeVisibleTypeAnnotations(RuntimeVisibleTypeAnnotations_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitSignature(Signature_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitSourceDebugExtension(SourceDebugExtension_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitSourceFile(SourceFile_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitSourceID(SourceID_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitStackMap(StackMap_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitStackMapTable(StackMapTable_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitSynthetic(Synthetic_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitPermittedSubclasses(PermittedSubclasses_attribute attr, T p) {\n-            return null;\n-        }\n-\n-        @Override\n-        public Void visitRecord(Record_attribute attr, T p) {\n-            return null;\n-        }\n-    }\n-\n-    private static final Attribute.Visitor<Void, ExpectedTypeAnnotation> typeAnnoMatcher\n-            = new AbstractAttributeVisitor<ExpectedTypeAnnotation>() {\n-\n-                @Override\n-                public Void visitRuntimeVisibleTypeAnnotations(RuntimeVisibleTypeAnnotations_attribute attr,\n-                        ExpectedTypeAnnotation expected) {\n-                    if (expected.matchVisibility(true)) {\n-                        for (TypeAnnotation anno : attr.annotations) {\n-                            expected.matchAnnotation(anno);\n-                        }\n-                    }\n-\n-                    return null;\n+    public void typeAnnoMatcher(Attribute<?> attr, ExpectedTypeAnnotation expected) {\n+        switch (attr) {\n+            case RuntimeVisibleTypeAnnotationsAttribute vattr -> {\n+                if (expected.matchVisibility(true)) {\n+                    for (TypeAnnotation anno : vattr.annotations()) expected.matchAnnotation(anno);\n@@ -1390,11 +1186,4 @@\n-\n-                @Override\n-                public Void visitRuntimeInvisibleTypeAnnotations(RuntimeInvisibleTypeAnnotations_attribute attr,\n-                        ExpectedTypeAnnotation expected) {\n-                    if (expected.matchVisibility(false)) {\n-                        for (TypeAnnotation anno : attr.annotations) {\n-                            expected.matchAnnotation(anno);\n-                        }\n-                    }\n-\n-                    return null;\n+            }\n+            case RuntimeInvisibleTypeAnnotationsAttribute ivattr -> {\n+                if (expected.matchVisibility(false)) {\n+                    ivattr.annotations().forEach(expected::matchAnnotation);\n@@ -1402,4 +1191,4 @@\n-            };\n-\n-    private static Attribute.Visitor<Void, ExpectedAnnotation> annoMatcher(ConstantPool cpool) {\n-        return new AbstractAttributeVisitor<ExpectedAnnotation>() {\n+            }\n+            default -> {}\n+        }\n+    };\n@@ -1407,3 +1196,3 @@\n-            @Override\n-            public Void visitRuntimeVisibleAnnotations(RuntimeVisibleAnnotations_attribute attr,\n-                                                       ExpectedAnnotation expected) {\n+    public void annoMatcher(Attribute<?> attr, ExpectedAnnotation expected) {\n+        switch (attr) {\n+            case RuntimeVisibleTypeAnnotationsAttribute rvattr -> {\n@@ -1411,2 +1200,2 @@\n-                    for(Annotation anno : attr.annotations) {\n-                        expected.matchAnnotation(cpool, anno);\n+                    for(Annotation anno : rvattr.annotations()) {\n+                        expected.matchAnnotation(anno);\n@@ -1415,2 +1204,0 @@\n-\n-                return null;\n@@ -1418,4 +1205,1 @@\n-\n-            @Override\n-            public Void visitRuntimeInvisibleAnnotations(RuntimeInvisibleAnnotations_attribute attr,\n-                                                         ExpectedAnnotation expected) {\n+            case RuntimeInvisibleAnnotationsAttribute rivattr -> {\n@@ -1423,2 +1207,2 @@\n-                    for(Annotation anno : attr.annotations) {\n-                        expected.matchAnnotation(cpool, anno);\n+                    for(Annotation anno : rivattr.annotations()) {\n+                        expected.matchAnnotation(anno);\n@@ -1427,2 +1211,0 @@\n-\n-                return null;\n@@ -1430,1 +1212,2 @@\n-        };\n+            default -> {}\n+        }\n@@ -1433,6 +1216,3 @@\n-    private static Attribute.Visitor<Void, ExpectedParameterAnnotation> paramMatcher(ConstantPool cpool) {\n-        return new AbstractAttributeVisitor<ExpectedParameterAnnotation>() {\n-\n-            @Override\n-            public Void visitRuntimeVisibleParameterAnnotations(RuntimeVisibleParameterAnnotations_attribute attr,\n-                                                                ExpectedParameterAnnotation expected) {\n+    private void paramMatcher(Attribute<?> attr, ExpectedParameterAnnotation expected) {\n+        switch (attr) {\n+            case RuntimeVisibleParameterAnnotationsAttribute vattr -> {\n@@ -1440,1 +1220,1 @@\n-                    if (expected.index < attr.parameter_annotations.length) {\n+                    if (expected.index < vattr.parameterAnnotations().size()) {\n@@ -1442,2 +1222,2 @@\n-                                attr.parameter_annotations[expected.index]) {\n-                            expected.matchAnnotation(cpool, anno);\n+                                vattr.parameterAnnotations().get(expected.index)) {\n+                            expected.matchAnnotation(anno);\n@@ -1447,2 +1227,0 @@\n-\n-                return null;\n@@ -1450,4 +1228,1 @@\n-\n-            @Override\n-            public Void visitRuntimeInvisibleParameterAnnotations(RuntimeInvisibleParameterAnnotations_attribute attr,\n-                                                                  ExpectedParameterAnnotation expected) {\n+            case RuntimeInvisibleParameterAnnotationsAttribute ivattr -> {\n@@ -1455,1 +1230,1 @@\n-                    if (expected.index < attr.parameter_annotations.length) {\n+                    if (expected.index < ivattr.parameterAnnotations().size()) {\n@@ -1457,2 +1232,2 @@\n-                                attr.parameter_annotations[expected.index]) {\n-                            expected.matchAnnotation(cpool, anno);\n+                                ivattr.parameterAnnotations().get(expected.index)) {\n+                            expected.matchAnnotation(anno);\n@@ -1462,2 +1237,0 @@\n-\n-                return null;\n@@ -1465,1 +1238,2 @@\n-        };\n+            default -> {}\n+        }\n","filename":"test\/langtools\/lib\/annotations\/annotations\/classfile\/ClassfileInspector.java","additions":159,"deletions":385,"binary":false,"changes":544,"status":"modified"},{"patch":"@@ -29,1 +29,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -33,0 +37,3 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -36,9 +43,0 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Code_attribute.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor.InvalidDescriptor;\n-import com.sun.tools.classfile.Method;\n-\n@@ -47,1 +45,1 @@\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n+            throws IOException {\n@@ -58,3 +56,3 @@\n-            throws IOException, ConstantPoolException, InvalidDescriptor, InvalidIndex {\n-        ClassFile classFile = ClassFile.read(file);\n-        ConstantPool constantPool = classFile.constant_pool;\n+            throws IOException {\n+        ClassModel classFile = Classfile.of().parse(file.toPath());\n+        ConstantPool constantPool = classFile.constantPool();\n@@ -63,5 +61,5 @@\n-        for (Method method : classFile.methods) {\n-            if (method.getName(constantPool).equals(\"arrMethod\")) {\n-                Code_attribute code = (Code_attribute) method.attributes\n-                        .get(Attribute.Code);\n-                if (code.max_locals > 4)\n+        for (MethodModel method : classFile.methods()) {\n+            if (method.methodName().equalsString(\"arrMethod\")) {\n+                CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n+                assert code != null;\n+                if (code.maxLocals() > 4)\n@@ -72,1 +70,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/8009170\/RedundantByteCodeInArrayTest.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -24,3 +24,0 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.*;\n-\n@@ -31,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/WellKnownTypes.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -34,5 +38,2 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.InnerClasses_attribute;\n-import com.sun.tools.classfile.InnerClasses_attribute.Info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -53,5 +54,5 @@\n-        ClassFile classFile = ClassFile.read(path);\n-        InnerClasses_attribute innerClasses =\n-                (InnerClasses_attribute) classFile.attributes.get(Attribute.InnerClasses);\n-        for (Info classInfo : innerClasses.classes) {\n-            Assert.check(!classInfo.inner_class_access_flags.is(AccessFlags.ACC_STRICT),\n+        ClassModel classFile = Classfile.of().parse(path.toPath());\n+        InnerClassesAttribute innerClasses = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+        assert innerClasses != null;\n+        for (InnerClassInfo classInfo : innerClasses.classes()) {\n+            Assert.check(classInfo.flagsMask() != Classfile.ACC_STRICT,\n","filename":"test\/langtools\/tools\/javac\/T7165659\/InnerClassAttrMustNotHaveStrictFPFlagTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -38,5 +42,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-\n-import static com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8;\n-import static com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n-import static com.sun.tools.classfile.ConstantPool.CPInfo;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -58,7 +59,7 @@\n-        ClassFile classFile = ClassFile.read(\n-                new BufferedInputStream(Files.newInputStream(path)));\n-        for (CPInfo cpInfo : classFile.constant_pool.entries()) {\n-            if (cpInfo.getTag() == CONSTANT_Utf8) {\n-                CONSTANT_Utf8_info utf8Info = (CONSTANT_Utf8_info)cpInfo;\n-                Assert.check(utf8Info.value.length() > 0,\n-                        \"UTF8 with length 0 found at class \" + classFile.getName());\n+        ClassModel classFile = Classfile.of().parse(\n+                new BufferedInputStream(Files.newInputStream(path)).readAllBytes());\n+        for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n+            PoolEntry pe = classFile.constantPool().entryByIndex(i);\n+            if (pe instanceof Utf8Entry utf8Info) {\n+                Assert.check(utf8Info.stringValue().length() > 0,\n+                        \"UTF8 with length 0 found at class \" + classFile.thisClass().name());\n","filename":"test\/langtools\/tools\/javac\/T8011181\/EmptyUTF8ForInnerClassNameTest.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -38,4 +42,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n@@ -55,3 +57,3 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n-        for (Method method : classFile.methods) {\n-            Code_attribute code = (Code_attribute)method.attributes.get(Attribute.Code);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        for (MethodModel method : classFile.methods()) {\n+            CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -59,1 +61,1 @@\n-                if (code.attributes.get(Attribute.LocalVariableTable) != null) {\n+                if (code.findAttribute(Attributes.LOCAL_VARIABLE_TABLE).orElse(null) != null) {\n","filename":"test\/langtools\/tools\/javac\/T8028504\/DontGenerateLVTForGNoneOpTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -40,1 +44,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -67,5 +72,6 @@\n-        ClassFile classFile = ClassFile.read(cfile);\n-        for (Method method: classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(\"foo\")) {\n-                Code_attribute codeAttr = (Code_attribute)method.attributes.get(\"Code\");\n-                Assert.check(codeAttr.max_locals == 0, \"max locals found \" + codeAttr.max_locals);\n+        ClassModel classFile = Classfile.of().parse(cfile.toPath());\n+        for (MethodModel method: classFile.methods()) {\n+            if (method.methodName().stringValue().equals(\"foo\")) {\n+                CodeAttribute codeAttr = method.findAttribute(Attributes.CODE).orElse(null);\n+                assert codeAttr != null;\n+                Assert.check(codeAttr.maxLocals() == 0, \"max locals found \" + codeAttr.maxLocals());\n","filename":"test\/langtools\/tools\/javac\/T8210435\/NoLocalsMustBeReservedForDCEedVarsTest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -39,1 +44,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.ClassModel;\n@@ -119,1 +124,1 @@\n-            new ClassFile[] { getClassFile(Inner_class, Inner.class),\n+            new ClassModel[] { getClassFile(Inner_class, Inner.class),\n","filename":"test\/langtools\/tools\/javac\/annotations\/SyntheticParameters.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -40,18 +45,3 @@\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.Annotation.Annotation_element_value;\n-import com.sun.tools.classfile.Annotation.Array_element_value;\n-import com.sun.tools.classfile.Annotation.Class_element_value;\n-import com.sun.tools.classfile.Annotation.Enum_element_value;\n-import com.sun.tools.classfile.Annotation.Primitive_element_value;\n-import com.sun.tools.classfile.Annotation.element_value;\n-import com.sun.tools.classfile.Annotation.element_value.Visitor;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Integer_info;\n-import com.sun.tools.classfile.ConstantPool.InvalidIndex;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute;\n-import com.sun.tools.classfile.TypeAnnotation;\n-import com.sun.tools.classfile.TypeAnnotation.Position;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n@@ -63,2 +53,1 @@\n-import java.util.Arrays;\n-import java.util.Set;\n+import java.util.*;\n@@ -116,4 +105,4 @@\n-        ClassFile cf = ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$1.class\"));\n-        RuntimeVisibleTypeAnnotations_attribute rvta =\n-                (RuntimeVisibleTypeAnnotations_attribute)\n-                        cf.attributes.get(Attribute.RuntimeVisibleTypeAnnotations);\n+        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$1.class\"));\n+        RuntimeVisibleTypeAnnotationsAttribute rvta =\n+                cm.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+        assert rvta != null;\n@@ -124,2 +113,2 @@\n-                Arrays.stream(rvta.annotations)\n-                        .map(a -> annotationDebugString(cf, a))\n+                rvta.annotations().stream()\n+                        .map(a -> annotationDebugString(cm, null, a))\n@@ -130,2 +119,2 @@\n-        ClassFile cf = ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n-        Method method = findMethod(cf, \"f\");\n+        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+        MethodModel method = findMethod(cm, \"f\");\n@@ -133,0 +122,1 @@\n+        CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -135,1 +125,1 @@\n-                annotations.stream().map(a -> annotationDebugString(cf, a)).collect(toSet()));\n+                annotations.stream().map(a -> annotationDebugString(cm, cAttr, a)).collect(toSet()));\n@@ -139,3 +129,3 @@\n-        ClassFile cf =\n-                ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$Inner.class\"));\n-        Method method = findMethod(cf, \"g\");\n+        ClassModel cm =\n+                Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$Inner.class\"));\n+        MethodModel method = findMethod(cm, \"g\");\n@@ -143,0 +133,1 @@\n+        CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -148,1 +139,1 @@\n-                annotations.stream().map(a -> annotationDebugString(cf, a)).collect(toSet()));\n+                annotations.stream().map(a -> annotationDebugString(cm, cAttr, a)).collect(toSet()));\n@@ -153,3 +144,3 @@\n-            ClassFile cf =\n-                    ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n-            Method method = findMethod(cf, \"g\");\n+            ClassModel cm =\n+                    Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+            MethodModel method = findMethod(cm, \"g\");\n@@ -157,0 +148,1 @@\n+            CodeAttribute cAttr = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -160,1 +152,1 @@\n-                    annotations.stream().map(a -> annotationDebugString(cf, a)).collect(toSet()));\n+                    annotations.stream().map(a -> annotationDebugString(cm, cAttr, a)).collect(toSet()));\n@@ -164,5 +156,5 @@\n-            ClassFile cf =\n-                    ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$2.class\"));\n-            RuntimeVisibleTypeAnnotations_attribute rvta =\n-                    (RuntimeVisibleTypeAnnotations_attribute)\n-                            cf.attributes.get(Attribute.RuntimeVisibleTypeAnnotations);\n+            ClassModel cm =\n+                    Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest$2.class\"));\n+            RuntimeVisibleTypeAnnotationsAttribute rvta =\n+                    cm.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+            assert rvta != null;\n@@ -173,2 +165,2 @@\n-                    Arrays.stream(rvta.annotations)\n-                            .map(a -> annotationDebugString(cf, a))\n+                    rvta.annotations().stream()\n+                            .map(a -> annotationDebugString(cm, null, a))\n@@ -180,2 +172,2 @@\n-        ClassFile cf = ClassFile.read(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n-        Method method = findMethod(cf, \"<init>\");\n+        ClassModel cm = Classfile.of().parse(Paths.get(ToolBox.testClasses, \"AnonymousClassTest.class\"));\n+        MethodModel method = findMethod(cm, \"<init>\");\n@@ -183,0 +175,1 @@\n+        CodeAttribute cAttr1 = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -185,1 +178,1 @@\n-                annotations.stream().map(a -> annotationDebugString(cf, a)).collect(toSet()) );\n+                annotations.stream().map(a -> annotationDebugString(cm, cAttr1, a)).collect(toSet()) );\n@@ -187,1 +180,1 @@\n-        method = findMethod(cf, \"<clinit>\");\n+        method = findMethod(cm, \"<clinit>\");\n@@ -189,0 +182,1 @@\n+        CodeAttribute cAttr2 = method.findAttribute(Attributes.CODE).orElse(null);\n@@ -190,2 +184,2 @@\n-                Set.of(\"@LAnonymousClassTest$TA;(6) NEW, offset=0, location=[INNER_TYPE]\"),\n-                annotations.stream().map(a -> annotationDebugString(cf, a)).collect(toSet()) );\n+                Set.of(\"@LAnonymousClassTest$TA;(6) NEW, offset=16, location=[INNER_TYPE]\"),\n+                annotations.stream().map(a -> annotationDebugString(cm, cAttr2, a)).collect(toSet()) );\n@@ -196,2 +190,2 @@\n-    private static Set<TypeAnnotation> getRuntimeVisibleTypeAnnotations(Method method) {\n-        if (method.attributes.get(Attribute.RuntimeVisibleTypeAnnotations) != null) {\n+    private static Set<TypeAnnotation> getRuntimeVisibleTypeAnnotations(MethodModel method) {\n+        if (method.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null) != null) {\n@@ -201,5 +195,6 @@\n-        Code_attribute code = (Code_attribute) method.attributes.get(Attribute.Code);\n-        RuntimeVisibleTypeAnnotations_attribute rvta =\n-                (RuntimeVisibleTypeAnnotations_attribute)\n-                        code.attributes.get(Attribute.RuntimeVisibleTypeAnnotations);\n-        return Set.of(rvta.annotations);\n+        CodeAttribute code = method.findAttribute(Attributes.CODE).orElse(null);\n+        assert code != null;\n+        RuntimeVisibleTypeAnnotationsAttribute rvta =\n+                code.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n+        assert rvta != null;\n+        return new HashSet<>(rvta.annotations());\n@@ -208,2 +203,2 @@\n-    private static Method findMethod(ClassFile cf, String name) {\n-        return Arrays.stream(cf.methods)\n+    private static MethodModel findMethod(ClassModel cm, String name) {\n+        return cm.methods().stream()\n@@ -211,7 +206,1 @@\n-                        m -> {\n-                            try {\n-                                return m.getName(cf.constant_pool).contentEquals(name);\n-                            } catch (ConstantPoolException e) {\n-                                throw new AssertionError(e);\n-                            }\n-                        })\n+                        m -> m.methodName().stringValue().contentEquals(name))\n@@ -228,2 +217,3 @@\n-    private static String annotationDebugString(ClassFile cf, TypeAnnotation annotation) {\n-        Position pos = annotation.position;\n+    private static String annotationDebugString(ClassModel cm, CodeAttribute cAttr, TypeAnnotation annotation) {\n+        TypeAnnotation.TargetInfo info = annotation.targetInfo();\n+        int offset = info instanceof TypeAnnotation.OffsetTarget offsetInfo? cAttr.labelToBci(offsetInfo.target()): -1;\n@@ -232,1 +222,1 @@\n-            name = cf.constant_pool.getUTF8Info(annotation.annotation.type_index).value;\n+            name = annotation.classSymbol().descriptorString();\n@@ -236,0 +226,5 @@\n+        List<String> location = new ArrayList<>();\n+        for (TypeAnnotation.TypePathComponent path: annotation.targetPath()) {\n+            if (path.typePathKind() == TypeAnnotation.TypePathComponent.Kind.INNER_TYPE)location.add(path.typePathKind().name());\n+            else location.add(path.typePathKind() + \"(\" + path.typeArgumentIndex() + \")\");\n+        }\n@@ -239,4 +234,4 @@\n-                annotationValueoDebugString(cf, annotation.annotation),\n-                pos.type,\n-                pos.offset,\n-                pos.location);\n+                annotationValueDebugString(cm, annotation),\n+                info.targetType(),\n+                offset,\n+                location);\n@@ -245,2 +240,2 @@\n-    private static String annotationValueoDebugString(ClassFile cf, Annotation annotation) {\n-        if (annotation.element_value_pairs.length != 1) {\n+    private static String annotationValueDebugString(ClassModel cm, Annotation annotation) {\n+        if (annotation.elements().size() != 1) {\n@@ -250,1 +245,1 @@\n-            return elementValueDebugString(cf, annotation.element_value_pairs[0].value);\n+            return elementValueDebugString(annotation.elements().get(0).value());\n@@ -256,38 +251,5 @@\n-    private static String elementValueDebugString(ClassFile cf, element_value value) {\n-        class Viz implements Visitor<String, Void> {\n-            @Override\n-            public String visitPrimitive(Primitive_element_value ev, Void aVoid) {\n-                try {\n-                    switch (ev.tag) {\n-                        case 'I':\n-                            return Integer.toString(\n-                                    ((CONSTANT_Integer_info)\n-                                                    cf.constant_pool.get(ev.const_value_index))\n-                                            .value);\n-                        default:\n-                            throw new UnsupportedOperationException(String.format(\"%c\", ev.tag));\n-                    }\n-                } catch (InvalidIndex e) {\n-                    throw new AssertionError(e);\n-                }\n-            }\n-\n-            @Override\n-            public String visitEnum(Enum_element_value ev, Void aVoid) {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public String visitClass(Class_element_value ev, Void aVoid) {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public String visitAnnotation(Annotation_element_value ev, Void aVoid) {\n-                throw new UnsupportedOperationException();\n-            }\n-\n-            @Override\n-            public String visitArray(Array_element_value ev, Void aVoid) {\n-                throw new UnsupportedOperationException();\n-            }\n+    private static String elementValueDebugString(AnnotationValue value) {\n+        if (value.tag() == 'I') {\n+            return Integer.toString(((AnnotationValue.OfInteger) value).intValue());\n+        } else {\n+            throw new UnsupportedOperationException(String.format(\"%c\", value.tag()));\n@@ -295,1 +257,0 @@\n-        return value.accept(new Viz(), null);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnonymousClassTest.java","additions":77,"deletions":116,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import java.lang.annotation.*;\n@@ -29,1 +28,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -62,1 +62,1 @@\n-    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n+    ClassModel getClassFile(String name) throws IOException {\n@@ -64,5 +64,3 @@\n-        InputStream in = url.openStream();\n-        try {\n-            return ClassFile.read(in);\n-        } finally {\n-            in.close();\n+        assert url != null;\n+        try (InputStream in = url.openStream()) {\n+            return Classfile.of().parse(in.readAllBytes());\n@@ -72,6 +70,3 @@\n-    ClassFile getClassFile(URL url) throws IOException, ConstantPoolException {\n-        InputStream in = url.openStream();\n-        try {\n-            return ClassFile.read(in);\n-        } finally {\n-            in.close();\n+    ClassModel getClassFile(URL url) throws IOException {\n+        try (InputStream in = url.openStream()) {\n+            return Classfile.of().parse(in.readAllBytes());\n@@ -82,6 +77,2 @@\n-    void test(ClassFile cf) {\n-        test(\"CLASS\",cf, null, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n-        test(\"CLASS\",cf, null, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-        \/\/RuntimeAnnotations since one annotation can result in two attributes.\n-        test(\"CLASS\",cf, null, null, Attribute.RuntimeVisibleAnnotations, true);\n-        test(\"CLASS\",cf, null, null, Attribute.RuntimeInvisibleAnnotations, false);\n+    void test(ClassModel cm) {\n+        test(cm, false); \/\/For ClassModel, not look for annotations in code attr\n@@ -89,13 +80,3 @@\n-\n-    void test(ClassFile cf, Field f, Boolean local) {\n-        if (!local) {\n-            test(\"FIELD\",cf, f, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n-            test(\"FIELD\",cf, f, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-            test(\"FIELD\",cf, f, null, Attribute.RuntimeVisibleAnnotations, true);\n-            test(\"FIELD\",cf, f, null, Attribute.RuntimeInvisibleAnnotations, false);\n-        } else {\n-            test(\"CODE\",cf, f, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n-            test(\"CODE\",cf, f, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-            test(\"CODE\",cf, f, null, Attribute.RuntimeVisibleAnnotations, true);\n-            test(\"CODE\",cf, f, null, Attribute.RuntimeInvisibleAnnotations, false);\n-        }\n+    \/\/ default to not looking in code attribute\n+    void test(FieldModel fm) {\n+        test(fm, false);\n@@ -104,2 +85,2 @@\n-    void test(ClassFile cf, Field f) {\n-        test(cf, f, false);\n+    void test(MethodModel mm ) {\n+        test(mm, false);\n@@ -109,12 +90,5 @@\n-    void test(ClassFile cf, Method m, Boolean local) {\n-        if (!local) {\n-            test(\"METHOD\",cf, null, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n-            test(\"METHOD\",cf, null, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-            test(\"METHOD\",cf, null, m, Attribute.RuntimeVisibleAnnotations, true);\n-            test(\"METHOD\",cf, null, m, Attribute.RuntimeInvisibleAnnotations, false);\n-        } else  {\n-            test(\"MCODE\",cf, null, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n-            test(\"MCODE\",cf, null, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-            test(\"MCODE\",cf, null, m, Attribute.RuntimeVisibleAnnotations, true);\n-            test(\"MCODE\",cf, null, m, Attribute.RuntimeInvisibleAnnotations, false);\n-        }\n+    void test(AttributedElement m, Boolean local) {\n+        test(m, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, local);\n+        test(m, Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS, local);\n+        test(m, Attributes.RUNTIME_VISIBLE_ANNOTATIONS, local);\n+        test(m, Attributes.RUNTIME_INVISIBLE_ANNOTATIONS, local);\n@@ -123,6 +97,1 @@\n-    \/\/ default to not looking in code attribute\n-    void test(ClassFile cf, Method m ) {\n-        test(cf, m, false);\n-    }\n-\n-    \/\/ Test the result of Attributes.getIndex according to expectations\n+    \/\/ Test the result of MethodModel.findAttribute according to expectations\n@@ -130,51 +99,12 @@\n-    void test(String ttype, ClassFile cf, Field f, Method m, String annName, boolean visible) {\n-        String testtype = ttype;\n-        String name = null;\n-        int index = -1;\n-        Attribute attr = null;\n-        Code_attribute cAttr = null;\n-        boolean isTAattr = annName.contains(\"TypeAnnotations\");\n-        try {\n-            switch(testtype) {\n-                case \"FIELD\":\n-                    name = f.getName(cf.constant_pool);\n-                    index = f.attributes.getIndex(cf.constant_pool, annName);\n-                    if(index!= -1)\n-                        attr = f.attributes.get(index);\n-                    break;\n-                case \"CODE\":\n-                    name = f.getName(cf.constant_pool);\n-                    \/\/fetch index of and code attribute and annotations from code attribute.\n-                    index = cf.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-                    if(index!= -1) {\n-                        attr = cf.attributes.get(index);\n-                        assert attr instanceof Code_attribute;\n-                        cAttr = (Code_attribute)attr;\n-                        index = cAttr.attributes.getIndex(cf.constant_pool, annName);\n-                        if(index!= -1)\n-                            attr = cAttr.attributes.get(index);\n-                    }\n-                    break;\n-                case \"METHOD\":\n-                    name = m.getName(cf.constant_pool);\n-                    index = m.attributes.getIndex(cf.constant_pool, annName);\n-                    if(index!= -1)\n-                        attr = m.attributes.get(index);\n-                    break;\n-                case \"MCODE\":\n-                    name = m.getName(cf.constant_pool);\n-                    \/\/fetch index of and code attribute and annotations from code attribute.\n-                    index = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-                    if(index!= -1) {\n-                        attr = m.attributes.get(index);\n-                        assert attr instanceof Code_attribute;\n-                        cAttr = (Code_attribute)attr;\n-                        index = cAttr.attributes.getIndex(cf.constant_pool, annName);\n-                        if(index!= -1)\n-                            attr = cAttr.attributes.get(index);\n-                    }\n-                    break;\n-                default:\n-                    name = cf.getName();\n-                    index = cf.attributes.getIndex(cf.constant_pool, annName);\n-                    if(index!= -1) attr = cf.attributes.get(index);\n+    <T extends Attribute<T>>void test(AttributedElement m, AttributeMapper<T> annName, Boolean local) {\n+        String name;\n+        Attribute<T> attr;\n+        boolean isTAattr = annName.name().contains(\"Type\");\n+        switch(m) {\n+            case FieldModel fm -> {\n+                name = fm.fieldName().stringValue();\n+                attr = extractAnnotation(m, annName, local);\n+            }\n+            case MethodModel mm -> {\n+                name = mm.methodName().stringValue();\n+                attr = extractAnnotation(m, annName, local);\n@@ -182,1 +112,6 @@\n-        } catch(ConstantPoolException cpe) { cpe.printStackTrace(); }\n+            default -> {\n+                ClassModel cm = (ClassModel) m;\n+                name = cm.thisClass().asInternalName();\n+                attr = extractAnnotation(cm, annName, local);\n+            }\n+        }\n@@ -184,1 +119,1 @@\n-        if (index != -1) {\n+        if (attr != null) {\n@@ -186,7 +121,12 @@\n-                RuntimeTypeAnnotations_attribute tAttr =\n-                        (RuntimeTypeAnnotations_attribute)attr;\n-                println(testtype + \": \" + name + \", \" + annName + \": \" +\n-                        tAttr.annotations.length );\n-                if (tAttr.annotations.length > 0) {\n-                    for (int i = 0; i < tAttr.annotations.length; i++) {\n-                        println(\"  types:\" + tAttr.annotations[i].position.type);\n+\/\/                List <TypeAnnotation> tAnnots = new ArrayList<TypeAnnotation>();\n+                switch (attr) {\n+                    case RuntimeVisibleTypeAnnotationsAttribute vtAttr -> {\n+                        List <TypeAnnotation> tAnnots = vtAttr.annotations();\n+                        tvisibles += tAnnots.size();\n+                        allt += tAnnots.size();\n+                    }\n+                    case RuntimeInvisibleTypeAnnotationsAttribute invtAttr -> {\n+                        System.err.println(invtAttr.annotations());\n+                        List <TypeAnnotation> tAnnots = invtAttr.annotations();\n+                        tinvisibles += tAnnots.size();\n+                        allt += tAnnots.size();\n@@ -194,2 +134,1 @@\n-                } else {\n-                    println(\"\");\n+                    default -> throw new AssertionError();\n@@ -197,5 +136,7 @@\n-                allt += tAttr.annotations.length;\n-                if (visible)\n-                    tvisibles += tAttr.annotations.length;\n-                else\n-                    tinvisibles += tAttr.annotations.length;\n+                \/\/ This snippet is simply for printlin. which are duplicated in two cases. Therefore, I want to drop it.\n+\/\/                if (!tAnnots.isEmpty()) {\n+\/\/\/\/                    for (TypeAnnotation tAnnot : tAnnots)\n+\/\/\/\/                        println(\"  types:\" + tAnnot.targetInfo().targetType());\n+\/\/\/\/                    println(\"Local: \" + local + \", \" + name + \", \" + annName + \": \" + tAnnots.size());\n+\/\/                    allt += tAnnots.size();\n+\/\/                }\n@@ -203,9 +144,16 @@\n-                RuntimeAnnotations_attribute tAttr =\n-                        (RuntimeAnnotations_attribute)attr;\n-                println(testtype + \": \" + name + \", \" + annName + \": \" +\n-                        tAttr.annotations.length );\n-                all += tAttr.annotations.length;\n-                if (visible)\n-                    visibles += tAttr.annotations.length;\n-                else\n-                    invisibles += tAttr.annotations.length;\n+                List <Annotation> annots;\n+                switch (attr) {\n+                    case RuntimeVisibleAnnotationsAttribute tAttr -> {\n+                        annots = tAttr.annotations();\n+                        visibles += annots.size();\n+                    }\n+                    case RuntimeInvisibleAnnotationsAttribute tAttr -> {\n+                        annots = tAttr.annotations();\n+                        invisibles += annots.size();\n+                    }\n+                    default -> throw new AssertionError();\n+                }\n+                if (!annots.isEmpty()) {\n+                    println(\"Local: \" + local + \", \" + name + \", \" + annName + \": \" + annots.size());\n+                    all += annots.size();\n+                }\n@@ -215,0 +163,13 @@\n+    <T extends Attribute<T>> Attribute<T> extractAnnotation(AttributedElement m, AttributeMapper<T> annName, Boolean local) {\n+        CodeAttribute cAttr;\n+        Attribute<T> attr = null;\n+        if (local) {\n+            cAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+            if (cAttr != null) {\n+                attr = cAttr.findAttribute(annName).orElse(null);\n+            }\n+        } else {\n+            attr = m.findAttribute(annName).orElse(null);\n+        }\n+        return attr;\n+    }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/ClassfileTestHelper.java","additions":90,"deletions":129,"binary":false,"changes":219,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -31,1 +36,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -145,1 +150,1 @@\n-        ClassFile cf = ClassFile.read(classFile);\n+        ClassModel cm = Classfile.of().parse(classFile.toPath());\n@@ -148,1 +153,1 @@\n-        test(cf);\n+        test(cm);\n@@ -150,2 +155,2 @@\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -153,2 +158,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest1.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -31,1 +36,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -164,1 +169,1 @@\n-        ClassFile cf = ClassFile.read(classFile);\n+        ClassModel cm = Classfile.of().parse(classFile.toPath());\n@@ -167,1 +172,1 @@\n-        test(cf);\n+        test(cm);\n@@ -169,1 +174,1 @@\n-        for (Field f : cf.fields) {\n+        for (FieldModel fm : cm.fields()) {\n@@ -171,1 +176,1 @@\n-                test(cf, f, true);\n+                test(fm, true);\n@@ -173,1 +178,1 @@\n-                test(cf,f);\n+                test(fm);\n@@ -175,1 +180,1 @@\n-        for (Method m: cf.methods) {\n+        for (MethodModel mm: cm.methods()) {\n@@ -177,1 +182,1 @@\n-                test(cf, m, true);\n+                test(mm, true);\n@@ -179,1 +184,1 @@\n-                test(cf, m);\n+                test(mm);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest2.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -33,1 +33,3 @@\n-import java.io.File;\n+import java.io.*;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -36,1 +38,1 @@\n-public class CombinationsTargetTest3 extends ClassfileTestHelper {\n+public class CombinationsTargetTest3 {\n@@ -540,1 +542,203 @@\n-}\n+\n+    \/************ Migrated from original ClassfileTestHelper ******************\/\n+    int expected_tinvisibles = 0;\n+    int expected_tvisibles = 0;\n+    int expected_invisibles = 0;\n+    int expected_visibles = 0;\n+\n+    \/\/Makes debugging much easier. Set to 'false' for less output.\n+    public Boolean verbose = true;\n+    void println(String msg) { if (verbose) System.err.println(msg); }\n+    void print(String msg) { if (verbose) System.err.print(msg); }\n+\n+    File writeTestFile(String fname, String source) throws IOException {\n+      File f = new File(fname);\n+        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f)));\n+        out.println(source);\n+        out.close();\n+        return f;\n+    }\n+\n+    File compile(File f) {\n+        List<String> options = new ArrayList<>(List.of(\"-g\", f.getPath()));\n+        int rc = com.sun.tools.javac.Main.compile(options.toArray(new String[0]));\n+        if (rc != 0)\n+            throw new Error(\"compilation failed. rc=\" + rc);\n+        String path = f.getPath();\n+        return new File(path.substring(0, path.length() - 5) + \".class\");\n+    }\n+\n+    \/************ Helper annotations counting methods ******************\/\n+    void test(ClassFile cf) {\n+        test(\"CLASS\",cf, null, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n+        test(\"CLASS\",cf, null, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n+        \/\/RuntimeAnnotations since one annotation can result in two attributes.\n+        test(\"CLASS\",cf, null, null, Attribute.RuntimeVisibleAnnotations, true);\n+        test(\"CLASS\",cf, null, null, Attribute.RuntimeInvisibleAnnotations, false);\n+    }\n+\n+    void test(ClassFile cf, Field f, Boolean local) {\n+        if (!local) {\n+            test(\"FIELD\",cf, f, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n+            test(\"FIELD\",cf, f, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n+            test(\"FIELD\",cf, f, null, Attribute.RuntimeVisibleAnnotations, true);\n+            test(\"FIELD\",cf, f, null, Attribute.RuntimeInvisibleAnnotations, false);\n+        } else {\n+            test(\"CODE\",cf, f, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n+            test(\"CODE\",cf, f, null, Attribute.RuntimeInvisibleTypeAnnotations, false);\n+            test(\"CODE\",cf, f, null, Attribute.RuntimeVisibleAnnotations, true);\n+            test(\"CODE\",cf, f, null, Attribute.RuntimeInvisibleAnnotations, false);\n+        }\n+    }\n+\n+    void test(ClassFile cf, Field f) {\n+        test(cf, f, false);\n+    }\n+\n+    \/\/ 'local' determines whether to look for annotations in code attribute or not.\n+    void test(ClassFile cf, Method m, Boolean local) {\n+        if (!local) {\n+            test(\"METHOD\",cf, null, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n+            test(\"METHOD\",cf, null, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n+            test(\"METHOD\",cf, null, m, Attribute.RuntimeVisibleAnnotations, true);\n+            test(\"METHOD\",cf, null, m, Attribute.RuntimeInvisibleAnnotations, false);\n+        } else  {\n+            test(\"MCODE\",cf, null, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n+            test(\"MCODE\",cf, null, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n+            test(\"MCODE\",cf, null, m, Attribute.RuntimeVisibleAnnotations, true);\n+            test(\"MCODE\",cf, null, m, Attribute.RuntimeInvisibleAnnotations, false);\n+        }\n+    }\n+\n+    \/\/ default to not looking in code attribute\n+    void test(ClassFile cf, Method m ) {\n+        test(cf, m, false);\n+    }\n+\n+    \/\/ Test the result of Attributes.getIndex according to expectations\n+    \/\/ encoded in the class\/field\/method name; increment annotations counts.\n+    void test(String ttype, ClassFile cf, Field f, Method m, String annName, boolean visible) {\n+        String testtype = ttype;\n+        String name = null;\n+        int index = -1;\n+        Attribute attr = null;\n+        Code_attribute cAttr = null;\n+        boolean isTAattr = annName.contains(\"TypeAnnotations\");\n+        try {\n+            switch(testtype) {\n+                case \"FIELD\":\n+                    name = f.getName(cf.constant_pool);\n+                    index = f.attributes.getIndex(cf.constant_pool, annName);\n+                    if(index!= -1)\n+                        attr = f.attributes.get(index);\n+                    break;\n+                case \"CODE\":\n+                    name = f.getName(cf.constant_pool);\n+                    \/\/fetch index of and code attribute and annotations from code attribute.\n+                    index = cf.attributes.getIndex(cf.constant_pool, Attribute.Code);\n+                    if(index!= -1) {\n+                        attr = cf.attributes.get(index);\n+                        assert attr instanceof Code_attribute;\n+                        cAttr = (Code_attribute)attr;\n+                        index = cAttr.attributes.getIndex(cf.constant_pool, annName);\n+                        if(index!= -1)\n+                            attr = cAttr.attributes.get(index);\n+                    }\n+                    break;\n+                case \"METHOD\":\n+                    name = m.getName(cf.constant_pool);\n+                    index = m.attributes.getIndex(cf.constant_pool, annName);\n+                    if(index!= -1)\n+                        attr = m.attributes.get(index);\n+                    break;\n+                case \"MCODE\":\n+                    name = m.getName(cf.constant_pool);\n+                    \/\/fetch index of and code attribute and annotations from code attribute.\n+                    index = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n+                    if(index!= -1) {\n+                        attr = m.attributes.get(index);\n+                        assert attr instanceof Code_attribute;\n+                        cAttr = (Code_attribute)attr;\n+                        index = cAttr.attributes.getIndex(cf.constant_pool, annName);\n+                        if(index!= -1)\n+                            attr = cAttr.attributes.get(index);\n+                    }\n+                    break;\n+                default:\n+                    name = cf.getName();\n+                    index = cf.attributes.getIndex(cf.constant_pool, annName);\n+                    if(index!= -1) attr = cf.attributes.get(index);\n+            }\n+        } catch(ConstantPoolException cpe) { cpe.printStackTrace(); }\n+\n+        if (index != -1) {\n+            if(isTAattr) { \/\/count RuntimeTypeAnnotations\n+                RuntimeTypeAnnotations_attribute tAttr =\n+                        (RuntimeTypeAnnotations_attribute)attr;\n+                System.out.println(testtype + \": \" + name + \", \" + annName + \": \" +\n+                        tAttr.annotations.length );\n+                if (tAttr.annotations.length > 0) {\n+                    for (int i = 0; i < tAttr.annotations.length; i++) {\n+                        System.out.println(\"  types:\" + tAttr.annotations[i].position.type);\n+                    }\n+                } else {\n+                    System.out.println(\"\");\n+                }\n+                allt += tAttr.annotations.length;\n+                if (visible)\n+                    tvisibles += tAttr.annotations.length;\n+                else\n+                    tinvisibles += tAttr.annotations.length;\n+            } else {\n+                RuntimeAnnotations_attribute tAttr =\n+                        (RuntimeAnnotations_attribute)attr;\n+                System.out.println(testtype + \": \" + name + \", \" + annName + \": \" +\n+                        tAttr.annotations.length );\n+                all += tAttr.annotations.length;\n+                if (visible)\n+                    visibles += tAttr.annotations.length;\n+                else\n+                    invisibles += tAttr.annotations.length;\n+            }\n+        }\n+    }\n+\n+    void countAnnotations() {\n+        errors=0;\n+        int expected_allt = expected_tvisibles + expected_tinvisibles;\n+        int expected_all = expected_visibles + expected_invisibles;\n+        if (expected_allt != allt) {\n+            errors++;\n+            System.err.println(\"Failure: expected \" + expected_allt +\n+                    \" type annotations but found \" + allt);\n+        }\n+        if (expected_all != all) {\n+            errors++;\n+            System.err.println(\"Failure: expected \" + expected_all +\n+                    \" annotations but found \" + all);\n+        }\n+        if (expected_tvisibles != tvisibles) {\n+            errors++;\n+            System.err.println(\"Failure: expected \" + expected_tvisibles +\n+                    \" typevisible annotations but found \" + tvisibles);\n+        }\n+        if (expected_tinvisibles != tinvisibles) {\n+            errors++;\n+            System.err.println(\"Failure: expected \" + expected_tinvisibles +\n+                    \" typeinvisible annotations but found \" + tinvisibles);\n+        }\n+        allt=0;\n+        tvisibles=0;\n+        tinvisibles=0;\n+        all=0;\n+        visibles=0;\n+        invisibles=0;\n+    }\n+    int errors;\n+    int allt;\n+    int tvisibles;\n+    int tinvisibles;\n+    int all;\n+    int visibles;\n+    int invisibles;\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest3.java","additions":207,"deletions":3,"binary":false,"changes":210,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -35,1 +35,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -46,5 +51,4 @@\n-\n-        ClassFile cf = getClassFile(\"DeadCode$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"DeadCode$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -52,2 +56,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m, true);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/DeadCode.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.internal.classfile.*;\n@@ -27,2 +28,0 @@\n-import com.sun.tools.classfile.*;\n-\n@@ -33,1 +32,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -47,4 +51,4 @@\n-        ClassFile cf = getClassFile(\"InstanceInitializer$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"InstanceInitializer$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -52,2 +56,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m, true);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/InstanceInitializer.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.internal.classfile.*;\n@@ -29,1 +30,0 @@\n-import com.sun.tools.classfile.*;\n@@ -34,1 +34,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -46,4 +51,4 @@\n-        ClassFile cf = getClassFile(\"NewTypeArguments$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"NewTypeArguments$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -51,2 +56,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m, true);\n+        for (MethodModel m: cm.methods()) {\n+            test(m, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NewTypeArguments.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -36,1 +37,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,1 +44,1 @@\n-public class NoTargetAnnotations {\n+public class NoTargetAnnotations extends ClassfileTestHelper {\n@@ -45,4 +51,4 @@\n-        ClassFile cf = getClassFile(\"NoTargetAnnotations$Test.class\");\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n-            testDeclaration(cf, f);\n+        ClassModel cm = getClassFile(\"NoTargetAnnotations$Test.class\");\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n+            testDeclaration(fm);\n@@ -50,3 +56,3 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m);\n-            testDeclaration(cf, m);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm);\n+            testDeclaration(mm);\n@@ -62,1 +68,1 @@\n-    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n+    ClassModel getClassFile(String name) throws IOException {\n@@ -64,5 +70,3 @@\n-        InputStream in = url.openStream();\n-        try {\n-            return ClassFile.read(in);\n-        } finally {\n-            in.close();\n+        assert url != null;\n+        try (InputStream in = url.openStream()) {\n+            return Classfile.of().parse(in.readAllBytes());\n@@ -72,15 +76,0 @@\n-    \/************ Helper annotations counting methods ******************\/\n-    void test(ClassFile cf, Method m) {\n-        test(cf, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n-        test(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-    }\n-\n-    void test(ClassFile cf, Field m) {\n-        test(cf, m, Attribute.RuntimeVisibleTypeAnnotations, true);\n-        test(cf, m, Attribute.RuntimeInvisibleTypeAnnotations, false);\n-    }\n-\n-    void testDeclaration(ClassFile cf, Method m) {\n-        testDecl(cf, m, Attribute.RuntimeVisibleAnnotations, true);\n-        testDecl(cf, m, Attribute.RuntimeInvisibleAnnotations, false);\n-    }\n@@ -88,47 +77,3 @@\n-    void testDeclaration(ClassFile cf, Field m) {\n-        testDecl(cf, m, Attribute.RuntimeVisibleAnnotations, true);\n-        testDecl(cf, m, Attribute.RuntimeInvisibleAnnotations, false);\n-    }\n-\n-    \/\/ test the result of Attributes.getIndex according to expectations\n-    \/\/ encoded in the method's name\n-    void test(ClassFile cf, Method m, String name, boolean visible) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            all += tAttr.annotations.length;\n-            if (visible)\n-                visibles += tAttr.annotations.length;\n-            else\n-                invisibles += tAttr.annotations.length;\n-        }\n-    }\n-\n-    \/\/ test the result of Attributes.getIndex according to expectations\n-    \/\/ encoded in the method's name\n-    void test(ClassFile cf, Field m, String name, boolean visible) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr = (RuntimeTypeAnnotations_attribute)attr;\n-            all += tAttr.annotations.length;\n-            if (visible)\n-                visibles += tAttr.annotations.length;\n-            else\n-                invisibles += tAttr.annotations.length;\n-        }\n-    }\n-\n-    \/\/ test the result of Attributes.getIndex according to expectations\n-    \/\/ encoded in the method's name\n-    void testDecl(ClassFile cf, Method m, String name, boolean visible) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeAnnotations_attribute;\n-            RuntimeAnnotations_attribute tAttr = (RuntimeAnnotations_attribute)attr;\n-            this.declAnnotations += tAttr.annotations.length;\n-        }\n+    void testDeclaration(AttributedElement m) {\n+        testDecl(m, Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n+        testDecl(m, Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n@@ -137,1 +82,1 @@\n-    \/\/ test the result of Attributes.getIndex according to expectations\n+    \/\/ test the result of AttributedElement.findAttribute according to expectations\n@@ -139,7 +84,12 @@\n-    void testDecl(ClassFile cf, Field m, String name, boolean visible) {\n-        int index = m.attributes.getIndex(cf.constant_pool, name);\n-        if (index != -1) {\n-            Attribute attr = m.attributes.get(index);\n-            assert attr instanceof RuntimeAnnotations_attribute;\n-            RuntimeAnnotations_attribute tAttr = (RuntimeAnnotations_attribute)attr;\n-            this.declAnnotations += tAttr.annotations.length;\n+    <T extends Attribute<T>> void testDecl(AttributedElement m, AttributeMapper<T> name) {\n+        Attribute<T> attr = m.findAttribute(name).orElse(null);\n+        if (attr != null) {\n+            switch (attr) {\n+                case RuntimeVisibleAnnotationsAttribute tAttr -> {\n+                    this.declAnnotations += tAttr.annotations().size();\n+                }\n+                case RuntimeInvisibleAnnotationsAttribute tAttr -> {\n+                    this.declAnnotations += tAttr.annotations().size();\n+                }\n+                default -> throw new AssertionError();\n+            }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NoTargetAnnotations.java","additions":36,"deletions":86,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -35,1 +35,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -48,2 +53,2 @@\n-        ClassFile cf = getClassFile(\"Scopes.class\");\n-        test(cf);\n+        ClassModel cm = getClassFile(\"Scopes.class\");\n+        test(cm);\n@@ -60,1 +65,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Scopes.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -33,1 +33,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -47,4 +52,4 @@\n-        ClassFile cf = getClassFile(\"StaticInitializer$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"StaticInitializer$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -52,2 +57,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m, true);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/StaticInitializer.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -33,0 +38,2 @@\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.TypeAnnotation;\n@@ -37,1 +44,0 @@\n-import com.sun.tools.classfile.*;\n@@ -75,2 +81,2 @@\n-            new ClassFile[] { getClassFile(Inner_class, Inner.class),\n-                              getClassFile(Foo_class, Foo.class) },\n+            new ClassModel[] { getClassFile(Inner_class, Inner.class),\n+                               getClassFile(Foo_class, Foo.class) },\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/SyntheticParameters.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -35,1 +40,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -46,4 +51,4 @@\n-        ClassFile cf = getClassFile(\"T8008762$Test$1$InnerAnon.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f, false);\n+        ClassModel cm = getClassFile(\"T8008762$Test$1$InnerAnon.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm, false);\n@@ -51,2 +56,2 @@\n-        for (Method m : cf.methods) {\n-            test(cf, m, false);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm, false);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008762.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,1 +39,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -43,3 +48,3 @@\n-        ClassFile cf = getClassFile(\"T8008769$Test.class\");\n-        for (Method m : cf.methods) {\n-            test(cf, m, true);\n+        ClassModel cm = getClassFile(\"T8008769$Test.class\");\n+        for (MethodModel mm : cm.methods()) {\n+            test(mm, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8008769.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,1 +39,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -50,3 +55,3 @@\n-        ClassFile cf = getClassFile(\"T8010015$Test$1innerClass.class\");\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"T8010015$Test$1innerClass.class\");\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/T8010015.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,1 +36,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,1 +43,2 @@\n-import java.lang.annotation.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -40,3 +46,1 @@\n-import java.util.List;\n-import java.util.LinkedList;\n-import com.sun.tools.classfile.*;\n+import java.util.*;\n@@ -65,5 +69,5 @@\n-    String[] AnnoAttributes = {\n-        Attribute.RuntimeVisibleTypeAnnotations,\n-        Attribute.RuntimeInvisibleTypeAnnotations,\n-        Attribute.RuntimeVisibleAnnotations,\n-        Attribute.RuntimeInvisibleAnnotations\n+    AttributeMapper<?> [] AnnoAttributes = new AttributeMapper<?>[]{\n+            Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS,\n+            Attributes.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS,\n+            Attributes.RUNTIME_VISIBLE_ANNOTATIONS,\n+            Attributes.RUNTIME_INVISIBLE_ANNOTATIONS\n@@ -149,1 +153,1 @@\n-    void test(String ttype, ClassFile cf, Method m, Field f, boolean visible) {\n+    <T extends Attribute<T>> void test(AttributedElement m) {\n@@ -163,1 +167,1 @@\n-        Attribute attr = null,\n+        Attribute<T> attr = null,\n@@ -165,1 +169,1 @@\n-        Code_attribute CAttr = null;\n+        CodeAttribute CAttr = null;\n@@ -167,48 +171,14 @@\n-        for (String AnnoType : AnnoAttributes) {\n-            try {\n-                switch (ttype) {\n-                    case \"METHOD\":\n-                        index = m.attributes.getIndex(cf.constant_pool,\n-                                                      AnnoType);\n-                        memberName = m.getName(cf.constant_pool);\n-                        if (index != -1)\n-                            attr = m.attributes.get(index);\n-                        \/\/fetch index annotations from code attribute.\n-                        index2 = m.attributes.getIndex(cf.constant_pool,\n-                                                       Attribute.Code);\n-                        if (index2 != -1) {\n-                            cattr = m.attributes.get(index2);\n-                            assert cattr instanceof Code_attribute;\n-                            CAttr = (Code_attribute)cattr;\n-                            index2 = CAttr.attributes.getIndex(cf.constant_pool,\n-                                                               AnnoType);\n-                            if (index2 != -1)\n-                                cattr = CAttr.attributes.get(index2);\n-                        }\n-                        break;\n-                    case \"FIELD\":\n-                        index = f.attributes.getIndex(cf.constant_pool,\n-                                                      AnnoType);\n-                        memberName = f.getName(cf.constant_pool);\n-                        if (index != -1)\n-                            attr = f.attributes.get(index);\n-                        \/\/fetch index annotations from code attribute.\n-                        index2 = cf.attributes.getIndex(cf.constant_pool,\n-                                                        Attribute.Code);\n-                        if (index2!= -1) {\n-                            cattr = cf.attributes.get(index2);\n-                            assert cattr instanceof Code_attribute;\n-                            CAttr = (Code_attribute)cattr;\n-                            index2 = CAttr.attributes.getIndex(cf.constant_pool,\n-                                                               AnnoType);\n-                            if (index2!= -1)\n-                                cattr = CAttr.attributes.get(index2);\n-                        }\n-                        break;\n-\n-                    default:\n-                        memberName = cf.getName();\n-                        index = cf.attributes.getIndex(cf.constant_pool,\n-                                                       AnnoType);\n-                        if (index!= -1) attr = cf.attributes.get(index);\n-                        break;\n+        for (AttributeMapper<?> Anno : AnnoAttributes) {\n+            AttributeMapper<T> AnnoType = (AttributeMapper<T>) Anno;\n+            if (Objects.requireNonNull(m) instanceof ClassModel) {\n+                ClassModel cm = (ClassModel) m;\n+                memberName = cm.thisClass().name().stringValue();\n+                attr = m.findAttribute(AnnoType).orElse(null);\n+            } else {\n+                memberName = m instanceof MethodModel ?\n+                        ((MethodModel) m).methodName().stringValue() : ((FieldModel) m).fieldName().stringValue();\n+                attr = m.findAttribute(AnnoType).orElse(null);\n+                \/\/fetch index annotations from code attribute.\n+                CAttr = m.findAttribute(Attributes.CODE).orElse(null);\n+                if (CAttr != null) {\n+                    cattr = CAttr.findAttribute(AnnoType).orElse(null);\n@@ -217,33 +187,15 @@\n-            catch (ConstantPoolException cpe) { cpe.printStackTrace(); }\n-            try {\n-                testClassName=cf.getName();\n-                testcase = ttype + \": \" + testClassName + \": \" +\n-                           memberName + \", \";\n-            }\n-            catch (ConstantPoolException cpe) { cpe.printStackTrace(); }\n-            if (index != -1) {\n-                switch (AnnoType) {\n-                    case Attribute.RuntimeVisibleTypeAnnotations:\n-                        \/\/count RuntimeVisibleTypeAnnotations\n-                        RuntimeVisibleTypeAnnotations_attribute RVTAa =\n-                                (RuntimeVisibleTypeAnnotations_attribute)attr;\n-                        vtaActual += RVTAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeVisibleAnnotations:\n-                        \/\/count RuntimeVisibleAnnotations\n-                        RuntimeVisibleAnnotations_attribute RVAa =\n-                                (RuntimeVisibleAnnotations_attribute)attr;\n-                        vaActual += RVAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeInvisibleTypeAnnotations:\n-                        \/\/count RuntimeInvisibleTypeAnnotations\n-                        RuntimeInvisibleTypeAnnotations_attribute RITAa =\n-                                (RuntimeInvisibleTypeAnnotations_attribute)attr;\n-                        itaActual += RITAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeInvisibleAnnotations:\n-                        \/\/count RuntimeInvisibleAnnotations\n-                        RuntimeInvisibleAnnotations_attribute RIAa =\n-                                (RuntimeInvisibleAnnotations_attribute)attr;\n-                        iaActual += RIAa.annotations.length;\n-                        break;\n+            ;\n+\/\/        testClassName=cm.getName();\n+\/\/        testcase = ttype + \": \" + testClassName + \": \" +\n+\/\/                memberName + \", \";\n+            if (attr != null) {\n+                switch (attr) {\n+                    case RuntimeVisibleTypeAnnotationsAttribute RVTAa -> \/\/count RuntimeVisibleTypeAnnotations\n+                            vtaActual += RVTAa.annotations().size();\n+                    case RuntimeVisibleAnnotationsAttribute RVAa -> \/\/count RuntimeVisibleAnnotations\n+                            vaActual += RVAa.annotations().size();\n+                    case RuntimeInvisibleTypeAnnotationsAttribute RITAa -> \/\/count RuntimeInvisibleTypeAnnotations\n+                            itaActual += RITAa.annotations().size();\n+                    case RuntimeInvisibleAnnotationsAttribute RIAa -> \/\/count RuntimeInvisibleAnnotations\n+                            iaActual += RIAa.annotations().size();\n+                    default -> throw new AssertionError();\n@@ -253,26 +205,11 @@\n-            if (index2 != -1) {\n-                switch (AnnoType) {\n-                    case Attribute.RuntimeVisibleTypeAnnotations:\n-                        \/\/count RuntimeVisibleTypeAnnotations\n-                        RuntimeVisibleTypeAnnotations_attribute RVTAa =\n-                                (RuntimeVisibleTypeAnnotations_attribute)cattr;\n-                        vtaActual += RVTAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeVisibleAnnotations:\n-                        \/\/count RuntimeVisibleAnnotations\n-                        RuntimeVisibleAnnotations_attribute RVAa =\n-                                (RuntimeVisibleAnnotations_attribute)cattr;\n-                        vaActual += RVAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeInvisibleTypeAnnotations:\n-                        \/\/count RuntimeInvisibleTypeAnnotations\n-                        RuntimeInvisibleTypeAnnotations_attribute RITAa =\n-                                (RuntimeInvisibleTypeAnnotations_attribute)cattr;\n-                        itaActual += RITAa.annotations.length;\n-                        break;\n-                    case Attribute.RuntimeInvisibleAnnotations:\n-                        \/\/count RuntimeInvisibleAnnotations\n-                        RuntimeInvisibleAnnotations_attribute RIAa =\n-                                (RuntimeInvisibleAnnotations_attribute)cattr;\n-                        iaActual += RIAa.annotations.length;\n-                        break;\n+            if (cattr != null) {\n+                switch (cattr) {\n+                    case RuntimeVisibleTypeAnnotationsAttribute RVTAa -> \/\/count RuntimeVisibleTypeAnnotations\n+                            vtaActual += RVTAa.annotations().size();\n+                    case RuntimeVisibleAnnotationsAttribute RVAa -> \/\/count RuntimeVisibleAnnotations\n+                            vaActual += RVAa.annotations().size();\n+                    case RuntimeInvisibleTypeAnnotationsAttribute RITAa -> \/\/count RuntimeInvisibleTypeAnnotations\n+                            itaActual += RITAa.annotations().size();\n+                    case RuntimeInvisibleAnnotationsAttribute RIAa -> \/\/count RuntimeInvisibleAnnotations\n+                            iaActual += RIAa.annotations().size();\n+                    default -> throw new AssertionError();\n@@ -346,2 +283,2 @@\n-    public void run() {\n-        ClassFile cf   = null;\n+    public <T extends Attribute<T>>void run() {\n+        ClassModel cm   = null;\n@@ -387,1 +324,1 @@\n-                    cf = ClassFile.read(new File(testloc+clazz));\n+                    cm = Classfile.of().parse(new File(testloc+clazz).toPath());\n@@ -391,2 +328,3 @@\n-                for (Method m: cf.methods) {\n-                    test(\"METHOD\", cf, m, null, true);\n+                assert cm != null;\n+                for (MethodModel m: cm.methods()) {\n+                    test(m);\n@@ -394,2 +332,2 @@\n-                for (Field f: cf.fields) {\n-                    test(\"FIELD\", cf, null, f, true);\n+                for (FieldModel f: cm.fields()) {\n+                    test(f);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestAnonInnerClasses.java","additions":65,"deletions":127,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -30,0 +35,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -33,1 +40,0 @@\n-import com.sun.tools.classfile.*;\n@@ -36,0 +42,1 @@\n+import java.util.Objects;\n@@ -76,2 +83,1 @@\n-    void test(String clazz, String ttype, ClassFile cf, Method m, Field f,\n-              String name, boolean codeattr) {\n+    <T extends Attribute<T>> void test(String clazz, AttributedElement m, AttributeMapper<T> name, Boolean codeattr) {\n@@ -80,24 +86,15 @@\n-        int index = 0;\n-        String memberName = null;\n-        Attribute attr = null;\n-        Code_attribute cAttr = null;\n-        String testcase = \"undefined\";\n-        try {\n-        switch(ttype) {\n-            case \"METHOD\":\n-                index = m.attributes.getIndex(cf.constant_pool, name);\n-                memberName = m.getName(cf.constant_pool);\n-                if(index != -1)\n-                    attr = m.attributes.get(index);\n-                break;\n-            case \"MCODE\":\n-                memberName = m.getName(cf.constant_pool);\n-                \/\/fetch index of and code attribute and annotations from code attribute.\n-                index = m.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-                if(index!= -1) {\n-                    attr = m.attributes.get(index);\n-                    assert attr instanceof Code_attribute;\n-                    cAttr = (Code_attribute)attr;\n-                    index = cAttr.attributes.getIndex(cf.constant_pool, name);\n-                    if(index!= -1)\n-                        attr = cAttr.attributes.get(index);\n+        String memberName;\n+        Attribute<T> attr = null;\n+        CodeAttribute cAttr;\n+        String testcase;\n+        switch (m) {\n+            case MethodModel mm -> {\n+                memberName = mm.methodName().stringValue();\n+                if(codeattr) {\n+                    \/\/fetch index of and code attribute and annotations from code attribute.\n+                    cAttr = mm.findAttribute(Attributes.CODE).orElse(null);\n+                    if(cAttr != null) {\n+                        attr = cAttr.findAttribute(name).orElse(null);\n+                    }\n+                } else {\n+                    attr = mm.findAttribute(name).orElse(null);\n@@ -105,18 +102,10 @@\n-                break;\n-            case \"FIELD\":\n-                index = f.attributes.getIndex(cf.constant_pool, name);\n-                memberName = f.getName(cf.constant_pool);\n-                if(index != -1)\n-                    attr = f.attributes.get(index);\n-                break;\n-            case \"CODE\":\n-                memberName = f.getName(cf.constant_pool);\n-                \/\/fetch index of and code attribute and annotations from code attribute.\n-                index = cf.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-                if(index!= -1) {\n-                    attr = cf.attributes.get(index);\n-                    assert attr instanceof Code_attribute;\n-                    cAttr = (Code_attribute)attr;\n-                    index = cAttr.attributes.getIndex(cf.constant_pool, name);\n-                    if(index!= -1)\n-                        attr = cAttr.attributes.get(index);\n+            }\n+            case FieldModel fm -> {\n+                memberName = fm.fieldName().stringValue();\n+                if(codeattr) {\n+                    cAttr = fm.findAttribute(Attributes.CODE).orElse(null);\n+                    if(cAttr != null) {\n+                        attr = cAttr.findAttribute(name).orElse(null);\n+                    }\n+                } else {\n+                    attr = fm.findAttribute(name).orElse(null);\n@@ -124,3 +113,2 @@\n-                break;\n-            default:\n-                break;\n+            }\n+            default -> throw new AssertionError();\n@@ -128,3 +116,2 @@\n-        } catch(ConstantPoolException cpe) { cpe.printStackTrace(); }\n-        testcase = clazz+\" \"+ttype + \": \" + memberName + \", \" + name;\n-        if(index != -1) {\n+        testcase = clazz+\" , Local: \"+ codeattr + \": \" + memberName + \", \" + name;\n+        if(attr != null) {\n@@ -132,4 +119,9 @@\n-            assert attr instanceof RuntimeTypeAnnotations_attribute;\n-            RuntimeTypeAnnotations_attribute tAttr =\n-                    (RuntimeTypeAnnotations_attribute)attr;\n-                actual += tAttr.annotations.length;\n+            switch (attr) {\n+                case RuntimeVisibleTypeAnnotationsAttribute tAttr -> {\n+                    actual += tAttr.annotations().size();\n+                }\n+                case RuntimeInvisibleTypeAnnotationsAttribute tAttr -> {\n+                    actual += tAttr.annotations().size();\n+                }\n+                default -> throw new AssertionError();\n+            }\n@@ -137,0 +129,1 @@\n+        assert memberName != null;\n@@ -207,2 +200,2 @@\n-        ClassFile cf = null;\n-        InputStream in = null;\n+        ClassModel cm = null;\n+        InputStream in;\n@@ -213,2 +206,2 @@\n-                in = getClass().getResource(testclazz).openStream();\n-                cf = ClassFile.read(in);\n+                in = Objects.requireNonNull(getClass().getResource(testclazz)).openStream();\n+                cm = Classfile.of().parse(in.readAllBytes());\n@@ -218,0 +211,1 @@\n+            assert cm != null;\n@@ -219,4 +213,4 @@\n-                for (Field f: cf.fields)\n-                    test(clazz, \"FIELD\", cf, null, f, Attribute.RuntimeVisibleTypeAnnotations, false);\n-                for (Method m: cf.methods)\n-                    test(clazz, \"METHOD\", cf, m, null, Attribute.RuntimeVisibleTypeAnnotations, false);\n+                for (FieldModel fm: cm.fields())\n+                    test(clazz, fm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, false);\n+                for (MethodModel mm: cm.methods())\n+                    test(clazz, mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, false);\n@@ -224,4 +218,4 @@\n-                for (Field f: cf.fields)\n-                    test(clazz, \"CODE\", cf, null, f, Attribute.RuntimeVisibleTypeAnnotations, true);\n-                for (Method m: cf.methods)\n-                    test(clazz, \"MCODE\", cf, m, null, Attribute.RuntimeVisibleTypeAnnotations, true);\n+                for (FieldModel fm: cm.fields())\n+                    test(clazz, fm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, true);\n+                for (MethodModel mm: cm.methods())\n+                    test(clazz, mm, Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS, true);\n@@ -353,1 +347,1 @@\n-        Object o = new Integer(1);\n+        Object o = 1;\n@@ -361,1 +355,1 @@\n-        Object o = new Integer(1);\n+        Object o = 1;\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TestNewCastArray.java","additions":64,"deletions":70,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -34,6 +39,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute;\n-import com.sun.tools.classfile.TypeAnnotation;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.CodeAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleTypeAnnotationsAttribute;\n@@ -43,0 +45,1 @@\n+import java.util.List;\n@@ -51,1 +54,1 @@\n-        ClassFile cf = getClassFile(\"TypeAnnotationPropagationTest$Test.class\");\n+        ClassModel cm = getClassFile(\"TypeAnnotationPropagationTest$Test.class\");\n@@ -53,4 +56,4 @@\n-        Method f = null;\n-        for (Method m : cf.methods) {\n-            if (m.getName(cf.constant_pool).contains(\"f\")) {\n-                f = m;\n+        MethodModel f = null;\n+        for (MethodModel mm : cm.methods()) {\n+            if (mm.methodName().stringValue().contains(\"f\")) {\n+                f = mm;\n@@ -61,5 +64,4 @@\n-        int idx = f.attributes.getIndex(cf.constant_pool, Attribute.Code);\n-        Code_attribute cattr = (Code_attribute) f.attributes.get(idx);\n-        idx = cattr.attributes.getIndex(cf.constant_pool, Attribute.RuntimeVisibleTypeAnnotations);\n-        RuntimeVisibleTypeAnnotations_attribute attr =\n-                (RuntimeVisibleTypeAnnotations_attribute) cattr.attributes.get(idx);\n+        assert f != null;\n+        CodeAttribute cattr = f.findAttribute(Attributes.CODE).orElse(null);\n+        assert cattr != null;\n+        RuntimeVisibleTypeAnnotationsAttribute attr = cattr.findAttribute(Attributes.RUNTIME_VISIBLE_TYPE_ANNOTATIONS).orElse(null);\n@@ -67,4 +69,15 @@\n-        TypeAnnotation anno = attr.annotations[0];\n-        assertEquals(anno.position.lvarOffset, new int[] {3}, \"start_pc\");\n-        assertEquals(anno.position.lvarLength, new int[] {8}, \"length\");\n-        assertEquals(anno.position.lvarIndex, new int[] {1}, \"index\");\n+        assert attr != null;\n+        List<TypeAnnotation.LocalVarTargetInfo> annosPosition = ((TypeAnnotation.LocalVarTarget) attr.annotations().get(0).targetInfo()).table();\n+        int[] lvarOffset = annosPosition.stream()\n+                .map(e -> cattr.labelToBci(e.startLabel()))\n+                .mapToInt(t -> t).toArray();\n+        int[] lvarLength = annosPosition.stream()\n+                .map(e -> cattr.labelToBci(e.endLabel()) - cattr.labelToBci(e.startLabel()))\n+                .mapToInt(t -> t).toArray();\n+        int[] lvarIndex = annosPosition.stream()\n+                .map(TypeAnnotation.LocalVarTargetInfo::index)\n+                .mapToInt(t -> t).toArray();\n+\n+        assertEquals(lvarOffset, new int[] {3}, \"start_pc\");\n+        assertEquals(lvarLength, new int[] {8}, \"length\");\n+        assertEquals(lvarIndex, new int[] {1}, \"index\");\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeAnnotationPropagationTest.java","additions":34,"deletions":21,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -36,1 +36,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -47,5 +51,4 @@\n-\n-        ClassFile cf = getClassFile(\"TypeCasts$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"TypeCasts$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -53,2 +56,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m, true);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm, true);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/TypeCasts.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n@@ -35,1 +35,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -46,4 +50,4 @@\n-        ClassFile cf = getClassFile(\"Wildcards$Test.class\");\n-        test(cf);\n-        for (Field f : cf.fields) {\n-            test(cf, f);\n+        ClassModel cm = getClassFile(\"Wildcards$Test.class\");\n+        test(cm);\n+        for (FieldModel fm : cm.fields()) {\n+            test(fm);\n@@ -51,2 +55,2 @@\n-        for (Method m: cf.methods) {\n-            test(cf, m,false);\n+        for (MethodModel mm: cm.methods()) {\n+            test(mm,false);\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Wildcards.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,0 +42,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -42,0 +49,1 @@\n+import java.util.List;\n@@ -48,1 +56,0 @@\n-import com.sun.tools.classfile.*;\n@@ -71,1 +78,1 @@\n-            ClassFile classFile = readClassFile(fileManager.getClasses().get(className));\n+            ClassModel classFile = readClassFile(fileManager.getClasses().get(className));\n@@ -73,2 +80,2 @@\n-            for (Method method : classFile.methods) {\n-                String methodName = method.getName(classFile.constant_pool);\n+            for (MethodModel method : classFile.methods()) {\n+                String methodName = method.methodName().stringValue();\n@@ -76,3 +83,2 @@\n-                AnnotationDefault_attribute attr =\n-                        (AnnotationDefault_attribute) method.attributes\n-                                .get(Attribute.AnnotationDefault);\n+                AnnotationDefaultAttribute attr =\n+                        method.findAttribute(Attributes.ANNOTATION_DEFAULT).orElse(null);\n@@ -86,2 +92,2 @@\n-                checkEquals(countNumberOfAttributes(method.attributes.attrs),\n-                        1l,\n+                checkEquals(countNumberOfAttributes(method.attributes()),\n+                        1L,\n@@ -89,2 +95,1 @@\n-                checkEquals(classFile.constant_pool\n-                        .getUTF8Value(attr.attribute_name_index),\n+                checkEquals(attr.attributeName(),\n@@ -94,1 +99,1 @@\n-                checkEquals((char) attr.default_value.tag, expectedValue.tag(),\n+                checkEquals(attr.defaultValue().tag(), expectedValue.tag(),\n@@ -96,2 +101,2 @@\n-                verifier.testElementValue(attr.default_value.tag,\n-                        this, classFile, attr.default_value,\n+                verifier.testElementValue((int)attr.defaultValue().tag(),\n+                        this, classFile, attr.defaultValue(),\n@@ -99,1 +104,1 @@\n-                verifier.testLength(attr.default_value.tag, this, attr);\n+                verifier.testLength((int)attr.defaultValue().tag(), this, attr);\n@@ -127,3 +132,3 @@\n-    private long countNumberOfAttributes(Attribute[] attrs) {\n-        return Stream.of(attrs)\n-                .filter(x -> x instanceof AnnotationDefault_attribute)\n+    private long countNumberOfAttributes(List<Attribute<?>> attrs) {\n+        return attrs.stream()\n+                .filter(x -> x instanceof AnnotationDefaultAttribute)\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultTest.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -24,4 +24,3 @@\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.AnnotationDefault_attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -54,1 +53,1 @@\n-    public void testLength(int tag, TestResult testResult, AnnotationDefault_attribute attr) {\n+    public void testLength(int tag, TestResult testResult, AnnotationDefaultAttribute attr) {\n@@ -58,3 +57,2 @@\n-    public void testElementValue(int tag, TestResult testResult, ClassFile classFile,\n-                                 Annotation.element_value element_value, String[] values)\n-            throws ConstantPool.UnexpectedEntry, ConstantPool.InvalidIndex {\n+    public void testElementValue(int tag, TestResult testResult, ClassModel classFile,\n+                                 AnnotationValue element_value, String[] values) {\n@@ -73,3 +71,4 @@\n-        public void testLength(TestResult testCase, AnnotationDefault_attribute attr) {\n-            testCase.checkEquals(attr.attribute_length, 1 + attr.default_value.length(),\n-                    \"attribute_length\");\n+        public void testLength(TestResult testCase, AnnotationDefaultAttribute attr) {\n+            \/\/ need API to return unknown AnnotationValue's length\n+\/\/            testCase.checkEquals(((BoundAttribute<?>)attr).payloadLen(), 1 + attr.defaultValue().payloadLen(),\n+\/\/                    \"attribute_length\");\n@@ -88,4 +87,3 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values)\n-                throws ConstantPool.InvalidIndex, ConstantPool.UnexpectedEntry;\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values);\n@@ -99,9 +97,20 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values) throws ConstantPool.InvalidIndex {\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Integer_info info =\n-                    (ConstantPool.CONSTANT_Integer_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testCase.checkEquals(info.value, Integer.parseInt(values[0]), \"const_value_index\");\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            switch (element_value) {\n+                case AnnotationValue.OfByte ev -> {\n+                    testCase.checkEquals((int)ev.byteValue(), Integer.parseInt(values[0]), \"const_value_index\");\n+                }\n+                case AnnotationValue.OfCharacter ev -> {\n+                    testCase.checkEquals((int)ev.charValue(), Integer.parseInt(values[0]), \"const_value_index\");\n+                }\n+                case AnnotationValue.OfShort ev -> {\n+                    testCase.checkEquals((int)ev.shortValue(), Integer.parseInt(values[0]), \"const_value_index\");\n+                }\n+                case AnnotationValue.OfBoolean ev -> {\n+                    testCase.checkEquals(ev.booleanValue()? 1: 0, Integer.parseInt(values[0]), \"const_value_index\");\n+                }\n+                default -> {\n+                    testCase.checkEquals(((AnnotationValue.OfInteger) element_value).intValue(), Integer.parseInt(values[0]), \"const_value_index\");\n+                }\n+            }\n@@ -115,9 +124,6 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values) throws ConstantPool.InvalidIndex {\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Long_info info =\n-                    (ConstantPool.CONSTANT_Long_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testCase.checkEquals(info.value, Long.parseLong(values[0]), \"const_value_index\");\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfLong ev =\n+                    (AnnotationValue.OfLong) element_value;\n+            testCase.checkEquals(ev.longValue(), Long.parseLong(values[0]), \"const_value_index\");\n@@ -131,9 +137,6 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values) throws ConstantPool.InvalidIndex {\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Float_info info =\n-                    (ConstantPool.CONSTANT_Float_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testCase.checkEquals(info.value, Float.parseFloat(values[0]), \"const_value_index\");\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfFloat ev =\n+                    (AnnotationValue.OfFloat) element_value;\n+            testCase.checkEquals(ev.floatValue(), Float.parseFloat(values[0]), \"const_value_index\");\n@@ -147,9 +150,6 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values) throws ConstantPool.InvalidIndex {\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Double_info info =\n-                    (ConstantPool.CONSTANT_Double_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testCase.checkEquals(info.value, Double.parseDouble(values[0]), \"const_value_index\");\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfDouble ev =\n+                    (AnnotationValue.OfDouble) element_value;\n+            testCase.checkEquals(ev.doubleValue(), Double.parseDouble(values[0]), \"const_value_index\");\n@@ -163,9 +163,6 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values) throws ConstantPool.InvalidIndex {\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Utf8_info info =\n-                    (ConstantPool.CONSTANT_Utf8_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testCase.checkEquals(info.value, values[0], \"const_value_index\");\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfString ev =\n+                    (AnnotationValue.OfString) element_value;\n+            testCase.checkEquals(ev.stringValue(), values[0], \"const_value_index\");\n@@ -185,6 +182,5 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values)\n-                throws ConstantPool.InvalidIndex, ConstantPool.UnexpectedEntry {\n-            Annotation.Enum_element_value ev = (Annotation.Enum_element_value) element_value;\n-            testCase.checkEquals(classFile.constant_pool.getUTF8Info(ev.type_name_index).value,\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfEnum ev = (AnnotationValue.OfEnum) element_value;\n+            testCase.checkEquals(ev.classSymbol().descriptorString(),\n@@ -192,1 +188,1 @@\n-            testCase.checkEquals(classFile.constant_pool.getUTF8Info(ev.const_name_index).value,\n+            testCase.checkEquals(ev.constantName().stringValue(),\n@@ -201,5 +197,4 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values)\n-                throws ConstantPool.InvalidIndex, ConstantPool.UnexpectedEntry {\n-            Annotation.Class_element_value ev = (Annotation.Class_element_value) element_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfClass ev = (AnnotationValue.OfClass) element_value;\n@@ -207,1 +202,1 @@\n-                    classFile.constant_pool.getUTF8Info(ev.class_info_index).value,\n+                    ev.classSymbol().descriptorString(),\n@@ -214,1 +209,1 @@\n-        public void testLength(TestResult testCase, AnnotationDefault_attribute attr) {\n+        public void testLength(TestResult testCase, AnnotationDefaultAttribute attr) {\n@@ -228,6 +223,5 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values)\n-                throws ConstantPool.InvalidIndex, ConstantPool.UnexpectedEntry {\n-            Annotation ev = ((Annotation.Annotation_element_value) element_value)\n-                    .annotation_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            Annotation ev = ((AnnotationValue.OfAnnotation) element_value)\n+                    .annotation();\n@@ -235,1 +229,1 @@\n-                    classFile.constant_pool.getUTF8Info(ev.type_index).value,\n+                    ev.classSymbol().descriptorString(),\n@@ -238,2 +232,2 @@\n-            for (int i = 0; i < ev.num_element_value_pairs; ++i) {\n-                Annotation.element_value_pair pair = ev.element_value_pairs[i];\n+            for (int i = 0; i < ev.elements().size(); ++i) {\n+                AnnotationElement pair = ev.elements().get(i);\n@@ -241,1 +235,1 @@\n-                        classFile.constant_pool.getUTF8Info(pair.element_name_index).value,\n+                        pair.name().stringValue(),\n@@ -244,1 +238,1 @@\n-                TestElementValue testElementValue = verifiers.get(pair.value.tag);\n+                TestElementValue testElementValue = verifiers.get((int)pair.value().tag());\n@@ -248,1 +242,1 @@\n-                        pair.value,\n+                        pair.value(),\n@@ -256,4 +250,4 @@\n-        public void testLength(TestResult testCase, AnnotationDefault_attribute attr) {\n-            Annotation.Array_element_value ev =\n-                    (Annotation.Array_element_value) attr.default_value;\n-            int sizeOfTag = ev.values[0].tag == 'e' ? 0 : 1;\n+        public void testLength(TestResult testCase, AnnotationDefaultAttribute attr) {\n+            AnnotationValue.OfArray ev =\n+                    (AnnotationValue.OfArray) attr.defaultValue();\n+            int sizeOfTag = ev.values().get(0).tag() == 'e' ? 0 : 1;\n@@ -261,2 +255,3 @@\n-            testCase.checkEquals(attr.attribute_length, 1 + 2 +\n-                    (sizeOfTag + ev.length() \/ ev.num_values) * ev.num_values, \"attribute_length\");\n+            \/\/ need ev.length() api to check length\n+\/\/            testCase.checkEquals(((BoundAttribute<?>)attr).payloadLen(), 1 + 2 +\n+\/\/                    (sizeOfTag + ev.length() \/ ev.values().size()) * ev.values().size(), \"attribute_length\");\n@@ -268,6 +263,5 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value,\n-                String[] values)\n-                throws ConstantPool.InvalidIndex, ConstantPool.UnexpectedEntry {\n-            Annotation.Array_element_value ev =\n-                    (Annotation.Array_element_value) element_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value,\n+                String[] values) {\n+            AnnotationValue.OfArray ev =\n+                    (AnnotationValue.OfArray) element_value;\n@@ -275,2 +269,2 @@\n-            for (int i = 0; i < ev.num_values; ++i) {\n-                TestElementValue testElementValue = verifiers.get(ev.values[i].tag);\n+            for (int i = 0; i < ev.values().size(); ++i) {\n+                TestElementValue testElementValue = verifiers.get((int)ev.values().get(i).tag());\n@@ -281,1 +275,1 @@\n-                        ev.values[i],\n+                        ev.values().get(i),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":95,"deletions":101,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+            java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,3 +41,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.EnclosingMethod_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.EnclosingMethodAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -143,1 +148,1 @@\n-                ClassFile classFile = readClassFile(clazz);\n+                ClassModel classFile = readClassFile(clazz);\n@@ -145,2 +150,2 @@\n-                        0l, \"number of the EnclosingMethod attribute in the class is zero : \"\n-                                + classFile.getName());\n+                        0L, \"number of the EnclosingMethod attribute in the class is zero : \"\n+                                + classFile.thisClass().name());\n@@ -160,1 +165,1 @@\n-                ClassFile classFile = readClassFile(clazz);\n+                ClassModel classFile = readClassFile(clazz);\n@@ -165,2 +170,1 @@\n-                EnclosingMethod_attribute attr = (EnclosingMethod_attribute)\n-                        classFile.getAttribute(Attribute.EnclosingMethod);\n+                EnclosingMethodAttribute attr = classFile.findAttribute(Attributes.ENCLOSING_METHOD).orElse(null);\n@@ -172,1 +176,1 @@\n-                checkEquals(classFile.constant_pool.getUTF8Value(attr.attribute_name_index),\n+                checkEquals(attr.attributeName(),\n@@ -175,1 +179,1 @@\n-                checkEquals(attr.attribute_length, 4,\n+                checkEquals(((BoundAttribute<?>)attr).payloadLen(), 4,\n@@ -178,1 +182,1 @@\n-                checkEquals(classFile.constant_pool.getClassInfo(attr.class_index).getName(),\n+                checkEquals(attr.enclosingClass().name().stringValue(),\n@@ -186,1 +190,1 @@\n-                    checkEquals(attr.method_index, 0, String.format(\n+                    checkEquals(attr.enclosingMethod().isPresent()? attr.enclosingMethod().get().index(): 0, 0, String.format(\n@@ -189,1 +193,1 @@\n-                    String methodName = classFile.constant_pool.getNameAndTypeInfo(attr.method_index).getName();\n+                    String methodName = attr.enclosingMethodName().get().stringValue() + attr.enclosingMethodType().get().stringValue();\n@@ -202,3 +206,3 @@\n-    private long countEnclosingMethodAttributes(ClassFile classFile) {\n-        return Stream.of(classFile.attributes.attrs)\n-                .filter(x -> x instanceof EnclosingMethod_attribute)\n+    private long countEnclosingMethodAttributes(ClassModel classFile) {\n+        return classFile.attributes().stream()\n+                .filter(x -> x instanceof EnclosingMethodAttribute)\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/EnclosingMethod\/EnclosingMethodTest.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,1 +24,3 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -35,2 +37,0 @@\n-import static com.sun.tools.classfile.Attribute.Code;\n-import static com.sun.tools.classfile.Attribute.LineNumberTable;\n@@ -70,1 +70,1 @@\n-                    ClassFile classFile;\n+                    ClassModel classFile;\n@@ -72,1 +72,1 @@\n-                        classFile = ClassFile.read(input);\n+                        classFile = Classfile.of().parse(input.readAllBytes());\n@@ -74,2 +74,2 @@\n-                    for (Method m : classFile.methods) {\n-                        Code_attribute code_attribute = (Code_attribute) m.attributes.get(Code);\n+                    for (MethodModel m : classFile.methods()) {\n+                        CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n@@ -77,0 +77,1 @@\n+                        assert code_attribute != null;\n@@ -78,1 +79,1 @@\n-                                countAttributes(LineNumberTable, code_attribute.attributes.attrs, classFile.constant_pool),\n+                                countAttributes(Attributes.LINE_NUMBER_TABLE, code_attribute),\n@@ -82,3 +83,3 @@\n-                        LineNumberTable_attribute tableAttribute =\n-                                (LineNumberTable_attribute) code_attribute.attributes.get(LineNumberTable);\n-                        checkAttribute(testCase, tableAttribute, code_attribute.code_length);\n+                        LineNumberTableAttribute tableAttribute = code_attribute.findAttribute(Attributes.LINE_NUMBER_TABLE).orElse(null);\n+                        assert tableAttribute != null;\n+                        checkAttribute(testCase, tableAttribute, code_attribute.codeLength());\n@@ -86,2 +87,2 @@\n-                                Stream.of(tableAttribute.line_number_table)\n-                                        .map(e -> e.line_number)\n+                                tableAttribute.lineNumbers().stream()\n+                                        .map(LineNumberInfo::lineNumber)\n@@ -90,1 +91,1 @@\n-                        TestCase.MethodData expected = testCase.findData(m.getName(classFile.constant_pool));\n+                        TestCase.MethodData expected = testCase.findData(m.methodName().stringValue());\n@@ -137,1 +138,1 @@\n-    private int countAttributes(String name, Attribute[] attrs, ConstantPool constant_pool) throws ConstantPoolException {\n+    private <T extends Attribute<T>> int countAttributes(AttributeMapper<T> attr, AttributedElement attributedElement) {\n@@ -139,2 +140,2 @@\n-        for (Attribute attribute : attrs) {\n-            if (name.equals(attribute.getName(constant_pool))) {\n+        for (Attribute<?> attribute : attributedElement.attributes()) {\n+            if (attribute.attributeName().equals(attr.name())) {\n@@ -147,3 +148,4 @@\n-    private void checkAttribute(TestCase testCase, LineNumberTable_attribute tableAttribute, int code_length) {\n-        assertEquals(tableAttribute.line_number_table_length, tableAttribute.line_number_table.length,\n-                \"Incorrect line number table length.\");\n+    private void checkAttribute(TestCase testCase, LineNumberTableAttribute tableAttribute, int code_length) {\n+        \/\/ This test is unnecessary\n+\/\/        assertEquals(tableAttribute.line_number_table_length, tableAttribute.line_number_table.length,\n+\/\/                \"Incorrect line number table length.\");\n@@ -151,1 +153,1 @@\n-        assertEquals(tableAttribute.attribute_length, 2 + 4 * tableAttribute.line_number_table_length,\n+        assertEquals(((BoundAttribute<?>)tableAttribute).payloadLen(), 2 + 4 * tableAttribute.lineNumbers().size(),\n@@ -155,2 +157,2 @@\n-                Stream.of(tableAttribute.line_number_table)\n-                        .filter(e -> e.start_pc >= code_length)\n+                tableAttribute.lineNumbers().stream()\n+                        .filter(e -> e.startPc() >= code_length)\n@@ -165,3 +167,3 @@\n-    private void testNonEmptyLine(String[] source, LineNumberTable_attribute attribute) {\n-        for (LineNumberTable_attribute.Entry e : attribute.line_number_table) {\n-            String line = source[e.line_number - 1].trim();\n+    private void testNonEmptyLine(String[] source, LineNumberTableAttribute attribute) {\n+        for (LineNumberInfo e : attribute.lineNumbers()) {\n+            String line = source[e.lineNumber() - 1].trim();\n@@ -169,1 +171,1 @@\n-                    format(\"Expect that line #%d is not empty.%n\", e.line_number));\n+                    format(\"Expect that line #%d is not empty.%n\", e.lineNumber()));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/LineNumberTestBase.java","additions":29,"deletions":27,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/MultipleRecordPatterns.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/RuleSwitchBreaks.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/StringSwitchBreaks.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5,1 +5,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -17,1 +22,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -20,2 +26,2 @@\n-    public static void main(String[] args) throws IOException, ConstantPoolException {\n-        ClassFile someTestIn = ClassFile.read(T8050993.class.getResourceAsStream(\"T8050993.class\"));\n+    public static void main(String[] args) throws IOException {\n+        ClassModel someTestIn = Classfile.of().parse(T8050993.class.getResourceAsStream(\"T8050993.class\").readAllBytes());\n@@ -23,9 +29,11 @@\n-        for (Method m : someTestIn.methods) {\n-            if (\"method\".equals(m.getName(someTestIn.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute) m.attributes.get(Attribute.Code);\n-                for (Attribute at : code_attribute.attributes) {\n-                    if (Attribute.LineNumberTable.equals(at.getName(someTestIn.constant_pool))) {\n-                        LineNumberTable_attribute att = (LineNumberTable_attribute) at;\n-                        Set<Integer> actualLinesNumbers = Arrays.stream(att.line_number_table)\n-                                                                .map(e -> e.line_number)\n-                                                                .collect(Collectors.toSet());\n+        for (MethodModel m : someTestIn.methods()) {\n+            if (m.methodName().equalsString(\"method\")) {\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                assert code_attribute != null;\n+                for (Attribute<?> at : code_attribute.attributes()) {\n+                    if (Attributes.LINE_NUMBER_TABLE.equals(at)) {\n+                        assert at instanceof LineNumberTableAttribute;\n+                        LineNumberTableAttribute att = (LineNumberTableAttribute) at;\n+                        Set<Integer> actualLinesNumbers = Arrays.stream(att.lineNumbers().toArray(new LineNumberInfo[0]))\n+                                .map(LineNumberInfo::lineNumber)\n+                                .collect(Collectors.toSet());\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LineNumberTable\/T8050993.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -39,2 +44,2 @@\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LocalVariableTable_attribute;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -77,5 +82,5 @@\n-    protected List<VariableTable> getVariableTables(Code_attribute codeAttribute) {\n-        return Stream.of(codeAttribute.attributes.attrs)\n-                .filter(at -> at instanceof LocalVariableTable_attribute)\n-                .map(at -> (LocalVariableTable_attribute) at)\n-                .map((t) -> new LocalVariableTable(t)).collect(toList());\n+    protected List<VariableTable> getVariableTables(CodeAttribute codeAttribute) {\n+        return codeAttribute.attributes().stream()\n+                .filter(at -> at instanceof LocalVariableTableAttribute)\n+                .map(at -> (LocalVariableTableAttribute) at)\n+                .map(LocalVariableTable::new).collect(toList());\n@@ -188,1 +193,1 @@\n-        final LocalVariableTable_attribute att;\n+        final LocalVariableTableAttribute att;\n@@ -190,1 +195,1 @@\n-        public LocalVariableTable(LocalVariableTable_attribute att) {\n+        public LocalVariableTable(LocalVariableTableAttribute att) {\n@@ -196,1 +201,1 @@\n-            return att.local_variable_table_length;\n+            return att.localVariables().size();\n@@ -201,1 +206,1 @@\n-            return Stream.of(att.local_variable_table).map(LocalVariableTableEntry::new).collect(toList());\n+            return att.localVariables().stream().map(LocalVariableTableEntry::new).collect(toList());\n@@ -206,1 +211,1 @@\n-            return att.attribute_length;\n+            return ((BoundAttribute<?>) att).payloadLen();\n@@ -211,1 +216,1 @@\n-            final LocalVariableTable_attribute.Entry entry;\n+            final LocalVariableInfo entry;\n@@ -213,1 +218,1 @@\n-            private LocalVariableTableEntry(LocalVariableTable_attribute.Entry entry) {\n+            private LocalVariableTableEntry(LocalVariableInfo entry) {\n@@ -219,1 +224,1 @@\n-                return entry.index;\n+                return entry.slot();\n@@ -224,1 +229,1 @@\n-                return entry.start_pc;\n+                return entry.startPc();\n@@ -229,1 +234,1 @@\n-                return entry.length;\n+                return entry.length();\n@@ -234,1 +239,1 @@\n-                return getString(entry.name_index);\n+                return entry.name().stringValue();\n@@ -239,1 +244,1 @@\n-                return getString(entry.descriptor_index);\n+                return entry.type().stringValue();\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTableTest.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -53,1 +54,1 @@\n-    private final ClassFile classFile;\n+    private final ClassModel classFile;\n@@ -62,2 +63,2 @@\n-            this.classFile = ClassFile.read(getClassFile(clazz));\n-        } catch (IOException | ConstantPoolException e) {\n+            this.classFile = Classfile.of().parse(getClassFile(clazz).toPath());\n+        } catch (IOException e) {\n@@ -68,1 +69,1 @@\n-    protected abstract List<VariableTable> getVariableTables(Code_attribute codeAttribute);\n+    protected abstract List<VariableTable> getVariableTables(CodeAttribute codeAttribute);\n@@ -77,1 +78,1 @@\n-                .collect(toList());\n+                .toList();\n@@ -102,2 +103,2 @@\n-        for (Method m : classFile.methods) {\n-            String mName = getString(m.name_index);\n+        for (MethodModel m : classFile.methods()) {\n+            String mName = m.methodName().stringValue();\n@@ -106,2 +107,2 @@\n-                Code_attribute code_attribute = (Code_attribute) m.attributes.get(Attribute.Code);\n-\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                assert code_attribute != null;\n@@ -118,1 +119,1 @@\n-                checkDoubleAndLongIndexes(entries, sig2scope, code_attribute.max_locals);\n+                checkDoubleAndLongIndexes(entries, sig2scope, code_attribute.maxLocals());\n@@ -134,1 +135,1 @@\n-    private void generalEntriesCheck(List<VariableTable.Entry> entries, Code_attribute code_attribute) {\n+    private void generalEntriesCheck(List<VariableTable.Entry> entries, CodeAttribute code_attribute) {\n@@ -136,2 +137,2 @@\n-            assertTrue(e.index() >= 0 && e.index() < code_attribute.max_locals,\n-                    \"Index \" + e.index() + \" out of variable array. Size of array is \" + code_attribute.max_locals);\n+            assertTrue(e.index() >= 0 && e.index() < code_attribute.maxLocals(),\n+                    \"Index \" + e.index() + \" out of variable array. Size of array is \" + code_attribute.maxLocals());\n@@ -140,1 +141,1 @@\n-            assertTrue(e.startPC() + e.length() <= code_attribute.code_length,\n+            assertTrue(e.startPC() + e.length() <= code_attribute.codeLength(),\n@@ -144,1 +145,1 @@\n-                            , e, code_attribute.code_length));\n+                            , e, code_attribute.codeLength()));\n@@ -208,8 +209,9 @@\n-    protected String getString(int i) {\n-        try {\n-            return classFile.constant_pool.getUTF8Info(i).value;\n-        } catch (ConstantPool.InvalidIndex | ConstantPool.UnexpectedEntry ex) {\n-            ex.printStackTrace();\n-            throw new AssertionFailedException(\"Issue while reading constant pool\");\n-        }\n-    }\n+    \/\/ Don't need the getString method now\n+\/\/    protected String getString(int i) {\n+\/\/        try {\n+\/\/            return classFile.constant_pool.getUTF8Info(i).value;\n+\/\/        } catch (ConstantPool.InvalidIndex | ConstantPool.UnexpectedEntry ex) {\n+\/\/            ex.printStackTrace();\n+\/\/            throw new AssertionFailedException(\"Issue while reading constant pool\");\n+\/\/        }\n+\/\/    }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTestBase.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,2 +43,2 @@\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LocalVariableTypeTable_attribute;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -61,4 +66,4 @@\n-    protected List<VariableTable> getVariableTables(Code_attribute codeAttribute) {\n-        return Stream.of(codeAttribute.attributes.attrs)\n-                .filter(at -> at instanceof LocalVariableTypeTable_attribute)\n-                .map(at -> (LocalVariableTypeTable_attribute) at)\n+    protected List<VariableTable> getVariableTables(CodeAttribute codeAttribute) {\n+        return codeAttribute.attributes().stream()\n+                .filter(at -> at instanceof LocalVariableTypeTableAttribute)\n+                .map(at -> (LocalVariableTypeTableAttribute) at)\n@@ -138,1 +143,1 @@\n-        final LocalVariableTypeTable_attribute att;\n+        final LocalVariableTypeTableAttribute att;\n@@ -141,1 +146,1 @@\n-        public LocalVariableTypeTable(LocalVariableTypeTable_attribute att) {\n+        public LocalVariableTypeTable(LocalVariableTypeTableAttribute att) {\n@@ -147,1 +152,1 @@\n-            return att.local_variable_table_length;\n+            return att.localVariableTypes().size();\n@@ -152,1 +157,1 @@\n-            return Stream.of(att.local_variable_table).map(LocalVariableTypeTableEntry::new).collect(toList());\n+            return att.localVariableTypes().stream().map(LocalVariableTypeTableEntry::new).collect(toList());\n@@ -157,1 +162,1 @@\n-            return att.attribute_length;\n+            return ((BoundAttribute<?>)att).payloadLen();\n@@ -162,1 +167,1 @@\n-            final LocalVariableTypeTable_attribute.Entry entry;\n+            final LocalVariableTypeInfo entry;\n@@ -164,1 +169,1 @@\n-            private LocalVariableTypeTableEntry(LocalVariableTypeTable_attribute.Entry entry) {\n+            private LocalVariableTypeTableEntry(LocalVariableTypeInfo entry) {\n@@ -170,1 +175,1 @@\n-                return entry.index;\n+                return entry.slot();\n@@ -175,1 +180,1 @@\n-                return entry.start_pc;\n+                return entry.startPc();\n@@ -180,1 +185,1 @@\n-                return entry.length;\n+                return entry.length();\n@@ -185,1 +190,1 @@\n-                return getString(entry.name_index);\n+                return entry.name().stringValue();\n@@ -190,1 +195,1 @@\n-                return getString(entry.signature_index);\n+                return entry.signature().stringValue();\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/LocalVariableTable\/LocalVariableTypeTableTest.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,3 +42,3 @@\n-import com.sun.tools.classfile.AccessFlags;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.AccessFlags;\n+import jdk.internal.classfile.Classfile;\n+import java.lang.reflect.AccessFlag;\n@@ -49,1 +54,1 @@\n-    public static void main(String[] args) throws IOException, ConstantPoolException {\n+    public static void main(String[] args) throws IOException {\n@@ -59,3 +64,3 @@\n-        AccessFlags accessFlags = ClassFile.read(outdir.resolve(\"module-info.class\"))\n-                .access_flags;\n-        if (!accessFlags.is(AccessFlags.ACC_MODULE)) {\n+        AccessFlags accessFlags = Classfile.of().parse(outdir.resolve(\"module-info.class\"))\n+                .flags();\n+        if (!accessFlags.has(AccessFlag.MODULE)) {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleFlagTest.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,4 +24,3 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Module_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -73,4 +72,4 @@\n-        ClassFile classFile = ClassFile.read(modulePath.resolve(\"module-info.class\"));\n-        Module_attribute moduleAttribute = (Module_attribute) classFile.getAttribute(\"Module\");\n-        ConstantPool constantPool = classFile.constant_pool;\n-        testModuleName(moduleDescriptor, moduleAttribute, constantPool);\n+        ClassModel classFile = Classfile.of().parse(modulePath.resolve(\"module-info.class\"));\n+        ModuleAttribute moduleAttribute = classFile.findAttribute(Attributes.MODULE).orElse(null);\n+        assert moduleAttribute != null;\n+        testModuleName(moduleDescriptor, moduleAttribute);\n@@ -78,5 +77,5 @@\n-        testRequires(moduleDescriptor, moduleAttribute, constantPool);\n-        testExports(moduleDescriptor, moduleAttribute, constantPool);\n-        testOpens(moduleDescriptor, moduleAttribute, constantPool);\n-        testProvides(moduleDescriptor, moduleAttribute, constantPool);\n-        testUses(moduleDescriptor, moduleAttribute, constantPool);\n+        testRequires(moduleDescriptor, moduleAttribute);\n+        testExports(moduleDescriptor, moduleAttribute);\n+        testOpens(moduleDescriptor, moduleAttribute);\n+        testProvides(moduleDescriptor, moduleAttribute);\n+        testUses(moduleDescriptor, moduleAttribute);\n@@ -85,2 +84,2 @@\n-    private void testModuleName(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        tr.checkEquals(constantPool.getModuleInfo(module.module_name).getName(), moduleDescriptor.name, \"Unexpected module name\");\n+    private void testModuleName(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.moduleName().name().stringValue(), moduleDescriptor.name, \"Unexpected module name\");\n@@ -89,2 +88,2 @@\n-    private void testModuleFlags(ModuleDescriptor moduleDescriptor, Module_attribute module) {\n-        tr.checkEquals(module.module_flags, moduleDescriptor.flags, \"Unexpected module flags\");\n+    private void testModuleFlags(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.moduleFlagsMask(), moduleDescriptor.flags, \"Unexpected module flags\");\n@@ -93,2 +92,2 @@\n-    private void testRequires(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        tr.checkEquals(module.requires_count, moduleDescriptor.requires.size(), \"Wrong amount of requires.\");\n+    private void testRequires(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.requires().size(), moduleDescriptor.requires.size(), \"Wrong amount of requires.\");\n@@ -97,1 +96,1 @@\n-        for (Module_attribute.RequiresEntry require : module.requires) {\n+        for (ModuleRequireInfo require : module.requires()) {\n@@ -99,2 +98,2 @@\n-                    require.getRequires(constantPool),\n-                    require.requires_flags));\n+                    require.requires().name().stringValue(),\n+                    require.requiresFlagsMask()));\n@@ -105,4 +104,4 @@\n-    private void testExports(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        tr.checkEquals(module.exports_count, moduleDescriptor.exports.size(), \"Wrong amount of exports.\");\n-        for (Module_attribute.ExportsEntry export : module.exports) {\n-            String pkg = constantPool.getPackageInfo(export.exports_index).getName();\n+    private void testExports(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.exports().size(), moduleDescriptor.exports.size(), \"Wrong amount of exports.\");\n+        for (ModuleExportInfo export : module.exports()) {\n+            String pkg = export.exportedPackage().name().stringValue();\n@@ -111,1 +110,1 @@\n-                tr.checkEquals(expectedExport.mask, export.exports_flags, \"Wrong export flags\");\n+                tr.checkEquals(expectedExport.mask, export.exportsFlagsMask(), \"Wrong export flags\");\n@@ -113,1 +112,1 @@\n-                tr.checkEquals(export.exports_to_count, expectedTo.size(), \"Wrong amount of exports to\");\n+                tr.checkEquals(export.exportsTo().size(), expectedTo.size(), \"Wrong amount of exports to\");\n@@ -115,2 +114,2 @@\n-                for (int toIdx : export.exports_to_index) {\n-                    actualTo.add(constantPool.getModuleInfo(toIdx).getName());\n+                for (ModuleEntry toIdx : export.exportsTo()) {\n+                    actualTo.add(toIdx.name().stringValue());\n@@ -123,4 +122,4 @@\n-    private void testOpens(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        tr.checkEquals(module.opens_count, moduleDescriptor.opens.size(), \"Wrong amount of opens.\");\n-        for (Module_attribute.OpensEntry open : module.opens) {\n-            String pkg = constantPool.getPackageInfo(open.opens_index).getName();\n+    private void testOpens(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.opens().size(), moduleDescriptor.opens.size(), \"Wrong amount of opens.\");\n+        for (ModuleOpenInfo open : module.opens()) {\n+            String pkg = open.openedPackage().name().stringValue();\n@@ -129,1 +128,1 @@\n-                tr.checkEquals(expectedOpen.mask, open.opens_flags, \"Wrong open flags\");\n+                tr.checkEquals(expectedOpen.mask, open.opensFlagsMask(), \"Wrong open flags\");\n@@ -131,1 +130,1 @@\n-                tr.checkEquals(open.opens_to_count, expectedTo.size(), \"Wrong amount of opens to\");\n+                tr.checkEquals(open.opensTo().size(), expectedTo.size(), \"Wrong amount of opens to\");\n@@ -133,2 +132,2 @@\n-                for (int toIdx : open.opens_to_index) {\n-                    actualTo.add(constantPool.getModuleInfo(toIdx).getName());\n+                for (ModuleEntry toIdx : open.opensTo()) {\n+                    actualTo.add(toIdx.name().stringValue());\n@@ -141,2 +140,2 @@\n-    private void testUses(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        tr.checkEquals(module.uses_count, moduleDescriptor.uses.size(), \"Wrong amount of uses.\");\n+    private void testUses(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        tr.checkEquals(module.uses().size(), moduleDescriptor.uses.size(), \"Wrong amount of uses.\");\n@@ -144,2 +143,3 @@\n-        for (int usesIdx : module.uses_index) {\n-            String uses = constantPool.getClassInfo(usesIdx).getBaseName();\n+        for (ClassEntry usesIdx : module.uses()) {\n+            if (!usesIdx.asSymbol().isClassOrInterface()) continue; \/\/get basename\n+            String uses = usesIdx.asInternalName();\n@@ -151,3 +151,3 @@\n-    private void testProvides(ModuleDescriptor moduleDescriptor, Module_attribute module, ConstantPool constantPool) throws ConstantPoolException {\n-        int moduleProvidesCount = Arrays.asList(module.provides).stream()\n-                .mapToInt(e -> e.with_index.length)\n+    private void testProvides(ModuleDescriptor moduleDescriptor, ModuleAttribute module) {\n+        int moduleProvidesCount = module.provides().stream()\n+                .mapToInt(e -> e.providesWith().size())\n@@ -160,2 +160,3 @@\n-        for (Module_attribute.ProvidesEntry provide : module.provides) {\n-            String provides = constantPool.getClassInfo(provide.provides_index).getBaseName();\n+        for (ModuleProvideInfo provide : module.provides()) {\n+            if (!provide.provides().asSymbol().isClassOrInterface()) continue;\n+            String provides = provide.provides().asInternalName();\n@@ -163,2 +164,3 @@\n-            for (int i = 0; i < provide.with_count; i++) {\n-                String with = constantPool.getClassInfo(provide.with_index[i]).getBaseName();\n+            for (ClassEntry withEntry: provide.providesWith()) {\n+                if (!withEntry.asSymbol().isClassOrInterface()) continue;\n+                String with = withEntry.asInternalName();\n@@ -194,1 +196,1 @@\n-        OPEN(\"open\", Module_attribute.ACC_OPEN);\n+        OPEN(\"open\", Classfile.ACC_OPEN);\n@@ -211,3 +213,3 @@\n-        TRANSITIVE(\"transitive\", Module_attribute.ACC_TRANSITIVE),\n-        STATIC(\"static\", Module_attribute.ACC_STATIC_PHASE),\n-        MANDATED(\"\", Module_attribute.ACC_MANDATED);\n+        TRANSITIVE(\"transitive\", Classfile.ACC_TRANSITIVE),\n+        STATIC(\"static\", Classfile.ACC_STATIC_PHASE),\n+        MANDATED(\"\", Classfile.ACC_MANDATED);\n@@ -230,1 +232,1 @@\n-        SYNTHETIC(\"\", Module_attribute.ACC_SYNTHETIC);\n+        SYNTHETIC(\"\", Classfile.ACC_SYNTHETIC);\n@@ -247,1 +249,1 @@\n-        SYNTHETIC(\"\", Module_attribute.ACC_SYNTHETIC);\n+        SYNTHETIC(\"\", Classfile.ACC_SYNTHETIC);\n@@ -329,1 +331,1 @@\n-        StringBuilder content = new StringBuilder(\"\");\n+        StringBuilder content = new StringBuilder();\n@@ -373,1 +375,1 @@\n-                    .collect(Collectors.toList());\n+                    .toList();\n@@ -399,1 +401,1 @@\n-                    .collect(Collectors.toList());\n+                    .toList();\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Module\/ModuleTestBase.java","additions":60,"deletions":58,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ConstructorTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -30,0 +30,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -37,0 +38,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -52,3 +54,0 @@\n-\n-    private final static String ACC_BRIDGE = \"ACC_BRIDGE\";\n-\n@@ -81,1 +80,1 @@\n-        return Stream.of(clazz.getAnnotationsByType(ExpectedSignature.class))\n+        return Arrays.stream(clazz.getAnnotationsByType(ExpectedSignature.class))\n@@ -100,1 +99,1 @@\n-        return Stream.of(executables)\n+        return Arrays.stream(executables)\n@@ -118,1 +117,1 @@\n-        return Stream.of(clazz.getDeclaredFields())\n+        return Arrays.stream(clazz.getDeclaredFields())\n@@ -133,1 +132,1 @@\n-                    ClassFile classFile = readClassFile(file);\n+                    ClassModel classFile = readClassFile(file);\n@@ -138,2 +137,1 @@\n-                            classFile,\n-                            () -> (Signature_attribute) classFile.getAttribute(Attribute.Signature),\n+                            () -> classFile.findAttribute(Attributes.SIGNATURE).orElse(null),\n@@ -166,3 +164,2 @@\n-    private void testMethods(Map<String, ExpectedSignature> expectedSignatures, ClassFile classFile)\n-            throws ConstantPoolException, Descriptor.InvalidDescriptor {\n-        String className = classFile.getName();\n+    private void testMethods(Map<String, ExpectedSignature> expectedSignatures, ClassModel classFile) {\n+        String className = classFile.thisClass().name().stringValue();\n@@ -170,2 +167,2 @@\n-        for (Method method : classFile.methods) {\n-            String methodName = getMethodName(classFile, method);\n+        for (MethodModel method : classFile.methods()) {\n+            String methodName = getMethodName(method);\n@@ -173,1 +170,1 @@\n-            if (method.access_flags.getMethodFlags().contains(ACC_BRIDGE)) {\n+            if (method.flags().has(AccessFlag.BRIDGE)) {\n@@ -179,2 +176,1 @@\n-                    classFile,\n-                    () -> (Signature_attribute) method.attributes.get(Attribute.Signature),\n+                    () -> method.findAttribute(Attributes.SIGNATURE).orElse(null),\n@@ -188,5 +184,13 @@\n-    private String getMethodName(ClassFile classFile, Method method)\n-            throws ConstantPoolException, Descriptor.InvalidDescriptor {\n-        return String.format(\"%s%s\",\n-                method.getName(classFile.constant_pool),\n-                method.descriptor.getParameterTypes(classFile.constant_pool));\n+    private String getMethodName(MethodModel method) {\n+        StringBuilder methodName = new StringBuilder(method.methodName().stringValue() + \"(\");\n+        List<ClassDesc> paras = method.methodTypeSymbol().parameterList();\n+        for (int i = 0; i < method.methodTypeSymbol().parameterCount(); ++i) {\n+            if (i != 0) {\n+                methodName.append(\", \");\n+            }\n+            ClassDesc para = paras.get(i);\n+            String prefix = para.componentType() == null? para.packageName(): para.componentType().packageName();\n+            methodName.append(prefix).append(Objects.equals(prefix, \"\") ? \"\":\".\").append(para.displayName());\n+        }\n+        methodName.append(\")\");\n+        return methodName.toString();\n@@ -195,3 +199,2 @@\n-    private void testFields(Map<String, ExpectedSignature> expectedSignatures, ClassFile classFile)\n-            throws ConstantPoolException {\n-        String className = classFile.getName();\n+    private void testFields(Map<String, ExpectedSignature> expectedSignatures, ClassModel classFile) {\n+        String className = classFile.thisClass().name().stringValue();\n@@ -199,2 +202,2 @@\n-        for (Field field : classFile.fields) {\n-            String fieldName = field.getName(classFile.constant_pool);\n+        for (FieldModel field : classFile.fields()) {\n+            String fieldName = field.fieldName().stringValue();\n@@ -204,2 +207,1 @@\n-                    classFile,\n-                    () -> (Signature_attribute) field.attributes.get(Attribute.Signature),\n+                    () -> field.findAttribute(Attributes.SIGNATURE).orElse(null),\n@@ -215,4 +217,2 @@\n-            ClassFile classFile,\n-            Supplier<Signature_attribute> sup,\n-            ExpectedSignature expectedSignature)\n-            throws ConstantPoolException {\n+            Supplier<SignatureAttribute> sup,\n+            ExpectedSignature expectedSignature) {\n@@ -220,1 +220,1 @@\n-        Signature_attribute attribute = sup.get();\n+        SignatureAttribute attribute = sup.get();\n@@ -222,1 +222,1 @@\n-            checkEquals(classFile.constant_pool.getUTF8Value(attribute.attribute_name_index),\n+            checkEquals(attribute.attributeName(),\n@@ -224,2 +224,2 @@\n-            checkEquals(attribute.attribute_length, 2, \"Attribute's length : \" + memberName);\n-            checkEquals(attribute.getSignature(classFile.constant_pool),\n+            checkEquals(((BoundAttribute<?>)attribute).payloadLen(), 2, \"Attribute's length : \" + memberName);\n+            checkEquals(attribute.signature().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/Driver.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,28 @@\n-\/*\n- * @test\n- * @bug 8049238\n- * @summary Checks Signature attribute for enum.\n- * @library \/tools\/lib \/tools\/javac\/lib ..\/lib\n- * @modules jdk.compiler\/com.sun.tools.javac.api\n- *          jdk.compiler\/com.sun.tools.javac.main\n- *          jdk.jdeps\/com.sun.tools.classfile\n- * @build toolbox.ToolBox InMemoryFileManager TestResult TestBase\n- * @build EnumTest Driver ExpectedSignature ExpectedSignatureContainer\n- * @run main Driver EnumTest\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.SignatureAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n+\n+import java.io.File;\n+import java.io.FilenameFilter;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.*;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.lang.reflect.AccessFlag;\n+\n+\/**\n+ * The main class of Signature tests.\n+ * Driver reads golden data of each class member that must have a Signature attribute,\n+ * after that the class compares expected data with actual one.\n+ *\n+ * Example of usage Driver:\n+ * java Driver Test\n+ *\n+ * Each member of the class Test should have @ExpectedSignature annotations\n+ * if it must have the Signature attribute. Anonymous class cannot be annotated.\n+ * So its enclosing class should be annotated and method isAnonymous\n+ * of ExpectedSignature must return true.\n@@ -36,0 +53,179 @@\n+public class Driver extends TestResult {\n+    private final String topLevelClassName;\n+    private final File[] files;\n+\n+    public Driver(String topLevelClassName) {\n+        this.topLevelClassName = topLevelClassName;\n+        \/\/ Get top level class and all inner classes.\n+        FilenameFilter filter = (dir, file) ->\n+                file.equals(topLevelClassName + \".class\")\n+                        || file.matches(topLevelClassName + \"\\\\$.*\\\\.class\");\n+        files = getClassDir().listFiles(filter);\n+    }\n+\n+    private boolean isAnonymous(String className) {\n+        return className.matches(\".*\\\\$\\\\d+$\");\n+    }\n+\n+    private Class<?> getEnclosingClass(String className) throws ClassNotFoundException {\n+        return Class.forName(className.replaceFirst(\"\\\\$\\\\d+$\", \"\"));\n+    }\n+\n+    private ExpectedSignature getExpectedClassSignature(String className, Class<?> clazz)\n+            throws ClassNotFoundException {\n+        \/\/ anonymous class cannot be annotated, so information about anonymous class\n+        \/\/ is located in its enclosing class.\n+        boolean isAnonymous = isAnonymous(className);\n+        clazz = isAnonymous ? getEnclosingClass(className) : clazz;\n+        return Arrays.stream(clazz.getAnnotationsByType(ExpectedSignature.class))\n+                .filter(s -> s.isAnonymous() == isAnonymous)\n+                .collect(Collectors.toMap(ExpectedSignature::descriptor, Function.identity()))\n+                .get(className);\n+    }\n+\n+    \/\/ Class.getName() cannot be used here, because the method can rely on signature attribute.\n+    private Map<String, ExpectedSignature> getClassExpectedSignature(String className, Class<?> clazz)\n+            throws ClassNotFoundException {\n+        Map<String, ExpectedSignature> classSignatures = new HashMap<>();\n+        ExpectedSignature classSignature = getExpectedClassSignature(className, clazz);\n+        if (classSignature != null) {\n+            classSignatures.put(className, classSignature);\n+        }\n+        return classSignatures;\n+    }\n+\n+    private Map<String, ExpectedSignature> getExpectedExecutableSignatures(Executable[] executables,\n+                                                                           Predicate<Executable> filterBridge) {\n+        return Arrays.stream(executables)\n+                .filter(filterBridge)\n+                .map(e -> e.getAnnotation(ExpectedSignature.class))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toMap(ExpectedSignature::descriptor, Function.identity()));\n+    }\n+\n+    private Map<String, ExpectedSignature> getExpectedMethodSignatures(Class<?> clazz) {\n+        Map<String, ExpectedSignature> methodSignatures =\n+                getExpectedExecutableSignatures(clazz.getDeclaredMethods(),\n+                        m -> !((java.lang.reflect.Method) m).isBridge());\n+        methodSignatures.putAll(\n+                getExpectedExecutableSignatures(clazz.getDeclaredConstructors(),\n+                        m -> true));\n+        return methodSignatures;\n+    }\n+\n+    private Map<String, ExpectedSignature> getExpectedFieldSignatures(Class<?> clazz) {\n+        return Arrays.stream(clazz.getDeclaredFields())\n+                .map(f -> f.getAnnotation(ExpectedSignature.class))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toMap(ExpectedSignature::descriptor, Function.identity()));\n+    }\n+\n+    public void test() throws TestFailedException {\n+        try {\n+            addTestCase(\"Source is \" + topLevelClassName + \".java\");\n+            assertTrue(files.length > 0, \"No class files found\");\n+            for (File file : files) {\n+                try {\n+                    String className = file.getName().replace(\".class\", \"\");\n+                    Class<?> clazz = Class.forName(className);\n+                    printf(\"Testing class %s\\n\", className);\n+                    ClassModel classFile = readClassFile(file);\n+\n+                    \/\/ test class signature\n+                    testAttribute(\n+                            className,\n+                            () -> classFile.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                            getClassExpectedSignature(className, clazz).get(className));\n+\n+                    testFields(getExpectedFieldSignatures(clazz), classFile);\n+\n+                    testMethods(getExpectedMethodSignatures(clazz), classFile);\n+                } catch (Exception e) {\n+                    addFailure(e);\n+                }\n+            }\n+        } catch (Exception e) {\n+            addFailure(e);\n+        } finally {\n+            checkStatus();\n+        }\n+    }\n+\n+    private void checkAllMembersFound(Set<String> found, Map<String, ExpectedSignature> signatures, String message) {\n+        if (signatures != null) {\n+            checkContains(found,\n+                    signatures.values().stream()\n+                            .map(ExpectedSignature::descriptor)\n+                            .collect(Collectors.toSet()),\n+                    message);\n+        }\n+    }\n+\n+    private void testMethods(Map<String, ExpectedSignature> expectedSignatures, ClassModel classFile) {\n+        String className = classFile.thisClass().name().stringValue();\n+        Set<String> foundMethods = new HashSet<>();\n+        for (MethodModel method : classFile.methods()) {\n+            String methodName = getMethodName(method);\n+            printf(\"Testing method %s\\n\", methodName);\n+            if (method.flags().has(AccessFlag.BRIDGE)) {\n+                printf(\"Bridge method is skipped : %s\\n\", methodName);\n+                continue;\n+            }\n+            testAttribute(\n+                    methodName,\n+                    () -> method.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                    expectedSignatures.get(methodName));\n+            foundMethods.add(methodName);\n+        }\n+        checkAllMembersFound(foundMethods, expectedSignatures,\n+                \"Checking that all methods of class \" + className + \" with Signature attribute found\");\n+    }\n+\n+    private String getMethodName(MethodModel method) {\n+        StringBuilder methodName = new StringBuilder(method.methodName().stringValue() + \"(\");\n+        List<ClassDesc> paras = method.methodTypeSymbol().parameterList();\n+        for (int i = 0; i < method.methodTypeSymbol().parameterCount(); ++i) {\n+            if (i != 0) {\n+                methodName.append(\", \");\n+            }\n+            ClassDesc para = paras.get(i);\n+            String prefix = para.componentType() == null? para.packageName(): para.componentType().packageName();\n+            methodName.append(prefix).append(Objects.equals(prefix, \"\") ? \"\":\".\").append(para.displayName());\n+        }\n+        methodName.append(\")\");\n+        return methodName.toString();\n+    }\n+\n+    private void testFields(Map<String, ExpectedSignature> expectedSignatures, ClassModel classFile) {\n+        String className = classFile.thisClass().name().stringValue();\n+        Set<String> foundFields = new HashSet<>();\n+        for (FieldModel field : classFile.fields()) {\n+            String fieldName = field.fieldName().stringValue();\n+            printf(\"Testing field %s\\n\", fieldName);\n+            testAttribute(\n+                    fieldName,\n+                    () -> field.findAttribute(Attributes.SIGNATURE).orElse(null),\n+                    expectedSignatures.get(fieldName));\n+            foundFields.add(fieldName);\n+        }\n+        checkAllMembersFound(foundFields, expectedSignatures,\n+                \"Checking that all fields of class \" + className + \" with Signature attribute found\");\n+    }\n+\n+    private void testAttribute(\n+            String memberName,\n+            Supplier<SignatureAttribute> sup,\n+            ExpectedSignature expectedSignature) {\n+\n+        SignatureAttribute attribute = sup.get();\n+        if (expectedSignature != null && checkNotNull(attribute, memberName + \" must have attribute\")) {\n+            checkEquals(attribute.attributeName(),\n+                    \"Signature\", \"Attribute's name : \" + memberName);\n+            checkEquals(((BoundAttribute<?>)attribute).payloadLen(), 2, \"Attribute's length : \" + memberName);\n+            checkEquals(attribute.signature().stringValue(),\n+                    expectedSignature.signature(),\n+                    \"Testing signature of : \" + memberName);\n+        } else {\n+            checkNull(attribute, memberName + \" must not have attribute\");\n+        }\n+    }\n@@ -37,6 +233,7 @@\n-@ExpectedSignature(descriptor = \"EnumTest\", signature = \"Ljava\/lang\/Enum<LEnumTest;>;\")\n-public enum EnumTest {;\n-    \/\/ see 8026480\n-    @ExpectedSignature(descriptor = \"<init>(java.lang.String, int)\", signature = \"()V\")\n-    private EnumTest() {}\n-}\n+    public static void main(String[] args) throws TestFailedException {\n+        if (args.length != 1) {\n+            throw new IllegalArgumentException(\"Usage: Driver <class-name>\");\n+        }\n+        new Driver(args[0]).test();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/EnumTest.java","additions":215,"deletions":18,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ExceptionTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/FieldTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/InnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodParameterTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/MethodTypeBoundTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Signature\/ReturnTypeTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/AnonymousClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/InnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/LocalClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/MixTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/ModuleInfoTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,3 +42,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -49,1 +53,1 @@\n-    public void test() throws IOException, ConstantPoolException {\n+    public void test() throws IOException {\n@@ -51,1 +55,1 @@\n-                ClassFile.read(getClassFile(NoSourceFileAttribute.class)).getAttribute(Attribute.SourceFile),\n+                Classfile.of().parse(getClassFile(NoSourceFileAttribute.class).toPath()).findAttribute(Attributes.SOURCE_FILE).orElse(null),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/NoSourceFileAttribute.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.SourceFile_attribute;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.SourceFileAttribute;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -53,1 +53,1 @@\n-        assertAttributePresent(ClassFile.read(getClassFile(classToTest)), fileName);\n+        assertAttributePresent(Classfile.of().parse(getClassFile(classToTest).toPath()), fileName);\n@@ -63,1 +63,1 @@\n-        assertAttributePresent(ClassFile.read(getClassFile(classToTest + \".class\")), fileName);\n+        assertAttributePresent(Classfile.of().parse(getClassFile(classToTest + \".class\").toPath()), fileName);\n@@ -73,1 +73,1 @@\n-        assertAttributePresent(ClassFile.read(classToTest), fileName);\n+        assertAttributePresent(Classfile.of().parse(classToTest), fileName);\n@@ -88,1 +88,1 @@\n-            ClassFile classFile;\n+            ClassModel classFile;\n@@ -90,1 +90,1 @@\n-                classFile = ClassFile.read(input);\n+                classFile = Classfile.of().parse(input.readAllBytes());\n@@ -96,1 +96,1 @@\n-    private void assertAttributePresent(ClassFile classFile, String fileName) throws Exception {\n+    private void assertAttributePresent(ClassModel classFile, String fileName) throws Exception {\n@@ -100,4 +100,4 @@\n-        List<SourceFile_attribute> sourceFileAttributes = new ArrayList<>();\n-        for (Attribute a : classFile.attributes.attrs) {\n-            if (Attribute.SourceFile.equals(a.getName(classFile.constant_pool))) {\n-                sourceFileAttributes.add((SourceFile_attribute) a);\n+        List<SourceFileAttribute> sourceFileAttributes = new ArrayList<>();\n+        for (Attribute<?> a : classFile.attributes()) {\n+            if (a instanceof SourceFileAttribute) {\n+                sourceFileAttributes.add((SourceFileAttribute) a);\n@@ -109,1 +109,1 @@\n-        SourceFile_attribute attribute = sourceFileAttributes.get(0);\n+        SourceFileAttribute attribute = sourceFileAttributes.get(0);\n@@ -111,3 +111,2 @@\n-        assertEquals(classFile.constant_pool.getUTF8Info(attribute.attribute_name_index).value,\n-                Attribute.SourceFile, \"Incorrect attribute name\");\n-        assertEquals(classFile.constant_pool.getUTF8Info(attribute.sourcefile_index).value, fileName,\n+        assertEquals(attribute.attributeName(), Attributes.SOURCE_FILE.name(), \"Incorrect attribute name\");\n+        assertEquals(attribute.sourceFile().stringValue(), fileName,\n@@ -115,1 +114,1 @@\n-        assertEquals(attribute.attribute_length, 2, \"Incorrect attribute length\");\n+        assertEquals(((BoundAttribute<?>)attribute).payloadLen(), 2, \"Incorrect attribute length\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SourceFileTestBase.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/SyntheticClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/SourceFile\/TopLevelClassesOneFileTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassConstructorsTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassMembersTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateSiblingsTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AssertFieldTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodForGenericMethodTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTargetRelease14Test.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/EnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/PackageInfoTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -34,0 +35,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -35,1 +37,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.SyntheticAttribute;\n@@ -51,3 +54,0 @@\n-\n-    private static final String ACC_SYNTHETIC = \"ACC_SYNTHETIC\";\n-\n@@ -55,1 +55,1 @@\n-    private final Map<String, ClassFile> classes;\n+    private final Map<String, ClassModel> classes;\n@@ -59,1 +59,1 @@\n-            throws TestFailedException, ConstantPoolException, IOException, ClassNotFoundException {\n+            throws TestFailedException, IOException, ClassNotFoundException {\n@@ -67,1 +67,1 @@\n-    public SyntheticTestDriver(String testCaseName) throws IOException, ConstantPoolException, ClassNotFoundException {\n+    public SyntheticTestDriver(String testCaseName) throws IOException, ClassNotFoundException {\n@@ -78,1 +78,1 @@\n-                .collect(Collectors.toList());\n+                .toList();\n@@ -94,5 +94,13 @@\n-    private String getMethodName(ClassFile classFile, Method method)\n-            throws ConstantPoolException, Descriptor.InvalidDescriptor {\n-        String methodName = method.getName(classFile.constant_pool);\n-        String parameters = method.descriptor.getParameterTypes(classFile.constant_pool);\n-        return methodName + parameters;\n+    private String getMethodName(MethodModel method) {\n+        StringBuilder methodName = new StringBuilder(method.methodName().stringValue() + \"(\");\n+        List<ClassDesc> paras = method.methodTypeSymbol().parameterList();\n+        for (int i = 0; i < method.methodTypeSymbol().parameterCount(); ++i) {\n+            if (i != 0) {\n+                methodName.append(\", \");\n+            }\n+            ClassDesc para = paras.get(i);\n+            String prefix = para.componentType() == null? para.packageName(): para.componentType().packageName();\n+            methodName.append(prefix).append(Objects.equals(prefix, \"\") ? \"\":\".\").append(para.displayName());\n+        }\n+        methodName.append(\")\");\n+        return methodName.toString();\n@@ -107,1 +115,1 @@\n-            for (Map.Entry<String, ClassFile> entry : classes.entrySet()) {\n+            for (Map.Entry<String, ClassModel> entry : classes.entrySet()) {\n@@ -109,1 +117,1 @@\n-                ClassFile classFile = entry.getValue();\n+                ClassModel classFile = entry.getValue();\n@@ -113,2 +121,2 @@\n-                        () -> (Synthetic_attribute) classFile.getAttribute(Attribute.Synthetic),\n-                        classFile.access_flags::getClassFlags,\n+                        () -> classFile.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                        classFile.flags()::flags,\n@@ -126,2 +134,2 @@\n-                for (Method method : classFile.methods) {\n-                    String methodName = getMethodName(classFile, method);\n+                for (MethodModel method : classFile.methods()) {\n+                    String methodName = getMethodName(method);\n@@ -131,2 +139,2 @@\n-                            () -> (Synthetic_attribute) method.attributes.get(Attribute.Synthetic),\n-                            method.access_flags::getMethodFlags,\n+                            () -> method.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                            method.flags()::flags,\n@@ -152,2 +160,2 @@\n-                for (Field field : classFile.fields) {\n-                    String fieldName = field.getName(classFile.constant_pool);\n+                for (FieldModel field : classFile.fields()) {\n+                    String fieldName = field.fieldName().stringValue();\n@@ -157,2 +165,2 @@\n-                            () -> (Synthetic_attribute) field.attributes.get(Attribute.Synthetic),\n-                            field.access_flags::getFieldFlags,\n+                            () -> field.findAttribute(Attributes.SYNTHETIC).orElse(null),\n+                            field.flags()::flags,\n@@ -184,3 +192,3 @@\n-    private boolean testAttribute(ClassFile classFile,\n-                               Supplier<Synthetic_attribute> getSyntheticAttribute,\n-                               Supplier<Set<String>> getAccessFlags,\n+    private boolean testAttribute(ClassModel classFile,\n+                               Supplier<SyntheticAttribute> getSyntheticAttribute,\n+                               Supplier<Set<AccessFlag>> getAccessFlags,\n@@ -188,1 +196,1 @@\n-                               String info) throws ConstantPoolException {\n+                               String info) {\n@@ -190,3 +198,3 @@\n-        String className = classFile.getName();\n-        Synthetic_attribute attr = getSyntheticAttribute.get();\n-        Set<String> flags = getAccessFlags.get();\n+        String className = classFile.thisClass().name().stringValue();\n+        SyntheticAttribute attr = getSyntheticAttribute.get();\n+        Set<AccessFlag> flags = getAccessFlags.get();\n@@ -196,1 +204,1 @@\n-            checkFalse(flags.contains(ACC_SYNTHETIC),\n+            checkFalse(flags.contains(AccessFlag.SYNTHETIC),\n@@ -202,1 +210,1 @@\n-                    && checkTrue(flags.contains(ACC_SYNTHETIC), \"Member must have synthetic flag : \"\n+                    && checkTrue(flags.contains(AccessFlag.SYNTHETIC), \"Member must have synthetic flag : \"\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/SyntheticTestDriver.java","additions":42,"deletions":34,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -30,1 +30,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/ThisFieldTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,3 +24,1 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Descriptor;\n+import jdk.internal.classfile.Attribute;\n@@ -108,1 +106,1 @@\n-            throws IOException, ConstantPoolException, Descriptor.InvalidDescriptor;\n+            throws IOException;\n@@ -179,1 +177,1 @@\n-                    .collect(Collectors.toList()));\n+                    .toList());\n@@ -206,3 +204,3 @@\n-    protected long countNumberOfAttributes(Attribute[] attrs,\n-                                               Class<? extends Attribute> clazz) {\n-        return Stream.of(attrs)\n+    protected long countNumberOfAttributes(List<Attribute<?>> attrs,\n+                                           Class<? extends Attribute<?>> clazz) {\n+        return attrs.stream()\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/AnnotationsTestBase.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -73,1 +78,1 @@\n-                TestCase.TestMethodInfo method = clazz.addMethodInfo(\"add(java.lang.Integer)\", \"public\");\n+                TestCase.TestMethodInfo method = clazz.addMethodInfo(\"add(Integer)\", \"public\");\n@@ -76,1 +81,1 @@\n-                TestCase.TestMethodInfo synMethod = clazz.addMethodInfo(\"add(java.lang.Object)\", true, \"public\");\n+                TestCase.TestMethodInfo synMethod = clazz.addMethodInfo(\"add(Object)\", true, \"public\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForGenericMethodTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerAnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerEnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForInnerInterfaceTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsForTopLevelClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -37,1 +38,1 @@\n-            throws IOException, ConstantPoolException, Descriptor.InvalidDescriptor {\n+            throws IOException {\n@@ -42,1 +43,1 @@\n-            ClassFile classFile = readClassFile(entry.getValue());\n+            ClassModel classFile = readClassFile(entry.getValue());\n@@ -44,1 +45,1 @@\n-            testAttributes(clazz, classFile, () -> classFile.attributes);\n+            testAttributes(clazz, classFile, classFile);\n@@ -52,2 +53,1 @@\n-    private void testMethods(TestCase.TestClassInfo clazz, ClassFile classFile)\n-            throws ConstantPoolException, Descriptor.InvalidDescriptor {\n+    private void testMethods(TestCase.TestClassInfo clazz, ClassModel classFile) {\n@@ -56,3 +56,4 @@\n-        for (Method method : classFile.methods) {\n-            String methodName = method.getName(classFile.constant_pool) +\n-                    method.descriptor.getParameterTypes(classFile.constant_pool);\n+        for (MethodModel method : classFile.methods()) {\n+            String methodName = method.methodName().stringValue() +\n+                    method.methodTypeSymbol().displayDescriptor();\n+            methodName = methodName.substring(0, methodName.indexOf(\")\") + 1);\n@@ -70,1 +71,1 @@\n-            testAttributes(testMethod, classFile, () -> method.attributes);\n+            testAttributes(testMethod, classFile, method);\n@@ -75,2 +76,1 @@\n-    private void testFields(TestCase.TestClassInfo clazz, ClassFile classFile)\n-            throws ConstantPoolException {\n+    private void testFields(TestCase.TestClassInfo clazz, ClassModel classFile) {\n@@ -78,2 +78,2 @@\n-        for (Field field : classFile.fields) {\n-            String fieldName = field.getName(classFile.constant_pool);\n+        for (FieldModel field : classFile.fields()) {\n+            String fieldName = field.fieldName().stringValue();\n@@ -87,1 +87,1 @@\n-            testAttributes(testField, classFile, () -> field.attributes);\n+            testAttributes(testField, classFile, field);\n@@ -94,3 +94,2 @@\n-            ClassFile classFile,\n-            Supplier<Attributes> attributes)\n-            throws ConstantPoolException {\n+            ClassModel classFile,\n+            AttributedElement attributedElement) {\n@@ -98,1 +97,0 @@\n-                classFile,\n@@ -100,2 +98,2 @@\n-                attributes.get(),\n-                Attribute.RuntimeInvisibleAnnotations);\n+                attributedElement,\n+                Attributes.RUNTIME_INVISIBLE_ANNOTATIONS);\n@@ -103,1 +101,0 @@\n-                classFile,\n@@ -105,2 +102,2 @@\n-                attributes.get(),\n-                Attribute.RuntimeVisibleAnnotations);\n+                attributedElement,\n+                Attributes.RUNTIME_VISIBLE_ANNOTATIONS);\n@@ -129,2 +126,1 @@\n-    private Map<String, Annotation> collectAnnotations(\n-            ClassFile classFile,\n+    private <T extends Attribute<T>> Map<String, Annotation> collectAnnotations(\n@@ -132,2 +128,2 @@\n-            Attributes attributes,\n-            String attribute) throws ConstantPoolException {\n+            AttributedElement attributedElement,\n+            AttributeMapper<T> attribute) {\n@@ -135,1 +131,1 @@\n-        RuntimeAnnotations_attribute attr = (RuntimeAnnotations_attribute) attributes.get(attribute);\n+        Object attr = attributedElement.findAttribute(attribute).orElse(null);\n@@ -137,1 +133,1 @@\n-        RetentionPolicy policy = getRetentionPolicy(attribute);\n+        RetentionPolicy policy = getRetentionPolicy(attribute.name());\n@@ -139,1 +135,1 @@\n-            if (!checkNotNull(attr, String.format(\"%s should be not null value\", attribute))) {\n+            if (!checkNotNull(attr, String.format(\"%s should be not null value\", attribute.name()))) {\n@@ -143,3 +139,9 @@\n-            for (Annotation ann : attr.annotations) {\n-                String name = classFile.constant_pool.getUTF8Value(ann.type_index);\n-                actualAnnotations.put(name.substring(1, name.length() - 1), ann);\n+            List<Annotation> annotationList;\n+            switch (attr) {\n+                case RuntimeVisibleAnnotationsAttribute annots -> {\n+                    annotationList = annots.annotations();\n+                }\n+                case RuntimeInvisibleAnnotationsAttribute annots -> {\n+                    annotationList = annots.annotations();\n+                }\n+                default -> throw new AssertionError();\n@@ -147,6 +149,10 @@\n-            checkEquals(countNumberOfAttributes(attributes.attrs,\n-                    getRetentionPolicy(attribute) == RetentionPolicy.RUNTIME\n-                            ? RuntimeVisibleAnnotations_attribute.class\n-                            : RuntimeInvisibleAnnotations_attribute.class),\n-                    1l,\n-                    String.format(\"Number of %s\", attribute));\n+            for (Annotation ann : annotationList) {\n+                String name = ann.classSymbol().displayName();\n+                actualAnnotations.put(name, ann);\n+            }\n+            checkEquals(countNumberOfAttributes(attributedElement.attributes(),\n+                    getRetentionPolicy(attribute.name()) == RetentionPolicy.RUNTIME\n+                            ? RuntimeVisibleAnnotationsAttribute.class\n+                            : RuntimeInvisibleAnnotationsAttribute.class),\n+                    1L,\n+                    String.format(\"Number of %s\", attribute.name()));\n@@ -154,1 +160,1 @@\n-            checkNull(attr, String.format(\"%s should be null\", attribute));\n+            checkNull(attr, String.format(\"%s should be null\", attribute.name()));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeAnnotationsTestBase.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -71,1 +76,1 @@\n-            TestCase.TestParameterInfo parameter = clazz.addMethodInfo(\"add(java.lang.Integer)\", \"public\").addParameter(\"Integer\", \"i\");\n+            TestCase.TestParameterInfo parameter = clazz.addMethodInfo(\"add(Integer)\", \"public\").addParameter(\"Integer\", \"i\");\n@@ -73,1 +78,1 @@\n-            TestCase.TestParameterInfo synParameter = clazz.addMethodInfo(\"add(java.lang.Object)\", true, \"public\").addParameter(\"Object\", \"i\");\n+            TestCase.TestParameterInfo synParameter = clazz.addMethodInfo(\"add(Object)\", true, \"public\").addParameter(\"Object\", \"i\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForGenericMethodTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,0 +43,6 @@\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.MethodModel;\n+import jdk.internal.classfile.attribute.RuntimeInvisibleParameterAnnotationsAttribute;\n+import jdk.internal.classfile.attribute.RuntimeVisibleParameterAnnotationsAttribute;\n+\n@@ -41,1 +52,0 @@\n-import com.sun.tools.classfile.*;\n@@ -58,3 +68,3 @@\n-            \"   interface I { void method(int a, double b, String c); }\\n\" +\n-            \"   %SOURCE%\\n\" +\n-            \"}\";\n+                    \"   interface I { void method(int a, double b, String c); }\\n\" +\n+                    \"   %SOURCE%\\n\" +\n+                    \"}\";\n@@ -80,1 +90,1 @@\n-                    ClassFile classFile = readClassFile(compile(source).getClasses().get(CLASS_NAME));\n+                    ClassModel classFile = readClassFile(compile(source).getClasses().get(CLASS_NAME));\n@@ -82,2 +92,2 @@\n-                    for (Method method : classFile.methods) {\n-                        if (method.getName(classFile.constant_pool).startsWith(\"lambda$\")) {\n+                    for (MethodModel method : classFile.methods()) {\n+                        if (method.methodName().stringValue().startsWith(\"lambda$\")) {\n@@ -85,1 +95,1 @@\n-                            testAttributes(testMethodInfo, classFile, method);\n+                            testAttributes(testMethodInfo, method);\n@@ -100,7 +110,5 @@\n-            ClassFile classFile,\n-            Method method) throws ConstantPoolException {\n-        Attributes attributes = method.attributes;\n-        RuntimeParameterAnnotations_attribute attr = (RuntimeParameterAnnotations_attribute) attributes.get(Attribute.RuntimeInvisibleParameterAnnotations);\n-        checkNull(attr, String.format(\"%s should be null\", Attribute.RuntimeInvisibleParameterAnnotations));\n-        attr = (RuntimeParameterAnnotations_attribute) attributes.get(Attribute.RuntimeVisibleParameterAnnotations);\n-        checkNull(attr, String.format(\"%s should be null\", Attribute.RuntimeVisibleParameterAnnotations));\n+            MethodModel method) {\n+        RuntimeInvisibleParameterAnnotationsAttribute invAttr = method.findAttribute(Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS).orElse(null);\n+        checkNull(invAttr, String.format(\"%s should be null\", Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS));\n+        RuntimeVisibleParameterAnnotationsAttribute vAttr = method.findAttribute(Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS).orElse(null);\n+        checkNull(vAttr, String.format(\"%s should be null\", Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsForLambdaTest.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -88,1 +93,1 @@\n-        String methodDescriptor = methodName + \"(int, double, java.lang.String)\";\n+        String methodDescriptor = methodName + \"(int,double,String)\";\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import com.sun.tools.classfile.*;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -35,1 +36,1 @@\n-            throws IOException, ConstantPoolException, Descriptor.InvalidDescriptor {\n+            throws IOException {\n@@ -37,1 +38,1 @@\n-            ClassFile classFile = readClassFile(classes.get(entry.getKey()));\n+            ClassModel classFile = readClassFile(classes.get(entry.getKey()));\n@@ -39,1 +40,1 @@\n-            String className = classFile.getName();\n+            String className = classFile.thisClass().name().stringValue();\n@@ -41,3 +42,4 @@\n-            for (Method method : classFile.methods) {\n-                String methodName = method.getName(classFile.constant_pool) +\n-                        method.descriptor.getParameterTypes(classFile.constant_pool);\n+            for (MethodModel method : classFile.methods()) {\n+                String methodName = method.methodName().stringValue() +\n+                        method.methodTypeSymbol().displayDescriptor();\n+                methodName = methodName.substring(0, methodName.indexOf(\")\") + 1);\n@@ -62,2 +64,2 @@\n-            ClassFile classFile,\n-            Method method) throws ConstantPoolException {\n+            ClassModel classFile,\n+            MethodModel method) {\n@@ -68,1 +70,1 @@\n-                Attribute.RuntimeInvisibleParameterAnnotations);\n+                Attributes.RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS);\n@@ -73,1 +75,1 @@\n-                Attribute.RuntimeVisibleParameterAnnotations);\n+                Attributes.RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS);\n@@ -106,2 +108,2 @@\n-    private List<Map<String, Annotation>> collectAnnotations(\n-            ClassFile classFile,\n+    private <T extends Attribute<T>> List<Map<String, Annotation>> collectAnnotations(\n+            ClassModel classFile,\n@@ -109,5 +111,2 @@\n-            Method method,\n-            String attribute) throws ConstantPoolException {\n-\n-        Attributes attributes = method.attributes;\n-        RuntimeParameterAnnotations_attribute attr = (RuntimeParameterAnnotations_attribute) attributes.get(attribute);\n+            MethodModel method,\n+            AttributeMapper<T> attribute) {\n@@ -115,0 +114,1 @@\n+        Object attr = method.findAttribute(attribute).orElse(null);\n@@ -116,1 +116,1 @@\n-        RetentionPolicy policy = getRetentionPolicy(attribute);\n+        RetentionPolicy policy = getRetentionPolicy(attribute.name());\n@@ -118,1 +118,1 @@\n-            if (!checkNotNull(attr, \"Attribute \" + attribute + \" must not be null\")) {\n+            if (!checkNotNull(attr, \"Attribute \" + attribute.name() + \" must not be null\")) {\n@@ -122,1 +122,11 @@\n-            for (Annotation[] anns : attr.parameter_annotations) {\n+            List<List<Annotation>> annotationList;\n+            switch (attr) {\n+                case RuntimeVisibleParameterAnnotationsAttribute pAnnots -> {\n+                    annotationList = pAnnots.parameterAnnotations();\n+                }\n+                case RuntimeInvisibleParameterAnnotationsAttribute pAnnots -> {\n+                    annotationList = pAnnots.parameterAnnotations();\n+                }\n+                default -> throw new AssertionError();\n+            }\n+            for (List<Annotation> anns: annotationList) {\n@@ -124,3 +134,3 @@\n-                for (Annotation ann : anns) {\n-                    String name = classFile.constant_pool.getUTF8Value(ann.type_index);\n-                    annotations.put(name.substring(1, name.length() - 1), ann);\n+                for (Annotation ann: anns) {\n+                    String name = ann.classSymbol().displayName();\n+                    annotations.put(name, ann);\n@@ -130,6 +140,6 @@\n-            checkEquals(countNumberOfAttributes(attributes.attrs,\n-                    getRetentionPolicy(attribute) == RetentionPolicy.RUNTIME\n-                            ? RuntimeVisibleParameterAnnotations_attribute.class\n-                            : RuntimeInvisibleParameterAnnotations_attribute.class),\n-                    1l,\n-                    String.format(\"Number of %s\", attribute));\n+            checkEquals(countNumberOfAttributes(method.attributes(),\n+                    getRetentionPolicy(attribute.name()) == RetentionPolicy.RUNTIME\n+                            ? RuntimeVisibleParameterAnnotationsAttribute.class\n+                            : RuntimeInvisibleParameterAnnotationsAttribute.class),\n+                    1L,\n+                    String.format(\"Number of %s\", attribute.name()));\n@@ -137,1 +147,1 @@\n-            checkNull(attr, String.format(\"%s should be null\", attribute));\n+            checkNull(attr, String.format(\"%s should be null\", attribute.name()));\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/RuntimeParameterAnnotationsTestBase.java","additions":41,"deletions":31,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import com.sun.tools.classfile.Annotation;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPool;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.AnnotationValue;\n@@ -50,3 +48,2 @@\n-    public void testAnnotation(TestResult testResult, ClassFile classFile, Annotation annotation)\n-            throws ConstantPoolException {\n-        testResult.checkEquals(classFile.constant_pool.getUTF8Value(annotation.type_index),\n+    public void testAnnotation(TestResult testResult, ClassModel classFile, Annotation annotation) {\n+        testResult.checkEquals(annotation.classSymbol().descriptorString(),\n@@ -54,1 +51,1 @@\n-        testResult.checkEquals(annotation.num_element_value_pairs,\n+        testResult.checkEquals(annotation.elements().size(),\n@@ -56,1 +53,1 @@\n-        if (!testResult.checkEquals(annotation.num_element_value_pairs, elementValues.size(),\n+        if (!testResult.checkEquals(annotation.elements().size(), elementValues.size(),\n@@ -60,3 +57,3 @@\n-        for (int i = 0; i < annotation.num_element_value_pairs; ++i) {\n-            Annotation.element_value_pair pair = annotation.element_value_pairs[i];\n-            testResult.checkEquals(classFile.constant_pool.getUTF8Value(pair.element_name_index),\n+        for (int i = 0; i < annotation.elements().size(); ++i) {\n+            AnnotationElement pair = annotation.elements().get(i);\n+            testResult.checkEquals(pair.name().stringValue(),\n@@ -64,1 +61,1 @@\n-            elementValues.get(i).elementValue.testElementValue(testResult, classFile, pair.value);\n+            elementValues.get(i).elementValue.testElementValue(testResult, classFile, pair.value());\n@@ -104,3 +101,2 @@\n-                                              ClassFile classFile,\n-                                              Annotation.element_value element_value)\n-                throws ConstantPoolException;\n+                                              ClassModel classFile,\n+                                              AnnotationValue element_value);\n@@ -119,9 +115,13 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Integer_info info =\n-                    (ConstantPool.CONSTANT_Integer_info) classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value, \"const_value_index : \" + value);\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            switch (element_value.tag()) {\n+                case 'B':\n+                    testResult.checkEquals((int)((AnnotationValue.OfByte) element_value).byteValue(), value, \"const_value_index : \" + value);\n+                    break;\n+                case 'S':\n+                    testResult.checkEquals((int)((AnnotationValue.OfShort) element_value).shortValue(), value, \"const_value_index : \" + value);\n+                    break;\n+                default:\n+                    testResult.checkEquals(((AnnotationValue.OfInteger) element_value).intValue(), value, \"const_value_index : \" + value);\n+            }\n@@ -146,9 +146,5 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Integer_info info =\n-                    (ConstantPool.CONSTANT_Integer_info) classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value ? 1 : 0, \"const_value_index : \" + value);\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfBoolean ev = (AnnotationValue.OfBoolean) element_value;\n+            testResult.checkEquals(ev.booleanValue(), value, \"const_value_index : \" + value);\n@@ -173,10 +169,6 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Integer_info info =\n-                    (ConstantPool.CONSTANT_Integer_info)\n-                            classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, (int) value, \"const_value_index : \" + value);\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfCharacter ev =\n+                    (AnnotationValue.OfCharacter) element_value;\n+            testResult.checkEquals(ev.charValue(), value, \"const_value_index : \" + value);\n@@ -201,9 +193,6 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPool.InvalidIndex {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Long_info info =\n-                    (ConstantPool.CONSTANT_Long_info) classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value, \"const_value_index\");\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfLong ev =\n+                    (AnnotationValue.OfLong) element_value;\n+            testResult.checkEquals(ev.longValue(), value, \"const_value_index\");\n@@ -228,9 +217,6 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPool.InvalidIndex {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Float_info info =\n-                    (ConstantPool.CONSTANT_Float_info) classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value, \"const_value_index\");\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfFloat ev =\n+                    (AnnotationValue.OfFloat) element_value;\n+            testResult.checkEquals(ev.floatValue(), value, \"const_value_index\");\n@@ -255,9 +241,6 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Double_info info = (ConstantPool.CONSTANT_Double_info)\n-                    classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value, \"const_value_index\");\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfDouble ev =\n+                    (AnnotationValue.OfDouble) element_value;\n+            testResult.checkEquals(ev.doubleValue(), value, \"const_value_index\");\n@@ -282,9 +265,6 @@\n-                                     ClassFile classFile,\n-                                     Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Primitive_element_value ev =\n-                    (Annotation.Primitive_element_value) element_value;\n-            ConstantPool.CONSTANT_Utf8_info info =\n-                    (ConstantPool.CONSTANT_Utf8_info) classFile.constant_pool.get(ev.const_value_index);\n-            testResult.checkEquals(info.value, value, \"const_value_index\");\n+                                     ClassModel classFile,\n+                                     AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfString ev =\n+                    (AnnotationValue.OfString) element_value;\n+            testResult.checkEquals(ev.stringValue(), value, \"const_value_index\");\n@@ -312,6 +292,5 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Enum_element_value ev = (Annotation.Enum_element_value) element_value;\n-            testResult.checkEquals(classFile.constant_pool.getUTF8Info(ev.type_name_index).value,\n+                ClassModel classFile,\n+                AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfEnum ev = (AnnotationValue.OfEnum) element_value;\n+            testResult.checkEquals(ev.classSymbol().descriptorString(),\n@@ -319,1 +298,1 @@\n-            testResult.checkEquals(classFile.constant_pool.getUTF8Info(ev.const_name_index).value,\n+            testResult.checkEquals(ev.constantName().stringValue(),\n@@ -354,5 +333,4 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Class_element_value ev = (Annotation.Class_element_value) element_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfClass ev = (AnnotationValue.OfClass) element_value;\n@@ -362,2 +340,1 @@\n-            testResult.checkEquals(\n-                    classFile.constant_pool.getUTF8Info(ev.class_info_index).value,\n+            testResult.checkEquals(ev.classSymbol().descriptorString(),\n@@ -384,5 +361,4 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation.Array_element_value ev = (Annotation.Array_element_value) element_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            AnnotationValue.OfArray ev = (AnnotationValue.OfArray) element_value;\n@@ -391,1 +367,1 @@\n-                values.get(i).testElementValue(testResult, classFile, ev.values[i]);\n+                values.get(i).testElementValue(testResult, classFile, ev.values().get(i));\n@@ -416,5 +392,4 @@\n-                ClassFile classFile,\n-                Annotation.element_value element_value)\n-                throws ConstantPoolException {\n-            testTag(testResult, element_value.tag);\n-            Annotation ev = ((Annotation.Annotation_element_value) element_value).annotation_value;\n+                ClassModel classFile,\n+                AnnotationValue element_value) {\n+            testTag(testResult, element_value.tag());\n+            Annotation ev = ((AnnotationValue.OfAnnotation) element_value).annotation();\n@@ -422,1 +397,1 @@\n-                    classFile.constant_pool.getUTF8Info(ev.type_index).value,\n+                    ev.classSymbol().descriptorString(),\n@@ -425,2 +400,2 @@\n-            for (int i = 0; i < ev.num_element_value_pairs; ++i) {\n-                Annotation.element_value_pair pair = ev.element_value_pairs[i];\n+            for (int i = 0; i < ev.elements().size(); ++i) {\n+                AnnotationElement pair = ev.elements().get(i);\n@@ -428,1 +403,1 @@\n-                expectedPair.elementValue.testElementValue(testResult, classFile, pair.value);\n+                expectedPair.elementValue.testElementValue(testResult, classFile, pair.value());\n@@ -430,1 +405,1 @@\n-                        classFile.constant_pool.getUTF8Info(pair.element_name_index).value,\n+                        pair.name().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/TestAnnotationInfo.java","additions":85,"deletions":110,"binary":false,"changes":195,"status":"modified"},{"patch":"@@ -32,1 +32,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -37,3 +42,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Deprecated_attribute;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.attribute.DeprecatedAttribute;\n@@ -81,1 +86,1 @@\n-            ClassFile cf = readClassFile(compile(\n+            ClassModel cm = readClassFile(compile(\n@@ -85,2 +90,1 @@\n-            Deprecated_attribute attr =\n-                    (Deprecated_attribute) cf.getAttribute(Attribute.Deprecated);\n+            DeprecatedAttribute attr = cm.findAttribute(Attributes.DEPRECATED).orElse(null);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedPackageTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,8 +43,3 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Deprecated_attribute;\n-import com.sun.tools.classfile.Field;\n-import com.sun.tools.classfile.InnerClasses_attribute;\n-import com.sun.tools.classfile.InnerClasses_attribute.Info;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -247,3 +247,2 @@\n-            ClassFile cf = readClassFile(classes.get(outerClassName));\n-            Deprecated_attribute attr = (Deprecated_attribute)\n-                    cf.getAttribute(Attribute.Deprecated);\n+            ClassModel cf = readClassFile(classes.get(outerClassName));\n+            DeprecatedAttribute attr = cf.findAttribute(Attributes.DEPRECATED).orElse(null);\n@@ -259,7 +258,6 @@\n-    private void testInnerClasses(ClassFile cf, Map<String, ? extends JavaFileObject> classes)\n-            throws ConstantPoolException, IOException {\n-        InnerClasses_attribute innerAttr = (InnerClasses_attribute)\n-                cf.getAttribute(Attribute.InnerClasses);\n-        for (Info innerClass : innerAttr.classes) {\n-            String innerClassName = cf.constant_pool.\n-                    getClassInfo(innerClass.inner_class_info_index).getName();\n+    private void testInnerClasses(ClassModel cf, Map<String, ? extends JavaFileObject> classes)\n+            throws IOException {\n+        InnerClassesAttribute innerAttr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n+        assert innerAttr != null;\n+        for (InnerClassInfo innerClass : innerAttr.classes()) {\n+            String innerClassName = innerClass.innerClass().name().stringValue();\n@@ -267,4 +265,4 @@\n-            ClassFile innerCf = readClassFile(classes.get(innerClassName));\n-            Deprecated_attribute attr = (Deprecated_attribute)\n-                    innerCf.getAttribute(Attribute.Deprecated);\n-            String innerClassSimpleName = innerClass.getInnerName(cf.constant_pool);\n+            ClassModel innerCf = readClassFile(classes.get(innerClassName));\n+            DeprecatedAttribute attr = innerCf.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            assert innerClass.innerName().isPresent();\n+            String innerClassSimpleName = innerClass.innerName().get().stringValue();\n@@ -279,4 +277,3 @@\n-    private void testMethods(ClassFile cf)\n-            throws ConstantPoolException {\n-        for (Method m : cf.methods) {\n-            String methodName = cf.constant_pool.getUTF8Value(m.name_index);\n+    private void testMethods(ClassModel cf) {\n+        for (MethodModel m : cf.methods()) {\n+            String methodName = m.methodName().stringValue();\n@@ -284,2 +281,1 @@\n-            Deprecated_attribute attr = (Deprecated_attribute)\n-                    m.attributes.get(Attribute.Deprecated);\n+            DeprecatedAttribute attr = m.findAttribute(Attributes.DEPRECATED).orElse(null);\n@@ -290,3 +286,3 @@\n-    private void testFields(ClassFile cf) throws ConstantPoolException {\n-        for (Field f : cf.fields) {\n-            String fieldName = cf.constant_pool.getUTF8Value(f.name_index);\n+    private void testFields(ClassModel cm) {\n+        for (FieldModel f : cm.fields()) {\n+            String fieldName = f.fieldName().stringValue();\n@@ -294,3 +290,2 @@\n-            Deprecated_attribute attr = (Deprecated_attribute)\n-                    f.attributes.get(Attribute.Deprecated);\n-            testAttribute(fieldName, attr, cf);\n+            DeprecatedAttribute attr = f.findAttribute(Attributes.DEPRECATED).orElse(null);\n+            testAttribute(fieldName, attr, cm);\n@@ -300,2 +295,1 @@\n-    private void testAttribute(String name, Deprecated_attribute attr, ClassFile cf)\n-            throws ConstantPoolException {\n+    private void testAttribute(String name, DeprecatedAttribute attr, ClassModel cf) {\n@@ -309,2 +303,1 @@\n-    private void testDeprecatedAttribute(String name, Deprecated_attribute attr, ClassFile cf)\n-            throws ConstantPoolException {\n+    private void testDeprecatedAttribute(String name, DeprecatedAttribute attr, ClassModel cm) {\n@@ -312,1 +305,1 @@\n-            checkEquals(0, attr.attribute_length,\n+            checkEquals(0, ((BoundAttribute<?>)attr).payloadLen(),\n@@ -314,2 +307,1 @@\n-            checkEquals(\"Deprecated\",\n-                    cf.constant_pool.getUTF8Value(attr.attribute_name_index),\n+            checkEquals(\"Deprecated\", attr.attributeName(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/deprecated\/DeprecatedTest.java","additions":34,"deletions":42,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerAnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerEnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerAnnotationsInInnerInterfaceTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -43,2 +48,3 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.InnerClasses_attribute.Info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -58,7 +64,6 @@\n-            ClassFile classFile = readClassFile(file);\n-            String className = classFile.getName();\n-            for (ConstantPool.CPInfo info : classFile.constant_pool.entries()) {\n-                if (info instanceof ConstantPool.CONSTANT_Class_info) {\n-                    ConstantPool.CONSTANT_Class_info classInfo =\n-                            (ConstantPool.CONSTANT_Class_info) info;\n-                    String cpClassName = classInfo.getBaseName();\n+            ClassModel classFile = readClassFile(file);\n+            String className = classFile.thisClass().name().stringValue();\n+            for (int i = 1; i < classFile.constantPool().entryCount(); ++i) {\n+                if (classFile.constantPool().entryByIndex(i) instanceof ClassEntry classInfo\n+                        && classInfo.asSymbol().isClassOrInterface()) {\n+                    String cpClassName = classInfo.asInternalName();\n@@ -99,3 +104,2 @@\n-                ClassFile cf = readClassFile(currentClassName);\n-                InnerClasses_attribute attr = (InnerClasses_attribute)\n-                        cf.getAttribute(Attribute.InnerClasses);\n+                ClassModel cf = readClassFile(currentClassName);\n+                InnerClassesAttribute attr = cf.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -110,1 +114,1 @@\n-                checkEquals(attr.number_of_classes,\n+                checkEquals(attr.classes().size(),\n@@ -113,1 +117,2 @@\n-                for (Info info : attr.classes) {\n+                for (InnerClassInfo info : attr.classes()) {\n+                    if (!info.innerClass().asSymbol().isClassOrInterface()) continue;\n@@ -115,1 +120,1 @@\n-                            .getInnerClassInfo(cf.constant_pool).getBaseName();\n+                            .innerClass().asInternalName();\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesHierarchyTest.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInAnonymousClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerAnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerEnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInInnerInterfaceTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesInLocalClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,0 +41,3 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.ClassEntry;\n@@ -38,0 +46,1 @@\n+import java.util.Arrays;\n@@ -39,0 +48,1 @@\n+import java.util.Objects;\n@@ -41,1 +51,0 @@\n-import java.util.stream.Stream;\n@@ -43,4 +52,0 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.InnerClasses_attribute;\n-import com.sun.tools.classfile.InnerClasses_attribute.Info;\n@@ -61,1 +66,1 @@\n-        return Stream.of(getClassDir().listFiles(filter))\n+        return Arrays.stream(Objects.requireNonNull(getClassDir().listFiles(filter)))\n@@ -70,3 +75,2 @@\n-            ClassFile classFile = readClassFile(InnerClassesIndexTest.class);\n-            InnerClasses_attribute attr = (InnerClasses_attribute)\n-                    classFile.getAttribute(Attribute.InnerClasses);\n+            ClassModel classFile = readClassFile(InnerClassesIndexTest.class);\n+            InnerClassesAttribute attr = classFile.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -75,3 +79,3 @@\n-            for (Info info : attr.classes) {\n-                String innerName = classFile.constant_pool.\n-                        getClassInfo(info.inner_class_info_index).getBaseName();\n+            assert attr != null;\n+            for (InnerClassInfo info : attr.classes()) {\n+                String innerName = info.innerClass().asInternalName();\n@@ -84,1 +88,2 @@\n-                checkEquals(info.outer_class_info_index, 0,\n+                ClassEntry out = info.outerClass().orElse(null);\n+                checkEquals(out == null? 0: out.index(), 0,\n@@ -87,1 +92,1 @@\n-                    checkEquals(info.inner_name_index, 0,\n+                    checkEquals(Objects.requireNonNull(info.innerName().orElse(null)).index(), 0,\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesIndexTest.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.InnerClasses_attribute;\n-import com.sun.tools.classfile.InnerClasses_attribute.Info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n+import jdk.internal.classfile.constantpool.*;\n+import jdk.internal.classfile.impl.BoundAttribute;\n@@ -30,8 +30,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n@@ -39,0 +32,1 @@\n+import java.lang.reflect.AccessFlag;\n@@ -202,1 +196,1 @@\n-            ClassFile cf = readClassFile(compile(getCompileOptions(), test.getSource())\n+            ClassModel cm = readClassFile(compile(getCompileOptions(), test.getSource())\n@@ -204,2 +198,1 @@\n-            InnerClasses_attribute innerClasses = (InnerClasses_attribute)\n-                    cf.getAttribute(Attribute.InnerClasses);\n+            InnerClassesAttribute innerClasses = cm.findAttribute(Attributes.INNER_CLASSES).orElse(null);\n@@ -207,2 +200,2 @@\n-            for (Attribute a : cf.attributes.attrs) {\n-                if (a instanceof InnerClasses_attribute) {\n+            for (Attribute<?> a : cm.attributes()) {\n+                if (a instanceof InnerClassesAttribute) {\n@@ -216,2 +209,1 @@\n-            checkEquals(cf.constant_pool.\n-                    getUTF8Info(innerClasses.attribute_name_index).value, \"InnerClasses\",\n+            checkEquals(innerClasses.attributeName(), \"InnerClasses\",\n@@ -221,1 +213,1 @@\n-            checkEquals(innerClasses.attribute_length,\n+            checkEquals(((BoundAttribute<?>)innerClasses).payloadLen(),\n@@ -223,1 +215,1 @@\n-            checkEquals(innerClasses.number_of_classes,\n+            checkEquals(innerClasses.classes().size(),\n@@ -226,5 +218,6 @@\n-            for (Info e : innerClasses.classes) {\n-                String baseName = cf.constant_pool.getClassInfo(\n-                        e.inner_class_info_index).getBaseName();\n-                if (cf.major_version >= 51 && e.inner_name_index == 0) {\n-                    checkEquals(e.outer_class_info_index, 0,\n+            for (InnerClassInfo e : innerClasses.classes()) {\n+                String baseName = e.innerClass().asInternalName();\n+                if (cm.majorVersion() >= 51 && e.innerClass().index() == 0) {\n+                    ClassEntry out = e.outerClass().orElse(null);\n+                    \/\/ The outer_class_info_index of sun.tools.classfile will return 0 if it is not a member of a class or interface.\n+                    checkEquals(out == null? 0: out.index(), 0,\n@@ -240,2 +233,6 @@\n-                checkEquals(e.inner_class_access_flags.getInnerClassFlags(),\n-                        class2Flags.get(className),\n+                \/\/Convert the Set<string> to Set<AccessFlag>\n+                Set<AccessFlag> accFlags = class2Flags.get(className).stream()\n+                        .map(str -> AccessFlag.valueOf(str.substring(str.indexOf(\"_\") + 1)))\n+                        .collect(Collectors.toSet());\n+                checkEquals(e.flags(),\n+                        accFlags,\n@@ -244,0 +241,5 @@\n+                    checkEquals(\n+                            e.innerClass().asInternalName(),\n+                            classToTest + \"$\" + className,\n+                            \"inner_class_info_index of \" + className);\n+                    if (e.outerClass().orElse(null) != null && e.outerClass().get().index() > 0) {\n@@ -245,6 +247,1 @@\n-                                cf.constant_pool.getClassInfo(e.inner_class_info_index).getBaseName(),\n-                                classToTest + \"$\" + className,\n-                                \"inner_class_info_index of \" + className);\n-                    if (e.outer_class_info_index > 0) {\n-                        checkEquals(\n-                                cf.constant_pool.getClassInfo(e.outer_class_info_index).getName(),\n+                                e.outerClass().get().name().stringValue(),\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerClassesTestBase.java","additions":31,"deletions":34,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerAnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerEnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumInInnerInterfaceTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerEnumsInInnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerAnnotationTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerClassTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerEnumTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/InnerInterfacesInInnerInterfaceTest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,6 @@\n- *          jdk.jdeps\/com.sun.tools.classfile\n+ *          java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -36,3 +41,2 @@\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.Attributes;\n+import jdk.internal.classfile.ClassModel;\n@@ -44,1 +48,1 @@\n-    public static void main(String[] args) throws IOException, ConstantPoolException {\n+    public static void main(String[] args) throws IOException {\n@@ -48,3 +52,3 @@\n-    public void test() throws IOException, ConstantPoolException {\n-        ClassFile classFile = readClassFile(\"NoInnerClassesTest\");\n-        assertNull(classFile.getAttribute(Attribute.InnerClasses), \"Found inner class attribute\");\n+    public void test() throws IOException {\n+        ClassModel classModel = readClassFile(\"NoInnerClassesTest\");\n+        assertNull(classModel.findAttribute(Attributes.INNER_CLASSES).orElse(null), \"Found inner class attribute\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/innerclasses\/NoInnerClassesTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n+import jdk.internal.classfile.*;\n@@ -130,1 +129,0 @@\n-     * @throws ConstantPoolException if constant pool error occurs\n@@ -132,2 +130,2 @@\n-    public ClassFile readClassFile(InputStream is) throws IOException, ConstantPoolException {\n-        return ClassFile.read(is);\n+    public ClassModel readClassFile(InputStream is) throws IOException {\n+        return Classfile.of().parse(is.readAllBytes());\n@@ -142,1 +140,0 @@\n-     * @throws ConstantPoolException if constant pool error occurs\n@@ -144,1 +141,1 @@\n-    public ClassFile readClassFile(JavaFileObject fileObject) throws IOException, ConstantPoolException {\n+    public ClassModel readClassFile(JavaFileObject fileObject) throws IOException {\n@@ -156,1 +153,0 @@\n-     * @throws ConstantPoolException if constant pool error occurs\n@@ -158,1 +154,1 @@\n-    public ClassFile readClassFile(Class<?> clazz) throws IOException, ConstantPoolException {\n+    public ClassModel readClassFile(Class<?> clazz) throws IOException {\n@@ -168,1 +164,0 @@\n-     * @throws ConstantPoolException if constant pool error occurs\n@@ -170,1 +165,1 @@\n-    public ClassFile readClassFile(String className) throws IOException, ConstantPoolException {\n+    public ClassModel readClassFile(String className) throws IOException {\n@@ -180,1 +175,0 @@\n-     * @throws ConstantPoolException if constant pool error occurs\n@@ -182,1 +176,1 @@\n-    public ClassFile readClassFile(File file) throws IOException, ConstantPoolException {\n+    public ClassModel readClassFile(File file) throws IOException {\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/lib\/TestBase.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n@@ -36,0 +35,1 @@\n+import java.nio.file.Files;\n@@ -37,2 +37,0 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ClassWriter;\n@@ -65,4 +63,3 @@\n-        ClassFile cf = ClassFile.read(new File(\"d1\",\"Empty.class\"));\n-        cf.interfaces[0] = cf.constant_pool.size() + 10;\n-        ClassWriter cw = new ClassWriter();\n-        cw.write(cf, new File(\"d2\",\"Empty.class\"));\n+        var cf = Files.readAllBytes(new File(\"d1\",\"Empty.class\").toPath());\n+        cf[9]--;\n+        Files.write(new File(\"d2\",\"Empty.class\").toPath(), cf);\n","filename":"test\/langtools\/tools\/javac\/classreader\/BadClass.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -33,2 +37,1 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.Method;\n+import jdk.internal.classfile.*;\n@@ -41,1 +44,1 @@\n-        ClassFile classFile = ClassFile.read(Paths.get(System.getProperty(\"test.classes\"),\n+        ClassModel classModel = Classfile.of().parse(Paths.get(System.getProperty(\"test.classes\"),\n@@ -43,2 +46,2 @@\n-        for (Method method: classFile.methods) {\n-            if (method.getName(classFile.constant_pool).equals(\"<clinit>\")) {\n+        for (MethodModel method: classModel.methods()) {\n+            if (method.methodName().equalsString(\"<clinit>\")) {\n","filename":"test\/langtools\/tools\/javac\/constDebug\/ConstDebugTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -35,2 +39,1 @@\n-import com.sun.tools.classfile.*;\n-import static com.sun.tools.classfile.AccessFlags.ACC_STRICT;\n+import jdk.internal.classfile.*;\n@@ -44,2 +47,1 @@\n-        ClassFile cf = getClassFile(\"LambdaTestStrictFPFlag$Test.class\");\n-        ConstantPool cp = cf.constant_pool;\n+        ClassModel cm = getClassFile(\"LambdaTestStrictFPFlag$Test.class\");\n@@ -47,3 +49,3 @@\n-        for (Method meth: cf.methods) {\n-            if (meth.getName(cp).startsWith(\"lambda$\")) {\n-                if ((meth.access_flags.flags & ACC_STRICT) == 0) {\n+        for (MethodModel meth: cm.methods()) {\n+            if (meth.methodName().stringValue().startsWith(\"lambda$\")) {\n+                if ((meth.flags().flagsMask() & Classfile.ACC_STRICT) == 0){\n@@ -60,1 +62,1 @@\n-    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {\n+    ClassModel getClassFile(String name) throws IOException {\n@@ -62,5 +64,3 @@\n-        InputStream in = url.openStream();\n-        try {\n-            return ClassFile.read(in);\n-        } finally {\n-            in.close();\n+        assert url != null;\n+        try (InputStream in = url.openStream()) {\n+            return Classfile.of().parse(in.readAllBytes());\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaTestStrictFPFlag.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -31,7 +35,2 @@\n-import com.sun.tools.classfile.ClassFile;\n-import com.sun.tools.classfile.ConstantPoolException;\n-import com.sun.tools.classfile.Method;\n-import com.sun.tools.classfile.Attribute;\n-import com.sun.tools.classfile.Code_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute;\n-import com.sun.tools.classfile.LineNumberTable_attribute.Entry;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.*;\n@@ -41,0 +40,1 @@\n+import java.util.List;\n@@ -45,2 +45,2 @@\n-        Entry[] lines = findEntries();\n-        if (lines == null || lines.length != 5)\n+        List<LineNumberInfo> lines = findEntries();\n+        if (lines == null || lines.size() != 5)\n@@ -49,3 +49,3 @@\n-        int current = lines[0].line_number;\n-        for (Entry e : lines) {\n-            if (e.line_number != current)\n+        int current = lines.get(0).lineNumber();\n+        for (LineNumberInfo e : lines) {\n+            if (e.lineNumber() != current)\n@@ -55,1 +55,1 @@\n-   }\n+    }\n@@ -57,8 +57,9 @@\n-    static Entry[] findEntries() throws IOException, ConstantPoolException {\n-        ClassFile self = ClassFile.read(ConditionalLineNumberTest.class.getResourceAsStream(\"ConditionalLineNumberTest.class\"));\n-        for (Method m : self.methods) {\n-            if (\"method\".equals(m.getName(self.constant_pool))) {\n-                Code_attribute code_attribute = (Code_attribute)m.attributes.get(Attribute.Code);\n-                for (Attribute at : code_attribute.attributes) {\n-                    if (Attribute.LineNumberTable.equals(at.getName(self.constant_pool))) {\n-                        return ((LineNumberTable_attribute)at).line_number_table;\n+    static List<LineNumberInfo> findEntries() throws IOException {\n+        ClassModel self = Classfile.of().parse(ConditionalLineNumberTest.class.getResourceAsStream(\"ConditionalLineNumberTest.class\").readAllBytes());\n+        for (MethodModel m : self.methods()) {\n+            if (m.methodName().equalsString(\"method\")) {\n+                CodeAttribute code_attribute = m.findAttribute(Attributes.CODE).orElse(null);\n+                assert code_attribute != null;\n+                for (Attribute<?> at : code_attribute.attributes()) {\n+                    if (at instanceof LineNumberTableAttribute) {\n+                        return ((LineNumberTableAttribute)at).lineNumbers();\n","filename":"test\/langtools\/tools\/javac\/linenumbers\/ConditionalLineNumberTest.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n@@ -34,2 +38,2 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Methodref_info;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.constantpool.*;\n@@ -45,7 +49,7 @@\n-        InputStream in = NoObjectToString.class.getResourceAsStream(\"NoObjectToString$Test.class\");\n-        try {\n-            ClassFile cf = ClassFile.read(in);\n-            for (ConstantPool.CPInfo cpinfo: cf.constant_pool.entries()) {\n-                if (cpinfo.getTag() == ConstantPool.CONSTANT_Methodref) {\n-                    CONSTANT_Methodref_info ref = (CONSTANT_Methodref_info) cpinfo;\n-                    String methodDesc = ref.getClassInfo().getName() + \".\" + ref.getNameAndTypeInfo().getName() + \":\" + ref.getNameAndTypeInfo().getType();\n+        try (InputStream in = NoObjectToString.class.getResourceAsStream(\"NoObjectToString$Test.class\")) {\n+            assert in != null;\n+            ClassModel cm = Classfile.of().parse(in.readAllBytes());\n+            for (int i = 1; i < cm.constantPool().entryCount(); ++i) {\n+                PoolEntry pe = cm.constantPool().entryByIndex(i);\n+                if (pe instanceof MethodRefEntry ref) {\n+                    String methodDesc = ref.owner().name() + \".\" + ref.nameAndType().name() + \":\" + ref.nameAndType().type();\n@@ -58,4 +62,0 @@\n-        } catch (ConstantPoolException ignore) {\n-            throw new AssertionError(ignore);\n-        } finally {\n-            in.close();\n","filename":"test\/langtools\/tools\/javac\/resolve\/NoObjectToString.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n- * @modules jdk.jdeps\/com.sun.tools.classfile\n+ * @modules java.base\/jdk.internal.classfile\n+ *          java.base\/jdk.internal.classfile.attribute\n+ *          java.base\/jdk.internal.classfile.constantpool\n+ *          java.base\/jdk.internal.classfile.instruction\n+ *          java.base\/jdk.internal.classfile.components\n+ *          java.base\/jdk.internal.classfile.impl\n@@ -38,2 +43,0 @@\n-import com.sun.tools.classfile.*;\n-import com.sun.tools.classfile.ConstantPool.CONSTANT_Utf8_info;\n@@ -42,0 +45,2 @@\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.attribute.PermittedSubclassesAttribute;\n@@ -75,1 +80,1 @@\n-            void check(ClassFile classFile) throws Exception {\n+            void check(ClassModel classFile) throws Exception {\n@@ -77,3 +82,3 @@\n-                for (Attribute attr: classFile.attributes) {\n-                    if (attr.getName(classFile.constant_pool).equals(\"PermittedSubclasses\")) {\n-                        PermittedSubclasses_attribute permittedSubclasses = (PermittedSubclasses_attribute)attr;\n+                for (Attribute<?> attr: classFile.attributes()) {\n+                    if (attr.attributeName().equals(\"PermittedSubclasses\")) {\n+                        PermittedSubclassesAttribute permittedSubclasses = (PermittedSubclassesAttribute)attr;\n@@ -81,2 +86,2 @@\n-                        if (permittedSubclasses.subtypes == null || permittedSubclasses.subtypes.length == 0) {\n-                            throw new AssertionError(classFile.getName() + \" should be sealed\");\n+                        if (permittedSubclasses.permittedSubclasses().isEmpty()) {\n+                            throw new AssertionError(classFile.thisClass().name() + \" should be sealed\");\n@@ -87,1 +92,1 @@\n-                    throw new AssertionError(classFile.getName() + \" should be sealed\");\n+                    throw new AssertionError(classFile.thisClass().name() + \" should be sealed\");\n@@ -92,3 +97,3 @@\n-            void check(ClassFile classFile) throws Exception {\n-                if ((classFile.access_flags.flags & Flags.FINAL) == 0) {\n-                    throw new AssertionError(classFile.getName() + \" should be final\");\n+            void check(ClassModel classFile) throws Exception {\n+                if ((classFile.flags().flagsMask() & Flags.FINAL) == 0) {\n+                    throw new AssertionError(classFile.thisClass().name() + \" should be final\");\n@@ -99,4 +104,4 @@\n-            void check(ClassFile classFile) throws Exception {\n-                for (Attribute attr: classFile.attributes) {\n-                    if (attr.getName(classFile.constant_pool).equals(\"PermittedSubclasses\")) {\n-                        throw new AssertionError(classFile.getName() + \" should not be sealed\");\n+            void check(ClassModel classFile) throws Exception {\n+                for (Attribute<?> attr: classFile.attributes()) {\n+                    if (attr.attributeName().equals(\"PermittedSubclasses\")) {\n+                        throw new AssertionError(classFile.thisClass().name() + \" should not be sealed\");\n@@ -105,2 +110,2 @@\n-                if ((classFile.access_flags.flags & Flags.FINAL) != 0) {\n-                    throw new AssertionError(classFile.getName() + \" should not be final\");\n+                if ((classFile.flags().flagsMask() & Flags.FINAL) != 0) {\n+                    throw new AssertionError(classFile.thisClass().name() + \" should not be final\");\n@@ -111,1 +116,1 @@\n-        abstract void check(ClassFile classFile) throws Exception;\n+        abstract void check(ClassModel classFile) throws Exception;\n@@ -114,1 +119,1 @@\n-    void checkClassFile(final ClassFile classFile, CheckFor... checkFor) throws Exception {\n+    void checkClassFile(final ClassModel classFile, CheckFor... checkFor) throws Exception {\n","filename":"test\/langtools\/tools\/javac\/sealed\/CheckSubtypesOfSealedTest.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"}]}