{"files":[{"patch":"@@ -1560,1 +1560,1 @@\n-  FieldAllocationType update(bool is_static, BasicType type) {\n+  void update(bool is_static, BasicType type) {\n@@ -1567,1 +1567,0 @@\n-    return atype;\n@@ -1707,3 +1706,2 @@\n-    \/\/ Remember how many oops we encountered and compute allocation type\n-    const FieldAllocationType atype = fac->update(is_static, type);\n-    field->set_allocation_type(atype);\n+    \/\/ Update FieldAllocationCount for this kind of field\n+    fac->update(is_static, type);\n@@ -1752,3 +1750,2 @@\n-      \/\/ Remember how many oops we encountered and compute allocation type\n-      const FieldAllocationType atype = fac->update(false, type);\n-      field->set_allocation_type(atype);\n+      \/\/ Update FieldAllocationCount for this kind of field\n+      fac->update(false, type);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -50,5 +50,2 @@\n-#define FIELDINFO_TAG_BLANK            0\n-#define FIELDINFO_TAG_OFFSET           1\n-#define FIELDINFO_TAG_TYPE_PLAIN       2\n-#define FIELDINFO_TAG_TYPE_CONTENDED   3\n-#define FIELDINFO_TAG_MASK             3\n+#define FIELDINFO_TAG_OFFSET           1 << 0\n+#define FIELDINFO_TAG_CONTENDED        1 << 1\n@@ -59,1 +56,3 @@\n-  \/\/    ..........................................00  - blank\n+  \/\/    ..........................................CO\n+  \/\/    ..........................................00  - non-contended field\n+  \/\/    [--contention_group--]....................10  - contended field with contention group\n@@ -61,2 +60,5 @@\n-  \/\/    ......................[-------type-------]10  - plain field with type\n-  \/\/    [--contention_group--][-------type-------]11  - contended field with type and contention group\n+\n+  \/\/ Bit O indicates if the packed field contains an offset (O=1) or not (O=0)\n+  \/\/ Bit C indicates if the field is contended (C=1) or not (C=0)\n+  \/\/       (if it is contended, the high packed field contains the contention group)\n+\n@@ -106,15 +108,2 @@\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_OFFSET:\n-        return build_int_from_shorts(_shorts[low_packed_offset], _shorts[high_packed_offset]) >> FIELDINFO_TAG_SIZE;\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-        fatal(\"Asking offset for the plain type field\");\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-        fatal(\"Asking offset for the contended type field\");\n-      case FIELDINFO_TAG_BLANK:\n-        fatal(\"Asking offset for the blank field\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n-    return 0;\n+    assert((_shorts[low_packed_offset] & FIELDINFO_TAG_OFFSET) != 0, \"Offset must have been set\");\n+    return build_int_from_shorts(_shorts[low_packed_offset], _shorts[high_packed_offset]) >> FIELDINFO_TAG_SIZE;\n@@ -124,15 +113,1 @@\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-        return false;\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-        return true;\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_OFFSET:\n-        fatal(\"Asking contended flag for the field with offset\");\n-      case FIELDINFO_TAG_BLANK:\n-        fatal(\"Asking contended flag for the blank field\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n-    return false;\n+    return (_shorts[low_packed_offset] & FIELDINFO_TAG_CONTENDED) != 0;\n@@ -142,15 +117,3 @@\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-        return 0;\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-        return _shorts[high_packed_offset];\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_OFFSET:\n-        fatal(\"Asking the contended group for the field with offset\");\n-      case FIELDINFO_TAG_BLANK:\n-        fatal(\"Asking the contended group for the blank field\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n-    return 0;\n+    assert((_shorts[low_packed_offset] & FIELDINFO_TAG_OFFSET) == 0, \"Offset must not have been set\");\n+    assert((_shorts[low_packed_offset] & FIELDINFO_TAG_CONTENDED) != 0, \"Field must be contended\");\n+    return _shorts[high_packed_offset];\n@@ -159,17 +122,0 @@\n-  u2 allocation_type() const {\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-        return (lo >> FIELDINFO_TAG_SIZE);\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_OFFSET:\n-        fatal(\"Asking the field type for field with offset\");\n-      case FIELDINFO_TAG_BLANK:\n-        fatal(\"Asking the field type for the blank field\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n-    return 0;\n-  }\n-\n@@ -177,1 +123,1 @@\n-    return (_shorts[low_packed_offset] & FIELDINFO_TAG_MASK) == FIELDINFO_TAG_OFFSET;\n+    return (_shorts[low_packed_offset] & FIELDINFO_TAG_OFFSET)!= 0;\n@@ -203,18 +149,0 @@\n-  void set_allocation_type(int type) {\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_BLANK:\n-        _shorts[low_packed_offset] = ((type << FIELDINFO_TAG_SIZE)) & 0xFFFF;\n-        _shorts[low_packed_offset] &= ~FIELDINFO_TAG_MASK;\n-        _shorts[low_packed_offset] |= FIELDINFO_TAG_TYPE_PLAIN;\n-        return;\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-      case FIELDINFO_TAG_OFFSET:\n-        fatal(\"Setting the field type with overwriting\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n-  }\n-\n@@ -222,16 +150,4 @@\n-    u2 lo = _shorts[low_packed_offset];\n-    switch(lo & FIELDINFO_TAG_MASK) {\n-      case FIELDINFO_TAG_TYPE_PLAIN:\n-        _shorts[low_packed_offset] |= FIELDINFO_TAG_TYPE_CONTENDED;\n-        _shorts[high_packed_offset] = val;\n-        return;\n-#ifndef PRODUCT\n-      case FIELDINFO_TAG_TYPE_CONTENDED:\n-        fatal(\"Overwriting contended group\");\n-      case FIELDINFO_TAG_BLANK:\n-        fatal(\"Setting contended group for the blank field\");\n-      case FIELDINFO_TAG_OFFSET:\n-        fatal(\"Setting contended group for field with offset\");\n-#endif\n-    }\n-    ShouldNotReachHere();\n+    assert((_shorts[low_packed_offset] & FIELDINFO_TAG_OFFSET) == 0, \"Offset must not have been set\");\n+    assert((_shorts[low_packed_offset] & FIELDINFO_TAG_CONTENDED) == 0, \"Overwritting contended group\");\n+    _shorts[low_packed_offset] |= FIELDINFO_TAG_CONTENDED;\n+    _shorts[high_packed_offset] = val;\n","filename":"src\/hotspot\/share\/oops\/fieldInfo.hpp","additions":21,"deletions":105,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -137,4 +137,0 @@\n-  int allocation_type() const {\n-    return field()->allocation_type();\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2260,1 +2260,0 @@\n-  declare_preprocessor_constant(\"FIELDINFO_TAG_MASK\", FIELDINFO_TAG_MASK) \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  private static short FIELDINFO_TAG_MASK;\n@@ -120,1 +119,0 @@\n-    FIELDINFO_TAG_MASK             = db.lookupIntConstant(\"FIELDINFO_TAG_MASK\").shortValue();\n@@ -400,1 +398,1 @@\n-    if ((lo & FIELDINFO_TAG_MASK) == FIELDINFO_TAG_OFFSET) {\n+    if ((lo & FIELDINFO_TAG_OFFSET) == FIELDINFO_TAG_OFFSET) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}