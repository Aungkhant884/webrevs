{"files":[{"patch":"@@ -189,1 +189,2 @@\n-                throw new IllegalArgumentException(\"Invalid characters in hostname\");\n+                final String invalidChar = String.format(\"\\\\u%04x\", (int) c);\n+                throw new IllegalArgumentException(\"Invalid character \" + invalidChar + \" in hostname\");\n","filename":"src\/java.base\/share\/classes\/java\/net\/HostPortrange.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.URLPermission;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8297311\n+ * @summary Verify that the exception thrown by URLPermission class, for invalid host name,\n+ * contains expected exception message\n+ * @run testng InvalidCharacterTest\n+ *\/\n+public class InvalidCharacterTest {\n+\n+    \/**\n+     * Creates an instance of URLPermission with a string containing invalid character\n+     * and verifies that the construction fails with IllegalArgumentException\n+     *\/\n+    @Test\n+    public void testIllegalArgException() throws Exception {\n+        final char invalidChar = '%';\n+        \/\/ we expect this string in the exception message\n+        final String expectedStringInMessage = String.format(\"\\\\u%04x\", (int) invalidChar);\n+        final String url = \"http:\/\/foo\" + invalidChar + \"bar.com:12345\";\n+        final IllegalArgumentException iae = Assert.expectThrows(IllegalArgumentException.class,\n+                () -> new URLPermission(url));\n+        \/\/ additionally check the error message contains the invalid char\n+        final String exMessage = iae.getMessage();\n+        System.out.println(\"Got exception message: \" + exMessage);\n+        Assert.assertNotNull(exMessage, \"Exception message is null\");\n+        Assert.assertTrue(exMessage.contains(expectedStringInMessage),\n+                expectedStringInMessage + \" missing from exception message: \" + exMessage);\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/URLPermission\/InvalidCharacterTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}