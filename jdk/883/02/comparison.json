{"files":[{"patch":"@@ -136,1 +136,1 @@\n-    \/\/ Split out tasks, as suggested in ObjArrayChunkedTask docs. Record the last\n+    \/\/ Split out tasks, as suggested in ShenandoahMarkTask docs. Record the last\n@@ -169,1 +169,1 @@\n-  \/\/ Split out tasks, as suggested in ObjArrayChunkedTask docs. Avoid pushing tasks that\n+  \/\/ Split out tasks, as suggested in ShenandoahMarkTask docs. Avoid pushing tasks that\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -187,2 +187,2 @@\n-#if SHENANDOAH_OPTIMIZED_OBJTASK\n-  \/\/ The optimized ObjArrayChunkedTask takes some bits away from the full object bits.\n+#if SHENANDOAH_OPTIMIZED_MARKTASK\n+  \/\/ The optimized ShenandoahMarkTask takes some bits away from the full object bits.\n@@ -190,1 +190,1 @@\n-  if ((uintptr_t)heap_rs.end() >= ObjArrayChunkedTask::max_addressable()) {\n+  if ((uintptr_t)heap_rs.end() >= ShenandoahMarkTask::max_addressable()) {\n@@ -194,1 +194,1 @@\n-                p2i(heap_rs.base()), p2i(heap_rs.end()), ObjArrayChunkedTask::max_addressable());\n+                p2i(heap_rs.base()), p2i(heap_rs.end()), ShenandoahMarkTask::max_addressable());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -63,1 +64,1 @@\n-\/\/ ObjArrayChunkedTask\n+\/\/ ShenandoahMarkTask\n@@ -126,1 +127,1 @@\n-#define SHENANDOAH_OPTIMIZED_OBJTASK 1\n+#define SHENANDOAH_OPTIMIZED_MARKTASK 1\n@@ -128,1 +129,1 @@\n-#define SHENANDOAH_OPTIMIZED_OBJTASK 0\n+#define SHENANDOAH_OPTIMIZED_MARKTASK 0\n@@ -131,2 +132,2 @@\n-#if SHENANDOAH_OPTIMIZED_OBJTASK\n-class ObjArrayChunkedTask\n+#if SHENANDOAH_OPTIMIZED_MARKTASK\n+class ShenandoahMarkTask\n@@ -134,11 +135,3 @@\n-public:\n-  enum {\n-    chunk_bits   = 10,\n-    pow_bits     = 5,\n-    oop_bits     = sizeof(uintptr_t)*8 - chunk_bits - pow_bits\n-  };\n-  enum {\n-    oop_shift    = 0,\n-    pow_shift    = oop_shift + oop_bits,\n-    chunk_shift  = pow_shift + pow_bits\n-  };\n+private:\n+  \/\/ Everything is encoded into this field...\n+  uintptr_t _obj;\n@@ -146,11 +139,4 @@\n-public:\n-  ObjArrayChunkedTask(oop o = NULL) {\n-    assert(decode_oop(encode_oop(o)) ==  o, \"oop can be encoded: \" PTR_FORMAT, p2i(o));\n-    _obj = encode_oop(o);\n-  }\n-  ObjArrayChunkedTask(oop o, int chunk, int pow) {\n-    assert(decode_oop(encode_oop(o)) == o, \"oop can be encoded: \" PTR_FORMAT, p2i(o));\n-    assert(decode_chunk(encode_chunk(chunk)) == chunk, \"chunk can be encoded: %d\", chunk);\n-    assert(decode_pow(encode_pow(pow)) == pow, \"pow can be encoded: %d\", pow);\n-    _obj = encode_oop(o) | encode_chunk(chunk) | encode_pow(pow);\n-  }\n+  \/\/ ...with these:\n+  static const uint8_t chunk_bits  = 10;\n+  static const uint8_t pow_bits    = 5;\n+  static const uint8_t oop_bits    = sizeof(uintptr_t)*8 - chunk_bits - pow_bits;\n@@ -158,1 +144,9 @@\n-  \/\/ Trivially copyable.\n+  static const uint8_t oop_shift   = 0;\n+  static const uint8_t pow_shift   = oop_bits;\n+  static const uint8_t chunk_shift = oop_bits + pow_bits;\n+\n+  static const uintptr_t oop_extract_mask       = right_n_bits(oop_bits);\n+  static const uintptr_t chunk_pow_extract_mask = ~right_n_bits(oop_bits);\n+\n+  static const int chunk_range_mask = right_n_bits(chunk_bits);\n+  static const int pow_range_mask   = right_n_bits(pow_bits);\n@@ -161,1 +155,7 @@\n-    return (oop) reinterpret_cast<void*>((val >> oop_shift) & right_n_bits(oop_bits));\n+    STATIC_ASSERT(oop_shift == 0);\n+    return cast_to_oop(val & oop_extract_mask);\n+  }\n+\n+  inline bool decode_not_chunked(uintptr_t val) const {\n+    \/\/ No need to shift for a comparison to zero\n+    return (val & chunk_pow_extract_mask) == 0;\n@@ -165,1 +165,1 @@\n-    return (int) ((val >> chunk_shift) & right_n_bits(chunk_bits));\n+    return (int) ((val >> chunk_shift) & chunk_range_mask);\n@@ -169,1 +169,1 @@\n-    return (int) ((val >> pow_shift) & right_n_bits(pow_bits));\n+    return (int) ((val >> pow_shift) & pow_range_mask);\n@@ -173,1 +173,2 @@\n-    return ((uintptr_t)(void*) obj) << oop_shift;\n+    STATIC_ASSERT(oop_shift == 0);\n+    return cast_from_oop<uintptr_t>(obj);\n@@ -184,4 +185,26 @@\n-  inline oop obj()   const { return decode_oop(_obj);   }\n-  inline int chunk() const { return decode_chunk(_obj); }\n-  inline int pow()   const { return decode_pow(_obj);   }\n-  inline bool is_not_chunked() const { return (_obj & ~right_n_bits(oop_bits + pow_bits)) == 0; }\n+public:\n+  ShenandoahMarkTask(oop o = NULL) {\n+    uintptr_t enc = encode_oop(o);\n+    assert(decode_oop(enc) == o,    \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_not_chunked(enc), \"task should not be chunked\");\n+    _obj = enc;\n+  }\n+\n+  ShenandoahMarkTask(oop o, int chunk, int pow) {\n+    uintptr_t enc_oop = encode_oop(o);\n+    uintptr_t enc_chunk = encode_chunk(chunk);\n+    uintptr_t enc_pow = encode_pow(pow);\n+    uintptr_t enc = enc_oop | enc_chunk | enc_pow;\n+    assert(decode_oop(enc) == o,       \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_chunk(enc) == chunk, \"chunk encoding should work: %d\", chunk);\n+    assert(decode_pow(enc) == pow,     \"pow encoding should work: %d\", pow);\n+    assert(!decode_not_chunked(enc),   \"task should be chunked\");\n+    _obj = enc;\n+  }\n+\n+  \/\/ Trivially copyable.\n+\n+public:\n+  inline oop  obj()            const { return decode_oop(_obj);   }\n+  inline int  chunk()          const { return decode_chunk(_obj); }\n+  inline int  pow()            const { return decode_pow(_obj);   }\n@@ -189,1 +212,3 @@\n-  DEBUG_ONLY(bool is_valid() const); \/\/ Tasks to be pushed\/popped must be valid.\n+  inline bool is_not_chunked() const { return decode_not_chunked(_obj); }\n+\n+  DEBUG_ONLY(bool is_valid() const;) \/\/ Tasks to be pushed\/popped must be valid.\n@@ -198,3 +223,0 @@\n-\n-private:\n-  uintptr_t _obj;\n@@ -203,1 +225,1 @@\n-class ObjArrayChunkedTask\n+class ShenandoahMarkTask\n@@ -205,1 +227,1 @@\n-public:\n+private:\n@@ -210,0 +232,5 @@\n+\n+  oop _obj;\n+  int _chunk;\n+  int _pow;\n+\n@@ -211,1 +238,2 @@\n-  ObjArrayChunkedTask(oop o = NULL, int chunk = 0, int pow = 0): _obj(o) {\n+  ShenandoahMarkTask(oop o = NULL, int chunk = 0, int pow = 0):\n+    _obj(o), _chunk(chunk), _pow(pow) {\n@@ -214,2 +242,0 @@\n-    _chunk = chunk;\n-    _pow = pow;\n@@ -220,4 +246,3 @@\n-  inline oop obj()   const { return _obj; }\n-  inline int chunk() const { return _chunk; }\n-  inline int pow()  const { return _pow; }\n-\n+  inline oop obj()             const { return _obj; }\n+  inline int chunk()           const { return _chunk; }\n+  inline int pow()             const { return _pow; }\n@@ -226,1 +251,1 @@\n-  DEBUG_ONLY(bool is_valid() const); \/\/ Tasks to be pushed\/popped must be valid.\n+  DEBUG_ONLY(bool is_valid() const;) \/\/ Tasks to be pushed\/popped must be valid.\n@@ -235,5 +260,0 @@\n-\n-private:\n-  oop _obj;\n-  int _chunk;\n-  int _pow;\n@@ -241,1 +261,1 @@\n-#endif \/\/ SHENANDOAH_OPTIMIZED_OBJTASK\n+#endif \/\/ SHENANDOAH_OPTIMIZED_MARKTASK\n@@ -247,1 +267,0 @@\n-typedef ObjArrayChunkedTask ShenandoahMarkTask;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":76,"deletions":57,"binary":false,"changes":133,"status":"modified"}]}