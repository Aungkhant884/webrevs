{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -135,0 +136,1 @@\n+  \/\/ Everything is encoded into this field...\n@@ -137,10 +139,4 @@\n-  enum {\n-    chunk_bits   = 10,\n-    pow_bits     = 5,\n-    oop_bits     = sizeof(uintptr_t)*8 - chunk_bits - pow_bits\n-  };\n-  enum {\n-    oop_shift    = 0,\n-    pow_shift    = oop_shift + oop_bits,\n-    chunk_shift  = pow_shift + pow_bits\n-  };\n+  \/\/ ...with these:\n+  static const uint8_t chunk_bits  = 10;\n+  static const uint8_t pow_bits    = 5;\n+  static const uint8_t oop_bits    = sizeof(uintptr_t)*8 - chunk_bits - pow_bits;\n@@ -148,1 +144,9 @@\n-  static const uintptr_t oop_decode_mask = right_n_bits(oop_bits) - 3;\n+  static const uint8_t oop_shift   = 0;\n+  static const uint8_t pow_shift   = oop_bits;\n+  static const uint8_t chunk_shift = oop_bits + pow_bits;\n+\n+  static const uintptr_t oop_extract_mask       = right_n_bits(oop_bits);\n+  static const uintptr_t chunk_pow_extract_mask = ~right_n_bits(oop_bits);\n+\n+  static const int chunk_range_mask = right_n_bits(chunk_bits);\n+  static const int pow_range_mask   = right_n_bits(pow_bits);\n@@ -151,1 +155,2 @@\n-    return (oop) reinterpret_cast<void*>((val >> oop_shift) & oop_decode_mask);\n+    STATIC_ASSERT(oop_shift == 0);\n+    return cast_to_oop(val & oop_extract_mask);\n@@ -154,2 +159,3 @@\n-  inline int decode_chunk(uintptr_t val) const {\n-    return (int) ((val >> chunk_shift) & right_n_bits(chunk_bits));\n+  inline bool decode_not_chunked(uintptr_t val) const {\n+    \/\/ No need to shift for a comparison to zero\n+    return (val & chunk_pow_extract_mask) == 0;\n@@ -158,2 +164,2 @@\n-  inline int decode_pow(uintptr_t val) const {\n-    return (int) ((val >> pow_shift) & right_n_bits(pow_bits));\n+  inline int decode_chunk(uintptr_t val) const {\n+    return (int) ((val >> chunk_shift) & chunk_range_mask);\n@@ -162,2 +168,2 @@\n-  inline bool decode_not_chunked(uintptr_t val) const {\n-    return (val & ~right_n_bits(oop_bits + pow_bits)) == 0;\n+  inline int decode_pow(uintptr_t val) const {\n+    return (int) ((val >> pow_shift) & pow_range_mask);\n@@ -167,1 +173,2 @@\n-    return ((uintptr_t)(void*) obj) << oop_shift;\n+    STATIC_ASSERT(oop_shift == 0);\n+    return cast_from_oop<uintptr_t>(obj);\n@@ -181,4 +188,2 @@\n-    assert(decode_oop(enc) == o,\n-           \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n-    assert(decode_not_chunked(enc),\n-           \"task should not be chunked\");\n+    assert(decode_oop(enc) == o,    \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_not_chunked(enc), \"task should not be chunked\");\n@@ -193,8 +198,4 @@\n-    assert(decode_oop(enc) == o,\n-           \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n-    assert(decode_chunk(enc) == chunk,\n-           \"chunk encoding should work: %d\", chunk);\n-    assert(decode_pow(enc) == pow,\n-           \"pow encoding should work: %d\", pow);\n-    assert(!decode_not_chunked(enc),\n-           \"task should be chunked\");\n+    assert(decode_oop(enc) == o,       \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_chunk(enc) == chunk, \"chunk encoding should work: %d\", chunk);\n+    assert(decode_pow(enc) == pow,     \"pow encoding should work: %d\", pow);\n+    assert(!decode_not_chunked(enc),   \"task should be chunked\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"}]}