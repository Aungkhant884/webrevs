{"files":[{"patch":"@@ -136,1 +136,1 @@\n-    \/\/ Split out tasks, as suggested in ObjArrayChunkedTask docs. Record the last\n+    \/\/ Split out tasks, as suggested in ShenandoahMarkTask docs. Record the last\n@@ -169,1 +169,1 @@\n-  \/\/ Split out tasks, as suggested in ObjArrayChunkedTask docs. Avoid pushing tasks that\n+  \/\/ Split out tasks, as suggested in ShenandoahMarkTask docs. Avoid pushing tasks that\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -187,2 +187,2 @@\n-#if SHENANDOAH_OPTIMIZED_OBJTASK\n-  \/\/ The optimized ObjArrayChunkedTask takes some bits away from the full object bits.\n+#if SHENANDOAH_OPTIMIZED_MARKTASK\n+  \/\/ The optimized ShenandoahMarkTask takes some bits away from the full object bits.\n@@ -190,1 +190,1 @@\n-  if ((uintptr_t)heap_rs.end() >= ObjArrayChunkedTask::max_addressable()) {\n+  if ((uintptr_t)heap_rs.end() >= ShenandoahMarkTask::max_addressable()) {\n@@ -194,1 +194,1 @@\n-                p2i(heap_rs.base()), p2i(heap_rs.end()), ObjArrayChunkedTask::max_addressable());\n+                p2i(heap_rs.base()), p2i(heap_rs.end()), ShenandoahMarkTask::max_addressable());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-\/\/ ObjArrayChunkedTask\n+\/\/ ShenandoahMarkTask\n@@ -126,1 +126,1 @@\n-#define SHENANDOAH_OPTIMIZED_OBJTASK 1\n+#define SHENANDOAH_OPTIMIZED_MARKTASK 1\n@@ -128,1 +128,1 @@\n-#define SHENANDOAH_OPTIMIZED_OBJTASK 0\n+#define SHENANDOAH_OPTIMIZED_MARKTASK 0\n@@ -131,2 +131,2 @@\n-#if SHENANDOAH_OPTIMIZED_OBJTASK\n-class ObjArrayChunkedTask\n+#if SHENANDOAH_OPTIMIZED_MARKTASK\n+class ShenandoahMarkTask\n@@ -134,1 +134,3 @@\n-public:\n+private:\n+  uintptr_t _obj;\n+\n@@ -146,13 +148,1 @@\n-public:\n-  ObjArrayChunkedTask(oop o = NULL) {\n-    assert(decode_oop(encode_oop(o)) ==  o, \"oop can be encoded: \" PTR_FORMAT, p2i(o));\n-    _obj = encode_oop(o);\n-  }\n-  ObjArrayChunkedTask(oop o, int chunk, int pow) {\n-    assert(decode_oop(encode_oop(o)) == o, \"oop can be encoded: \" PTR_FORMAT, p2i(o));\n-    assert(decode_chunk(encode_chunk(chunk)) == chunk, \"chunk can be encoded: %d\", chunk);\n-    assert(decode_pow(encode_pow(pow)) == pow, \"pow can be encoded: %d\", pow);\n-    _obj = encode_oop(o) | encode_chunk(chunk) | encode_pow(pow);\n-  }\n-\n-  \/\/ Trivially copyable.\n+  static const uintptr_t oop_decode_mask = right_n_bits(oop_bits) - 3;\n@@ -161,1 +151,1 @@\n-    return (oop) reinterpret_cast<void*>((val >> oop_shift) & right_n_bits(oop_bits));\n+    return (oop) reinterpret_cast<void*>((val >> oop_shift) & oop_decode_mask);\n@@ -172,0 +162,4 @@\n+  inline bool decode_not_chunked(uintptr_t val) const {\n+    return (val & ~right_n_bits(oop_bits + pow_bits)) == 0;\n+  }\n+\n@@ -173,1 +167,1 @@\n-    return ((uintptr_t)(void*) obj) << oop_shift;\n+    return ((uintptr_t) (void *) obj) << oop_shift;\n@@ -184,4 +178,34 @@\n-  inline oop obj()   const { return decode_oop(_obj);   }\n-  inline int chunk() const { return decode_chunk(_obj); }\n-  inline int pow()   const { return decode_pow(_obj);   }\n-  inline bool is_not_chunked() const { return (_obj & ~right_n_bits(oop_bits + pow_bits)) == 0; }\n+public:\n+  ShenandoahMarkTask(oop o = NULL) {\n+    uintptr_t enc = encode_oop(o);\n+    assert(decode_oop(enc) == o,\n+           \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_not_chunked(enc),\n+           \"task should not be chunked\");\n+    _obj = enc;\n+  }\n+\n+  ShenandoahMarkTask(oop o, int chunk, int pow) {\n+    uintptr_t enc_oop = encode_oop(o);\n+    uintptr_t enc_chunk = encode_chunk(chunk);\n+    uintptr_t enc_pow = encode_pow(pow);\n+    uintptr_t enc = enc_oop | enc_chunk | enc_pow;\n+    assert(decode_oop(enc) == o,\n+           \"oop encoding should work: \" PTR_FORMAT, p2i(o));\n+    assert(decode_chunk(enc) == chunk,\n+           \"chunk encoding should work: %d\", chunk);\n+    assert(decode_pow(enc) == pow,\n+           \"pow encoding should work: %d\", pow);\n+    assert(!decode_not_chunked(enc),\n+           \"task should be chunked\");\n+    _obj = enc;\n+  }\n+\n+  \/\/ Trivially copyable.\n+\n+public:\n+  inline oop  obj()            const { return decode_oop(_obj);   }\n+  inline int  chunk()          const { return decode_chunk(_obj); }\n+  inline int  pow()            const { return decode_pow(_obj);   }\n+\n+  inline bool is_not_chunked() const { return decode_not_chunked(_obj); }\n@@ -189,1 +213,1 @@\n-  DEBUG_ONLY(bool is_valid() const); \/\/ Tasks to be pushed\/popped must be valid.\n+  DEBUG_ONLY(bool is_valid() const;) \/\/ Tasks to be pushed\/popped must be valid.\n@@ -198,3 +222,0 @@\n-\n-private:\n-  uintptr_t _obj;\n@@ -203,1 +224,1 @@\n-class ObjArrayChunkedTask\n+class ShenandoahMarkTask\n@@ -205,1 +226,1 @@\n-public:\n+private:\n@@ -210,0 +231,5 @@\n+\n+  oop _obj;\n+  int _chunk;\n+  int _pow;\n+\n@@ -211,1 +237,2 @@\n-  ObjArrayChunkedTask(oop o = NULL, int chunk = 0, int pow = 0): _obj(o) {\n+  ShenandoahMarkTask(oop o = NULL, int chunk = 0, int pow = 0):\n+    _obj(o), _chunk(chunk), _pow(pow) {\n@@ -214,2 +241,0 @@\n-    _chunk = chunk;\n-    _pow = pow;\n@@ -220,4 +245,3 @@\n-  inline oop obj()   const { return _obj; }\n-  inline int chunk() const { return _chunk; }\n-  inline int pow()  const { return _pow; }\n-\n+  inline oop obj()             const { return _obj; }\n+  inline int chunk()           const { return _chunk; }\n+  inline int pow()             const { return _pow; }\n@@ -226,1 +250,1 @@\n-  DEBUG_ONLY(bool is_valid() const); \/\/ Tasks to be pushed\/popped must be valid.\n+  DEBUG_ONLY(bool is_valid() const;) \/\/ Tasks to be pushed\/popped must be valid.\n@@ -235,5 +259,0 @@\n-\n-private:\n-  oop _obj;\n-  int _chunk;\n-  int _pow;\n@@ -241,1 +260,1 @@\n-#endif \/\/ SHENANDOAH_OPTIMIZED_OBJTASK\n+#endif \/\/ SHENANDOAH_OPTIMIZED_MARKTASK\n@@ -247,1 +266,0 @@\n-typedef ObjArrayChunkedTask ShenandoahMarkTask;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":64,"deletions":46,"binary":false,"changes":110,"status":"modified"}]}