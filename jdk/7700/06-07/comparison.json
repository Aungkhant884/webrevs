{"files":[{"patch":"@@ -2965,1 +2965,1 @@\n-int C2_MacroAssembler::array_hashcode_elsize(BasicType eltype) {\n+int C2_MacroAssembler::arrays_hashcode_elsize(BasicType eltype) {\n@@ -2967,6 +2967,5 @@\n-  case T_BYTE:\n-    return sizeof(jbyte);\n-  case T_CHAR:\n-    return sizeof(jchar);\n-  case T_INT:\n-    return sizeof(jint);\n+  case T_BYTE:  return sizeof(jbyte);\n+  case T_SHORT: return sizeof(jshort);\n+  case T_CHAR:  return sizeof(jchar);\n+  case T_INT:   return sizeof(jint);\n+  case T_FLOAT: return sizeof(jfloat);\n@@ -2979,1 +2978,1 @@\n-void C2_MacroAssembler::array_hashcode_elload(Register dst, Address src, BasicType eltype) {\n+void C2_MacroAssembler::arrays_hashcode_elload(Register dst, Address src, BasicType eltype) {\n@@ -2984,0 +2983,1 @@\n+  case T_SHORT:\n@@ -2987,0 +2987,4 @@\n+  case T_INT:\n+  case T_FLOAT:\n+    movl(dst, src);\n+    break;\n@@ -2992,2 +2996,2 @@\n-void C2_MacroAssembler::array_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype) {\n-  load_vector(dst, src, array_hashcode_elsize(eltype) * 8);\n+void C2_MacroAssembler::arrays_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype) {\n+  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n@@ -2996,2 +3000,2 @@\n-void C2_MacroAssembler::array_hashcode_elvload(XMMRegister dst, ExternalAddress src, BasicType eltype) {\n-  load_vector(dst, src, array_hashcode_elsize(eltype) * 8);\n+void C2_MacroAssembler::arrays_hashcode_elvload(XMMRegister dst, AddressLiteral src, BasicType eltype) {\n+  load_vector(dst, src, arrays_hashcode_elsize(eltype) * 8);\n@@ -3000,1 +3004,1 @@\n-void C2_MacroAssembler::array_hashcode_elvcast(XMMRegister dst, BasicType eltype) {\n+void C2_MacroAssembler::arrays_hashcode_elvcast(XMMRegister dst, BasicType eltype) {\n@@ -3003,1 +3007,1 @@\n-    vector_unsigned_cast(dst, dst, Assembler::AVX_256bit, eltype, T_INT);\n+    vector_unsigned_cast(dst, dst, Assembler::AVX_256bit, T_BYTE, T_INT);\n@@ -3005,0 +3009,1 @@\n+  case T_SHORT:\n@@ -3008,0 +3013,4 @@\n+  case T_INT:\n+  case T_FLOAT:\n+    \/\/ do nothing\n+    break;\n@@ -3013,6 +3022,6 @@\n-void C2_MacroAssembler::array_hashcode(Register str1, Register cnt1, Register result,\n-                                         Register i, Register coef, Register tmp, XMMRegister vnext,\n-                                         XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n-                                         XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n-                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n-                                         BasicType eltype) {\n+void C2_MacroAssembler::arrays_hashcode(Register ary1, Register cnt1, Register result,\n+                                        Register i, Register coef, Register tmp, XMMRegister vnext,\n+                                        XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                                        XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                                        XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n+                                        BasicType eltype, bool is_string_hashcode) {\n@@ -3023,2 +3032,2 @@\n-        LONG, LONG_SCALAR_LOOP_BEGIN, LONG_SCALAR_LOOP_END, LONG_VECTOR_LOOP_BEGIN, LONG_VECTOR_LOOP_END,\n-        END;\n+        LONG, LONG_INIT, LONG_SCALAR_LOOP_BEGIN, LONG_SCALAR_LOOP_END, LONG_VECTOR_LOOP_BEGIN, LONG_VECTOR_LOOP_END,\n+        NONNULL, END;\n@@ -3033,6 +3042,1 @@\n-  static const jint power_of_31_backwards[] = {\n-     2111290369,\n-    -2010103841,   350799937,    11316127,   693101697,  -254736545,   961614017,    31019807, -2077209343,\n-      -67006753,  1244764481, -2038056289,   211350913,  -408824225,  -844471871,  -997072353,  1353309697,\n-     -510534177,  1507551809,  -505558625,  -293403007,   129082719, -1796951359,  -196513505, -1807454463,\n-     1742810335,   887503681,    28629151,      923521,       29791,         961,          31,           1};\n+  const int elsize = arrays_hashcode_elsize(eltype);\n@@ -3040,1 +3044,2 @@\n-  const int elsize = array_hashcode_elsize(eltype);\n+  int length_offset  = arrayOopDesc::length_offset_in_bytes();\n+  int base_offset    = arrayOopDesc::base_offset_in_bytes(eltype);\n@@ -3042,2 +3047,12 @@\n-  \/\/ int result = 0;\n-  movl(result, 0);\n+  if (!is_string_hashcode) {\n+    testptr(ary1, ary1);\n+    jcc(Assembler::notZero, NONNULL);\n+    movl(result, 0);\n+    jmp(END);\n+    bind(NONNULL);\n+    movl(cnt1, Address(ary1, length_offset));\n+    lea(ary1, Address(ary1, base_offset));\n+  }\n+\n+  \/\/ int result = 0|1;\n+  movl(result, is_string_hashcode ? 0 : 1);\n@@ -3052,1 +3067,1 @@\n-  \/\/ } else if (cnt1 <= 31) {\n+  \/\/ } else if (cnt1 < 32) {\n@@ -3054,5 +3069,2 @@\n-  cmpl(cnt1, 31);\n-  jcc(Assembler::greater, LONG);\n-\n-  \/\/ register \"rename\"\n-  bound = coef;\n+  cmpl(cnt1, 32);\n+  jcc(Assembler::greaterEqual, LONG);\n@@ -3062,1 +3074,0 @@\n-\n@@ -3064,0 +3075,1 @@\n+  bound = coef;\n@@ -3072,1 +3084,0 @@\n-\n@@ -3078,2 +3089,2 @@\n-    \/\/ h += str1[i];\n-    array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize), idx*elsize), eltype);\n+    \/\/ h += ary1[i];\n+    arrays_hashcode_elload(tmp, Address(ary1, i, Address::times(elsize), idx*elsize), eltype);\n@@ -3082,1 +3093,0 @@\n-\n@@ -3085,1 +3095,0 @@\n-\n@@ -3094,1 +3103,0 @@\n-\n@@ -3099,2 +3107,2 @@\n-  \/\/ h += str1[i];\n-  array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize)), eltype);\n+  \/\/ h += ary1[i];\n+  arrays_hashcode_elload(tmp, Address(ary1, i, Address::times(elsize)), eltype);\n@@ -3102,1 +3110,0 @@\n-\n@@ -3106,1 +3113,0 @@\n-\n@@ -3115,0 +3121,37 @@\n+  jmp(LONG_INIT);\n+  address power_of_31_backwards = pc();\n+  emit_int32( 2111290369);\n+  emit_int32(-2010103841);\n+  emit_int32(  350799937);\n+  emit_int32(   11316127);\n+  emit_int32(  693101697);\n+  emit_int32( -254736545);\n+  emit_int32(  961614017);\n+  emit_int32(   31019807);\n+  emit_int32(-2077209343);\n+  emit_int32(  -67006753);\n+  emit_int32( 1244764481);\n+  emit_int32(-2038056289);\n+  emit_int32(  211350913);\n+  emit_int32( -408824225);\n+  emit_int32( -844471871);\n+  emit_int32( -997072353);\n+  emit_int32( 1353309697);\n+  emit_int32( -510534177);\n+  emit_int32( 1507551809);\n+  emit_int32( -505558625);\n+  emit_int32( -293403007);\n+  emit_int32(  129082719);\n+  emit_int32(-1796951359);\n+  emit_int32( -196513505);\n+  emit_int32(-1807454463);\n+  emit_int32( 1742810335);\n+  emit_int32(  887503681);\n+  emit_int32(   28629151);\n+  emit_int32(     923521);\n+  emit_int32(      29791);\n+  emit_int32(        961);\n+  emit_int32(         31);\n+  emit_int32(          1);\n+  bind(LONG_INIT);\n+\n@@ -3117,1 +3160,0 @@\n-\n@@ -3121,3 +3163,0 @@\n-\n-  bound = cnt1;\n-\n@@ -3125,0 +3164,1 @@\n+  bound = cnt1;\n@@ -3134,3 +3174,2 @@\n-\n-  \/\/ result += coef * str1[i];\n-  array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize)), eltype);\n+  \/\/ result += coef * ary1[i];\n+  arrays_hashcode_elload(tmp, Address(ary1, i, Address::times(elsize)), eltype);\n@@ -3139,1 +3178,0 @@\n-\n@@ -3143,1 +3181,0 @@\n-\n@@ -3147,1 +3184,0 @@\n-\n@@ -3157,1 +3193,0 @@\n-\n@@ -3159,1 +3194,1 @@\n-  movl(tmp, power_of_31_backwards[0]);\n+  lea(tmp, InternalAddress(power_of_31_backwards+(0*sizeof(jint))));\n@@ -3162,1 +3197,0 @@\n-\n@@ -3165,1 +3199,1 @@\n-    array_hashcode_elvload(vcoef[idx], ExternalAddress(address(&power_of_31_backwards[8*idx+1])), T_INT);\n+    arrays_hashcode_elvload(vcoef[idx], InternalAddress(power_of_31_backwards+((8*idx+1)*sizeof(jint))), T_INT);\n@@ -3167,1 +3201,0 @@\n-\n@@ -3175,4 +3208,3 @@\n-  \/\/ for (i -= 32-1; i >= 0; i -= 32) {\n-  \/\/ i -= 32-1;\n-  subl(i, 32-1);\n-\n+  \/\/ for (i &= ~(32-1); i >= 0; i -= 32) {\n+  \/\/ i &= ~(32-1);\n+  andl(i, ~(32-1));\n@@ -3183,1 +3215,2 @@\n-\n+  \/\/ loop fission to upfront the cost of fetching from memory, OOO execution\n+  \/\/ can then hopefully do a better job of prefetching\n@@ -3185,1 +3218,1 @@\n-    array_hashcode_elvload(vtmp[idx], Address(str1, i, Address::times(elsize), 8*idx*elsize), eltype);\n+    arrays_hashcode_elvload(vtmp[idx], Address(ary1, i, Address::times(elsize), 8*idx*elsize), eltype);\n@@ -3187,1 +3220,1 @@\n-  \/\/ vresult += vcoef * str1[i+8*idx:i+8*idx+7];\n+  \/\/ vresult += vcoef * ary1[i+8*idx:i+8*idx+7]; vcoef *= vnext;\n@@ -3189,1 +3222,1 @@\n-    array_hashcode_elvcast(vtmp[idx], eltype);\n+    arrays_hashcode_elvcast(vtmp[idx], eltype);\n@@ -3192,4 +3225,0 @@\n-  }\n-\n-  \/\/ vcoef *= vnext\n-  for (int idx = 0; idx < 4; idx++) {\n@@ -3198,1 +3227,0 @@\n-\n@@ -3202,1 +3230,0 @@\n-\n@@ -3215,1 +3242,1 @@\n-} \/\/ array_hashcode\n+} \/\/ arrays_hashcode\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":105,"deletions":78,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -241,14 +241,0 @@\n-  void array_hashcode(Register str1, Register cnt1, Register result,\n-                      Register i, Register coef, Register tmp, XMMRegister vnext,\n-                      XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n-                      XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n-                      XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n-                      BasicType eltype);\n-\n-  \/\/ helper functions for array_hashcode\n-  int array_hashcode_elsize(BasicType eltype);\n-  void array_hashcode_elload(Register dst, Address src, BasicType eltype);\n-  void array_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype);\n-  void array_hashcode_elvload(XMMRegister dst, ExternalAddress src, BasicType eltype);\n-  void array_hashcode_elvcast(XMMRegister dst, BasicType eltype);\n-\n@@ -293,0 +279,14 @@\n+  void arrays_hashcode(Register str1, Register cnt1, Register result,\n+                       Register i, Register coef, Register tmp, XMMRegister vnext,\n+                       XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                       XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                       XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n+                       BasicType eltype, bool is_string_hashcode);\n+\n+  \/\/ helper functions for arrays_hashcode\n+  int arrays_hashcode_elsize(BasicType eltype);\n+  void arrays_hashcode_elload(Register dst, Address src, BasicType eltype);\n+  void arrays_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype);\n+  void arrays_hashcode_elvload(XMMRegister dst, AddressLiteral src, BasicType eltype);\n+  void arrays_hashcode_elvcast(XMMRegister dst, BasicType eltype);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -11767,6 +11767,5 @@\n-instruct stringL_hashcode(rdi_RegP str1, rdx_RegI cnt1, rbx_RegI result,\n-                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3,\n-                          legRegD tmp_vec4, legRegD tmp_vec5, legRegD tmp_vec6,\n-                          legRegD tmp_vec7, legRegD tmp_vec8, legRegD tmp_vec9,\n-                          legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n-                          legRegD tmp_vec13, rcx_RegI tmp1, rax_RegI tmp2, rsi_RegI tmp3,\n+instruct string_hashcodeL(rdi_RegP str1, rsi_RegI cnt1, rbx_RegI result,\n+                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                          legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                          legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3,\n@@ -11779,1 +11778,1 @@\n-         TEMP tmp_vec13, USE_KILL str1, USE_KILL cnt1, KILL tmp1, KILL tmp2, KILL tmp3, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, USE_KILL str1, USE_KILL cnt1, KILL cr);\n@@ -11783,1 +11782,1 @@\n-    __ array_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+    __ arrays_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n@@ -11789,1 +11788,1 @@\n-                      $tmp_vec13$$XMMRegister, T_BYTE);\n+                      $tmp_vec13$$XMMRegister, T_BYTE, true);\n@@ -11794,6 +11793,5 @@\n-instruct stringU_hashcode(rdi_RegP str1, rdx_RegI cnt1, rbx_RegI result,\n-                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3,\n-                          legRegD tmp_vec4, legRegD tmp_vec5, legRegD tmp_vec6,\n-                          legRegD tmp_vec7, legRegD tmp_vec8, legRegD tmp_vec9,\n-                          legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n-                          legRegD tmp_vec13, rcx_RegI tmp1, rax_RegI tmp2, rsi_RegI tmp3,\n+instruct string_hashcodeU(rdi_RegP str1, rsi_RegI cnt1, rbx_RegI result,\n+                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                          legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                          legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                          legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3,\n@@ -11806,1 +11804,1 @@\n-         TEMP tmp_vec13, USE_KILL str1, USE_KILL cnt1, KILL tmp1, KILL tmp2, KILL tmp3, KILL cr);\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, USE_KILL str1, USE_KILL cnt1, KILL cr);\n@@ -11810,1 +11808,1 @@\n-    __ array_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+    __ arrays_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n@@ -11816,1 +11814,1 @@\n-                      $tmp_vec13$$XMMRegister, T_CHAR);\n+                      $tmp_vec13$$XMMRegister, T_CHAR, true);\n@@ -11886,0 +11884,130 @@\n+instruct array_hashcodeI(rdi_RegP ary1, rax_RegI result,\n+                         legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                         legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                         legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n+                         rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((AryHashCodeNode*)n)->type() == T_INT));\n+  match(Set result (AryHashCode ary1));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL ary1, KILL cr);\n+\n+  format %{ \"Array HashCode int[] $ary1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary1$$Register, $tmp4$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                       $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                       $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                       $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                       $tmp_vec13$$XMMRegister, T_INT, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct array_hashcodeS(rdi_RegP ary1, rax_RegI result,\n+                         legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                         legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                         legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n+                         rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((AryHashCodeNode*)n)->type() == T_SHORT));\n+  match(Set result (AryHashCode ary1));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL ary1, KILL cr);\n+\n+  format %{ \"Array HashCode short[] $ary1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary1$$Register, $tmp4$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                       $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                       $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                       $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                       $tmp_vec13$$XMMRegister, T_SHORT, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct array_hashcodeC(rdi_RegP ary1, rax_RegI result,\n+                         legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                         legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                         legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n+                         rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((AryHashCodeNode*)n)->type() == T_CHAR));\n+  match(Set result (AryHashCode ary1));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL ary1, KILL cr);\n+\n+  format %{ \"Array HashCode char[] $ary1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary1$$Register, $tmp4$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                       $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                       $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                       $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                       $tmp_vec13$$XMMRegister, T_CHAR, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct array_hashcodeB(rdi_RegP ary1, rax_RegI result,\n+                         legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                         legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                         legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n+                         rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((AryHashCodeNode*)n)->type() == T_BYTE));\n+  match(Set result (AryHashCode ary1));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL ary1, KILL cr);\n+\n+  format %{ \"Array HashCode byte[] $ary1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary1$$Register, $tmp4$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                       $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                       $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                       $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                       $tmp_vec13$$XMMRegister, T_BYTE, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct array_hashcodeF(rdi_RegP ary1, rax_RegI result,\n+                         legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3, legRegD tmp_vec4,\n+                         legRegD tmp_vec5, legRegD tmp_vec6, legRegD tmp_vec7, legRegD tmp_vec8,\n+                         legRegD tmp_vec9, legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                         legRegD tmp_vec13, rRegI tmp1, rRegI tmp2, rRegI tmp3, rRegI tmp4,\n+                         rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((AryHashCodeNode*)n)->type() == T_FLOAT));\n+  match(Set result (AryHashCode ary1));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP tmp4, USE_KILL ary1, KILL cr);\n+\n+  format %{ \"Array HashCode float[] $ary1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ arrays_hashcode($ary1$$Register, $tmp4$$Register, $result$$Register,\n+                       $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                       $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                       $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                       $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                       $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                       $tmp_vec13$$XMMRegister, T_FLOAT, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":146,"deletions":18,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -608,2 +608,2 @@\n-  \/\/ String.(compareTo\/equals\/indexOf\/hashCode) and Arrays.equals use many memorys edges,\n-  \/\/ but writes none\n+  \/\/ String.(compareTo\/equals\/indexOf\/hashCode) and Arrays.(equals\/hashCode)\n+  \/\/ use many memorys edges, but writes none\n@@ -617,1 +617,2 @@\n-        strcmp(_matrule->_rChild->_opType,\"AryEq\"      )==0 ))\n+        strcmp(_matrule->_rChild->_opType,\"AryEq\"      )==0 ||\n+        strcmp(_matrule->_rChild->_opType,\"AryHashCode\")==0 ))\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -220,0 +220,5 @@\n+    case vmIntrinsics::_hashCodeI:\n+    case vmIntrinsics::_hashCodeS:\n+    case vmIntrinsics::_hashCodeC:\n+    case vmIntrinsics::_hashCodeB:\n+    case vmIntrinsics::_hashCodeF:\n@@ -522,0 +527,7 @@\n+  case vmIntrinsics::_hashCodeI:\n+  case vmIntrinsics::_hashCodeS:\n+  case vmIntrinsics::_hashCodeC:\n+  case vmIntrinsics::_hashCodeB:\n+  case vmIntrinsics::_hashCodeF:\n+    if (!SpecialArraysHashCode) return true;\n+    break;\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -303,0 +303,11 @@\n+  do_intrinsic(_hashCodeI,                  java_util_Arrays,     hashCode_name,  hashCodeI_signature,           F_S)   \\\n+   do_signature(hashCodeI_signature,                             \"([I)I\")                                               \\\n+  do_intrinsic(_hashCodeS,                  java_util_Arrays,     hashCode_name,  hashCodeS_signature,           F_S)   \\\n+   do_signature(hashCodeS_signature,                             \"([S)I\")                                               \\\n+  do_intrinsic(_hashCodeC,                  java_util_Arrays,     hashCode_name,  hashCodeC_signature,           F_S)   \\\n+   do_signature(hashCodeC_signature,                             \"([C)I\")                                               \\\n+  do_intrinsic(_hashCodeB,                  java_util_Arrays,     hashCode_name,  hashCodeB_signature,           F_S)   \\\n+   do_signature(hashCodeB_signature,                             \"([B)I\")                                               \\\n+  do_intrinsic(_hashCodeF,                  java_util_Arrays,     hashCode_name,  hashCodeF_signature,           F_S)   \\\n+   do_signature(hashCodeF_signature,                             \"([F)I\")                                               \\\n+                                                                                                                        \\\n@@ -346,1 +357,0 @@\n-   do_signature(hashCodeB_signature,                             \"([B)I\")                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -561,0 +561,3 @@\n+  product(bool, SpecialArraysHashCode, false, DIAGNOSTIC,                    \\\n+          \"special version of Arrays.hashCode\")                             \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -231,0 +231,7 @@\n+  case vmIntrinsics::_hashCodeI:\n+  case vmIntrinsics::_hashCodeS:\n+  case vmIntrinsics::_hashCodeC:\n+  case vmIntrinsics::_hashCodeB:\n+  case vmIntrinsics::_hashCodeF:\n+    if (!Matcher::match_rule_supported(Op_AryHashCode)) return false;\n+    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+macro(AryHashCode)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -638,0 +638,1 @@\n+    \/\/ case Op_AryHashCode:\n@@ -777,0 +778,1 @@\n+    \/\/ case Op_AryHashCode:\n@@ -3349,0 +3351,4 @@\n+<<<<<<< HEAD\n+              op == Op_FastLock || op == Op_AryEq || \/*op == Op_AryHashCode ||*\/\n+              op == Op_StrComp || op == Op_HasNegatives ||\n+=======\n@@ -3351,0 +3357,1 @@\n+>>>>>>> 8e4fab0c89e5e765a17241eacdf0795ea950cd1c\n@@ -3352,1 +3359,2 @@\n-              op == Op_StrEquals || \/*op == Op_StrHashCode ||*\/ op == Op_StrIndexOf || op == Op_StrIndexOfChar ||\n+              op == Op_StrEquals || \/*op == Op_StrHashCode ||*\/\n+              op == Op_StrIndexOf || op == Op_StrIndexOfChar ||\n@@ -3481,0 +3489,3 @@\n+<<<<<<< HEAD\n+              op == Op_AryEq || \/*op == Op_AryHashCode ||*\/ op == Op_StrComp || op == Op_HasNegatives ||\n+=======\n@@ -3482,0 +3493,1 @@\n+>>>>>>> 8e4fab0c89e5e765a17241eacdf0795ea950cd1c\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,0 +81,14 @@\n+uint AryHashCodeNode::match_edge(uint idx) const {\n+  return idx == 2; \/\/ AryHashCode ary1\n+}\n+\n+Node* AryHashCodeNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  return remove_dead_region(phase, can_reshape) ? this : NULL;\n+}\n+\n+const Type* AryHashCodeNode::Value(PhaseGVN* phase) const {\n+  if (in(0) && phase->type(in(0)) == Type::TOP) return Type::TOP;\n+  return bottom_type();\n+}\n+\n+\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -179,0 +179,16 @@\n+\/\/------------------------------AryHashCode---------------------------------------\n+class AryHashCodeNode: public Node {\n+  BasicType _type;\n+ public:\n+  AryHashCodeNode(Node* control, Node* ary_mem, Node* s1, BasicType type)\n+    : Node(control, ary_mem, s1), _type(type) {};\n+  BasicType type() const { return _type; }\n+  virtual int Opcode() const;\n+  virtual bool depends_only_on_test() const { return false; }\n+  virtual const Type* bottom_type() const { return TypeInt::INT; }\n+  virtual const TypePtr* adr_type() const { return TypeAryPtr::get_array_body_type(_type); }\n+  virtual uint match_edge(uint idx) const;\n+  virtual uint ideal_reg() const { return Op_RegI; }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+  virtual const Type* Value(PhaseGVN* phase) const;\n+};\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -204,0 +204,1 @@\n+    case Op_AryHashCode:\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -497,0 +497,5 @@\n+  case vmIntrinsics::_hashCodeI:                return inline_array_hashcode(T_INT);\n+  case vmIntrinsics::_hashCodeS:                return inline_array_hashcode(T_SHORT);\n+  case vmIntrinsics::_hashCodeC:                return inline_array_hashcode(T_CHAR);\n+  case vmIntrinsics::_hashCodeB:                return inline_array_hashcode(T_BYTE);\n+  case vmIntrinsics::_hashCodeF:                return inline_array_hashcode(T_FLOAT);\n@@ -1039,0 +1044,12 @@\n+\/\/------------------------------inline_array_hashcode----------------------------\n+bool LibraryCallKit::inline_array_hashcode(BasicType type) {\n+  assert(type == T_INT || type == T_SHORT || type == T_CHAR || type == T_BYTE || type == T_FLOAT, \"unsupported array types\");\n+  Node* arg1 = argument(0);\n+\n+  const TypeAryPtr* mtype = TypeAryPtr::get_array_body_type(type);\n+  set_result(_gvn.transform(new AryHashCodeNode(control(), memory(mtype), arg1, type)));\n+  clear_upper_avx();\n+\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -247,0 +247,1 @@\n+  bool inline_array_hashcode(BasicType type);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -832,0 +832,1 @@\n+      case Op_AryHashCode:\n@@ -990,0 +991,1 @@\n+      case Op_AryHashCode:\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1070,0 +1070,1 @@\n+    case Op_AryHashCode:\n@@ -2260,0 +2261,1 @@\n+    case Op_AryHashCode:\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4297,0 +4297,1 @@\n+    @IntrinsicCandidate\n@@ -4324,0 +4325,1 @@\n+    @IntrinsicCandidate\n@@ -4351,0 +4353,1 @@\n+    @IntrinsicCandidate\n@@ -4378,0 +4381,1 @@\n+    @IntrinsicCandidate\n@@ -4432,0 +4436,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}