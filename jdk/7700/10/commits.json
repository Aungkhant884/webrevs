[{"commit":{"message":"Fix h when vectorized for Arrays.hashCode"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"}],"sha":"af7b445026d6fe80ec6bd71ff0063f4090803d76"},{"commit":{"message":"Add missing check for AryHashCode node"},"files":[{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.cpp"}],"sha":"2b631dd23181f1e7de82f5737cf25082eada0256"},{"commit":{"message":"Fix some merge conflicts"},"files":[{"filename":"src\/hotspot\/share\/opto\/escape.cpp"}],"sha":"a6f75c2a0c5147454b2eeba58ef1238a5f2eed7a"},{"commit":{"message":"Disable Arrays.hashCode intrinsic by default for CI"},"files":[{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"}],"sha":"1935cf31a9c84ed82294a2541612aff1407a993f"},{"commit":{"message":"Merge branch 'master' of https:\/\/github.com\/openjdk\/jdk into vectorized-stringlatin1-hashcode"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"}],"sha":"8a78584a781ec3699e0b0ca402de38ffe7f5d93a"},{"commit":{"message":"Some small refactoring: store power_of_31_backwards in the code directly, compact code, and more"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"}],"sha":"ff8eb3340a37066c7b71f7c82fb7ec55572be836"},{"commit":{"message":"{wip} Generalize string hashcode to Arrays.hashCode"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java"}],"sha":"e1a5942d1bb0e4c5e315458e750b63deb913e843"},{"commit":{"message":"Use intrinsic for StringUTF16"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"test\/jdk\/java\/lang\/String\/HashCode.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"026e971335f40fb48f9a9594e6230c63bc0cbb82"},{"commit":{"message":"Reduce code duplication"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"}],"sha":"6c1f57497b24b5c43ee709dd8c7c9550b215d6f0"},{"commit":{"message":"Improve performance of short strings"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"test\/jdk\/java\/lang\/String\/HashCode.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"95f56b1f0796b886d94feb456614233a58301f5c"},{"commit":{"message":"Reduce overhead of method handle"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"ed9904b8837f4f90572f0e964ce36b04f4c17d0b"},{"commit":{"message":"Leave Java method unchanged"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"}],"sha":"79e0a826cebeb09d7333f4f7bf6c2dafd45c3ccd"},{"commit":{"message":"Add first pass at vectorized intrinsic for StringLatin1.hashCode\n\nNext is to generalize it for Arrays.hashCode and StringUTF16.hashCode and make it cheap on shorter strings"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp"},{"filename":"src\/hotspot\/cpu\/x86\/x86.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86_64.ad"},{"filename":"src\/hotspot\/share\/adlc\/formssel.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp"},{"filename":"src\/hotspot\/share\/opto\/c2_globals.hpp"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"},{"filename":"src\/hotspot\/share\/opto\/classes.hpp"},{"filename":"src\/hotspot\/share\/opto\/escape.cpp"},{"filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/lcm.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.cpp"},{"filename":"src\/hotspot\/share\/opto\/library_call.hpp"},{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"src\/hotspot\/share\/opto\/loopnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/jdk\/java\/lang\/String\/HashCode.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"5febe14dc41495bde14af81f60b4e2891dd4cbb1"},{"commit":{"message":"Add UTF-16 benchmarks"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"8e2e59bb0ad5e9e52e1070b9bb274fe7322fd68d"},{"commit":{"message":"8282664: Unroll by hand StringUTF16 and StringLatin1 polynomial hash loops\n\nDespite the hash value being cached for Strings, computing the hash still represents a significant CPU usage for applications handling lots of text.\n\nEven though it would be generally better to do it through an enhancement to the autovectorizer, the complexity of doing it by hand is trivial and the gain is sizable (2x speedup) even without the Vector API. The algorithm has been proposed by Richard Startin and Paul Sandoz [1].\n\nAt Datadog, we handle a great amount of text (through logs management for example), and hashing String represents a large part of our CPU usage. It's very unlikely that we are the only one as String.hashCode is such a core feature of the JVM-based languages with its use in HashMap for example. Having even only a 2x speedup would allow us to save thousands of CPU cores per month and improve correspondingly the energy\/carbon impact.\n\n[1] https:\/\/static.rainfocus.com\/oracle\/oow18\/sess\/1525822677955001tLqU\/PF\/codeone18-vector-API-DEV5081_1540354883936001Q3Sv.pdf"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java"},{"filename":"test\/jdk\/java\/lang\/String\/HashCode.java"},{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java"}],"sha":"f7dda1d9007b69c082924c6b1c60d8872af7e25b"}]