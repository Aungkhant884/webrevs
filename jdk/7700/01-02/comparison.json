{"files":[{"patch":"@@ -2980,0 +2980,168 @@\n+void C2_MacroAssembler::stringL_hashcode(Register str1, Register cnt1, Register result,\n+                                         Register i, Register coef, Register tmp, XMMRegister vnext,\n+                                         XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                                         XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3) {\n+  ShortBranchVerifier sbv(this);\n+  assert(UseAVX >= 2, \"AVX2 intrinsics are required\");\n+\n+  Label SCALAR_LOOP_BEGIN, SCALAR_LOOP_END, VECTOR_LOOP_SKIP, VECTOR_LOOP_BEGIN, VECTOR_LOOP_END;\n+\n+  \/\/ int result = 0;\n+  movl(result, 0);\n+\n+  \/\/ int coef = 1;\n+  movl(coef, 1);\n+\n+  \/\/ int i = cnt1 - 1;\n+  movl(i, cnt1);\n+  subl(i, 1);\n+\n+  Register bound = cnt1;\n+\n+  \/\/ bound = cnt1 - (cnt1 & (32-1));\n+  movl(tmp, cnt1);\n+  andl(tmp, 32-1);\n+  subl(bound, tmp);\n+\n+  \/\/ for (; i >= bound; i -= 1) {\n+  bind(SCALAR_LOOP_BEGIN);\n+  \/\/ i >= bound;\n+  cmpl(i, bound);\n+  jcc(Assembler::less, SCALAR_LOOP_END);\n+\n+  \/\/ result += coef * (str1[i] & 0xff);\n+  movb(tmp, Address(str1, i, Address::times(1)));\n+  andl(tmp, 0xff);\n+  imull(tmp, coef);\n+  addl(result, tmp);\n+\n+  \/\/ coef *= 31;\n+  movl(tmp, 31);\n+  imull(coef, tmp);\n+\n+  \/\/ i -= 1;\n+  subl(i, 1);\n+  jmp(SCALAR_LOOP_BEGIN);\n+\n+  bind(SCALAR_LOOP_END);\n+  \/\/ }\n+\n+  \/\/ if (i >= 32-1) {\n+  cmpl(i, 32-1);\n+  jcc(Assembler::less, VECTOR_LOOP_SKIP);\n+\n+  movl(tmp, 0);\n+  \/\/ h0 = IntVector.zero(I256);\n+  movdl(vresult0, tmp);\n+  vpbroadcastd(vresult0, vresult0, Assembler::AVX_256bit);\n+  \/\/ h1 = IntVector.zero(I256);\n+  movdl(vresult1, tmp);\n+  vpbroadcastd(vresult1, vresult1, Assembler::AVX_256bit);\n+  \/\/ h2 = IntVector.zero(I256);\n+  movdl(vresult2, tmp);\n+  vpbroadcastd(vresult2, vresult2, Assembler::AVX_256bit);\n+  \/\/ h3 = IntVector.zero(I256);\n+  movdl(vresult3, tmp);\n+  vpbroadcastd(vresult3, vresult3, Assembler::AVX_256bit);\n+\n+  static jint power_of_31_backwards[] = {\n+     2111290369,\n+    -2010103841,   350799937,    11316127,   693101697,  -254736545,   961614017,    31019807, -2077209343,\n+      -67006753,  1244764481, -2038056289,   211350913,  -408824225,  -844471871,  -997072353,  1353309697,\n+     -510534177,  1507551809,  -505558625,  -293403007,   129082719, -1796951359,  -196513505, -1807454463,\n+     1742810335,   887503681,    28629151,      923521,       29791,         961,          31,           1};\n+\n+  \/\/ vnext = IntVector.broadcast(I256, power_of_31_backwards[0]);\n+  movl(tmp, power_of_31_backwards[0]);\n+  movdl(vnext, tmp);\n+  vpbroadcastd(vnext, vnext, Assembler::AVX_256bit);\n+\n+  \/\/ vcoef0 = IntVector.fromArray(I256, power_of_31_backwards, 1);\n+  load_vector(vcoef0, ExternalAddress(address(&power_of_31_backwards[1])), sizeof(jint) * 8);\n+  \/\/ vcoef1 = IntVector.fromArray(I256, power_of_31_backwards, 9);\n+  load_vector(vcoef1, ExternalAddress(address(&power_of_31_backwards[9])), sizeof(jint) * 8);\n+  \/\/ vcoef2 = IntVector.fromArray(I256, power_of_31_backwards, 17);\n+  load_vector(vcoef2, ExternalAddress(address(&power_of_31_backwards[17])), sizeof(jint) * 8);\n+  \/\/ vcoef3 = IntVector.fromArray(I256, power_of_31_backwards, 25);\n+  load_vector(vcoef3, ExternalAddress(address(&power_of_31_backwards[25])), sizeof(jint) * 8);\n+\n+  movdl(vtmp0, coef);\n+  vpbroadcastd(vtmp0, vtmp0, Assembler::AVX_256bit);\n+  \/\/ vcoef0 *= coef\n+  vpmulld(vcoef0, vcoef0, vtmp0, Assembler::AVX_256bit);\n+  \/\/ vcoef1 *= coef\n+  vpmulld(vcoef1, vcoef1, vtmp0, Assembler::AVX_256bit);\n+  \/\/ vcoef2 *= coef\n+  vpmulld(vcoef2, vcoef2, vtmp0, Assembler::AVX_256bit);\n+  \/\/ vcoef3 *= coef\n+  vpmulld(vcoef3, vcoef3, vtmp0, Assembler::AVX_256bit);\n+\n+  \/\/ for (i -= 32-1; i >= 0; i -= 32) {\n+  \/\/ i -= 32-1;\n+  subl(i, 32-1);\n+\n+  bind(VECTOR_LOOP_BEGIN);\n+  \/\/ i >= 0;\n+  cmpl(i, 0);\n+  jcc(Assembler::less, VECTOR_LOOP_END);\n+\n+  load_vector(vtmp0, Address(str1, i, Address::times(sizeof(jbyte)), 8*0), sizeof(jbyte) * 8);\n+  load_vector(vtmp1, Address(str1, i, Address::times(sizeof(jbyte)), 8*1), sizeof(jbyte) * 8);\n+  load_vector(vtmp2, Address(str1, i, Address::times(sizeof(jbyte)), 8*2), sizeof(jbyte) * 8);\n+  load_vector(vtmp3, Address(str1, i, Address::times(sizeof(jbyte)), 8*3), sizeof(jbyte) * 8);\n+  \/\/ vresult0 += vcoef0 * str1[i+0:i+7];\n+  vector_unsigned_cast(vtmp0, vtmp0, sizeof(jint) * 8, T_BYTE, T_INT);\n+  vpmulld(vtmp0, vtmp0, vcoef0, Assembler::AVX_256bit);\n+  vpaddd(vresult0, vresult0, vtmp0, Assembler::AVX_256bit);\n+  \/\/ vresult1 += vcoef1 * str1[i+8:i+15];\n+  vector_unsigned_cast(vtmp1, vtmp1, sizeof(jint) * 8, T_BYTE, T_INT);\n+  vpmulld(vtmp1, vtmp1, vcoef1, Assembler::AVX_256bit);\n+  vpaddd(vresult1, vresult1, vtmp1, Assembler::AVX_256bit);\n+  \/\/ vresult2 += vcoef2 * str1[i+16:i+23];\n+  vector_unsigned_cast(vtmp2, vtmp2, sizeof(jint) * 8, T_BYTE, T_INT);\n+  vpmulld(vtmp2, vtmp2, vcoef2, Assembler::AVX_256bit);\n+  vpaddd(vresult2, vresult2, vtmp2, Assembler::AVX_256bit);\n+  \/\/ vresult3 += vcoef4 * str1[i+24:i+31];\n+  vector_unsigned_cast(vtmp3, vtmp3, sizeof(jint) * 8, T_BYTE, T_INT);\n+  vpmulld(vtmp3, vtmp3, vcoef3, Assembler::AVX_256bit);\n+  vpaddd(vresult3, vresult3, vtmp3, Assembler::AVX_256bit);\n+\n+  \/\/ vcoef0 *= vnext\n+  vpmulld(vcoef0, vcoef0, vnext, Assembler::AVX_256bit);\n+  \/\/ vcoef1 *= vnext\n+  vpmulld(vcoef1, vcoef1, vnext, Assembler::AVX_256bit);\n+  \/\/ vcoef2 *= vnext\n+  vpmulld(vcoef2, vcoef2, vnext, Assembler::AVX_256bit);\n+  \/\/ vcoef3 *= vnext\n+  vpmulld(vcoef3, vcoef3, vnext, Assembler::AVX_256bit);\n+\n+  \/\/ i -= 32;\n+  subl(i, 32);\n+  jmp(VECTOR_LOOP_BEGIN);\n+\n+  bind(VECTOR_LOOP_END);\n+  \/\/ }\n+\n+  \/\/ result += vresult0.reduceLanes(ADD);\n+  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult0, vtmp0, vtmp1);\n+  \/\/ result += vresult1.reduceLanes(ADD);\n+  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult1, vtmp2, vtmp3);\n+  \/\/ result += vresult2.reduceLanes(ADD);\n+  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult2, vtmp0, vtmp1);\n+  \/\/ result += vresult3.reduceLanes(ADD);\n+  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult3, vtmp2, vtmp3);\n+\n+  bind(VECTOR_LOOP_SKIP);\n+  \/\/ }\n+\n+} \/\/ stringL_hashcode\n+\n+void C2_MacroAssembler::stringU_hashcode(Register str1, Register cnt1, Register result,\n+                                         Register i, Register coef, Register tmp, XMMRegister vnext,\n+                                         XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                                         XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3) {\n+  fprintf(stderr, \"C2_MacroAssembler::stringU_hashcode\\n\");\n+} \/\/ stringU_hashcode\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":168,"deletions":0,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -245,0 +245,12 @@\n+  void stringL_hashcode(Register str1, Register cnt1, Register result,\n+                        Register i, Register coef, Register tmp, XMMRegister vnext,\n+                        XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                        XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                        XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3);\n+\n+  void stringU_hashcode(Register str1, Register cnt1, Register result,\n+                        Register i, Register coef, Register tmp, XMMRegister vnext,\n+                        XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                        XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                        XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1491,0 +1491,5 @@\n+    case Op_StrHashCode:\n+      if (!UseSSE42Intrinsics) {\n+        return false;\n+      }\n+      break;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-\/\/ Singleton class for RCX int register\n+\/\/ Singleton class for RDX int register\n@@ -301,1 +301,1 @@\n-\/\/ Singleton class for RCX int register\n+\/\/ Singleton class for RDI int register\n@@ -304,0 +304,3 @@\n+\/\/ Singleton class for RSI int register\n+reg_class int_rsi_reg(RSI);\n+\n@@ -3482,0 +3485,10 @@\n+operand rsi_RegI()\n+%{\n+  constraint(ALLOC_IN_RC(int_rsi_reg));\n+  match(RegI);\n+  match(rRegI);\n+\n+  format %{ \"RSI\" %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -11623,0 +11636,55 @@\n+\/\/ fast string hashCode\n+instruct stringL_hashcode(rdi_RegP str1, rdx_RegI cnt1, rbx_RegI result,\n+                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3,\n+                          legRegD tmp_vec4, legRegD tmp_vec5, legRegD tmp_vec6,\n+                          legRegD tmp_vec7, legRegD tmp_vec8, legRegD tmp_vec9,\n+                          legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                          legRegD tmp_vec13, rcx_RegI tmp1, rax_RegI tmp2, rsi_RegI tmp3,\n+                          rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((StrHashCodeNode*)n)->encoding() == StrIntrinsicNode::LL));\n+  match(Set result (StrHashCode (Binary str1 cnt1)));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, USE_KILL str1, USE_KILL cnt1, KILL tmp1, KILL tmp2, KILL tmp3, KILL cr);\n+\n+  format %{ \"String HashCode byte[] $str1,$cnt1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ stringL_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+                        $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                        $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                        $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                        $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                        $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                        $tmp_vec13$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct stringU_hashcode(rdi_RegP str1, rdx_RegI cnt1, rbx_RegI result,\n+                          legRegD tmp_vec1, legRegD tmp_vec2, legRegD tmp_vec3,\n+                          legRegD tmp_vec4, legRegD tmp_vec5, legRegD tmp_vec6,\n+                          legRegD tmp_vec7, legRegD tmp_vec8, legRegD tmp_vec9,\n+                          legRegD tmp_vec10, legRegD tmp_vec11, legRegD tmp_vec12,\n+                          legRegD tmp_vec13, rcx_RegI tmp1, rax_RegI tmp2, rsi_RegI tmp3,\n+                          rFlagsReg cr)\n+%{\n+  predicate(UseAVX >= 2 && (((StrHashCodeNode*)n)->encoding() == StrIntrinsicNode::UU));\n+  match(Set result (StrHashCode (Binary str1 cnt1)));\n+  effect(TEMP tmp_vec1, TEMP tmp_vec2, TEMP tmp_vec3, TEMP tmp_vec4, TEMP tmp_vec5, TEMP tmp_vec6,\n+         TEMP tmp_vec7, TEMP tmp_vec8, TEMP tmp_vec9, TEMP tmp_vec10, TEMP tmp_vec11, TEMP tmp_vec12,\n+         TEMP tmp_vec13, USE_KILL str1, USE_KILL cnt1, KILL tmp1, KILL tmp2, KILL tmp3, KILL cr);\n+\n+  format %{ \"String HashCode char[] $str1,$cnt1 -> $result   \/\/ KILL all\" %}\n+  ins_encode %{\n+    __ stringU_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+                        $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                        $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                        $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                        $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                        $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                        $tmp_vec13$$XMMRegister);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":70,"deletions":2,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -608,1 +608,1 @@\n-  \/\/ String.(compareTo\/equals\/indexOf) and Arrays.equals use many memorys edges,\n+  \/\/ String.(compareTo\/equals\/indexOf\/hashCode) and Arrays.equals use many memorys edges,\n@@ -613,0 +613,1 @@\n+        strcmp(_matrule->_rChild->_opType,\"StrHashCode\")==0 ||\n@@ -901,0 +902,1 @@\n+        strcmp(_matrule->_rChild->_opType,\"StrHashCode\")==0 ||\n@@ -907,1 +909,1 @@\n-        \/\/ String.(compareTo\/equals\/indexOf) and Arrays.equals\n+        \/\/ String.(compareTo\/equals\/indexOf\/hashCode) and Arrays.equals\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -218,0 +218,2 @@\n+    case vmIntrinsics::_hashCodeL:\n+    case vmIntrinsics::_hashCodeU:\n@@ -512,0 +514,4 @@\n+  case vmIntrinsics::_hashCodeL:\n+  case vmIntrinsics::_hashCodeU:\n+    if (!SpecialStringHashCode) return true;\n+    break;\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -341,0 +341,3 @@\n+  do_intrinsic(_hashCodeL,                java_lang_StringLatin1,hashCode_name, hashCodeB_signature,             F_S)   \\\n+  do_intrinsic(_hashCodeU,                java_lang_StringUTF16, hashCode_name, hashCodeB_signature,             F_S)   \\\n+   do_signature(hashCodeB_signature,                             \"([B)I\")                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -568,0 +568,2 @@\n+        \/\/ Op_StrHashCode,\n+        \/\/ { { 2, ShenandoahLoad },                  { 3, ShenandoahLoad } }, \/\/FIXME: what variables are these\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -555,0 +555,3 @@\n+  product(bool, SpecialStringHashCode, true, DIAGNOSTIC,                    \\\n+          \"special version of string hashCode\")                             \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -223,0 +223,4 @@\n+  case vmIntrinsics::_hashCodeL:\n+  case vmIntrinsics::_hashCodeU:\n+    if (!Matcher::match_rule_supported(Op_StrHashCode)) return false;\n+    break;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -332,0 +332,1 @@\n+macro(StrHashCode)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -641,0 +641,1 @@\n+    \/\/ case Op_StrHashCode:\n@@ -779,0 +780,1 @@\n+    \/\/ case Op_StrHashCode:\n@@ -3349,1 +3351,1 @@\n-              op == Op_StrEquals || op == Op_StrIndexOf || op == Op_StrIndexOfChar ||\n+              op == Op_StrEquals || \/*op == Op_StrHashCode ||*\/ op == Op_StrIndexOf || op == Op_StrIndexOfChar ||\n@@ -3480,1 +3482,1 @@\n-              op == Op_StrEquals || op == Op_StrIndexOf || op == Op_StrIndexOfChar)) {\n+              op == Op_StrEquals || \/*op == Op_StrHashCode ||*\/ op == Op_StrIndexOf || op == Op_StrIndexOfChar)) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -106,0 +106,10 @@\n+\/\/------------------------------StrHashCode-------------------------------------\n+class StrHashCodeNode: public StrIntrinsicNode {\n+ public:\n+  StrHashCodeNode(Node* control, Node* char_array_mem,\n+                  Node* s1, Node* c1, ArgEncoding encoding):\n+  StrIntrinsicNode(control, char_array_mem, s1, c1, encoding) {};\n+  virtual int Opcode() const;\n+  virtual const Type* bottom_type() const { return TypeInt::INT; }\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -200,0 +200,1 @@\n+    \/\/ case Op_StrHashCode:\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -312,0 +312,3 @@\n+  case vmIntrinsics::_hashCodeL:                 return inline_string_hashCode(StrIntrinsicNode::LL);\n+  case vmIntrinsics::_hashCodeU:                 return inline_string_hashCode(StrIntrinsicNode::UU);\n+\n@@ -953,0 +956,20 @@\n+\n+\/\/------------------------------inline_string_hashCode------------------------\n+bool LibraryCallKit::inline_string_hashCode(StrIntrinsicNode::ArgEnc ae) {\n+  Node* arg1 = argument(0);\n+\n+  arg1 = must_be_not_null(arg1, true);\n+\n+  \/\/ Get start addr and length of first argument\n+  Node* arg1_start  = array_element_address(arg1, intcon(0), T_BYTE);\n+  Node* arg1_cnt    = load_array_length(arg1);\n+\n+  Node* result = new StrHashCodeNode(control(), memory(TypeAryPtr::BYTES),\n+                                     arg1_start, arg1_cnt, ae);\n+\n+  clear_upper_avx();\n+\n+  set_result(_gvn.transform(result));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+  bool inline_string_hashCode(StrIntrinsicNode::ArgEnc ae);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -827,0 +827,1 @@\n+      case Op_StrHashCode:\n@@ -973,0 +974,1 @@\n+      case Op_StrHashCode:\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5675,0 +5675,1 @@\n+    case Op_StrHashCode:\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1066,0 +1066,1 @@\n+    case Op_StrHashCode:\n@@ -1714,0 +1715,2 @@\n+    fprintf(stderr, \"x = %d, _LAST_MACH_OPER = %d\\n\", x, _LAST_MACH_OPER);\n+    fprintf(stderr, \"dump n\\n\");\n@@ -1715,0 +1718,1 @@\n+    fprintf(stderr, \"dump svec\\n\");\n@@ -2252,0 +2256,1 @@\n+    case Op_StrHashCode:\n@@ -2419,0 +2424,7 @@\n+    case Op_StrHashCode: {\n+      Node* pair1 = new BinaryNode(n->in(2), n->in(3));\n+      n->set_req(2, pair1);\n+      \/\/ n->set_req(3, n->in(4));\n+      n->del_req(3);\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -191,0 +191,1 @@\n+    @IntrinsicCandidate\n@@ -193,14 +194,1 @@\n-        int i = 0;\n-        int length = value.length;\n-        for (; i < (length & ~(8 - 1)); i += 8) {\n-            h = -1807454463 * h                   +\n-                 1742810335 * (value[i+0] & 0xff) +\n-                  887503681 * (value[i+1] & 0xff) +\n-                   28629151 * (value[i+2] & 0xff) +\n-                     923521 * (value[i+3] & 0xff) +\n-                      29791 * (value[i+4] & 0xff) +\n-                        961 * (value[i+5] & 0xff) +\n-                         31 * (value[i+6] & 0xff) +\n-                          1 * (value[i+7] & 0xff);\n-        }\n-        for (; i < length; i++) {\n+        for (int i = 0; i < value.length; i++) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -414,0 +414,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @run main\/othervm -XX:+SpecialStringHashCode HashCode\n@@ -32,1 +33,2 @@\n-                                       \"C'était le meilleur des temps, c'était le pire des temps, c'était l'âge de la sagesse, c'était l'âge de la folie, c'était l'époque de la croyance, c'était l'époque de l'incrédulité, c'était la saison de la Lumière, c'était C'était la saison des Ténèbres, c'était le printemps de l'espoir, c'était l'hiver du désespoir, nous avions tout devant nous, nous n'avions rien devant nous, nous allions tous directement au Ciel, nous allions tous directement dans l'autre sens bref, la période ressemblait tellement à la période actuelle, que certaines de ses autorités les plus bruyantes ont insisté pour qu'elle soit reçue, pour le bien ou pour le mal, au degré superlatif de la comparaison seulement. -- Charles Dickens, Tale of Two Cities (in French)\"\n+                                       \"C'était le meilleur des temps, c'était le pire des temps, c'était l'âge de la sagesse, c'était l'âge de la folie, c'était l'époque de la croyance, c'était l'époque de l'incrédulité, c'était la saison de la Lumière, c'était C'était la saison des Ténèbres, c'était le printemps de l'espoir, c'était l'hiver du désespoir, nous avions tout devant nous, nous n'avions rien devant nous, nous allions tous directement au Ciel, nous allions tous directement dans l'autre sens bref, la période ressemblait tellement à la période actuelle, que certaines de ses autorités les plus bruyantes ont insisté pour qu'elle soit reçue, pour le bien ou pour le mal, au degré superlatif de la comparaison seulement. -- Charles Dickens, Tale of Two Cities (in French)\",\n+                                       \"禅道修行を志した雲水は、一般に参禅のしきたりを踏んだうえで一人の師につき、各地にある専門道場と呼ばれる養成寺院に入門し、与えられた公案に取り組むことになる。公案は、師家（老師）から雲水が悟りの境地へと進んで行くために手助けとして課す問題であり、悟りの境地に達していない人には容易に理解し難い難問だが、屁理屈や詭弁が述べられているわけではなく、頓知や謎かけとも異なる。\"\n@@ -35,1 +37,1 @@\n-    private static int [] expected = { 0, 32, 97, 1094896285, -331808333 };\n+    private static int [] expected = { 0, 32, 97, 1094896285, -331808333, 349367663 };\n","filename":"test\/jdk\/java\/lang\/String\/HashCode.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jmh.annotations.Fork;\n@@ -37,0 +38,3 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -87,0 +91,1 @@\n+    @Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/java.lang=ALL-UNNAMED\", \"--add-opens\", \"java.base\/java.lang=ALL-UNNAMED\"})\n@@ -97,0 +102,3 @@\n+        private MethodHandle defaultLatin1HashCodeMH;\n+        private MethodHandle defaultUTF16HashCodeMH;\n+\n@@ -98,1 +106,1 @@\n-        public void setup() throws UnsupportedEncodingException {\n+        public void setup() throws UnsupportedEncodingException, ClassNotFoundException, NoSuchMethodException, Throwable {\n@@ -105,0 +113,16 @@\n+\n+            Class<?> stringLatin1 = Class.forName(\"java.lang.StringLatin1\");\n+            Method stringLatin1HashCode = stringLatin1.getDeclaredMethod(\"hashCode\", byte[].class);\n+            stringLatin1HashCode.setAccessible(true);\n+\n+            Class<?> stringUTF16 = Class.forName(\"java.lang.StringLatin1\");\n+            Method stringUTF16HashCode = stringUTF16.getDeclaredMethod(\"hashCode\", byte[].class);\n+            stringUTF16HashCode.setAccessible(true);\n+\n+            defaultLatin1HashCodeMH = MethodHandles.lookup().unreflect(stringLatin1HashCode);\n+            defaultUTF16HashCodeMH = MethodHandles.lookup().unreflect(stringUTF16HashCode);\n+        }\n+\n+        @Benchmark\n+        public int defaultLatin1() throws Throwable {\n+            return (int)defaultLatin1HashCodeMH.invokeExact(latin1);\n@@ -167,0 +191,214 @@\n+        @Benchmark\n+        public int scalarLatin1Inverted() {\n+            int h = 0;\n+            int len = latin1.length, i = len - 1;\n+            int coef = 1;\n+            for (; i >= 0; i -= 1) {\n+                h = h + coef * (latin1[i] & 0xff);\n+                coef = coef * 31;\n+            }\n+            return h;\n+        }\n+\n+        @Benchmark\n+        public int scalarLatin1InvertedUnrolled8() {\n+            int h = 0;\n+            int len = latin1.length, i = len - 1;\n+            int coef = 1;\n+            for (int bound = len - (len % (8*(1-0))); i >= bound \/* align on 8 elements *\/; i -= 1) {\n+                h = h + coef * (latin1[i] & 0xff);\n+                coef = coef * 31;\n+            }\n+            if (i-(8*(1-0)-1) >= 0) {\n+                int h0 = 0;\n+                int h1 = 0;\n+                int h2 = 0;\n+                int h3 = 0;\n+                int h4 = 0;\n+                int h5 = 0;\n+                int h6 = 0;\n+                int h7 = 0;\n+                int coef0 = 31*31*31*31*31*31*31*coef;\n+                int coef1 = 31*31*31*31*31*31*coef;\n+                int coef2 = 31*31*31*31*31*coef;\n+                int coef3 = 31*31*31*31*coef;\n+                int coef4 = 31*31*31*coef;\n+                int coef5 = 31*31*coef;\n+                int coef6 = 31*coef;\n+                int coef7 = coef;\n+                for (; i-(8-1) >= 0; i -= 8) {\n+                    h0 += coef0 * (latin1[i-(8-1)+0] & 0xff);\n+                    h1 += coef1 * (latin1[i-(8-1)+1] & 0xff);\n+                    h2 += coef2 * (latin1[i-(8-1)+2] & 0xff);\n+                    h3 += coef3 * (latin1[i-(8-1)+3] & 0xff);\n+                    h4 += coef4 * (latin1[i-(8-1)+4] & 0xff);\n+                    h5 += coef5 * (latin1[i-(8-1)+5] & 0xff);\n+                    h6 += coef6 * (latin1[i-(8-1)+6] & 0xff);\n+                    h7 += coef7 * (latin1[i-(8-1)+7] & 0xff);\n+                    coef0 = 31*31*31*31*31*31*31*31 * coef0;\n+                    coef1 = 31*31*31*31*31*31*31*31 * coef1;\n+                    coef2 = 31*31*31*31*31*31*31*31 * coef2;\n+                    coef3 = 31*31*31*31*31*31*31*31 * coef3;\n+                    coef4 = 31*31*31*31*31*31*31*31 * coef4;\n+                    coef5 = 31*31*31*31*31*31*31*31 * coef5;\n+                    coef6 = 31*31*31*31*31*31*31*31 * coef6;\n+                    coef7 = 31*31*31*31*31*31*31*31 * coef7;\n+                }\n+                h += h0 + h1 + h2 + h3 + h4 + h5 + h6 + h7;\n+            }\n+            return h;\n+        }\n+\n+        @Benchmark\n+        public int scalarLatin1InvertedUnrolled32() {\n+            int h = 0;\n+            int len = latin1.length, i = len - 1;\n+            int coef = 1;\n+            for (int bound = len - (len % 32); i >= bound \/* align on 32 elements *\/; i -= 1) {\n+                h = h + coef * (latin1[i] & 0xff);\n+                coef = coef * 31;\n+            }\n+            if (i-(32-1) >= 0) {\n+                int h0  = 0;\n+                int h1  = 0;\n+                int h2  = 0;\n+                int h3  = 0;\n+                int h4  = 0;\n+                int h5  = 0;\n+                int h6  = 0;\n+                int h7  = 0;\n+                int h8  = 0;\n+                int h9  = 0;\n+                int h10 = 0;\n+                int h11 = 0;\n+                int h12 = 0;\n+                int h13 = 0;\n+                int h14 = 0;\n+                int h15 = 0;\n+                int h16 = 0;\n+                int h17 = 0;\n+                int h18 = 0;\n+                int h19 = 0;\n+                int h20 = 0;\n+                int h21 = 0;\n+                int h22 = 0;\n+                int h23 = 0;\n+                int h24 = 0;\n+                int h25 = 0;\n+                int h26 = 0;\n+                int h27 = 0;\n+                int h28 = 0;\n+                int h29 = 0;\n+                int h30 = 0;\n+                int h31 = 0;\n+                int coef0  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef1  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef2  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef3  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef4  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef5  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef6  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef7  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef8  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef9  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef10 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef11 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef12 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef13 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef14 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef15 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef16 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef17 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef18 = 31*31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef19 = 31*31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef20 = 31*31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef21 = 31*31*31*31*31*31*31*31*31*31*coef;\n+                int coef22 = 31*31*31*31*31*31*31*31*31*coef;\n+                int coef23 = 31*31*31*31*31*31*31*31*coef;\n+                int coef24 = 31*31*31*31*31*31*31*coef;\n+                int coef25 = 31*31*31*31*31*31*coef;\n+                int coef26 = 31*31*31*31*31*coef;\n+                int coef27 = 31*31*31*31*coef;\n+                int coef28 = 31*31*31*coef;\n+                int coef29 = 31*31*coef;\n+                int coef30 = 31*coef;\n+                int coef31 = coef;\n+                for (; i-(32-1) >= 0; i -= 32) {\n+                    h0  += coef0  * (latin1[i-(32-1)+0] & 0xff);\n+                    h1  += coef1  * (latin1[i-(32-1)+1] & 0xff);\n+                    h2  += coef2  * (latin1[i-(32-1)+2] & 0xff);\n+                    h3  += coef3  * (latin1[i-(32-1)+3] & 0xff);\n+                    h4  += coef4  * (latin1[i-(32-1)+4] & 0xff);\n+                    h5  += coef5  * (latin1[i-(32-1)+5] & 0xff);\n+                    h6  += coef6  * (latin1[i-(32-1)+6] & 0xff);\n+                    h7  += coef7  * (latin1[i-(32-1)+7] & 0xff);\n+                    h8  += coef8  * (latin1[i-(32-1)+8] & 0xff);\n+                    h9  += coef9  * (latin1[i-(32-1)+9] & 0xff);\n+                    h10 += coef10 * (latin1[i-(32-1)+10] & 0xff);\n+                    h11 += coef11 * (latin1[i-(32-1)+11] & 0xff);\n+                    h12 += coef12 * (latin1[i-(32-1)+12] & 0xff);\n+                    h13 += coef13 * (latin1[i-(32-1)+13] & 0xff);\n+                    h14 += coef14 * (latin1[i-(32-1)+14] & 0xff);\n+                    h15 += coef15 * (latin1[i-(32-1)+15] & 0xff);\n+                    h16 += coef16 * (latin1[i-(32-1)+16] & 0xff);\n+                    h17 += coef17 * (latin1[i-(32-1)+17] & 0xff);\n+                    h18 += coef18 * (latin1[i-(32-1)+18] & 0xff);\n+                    h19 += coef19 * (latin1[i-(32-1)+19] & 0xff);\n+                    h20 += coef20 * (latin1[i-(32-1)+20] & 0xff);\n+                    h21 += coef21 * (latin1[i-(32-1)+21] & 0xff);\n+                    h22 += coef22 * (latin1[i-(32-1)+22] & 0xff);\n+                    h23 += coef23 * (latin1[i-(32-1)+23] & 0xff);\n+                    h24 += coef24 * (latin1[i-(32-1)+24] & 0xff);\n+                    h25 += coef25 * (latin1[i-(32-1)+25] & 0xff);\n+                    h26 += coef26 * (latin1[i-(32-1)+26] & 0xff);\n+                    h27 += coef27 * (latin1[i-(32-1)+27] & 0xff);\n+                    h28 += coef28 * (latin1[i-(32-1)+28] & 0xff);\n+                    h29 += coef29 * (latin1[i-(32-1)+29] & 0xff);\n+                    h30 += coef30 * (latin1[i-(32-1)+30] & 0xff);\n+                    h31 += coef31 * (latin1[i-(32-1)+31] & 0xff);\n+                    coef0  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef0;\n+                    coef1  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef1;\n+                    coef2  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef2;\n+                    coef3  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef3;\n+                    coef4  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef4;\n+                    coef5  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef5;\n+                    coef6  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef6;\n+                    coef7  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef7;\n+                    coef8  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef8;\n+                    coef9  = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef9;\n+                    coef10 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef10;\n+                    coef11 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef11;\n+                    coef12 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef12;\n+                    coef13 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef13;\n+                    coef14 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef14;\n+                    coef15 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef15;\n+                    coef16 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef16;\n+                    coef17 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef17;\n+                    coef18 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef18;\n+                    coef19 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef19;\n+                    coef20 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef20;\n+                    coef21 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef21;\n+                    coef22 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef22;\n+                    coef23 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef23;\n+                    coef24 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef24;\n+                    coef25 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef25;\n+                    coef26 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef26;\n+                    coef27 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef27;\n+                    coef28 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef28;\n+                    coef29 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef29;\n+                    coef30 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef30;\n+                    coef31 = 31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31*31 * coef31;\n+                }\n+                h += h0  + h1  + h2  + h3  + h4  + h5  + h6  + h7\n+                  +  h8  + h9  + h10 + h11 + h12 + h13 + h14 + h15\n+                  +  h16 + h17 + h18 + h19 + h20 + h21 + h22 + h23\n+                  +  h24 + h25 + h26 + h27 + h28 + h29 + h30 + h31;\n+            }\n+            return h;\n+        }\n+\n+        @Benchmark\n+        public int defaultUTF16() throws Throwable {\n+            return (int)defaultUTF16HashCodeMH.invokeExact(utf16);\n+        }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java","additions":239,"deletions":1,"binary":false,"changes":240,"status":"modified"}]}