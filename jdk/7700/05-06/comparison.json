{"files":[{"patch":"@@ -2980,1 +2980,49 @@\n-void C2_MacroAssembler::stringL_hashcode(Register str1, Register cnt1, Register result,\n+int C2_MacroAssembler::array_hashcode_elsize(BasicType eltype) {\n+  switch (eltype) {\n+  case T_BYTE:\n+    return sizeof(jbyte);\n+  case T_CHAR:\n+    return sizeof(jchar);\n+  case T_INT:\n+    return sizeof(jint);\n+  default:\n+    ShouldNotReachHere();\n+    return -1;\n+  }\n+}\n+\n+void C2_MacroAssembler::array_hashcode_elload(Register dst, Address src, BasicType eltype) {\n+  switch (eltype) {\n+  case T_BYTE:\n+    movzbl(dst, src);\n+    break;\n+  case T_CHAR:\n+    movzwl(dst, src);\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+}\n+\n+void C2_MacroAssembler::array_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype) {\n+  load_vector(dst, src, array_hashcode_elsize(eltype) * 8);\n+}\n+\n+void C2_MacroAssembler::array_hashcode_elvload(XMMRegister dst, ExternalAddress src, BasicType eltype) {\n+  load_vector(dst, src, array_hashcode_elsize(eltype) * 8);\n+}\n+\n+void C2_MacroAssembler::array_hashcode_elvcast(XMMRegister dst, BasicType eltype) {\n+  switch (eltype) {\n+  case T_BYTE:\n+    vector_unsigned_cast(dst, dst, Assembler::AVX_256bit, eltype, T_INT);\n+    break;\n+  case T_CHAR:\n+    vector_unsigned_cast(dst, dst, Assembler::AVX_256bit, T_SHORT, T_INT);\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+  }\n+}\n+\n+void C2_MacroAssembler::array_hashcode(Register str1, Register cnt1, Register result,\n@@ -2984,1 +3032,2 @@\n-                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3) {\n+                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n+                                         BasicType eltype) {\n@@ -2988,2 +3037,2 @@\n-  Label LENMIN, LENMIN_UNROLLED_LOOP_BEGIN, LENMIN_UNROLLED_LOOP_END, LENMIN_SCALAR_LOOP_BEGIN, LENMIN_SCALAR_LOOP_END,\n-        LEN32, LEN32_SCALAR_LOOP_BEGIN, LEN32_SCALAR_LOOP_END, LEN32_VECTOR_LOOP_BEGIN, LEN32_VECTOR_LOOP_END,\n+  Label SHORT, SHORT_UNROLLED_LOOP_BEGIN, SHORT_UNROLLED_LOOP_END, SHORT_SCALAR_LOOP_BEGIN, SHORT_SCALAR_LOOP_END,\n+        LONG, LONG_SCALAR_LOOP_BEGIN, LONG_SCALAR_LOOP_END, LONG_VECTOR_LOOP_BEGIN, LONG_VECTOR_LOOP_END,\n@@ -2999,1 +3048,1 @@\n-  static jint power_of_31_backwards[] = {\n+  static const jint power_of_31_backwards[] = {\n@@ -3006,0 +3055,2 @@\n+  const int elsize = array_hashcode_elsize(eltype);\n+\n@@ -3013,0 +3064,3 @@\n+  \/\/ cnt1 \/= elsize\n+  shrl(cnt1, Address::times(elsize));\n+\n@@ -3014,1 +3068,1 @@\n-  bind(LENMIN);\n+  bind(SHORT);\n@@ -3016,1 +3070,1 @@\n-  jcc(Assembler::greater, LEN32);\n+  jcc(Assembler::greater, LONG);\n@@ -3024,1 +3078,1 @@\n-  \/\/ int bound = cnt1 & ~(8 - 1);\n+  \/\/ int bound = cnt1 & ~(4 - 1);\n@@ -3026,1 +3080,1 @@\n-  andl(bound, ~(8-1));\n+  andl(bound, ~(4-1));\n@@ -3028,2 +3082,2 @@\n-  \/\/ for (; i < bound; i += 8) {\n-  bind(LENMIN_UNROLLED_LOOP_BEGIN);\n+  \/\/ for (; i < bound; i += 4) {\n+  bind(SHORT_UNROLLED_LOOP_BEGIN);\n@@ -3032,1 +3086,1 @@\n-  jcc(Assembler::greaterEqual, LENMIN_UNROLLED_LOOP_END);\n+  jcc(Assembler::greaterEqual, SHORT_UNROLLED_LOOP_END);\n@@ -3034,1 +3088,1 @@\n-  for (int idx = 0; idx < 8; idx++) {\n+  for (int idx = 0; idx < 4; idx++) {\n@@ -3039,2 +3093,2 @@\n-    \/\/ h += (str1[i] & 0xff);\n-    movzbl(tmp, Address(str1, i, Address::times(sizeof(jbyte)), idx));\n+    \/\/ h += str1[i];\n+    array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize), idx*elsize), eltype);\n@@ -3044,2 +3098,2 @@\n-  addl(i, 8);\n-  jmp(LENMIN_UNROLLED_LOOP_BEGIN);\n+  addl(i, 4);\n+  jmp(SHORT_UNROLLED_LOOP_BEGIN);\n@@ -3047,1 +3101,1 @@\n-  bind(LENMIN_UNROLLED_LOOP_END);\n+  bind(SHORT_UNROLLED_LOOP_END);\n@@ -3051,1 +3105,1 @@\n-  bind(LENMIN_SCALAR_LOOP_BEGIN);\n+  bind(SHORT_SCALAR_LOOP_BEGIN);\n@@ -3054,1 +3108,1 @@\n-  jcc(Assembler::greaterEqual, LENMIN_SCALAR_LOOP_END);\n+  jcc(Assembler::greaterEqual, SHORT_SCALAR_LOOP_END);\n@@ -3060,2 +3114,2 @@\n-  \/\/ h += (str1[i] & 0xff);\n-  movzbl(tmp, Address(str1, i, Address::times(sizeof(jbyte))));\n+  \/\/ h += str1[i];\n+  array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize)), eltype);\n@@ -3066,1 +3120,1 @@\n-  jmp(LENMIN_SCALAR_LOOP_BEGIN);\n+  jmp(SHORT_SCALAR_LOOP_BEGIN);\n@@ -3068,1 +3122,1 @@\n-  bind(LENMIN_SCALAR_LOOP_END);\n+  bind(SHORT_SCALAR_LOOP_END);\n@@ -3074,1 +3128,1 @@\n-  bind(LEN32);\n+  bind(LONG);\n@@ -3091,1 +3145,1 @@\n-  bind(LEN32_SCALAR_LOOP_BEGIN);\n+  bind(LONG_SCALAR_LOOP_BEGIN);\n@@ -3094,1 +3148,1 @@\n-  jcc(Assembler::less, LEN32_SCALAR_LOOP_END);\n+  jcc(Assembler::less, LONG_SCALAR_LOOP_END);\n@@ -3096,3 +3150,2 @@\n-  \/\/ result += coef * (str1[i] & 0xff);\n-  movb(tmp, Address(str1, i, Address::times(1)));\n-  andl(tmp, 0xff);\n+  \/\/ result += coef * str1[i];\n+  array_hashcode_elload(tmp, Address(str1, i, Address::times(elsize)), eltype);\n@@ -3108,1 +3161,1 @@\n-  jmp(LEN32_SCALAR_LOOP_BEGIN);\n+  jmp(LONG_SCALAR_LOOP_BEGIN);\n@@ -3110,1 +3163,1 @@\n-  bind(LEN32_SCALAR_LOOP_END);\n+  bind(LONG_SCALAR_LOOP_END);\n@@ -3114,12 +3167,5 @@\n-  \/\/ h0 = IntVector.zero(I256);\n-  movdl(vresult0, tmp);\n-  vpbroadcastd(vresult0, vresult0, Assembler::AVX_256bit);\n-  \/\/ h1 = IntVector.zero(I256);\n-  movdl(vresult1, tmp);\n-  vpbroadcastd(vresult1, vresult1, Assembler::AVX_256bit);\n-  \/\/ h2 = IntVector.zero(I256);\n-  movdl(vresult2, tmp);\n-  vpbroadcastd(vresult2, vresult2, Assembler::AVX_256bit);\n-  \/\/ h3 = IntVector.zero(I256);\n-  movdl(vresult3, tmp);\n-  vpbroadcastd(vresult3, vresult3, Assembler::AVX_256bit);\n+  for (int idx = 0; idx < 4; idx++) {\n+    \/\/ vresult = IntVector.zero(I256);\n+    movdl(vresult[idx], tmp);\n+    vpbroadcastd(vresult[idx], vresult[idx], Assembler::AVX_256bit);\n+  }\n@@ -3132,8 +3178,4 @@\n-  \/\/ vcoef0 = IntVector.fromArray(I256, power_of_31_backwards, 1);\n-  load_vector(vcoef0, ExternalAddress(address(&power_of_31_backwards[1])), sizeof(jint) * 8);\n-  \/\/ vcoef1 = IntVector.fromArray(I256, power_of_31_backwards, 9);\n-  load_vector(vcoef1, ExternalAddress(address(&power_of_31_backwards[9])), sizeof(jint) * 8);\n-  \/\/ vcoef2 = IntVector.fromArray(I256, power_of_31_backwards, 17);\n-  load_vector(vcoef2, ExternalAddress(address(&power_of_31_backwards[17])), sizeof(jint) * 8);\n-  \/\/ vcoef3 = IntVector.fromArray(I256, power_of_31_backwards, 25);\n-  load_vector(vcoef3, ExternalAddress(address(&power_of_31_backwards[25])), sizeof(jint) * 8);\n+  \/\/ vcoef = IntVector.fromArray(I256, power_of_31_backwards, 1);\n+  for (int idx = 0; idx < 4; idx++) {\n+    array_hashcode_elvload(vcoef[idx], ExternalAddress(address(&power_of_31_backwards[8*idx+1])), T_INT);\n+  }\n@@ -3141,0 +3183,1 @@\n+  \/\/ vcoef *= coef\n@@ -3143,8 +3186,3 @@\n-  \/\/ vcoef0 *= coef\n-  vpmulld(vcoef0, vcoef0, vtmp0, Assembler::AVX_256bit);\n-  \/\/ vcoef1 *= coef\n-  vpmulld(vcoef1, vcoef1, vtmp0, Assembler::AVX_256bit);\n-  \/\/ vcoef2 *= coef\n-  vpmulld(vcoef2, vcoef2, vtmp0, Assembler::AVX_256bit);\n-  \/\/ vcoef3 *= coef\n-  vpmulld(vcoef3, vcoef3, vtmp0, Assembler::AVX_256bit);\n+  for (int idx = 0; idx < 4; idx++) {\n+    vpmulld(vcoef[idx], vcoef[idx], vtmp0, Assembler::AVX_256bit);\n+  }\n@@ -3156,1 +3194,1 @@\n-  bind(LEN32_VECTOR_LOOP_BEGIN);\n+  bind(LONG_VECTOR_LOOP_BEGIN);\n@@ -3159,31 +3197,16 @@\n-  jcc(Assembler::less, LEN32_VECTOR_LOOP_END);\n-\n-  load_vector(vtmp0, Address(str1, i, Address::times(sizeof(jbyte)), 8*0), sizeof(jbyte) * 8);\n-  load_vector(vtmp1, Address(str1, i, Address::times(sizeof(jbyte)), 8*1), sizeof(jbyte) * 8);\n-  load_vector(vtmp2, Address(str1, i, Address::times(sizeof(jbyte)), 8*2), sizeof(jbyte) * 8);\n-  load_vector(vtmp3, Address(str1, i, Address::times(sizeof(jbyte)), 8*3), sizeof(jbyte) * 8);\n-  \/\/ vresult0 += vcoef0 * str1[i+0:i+7];\n-  vector_unsigned_cast(vtmp0, vtmp0, sizeof(jint) * 8, T_BYTE, T_INT);\n-  vpmulld(vtmp0, vtmp0, vcoef0, Assembler::AVX_256bit);\n-  vpaddd(vresult0, vresult0, vtmp0, Assembler::AVX_256bit);\n-  \/\/ vresult1 += vcoef1 * str1[i+8:i+15];\n-  vector_unsigned_cast(vtmp1, vtmp1, sizeof(jint) * 8, T_BYTE, T_INT);\n-  vpmulld(vtmp1, vtmp1, vcoef1, Assembler::AVX_256bit);\n-  vpaddd(vresult1, vresult1, vtmp1, Assembler::AVX_256bit);\n-  \/\/ vresult2 += vcoef2 * str1[i+16:i+23];\n-  vector_unsigned_cast(vtmp2, vtmp2, sizeof(jint) * 8, T_BYTE, T_INT);\n-  vpmulld(vtmp2, vtmp2, vcoef2, Assembler::AVX_256bit);\n-  vpaddd(vresult2, vresult2, vtmp2, Assembler::AVX_256bit);\n-  \/\/ vresult3 += vcoef4 * str1[i+24:i+31];\n-  vector_unsigned_cast(vtmp3, vtmp3, sizeof(jint) * 8, T_BYTE, T_INT);\n-  vpmulld(vtmp3, vtmp3, vcoef3, Assembler::AVX_256bit);\n-  vpaddd(vresult3, vresult3, vtmp3, Assembler::AVX_256bit);\n-\n-  \/\/ vcoef0 *= vnext\n-  vpmulld(vcoef0, vcoef0, vnext, Assembler::AVX_256bit);\n-  \/\/ vcoef1 *= vnext\n-  vpmulld(vcoef1, vcoef1, vnext, Assembler::AVX_256bit);\n-  \/\/ vcoef2 *= vnext\n-  vpmulld(vcoef2, vcoef2, vnext, Assembler::AVX_256bit);\n-  \/\/ vcoef3 *= vnext\n-  vpmulld(vcoef3, vcoef3, vnext, Assembler::AVX_256bit);\n+  jcc(Assembler::less, LONG_VECTOR_LOOP_END);\n+\n+  for (int idx = 0; idx < 4; idx++) {\n+    array_hashcode_elvload(vtmp[idx], Address(str1, i, Address::times(elsize), 8*idx*elsize), eltype);\n+  }\n+  \/\/ vresult += vcoef * str1[i+8*idx:i+8*idx+7];\n+  for (int idx = 0; idx < 4; idx++) {\n+    array_hashcode_elvcast(vtmp[idx], eltype);\n+    vpmulld(vtmp[idx], vtmp[idx], vcoef[idx], Assembler::AVX_256bit);\n+    vpaddd(vresult[idx], vresult[idx], vtmp[idx], Assembler::AVX_256bit);\n+  }\n+\n+  \/\/ vcoef *= vnext\n+  for (int idx = 0; idx < 4; idx++) {\n+    vpmulld(vcoef[idx], vcoef[idx], vnext, Assembler::AVX_256bit);\n+  }\n@@ -3193,1 +3216,1 @@\n-  jmp(LEN32_VECTOR_LOOP_BEGIN);\n+  jmp(LONG_VECTOR_LOOP_BEGIN);\n@@ -3195,1 +3218,1 @@\n-  bind(LEN32_VECTOR_LOOP_END);\n+  bind(LONG_VECTOR_LOOP_END);\n@@ -3198,8 +3221,4 @@\n-  \/\/ result += vresult0.reduceLanes(ADD);\n-  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult0, vtmp0, vtmp1);\n-  \/\/ result += vresult1.reduceLanes(ADD);\n-  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult1, vtmp2, vtmp3);\n-  \/\/ result += vresult2.reduceLanes(ADD);\n-  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult2, vtmp0, vtmp1);\n-  \/\/ result += vresult3.reduceLanes(ADD);\n-  reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult3, vtmp2, vtmp3);\n+  \/\/ result += vresult.reduceLanes(ADD);\n+  for (int idx = 0; idx < 4; idx++) {\n+    reduceI(Op_AddReductionVI, 256\/(sizeof(jint)*8), result, result, vresult[idx], vtmp[(idx*2+0)%4], vtmp[(idx*2+1)%4]);\n+  }\n@@ -3211,9 +3230,1 @@\n-} \/\/ stringL_hashcode\n-\n-void C2_MacroAssembler::stringU_hashcode(Register str1, Register cnt1, Register result,\n-                                         Register i, Register coef, Register tmp, XMMRegister vnext,\n-                                         XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n-                                         XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n-                                         XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3) {\n-  fprintf(stderr, \"C2_MacroAssembler::stringU_hashcode\\n\");\n-} \/\/ stringU_hashcode\n+} \/\/ array_hashcode\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":122,"deletions":111,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -245,11 +245,13 @@\n-  void stringL_hashcode(Register str1, Register cnt1, Register result,\n-                        Register i, Register coef, Register tmp, XMMRegister vnext,\n-                        XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n-                        XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n-                        XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3);\n-\n-  void stringU_hashcode(Register str1, Register cnt1, Register result,\n-                        Register i, Register coef, Register tmp, XMMRegister vnext,\n-                        XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n-                        XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n-                        XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3);\n+  void array_hashcode(Register str1, Register cnt1, Register result,\n+                      Register i, Register coef, Register tmp, XMMRegister vnext,\n+                      XMMRegister vcoef0, XMMRegister vcoef1, XMMRegister vcoef2, XMMRegister vcoef3,\n+                      XMMRegister vresult0, XMMRegister vresult1, XMMRegister vresult2, XMMRegister vresult3,\n+                      XMMRegister vtmp0, XMMRegister vtmp1, XMMRegister vtmp2, XMMRegister vtmp3,\n+                      BasicType eltype);\n+\n+  \/\/ helper functions for array_hashcode\n+  int array_hashcode_elsize(BasicType eltype);\n+  void array_hashcode_elload(Register dst, Address src, BasicType eltype);\n+  void array_hashcode_elvload(XMMRegister dst, Address src, BasicType eltype);\n+  void array_hashcode_elvload(XMMRegister dst, ExternalAddress src, BasicType eltype);\n+  void array_hashcode_elvcast(XMMRegister dst, BasicType eltype);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -11653,7 +11653,7 @@\n-    __ stringL_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n-                        $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n-                        $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n-                        $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n-                        $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n-                        $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n-                        $tmp_vec13$$XMMRegister);\n+    __ array_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+                      $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                      $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                      $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                      $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                      $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                      $tmp_vec13$$XMMRegister, T_BYTE);\n@@ -11680,7 +11680,7 @@\n-    __ stringU_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n-                        $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n-                        $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n-                        $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n-                        $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n-                        $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n-                        $tmp_vec13$$XMMRegister);\n+    __ array_hashcode($str1$$Register, $cnt1$$Register, $result$$Register,\n+                      $tmp1$$Register, $tmp2$$Register, $tmp3$$Register,\n+                      $tmp_vec1$$XMMRegister, $tmp_vec2$$XMMRegister, $tmp_vec3$$XMMRegister,\n+                      $tmp_vec4$$XMMRegister, $tmp_vec5$$XMMRegister, $tmp_vec6$$XMMRegister,\n+                      $tmp_vec7$$XMMRegister, $tmp_vec8$$XMMRegister, $tmp_vec9$$XMMRegister,\n+                      $tmp_vec10$$XMMRegister, $tmp_vec11$$XMMRegister, $tmp_vec12$$XMMRegister,\n+                      $tmp_vec13$$XMMRegister, T_CHAR);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n- * @run main\/othervm HashCode\n+ * @run main\/othervm -XX:+CompactStrings HashCode\n+ * @run main\/othervm -XX:-CompactStrings HashCode\n","filename":"test\/jdk\/java\/lang\/String\/HashCode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.util.concurrent.ThreadLocalRandom;\n+import java.util.Random;\n@@ -125,0 +125,2 @@\n+            Random rnd = new Random(42);\n+\n@@ -127,1 +129,1 @@\n-                str[i] = alphabet.charAt(ThreadLocalRandom.current().nextInt(alphabet.length()));\n+                str[i] = alphabet.charAt(rnd.nextInt(alphabet.length()));\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringHashCode.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}