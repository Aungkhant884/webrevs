{"files":[{"patch":"@@ -72,2 +72,0 @@\n-    -tag spec:X \\\n-    -tag specdefault:X \\\n@@ -89,0 +87,1 @@\n+    -tag spec \\\n","filename":"make\/Docs.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,8 @@\n+        \/**\n+         * Used for instances of {@link SpecTree}\n+         * representing an {@code @spec} tag.\n+         *\n+         * @since 19\n+         *\/\n+        SPEC(\"spec\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTree.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -303,0 +303,16 @@\n+    }\n+\n+    \/**\n+     * Visits a {@code SpecTree} node.\n+     *\n+     * @implSpec Visits the provided {@code SpecTree} node\n+     * by calling {@code visitOther(node, p)}.\n+     *\n+     * @param node the node being visited\n+     * @param p a parameter value\n+     * @return a result value\n+     *\n+     * @since 20\n+     *\/\n+    default R visitSpec(SpecTree node, P p) {\n+        return visitOther(node, p);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/DocTreeVisitor.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.source.doctree;\n+\n+import java.util.List;\n+\n+\/**\n+ * A tree node for an {@code @spec} block tag.\n+ *\n+ * <pre>\n+ *    &#064;spec url title\n+ * <\/pre>\n+ *\n+ * @since 20\n+ *\/\n+public interface SpecTree extends BlockTagTree {\n+    \/**\n+     * {@return the URL}\n+     *\/\n+    TextTree getURL();\n+\n+    \/**\n+     * {@return the title}\n+     *\/\n+    List<? extends DocTree> getTitle();\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/doctree\/SpecTree.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -62,0 +62,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -339,0 +340,9 @@\n+    \/**\n+     * Creates a new {@code SpecTree} object, to represent an {@code @spec} tag.\n+     * @param url    the url\n+     * @param title  the title\n+     * @return a {@code SpecTree} object\n+     * @since 20\n+     *\/\n+    SpecTree newSpecTree(TextTree url, List<? extends DocTree> title);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeFactory.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -512,0 +512,17 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation scans the children in left to right order.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p    {@inheritDoc}\n+     * @return the result of scanning\n+     * @since 20\n+     *\/\n+    @Override\n+    public R visitSpec(SpecTree node, P p) {\n+        R r = scan(node.getURL(), p);\n+        r = scanAndReduce(node.getTitle(), p, r);\n+        return r;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTreeScanner.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -466,0 +466,17 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @implSpec This implementation calls {@code defaultAction}.\n+     *\n+     * @param node {@inheritDoc}\n+     * @param p    {@inheritDoc}\n+     *\n+     * @return  the result of {@code defaultAction}\n+     *\n+     * @since 19\n+     *\/\n+    @Override\n+    public R visitSpec(SpecTree node, P p) {\n+        return defaultAction(node, p);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/SimpleDocTreeVisitor.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1528,0 +1528,18 @@\n+            \/\/ @spec url label\n+            new TagParser(TagParser.Kind.BLOCK, DCTree.Kind.SPEC) {\n+                @Override\n+                public DCTree parse(int pos) throws ParseException {\n+                    skipWhitespace();\n+                    DCText url = inlineWord();\n+                    if (url == null || url.isBlank()) {\n+                        throw new ParseException(\"dc.no.url\");\n+                    }\n+                    skipWhitespace();\n+                    List<DCTree> title = blockContent();\n+                    if (title.isEmpty() || DCTree.isBlank(title)) {\n+                        throw new ParseException(\"dc.no.title\");\n+                    }\n+                    return m.at(pos).newSpecTree(url, title);\n+                }\n+            },\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3354,0 +3354,6 @@\n+compiler.err.dc.no.url=\\\n+    no URL\n+\n+compiler.err.dc.no.title=\\\n+    no title\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import com.sun.tools.javac.util.Position;\n@@ -228,0 +227,8 @@\n+    public boolean isBlank() {\n+        return false;\n+    }\n+\n+    public static boolean isBlank(List<? extends DCTree> list) {\n+        return list.stream().allMatch(DCTree::isBlank);\n+    }\n+\n@@ -1083,0 +1090,35 @@\n+    public static class DCSpec extends DCBlockTag implements SpecTree {\n+        public final DCText uri;\n+        public final List<DCTree> title;\n+\n+        DCSpec(DCText uri, List<DCTree> title) {\n+            this.uri = uri;\n+            this.title = title;\n+        }\n+\n+        @Override\n+        public String getTagName() {\n+            return \"spec\";\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public Kind getKind() {\n+            return Kind.SPEC;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public <R, D> R accept(DocTreeVisitor<R, D> v, D d) {\n+            return v.visitSpec(this, d);\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public TextTree getURL() {\n+            return uri;\n+        }\n+\n+        @Override @DefinedBy(Api.COMPILER_TREE)\n+        public List<? extends DocTree> getTitle() {\n+            return title;\n+        }\n+    }\n+\n@@ -1173,0 +1215,5 @@\n+        @Override\n+        public boolean isBlank() {\n+            return text.isBlank();\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DCTree.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -507,0 +507,14 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public Void visitSpec(SpecTree node, Void p) {\n+        try {\n+            printTagName(node);\n+            print(\" \");\n+            print(node.getURL());\n+            print(\" \");\n+            print(node.getTitle());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocPretty.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+import com.sun.tools.javac.tree.DCTree.DCSpec;\n@@ -92,1 +93,0 @@\n-import com.sun.tools.javac.util.DiagnosticSource;\n@@ -94,1 +94,0 @@\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n@@ -127,1 +126,1 @@\n-    public int pos = Position.NOPOS;\n+    public int pos;\n@@ -241,1 +240,1 @@\n-        DCDocComment tree = new DCDocComment(c, fBody, pair.fst, pair.snd, cast(tags),\n+        return new DCDocComment(c, fBody, pair.fst, pair.snd, cast(tags),\n@@ -243,1 +242,0 @@\n-        return tree;\n@@ -424,0 +422,7 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public DCSpec newSpecTree(TextTree url, List<? extends DocTree> title) {\n+        DCSpec tree = new DCSpec((DCText) url, cast(title));\n+        tree.pos = pos;\n+        return tree;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/DocTreeMaker.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+    public final Content externalSpecifications;\n@@ -172,0 +173,1 @@\n+    public final Content specificationLabel;\n@@ -242,0 +244,1 @@\n+        externalSpecifications = getContent(\"doclet.External_Specifications\");\n@@ -316,0 +319,1 @@\n+        specificationLabel = getContent(\"doclet.Specification\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,297 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.text.Collator;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.WeakHashMap;\n+import java.util.function.Predicate;\n+import javax.lang.model.element.Element;\n+import javax.tools.Diagnostic;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.SpecTree;\n+import com.sun.source.util.DocTreePath;\n+import com.sun.source.util.TreePath;\n+\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;\n+import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.DocletElement;\n+import jdk.javadoc.internal.doclets.toolkit.OverviewElement;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;\n+import jdk.javadoc.internal.doclets.toolkit.util.IndexItem;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+\/**\n+ * Generates the file with the summary of all the references to external specifications.\n+ *\/\n+public class ExternalSpecsWriter extends HtmlDocletWriter {\n+\n+    private final Navigation navBar;\n+\n+    \/**\n+     * Cached contents of {@code <title>...<\/title>} tags of the HTML pages.\n+     *\/\n+    final Map<Element, String> titles = new WeakHashMap<>();\n+\n+    \/**\n+     * Constructs ExternalSpecsWriter object.\n+     *\n+     * @param configuration The current configuration\n+     * @param filename Path to the file which is getting generated.\n+     *\/\n+    public ExternalSpecsWriter(HtmlConfiguration configuration, DocPath filename) {\n+        super(configuration, filename);\n+        this.navBar = new Navigation(null, configuration, PageMode.EXTERNAL_SPECS, path);\n+    }\n+\n+    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n+        generate(configuration, DocPaths.EXTERNAL_SPECS);\n+    }\n+\n+    private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {\n+        boolean hasExternalSpecs = configuration.mainIndex != null\n+                && !configuration.mainIndex.getItems(DocTree.Kind.SPEC).isEmpty();\n+        if (!hasExternalSpecs) {\n+            return;\n+        }\n+        ExternalSpecsWriter w = new ExternalSpecsWriter(configuration, fileName);\n+        w.buildExternalSpecsPage();\n+        configuration.conditionalPages.add(HtmlConfiguration.ConditionalPage.EXTERNAL_SPECS);\n+    }\n+\n+    \/**\n+     * Prints all the \"external specs\" to the file.\n+     *\/\n+    protected void buildExternalSpecsPage() throws DocFileIOException {\n+        checkUniqueItems();\n+\n+        String title = resources.getText(\"doclet.External_Specifications\");\n+        HtmlTree body = getBody(getWindowTitle(title));\n+        Content mainContent = new ContentBuilder();\n+        addExternalSpecs(mainContent);\n+        body.add(new BodyContents()\n+                .setHeader(getHeader(PageMode.EXTERNAL_SPECS))\n+                .addMainContent(HtmlTree.DIV(HtmlStyle.header,\n+                        HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING,\n+                                contents.getContent(\"doclet.External_Specifications\"))))\n+                .addMainContent(mainContent)\n+                .setFooter(getFooter()));\n+        printHtmlDocument(null, \"external specifications\", body);\n+\n+        if (configuration.mainIndex != null) {\n+            configuration.mainIndex.add(IndexItem.of(IndexItem.Category.TAGS, title, path));\n+        }\n+    }\n+\n+    protected void checkUniqueItems() {\n+        Map<String, Map<String, List<IndexItem>>> itemsByURL = new HashMap<>();\n+        Map<String, Map<String, List<IndexItem>>> itemsByTitle = new HashMap<>();\n+        for (IndexItem ii : configuration.mainIndex.getItems(DocTree.Kind.SPEC)) {\n+            if (ii.getDocTree() instanceof SpecTree st) {\n+                String url = st.getURL().toString();\n+                String title = st.getTitle().toString();\n+                itemsByTitle\n+                        .computeIfAbsent(title, l -> new HashMap<>())\n+                        .computeIfAbsent(url, u -> new ArrayList<>())\n+                        .add(ii);\n+                itemsByURL\n+                        .computeIfAbsent(url, u -> new HashMap<>())\n+                        .computeIfAbsent(title, l -> new ArrayList<>())\n+                        .add(ii);\n+            }\n+        }\n+\n+        itemsByURL.forEach((url, title) -> {\n+            if (title.size() > 1) {\n+                messages.error(\"doclet.extSpec.spec.has.multiple.titles\", url,\n+                        title.values().stream().distinct().count());\n+                title.forEach((t, list) ->\n+                        list.forEach(ii ->\n+                                report(ii, \"doclet.extSpec.url.title\", url, t)));\n+            }\n+        });\n+\n+        itemsByTitle.forEach((title, urls) -> {\n+            if (urls.size() > 1) {\n+                messages.error(\"doclet.extSpec.title.for.multiple.specs\", title,\n+                        urls.values().stream().distinct().count());\n+                urls.forEach((u, list) ->\n+                        list.forEach(ii ->\n+                                report(ii, \"doclet.extSpec.title.url\", title, u)));\n+            }\n+        });\n+    }\n+\n+    private void report(IndexItem ii, String key, Object... args) {\n+        String message = messages.getResources().getText(key, args);\n+        Element e = ii.getElement();\n+        if (e == null) {\n+            configuration.reporter.print(Diagnostic.Kind.NOTE, message);\n+        } else {\n+            TreePath tp = utils.getTreePath(e);\n+            DocTreePath dtp = new DocTreePath(new DocTreePath(tp, utils.getDocCommentTree(e)), ii.getDocTree());\n+            configuration.reporter.print(Diagnostic.Kind.NOTE, dtp, message);\n+        }\n+    }\n+\n+    \/**\n+     * Adds all the references to external specifications to the content tree.\n+     *\n+     * @param content HtmlTree content to which the links will be added\n+     *\/\n+    protected void addExternalSpecs(Content content) {\n+        final int USE_DETAILS_THRESHHOLD = 20;\n+        Map<String, List<IndexItem>> searchIndexMap = groupExternalSpecs();\n+        Table table = new Table(HtmlStyle.summaryTable)\n+                .setCaption(contents.externalSpecifications)\n+                .setHeader(new TableHeader(contents.specificationLabel, contents.referencedIn))\n+                .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colLast);\n+        for (List<IndexItem> searchIndexItems : searchIndexMap.values()) {\n+            Content specName = createSpecLink(searchIndexItems.get(0));\n+            Content referencesList = HtmlTree.UL(HtmlStyle.refList, searchIndexItems,\n+                    item -> HtmlTree.LI(createLink(item)));\n+            Content references = searchIndexItems.size() < USE_DETAILS_THRESHHOLD\n+                    ? referencesList\n+                    : HtmlTree.DETAILS()\n+                            .add(HtmlTree.SUMMARY(contents.getContent(\"doclet.references\",\n+                                    String.valueOf(searchIndexItems.size()))))\n+                            .add(referencesList);\n+            table.addRow(specName, references);\n+        }\n+        content.add(table);\n+    }\n+\n+    private Map<String, List<IndexItem>> groupExternalSpecs() {\n+        return configuration.mainIndex.getItems(DocTree.Kind.SPEC).stream()\n+                .collect(groupingBy(IndexItem::getLabel, () -> new TreeMap<>(getTitleComparator()), toList()));\n+    }\n+\n+    Comparator<String> getTitleComparator() {\n+        Collator collator = Collator.getInstance();\n+        return new Comparator<>() {\n+            @Override\n+            public int compare(String s1, String s2) {\n+                int i1 = 0;\n+                int i2 = 0;\n+                while (i1 < s1.length() && i2 < s2.length()) {\n+                    int j1 = find(s1, i1, Character::isDigit);\n+                    int j2 = find(s2, i2, Character::isDigit);\n+                    int cmp = collator.compare(s1.substring(i1, j1), s2.substring(i2, j2));\n+                    if (cmp != 0) {\n+                        return cmp;\n+                    }\n+                    if (j1 == s1.length() || j2 == s2.length()) {\n+                        i1 = j1;\n+                        i2 = j2;\n+                        break;\n+                    }\n+                    int k1 = find(s1, j1, ch -> !Character.isDigit(ch));\n+                    int k2 = find(s2, j2, ch -> !Character.isDigit(ch));\n+                    cmp = Integer.compare(Integer.parseInt(s1.substring(j1, k1)), Integer.parseInt(s2.substring(j2, k2)));\n+                    if (cmp != 0) {\n+                        return cmp;\n+                    }\n+                    i1 = k1;\n+                    i2 = k2;\n+                }\n+                return i1 < s1.length() ? 1 : i2 < s2.length() ? -1 : 0;\n+            }\n+        };\n+    }\n+\n+    private static int find(String s, int start, Predicate<Character> p) {\n+        int i = start;\n+        while (i < s.length() && !p.test(s.charAt(i))) {\n+            i++;\n+        }\n+        return i;\n+    }\n+\n+    private Content createLink(IndexItem i) {\n+        assert i.getDocTree().getKind() == DocTree.Kind.SPEC : i;\n+        Element element = i.getElement();\n+        if (element instanceof OverviewElement) {\n+            return links.createLink(pathToRoot.resolve(i.getUrl()),\n+                    resources.getText(\"doclet.Overview\"));\n+        } else if (element instanceof DocletElement) {\n+            DocletElement e = (DocletElement) element;\n+            \/\/ Implementations of DocletElement do not override equals and\n+            \/\/ hashCode; putting instances of DocletElement in a map is not\n+            \/\/ incorrect, but might well be inefficient\n+            String t = titles.computeIfAbsent(element, utils::getHTMLTitle);\n+            if (t.isBlank()) {\n+                \/\/ The user should probably be notified (a warning?) that this\n+                \/\/ file does not have a title\n+                Path p = Path.of(e.getFileObject().toUri());\n+                t = p.getFileName().toString();\n+            }\n+            ContentBuilder b = new ContentBuilder();\n+            b.add(HtmlTree.CODE(Text.of(i.getHolder() + \": \")));\n+            \/\/ non-program elements should be displayed using a normal font\n+            b.add(t);\n+            return links.createLink(pathToRoot.resolve(i.getUrl()), b);\n+        } else {\n+            \/\/ program elements should be displayed using a code font\n+            Content link = links.createLink(pathToRoot.resolve(i.getUrl()), i.getHolder());\n+            return HtmlTree.CODE(link);\n+        }\n+    }\n+\n+    private Content createSpecLink(IndexItem i) {\n+        assert i.getDocTree().getKind() == DocTree.Kind.SPEC : i;\n+        SpecTree specTree = (SpecTree) i.getDocTree();\n+\n+        Content title = Text.of(i.getLabel());\n+\n+        URI specURI;\n+        try {\n+            specURI = new URI(specTree.getURL().getBody());\n+        } catch (URISyntaxException e) {\n+            \/\/ should not happen: items with bad URIs should not make it into the index\n+            return title;\n+        }\n+\n+        return HtmlTree.A(resolveExternalSpecURI(specURI), title);\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ExternalSpecsWriter.java","additions":297,"deletions":0,"binary":false,"changes":297,"status":"added"},{"patch":"@@ -393,0 +393,9 @@\n+        \/\/ External Specification\n+        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.EXTERNAL_SPECS)) {\n+            section = newHelpSection(contents.externalSpecifications, PageMode.EXTERNAL_SPECS, subTOC);\n+            Content extSpecsBody = getContent(\"doclet.help.externalSpecifications.body\",\n+                    links.createLink(DocPaths.EXTERNAL_SPECS, resources.getText(\"doclet.External_Specifications\")));\n+            section.add(HtmlTree.P(extSpecsBody));\n+            pageKindsSection.add(section);\n+        }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-        CONSTANT_VALUES, DEPRECATED, PREVIEW, SERIALIZED_FORM, SYSTEM_PROPERTIES, NEW\n+        CONSTANT_VALUES, DEPRECATED, EXTERNAL_SPECS, PREVIEW, SERIALIZED_FORM, SYSTEM_PROPERTIES, NEW\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,8 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n@@ -259,0 +266,1 @@\n+            ExternalSpecsWriter.generate(configuration);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.net.URI;\n@@ -2460,0 +2461,14 @@\n+    public URI resolveExternalSpecURI(URI specURI) {\n+        if (!specURI.isAbsolute()) {\n+            URI baseURI = configuration.getOptions().specBaseURI();\n+            if (baseURI == null) {\n+                baseURI = URI.create(\"..\/specs\/\");\n+            }\n+            if (!baseURI.isAbsolute() && !pathToRoot.isEmpty()) {\n+                baseURI = URI.create(pathToRoot.getPath() + \"\/\").resolve(baseURI);\n+            }\n+            specURI = baseURI.resolve(specURI);\n+        }\n+        return specURI;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+\n@@ -88,0 +89,1 @@\n+        EXTERNAL_SPECS,\n@@ -319,0 +321,1 @@\n+            case EXTERNAL_SPECS:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Navigation.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -35,0 +37,1 @@\n+import java.util.stream.Collectors;\n@@ -54,0 +57,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -56,0 +60,1 @@\n+import com.sun.source.doctree.TextTree;\n@@ -78,0 +83,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;\n@@ -360,0 +366,14 @@\n+    String textOf(List<? extends DocTree> trees) {\n+        return trees.stream()\n+                .filter(dt -> dt instanceof TextTree)\n+                .map(dt -> ((TextTree) dt).getBody().trim())\n+                .collect(Collectors.joining(\" \"));\n+    }\n+\n+    private void appendSeparatorIfNotEmpty(ContentBuilder body) {\n+        if (!body.isEmpty()) {\n+            body.add(\", \");\n+            body.add(DocletConstants.NL);\n+        }\n+    }\n+\n@@ -485,0 +505,48 @@\n+    @Override\n+    public Content specTagOutput(Element holder, List<? extends SpecTree> specTags) {\n+        ContentBuilder body = new ContentBuilder();\n+        for (SpecTree st : specTags) {\n+            appendSeparatorIfNotEmpty(body);\n+            body.add(specTagToContent(holder, st));\n+        }\n+        if (body.isEmpty())\n+            return body;\n+\n+        return new ContentBuilder(\n+                HtmlTree.DT(contents.externalSpecifications),\n+                HtmlTree.DD(body));\n+    }\n+\n+    private Content specTagToContent(Element holder, SpecTree specTree) {\n+        String specTreeURL = specTree.getURL().getBody();\n+        List<? extends DocTree> specTreeLabel = specTree.getTitle();\n+        Content label = htmlWriter.commentTagsToContent(holder, specTreeLabel, isFirstSentence);\n+        return getExternalSpecContent(holder, specTree, specTreeURL, textOf(specTreeLabel), label);\n+    }\n+\n+    Content getExternalSpecContent(Element holder, DocTree docTree, String url, String searchText, Content title) {\n+        URI specURI;\n+        try {\n+            \/\/ Use the canonical title of the spec if one is available\n+            specURI = new URI(url);\n+        } catch (URISyntaxException e) {\n+            CommentHelper ch = utils.getCommentHelper(holder);\n+            DocTreePath dtp = ch.getDocTreePath(docTree);\n+            htmlWriter.messages.error(dtp, \"doclet.Invalid_URL\", e.getMessage());\n+            specURI = null;\n+        }\n+\n+        Content titleWithAnchor = createAnchorAndSearchIndex(holder,\n+                searchText,\n+                title,\n+                resources.getText(\"doclet.External_Specification\"),\n+                docTree);\n+\n+        if (specURI == null) {\n+            return titleWithAnchor;\n+        } else {\n+            return HtmlTree.A(htmlWriter.resolveExternalSpecURI(specURI), titleWithAnchor);\n+        }\n+\n+    }\n+\n@@ -577,0 +645,4 @@\n+    public HtmlDocletWriter getHtmlWriter() {\n+        return htmlWriter;\n+    }\n+\n@@ -578,0 +650,5 @@\n+        return createAnchorAndSearchIndex(element, tagText, Text.of(tagText), desc, tree);\n+    }\n+\n+    @SuppressWarnings(\"preview\")\n+    private Content createAnchorAndSearchIndex(Element element, String tagText, Content tagContent, String desc, DocTree tree) {\n@@ -580,1 +657,1 @@\n-            result = Text.of(tagText);\n+            result = tagContent;\n@@ -583,1 +660,1 @@\n-            result = HtmlTree.SPAN(id, HtmlStyle.searchTagResult, Text.of(tagText));\n+            result = HtmlTree.SPAN(id, HtmlStyle.searchTagResult, tagContent);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":79,"deletions":2,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -746,0 +746,5 @@\n+    \/**\n+     * The class of the {@code body} element for the \"external specifications\" page.\n+     *\/\n+    externalSpecsPage,\n+\n@@ -1010,0 +1015,5 @@\n+    \/**\n+     * The class for the list of references to an external specification.\n+     *\/\n+    refList,\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyle.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -392,0 +392,9 @@\n+    \/**\n+     * Creates an HTML {@code DETAILS} element.\n+     *\n+     * @return the element\n+     *\/\n+    public static HtmlTree DETAILS() {\n+        return new HtmlTree(TagName.DETAILS);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -162,0 +162,3 @@\n+doclet.External_Specification=External Specification\n+doclet.External_Specifications=External Specifications\n+doclet.Specification=Specification\n@@ -167,0 +170,2 @@\n+# 0: number of references (> 1)\n+doclet.references={0} references\n@@ -320,0 +325,3 @@\n+# 0: link to External Specifications page\n+doclet.help.externalSpecifications.body=\\\n+    The {0} page lists references to external specifications.\n@@ -405,0 +413,16 @@\n+# 0: URL; 1: an integer\n+doclet.extSpec.spec.has.multiple.titles=\\\n+    {1} different titles given in @spec tags for the external specification at {0}\n+\n+# 0: name; 1: an integer\n+doclet.extSpec.title.for.multiple.specs=\\\n+    The title \"{0}\" is used for {1} different external specifications in @spec tags\n+\n+# 0: name; 1: url\n+doclet.extSpec.title.url=\\\n+    title: \"{0}\", url: {1}\n+\n+# 0: url; 1: name\n+doclet.extSpec.url.title=\\\n+    url: {0}, title: \"{1}\"\n+\n@@ -665,0 +689,8 @@\n+doclet.usage.spec-base-urL=\\\n+    <URL>\n+doclet.usage.spec-base-url.description=\\\n+    Specify a base URL for relative URLs in @spec tags\n+\n+doclet.Invalid_URL=\\\n+    invalid URL: {0}\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n@@ -298,0 +301,6 @@\n+    \/**\n+     * Argument for command-line option {@code --spec-base-url}.\n+     * The base URL for relative URLs in {@code @spec} tags.\n+     *\/\n+    private URI specBaseURI;\n+\n@@ -668,0 +677,20 @@\n+                new Option(resources, \"--spec-base-url\", 1) {\n+                    @Override\n+                    public boolean process(String opt, List<String> args) {\n+                        String arg = args.get(0);\n+                        try {\n+                            if (!arg.endsWith(\"\/\")) {\n+                                \/\/ to ensure that URI.resolve works as expected\n+                                arg += \"\/\";\n+                            }\n+                            specBaseURI = new URI(arg);\n+                            return true;\n+                        } catch (URISyntaxException e) {\n+                            config.reporter.print(ERROR,\n+                                    config.getDocResources().getText(\"doclet.Invalid_URL\",\n+                                            e.getMessage()));\n+                            return false;\n+                        }\n+                    }\n+                },\n+\n@@ -1048,0 +1077,8 @@\n+    \/**\n+     * Argument for command-line option {@code --spec-base-url}.\n+     * The base URL for relative URLs in {@code @spec} tags.\n+     *\/\n+    public URI specBaseURI() {\n+        return specBaseURI;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -327,0 +327,8 @@\n+ul.ref-list {\n+  margin-left:0;\n+  padding:0;\n+  margin:0;\n+}\n+ul.ref-list > li {\n+    list-style:none;\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/stylesheet.css","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.toolkit.taglets;\n+\n+import java.util.EnumSet;\n+import java.util.List;\n+import javax.lang.model.element.Element;\n+\n+import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.SpecTree;\n+import jdk.javadoc.doclet.Taglet.Location;\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocFinder.Input;\n+import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n+\n+\/**\n+ * A taglet that represents the {@code @spec} tag.\n+ *\/\n+public class SpecTaglet extends BaseTaglet implements InheritableTaglet {\n+\n+    public SpecTaglet() {\n+        super(DocTree.Kind.SPEC, true, EnumSet.allOf(Location.class));\n+    }\n+\n+    @Override\n+    public boolean isBlockTag() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void inherit(Input input, DocFinder.Output output) {\n+        List<? extends SpecTree> tags = input.utils.getSpecTrees(input.element);\n+        if (!tags.isEmpty()) {\n+            CommentHelper ch =  input.utils.getCommentHelper(input.element);\n+            output.holder = input.element;\n+            output.holderTag = tags.get(0);\n+            output.inlineTags = input.isFirstSentence\n+                    ? ch.getFirstSentenceTrees(output.holderTag)\n+                    : ch.getReference(output.holderTag);\n+        }\n+    }\n+\n+    @Override\n+    public Content getAllBlockTagOutput(Element holder, TagletWriter writer) {\n+        Utils utils = writer.configuration().utils;\n+        List<? extends SpecTree> tags = utils.getSpecTrees(holder);\n+        Element e = holder;\n+        if (tags.isEmpty() && utils.isExecutableElement(holder)) {\n+            Input input = new Input(utils, holder, this);\n+            DocFinder.Output inheritedDoc = DocFinder.search(writer.configuration(), input);\n+            if (inheritedDoc.holder != null) {\n+                tags = utils.getSpecTrees(inheritedDoc.holder);\n+                e = inheritedDoc.holder;\n+            }\n+        }\n+        return writer.specTagOutput(e, tags);\n+    }\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SpecTaglet.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -649,0 +649,1 @@\n+        addStandardTaglet(new SpecTaglet());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -187,0 +188,10 @@\n+    \/**\n+     * Returns the output for one or more {@code @spec} tags.\n+     *\n+     * @param element  the element that owns the doc comment\n+     * @param specTags the array of @spec tags.\n+     *\n+     * @return the output\n+     *\/\n+    protected abstract Content specTagOutput(Element element, List<? extends SpecTree> specTags);\n+\n@@ -190,1 +201,1 @@\n-     * @param element           The element that owns the doc comment\n+     * @param element           the element that owns the doc comment\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+    \/** The name of the file for all references to external specifications. *\/\n+    public static final DocPath EXTERNAL_SPECS = DocPath.create(\"external-specs.html\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-            case INDEX, SYSTEM_PROPERTY -> { }\n+            case INDEX, SPEC, SYSTEM_PROPERTY -> { }\n@@ -340,1 +340,1 @@\n-            case INDEX, SYSTEM_PROPERTY -> Category.TAGS;\n+            case INDEX, SPEC, SYSTEM_PROPERTY -> Category.TAGS;\n@@ -565,1 +565,1 @@\n-                        .append(\"\\\"l\\\":\\\"\").append(label).append(\"\\\",\")\n+                        .append(\"\\\"l\\\":\\\"\").append(escapeQuotes(label)).append(\"\\\",\")\n@@ -568,1 +568,1 @@\n-                    item.append(\"\\\"d\\\":\\\"\").append(description).append(\"\\\",\");\n+                    item.append(\"\\\"d\\\":\\\"\").append(escapeQuotes(description)).append(\"\\\",\");\n@@ -570,1 +570,1 @@\n-                item.append(\"\\\"u\\\":\\\"\").append(url).append(\"\\\"\")\n+                item.append(\"\\\"u\\\":\\\"\").append(escapeQuotes(url)).append(\"\\\"\")\n@@ -579,1 +579,5 @@\n-}\n+\n+    private String escapeQuotes(String s) {\n+        return s.replace(\"\\\"\", \"\\\\\\\"\");\n+    }\n+ }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexItem.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+import com.sun.source.doctree.SpecTree;\n@@ -2480,0 +2481,4 @@\n+    public List<? extends SpecTree> getSpecTrees(Element element) {\n+        return getBlockTags(element, SPEC, SpecTree.class);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug      8254721\n+ * @bug      8254721 6251738\n@@ -76,0 +76,11 @@\n+    @Test\n+    public void testExternalSpecs(Path base) throws IOException {\n+        test(base, \"\"\"\n+                package p;\n+                \/** @spec http:\/\/example.com label. *\/\n+                public class C {  }\n+                \"\"\",\n+                \"external-specs.html\",\n+                b -> checkOutput(\"index-all.html\", b, \"External&nbsp;Specifications\"));\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testConditionalPages\/TestConditionalPages.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,0 +152,1 @@\n+        \"external-specs-page\",\n@@ -218,0 +219,1 @@\n+            \"ExternalSpecsWriter\",\n@@ -346,0 +348,4 @@\n+            case \"ExternalSpecsWriter\":\n+                check(generator, content, content.startsWith(\"external specifications\"));\n+                break;\n+\n@@ -399,1 +405,10 @@\n-                    \"\/** Class pA.CA. *\/ package pA; public class CA { @Deprecated public static final int ZERO = 0; }\",\n+                    \"\"\"\n+                        \/** Class pA.CA. *\/\n+                        package pA; public class CA {\n+                            \/**\n+                             * First sentence.\n+                             * @spec http:\/\/example.com example reference\n+                             *\/\n+                            @Deprecated public static final int ZERO = 0;\n+                        }\n+                        \"\"\",\n@@ -414,1 +429,11 @@\n-                        .classes(\"\/** Class mA\/pA.CA. *\/ package pA; public class CA { @Deprecated public static int ZERO = 0; }\")\n+                        .classes(\"\"\"\n+                            \/** Class mA\/pA.CA. *\/\n+                            package pA;\n+                            public class CA {\n+                                \/**\n+                                 * First sentence.\n+                                 * @spec http:\/\/example.com example reference\n+                                 *\/\n+                                @Deprecated public static int ZERO = 0;\n+                            }\n+                        \"\"\")\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMetadata\/TestMetadata.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,432 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6251738 8226279\n+ * @summary JDK-8226279 javadoc should support a new at-spec tag\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSpecTag\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestSpecTag extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestSpecTag tester = new TestSpecTag();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    enum LinkKind { ABSOLUTE, RELATIVE }\n+\n+    @Test\n+    public void testBadSpecBaseURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--spec-base-url\", \"http:\/\/[\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.CMDERR);\n+        checkOutput(Output.OUT, true,\n+                \"error: invalid URL: Expected closing bracket for IPv6 address at index 8: http:\/\/[\");\n+    }\n+\n+    @Test\n+    public void testBadSpecURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; \/** @spec http:\/\/[ label *\/ public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"testBadSpecURI\/src\/p\/C.java:1:\".replace('\/', File.separatorChar)\n+                    + \" error: invalid URL: Expected closing bracket for IPv6 address at index 8: http:\/\/[\");\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>External Specifications<\/dt>\n+                    <dd><span id=\"label\" class=\"search-tag-result\">label<\/span><\/dd>\n+                    <\/dl>\n+                    \"\"\");\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\">label<\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#label\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+    }\n+\n+    @Test\n+    public void testNavigation(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; \/** @spec http:\/\/example.com label *\/ public class C { }\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                    <!-- ========= START OF TOP NAVBAR ======= -->\n+                    <div class=\"top-nav\" id=\"navbar-top\"><button id=\"navbar-toggle-button\" aria-controls=\"navbar-top\" aria-expanded=\"false\" aria-label=\"Toggle navigation links\"><span class=\"nav-bar-toggle-icon\"><\/span><span class=\"nav-bar-toggle-icon\"><\/span><span class=\"nav-bar-toggle-icon\"><\/span><\/button>\n+                    <div class=\"skip-nav\"><a href=\"#skip-navbar-top\" title=\"Skip navigation links\">Skip navigation links<\/a><\/div>\n+                    <ul id=\"navbar-top-firstrow\" class=\"nav-list\" title=\"Navigation\">\n+                    <li><a href=\"p\/package-summary.html\">Package<\/a><\/li>\n+                    <li>Class<\/li>\n+                    <li><a href=\"p\/package-tree.html\">Tree<\/a><\/li>\n+                    <li><a href=\"index-all.html\">Index<\/a><\/li>\n+                    <li><a href=\"help-doc.html#external-specs\">Help<\/a><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"sub-nav\">\n+                    <div id=\"navbar-sub-list\"><\/div>\n+                    <div class=\"nav-list-search\"><a href=\"search.html\">SEARCH<\/a>\n+                    <input type=\"text\" id=\"search-input\" disabled placeholder=\"Search\">\n+                    <input type=\"reset\" id=\"reset-button\" disabled value=\"reset\">\n+                    <\/div>\n+                    <\/div>\n+                    <!-- ========= END OF TOP NAVBAR ========= -->\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testEncodedURI(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        \/\/ The default encoding for OpenJDK source files is ASCII.\n+        \/\/ The following writes a file using UTF-8 containing a non-ASCII character (section)\n+        \/\/ and a Unicode escape for another character (plus or minus)\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * @spec http:\/\/example.com\/a+b         space: plus\n+                 * @spec http:\/\/example.com\/a%20b       space: percent\n+                 * @spec http:\/\/example.com\/a\\u00A7b    other: section; U+00A7, UTF-8 c2 a7\n+                 * @spec http:\/\/example.com\/a\\\\u00B1b   unicode: plus or minus; U+00B1, UTF-8 c2 b1\n+                 *\/\n+                public class C { }\n+                \"\"\");\n+\n+        \/\/ Ensure the source file is read using UTF-8\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"-encoding\", \"UTF-8\",\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/a+b\"><span id=\"space:plus\" class=\"search-tag-result\">space: plus<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%20b\"><span id=\"space:percent\" class=\"search-tag-result\">space: percent<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%C2%A7b\"><span id=\"other:section;U+00A7,UTF-8c2a7\" class=\"search-tag-result\">other: section; U+00A7, UTF-8 c2 a7<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/a%C2%B1b\"><span id=\"unicode:plusorminus;U+00B1,UTF-8c2b1\" class=\"search-tag-result\">unicode: plus or minus; U+00B1, UTF-8 c2 b1<\/span><\/a><\/dd>\n+                    <\/dl>\n+                    \"\"\");\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"table-header col-first\">Specification<\/div>\n+                    <div class=\"table-header col-last\">Referenced In<\/div>\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/a%C2%A7b\">other: section; U+00A7, UTF-8 c2 a7<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#other:section;U+00A7,UTF-8c2a7\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/a%20b\">space: percent<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#space:percent\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/a+b\">space: plus<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#space:plus\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/a%C2%B1b\">unicode: plus or minus; U+00B1, UTF-8 c2 b1<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#unicode:plusorminus;U+00B1,UTF-8c2b1\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+    }\n+\n+    @Test\n+    public void testDuplicateRefs(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * @spec http:\/\/example.com\/ example\n+                 *\/\n+                public class C {\n+                    \/**\n+                     * @spec http:\/\/example.com\/ example\n+                     *\/\n+                     public void m() { }\n+                    \/**\n+                     * @spec http:\/\/example.com\/ example\n+                     *\/\n+                     public int f;\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOrder(\"p\/C.html\",\n+                \"<h1 title=\\\"Class C\\\" class=\\\"title\\\">Class C<\/h1>\",\n+                \"\"\"\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\",\n+                \"<section class=\\\"field-details\\\" id=\\\"field-detail\\\">\",\n+                \"\"\"\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example-1\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\",\n+                \"<section class=\\\"detail\\\" id=\\\"m()\\\">\",\n+                \"\"\"\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/\"><span id=\"example-2\" class=\"search-tag-result\">example<\/span><\/a><\/dd>\n+                    \"\"\");\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/\">example<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#example\">class p.C<\/a><\/code><\/li>\n+                    <li><code><a href=\"p\/C.html#example-1\">p.C.f<\/a><\/code><\/li>\n+                    <li><code><a href=\"p\/C.html#example-2\">p.C.m()<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\"\"\");\n+\n+    }\n+\n+    @Test\n+    public void testMultiple(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/**\n+                 * First sentence.\n+                 * @spec http:\/\/example.com\/1 example-1\n+                 * @spec http:\/\/example.com\/2 example-2\n+                 *\/\n+                public class C { }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/1\"><span id=\"example-1\" class=\"search-tag-result\">example-1<\/span><\/a>,\\s\n+                    <a href=\"http:\/\/example.com\/2\"><span id=\"example-2\" class=\"search-tag-result\">example-2<\/span><\/a><\/dd>\n+                    \"\"\");\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                    <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/1\">example-1<\/a><\/div>\n+                    <div class=\"col-last even-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#example-1\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    <div class=\"col-first odd-row-color\"><a href=\"http:\/\/example.com\/2\">example-2<\/a><\/div>\n+                    <div class=\"col-last odd-row-color\">\n+                    <ul class=\"ref-list\">\n+                    <li><code><a href=\"p\/C.html#example-2\">class p.C<\/a><\/code><\/li>\n+                    <\/ul>\n+                    <\/div>\n+                    \"\"\");\n+    }\n+\n+    @Test\n+    public void testMultipleTitlesForURL(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/** Class C. *\/\n+                public class C {\n+                    private C() { }\n+\n+                    \/**\n+                     * Method m1.\n+                     * @spec http:\/\/example.com\/index.html first\n+                     *\/\n+                     public void m1() { }\n+\n+                    \/**\n+                     * Method m2.\n+                     * @spec http:\/\/example.com\/index.html second\n+                     *\/\n+                     public void m2() { }\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"\"\"\n+                    error: 2 different titles given in @spec tags for the external specification at http:\/\/example.com\/index.html\n+                    #FILE#:8: Note: url: http:\/\/example.com\/index.html, title: \"first\"\n+                         * @spec http:\/\/example.com\/index.html first\n+                           ^\n+                    #FILE#:14: Note: url: http:\/\/example.com\/index.html, title: \"second\"\n+                         * @spec http:\/\/example.com\/index.html second\n+                           ^\n+                    \"\"\"\n+                    .replace(\"#FILE#\", src.resolve(\"p\").resolve(\"C.java\").toString()));\n+    }\n+\n+    @Test\n+    public void testMultipleURLsForTitle(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/** Class C. *\/\n+                public class C {\n+                    private C() { }\n+\n+                    \/**\n+                     * Method m1.\n+                     * @spec http:\/\/example.com\/index1.html Example Title\n+                     *\/\n+                     public void m1() { }\n+\n+                    \/**\n+                     * Method m2.\n+                     * @spec http:\/\/example.com\/index2.html Example Title\n+                     *\/\n+                     public void m2() { }\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.ERROR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"\"\"\n+                    error: The title \"Example Title\" is used for 2 different external specifications in @spec tags\n+                    #FILE#:8: Note: title: \"Example Title\", url: http:\/\/example.com\/index1.html\n+                         * @spec http:\/\/example.com\/index1.html Example Title\n+                           ^\n+                    #FILE#:14: Note: title: \"Example Title\", url: http:\/\/example.com\/index2.html\n+                         * @spec http:\/\/example.com\/index2.html Example Title\n+                           ^\n+                    \"\"\"\n+                    .replace(\"#FILE#\", src.resolve(\"p\").resolve(\"C.java\").toString()));\n+    }\n+\n+    @Test\n+    public void testCombo(Path base) throws IOException {\n+        for (LinkKind lk : LinkKind.values()) {\n+            test(base, lk);\n+        }\n+    }\n+\n+    void test(Path base, LinkKind lk) throws IOException {\n+        Path dir = Files.createDirectories(base.resolve(lk.toString()));\n+        Path src = genSource(dir, lk);\n+\n+        javadoc(\"-d\", dir.resolve(\"out\").toString(),\n+                \"--spec-base-url\", \"http:\/\/example.com\/\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\", true,\n+                \"\"\"\n+                    <dl class=\"notes\">\n+                    <dt>External Specifications<\/dt>\n+                    <dd><a href=\"http:\/\/example.com\/#LK#\"><span id=\"#LK#reference\" \\\n+                    class=\"search-tag-result\">#LK# reference<\/span><\/a><\/dd>\n+                    <\/dl>\"\"\"\n+                .replaceAll(\"#LK#\", lk.toString().toLowerCase()));\n+\n+        checkOutput(\"external-specs.html\", true,\n+                \"\"\"\n+                        <div class=\"col-first even-row-color\"><a href=\"http:\/\/example.com\/#LK#\">#LK# reference<\/a><\/div>\n+                        <div class=\"col-last even-row-color\">\n+                        <ul class=\"ref-list\">\n+                        <li><code><a href=\"p\/C.html##LK#reference\">class p.C<\/a><\/code><\/li>\n+                        <\/ul>\n+                        <\/div>\"\"\"\n+                        .replaceAll(\"#LK#\", lk.toString().toLowerCase()));\n+    }\n+\n+    Path genSource(Path base, LinkKind lk) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        String template = \"\"\"\n+                \/**\n+                 * First sentence.\n+                 * @spec #SPEC#\n+                 *\/\n+                \"\"\";\n+\n+        String spec = switch (lk) {\n+            case ABSOLUTE -> \"http:\/\/example.com\/absolute absolute reference\";\n+            case RELATIVE -> \"relative                    relative reference\";\n+        };\n+        String comment = template.replace(\"#SPEC#\", spec);\n+        tb.writeJavaFiles(src,\n+                \"package p;\\n\" + comment + \"public class C { }\");\n+\n+        return src;\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSpecTag\/TestSpecTag.java","additions":432,"deletions":0,"binary":false,"changes":432,"status":"added"},{"patch":"@@ -24,0 +24,1 @@\n+               @spec: block overview module package type constructor method field inline ........\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    List<String> MISSING_IN_MAN_PAGE = List.of(\"--date\");\n+    List<String> MISSING_IN_MAN_PAGE = List.of(\"--date\", \"--spec-base-url\");\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckManPageOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.dc.no.title\n+\/\/ key: compiler.note.note\n+\/\/ key: compiler.note.proc.messager\n+\/\/ run: backdoor\n+\/\/ options: -processor DocCommentProcessor -proc:only\n+\n+\/** @spec http:\/\/example.com *\/\n+class NoTitle { }\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NoTitle.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.dc.no.url\n+\/\/ key: compiler.note.note\n+\/\/ key: compiler.note.proc.messager\n+\/\/ run: backdoor\n+\/\/ options: -processor DocCommentProcessor -proc:only\n+\n+\/** @spec *\/\n+class NoURL { }\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NoURL.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -602,0 +602,12 @@\n+            @Override\n+            public Void visitSpec(SpecTree node, Void p) {\n+                header(node);\n+                indent(+1);\n+                print(\"url\", node.getURL());\n+                print(\"title\", node.getTitle());\n+                indent(-1);\n+                indent();\n+                out.println(\"]\");\n+                return null;\n+            }\n+\n","filename":"test\/langtools\/tools\/javac\/doctree\/DocCommentTester.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6251738 8226279\n+ * @summary javadoc should support a new at-spec tag\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.file\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build DocCommentTester\n+ * @run main DocCommentTester SpecTest.java\n+ *\/\n+\n+class SpecTest {\n+\n+    \/**\n+     * abc.\n+     * @spec http:\/\/example.com title\n+     *\/\n+    void block() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: empty\n+  block tags: 1\n+    Spec[SPEC, pos:7\n+      url:\n+        Text[TEXT, pos:13, http:\/\/example.com]\n+      title: 1\n+        Text[TEXT, pos:32, title]\n+    ]\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * @spec\n+     *\/\n+    void bad_no_url() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:7, prefPos:11\n+      code: compiler.err.dc.no.url\n+      body: @spec\n+    ]\n+]\n+*\/\n+\n+    \/**\n+     * abc.\n+     * @spec http:\/\/example.com\n+     *\/\n+    void bad_no_label() {}\n+\/*\n+DocComment[DOC_COMMENT, pos:1\n+  firstSentence: 1\n+    Text[TEXT, pos:1, abc.]\n+  body: empty\n+  block tags: 1\n+    Erroneous[ERRONEOUS, pos:7, prefPos:30\n+      code: compiler.err.dc.no.title\n+      body: @spec_http:\/\/example.com\n+    ]\n+]\n+*\/\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/doctree\/SpecTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -1145,0 +1145,6 @@\n+        public Void visitSpec(SpecTree node, Void p) {\n+            printDocTree(\"uri\", node.getURI());\n+            printList(\"title\", node.getTitle());\n+            return visitBlockTag(node, null);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/lib\/DPrinter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}