{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,1 @@\n-  assert(*_lock >= 0, \"Can not content exclusive lock\");\n+  assert(Atomic::load(_lock) >= 0, \"Can not content exclusive lock\");\n@@ -233,3 +233,3 @@\n-    val = *_lock;\n-    target = _MAGIC_ + *_lock;\n-  } while (Atomic::cmpxchg(_lock, val, target) != val);\n+    val = Atomic::load(_lock);\n+    target = _MAGIC_ + val;\n+  } while (Atomic::cmpxchg(_lock, val, target, memory_order_acquire) != val);\n@@ -238,1 +238,1 @@\n-  while (*_lock != _MAGIC_) {\n+  while (Atomic::load(_lock) != _MAGIC_) {\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,0 +122,1 @@\n+   private:\n@@ -128,1 +129,0 @@\n-   private:\n@@ -134,2 +134,2 @@\n-    LockState      _lock_state;\n-    volatile int*  _lock;\n+    LockState           _lock_state;\n+    volatile int* const _lock;\n@@ -143,1 +143,1 @@\n-        Atomic::dec(_lock);\n+        Atomic::dec(_lock, memory_order_release);\n@@ -149,1 +149,1 @@\n-      jint res = Atomic::add(_lock, 1);\n+      jint res = Atomic::add(_lock, 1, memory_order_acquire);\n@@ -151,1 +151,1 @@\n-        Atomic::dec(_lock);\n+        Atomic::dec(_lock, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}