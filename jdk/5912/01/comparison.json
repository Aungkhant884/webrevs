{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.List;\n@@ -49,0 +50,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.DMG_CONTENT;\n@@ -82,1 +84,1 @@\n-            if (appLocation != null && prepareConfigFiles(params)) {\n+            if (appLocation != null && prepareConfigFiles(appLocation,params)) {\n@@ -99,2 +101,2 @@\n-    private void prepareDMGSetupScript(Map<String, ? super Object> params)\n-                                                                    throws IOException {\n+    private void prepareDMGSetupScript(Path appLocation,\n+            Map<String, ? super Object> params) throws IOException {\n@@ -128,1 +130,3 @@\n-\n+        String targetItem = (StandardBundlerParam.isRuntimeInstaller(params)) ?\n+              APP_NAME.fetchFrom(params) : appLocation.getFileName().toString();\n+        data.put(\"DEPLOY_TARGET\", targetItem);\n@@ -184,2 +188,2 @@\n-    private boolean prepareConfigFiles(Map<String, ? super Object> params)\n-            throws IOException {\n+    private boolean prepareConfigFiles(Path appLocation,\n+            Map<String, ? super Object> params) throws IOException {\n@@ -202,1 +206,1 @@\n-        prepareDMGSetupScript(params);\n+        prepareDMGSetupScript(appLocation, params);\n@@ -316,1 +320,5 @@\n-\n+        List <String> dmgContent = DMG_CONTENT.fetchFrom(params);\n+        for (String content : dmgContent) {\n+            Path path = Path.of(content);\n+            IOUtils.copyRecursive(path, srcFolder.resolve(path.getFileName()));\n+        }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacDmgBundler.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+  set xpos to 120\n@@ -25,0 +26,1 @@\n+    set appFilePath to POSIX path of \"\/DEPLOY_TARGET\"\n@@ -28,1 +30,1 @@\n-    else\n+    else if theFilePath ends with appFilePath then\n@@ -31,0 +33,4 @@\n+    else\n+      -- Position all other items in a second row.\n+      set position of item theFile of theWindow to {xpos, 290}\n+      set xpos to xpos + 150\n@@ -34,0 +40,1 @@\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/DMGsetup.scpt","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -182,0 +182,5 @@\n+        DMG_CONTENT (\"mac-dmg-content\", OptionCategories.PROPERTY, () -> {\n+            List<String> content = getArgumentList(popArg());\n+            content.forEach(a -> setOptionValue(\"mac-dmg-content\", a));\n+        }),\n+\n@@ -628,0 +633,5 @@\n+        if (allOptions.contains(CLIOptions.DMG_CONTENT)\n+                && !(\"dmg\".equals(type))) {\n+            throw new PackagerException(\"ERR_InvalidTypeOption\",\n+                    CLIOptions.DMG_CONTENT.getIdWithPrefix(), ptype);\n+        }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -297,0 +297,1 @@\n+            StandardBundlerParam.DMG_CONTENT.getID(),\n@@ -310,2 +311,4 @@\n-                } else if (key.equals(StandardBundlerParam.ADD_MODULES.getID()) ||\n-                        key.equals(StandardBundlerParam.APP_CONTENT.getID())) {\n+                } else if (\n+                        key.equals(StandardBundlerParam.DMG_CONTENT.getID()) ||\n+                        key.equals(StandardBundlerParam.APP_CONTENT.getID()) ||\n+                        key.equals(StandardBundlerParam.ADD_MODULES.getID())) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DeployParams.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -407,0 +407,9 @@\n+    @SuppressWarnings(\"unchecked\")\n+    static final BundlerParamInfo<List<String>> DMG_CONTENT =\n+            new StandardBundlerParam<>(\n+                    Arguments.CLIOptions.DMG_CONTENT.getId(),\n+                    (Class<List<String>>) (Object)List.class,\n+                    p -> Collections.emptyList(),\n+                    (s, p) -> Arrays.asList(s.split(\",\"))\n+            );\n+\n@@ -414,1 +423,0 @@\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+            options.put(CLIOptions.DMG_CONTENT.getId(), USE.INSTALL);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -65,5 +65,10 @@\n-            Path dmgImage = mountPoint.resolve(cmd.name() +\n-                    (cmd.isRuntime() ? \"\" : \".app\"));\n-            TKit.trace(String.format(\"Exploded [%s] in [%s] directory\",\n-                    cmd.outputBundle(), dmgImage));\n-            ThrowingConsumer.toConsumer(consumer).accept(dmgImage);\n+            \/\/ code here used to copy just <runtime name> or <app name>.app\n+            \/\/ We now have option to include arbitrary content, so we copy\n+            \/\/ everything in the mounted image.\n+            String[] children = mountPoint.toFile().list();\n+            for (String child : children) {\n+                Path childPath = mountPoint.resolve(child);\n+                TKit.trace(String.format(\"Exploded [%s] in [%s] directory\",\n+                        cmd.outputBundle(), childPath));\n+                ThrowingConsumer.toConsumer(consumer).accept(childPath);\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.TKit;\n+\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Test;\n+\n+import java.util.Collection;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type dmg --mac-dmg-content\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @library base\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @build DmgContentTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=DmgContentTest\n+ *\/\n+public class DmgContentTest {\n+\n+    private static final String TEST_JAVA = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\/PrintEnv.java\").toString();\n+    private static final String TEST_DUKE = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\/dukeplug.png\").toString();\n+    private static final String TEST_DIR = TKit.TEST_SRC_ROOT.resolve(\n+            \"apps\").toString();\n+    private static final String TEST_BAD = TKit.TEST_SRC_ROOT.resolve(\n+            \"non-existant\").toString();\n+\n+    @Parameters\n+    public static Collection input() {\n+        List<Object[]> data = new ArrayList<>();\n+        data.addAll(List.of(new Object[][] {\n+            {\"0\", PackageType.MAC_DMG, new String[] {TEST_JAVA, TEST_DUKE}},\n+            {\"1\", PackageType.MAC_PKG, new String[] {TEST_JAVA, TEST_DUKE}},\n+            {\"1\", PackageType.MAC_DMG, new String[] {TEST_JAVA, TEST_BAD}},\n+            {\"0\", PackageType.MAC_DMG,\n+                  new String[] {TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR}}}));\n+       return data;\n+    }\n+\n+    public DmgContentTest(String expected, PackageType type, String[] content) {\n+        this.expected = Integer.parseInt(expected);\n+        this.type = type;\n+        this.content = content;\n+    }\n+\n+    @Test\n+    public void test() {\n+        new PackageTest()\n+                .forTypes(type)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    for (String arg : content) {\n+                        cmd.addArguments(\"--mac-dmg-content\", arg);\n+                    }\n+                })\n+                .addInstallVerifier(DmgContentTest::verifyDMG)\n+                .setExpectedExitCode(expected)\n+                .run(PackageTest.Action.CREATE_AND_UNPACK);\n+    }\n+\n+    private static void verifyDMG(JPackageCommand cmd) {\n+        if (cmd.isPackageUnpacked()) {\n+            Path installDir = cmd.appInstallationDirectory();\n+            Path dmgRoot = cmd.pathToUnpackedPackageFile(installDir)\n+                      .toAbsolutePath().getParent();\n+            TKit.assertFileExists(dmgRoot.resolve(\"PrintEnv.java\"));\n+        }\n+    }\n+\n+    private final int expected;\n+    private final PackageType type;\n+    private final String[] content;\n+\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/DmgContentTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}