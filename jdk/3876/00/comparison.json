{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,9 @@\n+ \/*\n+ * @test\n+ * @bug 8161527 8180568\n+ * @summary NPE is thrown if exempt application is bundled with specific\n+ *          cryptoPerms\n+ * @requires java.runtime.name ~= \"OpenJDK.*\"\n+ * @library \/test\/lib\n+ * @run main TestExemption\n+ *\/\n@@ -27,0 +36,1 @@\n+import java.nio.file.Path;\n@@ -28,0 +38,5 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n@@ -31,1 +46,6 @@\n-    public static void main(String[] args) throws Exception {\n+    private static final String SRC = System.getProperty(\"test.src\");\n+    private static final String CLASSES = System.getProperty(\"test.classes\");\n+    private static final String NAME = TestExemption.class.getName();\n+    private static final String SRC_CLS = NAME + \".class\";\n+    private static final String JAR_FILE = NAME + \".jar\";\n+    private static final String CRYPT_PERM = \"cryptoPerms\";\n@@ -33,3 +53,1 @@\n-        KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n-        kg.init(128);\n-        SecretKey key128 = kg.generateKey();\n+    public static void main(String[] args) throws Exception {\n@@ -37,2 +55,18 @@\n-        kg.init(192);\n-        SecretKey key192 = kg.generateKey();\n+        \/\/ With no argument passed, compile the same class, jar it and run the\n+        \/\/ test section of the jar file which is nothing but else section here.\n+        if (args.length == 0) {\n+            JarUtils.createJarFile(\n+                    Path.of(JAR_FILE), Path.of(CLASSES), Path.of(SRC_CLS));\n+            JarUtils.updateJarFile(\n+                    Path.of(JAR_FILE), Path.of(SRC), Path.of(CRYPT_PERM));\n+            OutputAnalyzer oa = ProcessTools.executeTestJava(\n+                    getParameters().toArray(String[]::new));\n+            System.out.println(oa.getOutput());\n+            oa.shouldHaveExitValue(0);\n+        } else {\n+            \/\/ Set the crypto policy to limited so that additional policy can be\n+            \/\/ supplemented through cryptoPerms when bundled inside a jar file.\n+            Security.setProperty(\"crypto.policy\", \"limited\");\n+            KeyGenerator kg = KeyGenerator.getInstance(\"AES\");\n+            kg.init(128);\n+            SecretKey key128 = kg.generateKey();\n@@ -40,2 +74,2 @@\n-        kg.init(256);\n-        SecretKey key256 = kg.generateKey();\n+            kg.init(192);\n+            SecretKey key192 = kg.generateKey();\n@@ -43,1 +77,2 @@\n-        Cipher c = Cipher.getInstance(\"AES\/CBC\/NoPadding\");\n+            kg.init(256);\n+            SecretKey key256 = kg.generateKey();\n@@ -45,2 +80,7 @@\n-        System.out.println(\"Testing 128-bit\");\n-        c.init(Cipher.ENCRYPT_MODE, key128);\n+            int maxAllowed = Cipher.getMaxAllowedKeyLength(\"AES\");\n+            System.out.println(\"Max allowed: \" + maxAllowed);\n+            \/\/ With limited crypto and bundled cryptoPerms maximum allowed\n+            \/\/ length of AES is upto 192.\n+            if (maxAllowed > 192) {\n+                throw new RuntimeException(\">192 not supported\");\n+            }\n@@ -48,2 +88,3 @@\n-        System.out.println(\"Testing 192-bit\");\n-        c.init(Cipher.ENCRYPT_MODE, key192);\n+            Cipher c = Cipher.getInstance(\"AES\/CBC\/NoPadding\");\n+            System.out.println(\"Testing 128-bit\");\n+            c.init(Cipher.ENCRYPT_MODE, key128);\n@@ -51,5 +92,10 @@\n-        try {\n-            System.out.println(\"Testing 256-bit\");\n-            c.init(Cipher.ENCRYPT_MODE, key256);\n-        } catch (InvalidKeyException e) {\n-            System.out.println(\"Caught the right exception\");\n+            System.out.println(\"Testing 192-bit\");\n+            c.init(Cipher.ENCRYPT_MODE, key192);\n+            try {\n+                System.out.println(\"Testing 256-bit\");\n+                c.init(Cipher.ENCRYPT_MODE, key256);\n+                throw new RuntimeException(\"Shouldn't reach here\");\n+            } catch (InvalidKeyException e) {\n+                System.out.println(\"Caught the right exception\");\n+            }\n+            System.out.println(\"DONE!\");\n@@ -57,0 +103,3 @@\n+    }\n+\n+    private static List<String> getParameters() {\n@@ -58,1 +107,7 @@\n-        System.out.println(\"DONE!\");\n+        List<String> cmds = new ArrayList<>();\n+        cmds.add(\"-cp\");\n+        cmds.add(JAR_FILE);\n+        cmds.add(NAME);\n+        \/\/ Argument to run the Test section of class inside the jar file.\n+        cmds.add(\"run\");\n+        return cmds;\n@@ -60,0 +115,1 @@\n+\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/TestExemption.java","additions":76,"deletions":20,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-#\n-# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8161527\n-# @summary NPE is thrown if exempt application is bundled with specific\n-#     cryptoPerms\n-# @requires java.runtime.name ~= \"OpenJDK.*\"\n-\n-# set a few environment variables so that the shell-script can run stand-alone\n-# in the source directory\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux | Darwin | AIX | CYGWIN* )\n-    FS=\"\/\"\n-    ;;\n-  Windows_* )\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-  TESTSRC=\".\"\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-  TESTCLASSES=\".\"\n-fi\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-  JAVAC_CMD=`which javac`\n-  TESTJAVA=`dirname $JAVAC_CMD`${FS}..\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-# Build\n-${COMPILEJAVA}${FS}bin${FS}javac \\\n-    -d . \\\n-    ${TESTSRC}${FS}TestExemption.java \\\n-    || exit 10\n-\n-# Package\n-${COMPILEJAVA}${FS}bin${FS}jar \\\n-    -cvf TestExemption.jar \\\n-    TestExemption.class \\\n-    -C ${TESTSRC} cryptoPerms \\\n-    || exit 10\n-\n-# Test\n-${TESTJAVA}${FS}bin${FS}java \\\n-    -classpath TestExemption.jar TestExemption\n-status=$?\n-\n-exit $status\n-\n","filename":"test\/jdk\/javax\/crypto\/CryptoPermissions\/TestExemption.sh","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,102 +0,0 @@\n-#\n-# Copyright (c) 2006, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug 6370923\n-# @summary SecretKeyFactory failover does not work\n-# @author Brad R. Wetmore\n-#\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-    TESTSRC=\".\"\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-\n-\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-    TESTCLASSES=\".\"\n-fi\n-echo \"TESTCLASSES=${TESTCLASSES}\"\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux | Darwin | AIX )\n-    NULL=\/dev\/null\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    NULL=\/dev\/null\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    NULL=NUL\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \\\n-    -d . \\\n-    -classpath \"${TESTSRC}${FS}P1.jar${PS}${TESTSRC}${FS}P2.jar\" \\\n-    ${TESTSRC}${FS}FailOverTest.java\n-\n-if [ $? -ne 0 ]; then\n-    exit 1\n-fi\n-\n-${TESTJAVA}${FS}bin${FS}java \\\n-    ${TESTVMOPTS} \\\n-    -Djava.security.properties=${TESTSRC}${FS}security.properties \\\n-    -classpath \"${TESTSRC}${FS}P1.jar${PS}${TESTSRC}${FS}P2.jar${PS}.\" \\\n-    FailOverTest\n-result=$?\n-\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed\"\n-else\n-  echo \"Failed\"\n-fi\n-exit $result\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/FailOverTest.sh","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 6370923 8180568\n+ * @summary SecretKeyFactory failover does not work\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.compiler.CompilerUtils\n+ * @run main TestFailOver\n+ *\/\n+public class TestFailOver {\n+\n+    private static final Path SRC = Paths.get(System.getProperty(\"test.src\"));\n+    private static final String P1_JAR\n+            = SRC.resolve(\"P1.jar\").toFile().getAbsolutePath();\n+    private static final String P2_JAR\n+            = SRC.resolve(\"P2.jar\").toFile().getAbsolutePath();\n+    private static final String SEC_PROP\n+            = SRC.resolve(\"security.properties\").toFile().getAbsolutePath();\n+    private static final String JF_NAME = \"FailOverTest\";\n+    private static final Path SRC_PATH = SRC.resolve(JF_NAME + \".java\");\n+    private static final Path COMPILE_PATH = Paths.get(\".\");\n+    private static final String PS = File.pathSeparator;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        List<String> params = getParameters();\n+        \/\/ Compile all source files.\n+        boolean done = CompilerUtils.compile(SRC_PATH, COMPILE_PATH,\n+                params.toArray(String[]::new));\n+        if (!done) {\n+            throw new RuntimeException(\"Test setup failed.\");\n+        }\n+        params.add(0, \"-Djava.security.properties=\" + SEC_PROP);\n+        params.add(JF_NAME);\n+        OutputAnalyzer oa = ProcessTools.executeTestJava(\n+                params.toArray(String[]::new));\n+        System.out.println(oa.getOutput());\n+        oa.shouldHaveExitValue(0);\n+    }\n+\n+    private static List<String> getParameters() {\n+\n+        List<String> cmds = new ArrayList<>();\n+        cmds.add(\"-cp\");\n+        cmds.add(P1_JAR + PS + P2_JAR + PS + COMPILE_PATH);\n+        return cmds;\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/crypto\/SecretKeyFactory\/TestFailOver.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}