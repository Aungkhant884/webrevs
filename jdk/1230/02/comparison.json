{"files":[{"patch":"@@ -38,2 +38,2 @@\n-  ZListNode* _next;\n-  ZListNode* _prev;\n+  ZListNode<T>* _next;\n+  ZListNode<T>* _prev;\n@@ -41,1 +41,1 @@\n-  ZListNode(ZListNode* next, ZListNode* prev);\n+  NONCOPYABLE(ZListNode);\n@@ -43,1 +43,3 @@\n-  void set_unused();\n+  void verify_links() const;\n+  void verify_links_linked() const;\n+  void verify_links_unlinked() const;\n@@ -48,2 +50,0 @@\n-\n-  bool is_unused() const;\n@@ -61,1 +61,1 @@\n-  void verify() const;\n+  void verify_head() const;\n@@ -87,2 +87,0 @@\n-\n-  void transfer(ZList<T>* list);\n","filename":"src\/hotspot\/share\/gc\/z\/zList.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-inline ZListNode<T>::ZListNode(ZListNode* next, ZListNode* prev) :\n-    _next(next),\n-    _prev(prev) {}\n+inline ZListNode<T>::ZListNode() :\n+    _next(this),\n+    _prev(this) {}\n@@ -36,3 +36,2 @@\n-inline void ZListNode<T>::set_unused() {\n-  _next = NULL;\n-  _prev = NULL;\n+inline ZListNode<T>::~ZListNode() {\n+  verify_links_unlinked();\n@@ -42,2 +41,3 @@\n-inline ZListNode<T>::ZListNode() {\n-  set_unused();\n+inline void ZListNode<T>::verify_links() const {\n+  assert(_next->_prev == this, \"Corrupt list node\");\n+  assert(_prev->_next == this, \"Corrupt list node\");\n@@ -47,2 +47,4 @@\n-inline ZListNode<T>::~ZListNode() {\n-  set_unused();\n+inline void ZListNode<T>::verify_links_linked() const {\n+  assert(_next != this, \"Should be in a list\");\n+  assert(_prev != this, \"Should be in a list\");\n+  verify_links();\n@@ -52,2 +54,3 @@\n-inline bool ZListNode<T>::is_unused() const {\n-  return _next == NULL && _prev == NULL;\n+inline void ZListNode<T>::verify_links_unlinked() const {\n+  assert(_next == this, \"Should not be in a list\");\n+  assert(_prev == this, \"Should not be in a list\");\n@@ -57,3 +60,2 @@\n-inline void ZList<T>::verify() const {\n-  assert(_head._next->_prev == &_head, \"List corrupt\");\n-  assert(_head._prev->_next == &_head, \"List corrupt\");\n+inline void ZList<T>::verify_head() const {\n+  _head.verify_links();\n@@ -64,1 +66,4 @@\n-  verify();\n+  verify_head();\n+\n+  before->verify_links();\n+  node->verify_links_unlinked();\n@@ -66,1 +71,0 @@\n-  assert(node->is_unused(), \"Already in a list\");\n@@ -72,0 +76,3 @@\n+  before->verify_links_linked();\n+  node->verify_links_linked();\n+\n@@ -87,1 +94,1 @@\n-    _head(&_head, &_head),\n+    _head(),\n@@ -89,1 +96,1 @@\n-  verify();\n+  verify_head();\n@@ -94,1 +101,1 @@\n-  verify();\n+  verify_head();\n@@ -100,1 +107,1 @@\n-  return _size == 0;\n+  return size() == 0;\n@@ -115,2 +122,8 @@\n-  verify();\n-  ZListNode<T>* next = cast_to_inner(elem)->_next;\n+  verify_head();\n+\n+  ZListNode<T>* const node = cast_to_inner(elem);\n+  node->verify_links_linked();\n+\n+  ZListNode<T>* const next = node->_next;\n+  next->verify_links_linked();\n+\n@@ -122,2 +135,8 @@\n-  verify();\n-  ZListNode<T>* prev = cast_to_inner(elem)->_prev;\n+  verify_head();\n+\n+  ZListNode<T>* const node = cast_to_inner(elem);\n+  node->verify_links_linked();\n+\n+  ZListNode<T>* const prev = node->_prev;\n+  prev->verify_links_linked();\n+\n@@ -149,1 +168,1 @@\n-  verify();\n+  verify_head();\n@@ -152,1 +171,1 @@\n-  assert(!node->is_unused(), \"Not in a list\");\n+  node->verify_links_linked();\n@@ -156,2 +175,6 @@\n-  assert(next->_prev == node, \"List corrupt\");\n-  assert(prev->_next == node, \"List corrupt\");\n+  next->verify_links_linked();\n+  prev->verify_links_linked();\n+\n+  node->_next = prev->_next;\n+  node->_prev = next->_prev;\n+  node->verify_links_unlinked();\n@@ -159,1 +182,0 @@\n-  prev->_next = next;\n@@ -161,1 +183,3 @@\n-  node->set_unused();\n+  prev->_next = next;\n+  next->verify_links();\n+  prev->verify_links();\n@@ -186,22 +210,0 @@\n-template <typename T>\n-inline void ZList<T>::transfer(ZList<T>* list) {\n-  verify();\n-\n-  if (!list->is_empty()) {\n-    list->_head._next->_prev = _head._prev;\n-    list->_head._prev->_next = _head._prev->_next;\n-\n-    _head._prev->_next = list->_head._next;\n-    _head._prev = list->_head._prev;\n-\n-    list->_head._next = &list->_head;\n-    list->_head._prev = &list->_head;\n-\n-    _size += list->_size;\n-    list->_size = 0;\n-\n-    list->verify();\n-    verify();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zList.inline.hpp","additions":55,"deletions":53,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-    _physical(pmem) {\n+    _physical(pmem),\n+    _node() {\n","filename":"src\/hotspot\/share\/gc\/z\/zPage.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,7 @@\n+\n+  for (int i = 0; i < 6; i++) {\n+    ZTestEntry* e = list.remove_first();\n+    EXPECT_EQ(e->id(), i);\n+  }\n+\n+  EXPECT_EQ(list.size(), 0u);\n@@ -148,75 +155,0 @@\n-TEST_F(ZListTest, test_transfer) {\n-  \/\/ Transfer empty to empty\n-  {\n-    ZList<ZTestEntry> list0;\n-    ZList<ZTestEntry> list1;\n-\n-    EXPECT_TRUE(list0.is_empty());\n-    EXPECT_TRUE(list1.is_empty());\n-\n-    list0.transfer(&list1);\n-\n-    EXPECT_TRUE(list0.is_empty());\n-    EXPECT_TRUE(list1.is_empty());\n-  }\n-\n-  \/\/ Transfer non-empty to empty\n-  {\n-    ZList<ZTestEntry> list0;\n-    ZList<ZTestEntry> list1;\n-    ZTestEntry e0(0);\n-    ZTestEntry e1(1);\n-    ZTestEntry e2(2);\n-    ZTestEntry e3(3);\n-    ZTestEntry e4(4);\n-    ZTestEntry e5(5);\n-\n-    list1.insert_last(&e0);\n-    list1.insert_last(&e1);\n-    list1.insert_last(&e2);\n-    list1.insert_last(&e3);\n-    list1.insert_last(&e4);\n-    list1.insert_last(&e5);\n-\n-    EXPECT_EQ(list0.size(), 0u);\n-    EXPECT_EQ(list1.size(), 6u);\n-\n-    list0.transfer(&list1);\n-\n-    EXPECT_EQ(list0.size(), 6u);\n-    EXPECT_EQ(list1.size(), 0u);\n-\n-    assert_sorted(&list0);\n-  }\n-\n-  \/\/ Transfer non-empty to non-empty\n-  {\n-    ZList<ZTestEntry> list0;\n-    ZList<ZTestEntry> list1;\n-    ZTestEntry e0(0);\n-    ZTestEntry e1(1);\n-    ZTestEntry e2(2);\n-    ZTestEntry e3(3);\n-    ZTestEntry e4(4);\n-    ZTestEntry e5(5);\n-\n-    list0.insert_last(&e0);\n-    list0.insert_last(&e1);\n-    list0.insert_last(&e2);\n-\n-    list1.insert_last(&e3);\n-    list1.insert_last(&e4);\n-    list1.insert_last(&e5);\n-\n-    EXPECT_EQ(list0.size(), 3u);\n-    EXPECT_EQ(list1.size(), 3u);\n-\n-    list0.transfer(&list1);\n-\n-    EXPECT_EQ(list0.size(), 6u);\n-    EXPECT_EQ(list1.size(), 0u);\n-\n-    assert_sorted(&list0);\n-  }\n-}\n-\n","filename":"test\/hotspot\/gtest\/gc\/z\/test_zList.cpp","additions":8,"deletions":76,"binary":false,"changes":84,"status":"modified"}]}