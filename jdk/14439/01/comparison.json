{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  void apply_to_buffer(BufferNode* node, size_t buffer_size, uint worker_id) {\n+  void apply_to_buffer(BufferNode* node, size_t buffer_capacity, uint worker_id) {\n@@ -44,1 +44,1 @@\n-    for (size_t i = node->index(); i < buffer_size; ++i) {\n+    for (size_t i = node->index(); i < buffer_capacity; ++i) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTableEntryClosure.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    stats->inc_dirtied_cards(buffer_size() - queue.index());\n+    stats->inc_dirtied_cards(buffer_capacity() - queue.index());\n@@ -108,1 +108,1 @@\n-    stats->inc_dirtied_cards(buffer_size());\n+    stats->inc_dirtied_cards(buffer_capacity());\n@@ -126,1 +126,1 @@\n-  Atomic::add(&_num_cards, buffer_size() - cbn->index());\n+  Atomic::add(&_num_cards, buffer_capacity() - cbn->index());\n@@ -162,1 +162,1 @@\n-  Atomic::sub(&_num_cards, buffer_size() - result->index());\n+  Atomic::sub(&_num_cards, buffer_capacity() - result->index());\n@@ -172,1 +172,1 @@\n-    actual += buffer_size() - cur->index();\n+    actual += buffer_capacity() - cur->index();\n@@ -288,1 +288,1 @@\n-  Atomic::add(&_num_cards, buffer_size() - node->index());\n+  Atomic::add(&_num_cards, buffer_capacity() - node->index());\n@@ -344,1 +344,1 @@\n-  const size_t _node_buffer_size;\n+  const size_t _node_buffer_capacity;\n@@ -354,1 +354,1 @@\n-  \/\/ Sorts the cards from start_index to _node_buffer_size in *decreasing*\n+  \/\/ Sorts the cards from start_index to _node_buffer_capacity in *decreasing*\n@@ -359,1 +359,1 @@\n-                    _node_buffer_size - start_index,\n+                    _node_buffer_capacity - start_index,\n@@ -367,1 +367,1 @@\n-    assert(start <= _node_buffer_size, \"invariant\");\n+    assert(start <= _node_buffer_capacity, \"invariant\");\n@@ -375,1 +375,1 @@\n-    CardTable::CardValue** dst = &_node_buffer[_node_buffer_size];\n+    CardTable::CardValue** dst = &_node_buffer[_node_buffer_capacity];\n@@ -394,1 +394,1 @@\n-    assert(first_clean >= start && first_clean <= _node_buffer_size, \"invariant\");\n+    assert(first_clean >= start && first_clean <= _node_buffer_capacity, \"invariant\");\n@@ -404,1 +404,1 @@\n-    for ( ; i < _node_buffer_size; ++i) {\n+    for ( ; i < _node_buffer_capacity; ++i) {\n@@ -418,1 +418,1 @@\n-    for ( ; start < _node_buffer_size; ++start) {\n+    for ( ; start < _node_buffer_capacity; ++start) {\n@@ -425,1 +425,1 @@\n-                        size_t node_buffer_size,\n+                        size_t node_buffer_capacity,\n@@ -430,1 +430,1 @@\n-    _node_buffer_size(node_buffer_size),\n+    _node_buffer_capacity(node_buffer_capacity),\n@@ -437,1 +437,1 @@\n-    if (first_clean_index == _node_buffer_size) {\n+    if (first_clean_index == _node_buffer_capacity) {\n@@ -460,1 +460,1 @@\n-                                       buffer_size(),\n+                                       buffer_capacity(),\n@@ -471,1 +471,1 @@\n-    assert(node->index() == buffer_size(),\n+    assert(node->index() == buffer_capacity(),\n@@ -473,1 +473,1 @@\n-           node->index(), buffer_size());\n+           node->index(), buffer_capacity());\n@@ -476,1 +476,1 @@\n-    assert(node->index() < buffer_size(), \"Buffer fully consumed.\");\n+    assert(node->index() < buffer_capacity(), \"Buffer fully consumed.\");\n@@ -579,1 +579,1 @@\n-    (queue.index() != buffer_size())) {\n+      (queue.index() != buffer_capacity())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  \/\/ Refine the cards in \"node\" from its index to buffer_size.\n+  \/\/ Refine the cards in \"node\" from its index to buffer_capacity.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  _buffers._entry_count += buffer_size() - node->index();\n+  _buffers._entry_count += buffer_capacity() - node->index();\n@@ -133,1 +133,1 @@\n-  Atomic::add(&_entry_count, buffer_size() - node->index());\n+  Atomic::add(&_entry_count, buffer_capacity() - node->index());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1265,1 +1265,1 @@\n-    size_t buffer_size = dcqs.buffer_size();\n+    size_t buffer_capacity = dcqs.buffer_capacity();\n@@ -1267,1 +1267,1 @@\n-      cl->apply_to_buffer(node, buffer_size, worker_id);\n+      cl->apply_to_buffer(node, buffer_capacity, worker_id);\n@@ -1570,1 +1570,1 @@\n-  size_t index = dcqs.buffer_size() - 1;\n+  size_t index = dcqs.buffer_capacity() - 1;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-    const size_t buffer_size = _rdcqs->buffer_size();\n+    const size_t buffer_capacity = _rdcqs->buffer_capacity();\n@@ -406,1 +406,1 @@\n-        cl.apply_to_buffer(node, buffer_size, worker_id);\n+        cl.apply_to_buffer(node, buffer_capacity, worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -170,2 +170,2 @@\n-    size_t _buffer_size;\n-    Verifier() : _buffer_size(G1BarrierSet::dirty_card_queue_set().buffer_size()) {}\n+    size_t _buffer_capacity;\n+    Verifier() : _buffer_capacity(G1BarrierSet::dirty_card_queue_set().buffer_capacity()) {}\n@@ -174,1 +174,1 @@\n-      assert((queue.buffer() == nullptr) || (queue.index() == _buffer_size),\n+      assert((queue.buffer() == nullptr) || (queue.index() == _buffer_capacity),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPreEvacuateTasks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  _capacity_in_bytes(index_to_byte_index(qset->buffer_size())),\n+  _capacity_in_bytes(index_to_byte_index(qset->buffer_capacity())),\n@@ -41,1 +41,1 @@\n-BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_size(size) {}\n+BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_capacity(size) {}\n@@ -44,1 +44,1 @@\n-  size_t byte_size = _buffer_size * sizeof(void*);\n+  size_t byte_size = _buffer_capacity * sizeof(void*);\n@@ -53,2 +53,2 @@\n-BufferNode::Allocator::Allocator(const char* name, size_t buffer_size) :\n-  _config(buffer_size),\n+BufferNode::Allocator::Allocator(const char* name, size_t buffer_capacity) :\n+  _config(buffer_capacity),\n@@ -83,1 +83,1 @@\n-    queue.set_index(buffer_size());\n+    queue.set_index(buffer_capacity());\n@@ -94,1 +94,1 @@\n-    if (index == buffer_size()) {\n+    if (index == buffer_capacity()) {\n@@ -132,1 +132,1 @@\n-  queue.set_index(buffer_size());\n+  queue.set_index(buffer_capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  const size_t _buffer_size;\n+  const size_t _buffer_capacity;\n@@ -178,1 +178,1 @@\n-  size_t buffer_size() const { return _buffer_size; }\n+  size_t buffer_capacity() const { return _buffer_capacity; }\n@@ -190,1 +190,1 @@\n-  Allocator(const char* name, size_t buffer_size);\n+  Allocator(const char* name, size_t buffer_capacity);\n@@ -193,1 +193,1 @@\n-  size_t buffer_size() const { return _config.buffer_size(); }\n+  size_t buffer_capacity() const { return _config.buffer_capacity(); }\n@@ -239,1 +239,1 @@\n-  \/\/ Return the buffer for a BufferNode of size buffer_size().\n+  \/\/ Return the buffer for a BufferNode of size buffer_capacity().\n@@ -243,1 +243,1 @@\n-  \/\/ to have been allocated with a size of buffer_size().\n+  \/\/ to have been allocated with a size of buffer_capacity().\n@@ -252,2 +252,2 @@\n-  size_t buffer_size() const {\n-    return _allocator->buffer_size();\n+  size_t buffer_capacity() const {\n+    return _allocator->buffer_capacity();\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  size_t size = buffer_size();\n+  size_t size = buffer_capacity();\n@@ -197,1 +197,1 @@\n-        assert(!_active || queue.index() == _qset->buffer_size(),\n+        assert(!_active || queue.index() == _qset->buffer_capacity(),\n@@ -199,1 +199,1 @@\n-        queue.set_index(_qset->buffer_size());\n+        queue.set_index(_qset->buffer_capacity());\n@@ -212,1 +212,1 @@\n-    size_t size = buffer_size();\n+    size_t size = buffer_capacity();\n@@ -258,1 +258,1 @@\n-  assert(threshold <= buffer_size(),\n+  assert(threshold <= buffer_capacity(),\n@@ -260,1 +260,1 @@\n-         threshold, buffer_size());\n+         threshold, buffer_capacity());\n@@ -313,1 +313,1 @@\n-    print_satb_buffer(buffer, buf, nd->index(), buffer_size());\n+    print_satb_buffer(buffer, buf, nd->index(), buffer_capacity());\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  void** dst = &buf[buffer_size()];\n+  void** dst = &buf[buffer_capacity()];\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,3 @@\n-  const size_t buffer_size = 256;\n-  BufferNode::Allocator allocator(\"Test Buffer Allocator\", buffer_size);\n-  ASSERT_EQ(buffer_size, allocator.buffer_size());\n+  const size_t buffer_capacity = 256;\n+  BufferNode::Allocator allocator(\"Test Buffer Allocator\", buffer_capacity);\n+  ASSERT_EQ(buffer_capacity, allocator.buffer_capacity());\n@@ -236,2 +236,0 @@\n-const size_t buffer_size = 1024;\n-\n@@ -239,1 +237,2 @@\n-  BufferNode::Allocator allocator(\"Test Allocator\", buffer_size);\n+  const size_t buffer_capacity = 1024;\n+  BufferNode::Allocator allocator(\"Test Allocator\", buffer_capacity);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_ptrQueueBufferAllocator.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}