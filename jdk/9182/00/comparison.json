{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -49,0 +52,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n@@ -58,1 +64,1 @@\n-    @Param({\"128\", \"512\", \"2048\", \"8192\", \"32768\"})\n+    @Param({\"128\", \"32768\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/DatagramChannelSendReceive.java","additions":7,"deletions":1,"binary":false,"changes":8,"previous_filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/DatagramChannelSendReceive.java","status":"renamed"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -47,0 +50,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n@@ -58,1 +64,1 @@\n-    @Param({\"128\", \"512\", \"2048\", \"8192\", \"32768\"})\n+    @Param({\"128\", \"32768\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/DatagramSocketSendReceive.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.net;\n-\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.BenchmarkMode;\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.OutputTimeUnit;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.TearDown;\n-\n-import java.io.IOException;\n-import java.net.DatagramPacket;\n-import java.net.DatagramSocket;\n-import java.net.InetAddress;\n-import java.net.SocketException;\n-import java.net.UnknownHostException;\n-import java.util.concurrent.TimeUnit;\n-\n-\/**\n- * DatagramSocket micros designed to stress UDP performance.\n- *\/\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Thread)\n-public class DatagramSocketTest {\n-\n-    @Param({\"1024\", \"2048\", \"4096\", \"8192\", \"16384\", \"32768\"})\n-    int size;\n-\n-    private DatagramSocket socket;\n-    private DatagramPacket packet;\n-\n-    @Setup\n-    public void prepare() throws SocketException, UnknownHostException {\n-        socket = new DatagramSocket();\n-\n-        byte[] buf = new byte[size];\n-        packet = new DatagramPacket(buf, buf.length, InetAddress.getByName(\"localhost\"), 9877);\n-    }\n-\n-    @TearDown\n-    public void cleanup() {\n-        socket.close();\n-    }\n-\n-    @Benchmark\n-    public void testSend() throws IOException {\n-        socket.send(packet);\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/DatagramSocketTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -48,3 +48,3 @@\n-@Fork(2)\n-@Warmup(iterations = 5, time = 2)\n-@Measurement(iterations = 10, time = 2)\n+@Fork(value = 2, jvmArgsAppend = \"--add-opens=java.base\/java.net=ALL-UNNAMED\")\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/NetworkInterfaceLookup.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.net;\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.StandardProtocolFamily;\n-import java.net.UnixDomainSocketAddress;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.ClosedChannelException;\n-import java.nio.channels.ServerSocketChannel;\n-import java.nio.channels.SocketChannel;\n-import java.nio.file.*;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.RunnerException;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n-\n-\/**\n- * Tests sending a 128 byte message on a second, to a thread which\n- * echo's it back and received by the original thread.\n- * Benchmark is performed for \"inet\" channels over TCP\/IP\n- * and \"unix\" domain channels.\n- *\/\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@State(Scope.Thread)\n-public class SocketChannelCompare {\n-\n-    static final int BUFSIZE = 128; \/\/ message size sent and received\n-    private ServerSocketChannel ssc;\n-    private SocketChannel s1, s2;\n-    private EchoThread rt;\n-    private ByteBuffer bb = ByteBuffer.allocate(BUFSIZE);\n-\n-    private static volatile String tempDir;\n-    private static final AtomicInteger count = new AtomicInteger(0);\n-    private volatile Path socket;\n-\n-    @Param({\"inet\", \"unix\"})\n-    private volatile String family;\n-\n-    static {\n-        try {\n-            Path p = Files.createTempDirectory(\"readWriteTest\");\n-            tempDir = p.toString();\n-        } catch (IOException e) {\n-            tempDir = null;\n-        }\n-    }\n-\n-    private ServerSocketChannel getServerSocketChannel() throws IOException {\n-        if (family.equals(\"inet\"))\n-            return getInetServerSocketChannel();\n-        else if (family.equals(\"unix\"))\n-            return getUnixServerSocketChannel();\n-        throw new InternalError();\n-    }\n-\n-\n-    private ServerSocketChannel getInetServerSocketChannel() throws IOException {\n-        InetAddress iaddr = InetAddress.getLoopbackAddress();\n-        return ServerSocketChannel.open().bind(null);\n-    }\n-\n-    private ServerSocketChannel getUnixServerSocketChannel() throws IOException {\n-        int next = count.incrementAndGet();\n-        socket = Paths.get(tempDir, Integer.toString(next));\n-        UnixDomainSocketAddress addr = UnixDomainSocketAddress.of(socket);\n-        return ServerSocketChannel.open(StandardProtocolFamily.UNIX).bind(addr);\n-    }\n-\n-    @Setup(Level.Trial)\n-    public void beforeRun() throws IOException {\n-        ssc = getServerSocketChannel();\n-        s1 = SocketChannel.open(ssc.getLocalAddress());\n-        s2 = ssc.accept();\n-\n-        rt = new EchoThread(s2);\n-        rt.start();\n-    }\n-\n-    @TearDown(Level.Trial)\n-    public void afterRun() throws IOException, InterruptedException {\n-        s1.close();\n-        s2.close();\n-        ssc.close();\n-        if (family.equals(\"unix\")) {\n-            Files.delete(socket);\n-            Files.delete(Path.of(tempDir));\n-        }\n-        rt.join();\n-    }\n-\n-    @Benchmark\n-    public void test() throws IOException {\n-        bb.position(0).limit(BUFSIZE);\n-        s1.write(bb);\n-        bb.clear();\n-        readFully(s1, bb);\n-    }\n-\n-    \/\/ read until buf is full, or EOF. Always returns number of bytes read\n-\n-    static int readFully(SocketChannel chan, ByteBuffer buf) throws IOException {\n-        int n = buf.remaining();\n-        int count = 0;\n-        while (n > 0) {\n-            int c = chan.read(buf);\n-            if (c == -1)\n-                return count;\n-            n -= c;\n-            count += c;\n-        }\n-        return count;\n-    }\n-\n-    static class EchoThread extends Thread {\n-        private SocketChannel sc;\n-\n-        public EchoThread(SocketChannel s2) {\n-            this.sc = s2;\n-        }\n-\n-        public void run() {\n-            try {\n-                ByteBuffer bb = ByteBuffer.allocate(BUFSIZE);\n-                while (true) {\n-                    bb.clear();\n-                    int c = readFully(sc, bb);\n-                    if (c == 0) {\n-                        sc.close();\n-                        return;\n-                    }\n-                    bb.flip();\n-                    sc.write(bb);\n-                }\n-            } catch (ClosedChannelException ex) {\n-                \/\/ shutdown time\n-            } catch (IOException ioex) {\n-                ioex.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws RunnerException {\n-        Options opt = new OptionsBuilder()\n-                .include(org.openjdk.bench.java.net.SocketChannelCompare.class.getSimpleName())\n-                .warmupForks(1)\n-                .warmupIterations(2)\n-                .measurementIterations(2)\n-                .forks(2)\n-                .build();\n-\n-        new Runner(opt).run();\n-\n-        opt = new OptionsBuilder()\n-                .include(org.openjdk.bench.java.net.SocketChannelCompare.class.getSimpleName())\n-                .warmupForks(1)\n-                .warmupIterations(2)\n-                .measurementIterations(2)\n-                .jvmArgsPrepend(\"-Djdk.net.useFastTcpLoopback=true\")\n-                .forks(3)\n-                .build();\n-\n-        new Runner(opt).run();\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelCompare.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -49,0 +49,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelConnectionSetup.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.net;\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.ClosedChannelException;\n-import java.nio.channels.ServerSocketChannel;\n-import java.nio.channels.SocketChannel;\n-import java.util.concurrent.TimeUnit;\n-\n-import org.openjdk.jmh.annotations.*;\n-\n-\/**\n- * Tests the overheads of I\/O API.\n- * This test is known to depend heavily on network conditions and paltform.\n- *\/\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.MILLISECONDS)\n-@State(Scope.Thread)\n-public class SocketChannelReadWrite {\n-\n-    private ServerSocketChannel ssc;\n-    private SocketChannel s1, s2;\n-    private ReadThread rt;\n-    private ByteBuffer bb = ByteBuffer.allocate(1);\n-\n-    @Setup(Level.Trial)\n-    public void beforeRun() throws IOException {\n-        InetAddress iaddr = InetAddress.getLocalHost();\n-\n-        ssc = ServerSocketChannel.open().bind(null);\n-        s1 = SocketChannel.open(new InetSocketAddress(iaddr, ssc.socket().getLocalPort()));\n-        s2 = ssc.accept();\n-\n-        rt = new ReadThread(s2);\n-        rt.start();\n-\n-        bb.put((byte) 47);\n-        bb.flip();\n-    }\n-\n-    @TearDown(Level.Trial)\n-    public void afterRun() throws IOException, InterruptedException {\n-        s1.close();\n-        s2.close();\n-        ssc.close();\n-        rt.join();\n-    }\n-\n-    @Benchmark\n-    public void test() throws IOException {\n-        s1.write(bb);\n-        bb.flip();\n-    }\n-\n-    static class ReadThread extends Thread {\n-        private SocketChannel sc;\n-\n-        public ReadThread(SocketChannel s2) {\n-            this.sc = s2;\n-        }\n-\n-        public void run() {\n-            try {\n-                ByteBuffer bb = ByteBuffer.allocate(1);\n-                while (sc.read(bb) > 0) {\n-                    bb.flip();\n-                }\n-            } catch (ClosedChannelException ex) {\n-                \/\/ shutdown time\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketChannelReadWrite.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -34,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -54,0 +57,3 @@\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 5, time = 2)\n+@Fork(value = 3)\n@@ -56,0 +62,6 @@\n+    @Param({\"1\", \"8192\", \"128000\"})\n+    public int size;\n+\n+    @Param({\"false\", \"true\"})\n+    public boolean timeout;\n+\n@@ -176,6 +188,0 @@\n-    @Param({\"1\", \"1024\", \"8192\", \"64000\", \"128000\"})\n-    public int size;\n-\n-    @Param({\"false\", \"true\"})\n-    public boolean timeout;\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketReadWrite.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -48,0 +51,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketStreaming.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -35,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -47,0 +49,2 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ThreadLocalParseUtil.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,2 @@\n+import org.openjdk.jmh.annotations.Warmup;\n+\n@@ -40,0 +44,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/ThreadLocalURI.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +35,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -46,0 +49,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/URLEncodeDecode.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/UnixSocketChannelReadWrite.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}