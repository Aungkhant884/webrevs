{"files":[{"patch":"@@ -466,1 +466,0 @@\n-        setOpaque(true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JList.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5595,1 +5595,0 @@\n-        setOpaque(true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-        setOpaque(true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JToolTip.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -729,1 +729,0 @@\n-        setOpaque(true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTree.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -290,1 +290,0 @@\n-        setOpaque(true);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JViewport.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -21581,1 +21581,1 @@\n-                                 \n+\n@@ -27251,1 +27251,1 @@\n-      <uiComponent opaque=\"false\" type=\"javax.swing.JToolTip\" name=\"ToolTip\" ui=\"ToolTipUI\" subregion=\"false\">\n+      <uiComponent opaque=\"true\" type=\"javax.swing.JToolTip\" name=\"ToolTip\" ui=\"ToolTipUI\" subregion=\"false\">\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/skin.laf","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.*;\n+\n+\/**\n+ *  @test\n+ *  @bug 8253266\n+ *  @summary setUIProperty should work when opaque property is not set by\n+ *  client\n+ *  @key headful\n+ *  @run main TestOpaqueListTable\n+ *\/\n+\n+public class TestOpaqueListTable {\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.LookAndFeelInfo[] installedLookAndFeels;\n+        installedLookAndFeels = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo LF : installedLookAndFeels) {\n+            try {\n+                UIManager.setLookAndFeel(LF.getClassName());\n+                SwingUtilities.invokeAndWait(() -> {\n+                    JList list = new JList();\n+                    JTable table = new JTable();\n+                    JTree tree = new JTree();\n+                    JToolTip toolTip = new JToolTip();\n+                    JViewport viewport = new JViewport();\n+                    String opaqueValue =  new String(\" \");\n+\n+                    if (!list.isOpaque()) {\n+                        opaqueValue += \"JList, \";\n+                    }\n+                    if (!table.isOpaque()) {\n+                        opaqueValue += \"JTable, \";\n+                    }\n+                    if (!tree.isOpaque()) {\n+                        opaqueValue += \"JTree, \";\n+                    }\n+                    if (!toolTip.isOpaque()) {\n+                        opaqueValue += \"JToolTip, \";\n+\n+                    }\n+                    if (!viewport.isOpaque()) {\n+                        opaqueValue += \"JViewport, \";\n+                    }\n+\n+                    if(!opaqueValue.equals(\" \")) {\n+                        throw new RuntimeException(\"Default value of \" +\n+                                \"\\\"opaque\\\" property for \" + opaqueValue\n+                                + \" is changed \");\n+                    }\n+\n+                    LookAndFeel.installProperty(list, \"opaque\", false);\n+                    LookAndFeel.installProperty(table, \"opaque\", false);\n+                    LookAndFeel.installProperty(tree, \"opaque\", false);\n+                    LookAndFeel.installProperty(toolTip,\"opaque\",false);\n+                    LookAndFeel.installProperty(viewport,\"opaque\",false);\n+\n+                    opaqueValue = \" \";\n+                    if (list.isOpaque()) {\n+                        opaqueValue += \"JList, \";\n+                    }\n+                    if (table.isOpaque()) {\n+                        opaqueValue += \"JTable, \";\n+                    }\n+                    if (tree.isOpaque()) {\n+                        opaqueValue += \"JTree, \";\n+                    }\n+                    if (toolTip.isOpaque()) {\n+                        opaqueValue += \"JToolTip, \";\n+                    }\n+                    if (viewport.isOpaque()) {\n+                        opaqueValue += \"JViewport, \";\n+                    }\n+                    if (!opaqueValue.equals(\" \")) {\n+                        throw new RuntimeException(\n+                                \"setUIProperty failed to clear \" +\n+                                        opaqueValue +\" opaque\" +\n+                                        \" when opaque is not set by client\");\n+                    }\n+\n+\n+                    list.setOpaque(true);\n+                    table.setOpaque(true);\n+                    tree.setOpaque(true);\n+                    toolTip.setOpaque(true);\n+                    viewport.setOpaque(true);\n+\n+                    LookAndFeel.installProperty(list,\"opaque\",false);\n+                    LookAndFeel.installProperty(table, \"opaque\", false);\n+                    LookAndFeel.installProperty(tree, \"opaque\", false);\n+                    LookAndFeel.installProperty(toolTip, \"opaque\", false);\n+                    LookAndFeel.installProperty(viewport, \"opaque\", false);\n+\n+                    opaqueValue = \" \";\n+\n+                    if (!list.isOpaque()) {\n+                        opaqueValue += \"JList\";\n+                    }\n+                    if (!table.isOpaque()) {\n+                        opaqueValue += \"JTable\";\n+                    }\n+                    if (!tree.isOpaque()) {\n+                        opaqueValue += \"JTree\";\n+                    }\n+                    if (!toolTip.isOpaque()) {\n+                        opaqueValue += \"JToolTip\";\n+                    }\n+                    if (!viewport.isOpaque()) {\n+                        opaqueValue += \"JViewport\";\n+                    }\n+\n+                    if (!opaqueValue.equals(\" \")) {\n+                        throw new RuntimeException(\"\" +\n+                                \"setUIProperty cleared the \" +opaqueValue +\n+                                \" Opaque when opaque is set by client\");\n+                    }\n+\n+                });\n+            } catch (UnsupportedLookAndFeelException e) {\n+                System.out.println(\"Note: LookAndFeel \" + LF.getClassName()\n+                        + \" is not supported on this configuration\");\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/TestOpaqueListTable.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}