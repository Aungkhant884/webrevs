{"files":[{"patch":"@@ -316,0 +316,9 @@\n+size_t DefNewGeneration::calculate_thread_increase_size(int threads_count) const {\n+    size_t thread_increase_size = 0;\n+    \/\/ Check an overflow at 'threads_count * NewSizeThreadIncrease'.\n+    if (threads_count > 0 && NewSizeThreadIncrease <= max_uintx \/ threads_count) {\n+      thread_increase_size = threads_count * NewSizeThreadIncrease;\n+    }\n+    return thread_increase_size;\n+}\n+\n@@ -318,1 +327,2 @@\n-                                                    size_t alignment) const {\n+                                                    size_t alignment,\n+                                                    size_t thread_increase_size) const {\n@@ -321,8 +331,1 @@\n-  if (NewSizeThreadIncrease > 0) {\n-    int threads_count;\n-    size_t thread_increase_size = 0;\n-\n-    \/\/ 1. Check an overflow at 'threads_count * NewSizeThreadIncrease'.\n-    threads_count = Threads::number_of_non_daemon_threads();\n-    if (threads_count > 0 && NewSizeThreadIncrease <= max_uintx \/ threads_count) {\n-      thread_increase_size = threads_count * NewSizeThreadIncrease;\n+  if (NewSizeThreadIncrease > 0 && thread_increase_size > 0) {\n@@ -330,3 +333,3 @@\n-      \/\/ 2. Check an overflow at 'new_size_candidate + thread_increase_size'.\n-      if (new_size_candidate <= max_uintx - thread_increase_size) {\n-        new_size_candidate += thread_increase_size;\n+    \/\/ 1. Check an overflow at 'new_size_candidate + thread_increase_size'.\n+    if (new_size_candidate <= max_uintx - thread_increase_size) {\n+      new_size_candidate += thread_increase_size;\n@@ -334,5 +337,4 @@\n-        \/\/ 3. Check an overflow at 'align_up'.\n-        size_t aligned_max = ((max_uintx - alignment) & ~(alignment-1));\n-        if (new_size_candidate <= aligned_max) {\n-          desired_new_size = align_up(new_size_candidate, alignment);\n-        }\n+      \/\/ 2. Check an overflow at 'align_up'.\n+      size_t aligned_max = ((max_uintx - alignment) & ~(alignment-1));\n+      if (new_size_candidate <= aligned_max) {\n+        desired_new_size = align_up(new_size_candidate, alignment);\n@@ -367,2 +369,2 @@\n-  int threads_count = 0;\n-  size_t thread_increase_size = 0;\n+  int threads_count = Threads::number_of_non_daemon_threads();\n+  size_t thread_increase_size = calculate_thread_increase_size(threads_count);\n@@ -373,1 +375,2 @@\n-  size_t desired_new_size = adjust_for_thread_increase(new_size_candidate, new_size_before, alignment);\n+  size_t desired_new_size = adjust_for_thread_increase(new_size_candidate, new_size_before,\n+                                                       alignment, thread_increase_size);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -344,1 +344,4 @@\n-                                    size_t alignment) const;\n+                                    size_t alignment,\n+                                    size_t thread_increase_size) const;\n+\n+  size_t calculate_thread_increase_size(int threads_count) const;\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,2 @@\n-  _shrink_factor = 0;\n+  \/\/ If we don't shrink the heap in steps, '_shrink_factor' is always 100%.\n+  _shrink_factor = ShrinkHeapInSteps ? 0 : 100;\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  _shrink_factor(0), _min_heap_delta_bytes(), _capacity_at_prologue(),\n+  _min_heap_delta_bytes(), _capacity_at_prologue(),\n@@ -47,0 +47,2 @@\n+  \/\/ If we don't shrink the heap in steps, '_shrink_factor' is always 100%.\n+  _shrink_factor = ShrinkHeapInSteps ? 0 : 100;\n@@ -189,1 +191,6 @@\n-  _shrink_factor = 0;\n+  if (ShrinkHeapInSteps) {\n+    \/\/ Always reset '_shrink_factor' if the heap is shrunk in steps.\n+    \/\/ If we shrink the heap in this iteration, '_shrink_factor' will\n+    \/\/ be recomputed based on the old value further down in this fuction.\n+    _shrink_factor = 0;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/cardGeneration.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}