{"files":[{"patch":"@@ -1791,1 +1791,2 @@\n-    julong reasonable_minimum = (julong)(OldSize + NewSize);\n+    julong reasonable_minimum = MAX2((julong)(OldSize + NewSize),\n+                                     (julong)((phys_mem * MinRAMPercentage) \/ 100));\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.arguments;\n+\n+\/*\n+ * @test TestMaxRAMFlags\n+ * @bug 8278492\n+ * @summary Verify correct MinHeapSize when MinRAMPercentage is specified.\n+ * @library \/test\/lib\n+ * @library \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run driver gc.arguments.TestMinRAMFlag\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestMinRAMFlag {\n+\n+  private static void checkMinRAMSize(long maxram, double maxrampercent, double minrampercent, long expectheap) throws Exception {\n+\n+    ArrayList<String> args = new ArrayList<String>();\n+    args.add(\"-Xlog:gc+heap=trace\");\n+    args.add(\"-XX:MaxRAM=\" + maxram);\n+    args.add(\"-XX:MaxRAMPercentage=\" + maxrampercent);\n+    args.add(\"-XX:MinRAMPercentage=\" + minrampercent);\n+\n+    args.add(\"-XX:+PrintFlagsFinal\");\n+    args.add(\"-version\");\n+\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(args);\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldHaveExitValue(0);\n+    String stdout = output.getStdout();\n+\n+    System.out.println(stdout);\n+\n+    long actualheap = Long.parseLong(getFlagValue(\"MinHeapSize\", stdout));\n+    if (actualheap != expectheap) {\n+      throw new RuntimeException(\"MinHeapSize value set to \" + actualheap +\n+        \", expected \" + expectheap + \" when running with the following flags: \" + Arrays.asList(args).toString());\n+    }\n+  }\n+\n+  private static String getFlagValue(String flag, String where) {\n+    Matcher m = Pattern.compile(flag + \"\\\\s+:?=\\\\s+\\\\d+\").matcher(where);\n+    if (!m.find()) {\n+      throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+    }\n+    String match = m.group();\n+    return match.substring(match.lastIndexOf(\" \") + 1, match.length());\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    \/\/ Verify that MinRAMPercentage correctly sets MinHeapSize for a few values of MinRAMPercentage\n+\n+    long oneG = 1L * 1024L * 1024L * 1024L;\n+\n+    \/\/ Args: MaxRAM , MaxRAMPercentage, MinRAMPercentage, expected min heap\n+    checkMinRAMSize(oneG, 100,  100, oneG);\n+    checkMinRAMSize(oneG, 100,   50, oneG \/ 2);\n+    checkMinRAMSize(oneG,  50,   25, oneG \/ 4);\n+    checkMinRAMSize(oneG,  12.5, 25, oneG \/ 8); \/\/ MaxRAMPercentage overrides\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinRAMFlag.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}