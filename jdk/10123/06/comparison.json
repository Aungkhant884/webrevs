{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -250,2 +251,4 @@\n-  __ membar(Assembler::LoadLoad | Assembler::LoadStore |\n-            Assembler::StoreLoad | Assembler::StoreStore);\n+  if (!UseSystemMemoryBarrier) {\n+    __ membar(Assembler::LoadLoad | Assembler::LoadStore |\n+              Assembler::StoreLoad | Assembler::StoreStore);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/downcallLinker_aarch64.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -1789,1 +1790,3 @@\n-  __ dmb(Assembler::ISH);\n+  if (!UseSystemMemoryBarrier) {\n+    __ dmb(Assembler::ISH);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -1346,1 +1347,3 @@\n-  __ dmb(Assembler::ISH);\n+  if (!UseSystemMemoryBarrier) {\n+    __ dmb(Assembler::ISH);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2150,1 +2150,3 @@\n-    __ fence();\n+    if (!UseSystemMemoryBarrier) {\n+      __ fence();\n+    }\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1439,1 +1439,3 @@\n-  __ fence();\n+  if (!UseSystemMemoryBarrier) {\n+    __ fence();\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -254,3 +255,5 @@\n-  __ membar(Assembler::Membar_mask_bits(\n-          Assembler::LoadLoad | Assembler::LoadStore |\n-          Assembler::StoreLoad | Assembler::StoreStore));\n+  if (!UseSystemMemoryBarrier) {\n+    __ membar(Assembler::Membar_mask_bits(\n+            Assembler::LoadLoad | Assembler::LoadStore |\n+            Assembler::StoreLoad | Assembler::StoreStore));\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -2121,1 +2122,2 @@\n-  __ membar(Assembler::Membar_mask_bits(\n+  if (!UseSystemMemoryBarrier) {\n+    __ membar(Assembler::Membar_mask_bits(\n@@ -2124,0 +2126,1 @@\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -1085,4 +1086,5 @@\n-  __ membar(Assembler::Membar_mask_bits(\n-              Assembler::LoadLoad | Assembler::LoadStore |\n-              Assembler::StoreLoad | Assembler::StoreStore));\n-\n+  if (!UseSystemMemoryBarrier) {\n+    __ membar(Assembler::Membar_mask_bits(\n+                Assembler::LoadLoad | Assembler::LoadStore |\n+                Assembler::StoreLoad | Assembler::StoreStore));\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"logging\/log.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/systemMemoryBarrier.hpp\"\n+\n+#include <sys\/syscall.h>\n+\n+\/\/ Syscall defined in kernel 4.3\n+\/\/ Oracle x64 builds may use old sysroot (pre 4.3)\n+#ifndef SYS_membarrier\n+  #if defined(AMD64)\n+  #define SYS_membarrier 324\n+  #elif defined(PPC64)\n+  #define SYS_membarrier 365\n+  #else\n+  #error define SYS_membarrier for the arch\n+  #endif\n+#endif \/\/ SYS_membarrier\n+\n+\/\/ Expedited defined in kernel 4.14\n+\/\/ Therefore we define it here instead of including linux\/membarrier.h\n+enum membarrier_cmd {\n+  MEMBARRIER_CMD_QUERY                      = 0,\n+  MEMBARRIER_CMD_PRIVATE_EXPEDITED          = (1 << 3),\n+  MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED = (1 << 4),\n+};\n+\n+#define check_with_errno(check_type, cond, msg)                             \\\n+  do {                                                                      \\\n+    int err = errno;                                                        \\\n+    check_type(cond, \"%s: error='%s' (errno=%s)\", msg, os::strerror(err),   \\\n+               os::errno_name(err));                                        \\\n+} while (false)\n+\n+#define guarantee_with_errno(cond, msg) check_with_errno(guarantee, cond, msg)\n+\n+static int membarrier(int cmd, unsigned int flags, int cpu_id) {\n+  return syscall(SYS_membarrier, cmd, flags, cpu_id); \/\/ cpu_id only on >= 5.10\n+}\n+\n+bool LinuxSystemMemoryBarrier::initialize() {\n+  int ret = membarrier(MEMBARRIER_CMD_QUERY, 0, 0);\n+  if (ret < 0) {\n+    log_error(os)(\"MEMBARRIER_CMD_QUERY unsupported\");\n+    return false;\n+  }\n+  if (!(ret & MEMBARRIER_CMD_PRIVATE_EXPEDITED) ||\n+      !(ret & MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED)) {\n+    log_error(os)(\"MEMBARRIER PRIVATE_EXPEDITED unsupported\");\n+    return false;\n+  }\n+  ret = membarrier(MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED, 0, 0);\n+  guarantee_with_errno(ret == 0, \"MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED failed\");\n+  return true;\n+}\n+\n+void LinuxSystemMemoryBarrier::emit() {\n+  int s = membarrier(MEMBARRIER_CMD_PRIVATE_EXPEDITED, 0, 0);\n+  guarantee_with_errno(s >= 0, \"MEMBARRIER_CMD_PRIVATE_EXPEDITED failed\");\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.cpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_LINUX_SYSTEMMEMORYBARRIER_LINUX_HPP\n+#define OS_LINUX_SYSTEMMEMORYBARRIER_LINUX_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+\n+class LinuxSystemMemoryBarrier : public AllStatic {\n+ public:\n+  static bool initialize();\n+  static void emit();\n+};\n+\n+#endif \/\/ OS_LINUX_SYSTEMMEMORYBARRIER_LINUX_HPP\n","filename":"src\/hotspot\/os\/linux\/systemMemoryBarrier_linux.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"systemMemoryBarrier_windows.hpp\"\n+\n+#include <windows.h>\n+#include <processthreadsapi.h>\n+\n+bool WindowsSystemMemoryBarrier::initialize() {\n+  return true;\n+}\n+\n+void WindowsSystemMemoryBarrier::emit() {\n+  FlushProcessWriteBuffers();\n+}\n","filename":"src\/hotspot\/os\/windows\/systemMemoryBarrier_windows.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_LINUX_SYSTEMMEMORYBARRIER_WINDOWS_HPP\n+#define OS_LINUX_SYSTEMMEMORYBARRIER_WINDOWS_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+\n+class WindowsSystemMemoryBarrier : public AllStatic {\n+ public:\n+  static bool initialize();\n+  static void emit();\n+};\n+\n+#endif \/\/ OS_LINUX_SYSTEMMEMORYBARRIER_WINDOWS_HPP\n","filename":"src\/hotspot\/os\/windows\/systemMemoryBarrier_windows.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -46,0 +47,1 @@\n+#include \"utilities\/systemMemoryBarrier.hpp\"\n@@ -385,0 +387,3 @@\n+  if (UseSystemMemoryBarrier) {\n+    SystemMemoryBarrier::emit();\n+  }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1296,0 +1296,3 @@\n+                                                                            \\\n+  product(bool, UseSystemMemoryBarrier, false, EXPERIMENTAL,                \\\n+          \"Try to enable system memory barrier\")                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -46,0 +47,1 @@\n+#include \"utilities\/systemMemoryBarrier.hpp\"\n@@ -251,0 +253,3 @@\n+    if (UseSystemMemoryBarrier) {\n+      SystemMemoryBarrier::emit();\n+    }\n@@ -373,0 +378,6 @@\n+  \/\/ Separate the arming of the poll in add_operation() above from\n+  \/\/ the read of JavaThread state in the try_process() call below.\n+  if (UseSystemMemoryBarrier) {\n+    SystemMemoryBarrier::emit();\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -72,0 +73,1 @@\n+#include \"utilities\/systemMemoryBarrier.hpp\"\n@@ -342,2 +344,5 @@\n-\n-  OrderAccess::fence(); \/\/ storestore|storeload, global state -> local state\n+  if (UseSystemMemoryBarrier) {\n+    SystemMemoryBarrier::emit(); \/\/ storestore|storeload, global state -> local state\n+  } else {\n+    OrderAccess::fence(); \/\/ storestore|storeload, global state -> local state\n+  }\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -97,0 +98,1 @@\n+#include \"utilities\/systemMemoryBarrier.hpp\"\n@@ -555,0 +557,8 @@\n+  if (UseSystemMemoryBarrier) {\n+    if (!SystemMemoryBarrier::initialize()) {\n+      vm_shutdown_during_initialization(\"Failed to initialize the requested system memory barrier synchronization.\");\n+      return JNI_EINVAL;\n+    }\n+    log_debug(os)(\"Using experimental system memory barrier synchronization\");\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_UTILITIES_SYSTEMMEMORYBARRIER_HPP\n+#define SHARE_UTILITIES_SYSTEMMEMORYBARRIER_HPP\n+\n+#include \"logging\/log.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+#if defined(LINUX)\n+#include \"systemMemoryBarrier_linux.hpp\"\n+typedef LinuxSystemMemoryBarrier SystemMemoryBarrierDefault;\n+#elif defined(_WINDOWS)\n+#include \"systemMemoryBarrier_windows.hpp\"\n+typedef WindowsSystemMemoryBarrier SystemMemoryBarrierDefault;\n+#else\n+class NoSystemMemoryBarrier {\n+ public:\n+  static bool initialize() {\n+    log_error(os)(\"SystemMemoryBarrier not supported on this platform\");\n+    return false;\n+  }\n+  static void emit() {\n+    fatal(\"No system memory barrier available\");\n+  }\n+};\n+typedef NoSystemMemoryBarrier SystemMemoryBarrierDefault;\n+#endif\n+\n+template <typename SystemMemoryBarrierImpl>\n+class SystemMemoryBarrierType : public AllStatic {\n+ public:\n+  static bool initialize() { return SystemMemoryBarrierImpl::initialize(); }\n+  static void emit()       { SystemMemoryBarrierImpl::emit(); }\n+};\n+\n+typedef SystemMemoryBarrierType<SystemMemoryBarrierDefault> SystemMemoryBarrier;\n+\n+#endif \/\/ SHARE_UTILITIES_SYSTEMMEMORYBARRIER_HPP\n","filename":"src\/hotspot\/share\/utilities\/systemMemoryBarrier.hpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -28,0 +28,3 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n@@ -32,1 +35,0 @@\n- * @requires vm.debug\n@@ -42,11 +44,12 @@\n-        ProcessBuilder pb =\n-            ProcessTools.createTestJvm(\n-                    \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                    \"-XX:+SafepointALot\",\n-                    \"-XX:+HandshakeALot\",\n-                    \"-XX:GuaranteedSafepointInterval=20\",\n-                    \"-Xlog:ergo*\",\n-                    \"-XX:ParallelGCThreads=1\",\n-                    \"-XX:ConcGCThreads=1\",\n-                    \"-XX:CICompilerCount=2\",\n-                    \"HandshakeTransitionTest$Test\");\n+        List<String> commands = new ArrayList<>();\n+        commands.add(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH);\n+        commands.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        commands.add(\"-XX:+SafepointALot\");\n+        commands.add(\"-XX:+HandshakeALot\");\n+        commands.add(\"-XX:GuaranteedSafepointInterval=20\");\n+        commands.add(\"-XX:ParallelGCThreads=1\");\n+        commands.add(\"-XX:ConcGCThreads=1\");\n+        commands.add(\"-XX:CICompilerCount=2\");\n+        commands.addAll(Arrays.asList(args));\n+        commands.add(\"HandshakeTransitionTest$Test\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(commands);\n","filename":"test\/hotspot\/jtreg\/runtime\/handshake\/HandshakeTransitionTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\/*\n+ * @test SystemMembarHandshakeTransitionTest\n+ * @summary This does a sanity test of the poll in the native wrapper.\n+ * @requires os.family == \"linux\" | os.family == \"windows\"\n+ * @library \/testlibrary \/test\/lib\n+ * @build SystemMembarHandshakeTransitionTest HandshakeTransitionTest\n+ * @run main\/native SystemMembarHandshakeTransitionTest\n+ *\/\n+\n+public class SystemMembarHandshakeTransitionTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(\"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH);\n+        commands.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        commands.add(\"-XX:+SafepointALot\");\n+        commands.add(\"-XX:+HandshakeALot\");\n+        commands.add(\"-XX:GuaranteedSafepointInterval=20\");\n+        commands.add(\"-XX:ParallelGCThreads=1\");\n+        commands.add(\"-XX:ConcGCThreads=1\");\n+        commands.add(\"-XX:CICompilerCount=2\");\n+        commands.add(\"-XX:+UnlockExperimentalVMOptions\");\n+        commands.add(\"-XX:+UseSystemMemoryBarrier\");\n+        commands.addAll(Arrays.asList(args));\n+        commands.add(\"HandshakeTransitionTest$Test\");\n+        ProcessBuilder pb = ProcessTools.createTestJvm(commands);\n+\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.reportDiagnosticSummary();\n+        output.shouldMatch(\"(JOINED|Failed to initialize request system memory barrier synchronization.)\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/handshake\/SystemMembarHandshakeTransitionTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}