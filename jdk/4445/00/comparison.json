{"files":[{"patch":"@@ -762,0 +762,20 @@\n+static const Klass* get_handler_field_descriptor(const Handle& h_mirror, fieldDescriptor* descriptor, TRAPS) {\n+  assert(h_mirror.not_null(), \"invariant\");\n+  assert(descriptor != NULL, \"invariant\");\n+  Klass* const k = java_lang_Class::as_Klass(h_mirror());\n+  assert(k->is_instance_klass(), \"invariant\");\n+  InstanceKlass* const ik = InstanceKlass::cast(k);\n+  if (ik->is_not_initialized()) {\n+    ik->initialize(CHECK_NULL);\n+  }\n+  assert(ik->is_being_initialized() || ik->is_initialized(), \"invariant\");\n+  const Klass* const typed_field_holder = ik->find_field(vmSymbols::eventHandler_name(),\n+                                                         vmSymbols::jdk_jfr_internal_handlers_EventHandler_signature(),\n+                                                         true,\n+                                                         descriptor);\n+  return typed_field_holder != NULL ? typed_field_holder : ik->find_field(vmSymbols::eventHandler_name(),\n+                                                                          vmSymbols::object_signature(), \/\/ untyped\n+                                                                          true,\n+                                                                          descriptor);\n+}\n+\n@@ -764,3 +784,0 @@\n-  const oop klass_oop = JNIHandles::resolve(clazz);\n-  assert(klass_oop != NULL, \"invariant\");\n-  Klass* klass = java_lang_Class::as_Klass(klass_oop);\n@@ -768,12 +785,7 @@\n-  Handle h_klass_oop(Handle(THREAD, klass->java_mirror()));\n-  InstanceKlass* const instance_klass = static_cast<InstanceKlass*>(klass);\n-  klass->initialize(CHECK_NULL);\n-\n-  fieldDescriptor event_handler_field;\n-  Klass* f = instance_klass->find_field(\n-    vmSymbols::eventHandler_name(),\n-    vmSymbols::jdk_jfr_internal_handlers_EventHandler_signature(),\n-    true, &event_handler_field);\n-  if (f != NULL) {\n-    oop ret = h_klass_oop->obj_field(event_handler_field.offset());\n-    return ret != NULL ? JfrJavaSupport::local_jni_handle(ret, THREAD) : NULL;\n+  const Handle h_mirror(Handle(THREAD, JNIHandles::resolve(clazz)));\n+  assert(h_mirror.not_null(), \"invariant\");\n+  fieldDescriptor handler_field_descriptor;\n+  const Klass* const field_holder = get_handler_field_descriptor(h_mirror, &handler_field_descriptor, THREAD);\n+  if (field_holder == NULL) {\n+    \/\/ The only reason should be that klass initialization failed.\n+    return NULL;\n@@ -781,12 +793,3 @@\n-\n-  fieldDescriptor object_field;\n-  Klass* g = instance_klass->find_field(\n-    vmSymbols::eventHandler_name(),\n-    vmSymbols::object_signature(),\n-    true, &object_field);\n-  if (g != NULL) {\n-    oop ret = h_klass_oop->obj_field(object_field.offset());\n-    return ret != NULL ? JfrJavaSupport::local_jni_handle(ret, THREAD) : NULL;\n-  }\n-  assert(f == NULL && g == NULL, \"no handler field for class\");\n-  return NULL;\n+  assert(java_lang_Class::as_Klass(h_mirror()) == field_holder, \"invariant\");\n+  oop handler_oop = h_mirror->obj_field(handler_field_descriptor.offset());\n+  return handler_oop != NULL ? JfrJavaSupport::local_jni_handle(handler_oop, THREAD) : NULL;\n@@ -797,5 +800,0 @@\n-  const oop klass_oop = JNIHandles::resolve(clazz);\n-  assert(klass_oop != NULL, \"invariant\");\n-  const oop handler_oop = JNIHandles::resolve(handler);\n-  assert(handler_oop != NULL, \"invariant\");\n-  Klass* klass = java_lang_Class::as_Klass(klass_oop);\n@@ -803,22 +801,7 @@\n-  Handle h_klass_oop(Handle(THREAD, klass->java_mirror()));\n-  InstanceKlass* const instance_klass = static_cast<InstanceKlass*>(klass);\n-  klass->initialize(CHECK_false);\n-\n-  fieldDescriptor event_handler_field;\n-  Klass* f = instance_klass->find_field(\n-    vmSymbols::eventHandler_name(),\n-    vmSymbols::jdk_jfr_internal_handlers_EventHandler_signature(),\n-    true, &event_handler_field);\n-  if (f != NULL) {\n-    h_klass_oop->obj_field_put(event_handler_field.offset(), handler_oop);\n-    return true;\n-  }\n-\n-  fieldDescriptor object_handler_field;\n-  Klass* g = instance_klass->find_field(\n-    vmSymbols::eventHandler_name(),\n-    vmSymbols::object_signature(),\n-    true, &object_handler_field);\n-  if (g != NULL) {\n-    h_klass_oop->obj_field_put(object_handler_field.offset(), handler_oop);\n-    return true;\n+  const Handle h_mirror(Handle(THREAD, JNIHandles::resolve(clazz)));\n+  assert(h_mirror.not_null(), \"invariant\");\n+  fieldDescriptor handler_field_descriptor;\n+  const Klass* const field_holder = get_handler_field_descriptor(h_mirror, &handler_field_descriptor, THREAD);\n+  if (field_holder == NULL) {\n+    \/\/ The only reason should be that klass initialization failed.\n+    return false;\n@@ -826,2 +809,5 @@\n-  assert(f == NULL && g == NULL, \"no handler field for class\");\n-  return false;\n+  assert(java_lang_Class::as_Klass(h_mirror()) == field_holder, \"invariant\");\n+  const oop handler_oop = JNIHandles::resolve(handler);\n+  assert(handler_oop != NULL, \"invariant\");\n+  h_mirror->obj_field_put(handler_field_descriptor.offset(), handler_oop);\n+  return true;\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":42,"deletions":56,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -448,6 +448,3 @@\n-        try {\n-            Field f = eventClass.getDeclaredField(EventInstrumentation.FIELD_EVENT_HANDLER);\n-            SecuritySupport.setAccessible(f);\n-            return (EventHandler) f.get(null);\n-        } catch (NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {\n-            throw new InternalError(\"Could not access event handler\");\n+        Object handler = JVM.getJVM().getHandler(eventClass);\n+        if (handler == null || handler instanceof EventHandler) {\n+            return (EventHandler) handler;\n@@ -455,0 +452,1 @@\n+        throw new InternalError(\"Could not access event handler\");\n@@ -459,6 +457,2 @@\n-        try {\n-            Field field = eventClass.getDeclaredField(EventInstrumentation.FIELD_EVENT_HANDLER);\n-            SecuritySupport.setAccessible(field);\n-            field.set(null, handler);\n-        } catch (NoSuchFieldException | IllegalArgumentException | IllegalAccessException e) {\n-            throw new InternalError(\"Could not access event handler\");\n+        if (!JVM.getJVM().setHandler(eventClass, handler)) {\n+            throw new InternalError(\"Could not set event handler\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Utils.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"}]}