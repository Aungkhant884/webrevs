{"files":[{"patch":"@@ -762,5 +762,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Byte> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (byte) 0);\n-                that = that.blend((byte) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Byte> mask\n+                    = this.compare(EQ, (byte) 0);\n+                return this.blend(that, mask);\n@@ -812,5 +810,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Byte> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (byte) 0);\n-                that = that.blend((byte) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Byte> mask\n+                    = this.compare(EQ, (byte) 0, m);\n+                return this.blend(that, mask);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -767,9 +767,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Long> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (long) 0);\n-                that = that.blend((double) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n-                \/\/ FIXME: Support OR_UNCHECKED on float\/double also!\n-                return this.viewAsIntegralLanes()\n-                    .lanewise(op, that.viewAsIntegralLanes())\n-                    .viewAsFloatingLanes();\n+                VectorMask<Long> mask\n+                    = this.viewAsIntegralLanes().compare(EQ, (long) 0);\n+                return this.blend(that, mask.cast(vspecies()));\n@@ -806,1 +800,4 @@\n-                return blend(lanewise(op, v), m);\n+                LongVector bits = this.viewAsIntegralLanes();\n+                VectorMask<Long> mask\n+                    = bits.compare(EQ, (long) 0, m.cast(bits.vspecies()));\n+                return this.blend(that, mask.cast(vspecies()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -767,9 +767,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Integer> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (int) 0);\n-                that = that.blend((float) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n-                \/\/ FIXME: Support OR_UNCHECKED on float\/double also!\n-                return this.viewAsIntegralLanes()\n-                    .lanewise(op, that.viewAsIntegralLanes())\n-                    .viewAsFloatingLanes();\n+                VectorMask<Integer> mask\n+                    = this.viewAsIntegralLanes().compare(EQ, (int) 0);\n+                return this.blend(that, mask.cast(vspecies()));\n@@ -806,1 +800,4 @@\n-                return blend(lanewise(op, v), m);\n+                IntVector bits = this.viewAsIntegralLanes();\n+                VectorMask<Integer> mask\n+                    = bits.compare(EQ, (int) 0, m.cast(bits.vspecies()));\n+                return this.blend(that, mask.cast(vspecies()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -762,5 +762,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Integer> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (int) 0);\n-                that = that.blend((int) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Integer> mask\n+                    = this.compare(EQ, (int) 0);\n+                return this.blend(that, mask);\n@@ -812,5 +810,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Integer> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (int) 0);\n-                that = that.blend((int) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Integer> mask\n+                    = this.compare(EQ, (int) 0, m);\n+                return this.blend(that, mask);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -720,5 +720,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Long> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (long) 0);\n-                that = that.blend((long) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Long> mask\n+                    = this.compare(EQ, (long) 0);\n+                return this.blend(that, mask);\n@@ -770,5 +768,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Long> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (long) 0);\n-                that = that.blend((long) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Long> mask\n+                    = this.compare(EQ, (long) 0, m);\n+                return this.blend(that, mask);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -762,5 +762,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Short> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (short) 0);\n-                that = that.blend((short) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Short> mask\n+                    = this.compare(EQ, (short) 0);\n+                return this.blend(that, mask);\n@@ -812,5 +810,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<Short> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, (short) 0);\n-                that = that.blend((short) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<Short> mask\n+                    = this.compare(EQ, (short) 0, m);\n+                return this.blend(that, mask);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -842,11 +842,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<$Boxbitstype$> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, ($bitstype$) 0);\n-                that = that.blend(($type$) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n-#if[FP]\n-                \/\/ FIXME: Support OR_UNCHECKED on float\/double also!\n-                return this.viewAsIntegralLanes()\n-                    .lanewise(op, that.viewAsIntegralLanes())\n-                    .viewAsFloatingLanes();\n-#end[FP]\n+                VectorMask<$Boxbitstype$> mask\n+                    = this{#if[FP]?.viewAsIntegralLanes()}.compare(EQ, ($bitstype$) 0);\n+                return this.blend(that, mask{#if[FP]?.cast(vspecies())});\n@@ -903,1 +895,4 @@\n-                return blend(lanewise(op, v), m);\n+                $Bitstype$Vector bits = this.viewAsIntegralLanes();\n+                VectorMask<$Boxbitstype$> mask\n+                    = bits.compare(EQ, ($bitstype$) 0, m.cast(bits.vspecies()));\n+                return this.blend(that, mask.cast(vspecies()));\n@@ -905,5 +900,3 @@\n-                \/\/ FIXME: Support this in the JIT.\n-                VectorMask<$Boxbitstype$> thisNZ\n-                    = this.viewAsIntegralLanes().compare(NE, ($bitstype$) 0);\n-                that = that.blend(($type$) 0, thisNZ.cast(vspecies()));\n-                op = OR_UNCHECKED;\n+                VectorMask<$Boxtype$> mask\n+                    = this.compare(EQ, ($type$) 0, m);\n+                return this.blend(that, mask);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"}]}