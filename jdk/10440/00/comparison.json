{"files":[{"patch":"@@ -313,0 +313,15 @@\n+\n+    public boolean isSameContent(InputGraph i) {\n+        if (i == null) {\n+            return false;\n+        }\n+        return Objects.equals(this.nodes, i.nodes)\n+            && Objects.equals(this.edges, i.edges)\n+            && Objects.equals(this.parent, i.parent)\n+            && Objects.equals(this.parentGroup, i.parentGroup)\n+            && Objects.equals(this.blocks, i.blocks)\n+            && Objects.equals(this.blockEdges, i.blockEdges)\n+            && Objects.equals(this.nodeToBlock, i.nodeToBlock)\n+            && Objects.equals(this.isDiffGraph, i.isDiffGraph);\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/InputGraph.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -217,1 +217,0 @@\n-                lastParsedGraph.put(getParentObject(), curGraph);\n@@ -244,0 +243,5 @@\n+            final InputGraph previous = lastParsedGraph.get(getParentObject());\n+            if (graph.isSameContent(previous)) {\n+                graph.getProperties().setProperty(\"_isDuplicate\", \"true\");\n+            }\n+            lastParsedGraph.put(getParentObject(), graph);\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/main\/java\/com\/sun\/hotspot\/igv\/data\/serialization\/Parser.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import static org.junit.Assert.assertFalse;\n@@ -211,0 +212,32 @@\n+\n+    \/**\n+     * Test of isSameContent method, of class InputGraph.\n+     *\/\n+    @Test\n+    public void testIsSameContent() {\n+\n+        InputGraph a = new InputGraph(\"graph\");\n+        a.addNode(N1);\n+        a.addNode(N2);\n+        a.addEdge(E12);\n+\n+        InputGraph b = new InputGraph(\"graph\");\n+        b.addNode(N1);\n+        b.addNode(N2);\n+        b.addEdge(E12);\n+\n+        InputGraph c = new InputGraph(\"graph\");\n+        c.addNode(N3);\n+        c.addNode(N4);\n+        c.addEdge(E34);\n+\n+        assertTrue(a.isSameContent(b));\n+        assertFalse(b.isSameContent(c));\n+\n+        a.addNode(N3);\n+        assertFalse(a.isSameContent(b));\n+\n+        b.addNode(N3);\n+        assertTrue(a.isSameContent(b));\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/Data\/src\/test\/java\/com\/sun\/hotspot\/igv\/data\/InputGraphTest.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -204,0 +204,1 @@\n+        setSelectedNodes(selectedNodes);\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/main\/java\/com\/sun\/hotspot\/igv\/view\/DiagramViewModel.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}