{"files":[{"patch":"@@ -170,4 +170,2 @@\n-    if (memory_limit == -1) {\n-      return -1; \/\/ unlimited\n-    }\n-    return (memory_limit < 0 ? 0 : memory_limit) + swap_limit;\n+    assert(memory_limit >= 0, \"swap limit without memory limit?\");\n+    return memory_limit + swap_limit;\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -290,4 +290,2 @@\n-            if (memoryLimit == CgroupSubsystem.LONG_RETVAL_UNLIMITED) {\n-                return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n-            }\n-            return (memoryLimit < 0 ? 0 : memoryLimit) + swapLimit;\n+            assert memoryLimit >= 0;\n+            return memoryLimit + swapLimit;\n@@ -298,0 +296,7 @@\n+    \/**\n+     * Note that for cgroups v2 the actual values set for swap usage and\n+     * memory usage live in two different files, memory.current and memory.swap.current\n+     * respectively. In order to properly report a cgroup v1 like\n+     * compound value we need to sum the two values. Setting a swap limit\n+     * without also setting a memory limit is not allowed.\n+     *\/\n@@ -300,1 +305,3 @@\n-        return getLongVal(\"memory.swap.current\");\n+        long swapUsage = getLongVal(\"memory.swap.current\");\n+        long memoryUsage = getMemoryUsage();\n+        return memoryUsage + swapUsage;\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2Subsystem.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -257,1 +257,3 @@\n-        newVal = getLongValueFromFile(\"memory.swap.current\");\n+        long swapUsage = getLongValueFromFile(\"memory.swap.current\");\n+        long memUsage = getLongValueFromFile(\"memory.current\");\n+        newVal = swapUsage + memoryUsage;\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV2.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}