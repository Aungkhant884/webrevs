{"files":[{"patch":"@@ -1918,2 +1918,2 @@\n-                    \/\/only check if the preview only if \"m\" immediatelly overrides \"other\"\n-                    \/\/without intermediate methods:\n+                    \/\/only produce preview warnings or errors if \"m\" immediatelly overrides \"other\"\n+                    \/\/without intermediate overriding methods:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -276,0 +276,153 @@\n+        for (Path source : sources) {\n+            log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                    .classpath(testClasses)\n+                    .outdir(testClasses)\n+                    .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                             \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                             \"--enable-preview\",\n+                             \"-Xlint:preview\",\n+                             \"-source\", String.valueOf(Runtime.version().feature()),\n+                             \"-XDrawDiagnostics\")\n+                    .files(source)\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            boolean preview = source.getFileName().toString().contains(\"P.\");\n+            boolean hasWarning = false;\n+            for (String line : log) {\n+                hasWarning |= line.contains(source.getFileName().toString()) &&\n+                              line.contains(\"compiler.warn.is.preview: test()\");\n+            }\n+\n+            if (preview != hasWarning)\n+                throw new Exception(\"expected \" + (preview ? \"preview\" : \"not preview\") +\n+                                    \"but got \" + (hasWarning ? \"warning\" : \"no warning\") +\n+                                    \"in: \" + log);\n+\n+            classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+            if (sources.length != classfileCount) {\n+                throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void previewAPIAbstractReAbstract(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          public class Concrete {\n+                              @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public abstract class Abstract {\n+                              @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                              public abstract void test();\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"-XDrawDiagnostics\", \"-doe\",\n+                         \"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.Concrete;\n+                          public abstract class ReabstractP extends Concrete {\n+                              public abstract void test();\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public abstract class ReabstractSubclass1 extends ReabstractP {\n+                              public abstract void test();\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class ReabstractSubclass2 extends ReabstractP {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.Abstract;\n+                          public abstract class AbstractP extends Abstract {\n+                              public abstract void test();\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public abstract class AbstractSubclass1 extends AbstractP {\n+                              public abstract void test();\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class AbstractSubclass2 extends AbstractP {\n+                              public void test() {}\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"AbstractP.java:3:17: compiler.err.is.preview: test()\",\n+                        \"ReabstractP.java:4:26: compiler.err.is.preview: test()\",\n+                        \"2 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        Path[] sources = tb.findJavaFiles(testSrc);\n+\n+        log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"--enable-preview\",\n+                         \"-Xlint:preview\",\n+                         \"-source\", String.valueOf(Runtime.version().feature()),\n+                         \"-XDrawDiagnostics\")\n+                .files(sources)\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        expected =\n+                List.of(\"AbstractP.java:3:17: compiler.warn.is.preview: test()\",\n+                        \"ReabstractP.java:4:26: compiler.warn.is.preview: test()\",\n+                        \"2 warnings\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        int classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+        if (sources.length != classfileCount) {\n+            throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"modified"}]}