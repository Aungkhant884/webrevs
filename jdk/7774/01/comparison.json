{"files":[{"patch":"@@ -155,1 +155,0 @@\n-            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1831,0 +1831,4 @@\n+        if (shouldCheckPreview(m, other, origin)) {\n+            checkPreview(tree.pos(), m, other);\n+        }\n+\n@@ -1905,0 +1909,17 @@\n+        private boolean shouldCheckPreview(MethodSymbol m, MethodSymbol other, ClassSymbol origin) {\n+            if (m.owner != origin ||\n+                \/\/performance - only do the expensive checks when the overridden method is a Preview API:\n+                (other.flags() & PREVIEW_API) == 0) {\n+                return false;\n+            }\n+\n+            for (Symbol s : types.membersClosure(origin.type, false).getSymbolsByName(m.name)) {\n+                if (m != s && m.overrides(s, origin, types, false)) {\n+                    \/\/only check if the preview only if \"m\" immediatelly overrides \"other\"\n+                    \/\/without intermediate methods:\n+                    return s == other;\n+                }\n+            }\n+\n+            return false;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,333 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282823\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main PreviewTest\n+ *\/\n+import com.sun.tools.classfile.ClassFile;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+public class PreviewTest extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    PreviewTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        PreviewTest t = new PreviewTest();\n+        t.runTests();\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void previewAPI(Path base) throws Exception {\n+        Path apiSrc = base.resolve(\"api-src\");\n+        tb.writeJavaFiles(apiSrc,\n+                          \"\"\"\n+                          package preview.api;\n+                          public class OuterClass {\n+                              @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface OuterIntf {\n+                              @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                              public void test();\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package preview.api;\n+                          public interface OuterIntfDef {\n+                              @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.TEST)\n+                              public default void test() {};\n+                          }\n+                          \"\"\");\n+        Path apiClasses = base.resolve(\"api-classes\");\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(apiClasses)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"--patch-module\", \"java.base=\" + apiSrc.toString(),\n+                         \"-Werror\")\n+                .files(tb.findJavaFiles(apiSrc))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.writeJavaFiles(testSrc,\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterClass;\n+                          public class UseClass1 extends OuterClass {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass11 extends UseClass1 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass12P extends UseClass1 {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterClass;\n+                          public class UseClass2P extends OuterClass {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass21 extends UseClass2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass22 extends UseClass2P {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntf;\n+                          public class UseIntf2P implements OuterIntf {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntf21 extends UseIntf2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntf22 extends UseIntf2P {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public class UseIntfDef1 implements OuterIntfDef {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef11 extends UseIntfDef1 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef12P extends UseIntfDef1 {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public class UseIntfDef2P implements OuterIntfDef {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef21 extends UseIntfDef2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef22 extends UseIntfDef2P {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntf;\n+                          public interface IUseIntf1 extends OuterIntf {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntf;\n+                          public interface IUseIntf2P extends OuterIntf {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public interface IUseIntfDef1 extends OuterIntfDef {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public interface IUseIntfDef2P extends OuterIntfDef {\n+                              public default void test() {}\n+                          }\n+                          \"\"\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"-XDrawDiagnostics\")\n+                .files(tb.findJavaFiles(testSrc))\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected =\n+                List.of(\"IUseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseClass2P.java:4:17: compiler.err.is.preview: test()\",\n+                        \"UseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseSubClass12P.java:3:17: compiler.err.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:2:8: compiler.err.is.preview: test()\",\n+                        \"7 errors\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        Path[] sources = tb.findJavaFiles(testSrc);\n+\n+        log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .outdir(testClasses)\n+                .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                         \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                         \"--enable-preview\",\n+                         \"-Xlint:preview\",\n+                         \"-source\", String.valueOf(Runtime.version().feature()),\n+                         \"-XDrawDiagnostics\")\n+                .files(sources)\n+                .run(Task.Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        expected =\n+                List.of(\"IUseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseClass2P.java:4:17: compiler.warn.is.preview: test()\",\n+                        \"UseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseSubClass12P.java:3:17: compiler.warn.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:2:8: compiler.warn.is.preview: test()\",\n+                        \"7 warnings\");\n+\n+        if (!log.equals(expected))\n+            throw new Exception(\"expected output not found\" + log);\n+\n+        int classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+        if (sources.length != classfileCount) {\n+            throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+        }\n+\n+        for (Path source : sources) {\n+            log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                    .classpath(testClasses)\n+                    .outdir(testClasses)\n+                    .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                             \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                             \"--enable-preview\",\n+                             \"-Xlint:preview\",\n+                             \"-source\", String.valueOf(Runtime.version().feature()),\n+                             \"-XDrawDiagnostics\")\n+                    .files(source)\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            boolean preview = source.getFileName().toString().contains(\"P.\");\n+            boolean hasWarning = false;\n+            for (String line : log) {\n+                hasWarning |= line.contains(source.getFileName().toString()) &&\n+                              line.contains(\"compiler.warn.is.preview: test()\");\n+            }\n+\n+            if (preview != hasWarning)\n+                throw new Exception(\"expected \" + (preview ? \"preview\" : \"not preview\") +\n+                                    \"but got \" + (hasWarning ? \"warning\" : \"no warning\") +\n+                                    \"in: \" + log);\n+\n+            classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+            if (sources.length != classfileCount) {\n+                throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+            }\n+        }\n+    }\n+\n+    private int verifyPreviewClassfiles(Path directory) throws Exception {\n+        Path[] classfiles = tb.findFiles(\"class\", directory);\n+\n+        for (Path classfile : classfiles) {\n+            boolean preview = classfile.getFileName().toString().contains(\"P.\");\n+\n+            checkPreviewClassfile(classfile, preview);\n+        }\n+\n+        return classfiles.length;\n+    }\n+\n+    private void checkPreviewClassfile(Path p, boolean preview) throws Exception {\n+        try (InputStream in = Files.newInputStream(p)) {\n+            ClassFile cf = ClassFile.read(in);\n+            if (preview && cf.minor_version != 65535) {\n+                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version + \" for: \" + p.toString());\n+            } else if (!preview && cf.minor_version != 0) {\n+                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version + \" for: \" + p.toString());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":333,"deletions":0,"binary":false,"changes":333,"status":"added"}]}