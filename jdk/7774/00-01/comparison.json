{"files":[{"patch":"@@ -155,1 +155,0 @@\n-            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1831,1 +1831,3 @@\n-        checkPreview(tree.pos(), m, other);\n+        if (shouldCheckPreview(m, other, origin)) {\n+            checkPreview(tree.pos(), m, other);\n+        }\n@@ -1907,0 +1909,17 @@\n+        private boolean shouldCheckPreview(MethodSymbol m, MethodSymbol other, ClassSymbol origin) {\n+            if (m.owner != origin ||\n+                \/\/performance - only do the expensive checks when the overridden method is a Preview API:\n+                (other.flags() & PREVIEW_API) == 0) {\n+                return false;\n+            }\n+\n+            for (Symbol s : types.membersClosure(origin.type, false).getSymbolsByName(m.name)) {\n+                if (m != s && m.overrides(s, origin, types, false)) {\n+                    \/\/only check if the preview only if \"m\" immediatelly overrides \"other\"\n+                    \/\/without intermediate methods:\n+                    return s == other;\n+                }\n+            }\n+\n+            return false;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -112,0 +112,11 @@\n+                          public class UseSubClass11 extends UseClass1 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass12P extends UseClass1 {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n@@ -113,1 +124,12 @@\n-                          public class UseClass2 extends OuterClass {\n+                          public class UseClass2P extends OuterClass {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass21 extends UseClass2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubClass22 extends UseClass2P {\n@@ -120,1 +142,12 @@\n-                          public class UseIntf2 implements OuterIntf {\n+                          public class UseIntf2P implements OuterIntf {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntf21 extends UseIntf2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntf22 extends UseIntf2P {\n@@ -132,0 +165,11 @@\n+                          public class UseSubIntfDef11 extends UseIntfDef1 {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef12P extends UseIntfDef1 {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n@@ -133,1 +177,1 @@\n-                          public class UseIntfDef2 implements OuterIntfDef {\n+                          public class UseIntfDef2P implements OuterIntfDef {\n@@ -136,0 +180,37 @@\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef21 extends UseIntfDef2P {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class UseSubIntfDef22 extends UseIntfDef2P {\n+                              public void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntf;\n+                          public interface IUseIntf1 extends OuterIntf {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntf;\n+                          public interface IUseIntf2P extends OuterIntf {\n+                              public default void test() {}\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public interface IUseIntfDef1 extends OuterIntfDef {\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          import preview.api.OuterIntfDef;\n+                          public interface IUseIntfDef2P extends OuterIntfDef {\n+                              public default void test() {}\n+                          }\n@@ -149,4 +230,8 @@\n-                List.of(\"UseClass2.java:4:17: compiler.err.is.preview: test()\",\n-                        \"UseIntf2.java:3:8: compiler.err.is.preview: test()\",\n-                        \"UseIntfDef2.java:3:8: compiler.err.is.preview: test()\",\n-                        \"3 errors\");\n+                List.of(\"IUseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseClass2P.java:4:17: compiler.err.is.preview: test()\",\n+                        \"UseIntf2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseIntfDef2P.java:3:8: compiler.err.is.preview: test()\",\n+                        \"UseSubClass12P.java:3:17: compiler.err.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:2:8: compiler.err.is.preview: test()\",\n+                        \"7 errors\");\n@@ -157,0 +242,2 @@\n+        Path[] sources = tb.findJavaFiles(testSrc);\n+\n@@ -165,1 +252,1 @@\n-                .files(tb.findJavaFiles(testSrc))\n+                .files(sources)\n@@ -171,4 +258,8 @@\n-                List.of(\"UseClass2.java:4:17: compiler.warn.is.preview: test()\",\n-                        \"UseIntf2.java:3:8: compiler.warn.is.preview: test()\",\n-                        \"UseIntfDef2.java:3:8: compiler.warn.is.preview: test()\",\n-                        \"3 warnings\");\n+                List.of(\"IUseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"IUseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseClass2P.java:4:17: compiler.warn.is.preview: test()\",\n+                        \"UseIntf2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseIntfDef2P.java:3:8: compiler.warn.is.preview: test()\",\n+                        \"UseSubClass12P.java:3:17: compiler.warn.is.preview: test()\",\n+                        \"UseSubIntfDef12P.java:2:8: compiler.warn.is.preview: test()\",\n+                        \"7 warnings\");\n@@ -179,10 +270,51 @@\n-        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"UseClass1.class\"),\n-                              false);\n-        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"UseClass2.class\"),\n-                              true);\n-        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"UseIntf2.class\"),\n-                              true);\n-        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"UseIntfDef1.class\"),\n-                              false);\n-        checkPreviewClassfile(testClasses.resolve(\"test\").resolve(\"UseIntfDef2.class\"),\n-                              true);\n+        int classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+        if (sources.length != classfileCount) {\n+            throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+        }\n+\n+        for (Path source : sources) {\n+            log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                    .classpath(testClasses)\n+                    .outdir(testClasses)\n+                    .options(\"--patch-module\", \"java.base=\" + apiClasses.toString(),\n+                             \"--add-exports\", \"java.base\/preview.api=ALL-UNNAMED\",\n+                             \"--enable-preview\",\n+                             \"-Xlint:preview\",\n+                             \"-source\", String.valueOf(Runtime.version().feature()),\n+                             \"-XDrawDiagnostics\")\n+                    .files(source)\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll()\n+                    .getOutputLines(Task.OutputKind.DIRECT);\n+\n+            boolean preview = source.getFileName().toString().contains(\"P.\");\n+            boolean hasWarning = false;\n+            for (String line : log) {\n+                hasWarning |= line.contains(source.getFileName().toString()) &&\n+                              line.contains(\"compiler.warn.is.preview: test()\");\n+            }\n+\n+            if (preview != hasWarning)\n+                throw new Exception(\"expected \" + (preview ? \"preview\" : \"not preview\") +\n+                                    \"but got \" + (hasWarning ? \"warning\" : \"no warning\") +\n+                                    \"in: \" + log);\n+\n+            classfileCount = verifyPreviewClassfiles(testClasses);\n+\n+            if (sources.length != classfileCount) {\n+                throw new IllegalStateException(\"Unexpected number of classfiles: \" + classfileCount + \", number of source files: \" + sources.length);\n+            }\n+        }\n+    }\n+\n+    private int verifyPreviewClassfiles(Path directory) throws Exception {\n+        Path[] classfiles = tb.findFiles(\"class\", directory);\n+\n+        for (Path classfile : classfiles) {\n+            boolean preview = classfile.getFileName().toString().contains(\"P.\");\n+\n+            checkPreviewClassfile(classfile, preview);\n+        }\n+\n+        return classfiles.length;\n@@ -195,1 +327,1 @@\n-                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version);\n+                throw new IllegalStateException(\"Expected preview class, but got: \" + cf.minor_version + \" for: \" + p.toString());\n@@ -197,1 +329,1 @@\n-                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version);\n+                throw new IllegalStateException(\"Expected minor version == 0 but got: \" + cf.minor_version + \" for: \" + p.toString());\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewTest.java","additions":156,"deletions":24,"binary":false,"changes":180,"status":"modified"}]}