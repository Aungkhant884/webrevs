{"files":[{"patch":"@@ -1652,0 +1652,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1665,1 +1667,1 @@\n-        vpbroadcastq(dst, src, vlen_enc, noreg);\n+        vpbroadcastq(dst, src, vlen_enc);\n@@ -1667,1 +1669,1 @@\n-        vmovddup(dst, src, vlen_enc, noreg);\n+        vmovddup(dst, src, vlen_enc);\n@@ -1673,1 +1675,1 @@\n-        vmovddup(dst, src, vlen_enc, noreg);\n+        vmovddup(dst, src, vlen_enc);\n@@ -1677,1 +1679,1 @@\n-        vpbroadcastd(dst, src, vlen_enc, noreg);\n+        vpbroadcastd(dst, src, vlen_enc);\n@@ -1679,1 +1681,1 @@\n-        vbroadcastss(dst, src, vlen_enc, noreg);\n+        vbroadcastss(dst, src, vlen_enc);\n@@ -2398,2 +2400,2 @@\n-void C2_MacroAssembler::evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral adr, int comparison, int vector_len, Register rscratch) {\n-  assert(rscratch != noreg || always_reachable(adr), \"missing\");\n+void C2_MacroAssembler::evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral src2, int comparison, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src2), \"missing\");\n@@ -2404,1 +2406,1 @@\n-      evpcmpb(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpb(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2408,1 +2410,1 @@\n-      evpcmpw(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpw(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2412,1 +2414,1 @@\n-      evpcmpd(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpd(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2416,1 +2418,1 @@\n-      evpcmpq(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpq(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -4362,1 +4364,1 @@\n-                                                            Register scratch, AddressLiteral float_sign_flip,\n+                                                            Register rscratch, AddressLiteral float_sign_flip,\n@@ -4365,1 +4367,1 @@\n-  vmovdqu(xtmp1, float_sign_flip, vec_enc, scratch);\n+  vmovdqu(xtmp1, float_sign_flip, vec_enc, rscratch);\n@@ -4391,1 +4393,1 @@\n-                                                             Register scratch, AddressLiteral float_sign_flip,\n+                                                             Register rscratch, AddressLiteral float_sign_flip,\n@@ -4394,1 +4396,1 @@\n-  evmovdqul(xtmp1, k0, float_sign_flip, false, vec_enc, scratch);\n+  evmovdqul(xtmp1, k0, float_sign_flip, false, vec_enc, rscratch);\n@@ -4413,1 +4415,1 @@\n-                                                             Register scratch, AddressLiteral double_sign_flip,\n+                                                             Register rscratch, AddressLiteral double_sign_flip,\n@@ -4415,0 +4417,2 @@\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4416,1 +4420,1 @@\n-  evmovdquq(xtmp1, k0, double_sign_flip, false, vec_enc, scratch);\n+  evmovdquq(xtmp1, k0, double_sign_flip, false, vec_enc, rscratch);\n@@ -4434,1 +4438,1 @@\n-                                                                     Register scratch, AddressLiteral float_sign_flip,\n+                                                                     Register rscratch, AddressLiteral float_sign_flip,\n@@ -4437,1 +4441,1 @@\n-  evmovdquq(xtmp1, k0, float_sign_flip, false, vec_enc, scratch);\n+  evmovdquq(xtmp1, k0, float_sign_flip, false, vec_enc, rscratch);\n@@ -4463,1 +4467,1 @@\n-                                                              Register scratch, AddressLiteral double_sign_flip,\n+                                                              Register rscratch, AddressLiteral double_sign_flip,\n@@ -4465,0 +4469,2 @@\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4466,1 +4472,1 @@\n-  evmovdqul(xtmp1, k0, double_sign_flip, false, vec_enc, scratch);\n+  evmovdqul(xtmp1, k0, double_sign_flip, false, vec_enc, rscratch);\n@@ -4493,1 +4499,1 @@\n-                                                                    XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, Register scratch,\n+                                                                    XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, Register rscratch,\n@@ -4498,1 +4504,1 @@\n-  movdqu(xtmp1, float_sign_flip, scratch);\n+  movdqu(xtmp1, float_sign_flip, rscratch);\n@@ -4534,1 +4540,2 @@\n-                                           AddressLiteral float_sign_flip, Register scratch, int vec_enc) {\n+                                           AddressLiteral float_sign_flip, Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n@@ -4538,1 +4545,1 @@\n-  vector_narrow_cast_double_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, xtmp5, scratch,\n+  vector_narrow_cast_double_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, xtmp5, rscratch,\n@@ -4542,1 +4549,1 @@\n-    vector_narrow_cast_int_to_subword(to_elem_bt, dst, xtmp4, xtmp2, scratch, Assembler::AVX_128bit);\n+    vector_narrow_cast_int_to_subword(to_elem_bt, dst, xtmp4, xtmp2, rscratch, Assembler::AVX_128bit);\n@@ -4548,1 +4555,2 @@\n-                                            Register scratch, int vec_enc) {\n+                                            Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n@@ -4550,1 +4558,1 @@\n-  vector_narrow_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  vector_narrow_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, rscratch, double_sign_flip, vec_enc);\n@@ -4565,1 +4573,2 @@\n-                                            Register scratch, int vec_enc) {\n+                                            Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n@@ -4567,1 +4576,1 @@\n-  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, rscratch, double_sign_flip, vec_enc);\n@@ -4571,1 +4580,1 @@\n-                                                          XMMRegister xtmp, Register scratch, int vec_enc) {\n+                                                          XMMRegister xtmp, Register rscratch, int vec_enc) {\n@@ -4574,1 +4583,1 @@\n-      vpand(dst, dst, ExternalAddress(StubRoutines::x86::vector_int_to_short_mask()), vec_enc, scratch);\n+      vpand(dst, dst, ExternalAddress(StubRoutines::x86::vector_int_to_short_mask()), vec_enc, rscratch);\n@@ -4581,1 +4590,1 @@\n-      vpand(dst, dst, ExternalAddress(StubRoutines::x86::vector_int_to_byte_mask()), vec_enc, scratch);\n+      vpand(dst, dst, ExternalAddress(StubRoutines::x86::vector_int_to_byte_mask()), vec_enc, rscratch);\n@@ -4588,3 +4597,1 @@\n-    default:\n-      fatal(\"Unsupported type %s\", type2name(to_elem_bt));\n-      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n@@ -4596,1 +4603,2 @@\n-                                           AddressLiteral float_sign_flip, Register scratch, int vec_enc) {\n+                                           AddressLiteral float_sign_flip, Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n@@ -4600,1 +4608,1 @@\n-  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, scratch, float_sign_flip, vec_enc);\n+  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, rscratch, float_sign_flip, vec_enc);\n@@ -4603,1 +4611,1 @@\n-    vector_narrow_cast_int_to_subword(to_elem_bt, dst, xtmp2, xtmp4, scratch, vec_enc);\n+    vector_narrow_cast_int_to_subword(to_elem_bt, dst, xtmp2, xtmp4, rscratch, vec_enc);\n@@ -4609,1 +4617,2 @@\n-                                            Register scratch, int vec_enc) {\n+                                            Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n@@ -4613,1 +4622,1 @@\n-  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, float_sign_flip, vec_enc);\n+  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, rscratch, float_sign_flip, vec_enc);\n@@ -4623,3 +4632,1 @@\n-    default:\n-      fatal(\"Unsupported type %s\", type2name(to_elem_bt));\n-      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n@@ -4631,1 +4638,3 @@\n-                                            Register scratch, int vec_enc) {\n+                                            Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4633,1 +4642,1 @@\n-  vector_cast_float_to_long_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  vector_cast_float_to_long_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, rscratch, double_sign_flip, vec_enc);\n@@ -4639,1 +4648,2 @@\n-                                            Register scratch, int vec_enc) {\n+                                            Register rscratch, int vec_enc) {\n+  assert(rscratch != noreg || always_reachable(sign_flip), \"missing\");\n@@ -4641,1 +4651,1 @@\n-    vector_castD2L_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, sign_flip, scratch, vec_enc);\n+    vector_castD2L_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, sign_flip, rscratch, vec_enc);\n@@ -4656,3 +4666,1 @@\n-      default:\n-        fatal(\"Unsupported type %s\", type2name(to_elem_bt));\n-        break;\n+      default: assert(false, \"%s\", type2name(to_elem_bt));\n@@ -4662,1 +4670,1 @@\n-    vector_castD2I_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, sign_flip, scratch, vec_enc);\n+    vector_castD2I_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, sign_flip, rscratch, vec_enc);\n@@ -4672,3 +4680,1 @@\n-      default:\n-        fatal(\"Unsupported type %s\", type2name(to_elem_bt));\n-        break;\n+      default: assert(false, \"%s\", type2name(to_elem_bt));\n@@ -4680,3 +4686,3 @@\n-void C2_MacroAssembler::vector_round_double_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                 KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                                 AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_double_evex(XMMRegister dst, XMMRegister src,\n+                                                 AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                                 Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2) {\n@@ -4685,4 +4691,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  mov64(scratch, julong_cast(0.5L));\n-  evpbroadcastq(xtmp1, scratch, vec_enc);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  mov64(tmp, julong_cast(0.5L));\n+  evpbroadcastq(xtmp1, tmp, vec_enc);\n@@ -4691,2 +4697,5 @@\n-  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+\n+  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, tmp \/*rscratch*\/,\n+                                        double_sign_flip, vec_enc);;\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4695,3 +4704,3 @@\n-void C2_MacroAssembler::vector_round_float_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                KRegister ktmp1, KRegister ktmp2, AddressLiteral float_sign_flip,\n-                                                AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_float_evex(XMMRegister dst, XMMRegister src,\n+                                                AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                                Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2) {\n@@ -4700,4 +4709,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  movl(scratch, jint_cast(0.5));\n-  movq(xtmp1, scratch);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  movl(tmp, jint_cast(0.5));\n+  movq(xtmp1, tmp);\n@@ -4707,2 +4716,4 @@\n-  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, float_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, tmp \/*rscratch*\/,\n+                                       float_sign_flip, vec_enc);\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4711,3 +4722,3 @@\n-void C2_MacroAssembler::vector_round_float_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                               XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n-                                               AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_float_avx(XMMRegister dst, XMMRegister src,\n+                                               AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                               Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4) {\n@@ -4716,4 +4727,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  movl(scratch, jint_cast(0.5));\n-  movq(xtmp1, scratch);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  movl(tmp, jint_cast(0.5));\n+  movq(xtmp1, tmp);\n@@ -4723,2 +4734,3 @@\n-  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, scratch, float_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, tmp \/*rscratch*\/, float_sign_flip, vec_enc);\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4726,1 +4738,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -5286,2 +5298,5 @@\n-void C2_MacroAssembler::vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src,\n-                                                XMMRegister xtmp, AddressLiteral mask, Register rtmp, int vec_enc) {\n+void C2_MacroAssembler::vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, AddressLiteral mask, int vec_enc,\n+                                                XMMRegister xtmp, Register rscratch) {\n+  assert(VM_Version::supports_gfni(), \"\");\n+  assert(rscratch != noreg || always_reachable(mask), \"missing\");\n+\n@@ -5290,2 +5305,1 @@\n-  assert(VM_Version::supports_gfni(), \"\");\n-  vpbroadcastq(xtmp, mask, vec_enc, rtmp);\n+  vpbroadcastq(xtmp, mask, vec_enc, rscratch);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":101,"deletions":87,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -151,2 +151,2 @@\n-  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral adr, int comparison, int vector_len, Register rscratch = rscratch1);\n-  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, XMMRegister src2, int comparison, int vector_len);\n+  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, XMMRegister    src2, int comparison, int vector_len);\n+  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral src2, int comparison, int vector_len, Register rscratch = noreg);\n@@ -155,0 +155,3 @@\n+  void load_vector(XMMRegister dst, Address        src, int vlen_in_bytes);\n+  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n+\n@@ -156,1 +159,1 @@\n-  void load_vector_mask(KRegister dst, XMMRegister src, XMMRegister xtmp, bool novlbwdq, int vlen_enc);\n+  void load_vector_mask(KRegister   dst, XMMRegister src, XMMRegister xtmp, bool novlbwdq, int vlen_enc);\n@@ -158,2 +161,0 @@\n-  void load_vector(XMMRegister dst, Address src, int vlen_in_bytes);\n-  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n@@ -312,1 +313,1 @@\n-                          AddressLiteral float_sign_flip, Register scratch, int vec_enc);\n+                          AddressLiteral float_sign_flip, Register rscratch, int vec_enc);\n@@ -316,1 +317,1 @@\n-                           Register scratch, int vec_enc);\n+                           Register rscratch, int vec_enc);\n@@ -320,1 +321,1 @@\n-                           Register scratch, int vec_enc);\n+                           Register rscratch, int vec_enc);\n@@ -324,1 +325,1 @@\n-                           Register scratch, int vec_enc);\n+                           Register rscratch, int vec_enc);\n@@ -328,1 +329,1 @@\n-                           Register scratch, int vec_enc);\n+                           Register rscratch, int vec_enc);\n@@ -332,1 +333,1 @@\n-                           Register scratch, int vec_enc);\n+                           Register rscratch, int vec_enc);\n@@ -336,1 +337,1 @@\n-                          AddressLiteral float_sign_flip, Register scratch, int vec_enc);\n+                          AddressLiteral float_sign_flip, Register rscratch, int vec_enc);\n@@ -341,1 +342,1 @@\n-                                         XMMRegister xtmp, Register scratch, int vec_enc);\n+                                         XMMRegister xtmp, Register rscratch, int vec_enc);\n@@ -347,1 +348,1 @@\n-                                                   XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, Register scratch,\n+                                                   XMMRegister xtmp3, XMMRegister xtmp4, XMMRegister xtmp5, Register rscratch,\n@@ -352,1 +353,1 @@\n-                                                    Register scratch, AddressLiteral float_sign_flip,\n+                                                    Register rscratch, AddressLiteral float_sign_flip,\n@@ -356,1 +357,1 @@\n-                                             KRegister ktmp1, KRegister ktmp2, Register scratch, AddressLiteral double_sign_flip,\n+                                             KRegister ktmp1, KRegister ktmp2, Register rscratch, AddressLiteral double_sign_flip,\n@@ -360,1 +361,1 @@\n-                                            KRegister ktmp1, KRegister ktmp2, Register scratch, AddressLiteral float_sign_flip,\n+                                            KRegister ktmp1, KRegister ktmp2, Register rscratch, AddressLiteral float_sign_flip,\n@@ -365,1 +366,1 @@\n-                                                    Register scratch, AddressLiteral double_sign_flip,\n+                                                    Register rscratch, AddressLiteral double_sign_flip,\n@@ -370,1 +371,1 @@\n-                                           Register scratch, AddressLiteral float_sign_flip,\n+                                           Register rscratch, AddressLiteral float_sign_flip,\n@@ -374,3 +375,2 @@\n-  void vector_round_double_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n+  void vector_round_double_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2);\n@@ -378,3 +378,2 @@\n-  void vector_round_float_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                               KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                               AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n+  void vector_round_float_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                               Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2);\n@@ -382,4 +381,3 @@\n-  void vector_round_float_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                              XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n-                              AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n-#endif\n+  void vector_round_float_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                              Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4);\n+#endif \/\/ _LP64\n@@ -410,2 +408,2 @@\n-  void vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp,\n-                               AddressLiteral mask, Register rtmp, int vec_enc);\n+  void vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, AddressLiteral mask, int vec_enc,\n+                               XMMRegister xtmp, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":29,"deletions":31,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1346,1 +1346,1 @@\n-  __ pushptr(here.addr());\n+  __ pushptr(here.addr(), noreg);\n@@ -7436,1 +7436,1 @@\n-instruct vround_float_avx(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_avx(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, rFlagsReg cr) %{\n@@ -7441,2 +7441,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $xtmp4 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $xtmp3, $xtmp4 as TEMP\" %}\n@@ -7446,3 +7446,3 @@\n-    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                              $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister,\n-                              ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister,\n+                              ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), new_mxcsr, vlen_enc,\n+                              $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister);\n@@ -7453,1 +7453,1 @@\n-instruct vround_float_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_evex(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rFlagsReg cr) %{\n@@ -7458,2 +7458,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $ktmp1, $ktmp2 as TEMP\" %}\n@@ -7463,3 +7463,3 @@\n-    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                               $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                               ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                               ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), new_mxcsr, vlen_enc,\n+                               $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7470,1 +7470,1 @@\n-instruct vround_reg_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_reg_evex(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rFlagsReg cr) %{\n@@ -7473,2 +7473,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_long $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2,  KILL cr);\n+  format %{ \"vector_round_long $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $ktmp1, $ktmp2 as TEMP\" %}\n@@ -7478,3 +7478,3 @@\n-    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                                $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                                ExternalAddress(vector_double_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                                ExternalAddress(StubRoutines::x86::vector_double_sign_flip()), new_mxcsr, vlen_enc,\n+                                $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7484,1 +7484,3 @@\n-#endif\n+\n+#endif \/\/ _LP64\n+\n@@ -9377,2 +9379,2 @@\n-    __ vector_reverse_bit_gfni(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister,\n-                               addr, noreg, vec_enc);\n+    __ vector_reverse_bit_gfni(bt, $dst$$XMMRegister, $src$$XMMRegister, addr, vec_enc,\n+                               $xtmp$$XMMRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"}]}