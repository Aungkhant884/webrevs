{"files":[{"patch":"@@ -89,0 +89,1 @@\n+import java.util.stream.Stream;\n@@ -1038,3 +1039,2 @@\n-                    try {\n-                        Files.list(CONF_PATH)\n-                            .map(p -> p.getFileName().toString())\n+                    try (Stream<Path> stream = Files.list(CONF_PATH)) {\n+                        stream.map(p -> p.getFileName().toString())\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahChronology.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.stream.Stream;\n@@ -257,9 +258,12 @@\n-                    Files.walk(module).filter(Files::isDirectory).forEach((p) -> {\n-                        p = module.relativize(p);\n-                        String pkgName = slashesToDots(p.toString());\n-                        \/\/ skip META-INFO and empty strings\n-                        if (!pkgName.isEmpty() && !pkgName.startsWith(\"META-INF\")) {\n-                            List<String> moduleNames = packageToModules.get(pkgName);\n-                            if (moduleNames == null) {\n-                                moduleNames = new ArrayList<>();\n-                                packageToModules.put(pkgName, moduleNames);\n+                    try (Stream<Path> contentsStream = Files.walk(module)) {\n+                        contentsStream.filter(Files::isDirectory).forEach((p) -> {\n+                            p = module.relativize(p);\n+                            String pkgName = slashesToDots(p.toString());\n+                            \/\/ skip META-INF and empty strings\n+                            if (!pkgName.isEmpty() && !pkgName.startsWith(\"META-INF\")) {\n+                                List<String> moduleNames = packageToModules.get(pkgName);\n+                                if (moduleNames == null) {\n+                                    moduleNames = new ArrayList<>();\n+                                    packageToModules.put(pkgName, moduleNames);\n+                                }\n+                                moduleNames.add(moduleName);\n@@ -267,3 +271,2 @@\n-                            moduleNames.add(moduleName);\n-                        }\n-                    });\n+                        });\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jrtfs\/ExplodedImage.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.stream.Stream;\n@@ -117,3 +118,3 @@\n-        try {\n-            byte[] buf = new byte[32*1024];\n-            reader.list().sorted().forEach(rn -> {\n+        byte[] buf = new byte[32*1024];\n+        try (Stream<String> stream = reader.list()) {\n+            stream.sorted().forEach(rn -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleHashes.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -134,5 +134,5 @@\n-                    Files.find(top, Integer.MAX_VALUE,\n-                               ((path, attrs) -> attrs.isRegularFile()))\n-                            .filter(path -> (!isAutomatic\n-                                    || path.toString().endsWith(\".class\"))\n-                                    && !isHidden(path))\n+                    try (Stream<Path> stream = Files.find(top, Integer.MAX_VALUE,\n+                            ((path, attrs) -> attrs.isRegularFile()))) {\n+                        stream.filter(path -> (!isAutomatic\n+                                      || path.toString().endsWith(\".class\"))\n+                                      && !isHidden(path))\n@@ -142,0 +142,1 @@\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePatcher.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.util.stream.Stream;\n@@ -666,7 +667,6 @@\n-        try {\n-            return Files.find(dir, Integer.MAX_VALUE,\n-                    ((path, attrs) -> attrs.isRegularFile() && !isHidden(path)))\n-                    .map(path -> dir.relativize(path))\n-                    .map(path -> toPackageName(path, separator))\n-                    .flatMap(Optional::stream)\n-                    .collect(Collectors.toSet());\n+        try (Stream<Path> stream = Files.find(dir, Integer.MAX_VALUE,\n+                (path, attrs) -> attrs.isRegularFile() && !isHidden(path))) {\n+            return stream.map(dir::relativize)\n+                .map(path -> toPackageName(path, separator))\n+                .flatMap(Optional::stream)\n+                .collect(Collectors.toSet());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePath.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}