{"files":[{"patch":"@@ -1040,1 +1040,1 @@\n-                            stream.map(p -> p.getFileName().toString())\n+                        stream.map(p -> p.getFileName().toString())\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahChronology.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,12 +118,8 @@\n-        try {\n-            byte[] buf = new byte[32*1024];\n-            try (Stream<String> stream = reader.list()) {\n-                stream.sorted().forEach(rn -> {\n-                    md.update(rn.getBytes(StandardCharsets.UTF_8));\n-                    try (InputStream in = reader.open(rn).orElseThrow()) {\n-                        int n;\n-                        while ((n = in.read(buf)) > 0) {\n-                            md.update(buf, 0, n);\n-                        }\n-                    } catch (IOException ioe) {\n-                        throw new UncheckedIOException(ioe);\n+        byte[] buf = new byte[32*1024];\n+        try (Stream<String> stream = reader.list()) {\n+            stream.sorted().forEach(rn -> {\n+                md.update(rn.getBytes(StandardCharsets.UTF_8));\n+                try (InputStream in = reader.open(rn).orElseThrow()) {\n+                    int n;\n+                    while ((n = in.read(buf)) > 0) {\n+                        md.update(buf, 0, n);\n@@ -131,1 +127,4 @@\n-                });\n+                } catch (IOException ioe) {\n+                    throw new UncheckedIOException(ioe);\n+                }\n+            });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleHashes.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -136,6 +136,6 @@\n-                            stream.filter(path -> (!isAutomatic\n-                                || path.toString().endsWith(\".class\"))\n-                                && !isHidden(path))\n-                                .map(path -> toPackageName(top, path))\n-                                .filter(Checks::isPackageName)\n-                                .forEach(packages::add);\n+                        stream.filter(path -> (!isAutomatic\n+                            || path.toString().endsWith(\".class\"))\n+                            && !isHidden(path))\n+                            .map(path -> toPackageName(top, path))\n+                            .filter(Checks::isPackageName)\n+                            .forEach(packages::add);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePatcher.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -667,2 +667,2 @@\n-        try (Stream<Path> stream =\n-                Files.find(dir, Integer.MAX_VALUE, (path, attrs) -> attrs.isRegularFile() && !isHidden(path))) {\n+        try (Stream<Path> stream = Files.find(dir, Integer.MAX_VALUE,\n+                (path, attrs) -> attrs.isRegularFile() && !isHidden(path))) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}