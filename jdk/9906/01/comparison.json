{"files":[{"patch":"@@ -0,0 +1,230 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+\/*\n+ * @test\n+ * @bug 8289510\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng\/othervm xpath.XPathExpNamespaceTest\n+ * @summary Tests for XPath namespace axis specifier.\n+ *\/\n+public class XPathExpNamespaceTest extends XPathTestBase {\n+    static final String RAW_XML\n+            = \"<Customers xmlns:foo=\\\"www.foo.com\\\">\"\n+            + \"    <Customer id=\\\"x1\\\">\"\n+            + \"        <Name>name1<\/Name>\"\n+            + \"        <Phone>1111111111<\/Phone>\"\n+            + \"        <Email id=\\\"x\\\">123@xyz.com<\/Email>\"\n+            + \"        <Address>\"\n+            + \"            <Street xmlns:street=\\\"www.street.com\\\" xmlns:bstreet=\\\"www.bstreet.com\\\">1111 111st ave<\/Street>\"\n+            + \"            <City>The City<\/City>\"\n+            + \"            <State>The State<\/State>\"\n+            + \"        <\/Address>\"\n+            + \"    <\/Customer>\"\n+            + \"    <Customer id=\\\"x2\\\" xmlns:dog=\\\"www.pets.com\\\">\"\n+            + \"        <Name>name2<\/Name>\"\n+            + \"        <Phone>2222222222<\/Phone>\"\n+            + \"        <Email id=\\\"y\\\">123@xyz.com<\/Email>\"\n+            + \"        <dog:Address>\"\n+            + \"            <Street>2222 222nd ave<\/Street>\"\n+            + \"            <City>The City<\/City>\"\n+            + \"            <State>The State<\/State>\"\n+            + \"        <\/dog:Address>\"\n+            + \"    <\/Customer>\"\n+            + \"    <Customer id=\\\"x3\\\">\"\n+            + \"        <Name>name3<\/Name>\"\n+            + \"        <Phone>3333333333<\/Phone>\"\n+            + \"        <Email id=\\\"z\\\">123@xyz.com<\/Email>\"\n+            + \"        <Address>\"\n+            + \"            <Street>3333 333rd ave<\/Street>\"\n+            + \"            <City>The City<\/City>\"\n+            + \"            <State>The State<\/State>\"\n+            + \"        <\/Address>\"\n+            + \"    <\/Customer>\"\n+            + \"    <foo:Customer foo:id=\\\"x1\\\">\"\n+            + \"        <foo:Name>name1<\/foo:Name>\"\n+            + \"        <foo:Phone>1111111111<\/foo:Phone>\"\n+            + \"        <foo:Email foo:id=\\\"x\\\">123@xyz.com<\/foo:Email>\"\n+            + \"        <foo:Address>\"\n+            + \"            <foo:Street>1111 111st ave<\/foo:Street>\"\n+            + \"            <foo:City>The City<\/foo:City>\"\n+            + \"            <foo:State>The State<\/foo:State>\"\n+            + \"        <\/foo:Address>\"\n+            + \"    <\/foo:Customer>\"\n+            + \"    <VendCustomer id=\\\"vx1\\\">\"\n+            + \"        <Name>name3<\/Name>\"\n+            + \"        <Phone>3333333333<\/Phone>\"\n+            + \"        <Email id=\\\"z\\\">123@xyz.com<\/Email>\"\n+            + \"        <Address>\"\n+            + \"            <Street>3333 333rd ave<\/Street>\"\n+            + \"            <City>The City<\/City>\"\n+            + \"            <State>The State<\/State>\"\n+            + \"        <\/Address>\"\n+            + \"    <\/VendCustomer>\"\n+            + \"<\/Customers>\";\n+\n+    \/*\n+     * DataProvider: provides XPath namespace expressions and expected local name, expected namespace prefix, expected\n+     * namespace node name, and expected namespace Uri.\n+     *\/\n+    @DataProvider(name = \"namespaceXpath\")\n+    public Object[][] getNamespaceXpathExpression() {\n+        return new Object[][] {\n+                {\"\/Customers\/namespace::foo\", \"foo\", \"xmlns\", \"xmlns:foo\",\"www.foo.com\"},\n+                {\"\/Customers\/namespace::xml\", \"xml\", \"xml\", \"xmlns:xml\", \"http:\/\/www.w3.org\/XML\/1998\/namespace\"},\n+                {\"\/\/Customer\/Name\/namespace::foo\", \"foo\", \"xmlns\", \"xmlns:foo\",\"www.foo.com\"},\n+                {\"\/Customers\/Customer\/Name\/namespace::foo\", \"foo\", \"xmlns\", \"xmlns:foo\",\"www.foo.com\"},\n+                {\"\/\/Customer\/Name\/namespace::xml\", \"xml\", \"xml\", \"xmlns:xml\",\"http:\/\/www.w3.org\/XML\/1998\/namespace\"},\n+                {\"\/Customers\/Customer\/Name\/namespace::xml\", \"xml\", \"xml\", \"xmlns:xml\",\"http:\/\/www.w3.org\/XML\/1998\/namespace\"},\n+                {\"\/\/Customer\/Name\/namespace::dog\", \"dog\", \"xmlns\", \"xmlns:dog\",\"www.pets.com\"},\n+                {\"\/Customers\/Customer\/Name\/namespace::dog\", \"dog\", \"xmlns\", \"xmlns:dog\",\"www.pets.com\"}\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath namespace expressions which should provide no namespace nodes.\n+     *\/\n+    @DataProvider(name = \"namespaceXpathEmpty\")\n+    public Object[][] getNamespaceXpathExpressionEmpty() {\n+        return new Object[][] {\n+                {\"\/\/VendCustomer\/Name\/namespace::dog\"},\n+                {\"\/Customers\/VendCustomer\/Name\/namespace::dog\"},\n+                {\"\/\/Customer\/Name\/namespace::cat\"},\n+                {\"\/Customers\/Customer\/Name\/namespace::cat\"},\n+                {\"\/\/Customer\/Address\/namespace::street\"},\n+                {\"\/Customers\/Customer\/Address\/namespace::street\"},\n+                {\"\/\/VendCustomer\/Address\/namespace::street\"},\n+                {\"\/Customers\/VendCustomer\/Address\/namespace::street\"}\n+        };\n+\n+    }\n+\n+    \/*\n+     * DataProvider: provides XPath namespace expressions and expected total number of namespace nodes count.\n+     *\/\n+    @DataProvider(name = \"namespaceXpathNodeCount\")\n+    public Object[][] getNamespaceXpathExpressionNodeCount() {\n+        return new Object[][] {\n+                {\"\/Customers\/namespace::*\", 2},\n+                {\"\/Customers\/Customer\/namespace::*\", 3},\n+                {\"\/Customers\/Customer\/Address\/namespace::*\", 2},\n+                {\"\/Customers\/Customer\/Address\/Street\/namespace::*\", 4},\n+                {\"\/Customers\/Customer\/Address\/City\/namespace::*\", 2},\n+                {\"\/Customers\/VendCustomer\/namespace::*\", 2},\n+                {\"\/Customers\/VendCustomer\/Address\/namespace::*\", 2},\n+                {\"\/Customers\/VendCustomer\/Address\/City\/namespace::*\", 2},\n+                {\"\/Customers\/Customer[@id='x1']\/namespace::*\", 2}\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider: provides node functions and expected return of different node functions.\n+     *\/\n+    @DataProvider(name = \"namespaceUsingNodeFunctions\")\n+    public Object[][] getNamespaceNodeNameAndUri() {\n+        return new Object[][] {\n+                {\"namespace-uri(\/\/www.foo.com:Customer)\",\"www.foo.com\" },\n+                {\"namespace-uri(\/\/www.pets.com:Address)\",\"www.pets.com\" },\n+                {\"namespace-uri(\/Customers\/www.foo.com:Customer)\",\"www.foo.com\" },\n+                {\"namespace-uri(\/Customers\/Customer\/www.pets.com:Address)\",\"www.pets.com\" },\n+                {\"namespace-uri(\/Customers\/VendCustomer\/Email)\",\"\" }\n+        };\n+    }\n+\n+    \/**\n+     * Verifies namespace expression retrieves different namespace nodes.\n+     * @param  exp        XPath expression.\n+     * @param  localName  expected local name of namespace node.\n+     * @param  nsPrefix   expected namespace prefix of namespace node.\n+     * @param  nsNodeName expected name of namespace node.\n+     * @param  nsUri      expected namespace Uri.\n+     * @throws XPathExpressionException\n+     *\/\n+    @Test(dataProvider = \"namespaceXpath\")\n+    public void namespaceExpTests(String exp, String localName, String nsPrefix, String nsNodeName, String nsUri) throws XPathExpressionException {\n+        Document doc = documentOf(DECLARATION + RAW_XML);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertEquals(node.getLocalName(), localName);\n+        Assert.assertEquals(node.getPrefix(), nsPrefix);\n+        Assert.assertEquals(node.getNodeName(), nsNodeName);\n+        Assert.assertEquals(node.getNodeValue(),nsUri);\n+    }\n+\n+    \/**\n+     * Verifies namespace path expression return no nodes if namespace expression context nodes don't have namespace\n+     * @param  exp     XPath expression.\n+     * @throws XPathExpressionException\n+     *\/\n+    @Test(dataProvider = \"namespaceXpathEmpty\")\n+    public void NamespaceScopeTests(String exp) throws XPathExpressionException {\n+        Document doc = documentOf(DECLARATION + RAW_XML);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node node = xPath.evaluateExpression(exp, doc, Node.class);\n+        Assert.assertNull(node);\n+    }\n+\n+    \/**\n+     * Verifies namespace path expression return namespace nodes list with correct number of nodes.\n+     * @param  exp       XPath expression.\n+     * @param  nodeCount number of namespace nodes in nodelist.\n+     * @throws XPathExpressionException\n+     *\/\n+    @Test(dataProvider = \"namespaceXpathNodeCount\")\n+    public void NamespaceNodesCountTests(String exp, int nodeCount) throws XPathExpressionException {\n+        Document doc = documentOf(DECLARATION + RAW_XML);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        NodeList nodeList = (NodeList) xPath.evaluate(exp, doc, XPathConstants.NODESET);\n+        Assert.assertEquals(nodeList.getLength(), nodeCount);\n+    }\n+\n+    \/**\n+     * Verifies namespace-uri functions returns the correct namespace uri.\n+     * @param  exp          XPath expression.\n+     * @param  expectedName number of namespace nodes in nodelist.\n+     * @throws XPathExpressionException\n+     *\/\n+    @Test(dataProvider = \"namespaceUsingNodeFunctions\")\n+    public void NamespaceNodeFunctionsTests(String exp, String expectedName) throws XPathExpressionException {\n+        Document doc = documentOf(DECLARATION + RAW_XML);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        String s = xPath.evaluateExpression(exp, doc, String.class);\n+        String s2 = (String) xPath.evaluate(exp, doc, XPathConstants.STRING);\n+        Assert.assertEquals(s, expectedName);\n+        Assert.assertEquals(s2, s);\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpNamespaceTest.java","additions":230,"deletions":0,"binary":false,"changes":230,"status":"added"}]}