{"files":[{"patch":"@@ -67,0 +67,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerResourceBundle := jvm.lib\n@@ -87,0 +88,1 @@\n+  BUILD_JDK_JTREG_EXECUTABLES_LIBS_exeNullCallerResourceBundle := -ljvm\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,0 +259,6 @@\n+ * <p>\n+ * In cases where the {@code getBundle} factory method is called from a context\n+ * where there is no caller frame on the stack (e.g. when called directly from\n+ * a JNI attached thread), the caller module is default to the unnamed module for the\n+ * {@linkplain ClassLoader#getSystemClassLoader system class loader}.\n+ *\n@@ -1508,1 +1514,2 @@\n-        return getDefaultControl(caller.getModule(), baseName);\n+        Module callerModule = getCallerModule(caller);\n+        return getDefaultControl(callerModule, baseName);\n@@ -1539,1 +1546,2 @@\n-        if (caller.getModule().isNamed()) {\n+        Module callerModule = getCallerModule(caller);\n+        if (callerModule.isNamed()) {\n@@ -1549,1 +1557,14 @@\n-        return getBundleImpl(baseName, locale, caller, caller.getClassLoader(), control);\n+        ClassLoader loader = getLoader(getCallerModule(caller));\n+        return getBundleImpl(baseName, locale, caller, loader, control);\n+    }\n+\n+    \/*\n+     * Determine the module to be used for the caller.  If\n+     * Reflection::getCallerClass is called from JNI with an empty\n+     * stack frame the caller will be null, so the system class loader unnamed\n+     * module will be used.\n+     *\/\n+    private static Module getCallerModule(Class<?> caller) {\n+        Module callerModule = (caller != null) ? caller.getModule()\n+                : ClassLoader.getSystemClassLoader().getUnnamedModule();\n+        return callerModule;\n@@ -1568,4 +1589,1 @@\n-        if (caller == null) {\n-            throw new InternalError(\"null caller\");\n-        }\n-        Module callerModule = caller.getModule();\n+        Module callerModule = getCallerModule(caller);\n@@ -1595,1 +1613,1 @@\n-        Module callerModule = caller.getModule();\n+        Module callerModule = getCallerModule(caller);\n@@ -2231,1 +2249,1 @@\n-        Class<?> caller = Reflection.getCallerClass();\n+        Module callerModule = getCallerModule(Reflection.getCallerClass());\n@@ -2233,1 +2251,1 @@\n-            key -> key.getCallerModule() == caller.getModule()\n+            key -> key.getCallerModule() == callerModule\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8280902\n+ * @summary Test uses custom launcher that starts VM using JNI that verifies\n+ *          ResourceBundle::getBundle with null caller class functions properly\n+ *          using the system class loader unnamed module.  The custom launcher\n+ *          creates a properties file and passes the VM option to the JNI\n+ *          functionality for the resource lookup.\n+ * @library \/test\/lib\n+ * @requires os.family != \"aix\"\n+ * @run main\/native NullCallerResourceBundle\n+ *\/\n+\n+\/\/ Test disabled on AIX since we cannot invoke the JVM on the primordial thread.\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Properties;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class NullCallerResourceBundle {\n+    public static void main(String[] args) throws IOException {\n+\n+        \/\/ build a properties file for the native test\n+        var propPath = Path.of(System.getProperty(\"test.classes\"), \"NullCallerResource.properties\");\n+        try (var stream = Files.newOutputStream(propPath)) {\n+            var props = new Properties();\n+            props.put(\"message\", \"Hello!\");\n+            props.save(stream, \"Test property list\");\n+        }\n+\n+        var launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerResourceBundle\");\n+        var classpathAppend = \"-Djava.class.path=\" + System.getProperty(\"test.classes\");\n+        var pb = new ProcessBuilder(launcher.toString(), classpathAppend);\n+        var env = pb.environment();\n+\n+        var libDir = Platform.libDir().toString();\n+        var vmDir = Platform.jvmLibDir().toString();\n+\n+        \/\/ set up shared library path\n+        var sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? libDir : v + File.pathSeparator + libDir);\n+        env.compute(sharedLibraryPathEnvName,\n+                (k, v) -> (v == null) ? vmDir : v + File.pathSeparator + vmDir);\n+\n+        System.out.println(\"Launching: \" + launcher + \" shared library path: \" +\n+                env.get(sharedLibraryPathEnvName));\n+        new OutputAnalyzer(pb.start())\n+                .outputTo(System.out)\n+                .errorTo(System.err)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/exeNullCallerResourceBundle\/NullCallerResourceBundle.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"jni.h\"\n+#undef NDEBUG\n+#include \"assert.h\"\n+#include \"string.h\"\n+\n+\n+\/*\n+ * The java test running this native test passes in an argument to provide as\n+ * an option for the configuration of the JVM.  The system classpath has the\n+ * classpath of the java test appended so it can pick up the resource that\n+ * was created by the java part of the test.\n+ *\/\n+int main(int argc, char** args) {\n+    JavaVM *jvm;\n+    JNIEnv *env;\n+    JavaVMInitArgs vm_args;\n+    JavaVMOption options[1];\n+    jint rc;\n+\n+    assert(argc == 2);\n+    options[0].optionString = args[1];\n+\n+    vm_args.version = JNI_VERSION_1_2;\n+    vm_args.nOptions = 1;\n+    vm_args.options = options;\n+\n+    if ((rc = JNI_CreateJavaVM(&jvm, (void**)&env, &vm_args)) != JNI_OK) {\n+        printf(\"ERROR: cannot create VM.\\n\");\n+        exit(-1);\n+    }\n+\n+    \/\/ b = ResourceBundle.getBundle(\"NullCallerResource\");\n+    jclass class_ResourceBundle = (*env)->FindClass(env, \"java\/util\/ResourceBundle\");\n+    assert(class_ResourceBundle != NULL);\n+    jmethodID mid_ResourceBundle_getBundle = (*env)->GetStaticMethodID(env, class_ResourceBundle, \"getBundle\", \"(Ljava\/lang\/String;)Ljava\/util\/ResourceBundle;\" );\n+    assert(mid_ResourceBundle_getBundle != NULL);\n+    jobject resourceName = (*env)->NewStringUTF(env, \"NullCallerResource\");\n+    assert(resourceName != NULL);\n+    jobject b = (*env)->CallStaticObjectMethod(env, class_ResourceBundle, mid_ResourceBundle_getBundle, resourceName);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling ResourceBundle::getBundle.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+\n+    \/\/ msg = b.getString(\"message\");\n+    jmethodID mid_ResourceBundle_getString = (*env)->GetMethodID(env, class_ResourceBundle, \"getString\", \"(Ljava\/lang\/String;)Ljava\/lang\/String;\" );\n+    assert(mid_ResourceBundle_getString != NULL);\n+    jobject key = (*env)->NewStringUTF(env, \"message\");\n+    jobject msg =(*env)->CallObjectMethod(env, b, mid_ResourceBundle_getString, key);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling ResourceBundle::getString.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+    assert(msg != NULL);\n+\n+    \/\/ check the message\n+    const char* cstr = (*env)->GetStringUTFChars(env, msg, NULL);\n+    assert(cstr != NULL);\n+    assert(strcmp(cstr,\"Hello!\") == 0);\n+\n+    \/\/ ResourceBundle.clearCache()\n+    jmethodID mid_ResourceBundle_clearCache = (*env)->GetStaticMethodID(env, class_ResourceBundle, \"clearCache\", \"()V\" );\n+    assert(mid_ResourceBundle_clearCache != NULL);\n+    (*env)->CallStaticVoidMethod(env, class_ResourceBundle, mid_ResourceBundle_clearCache);\n+    if ((*env)->ExceptionOccurred(env) != NULL) {\n+        printf(\"ERROR: Exception was thrown calling ResourceBundle::clearCache.\\n\");\n+        (*env)->ExceptionDescribe(env);\n+        exit(-1);\n+    }\n+\n+    (*jvm)->DestroyJavaVM(jvm);\n+    return 0;\n+}\n+\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/exeNullCallerResourceBundle\/exeNullCallerResourceBundle.c","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}