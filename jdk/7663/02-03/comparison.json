{"files":[{"patch":"@@ -1514,1 +1514,1 @@\n-        final Module callerModule = getCallerModule(caller);\n+        Module callerModule = getCallerModule(caller);\n@@ -1561,1 +1561,1 @@\n-    \/**\n+    \/*\n@@ -1563,1 +1563,1 @@\n-     * {@link Reflection#getCallerClass()} is called from JNI with an empty\n+     * Reflection::getCallerClass is called from JNI with an empty\n@@ -1566,2 +1566,0 @@\n-     * @param caller\n-     * @return\n@@ -1570,1 +1568,1 @@\n-        final Module callerModule = (caller != null) ? caller.getModule()\n+        Module callerModule = (caller != null) ? caller.getModule()\n@@ -2251,1 +2249,1 @@\n-        final Module callerModule = getCallerModule(Reflection.getCallerClass());\n+        Module callerModule = getCallerModule(Reflection.getCallerClass());\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,7 +41,0 @@\n-import java.io.FileOutputStream;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.util.Map;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n@@ -49,0 +42,1 @@\n+import java.nio.file.Files;\n@@ -50,1 +44,0 @@\n-import java.nio.file.Paths;\n@@ -52,1 +45,2 @@\n-import java.util.ResourceBundle;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -58,3 +52,3 @@\n-        final Path propPath = Path.of(System.getProperty(\"test.classes\"), \"NullCallerResource.properties\");\n-        try (final OutputStream stream = Files.newOutputStream(propPath)) {\n-            final Properties props = new Properties();\n+        var propPath = Path.of(System.getProperty(\"test.classes\"), \"NullCallerResource.properties\");\n+        try (var stream = Files.newOutputStream(propPath)) {\n+            var props = new Properties();\n@@ -65,4 +59,4 @@\n-        final Path launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerResourceBundle\");\n-        final String classpathAppend = \"-Djava.class.path=\" + System.getProperty(\"test.classes\");\n-        final ProcessBuilder pb = new ProcessBuilder(launcher.toString(), classpathAppend);\n-        final Map<String, String> env = pb.environment();\n+        var launcher = Path.of(System.getProperty(\"test.nativepath\"), \"NullCallerResourceBundle\");\n+        var classpathAppend = \"-Djava.class.path=\" + System.getProperty(\"test.classes\");\n+        var pb = new ProcessBuilder(launcher.toString(), classpathAppend);\n+        var env = pb.environment();\n@@ -70,2 +64,2 @@\n-        final String libDir = Platform.libDir().toString();\n-        final String vmDir = Platform.jvmLibDir().toString();\n+        var libDir = Platform.libDir().toString();\n+        var vmDir = Platform.jvmLibDir().toString();\n@@ -74,1 +68,1 @@\n-        final String sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n+        var sharedLibraryPathEnvName = Platform.sharedLibraryPathVariableName();\n@@ -88,3 +82,0 @@\n-\n-    private static void makePropertiesFile() throws IOException {\n-    }\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/exeNullCallerResourceBundle\/NullCallerResourceBundle.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"}]}