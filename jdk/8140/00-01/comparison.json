{"files":[{"patch":"@@ -632,7 +632,0 @@\n-  product(intx, AliasLevel,     3,                                          \\\n-          \"(Deprecated) 0 for no aliasing, \"                                \\\n-          \"1 for oop\/field\/static\/array split, \"                            \\\n-          \"2 for class split, 3 for unique instances\")                      \\\n-          range(0, 3)                                                       \\\n-          constraint(AliasLevelConstraintFunc,AfterErgo)                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -682,2 +682,1 @@\n-  Init(::AliasLevel);\n-\n+  Init(\/*do_aliasing=*\/ true);\n@@ -927,1 +926,1 @@\n-  Init(\/*AliasLevel=*\/ 0);\n+  Init(\/*do_aliasing=*\/ false);\n@@ -949,1 +948,2 @@\n-void Compile::Init(int aliaslevel) {\n+void Compile::Init(bool aliasing) {\n+  _do_aliasing = aliasing;\n@@ -1042,10 +1042,0 @@\n-  \/\/ \/\/ -- Initialize types before each compile --\n-  \/\/ \/\/ Update cached type information\n-  \/\/ if( _method && _method->constants() )\n-  \/\/   Type::update_loaded_types(_method, _method->constants());\n-\n-  \/\/ Init alias_type map.\n-  if (!do_escape_analysis() && aliaslevel == 3) {\n-    aliaslevel = 2;  \/\/ No unique types without escape analysis\n-  }\n-  _AliasLevel = aliaslevel;\n@@ -1316,1 +1306,1 @@\n-  } else if( ta && _AliasLevel >= 2 ) {\n+  } else if(ta) {\n@@ -1371,1 +1361,1 @@\n-  if( to && _AliasLevel >= 2 && to != TypeOopPtr::BOTTOM ) {\n+  if(to && do_aliasing() && to != TypeOopPtr::BOTTOM ) {\n@@ -1467,2 +1457,1 @@\n-  switch( _AliasLevel ) {\n-  case 0:\n+  if (!do_aliasing()) {\n@@ -1470,19 +1459,0 @@\n-    break;\n-  case 1:                       \/\/ Flatten to: oop, static, field or array\n-    switch (tj->base()) {\n-    \/\/case Type::AryPtr: tj = TypeAryPtr::RANGE;    break;\n-    case Type::RawPtr:   tj = TypeRawPtr::BOTTOM;   break;\n-    case Type::AryPtr:   \/\/ do not distinguish arrays at all\n-    case Type::InstPtr:  tj = TypeInstPtr::BOTTOM;  break;\n-    case Type::KlassPtr:\n-    case Type::AryKlassPtr:\n-    case Type::InstKlassPtr: tj = TypeInstKlassPtr::OBJECT; break;\n-    case Type::AnyPtr:   tj = TypePtr::BOTTOM;      break;  \/\/ caller checks it\n-    default: ShouldNotReachHere();\n-    }\n-    break;\n-  case 2:                       \/\/ No collapsing at level 2; keep all splits\n-  case 3:                       \/\/ No collapsing at level 3; keep all splits\n-    break;\n-  default:\n-    Unimplemented();\n@@ -1597,1 +1567,1 @@\n-  if (_AliasLevel == 0)\n+  if (!do_aliasing()) {\n@@ -1599,0 +1569,1 @@\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":9,"deletions":38,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-  int                   _AliasLevel;            \/\/ Locally-adjusted version of AliasLevel flag.\n+  bool                  _do_aliasing;           \/\/ True if we intend to do aliasing\n@@ -614,1 +614,1 @@\n-  int               AliasLevel() const           { return _AliasLevel; }\n+  bool              do_aliasing() const          { return _do_aliasing; }\n@@ -1094,3 +1094,1 @@\n-  void Init(int aliaslevel);                     \/\/ Prepare for a single compilation\n-  int  Inline_Warm();                            \/\/ Find more inlining work.\n-  void Finish_Warm();                            \/\/ Give up on further inlines.\n+  void Init(bool aliasing);                      \/\/ Prepare for a single compilation\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -337,2 +337,1 @@\n-  if (has_scalar_replaceable_candidates &&\n-      C->AliasLevel() >= 3 && EliminateAllocations) {\n+  if (has_scalar_replaceable_candidates && EliminateAllocations) {\n@@ -353,2 +352,0 @@\n-    } else if(C->AliasLevel() < 3) {\n-      tty->print(\" since AliasLevel < 3 ===\");\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-  if (load_alias_idx == Compile::AliasIdxBot && C->AliasLevel() > 0 &&\n+  if (load_alias_idx == Compile::AliasIdxBot && C->do_aliasing() &&\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4855,1 +4855,1 @@\n-  if (C->AliasLevel() == 0)  return NULL;  \/\/ no MergeMems around\n+  if (!C->do_aliasing())     return NULL;  \/\/ no MergeMems around\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4950,1 +4950,1 @@\n-         alias_idx == Compile::AliasIdxBot && Compile::current()->AliasLevel() == 0,\n+         alias_idx == Compile::AliasIdxBot && !Compile::current()->do_aliasing(),\n@@ -4963,1 +4963,1 @@\n-           || Compile::current()->AliasLevel() == 0,\n+           || Compile::current()->do_aliasing() == false,\n@@ -4965,1 +4965,1 @@\n-    \/\/ AliasLevel == 0 if we are organizing the memory states manually.\n+    \/\/ do_aliasing == false if we are organizing the memory states manually.\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -789,1 +789,1 @@\n-           _oop_alias_idx == Compile::AliasIdxBot && Compile::current()->AliasLevel() == 0,\n+           _oop_alias_idx == Compile::AliasIdxBot && !Compile::current()->do_aliasing(),\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -545,1 +545,1 @@\n-  { \"AliasLevel\",                   JDK_Version::jdk(19), JDK_Version::jdk(20), JDK_Version::jdk(21) },\n+  { \"AliasLevel\",                   JDK_Version::undefined(), JDK_Version::jdk(19), JDK_Version::jdk(20) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,12 +39,0 @@\n-JVMFlag::Error AliasLevelConstraintFunc(intx value, bool verbose) {\n-  if ((value <= 1) && (Arguments::mode() == Arguments::_comp || Arguments::mode() == Arguments::_mixed)) {\n-    JVMFlag::printError(verbose,\n-                        \"AliasLevel (\" INTX_FORMAT \") is not \"\n-                        \"compatible with -Xcomp or -Xmixed\\n\",\n-                        value);\n-    return JVMFlag::VIOLATES_CONSTRAINT;\n-  } else {\n-    return JVMFlag::SUCCESS;\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-  f(intx,  AliasLevelConstraintFunc)                    \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-            {\"AliasLevel\", \"3\"},\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}