{"files":[{"patch":"@@ -413,13 +413,0 @@\n-bool CompilerOracle::should_blackhole(const methodHandle& method) {\n-  if (!check_predicate(CompileCommand::Blackhole, method)) {\n-    return false;\n-  }\n-  guarantee(UnlockDiagnosticVMOptions, \"Checked during initial parsing\");\n-  if (method->result_type() != T_VOID) {\n-    warning(\"Blackhole compile option only works for methods with void type: %s\",\n-            method->name_and_sig_as_C_string());\n-    return false;\n-  }\n-  return true;\n-}\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-  option(Blackhole,  \"blackhole\", Bool) \\\n@@ -145,3 +144,0 @@\n-  \/\/ Tells whether to blackhole when compiling method\n-  static bool should_blackhole(const methodHandle& method);\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}