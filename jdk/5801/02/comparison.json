{"files":[{"patch":"@@ -107,1 +107,1 @@\n-    _lock = new Monitor(Mutex::nonleaf+2, \"CompileTaskLock\", Mutex::_safepoint_check_always);\n+    _lock = new Monitor(Mutex::nonleaf, \"CompileTask_lock\", Mutex::_safepoint_check_always);\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -776,1 +776,1 @@\n-  _par_alloc_lock(Mutex::leaf, \"OffsetTableContigSpace par alloc lock\",\n+  _par_alloc_lock(Mutex::nonleaf, \"OffsetTableContigSpaceParAlloc_lock\",\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-  _alloc_failure_waiters_lock(Mutex::leaf, \"ShenandoahAllocFailureGC_lock\", Monitor::_safepoint_check_always, true),\n-  _gc_waiters_lock(Mutex::leaf, \"ShenandoahRequestedGC_lock\", Monitor::_safepoint_check_always, true),\n+  _alloc_failure_waiters_lock(Mutex::nonleaf, \"ShenandoahAllocFailureGC_lock\", Monitor::_safepoint_check_always, true),\n+  _gc_waiters_lock(Mutex::nonleaf, \"ShenandoahRequestedGC_lock\", Monitor::_safepoint_check_always, true),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-          _wait_monitor(new Monitor(Mutex::leaf, \"_wait_monitor\", Monitor::_safepoint_check_always, true)),\n+          _wait_monitor(new Monitor(Mutex::nonleaf-1, \"ShenandoahWaitMonitor_lock\", Monitor::_safepoint_check_always, true)),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1209,1 +1209,2 @@\n-    _extra_data_lock(Mutex::leaf, \"MDO extra data lock\", Mutex::_safepoint_check_always),\n+    \/\/ Holds Compile_lock\n+    _extra_data_lock(Mutex::nonleaf-2, \"MDOExtraData_lock\", Mutex::_safepoint_check_always),\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -300,0 +300,1 @@\n+  assert(_rank <= nonleaf, \"Bad lock rank: %s\", name);\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,4 +56,2 @@\n-       leaf           = nosafepoint    +   6,\n-       barrier        = leaf           +  10,\n-       nonleaf        = barrier        +   1,\n-       max_nonleaf    = nonleaf        + 900\n+       nonleaf        = nosafepoint    +  20,\n+       max_nonleaf    = nonleaf\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -197,0 +197,5 @@\n+static void add_mutex(Mutex* var) {\n+  assert(_num_mutex < MAX_NUM_MUTEX, \"increase MAX_NUM_MUTEX\");\n+  _mutex_array[_num_mutex++] = var;\n+}\n+\n@@ -199,2 +204,13 @@\n-  assert(_num_mutex < MAX_NUM_MUTEX, \"increase MAX_NUM_MUTEX\");               \\\n-  _mutex_array[_num_mutex++] = var;                                           \\\n+  add_mutex(var);                                                             \\\n+}\n+\n+\/\/ Specify relative ranked lock\n+#ifdef ASSERT\n+#define defl(var, type, held_lock, vm_block, safepoint_check_allowed) {                \\\n+  var = new type(held_lock->rank()-1, #var, Mutex::safepoint_check_allowed, vm_block); \\\n+  add_mutex(var); \\\n+}\n+#else\n+#define defl(var, type, held_lock, vm_block, safepoint_check_allowed) {           \\\n+  var = new type(Mutex::nonleaf, #var, Mutex::safepoint_check_allowed, vm_block); \\\n+  add_mutex(var); \\\n@@ -202,0 +218,1 @@\n+#endif\n@@ -211,1 +228,0 @@\n-    def(G1OldGCCount_lock          , PaddedMonitor, leaf,        true,  _safepoint_check_always);\n@@ -227,3 +243,1 @@\n-  def(ParGCRareEvent_lock          , PaddedMutex  , leaf,        true,  _safepoint_check_always);\n-  def(CodeCache_lock               , PaddedMonitor, nosafepoint-3, true,  _safepoint_check_never);\n-  def(CodeSweeper_lock             , PaddedMonitor, nosafepoint-5, true,  _safepoint_check_never);\n+  def(ParGCRareEvent_lock          , PaddedMutex  , nonleaf,       true,  _safepoint_check_always);\n@@ -231,1 +245,0 @@\n-  def(OopMapCacheAlloc_lock        , PaddedMutex  , leaf,        true,  _safepoint_check_always); \/\/ used for oop_map_cache allocation.\n@@ -234,1 +247,0 @@\n-  def(ClassLoaderDataGraph_lock    , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n@@ -237,1 +249,0 @@\n-  def(CompiledMethod_lock          , PaddedMutex  , nosafepoint-4,   true,  _safepoint_check_never);\n@@ -249,11 +260,6 @@\n-  def(SystemDictionary_lock        , PaddedMonitor, leaf,        true,  _safepoint_check_always);\n-  def(SharedDictionary_lock        , PaddedMutex  , leaf,        true,  _safepoint_check_always);\n-  def(ClassInitError_lock          , PaddedMonitor, leaf+1,      true,  _safepoint_check_always);\n-  def(Module_lock                  , PaddedMutex  , leaf+2,      false, _safepoint_check_always);\n-  def(InlineCacheBuffer_lock       , PaddedMutex  , nosafepoint-1, true,  _safepoint_check_never);\n-  def(VMStatistic_lock             , PaddedMutex  , leaf,        false, _safepoint_check_always);\n-  def(ExpandHeap_lock              , PaddedMutex  , leaf,        true,  _safepoint_check_always); \/\/ Used during compilation by VM thread\n-  def(JNIHandleBlockFreeList_lock  , PaddedMutex  , nosafepoint-1, true,  _safepoint_check_never);      \/\/ handles are used by VM thread\n-  def(SignatureHandlerLibrary_lock , PaddedMutex  , leaf,        false, _safepoint_check_always);\n-  def(SymbolArena_lock             , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n-  def(ExceptionCache_lock          , PaddedMutex  , leaf,        false, _safepoint_check_always);\n+  def(SharedDictionary_lock        , PaddedMutex  , nonleaf,          true,  _safepoint_check_always);\n+  def(VMStatistic_lock             , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n+  def(JNIHandleBlockFreeList_lock  , PaddedMutex  , nosafepoint-1,    true,  _safepoint_check_never);      \/\/ handles are used by VM thread\n+  def(SignatureHandlerLibrary_lock , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n+  def(SymbolArena_lock             , PaddedMutex  , nosafepoint,      true,  _safepoint_check_never);\n+  def(ExceptionCache_lock          , PaddedMutex  , nonleaf,          false, _safepoint_check_always);\n@@ -261,1 +267,1 @@\n-  def(FullGCALot_lock              , PaddedMutex  , leaf,        false, _safepoint_check_always); \/\/ a lock to make FullGCALot MT safe\n+  def(FullGCALot_lock              , PaddedMutex  , nonleaf,          false, _safepoint_check_always); \/\/ a lock to make FullGCALot MT safe\n@@ -263,3 +269,1 @@\n-  def(BeforeExit_lock              , PaddedMonitor, leaf,        true,  _safepoint_check_always);\n-  def(PerfDataMemAlloc_lock        , PaddedMutex  , leaf,        true,  _safepoint_check_always); \/\/ used for allocating PerfData memory for performance data\n-  def(PerfDataManager_lock         , PaddedMutex  , leaf,        true,  _safepoint_check_always); \/\/ used for synchronized access to PerfDataManager resources\n+  def(BeforeExit_lock              , PaddedMonitor, nonleaf,          true,  _safepoint_check_always);\n@@ -267,1 +271,0 @@\n-  def(Threads_lock                 , PaddedMonitor, barrier,     true,  _safepoint_check_always);  \/\/ Used for safepoint protocol.\n@@ -271,1 +274,0 @@\n-  def(VMOperation_lock             , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);  \/\/ VM_thread allowed to block on these\n@@ -275,1 +277,0 @@\n-  def(VtableStubs_lock             , PaddedMutex  , nosafepoint-2, true,  _safepoint_check_never);\n@@ -280,2 +281,2 @@\n-  def(Heap_lock                    , PaddedMonitor, nonleaf+1,   false, _safepoint_check_always); \/\/ Doesn't safepoint check during termination.\n-  def(JfieldIdCreation_lock        , PaddedMutex  , nonleaf+1,   true,  _safepoint_check_always); \/\/ jfieldID, Used in VM_Operation\n+  def(Heap_lock                    , PaddedMonitor, nonleaf,   false, _safepoint_check_always); \/\/ Doesn't safepoint check during termination.\n+  def(JfieldIdCreation_lock        , PaddedMutex  , nonleaf,   true,  _safepoint_check_always); \/\/ jfieldID, Used in VM_Operation\n@@ -284,4 +285,4 @@\n-  def(CompileTaskAlloc_lock        , PaddedMutex  , nonleaf+2,   true,  _safepoint_check_always);\n-  def(CompileStatistics_lock       , PaddedMutex  , nonleaf+2,   false, _safepoint_check_always);\n-  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint,     true,  _safepoint_check_never);\n-  def(MultiArray_lock              , PaddedMutex  , nonleaf+2,   false, _safepoint_check_always);\n+  def(MethodCompileQueue_lock      , PaddedMonitor, nonleaf,     false, _safepoint_check_always);\n+  def(CompileStatistics_lock       , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n+  def(DirectivesStack_lock         , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n+  def(MultiArray_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n@@ -289,1 +290,1 @@\n-  def(JvmtiThreadState_lock        , PaddedMutex  , nonleaf+2,   false, _safepoint_check_always); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n+  def(JvmtiThreadState_lock        , PaddedMutex  , nonleaf,     false, _safepoint_check_always); \/\/ Used by JvmtiThreadState\/JvmtiEventController\n@@ -291,1 +292,1 @@\n-  def(Management_lock              , PaddedMutex  , nonleaf+2,   false, _safepoint_check_always); \/\/ used for JVM management\n+  def(Management_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always); \/\/ used for JVM management\n@@ -294,3 +295,2 @@\n-  def(Compile_lock                 , PaddedMutex  , nonleaf+3,   false, _safepoint_check_always);\n-  def(MethodData_lock              , PaddedMutex  , nonleaf+3,   false, _safepoint_check_always);\n-  def(TouchedMethodLog_lock        , PaddedMutex  , nonleaf+3,   false, _safepoint_check_always);\n+  def(MethodData_lock              , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n+  def(TouchedMethodLog_lock        , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n@@ -298,6 +298,4 @@\n-  def(MethodCompileQueue_lock      , PaddedMonitor, nonleaf+4,   false, _safepoint_check_always);\n-  def(CompileThread_lock           , PaddedMonitor, nonleaf+5,   false, _safepoint_check_always);\n-  def(PeriodicTask_lock            , PaddedMonitor, nonleaf+5,   true,  _safepoint_check_always);\n-  def(RedefineClasses_lock         , PaddedMonitor, nonleaf+5,   true,  _safepoint_check_always);\n-  def(Verify_lock                  , PaddedMutex,   nonleaf+5,   true,  _safepoint_check_always);\n-  def(Zip_lock                     , PaddedMonitor, nosafepoint-2, true,  _safepoint_check_never);\n+  def(CompileThread_lock           , PaddedMonitor, nonleaf,     false, _safepoint_check_always);\n+  def(PeriodicTask_lock            , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n+  def(RedefineClasses_lock         , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n+  def(Verify_lock                  , PaddedMutex,   nonleaf,     true,  _safepoint_check_always);\n@@ -310,1 +308,0 @@\n-  def(JfrMsg_lock                  , PaddedMonitor, leaf,        true,  _safepoint_check_always);\n@@ -320,1 +317,1 @@\n-  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , nonleaf+6,   false, _safepoint_check_always);\n+  def(CodeHeapStateAnalytics_lock  , PaddedMutex  , nonleaf,   false, _safepoint_check_always);\n@@ -323,3 +320,3 @@\n-  def(ThreadIdTableCreate_lock     , PaddedMutex  , leaf,        false, _safepoint_check_always);\n-  def(SharedDecoder_lock           , PaddedMutex  , tty-1,       true,  _safepoint_check_never);\n-  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n+  def(ThreadIdTableCreate_lock     , PaddedMutex  , nonleaf,       false, _safepoint_check_always);\n+  def(SharedDecoder_lock           , PaddedMutex  , tty-1,         true,  _safepoint_check_never);\n+  def(DCmdFactory_lock             , PaddedMutex  , nosafepoint,   true,  _safepoint_check_never);\n@@ -327,1 +324,1 @@\n-  def(NMTQuery_lock                , PaddedMutex  , max_nonleaf, false, _safepoint_check_always);\n+  def(NMTQuery_lock                , PaddedMutex  , nonleaf, false, _safepoint_check_always);\n@@ -331,1 +328,1 @@\n-  def(CDSClassFileStream_lock      , PaddedMutex  , max_nonleaf, false, _safepoint_check_always);\n+  def(CDSClassFileStream_lock      , PaddedMutex  , nonleaf, false, _safepoint_check_always);\n@@ -333,1 +330,1 @@\n-  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint-1, true,  _safepoint_check_never);\n+  def(DumpTimeTable_lock           , PaddedMutex  , nosafepoint, true,  _safepoint_check_never);\n@@ -337,1 +334,1 @@\n-  def(LambdaFormInvokers_lock      , PaddedMutex  , nonleaf+2,   false, _safepoint_check_always);\n+  def(LambdaFormInvokers_lock      , PaddedMutex  , nonleaf,     false, _safepoint_check_always);\n@@ -340,0 +337,1 @@\n+  def(Zip_lock                     , PaddedMonitor, nosafepoint-1, true, _safepoint_check_never); \/\/ Holds DumpTimeTable_lock\n@@ -342,1 +340,32 @@\n-  def(JVMCI_lock                   , PaddedMonitor, nonleaf+2,   true,  _safepoint_check_always);\n+  def(JVMCI_lock                   , PaddedMonitor, nonleaf,     true,  _safepoint_check_always);\n+#endif\n+\n+  \/\/ These locks have safepoint_check_never and relative rankings.\n+  defl(InlineCacheBuffer_lock      , PaddedMutex  , CompiledIC_lock,  true,  _safepoint_check_never);\n+  defl(VtableStubs_lock            , PaddedMutex  , CompiledIC_lock,  true,  _safepoint_check_never);  \/\/ Also holds DumpTimeTable_lock\n+  defl(CodeCache_lock              , PaddedMonitor, VtableStubs_lock, true,  _safepoint_check_never);\n+  defl(CompiledMethod_lock         , PaddedMutex  , CodeCache_lock,   true,  _safepoint_check_never);\n+  defl(CodeSweeper_lock            , PaddedMonitor, CompiledMethod_lock, true,  _safepoint_check_never);\n+\n+  \/\/ These locks have safepoint_check_always and relative rankings.\n+  defl(Threads_lock                , PaddedMonitor, CompileThread_lock, true, _safepoint_check_always);\n+  defl(Heap_lock                   , PaddedMonitor, MultiArray_lock,   false, _safepoint_check_always);\n+  defl(Compile_lock                , PaddedMutex ,  MethodCompileQueue_lock, false, _safepoint_check_always);\n+\n+  defl(PerfDataMemAlloc_lock       , PaddedMutex  , Heap_lock,         true, _safepoint_check_always);\n+  defl(PerfDataManager_lock        , PaddedMutex  , Heap_lock,         true, _safepoint_check_always);\n+  defl(ClassLoaderDataGraph_lock   , PaddedMutex  , MultiArray_lock,   false, _safepoint_check_always);\n+  defl(VMOperation_lock            , PaddedMonitor, Compile_lock,      true, _safepoint_check_always);\n+  defl(ClassInitError_lock         , PaddedMonitor, Threads_lock,      true, _safepoint_check_always);\n+\n+  if (UseG1GC) {\n+    defl(G1OldGCCount_lock         , PaddedMonitor, Threads_lock, true, _safepoint_check_always);\n+  }\n+  defl(CompileTaskAlloc_lock       , PaddedMutex ,  MethodCompileQueue_lock,   true, _safepoint_check_always);\n+  defl(ExpandHeap_lock             , PaddedMutex ,  Heap_lock,                 true, _safepoint_check_always);\n+  defl(OopMapCacheAlloc_lock       , PaddedMutex ,  Threads_lock,              true, _safepoint_check_always);\n+  defl(Module_lock                 , PaddedMutex ,  ClassLoaderDataGraph_lock, false, _safepoint_check_always);\n+  defl(SystemDictionary_lock       , PaddedMonitor, Module_lock,               true, _safepoint_check_always);\n+\n+#if INCLUDE_JFR\n+  defl(JfrMsg_lock                 , PaddedMonitor, Module_lock,               true,  _safepoint_check_always);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":83,"deletions":54,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -751,1 +751,1 @@\n-    _lock = new (std::nothrow) PaddedMonitor(Mutex::leaf, \"ParallelHProfWriter_lock\", Mutex::_safepoint_check_always);\n+    _lock = new (std::nothrow) PaddedMonitor(Mutex::nonleaf, \"ParallelHProfWriter_lock\", Mutex::_safepoint_check_always);\n@@ -1817,1 +1817,1 @@\n-     _lock(new (std::nothrow) PaddedMonitor(Mutex::leaf, \"DumperController_lock\",\n+     _lock(new (std::nothrow) PaddedMonitor(Mutex::nonleaf, \"DumperController_lock\",\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,3 @@\n-const int rankA = 50;\n+const int rankA = Mutex::nonleaf-5;\n+const int rankAplusOne = Mutex::nonleaf-4;\n+const int rankAplusTwo = Mutex::nonleaf-3;\n@@ -63,1 +65,1 @@\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -72,1 +74,1 @@\n-                   \".* Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankA_plus_one\/.* out of order with lock mutex_rankA\/.* -- possible deadlock\") {\n@@ -77,1 +79,1 @@\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -86,1 +88,1 @@\n-                   \".* Attempting to acquire lock mutex_rankB\/50 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankB\/.* out of order with lock mutex_rankA\/.* -- possible deadlock\") {\n@@ -104,2 +106,2 @@\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n-  Mutex* mutex_rankA_plus_two = new Mutex(rankA + 2, \"mutex_rankA_plus_two\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_two = new Mutex(rankAplusTwo, \"mutex_rankA_plus_two\", Mutex::_safepoint_check_always);\n@@ -116,1 +118,1 @@\n-                   \".* Attempting to acquire lock mutex_rankA_plus_one\/51 out of order with lock mutex_rankA\/50 -- possible deadlock\") {\n+                   \".* Attempting to acquire lock mutex_rankA_plus_one\/.* out of order with lock mutex_rankA\/.* -- possible deadlock\") {\n@@ -121,1 +123,1 @@\n-  Mutex* mutex_rankA_plus_one = new Mutex(rankA + 1, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Mutex* mutex_rankA_plus_one = new Mutex(rankAplusOne, \"mutex_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -166,1 +168,1 @@\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -176,1 +178,1 @@\n-                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n+                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/.* while holding lock monitor_rankA\/.* \"\n@@ -182,1 +184,1 @@\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -192,1 +194,1 @@\n-                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/51 while holding lock monitor_rankA\/50 \"\n+                   \".* Attempting to wait on monitor monitor_rankA_plus_one\/.* while holding lock monitor_rankA\/.* \"\n@@ -198,1 +200,1 @@\n-  Monitor* monitor_rankA_plus_one = new Monitor(rankA + 1, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n+  Monitor* monitor_rankA_plus_one = new Monitor(rankAplusOne, \"monitor_rankA_plus_one\", Mutex::_safepoint_check_always);\n@@ -276,1 +278,1 @@\n-                   \".*failed: Locks above nosafepoint rank should safepoint: monitor_rank_leaf\") {\n+                   \".*failed: Locks above nosafepoint rank should safepoint: monitor_rank_nonleaf\") {\n@@ -280,3 +282,3 @@\n-  Monitor* monitor_rank_leaf = new Monitor(Mutex::leaf, \"monitor_rank_leaf\", Mutex::_safepoint_check_never);\n-  monitor_rank_leaf->lock_without_safepoint_check();\n-  monitor_rank_leaf->unlock();\n+  Monitor* monitor_rank_nonleaf = new Monitor(Mutex::nonleaf, \"monitor_rank_nonleaf\", Mutex::_safepoint_check_never);\n+  monitor_rank_nonleaf->lock_without_safepoint_check();\n+  monitor_rank_nonleaf->unlock();\n","filename":"test\/hotspot\/gtest\/runtime\/test_mutex.cpp","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  MutexLocker ml(new Mutex(Mutex::leaf, \"SFPT_Test_lock\", Mutex::_safepoint_check_always),\n+  MutexLocker ml(new Mutex(Mutex::nonleaf, \"SFPT_Test_lock\", Mutex::_safepoint_check_always),\n","filename":"test\/hotspot\/gtest\/runtime\/test_safepoint_locks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}