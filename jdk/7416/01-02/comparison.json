{"files":[{"patch":"@@ -5494,4 +5494,0 @@\n-            private JTable table;\n-            private int row;\n-            private int column;\n-\n@@ -5499,18 +5495,2 @@\n-            public boolean doAccessibleAction(int i) {\n-                boolean oldSelectedState = isSelected();\n-                boolean res = super.doAccessibleAction(i);\n-                boolean newSelectedState = isSelected();\n-\n-                if ((oldSelectedState != newSelectedState) &&\n-                    (table != null) && table.isEnabled() &&\n-                    table.isCellEditable(row, column)) {\n-                    table.setValueAt(Boolean.valueOf(newSelectedState),\n-                        row, column);\n-                }\n-                return res;\n-            }\n-\n-            void setCellToDoActionOn(JTable table, int row, int column) {\n-                this.table = table;\n-                this.row = row;\n-                this.column = column;\n+            public AccessibleAction getAccessibleAction() {\n+                return null;\n@@ -8436,4 +8416,0 @@\n-                    if (ac instanceof BooleanRenderer.AccessibleBooleanRenderer) {\n-                        ((BooleanRenderer.AccessibleBooleanRenderer) ac)\n-                            .setCellToDoActionOn(parent, row, column);\n-                    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8277922\n+   @key headful\n+   @summary TableCellRenderer of JTable cell with Boolean data should not\n+            support any AccessibleAction.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleTable;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableCellRenderer;\n+\n+public class BooleanRendererHasAccessibleActionTest {\n+    private volatile JFrame frame;\n+    private volatile JTable table;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        final BooleanRendererHasAccessibleActionTest test =\n+            new BooleanRendererHasAccessibleActionTest();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.createGUI();\n+                }\n+            });\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.runTest();\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void createGUI() {\n+        frame = new JFrame(\"BooleanRendererHasAccessibleActionTest\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        Container content = frame.getContentPane();\n+        content.setLayout(new BorderLayout());\n+\n+        String[] tblColNames = {\"Column 1\", \"Column 2\", \"Column 3\"};\n+        Object[][] tblData = {\n+            {Boolean.TRUE, \"Text 1\", Boolean.FALSE},\n+            {Boolean.FALSE, \"Text 2\", Boolean.TRUE}\n+        };\n+        final DefaultTableModel tblModel = new DefaultTableModel(\n+                tblData, tblColNames) {\n+            @Override\n+            public Class<?> getColumnClass(int column) {\n+                return getValueAt(0, column).getClass();\n+            }\n+        };\n+        table = new JTable(tblModel);\n+        table.setPreferredScrollableViewportSize(new Dimension(400, 100));\n+\n+        JScrollPane tblScroller = new JScrollPane(table);\n+        tblScroller.setHorizontalScrollBarPolicy(\n+            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        tblScroller.setVerticalScrollBarPolicy(\n+            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS\n+        );\n+        content.add(tblScroller, BorderLayout.CENTER);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private void runTest() {\n+        if (table == null) {\n+            throw new RuntimeException(\"'table' should not be null\");\n+        }\n+\n+        testAccessibleActionInCellRenderer(0, 0, true);\n+        testAccessibleActionInCellRenderer(1, 0, true);\n+        testAccessibleActionInCellRenderer(0, 2, true);\n+        testAccessibleActionInCellRenderer(1, 2, true);\n+\n+        testAccessibleActionInCell(0, 0, true);\n+        testAccessibleActionInCell(1, 0, true);\n+        testAccessibleActionInCell(0, 2, true);\n+        testAccessibleActionInCell(1, 2, true);\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    private void testAccessibleActionInCellRenderer(int row, int column,\n+            boolean shouldBeNull) {\n+        System.out.println(String.format(\n+                \"testAccessibleActionInCellRenderer():\" +\n+                    \" row='%d', column='%d', shouldBeNull='%b'\",\n+                row, column, shouldBeNull));\n+\n+        TableCellRenderer cellRenderer = table.getCellRenderer(row, column);\n+        if (!(cellRenderer instanceof Accessible)) {\n+            throw new RuntimeException(\"'cellRenderer' is not Accessible\");\n+        }\n+\n+        AccessibleContext cellRendererAc =\n+            ((Accessible) cellRenderer).getAccessibleContext();\n+        if (cellRendererAc == null) {\n+            throw new RuntimeException(\"'cellRendererAc' should not be null\");\n+        }\n+\n+        AccessibleAction cellRendererAa = cellRendererAc.getAccessibleAction();\n+        if ((shouldBeNull && (cellRendererAa != null)) ||\n+            (!shouldBeNull && (cellRendererAa == null))) {\n+            throw new RuntimeException(\n+                \"Test failed. 'cellRendererAa' is not as should be\");\n+        }\n+    }\n+\n+    private void testAccessibleActionInCell(int row, int column,\n+            boolean shouldBeNull) {\n+        System.out.println(String.format(\"testAccessibleActionInCell():\" +\n+                    \" row='%d', column='%d', shouldBeNull='%b'\",\n+                row, column, shouldBeNull));\n+\n+        AccessibleContext tblAc = table.getAccessibleContext();\n+        AccessibleTable accessibleTbl = tblAc.getAccessibleTable();\n+        if (accessibleTbl == null) {\n+            throw new RuntimeException(\"'accessibleTbl' should not be null\");\n+        }\n+\n+        Accessible cellAccessible = accessibleTbl.getAccessibleAt(row, column);\n+        AccessibleContext cellAc = cellAccessible.getAccessibleContext();\n+        if (cellAc == null) {\n+            throw new RuntimeException(\"'cellAc' should not be null\");\n+        }\n+\n+        AccessibleAction cellAa = cellAc.getAccessibleAction();\n+        if ((shouldBeNull && (cellAa != null)) ||\n+            (!shouldBeNull && (cellAa == null))) {\n+            throw new RuntimeException(\n+                \"Test failed. 'cellAa' is not as should be\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JTable\/BooleanRendererHasAccessibleActionTest.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -1,202 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 8277922\n-   @key headful\n-   @summary Execution of AccessibleAction of AccessibleContext of JTable cell\n-            with JCheckBox does not lead to change of the cell value and view.\n- *\/\n-\n-import java.awt.AWTException;\n-import java.awt.BorderLayout;\n-import java.awt.Container;\n-import java.awt.Dimension;\n-import java.awt.Robot;\n-import java.lang.reflect.InvocationTargetException;\n-import javax.accessibility.Accessible;\n-import javax.accessibility.AccessibleAction;\n-import javax.accessibility.AccessibleContext;\n-import javax.accessibility.AccessibleTable;\n-import javax.swing.JFrame;\n-import javax.swing.JScrollPane;\n-import javax.swing.JTable;\n-import javax.swing.SwingUtilities;\n-import javax.swing.table.DefaultTableModel;\n-\n-public class JCheckBoxInJTableCannotBeClickedTest {\n-    private volatile JFrame frame;\n-    private volatile JTable table;\n-\n-    public static void main(String[] args) throws InterruptedException,\n-            InvocationTargetException, AWTException {\n-        final JCheckBoxInJTableCannotBeClickedTest test =\n-            new JCheckBoxInJTableCannotBeClickedTest();\n-\n-        try {\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                @Override\n-                public void run() {\n-                    test.createGUI();\n-                }\n-            });\n-            Robot robot = new Robot();\n-            robot.waitForIdle();\n-\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                @Override\n-                public void run() {\n-                    test.runTest();\n-                }\n-            });\n-        } finally {\n-            SwingUtilities.invokeAndWait(new Runnable() {\n-                @Override\n-                public void run() {\n-                    test.dispose();\n-                }\n-            });\n-        }\n-    }\n-\n-    private void createGUI() {\n-        frame = new JFrame(\"JCheckBoxInJTableCannotBeClickedTest\");\n-        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-        Container content = frame.getContentPane();\n-        content.setLayout(new BorderLayout());\n-\n-        String[] tblColNames = {\"Column 1\", \"Column 2\", \"Column 3\"};\n-        Object[][] tblData = {\n-            {Boolean.TRUE, \"Text 1\", Boolean.FALSE},\n-            {Boolean.FALSE, \"Text 2\", Boolean.TRUE},\n-            {Boolean.TRUE, \"Text 3\", Boolean.FALSE}\n-        };\n-        final DefaultTableModel tblModel = new DefaultTableModel(\n-                tblData, tblColNames) {\n-            @Override\n-            public Class<?> getColumnClass(int column) {\n-                return getValueAt(0, column).getClass();\n-            }\n-\n-            @Override\n-            public boolean isCellEditable(int row, int column) {\n-                if (column == 0) {\n-                    return false;\n-                }\n-                return true;\n-            }\n-        };\n-        table = new JTable(tblModel);\n-        table.setPreferredScrollableViewportSize(new Dimension(400, 100));\n-\n-        JScrollPane tblScroller = new JScrollPane(table);\n-        tblScroller.setHorizontalScrollBarPolicy(\n-            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n-        tblScroller.setVerticalScrollBarPolicy(\n-            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS\n-        );\n-        content.add(tblScroller, BorderLayout.CENTER);\n-\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n-\n-    private void dispose() {\n-        if (frame != null) {\n-            frame.dispose();\n-            frame = null;\n-        }\n-    }\n-\n-    private void runTest() {\n-        if (table == null) {\n-            throw new RuntimeException(\"'table' should not be null\");\n-        }\n-\n-        testDoAccessibleActionInCell(0, 2, 0, true);\n-        testDoAccessibleActionInCell(0, 2, 0, true);\n-        testDoAccessibleActionInCell(1, 2, 0, true);\n-        testDoAccessibleActionInCell(1, 2, 0, true);\n-        testDoAccessibleActionInCell(0, 0, 0, false);\n-        testDoAccessibleActionInCell(1, 0, 0, false);\n-        testDoAccessibleActionInCell(2, 0, 0, false);\n-\n-        System.out.println(\"Disabling the table...\");\n-        table.setEnabled(false);\n-        testDoAccessibleActionInCell(0, 2, 0, false);\n-        testDoAccessibleActionInCell(1, 2, 0, false);\n-        testDoAccessibleActionInCell(2, 2, 0, false);\n-\n-        System.out.println(\"Enabling the table...\");\n-        table.setEnabled(true);\n-        testDoAccessibleActionInCell(0, 2, 0, true);\n-        testDoAccessibleActionInCell(1, 2, 0, true);\n-        testDoAccessibleActionInCell(2, 2, 0, true);\n-\n-        System.out.println(\"Test passed.\");\n-    }\n-\n-    private void testDoAccessibleActionInCell(int row, int column,\n-            int actionIndex, boolean expectCellValChange) {\n-        System.out.println(String.format(\"testDoAccessibleActionInCell():\" +\n-                    \" row='%d', column='%d', actionIndex='%d'\" +\n-                    \", expectCellValChange='%b'\",\n-                row, column, actionIndex, expectCellValChange));\n-\n-        if (table == null) {\n-            throw new RuntimeException(\"'table' should not be null\");\n-        }\n-\n-        AccessibleContext tblAc = table.getAccessibleContext();\n-        AccessibleTable accessibleTbl = tblAc.getAccessibleTable();\n-        if (accessibleTbl == null) {\n-            throw new RuntimeException(\"'accessibleTbl' should not be null\");\n-        }\n-\n-        Accessible cellAccessible = accessibleTbl.getAccessibleAt(row, column);\n-        AccessibleContext cellAc = cellAccessible.getAccessibleContext();\n-        if (cellAc == null) {\n-            throw new RuntimeException(\"'cellAc' should not be null\");\n-        }\n-\n-        AccessibleAction cellAa = cellAc.getAccessibleAction();\n-        if (cellAa == null) {\n-            throw new RuntimeException(\"'cellAa' should not be null\");\n-        }\n-        if (cellAa.getAccessibleActionCount() <= actionIndex) {\n-            throw new RuntimeException(\n-                \"cellAa.getAccessibleActionCount() <= actionIndex\");\n-        }\n-\n-        Object oldCellVal = table.getValueAt(row, column);\n-        cellAa.doAccessibleAction(actionIndex);\n-        Object newCellVal = table.getValueAt(row, column);\n-\n-        boolean cellValChanged = oldCellVal != newCellVal;\n-        if ((expectCellValChange && !cellValChanged) ||\n-            (!expectCellValChange && cellValChanged)) {\n-            throw new RuntimeException(String.format(\n-                    \"Test failed. cellValChanged='%b'\", cellValChanged));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/accessibility\/JTable\/JCheckBoxInJTableCannotBeClickedTest.java","additions":0,"deletions":202,"binary":false,"changes":202,"status":"deleted"}]}