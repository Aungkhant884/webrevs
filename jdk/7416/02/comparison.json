{"files":[{"patch":"@@ -5484,0 +5484,15 @@\n+\n+        @Override\n+        public AccessibleContext getAccessibleContext() {\n+            if (accessibleContext == null) {\n+                accessibleContext = new AccessibleBooleanRenderer();\n+            }\n+            return accessibleContext;\n+        }\n+\n+        class AccessibleBooleanRenderer extends JCheckBox.AccessibleJCheckBox {\n+            @Override\n+            public AccessibleAction getAccessibleAction() {\n+                return null;\n+            }\n+        }\n@@ -8399,1 +8414,5 @@\n-                return getCurrentAccessibleContext().getAccessibleAction();\n+                AccessibleContext ac = getCurrentAccessibleContext();\n+                if (ac != null) {\n+                    return ac.getAccessibleAction();\n+                }\n+                return null;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8277922\n+   @key headful\n+   @summary TableCellRenderer of JTable cell with Boolean data should not\n+            support any AccessibleAction.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleTable;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableCellRenderer;\n+\n+public class BooleanRendererHasAccessibleActionTest {\n+    private volatile JFrame frame;\n+    private volatile JTable table;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        final BooleanRendererHasAccessibleActionTest test =\n+            new BooleanRendererHasAccessibleActionTest();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.createGUI();\n+                }\n+            });\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.runTest();\n+                }\n+            });\n+        } finally {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void createGUI() {\n+        frame = new JFrame(\"BooleanRendererHasAccessibleActionTest\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        Container content = frame.getContentPane();\n+        content.setLayout(new BorderLayout());\n+\n+        String[] tblColNames = {\"Column 1\", \"Column 2\", \"Column 3\"};\n+        Object[][] tblData = {\n+            {Boolean.TRUE, \"Text 1\", Boolean.FALSE},\n+            {Boolean.FALSE, \"Text 2\", Boolean.TRUE}\n+        };\n+        final DefaultTableModel tblModel = new DefaultTableModel(\n+                tblData, tblColNames) {\n+            @Override\n+            public Class<?> getColumnClass(int column) {\n+                return getValueAt(0, column).getClass();\n+            }\n+        };\n+        table = new JTable(tblModel);\n+        table.setPreferredScrollableViewportSize(new Dimension(400, 100));\n+\n+        JScrollPane tblScroller = new JScrollPane(table);\n+        tblScroller.setHorizontalScrollBarPolicy(\n+            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        tblScroller.setVerticalScrollBarPolicy(\n+            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS\n+        );\n+        content.add(tblScroller, BorderLayout.CENTER);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private void runTest() {\n+        if (table == null) {\n+            throw new RuntimeException(\"'table' should not be null\");\n+        }\n+\n+        testAccessibleActionInCellRenderer(0, 0, true);\n+        testAccessibleActionInCellRenderer(1, 0, true);\n+        testAccessibleActionInCellRenderer(0, 2, true);\n+        testAccessibleActionInCellRenderer(1, 2, true);\n+\n+        testAccessibleActionInCell(0, 0, true);\n+        testAccessibleActionInCell(1, 0, true);\n+        testAccessibleActionInCell(0, 2, true);\n+        testAccessibleActionInCell(1, 2, true);\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    private void testAccessibleActionInCellRenderer(int row, int column,\n+            boolean shouldBeNull) {\n+        System.out.println(String.format(\n+                \"testAccessibleActionInCellRenderer():\" +\n+                    \" row='%d', column='%d', shouldBeNull='%b'\",\n+                row, column, shouldBeNull));\n+\n+        TableCellRenderer cellRenderer = table.getCellRenderer(row, column);\n+        if (!(cellRenderer instanceof Accessible)) {\n+            throw new RuntimeException(\"'cellRenderer' is not Accessible\");\n+        }\n+\n+        AccessibleContext cellRendererAc =\n+            ((Accessible) cellRenderer).getAccessibleContext();\n+        if (cellRendererAc == null) {\n+            throw new RuntimeException(\"'cellRendererAc' should not be null\");\n+        }\n+\n+        AccessibleAction cellRendererAa = cellRendererAc.getAccessibleAction();\n+        if ((shouldBeNull && (cellRendererAa != null)) ||\n+            (!shouldBeNull && (cellRendererAa == null))) {\n+            throw new RuntimeException(\n+                \"Test failed. 'cellRendererAa' is not as should be\");\n+        }\n+    }\n+\n+    private void testAccessibleActionInCell(int row, int column,\n+            boolean shouldBeNull) {\n+        System.out.println(String.format(\"testAccessibleActionInCell():\" +\n+                    \" row='%d', column='%d', shouldBeNull='%b'\",\n+                row, column, shouldBeNull));\n+\n+        AccessibleContext tblAc = table.getAccessibleContext();\n+        AccessibleTable accessibleTbl = tblAc.getAccessibleTable();\n+        if (accessibleTbl == null) {\n+            throw new RuntimeException(\"'accessibleTbl' should not be null\");\n+        }\n+\n+        Accessible cellAccessible = accessibleTbl.getAccessibleAt(row, column);\n+        AccessibleContext cellAc = cellAccessible.getAccessibleContext();\n+        if (cellAc == null) {\n+            throw new RuntimeException(\"'cellAc' should not be null\");\n+        }\n+\n+        AccessibleAction cellAa = cellAc.getAccessibleAction();\n+        if ((shouldBeNull && (cellAa != null)) ||\n+            (!shouldBeNull && (cellAa == null))) {\n+            throw new RuntimeException(\n+                \"Test failed. 'cellAa' is not as should be\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JTable\/BooleanRendererHasAccessibleActionTest.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"}]}