{"files":[{"patch":"@@ -5484,0 +5484,36 @@\n+\n+        @Override\n+        public AccessibleContext getAccessibleContext() {\n+            if (accessibleContext == null) {\n+                accessibleContext = new AccessibleBooleanRenderer();\n+            }\n+            return accessibleContext;\n+        }\n+\n+        protected class AccessibleBooleanRenderer\n+                extends JCheckBox.AccessibleJCheckBox {\n+            private JTable table;\n+            private int row;\n+            private int column;\n+\n+            @Override\n+            public boolean doAccessibleAction(int i) {\n+                boolean oldSelectedState = isSelected();\n+                boolean res = super.doAccessibleAction(i);\n+                boolean newSelectedState = isSelected();\n+\n+                if ((oldSelectedState != newSelectedState) &&\n+                    (table != null) && table.isEnabled() &&\n+                    table.isCellEditable(row, column)) {\n+                    table.setValueAt(Boolean.valueOf(newSelectedState),\n+                        row, column);\n+                }\n+                return res;\n+            }\n+\n+            public void setCellToDoActionOn(JTable table, int row, int column) {\n+                this.table = table;\n+                this.row = row;\n+                this.column = column;\n+            }\n+        }\n@@ -8399,1 +8435,9 @@\n-                return getCurrentAccessibleContext().getAccessibleAction();\n+                AccessibleContext ac = getCurrentAccessibleContext();\n+                if (ac != null) {\n+                    if (ac instanceof BooleanRenderer.AccessibleBooleanRenderer) {\n+                        ((BooleanRenderer.AccessibleBooleanRenderer) ac)\n+                            .setCellToDoActionOn(parent, row, column);\n+                    }\n+                    return ac.getAccessibleAction();\n+                }\n+                return null;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,219 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8277922\n+   @key headful\n+   @summary Execution of AccessibleAction of AccessibleContext of JTable cell\n+            with JCheckBox does not lead to change of the cell value and view.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleTable;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import javax.swing.table.DefaultTableModel;\n+\n+public class JCheckBoxInJTableCannotBeClickedTest {\n+    private volatile JFrame frame;\n+    private volatile JTable table;\n+\n+    public static void main(String[] args) {\n+        final JCheckBoxInJTableCannotBeClickedTest test =\n+            new JCheckBoxInJTableCannotBeClickedTest();\n+\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.createGUI();\n+                }\n+            });\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    test.runTest();\n+                }\n+            });\n+        } catch (InterruptedException | InvocationTargetException |\n+            AWTException e) {\n+            throw new RuntimeException(e);\n+        } finally {\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        test.dispose();\n+                    }\n+                });\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private void createGUI() {\n+        if (!(UIManager.getLookAndFeel() instanceof MetalLookAndFeel)) {\n+            try {\n+                UIManager.setLookAndFeel(new MetalLookAndFeel());\n+            } catch (UnsupportedLookAndFeelException ulafe) {\n+                throw new RuntimeException(ulafe);\n+            }\n+        }\n+\n+        frame = new JFrame(\"JCheckBoxInJTableCannotBeClickedTest\");\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        Container content = frame.getContentPane();\n+        content.setLayout(new BorderLayout());\n+\n+        String[] tblColNames = {\"Column 1\", \"Column 2\", \"Column 3\"};\n+        Object[][] tblData = {\n+            {Boolean.TRUE, \"Text 1\", Boolean.FALSE},\n+            {Boolean.FALSE, \"Text 2\", Boolean.TRUE},\n+            {Boolean.TRUE, \"Text 3\", Boolean.FALSE}\n+        };\n+        final DefaultTableModel tblModel = new DefaultTableModel(\n+                tblData, tblColNames) {\n+            @Override\n+            public Class<?> getColumnClass(int column) {\n+                return getValueAt(0, column).getClass();\n+            }\n+\n+            @Override\n+            public boolean isCellEditable(int row, int column) {\n+                if (column == 0) {\n+                    return false;\n+                }\n+                return true;\n+            }\n+        };\n+        table = new JTable(tblModel);\n+        table.setPreferredScrollableViewportSize(new Dimension(400, 100));\n+\n+        JScrollPane tblScroller = new JScrollPane(table);\n+        tblScroller.setHorizontalScrollBarPolicy(\n+            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        tblScroller.setVerticalScrollBarPolicy(\n+            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS\n+        );\n+        content.add(tblScroller, BorderLayout.CENTER);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private void runTest() {\n+        if (table == null) {\n+            throw new RuntimeException(\"'table' should not be null\");\n+        }\n+\n+        testDoAccessibleActionInCell(0, 2, 0, true);\n+        testDoAccessibleActionInCell(0, 2, 0, true);\n+        testDoAccessibleActionInCell(1, 2, 0, true);\n+        testDoAccessibleActionInCell(1, 2, 0, true);\n+        testDoAccessibleActionInCell(0, 0, 0, false);\n+        testDoAccessibleActionInCell(1, 0, 0, false);\n+        testDoAccessibleActionInCell(2, 0, 0, false);\n+\n+        System.out.println(\"Disabling the table...\");\n+        table.setEnabled(false);\n+        testDoAccessibleActionInCell(0, 2, 0, false);\n+        testDoAccessibleActionInCell(1, 2, 0, false);\n+        testDoAccessibleActionInCell(2, 2, 0, false);\n+\n+        System.out.println(\"Enabling the table...\");\n+        table.setEnabled(true);\n+        testDoAccessibleActionInCell(0, 2, 0, true);\n+        testDoAccessibleActionInCell(1, 2, 0, true);\n+        testDoAccessibleActionInCell(2, 2, 0, true);\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    private void testDoAccessibleActionInCell(int row, int column,\n+            int actionIndex, boolean expectCellValChange) {\n+        System.out.println(String.format(\"testDoAccessibleActionInCell():\" +\n+                    \" row='%d', column='%d', actionIndex='%d'\" +\n+                    \", expectCellValChange='%b'\",\n+                row, column, actionIndex, expectCellValChange));\n+\n+        if (table == null) {\n+            throw new RuntimeException(\"'table' should not be null\");\n+        }\n+\n+        AccessibleContext tblAc = table.getAccessibleContext();\n+        AccessibleTable accessibleTbl = tblAc.getAccessibleTable();\n+        if (accessibleTbl == null) {\n+            throw new RuntimeException(\"'accessibleTbl' should not be null\");\n+        }\n+\n+        Accessible cellAccessible = accessibleTbl.getAccessibleAt(row, column);\n+        AccessibleContext cellAc = cellAccessible.getAccessibleContext();\n+        if (cellAc == null) {\n+            throw new RuntimeException(\"'cellAc' should not be null\");\n+        }\n+\n+        AccessibleAction cellAa = cellAc.getAccessibleAction();\n+        if (cellAa == null) {\n+            throw new RuntimeException(\"'cellAa' should not be null\");\n+        }\n+        if (cellAa.getAccessibleActionCount() <= actionIndex) {\n+            throw new RuntimeException(\n+                \"cellAa.getAccessibleActionCount() <= actionIndex\");\n+        }\n+\n+        Object oldCellVal = table.getValueAt(row, column);\n+        cellAa.doAccessibleAction(actionIndex);\n+        Object newCellVal = table.getValueAt(row, column);\n+\n+        boolean cellValChanged = oldCellVal != newCellVal;\n+        if ((expectCellValChange && !cellValChanged) ||\n+            (!expectCellValChange && cellValChanged)) {\n+            throw new RuntimeException(String.format(\n+                    \"Test failed. cellValChanged='%b'\", cellValChanged));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/accessibility\/JTable\/JCheckBoxInJTableCannotBeClickedTest.java","additions":219,"deletions":0,"binary":false,"changes":219,"status":"added"}]}