{"files":[{"patch":"@@ -68,1 +68,1 @@\n-class NonBarrieredRootClosure : public OopClosure {\n+class RawRootClosure : public OopClosure {\n@@ -72,1 +72,1 @@\n-  NonBarrieredRootClosure(Delegate* delegate) : _delegate(delegate) {}\n+  RawRootClosure(Delegate* delegate) : _delegate(delegate) {}\n@@ -78,1 +78,1 @@\n-      _delegate->do_root(UnifiedOopRef::encode_non_barriered(ref));\n+      _delegate->do_root(UnifiedOopRef::encode_as_raw(ref));\n@@ -86,1 +86,1 @@\n-      _delegate->do_root(UnifiedOopRef::encode_non_barriered(ref));\n+      _delegate->do_root(UnifiedOopRef::encode_as_raw(ref));\n@@ -101,2 +101,2 @@\n-  NonBarrieredRootClosure<Delegate> nbrc(_delegate);\n-  Threads::oops_do(&nbrc, NULL);\n+  RawRootClosure<Delegate> rrc(_delegate);\n+  Threads::oops_do(&rrc, NULL);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/rootSetClosure.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,5 +32,5 @@\n-  static const uintptr_t tag_mask          = LP64_ONLY(0b111) NOT_LP64(0b011);\n-  static const uintptr_t native_tag        = 0b001;\n-  static const uintptr_t non_barriered_tag = 0b010;\n-  static const uintptr_t narrow_tag        = LP64_ONLY(0b100) NOT_LP64(0);\n-  STATIC_ASSERT((native_tag & non_barriered_tag) == 0);\n+  static const uintptr_t tag_mask   = LP64_ONLY(0b111) NOT_LP64(0b011);\n+  static const uintptr_t native_tag = 0b001;\n+  static const uintptr_t raw_tag    = 0b010;\n+  static const uintptr_t narrow_tag = LP64_ONLY(0b100) NOT_LP64(0);\n+  STATIC_ASSERT((native_tag & raw_tag) == 0);\n@@ -38,2 +38,2 @@\n-  STATIC_ASSERT((non_barriered_tag & narrow_tag) == 0);\n-  STATIC_ASSERT((native_tag | non_barriered_tag | narrow_tag) == tag_mask);\n+  STATIC_ASSERT((raw_tag & narrow_tag) == 0);\n+  STATIC_ASSERT((native_tag | raw_tag | narrow_tag) == tag_mask);\n@@ -48,1 +48,1 @@\n-  bool is_non_barriered() const;\n+  bool is_raw() const;\n@@ -55,2 +55,2 @@\n-  static UnifiedOopRef encode_non_barriered(const narrowOop* ref);\n-  static UnifiedOopRef encode_non_barriered(const oop* ref);\n+  static UnifiedOopRef encode_as_raw(const narrowOop* ref);\n+  static UnifiedOopRef encode_as_raw(const oop* ref);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/unifiedOopRef.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-inline bool UnifiedOopRef::is_non_barriered() const {\n-  return (_value & non_barriered_tag) != 0;\n+inline bool UnifiedOopRef::is_raw() const {\n+  return (_value & raw_tag) != 0;\n@@ -83,1 +83,1 @@\n-inline UnifiedOopRef UnifiedOopRef::encode_non_barriered(const narrowOop* ref) {\n+inline UnifiedOopRef UnifiedOopRef::encode_as_raw(const narrowOop* ref) {\n@@ -85,1 +85,1 @@\n-  return create_with_tag(ref, non_barriered_tag | narrow_tag);\n+  return create_with_tag(ref, raw_tag | narrow_tag);\n@@ -88,2 +88,2 @@\n-inline UnifiedOopRef UnifiedOopRef::encode_non_barriered(const oop* ref) {\n-  return create_with_tag(ref, non_barriered_tag);\n+inline UnifiedOopRef UnifiedOopRef::encode_as_raw(const oop* ref) {\n+  return create_with_tag(ref, raw_tag);\n@@ -107,1 +107,1 @@\n-  if (is_non_barriered()) {\n+  if (is_raw()) {\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/unifiedOopRef.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}