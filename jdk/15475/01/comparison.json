{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Arrays;\n@@ -132,1 +133,1 @@\n-        map.put(\"docker.support\", this::dockerSupport);\n+        map.put(\"docker.support\", this::containerSupport);\n@@ -530,1 +531,1 @@\n-     * A simple check for docker support\n+     * A simple check for container support\n@@ -532,1 +533,1 @@\n-     * @return true if docker is supported in a given environment\n+     * @return true if container subsystem is supported in a given environment\n@@ -534,2 +535,2 @@\n-    protected String dockerSupport() {\n-        log(\"Entering dockerSupport()\");\n+    protected String containerSupport() {\n+        log(\"Entering containerSupport()\");\n@@ -539,1 +540,1 @@\n-           \/\/ currently docker testing is only supported for Linux,\n+           \/\/ currently container testing is only supported for Linux,\n@@ -555,1 +556,1 @@\n-        log(\"dockerSupport(): platform check: isSupported = \" + isSupported);\n+        log(\"containerSupport(): platform check: isSupported = \" + isSupported);\n@@ -559,1 +560,1 @@\n-              isSupported = checkDockerSupport();\n+              isSupported = checkContainerSupport();\n@@ -565,1 +566,1 @@\n-        log(\"dockerSupport(): returning isSupported = \" + isSupported);\n+        log(\"containerSupport(): returning isSupported = \" + isSupported);\n@@ -603,5 +604,18 @@\n-    private boolean checkDockerSupport() throws IOException, InterruptedException {\n-        log(\"checkDockerSupport(): entering\");\n-        ProcessBuilder pb = new ProcessBuilder(Container.ENGINE_COMMAND, \"ps\");\n-        Map<String, String> logFileNames = redirectOutputToLogFile(\"checkDockerSupport(): <container> ps\",\n-                                                      pb, \"container-ps\");\n+    private boolean checkContainerSupport() throws IOException, InterruptedException {\n+        log(\"checkContainerSupport(): entering\");\n+\n+        \/\/ Consult CONTAINER_REQUIRES_COMMAND first.\n+        \/\/ See test\/lib\/jdk\/test\/lib\/Container.java\n+        log(\"checkContainerSupport(): CONTAINER_REQUIRES_COMMAND = \"\n+            + Container.CONTAINER_REQUIRES_COMMAND);\n+        \/\/ If not defined or empty no check is needed; OK to run container tests.\n+        if (Container.CONTAINER_REQUIRES_COMMAND.isEmpty()) {\n+            return true;\n+        }\n+        String unescaped = Container.CONTAINER_REQUIRES_COMMAND.replace(\"\\\\u0020\", \" \");\n+        log(\"checkContainerSupport(): unescaped = <\" + unescaped + \">\");\n+\n+        List<String> args = Arrays.asList(unescaped.split(\" \"));\n+        ProcessBuilder pb = new ProcessBuilder(args);\n+        Map<String, String> logFileNames = redirectOutputToLogFile(\"checkContainerSupport(): <container command> \",\n+                                                      pb, \"container-command\");\n@@ -609,0 +623,1 @@\n+        log(\"checkContainerSupport(): started: \" + p.info().commandLine());\n@@ -612,1 +627,1 @@\n-        log(String.format(\"checkDockerSupport(): exitValue = %s, pid = %s\", exitValue, p.pid()));\n+        log(String.format(\"checkContainerSupport(): exitValue = %s, pid = %s\", exitValue, p.pid()));\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":30,"deletions":15,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +27,3 @@\n-    \/\/ Use this property to specify docker location on your system.\n-    \/\/ E.g.: \"\/usr\/local\/bin\/docker\". We define this constant here so\n+    \/\/ Use this property to specify container command on your system.\n+    \/\/ You may specify either short command or full path.\n+    \/\/ E.g.: \"\/usr\/local\/bin\/docker\", \"podman\".  We define this constant here so\n@@ -32,0 +34,9 @@\n+\n+    \/\/ Use this property to specify command used to detect the ability to run\n+    \/\/ container testing on a given system. The command will be used by jtreg\n+    \/\/ \"at requires\" extention.\n+    \/\/ Use unicode \"\\\\u0020\" to escape spaces between parameters.\n+    \/\/ If not specified or empty then container testing will proceed w\/o any checks.\n+    \/\/ Default value is \"<ENGINE_COMMAND> ps\" as in \"docker ps\".\n+    public static final String CONTAINER_REQUIRES_COMMAND =\n+        System.getProperty(\"jdk.test.container.requires.command\", ENGINE_COMMAND + \" ps\");\n","filename":"test\/lib\/jdk\/test\/lib\/Container.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}