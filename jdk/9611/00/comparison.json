{"files":[{"patch":"@@ -186,0 +186,4 @@\n+static int qsort_helper(const void* a, const void* b) {\n+  return *((uint16_t*)a) - *((uint16_t*)b);\n+}\n+\n@@ -194,1 +198,3 @@\n-  int lengths[table_size] = { 0 };\n+  uint16_t lengths[table_size] = { 0 };\n+  \/\/ Unused buckets\n+  int unused_buckets = 0;\n@@ -199,0 +205,3 @@\n+    if (head == NULL) {\n+      unused_buckets ++;\n+    }\n@@ -211,1 +220,1 @@\n-    lengths[i] = this_chain_length;\n+    lengths[i] = (uint16_t)MIN2(this_chain_length, USHRT_MAX);\n@@ -216,1 +225,2 @@\n-  st->print_cr(\"\\tEmpty entries: %d (%2.2f%%)\", empty_entries, ((float)empty_entries * 100) \/ total_entries);\n+  st->print_cr(\"\\tEmpty entries (no outstanding mallocs): %d (%2.2f%%)\",\n+                  empty_entries, ((float)empty_entries * 100) \/ total_entries);\n@@ -219,15 +229,1 @@\n-  \/\/ We report the hash distribution (chain length distribution) of the n shortest chains\n-  \/\/  - under the assumption that this usually contains all lengths. Reporting threshold\n-  \/\/  is 20, and the expected avg chain length is 5..6 (see table size).\n-  static const int chain_length_threshold = 20;\n-  int chain_length_distribution[chain_length_threshold] = { 0 };\n-  int over_threshold = 0;\n-  int longest_chain_length = 0;\n-  for (int i = 0; i < table_size; i ++) {\n-    if (lengths[i] >= chain_length_threshold) {\n-      over_threshold ++;\n-    } else {\n-      chain_length_distribution[lengths[i]] ++;\n-    }\n-    longest_chain_length = MAX2(longest_chain_length, lengths[i]);\n-  }\n+  qsort(lengths, table_size, sizeof(uint16_t), qsort_helper);\n@@ -235,13 +231,4 @@\n-  st->print_cr(\"Hash distribution:\");\n-  if (chain_length_distribution[0] == 0) {\n-    st->print_cr(\"no empty buckets.\");\n-  } else {\n-    st->print_cr(\"%d buckets are empty.\", chain_length_distribution[0]);\n-  }\n-  for (int len = 1; len < MIN2(longest_chain_length + 1, chain_length_threshold); len ++) {\n-    st->print_cr(\"%2d %s: %d.\", len, (len == 1 ? \"  entry\" : \"entries\"), chain_length_distribution[len]);\n-  }\n-  if (longest_chain_length >= chain_length_threshold) {\n-    st->print_cr(\">=%2d entries: %d.\", chain_length_threshold, over_threshold);\n-  }\n-  st->print_cr(\"most entries: %d.\", longest_chain_length);\n+  st->print_cr(\"Bucket chain length distribution:\");\n+  st->print_cr(\"unused:  %d\", unused_buckets);\n+  st->print_cr(\"longest: %d\", lengths[table_size - 1]);\n+  st->print_cr(\"median:  %d\", lengths[table_size \/ 2]);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":18,"deletions":31,"binary":false,"changes":49,"status":"modified"}]}