{"files":[{"patch":"@@ -26,1 +26,0 @@\n-import java.io.IOException;\n@@ -28,0 +27,1 @@\n+import java.io.IOException;\n@@ -29,0 +29,1 @@\n+import java.nio.ByteBuffer;\n@@ -54,0 +55,1 @@\n+import static java.nio.file.StandardOpenOption.*;\n@@ -157,1 +159,3 @@\n-        Path sourceFile = Files.createTempFile(CWD, \"test2GBSource\", null);\n+        String fileName = String.format(\"test3GBSource%s.tmp\",\n+            String.valueOf(RND.nextInt(Integer.MAX_VALUE)));\n+        Path sourceFile = CWD.resolve(fileName);\n@@ -162,3 +166,16 @@\n-                \/\/ writing 3 GB of random bytes into source file\n-                for (int i = 0; i < NUM_WRITES; i++)\n-                    Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND);) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ fill the remainder of the file with random bytes\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n@@ -175,1 +192,2 @@\n-                assertEquals(count, BYTES_WRITTEN);\n+                \/\/ less the value of the initial position\n+                assertEquals(count, BYTES_WRITTEN - initPos);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"}]}