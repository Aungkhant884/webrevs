{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.io.RandomAccessFile;\n@@ -160,1 +159,2 @@\n-        Path sourceFile = Files.createTempFile(CWD, \"test2GBSource\", null);\n+        Path sourceFile = CWD.resolve(Path.of(String.format(\"test3GBSource%s.tmp\",\n+            String.valueOf(RND.nextInt(Integer.MAX_VALUE)))));\n@@ -165,9 +165,11 @@\n-                \/\/ create (hopefully sparse) file less than 2GB in size\n-                final long initLen = (2*1024 - 1)*BYTES_PER_WRITE;\n-                try (RandomAccessFile raf =\n-                    new RandomAccessFile(sourceFile.toFile(), \"rw\")) {\n-                    raf.setLength(initLen);\n-                }\n-                \/\/ fill the remainder of the file with random bytes\n-                try (FileChannel fc = FileChannel.open(sourceFile, WRITE, APPEND);) {\n-                    int nw = (int)(NUM_WRITES - initLen\/BYTES_PER_WRITE);\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW,\n+                    SPARSE, WRITE, APPEND);) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ fill the remainder of the file with random bytes\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n@@ -190,1 +192,2 @@\n-                assertEquals(count, BYTES_WRITTEN);\n+                \/\/ less the value of the initial position\n+                assertEquals(count, BYTES_WRITTEN - initPos);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"}]}