{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -33,1 +33,1 @@\n-    first_available_sp_in_frame = frame::z_abi_16_size,\n+    first_available_sp_in_frame = frame::z_common_abi_size,\n","filename":"src\/hotspot\/cpu\/s390\/c1_FrameMap_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -241,1 +241,1 @@\n-  __ z_lg(Z_EXC_PC, _z_abi16(return_pc), Z_SP);\n+  __ z_lg(Z_EXC_PC, _z_common_abi(return_pc), Z_SP);\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -810,1 +810,1 @@\n-      __ z_lg(Z_EXC_PC, Address(Z_SP, frame_size_in_bytes + _z_abi16(return_pc)));\n+      __ z_lg(Z_EXC_PC, Address(Z_SP, frame_size_in_bytes + _z_common_abi(return_pc)));\n@@ -853,1 +853,1 @@\n-    __ z_cg(Z_EXC_PC, Address(reg_fp, _z_abi16(return_pc)));\n+    __ z_cg(Z_EXC_PC, Address(reg_fp, _z_common_abi(return_pc)));\n","filename":"src\/hotspot\/cpu\/s390\/c1_Runtime1_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -120,1 +120,1 @@\n-    z_abi_16* sender_abi = (z_abi_16*)fp;\n+    z_common_abi* sender_abi = (z_common_abi*)fp;\n@@ -281,1 +281,1 @@\n-  int min_frame_slots = (z_abi_16_size + z_ijava_state_size) \/ sizeof(intptr_t);\n+  int min_frame_slots = (z_common_abi_size + z_ijava_state_size) \/ sizeof(intptr_t);\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -50,1 +50,1 @@\n-  \/\/    0       [ABI_16]\n+  \/\/    0       [Z_COMMON_ABI]\n@@ -64,1 +64,1 @@\n-  \/\/  ABI_16:\n+  \/\/  Z_COMMON_ABI:\n@@ -79,1 +79,2 @@\n-  struct z_abi_16 {\n+  \/\/ Common ABI. On top of all frames, C and Java\n+  struct z_common_abi {\n@@ -85,1 +86,1 @@\n-    z_abi_16_size = sizeof(z_abi_16)\n+    z_common_abi_size = sizeof(z_common_abi)\n@@ -88,2 +89,7 @@\n-  #define _z_abi16(_component) \\\n-          (offset_of(frame::z_abi_16, _component))\n+  #define _z_common_abi(_component) \\\n+          (offset_of(frame::z_common_abi, _component))\n+\n+  \/\/ Z_NATIVE_ABI for native C frames.\n+  struct z_native_abi: z_common_abi {\n+    \/\/ Nothing to add here!\n+  };\n@@ -101,3 +107,1 @@\n-  struct z_abi_160 {\n-    uint64_t callers_sp;\n-    uint64_t return_pc;\n+  struct z_abi_160 : z_native_abi {\n@@ -126,0 +130,1 @@\n+    z_native_abi_size = sizeof(z_native_abi),\n@@ -161,0 +166,4 @@\n+  \/\/ We differentiate between TOP and PARENT frames.\n+  \/\/ TOP frames allow for calling native C code.\n+  \/\/ A TOP frame is trimmed to a PARENT frame when calling a Java method.\n+  \/\/\n@@ -253,1 +262,1 @@\n-  \/\/ PARENT_IJAVA_FRAME_ABI\n+  \/\/ ABI for every Java frame, compiled and interpreted\n@@ -255,1 +264,2 @@\n-  struct z_parent_ijava_frame_abi : z_abi_16 {\n+  struct z_java_abi : z_common_abi {\n+    \/\/ Nothing to add here!\n@@ -258,2 +268,2 @@\n-  enum {\n-    z_parent_ijava_frame_abi_size = sizeof(z_parent_ijava_frame_abi)\n+  struct z_parent_ijava_frame_abi : z_java_abi {\n+    \/\/ Nothing to add here!\n@@ -271,0 +281,2 @@\n+    z_java_abi_size = sizeof(z_java_abi),\n+    z_parent_ijava_frame_abi_size = sizeof(z_parent_ijava_frame_abi),\n@@ -360,11 +372,2 @@\n- public:\n-\n-   struct z_top_jit_abi_32 {\n-     uint64_t callers_sp;\n-     uint64_t return_pc;\n-     uint64_t toc;\n-     uint64_t tmp;\n-   };\n-\n-  #define _z_top_jit_abi(_component) \\\n-          (offset_of(frame::z_top_jit_abi_32, _component))\n+  \/\/ For JIT frames we don't differentiate between TOP and PARENT frames.\n+  \/\/ Runtime calls go through stubs which push a new frame.\n@@ -381,1 +384,1 @@\n-  struct jit_out_preserve : z_top_jit_abi_32 {\n+  struct jit_out_preserve : z_java_abi {\n@@ -476,1 +479,1 @@\n-  inline z_abi_16*  own_abi()     const { return (z_abi_16*) sp(); }\n+  inline z_common_abi*  own_abi()     const { return (z_common_abi*) sp(); }\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2128,1 +2128,1 @@\n-  int retPC_offset = _z_abi16(return_pc) + frame_size_in_bytes;\n+  int retPC_offset = _z_common_abi(return_pc) + frame_size_in_bytes;\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2016 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -253,1 +253,1 @@\n-  z_stg(pc, _z_abi16(return_pc), Z_SP);\n+  z_stg(pc, _z_common_abi(return_pc), Z_SP);\n@@ -257,1 +257,1 @@\n-  z_lg(Z_R14, _z_abi16(return_pc), Z_SP);\n+  z_lg(Z_R14, _z_common_abi(return_pc), Z_SP);\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2023 SAP SE. All rights reserved.\n@@ -332,1 +332,1 @@\n-  __ z_lg(return_pc, _z_abi16(return_pc) + frame_size_in_bytes, Z_SP);\n+  __ z_lg(return_pc, _z_common_abi(return_pc) + frame_size_in_bytes, Z_SP);\n@@ -2924,1 +2924,1 @@\n-    const int offset_of_return_pc = _z_abi16(return_pc) + RegisterSaver::live_reg_frame_size(RegisterSaver::all_registers);\n+    const int offset_of_return_pc = _z_common_abi(return_pc) + RegisterSaver::live_reg_frame_size(RegisterSaver::all_registers);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1090,1 +1090,1 @@\n-  NOT_PRODUCT(__ z_cg(Z_R14, _z_abi16(return_pc), Z_SP));\n+  NOT_PRODUCT(__ z_cg(Z_R14, _z_common_abi(return_pc), Z_SP));\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}