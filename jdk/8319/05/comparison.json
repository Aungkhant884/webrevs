{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-     *     of the specified cryptographic primitives\n+     *     the specified cryptographic primitives\n@@ -69,1 +69,1 @@\n-    public boolean permits(Set<CryptoPrimitive> primitives,\n+    boolean permits(Set<CryptoPrimitive> primitives,\n@@ -81,1 +81,1 @@\n-     * @return true if the key can be used for all of the specified\n+     * @return true if the key can be used for all the specified\n@@ -87,1 +87,1 @@\n-    public boolean permits(Set<CryptoPrimitive> primitives, Key key);\n+    boolean permits(Set<CryptoPrimitive> primitives, Key key);\n@@ -99,1 +99,1 @@\n-     * @return true if the key and the algorithm can be used for all of the\n+     * @return true if the key and the algorithm can be used for all the\n@@ -105,1 +105,1 @@\n-    public boolean permits(Set<CryptoPrimitive> primitives,\n+    boolean permits(Set<CryptoPrimitive> primitives,\n","filename":"src\/java.base\/share\/classes\/java\/security\/AlgorithmConstraints.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -105,1 +105,1 @@\n-    private AlgorithmParameterGeneratorSpi paramGenSpi;\n+    private final AlgorithmParameterGeneratorSpi paramGenSpi;\n@@ -108,1 +108,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -153,1 +153,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/java\/security\/AlgorithmParameterGenerator.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -81,1 +81,1 @@\n-    private AlgorithmParametersSpi paramSpi;\n+    private final AlgorithmParametersSpi paramSpi;\n@@ -84,1 +84,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -134,1 +134,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -345,1 +345,1 @@\n-     * @param <T> the type of the parameter specification to be returrned\n+     * @param <T> the type of the parameter specification to be returned\n@@ -359,1 +359,1 @@\n-        if (this.initialized == false) {\n+        if (!this.initialized) {\n@@ -377,1 +377,1 @@\n-        if (this.initialized == false) {\n+        if (!this.initialized) {\n@@ -399,1 +399,1 @@\n-        if (this.initialized == false) {\n+        if (!this.initialized) {\n@@ -412,1 +412,1 @@\n-        if (this.initialized == false) {\n+        if (!this.initialized) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/AlgorithmParameters.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.security.*;\n-import java.util.Enumeration;\n-import java.util.Hashtable;\n-import java.util.StringTokenizer;\n@@ -34,0 +30,2 @@\n+import java.util.Enumeration;\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/AllPermission.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * \"setFactory\", \"print.queueJob\", etc). The naming\n+ * \"setFactory\", \"print.queueJob\", etc.). The naming\n","filename":"src\/java.base\/share\/classes\/java\/security\/BasicPermission.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    private CertPath signerCertPath;\n+    private final CertPath signerCertPath;\n@@ -56,1 +56,1 @@\n-    private Timestamp timestamp;\n+    private final Timestamp timestamp;\n@@ -129,1 +129,1 @@\n-        if (obj == null || (!(obj instanceof CodeSigner that))) {\n+        if ((!(obj instanceof CodeSigner that))) {\n@@ -142,2 +142,1 @@\n-            if (thatTimestamp == null ||\n-                (! timestamp.equals(thatTimestamp))) {\n+            if ((!timestamp.equals(thatTimestamp))) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSigner.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-     * form should be behave in the same manner as the URL when compared for\n+     * form should behave in the same manner as the URL when compared for\n@@ -214,1 +214,1 @@\n-                        new java.security.cert.Certificate[certChains.size()]);\n+                    new java.security.cert.Certificate[0]);\n@@ -333,1 +333,1 @@\n-     *               Otherwise a subset match is performed.\n+     *               Otherwise, a subset match is performed.\n@@ -464,3 +464,1 @@\n-                if (!this.sp.implies(that.sp)) {\n-                    return false;\n-                }\n+                return this.sp.implies(that.sp);\n@@ -573,1 +571,1 @@\n-            certList = new ArrayList<>(size > 20 ? 20 : size);\n+            certList = new ArrayList<>(Math.min(size, 20));\n@@ -668,1 +666,1 @@\n-                return signers.toArray(new CodeSigner[signers.size()]);\n+                return signers.toArray(new CodeSigner[0]);\n","filename":"src\/java.base\/share\/classes\/java\/security\/CodeSource.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.FilterInputStream;\n@@ -29,1 +30,0 @@\n-import java.io.EOFException;\n@@ -31,3 +31,0 @@\n-import java.io.FilterInputStream;\n-import java.io.PrintStream;\n-import java.io.ByteArrayInputStream;\n","filename":"src\/java.base\/share\/classes\/java\/security\/DigestInputStream.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.FilterOutputStream;\n@@ -29,1 +30,0 @@\n-import java.io.EOFException;\n@@ -31,3 +31,0 @@\n-import java.io.FilterOutputStream;\n-import java.io.PrintStream;\n-import java.io.ByteArrayOutputStream;\n","filename":"src\/java.base\/share\/classes\/java\/security\/DigestOutputStream.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n- * string of colon-separated pairs of hexadecimal digits. Multi-valued\n+ * string of colon-separated pairs of hexadecimal digits. Multivalued\n","filename":"src\/java.base\/share\/classes\/java\/security\/DomainLoadStoreParameter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -406,1 +407,1 @@\n-            return strength + \",\" + capability + \",\" + personalizationString;\n+            return strength + \",\" + capability + \",\" + Arrays.toString(personalizationString);\n","filename":"src\/java.base\/share\/classes\/java\/security\/DrbgParameters.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * to determine whether or not to allow access to the object.\n+ * to determine whether to allow access to the object.\n@@ -47,1 +47,1 @@\n-     * Determines whether or not to allow access to the guarded object\n+     * Determines whether to allow access to the guarded object\n","filename":"src\/java.base\/share\/classes\/java\/security\/Guard.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    private Object object;\n+    private final Object object;\n@@ -67,1 +67,1 @@\n-    private Guard guard;\n+    private final Guard guard;\n","filename":"src\/java.base\/share\/classes\/java\/security\/GuardedObject.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * length, uninitialized, etc).\n+ * length, uninitialized, etc.).\n","filename":"src\/java.base\/share\/classes\/java\/security\/InvalidKeyException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-    static final long serialVersionUID = 6603384152749567654L;\n+   long serialVersionUID = 6603384152749567654L;\n@@ -129,1 +129,1 @@\n-    public String getAlgorithm();\n+    String getAlgorithm();\n@@ -148,1 +148,1 @@\n-    public String getFormat();\n+    String getFormat();\n@@ -157,1 +157,1 @@\n-    public byte[] getEncoded();\n+    byte[] getEncoded();\n","filename":"src\/java.base\/share\/classes\/java\/security\/Key.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * <P> Key factories are bi-directional. That is, they allow you to build an\n+ * <P> Key factories are bidirectional. That is, they allow you to build an\n@@ -161,1 +161,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * <P> Key factories are bi-directional. That is, they allow you to build an\n+ * <P> Key factories are bidirectional. That is, they allow you to build an\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyFactorySpi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.util.*;\n-\n@@ -48,1 +46,1 @@\n-    private PrivateKey privateKey;\n+    private final PrivateKey privateKey;\n@@ -51,1 +49,1 @@\n-    private PublicKey publicKey;\n+    private final PublicKey publicKey;\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPair.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -235,1 +235,1 @@\n-        if (t.hasNext() == false) {\n+        if (!t.hasNext()) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyPairGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n-import java.io.*;\n-import java.util.Locale;\n-\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.NotSerializableException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n@@ -33,4 +34,1 @@\n-import java.security.spec.InvalidKeySpecException;\n-\n-import javax.crypto.SecretKeyFactory;\n-import javax.crypto.spec.SecretKeySpec;\n+import java.util.Locale;\n@@ -68,1 +66,1 @@\n-    public static enum Type {\n+    public enum Type {\n@@ -90,1 +88,1 @@\n-    private Type type;\n+    private final Type type;\n@@ -97,1 +95,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -104,1 +102,1 @@\n-    private String format;\n+    private final String format;\n@@ -111,1 +109,1 @@\n-    private byte[] encoded;\n+    private final byte[] encoded;\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyRep.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n- * <p> Whether aliases are case sensitive is implementation dependent. In order\n+ * <p> Whether aliases are case-sensitive is implementation dependent. In order\n@@ -214,1 +214,1 @@\n-    private String type;\n+    private final String type;\n@@ -217,1 +217,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -220,1 +220,1 @@\n-    private KeyStoreSpi keyStoreSpi;\n+    private final KeyStoreSpi keyStoreSpi;\n@@ -234,1 +234,1 @@\n-    public static interface LoadStoreParameter {\n+    public interface LoadStoreParameter {\n@@ -240,1 +240,1 @@\n-        public ProtectionParameter getProtectionParameter();\n+        ProtectionParameter getProtectionParameter();\n@@ -255,1 +255,1 @@\n-    public static interface ProtectionParameter { }\n+    public interface ProtectionParameter { }\n@@ -423,1 +423,1 @@\n-    public static interface Entry {\n+    public interface Entry {\n@@ -435,2 +435,2 @@\n-        public default Set<Attribute> getAttributes() {\n-            return Collections.<Attribute>emptySet();\n+        default Set<Attribute> getAttributes() {\n+            return Collections.emptySet();\n@@ -445,1 +445,1 @@\n-        public interface Attribute {\n+        interface Attribute {\n@@ -451,1 +451,1 @@\n-            public String getName();\n+            String getName();\n@@ -455,1 +455,1 @@\n-             * Multi-valued attributes encode their values as a single string.\n+             * Multivalued attributes encode their values as a single string.\n@@ -459,1 +459,1 @@\n-            public String getValue();\n+            String getValue();\n@@ -500,1 +500,1 @@\n-            this(privateKey, chain, Collections.<Attribute>emptySet());\n+            this(privateKey, chain, Collections.emptySet());\n@@ -663,1 +663,1 @@\n-            this.attributes = Collections.<Attribute>emptySet();\n+            this.attributes = Collections.emptySet();\n@@ -746,1 +746,1 @@\n-            this.attributes = Collections.<Attribute>emptySet();\n+            this.attributes = Collections.emptySet();\n@@ -845,1 +845,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -991,5 +991,2 @@\n-        String kstype = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public String run() {\n-                return Security.getProperty(KEYSTORE_TYPE);\n-            }\n-        });\n+        String kstype = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+            Security.getProperty(KEYSTORE_TYPE));\n@@ -1779,1 +1776,1 @@\n-        if (file.isFile() == false) {\n+        if (!file.isFile()) {\n@@ -1920,1 +1917,1 @@\n-            if (keyStore.initialized == false) {\n+            if (!keyStore.initialized) {\n@@ -1936,1 +1933,1 @@\n-                    if (getCalled == false) {\n+                    if (!getCalled) {\n@@ -2058,1 +2055,1 @@\n-            private ProtectionParameter protection;\n+            private final ProtectionParameter protection;\n@@ -2112,1 +2109,1 @@\n-                        char[] password = null;\n+                        char[] password;\n@@ -2216,1 +2213,1 @@\n-                        = new PrivilegedExceptionAction<KeyStore>() {\n+                        = new PrivilegedExceptionAction<>() {\n@@ -2276,1 +2273,1 @@\n-                    if (getCalled == false) {\n+                    if (!getCalled) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":27,"deletions":30,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -383,1 +383,1 @@\n-     * Otherwise the {@code KeyStore.ProtectionParameter} of\n+     * Otherwise, the {@code KeyStore.ProtectionParameter} of\n@@ -418,1 +418,1 @@\n-            engineLoad((InputStream)null, (char[])null);\n+            engineLoad(null, (char[])null);\n@@ -447,1 +447,0 @@\n-        return;\n@@ -613,2 +612,1 @@\n-                    pProtect.getPassword(),\n-                    (Certificate[])null);\n+                    pProtect.getPassword(), null);\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStoreSpi.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -159,1 +159,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -305,4 +305,2 @@\n-            MessageDigest delegate =\n-                    Delegate.of((MessageDigestSpi)objs[0], algorithm,\n-                    (Provider)objs[1]);\n-            return delegate;\n+            return Delegate.of((MessageDigestSpi)objs[0], algorithm,\n+                (Provider)objs[1]);\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-        if (input.hasRemaining() == false) {\n+        if (!input.hasRemaining()) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigestSpi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-     * Multi-valued attributes are represented as a comma-separated\n+     * Multivalued attributes are represented as a comma-separated\n@@ -165,1 +165,1 @@\n-     * Multi-valued attributes are represented as a comma-separated\n+     * Multivalued attributes are represented as a comma-separated\n","filename":"src\/java.base\/share\/classes\/java\/security\/PKCS12Attribute.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-    private String name;\n+    private final String name;\n@@ -119,1 +119,1 @@\n-     * whether or not a requested permission is implied by another permission that\n+     * whether a requested permission is implied by another permission that\n@@ -210,1 +210,1 @@\n-     * one that uses a Vector, etc).\n+     * one that uses a Vector, etc.).\n","filename":"src\/java.base\/share\/classes\/java\/security\/Permission.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n- * (one that uses a Hashtable, one that uses a Vector, etc).\n+ * (one that uses a Hashtable, one that uses a Vector, etc.).\n","filename":"src\/java.base\/share\/classes\/java\/security\/PermissionCollection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -435,1 +435,1 @@\n-    private Iterator<PermissionCollection> perms;\n+    private final Iterator<PermissionCollection> perms;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Permissions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    public boolean equals(Object another);\n+    boolean equals(Object another);\n@@ -59,1 +59,1 @@\n-    public String toString();\n+    String toString();\n@@ -66,1 +66,1 @@\n-    public int hashCode();\n+    int hashCode();\n@@ -73,1 +73,1 @@\n-    public String getName();\n+    String getName();\n@@ -91,1 +91,1 @@\n-    public default boolean implies(Subject subject) {\n+    default boolean implies(Subject subject) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/Principal.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    static final long serialVersionUID = 6034044314589513430L;\n+    long serialVersionUID = 6034044314589513430L;\n","filename":"src\/java.base\/share\/classes\/java\/security\/PrivateKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +137,1 @@\n-    private CodeSource codesource ;\n+    private final CodeSource codesource ;\n@@ -140,1 +140,1 @@\n-    private ClassLoader classloader;\n+    private final ClassLoader classloader;\n@@ -143,1 +143,1 @@\n-    private Principal[] principals;\n+    private final Principal[] principals;\n@@ -374,1 +374,1 @@\n-                \/\/ inside and it also covers the static permissions.\n+                \/\/ inside, and it also covers the static permissions.\n@@ -450,1 +450,1 @@\n-     *          SecurityManager impelmentation is in bootclasspath,\n+     *          SecurityManager implementation is in bootclasspath,\n@@ -466,5 +466,3 @@\n-                if (sm.getClass().getClassLoader() == null &&\n-                    Policy.getPolicyNoCheck().getClass().getClassLoader()\n-                                                                == null) {\n-                    return true;\n-                }\n+                return sm.getClass().getClassLoader() == null &&\n+                        Policy.getPolicyNoCheck().getClass().getClassLoader()\n+                                == null;\n@@ -476,1 +474,1 @@\n-                    \/\/ fall thru and return false\n+                    return false;\n@@ -480,2 +478,0 @@\n-\n-        return false;\n@@ -491,6 +487,2 @@\n-            (new java.security.PrivilegedAction<>() {\n-                    public PermissionCollection run() {\n-                        Policy p = Policy.getPolicyNoCheck();\n-                        return p.getPermissions(ProtectionDomain.this);\n-                    }\n-                });\n+            ((PrivilegedAction<PermissionCollection>) () ->\n+                Policy.getPolicyNoCheck().getPermissions(ProtectionDomain.this));\n","filename":"src\/java.base\/share\/classes\/java\/security\/ProtectionDomain.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    private String name;\n+    private final String name;\n@@ -129,1 +129,1 @@\n-    private String info;\n+    private final String info;\n@@ -195,1 +195,1 @@\n-        this.prngAlgos = new LinkedHashSet<String>(6);\n+        this.prngAlgos = new LinkedHashSet<>(6);\n@@ -235,1 +235,1 @@\n-        this.prngAlgos = new LinkedHashSet<String>(6);\n+        this.prngAlgos = new LinkedHashSet<>(6);\n@@ -389,1 +389,1 @@\n-     * Copies all of the mappings from the specified Map to this provider.\n+     * Copies all the mappings from the specified Map to this provider.\n@@ -886,1 +886,1 @@\n-        this.prngAlgos = new LinkedHashSet<String>(6);\n+        this.prngAlgos = new LinkedHashSet<>(6);\n@@ -893,1 +893,1 @@\n-    \/\/ is String but it's provider-related (name\/version\/info\/className)\n+    \/\/ is String, but it's provider-related (name\/version\/info\/className)\n@@ -904,1 +904,1 @@\n-     * Copies all of the mappings from the specified Map to this provider.\n+     * Copies all the mappings from the specified Map to this provider.\n@@ -1096,0 +1096,3 @@\n+\n+        \/\/ Don't change '==' to equals.\n+        \/\/ This method tests for equality of pointers.\n@@ -1122,2 +1125,2 @@\n-    private static enum OPType {\n-        ADD, REMOVE;\n+    private enum OPType {\n+        ADD, REMOVE\n@@ -1257,1 +1260,1 @@\n-     * @param algorithm the case insensitive algorithm name (or alternate\n+     * @param algorithm the case-insensitive algorithm name (or alternate\n@@ -1271,1 +1274,1 @@\n-        if (key.matches(type, algorithm) == false) {\n+        if (!key.matches(type, algorithm)) {\n@@ -1328,1 +1331,1 @@\n-     * name exists and it was added using {@link #putService putService()},\n+     * name exists, and it was added using {@link #putService putService()},\n@@ -1509,1 +1512,1 @@\n-    \/\/ Wrapped String that behaves in a case insensitive way for equals\/hashCode\n+    \/\/ Wrapped String that behaves in a case-insensitive way for equals\/hashCode\n@@ -1668,1 +1671,1 @@\n-        \/\/ if TRUE, at least one of supportedFormats\/Classes is non null\n+        \/\/ if TRUE, at least one of supportedFormats\/Classes is non-null\n@@ -1690,2 +1693,2 @@\n-            aliases = Collections.<String>emptyList();\n-            attributes = Collections.<UString,String>emptyMap();\n+            aliases = Collections.emptyList();\n+            attributes = Collections.emptyMap();\n@@ -1757,1 +1760,1 @@\n-                this.aliases = Collections.<String>emptyList();\n+                this.aliases = Collections.emptyList();\n@@ -1762,1 +1765,1 @@\n-                this.attributes = Collections.<UString,String>emptyMap();\n+                this.attributes = Collections.emptyMap();\n@@ -1809,1 +1812,1 @@\n-        private final List<String> getAliases() {\n+        private List<String> getAliases() {\n@@ -1858,1 +1861,1 @@\n-            if (registered == false) {\n+            if (!registered) {\n@@ -1885,1 +1888,1 @@\n-                            if (ctrParamClz.isAssignableFrom(argClass) == false) {\n+                            if (!ctrParamClz.isAssignableFrom(argClass)) {\n@@ -2057,4 +2060,1 @@\n-            if (supportsKeyClass(key)) {\n-                return true;\n-            }\n-            return false;\n+            return supportsKeyClass(key);\n@@ -2091,1 +2091,1 @@\n-                        boolean bool = (supportedFormats != null)\n+                        b = (supportedFormats != null)\n@@ -2093,1 +2093,0 @@\n-                        b = Boolean.valueOf(bool);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":27,"deletions":28,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    static final long serialVersionUID = 7187392471159151072L;\n+    long serialVersionUID = 7187392471159151072L;\n","filename":"src\/java.base\/share\/classes\/java\/security\/PublicKey.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import sun.security.util.Debug;\n+\n@@ -31,3 +33,0 @@\n-import java.util.function.Function;\n-\n-import sun.security.util.Debug;\n@@ -222,12 +221,8 @@\n-        return pdcache.computeIfAbsent(key, new Function<>() {\n-            @Override\n-            public ProtectionDomain apply(CodeSourceKey key \/* not used *\/) {\n-                PermissionCollection perms\n-                        = SecureClassLoader.this.getPermissions(cs);\n-                ProtectionDomain pd = new ProtectionDomain(\n-                        cs, perms, SecureClassLoader.this, null);\n-                if (DebugHolder.debug != null) {\n-                    DebugHolder.debug.println(\" getPermissions \" + pd);\n-                    DebugHolder.debug.println(\"\");\n-                }\n-                return pd;\n+        return pdcache.computeIfAbsent(key, unused -> {\n+            PermissionCollection perms\n+                    = SecureClassLoader.this.getPermissions(cs);\n+            ProtectionDomain pd = new ProtectionDomain(\n+                    cs, perms, SecureClassLoader.this, null);\n+            if (DebugHolder.debug != null) {\n+                DebugHolder.debug.println(\" getPermissions \" + pd);\n+                DebugHolder.debug.println(\"\");\n@@ -235,0 +230,1 @@\n+            return pd;\n@@ -238,6 +234,1 @@\n-    private static class CodeSourceKey {\n-        private final CodeSource cs;\n-\n-        CodeSourceKey(CodeSource cs) {\n-            this.cs = cs;\n-        }\n+    private record CodeSourceKey(CodeSource cs) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureClassLoader.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,0 @@\n-import java.math.BigInteger;\n-import java.util.*;\n-import java.util.random.RandomGenerator;\n-import java.util.regex.*;\n-import java.security.Provider.Service;\n-\n@@ -35,1 +29,1 @@\n-import sun.security.jca.*;\n+import sun.security.jca.GetInstance;\n@@ -37,0 +31,1 @@\n+import sun.security.jca.Providers;\n@@ -40,0 +35,5 @@\n+import java.security.Provider.Service;\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n@@ -50,1 +50,1 @@\n- * Therefore any seed material passed to a {@code SecureRandom} object must be\n+ * Therefore, any seed material passed to a {@code SecureRandom} object must be\n@@ -207,1 +207,1 @@\n-     * If none of the Providers support a RNG algorithm,\n+     * If none of the Providers support an RNG algorithm,\n@@ -248,1 +248,1 @@\n-     * If none of the Providers support a RNG algorithm,\n+     * If none of the Providers support an RNG algorithm,\n@@ -287,1 +287,1 @@\n-        \/\/ per javadoc, if none of the Providers support a RNG algorithm,\n+        \/\/ per javadoc, if none of the Providers support an RNG algorithm,\n@@ -363,1 +363,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -500,1 +500,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -799,1 +799,1 @@\n-     * to provide a source of random bits to all of the methods inherited\n+     * to provide a source of random bits to all the methods inherited\n@@ -903,1 +903,1 @@\n-        private static Pattern pattern =\n+        private static final Pattern pattern =\n@@ -905,1 +905,1 @@\n-                \"\\\\s*([\\\\S&&[^:,]]*)(\\\\:([\\\\S&&[^,]]*))?\\\\s*(\\\\,(.*))?\");\n+                \"\\\\s*([\\\\S&&[^:,]]*)(:([\\\\S&&[^,]]*))?\\\\s*(,(.*))?\");\n@@ -938,7 +938,2 @@\n-            new PrivilegedAction<>() {\n-                @Override\n-                public String run() {\n-                    return Security.getProperty(\n-                        \"securerandom.strongAlgorithms\");\n-                }\n-            });\n+                (PrivilegedAction<String>) () -> Security.getProperty(\n+                    \"securerandom.strongAlgorithms\"));\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":19,"deletions":24,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n- * {@link #SecureRandomSpi()} constructor must be overridden and it will be\n+ * {@link #SecureRandomSpi()} constructor must be overridden, and it will be\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandomSpi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,5 +75,3 @@\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public Void run() {\n-                initialize();\n-                return null;\n-            }\n+        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n+            initialize();\n+            return null;\n@@ -232,1 +230,0 @@\n-        ProviderProperty entry = null;\n@@ -237,1 +234,1 @@\n-            String matchKey = null;\n+            String matchKey;\n@@ -245,1 +242,1 @@\n-                                e.hasMoreElements() && prop == null; ) {\n+                                e.hasMoreElements(); ) {\n@@ -262,1 +259,1 @@\n-        return entry;\n+        return null;\n@@ -274,1 +271,1 @@\n-                                e.hasMoreElements() && prop == null; ) {\n+                                e.hasMoreElements(); ) {\n@@ -537,2 +534,2 @@\n-        String key = null;\n-        String value = null;\n+        String key;\n+        String value;\n@@ -634,1 +631,1 @@\n-            if ((newCandidates != null) && !newCandidates.isEmpty()) {\n+            if (!newCandidates.isEmpty()) {\n@@ -638,7 +635,1 @@\n-                for (Iterator<Provider> cansIte = candidates.iterator();\n-                     cansIte.hasNext(); ) {\n-                    Provider prov = cansIte.next();\n-                    if (!newCandidates.contains(prov)) {\n-                        cansIte.remove();\n-                    }\n-                }\n+                candidates.removeIf(prov -> !newCandidates.contains(prov));\n@@ -738,1 +729,1 @@\n-     * security property value..\n+     * security property value.\n@@ -861,1 +852,1 @@\n-        \/\/ If the third isn't null, that is the attrinute name.\n+        \/\/ If the third isn't null, that is the attribute name.\n@@ -956,4 +947,1 @@\n-        if (attribute.equalsIgnoreCase(\"ImplementedIn\"))\n-            return true;\n-\n-        return false;\n+        return attribute.equalsIgnoreCase(\"ImplementedIn\");\n@@ -974,5 +962,1 @@\n-            if (requestedSize <= maxSize) {\n-                return true;\n-            } else {\n-                return false;\n-            }\n+            return requestedSize <= maxSize;\n@@ -1000,1 +984,1 @@\n-        String algName = null;\n+        String algName;\n@@ -1008,1 +992,1 @@\n-                \/\/ There must be a algorithm or type name.\n+                \/\/ There must be an algorithm or type name.\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":17,"deletions":33,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import java.security.*;\n-import java.util.Enumeration;\n-import java.util.Hashtable;\n-import java.util.StringTokenizer;\n-\n@@ -39,1 +34,1 @@\n- * (see below). Currently the {@code SecurityPermission} object is used to\n+ * (see below). Currently, the {@code SecurityPermission} object is used to\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecurityPermission.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -267,1 +267,1 @@\n-        if (t.hasNext() == false) {\n+        if (!t.hasNext()) {\n@@ -308,1 +308,0 @@\n-        Boolean TRUE = Boolean.TRUE;\n@@ -310,10 +309,10 @@\n-        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);\n-        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);\n-        signatureInfo.put(\"sun.security.rsa.RSAPSSSignature\", TRUE);\n-        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);\n+        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", true);\n+        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", true);\n+        signatureInfo.put(\"sun.security.rsa.RSAPSSSignature\", true);\n+        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", true);\n@@ -337,1 +336,1 @@\n-                if ((debug != null) && (r == false)) {\n+                if ((debug != null) && (!r)) {\n@@ -554,1 +553,1 @@\n-                if ((keyUsageInfo != null) && (keyUsageInfo[0] == false))\n+                if ((keyUsageInfo != null) && (!keyUsageInfo[0]))\n@@ -965,1 +964,1 @@\n-     * (if appropriate), or an indication of whether or not to perform\n+     * (if appropriate), or an indication of whether to perform\n@@ -1036,1 +1035,1 @@\n-     * or an indication of whether or not to perform a specific but optional\n+     * or an indication of whether to perform a specific but optional\n@@ -1221,1 +1220,1 @@\n-                    if (isSpi(s) == false) {\n+                    if (!isSpi(s)) {\n@@ -1263,1 +1262,1 @@\n-                    if (key != null && s.supportsParameter(key) == false) {\n+                    if (key != null && !s.supportsParameter(key)) {\n@@ -1267,1 +1266,1 @@\n-                    if (isSpi(s) == false) {\n+                    if (!isSpi(s)) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-import java.security.spec.AlgorithmParameterSpec;\n-import java.util.*;\n-import java.io.*;\n+import sun.security.jca.JCAUtil;\n@@ -33,2 +31,1 @@\n-\n-import sun.security.jca.JCAUtil;\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -206,1 +203,1 @@\n-        if (input.hasRemaining() == false) {\n+        if (!input.hasRemaining()) {\n@@ -351,1 +348,1 @@\n-     * (if appropriate), or an indication of whether or not to perform\n+     * (if appropriate), or an indication of whether to perform\n@@ -420,1 +417,1 @@\n-     * appropriate), or an indication of whether or not to perform a\n+     * appropriate), or an indication of whether to perform a\n","filename":"src\/java.base\/share\/classes\/java\/security\/SignatureSpi.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,3 @@\n-import java.io.*;\n-import java.security.cert.Certificate;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.Serializable;\n@@ -31,1 +32,1 @@\n-import java.security.cert.X509Extension;\n+import java.security.cert.Certificate;\n@@ -62,1 +63,1 @@\n-    private CertPath signerCertPath;\n+    private final CertPath signerCertPath;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Timestamp.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    private java.net.URI uri;\n+    private final java.net.URI uri;\n","filename":"src\/java.base\/share\/classes\/java\/security\/URIParameter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-    private String type;\n+    private final String type;\n@@ -130,1 +130,1 @@\n-    private String name;\n+    private final String name;\n@@ -137,1 +137,1 @@\n-    private String actions;\n+    private final String actions;\n@@ -264,1 +264,1 @@\n-                              new Object[] { name});\n+                              new Object[] {null});\n@@ -268,1 +268,1 @@\n-                              new Object[] { name, actions });\n+                              new Object[] {null, null});\n@@ -280,1 +280,1 @@\n-                              new Object[] { name, actions });\n+                              new Object[] { name, null});\n@@ -366,4 +366,4 @@\n-        if ((this.certs == null && that.certs != null) ||\n-            (this.certs != null && that.certs == null) ||\n-            (this.certs != null && that.certs != null &&\n-                this.certs.length != that.certs.length)) {\n+        if (this.certs == null && that.certs != null ||\n+            this.certs != null && that.certs == null ||\n+            this.certs != null &&\n+               this.certs.length != that.certs.length) {\n@@ -579,1 +579,1 @@\n-            certList = new ArrayList<>(size > 20 ? 20 : size);\n+            certList = new ArrayList<>(Math.min(size, 20));\n","filename":"src\/java.base\/share\/classes\/java\/security\/UnresolvedPermission.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * on whether or not they list a given certificate.\n+ * on whether they list a given certificate.\n@@ -49,1 +49,1 @@\n-    private String type;\n+    private final String type;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CRL.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -305,1 +305,1 @@\n-        private String type;\n+        private final String type;\n@@ -307,1 +307,1 @@\n-        private byte[] data;\n+        private final byte[] data;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPath.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -322,5 +322,2 @@\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public String run() {\n-                    return Security.getProperty(CPB_TYPE);\n-                }\n-            });\n+            AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+                    Security.getProperty(CPB_TYPE));\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPathBuilder.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -334,5 +334,2 @@\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public String run() {\n-                    return Security.getProperty(CPV_TYPE);\n-                }\n-            });\n+            AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+                    Security.getProperty(CPV_TYPE));\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPathValidator.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    private CertPath certPath;\n+    private final CertPath certPath;\n@@ -260,1 +260,1 @@\n-    public static interface Reason extends java.io.Serializable { }\n+    public interface Reason extends java.io.Serializable { }\n@@ -269,1 +269,1 @@\n-    public static enum BasicReason implements Reason {\n+    public enum BasicReason implements Reason {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPathValidatorException.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,3 +102,3 @@\n-    private CertStoreSpi storeSpi;\n-    private Provider provider;\n-    private String type;\n+    private final CertStoreSpi storeSpi;\n+    private final Provider provider;\n+    private final String type;\n@@ -210,1 +210,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -430,1 +430,1 @@\n-    public static final String getDefaultType() {\n+    public static String getDefaultType() {\n@@ -432,5 +432,2 @@\n-        cstype = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public String run() {\n-                return Security.getProperty(CERTSTORE_TYPE);\n-            }\n-        });\n+        cstype = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n+                Security.getProperty(CERTSTORE_TYPE));\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertStore.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,1 +248,1 @@\n-        private String type;\n+        private final String type;\n@@ -251,1 +251,1 @@\n-        private byte[] data;\n+        private final byte[] data;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/Certificate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,1 @@\n-    private String type;\n+    private final String type;\n@@ -131,1 +131,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -134,1 +134,1 @@\n-    private CertificateFactorySpi certFacSpi;\n+    private final CertificateFactorySpi certFacSpi;\n@@ -170,1 +170,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertificateFactory.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n-import java.security.Provider;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertificateFactorySpi.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -190,2 +190,2 @@\n-     * @serialData the size of the extensions map (int), followed by all of\n-     * the extensions in the map, in no particular order. For each extension,\n+     * @serialData the size of the extensions map (int), followed by all the\n+     * extensions in the map, in no particular order. For each extension,\n@@ -248,1 +248,1 @@\n-            extensions = HashMap.newHashMap(size > 20 ? 20 : size);\n+            extensions = HashMap.newHashMap(Math.min(size, 20));\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertificateRevokedException.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.Serializable;\n@@ -58,1 +57,1 @@\n-    private Collection<?> coll;\n+    private final Collection<?> coll;\n@@ -135,5 +134,3 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"CollectionCertStoreParameters: [\\n\");\n-        sb.append(\"  collection: \" + coll + \"\\n\");\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return \"CollectionCertStoreParameters: [\\n\" +\n+                \"  collection: \" + coll + \"\\n\" +\n+                \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CollectionCertStoreParameters.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.io.Serializable;\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/Extension.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * instead as the URI may contain additional information such as the\n+ * instead, as the URI may contain additional information such as the\n@@ -59,1 +59,1 @@\n-    private int port;\n+    private final int port;\n@@ -64,1 +64,1 @@\n-    private String serverName;\n+    private final String serverName;\n@@ -146,2 +146,0 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"LDAPCertStoreParameters: [\\n\");\n@@ -149,4 +147,4 @@\n-        sb.append(\"  serverName: \" + serverName + \"\\n\");\n-        sb.append(\"  port: \" + port + \"\\n\");\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return \"LDAPCertStoreParameters: [\\n\" +\n+                \"  serverName: \" + serverName + \"\\n\" +\n+                \"  port: \" + port + \"\\n\" +\n+                \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/LDAPCertStoreParameters.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,6 +192,4 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"[\\n\");\n-        sb.append(super.toString());\n-        sb.append(\"  Maximum Path Length: \" + maxPathLength + \"\\n\");\n-        sb.append(\"]\\n\");\n-        return sb.toString();\n+        return \"[\\n\" +\n+                super.toString() +\n+                \"  Maximum Path Length: \" + maxPathLength + \"\\n\" +\n+                \"]\\n\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXBuilderParameters.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    private CertPath certPath;\n+    private final CertPath certPath;\n@@ -110,8 +110,6 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"PKIXCertPathBuilderResult: [\\n\");\n-        sb.append(\"  Certification Path: \" + certPath + \"\\n\");\n-        sb.append(\"  Trust Anchor: \" + getTrustAnchor() + \"\\n\");\n-        sb.append(\"  Policy Tree: \" + getPolicyTree() + \"\\n\");\n-        sb.append(\"  Subject Public Key: \" + getPublicKey() + \"\\n\");\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return \"PKIXCertPathBuilderResult: [\\n\" +\n+                \"  Certification Path: \" + certPath + \"\\n\" +\n+                \"  Trust Anchor: \" + getTrustAnchor() + \"\\n\" +\n+                \"  Policy Tree: \" + getPolicyTree() + \"\\n\" +\n+                \"  Subject Public Key: \" + getPublicKey() + \"\\n\" +\n+                \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXCertPathBuilderResult.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,1 +176,1 @@\n-        check(cert, java.util.Collections.<String>emptySet());\n+        check(cert, java.util.Collections.emptySet());\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXCertPathChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,3 @@\n-    private TrustAnchor trustAnchor;\n-    private PolicyNode policyTree;\n-    private PublicKey subjectPublicKey;\n+    private final TrustAnchor trustAnchor;\n+    private final PolicyNode policyTree;\n+    private final PublicKey subjectPublicKey;\n@@ -151,7 +151,5 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"PKIXCertPathValidatorResult: [\\n\");\n-        sb.append(\"  Trust Anchor: \" + trustAnchor + \"\\n\");\n-        sb.append(\"  Policy Tree: \" + policyTree + \"\\n\");\n-        sb.append(\"  Subject Public Key: \" + subjectPublicKey + \"\\n\");\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return \"PKIXCertPathValidatorResult: [\\n\" +\n+                \"  Trust Anchor: \" + trustAnchor + \"\\n\" +\n+                \"  Policy Tree: \" + policyTree + \"\\n\" +\n+                \"  Subject Public Key: \" + subjectPublicKey + \"\\n\" +\n+                \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXCertPathValidatorResult.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,8 +28,1 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Set;\n+import java.util.*;\n@@ -103,1 +96,1 @@\n-    private List<Extension> ocspExtensions = Collections.<Extension>emptyList();\n+    private List<Extension> ocspExtensions = Collections.emptyList();\n@@ -173,1 +166,1 @@\n-                              ? Collections.<Extension>emptyList()\n+                              ? Collections.emptyList()\n@@ -199,1 +192,1 @@\n-            this.ocspResponses = Collections.<X509Certificate, byte[]>emptyMap();\n+            this.ocspResponses = Collections.emptyMap();\n@@ -235,1 +228,1 @@\n-                       ? Collections.<Option>emptySet()\n+                       ? Collections.emptySet()\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PKIXRevocationChecker.java","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n- * marked critical must be processed and validated. Otherwise the\n+ * marked critical must be processed and validated. Otherwise, the\n@@ -87,3 +87,3 @@\n-    private byte [] mEncoded;\n-    private String mId;\n-    private byte [] mData;\n+    private final byte [] mEncoded;\n+    private final String mId;\n+    private final byte [] mData;\n@@ -164,7 +164,5 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"PolicyQualifierInfo: [\\n\");\n-        sb.append(\"  qualifierID: \" + mId + \"\\n\");\n-        sb.append(\"  qualifier: \" +\n-            (mData == null ? \"null\" : enc.encodeBuffer(mData)) + \"\\n\");\n-        sb.append(\"]\");\n-        pqiString = sb.toString();\n+        pqiString = \"PolicyQualifierInfo: [\\n\" +\n+                \"  qualifierID: \" + mId + \"\\n\" +\n+                \"  qualifier: \" +\n+                (mData == null ? \"null\" : enc.encodeBuffer(mData)) + \"\\n\" +\n+                \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/PolicyQualifierInfo.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-     * Hash code for this parameters.\n+     * Hash code for this parameters object.\n@@ -106,1 +106,1 @@\n-     * @return a hash code value for this parameters.\n+     * @return a hash code value for this parameters object.\n@@ -121,1 +121,1 @@\n-     * @param p the object to test for equality with this parameters.\n+     * @param p the object to test for equality with this parameters object.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/URICertStoreParameters.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import java.security.*;\n-import java.security.spec.*;\n+import sun.security.util.SignatureUtil;\n+import sun.security.x509.X509CRLImpl;\n@@ -32,1 +32,0 @@\n-\n@@ -34,0 +33,2 @@\n+import java.security.*;\n+import java.util.Arrays;\n@@ -36,4 +37,0 @@\n-import java.util.Arrays;\n-\n-import sun.security.x509.X509CRLImpl;\n-import sun.security.util.SignatureUtil;\n@@ -260,1 +257,1 @@\n-        if (sig.verify(getSignature()) == false) {\n+        if (!sig.verify(getSignature())) {\n@@ -393,1 +390,1 @@\n-        if (certIssuer.equals(crlIssuer) == false) {\n+        if (!certIssuer.equals(crlIssuer)) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CRL.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import sun.security.util.SignatureUtil;\n+import sun.security.x509.X509CertImpl;\n+\n+import javax.security.auth.x500.X500Principal;\n@@ -30,1 +34,0 @@\n-import java.security.spec.*;\n@@ -34,4 +37,0 @@\n-import javax.security.auth.x500.X500Principal;\n-\n-import sun.security.x509.X509CertImpl;\n-import sun.security.util.SignatureUtil;\n@@ -711,1 +710,1 @@\n-        if (sig.verify(getSignature()) == false) {\n+        if (!sig.verify(getSignature())) {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Certificate.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-    public boolean hasUnsupportedCriticalExtension();\n+    boolean hasUnsupportedCriticalExtension();\n@@ -108,1 +108,1 @@\n-    public Set<String> getCriticalExtensionOIDs();\n+    Set<String> getCriticalExtensionOIDs();\n@@ -145,1 +145,1 @@\n-    public Set<String> getNonCriticalExtensionOIDs();\n+    Set<String> getNonCriticalExtensionOIDs();\n@@ -191,1 +191,1 @@\n-    public byte[] getExtensionValue(String oid);\n+    byte[] getExtensionValue(String oid);\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Extension.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    public DSAParams getParams();\n+    DSAParams getParams();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/DSAKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,2 +91,1 @@\n-   public void initialize(DSAParams params, SecureRandom random)\n-   throws InvalidParameterException;\n+   void initialize(DSAParams params, SecureRandom random);\n@@ -112,1 +111,1 @@\n-     * @param genParams whether or not to generate new parameters for\n+     * @param genParams whether to generate new parameters for\n@@ -119,2 +118,1 @@\n-    public void initialize(int modlen, boolean genParams, SecureRandom random)\n-    throws InvalidParameterException;\n+    void initialize(int modlen, boolean genParams, SecureRandom random);\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/DSAKeyPairGenerator.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    public BigInteger getP();\n+    BigInteger getP();\n@@ -57,1 +57,1 @@\n-    public BigInteger getQ();\n+    BigInteger getQ();\n@@ -64,1 +64,1 @@\n-    public BigInteger getG();\n+    BigInteger getG();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/DSAParams.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    static final long serialVersionUID = 7776497482533790279L;\n+   long serialVersionUID = 7776497482533790279L;\n@@ -64,1 +64,1 @@\n-    public BigInteger getX();\n+    BigInteger getX();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/DSAPrivateKey.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    static final long serialVersionUID = 1234526332779022332L;\n+   long serialVersionUID = 1234526332779022332L;\n@@ -64,1 +64,1 @@\n-    public BigInteger getY();\n+    BigInteger getY();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/DSAPublicKey.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    static final long serialVersionUID = -7896394956925609184L;\n+   long serialVersionUID = -7896394956925609184L;\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/ECPrivateKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    static final long serialVersionUID = -3314988629879632826L;\n+   long serialVersionUID = -3314988629879632826L;\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/ECPublicKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    public BigInteger getModulus();\n+    BigInteger getModulus();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/RSAKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-    static final long serialVersionUID = 618058533534628008L;\n+    long serialVersionUID = 618058533534628008L;\n@@ -67,1 +67,1 @@\n-    public BigInteger getPublicExponent();\n+    BigInteger getPublicExponent();\n@@ -74,1 +74,1 @@\n-    public BigInteger getPrimeP();\n+    BigInteger getPrimeP();\n@@ -81,1 +81,1 @@\n-    public BigInteger getPrimeQ();\n+    BigInteger getPrimeQ();\n@@ -88,1 +88,1 @@\n-    public BigInteger getPrimeExponentP();\n+    BigInteger getPrimeExponentP();\n@@ -95,1 +95,1 @@\n-    public BigInteger getPrimeExponentQ();\n+    BigInteger getPrimeExponentQ();\n@@ -102,1 +102,1 @@\n-    public BigInteger getCrtCoefficient();\n+    BigInteger getCrtCoefficient();\n@@ -110,1 +110,1 @@\n-    public RSAOtherPrimeInfo[] getOtherPrimeInfo();\n+    RSAOtherPrimeInfo[] getOtherPrimeInfo();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/RSAMultiPrimePrivateCrtKey.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-    static final long serialVersionUID = -5682214253527700368L;\n+    long serialVersionUID = -5682214253527700368L;\n@@ -62,1 +62,1 @@\n-    public BigInteger getPublicExponent();\n+    BigInteger getPublicExponent();\n@@ -69,1 +69,1 @@\n-    public BigInteger getPrimeP();\n+    BigInteger getPrimeP();\n@@ -76,1 +76,1 @@\n-    public BigInteger getPrimeQ();\n+    BigInteger getPrimeQ();\n@@ -83,1 +83,1 @@\n-    public BigInteger getPrimeExponentP();\n+    BigInteger getPrimeExponentP();\n@@ -90,1 +90,1 @@\n-    public BigInteger getPrimeExponentQ();\n+    BigInteger getPrimeExponentQ();\n@@ -97,1 +97,1 @@\n-    public BigInteger getCrtCoefficient();\n+    BigInteger getCrtCoefficient();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/RSAPrivateCrtKey.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    static final long serialVersionUID = 5187144804936595022L;\n+    long serialVersionUID = 5187144804936595022L;\n@@ -61,1 +61,1 @@\n-    public BigInteger getPrivateExponent();\n+    BigInteger getPrivateExponent();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/RSAPrivateKey.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    static final long serialVersionUID = -8727434096241101194L;\n+    long serialVersionUID = -8727434096241101194L;\n@@ -58,1 +58,1 @@\n-    public BigInteger getPublicExponent();\n+    BigInteger getPublicExponent();\n","filename":"src\/java.base\/share\/classes\/java\/security\/interfaces\/RSAPublicKey.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * in seamlessly as needed.  Therefore application developers may\n+ * in seamlessly as needed.  Therefore, application developers may\n","filename":"src\/java.base\/share\/classes\/java\/security\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,4 +47,4 @@\n-    private BigInteger x;\n-    private BigInteger p;\n-    private BigInteger q;\n-    private BigInteger g;\n+    private final BigInteger x;\n+    private final BigInteger p;\n+    private final BigInteger q;\n+    private final BigInteger g;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/DSAPrivateKeySpec.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,4 +47,4 @@\n-    private BigInteger y;\n-    private BigInteger p;\n-    private BigInteger q;\n-    private BigInteger g;\n+    private final BigInteger y;\n+    private final BigInteger p;\n+    private final BigInteger q;\n+    private final BigInteger g;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/DSAPublicKeySpec.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import java.math.BigInteger;\n-import java.util.Arrays;\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECField.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-    private int m;\n-    private int[] ks;\n+    private final int m;\n+    private final int[] ks;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECFieldF2m.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Arrays;\n@@ -42,1 +41,1 @@\n-    private BigInteger p;\n+    private final BigInteger p;\n@@ -66,1 +65,1 @@\n-    };\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECFieldFp.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-    private BigInteger s;\n-    private ECParameterSpec params;\n+    private final BigInteger s;\n+    private final ECParameterSpec params;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECPrivateKeySpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-    private ECPoint w;\n-    private ECParameterSpec params;\n+    private final ECPoint w;\n+    private final ECParameterSpec params;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECPublicKeySpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-     * than the mode in which an empty array is used as the context.\n+     * from the mode in which an empty array is used as the context.\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/EdDSAParameterSpec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.util.Arrays;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/EllipticCurve.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.access.JavaSecuritySpecAccess;\n@@ -50,1 +49,1 @@\n-    private byte[] encodedKey;\n+    private final byte[] encodedKey;\n@@ -55,6 +54,1 @@\n-                new JavaSecuritySpecAccess() {\n-                    @Override\n-                    public void clearEncodedKeySpec(EncodedKeySpec keySpec) {\n-                        keySpec.clear();\n-                    }\n-                });\n+                EncodedKeySpec::clear);\n@@ -63,1 +57,1 @@\n-                    \/**\n+    \/**\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/EncodedKeySpec.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    private String name;\n+    private final String name;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/NamedParameterSpec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -228,7 +228,5 @@\n-        StringBuilder sb = new StringBuilder(\"PSSParameterSpec[\");\n-        sb.append(\"hashAlgorithm=\" + mdName + \", \")\n-                .append(\"maskGenAlgorithm=\" + mgfSpec + \", \")\n-                .append(\"saltLength=\" + saltLen + \", \")\n-                .append(\"trailerField=\" + trailerField)\n-                .append(']');\n-        return sb.toString();\n+        return \"PSSParameterSpec[\" + \"hashAlgorithm=\" + mdName + \", \" +\n+                \"maskGenAlgorithm=\" + mgfSpec + \", \" +\n+                \"saltLength=\" + saltLen + \", \" +\n+                \"trailerField=\" + trailerField +\n+                ']';\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/PSSParameterSpec.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.security.spec.AlgorithmParameterSpec;\n@@ -44,3 +43,3 @@\n-    private int keysize;\n-    private BigInteger publicExponent;\n-    private AlgorithmParameterSpec keyParams;\n+    private final int keysize;\n+    private final BigInteger publicExponent;\n+    private final AlgorithmParameterSpec keyParams;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/RSAKeyGenParameterSpec.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-    *         with the exception of {@code otherPrimeInfo} is null\n+    *         except {@code otherPrimeInfo} is null\n@@ -121,1 +121,1 @@\n-    *         with the exception of {@code otherPrimeInfo} and {@code keyParams}\n+    *         except {@code otherPrimeInfo} and {@code keyParams}\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/RSAMultiPrimePrivateCrtKeySpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,3 +56,3 @@\n-    private BigInteger prime;\n-    private BigInteger primeExponent;\n-    private BigInteger crtCoefficient;\n+    private final BigInteger prime;\n+    private final BigInteger primeExponent;\n+    private final BigInteger crtCoefficient;\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/RSAOtherPrimeInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}