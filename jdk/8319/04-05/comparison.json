{"files":[{"patch":"@@ -306,1 +306,1 @@\n-            (Provider)objs[1]);\n+                (Provider)objs[1]);\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-                    \/\/ fall through and return false\n+                    return false;\n@@ -478,2 +478,0 @@\n-\n-        return false;\n@@ -489,4 +487,2 @@\n-            ((PrivilegedAction<PermissionCollection>) () -> {\n-                Policy p = Policy.getPolicyNoCheck();\n-                return p.getPermissions(ProtectionDomain.this);\n-            });\n+            ((PrivilegedAction<PermissionCollection>) () ->\n+                Policy.getPolicyNoCheck().getPermissions(ProtectionDomain.this));\n","filename":"src\/java.base\/share\/classes\/java\/security\/ProtectionDomain.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1096,0 +1096,3 @@\n+\n+        \/\/ Don't change '==' to equals.\n+        \/\/ This method tests for equality of pointers.\n@@ -1097,2 +1100,1 @@\n-            return (Objects.equals(this.type, type)) &&\n-                (Objects.equals(this.originalAlgorithm, algorithm));\n+            return (this.type == type) && (this.originalAlgorithm == algorithm);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,2 +221,1 @@\n-        \/* not used *\/\n-        return pdcache.computeIfAbsent(key, key1 -> {\n+        return pdcache.computeIfAbsent(key, unused -> {\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureClassLoader.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,1 +230,0 @@\n-        ProviderProperty entry = null;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -271,1 +271,1 @@\n-        \/\/ try services until we find a Spi or a working Signature subclass\n+        \/\/ try services until we find an Spi or a working Signature subclass\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * a ldap URI as specified by RFC 5280, use the\n+ * an ldap URI as specified by RFC 5280, use the\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/LDAPCertStoreParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Objects;\n@@ -102,2 +101,2 @@\n-                && ((Objects.equals(x, other.x))\n-                && (Objects.equals(y, other.y)));\n+                && ((x.equals(other.x))\n+                && (y.equals(other.y)));\n@@ -112,2 +111,1 @@\n-        return Objects.requireNonNull(x).hashCode() << 5 +\n-                Objects.requireNonNull(y).hashCode();\n+        return x.hashCode() << 5 + y.hashCode();\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/ECPoint.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}