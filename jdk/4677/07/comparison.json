{"files":[{"patch":"@@ -1563,1 +1563,1 @@\n-    Handshake::execute(&op, java_thread);\n+    Handshake::execute(&op, &tlh, java_thread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -619,2 +619,8 @@\n-  for (JvmtiThreadState *state = JvmtiThreadState::first(); state != NULL; state = state->next()) {\n-    any_env_thread_enabled |= recompute_thread_enabled(state);\n+  JvmtiThreadState *state = JvmtiThreadState::first();\n+  if (state != nullptr) {\n+    \/\/ If we have a JvmtiThreadState, then we've reached the point where\n+    \/\/ threads can exist so create a ThreadsListHandle to protect them.\n+    ThreadsListHandle tlh;\n+    for (; state != nullptr; state = state->next()) {\n+      any_env_thread_enabled |= recompute_thread_enabled(state);\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2075,0 +2075,1 @@\n+    ThreadsListHandle tlh;\n@@ -2076,1 +2077,3 @@\n-    Handshake::execute(&rmc, target);\n+    \/\/ Sometimes 'target' is NULL and this test code expects\n+    \/\/ Handshake::execute(HandshakeClosure,...) to handle it.\n+    Handshake::execute(&rmc, &tlh, target);\n@@ -2107,0 +2110,1 @@\n+      ThreadsListHandle tlh;\n@@ -2108,1 +2112,3 @@\n-      Handshake::execute(&tsc, target);\n+      \/\/ Sometimes 'target' is NULL and this test code expects\n+      \/\/ Handshake::execute(HandshakeClosure,...) to handle it.\n+      Handshake::execute(&tsc, &tlh, target);\n@@ -2134,0 +2140,1 @@\n+    ThreadsListHandle tlh;\n@@ -2135,0 +2142,2 @@\n+    \/\/ Sometimes 'target' is NULL and this test code expects\n+    \/\/ Handshake::execute(AsyncHandshakeClosure,...) to handle it.\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -345,0 +345,6 @@\n+  \/\/ tlh_p == nullptr means we rely on a ThreadsListHandle somewhere\n+  \/\/ in the caller's context (and we sanity check for that).\n+  Handshake::execute(hs_cl, nullptr, target);\n+}\n+\n+void Handshake::execute(HandshakeClosure* hs_cl, ThreadsListHandle* tlh_p, JavaThread* target) {\n@@ -350,3 +356,3 @@\n-  ThreadsListHandle tlh;\n-  if (tlh.includes(target)) {\n-    target->handshake_state()->add_operation(&op);\n+  bool target_is_dead = false;\n+  if (target == nullptr) {\n+    target_is_dead = true;\n@@ -354,0 +360,11 @@\n+    if (tlh_p == nullptr) {\n+      guarantee(Thread::is_JavaThread_protected_by_my_ThreadsList(target),\n+                \"missing ThreadsListHandle in calling context.\");\n+      target->handshake_state()->add_operation(&op);\n+    } else if (tlh_p->includes(target)) {\n+      target->handshake_state()->add_operation(&op);\n+    } else {\n+      target_is_dead = true;\n+    }\n+  }\n+  if (target_is_dead) {\n@@ -399,4 +416,2 @@\n-  ThreadsListHandle tlh;\n-  if (tlh.includes(target)) {\n-    target->handshake_state()->add_operation(op);\n-  } else {\n+  if (target == nullptr) {\n+    \/\/ Stress test that calls WB_AsyncHandshakeWalkStack() can get here:\n@@ -405,0 +420,1 @@\n+    return;\n@@ -406,0 +422,12 @@\n+\n+  Thread* current = Thread::current();\n+  if (current != target) {\n+    \/\/ Another thread is handling the request and it must be protecting\n+    \/\/ the target.\n+    guarantee(Thread::is_JavaThread_protected_by_my_ThreadsList(target),\n+              \"missing ThreadsListHandle in calling context.\");\n+  }\n+  \/\/ Implied else:\n+  \/\/ The target is handling the request itself so it can't be dead.\n+\n+  target->handshake_state()->add_operation(op);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+class ThreadsListHandle;\n@@ -68,0 +69,1 @@\n+  static void execute(HandshakeClosure*       hs_cl, ThreadsListHandle* tlh_p, JavaThread* target);\n","filename":"src\/hotspot\/share\/runtime\/handshake.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -489,0 +489,23 @@\n+\/\/ Is the target JavaThread protected by a ThreadsList associated\n+\/\/ with the calling Thread.\n+\/\/\n+\/\/ Thread::is_JavaThread_protected() above is the more general check.\n+\/\/ This function ONLY checks the ThreadsLists (if any) associated with\n+\/\/ the calling thread in order to verify proper ThreadsListHandle\n+\/\/ placement somewhere in the calling context.\n+bool Thread::is_JavaThread_protected_by_my_ThreadsList(const JavaThread* p) {\n+  Thread* current_thread = Thread::current();\n+  \/\/ Check the ThreadsLists associated with the calling thread (if any)\n+  \/\/ to see if one of them protects the target JavaThread:\n+  for (SafeThreadsListPtr* stlp = current_thread->_threads_list_ptr;\n+       stlp != NULL; stlp = stlp->previous()) {\n+    if (stlp->list()->includes(p)) {\n+      \/\/ The target JavaThread is protected by this ThreadsList:\n+      return true;\n+    }\n+  }\n+\n+  \/\/ The target JavaThread is not protected.\n+  return false;\n+}\n+\n@@ -1746,3 +1769,4 @@\n-  ThreadsListHandle tlh;\n-  if (!tlh.includes(this)) {\n-    log_trace(thread, suspend)(\"JavaThread:\" INTPTR_FORMAT \" not on ThreadsList, no suspension\", p2i(this));\n+  guarantee(Thread::is_JavaThread_protected_by_my_ThreadsList(this),\n+            \"missing ThreadsListHandle in calling context.\");\n+  if (is_exiting()) {\n+    log_trace(thread, suspend)(\"JavaThread:\" INTPTR_FORMAT \" is exiting, no suspension\", p2i(this));\n@@ -1755,3 +1779,4 @@\n-  ThreadsListHandle tlh;\n-  if (!tlh.includes(this)) {\n-    log_trace(thread, suspend)(\"JavaThread:\" INTPTR_FORMAT \" not on ThreadsList, nothing to resume\", p2i(this));\n+  guarantee(Thread::is_JavaThread_protected_by_my_ThreadsList(this),\n+            \"missing ThreadsListHandle in calling context.\");\n+  if (is_exiting()) {\n+    log_trace(thread, suspend)(\"JavaThread:\" INTPTR_FORMAT \" is exiting, nothing to resume\", p2i(this));\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -206,0 +206,3 @@\n+  \/\/ Is the target JavaThread protected by a ThreadsList associated\n+  \/\/ with the calling Thread.\n+  static bool is_JavaThread_protected_by_my_ThreadsList(const JavaThread* p);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}