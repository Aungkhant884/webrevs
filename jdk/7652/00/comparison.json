{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-\n+import sun.security.util.SecurityProviderConstants;\n@@ -49,1 +49,2 @@\n-    private int keySize = 16; \/\/ default keysize (in number of bytes)\n+    \/\/ default keysize (in number of bytes)\n+    private int keySize = SecurityProviderConstants.getDefAESKeySize() >> 3;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/AESKeyGenerator.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1860,0 +1860,2 @@\n+                } else if (\"AES\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = SecurityProviderConstants.getDefAESKeySize();\n@@ -1920,0 +1922,2 @@\n+                } else if (\"RSASSA-PSS\".equalsIgnoreCase(keyAlgName)) {\n+                    keysize = SecurityProviderConstants.DEF_RSASSA_PSS_KEY_SIZE;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -33,0 +34,2 @@\n+import java.security.NoSuchAlgorithmException;\n+import javax.crypto.Cipher;\n@@ -108,0 +111,19 @@\n+    public static final int getDefAESKeySize() {\n+        int currVal = DEF_AES_KEY_SIZE.get();\n+        if (currVal == -1) {\n+            int v = 256; \/\/ default AES key size\n+            try {\n+                \/\/ adjust if crypto policy only allows a smaller value\n+                int max = Cipher.getMaxAllowedKeyLength(\"AES\");\n+                if (v > max)  {\n+                    v = max;\n+                }\n+            } catch (NullPointerException | NoSuchAlgorithmException ne) {\n+                \/\/ should never happen; ignore and use the default\n+            }\n+            DEF_AES_KEY_SIZE.compareAndSet(-1, v);\n+            currVal = v;\n+        }\n+        return currVal;\n+    }\n+\n@@ -115,0 +137,1 @@\n+    private static final AtomicInteger DEF_AES_KEY_SIZE;\n@@ -122,2 +145,2 @@\n-        int dsaKeySize = 2048;\n-        int rsaKeySize = 2048;\n+        int dsaKeySize = 3072;\n+        int rsaKeySize = 3072;\n@@ -125,2 +148,2 @@\n-        int dhKeySize = 2048;\n-        int ecKeySize = 256;\n+        int dhKeySize = 3072;\n+        int ecKeySize = 384;\n@@ -129,0 +152,1 @@\n+        int aesKeySize = -1; \/\/ needs to check crypto policy\n@@ -170,0 +194,2 @@\n+                    } else if (algoName.equals(\"AES\")) {\n+                        aesKeySize = value;\n@@ -198,0 +224,1 @@\n+        DEF_AES_KEY_SIZE = new AtomicInteger(aesKeySize);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-\n@@ -69,1 +68,0 @@\n-\n@@ -524,1 +522,6 @@\n-    \/\/ The following values are from SP800-57 part 1 rev 4 tables 2 and 3\n+    \/\/ SP800-57 part 1 rev5 table 2 \"Comparable security strengths of\n+    \/\/ symmetric block cipher and asymmetric-key algorithms\", and table 3\n+    \/\/ \"Maximum security strengths for hash and hash-based functions\"\n+    \/\/ define security strength for various algorithms.\n+    \/\/ Besides matching the security strength, the default algorithms may\n+    \/\/ also be chosen based on various recommendations such as NIST CNSA.\n@@ -527,2 +530,2 @@\n-     * Return the default message digest algorithm with the same security\n-     * strength as the specified EC key size.\n+     * Return the default message digest algorithm based on the specified\n+     * EC key size.\n@@ -544,2 +547,3 @@\n-     * Return the default message digest algorithm with the same security\n-     * strength as the specified IFC\/FFC key size.\n+     * Return the default message digest algorithm based on both the\n+     * security strength of the specified IFC\/FFC key size and the\n+     * recommendation from NIST CNSA, e.g. use SHA-384 for 3072-bit.\n@@ -551,1 +555,1 @@\n-        if (bitLength > 7680) { \/\/ 256 bits\n+        if (bitLength >= 7680) { \/\/ 192 bits\n@@ -553,1 +557,1 @@\n-        } else if (bitLength > 3072) {  \/\/ 192 bits\n+        } else if (bitLength >= 3072) {  \/\/ 128 bits\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import sun.security.util.SecurityProviderConstants;;\n@@ -228,1 +229,2 @@\n-            keySize = adjustKeySize(128, range);\n+            keySize = adjustKeySize\n+                    (SecurityProviderConstants.getDefAESKeySize(), range);\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyGenerator.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,7 +102,7 @@\n-        if (algorithm.equals(\"EC\")) {\n-            keySize = DEF_EC_KEY_SIZE;\n-            if (minKeyLen < 112) {\n-                minKeyLen = 112;\n-            }\n-            if (maxKeyLen > 2048) {\n-                maxKeyLen = 2048;\n+        int jdkMinKeyLen = 512;\n+        int jdkMaxKeyLen = Integer.MAX_VALUE;\n+        switch (algorithm) {\n+            case \"EC\" -> {\n+                keySize = DEF_EC_KEY_SIZE;\n+                jdkMinKeyLen = 112;\n+                jdkMaxKeyLen = 2048;\n@@ -110,2 +110,1 @@\n-        } else {\n-            if (algorithm.equals(\"DSA\")) {\n+            case \"DSA\" -> {\n@@ -113,1 +112,2 @@\n-            } else if (algorithm.equals(\"RSA\")) {\n+            }\n+            case \"RSA\" -> {\n@@ -115,4 +115,3 @@\n-                if (maxKeyLen > 64 * 1024) {\n-                    maxKeyLen = 64 * 1024;\n-                }\n-            } else {\n+                jdkMaxKeyLen = 64 * 1024;\n+            }\n+            case \"DH\" -> {\n@@ -121,2 +120,3 @@\n-            if (minKeyLen < 512) {\n-                minKeyLen = 512;\n+            default -> {\n+                throw new ProviderException\n+                        (\"Unrecognized algorithm for checking key size\");\n@@ -125,0 +125,6 @@\n+        if (minKeyLen < jdkMinKeyLen) {\n+            minKeyLen = jdkMinKeyLen;\n+        }\n+        if (maxKeyLen > jdkMaxKeyLen) {\n+            maxKeyLen = jdkMaxKeyLen;\n+        }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11KeyPairGenerator.java","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,1 +420,1 @@\n-         * @implNote This implementation returns \"SHA-256\". The value may\n+         * @implNote This implementation returns \"SHA-384\". The value may\n@@ -426,1 +426,1 @@\n-            return \"SHA-256\";\n+            return \"SHA-384\";\n@@ -435,3 +435,4 @@\n-         * as defined in Tables 2 and 3 of NIST SP 800-57 Part 1-Rev.4.\n-         * Specifically, if a DSA or RSA key with a key size greater than 7680\n-         * bits, or an EC key with a key size greater than or equal to 512 bits,\n+         * as defined in Tables 2 and 3 of NIST SP 800-57 Part 1-Rev.5 as\n+         * well as NIST recommendations as appropriate.\n+         * Specifically, if a DSA or RSA key with a key size no less than 7680\n+         * bits, or an EC key with a key size no less than 512 bits,\n@@ -439,1 +440,1 @@\n-         * If a DSA or RSA key has a key size greater than 3072 bits, or an\n+         * If a DSA or RSA key has a key size no less than 3072 bits, or an\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6330287 6331386 7044060\n+ * @bug 6330287 6331386 7044060 8267319\n@@ -61,1 +61,1 @@\n-        twenty48(2048);\n+        fifteen36(1536), twenty48(2048), thirty72(3072);\n@@ -86,1 +86,1 @@\n-        \/\/ Sun's default uses a default psize of 2048 and\n+        \/\/ Sun's default uses a default psize of 3072 and\n@@ -89,1 +89,1 @@\n-        checkKeyPair(kp, Sizes.twenty48, Sizes.ten24);\n+        checkKeyPair(kp, Sizes.thirty72, Sizes.fifteen36);\n@@ -91,0 +91,3 @@\n+        kpg.initialize(Sizes.twenty48.getIntSize());\n+        kp = kpg.generateKeyPair();\n+        checkKeyPair(kp, Sizes.twenty48, Sizes.ten24);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/TestExponentSize.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4628062 4963723\n+ * @bug 4628062 4963723 8267319\n@@ -37,1 +37,2 @@\n-    private static final int[] AES_SIZES = { 16, 24, 32 }; \/\/ in bytes\n+    \/\/ first value is the default key size\n+    private static final int[] AES_SIZES = { 32, 16, 24 }; \/\/ in bytes\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyGenerator\/Test4628062.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8242068\n+ * @bug 8242068 8267319\n@@ -53,0 +53,3 @@\n+    private static final String DEF_DIGEST_STR =\n+            JarSigner.Builder.getDefaultDigestAlgorithm() + \"-Digest-Manifest:\";\n+\n@@ -85,1 +88,1 @@\n-        Asserts.assertTrue(sf.contains(\"SHA-256-Digest-Manifest:\"));\n+        Asserts.assertTrue(sf.contains(DEF_DIGEST_STR));\n@@ -90,1 +93,1 @@\n-        Asserts.assertFalse(sf.contains(\"SHA-256-Digest-Manifest:\"));\n+        Asserts.assertFalse(sf.contains(DEF_DIGEST_STR));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Properties.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8056174 8242068 8255536\n+ * @bug 8056174 8242068 8255536 8267319\n@@ -181,1 +181,2 @@\n-        assertTrue(JarSigner.Builder.getDefaultDigestAlgorithm().equals(\"SHA-256\"));\n+        assertTrue(JarSigner.Builder.getDefaultDigestAlgorithm()\n+                .equals(\"SHA-384\"));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267319\n+ * @modules java.base\/sun.security.util\n+ *          jdk.crypto.cryptoki\n+ * @summary Check AES key generator.\n+ * @library \/test\/lib ..\n+ * @run main TestAES\n+ *\/\n+import java.security.Provider;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidParameterException;\n+import java.security.NoSuchAlgorithmException;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import static sun.security.util.SecurityProviderConstants.*;\n+\n+public class TestAES extends PKCS11Test {\n+\n+    private static final String ALGO = \"AES\";\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new TestAES(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        System.out.println(\"Testing \" + p.getName());\n+        KeyGenerator kg;\n+        try {\n+            kg = KeyGenerator.getInstance(ALGO, p);\n+        } catch (NoSuchAlgorithmException nsae) {\n+            System.out.println(\"Skip; no support for \" + ALGO);\n+            return;\n+        }\n+\n+        \/\/ first try w\/o setting a key length and check if the generated key\n+        \/\/ length matches\n+        SecretKey key = kg.generateKey();\n+        byte[] keyValue = key.getEncoded();\n+        if (key.getEncoded().length != getDefAESKeySize() >> 3) {\n+            throw new RuntimeException(\"Default AES key length should be \" +\n+                    getDefAESKeySize());\n+        }\n+\n+        for (int keySize : new int[] { 16, 32, 64, 128, 256, 512, 1024 }) {\n+            boolean isValid = (keySize == 128 || keySize == 192 ||\n+                    keySize == 256);\n+            try {\n+                kg.init(keySize);\n+                if (!isValid) {\n+                    throw new RuntimeException(keySize + \" is invalid keysize\");\n+                }\n+                key = kg.generateKey();\n+                if (key.getEncoded().length != keySize >> 3) {\n+                    throw new RuntimeException(\"Generated key len mismatch!\");\n+                }\n+            } catch (InvalidParameterException e) {\n+                if (isValid) {\n+                    throw new RuntimeException(\"IPE thrown for valid keySize\");\n+                } else {\n+                    System.out.println(\"Expected IPE thrown for \" + keySize);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyGenerator\/TestAES.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267319\n+ * @summary Ensure that DSA\/RSA\/DH\/EC KPG in PKCS11 provider uses the\n+ *     same default key length\n+ * @library \/test\/lib ..\n+ * @modules java.base\/sun.security.util\n+ *          jdk.crypto.cryptoki\n+ * @run main TestDefaultSize\n+ *\/\n+\n+import java.security.InvalidParameterException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+import java.security.PrivateKey;\n+import java.security.interfaces.*;\n+import javax.crypto.interfaces.DHKey;\n+\n+import static sun.security.util.SecurityProviderConstants.*;\n+\n+public class TestDefaultSize extends PKCS11Test {\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        System.out.println(\"Testing \" + p.getName());\n+\n+        String[] ALGOS = { \"DSA\", \"RSA\", \"DH\", \"EC\" };\n+\n+        for (String algo : ALGOS) {\n+            if (p.getService(\"KeyPairGenerator\", algo) == null) {\n+                System.out.println(\"Skip, no support for KPG: \" + algo);\n+                return;\n+            }\n+\n+            KeyPairGenerator kpg = KeyPairGenerator.getInstance(algo, p);\n+            KeyPair kp = kpg.generateKeyPair();\n+            PrivateKey priv = kp.getPrivate();\n+            int actualSize = -1;\n+            int expectedSize;\n+            if (algo == \"DSA\") {\n+                expectedSize = DEF_DSA_KEY_SIZE;\n+                if (priv instanceof DSAKey) {\n+                    actualSize = ((DSAKey) priv).getParams().getP().bitLength();\n+                }\n+            } else if (algo == \"RSA\") {\n+                expectedSize = DEF_RSA_KEY_SIZE;\n+                if (priv instanceof RSAKey) {\n+                    actualSize = ((RSAKey) priv).getModulus().bitLength();\n+                }\n+            } else if (algo == \"DH\") {\n+                expectedSize = DEF_DH_KEY_SIZE;\n+                if (priv instanceof DHKey) {\n+                    actualSize = ((DHKey) priv).getParams().getP().bitLength();\n+                }\n+            } else if (algo == \"EC\") {\n+                expectedSize = DEF_EC_KEY_SIZE;\n+                if (priv instanceof ECKey) {\n+                    actualSize = ((ECKey) priv).getParams().getCurve()\n+                            .getField().getFieldSize();\n+                }\n+            } else {\n+                throw new RuntimeException(\"Error: Unrecognized algo \" +\n+                    algo + \" or opaque private key object \" + priv);\n+            }\n+            if (actualSize != expectedSize) {\n+                throw new RuntimeException(\"key size check failed, got \" +\n+                    actualSize);\n+            } else {\n+                System.out.println(algo + \": passed, \" + actualSize);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new TestDefaultSize(), args);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyPairGenerator\/TestDefaultSize.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8259401 8266225\n+ * @bug 8259401 8266225 8267319\n@@ -43,0 +43,2 @@\n+    private static final String keysizeOpt = \"-keysize 2048\";\n+\n@@ -60,2 +62,5 @@\n-        kt(\"-genkeypair -keyalg rsa -alias ca1 -dname CN=CA1\", \"ks\");\n-        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+\n+        kt(\"-genkeypair -keyalg rsa -alias ca1 -dname CN=CA1 \" + keysizeOpt,\n+                \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1 \" + keysizeOpt,\n+                \"ks\");\n@@ -100,2 +105,4 @@\n-        kt(\"-genkeypair -keyalg rsa -alias cacert -dname CN=CACERT -ext bc:c \", \"ks\");\n-        kt(\"-genkeypair -keyalg rsa -alias ee -dname CN=EE -ext bc:c \", \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias cacert -dname CN=CACERT -ext bc:c \"\n+                + keysizeOpt, \"ks\");\n+        kt(\"-genkeypair -keyalg rsa -alias ee -dname CN=EE -ext bc:c \"\n+                + keysizeOpt, \"ks\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckSignerCertChain.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8057810\n- * @summary New defaults for DSA keys in jarsigner and keytool\n+ * @bug 8057810 8267319\n+ * @summary New defaults for DSA, RSA, EC keys in jarsigner and keytool\n@@ -45,1 +45,2 @@\n-import java.util.jar.JarFile;\n+import java.util.jar.*;\n+import java.util.Enumeration;\n@@ -52,1 +53,1 @@\n-        String[] keyalgs = {\"DSA\", \"RSA\", \"EC\"};\n+        String[] keyalgs = {\"DSA\", \"RSA\", \"EC\", \"RSASSA-PSS\"};\n@@ -54,1 +55,2 @@\n-        String[] sigalgs = {\"SHA256withDSA\", \"SHA256withRSA\", \"SHA256withECDSA\"};\n+        String[] sigalgs = {\"SHA384withDSA\", \"SHA384withRSA\",\n+                \"SHA384withECDSA\", \"RSASSA-PSS\"};\n@@ -56,1 +58,1 @@\n-        int[] keysizes = {2048, 2048, 256};\n+        int[] keysizes = {3072, 3072, 384, 3072};\n@@ -58,1 +60,1 @@\n-        String[] digestalgs = {\"SHA-256\", \"SHA-256\", \"SHA-256\"};\n+        String[] digestalgs = {\"SHA-384\", \"SHA-384\", \"SHA-384\", \"SHA-384\"};\n@@ -99,1 +101,14 @@\n-                String bk = \"META-INF\/\" + keyalg + \".\" + keyalg;\n+                \/\/ truncated to the first 8 chars if alias name is longer\n+                String jeName = (keyalg.equals(\"RSASSA-PSS\")? \"RSASSA-P.RSA\" :\n+                        keyalg + \".\" + keyalg);\n+                String bk = \"META-INF\/\" + jeName;\n+                if (jf.getEntry(bk) == null) {\n+                    System.out.println(\"JarFile entries:\");\n+                    Enumeration<JarEntry> entries = jf.entries();\n+                    while (entries.hasMoreElements()) {\n+                        System.out.println(\"je: \" +\n+                                entries.nextElement().getRealName());\n+                    }\n+                    throw new Exception(\"Expected jarfile entry name \" +\n+                            jeName + \" not found\");\n+                }\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/DefaultSigalg.java","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n- * @bug 6561126\n+ * @bug 6561126 8267319\n+ * @modules jdk.jartool\/jdk.security.jarsigner\n@@ -40,0 +41,1 @@\n+import jdk.security.jarsigner.JarSigner;\n@@ -42,0 +44,4 @@\n+\n+    private static final String DEF_DIGEST_ALGO =\n+            JarSigner.Builder.getDefaultDigestAlgorithm();\n+\n@@ -56,1 +62,1 @@\n-                        .anyMatch(s -> s.toString().contains(\"SHA-256\")));\n+                        .anyMatch(s -> s.toString().contains(DEF_DIGEST_ALGO)));\n@@ -62,1 +68,1 @@\n-                        .anyMatch(s -> s.toString().contains(\"SHA-256\")));\n+                        .anyMatch(s -> s.toString().contains(DEF_DIGEST_ALGO)));\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/NewSize7.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import jdk.security.jarsigner.JarSigner;\n@@ -60,1 +61,1 @@\n- * @bug 8217375\n+ * @bug 8217375 8267319\n@@ -90,0 +91,2 @@\n+    private static final String DEF_DIGEST_STR =\n+            JarSigner.Builder.getDefaultDigestAlgorithm() + \"-Digest\";\n@@ -376,3 +379,3 @@\n-                String mainAttrsDigKey =\n-                        (digestalg != null ? digestalg : \"SHA-256\") +\n-                        \"-Digest-Manifest-Main-Attributes\";\n+                String mainAttrsDigKey = (digestalg != null ?\n+                        (digestalg + \"-Digest\") : DEF_DIGEST_STR) +\n+                        \"-Manifest-Main-Attributes\";\n@@ -421,2 +424,3 @@\n-                \"SHA-256-Digest: \" + m.getAttributes(FILENAME_INITIAL_CONTENTS)\n-                        .getValue(\"SHA-256-Digest\") + \"\\r\\n\" +\n+                DEF_DIGEST_STR + \": \" +\n+                m.getAttributes(FILENAME_INITIAL_CONTENTS)\n+                        .getValue(DEF_DIGEST_STR) + \"\\r\\n\" +\n@@ -445,1 +449,1 @@\n-                    .getValue(\"SHA-256-Digest\");\n+                    .getValue(DEF_DIGEST_STR);\n@@ -458,1 +462,1 @@\n-                \"SHA-256-Digest: \" + digest.substring(0, 11) + \"\\r\\n\" +\n+                DEF_DIGEST_STR + \": \" + digest.substring(0, 11) + \"\\r\\n\" +\n@@ -494,1 +498,1 @@\n-     * opposed to default SHA-256, long file names, or manual editing)<\/li>\n+     * opposed to default SHA-384, long file names, or manual editing)<\/li>\n@@ -790,2 +794,2 @@\n-                        .getValue(\"SHA-256-Digest-Manifest-Main-Attributes\")),\n-                     expectUnchangedDigests);\n+                    .getValue(DEF_DIGEST_STR + \"-Manifest-Main-Attributes\")),\n+                expectUnchangedDigests);\n@@ -820,1 +824,1 @@\n-                FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n@@ -860,1 +864,1 @@\n-                FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n@@ -889,1 +893,1 @@\n-                FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n@@ -920,1 +924,1 @@\n-                        FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                        FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n@@ -960,1 +964,1 @@\n-                FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n@@ -996,1 +1000,1 @@\n-                FILENAME_INITIAL_CONTENTS).getValue(\"SHA-256-Digest\")));\n+                FILENAME_INITIAL_CONTENTS).getValue(DEF_DIGEST_STR)));\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/PreserveRawManifestEntryAndDigest.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import jdk.security.jarsigner.JarSigner;\n@@ -42,1 +43,1 @@\n- * @bug 8217375\n+ * @bug 8217375 8267319\n@@ -44,0 +45,1 @@\n+ * @modules jdk.jartool\/jdk.security.jarsigner\n@@ -51,0 +53,2 @@\n+    private static final String DEF_DIGEST_STR =\n+            JarSigner.Builder.getDefaultDigestAlgorithm() + \"-Digest\";\n@@ -110,1 +114,1 @@\n-            String digest = m.getAttributes(\"abc\").getValue(\"SHA-256-Digest\");\n+            String digest = m.getAttributes(\"abc\").getValue(DEF_DIGEST_STR);\n@@ -115,1 +119,1 @@\n-                    + \"SHA-256-Digest: \" + digest + \"\\r\\n\"\n+                    + DEF_DIGEST_STR + \": \" + digest + \"\\r\\n\"\n@@ -129,1 +133,1 @@\n-            String digest = m.getAttributes(\"abc\").getValue(\"SHA-256-Digest\");\n+            String digest = m.getAttributes(\"abc\").getValue(DEF_DIGEST_STR);\n@@ -135,1 +139,1 @@\n-                    + \"SHA-256-Digest: \" + digest + \"\\r\\n\"\n+                    + DEF_DIGEST_STR + \": \" + digest + \"\\r\\n\"\n@@ -149,1 +153,1 @@\n-            String digest = m.getAttributes(\"abc\").getValue(\"SHA-256-Digest\");\n+            String digest = m.getAttributes(\"abc\").getValue(DEF_DIGEST_STR);\n@@ -154,1 +158,1 @@\n-                    + \"SHA-256-Digest: \" + digest + \"\\r\\n\"\n+                    + DEF_DIGEST_STR + \": \" + digest + \"\\r\\n\"\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/SectionNameContinuedVsLineBreak.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n- * @bug 8215922\n+ * @bug 8215922 8267319\n+ * @modules jdk.jartool\/jdk.security.jarsigner\n@@ -40,0 +41,1 @@\n+import jdk.security.jarsigner.JarSigner;\n@@ -44,0 +46,4 @@\n+\n+    private static final String DEF_DIGEST =\n+            JarSigner.Builder.getDefaultDigestAlgorithm();\n+\n@@ -76,1 +82,1 @@\n-                    .getInstance(\"SHA-256\").digest(ma.readAllBytes()));\n+                    .getInstance(DEF_DIGEST).digest(ma.readAllBytes()));\n@@ -78,1 +84,1 @@\n-                    .getInstance(\"SHA-256\").digest(mb.readAllBytes()));\n+                    .getInstance(DEF_DIGEST).digest(mb.readAllBytes()));\n@@ -85,1 +91,1 @@\n-                    .getValue(\"SHA-256-Digest-Manifest\"), da);\n+                    .getValue(DEF_DIGEST + \"-Digest-Manifest\"), da);\n@@ -89,1 +95,1 @@\n-                    .getValue(\"SHA-256-Digest-Manifest\"), db);\n+                    .getValue(DEF_DIGEST + \"-Digest-Manifest\"), db);\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/SignedAgain.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import jdk.security.jarsigner.JarSigner;\n@@ -58,1 +59,1 @@\n- *      8247960 8242068 8269039 8275887\n+ *      8247960 8242068 8269039 8275887 8267319\n@@ -65,0 +66,1 @@\n+ *          jdk.jartool\/jdk.security.jarsigner\n@@ -83,0 +85,11 @@\n+    private static final String DEF_DIGEST; \/\/ for signature algorithm, no \"-\"\n+\n+    static {\n+        String digest = JarSigner.Builder.getDefaultDigestAlgorithm();\n+        int idx = digest.indexOf(\"-\");\n+        if (idx != -1) {\n+            DEF_DIGEST = digest.substring(0, idx) + digest.substring(idx + 1);\n+        } else {\n+            DEF_DIGEST = digest;\n+        }\n+    }\n@@ -294,1 +307,2 @@\n-                checkTimestamp(\"policy.jar\", \"1.2.3\", \"SHA-256\");\n+                checkTimestamp(\"policy.jar\", \"1.2.3\",\n+                        JarSigner.Builder.getDefaultDigestAlgorithm());\n@@ -381,1 +395,2 @@\n-                        .shouldContain(\"Signature algorithm: SHA256withECDSA\")\n+                        .shouldContain(\"Signature algorithm: \" +\n+                                DEF_DIGEST + \"withECDSA\")\n@@ -383,1 +398,2 @@\n-                        .shouldContain(\"Signature algorithm: SHA256withDSA\");\n+                        .shouldContain(\"Signature algorithm: \" +\n+                                DEF_DIGEST + \"withDSA\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8217375 8260286\n+ * @bug 8217375 8260286 8267319\n@@ -1195,1 +1195,1 @@\n-                return 2048;\n+                return 3072;\n@@ -1197,1 +1197,1 @@\n-                return 256;\n+                return 384;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8217375\n+ * @bug 8217375 8267319\n@@ -50,0 +50,13 @@\n+ *  -DdigestAlgs=SHA-384\n+ *  SignTwice\n+ * @run main\/othervm\/timeout=600\n+ *  -Djava.security.properties=.\/java.security\n+ *  -Duser.language=en\n+ *  -Duser.country=US\n+ *  -DjdkList=TEST_JDK\n+ *  -DtsaList=notsa\n+ *  -Dexpired=false\n+ *  -DtestComprehensiveJarContents=true\n+ *  -DtestJarUpdate=true\n+ *  -Dstrict=true\n+ *  -DkeyAlgs=EC;0\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/SignTwice.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8260693\n+ * @bug 8260693 8267319\n@@ -189,1 +189,1 @@\n-                .shouldContain(\"Generating 2,048 bit DH key pair and a certificate (SHA256withDSA) issued by <ca3> with a validity of 90 days\")\n+                .shouldContain(\"Generating 3,072 bit DH key pair and a certificate (SHA384withDSA) issued by <ca3> with a validity of 90 days\")\n@@ -197,1 +197,1 @@\n-        if (sigName != \"SHA256withDSA\") {\n+        if (sigName != \"SHA384withDSA\") {\n@@ -203,1 +203,1 @@\n-        if (keyLen != 2048) {\n+        if (keyLen != 3072) {\n@@ -215,2 +215,2 @@\n-                .shouldContain(\"Signature algorithm name: SHA256withRSA\")\n-                .shouldContain(\"Subject Public Key Algorithm: 2048-bit DH key\")\n+                .shouldContain(\"Signature algorithm name: SHA384withRSA\")\n+                .shouldContain(\"Subject Public Key Algorithm: 3072-bit DH key\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8242184 8242068\n+ * @bug 8242184 8242068 8267319\n@@ -120,5 +120,5 @@\n-                {\"rsa\", \"rsa\", null, \"RSA\", SHA_256, SHA256withRSA},\n-                {\"dsa\", \"dsa\", null, \"DSA\", SHA_256, SHA256withDSA},\n-                {\"r\", \"rsa\", \"rsassa-pss\", \"RSA\", SHA_256, RSASSA_PSS},\n-                {\"pss\", \"rsassa-pss\", null, \"RSA\", SHA_256, RSASSA_PSS},\n-                {\"ec\", \"ec\", null, \"EC\", SHA_256, SHA256withECDSA},\n+                {\"rsa\", \"rsa\", null, \"RSA\", SHA_384, SHA384withRSA},\n+                {\"dsa\", \"dsa\", null, \"DSA\", SHA_384, SHA384withDSA},\n+                {\"r\", \"rsa\", \"rsassa-pss\", \"RSA\", SHA_384, RSASSA_PSS},\n+                {\"pss\", \"rsassa-pss\", null, \"RSA\", SHA_384, RSASSA_PSS},\n+                {\"ec\", \"ec\", null, \"EC\", SHA_384, SHA384withECDSA},\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenerateAll.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @bug 8213400 8214179\n+ * @bug 8213400 8214179 8267319\n@@ -51,1 +51,1 @@\n-        checkCurveName(\"b\", \"secp256r1\");\n+        checkCurveName(\"b\", \"secp384r1\"); \/\/ default; if none specified\n@@ -70,1 +70,2 @@\n-                .shouldContain(\"Subject Public Key Algorithm: 256-bit EC (secp256r1) key\");\n+                .shouldContain(\"Subject Public Key Algorithm: 256-bit EC (secp256r1) key\")\n+                .shouldContain(\"Subject Public Key Algorithm: 384-bit EC (secp384r1) key\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GroupName.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8029659 8214179\n+ * @bug 8029659 8214179 8267319\n@@ -44,1 +44,1 @@\n-        keytool(\"-genkeypair -alias f -dname CN=f -keyalg EC\")\n+        keytool(\"-genkeypair -alias g -dname CN=g -keyalg EC -keysize 256\")\n@@ -46,1 +46,1 @@\n-        keytool(\"-genkeypair -alias g -dname CN=g -keyalg EC -keysize 384\")\n+        keytool(\"-genkeypair -alias f -dname CN=f -keyalg EC\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/KeyAlg.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6561126\n+ * @bug 6561126 8267319\n@@ -28,2 +28,2 @@\n- * @modules java.base\/sun.security.tools.keytool\n- * @compile -XDignore.symbol.file NewSize7.java\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.tools.keytool\n@@ -40,0 +40,1 @@\n+import sun.security.util.SecurityProviderConstants;\n@@ -55,1 +56,1 @@\n-        if (r.getModulus().bitLength() != 2048) {\n+        if (r.getModulus().bitLength() != 3072) {\n@@ -59,1 +60,1 @@\n-        if (!x.getSigAlgName().equals(\"SHA256withRSA\")) {\n+        if (!x.getSigAlgName().equals(\"SHA384withRSA\")) {\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/NewSize7.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8138766 8227059 8227595\n+ * @bug 8138766 8227059 8227595 8267319\n@@ -50,4 +50,2 @@\n-        check(\"RSA\", 3072, null, \"SHA256withRSA\");\n-        check(\"RSA\", 3073, null, \"SHA384withRSA\");\n-        check(\"RSA\", 7680, null, \"SHA384withRSA\");\n-        check(\"RSA\", 7681, null, \"SHA512withRSA\");\n+        check(\"RSA\", 3072, null, \"SHA384withRSA\");\n+        check(\"RSA\", 7680, null, \"SHA512withRSA\");\n@@ -56,1 +54,1 @@\n-        check(\"DSA\", 3072, null, \"SHA256withDSA\");\n+        check(\"DSA\", 3072, null, \"SHA384withDSA\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/DefaultSignatureAlgorithm.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8215694 8222987 8225257\n+ * @bug 8215694 8222987 8225257 8267319\n@@ -66,1 +66,1 @@\n-                AlgorithmId.SHA256_oid);\n+                AlgorithmId.SHA384_oid);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/PSS.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}