{"files":[{"patch":"@@ -1860,2 +1860,0 @@\n-                } else if (\"AES\".equalsIgnoreCase(keyAlgName)) {\n-                    keysize = SecurityProviderConstants.getDefAESKeySize();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -494,1 +494,2 @@\n-            case \"DSA\", \"RSA\" -> ifcFfcStrength(KeyUtil.getKeySize(k))\n+            case \"DSA\" -> \"SHA384with\" + kAlg;\n+            case \"RSA\" -> ifcFfcStrength(KeyUtil.getKeySize(k))\n@@ -549,1 +550,1 @@\n-     * recommendation from NIST CNSA, e.g. use SHA-384 for 3072-bit.\n+     * recommendation from NIST CNSA, e.g. use SHA-384 and min 3072-bit.\n@@ -555,1 +556,1 @@\n-        if (bitLength >= 7680) { \/\/ 192 bits\n+        if (bitLength > 7680) { \/\/ 256 bits security strength\n@@ -557,3 +558,1 @@\n-        } else if (bitLength >= 3072) {  \/\/ 128 bits\n-            return \"SHA384\";\n-        } else  { \/\/ 128 bits and less\n+        } else if (bitLength < 624) { \/\/ too short for SHA384withRSA signature\n@@ -561,0 +560,3 @@\n+        } else {\n+            \/\/ per CNSA\n+            return \"SHA384\";\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-                    .equals(\"SHA256withRSA\"));\n+                    .equals(\"SHA384withRSA\"));\n@@ -195,1 +195,1 @@\n-                .equals(\"SHA256withDSA\"));\n+                .equals(\"SHA384withDSA\"));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-                .shouldContain(\"Signature algorithm: SHA256withRSA, 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n@@ -138,1 +138,1 @@\n-                .shouldContain(\"Signature algorithm: SHA256withRSA, 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n@@ -148,1 +148,1 @@\n-                .shouldContain(\"Signature algorithm: SHA256withRSA, 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckSignerCertChain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA256withRSA) issued by <ca> with a validity of 90 days\")\n+                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA384withRSA) issued by <ca> with a validity of 90 days\")\n@@ -252,1 +252,1 @@\n-                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA256withDSA) issued by <ca1> with a validity of 90 days\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA384withDSA) issued by <ca1> with a validity of 90 days\")\n@@ -268,1 +268,1 @@\n-        if (sigName != \"SHA256withDSA\") {\n+        if (sigName != \"SHA384withDSA\") {\n@@ -287,1 +287,1 @@\n-                .shouldContain(\"Signature algorithm name: SHA256withDSA\")\n+                .shouldContain(\"Signature algorithm name: SHA384withDSA\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        check(\"RSA\", 1024, null, \"SHA256withRSA\");\n+        check(\"RSA\", 1024, null, \"SHA384withRSA\");\n@@ -51,1 +51,3 @@\n-        check(\"RSA\", 7680, null, \"SHA512withRSA\");\n+        check(\"RSA\", 3073, null, \"SHA384withRSA\");\n+        check(\"RSA\", 7680, null, \"SHA384withRSA\");\n+        check(\"RSA\", 7681, null, \"SHA512withRSA\");\n@@ -53,1 +55,1 @@\n-        check(\"DSA\", 1024, null, \"SHA256withDSA\");\n+        check(\"DSA\", 1024, null, \"SHA384withDSA\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/DefaultSignatureAlgorithm.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-                AlgorithmId.SHA256_oid);\n+                AlgorithmId.SHA384_oid);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/PSS.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}