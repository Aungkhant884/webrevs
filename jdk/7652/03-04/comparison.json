{"files":[{"patch":"@@ -145,1 +145,1 @@\n-        int dsaKeySize = 3072;\n+        int dsaKeySize = 2048;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -539,1 +539,2 @@\n-        } else if (bitLength >= 384) {  \/\/ 192 bits of strength\n+        } else {\n+            \/\/ per CNSA, use SHA-384\n@@ -541,2 +542,0 @@\n-        } else { \/\/ 128 bits of strength and less\n-            return \"SHA256\";\n@@ -555,5 +554,11 @@\n-        if (bitLength > 7680) { \/\/ 256 bits security strength\n-            return \"SHA512\";\n-        } else {\n-            \/\/ per CNSA, use SHA-384 unless keysize is too small\n-            return (isDSA || bitLength >= 624 ? \"SHA384\" : \"SHA256\");\n+        if (isDSA) {\n+            \/\/ for backward interoperability\n+            \/\/ SHA384withDSA is added under JDK-8172366 (jdk16)\n+            return \"SHA256\";\n+        } else { \/\/ RSA, RSASSA-PSS\n+            if (bitLength > 7680) { \/\/ 256 bits security strength\n+                return \"SHA512\";\n+            } else {\n+                \/\/ per CNSA, use SHA-384 unless keysize is too small\n+                return (bitLength >= 624 ? \"SHA384\" : \"SHA256\");\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureUtil.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-         * Specifically, if a DSA or RSA key with a key size greater than 7680\n+         * Specifically, if an RSA key with a key size greater than 7680\n@@ -441,3 +441,3 @@\n-         * for resulting signature algorithm. For example, an RSA 512-bit key\n-         * is too short for SHA384withRSA signature. For such keys, SHA-256\n-         * will be used. The value may change in the future.\n+         * for resulting signature algorithm. As for DSA keys, the SHA256withDSA\n+         * signature algorithm is returned regardless of key size.\n+         * The value may change in the future.\n","filename":"src\/jdk.jartool\/share\/classes\/jdk\/security\/jarsigner\/JarSigner.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-                .equals(\"SHA384withDSA\"));\n+                .equals(\"SHA256withDSA\"));\n@@ -201,1 +201,1 @@\n-                .equals(\"SHA256withECDSA\"));\n+                .equals(\"SHA384withECDSA\"));\n","filename":"test\/jdk\/jdk\/security\/jarsigner\/Spec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        String[] sigalgs = {\"SHA384withDSA\", \"SHA384withRSA\",\n+        String[] sigalgs = {\"SHA256withDSA\", \"SHA384withRSA\",\n@@ -58,1 +58,1 @@\n-        int[] keysizes = {3072, 3072, 384, 3072};\n+        int[] keysizes = {2048, 3072, 384, 3072};\n@@ -60,1 +60,1 @@\n-        String[] digestalgs = {\"SHA-384\", \"SHA-384\", \"SHA-384\", \"SHA-384\"};\n+        String[] digestalgs = {\"SHA-256\", \"SHA-384\", \"SHA-384\", \"SHA-384\"};\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/DefaultSigalg.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -85,9 +85,10 @@\n-    private static final String DEF_DIGEST; \/\/ for signature algorithm, no \"-\"\n-\n-    static {\n-        String digest = JarSigner.Builder.getDefaultDigestAlgorithm();\n-        int idx = digest.indexOf(\"-\");\n-        if (idx != -1) {\n-            DEF_DIGEST = digest.substring(0, idx) + digest.substring(idx + 1);\n-        } else {\n-            DEF_DIGEST = digest;\n+    private static final String getDefaultSigAlg(String keyAlg) {\n+        switch(keyAlg) {\n+            case \"DSA\":\n+                return \"SHA256withDSA\";\n+            case \"RSA\":\n+                return \"SHA384withRSA\";\n+            case \"EC\":\n+                return \"SHA384withECDSA\";\n+            default:\n+                throw new RuntimeException(\"Error: unsupported algo \" + keyAlg);\n@@ -396,1 +397,1 @@\n-                                DEF_DIGEST + \"withECDSA\")\n+                                getDefaultSigAlg(\"EC\"))\n@@ -399,1 +400,1 @@\n-                                DEF_DIGEST + \"withDSA\");\n+                                getDefaultSigAlg(\"DSA\"));\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-                .shouldContain(\"Generating 3,072 bit DH key pair and a certificate (SHA384withDSA) issued by <ca3> with a validity of 90 days\")\n+                .shouldContain(\"Generating 3,072 bit DH key pair and a certificate (SHA256withDSA) issued by <ca3> with a validity of 90 days\")\n@@ -197,1 +197,1 @@\n-        if (sigName != \"SHA384withDSA\") {\n+        if (sigName != \"SHA256withDSA\") {\n@@ -252,1 +252,1 @@\n-                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA384withDSA) issued by <ca1> with a validity of 90 days\")\n+                .shouldContain(\"Generating 255 bit XDH key pair and a certificate (SHA256withDSA) issued by <ca1> with a validity of 90 days\")\n@@ -268,1 +268,1 @@\n-        if (sigName != \"SHA384withDSA\") {\n+        if (sigName != \"SHA256withDSA\") {\n@@ -287,1 +287,1 @@\n-                .shouldContain(\"Signature algorithm name: SHA384withDSA\")\n+                .shouldContain(\"Signature algorithm name: SHA256withDSA\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-                {\"dsa\", \"dsa\", null, \"DSA\", SHA_384, SHA384withDSA},\n+                {\"dsa\", \"dsa\", null, \"DSA\", SHA_256, SHA256withDSA},\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenerateAll.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-        check(\"DSA\", 1024, null, \"SHA384withDSA\");\n-        check(\"DSA\", 3072, null, \"SHA384withDSA\");\n+        check(\"DSA\", 1024, null, \"SHA256withDSA\");\n+        check(\"DSA\", 3072, null, \"SHA256withDSA\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/DefaultSignatureAlgorithm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}