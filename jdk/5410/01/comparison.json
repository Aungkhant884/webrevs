{"files":[{"patch":"@@ -37,11 +37,0 @@\n-static void run_foreground_task_if_needed(AbstractGangTask* task, uint num_workers,\n-                                          bool add_foreground_work) {\n-  if (add_foreground_work) {\n-    log_develop_trace(gc, workgang)(\"Running work gang: %s task: %s worker: foreground\",\n-      Thread::current()->name(), task->name());\n-    task->work(num_workers);\n-    log_develop_trace(gc, workgang)(\"Finished work gang: %s task: %s worker: foreground \"\n-      \"thread: \" PTR_FORMAT, Thread::current()->name(), task->name(), p2i(Thread::current()));\n-  }\n-}\n-\n@@ -82,1 +71,1 @@\n-  void coordinator_execute_on_workers(AbstractGangTask* task, uint num_workers, bool add_foreground_work) {\n+  void coordinator_execute_on_workers(AbstractGangTask* task, uint num_workers) {\n@@ -90,2 +79,0 @@\n-    run_foreground_task_if_needed(task, num_workers, add_foreground_work);\n-\n@@ -208,1 +195,1 @@\n-void WorkGang::run_task(AbstractGangTask* task, uint num_workers, bool add_foreground_work) {\n+void WorkGang::run_task(AbstractGangTask* task, uint num_workers) {\n@@ -215,1 +202,1 @@\n-  _dispatcher->coordinator_execute_on_workers(task, num_workers, add_foreground_work);\n+  _dispatcher->coordinator_execute_on_workers(task, num_workers);\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -172,3 +172,2 @@\n-  \/\/ number currently exists. If the add_foreground_work flag is true, the current thread\n-  \/\/ is used to run the task too.\n-  void run_task(AbstractGangTask* task, uint num_workers, bool add_foreground_work = false);\n+  \/\/ number currently exists.\n+  void run_task(AbstractGangTask* task, uint num_workers);\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -358,1 +358,0 @@\n-  assert(!Thread::current()->is_Worker_thread(), \"Should not be acquired by workers\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -261,1 +261,0 @@\n-   assert(Thread::current()->is_VM_thread(), \"Only by VM thread\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  \/\/ Non-concurrent mode only runs at safepoints by VM thread\n+  \/\/ Non-concurrent mode only runs at safepoints\n@@ -91,1 +91,0 @@\n-  assert(CONCURRENT || Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1774,1 +1774,1 @@\n-    gang->run_task(this, gang->active_workers(), true);\n+    gang->run_task(this);\n@@ -1783,1 +1783,1 @@\n-  if (!Thread::current()->is_VM_thread()) {\n+  if (worker_id != 0) {\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}