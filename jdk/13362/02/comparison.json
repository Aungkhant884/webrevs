{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.io.Serial;\n@@ -65,0 +66,1 @@\n+        @Serial\n@@ -120,4 +122,0 @@\n-    public DocCommentParser(ParserFactory fac) {\n-        this(fac, null, null, false);\n-    }\n-\n@@ -150,2 +148,1 @@\n-            case '\\f': case '\\n': case '\\r':\n-                newline = true;\n+            case '\\f', '\\n', '\\r' -> newline = true;\n@@ -189,1 +186,1 @@\n-                            case PREAMBLE:\n+                            case PREAMBLE -> {\n@@ -200,2 +197,2 @@\n-                                break;\n-                            case BODY:\n+                            }\n+                            case BODY -> {\n@@ -206,3 +203,3 @@\n-                                break;\n-                            default:\n-                                \/\/ fallthrough\n+                            }\n+\n+                            default -> { }\n@@ -392,2 +389,2 @@\n-     * Matching pairs of { } are skipped; the text is terminated by the first\n-     * unmatched }. It is an error if the beginning of the next tag is detected.\n+     * Matching pairs of '{' '}' are skipped; the text is terminated by the first\n+     * unmatched '}'. It is an error if the beginning of the next tag is detected.\n@@ -397,1 +394,1 @@\n-            case REMOVE_ALL:\n+            case REMOVE_ALL -> {\n@@ -399,2 +396,3 @@\n-                break;\n-            case REMOVE_FIRST_SPACE:\n+            }\n+\n+            case REMOVE_FIRST_SPACE -> {\n@@ -403,5 +401,1 @@\n-                break;\n-            case RETAIN_ALL:\n-            default:\n-                \/\/ do nothing\n-                break;\n+            }\n@@ -409,0 +403,1 @@\n+            case RETAIN_ALL -> { }\n@@ -413,1 +408,0 @@\n-        loop:\n@@ -416,3 +410,2 @@\n-                case '\\n': case '\\r': case '\\f':\n-                case ' ': case '\\t':\n-                    break;\n+                case '\\n', '\\r', '\\f', ' ', '\\t' -> {\n+                }\n@@ -420,1 +413,1 @@\n-                case '{':\n+                case '{' -> {\n@@ -424,1 +417,1 @@\n-                    break;\n+                }\n@@ -426,1 +419,1 @@\n-                case '}':\n+                case '}' -> {\n@@ -432,1 +425,1 @@\n-                    break;\n+                }\n@@ -434,1 +427,1 @@\n-                default:\n+                default -> {\n@@ -437,1 +430,1 @@\n-                    break;\n+                }\n@@ -447,1 +440,1 @@\n-     * unmatched }. It is an error if the beginning of the next tag is detected.\n+     * unmatched '}'. It is an error if the beginning of the next tag is detected.\n@@ -450,1 +443,0 @@\n-    @SuppressWarnings(\"fallthrough\")\n@@ -460,2 +452,2 @@\n-                case '\\n': case '\\r': case '\\f':\n-                case ' ': case '\\t':\n+\n+                case '\\n', '\\r', '\\f', ' ', '\\t' -> {\n@@ -464,1 +456,1 @@\n-                    break;\n+                }\n@@ -466,2 +458,1 @@\n-                case '(':\n-                case '<':\n+                case '(', '<' -> {\n@@ -470,1 +461,1 @@\n-                    break;\n+                }\n@@ -472,2 +463,1 @@\n-                case ')':\n-                case '>':\n+                case ')', '>' -> {\n@@ -476,1 +466,1 @@\n-                    break;\n+                }\n@@ -478,1 +468,1 @@\n-                case '}':\n+                case '}' -> {\n@@ -483,0 +473,1 @@\n+                }\n@@ -484,1 +475,1 @@\n-                case '@':\n+                case '@' -> {\n@@ -487,1 +478,1 @@\n-                    \/\/ fallthrough\n+                }\n@@ -489,1 +480,1 @@\n-                default:\n+                default -> {\n@@ -491,0 +482,1 @@\n+                }\n@@ -537,3 +529,1 @@\n-                case '\\n': case '\\r': case '\\f':\n-                case ' ': case '\\t':\n-                    break;\n+                case '\\n', '\\r', '\\f', ' ', '\\t' -> { }\n@@ -541,1 +531,1 @@\n-                case '\"':\n+                case '\"' -> {\n@@ -545,0 +535,1 @@\n+                }\n@@ -546,1 +537,1 @@\n-                case '@':\n+                case '@' -> {\n@@ -549,1 +540,1 @@\n-\n+                }\n@@ -566,2 +557,1 @@\n-                case '\\n':\n-                case '\\r': case '\\f': case ' ': case '\\t':\n+                case '\\n', '\\r', '\\f', ' ', '\\t' -> {\n@@ -569,0 +559,1 @@\n+                }\n@@ -570,1 +561,1 @@\n-                case '@':\n+                case '@' -> {\n@@ -573,1 +564,1 @@\n-                    break;\n+                }\n@@ -575,1 +566,1 @@\n-                case '{':\n+                case '{' -> {\n@@ -577,1 +568,1 @@\n-                    break;\n+                }\n@@ -579,1 +570,1 @@\n-                case '}':\n+                case '}' -> {\n@@ -583,1 +574,1 @@\n-                    break;\n+                }\n@@ -593,2 +584,2 @@\n-     * Matching pairs of { } are skipped; the text is terminated by the first\n-     * unmatched }. It is an error if the beginning of the next tag is detected.\n+     * Matching pairs of '{' '}' are skipped; the text is terminated by the first\n+     * unmatched '}'. It is an error if the beginning of the next tag is detected.\n@@ -754,1 +745,1 @@\n-                    case \"body\":\n+                    case \"body\" -> {\n@@ -780,0 +771,1 @@\n+                    }\n@@ -781,1 +773,1 @@\n-                    case \"main\":\n+                    case \"main\" -> {\n@@ -784,0 +776,1 @@\n+                    }\n@@ -811,2 +804,1 @@\n-                        case \"body\":\n-                        case \"main\":\n+                        case \"body\", \"main\" -> {\n@@ -814,0 +806,1 @@\n+                        }\n@@ -870,2 +863,1 @@\n-                    DCTree dctree = m.at(p).newStartElementTree(name, attrs, selfClosing).setEndPos(bp);\n-                    return dctree;\n+                    return m.at(p).newStartElementTree(name, attrs, selfClosing).setEndPos(bp);\n@@ -1014,10 +1006,3 @@\n-            case '&':\n-                entity(list);\n-                break;\n-\n-            case '{':\n-                inlineTag(list);\n-                break;\n-\n-            default:\n-                nextChar();\n+            case '&' -> entity(list);\n+            case '{' -> inlineTag(list);\n+            default  -> nextChar();\n@@ -1067,1 +1052,1 @@\n-                case '\\f': case '\\n': case '\\r':\n+                case '\\f', '\\n', '\\r' -> {\n@@ -1069,4 +1054,5 @@\n-                    break;\n-                case '\\t': case ' ':\n-                    break;\n-                default:\n+                }\n+\n+                case '\\t', ' ' -> { }\n+\n+                default -> {\n@@ -1074,0 +1060,1 @@\n+                }\n@@ -1149,9 +1136,5 @@\n-        switch (ch) {\n-            case '\\f': case '\\n': case '\\r': case '\\t':\n-            case ' ':\n-            case '\"': case '\\'': case '`':\n-            case '=': case '<': case '>':\n-                return true;\n-            default:\n-                return false;\n-        }\n+        return switch (ch) {\n+            case '\\f', '\\n', '\\r', '\\t', ' ',\n+                    '\"', '\\'', '`', '=', '<', '>' -> true;\n+            default -> false;\n+        };\n@@ -1405,11 +1388,5 @@\n-                    List<DCTree> description;\n-                    switch (kind) {\n-                        case BLOCK:\n-                            description = blockContent();\n-                            break;\n-                        case INLINE:\n-                            description = inlineContent();\n-                            break;\n-                        default:\n-                            throw new IllegalArgumentException(kind.toString());\n-                    }\n+                    List<DCTree> description = switch (kind) {\n+                        case BLOCK -> blockContent();\n+                        case INLINE -> inlineContent();\n+                        default -> throw new IllegalArgumentException(kind.toString());\n+                    };\n@@ -1426,1 +1403,1 @@\n-                        case '\"':\n+                        case '\"' -> {\n@@ -1435,1 +1412,1 @@\n-                            break;\n+                        }\n@@ -1437,1 +1414,1 @@\n-                        case '<':\n+                        case '<' -> {\n@@ -1441,1 +1418,1 @@\n-                            break;\n+                        }\n@@ -1443,1 +1420,1 @@\n-                        case '@':\n+                        case '@' -> {\n@@ -1446,1 +1423,1 @@\n-                            break;\n+                        }\n@@ -1448,1 +1425,1 @@\n-                        case EOI:\n+                        case EOI -> {\n@@ -1451,1 +1428,1 @@\n-                            break;\n+                        }\n@@ -1453,1 +1430,1 @@\n-                        default:\n+                        default -> {\n@@ -1459,0 +1436,1 @@\n+                        }\n@@ -1616,1 +1594,1 @@\n-                public DCTree parse(int pos) throws ParseException {\n+                public DCTree parse(int pos) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":92,"deletions":114,"binary":false,"changes":206,"status":"modified"}]}