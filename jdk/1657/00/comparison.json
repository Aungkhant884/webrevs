{"files":[{"patch":"@@ -1475,0 +1475,1 @@\n+          assert(ccs_end > cds_base, \"Sanity check\");\n@@ -1615,5 +1616,13 @@\n-  ReservedSpace total_rs;\n-  if (base_address != NULL) {\n-    \/\/ Reserve at the given archive base address, or not at all.\n-    total_rs = ReservedSpace(total_range_size, archive_space_alignment,\n-                             false \/* bool large *\/, (char*) base_address);\n+  assert(total_range_size > ccs_begin_offset, \"must be\");\n+  if (use_windows_memory_mapping() && use_archive_base_addr) {\n+    if (base_address != nullptr) {\n+      address ccs_base = base_address + archive_space_size + gap_size;\n+      archive_space_rs = ReservedSpace(archive_space_size, archive_space_alignment,\n+                                       false \/* large *\/, (char*)base_address);\n+      class_space_rs   = ReservedSpace(class_space_size, class_space_alignment,\n+                                       false \/* large *\/, (char*)ccs_base);\n+    }\n+    if (!archive_space_rs.is_reserved() || !class_space_rs.is_reserved()) {\n+      release_reserved_spaces(archive_space_rs, class_space_rs);\n+      return NULL;\n+    }\n@@ -1621,14 +1630,9 @@\n-    \/\/ Reserve at any address, but leave it up to the platform to choose a good one.\n-    total_rs = Metaspace::reserve_address_space_for_compressed_classes(total_range_size);\n-  }\n-\n-  if (!total_rs.is_reserved()) {\n-    return NULL;\n-  }\n-\n-  \/\/ Paranoid checks:\n-  assert(base_address == NULL || (address)total_rs.base() == base_address,\n-         \"Sanity (\" PTR_FORMAT \" vs \" PTR_FORMAT \")\", p2i(base_address), p2i(total_rs.base()));\n-  assert(is_aligned(total_rs.base(), archive_space_alignment), \"Sanity\");\n-  assert(total_rs.size() == total_range_size, \"Sanity\");\n-  assert(CompressedKlassPointers::is_valid_base((address)total_rs.base()), \"Sanity\");\n+    ReservedSpace total_rs;\n+    if (base_address != NULL) {\n+      \/\/ Reserve at the given archive base address, or not at all.\n+      total_rs = ReservedSpace(total_range_size, archive_space_alignment,\n+                               false \/* bool large *\/, (char*) base_address);\n+    } else {\n+      \/\/ Reserve at any address, but leave it up to the platform to choose a good one.\n+      total_rs = Metaspace::reserve_address_space_for_compressed_classes(total_range_size);\n+    }\n@@ -1636,6 +1640,3 @@\n-  \/\/ Now split up the space into ccs and cds archive. For simplicity, just leave\n-  \/\/  the gap reserved at the end of the archive space.\n-  archive_space_rs = total_rs.first_part(ccs_begin_offset,\n-                                         (size_t)os::vm_allocation_granularity(),\n-                                         \/*split=*\/true);\n-  class_space_rs = total_rs.last_part(ccs_begin_offset);\n+    if (!total_rs.is_reserved()) {\n+      return NULL;\n+    }\n@@ -1643,0 +1644,16 @@\n+    \/\/ Paranoid checks:\n+    assert(base_address == NULL || (address)total_rs.base() == base_address,\n+           \"Sanity (\" PTR_FORMAT \" vs \" PTR_FORMAT \")\", p2i(base_address), p2i(total_rs.base()));\n+    assert(is_aligned(total_rs.base(), archive_space_alignment), \"Sanity\");\n+    assert(total_rs.size() == total_range_size, \"Sanity\");\n+    assert(CompressedKlassPointers::is_valid_base((address)total_rs.base()), \"Sanity\");\n+\n+    \/\/ Now split up the space into ccs and cds archive. For simplicity, just leave\n+    \/\/  the gap reserved at the end of the archive space.\n+    archive_space_rs = total_rs.first_part(ccs_begin_offset,\n+                                           (size_t)os::vm_allocation_granularity(),\n+                                           \/*split=*\/false);\n+    class_space_rs = total_rs.last_part(ccs_begin_offset);\n+    MemTracker::record_virtual_memory_split_reserved(total_rs.base(), total_rs.size(),\n+                                                     ccs_begin_offset);\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":42,"deletions":25,"binary":false,"changes":67,"status":"modified"}]}