{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.concurrent.locks.Lock;\n@@ -246,0 +245,5 @@\n+                if (isEmpty()) {\n+                    \/\/ cache not used in the last LIFETIME - exit\n+                    keepAliveTimer = null;\n+                    break;\n+                }\n@@ -251,12 +255,6 @@\n-                    v.lock();\n-                    try {\n-                        KeepAliveEntry e = v.peekLast();\n-                        while (e != null) {\n-                            if ((currentTime - e.idleStartTime) > v.nap) {\n-                                v.pollLast();\n-                                if (closeList == null) {\n-                                    closeList = new ArrayList<>();\n-                                }\n-                                closeList.add(e.hc);\n-                            } else {\n-                                break;\n+                    KeepAliveEntry e = v.peekLast();\n+                    while (e != null) {\n+                        if ((currentTime - e.idleStartTime) > v.nap) {\n+                            v.pollLast();\n+                            if (closeList == null) {\n+                                closeList = new ArrayList<>();\n@@ -264,1 +262,3 @@\n-                            e = v.peekLast();\n+                            closeList.add(e.hc);\n+                        } else {\n+                            break;\n@@ -266,0 +266,2 @@\n+                        e = v.peekLast();\n+                    }\n@@ -267,5 +269,2 @@\n-                        if (v.isEmpty()) {\n-                            keysToRemove.add(key);\n-                        }\n-                    } finally {\n-                        v.unlock();\n+                    if (v.isEmpty()) {\n+                        keysToRemove.add(key);\n@@ -287,1 +286,1 @@\n-        } while (!isEmpty());\n+        } while (keepAliveTimer == Thread.currentThread());\n@@ -312,1 +311,0 @@\n-    private final ReentrantLock lock = new ReentrantLock();\n@@ -323,18 +321,14 @@\n-        lock();\n-        try {\n-            \/\/ check the most recent connection, use if still valid\n-            KeepAliveEntry e = peekFirst();\n-            if (e == null) {\n-                return null;\n-            }\n-            long currentTime = System.currentTimeMillis();\n-            if ((currentTime - e.idleStartTime) > nap) {\n-                return null; \/\/ all connections stale - will be cleaned up later\n-            } else {\n-                pollFirst();\n-                if (KeepAliveCache.logger.isLoggable(PlatformLogger.Level.FINEST)) {\n-                    String msg = \"cached HttpClient was idle for \"\n-                            + Long.toString(currentTime - e.idleStartTime);\n-                    KeepAliveCache.logger.finest(msg);\n-                }\n-                return e.hc;\n+        \/\/ check the most recent connection, use if still valid\n+        KeepAliveEntry e = peekFirst();\n+        if (e == null) {\n+            return null;\n+        }\n+        long currentTime = System.currentTimeMillis();\n+        if ((currentTime - e.idleStartTime) > nap) {\n+            return null; \/\/ all connections stale - will be cleaned up later\n+        } else {\n+            pollFirst();\n+            if (KeepAliveCache.logger.isLoggable(PlatformLogger.Level.FINEST)) {\n+                String msg = \"cached HttpClient was idle for \"\n+                        + Long.toString(currentTime - e.idleStartTime);\n+                KeepAliveCache.logger.finest(msg);\n@@ -342,2 +336,1 @@\n-        } finally {\n-            unlock();\n+            return e.hc;\n@@ -349,10 +342,4 @@\n-        lock();\n-        try {\n-            assert KeepAliveCache.getMaxConnections() > 0;\n-            if (size() >= KeepAliveCache.getMaxConnections()) {\n-                \/\/ remove oldest connection\n-                staleClient = removeLast().hc;\n-            }\n-            addFirst(new KeepAliveEntry(h, System.currentTimeMillis()));\n-        } finally {\n-            unlock();\n+        assert KeepAliveCache.getMaxConnections() > 0;\n+        if (size() >= KeepAliveCache.getMaxConnections()) {\n+            \/\/ remove oldest connection\n+            staleClient = removeLast().hc;\n@@ -360,0 +347,1 @@\n+        addFirst(new KeepAliveEntry(h, System.currentTimeMillis()));\n@@ -364,8 +352,0 @@\n-    final void lock() {\n-        lock.lock();\n-    }\n-\n-    final void unlock() {\n-        lock.unlock();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveCache.java","additions":40,"deletions":60,"binary":false,"changes":100,"status":"modified"}]}