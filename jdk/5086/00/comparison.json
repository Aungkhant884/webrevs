{"files":[{"patch":"@@ -352,0 +352,1 @@\n+        checkIndex(index, count);\n@@ -353,1 +354,1 @@\n-            return StringLatin1.charAt(value, index);\n+            return (char)(value[index] & 0xff);\n@@ -355,1 +356,1 @@\n-        return StringUTF16.charAt(value, index);\n+        return StringUTF16.getChar(value, index);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -39,0 +43,3 @@\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -333,0 +340,14 @@\n+    public int charAt_index = 3;\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public char charAtLatin1() {\n+        return sbLatin1.charAt(charAt_index);\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public char charAtUtf16() {\n+        return sbUtf16.charAt(charAt_index);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}