{"files":[{"patch":"@@ -352,0 +352,1 @@\n+        checkIndex(index, count);\n@@ -353,1 +354,1 @@\n-            return StringLatin1.charAt(value, index);\n+            return (char)(value[index] & 0xff);\n@@ -355,1 +356,1 @@\n-        return StringUTF16.charAt(value, index);\n+        return StringUTF16.getChar(value, index);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271732\n+ * @summary Basic test that charAt throws IIOBE as expected for out of bounds indexes.\n+ * @run testng CharAt\n+ *\/\n+\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+import static org.testng.Assert.*;\n+\n+public class CharAt {\n+\n+    \/**\n+     * StringBuilder\/-Buffer.charAt throws:\n+     * IndexOutOfBoundsException - if index is negative or greater than or equal to length().\n+     * the test inputs, expected to throw IndexOutOfBoundsException.\n+     *\/\n+    @Test\n+    public void charAtIIOBE() {\n+        StringBuilder sb = new StringBuilder(\"test\");\n+        StringBuffer sbuf = new StringBuffer(\"test\");\n+\n+        StringBuilder sbUtf16 = new StringBuilder(\"\\uFF34est\"); \/\/ Fullwidth Latin Capital Letter T\n+        StringBuffer sbufUtf16 = new StringBuffer(\"\\uFF34est\");\n+\n+        List<Integer> outOfBoundsIndices = List.of(Integer.MIN_VALUE, -2, -1, 4, 5, Integer.MAX_VALUE);\n+\n+        for (int index : outOfBoundsIndices) {\n+            try {\n+                sb.charAt(index);\n+                fail(\"StringBuilder.charAt index: \" + index + \" does not throw IOOBE as expected\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                \/\/ OK\n+            }\n+\n+            try {\n+                sbUtf16.charAt(index);\n+                fail(\"StringBuilder.charAt index: \" + index + \" does not throw IOOBE as expected (UTF-16)\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                \/\/ OK\n+            }\n+\n+            try {\n+                sbuf.charAt(index);\n+                fail(\"StringBuffer.charAt index: \" + index + \" does not throw IOOBE as expected\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                \/\/ OK\n+            }\n+\n+            try {\n+                sbufUtf16.charAt(index);\n+                fail(\"StringBuffer.charAt index: \" + index + \" does not throw IOOBE as expected (UTF-16)\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                \/\/ OK\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/CharAt.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -27,0 +27,3 @@\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -33,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -39,0 +43,3 @@\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n@@ -333,0 +340,14 @@\n+    public int charAt_index = 3;\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public char charAtLatin1() {\n+        return sbLatin1.charAt(charAt_index);\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public char charAtUtf16() {\n+        return sbUtf16.charAt(charAt_index);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}