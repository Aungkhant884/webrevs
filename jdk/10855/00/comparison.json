{"files":[{"patch":"@@ -44,0 +44,7 @@\n+\/\/ To keep matters simple we just raise a fatal error on OOM. Since preinit allocation\n+\/\/ is just used for pre-VM-initialization mallocs, none of which are optional, we don't\n+\/\/ need a finer grained error handling.\n+static void fail_oom(size_t size) {\n+  vm_exit_out_of_memory(size, OOM_MALLOC_ERROR, \"VM early initialization phase\");\n+}\n+\n@@ -48,0 +55,3 @@\n+  if (outer_size < payload_size) {\n+    fail_oom(payload_size);\n+  }\n@@ -49,0 +59,3 @@\n+  if (p == nullptr) {\n+    fail_oom(outer_size);\n+  }\n@@ -57,0 +70,3 @@\n+  if (new_outer_size < new_payload_size) {\n+    fail_oom(new_payload_size);\n+  }\n@@ -58,0 +74,3 @@\n+  if (p == nullptr) {\n+    fail_oom(new_outer_size);\n+  }\n","filename":"src\/hotspot\/share\/services\/nmtPreInit.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -93,0 +93,19 @@\n+    \/\/ This should result in a fatal native oom error from NMT preinit with a clear error message.\n+    \/\/ It should not result in a SEGV or anything similar. Unfortunately difficult to test\n+    \/\/ automatically.\n+    \/\/ Uncomment to test manually.\n+\n+    \/\/ case 1: overflow\n+    \/\/ os_malloc(SIZE_MAX);\n+\n+    \/\/ case 2: failing malloc\n+    \/\/ os_malloc(SIZE_MAX - M);\n+\n+    \/\/ case 3: overflow in realloc\n+    \/\/ void* p = os_malloc(10);\n+    \/\/ p = os_realloc(p, SIZE_MAX);\n+\n+    \/\/ case 4: failing realloc\n+    \/\/ void* p = os_malloc(10);\n+    \/\/ p = os_realloc(p, SIZE_MAX - M);\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmtpreinit.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}