{"files":[{"patch":"@@ -88,0 +88,1 @@\n+  Assembler::SIMD_RegVariant get_reg_variant(const Node* n);\n@@ -330,0 +331,5 @@\n+\n+  Assembler::SIMD_RegVariant get_reg_variant(const Node* n) {\n+    BasicType bt = Matcher::vector_element_basic_type(n);\n+    return Assembler::elemType_to_regVariant(bt);\n+  }\n@@ -669,1 +675,1 @@\n-  match(Set dst_src (AddVB dst_src (ReplicateB con)));\n+  match(Set dst_src (AddVB dst_src (Replicate con)));\n@@ -684,1 +690,1 @@\n-  match(Set dst_src (AddVS dst_src (ReplicateS con)));\n+  match(Set dst_src (AddVS dst_src (Replicate con)));\n@@ -699,1 +705,1 @@\n-  match(Set dst_src (AddVI dst_src (ReplicateI con)));\n+  match(Set dst_src (AddVI dst_src (Replicate con)));\n@@ -714,1 +720,1 @@\n-  match(Set dst_src (AddVL dst_src (ReplicateL con)));\n+  match(Set dst_src (AddVL dst_src (Replicate con)));\n@@ -1193,2 +1199,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (AndV dst_src (ReplicateB con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n@@ -1203,2 +1209,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (AndV dst_src (ReplicateS con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n@@ -1213,2 +1219,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (AndV dst_src (ReplicateI con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n@@ -1223,2 +1229,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (AndV dst_src (ReplicateL con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (AndV dst_src (Replicate con)));\n@@ -1269,2 +1275,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (OrV dst_src (ReplicateB con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n@@ -1279,2 +1285,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (OrV dst_src (ReplicateS con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n@@ -1289,2 +1295,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (OrV dst_src (ReplicateI con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n@@ -1299,2 +1305,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (OrV dst_src (ReplicateL con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (OrV dst_src (Replicate con)));\n@@ -1345,2 +1351,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (XorV dst_src (ReplicateB con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n@@ -1355,2 +1361,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (XorV dst_src (ReplicateS con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n@@ -1365,2 +1371,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (XorV dst_src (ReplicateI con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n@@ -1375,2 +1381,2 @@\n-  predicate(UseSVE > 0);\n-  match(Set dst_src (XorV dst_src (ReplicateL con)));\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst_src (XorV dst_src (Replicate con)));\n@@ -1413,3 +1419,1 @@\n-  match(Set dst (XorV src (ReplicateB m1)));\n-  match(Set dst (XorV src (ReplicateS m1)));\n-  match(Set dst (XorV src (ReplicateI m1)));\n+  match(Set dst (XorV src (Replicate m1)));\n@@ -1431,1 +1435,1 @@\n-  match(Set dst (XorV src (ReplicateL m1)));\n+  match(Set dst (XorV src (Replicate m1)));\n@@ -1450,3 +1454,1 @@\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateB m1)) pg));\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateS m1)) pg));\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateI m1)) pg));\n+  match(Set dst_src (XorV (Binary dst_src (Replicate m1)) pg));\n@@ -1455,2 +1457,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_not($dst_src$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_not($dst_src$$FloatRegister, get_reg_variant(this),\n@@ -1464,1 +1465,1 @@\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateL m1)) pg));\n+  match(Set dst_src (XorV (Binary dst_src (Replicate m1)) pg));\n@@ -1467,2 +1468,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_not($dst_src$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_not($dst_src$$FloatRegister, get_reg_variant(this),\n@@ -1479,3 +1479,1 @@\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n@@ -1497,1 +1495,1 @@\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n@@ -1516,3 +1514,1 @@\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateB m1))) pg));\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateS m1))) pg));\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateI m1))) pg));\n+  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (Replicate m1))) pg));\n@@ -1521,2 +1517,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_bic($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_bic($dst_src1$$FloatRegister, get_reg_variant(this),\n@@ -1530,1 +1525,1 @@\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateL m1))) pg));\n+  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (Replicate m1))) pg));\n@@ -1533,2 +1528,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_bic($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_bic($dst_src1$$FloatRegister, get_reg_variant(this),\n@@ -4220,30 +4214,0 @@\n-instruct replicateB(vReg dst, iRegIorL2I src) %{\n-  match(Set dst (ReplicateB src));\n-  format %{ \"replicateB $dst, $src\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ dup($dst$$FloatRegister, get_arrangement(this), $src$$Register);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      __ sve_dup($dst$$FloatRegister, __ B, $src$$Register);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct replicateS(vReg dst, iRegIorL2I src) %{\n-  match(Set dst (ReplicateS src));\n-  format %{ \"replicateS $dst, $src\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ dup($dst$$FloatRegister, get_arrangement(this), $src$$Register);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      __ sve_dup($dst$$FloatRegister, __ H, $src$$Register);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -4251,1 +4215,1 @@\n-  match(Set dst (ReplicateI src));\n+  match(Set dst (Replicate src));\n@@ -4259,1 +4223,1 @@\n-      __ sve_dup($dst$$FloatRegister, __ S, $src$$Register);\n+      __ sve_dup($dst$$FloatRegister, get_reg_variant(this), $src$$Register);\n@@ -4266,1 +4230,1 @@\n-  match(Set dst (ReplicateL src));\n+  match(Set dst (Replicate src));\n@@ -4274,1 +4238,1 @@\n-      __ sve_dup($dst$$FloatRegister, __ D, $src$$Register);\n+      __ sve_dup($dst$$FloatRegister, get_reg_variant(this), $src$$Register);\n@@ -4281,1 +4245,1 @@\n-  match(Set dst (ReplicateF src));\n+  match(Set dst (Replicate src));\n@@ -4296,1 +4260,1 @@\n-  match(Set dst (ReplicateD src));\n+  match(Set dst (Replicate src));\n@@ -4313,4 +4277,3 @@\n-  predicate(Matcher::vector_length_in_bytes(n) <= 16);\n-  match(Set dst (ReplicateB con));\n-  match(Set dst (ReplicateS con));\n-  match(Set dst (ReplicateI con));\n+  predicate(Matcher::vector_length_in_bytes(n) <= 16 &&\n+            Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate con));\n@@ -4334,2 +4297,3 @@\n-  predicate(Matcher::vector_length_in_bytes(n) > 16);\n-  match(Set dst (ReplicateB con));\n+  predicate(Matcher::vector_length_in_bytes(n) > 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate con));\n@@ -4344,11 +4308,0 @@\n-instruct replicateS_imm8_gt128b(vReg dst, immI8_shift8 con) %{\n-  predicate(Matcher::vector_length_in_bytes(n) > 16);\n-  match(Set dst (ReplicateS con));\n-  format %{ \"replicateS_imm8_gt128b $dst, $con\\t# vector > 128 bits\" %}\n-  ins_encode %{\n-    assert(UseSVE > 0, \"must be sve\");\n-    __ sve_dup($dst$$FloatRegister, __ H, (int)($con$$constant));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -4356,2 +4309,4 @@\n-  predicate(Matcher::vector_length_in_bytes(n) > 16);\n-  match(Set dst (ReplicateI con));\n+  predicate(Matcher::vector_length_in_bytes(n) > 16 &&\n+            (Matcher::vector_element_basic_type(n) == T_SHORT ||\n+             Matcher::vector_element_basic_type(n) == T_INT));\n+  match(Set dst (Replicate con));\n@@ -4361,1 +4316,1 @@\n-    __ sve_dup($dst$$FloatRegister, __ S, (int)($con$$constant));\n+    __ sve_dup($dst$$FloatRegister, get_reg_variant(this), (int)($con$$constant));\n@@ -4368,1 +4323,1 @@\n-  match(Set dst (ReplicateL con));\n+  match(Set dst (Replicate con));\n@@ -4378,1 +4333,1 @@\n-  match(Set dst (ReplicateL con));\n+  match(Set dst (Replicate con));\n@@ -5150,3 +5105,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB zero)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS zero)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate zero)) cond));\n@@ -5156,1 +5109,0 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -5158,1 +5110,2 @@\n-    __ neon_compare_zero($dst$$FloatRegister, bt, $src$$FloatRegister,\n+    __ neon_compare_zero($dst$$FloatRegister, Matcher::vector_element_basic_type(this),\n+                         $src$$FloatRegister,\n@@ -5166,1 +5119,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateL zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate zero)) cond));\n@@ -5171,1 +5124,2 @@\n-    __ neon_compare_zero($dst$$FloatRegister, T_LONG, $src$$FloatRegister,\n+    __ neon_compare_zero($dst$$FloatRegister, T_LONG,\n+                         $src$$FloatRegister,\n@@ -5179,1 +5133,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateF zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate zero)) cond));\n@@ -5184,1 +5138,2 @@\n-    __ neon_compare_zero($dst$$FloatRegister, T_FLOAT, $src$$FloatRegister,\n+    __ neon_compare_zero($dst$$FloatRegister, T_FLOAT,\n+                         $src$$FloatRegister,\n@@ -5192,1 +5147,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateD zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate zero)) cond));\n@@ -5197,1 +5152,2 @@\n-    __ neon_compare_zero($dst$$FloatRegister, T_DOUBLE, $src$$FloatRegister,\n+    __ neon_compare_zero($dst$$FloatRegister, T_DOUBLE,\n+                         $src$$FloatRegister,\n@@ -5219,56 +5175,0 @@\n-instruct vmaskcmp_immB_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB imm)) cond));\n-  effect(KILL cr);\n-  format %{ \"vmaskcmp_immB_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n-    __ sve_cmp(condition, $dst$$PRegister, __ B, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmaskcmpU_immB_sve(pReg dst, vReg src, immIU7 imm, immI_cmpU_cond cond, rFlagsReg cr) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB imm)) cond));\n-  effect(KILL cr);\n-  format %{ \"vmaskcmpU_immB_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n-    __ sve_cmp(condition, $dst$$PRegister, __ B, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmaskcmp_immS_sve(pReg dst, vReg src, immI5 imm, immI_cmp_cond cond, rFlagsReg cr) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS imm)) cond));\n-  effect(KILL cr);\n-  format %{ \"vmaskcmp_immS_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n-    __ sve_cmp(condition, $dst$$PRegister, __ H, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vmaskcmpU_immS_sve(pReg dst, vReg src, immIU7 imm, immI_cmpU_cond cond, rFlagsReg cr) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS imm)) cond));\n-  effect(KILL cr);\n-  format %{ \"vmaskcmpU_immS_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    assert(length_in_bytes == MaxVectorSize, \"invalid vector length\");\n-    __ sve_cmp(condition, $dst$$PRegister, __ H, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -5277,1 +5177,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate imm)) cond));\n@@ -5284,1 +5184,2 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ S, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, get_reg_variant(in(operand_index($src))),\n+               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -5291,1 +5192,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate imm)) cond));\n@@ -5298,1 +5199,2 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ S, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, get_reg_variant(in(operand_index($src))),\n+               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -5305,1 +5207,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateL imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate imm)) cond));\n@@ -5312,1 +5214,2 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ D, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, get_reg_variant(in(operand_index($src))),\n+               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -5319,1 +5222,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateL imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate imm)) cond));\n@@ -5326,1 +5229,2 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ D, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, get_reg_variant(in(operand_index($src))),\n+               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":89,"deletions":185,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  Assembler::SIMD_RegVariant get_reg_variant(const Node* n);\n@@ -320,0 +321,5 @@\n+\n+  Assembler::SIMD_RegVariant get_reg_variant(const Node* n) {\n+    BasicType bt = Matcher::vector_element_basic_type(n);\n+    return Assembler::elemType_to_regVariant(bt);\n+  }\n@@ -480,1 +486,1 @@\n-  match(Set dst_src (AddV$1 dst_src (Replicate$1 con)));\n+  match(Set dst_src (AddV$1 dst_src (Replicate con)));\n@@ -621,4 +627,19 @@\n-dnl BITWISE_OP($1,        $2,      $3,        $4      )\n-dnl BITWISE_OP(rule_name, op_name, insn_neon, insn_sve)\n-define(`BITWISE_OP', `\n-instruct $1(vReg dst, vReg src1, vReg src2) %{\n+dnl BITWISE_OP_IMM($1,        $2,   $3,      $4,   $5,   $6        )\n+dnl BITWISE_OP_IMM(rule_name, type, op_name, insn, size, basic_type)\n+define(`BITWISE_OP_IMM', `\n+instruct $1(vReg dst_src, imm$2Log con) %{\n+  predicate(UseSVE > 0 && Matcher::vector_element_basic_type(n) == $6);\n+  match(Set dst_src ($3 dst_src (Replicate con)));\n+  format %{ \"$1 $dst_src, $dst_src, $con\" %}\n+  ins_encode %{\n+    __ $4($dst_src$$FloatRegister, __ $5, (uint64_t)($con$$constant));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+dnl BITWISE_OPS($1,        $2,      $3,        $4      )\n+dnl BITWISE_OPS(rule_name, op_name, insn_neon, insn_sve)\n+define(`BITWISE_OPS',\n+`\/\/ vector $1\n+\n+instruct v$1(vReg dst, vReg src1, vReg src2) %{\n@@ -626,1 +647,1 @@\n-  format %{ \"$1 $dst, $src1, $src2\" %}\n+  format %{ \"v$1 $dst, $src1, $src2\" %}\n@@ -638,6 +659,5 @@\n-%}')dnl\n-dnl\n-dnl BITWISE_OP_PREDICATE($1,        $2,      $3  )\n-dnl BITWISE_OP_PREDICATE(rule_name, op_name, insn)\n-define(`BITWISE_OP_PREDICATE', `\n-instruct $1_masked(vReg dst_src1, vReg src2, pRegGov pg) %{\n+%}\n+\n+\/\/ vector $1 - predicated\n+\n+instruct v$1_masked(vReg dst_src1, vReg src2, pRegGov pg) %{\n@@ -646,1 +666,1 @@\n-  format %{ \"$1_masked $dst_src1, $pg, $dst_src1, $src2\" %}\n+  format %{ \"v$1_masked $dst_src1, $pg, $dst_src1, $src2\" %}\n@@ -649,1 +669,1 @@\n-    __ $3($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ $4($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n@@ -653,17 +673,1 @@\n-%}')dnl\n-dnl\n-dnl BITWISE_OP_IMM($1,        $2,   $3,      $4,   $5  )\n-dnl BITWISE_OP_IMM(rule_name, type, op_name, insn, size)\n-define(`BITWISE_OP_IMM', `\n-instruct $1(vReg dst_src, imm$2Log con) %{\n-  predicate(UseSVE > 0);\n-  match(Set dst_src ($3 dst_src (Replicate$2 con)));\n-  format %{ \"$1 $dst_src, $dst_src, $con\" %}\n-  ins_encode %{\n-    __ $4($dst_src$$FloatRegister, __ $5, (uint64_t)($con$$constant));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl\n-\n-\/\/ ------------------------------ Vector and -----------------------------------\n+%}\n@@ -671,2 +675,5 @@\n-\/\/ vector and\n-BITWISE_OP(vand, AndV, andr, sve_and)\n+\/\/ vector $1 reg imm (unpredicated)\n+BITWISE_OP_IMM(v$1ImmB, B, $2, $4, B, T_BYTE)\n+BITWISE_OP_IMM(v$1ImmS, S, $2, $4, H, T_SHORT)\n+BITWISE_OP_IMM(v$1ImmI, I, $2, $4, S, T_INT)\n+BITWISE_OP_IMM(v$1ImmL, L, $2, $4, D, T_LONG)')dnl\n@@ -674,2 +681,1 @@\n-\/\/ vector and - predicated\n-BITWISE_OP_PREDICATE(vand, AndV, sve_and)\n+\/\/ ------------------------------ Vector and -----------------------------------\n@@ -677,5 +683,1 @@\n-\/\/ vector and reg imm (unpredicated)\n-BITWISE_OP_IMM(vandImmB, B, AndV, sve_and, B)\n-BITWISE_OP_IMM(vandImmS, S, AndV, sve_and, H)\n-BITWISE_OP_IMM(vandImmI, I, AndV, sve_and, S)\n-BITWISE_OP_IMM(vandImmL, L, AndV, sve_and, D)\n+BITWISE_OPS(and, AndV, andr, sve_and)\n@@ -685,11 +687,1 @@\n-\/\/ vector or\n-BITWISE_OP(vor, OrV, orr, sve_orr)\n-\n-\/\/ vector or - predicated\n-BITWISE_OP_PREDICATE(vor, OrV, sve_orr)\n-\n-\/\/ vector or reg imm (unpredicated)\n-BITWISE_OP_IMM(vorImmB, B, OrV, sve_orr, B)\n-BITWISE_OP_IMM(vorImmS, S, OrV, sve_orr, H)\n-BITWISE_OP_IMM(vorImmI, I, OrV, sve_orr, S)\n-BITWISE_OP_IMM(vorImmL, L, OrV, sve_orr, D)\n+BITWISE_OPS(or, OrV, orr, sve_orr)\n@@ -699,11 +691,1 @@\n-\/\/ vector xor\n-BITWISE_OP(vxor, XorV, eor, sve_eor)\n-\n-\/\/ vector xor - predicated\n-BITWISE_OP_PREDICATE(vxor, XorV, sve_eor)\n-\n-\/\/ vector xor reg imm (unpredicated)\n-BITWISE_OP_IMM(vxorImmB, B, XorV, sve_eor, B)\n-BITWISE_OP_IMM(vxorImmS, S, XorV, sve_eor, H)\n-BITWISE_OP_IMM(vxorImmI, I, XorV, sve_eor, S)\n-BITWISE_OP_IMM(vxorImmL, L, XorV, sve_eor, D)\n+BITWISE_OPS(xor, XorV, eor, sve_eor)\n@@ -737,6 +719,0 @@\n-dnl\n-define(`MATCH_RULE', `ifelse($1, I,\n-`match(Set dst (XorV src (ReplicateB m1)));\n-  match(Set dst (XorV src (ReplicateS m1)));\n-  match(Set dst (XorV src (ReplicateI m1)));',\n-`match(Set dst (XorV src (ReplicateL m1)));')')dnl\n@@ -748,1 +724,1 @@\n-  MATCH_RULE($1)\n+  match(Set dst (XorV src (Replicate m1)));\n@@ -766,7 +742,0 @@\n-undefine(MATCH_RULE)\n-dnl\n-define(`MATCH_RULE', `ifelse($1, I,\n-`match(Set dst_src (XorV (Binary dst_src (ReplicateB m1)) pg));\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateS m1)) pg));\n-  match(Set dst_src (XorV (Binary dst_src (ReplicateI m1)) pg));',\n-`match(Set dst_src (XorV (Binary dst_src (ReplicateL m1)) pg));')')dnl\n@@ -779,1 +748,1 @@\n-  MATCH_RULE($1)\n+  match(Set dst_src (XorV (Binary dst_src (Replicate m1)) pg));\n@@ -782,2 +751,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_not($dst_src$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_not($dst_src$$FloatRegister, get_reg_variant(this),\n@@ -789,0 +757,1 @@\n+\n@@ -792,3 +761,0 @@\n-undefine(MATCH_RULE)\n-dnl\n-\/\/ ------------------------------ Vector and_not -------------------------------\n@@ -797,5 +763,1 @@\n-define(`MATCH_RULE', `ifelse($1, I,\n-`match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n-  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));',\n-`match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));')')dnl\n+\/\/ ------------------------------ Vector and_not -------------------------------\n@@ -807,1 +769,1 @@\n-  MATCH_RULE($1)\n+  match(Set dst (AndV src1 (XorV src2 (Replicate m1))));\n@@ -822,0 +784,1 @@\n+\n@@ -825,7 +788,0 @@\n-undefine(MATCH_RULE)\n-dnl\n-define(`MATCH_RULE', `ifelse($1, I,\n-`match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateB m1))) pg));\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateS m1))) pg));\n-  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateI m1))) pg));',\n-`match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (ReplicateL m1))) pg));')')dnl\n@@ -838,1 +794,1 @@\n-  MATCH_RULE($1)\n+  match(Set dst_src1 (AndV (Binary dst_src1 (XorV src2 (Replicate m1))) pg));\n@@ -841,2 +797,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_bic($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n+    __ sve_bic($dst_src1$$FloatRegister, get_reg_variant(this),\n@@ -848,0 +803,1 @@\n+\n@@ -851,1 +807,1 @@\n-undefine(MATCH_RULE)\n+\n@@ -2794,1 +2750,1 @@\n-  match(Set dst (Replicate$1 src));\n+  match(Set dst (Replicate src));\n@@ -2802,1 +2758,1 @@\n-      __ sve_dup($dst$$FloatRegister, __ $3, $src$$Register);\n+      __ sve_dup($dst$$FloatRegister, get_reg_variant(this), $src$$Register);\n@@ -2812,1 +2768,1 @@\n-  match(Set dst (Replicate$1 src));\n+  match(Set dst (Replicate src));\n@@ -2826,14 +2782,0 @@\n-dnl REPLICATE_IMM_SVE($1,   $2,       $3  )\n-dnl REPLICATE_IMM_SVE(type, arg_type, size)\n-define(`REPLICATE_IMM_SVE', `\n-instruct replicate$1_imm8_gt128b(vReg dst, $2 con) %{\n-  predicate(Matcher::vector_length_in_bytes(n) > 16);\n-  match(Set dst (Replicate$1 con));\n-  format %{ \"replicate$1_imm8_gt128b $dst, $con\\t# vector > 128 bits\" %}\n-  ins_encode %{\n-    assert(UseSVE > 0, \"must be sve\");\n-    __ sve_dup($dst$$FloatRegister, __ $3, (int)($con$$constant));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}')dnl\n-dnl\n@@ -2841,6 +2783,4 @@\n-REPLICATE_INT(B, iRegIorL2I, B)\n-REPLICATE_INT(S, iRegIorL2I, H)\n-REPLICATE_INT(I, iRegIorL2I, S)\n-REPLICATE_INT(L, iRegL,      D)\n-REPLICATE_FP(F, S)\n-REPLICATE_FP(D, D)\n+REPLICATE_INT(I, iRegIorL2I)\n+REPLICATE_INT(L, iRegL)\n+REPLICATE_FP(F, S, T_FLOAT )\n+REPLICATE_FP(D, D, T_DOUBLE)\n@@ -2851,4 +2791,3 @@\n-  predicate(Matcher::vector_length_in_bytes(n) <= 16);\n-  match(Set dst (ReplicateB con));\n-  match(Set dst (ReplicateS con));\n-  match(Set dst (ReplicateI con));\n+  predicate(Matcher::vector_length_in_bytes(n) <= 16 &&\n+            Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate con));\n@@ -2870,4 +2809,25 @@\n-dnl\n-REPLICATE_IMM_SVE(B, immI8,        B)\n-REPLICATE_IMM_SVE(S, immI8_shift8, H)\n-REPLICATE_IMM_SVE(I, immI8_shift8, S)\n+\n+instruct replicateB_imm8_gt128b(vReg dst, immI8 con) %{\n+  predicate(Matcher::vector_length_in_bytes(n) > 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate con));\n+  format %{ \"replicateB_imm8_gt128b $dst, $con\\t# vector > 128 bits\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    __ sve_dup($dst$$FloatRegister, __ B, (int)($con$$constant));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct replicateI_imm8_gt128b(vReg dst, immI8_shift8 con) %{\n+  predicate(Matcher::vector_length_in_bytes(n) > 16 &&\n+            (Matcher::vector_element_basic_type(n) == T_SHORT ||\n+             Matcher::vector_element_basic_type(n) == T_INT));\n+  match(Set dst (Replicate con));\n+  format %{ \"replicateI_imm8_gt128b $dst, $con\\t# vector > 128 bits\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    __ sve_dup($dst$$FloatRegister, get_reg_variant(this), (int)($con$$constant));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -2877,1 +2837,1 @@\n-  match(Set dst (ReplicateL con));\n+  match(Set dst (Replicate con));\n@@ -2884,2 +2844,11 @@\n-dnl\n-REPLICATE_IMM_SVE(L, immL8_shift8, D)\n+\n+instruct replicateL_imm8_gt128b(vReg dst, immL8_shift8 con) %{\n+  predicate(Matcher::vector_length_in_bytes(n) > 16);\n+  match(Set dst (Replicate con));\n+  format %{ \"replicateL_imm8_gt128b $dst, $con\\t# vector > 128 bits\" %}\n+  ins_encode %{\n+    assert(UseSVE > 0, \"must be sve\");\n+    __ sve_dup($dst$$FloatRegister, __ D, (int)($con$$constant));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -3563,17 +3532,0 @@\n-\n-instruct vmaskcmp_zeroI_neon(vReg dst, vReg src, immI0 zero, immI_cmp_cond cond) %{\n-  predicate(UseSVE == 0);\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateB zero)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateS zero)) cond));\n-  match(Set dst (VectorMaskCmp (Binary src (ReplicateI zero)) cond));\n-  format %{ \"vmaskcmp_zeroI_neon $dst, $src, #0, $cond\" %}\n-  ins_encode %{\n-    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    __ neon_compare_zero($dst$$FloatRegister, bt, $src$$FloatRegister,\n-                         condition, \/* isQ *\/ length_in_bytes == 16);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-dnl\n@@ -3585,1 +3537,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (Replicate$1 zero)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate zero)) cond));\n@@ -3590,1 +3542,2 @@\n-    __ neon_compare_zero($dst$$FloatRegister, $2, $src$$FloatRegister,\n+    __ neon_compare_zero($dst$$FloatRegister, ifelse($1, I, Matcher::vector_element_basic_type(this), $2),\n+                         $src$$FloatRegister,\n@@ -3596,0 +3549,1 @@\n+VMASKCMP_ZERO_NEON(I)\n@@ -3619,1 +3573,1 @@\n-instruct vmask$4_imm$2_sve(pReg dst, vReg src, $3 imm, immI_$4_cond cond, rFlagsReg cr) %{\n+instruct vmask$3_imm$1_sve(pReg dst, vReg src, $2 imm, immI_$3_cond cond, rFlagsReg cr) %{\n@@ -3621,1 +3575,1 @@\n-  match(Set dst (VectorMaskCmp (Binary src (Replicate$2 imm)) cond));\n+  match(Set dst (VectorMaskCmp (Binary src (Replicate imm)) cond));\n@@ -3623,1 +3577,1 @@\n-  format %{ \"vmask$4_imm$2_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n+  format %{ \"vmask$3_imm$1_sve $dst, $src, $imm, $cond\\t# KILL cr\" %}\n@@ -3628,1 +3582,2 @@\n-    __ sve_cmp(condition, $dst$$PRegister, __ $1, ptrue, $src$$FloatRegister, (int)$imm$$constant);\n+    __ sve_cmp(condition, $dst$$PRegister, get_reg_variant(in(operand_index($src))),\n+               ptrue, $src$$FloatRegister, (int)$imm$$constant);\n@@ -3632,8 +3587,4 @@\n-VMASKCMP_SVE_IMM(B, B, immI5, cmp)\n-VMASKCMP_SVE_IMM(B, B, immIU7, cmpU)\n-VMASKCMP_SVE_IMM(H, S, immI5, cmp)\n-VMASKCMP_SVE_IMM(H, S, immIU7, cmpU)\n-VMASKCMP_SVE_IMM(S, I, immI5, cmp)\n-VMASKCMP_SVE_IMM(S, I, immIU7, cmpU)\n-VMASKCMP_SVE_IMM(D, L, immL5, cmp)\n-VMASKCMP_SVE_IMM(D, L, immLU7, cmpU)\n+VMASKCMP_SVE_IMM(I, immI5,   cmp)\n+VMASKCMP_SVE_IMM(I, immIU7,  cmpU)\n+VMASKCMP_SVE_IMM(L, immL5,   cmp)\n+VMASKCMP_SVE_IMM(L, immLU7,  cmpU)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":115,"deletions":164,"binary":false,"changes":279,"status":"modified"},{"patch":"@@ -9465,2 +9465,3 @@\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9487,2 +9488,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9502,2 +9504,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9517,2 +9520,3 @@\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9532,2 +9536,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9547,2 +9552,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateB src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -9562,2 +9568,3 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9582,2 +9589,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9597,2 +9605,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9613,2 +9622,3 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9627,2 +9637,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9642,2 +9653,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateS src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -9657,2 +9669,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9670,2 +9683,3 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9688,2 +9702,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9703,2 +9718,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9719,2 +9735,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9733,2 +9750,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9748,2 +9766,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateI src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -9763,2 +9782,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateL src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -9781,2 +9801,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9794,2 +9815,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9808,2 +9830,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd());\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length_in_bytes() == 8 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9823,2 +9846,3 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9843,2 +9867,3 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd());\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length_in_bytes() == 16 && VM_Version::has_simd() &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9858,2 +9883,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateF src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -9872,2 +9898,3 @@\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateD src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate src));\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":81,"deletions":54,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -13447,2 +13447,3 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13458,2 +13459,3 @@\n-  match(Set dst (ReplicateB zero));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13469,2 +13471,3 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13480,2 +13483,3 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13496,2 +13500,3 @@\n-  match(Set dst (ReplicateB zero));\n-  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13508,2 +13513,3 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 16 &&\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -13520,2 +13526,3 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13530,2 +13537,3 @@\n-  match(Set dst (ReplicateS zero));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13541,2 +13549,3 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13552,2 +13561,3 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13568,2 +13578,3 @@\n-  match(Set dst (ReplicateS zero));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13580,2 +13591,3 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 &&\n+            Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -13592,2 +13604,3 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13602,2 +13615,3 @@\n-  match(Set dst (ReplicateI zero));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13613,2 +13627,3 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13624,2 +13639,3 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13640,2 +13656,3 @@\n-  match(Set dst (ReplicateI zero));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13652,2 +13669,3 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_INT);\n@@ -13665,2 +13683,3 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -13680,2 +13699,3 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -13690,2 +13710,3 @@\n-  match(Set dst (ReplicateF zero));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -14201,2 +14222,3 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -14214,2 +14236,3 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -14223,2 +14246,3 @@\n-  match(Set dst (ReplicateF zero));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 4 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -14234,2 +14258,3 @@\n-  match(Set dst (ReplicateD src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_DOUBLE);\n@@ -14246,2 +14271,3 @@\n-  match(Set dst (ReplicateD zero));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_DOUBLE);\n@@ -14292,1 +14318,2 @@\n-  match(Set dst (ReplicateL src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -14303,2 +14330,3 @@\n-  match(Set dst (ReplicateL zero));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate zero));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n@@ -14315,2 +14343,3 @@\n-  match(Set dst (ReplicateL src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":86,"deletions":57,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -1691,3 +1691,2 @@\n-  match(Set dst (ReplicateB src));\n-  match(Set dst (ReplicateS src));\n-  match(Set dst (ReplicateI src));\n+  predicate(Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate src));\n@@ -1705,1 +1704,2 @@\n-  match(Set dst (ReplicateL src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -1716,3 +1716,2 @@\n-  match(Set dst (ReplicateB con));\n-  match(Set dst (ReplicateS con));\n-  match(Set dst (ReplicateI con));\n+  predicate(Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate con));\n@@ -1730,1 +1729,2 @@\n-  match(Set dst (ReplicateL con));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate con));\n@@ -1741,1 +1741,2 @@\n-  match(Set dst (ReplicateF src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -1752,1 +1753,2 @@\n-  match(Set dst (ReplicateD src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate src));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -10434,1 +10434,1 @@\n-  match(Set dst (ReplicateB src));\n+  match(Set dst (Replicate src));\n@@ -10436,1 +10436,1 @@\n-  predicate((n->as_Vector()->length() == 8));\n+  predicate(n->as_Vector()->length() == 8 && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -10451,2 +10451,2 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -10469,2 +10469,2 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -10479,2 +10479,2 @@\n-  match(Set dst (ReplicateB src));\n-  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 8 && Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -10490,1 +10490,1 @@\n-  match(Set dst (ReplicateS src));\n+  match(Set dst (Replicate src));\n@@ -10492,1 +10492,1 @@\n-  predicate((n->as_Vector()->length() == 4));\n+  predicate((n->as_Vector()->length() == 4) && Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -10506,2 +10506,2 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 && Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -10524,2 +10524,2 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 && Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -10534,2 +10534,2 @@\n-  match(Set dst (ReplicateS src));\n-  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 4 && Matcher::vector_element_basic_type(n) == T_SHORT);\n@@ -10545,1 +10545,1 @@\n-  match(Set dst (ReplicateI src));\n+  match(Set dst (Replicate src));\n@@ -10547,1 +10547,1 @@\n-  predicate((n->as_Vector()->length() == 2));\n+  predicate((n->as_Vector()->length() == 2) && Matcher::vector_element_basic_type(n) == T_INT);\n@@ -10560,2 +10560,2 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 && Matcher::vector_element_basic_type(n) == T_INT);\n@@ -10576,2 +10576,2 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 && Matcher::vector_element_basic_type(n) == T_INT);\n@@ -10586,2 +10586,2 @@\n-  match(Set dst (ReplicateI src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 && Matcher::vector_element_basic_type(n) == T_INT);\n@@ -10597,1 +10597,1 @@\n-  match(Set dst (ReplicateF src));\n+  match(Set dst (Replicate src));\n@@ -10599,1 +10599,2 @@\n-  predicate(!VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2);\n+  predicate(!VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -10612,1 +10613,1 @@\n-  match(Set dst (ReplicateF src));\n+  match(Set dst (Replicate src));\n@@ -10614,1 +10615,2 @@\n-  predicate(VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2);\n+  predicate(VM_Version::has_FPSupportEnhancements() && n->as_Vector()->length() == 2 &&\n+            Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -10629,2 +10631,2 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 && Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -10648,2 +10650,2 @@\n-  match(Set dst (ReplicateF src));\n-  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (Replicate src));\n+  predicate(n->as_Vector()->length() == 2 && Matcher::vector_element_basic_type(n) == T_FLOAT);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -4149,2 +4149,2 @@\n-  predicate(UseAVX >= 2);\n-  match(Set dst (ReplicateB src));\n+  predicate(UseAVX >= 2 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -4167,2 +4167,2 @@\n-  predicate(UseAVX < 2);\n-  match(Set dst (ReplicateB src));\n+  predicate(UseAVX < 2 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate src));\n@@ -4184,2 +4184,2 @@\n-  predicate(UseAVX >= 2);\n-  match(Set dst (ReplicateB (LoadB mem)));\n+  predicate(UseAVX >= 2 && Matcher::vector_element_basic_type(n) == T_BYTE);\n+  match(Set dst (Replicate (LoadB mem)));\n@@ -4197,2 +4197,2 @@\n-  predicate(UseAVX >= 2);\n-  match(Set dst (ReplicateS src));\n+  predicate(UseAVX >= 2 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -4215,2 +4215,2 @@\n-  predicate(UseAVX < 2);\n-  match(Set dst (ReplicateS src));\n+  predicate(UseAVX < 2 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate src));\n@@ -4232,2 +4232,2 @@\n-  predicate(UseAVX >= 2);\n-  match(Set dst (ReplicateS (LoadS mem)));\n+  predicate(UseAVX >= 2 && Matcher::vector_element_basic_type(n) == T_SHORT);\n+  match(Set dst (Replicate (LoadS mem)));\n@@ -4245,1 +4245,2 @@\n-  match(Set dst (ReplicateI src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate src));\n@@ -4264,1 +4265,2 @@\n-  match(Set dst (ReplicateI (LoadI mem)));\n+  predicate(Matcher::vector_element_basic_type(n) == T_INT);\n+  match(Set dst (Replicate (LoadI mem)));\n@@ -4281,3 +4283,2 @@\n-  match(Set dst (ReplicateB con));\n-  match(Set dst (ReplicateS con));\n-  match(Set dst (ReplicateI con));\n+  predicate(Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate con));\n@@ -4299,3 +4300,2 @@\n-  match(Set dst (ReplicateB zero));\n-  match(Set dst (ReplicateS zero));\n-  match(Set dst (ReplicateI zero));\n+  predicate(Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate zero));\n@@ -4315,4 +4315,2 @@\n-  predicate(UseSSE >= 2);\n-  match(Set dst (ReplicateB con));\n-  match(Set dst (ReplicateS con));\n-  match(Set dst (ReplicateI con));\n+  predicate(UseSSE >= 2 && Matcher::is_non_long_integral_vector(n));\n+  match(Set dst (Replicate con));\n@@ -4332,1 +4330,2 @@\n-  match(Set dst (ReplicateL src));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -4352,2 +4351,2 @@\n-  predicate(Matcher::vector_length(n) <= 4);\n-  match(Set dst (ReplicateL src));\n+  predicate(Matcher::vector_length(n) <= 4 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -4381,2 +4380,2 @@\n-  predicate(Matcher::vector_length(n) == 8);\n-  match(Set dst (ReplicateL src));\n+  predicate(Matcher::vector_length(n) == 8 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate src));\n@@ -4406,1 +4405,2 @@\n-  match(Set dst (ReplicateL (LoadL mem)));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate (LoadL mem)));\n@@ -4424,1 +4424,2 @@\n-  match(Set dst (ReplicateL con));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate con));\n@@ -4435,1 +4436,2 @@\n-  match(Set dst (ReplicateL zero));\n+  predicate(Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate zero));\n@@ -4449,2 +4451,2 @@\n-  predicate(UseSSE >= 2);\n-  match(Set dst (ReplicateL con));\n+  predicate(UseSSE >= 2 && Matcher::vector_element_basic_type(n) == T_LONG);\n+  match(Set dst (Replicate con));\n@@ -4462,2 +4464,2 @@\n-  predicate(UseAVX > 0);\n-  match(Set dst (ReplicateF src));\n+  predicate(UseAVX > 0 && Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -4482,2 +4484,2 @@\n-  predicate(UseAVX == 0);\n-  match(Set dst (ReplicateF src));\n+  predicate(UseAVX == 0 && Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate src));\n@@ -4492,2 +4494,2 @@\n-  predicate(UseAVX > 0);\n-  match(Set dst (ReplicateF (LoadF mem)));\n+  predicate(UseAVX > 0 && Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate (LoadF mem)));\n@@ -4504,1 +4506,2 @@\n-  match(Set dst (ReplicateF con));\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate con));\n@@ -4516,1 +4519,2 @@\n-  match(Set dst (ReplicateF zero));\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n+  match(Set dst (Replicate zero));\n@@ -4533,2 +4537,2 @@\n-  predicate(UseSSE >= 3);\n-  match(Set dst (ReplicateD src));\n+  predicate(UseSSE >= 3 && Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate src));\n@@ -4553,2 +4557,2 @@\n-  predicate(UseSSE < 3);\n-  match(Set dst (ReplicateD src));\n+  predicate(UseSSE < 3 && Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate src));\n@@ -4563,2 +4567,2 @@\n-  predicate(UseSSE >= 3);\n-  match(Set dst (ReplicateD (LoadD mem)));\n+  predicate(UseSSE >= 3 && Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate (LoadD mem)));\n@@ -4579,1 +4583,2 @@\n-  match(Set dst (ReplicateD con));\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate con));\n@@ -4590,1 +4595,2 @@\n-  match(Set dst (ReplicateD zero));\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n+  match(Set dst (Replicate zero));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":56,"deletions":50,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -4224,1 +4224,1 @@\n-    \"ReplicateB\",\"ReplicateS\",\"ReplicateI\",\"ReplicateL\",\"ReplicateF\",\"ReplicateD\",\"ReverseV\",\"ReverseBytesV\",\n+    \"Replicate\",\"ReverseV\",\"ReverseBytesV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -468,6 +468,1 @@\n-macro(ReplicateB)\n-macro(ReplicateS)\n-macro(ReplicateI)\n-macro(ReplicateL)\n-macro(ReplicateF)\n-macro(ReplicateD)\n+macro(Replicate)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2795,0 +2795,6 @@\n+bool Matcher::is_non_long_integral_vector(const Node* n) {\n+  BasicType bt = vector_element_basic_type(n);\n+  assert(bt != T_CHAR, \"char is not allowed in vector\");\n+  return is_subword_type(bt) || bt == T_INT;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -379,0 +379,3 @@\n+  \/\/ Vector element basic type is non double word integral type.\n+  static bool is_non_long_integral_vector(const Node* n);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,2 +77,1 @@\n-       (has_scalar_args &&\n-         !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+       (has_scalar_args && !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed))) {\n@@ -628,1 +627,1 @@\n-      !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed)) {\n+      !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed)) {\n@@ -872,1 +871,1 @@\n-  int opc = bcast_mode == VectorSupport::MODE_BITS_COERCED_LONG_TO_MASK ? Op_VectorLongToMask : VectorNode::replicate_opcode(elem_bt);\n+  int opc = bcast_mode == VectorSupport::MODE_BITS_COERCED_LONG_TO_MASK ? Op_VectorLongToMask : Op_Replicate;\n@@ -2103,1 +2102,1 @@\n-        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+        !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed))) {\n@@ -3068,1 +3067,1 @@\n-        !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_Replicate, num_elem, elem_bt, VecMaskNotUsed) ||\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -390,22 +390,0 @@\n-int VectorNode::replicate_opcode(BasicType bt) {\n-  switch(bt) {\n-    case T_BOOLEAN:\n-    case T_BYTE:\n-      return Op_ReplicateB;\n-    case T_SHORT:\n-    case T_CHAR:\n-      return Op_ReplicateS;\n-    case T_INT:\n-      return Op_ReplicateI;\n-    case T_LONG:\n-      return Op_ReplicateL;\n-    case T_FLOAT:\n-      return Op_ReplicateF;\n-    case T_DOUBLE:\n-      return Op_ReplicateD;\n-    default:\n-      assert(false, \"wrong type: %s\", type2name(bt));\n-      return 0;\n-  }\n-}\n-\n@@ -509,1 +487,1 @@\n-        Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vlen, bt)) {\n+        Matcher::match_rule_supported_vector(Op_Replicate, vlen, bt)) {\n@@ -522,1 +500,1 @@\n-        Matcher::match_rule_supported_vector(VectorNode::replicate_opcode(bt), vlen, bt)) {\n+        Matcher::match_rule_supported_vector(Op_Replicate, vlen, bt)) {\n@@ -632,11 +610,1 @@\n-  switch (n->Opcode()) {\n-  case Op_ReplicateB:\n-  case Op_ReplicateS:\n-  case Op_ReplicateI:\n-  case Op_ReplicateL:\n-  case Op_ReplicateF:\n-  case Op_ReplicateD:\n-    return true;\n-  default:\n-    return false;\n-  }\n+  return n->Opcode() == Op_Replicate;\n@@ -866,19 +834,1 @@\n-  switch (bt) {\n-  case T_BOOLEAN:\n-  case T_BYTE:\n-    return new ReplicateBNode(s, vt);\n-  case T_CHAR:\n-  case T_SHORT:\n-    return new ReplicateSNode(s, vt);\n-  case T_INT:\n-    return new ReplicateINode(s, vt);\n-  case T_LONG:\n-    return new ReplicateLNode(s, vt);\n-  case T_FLOAT:\n-    return new ReplicateFNode(s, vt);\n-  case T_DOUBLE:\n-    return new ReplicateDNode(s, vt);\n-  default:\n-    fatal(\"Type '%s' is not supported for vectors\", type2name(bt));\n-    return nullptr;\n-  }\n+  return new ReplicateNode(s, vt);\n@@ -969,4 +919,3 @@\n-  case Op_ReplicateB:\n-  case Op_ReplicateS:\n-  case Op_ReplicateI:\n-  case Op_ReplicateL:\n+  case Op_Replicate:\n+    return is_integral_type(n->bottom_type()->is_vect()->element_basic_type()) &&\n+           is_con(n->in(1), -1);\n@@ -983,4 +932,3 @@\n-  case Op_ReplicateB:\n-  case Op_ReplicateS:\n-  case Op_ReplicateI:\n-  case Op_ReplicateL:\n+  case Op_Replicate:\n+    return is_integral_type(n->bottom_type()->is_vect()->element_basic_type()) &&\n+           is_con(n->in(1), 0);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":10,"deletions":62,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-  static int replicate_opcode(BasicType bt);\n@@ -1126,3 +1125,1 @@\n-\/\/------------------------------ReplicateBNode---------------------------------\n-\/\/ Replicate byte scalar to be vector\n-class ReplicateBNode : public VectorNode {\n+class ReplicateNode : public VectorNode {\n@@ -1130,41 +1127,4 @@\n-  ReplicateBNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------ReplicateSNode---------------------------------\n-\/\/ Replicate short scalar to be vector\n-class ReplicateSNode : public VectorNode {\n- public:\n-  ReplicateSNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------ReplicateINode---------------------------------\n-\/\/ Replicate int scalar to be vector\n-class ReplicateINode : public VectorNode {\n- public:\n-  ReplicateINode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------ReplicateLNode---------------------------------\n-\/\/ Replicate long scalar to be vector\n-class ReplicateLNode : public VectorNode {\n- public:\n-  ReplicateLNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------ReplicateFNode---------------------------------\n-\/\/ Replicate float scalar to be vector\n-class ReplicateFNode : public VectorNode {\n- public:\n-  ReplicateFNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n-  virtual int Opcode() const;\n-};\n-\n-\/\/------------------------------ReplicateDNode---------------------------------\n-\/\/ Replicate double scalar to be vector\n-class ReplicateDNode : public VectorNode {\n- public:\n-  ReplicateDNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {}\n+  ReplicateNode(Node* in1, const TypeVect* vt) : VectorNode(in1, vt) {\n+    assert(vt->element_basic_type() != T_BOOLEAN, \"not support\");\n+    assert(vt->element_basic_type() != T_CHAR, \"not support\");\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":5,"deletions":45,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1737,6 +1737,1 @@\n-  declare_c2_type(ReplicateBNode, VectorNode)                             \\\n-  declare_c2_type(ReplicateSNode, VectorNode)                             \\\n-  declare_c2_type(ReplicateINode, VectorNode)                             \\\n-  declare_c2_type(ReplicateLNode, VectorNode)                             \\\n-  declare_c2_type(ReplicateFNode, VectorNode)                             \\\n-  declare_c2_type(ReplicateDNode, VectorNode)                             \\\n+  declare_c2_type(ReplicateNode, VectorNode)                              \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -896,1 +896,1 @@\n-    public static final String REPLICATE_B = PREFIX + \"REPLICATE_B\" + POSTFIX;\n+    public static final String REPLICATE = PREFIX + \"REPLICATE\" + POSTFIX;\n@@ -898,44 +898,4 @@\n-        String regex = START + \"ReplicateB\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_B, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n-    }\n-\n-    public static final String REPLICATE_S = PREFIX + \"REPLICATE_S\" + POSTFIX;\n-    static {\n-        String regex = START + \"ReplicateS\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_S, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n-    }\n-\n-    public static final String REPLICATE_I = PREFIX + \"REPLICATE_I\" + POSTFIX;\n-    static {\n-        String regex = START + \"ReplicateI\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_I, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n-    }\n-\n-    public static final String REPLICATE_L = PREFIX + \"REPLICATE_L\" + POSTFIX;\n-    static {\n-        String regex = START + \"ReplicateL\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_L, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n-    }\n-\n-    public static final String REPLICATE_F = PREFIX + \"REPLICATE_F\" + POSTFIX;\n-    static {\n-        String regex = START + \"ReplicateF\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_F, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n-    }\n-\n-    public static final String REPLICATE_D = PREFIX + \"REPLICATE_D\" + POSTFIX;\n-    static {\n-        String regex = START + \"ReplicateD\" + MID + END;\n-        IR_NODE_MAPPINGS.put(REPLICATE_D, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n-                                                                    CompilePhase.AFTER_CLOOPS,\n-                                                                    CompilePhase.BEFORE_MATCHING));\n+        String regex = START + \"Replicate\" + MID + END;\n+        IR_NODE_MAPPINGS.put(REPLICATE, new SinglePhaseRangeEntry(CompilePhase.PRINT_IDEAL, regex,\n+                                                                  CompilePhase.AFTER_CLOOPS,\n+                                                                  CompilePhase.BEFORE_MATCHING));\n@@ -1436,20 +1396,0 @@\n-    public static final String VMASK_CMP_IMM_B_SVE = PREFIX + \"VMASK_CMP_IMM_B_SVE\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(VMASK_CMP_IMM_B_SVE, \"vmaskcmp_immB_sve\");\n-    }\n-\n-    public static final String VMASK_CMPU_IMM_B_SVE = PREFIX + \"VMASK_CMPU_IMM_B_SVE\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(VMASK_CMPU_IMM_B_SVE, \"vmaskcmpU_immB_sve\");\n-    }\n-\n-    public static final String VMASK_CMP_IMM_S_SVE = PREFIX + \"VMASK_CMP_IMM_S_SVE\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(VMASK_CMP_IMM_S_SVE, \"vmaskcmp_immS_sve\");\n-    }\n-\n-    public static final String VMASK_CMPU_IMM_S_SVE = PREFIX + \"VMASK_CMPU_IMM_S_SVE\" + POSTFIX;\n-    static {\n-        machOnlyNameRegex(VMASK_CMPU_IMM_S_SVE, \"vmaskcmpU_immS_sve\");\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":5,"deletions":65,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-    @IR(counts = { IRNode.VMASK_CMP_IMM_B_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMP_IMM_I_SVE, \">= 1\" })\n@@ -143,1 +143,1 @@\n-    @IR(counts = { IRNode.VMASK_CMPU_IMM_B_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMPU_IMM_I_SVE, \">= 1\" })\n@@ -156,1 +156,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMP_IMM_B_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMP_IMM_I_SVE })\n@@ -163,1 +163,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMPU_IMM_B_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMPU_IMM_I_SVE })\n@@ -170,1 +170,1 @@\n-    @IR(counts = { IRNode.VMASK_CMP_IMM_S_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMP_IMM_I_SVE, \">= 1\" })\n@@ -183,1 +183,1 @@\n-    @IR(counts = { IRNode.VMASK_CMPU_IMM_S_SVE, \">= 1\" })\n+    @IR(counts = { IRNode.VMASK_CMPU_IMM_I_SVE, \">= 1\" })\n@@ -196,1 +196,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMP_IMM_S_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMP_IMM_I_SVE })\n@@ -203,1 +203,1 @@\n-    @IR(failOn = { IRNode.VMASK_CMPU_IMM_S_SVE })\n+    @IR(failOn = { IRNode.VMASK_CMPU_IMM_I_SVE })\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCompareWithImmTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,1 +247,1 @@\n-        out.shouldContain(\"ReplicateI\");\n+        out.shouldContain(\"Replicate\");\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestBufferVectorization.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.REPLICATE_I, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n+    @IR(counts = {IRNode.LOAD_VECTOR, \"> 0\", IRNode.REPLICATE, \"> 0\", IRNode.ADD_VI, \"> 0\", IRNode.MUL_VI, \"> 0\", IRNode.STORE_VECTOR, \"> 0\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestOptionVectorizeIR.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    private boolean booleanInv;\n@@ -64,0 +65,1 @@\n+        booleanInv = ran.nextBoolean();\n@@ -69,1 +71,12 @@\n-        counts = {IRNode.REPLICATE_B, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n+    public boolean[] fillBooleanArray() {\n+        boolean[] res = new boolean[SIZE];\n+        for (int i = 0; i < SIZE; i++) {\n+            res[i] = true;\n+        }\n+        return res;\n+    }\n+\n+    @Test\n+    @IR(applyIfCPUFeatureOr = {\"asimd\", \"true\", \"sse2\", \"true\"},\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -80,1 +93,1 @@\n-        counts = {IRNode.REPLICATE_S, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -91,1 +104,1 @@\n-        counts = {IRNode.REPLICATE_S, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -102,1 +115,1 @@\n-        counts = {IRNode.REPLICATE_I, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -113,1 +126,1 @@\n-        counts = {IRNode.REPLICATE_L, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -124,1 +137,1 @@\n-        counts = {IRNode.REPLICATE_F, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -135,1 +148,1 @@\n-        counts = {IRNode.REPLICATE_D, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -147,1 +160,1 @@\n-        counts = {IRNode.REPLICATE_L, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -158,1 +171,1 @@\n-        counts = {IRNode.REPLICATE_L, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -169,1 +182,1 @@\n-        counts = {IRNode.REPLICATE_L, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n@@ -180,1 +193,1 @@\n-        counts = {IRNode.REPLICATE_I, \">0\"})\n+        counts = {IRNode.REPLICATE, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/ArrayInvariantFillTest.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"}]}