{"files":[{"patch":"@@ -243,1 +243,1 @@\n-      # 'adhoc.<username>.<base dir name>[.<git branch>]'\n+      # 'adhoc.<username>.<base dir name>'\n@@ -246,9 +246,1 @@\n-      if test x$GIT != x; then\n-        git_output=`cd $TOPDIR && $GIT rev-parse --abbrev-ref HEAD 2>\/dev\/null`\n-        if test x$git_output != xmaster; then\n-          git_branch=\".$git_output\"\n-        else\n-          git_branch=\n-        fi\n-      fi\n-      VERSION_OPT=\"adhoc.$USERNAME.$basedirname$git_branch\"\n+      VERSION_OPT=\"adhoc.$USERNAME.$basedirname\"\n@@ -456,2 +448,4 @@\n-  if test \"x$VERSION_BUILD\" != x || ( test \"x$VERSION_OPT\" != x && test \"x$VERSION_PRE\" = x ); then\n-    # As per JEP 223, if build is set, or if opt is set but not pre, we need a + separator\n+  if test \"x$VERSION_BUILD\" != x || \\\n+      ( test \"x$VERSION_OPT\" != x && test \"x$VERSION_PRE\" = x ); then\n+    # As per JEP 223, if build is set, or if opt is set but not pre,\n+    # we need a + separator\n","filename":"make\/autoconf\/jdk-version.m4","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  #define VERSION_BUILD 0\n+  #error VERSION_BUILD must be defined\n@@ -79,0 +79,3 @@\n+#define IS_EMPTY_INNER(ARG)  ARG ## 1\n+#define IS_EMPTY(ARG)        IS_EMPTY_INNER(ARG)\n+\n@@ -85,0 +88,3 @@\n+#if (IS_EMPTY(VERSION_BUILD) == 1)\n+int Abstract_VM_Version::_vm_build_number = 0;\n+#else\n@@ -86,0 +92,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}