{"files":[{"patch":"@@ -819,3 +819,3 @@\n-             * performing copyArea, thats why we need to query encoder with\n-             * appropriate state from EncoderManager and not use\n-             * direct MTLBlitCommandEncoder for texture copy.\n+             * performing copyArea, thats why we use drawTex2Tex and\n+             * get encoder with appropriate state from EncoderManager\n+             * and not directly use MTLBlitCommandEncoder for texture copy.\n@@ -824,32 +824,10 @@\n-            id<MTLRenderCommandEncoder> interEncoder =\n-                [mtlc.encoderManager getTextureEncoder:interTexture\n-                                           isSrcOpaque:dstOps->isOpaque\n-                                           isDstOpaque:dstOps->isOpaque\n-            ];\n-\n-            fillTxQuad(quadTxVerticesBuffer, 0, 0,\n-                texWidth, texHeight, texWidth, texHeight, 0,\n-                0, texWidth, texHeight, texWidth, texHeight);\n-\n-            [interEncoder setVertexBytes:quadTxVerticesBuffer\n-                             length:sizeof(quadTxVerticesBuffer)\n-                            atIndex:MeshVertexBuffer];\n-            [interEncoder setFragmentTexture:dstOps->pTexture atIndex: 0];\n-            [interEncoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0\n-                                                             vertexCount:6];\n-\n-            id<MTLRenderCommandEncoder> finalEncoder =\n-                [mtlc.encoderManager getTextureEncoder:dstOps->pTexture\n-                                           isSrcOpaque:dstOps->isOpaque\n-                                           isDstOpaque:dstOps->isOpaque\n-            ];\n-\n-            fillTxQuad(quadTxVerticesBuffer, srcBounds.x1, srcBounds.y1,\n-                srcBounds.x2, srcBounds.y2, texWidth, texHeight, dstBounds.x1,\n-                dstBounds.y1, dstBounds.x2, dstBounds.y2, texWidth, texHeight);\n-            [finalEncoder setVertexBytes:quadTxVerticesBuffer\n-                             length:sizeof(quadTxVerticesBuffer)\n-                            atIndex:MeshVertexBuffer];\n-            [finalEncoder setFragmentTexture:interTexture atIndex: 0];\n-            [finalEncoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0\n-                                                             vertexCount:6];\n+            \/\/ copy content to intermediate texture\n+            drawTex2Tex(mtlc, dstOps->pTexture, interTexture, dstOps->isOpaque,\n+                        JNI_FALSE, INTERPOLATION_NEAREST_NEIGHBOR,\n+                        0, 0, texWidth, texHeight, 0, 0, texWidth, texHeight);\n+\n+            \/\/ copy content with appropriate bounds to destination texture\n+            drawTex2Tex(mtlc, interTexture, dstOps->pTexture, JNI_FALSE,\n+                        dstOps->isOpaque, INTERPOLATION_NEAREST_NEIGHBOR,\n+                        srcBounds.x1, srcBounds.y1, srcBounds.x2, srcBounds.y2,\n+                        dstBounds.x1, dstBounds.y1, dstBounds.x2, dstBounds.y2);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/metal\/MTLBlitLoops.m","additions":13,"deletions":35,"binary":false,"changes":48,"status":"modified"}]}