{"files":[{"patch":"@@ -1,393 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import sun.jvm.hotspot.debugger.*;\n-\n-class ProcAddress implements Address {\n-  protected ProcDebugger debugger;\n-  protected long addr;\n-\n-  ProcAddress(ProcDebugger debugger, long addr) {\n-    this.debugger = debugger;\n-    this.addr = addr;\n-  }\n-\n-  \/\/\n-  \/\/ Basic Java routines\n-  \/\/\n-\n-  public boolean equals(Object arg) {\n-    if (arg == null) {\n-      return false;\n-    }\n-\n-    if (!(arg instanceof ProcAddress)) {\n-      return false;\n-    }\n-\n-    return (addr == ((ProcAddress) arg).addr);\n-  }\n-\n-  public int hashCode() {\n-    return Long.hashCode(addr);\n-  }\n-\n-  public String toString() {\n-    return debugger.addressValueToString(addr);\n-  }\n-\n-  \/\/\n-  \/\/ C\/C++-related routines\n-  \/\/\n-\n-  public long getCIntegerAt(long offset, long numBytes, boolean isUnsigned) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readCInteger(addr + offset, numBytes, isUnsigned);\n-  }\n-\n-  public Address getAddressAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readAddress(addr + offset);\n-  }\n-\n-  public Address getCompOopAddressAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readCompOopAddress(addr + offset);\n-  }\n-\n-  public Address getCompKlassAddressAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readCompKlassAddress(addr + offset);\n-  }\n-\n-  \/\/\n-  \/\/ Java-related routines\n-  \/\/\n-\n-  public boolean getJBooleanAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJBoolean(addr + offset);\n-  }\n-\n-  public byte getJByteAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJByte(addr + offset);\n-  }\n-\n-  public char getJCharAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJChar(addr + offset);\n-  }\n-\n-  public double getJDoubleAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJDouble(addr + offset);\n-  }\n-\n-  public float getJFloatAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJFloat(addr + offset);\n-  }\n-\n-  public int getJIntAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJInt(addr + offset);\n-  }\n-\n-  public long getJLongAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJLong(addr + offset);\n-  }\n-\n-  public short getJShortAt(long offset) throws UnalignedAddressException, UnmappedAddressException {\n-    return debugger.readJShort(addr + offset);\n-  }\n-\n-  public OopHandle getOopHandleAt(long offset)\n-    throws UnalignedAddressException, UnmappedAddressException, NotInHeapException {\n-    return debugger.readOopHandle(addr + offset);\n-  }\n-  public OopHandle getCompOopHandleAt(long offset)\n-    throws UnalignedAddressException, UnmappedAddressException, NotInHeapException {\n-    return debugger.readCompOopHandle(addr + offset);\n-  }\n-\n-  \/\/ Mutators -- not implemented for now (FIXME)\n-  public void setCIntegerAt(long offset, long numBytes, long value) {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void setAddressAt(long offset, Address value) {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJBooleanAt      (long offset, boolean value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJByteAt         (long offset, byte value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJCharAt         (long offset, char value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJDoubleAt       (long offset, double value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJFloatAt        (long offset, float value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJIntAt          (long offset, int value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJLongAt         (long offset, long value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setJShortAt        (long offset, short value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-  public void       setOopHandleAt     (long offset, OopHandle value)\n-    throws UnmappedAddressException, UnalignedAddressException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-\n-  \/\/\n-  \/\/ Arithmetic operations -- necessary evil.\n-  \/\/\n-\n-  public Address    addOffsetTo       (long offset) throws UnsupportedOperationException {\n-    long value = addr + offset;\n-    if (value == 0) {\n-      return null;\n-    }\n-    return new ProcAddress(debugger, value);\n-  }\n-\n-  public OopHandle  addOffsetToAsOopHandle(long offset) throws UnsupportedOperationException {\n-    long value = addr + offset;\n-    if (value == 0) {\n-      return null;\n-    }\n-    return new ProcOopHandle(debugger, value);\n-  }\n-\n-  \/** (FIXME: any signed\/unsigned issues? Should this work for\n-      OopHandles?) *\/\n-  public long       minus(Address arg) {\n-    if (arg == null) {\n-      return addr;\n-    }\n-    return addr - ((ProcAddress) arg).addr;\n-  }\n-\n-  \/\/ Two's complement representation.\n-  \/\/ All negative numbers are larger than positive numbers.\n-  \/\/ Numbers with the same sign can be compared normally.\n-  \/\/ Test harness is below in main().\n-\n-  public boolean    lessThan          (Address arg) {\n-    if (arg == null) {\n-      return false;\n-    }\n-    ProcAddress dbxArg = (ProcAddress) arg;\n-    if ((addr >= 0) && (dbxArg.addr < 0)) {\n-      return true;\n-    }\n-    if ((addr < 0) && (dbxArg.addr >= 0)) {\n-      return false;\n-    }\n-    return (addr < dbxArg.addr);\n-  }\n-\n-  public boolean    lessThanOrEqual   (Address arg) {\n-    if (arg == null) {\n-      return false;\n-    }\n-    ProcAddress dbxArg = (ProcAddress) arg;\n-    if ((addr >= 0) && (dbxArg.addr < 0)) {\n-      return true;\n-    }\n-    if ((addr < 0) && (dbxArg.addr >= 0)) {\n-      return false;\n-    }\n-    return (addr <= dbxArg.addr);\n-  }\n-\n-  public boolean    greaterThan       (Address arg) {\n-    if (arg == null) {\n-      return true;\n-    }\n-    ProcAddress dbxArg = (ProcAddress) arg;\n-    if ((addr >= 0) && (dbxArg.addr < 0)) {\n-      return false;\n-    }\n-    if ((addr < 0) && (dbxArg.addr >= 0)) {\n-      return true;\n-    }\n-    return (addr > dbxArg.addr);\n-  }\n-\n-  public boolean    greaterThanOrEqual(Address arg) {\n-    if (arg == null) {\n-      return true;\n-    }\n-    ProcAddress dbxArg = (ProcAddress) arg;\n-    if ((addr >= 0) && (dbxArg.addr < 0)) {\n-      return false;\n-    }\n-    if ((addr < 0) && (dbxArg.addr >= 0)) {\n-      return true;\n-    }\n-    return (addr >= dbxArg.addr);\n-  }\n-\n-  public Address    andWithMask(long mask) throws UnsupportedOperationException {\n-    long value = addr & mask;\n-    if (value == 0) {\n-      return null;\n-    }\n-    return new ProcAddress(debugger, value);\n-  }\n-\n-  public Address    orWithMask(long mask) throws UnsupportedOperationException {\n-    long value = addr | mask;\n-    if (value == 0) {\n-      return null;\n-    }\n-    return new ProcAddress(debugger, value);\n-  }\n-\n-  public Address    xorWithMask(long mask) throws UnsupportedOperationException {\n-    long value = addr ^ mask;\n-    if (value == 0) {\n-      return null;\n-    }\n-    return new ProcAddress(debugger, value);\n-  }\n-\n-  public long asLongValue() { return addr; }\n-  \/\/--------------------------------------------------------------------------------\n-  \/\/ Internals only below this point\n-  \/\/\n-\n-  private static void check(boolean arg, String failMessage) {\n-    if (!arg) {\n-      System.err.println(failMessage + \": FAILED\");\n-      System.exit(1);\n-    }\n-  }\n-\n-  \/\/ Test harness\n-  public static void main(String[] args) {\n-    \/\/ p\/n indicates whether the interior address is really positive\n-    \/\/ or negative. In unsigned terms, p1 < p2 < n1 < n2.\n-\n-    ProcAddress p1 = new ProcAddress(null, 0x7FFFFFFFFFFFFFF0L);\n-    ProcAddress p2 = (ProcAddress) p1.addOffsetTo(10);\n-    ProcAddress n1 = (ProcAddress) p2.addOffsetTo(10);\n-    ProcAddress n2 = (ProcAddress) n1.addOffsetTo(10);\n-\n-    \/\/ lessThan positive tests\n-    check(p1.lessThan(p2), \"lessThan 1\");\n-    check(p1.lessThan(n1), \"lessThan 2\");\n-    check(p1.lessThan(n2), \"lessThan 3\");\n-    check(p2.lessThan(n1), \"lessThan 4\");\n-    check(p2.lessThan(n2), \"lessThan 5\");\n-    check(n1.lessThan(n2), \"lessThan 6\");\n-\n-    \/\/ lessThan negative tests\n-    check(!p1.lessThan(p1), \"lessThan 7\");\n-    check(!p2.lessThan(p2), \"lessThan 8\");\n-    check(!n1.lessThan(n1), \"lessThan 9\");\n-    check(!n2.lessThan(n2), \"lessThan 10\");\n-\n-    check(!p2.lessThan(p1), \"lessThan 11\");\n-    check(!n1.lessThan(p1), \"lessThan 12\");\n-    check(!n2.lessThan(p1), \"lessThan 13\");\n-    check(!n1.lessThan(p2), \"lessThan 14\");\n-    check(!n2.lessThan(p2), \"lessThan 15\");\n-    check(!n2.lessThan(n1), \"lessThan 16\");\n-\n-    \/\/ lessThanOrEqual positive tests\n-    check(p1.lessThanOrEqual(p1), \"lessThanOrEqual 1\");\n-    check(p2.lessThanOrEqual(p2), \"lessThanOrEqual 2\");\n-    check(n1.lessThanOrEqual(n1), \"lessThanOrEqual 3\");\n-    check(n2.lessThanOrEqual(n2), \"lessThanOrEqual 4\");\n-\n-    check(p1.lessThanOrEqual(p2), \"lessThanOrEqual 5\");\n-    check(p1.lessThanOrEqual(n1), \"lessThanOrEqual 6\");\n-    check(p1.lessThanOrEqual(n2), \"lessThanOrEqual 7\");\n-    check(p2.lessThanOrEqual(n1), \"lessThanOrEqual 8\");\n-    check(p2.lessThanOrEqual(n2), \"lessThanOrEqual 9\");\n-    check(n1.lessThanOrEqual(n2), \"lessThanOrEqual 10\");\n-\n-    \/\/ lessThanOrEqual negative tests\n-    check(!p2.lessThanOrEqual(p1), \"lessThanOrEqual 11\");\n-    check(!n1.lessThanOrEqual(p1), \"lessThanOrEqual 12\");\n-    check(!n2.lessThanOrEqual(p1), \"lessThanOrEqual 13\");\n-    check(!n1.lessThanOrEqual(p2), \"lessThanOrEqual 14\");\n-    check(!n2.lessThanOrEqual(p2), \"lessThanOrEqual 15\");\n-    check(!n2.lessThanOrEqual(n1), \"lessThanOrEqual 16\");\n-\n-    \/\/ greaterThan positive tests\n-    check(n2.greaterThan(p1), \"greaterThan 1\");\n-    check(n2.greaterThan(p2), \"greaterThan 2\");\n-    check(n2.greaterThan(n1), \"greaterThan 3\");\n-    check(n1.greaterThan(p1), \"greaterThan 4\");\n-    check(n1.greaterThan(p2), \"greaterThan 5\");\n-    check(p2.greaterThan(p1), \"greaterThan 6\");\n-\n-    \/\/ greaterThan negative tests\n-    check(!p1.greaterThan(p1), \"greaterThan 7\");\n-    check(!p2.greaterThan(p2), \"greaterThan 8\");\n-    check(!n1.greaterThan(n1), \"greaterThan 9\");\n-    check(!n2.greaterThan(n2), \"greaterThan 10\");\n-\n-    check(!p1.greaterThan(n2), \"greaterThan 11\");\n-    check(!p2.greaterThan(n2), \"greaterThan 12\");\n-    check(!n1.greaterThan(n2), \"greaterThan 13\");\n-    check(!p1.greaterThan(n1), \"greaterThan 14\");\n-    check(!p2.greaterThan(n1), \"greaterThan 15\");\n-    check(!p1.greaterThan(p2), \"greaterThan 16\");\n-\n-    \/\/ greaterThanOrEqual positive tests\n-    check(p1.greaterThanOrEqual(p1), \"greaterThanOrEqual 1\");\n-    check(p2.greaterThanOrEqual(p2), \"greaterThanOrEqual 2\");\n-    check(n1.greaterThanOrEqual(n1), \"greaterThanOrEqual 3\");\n-    check(n2.greaterThanOrEqual(n2), \"greaterThanOrEqual 4\");\n-\n-    check(n2.greaterThanOrEqual(p1), \"greaterThanOrEqual 5\");\n-    check(n2.greaterThanOrEqual(p2), \"greaterThanOrEqual 6\");\n-    check(n2.greaterThanOrEqual(n1), \"greaterThanOrEqual 7\");\n-    check(n1.greaterThanOrEqual(p1), \"greaterThanOrEqual 8\");\n-    check(n1.greaterThanOrEqual(p2), \"greaterThanOrEqual 9\");\n-    check(p2.greaterThanOrEqual(p1), \"greaterThanOrEqual 10\");\n-\n-    \/\/ greaterThanOrEqual negative tests\n-    check(!p1.greaterThanOrEqual(n2), \"greaterThanOrEqual 11\");\n-    check(!p2.greaterThanOrEqual(n2), \"greaterThanOrEqual 12\");\n-    check(!n1.greaterThanOrEqual(n2), \"greaterThanOrEqual 13\");\n-    check(!p1.greaterThanOrEqual(n1), \"greaterThanOrEqual 14\");\n-    check(!p2.greaterThanOrEqual(n1), \"greaterThanOrEqual 15\");\n-    check(!p1.greaterThanOrEqual(p2), \"greaterThanOrEqual 16\");\n-\n-    System.err.println(\"ProcAddress: all tests passed successfully.\");\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcAddress.java","additions":0,"deletions":393,"binary":false,"changes":393,"status":"deleted"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import java.io.*;\n-import java.util.*;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.cdbg.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-class ProcCDebugger implements CDebugger {\n-  private ProcDebugger dbg;\n-\n-  ProcCDebugger(ProcDebugger dbg) {\n-    this.dbg = dbg;\n-  }\n-\n-  public List<ThreadProxy> getThreadList() throws DebuggerException {\n-    return dbg.getThreadList();\n-  }\n-\n-  public List<LoadObject> getLoadObjectList() throws DebuggerException {\n-    return dbg.getLoadObjectList();\n-  }\n-\n-  public LoadObject loadObjectContainingPC(Address pc) throws DebuggerException {\n-    if (pc == null) {\n-      return null;\n-    }\n-    List<LoadObject> objs = getLoadObjectList();\n-    Object[] arr = objs.toArray();\n-    \/\/ load objects are sorted by base address, do binary search\n-    int mid  = -1;\n-    int low  = 0;\n-    int high = arr.length - 1;\n-\n-    while (low <= high) {\n-       mid = (low + high) >> 1;\n-       LoadObject midVal = (LoadObject) arr[mid];\n-       long cmp = pc.minus(midVal.getBase());\n-       if (cmp < 0) {\n-          high = mid - 1;\n-       } else if (cmp > 0) {\n-          long size = midVal.getSize();\n-          if (cmp >= size) {\n-             low = mid + 1;\n-          } else {\n-             return (LoadObject) arr[mid];\n-          }\n-       } else { \/\/ match found\n-          return (LoadObject) arr[mid];\n-       }\n-    }\n-    \/\/ no match found.\n-    return null;\n-  }\n-\n-  public CFrame topFrameForThread(ThreadProxy thread) throws DebuggerException {\n-    return dbg.topFrameForThread(thread);\n-  }\n-\n-  public String getNameOfFile(String fileName) {\n-    return new File(fileName).getName();\n-  }\n-\n-  public ProcessControl getProcessControl() throws DebuggerException {\n-    \/\/ FIXME: after stabs parser\n-    return null;\n-  }\n-\n-  \/\/ C++ name demangling\n-  public boolean canDemangle() {\n-    return true;\n-  }\n-\n-  public String demangle(String sym) {\n-    return dbg.demangle(sym);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcCDebugger.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.cdbg.*;\n-import sun.jvm.hotspot.debugger.cdbg.basic.*;\n-\n-final class ProcCFrame extends BasicCFrame {\n-   public Address pc() {\n-      return pc;\n-   }\n-\n-   public Address localVariableBase() {\n-      return fp;\n-   }\n-\n-   public CFrame sender(ThreadProxy t) {\n-      return sender;\n-   }\n-\n-   public ClosestSymbol closestSymbolToPC() {\n-      \/\/ we don't use base class ELF parsing based\n-      \/\/ symbol lookup for pc for performance reasons.\n-      return procDbg.lookup(procDbg.getAddressValue(pc));\n-   }\n-\n-   \/\/ package\/class internals only\n-\n-   ProcCFrame(ProcDebugger dbg, Address pc, Address fp) {\n-      super(dbg.getCDebugger());\n-      this.pc = pc;\n-      this.fp = fp;\n-      this.procDbg = dbg;\n-   }\n-\n-   void setSender(ProcCFrame sender) {\n-      this.sender = sender;\n-   }\n-\n-   private Address    pc;\n-   private Address    fp;\n-   private ProcCFrame sender;\n-   private ProcDebugger procDbg;\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcCFrame.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import java.util.List;\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.cdbg.*;\n-\n-\/** An extension of the JVMDebugger interface with a few additions to\n-    support 32-bit vs. 64-bit debugging as well as features required\n-    by the architecture-specific subpackages. *\/\n-\n-public interface ProcDebugger extends JVMDebugger {\n-  public MachineDescription getMachineDescription() throws DebuggerException;\n-  public String       addressValueToString(long address) throws DebuggerException;\n-  public boolean      readJBoolean(long address) throws DebuggerException;\n-  public byte         readJByte(long address) throws DebuggerException;\n-  public char         readJChar(long address) throws DebuggerException;\n-  public double       readJDouble(long address) throws DebuggerException;\n-  public float        readJFloat(long address) throws DebuggerException;\n-  public int          readJInt(long address) throws DebuggerException;\n-  public long         readJLong(long address) throws DebuggerException;\n-  public short        readJShort(long address) throws DebuggerException;\n-  public long         readCInteger(long address, long numBytes, boolean isUnsigned)\n-    throws DebuggerException;\n-  public ProcAddress   readAddress(long address) throws DebuggerException;\n-  public ProcAddress   readCompOopAddress(long address) throws DebuggerException;\n-  public ProcAddress   readCompKlassAddress(long address) throws DebuggerException;\n-  public ProcOopHandle readOopHandle(long address) throws DebuggerException;\n-  public ProcOopHandle readCompOopHandle(long address) throws DebuggerException;\n-  public long[]       getThreadIntegerRegisterSet(int tid) throws DebuggerException;\n-  public long         getAddressValue(Address addr) throws DebuggerException;\n-\n-  \/\/ for ProcCDebugger, ProcCFrame and SharedObject\n-  public List<ThreadProxy> getThreadList() throws DebuggerException;\n-  public List<LoadObject> getLoadObjectList() throws DebuggerException;\n-  public CFrame        topFrameForThread(ThreadProxy thread) throws DebuggerException;\n-  public ClosestSymbol lookup(long address) throws DebuggerException;\n-  public String        demangle(String name);\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcDebugger.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import sun.jvm.hotspot.debugger.*;\n-\n-class ProcOopHandle extends ProcAddress implements OopHandle {\n-  ProcOopHandle(ProcDebugger debugger, long addr) {\n-    super(debugger, addr);\n-  }\n-\n-  public Address    addOffsetTo       (long offset) throws UnsupportedOperationException {\n-    throw new UnsupportedOperationException(\"addOffsetTo not applicable to OopHandles (interior object pointers not allowed)\");\n-  }\n-\n-  public Address    andWithMask(long mask) throws UnsupportedOperationException {\n-    throw new UnsupportedOperationException(\"andWithMask not applicable to OopHandles (i.e., anything but C addresses)\");\n-  }\n-\n-  public Address    orWithMask(long mask) throws UnsupportedOperationException {\n-    throw new UnsupportedOperationException(\"orWithMask not applicable to OopHandles (i.e., anything but C addresses)\");\n-  }\n-\n-  public Address    xorWithMask(long mask) throws UnsupportedOperationException {\n-    throw new UnsupportedOperationException(\"xorWithMask not applicable to OopHandles (i.e., anything but C addresses)\");\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcOopHandle.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import sun.jvm.hotspot.debugger.*;\n-\n-\/** An interface used only internally by the ProcDebugger to be able to\n-    create platform-specific Thread objects *\/\n-\n-public interface ProcThreadFactory {\n-  public ThreadProxy createThreadWrapper(Address threadIdentifierAddr);\n-  public ThreadProxy createThreadWrapper(long id);\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ProcThreadFactory.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.cdbg.*;\n-import sun.jvm.hotspot.debugger.posix.*;\n-\n-\/** An Object can represent either a .so or an a.out file. *\/\n-\n-class SharedObject extends DSO {\n-  SharedObject(ProcDebugger dbg, String filename, long size, Address relocation) {\n-    super(filename, size, relocation);\n-    this.dbg     = dbg;\n-  }\n-\n-  protected Address newAddress(long address) {\n-    return dbg.newAddress(address);\n-  }\n-\n-  protected long getAddressValue(Address addr) {\n-    return dbg.getAddressValue(addr);\n-  }\n-\n-  public ClosestSymbol closestSymbolToPC(Address pcAsAddr) throws DebuggerException {\n-    return dbg.lookup(dbg.getAddressValue(pcAsAddr));\n-  }\n-\n-  private ProcDebugger   dbg;\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/SharedObject.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.aarch64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.aarch64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-public class ProcAARCH64Thread implements ThreadProxy {\n-    private ProcDebugger debugger;\n-    private int         id;\n-\n-    public ProcAARCH64Thread(ProcDebugger debugger, Address addr) {\n-        this.debugger = debugger;\n-\n-        \/\/ FIXME: the size here should be configurable. However, making it\n-        \/\/ so would produce a dependency on the \"types\" package from the\n-        \/\/ debugger package, which is not desired.\n-        this.id       = (int) addr.getCIntegerAt(0, 4, true);\n-    }\n-\n-    public ProcAARCH64Thread(ProcDebugger debugger, long id) {\n-        this.debugger = debugger;\n-        this.id = (int) id;\n-    }\n-\n-    public ThreadContext getContext() throws IllegalThreadStateException {\n-        ProcAARCH64ThreadContext context = new ProcAARCH64ThreadContext(debugger);\n-        long[] regs = debugger.getThreadIntegerRegisterSet(id);\n-        if (Assert.ASSERTS_ENABLED) {\n-            Assert.that(regs.length == AARCH64ThreadContext.NPRGREG, \"size mismatch\");\n-        }\n-        for (int i = 0; i < regs.length; i++) {\n-            context.setRegister(i, regs[i]);\n-        }\n-        return context;\n-    }\n-\n-    public boolean canSetContext() throws DebuggerException {\n-        return false;\n-    }\n-\n-    public void setContext(ThreadContext context)\n-    throws IllegalThreadStateException, DebuggerException {\n-        throw new DebuggerException(\"Unimplemented\");\n-    }\n-\n-    public String toString() {\n-        return \"t@\" + id;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof ProcAARCH64Thread other)) {\n-            return false;\n-        }\n-\n-        return (other.id == id);\n-    }\n-\n-    public int hashCode() {\n-        return id;\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/aarch64\/ProcAARCH64Thread.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.aarch64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.aarch64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcAARCH64ThreadContext extends AARCH64ThreadContext {\n-    private ProcDebugger debugger;\n-\n-    public ProcAARCH64ThreadContext(ProcDebugger debugger) {\n-        super();\n-        this.debugger = debugger;\n-    }\n-\n-    public void setRegisterAsAddress(int index, Address value) {\n-        setRegister(index, debugger.getAddressValue(value));\n-    }\n-\n-    public Address getRegisterAsAddress(int index) {\n-        return debugger.newAddress(getRegister(index));\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/aarch64\/ProcAARCH64ThreadContext.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.aarch64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcAARCH64ThreadFactory implements ProcThreadFactory {\n-    private ProcDebugger debugger;\n-\n-    public ProcAARCH64ThreadFactory(ProcDebugger debugger) {\n-        this.debugger = debugger;\n-    }\n-\n-    public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n-        return new ProcAARCH64Thread(debugger, threadIdentifierAddr);\n-    }\n-\n-    public ThreadProxy createThreadWrapper(long id) {\n-        return new ProcAARCH64Thread(debugger, id);\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/aarch64\/ProcAARCH64ThreadFactory.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.amd64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.amd64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-public class ProcAMD64Thread implements ThreadProxy {\n-    private ProcDebugger debugger;\n-    private int         id;\n-\n-    public ProcAMD64Thread(ProcDebugger debugger, Address addr) {\n-        this.debugger = debugger;\n-\n-        \/\/ FIXME: the size here should be configurable. However, making it\n-        \/\/ so would produce a dependency on the \"types\" package from the\n-        \/\/ debugger package, which is not desired.\n-        this.id       = (int) addr.getCIntegerAt(0, 4, true);\n-    }\n-\n-    public ProcAMD64Thread(ProcDebugger debugger, long id) {\n-        this.debugger = debugger;\n-        this.id = (int) id;\n-    }\n-\n-    public ThreadContext getContext() throws IllegalThreadStateException {\n-        ProcAMD64ThreadContext context = new ProcAMD64ThreadContext(debugger);\n-        long[] regs = debugger.getThreadIntegerRegisterSet(id);\n-        if (Assert.ASSERTS_ENABLED) {\n-            Assert.that(regs.length == AMD64ThreadContext.NPRGREG, \"size mismatch\");\n-        }\n-        for (int i = 0; i < regs.length; i++) {\n-            context.setRegister(i, regs[i]);\n-        }\n-        return context;\n-    }\n-\n-    public boolean canSetContext() throws DebuggerException {\n-        return false;\n-    }\n-\n-    public void setContext(ThreadContext context)\n-    throws IllegalThreadStateException, DebuggerException {\n-        throw new DebuggerException(\"Unimplemented\");\n-    }\n-\n-    public String toString() {\n-        return \"t@\" + id;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof ProcAMD64Thread other)) {\n-            return false;\n-        }\n-\n-        return (other.id == id);\n-    }\n-\n-    public int hashCode() {\n-        return id;\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/amd64\/ProcAMD64Thread.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.amd64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.amd64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcAMD64ThreadContext extends AMD64ThreadContext {\n-    private ProcDebugger debugger;\n-\n-    public ProcAMD64ThreadContext(ProcDebugger debugger) {\n-        super();\n-        this.debugger = debugger;\n-    }\n-\n-    public void setRegisterAsAddress(int index, Address value) {\n-        setRegister(index, debugger.getAddressValue(value));\n-    }\n-\n-    public Address getRegisterAsAddress(int index) {\n-        return debugger.newAddress(getRegister(index));\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/amd64\/ProcAMD64ThreadContext.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.amd64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcAMD64ThreadFactory implements ProcThreadFactory {\n-    private ProcDebugger debugger;\n-\n-    public ProcAMD64ThreadFactory(ProcDebugger debugger) {\n-        this.debugger = debugger;\n-    }\n-\n-    public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n-        return new ProcAMD64Thread(debugger, threadIdentifierAddr);\n-    }\n-\n-    public ThreadProxy createThreadWrapper(long id) {\n-        return new ProcAMD64Thread(debugger, id);\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/amd64\/ProcAMD64ThreadFactory.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.ppc64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.ppc64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-public class ProcPPC64Thread implements ThreadProxy {\n-  private ProcDebugger debugger;\n-  private int id;\n-\n-  public ProcPPC64Thread(ProcDebugger debugger, Address addr) {\n-    this.debugger = debugger;\n-\n-    \/\/ FIXME: the size here should be configurable. However, making it\n-    \/\/ so would produce a dependency on the \"types\" package from the\n-    \/\/ debugger package, which is not desired.\n-    this.id = (int) addr.getCIntegerAt(0, 4, true);\n-  }\n-\n-  public ProcPPC64Thread(ProcDebugger debugger, long id) {\n-    this.debugger = debugger;\n-    this.id = (int) id;\n-  }\n-\n-  public ThreadContext getContext() throws IllegalThreadStateException {\n-    ProcPPC64ThreadContext context = new ProcPPC64ThreadContext(debugger);\n-    long[] regs = debugger.getThreadIntegerRegisterSet(id);\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that(regs.length <= PPC64ThreadContext.NPRGREG, \"size of register set is greater than \" + PPC64ThreadContext.NPRGREG);\n-    }\n-    for (int i = 0; i < regs.length; i++) {\n-      context.setRegister(i, regs[i]);\n-    }\n-    return context;\n-  }\n-\n-  public boolean canSetContext() throws DebuggerException {\n-    return false;\n-  }\n-\n-  public void setContext(ThreadContext context)\n-    throws IllegalThreadStateException, DebuggerException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-\n-  public String toString() {\n-    return \"t@\" + id;\n-  }\n-\n-  public boolean equals(Object obj) {\n-    if (!(obj instanceof ProcPPC64Thread other)) {\n-      return false;\n-    }\n-\n-    return (other.id == id);\n-  }\n-\n-  public int hashCode() {\n-    return id;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ppc64\/ProcPPC64Thread.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.ppc64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.ppc64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcPPC64ThreadContext extends PPC64ThreadContext {\n-  private ProcDebugger debugger;\n-\n-  public ProcPPC64ThreadContext(ProcDebugger debugger) {\n-    super();\n-    this.debugger = debugger;\n-  }\n-\n-  public void setRegisterAsAddress(int index, Address value) {\n-    setRegister(index, debugger.getAddressValue(value));\n-  }\n-\n-  public Address getRegisterAsAddress(int index) {\n-    return debugger.newAddress(getRegister(index));\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ppc64\/ProcPPC64ThreadContext.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.ppc64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcPPC64ThreadFactory implements ProcThreadFactory {\n-  private ProcDebugger debugger;\n-\n-  public ProcPPC64ThreadFactory(ProcDebugger debugger) {\n-    this.debugger = debugger;\n-  }\n-\n-  public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n-    return new ProcPPC64Thread(debugger, threadIdentifierAddr);\n-  }\n-\n-  public ThreadProxy createThreadWrapper(long id) {\n-    return new ProcPPC64Thread(debugger, id);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/ppc64\/ProcPPC64ThreadFactory.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,88 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.riscv64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.riscv64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-public class ProcRISCV64Thread implements ThreadProxy {\n-    private ProcDebugger debugger;\n-    private int         id;\n-\n-    public ProcRISCV64Thread(ProcDebugger debugger, Address addr) {\n-        this.debugger = debugger;\n-\n-        \/\/ FIXME: the size here should be configurable. However, making it\n-        \/\/ so would produce a dependency on the \"types\" package from the\n-        \/\/ debugger package, which is not desired.\n-        this.id       = (int) addr.getCIntegerAt(0, 4, true);\n-    }\n-\n-    public ProcRISCV64Thread(ProcDebugger debugger, long id) {\n-        this.debugger = debugger;\n-        this.id = (int) id;\n-    }\n-\n-    public ThreadContext getContext() throws IllegalThreadStateException {\n-        ProcRISCV64ThreadContext context = new ProcRISCV64ThreadContext(debugger);\n-        long[] regs = debugger.getThreadIntegerRegisterSet(id);\n-        if (Assert.ASSERTS_ENABLED) {\n-            Assert.that(regs.length == RISCV64ThreadContext.NPRGREG, \"size mismatch\");\n-        }\n-        for (int i = 0; i < regs.length; i++) {\n-            context.setRegister(i, regs[i]);\n-        }\n-        return context;\n-    }\n-\n-    public boolean canSetContext() throws DebuggerException {\n-        return false;\n-    }\n-\n-    public void setContext(ThreadContext context)\n-    throws IllegalThreadStateException, DebuggerException {\n-        throw new DebuggerException(\"Unimplemented\");\n-    }\n-\n-    public String toString() {\n-        return \"t@\" + id;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof ProcRISCV64Thread other)) {\n-            return false;\n-        }\n-\n-        return (other.id == id);\n-    }\n-\n-    public int hashCode() {\n-        return id;\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/riscv64\/ProcRISCV64Thread.java","additions":0,"deletions":88,"binary":false,"changes":88,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.riscv64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.riscv64.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcRISCV64ThreadContext extends RISCV64ThreadContext {\n-    private ProcDebugger debugger;\n-\n-    public ProcRISCV64ThreadContext(ProcDebugger debugger) {\n-        super();\n-        this.debugger = debugger;\n-    }\n-\n-    public void setRegisterAsAddress(int index, Address value) {\n-        setRegister(index, debugger.getAddressValue(value));\n-    }\n-\n-    public Address getRegisterAsAddress(int index) {\n-        return debugger.newAddress(getRegister(index));\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/riscv64\/ProcRISCV64ThreadContext.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2015, Red Hat Inc.\n- * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.riscv64;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcRISCV64ThreadFactory implements ProcThreadFactory {\n-    private ProcDebugger debugger;\n-\n-    public ProcRISCV64ThreadFactory(ProcDebugger debugger) {\n-        this.debugger = debugger;\n-    }\n-\n-    public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n-        return new ProcRISCV64Thread(debugger, threadIdentifierAddr);\n-    }\n-\n-    public ThreadProxy createThreadWrapper(long id) {\n-        return new ProcRISCV64Thread(debugger, id);\n-    }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/riscv64\/ProcRISCV64ThreadFactory.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.x86;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.x86.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-import sun.jvm.hotspot.utilities.*;\n-\n-public class ProcX86Thread implements ThreadProxy {\n-  private ProcDebugger debugger;\n-  private int         id;\n-\n-  public ProcX86Thread(ProcDebugger debugger, Address addr) {\n-    this.debugger = debugger;\n-\n-    \/\/ FIXME: the size here should be configurable. However, making it\n-    \/\/ so would produce a dependency on the \"types\" package from the\n-    \/\/ debugger package, which is not desired.\n-    this.id       = (int) addr.getCIntegerAt(0, 4, true);\n-  }\n-\n-  public ProcX86Thread(ProcDebugger debugger, long id) {\n-    this.debugger = debugger;\n-    this.id = (int) id;\n-  }\n-\n-  public ThreadContext getContext() throws IllegalThreadStateException {\n-    ProcX86ThreadContext context = new ProcX86ThreadContext(debugger);\n-    long[] regs = debugger.getThreadIntegerRegisterSet(id);\n-    \/*\n-       _NGREG in reg.h is defined to be 19. Because we have included\n-       debug registers X86ThreadContext.NPRGREG is 25.\n-    *\/\n-\n-    if (Assert.ASSERTS_ENABLED) {\n-      Assert.that(regs.length <= X86ThreadContext.NPRGREG, \"size of register set is greater than \" + X86ThreadContext.NPRGREG);\n-    }\n-    for (int i = 0; i < regs.length; i++) {\n-      context.setRegister(i, regs[i]);\n-    }\n-    return context;\n-  }\n-\n-  public boolean canSetContext() throws DebuggerException {\n-    return false;\n-  }\n-\n-  public void setContext(ThreadContext context)\n-    throws IllegalThreadStateException, DebuggerException {\n-    throw new DebuggerException(\"Unimplemented\");\n-  }\n-\n-  public String toString() {\n-    return \"t@\" + id;\n-  }\n-\n-  public boolean equals(Object obj) {\n-    if (!(obj instanceof ProcX86Thread other)) {\n-      return false;\n-    }\n-\n-    return (other.id == id);\n-  }\n-\n-  public int hashCode() {\n-    return id;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/x86\/ProcX86Thread.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.x86;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.x86.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcX86ThreadContext extends X86ThreadContext {\n-  private ProcDebugger debugger;\n-\n-  public ProcX86ThreadContext(ProcDebugger debugger) {\n-    super();\n-    this.debugger = debugger;\n-  }\n-\n-  public void setRegisterAsAddress(int index, Address value) {\n-    setRegister(index, debugger.getAddressValue(value));\n-  }\n-\n-  public Address getRegisterAsAddress(int index) {\n-    return debugger.newAddress(getRegister(index));\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/x86\/ProcX86ThreadContext.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.debugger.proc.x86;\n-\n-import sun.jvm.hotspot.debugger.*;\n-import sun.jvm.hotspot.debugger.proc.*;\n-\n-public class ProcX86ThreadFactory implements ProcThreadFactory {\n-  private ProcDebugger debugger;\n-\n-  public ProcX86ThreadFactory(ProcDebugger debugger) {\n-    this.debugger = debugger;\n-  }\n-\n-  public ThreadProxy createThreadWrapper(Address threadIdentifierAddr) {\n-    return new ProcX86Thread(debugger, threadIdentifierAddr);\n-  }\n-\n-  public ThreadProxy createThreadWrapper(long id) {\n-    return new ProcX86Thread(debugger, id);\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/proc\/x86\/ProcX86ThreadFactory.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-\/** An interface used only internally by the ProcDebugger to be able to\n+\/** An interface used only internally by the RemoteDebuggerClient to be able to\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteThreadFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}