{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.access.JavaUtilCollectionAccess;\n@@ -106,1 +107,1 @@\n-            EMPTY_LIST = new ListN<>();\n+            EMPTY_LIST = new ListN<>(new Object[0]);\n@@ -118,0 +119,10 @@\n+    static class Access {\n+        static {\n+            SharedSecrets.setJavaUtilCollectionAccess(new JavaUtilCollectionAccess() {\n+                public <E> List<E> listFromTrustedArray(Object[] array) {\n+                    return ImmutableCollections.ListN.fromTrustedArray(array);\n+                }\n+            });\n+        }\n+    }\n+\n@@ -524,0 +535,5 @@\n+        private ListN(E[] array) {\n+            elements = array;\n+        }\n+\n+        \/\/ creates a new internal array, and checks and rejects null elements\n@@ -525,1 +541,1 @@\n-        ListN(E... input) {\n+        static <E> List<E> fromArray(E... input) {\n@@ -532,1 +548,12 @@\n-            elements = tmp;\n+            return new ListN<>(tmp);\n+        }\n+\n+        \/\/ Avoids creating a new array, but checks and rejects null elements.\n+        \/\/ Declared with Object... arg so that varargs calls don't accidentally\n+        \/\/ create an array of a subtype.\n+        @SuppressWarnings(\"unchecked\")\n+        static <E> List<E> fromTrustedArray(Object... input) {\n+            for (Object o : input) {\n+                Objects.requireNonNull(o);\n+            }\n+            return new ListN<>((E[])input);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -845,1 +845,1 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3);\n@@ -864,1 +864,1 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4);\n@@ -884,1 +884,1 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5);\n@@ -905,2 +905,2 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5,\n-                                                e6);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5,\n+                                                           e6);\n@@ -928,2 +928,2 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5,\n-                                                e6, e7);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5,\n+                                                           e6, e7);\n@@ -952,2 +952,2 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5,\n-                                                e6, e7, e8);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5,\n+                                                           e6, e7, e8);\n@@ -977,2 +977,2 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5,\n-                                                e6, e7, e8, e9);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5,\n+                                                           e6, e7, e8, e9);\n@@ -1003,2 +1003,2 @@\n-        return new ImmutableCollections.ListN<>(e1, e2, e3, e4, e5,\n-                                                e6, e7, e8, e9, e10);\n+        return ImmutableCollections.ListN.fromTrustedArray(e1, e2, e3, e4, e5,\n+                                                           e6, e7, e8, e9, e10);\n@@ -1045,1 +1045,1 @@\n-                return new ImmutableCollections.ListN<>(elements);\n+                return ImmutableCollections.ListN.fromArray(elements);\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -299,1 +301,2 @@\n-                                   list -> (List<T>)List.of(list.toArray()),\n+                                   list -> (List<T>)SharedSecrets.getJavaUtilCollectionAccess()\n+                                                                 .listFromTrustedArray(list.toArray()),\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Collectors.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.access;\n+\n+import java.util.List;\n+\n+public interface JavaUtilCollectionAccess {\n+    <E> List<E> listFromTrustedArray(Object[] array);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilCollectionAccess.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -73,0 +73,1 @@\n+    private static JavaUtilCollectionAccess javaUtilCollectionAccess;\n@@ -80,0 +81,13 @@\n+    public static void setJavaUtilCollectionAccess(JavaUtilCollectionAccess juca) {\n+        javaUtilCollectionAccess = juca;\n+    }\n+\n+    public static JavaUtilCollectionAccess getJavaUtilCollectionAccess() {\n+        if (javaUtilCollectionAccess == null) {\n+            try {\n+                Class.forName(\"java.util.ImmutableCollections$Access\", true, null);\n+            } catch (ClassNotFoundException e) {};\n+        }\n+        return javaUtilCollectionAccess;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/SharedSecrets.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.*;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Microbenchmarks for List.of fixed vs varargs implementations.\n+ * Run with -Xint to avoid JIT compilation, in order to test\n+ * common use cases of these methods being called from static\n+ * initializers. Use parallel GC and set initial heap size to avoid\n+ * GC during runs.\n+ *\/\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"-verbose:gc\", \"-XX:+UseParallelGC\", \"-Xms4g\", \"-Xmx4g\", \"-Xint\" })\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+public class ListArgs {\n+\n+    @Benchmark\n+    public Object list00() {\n+        return List.of();\n+    }\n+\n+    @Benchmark\n+    public Object list01() {\n+        return List.of(\"a\");\n+    }\n+\n+    @Benchmark\n+    public Object list02() {\n+        return List.of(\"a\", \"b\");\n+    }\n+\n+    @Benchmark\n+    public Object list03() {\n+        return List.of(\"a\", \"b\", \"c\");\n+    }\n+\n+    @Benchmark\n+    public Object list04() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\");\n+    }\n+\n+    @Benchmark\n+    public Object list05() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\");\n+    }\n+\n+    @Benchmark\n+    public Object list06() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\");\n+    }\n+\n+    @Benchmark\n+    public Object list07() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\", \"g\");\n+    }\n+\n+    @Benchmark\n+    public Object list08() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\", \"g\", \"h\");\n+    }\n+\n+    @Benchmark\n+    public Object list09() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\", \"g\", \"h\", \"i\");\n+    }\n+\n+    @Benchmark\n+    public Object list10() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\", \"g\", \"h\", \"i\", \"j\");\n+    }\n+\n+    @Benchmark\n+    public Object list11() {\n+        return List.of(\"a\", \"b\", \"c\", \"d\", \"e\",\n+                       \"f\", \"g\", \"h\", \"i\", \"j\", \"k\");\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/ListArgs.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}