{"files":[{"patch":"@@ -93,1 +93,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.ClassWriter;\n@@ -96,1 +95,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.PackageSummaryWriter;\n@@ -1231,1 +1229,1 @@\n-     * Adds the inline comment.\n+     * Adds the full-body content of the given element.\n@@ -1233,2 +1231,2 @@\n-     * @param element the Element for which the inline comments will be generated\n-     * @param htmltree the documentation tree to which the inline comments will be added\n+     * @param element the element for which the content will be added\n+     * @param htmltree the documentation tree to which the content will be added\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,8 +26,0 @@\n-\/**\n- *  A utility class.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n@@ -60,0 +52,1 @@\n+import com.sun.source.doctree.LiteralTree;\n@@ -62,0 +55,2 @@\n+import com.sun.source.doctree.ReturnTree;\n+import com.sun.source.doctree.SinceTree;\n@@ -63,0 +58,1 @@\n+import com.sun.source.doctree.UnknownBlockTagTree;\n@@ -70,0 +66,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable;\n@@ -71,0 +68,8 @@\n+\/**\n+ *  A utility class for handling documentation comments.\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n@@ -99,1 +104,0 @@\n-        List<DocTree> out = new ArrayList<>();\n@@ -101,2 +105,1 @@\n-        out.add(treeFactory.newUnknownBlockTagTree(name, content));\n-        return out;\n+        return List.of(treeFactory.newUnknownBlockTagTree(name, content));\n@@ -105,7 +108,2 @@\n-    public List<? extends DocTree> makePropertyDescriptionTree(String content) {\n-        List<DocTree> inlist = new ArrayList<>();\n-        inlist.add(treeFactory.newCommentTree(content));\n-        List<DocTree> out = new ArrayList<>();\n-        Name name = elementUtils.getName(\"propertyDescription\");\n-        out.add(treeFactory.newUnknownBlockTagTree(name, inlist));\n-        return out;\n+    public LiteralTree makeCodeTree(String text) {\n+        return treeFactory.newCodeTree(makeTextTree(text));\n@@ -115,3 +113,9 @@\n-        List<DocTree> out = new ArrayList<>();\n-        out.add(treeFactory.newTextTree(content));\n-        return out;\n+        return List.of(treeFactory.newTextTree(content));\n+    }\n+\n+    public ParamTree makeParamTree(Name name, List<? extends DocTree> description) {\n+        return treeFactory.newParamTree(false, treeFactory.newIdentifierTree(name), description);\n+    }\n+\n+    public ReturnTree makeReturnTree(List<? extends DocTree> description) {\n+        return treeFactory.newReturnTree(false, description);\n@@ -121,3 +125,1 @@\n-        List<DocTree> list = new ArrayList<>();\n-        list.add(treeFactory.newReferenceTree(sig));\n-        return treeFactory.newSeeTree(list);\n+        return treeFactory.newSeeTree(List.of(treeFactory.newReferenceTree(sig)));\n@@ -192,1 +194,0 @@\n-        java.util.List<? extends VariableElement> parameters = ee.getParameters();\n@@ -321,0 +322,101 @@\n+\n+    \/**\n+     * Update the property method, property setter and\/or property getter\n+     * comment text so that it contains the documentation from\n+     * the preferred property description (field or property method).\n+     * The method adds the leading sentence, copied documentation including\n+     * the defaultValue tag and the {@code @see} tags if the appropriate methods are\n+     * available.\n+     *\n+     * @param member the member which is to be augmented\n+     * @param property the element containing the preferred property description\n+     *\/\n+    public void updatePropertyMethodComment(ExecutableElement member,\n+                                 Element property) {\n+        final String memberName = member.getSimpleName().toString();\n+        final boolean isSetter = memberName.startsWith(\"set\");\n+        final boolean isGetter = memberName.startsWith(\"get\") || memberName.startsWith(\"is\");\n+\n+        List<DocTree> fullBody = new ArrayList<>();\n+        List<DocTree> blockTags = new ArrayList<>();\n+\n+        if (isGetter || isSetter) {\n+            DocTree propName = makeCodeTree(utils.propertyName(member));\n+\n+            if (isGetter) {\n+                \/\/ Set the body and @return\n+                fullBody.addAll(getComment(\"doclet.PropertyGetterWithName\", propName));\n+                blockTags.add(makeReturnTree(\n+                        getComment(\"doclet.PropertyGetterReturn\", propName)));\n+            }\n+\n+            if (isSetter) {\n+                \/\/ Set the body and @param\n+                fullBody.addAll(getComment(\"doclet.PropertySetterWithName\", propName));\n+                VariableElement arg0 = member.getParameters().get(0);\n+                blockTags.add(makeParamTree(arg0.getSimpleName(),\n+                        getComment(\"doclet.PropertySetterParam\", propName)));\n+            }\n+\n+            \/\/ Set the @propertyDescription\n+            List<? extends DocTree> propertyTags = utils.getBlockTags(property,\n+                    t -> (t instanceof UnknownBlockTagTree tree)\n+                            && (tree.getTagName().equals(\"propertyDescription\")));\n+            if (propertyTags.isEmpty()) {\n+                List<? extends DocTree> comment = utils.getFullBody(property);\n+                blockTags.addAll(makePropertyDescriptionTree(comment));\n+            }\n+        } else {\n+            \/\/ property method\n+            fullBody.addAll(utils.getFullBody(property));\n+\n+            \/\/ Set the @return\n+            DocTree propName = makeCodeTree(configuration.propertyUtils.getBaseName(member));\n+            List<? extends DocTree> returnTags = utils.getBlockTags(property, DocTree.Kind.RETURN);\n+            if (returnTags.isEmpty()) {\n+                blockTags.add(makeReturnTree(\n+                        getComment(\"doclet.PropertyMethodReturn\", propName)));\n+            } else {\n+                blockTags.addAll(returnTags);\n+            }\n+        }\n+\n+        \/\/ copy certain tags\n+        List<? extends SinceTree> sinceTags = utils.getBlockTags(property, DocTree.Kind.SINCE, SinceTree.class);\n+        blockTags.addAll(sinceTags);\n+\n+        List<? extends DocTree> bTags = utils.getBlockTags(property,\n+                t -> (t instanceof UnknownBlockTagTree tree)\n+                        && (tree.getTagName().equals(\"defaultValue\")));\n+        blockTags.addAll(bTags);\n+\n+        \/\/add @see tags\n+        TypeElement te = (TypeElement) member.getEnclosingElement();\n+        VisibleMemberTable vmt = configuration.getVisibleMemberTable(te);\n+        ExecutableElement getter = vmt.getPropertyGetter(member);\n+        ExecutableElement setter = vmt.getPropertySetter(member);\n+        ExecutableElement propMethod = vmt.getPropertyMethod(member);\n+\n+        if (getter != null && getter != member) {\n+            String sig = \"#\" + getter.getSimpleName() + \"()\";\n+            blockTags.add(makeSeeTree(sig, getter));\n+        }\n+\n+        if (setter != null && setter != member) {\n+            VariableElement param = setter.getParameters().get(0);\n+            StringBuilder sb = new StringBuilder(\"#\");\n+            sb.append(setter.getSimpleName());\n+            if (!utils.isTypeVariable(param.asType())) {\n+                sb.append(\"(\").append(utils.getTypeSignature(param.asType(), false, true)).append(\")\");\n+            }\n+            blockTags.add(makeSeeTree(sb.toString(), setter));\n+        }\n+\n+        if (propMethod != member) {\n+            String sig = \"#\" + propMethod.getSimpleName() + \"()\";\n+            blockTags.add(makeSeeTree(sig, propMethod));\n+        }\n+\n+        setDocCommentTree(member, fullBody, blockTags);\n+    }\n+\n@@ -404,0 +506,53 @@\n+    \/**\n+     * Returns a list containing the string for a given key in the doclet's resources,\n+     * formatted with given arguments.\n+     *\n+     * @param key the key for the desired string\n+     * @param o0  string or tree argument to be formatted into the result\n+     * @return a content tree for the text\n+     *\/\n+    public List<? extends DocTree> getComment(String key, Object o0) {\n+        return getComment(key, o0, null, null);\n+    }\n+\n+    \/**\n+     * Returns a list containing the string for a given key in the doclet's resources,\n+     * formatted with given arguments.\n+     *\n+     * @param key the key for the desired string\n+     * @param o0  string or tree argument to be formatted into the result\n+     * @param o1  string or tree argument to be formatted into the result\n+     * @param o2  string or tree argument to be formatted into the result\n+     * @return a content tree for the text\n+     *\/\n+    public List<? extends DocTree> getComment(String key, Object o0, Object o1, Object o2) {\n+        List<DocTree> l = new ArrayList<>();\n+        Pattern p = Pattern.compile(\"\\\\{([012])\\\\}\");\n+        String text = resources.getText(key);\n+        Matcher m = p.matcher(text);\n+        int start = 0;\n+        while (m.find(start)) {\n+            l.add(makeTextTree(text.substring(start, m.start())));\n+\n+            Object o = null;\n+            switch (m.group(1).charAt(0)) {\n+                case '0': o = o0; break;\n+                case '1': o = o1; break;\n+                case '2': o = o2; break;\n+            }\n+\n+            if (o == null) {\n+                l.add(makeTextTree(\"{\" + m.group(1) + \"}\"));\n+            } else if (o instanceof String str) {\n+                l.add(makeTextTree(str));\n+            } else if (o instanceof DocTree t) {\n+                l.add(t);\n+            }\n+\n+            start = m.end();\n+        }\n+\n+        l.add(makeTextTree(text.substring(start)));\n+        return l;\n+    }\n+\n@@ -456,1 +611,1 @@\n-    public void setDocCommentTree(Element element, List<? extends DocTree> fullBody,\n+    public DocCommentInfo setDocCommentTree(Element element, List<? extends DocTree> fullBody,\n@@ -459,1 +614,5 @@\n-        dcInfoMap.put(element, new DocCommentInfo(null, docTree));\n+        return setDocCommentInfo(element, new DocCommentInfo(null, docTree));\n+    }\n+\n+    public DocCommentInfo setDocCommentInfo(Element element, DocCommentInfo dci) {\n+        DocCommentInfo prev = dcInfoMap.put(element, dci);\n@@ -463,0 +622,1 @@\n+        return prev;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/CommentUtils.java","additions":187,"deletions":27,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-     * @param annotationDocTree content tree to which the preview information will be added\n+     * @param contentTree content tree to which the preview information will be added\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/PropertyWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,3 +28,10 @@\n-import java.text.MessageFormat;\n-import java.util.*;\n-\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.EnumMap;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n@@ -36,0 +43,1 @@\n+import javax.tools.Diagnostic;\n@@ -39,3 +47,1 @@\n-import com.sun.source.doctree.DocTree.Kind;\n-import com.sun.source.doctree.SinceTree;\n-import com.sun.source.doctree.UnknownBlockTagTree;\n+import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;\n@@ -50,1 +56,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.CommentUtils;\n@@ -261,2 +266,2 @@\n-                if (property != null) {\n-                    processProperty(member, property);\n+                if (property != null && member instanceof ExecutableElement ee) {\n+                    configuration.cmtUtils.updatePropertyMethodComment(ee, property);\n@@ -285,98 +290,0 @@\n-    \/**\n-     * Process the property method, property setter and\/or property getter\n-     * comment text so that it contains the documentation from\n-     * the property field. The method adds the leading sentence,\n-     * copied documentation including the defaultValue tag and\n-     * the see tags if the appropriate property getter and setter are\n-     * available.\n-     *\n-     * @param member the member which is to be augmented.\n-     * @param property the original property documentation.\n-     *\/\n-    private void processProperty(Element member,\n-                                 Element property) {\n-        CommentUtils cmtutils = configuration.cmtUtils;\n-        final boolean isSetter = isSetter(member);\n-        final boolean isGetter = isGetter(member);\n-\n-        List<DocTree> fullBody = new ArrayList<>();\n-        List<DocTree> blockTags = new ArrayList<>();\n-        if (isGetter || isSetter) {\n-            \/\/add \"[GS]ets the value of the property PROPERTY_NAME.\"\n-            if (isSetter) {\n-                String text = MessageFormat.format(\n-                        resources.getText(\"doclet.PropertySetterWithName\"),\n-                        utils.propertyName((ExecutableElement)member));\n-                fullBody.addAll(cmtutils.makeFirstSentenceTree(text));\n-            }\n-            if (isGetter) {\n-                String text = MessageFormat.format(\n-                        resources.getText(\"doclet.PropertyGetterWithName\"),\n-                        utils.propertyName((ExecutableElement) member));\n-                fullBody.addAll(cmtutils.makeFirstSentenceTree(text));\n-            }\n-            List<? extends DocTree> propertyTags = utils.getBlockTags(property,\n-                    t -> (t instanceof UnknownBlockTagTree tree)\n-                            && (tree.getTagName().equals(\"propertyDescription\")));\n-            if (propertyTags.isEmpty()) {\n-                List<? extends DocTree> comment = utils.getFullBody(property);\n-                blockTags.addAll(cmtutils.makePropertyDescriptionTree(comment));\n-            }\n-        } else {\n-            fullBody.addAll(utils.getFullBody(property));\n-        }\n-\n-        \/\/ copy certain tags\n-        List<? extends SinceTree> tags = utils.getBlockTags(property, Kind.SINCE, SinceTree.class);\n-        blockTags.addAll(tags);\n-\n-        List<? extends DocTree> bTags = utils.getBlockTags(property,\n-                t -> (t instanceof UnknownBlockTagTree tree)\n-                        && (tree.getTagName().equals(\"defaultValue\")));\n-        blockTags.addAll(bTags);\n-\n-        \/\/add @see tags\n-        if (!isGetter && !isSetter) {\n-            ExecutableElement getter = pHelper.getGetterForProperty((ExecutableElement)member);\n-            ExecutableElement setter = pHelper.getSetterForProperty((ExecutableElement)member);\n-\n-            if (null != getter) {\n-                StringBuilder sb = new StringBuilder(\"#\");\n-                sb.append(utils.getSimpleName(getter)).append(\"()\");\n-                blockTags.add(cmtutils.makeSeeTree(sb.toString(), getter));\n-            }\n-\n-            if (null != setter) {\n-                VariableElement param = setter.getParameters().get(0);\n-                StringBuilder sb = new StringBuilder(\"#\");\n-                sb.append(utils.getSimpleName(setter));\n-                if (!utils.isTypeVariable(param.asType())) {\n-                    sb.append(\"(\").append(utils.getTypeSignature(param.asType(), false, true)).append(\")\");\n-                }\n-                blockTags.add(cmtutils.makeSeeTree(sb.toString(), setter));\n-            }\n-        }\n-        cmtutils.setDocCommentTree(member, fullBody, blockTags);\n-    }\n-\n-    \/**\n-     * Test whether the method is a getter.\n-     * @param element property method documentation. Needs to be either property\n-     * method, property getter, or property setter.\n-     * @return true if the given documentation belongs to a getter.\n-     *\/\n-    private boolean isGetter(Element element) {\n-        final String pedName = element.getSimpleName().toString();\n-        return pedName.startsWith(\"get\") || pedName.startsWith(\"is\");\n-    }\n-\n-    \/**\n-     * Test whether the method is a setter.\n-     * @param element property method documentation. Needs to be either property\n-     * method, property getter, or property setter.\n-     * @return true if the given documentation belongs to a setter.\n-     *\/\n-    private boolean isSetter(Element element) {\n-        return element.getSimpleName().toString().startsWith(\"set\");\n-    }\n-\n@@ -462,0 +369,13 @@\n+    \/**\n+     * A utility class to manage the property-related methods that should be\n+     * synthesized or updated.\n+     *\n+     * A property may comprise a field (that is typically private, if present),\n+     * a {@code fooProperty()} method (which is the defining characteristic for\n+     * a property), a {@code getFoo()} method and\/or a {@code setFoo(Foo foo)} method.\n+     *\n+     * Either the field (if present) or the {@code fooProperty()} method should have a\n+     * comment. If there is no field, or no comment on the field, the description for\n+     * the property will be derived from the description of the {@code fooProperty()}\n+     * method. If any method does not have a comment, one will be provided.\n+     *\/\n@@ -489,8 +409,8 @@\n-            if (field == null || !builder.utils.hasDocCommentTree(field)) {\n-                addToPropertiesMap(propertyMethod, propertyMethod);\n-                addToPropertiesMap(getter, propertyMethod);\n-                addToPropertiesMap(setter, propertyMethod);\n-            } else {\n-                addToPropertiesMap(propertyMethod, field);\n-                addToPropertiesMap(getter, field);\n-                addToPropertiesMap(setter, field);\n+            \/\/ determine the preferred element from which to derive the property description\n+            Element e = field == null || !builder.utils.hasDocCommentTree(field)\n+                    ? propertyMethod : field;\n+\n+            if (e == field && builder.utils.hasDocCommentTree(propertyMethod)) {\n+                BaseConfiguration configuration = builder.configuration;\n+                configuration.getReporter().print(Diagnostic.Kind.WARNING,\n+                        propertyMethod, configuration.getDocResources().getText(\"doclet.duplicate.comment.for.property\"));\n@@ -498,0 +418,4 @@\n+\n+            addToPropertiesMap(propertyMethod, e);\n+            addToPropertiesMap(getter, e);\n+            addToPropertiesMap(setter, e);\n@@ -502,1 +426,2 @@\n-            if (null == propertyMethod || null == commentSource) {\n+            Objects.requireNonNull(commentSource);\n+            if (propertyMethod == null) {\n@@ -505,0 +430,1 @@\n+\n@@ -520,1 +446,1 @@\n-         * Returns the property field documentation belonging to the given member.\n+         * Returns the element for the property documentation belonging to the given member.\n@@ -522,1 +448,1 @@\n-         * @return the property field documentation, null if there is none.\n+         * @return the element for the property documentation, null if there is none.\n@@ -527,18 +453,0 @@\n-\n-        \/**\n-         * Returns the getter documentation belonging to the given property method.\n-         * @param propertyMethod the method for which the getter is needed.\n-         * @return the getter documentation, null if there is none.\n-         *\/\n-        public ExecutableElement getGetterForProperty(ExecutableElement propertyMethod) {\n-            return builder.getVisibleMemberTable().getPropertyGetter(propertyMethod);\n-        }\n-\n-        \/**\n-         * Returns the setter documentation belonging to the given property method.\n-         * @param propertyMethod the method for which the setter is needed.\n-         * @return the setter documentation, null if there is none.\n-         *\/\n-        public ExecutableElement getSetterForProperty(ExecutableElement propertyMethod) {\n-            return builder.getVisibleMemberTable().getPropertySetter(propertyMethod);\n-        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MemberSummaryBuilder.java","additions":44,"deletions":136,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -28,2 +28,4 @@\n-import java.util.*;\n-\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n@@ -34,0 +36,2 @@\n+import com.sun.source.doctree.DocCommentTree;\n+import com.sun.source.doctree.DocTree;\n@@ -35,0 +39,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.CommentUtils;\n@@ -39,1 +44,1 @@\n-import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;\n+import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.PROPERTIES;\n@@ -182,1 +187,19 @@\n-        writer.addTags(currentProperty, propertyDocTree);\n+        CommentUtils cmtUtils = configuration.cmtUtils;\n+        DocCommentTree dct = utils.getDocCommentTree(currentProperty);\n+        var fullBody = dct.getFullBody();\n+        ArrayList<DocTree> blockTags = dct.getBlockTags().stream()\n+                .filter(t -> t.getKind() != DocTree.Kind.RETURN)\n+                .collect(Collectors.toCollection(ArrayList::new));\n+        String sig = \"#\" + currentProperty.getSimpleName() + \"()\";\n+        blockTags.add(cmtUtils.makeSeeTree(sig, currentProperty));\n+        \/\/ The property method is used as a proxy for the property\n+        \/\/ (which does not have an explicit element of its own.)\n+        \/\/ Temporarily override the doc comment for the property method\n+        \/\/ by removing the `@return` tag, which should not be displayed for\n+        \/\/ the property.\n+        CommentUtils.DocCommentInfo prev = cmtUtils.setDocCommentTree(currentProperty, fullBody, blockTags);\n+        try {\n+            writer.addTags(currentProperty, propertyDocTree);\n+        } finally {\n+            cmtUtils.setDocCommentInfo(currentProperty, prev);\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/PropertyBuilder.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+doclet.PropertyGetterReturn=the value of the property {0}\n@@ -90,0 +91,2 @@\n+doclet.PropertySetterParam=the value for the property {0}\n+doclet.PropertyMethodReturn=the property {0}\n@@ -240,0 +243,2 @@\n+doclet.duplicate.comment.for.property=Duplicate comment for property.\\n\\\n+  Remove the comment on the property field or on this method to suppress this warning.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -354,2 +354,4 @@\n-     * Returns the property field associated with the property method.\n-     * @param propertyMethod the identifying property method\n+     * Returns the field for a property identified by any of the methods\n+     * for that property.\n+     *\n+     * @param ee the method\n@@ -358,1 +360,1 @@\n-    public VariableElement getPropertyField(ExecutableElement propertyMethod) {\n+    public VariableElement getPropertyField(ExecutableElement ee) {\n@@ -360,1 +362,1 @@\n-        PropertyMembers pm =  propertyMap.get(propertyMethod);\n+        PropertyMembers pm =  propertyMap.get(ee);\n@@ -365,2 +367,4 @@\n-     * Returns the getter method associated with the property method.\n-     * @param propertyMethod the identifying property method\n+     * Returns the getter method for a property identified by any of the methods\n+     * for that property.\n+     *\n+     * @param ee the method\n@@ -369,1 +373,1 @@\n-    public ExecutableElement getPropertyGetter(ExecutableElement propertyMethod) {\n+    public ExecutableElement getPropertyGetter(ExecutableElement ee) {\n@@ -371,1 +375,1 @@\n-        PropertyMembers pm =  propertyMap.get(propertyMethod);\n+        PropertyMembers pm =  propertyMap.get(ee);\n@@ -376,2 +380,4 @@\n-     * Returns the setter method associated with the property method.\n-     * @param propertyMethod the identifying property method\n+     * Returns the setter method for a property identified by any of the methods\n+     * for that property.\n+     *\n+     * @param ee the method\n@@ -380,1 +386,1 @@\n-    public ExecutableElement getPropertySetter(ExecutableElement propertyMethod) {\n+    public ExecutableElement getPropertySetter(ExecutableElement ee) {\n@@ -382,1 +388,1 @@\n-        PropertyMembers pm =  propertyMap.get(propertyMethod);\n+        PropertyMembers pm =  propertyMap.get(ee);\n@@ -386,0 +392,13 @@\n+    \/**\n+     * Returns the property method for a property identified by any of the methods\n+     * for that property.\n+     *\n+     * @param ee the method\n+     * @return the property method or null if absent\n+     *\/\n+    public ExecutableElement getPropertyMethod(ExecutableElement ee) {\n+        ensureInitialized();\n+        PropertyMembers pm =  propertyMap.get(ee);\n+        return pm == null ? null : pm.propertyMethod;\n+    }\n+\n@@ -820,1 +839,1 @@\n-            Map <String, List<Element>> map = memberMap.get(kind);\n+            Map<String, List<Element>> map = memberMap.get(kind);\n@@ -824,1 +843,9 @@\n-        List<Element> getPropertyMethods(String methodName, int argcount) {\n+        <T extends Element> List<T> getMembers(String key, Kind kind, Class<T> clazz) {\n+            Map<String, List<Element>> map = memberMap.get(kind);\n+            return map.getOrDefault(key, Collections.emptyList())\n+                    .stream()\n+                    .map(e -> clazz.cast(e))\n+                    .toList();\n+        }\n+\n+        List<ExecutableElement> getPropertyMethods(String methodName, int argcount) {\n@@ -827,0 +854,1 @@\n+                    .map(m -> (ExecutableElement) m)\n@@ -831,18 +859,2 @@\n-    \/**\n-     * The properties triad for a property method.\n-     *\/\n-    static class PropertyMembers {\n-        final VariableElement field;\n-        final ExecutableElement getter;\n-        final ExecutableElement setter;\n-\n-        PropertyMembers(VariableElement field, ExecutableElement getter, ExecutableElement setter) {\n-            this.field = field;\n-            this.getter = getter;\n-            this.setter = setter;\n-        }\n-\n-        public String toString() {\n-            return (\"field: \" + field + \", getter: \" + getter + \", setter: \" + setter);\n-        }\n-    }\n+    record PropertyMembers(ExecutableElement propertyMethod, VariableElement field,\n+                           ExecutableElement getter, ExecutableElement setter) { }\n@@ -904,2 +916,2 @@\n-            List<Element> flist = lmt.getMembers(baseName, Kind.FIELDS);\n-            Element field = flist.isEmpty() ? null : flist.get(0);\n+            List<VariableElement> flist = lmt.getMembers(baseName, Kind.FIELDS, VariableElement.class);\n+            VariableElement field = flist.isEmpty() ? null : flist.get(0);\n@@ -907,2 +919,2 @@\n-            Element getter = null, setter = null;\n-            List<Element> found = lmt.getPropertyMethods(pUtils.getGetName(propertyMethod), 0);\n+            ExecutableElement getter = null, setter = null;\n+            List<ExecutableElement> found = lmt.getPropertyMethods(pUtils.getGetName(propertyMethod), 0);\n@@ -917,1 +929,0 @@\n-                    String propertyTypeName = propertyMethod.getReturnType().toString();\n@@ -927,2 +938,2 @@\n-                for (Element e : found) {\n-                    if (pUtils.isValidSetterMethod((ExecutableElement)e)) {\n+                for (ExecutableElement e : found) {\n+                    if (pUtils.isValidSetterMethod(e)) {\n@@ -935,2 +946,8 @@\n-            propertyMap.put(propertyMethod, new PropertyMembers((VariableElement)field,\n-                    (ExecutableElement)getter, (ExecutableElement)setter));\n+            PropertyMembers pm = new PropertyMembers(propertyMethod, field, getter, setter);\n+            propertyMap.put(propertyMethod, pm);\n+            if (getter != null) {\n+                propertyMap.put(getter, pm);\n+            }\n+            if (setter != null) {\n+                propertyMap.put(setter, pm);\n+            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":59,"deletions":42,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+                \"-Xdoclint:all,-missing\",\n@@ -74,1 +75,1 @@\n-                    <div class=\"block\">Sets the value of the property rate.<\/div>\n+                    <div class=\"block\">Sets the value of the property <code>rate<\/code>.<\/div>\n@@ -81,1 +82,1 @@\n-                    <div class=\"block\">Gets the value of the property rate.<\/div>\n+                    <div class=\"block\">Gets the value of the property <code>rate<\/code>.<\/div>\n@@ -119,1 +120,1 @@\n-                    <div class=\"block\">Gets the value of the property paused.<\/div>\"\"\",\n+                    <div class=\"block\">Gets the value of the property <code>paused<\/code>.<\/div>\"\"\",\n@@ -126,1 +127,1 @@\n-                    <div class=\"block\">Sets the value of the property paused.<\/div>\n+                    <div class=\"block\">Sets the value of the property <code>paused<\/code>.<\/div>\n@@ -138,1 +139,1 @@\n-                    <div class=\"block\">Gets the value of the property paused.<\/div>\n+                    <div class=\"block\">Gets the value of the property <code>paused<\/code>.<\/div>\n@@ -153,14 +154,16 @@\n-                    <section class=\"detail\" id=\"setRate(double)\">\n-                    <h3>setRate<\/h3>\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n-                    span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">setRate<\/sp\\\n-                    an><wbr><span class=\"parameters\">(double&nbsp;value)<\/span><\/div>\n-                    <div class=\"block\">Sets the value of the property rate.<\/div>\n-                    <dl class=\"notes\">\n-                    <dt>Property description:<\/dt>\n-                    <dd>Defines the direction\/speed at which the <code>Timeline<\/code> is expected to\n-                     be played. This is the second line.<\/dd>\n-                    <dt>Default value:<\/dt>\n-                    <dd>11<\/dd>\n-                    <dt>Since:<\/dt>\n-                    <dd>JavaFX 8.0<\/dd>\"\"\",\n+                        <section class=\"detail\" id=\"setRate(double)\">\n+                        <h3>setRate<\/h3>\n+                        <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n+                        span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">setRate<\/sp\\\n+                        an><wbr><span class=\"parameters\">(double&nbsp;value)<\/span><\/div>\n+                        <div class=\"block\">Sets the value of the property <code>rate<\/code>.<\/div>\n+                        <dl class=\"notes\">\n+                        <dt>Property description:<\/dt>\n+                        <dd>Defines the direction\/speed at which the <code>Timeline<\/code> is expected to\n+                         be played. This is the second line.<\/dd>\n+                        <dt>Default value:<\/dt>\n+                        <dd>11<\/dd>\n+                        <dt>Parameters:<\/dt>\n+                        <dd><code>value<\/code> - the value for the property <code>rate<\/code><\/dd>\n+                        <dt>Since:<\/dt>\n+                        <dd>JavaFX 8.0<\/dd>\"\"\",\n@@ -168,14 +171,16 @@\n-                    <section class=\"detail\" id=\"getRate()\">\n-                    <h3>getRate<\/h3>\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n-                    span class=\"return-type\">double<\/span>&nbsp;<span class=\"element-name\">getRate<\/span>()<\\\n-                    \/div>\n-                    <div class=\"block\">Gets the value of the property rate.<\/div>\n-                    <dl class=\"notes\">\n-                    <dt>Property description:<\/dt>\n-                    <dd>Defines the direction\/speed at which the <code>Timeline<\/code> is expected to\n-                     be played. This is the second line.<\/dd>\n-                    <dt>Default value:<\/dt>\n-                    <dd>11<\/dd>\n-                    <dt>Since:<\/dt>\n-                    <dd>JavaFX 8.0<\/dd>\"\"\",\n+                        <section class=\"detail\" id=\"getRate()\">\n+                        <h3>getRate<\/h3>\n+                        <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n+                        span class=\"return-type\">double<\/span>&nbsp;<span class=\"element-name\">getRate<\/span>()<\\\n+                        \/div>\n+                        <div class=\"block\">Gets the value of the property <code>rate<\/code>.<\/div>\n+                        <dl class=\"notes\">\n+                        <dt>Property description:<\/dt>\n+                        <dd>Defines the direction\/speed at which the <code>Timeline<\/code> is expected to\n+                         be played. This is the second line.<\/dd>\n+                        <dt>Default value:<\/dt>\n+                        <dd>11<\/dd>\n+                        <dt>Returns:<\/dt>\n+                        <dd>the value of the property <code>rate<\/code><\/dd>\n+                        <dt>Since:<\/dt>\n+                        <dd>JavaFX 8.0<\/dd>\"\"\",\n@@ -224,1 +229,1 @@\n-                    <div class=\"block\">Gets the value of the property paused.<\/div>\"\"\",\n+                    <div class=\"block\">Gets the value of the property <code>paused<\/code>.<\/div>\"\"\",\n@@ -248,0 +253,1 @@\n+                \"-Xdoclint:all,-missing\",\n@@ -253,29 +259,53 @@\n-                    <section class=\"property-details\" id=\"property-detail\">\n-                    <h2>Property Details<\/h2>\n-                    <ul class=\"member-list\">\n-                    <li>\n-                    <section class=\"detail\" id=\"betaProperty\">\n-                    <h3>beta<\/h3>\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span c\\\n-                    lass=\"return-type\">java.lang.Object<\/span>&nbsp;<span class=\"element-name\">betaProperty<\\\n-                    \/span><\/div>\n-                    <\/section>\n-                    <\/li>\n-                    <li>\n-                    <section class=\"detail\" id=\"gammaProperty\">\n-                    <h3>gamma<\/h3>\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n-                    span class=\"return-type\">java.util.List&lt;java.lang.String&gt;<\/span>&nbsp;<spa\\\n-                    n class=\"element-name\">gammaProperty<\/span><\/div>\n-                    <\/section>\n-                    <\/li>\n-                    <li>\n-                    <section class=\"detail\" id=\"deltaProperty\">\n-                    <h3>delta<\/h3>\n-                    <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n-                    span class=\"return-type\">java.util.List&lt;java.util.Set&lt;? super java.lang.Ob\\\n-                    ject&gt;&gt;<\/span>&nbsp;<span class=\"element-name\">deltaProperty<\/span><\/div>\n-                    <\/section>\n-                    <\/li>\n-                    <\/ul>\n-                    <\/section>\"\"\",\n+                        <section class=\"property-details\" id=\"property-detail\">\n+                        <h2>Property Details<\/h2>\n+                        <ul class=\"member-list\">\n+                        <li>\n+                        <section class=\"detail\" id=\"betaProperty\">\n+                        <h3>beta<\/h3>\n+                        <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span c\\\n+                        lass=\"return-type\">java.lang.Object<\/span>&nbsp;<span class=\"element-name\">betaProperty<\\\n+                        \/span><\/div>\n+                        <dl class=\"notes\">\n+                        <dt>See Also:<\/dt>\n+                        <dd>\n+                        <ul class=\"see-list\">\n+                        <li><a href=\"#betaProperty()\"><code>betaProperty()<\/code><\/a><\/li>\n+                        <\/ul>\n+                        <\/dd>\n+                        <\/dl>\n+                        <\/section>\n+                        <\/li>\n+                        <li>\n+                        <section class=\"detail\" id=\"gammaProperty\">\n+                        <h3>gamma<\/h3>\n+                        <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n+                        span class=\"return-type\">java.util.List&lt;java.lang.String&gt;<\/span>&nbsp;<spa\\\n+                        n class=\"element-name\">gammaProperty<\/span><\/div>\n+                        <dl class=\"notes\">\n+                        <dt>See Also:<\/dt>\n+                        <dd>\n+                        <ul class=\"see-list\">\n+                        <li><a href=\"#gammaProperty()\"><code>gammaProperty()<\/code><\/a><\/li>\n+                        <\/ul>\n+                        <\/dd>\n+                        <\/dl>\n+                        <\/section>\n+                        <\/li>\n+                        <li>\n+                        <section class=\"detail\" id=\"deltaProperty\">\n+                        <h3>delta<\/h3>\n+                        <div class=\"member-signature\"><span class=\"modifiers\">public final<\/span>&nbsp;<\\\n+                        span class=\"return-type\">java.util.List&lt;java.util.Set&lt;? super java.lang.Ob\\\n+                        ject&gt;&gt;<\/span>&nbsp;<span class=\"element-name\">deltaProperty<\/span><\/div>\n+                        <dl class=\"notes\">\n+                        <dt>See Also:<\/dt>\n+                        <dd>\n+                        <ul class=\"see-list\">\n+                        <li><a href=\"#deltaProperty()\"><code>deltaProperty()<\/code><\/a><\/li>\n+                        <\/ul>\n+                        <\/dd>\n+                        <\/dl>\n+                        <\/section>\n+                        <\/li>\n+                        <\/ul>\n+                        <\/section>\"\"\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/TestJavaFX.java","additions":93,"deletions":63,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -0,0 +1,423 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8270195\n+ * @summary Add missing links between methods of JavaFX properties\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestJavaFXCombo\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+\/**\n+ * Combo-test for JavaFX properties and related methods.\n+ * The test generates instances of a class with various combinations of\n+ * a property field, property method, getter method and setter method,\n+ * each in combinations of with and without doc comments.\n+ * For each instance, it runs javadoc and verifies the generated\n+ * code and any diagnostics are as expected.\n+ *\/\n+public class TestJavaFXCombo extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestJavaFXCombo tester = new TestJavaFXCombo(args);\n+        tester.runTests(m -> new Object[] { Path.of(m.getName())});\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+    enum Kind { NONE, NO_COMMENT, COMMENT }\n+\n+    private final Set<Kind> fieldValues = EnumSet.allOf(Kind.class);\n+    private final Set<Kind> propertyMethodValues = EnumSet.allOf(Kind.class);\n+    private final Set<Kind> getterMethodValues = EnumSet.allOf(Kind.class);\n+    private final Set<Kind> setterMethodValues = EnumSet.allOf(Kind.class);\n+\n+    TestJavaFXCombo(String... args) {\n+        \/\/ for testing, allow subsets of combinations to be specified\n+        for (int i = 0; i < args.length; i++) {\n+            String arg = args[1];\n+            switch (arg) {\n+                case \"-f\" -> set(fieldValues, args[++i]);\n+                case \"-p\" -> set(propertyMethodValues, args[++i]);\n+                case \"-g\" -> set(getterMethodValues, args[++i]);\n+                case \"-s\" -> set(setterMethodValues, args[++i]);\n+            }\n+        }\n+\n+        \/\/ A property method is always required for any property,\n+        propertyMethodValues.remove(Kind.NONE);\n+\n+    }\n+\n+    private void set(Set<Kind> set, String values) {\n+        set.clear();\n+        for (String v : values.split(\"[, ]\")) {\n+            set.add(Kind.valueOf(v));\n+        }\n+    }\n+\n+    @Test\n+    public void test(Path base) throws IOException {\n+        for (Kind pk : propertyMethodValues) {\n+            for (Kind fk : fieldValues) {\n+                for (Kind gk : getterMethodValues) {\n+                    for (Kind sk: setterMethodValues) {\n+                        test(base, fk, pk, gk, sk);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    void test(Path base, Kind fk, Kind pk, Kind gk, Kind sk) throws IOException {\n+        String description = \"Field:\" + fk + \" Property:\" + pk + \" Getter:\" + gk + \" Setter:\" + sk;\n+        out.println(\"Test: \" + description);\n+        Path sub = base.resolve(String.format(\"%s-%s-%s-%s\", abbrev(fk), abbrev(pk), abbrev(gk), abbrev(sk)));\n+        Path src = sub.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/** Dummy property class. *\/\n+                public class BooleanProperty { }\n+                \"\"\", \"\"\"\n+                package p;\n+                \/** Class comment. ## *\/\n+                public class C {\n+                \"\"\".replace(\"##\", description)\n+                + getFieldText(fk)\n+                + getPropertyMethodText(pk)\n+                + getGetterMethodText(gk)\n+                + getSetterMethodText(sk)\n+                + \"\"\"\n+                }\n+                \"\"\"\n+        );\n+\n+        javadoc(\"-d\", sub.resolve(\"api\").toString(),\n+                \"-javafx\",\n+                \"--disable-javafx-strict-checks\",\n+                \"-Xdoclint:all,-missing\",\n+                \"-nohelp\", \"-noindex\",\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+        checkField(fk, pk, gk, sk);\n+        checkGetter(fk, pk, gk, sk);\n+        checkSetter(fk, pk, gk, sk);\n+        checkPropertyMethod(fk, pk, gk, sk);\n+        checkDiags(fk, pk, gk, sk);\n+    }\n+\n+    void checkField(Kind fk, Kind pk, Kind gk, Kind sk) {\n+        \/\/ the field is private and so should never show up\n+        checkOutput(\"p\/C.html\", false,\n+                \"field.detail\");\n+    }\n+\n+    void checkGetter(Kind fk, Kind pk, Kind gk, Kind sk) {\n+        switch (gk) {\n+            case NONE ->\n+                    checkOutput(\"p\/C.html\", false,\n+                            \"getExample\");\n+\n+            case NO_COMMENT ->\n+                    \/\/ comment gets auto-created\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"getExample()\">\n+                                <h3>getExample<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">boolean<\/span>&nbsp;<span class=\"element-name\">getExample<\/span>()<\/div>\n+                                <div class=\"block\">Gets the value of the property <code>example<\/code>.<\/div>\n+                                <dl class=\"notes\">\n+                                <dt>Property description:<\/dt>\n+                                #DESC#\n+                                <dt>Returns:<\/dt>\n+                                <dd>the value of the property <code>example<\/code><\/dd>\n+                                #SEE#\n+                                <\/dl>\n+                                <\/section>\n+                                \"\"\"\n+                                .replace(\"#DESC#\", getPropertyDescription(fk, pk))\n+                                .replace(\"#SEE#\", getSee(pk, null, sk))\n+                                .replaceAll(\"\\n\\n\", \"\\n\")\n+                            );\n+\n+            case COMMENT ->\n+                    \/\/ existing comments do not get modified\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"getExample()\">\n+                                <h3>getExample<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">boolean<\/span>&nbsp;<span class=\"element-name\">getExample<\/span>()<\/div>\n+                                <div class=\"block\">Getter method description. More getter method description.<\/div>\n+                                <dl class=\"notes\">\n+                                <dt>Returns:<\/dt>\n+                                <dd>the property <code>example<\/code><\/dd>\n+                                <\/dl>\n+                                <\/section>\n+                                    \"\"\");\n+        }\n+    }\n+\n+    void checkSetter(Kind fk, Kind pk, Kind gk, Kind sk) {\n+        switch (sk) {\n+            case NONE ->\n+                    checkOutput(\"p\/C.html\", false,\n+                            \"setExample\");\n+\n+            case NO_COMMENT ->\n+                    \/\/ comment gets auto-created\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"setExample(boolean)\">\n+                                <h3>setExample<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">setExample<\/span><wbr><span class=\"parameters\">(boolean&nbsp;b)<\/span><\/div>\n+                                <div class=\"block\">Sets the value of the property <code>example<\/code>.<\/div>\n+                                <dl class=\"notes\">\n+                                <dt>Property description:<\/dt>\n+                                #DESC#\n+                                <dt>Parameters:<\/dt>\n+                                <dd><code>b<\/code> - the value for the property <code>example<\/code><\/dd>\n+                                #SEE#\n+                                <\/dl>\n+                                <\/section>\n+                                \"\"\"\n+                                .replace(\"#DESC#\", getPropertyDescription(fk, pk))\n+                                .replace(\"#SEE#\", getSee(pk, gk, null))\n+                                .replaceAll(\"\\n\\n\", \"\\n\"));\n+\n+            case COMMENT ->\n+                    \/\/ existing comments do not get modified\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"setExample(boolean)\">\n+                                <h3>setExample<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\">void<\/span>&nbsp;<span class=\"element-name\">setExample<\/span><wbr><span class=\"parameters\">(boolean&nbsp;b)<\/span><\/div>\n+                                <div class=\"block\">Setter method description. More setter method description.<\/div>\n+                                <dl class=\"notes\">\n+                                <dt>Parameters:<\/dt>\n+                                <dd><code>b<\/code> - the new value for the property<\/dd>\n+                                <\/dl>\n+                                <\/section>\n+                                \"\"\");\n+        }\n+    }\n+\n+    void checkPropertyMethod(Kind fk, Kind pk, Kind gk, Kind sk) {\n+        switch (pk) {\n+            case NONE ->\n+                    \/\/ should not happen; there is always a property method\n+                    throw new IllegalArgumentException();\n+\n+            case NO_COMMENT ->\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"exampleProperty()\">\n+                                <h3>exampleProperty<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\"><a href=\"BooleanProperty.html\" title=\"class in p\">BooleanProperty<\/a><\/span>&nbsp;<span class=\"element-name\">exampleProperty<\/span>()<\/div>\n+                                #PCOMM#\n+                                <dl class=\"notes\">\n+                                <dt>Returns:<\/dt>\n+                                <dd>the property <code>example<\/code><\/dd>\n+                                #SEE#\n+                                <\/dl>\n+                                <\/section>\n+                                \"\"\"\n+                                .replace(\"#PCOMM#\", getPropertyMethodComment(fk, pk))\n+                                .replace(\"#SEE#\", getSee(null, gk, sk))\n+                                .replaceAll(\"\\n\\n\", \"\\n\"));\n+\n+            case COMMENT ->\n+                    \/\/ @see tags are added to an existing method if it is the primary source of info\n+                    \/\/ for the property (i.e. there is no comment on a corresponding property field.\n+                    checkOutput(\"p\/C.html\", true,\n+                            \"\"\"\n+                                <section class=\"detail\" id=\"exampleProperty()\">\n+                                <h3>exampleProperty<\/h3>\n+                                <div class=\"member-signature\"><span class=\"modifiers\">public<\/span>&nbsp;<span class=\"return-type\"><a href=\"BooleanProperty.html\" title=\"class in p\">BooleanProperty<\/a><\/span>&nbsp;<span class=\"element-name\">exampleProperty<\/span>()<\/div>\n+                                <div class=\"block\">Property method description. More property method description.<\/div>\n+                                <dl class=\"notes\">\n+                                <dt>Returns:<\/dt>\n+                                <dd>the property <code>example<\/code><\/dd>\n+                                #SEE#\n+                                <\/dl>\n+                                <\/section>\n+                                \"\"\"\n+                                .replace(\"#SEE#\", (fk == Kind.COMMENT ? \"\" : getSee(null, gk, sk)))\n+                                .replaceAll(\"\\n\\n\", \"\\n\"));\n+        }\n+    }\n+\n+    void checkDiags(Kind fk, Kind pk, Kind gk, Kind sk) {\n+        \/\/ A warning is generated if there is a comment on both the property field and property method\n+        checkOutput(Output.OUT, (fk == Kind.COMMENT && pk == Kind.COMMENT),\n+                \"warning: Duplicate comment for property\",\n+                \"Remove the comment on the property field or on this method to suppress this warning.\");\n+    }\n+\n+    String getPropertyComment(Kind fk, Kind pk) {\n+        return switch (fk) {\n+            case NONE, NO_COMMENT ->\n+                    switch (pk) {\n+                        case NONE, NO_COMMENT ->\n+                                \"\";\n+\n+                        case COMMENT ->\n+                                \"Property method description. More property method description.\";\n+                    };\n+\n+            case COMMENT ->\n+                    \"Field description. More field description.\";\n+        };\n+    }\n+\n+    String getPropertyDescription(Kind fk, Kind pk) {\n+        String s = getPropertyComment(fk, pk);\n+        return s.isEmpty() ? s : \"<dd>\" + s + \"<\/dd>\";\n+    }\n+\n+    String getPropertyMethodComment(Kind fk, Kind pk) {\n+        String s = getPropertyComment(fk, pk);\n+        return s.isEmpty() ? s : \"<div class=\\\"block\\\">\" + s + \"<\/div>\";\n+    }\n+\n+    String getSee(Kind pk, Kind gk, Kind sk) {\n+        StringBuilder sb = new StringBuilder();\n+        if (gk != null && gk != Kind.NONE) {\n+            sb.append(\"\"\"\n+                <li><a href=\"#getExample()\"><code>getExample()<\/code><\/a><\/li>\n+                \"\"\");\n+        }\n+        if (sk != null && sk != Kind.NONE) {\n+            sb.append(\"\"\"\n+                <li><a href=\"#setExample(boolean)\"><code>setExample(boolean)<\/code><\/a><\/li>\n+                \"\"\");\n+        }\n+        if (pk != null && pk != Kind.NONE) {\n+            sb.append(\"\"\"\n+                <li><a href=\"#exampleProperty()\"><code>exampleProperty()<\/code><\/a><\/li>\n+                \"\"\");\n+        }\n+        return sb.isEmpty() ? \"\" : \"\"\"\n+                <dt>See Also:<\/dt>\n+                <dd>\n+                <ul class=\"see-list\">\n+                \"\"\" + sb + \"\"\"\n+                <\/ul>\n+                <\/dd>\"\"\";\n+    }\n+\n+    String abbrev(Kind k) {\n+        return k.name().substring(0, 4);\n+    }\n+\n+    String getFieldText(Kind fk) {\n+        return switch (fk) {\n+            case NONE -> \"\"\"\n+                    \/\/ no field declaration\n+                    \"\"\";\n+\n+            case NO_COMMENT -> \"\"\"\n+                    \/\/ no field comment\n+                    private BooleanProperty example;\n+                    \"\"\";\n+\n+            case COMMENT -> \"\"\"\n+                    \/** Field description. More field description. *\/\n+                    private BooleanProperty example;\n+                    \"\"\";\n+        };\n+    }\n+\n+    String getPropertyMethodText(Kind fk) {\n+        return switch (fk) {\n+            case NONE -> \"\"\"\n+                    \/\/ no property method declaration\n+                    \"\"\";\n+\n+            case NO_COMMENT -> \"\"\"\n+                    \/\/ no property method comment\n+                    public BooleanProperty exampleProperty();\n+                    \"\"\";\n+\n+            case COMMENT -> \"\"\"\n+                    \/**\n+                     * Property method description. More property method description.\n+                     * @return the property {@code example}\n+                     *\/\n+                    public BooleanProperty exampleProperty();\n+                    \"\"\";\n+        };\n+    }\n+\n+    String getGetterMethodText(Kind fk) {\n+        return switch (fk) {\n+            case NONE -> \"\"\"\n+                    \/\/ no getter method declaration\n+                    \"\"\";\n+\n+            case NO_COMMENT -> \"\"\"\n+                    \/\/ no getter method comment\n+                    public boolean getExample();\n+                    \"\"\";\n+\n+            case COMMENT -> \"\"\"\n+                    \/**\n+                     * Getter method description. More getter method description.\n+                     * @return the property {@code example}\n+                     *\/\n+                    public boolean getExample();\n+                    \"\"\";\n+        };\n+    }\n+\n+    String getSetterMethodText(Kind fk) {\n+        return switch (fk) {\n+            case NONE -> \"\"\"\n+                    \/\/ no setter method declaration\n+                    \"\"\";\n+\n+            case NO_COMMENT -> \"\"\"\n+                    \/\/ no setter method comment\n+                    public void setExample(boolean b);\n+                    \"\"\";\n+\n+            case COMMENT -> \"\"\"\n+                    \/**\n+                     * Setter method description. More setter method description.\n+                     * @param b the new value for the property\n+                     *\/\n+                    public void setExample(boolean b);\n+                    \"\"\";\n+        };\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/TestJavaFXCombo.java","additions":423,"deletions":0,"binary":false,"changes":423,"status":"added"},{"patch":"@@ -95,1 +95,1 @@\n-                    <div class=\"block\">Gets the value of the property value.<\/div>\n+                    <div class=\"block\">Gets the value of the property <code>value<\/code>.<\/div>\n@@ -99,0 +99,8 @@\n+                    <dt>Returns:<\/dt>\n+                    <dd>the value of the property <code>value<\/code><\/dd>\n+                    <dt>See Also:<\/dt>\n+                    <dd>\n+                    <ul class=\"see-list\">\n+                    <li><a href=\"#valueProperty()\"><code>valueProperty()<\/code><\/a><\/li>\n+                    <\/ul>\n+                    <\/dd>\n@@ -151,1 +159,1 @@\n-                    <div class=\"block\">Gets the value of the property value.<\/div>\n+                    <div class=\"block\">Gets the value of the property <code>value<\/code>.<\/div>\n@@ -155,0 +163,8 @@\n+                    <dt>Returns:<\/dt>\n+                    <dd>the value of the property <code>value<\/code><\/dd>\n+                    <dt>See Also:<\/dt>\n+                    <dd>\n+                    <ul class=\"see-list\">\n+                    <li><a href=\"#valueProperty()\"><code>valueProperty()<\/code><\/a><\/li>\n+                    <\/ul>\n+                    <\/dd>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/TestJavaFXMissingPropComments.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-\n@@ -33,2 +32,2 @@\n-    public final  List<String> gammaProperty()  {return null;}\n-    public final List<Set<? super Object>> deltaProperty() {return null;}\n+    public final List<String> gammaProperty()  { return null;}\n+    public final List<Set<? super Object>> deltaProperty() { return null;}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testJavaFX\/pkg2\/Test.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+                \"-Xdoclint:all,-missing\",\n@@ -66,0 +67,1 @@\n+                    <li><a href=\"#goodProperty()\"><code>goodProperty()<\/code><\/a><\/li>\n@@ -82,0 +84,1 @@\n+                    <li><a href=\"#badProperty()\"><code>badProperty()<\/code><\/a><\/li>\n@@ -120,0 +123,1 @@\n+                    <li><a href=\"#listProperty()\"><code>listProperty()<\/code><\/a><\/li>\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testProperty\/TestProperty.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}