{"files":[{"patch":"@@ -58,2 +58,1 @@\n-  ShenandoahHeuristics(),\n-  _heap_stats(heap_stats),\n+  ShenandoahHeuristics(heap_stats),\n@@ -88,1 +87,1 @@\n-  size_t capacity    = ShenandoahHeap::heap()->soft_max_capacity();\n+  size_t capacity    = _heap_stats->soft_max_capacity();\n@@ -132,1 +131,1 @@\n-  size_t available = ShenandoahHeap::heap()->free_set()->available();\n+  size_t available = _heap_stats->available();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -104,2 +104,0 @@\n-  ShenandoahHeapStats* _heap_stats;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-ShenandoahAggressiveHeuristics::ShenandoahAggressiveHeuristics() : ShenandoahHeuristics() {\n+ShenandoahAggressiveHeuristics::ShenandoahAggressiveHeuristics(ShenandoahHeapStats* heap_stats) :\n+  ShenandoahHeuristics(heap_stats) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  ShenandoahAggressiveHeuristics();\n+  ShenandoahAggressiveHeuristics(ShenandoahHeapStats* heap_stats);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-ShenandoahCompactHeuristics::ShenandoahCompactHeuristics() : ShenandoahHeuristics() {\n+ShenandoahCompactHeuristics::ShenandoahCompactHeuristics(ShenandoahHeapStats* heap_stats) :\n+  ShenandoahHeuristics(heap_stats) {\n@@ -48,5 +49,3 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-\n-  size_t max_capacity = heap->max_capacity();\n-  size_t capacity = heap->soft_max_capacity();\n-  size_t available = heap->free_set()->available();\n+  size_t max_capacity = _heap_stats->max_capacity();\n+  size_t capacity = _heap_stats->soft_max_capacity();\n+  size_t available = _heap_stats->available();\n@@ -68,1 +67,1 @@\n-  size_t bytes_allocated = heap->bytes_allocated_since_gc_start();\n+  size_t bytes_allocated = _heap_stats->bytes_allocated_since_gc_start();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  ShenandoahCompactHeuristics();\n+  ShenandoahCompactHeuristics(ShenandoahHeapStats* heap_stats);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-ShenandoahHeuristics::ShenandoahHeuristics() :\n+ShenandoahHeuristics::ShenandoahHeuristics(ShenandoahHeapStats* heap_stats) :\n+  _heap_stats(heap_stats),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeapStats.hpp\"\n+#include \"gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp\"\n@@ -72,0 +74,3 @@\n+  \/\/ Source of information about the heap\n+  ShenandoahHeapStats* _heap_stats;\n+\n@@ -96,1 +101,1 @@\n-  ShenandoahHeuristics();\n+  ShenandoahHeuristics(ShenandoahHeapStats* heap_stats);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+ShenandoahPassiveHeuristics::ShenandoahPassiveHeuristics(ShenandoahHeapStats* heap_stats) :\n+  ShenandoahHeuristics(heap_stats) {}\n+\n@@ -56,1 +59,1 @@\n-  size_t max_capacity = ShenandoahHeap::heap()->max_capacity();\n+  size_t max_capacity = _heap_stats->max_capacity();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+  ShenandoahPassiveHeuristics(ShenandoahHeapStats* heap_stats);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-ShenandoahStaticHeuristics::ShenandoahStaticHeuristics() : ShenandoahHeuristics() {\n+ShenandoahStaticHeuristics::ShenandoahStaticHeuristics(ShenandoahHeapStats* heap_stats) :\n+  ShenandoahHeuristics(heap_stats) {\n@@ -43,5 +44,3 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-\n-  size_t max_capacity = heap->max_capacity();\n-  size_t capacity = heap->soft_max_capacity();\n-  size_t available = heap->free_set()->available();\n+  size_t max_capacity = _heap_stats->max_capacity();\n+  size_t capacity = _heap_stats->soft_max_capacity();\n+  size_t available = _heap_stats->available();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  ShenandoahStaticHeuristics();\n+  ShenandoahStaticHeuristics(ShenandoahHeapStats* heap_stats);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -72,1 +73,1 @@\n-    return new ShenandoahAggressiveHeuristics();\n+    return new ShenandoahAggressiveHeuristics(heap);\n@@ -74,1 +75,1 @@\n-    return new ShenandoahStaticHeuristics();\n+    return new ShenandoahStaticHeuristics(heap);\n@@ -76,1 +77,1 @@\n-    return new ShenandoahAdaptiveHeuristics(ShenandoahHeap::heap());\n+    return new ShenandoahAdaptiveHeuristics(heap);\n@@ -78,1 +79,1 @@\n-    return new ShenandoahCompactHeuristics();\n+    return new ShenandoahCompactHeuristics(heap);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  return new ShenandoahPassiveHeuristics();\n+  return new ShenandoahPassiveHeuristics(ShenandoahHeap::heap());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -60,1 +61,1 @@\n-    return new ShenandoahAggressiveHeuristics();\n+    return new ShenandoahAggressiveHeuristics(heap);\n@@ -62,1 +63,1 @@\n-    return new ShenandoahStaticHeuristics();\n+    return new ShenandoahStaticHeuristics(heap);\n@@ -64,1 +65,1 @@\n-    return new ShenandoahAdaptiveHeuristics(ShenandoahHeap::heap());\n+    return new ShenandoahAdaptiveHeuristics(heap);\n@@ -66,1 +67,1 @@\n-    return new ShenandoahCompactHeuristics();\n+    return new ShenandoahCompactHeuristics(heap);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}