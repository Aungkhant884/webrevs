{"files":[{"patch":"@@ -55,0 +55,11 @@\n+\/*\n+ * The adaptive heuristic tracks the allocation behavior and average cycle\n+ * time of the application. It attempts to start a cycle with enough time\n+ * to complete before the available memory is exhausted. It errors on the\n+ * side of starting cycles early to avoid allocation failures (degenerated\n+ * cycles).\n+ *\n+ * This heuristic limits the number of regions for evacuation such that the\n+ * evacuation reserve is respected. This helps it avoid allocation failures\n+ * during evacuation. It preferentially selects regions with the most garbage.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,4 @@\n+\/*\n+ * This is a diagnostic heuristic that continuously runs collections\n+ * cycles and adds every region with any garbage to the collection set.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAggressiveHeuristics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,4 @@\n+\/*\n+ * This heuristic has simpler triggers than the adaptive heuristic. The\n+ * size of the collection set is limited to 3\/4 of available memory.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,7 @@\n+\/*\n+ * The purpose of this interface is to decouple the heuristics from a\n+ * direct dependency on the ShenandoahHeap singleton instance. This is\n+ * done to facilitate future unit testing of the heuristics and to support\n+ * future operational modes of Shenandoah in which the heap may be split\n+ * into generations.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeapStats.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,0 +63,5 @@\n+\/*\n+ * Shenandoah heuristics are primarily responsible for deciding when to start\n+ * a collection cycle and choosing which regions will be evacuated during the\n+ * cycle.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,9 @@\n+\/*\n+ * The passive heuristic is for use only with the passive mode. In\n+ * the passive mode, Shenandoah only performs STW (i.e., degenerated)\n+ * collections. All the barriers are disabled and there are no concurrent\n+ * activities. Therefore, this heuristic _never_ triggers a cycle. It\n+ * will select regions for evacuation based on ShenandoahEvacReserve,\n+ * ShenandoahEvacWaste and ShenandoahGarbageThreshold. Note that it does\n+ * not attempt to evacuate regions with more garbage.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,5 @@\n+\/*\n+ * The static heuristic will trigger cycles if the available memory falls\n+ * below ShenandoahMinFreeThreshold percentage of total capacity. This\n+ * heuristic will attempt to evacuation any region with any garbage.\n+ *\/\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}