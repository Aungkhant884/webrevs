{"files":[{"patch":"@@ -37,0 +37,27 @@\n+\/\/ Note: 'double' and 'long long' have 32-bits alignment on x86.\n+static jlong* double_quadword(jlong *adr, jlong lo, jlong hi) {\n+  \/\/ Use the expression (adr)&(~0xF) to provide 128-bits aligned address\n+  \/\/ of 128-bits operands for SSE instructions.\n+  jlong *operand = (jlong*)(((uintptr_t)adr)&((uintptr_t)(~0xF)));\n+  \/\/ Store the value to a 128-bits operand.\n+  operand[0] = lo;\n+  operand[1] = hi;\n+  return operand;\n+}\n+\n+\/\/ Buffer for 128-bits masks used by SSE instructions.\n+static jlong fp_signmask_pool[(4+1)*2]; \/\/ 4*128bits(data) + 128bits(alignment)\n+\n+\/\/ Static initialization during VM startup.\n+static jlong *float_signflip_pool  = double_quadword(&fp_signmask_pool[3*2], CONST64(0x8000000080000000), CONST64(0x8000000080000000));\n+static jlong *double_signflip_pool = double_quadword(&fp_signmask_pool[4*2], CONST64(0x8000000000000000), CONST64(0x8000000000000000));\n+\n+  \/\/ Float masks come from different places depending on platform.\n+#ifdef _LP64\n+  static address float_signflip()  { return StubRoutines::x86::float_sign_flip(); }\n+  static address double_signflip() { return StubRoutines::x86::double_sign_flip(); }\n+#else\n+  static address float_signflip()  { return (address)float_signflip_pool; }\n+  static address double_signflip() { return (address)double_signflip_pool; }\n+#endif\n+\n@@ -1048,0 +1075,36 @@\n+\/\/ Float\/Double signum\n+void C2_MacroAssembler::signum_fp(int opcode, XMMRegister dst,\n+                                  XMMRegister zero, XMMRegister one,\n+                                  Register scratch) {\n+  assert(opcode == Op_SignumF || opcode == Op_SignumD, \"sanity\");\n+\n+  Label DONE_LABEL;\n+\n+  if (opcode == Op_SignumF){\n+    assert(UseSSE > 0, \"required\");\n+    ucomiss(dst, zero);\n+  } else if (opcode == Op_SignumD){\n+    assert(UseSSE > 1, \"required\");\n+    ucomisd(dst, zero);\n+  }\n+\n+  jcc(Assembler::equal, DONE_LABEL);    \/\/ handle special case +0.0\/-0.0, if argument is +0.0\/-0.0, return argument\n+  jcc(Assembler::parity, DONE_LABEL);   \/\/ handle special case NaN, if argument NaN, return NaN\n+\n+  if (opcode == Op_SignumF){\n+    movflt(dst, one);\n+  } else if (opcode == Op_SignumD){\n+    movdbl(dst, one);\n+  }\n+\n+  jcc(Assembler::above, DONE_LABEL);\n+\n+  if (opcode == Op_SignumF){\n+    xorps(dst, ExternalAddress(float_signflip()), scratch);\n+  } else if (opcode == Op_SignumD){\n+    xorpd(dst, ExternalAddress(double_signflip()), scratch);\n+  }\n+\n+  bind(DONE_LABEL);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -92,0 +92,4 @@\n+  void signum_fp(int opcode, XMMRegister dst,\n+                 XMMRegister zero, XMMRegister one,\n+                 Register scratch);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1703,0 +1703,3 @@\n+  if (FLAG_IS_DEFAULT(UseSignumIntrinsic)) {\n+      FLAG_SET_DEFAULT(UseSignumIntrinsic, true);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1602,0 +1602,10 @@\n+    case Op_SignumF:\n+      if (UseSSE < 1) {\n+        return false;\n+      }\n+      break;\n+    case Op_SignumD:\n+      if (UseSSE < 2) {\n+        return false;\n+      }\n+      break;\n@@ -5778,0 +5788,26 @@\n+\/\/ --------------------------------- Signum ---------------------------\n+\n+instruct signumF_reg(regF dst, regF zero, regF one, rRegP scratch, rFlagsReg cr) %{\n+  predicate(UseSSE>=1);\n+  match(Set dst (SignumF dst (Binary zero one)));\n+  effect(TEMP scratch, KILL cr);\n+  format %{ \"signumF $dst, $dst\\t! using $scratch as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    __ signum_fp(opcode, $dst$$XMMRegister, $zero$$XMMRegister, $one$$XMMRegister, $scratch$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct signumD_reg(regD dst, regD zero, regD one, rRegP scratch, rFlagsReg cr) %{\n+  predicate(UseSSE>=2);\n+  match(Set dst (SignumD dst (Binary zero one)));\n+  effect(TEMP scratch, KILL cr);\n+  format %{ \"signumD $dst, $dst\\t! using $scratch as TEMP\" %}\n+  ins_encode %{\n+    int opcode = this->ideal_Opcode();\n+    __ signum_fp(opcode, $dst$$XMMRegister, $zero$$XMMRegister, $one$$XMMRegister, $scratch$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1693,2 +1693,2 @@\n-  case vmIntrinsics::_dsignum: return inline_double_math(id);\n-  case vmIntrinsics::_fsignum: return inline_math(id);\n+  case vmIntrinsics::_dsignum: return Matcher::match_rule_supported(Op_SignumD) ? inline_double_math(id) : false;\n+  case vmIntrinsics::_fsignum: return Matcher::match_rule_supported(Op_SignumF) ? inline_math(id) : false;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @requires os.arch==\"aarch64\"\n@@ -103,1 +102,1 @@\n-            Asserts.assertEQ(expected, calculated, \"Unexpected float result\");\n+            Asserts.assertEQ(expected, calculated, \"Unexpected float result from \" + arg);\n@@ -115,1 +114,1 @@\n-            Asserts.assertEQ(expected, calculated, \"Unexpected double result\");\n+            Asserts.assertEQ(expected, calculated, \"Unexpected double result from \" + arg);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestSignumIntrinsic.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) Intel, 2021 All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class Signum {\n+\n+    private final int ITERATIONS = 15000;\n+\n+    private double doubleValue = 1D;\n+    private float floatValue = 1F;\n+\n+    private static final float[] float_values = {\n+        123.4f,\n+        -56.7f,\n+        7e30f,\n+        -0.3e30f,\n+        Float.MAX_VALUE,\n+        -Float.MAX_VALUE,\n+        Float.MIN_VALUE,\n+        -Float.MIN_VALUE,\n+        0.0f,\n+        -0.0f,\n+        Float.POSITIVE_INFINITY,\n+        Float.NEGATIVE_INFINITY,\n+        Float.NaN,\n+        Float.MIN_NORMAL,\n+        -Float.MIN_NORMAL,\n+        0x0.0002P-126f,\n+        -0x0.0002P-126f\n+    };\n+\n+    private static final double[] double_values = {\n+        123.4d,\n+        -56.7d,\n+        7e30d,\n+        -0.3e30d,\n+        Double.MAX_VALUE,\n+        -Double.MAX_VALUE,\n+        Double.MIN_VALUE,\n+        -Double.MIN_VALUE,\n+        0.0d,\n+        -0.0d,\n+        Double.POSITIVE_INFINITY,\n+        Double.NEGATIVE_INFINITY,\n+        Double.NaN,\n+        Double.MIN_NORMAL,\n+        -Double.MIN_NORMAL,\n+        0x0.00000001P-1022,\n+        -0x0.00000001P-1022,\n+    };\n+\n+    private static double Signum_Kernel(double data)\n+    {\n+        return Math.signum(data);\n+    }\n+\n+    private static float Signum_Kernel(float data)\n+    {\n+        return Math.signum(data);\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _1_signumFloatTest(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (float f : float_values) {\n+                bh.consume(Signum_Kernel(f));\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _2_overheadFloat(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (float f : float_values) {\n+                bh.consume(f);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _3_signumDoubleTest(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (double d : double_values) {\n+                bh.consume(Signum_Kernel(d));\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _4_overheadDouble(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (double d : double_values) {\n+                bh.consume(d);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Signum.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}