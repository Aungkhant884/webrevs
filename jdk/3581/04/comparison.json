{"files":[{"patch":"@@ -1703,0 +1703,3 @@\n+  if (FLAG_IS_DEFAULT(UseSignumIntrinsic) && (UseSSE >= 2)) {\n+      FLAG_SET_DEFAULT(UseSignumIntrinsic, true);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5778,0 +5778,40 @@\n+\/\/ --------------------------------- Signum ---------------------------\n+\n+instruct signumF_reg(regF dst, regF zero, regF one, rFlagsReg cr) %{\n+  predicate(UseSSE>=1);\n+  match(Set dst (SignumF dst (Binary zero one)));\n+  effect(KILL cr);\n+  format %{ \"signumF $dst, $dst\" %}\n+  ins_encode %{\n+    Label exit;\n+\n+    __ ucomiss($dst$$XMMRegister, $zero$$XMMRegister);\n+    __ jcc(Assembler::equal, exit);\n+    __ jcc(Assembler::parity, exit);\n+    __ movflt($dst$$XMMRegister, $one$$XMMRegister);\n+    __ jcc(Assembler::above, exit);\n+    __ xorps($dst$$XMMRegister, ExternalAddress(float_signflip()));\n+    __ bind(exit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct signumD_reg(regD dst, regD zero, regD one, rFlagsReg cr) %{\n+  predicate(UseSSE>=2);\n+  match(Set dst (SignumD dst (Binary zero one)));\n+  effect(KILL cr);\n+  format %{ \"signumD $dst, $dst\" %}\n+  ins_encode %{\n+    Label exit;\n+\n+    __ ucomisd($dst$$XMMRegister, $zero$$XMMRegister);\n+    __ jcc(Assembler::equal, exit);\n+    __ jcc(Assembler::parity, exit);\n+    __ movdbl($dst$$XMMRegister, $one$$XMMRegister);\n+    __ jcc(Assembler::above, exit);\n+    __ xorpd($dst$$XMMRegister, ExternalAddress(double_signflip()));\n+    __ bind(exit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- * @requires os.arch==\"aarch64\"\n@@ -103,1 +102,1 @@\n-            Asserts.assertEQ(expected, calculated, \"Unexpected float result\");\n+            Asserts.assertEQ(expected, calculated, \"Unexpected float result from \" + arg);\n@@ -115,1 +114,1 @@\n-            Asserts.assertEQ(expected, calculated, \"Unexpected double result\");\n+            Asserts.assertEQ(expected, calculated, \"Unexpected double result from \" + arg);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestSignumIntrinsic.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) Intel, 2021 All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class Signum {\n+\n+    private final int ITERATIONS = 15000;\n+\n+    private double doubleValue = 1D;\n+    private float floatValue = 1F;\n+\n+    private static final float[] float_values = {\n+        123.4f,\n+        -56.7f,\n+        7e30f,\n+        -0.3e30f,\n+        Float.MAX_VALUE,\n+        -Float.MAX_VALUE,\n+        Float.MIN_VALUE,\n+        -Float.MIN_VALUE,\n+        0.0f,\n+        -0.0f,\n+        Float.POSITIVE_INFINITY,\n+        Float.NEGATIVE_INFINITY,\n+        Float.NaN,\n+        Float.MIN_NORMAL,\n+        -Float.MIN_NORMAL,\n+        0x0.0002P-126f,\n+        -0x0.0002P-126f\n+    };\n+\n+    private static final double[] double_values = {\n+        123.4d,\n+        -56.7d,\n+        7e30d,\n+        -0.3e30d,\n+        Double.MAX_VALUE,\n+        -Double.MAX_VALUE,\n+        Double.MIN_VALUE,\n+        -Double.MIN_VALUE,\n+        0.0d,\n+        -0.0d,\n+        Double.POSITIVE_INFINITY,\n+        Double.NEGATIVE_INFINITY,\n+        Double.NaN,\n+        Double.MIN_NORMAL,\n+        -Double.MIN_NORMAL,\n+        0x0.00000001P-1022,\n+        -0x0.00000001P-1022,\n+    };\n+\n+    private static double Signum_Kernel(double data)\n+    {\n+        return Math.signum(data);\n+    }\n+\n+    private static float Signum_Kernel(float data)\n+    {\n+        return Math.signum(data);\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _1_signumFloatTest(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (float f : float_values) {\n+                bh.consume(Signum_Kernel(f));\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _2_overheadFloat(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (float f : float_values) {\n+                bh.consume(f);\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _3_signumDoubleTest(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (double d : double_values) {\n+                bh.consume(Signum_Kernel(d));\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    @OperationsPerInvocation(ITERATIONS * 17)\n+    public void _4_overheadDouble(Blackhole bh) {\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            for (double d : double_values) {\n+                bh.consume(d);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Signum.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}