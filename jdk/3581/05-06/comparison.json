{"files":[{"patch":"@@ -1048,0 +1048,36 @@\n+\/\/ Float\/Double signum\n+void C2_MacroAssembler::signum_fp(int opcode, XMMRegister dst,\n+                                  XMMRegister zero, XMMRegister one,\n+                                  Register scratch) {\n+  assert(opcode == Op_SignumF || opcode == Op_SignumD, \"sanity\");\n+\n+  Label DONE_LABEL;\n+\n+  if (opcode == Op_SignumF){\n+    assert(UseSSE > 0, \"required\");\n+    ucomiss(dst, zero);\n+  } else if (opcode == Op_SignumD){\n+    assert(UseSSE > 1, \"required\");\n+    ucomisd(dst, zero);\n+  }\n+\n+  jcc(Assembler::equal, DONE_LABEL);\n+  jcc(Assembler::parity, DONE_LABEL);\n+\n+  if (opcode == Op_SignumF){\n+    movflt(dst, one);\n+  } else if (opcode == Op_SignumD){\n+    movdbl(dst, one);\n+  }\n+\n+  jcc(Assembler::above, DONE_LABEL);\n+\n+  if (opcode == Op_SignumF){\n+    xorps(dst, ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), scratch);\n+  } else if (opcode == Op_SignumD){\n+    xorpd(dst, ExternalAddress(StubRoutines::x86::vector_double_sign_flip()), scratch);\n+  }\n+\n+  bind(DONE_LABEL);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -92,0 +92,4 @@\n+  void signum_fp(int opcode, XMMRegister dst,\n+                 XMMRegister zero, XMMRegister one,\n+                 Register scratch);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5796,9 +5796,2 @@\n-    Label exit;\n-\n-    __ ucomiss($dst$$XMMRegister, $zero$$XMMRegister);\n-    __ jcc(Assembler::equal, exit);\n-    __ jcc(Assembler::parity, exit);\n-    __ movflt($dst$$XMMRegister, $one$$XMMRegister);\n-    __ jcc(Assembler::above, exit);\n-    __ xorps($dst$$XMMRegister, ExternalAddress(float_signflip()), $scratch$$Register);\n-    __ bind(exit);\n+    int opcode = this->ideal_Opcode();\n+    __ signum_fp(opcode, $dst$$XMMRegister, $zero$$XMMRegister, $one$$XMMRegister, $scratch$$Register);\n@@ -5815,9 +5808,2 @@\n-    Label exit;\n-\n-    __ ucomisd($dst$$XMMRegister, $zero$$XMMRegister);\n-    __ jcc(Assembler::equal, exit);\n-    __ jcc(Assembler::parity, exit);\n-    __ movdbl($dst$$XMMRegister, $one$$XMMRegister);\n-    __ jcc(Assembler::above, exit);\n-    __ xorpd($dst$$XMMRegister, ExternalAddress(double_signflip()), $scratch$$Register);\n-    __ bind(exit);\n+    int opcode = this->ideal_Opcode();\n+    __ signum_fp(opcode, $dst$$XMMRegister, $zero$$XMMRegister, $one$$XMMRegister, $scratch$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestSignumIntrinsic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Signum.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}