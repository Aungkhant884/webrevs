{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        _setLabel(label);\n+        _setLabel();\n@@ -80,1 +80,1 @@\n-    public native void _setLabel(String label);\n+    public native void _setLabel();\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WMenuItemPeer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-    jstring label;\n@@ -688,1 +687,1 @@\n-void AwtMenuItem::SetLabel(LPCTSTR sb)\n+void AwtMenuItem::SetLabel()\n@@ -712,1 +711,0 @@\n-    mii.dwTypeData = (LPTSTR)(*sb);\n@@ -787,1 +785,0 @@\n-        jstring label = sls->label;\n@@ -795,44 +792,1 @@\n-\/\/    if (::IsWindow(m->GetOwnerHWnd()))\n-        {\n-            \/\/ fix for bug 4251036 MenuItem setLabel(null\/\"\") behaves differently\n-            \/\/ under Win32 and Solaris\n-            jstring empty = NULL;\n-            if (JNU_IsNull(env, label))\n-            {\n-                empty = JNU_NewStringPlatform(env, TEXT(\"\"));\n-            }\n-            if (env->ExceptionCheck()) {\n-                badAlloc = 1;\n-                goto ret;\n-            }\n-            LPCTSTR labelPtr;\n-            if (empty != NULL)\n-            {\n-                labelPtr = JNU_GetStringPlatformChars(env, empty, 0);\n-            }\n-            else\n-            {\n-                labelPtr = JNU_GetStringPlatformChars(env, label, 0);\n-            }\n-            if (labelPtr == NULL)\n-            {\n-                badAlloc = 1;\n-            }\n-            else\n-            {\n-                DASSERT(!IsBadStringPtr(labelPtr, 20));\n-                m->SetLabel(labelPtr);\n-                if (empty != NULL)\n-                {\n-                    JNU_ReleaseStringPlatformChars(env, empty, labelPtr);\n-                }\n-                else\n-                {\n-                    JNU_ReleaseStringPlatformChars(env, label, labelPtr);\n-                }\n-            }\n-            if (empty != NULL)\n-            {\n-                env->DeleteLocalRef(empty);\n-            }\n-        }\n+        m->SetLabel();\n@@ -842,4 +796,0 @@\n-        if (label != NULL)\n-        {\n-            env->DeleteGlobalRef(label);\n-        }\n@@ -849,2 +799,1 @@\n-        if (badAlloc)\n-        {\n+        if (badAlloc) {\n@@ -1037,2 +986,1 @@\n-Java_sun_awt_windows_WMenuItemPeer__1setLabel(JNIEnv *env, jobject self,\n-                                              jstring label)\n+Java_sun_awt_windows_WMenuItemPeer__1setLabel(JNIEnv *env, jobject self)\n@@ -1044,1 +992,0 @@\n-    sls->label = (label == NULL) ? NULL : (jstring)env->NewGlobalRef(label);\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_MenuItem.cpp","additions":5,"deletions":58,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-    void SetLabel(LPCTSTR sb);\n+    void SetLabel();\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_MenuItem.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4234266\n+ * @summary To test setLabel functionality on Windows.\n+ * @requires (os.family == \"windows\")\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 SetLabelTest\n+ *\/\n+\n+public class SetLabelTest implements ActionListener {\n+    private static Robot robot;\n+    private static Frame frame;\n+    private static MenuBar mb;\n+    private static Point frameLoc;\n+    private static boolean passed = true;\n+    private static final String[][] newLabels = {new String[]{\"New Menu-1\", \"New MI-1\"},\n+                                                 new String[]{\"New PM-1\", \"New PMI-1\"}};\n+\n+    public static void main(String[] args) throws Exception {\n+        SetLabelTest obj = new SetLabelTest();\n+        obj.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            EventQueue.invokeAndWait(this::createTestUI);\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> frameLoc = frame.getLocationOnScreen());\n+\n+            \/\/ First Menu\n+            robot.mouseMove(frameLoc.x + 35, frameLoc.y + 35);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(300);\n+            robot.mouseMove(frameLoc.x + 35, frameLoc.y + 90);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+            captureScreen(\"Img_1\");\n+\n+            \/\/Second Menu\n+            robot.mouseMove(frameLoc.x + 130, frameLoc.y + 35);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(300);\n+            robot.mouseMove(frameLoc.x + 130, frameLoc.y + 90);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+            captureScreen(\"Img_2\");\n+\n+            if(!checkLabels()) {\n+                captureScreen(\"Img_Failed\");\n+                throw new RuntimeException(\"Test Failed! setLabel does not work\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void createTestUI() {\n+        frame = new Frame(\"Menu & MenuItem SetLabel Test\");\n+        mb = new MenuBar();\n+\n+        \/\/Menu 1\n+        Menu menu1 = new Menu(\"Menu1\");\n+        MenuItem mi1 = new MenuItem(\"MI-1\");\n+        mi1.addActionListener(this);\n+        menu1.add(mi1);\n+        menu1.addSeparator();\n+        MenuItem mi2 = new MenuItem(\"Change Menu1\");\n+        mi2.addActionListener(this);\n+        menu1.add(mi2);\n+        mb.add(menu1);\n+\n+        \/\/Popup menu\n+        PopupMenu pm = new PopupMenu(\"PopupMenu1\");\n+        MenuItem pm1 = new MenuItem(\"PMI-1\");\n+        pm1.addActionListener(this);\n+        pm.add(pm1);\n+        pm.addSeparator();\n+        MenuItem pm2 = new MenuItem(\"Change Menu2\");\n+        pm2.addActionListener(this);\n+        pm.add(pm2);\n+        mb.add(pm);\n+\n+        frame.setMenuBar(mb);\n+        frame.setSize(300, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void changeLabels(int menuIndex, String[] labels) {\n+            Menu m1 = mb.getMenu(menuIndex);\n+            m1.setLabel(labels[0]);\n+            MenuItem mItem1 = m1.getItem(0);\n+            mItem1.setLabel(labels[1]);\n+    }\n+\n+    private static boolean checkLabels() {\n+        for (int i = 0; i < 2; i++) {\n+            Menu m1 = mb.getMenu(i);\n+            String menuLabel = m1.getLabel();\n+            String menuItemLabel = m1.getItem(0).getLabel();\n+            if (!(menuLabel.equals(newLabels[i][0])\n+                    && menuItemLabel.equals(newLabels[i][1]))) {\n+                passed = false;\n+                break;\n+            }\n+        }\n+        return passed;\n+    }\n+\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getActionCommand().equals(\"Change Menu1\")) {\n+            changeLabels(0, newLabels[0]);\n+        } else {\n+            changeLabels(1, newLabels[1]);\n+        }\n+    }\n+\n+    private static void captureScreen(String filename) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        try {\n+            ImageIO.write(\n+                    robot.createScreenCapture(new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                    \"png\",\n+                    new File(filename + \".png\")\n+            );\n+        } catch (IOException ignored) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuItem\/SetLabelTest.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}