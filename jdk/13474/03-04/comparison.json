{"files":[{"patch":"@@ -265,0 +265,3 @@\n+\n+  \/\/ Start the timer for deflations, so it does not trigger immediately.\n+  _last_async_deflation_time_ns = os::javaTimeNanos();\n@@ -1084,1 +1087,8 @@\n-  return int(monitor_usage) > MonitorUsedDeflationThreshold;\n+  if (int(monitor_usage) > MonitorUsedDeflationThreshold) {\n+    log_info(monitorinflation)(\"monitors_used=\" SIZE_FORMAT \", ceiling=\" SIZE_FORMAT\n+                               \", monitor_usage=\" SIZE_FORMAT \", threshold=\" SIZE_FORMAT,\n+                               monitors_used, ceiling, monitor_usage, MonitorUsedDeflationThreshold);\n+    return true;\n+  }\n+\n+  return false;\n@@ -1129,1 +1139,3 @@\n-    log_info(monitorinflation)(\"Async deflation needed: guaranteed interval reached\");\n+    log_info(monitorinflation)(\"Async deflation needed: guaranteed interval (\" JLONG_FORMAT \" ms) \"\n+                               \"is greater than time since last deflation (\" JLONG_FORMAT \" ms)\",\n+                               GuaranteedAsyncDeflationInterval, time_since_last);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @test\n+ * @test id=allDisabled\n@@ -33,1 +33,0 @@\n- * @modules java.base\/jdk.internal.misc\n@@ -35,1 +34,1 @@\n- * @run driver GuaranteedAsyncDeflationIntervalTest\n+ * @run driver GuaranteedAsyncDeflationIntervalTest allDisabled\n@@ -38,1 +37,6 @@\n-public class GuaranteedAsyncDeflationIntervalTest {\n+\/*\n+ * @test id=guaranteedNoMUDT\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver GuaranteedAsyncDeflationIntervalTest guaranteedNoMUDT\n+ *\/\n@@ -40,7 +44,6 @@\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 0) {\n-          driver();\n-        } else {\n-          test();\n-        }\n-    }\n+\/*\n+ * @test id=guaranteedNoADI\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver GuaranteedAsyncDeflationIntervalTest guaranteedNoADI\n+ *\/\n@@ -48,2 +51,6 @@\n-    \/\/ Inflate a lot of monitors, so that threshold heuristics definitely fires\n-    public static final int MONITORS = 10_000;\n+\/*\n+ * @test id=allEnabled\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver GuaranteedAsyncDeflationIntervalTest allEnabled\n+ *\/\n@@ -51,1 +58,1 @@\n-    public static Object[] monitors;\n+public class GuaranteedAsyncDeflationIntervalTest {\n@@ -53,8 +60,15 @@\n-    public static void test() throws Exception {\n-        monitors = new Object[MONITORS];\n-        for (int i = 0; i < MONITORS; i++) {\n-            Object o = new Object();\n-            synchronized (o) {\n-                try {\n-                    o.wait(1); \/\/ Inflate!\n-                } catch (InterruptedException ie) {\n+    public static class Test {\n+        \/\/ Inflate a lot of monitors, so that threshold heuristics definitely fires\n+        public static final int MONITORS = 10_000;\n+\n+        public static Object[] monitors;\n+\n+        public static void main(String... args) throws Exception {\n+            monitors = new Object[MONITORS];\n+            for (int i = 0; i < MONITORS; i++) {\n+                Object o = new Object();\n+                synchronized (o) {\n+                    try {\n+                        o.wait(1); \/\/ Inflate!\n+                    } catch (InterruptedException ie) {\n+                    }\n@@ -62,0 +76,1 @@\n+                monitors[i] = o;\n@@ -63,2 +78,0 @@\n-            monitors[i] = o;\n-        }\n@@ -66,3 +79,4 @@\n-        try {\n-            Thread.sleep(10_000);\n-        } catch (InterruptedException ie) {\n+            try {\n+                Thread.sleep(10_000);\n+            } catch (InterruptedException ie) {\n+            }\n@@ -72,21 +86,3 @@\n-    public static void driver() throws Exception {\n-        final String MSG_THRESHOLD  = \"Async deflation needed: monitors used are above the threshold\";\n-        final String MSG_GUARANTEED = \"Async deflation needed: guaranteed interval reached\";\n-\n-        \/\/ Try with all heuristics disabled\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                \"-Xmx100M\",\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                \"-XX:GuaranteedAsyncDeflationInterval=0\",\n-                \"-XX:MonitorUsedDeflationThreshold=0\",\n-                \"-Xlog:monitorinflation=info\",\n-                \"GuaranteedAsyncDeflationIntervalTest\",\n-                \"test\");\n-\n-            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-            oa.shouldHaveExitValue(0);\n-\n-            oa.shouldNotContain(MSG_THRESHOLD);\n-            oa.shouldNotContain(MSG_GUARANTEED);\n-            assertNoDeflations(oa);\n+    public static void main(String[] args) throws Exception {\n+        if (args.length < 1) {\n+            throw new IllegalArgumentException(\"Expect the test label\");\n@@ -95,17 +91,16 @@\n-        \/\/ Try with guaranteed interval only enabled\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                \"-Xmx100M\",\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                \"-XX:GuaranteedAsyncDeflationInterval=100\",\n-                \"-XX:MonitorUsedDeflationThreshold=0\",\n-                \"-Xlog:monitorinflation=info\",\n-                \"GuaranteedAsyncDeflationIntervalTest\",\n-                \"test\");\n-\n-            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-            oa.shouldHaveExitValue(0);\n-\n-            oa.shouldNotContain(MSG_THRESHOLD);\n-            oa.shouldContain(MSG_GUARANTEED);\n-            assertDeflations(oa);\n+        String test = args[0];\n+        switch (test) {\n+            case \"allDisabled\":\n+                testAllDisabled();\n+                break;\n+            case \"guaranteedNoMUDT\":\n+                testGuaranteedNoMUDT();\n+                break;\n+            case \"guaranteedNoADI\":\n+                testGuaranteedNoADI();\n+                break;\n+            case \"allEnabled\":\n+                testAllEnabled();\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown test: \" + test);\n@@ -113,0 +108,1 @@\n+    }\n@@ -114,18 +110,74 @@\n-        \/\/ Try with both threshold heuristics and guaranteed interval enabled\n-        {\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                \"-Xmx100M\",\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                \"-XX:GuaranteedAsyncDeflationInterval=5000\",\n-                \"-XX:MonitorUsedDeflationThreshold=10\",\n-                \"-Xlog:monitorinflation=info\",\n-                \"GuaranteedAsyncDeflationIntervalTest\",\n-                \"test\");\n-\n-            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-            oa.shouldHaveExitValue(0);\n-\n-            oa.shouldContain(MSG_THRESHOLD);\n-            oa.shouldContain(MSG_GUARANTEED);\n-            assertDeflations(oa);\n-        }\n+    static final String MSG_THRESHOLD  = \"Async deflation needed: monitors used are above the threshold\";\n+    static final String MSG_GUARANTEED = \"Async deflation needed: guaranteed interval\";\n+\n+    \/\/ Try with all heuristics disabled\n+    public static void testAllDisabled() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx100M\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:GuaranteedAsyncDeflationInterval=0\",\n+            \"-XX:AsyncDeflationInterval=0\",\n+            \"-XX:MonitorUsedDeflationThreshold=0\",\n+            \"-Xlog:monitorinflation=info\",\n+            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n+\n+        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+        oa.shouldHaveExitValue(0);\n+\n+        oa.shouldNotContain(MSG_THRESHOLD);\n+        oa.shouldNotContain(MSG_GUARANTEED);\n+        assertNoDeflations(oa);\n+    }\n+\n+    \/\/ Try with guaranteed interval only enabled, threshold heuristics disabled via MUDT\n+    public static void testGuaranteedNoMUDT() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx100M\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:GuaranteedAsyncDeflationInterval=100\",\n+            \"-XX:MonitorUsedDeflationThreshold=0\",\n+            \"-Xlog:monitorinflation=info\",\n+            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n+\n+        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+        oa.shouldHaveExitValue(0);\n+\n+        oa.shouldNotContain(MSG_THRESHOLD);\n+        oa.shouldContain(MSG_GUARANTEED);\n+        assertDeflations(oa);\n+    }\n+\n+    \/\/ Try with guaranteed interval only enabled, threshold heuristics disabled via ADI\n+    public static void testGuaranteedNoADI() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx100M\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:GuaranteedAsyncDeflationInterval=100\",\n+            \"-XX:AsyncDeflationInterval=0\",\n+            \"-Xlog:monitorinflation=info\",\n+            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n+\n+        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+        oa.shouldHaveExitValue(0);\n+\n+        oa.shouldNotContain(MSG_THRESHOLD);\n+        oa.shouldContain(MSG_GUARANTEED);\n+        assertDeflations(oa);\n+    }\n+\n+    \/\/ Try with both threshold heuristics and guaranteed interval enabled\n+    public static void testAllEnabled() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx100M\",\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:GuaranteedAsyncDeflationInterval=5000\",\n+            \"-XX:MonitorUsedDeflationThreshold=10\",\n+            \"-Xlog:monitorinflation=info\",\n+            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n+\n+        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+        oa.shouldHaveExitValue(0);\n+\n+        oa.shouldContain(MSG_THRESHOLD);\n+        oa.shouldContain(MSG_GUARANTEED);\n+        assertDeflations(oa);\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java","additions":135,"deletions":83,"binary":false,"changes":218,"status":"modified"}]}