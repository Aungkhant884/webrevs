{"files":[{"patch":"@@ -716,0 +716,7 @@\n+  \/* notice: the max range value here is max_jint, not max_intx  *\/         \\\n+  \/* because of overflow issue                                   *\/         \\\n+  product(intx, GuaranteedAsyncDeflationInterval, 60000, DIAGNOSTIC,        \\\n+          \"Async deflate idle monitors every so many milliseconds even \"    \\\n+          \"when MonitorUsedDeflationThreshold is NOT exceeded (0 is off).\") \\\n+          range(0, max_jint)                                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,5 @@\n+\n+  \/\/ We wait for GuaranteedSafepointInterval so that is_async_deflation_needed() is checked\n+  \/\/ at the same interval, unless GuaranteedAsyncDeflationInterval is lower.\n+  const intx wait_time = MIN2(GuaranteedSafepointInterval, GuaranteedAsyncDeflationInterval);\n+\n@@ -61,3 +66,1 @@\n-        \/\/ We wait for GuaranteedSafepointInterval so that\n-        \/\/ is_async_deflation_needed() is checked at the same interval.\n-        ml.wait(GuaranteedSafepointInterval);\n+        ml.wait(wait_time);\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1107,0 +1107,3 @@\n+\n+  jlong time_since_last = time_since_last_async_deflation_ms();\n+\n@@ -1108,1 +1111,1 @@\n-      time_since_last_async_deflation_ms() > AsyncDeflationInterval &&\n+      time_since_last > AsyncDeflationInterval &&\n@@ -1114,0 +1117,1 @@\n+    log_info(monitorinflation)(\"Async deflation needed: monitors used are above the threshold\");\n@@ -1116,0 +1120,14 @@\n+\n+  if (GuaranteedAsyncDeflationInterval > 0 &&\n+      time_since_last > GuaranteedAsyncDeflationInterval) {\n+    \/\/ It's been longer than our specified guaranteed deflate interval.\n+    \/\/ We need to clean up the used monitors even if the threshold is\n+    \/\/ not reached, to keep the memory utilization at bay when many threads\n+    \/\/ touched many monitors. This inflation is expected to have no progress\n+    \/\/ in normal conditions, so it should not count towards non-progress\n+    \/\/ adjustments.\n+    _no_progress_cnt = 0;\n+    log_info(monitorinflation)(\"Async deflation needed: guaranteed interval reached\");\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @bug 8305994\n+ * @summary Test the GuaranteedAsyncDeflationInterval option\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run driver GuaranteedAsyncDeflationIntervalTest\n+ *\/\n+\n+public class GuaranteedAsyncDeflationIntervalTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+          driver();\n+        } else {\n+          test();\n+        }\n+    }\n+\n+    \/\/ Inflate a lot of monitors, so that threshold heuristics definitely fires\n+    public static final int MONITORS = 10_000;\n+\n+    public static Object[] monitors;\n+\n+    public static void test() throws Exception {\n+        monitors = new Object[MONITORS];\n+        for (int i = 0; i < MONITORS; i++) {\n+            Object o = new Object();\n+            synchronized (o) {\n+                try {\n+                    o.wait(1); \/\/ Inflate!\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+            monitors[i] = o;\n+        }\n+\n+        try {\n+            Thread.sleep(10_000);\n+        } catch (InterruptedException ie) {\n+        }\n+    }\n+\n+    public static void driver() throws Exception {\n+        final String MSG_THRESHOLD  = \"Async deflation needed: monitors used are above the threshold\";\n+        final String MSG_GUARANTEED = \"Async deflation needed: guaranteed interval reached\";\n+\n+        \/\/ Try with all heuristics disabled\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Xmx100M\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:GuaranteedAsyncDeflationInterval=0\",\n+                \"-XX:MonitorUsedDeflationThreshold=0\",\n+                \"-Xlog:monitorinflation=info\",\n+                \"GuaranteedAsyncDeflationIntervalTest\",\n+                \"test\");\n+\n+            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+            oa.shouldHaveExitValue(0);\n+\n+            oa.shouldNotContain(MSG_THRESHOLD);\n+            oa.shouldNotContain(MSG_GUARANTEED);\n+            assertNoDeflations(oa);\n+        }\n+\n+        \/\/ Try with guaranteed interval only enabled\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Xmx100M\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:GuaranteedAsyncDeflationInterval=100\",\n+                \"-XX:MonitorUsedDeflationThreshold=0\",\n+                \"-Xlog:monitorinflation=info\",\n+                \"GuaranteedAsyncDeflationIntervalTest\",\n+                \"test\");\n+\n+            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+            oa.shouldHaveExitValue(0);\n+\n+            oa.shouldNotContain(MSG_THRESHOLD);\n+            oa.shouldContain(MSG_GUARANTEED);\n+            assertDeflations(oa);\n+        }\n+\n+        \/\/ Try with both threshold heuristics and guaranteed interval enabled\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-Xmx100M\",\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:GuaranteedAsyncDeflationInterval=5000\",\n+                \"-XX:MonitorUsedDeflationThreshold=10\",\n+                \"-Xlog:monitorinflation=info\",\n+                \"GuaranteedAsyncDeflationIntervalTest\",\n+                \"test\");\n+\n+            OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+            oa.shouldHaveExitValue(0);\n+\n+            oa.shouldContain(MSG_THRESHOLD);\n+            oa.shouldContain(MSG_GUARANTEED);\n+            assertDeflations(oa);\n+        }\n+    }\n+\n+    private static void assertNoDeflations(OutputAnalyzer oa) {\n+        for (String line : oa.asLines()) {\n+            if (line.contains(\"Starting the final audit\")) {\n+                \/\/ Final deflations started, with no prior deflations, good.\n+                return;\n+            }\n+            if (line.contains(\"begin deflating\")) {\n+                \/\/ Deflations detected before final ones, bad\n+                oa.reportDiagnosticSummary();\n+                throw new IllegalStateException(\"FAILED\");\n+            }\n+        }\n+    }\n+\n+    private static void assertDeflations(OutputAnalyzer oa) {\n+        for (String line : oa.asLines()) {\n+            if (line.contains(\"Starting the final audit\")) {\n+                \/\/ Final deflations started, with no prior deflations, bad.\n+                oa.reportDiagnosticSummary();\n+                throw new IllegalStateException(\"FAILED\");\n+            }\n+            if (line.contains(\"begin deflating\")) {\n+                \/\/ Deflations detected before final ones, good\n+                return;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}