{"files":[{"patch":"@@ -432,1 +432,1 @@\n-  int size = objArrayOopDesc::object_size(length);\n+  size_t size = objArrayOopDesc::object_size(length);\n@@ -451,1 +451,1 @@\n-  log_info(cds)(\"archived obj roots[%d] = %d words, klass = %p, obj = %p\", length, size, k, mem);\n+  log_info(cds)(\"archived obj roots[%d] = \" SIZE_FORMAT \" words, klass = %p, obj = %p\", length, size, k, mem);\n@@ -915,1 +915,1 @@\n-        log_debug(cds, heap)(\"(%d) %s[\" SIZE_FORMAT \"] ==> \" PTR_FORMAT \" size %d %s\", _level,\n+        log_debug(cds, heap)(\"(%d) %s[\" SIZE_FORMAT \"] ==> \" PTR_FORMAT \" size \" SIZE_FORMAT \" %s\", _level,\n@@ -1026,1 +1026,1 @@\n-        PTR_FORMAT \") size %d, skipped.\",\n+        PTR_FORMAT \") size \" SIZE_FORMAT \", skipped.\",\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1380,1 +1380,1 @@\n-void java_lang_Class::set_oop_size(HeapWord* java_class, int size) {\n+void java_lang_Class::set_oop_size(HeapWord* java_class, size_t size) {\n@@ -1382,2 +1382,3 @@\n-  assert(size > 0, \"Oop size must be greater than zero, not %d\", size);\n-  *(int*)(((char*)java_class) + _oop_size_offset) = size;\n+  assert(size > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, size);\n+  assert(size <= INT_MAX, \"Lossy conversion: \" SIZE_FORMAT, size);\n+  *(int*)(((char*)java_class) + _oop_size_offset) = (int)size;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -368,2 +368,2 @@\n-  static int oop_size(oop java_class);\n-  static void set_oop_size(HeapWord* java_class, int size);\n+  static size_t oop_size(oop java_class);\n+  static void set_oop_size(HeapWord* java_class, size_t size);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-inline int java_lang_Class::oop_size(oop java_class) {\n+inline size_t java_lang_Class::oop_size(oop java_class) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -968,1 +968,1 @@\n-    int size = obj->oop_iterate_size(&cl);\n+    size_t size = obj->oop_iterate_size(&cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    size_t const obj_size = (size_t)cast_to_oop(addr)->size();\n+    size_t const obj_size = cast_to_oop(addr)->size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  assert(should_be_sliced(obj), \"Must be an array object %d and large \" SIZE_FORMAT, obj->is_objArray(), (size_t)obj->size());\n+  assert(should_be_sliced(obj), \"Must be an array object %d and large \" SIZE_FORMAT, obj->is_objArray(), obj->size());\n@@ -48,1 +48,1 @@\n-  return process_array_slice(objArrayOop(obj), cast_from_oop<HeapWord*>(obj), (size_t)objArrayOop(obj)->size());\n+  return process_array_slice(objArrayOop(obj), cast_from_oop<HeapWord*>(obj), objArrayOop(obj)->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  return obj->is_objArray() && ((size_t)((objArrayOop)obj)->size()) >= 2 * ObjArrayMarkingStride;\n+  return obj->is_objArray() && ((objArrayOop)obj)->size() >= 2 * ObjArrayMarkingStride;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  add_live_words(region_index, (size_t) obj->size());\n+  add_live_words(region_index, obj->size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-                               (size_t)cast_to_oop(hr->bottom())->size() * HeapWordSize,\n+                               cast_to_oop(hr->bottom())->size() * HeapWordSize,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-                             (size_t)obj->size() * HeapWordSize,\n+                             obj->size() * HeapWordSize,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-    int size = obj->oop_iterate_size(cl);\n+    size_t size = obj->oop_iterate_size(cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  inline bool mark_obj(oop obj, int size);\n+  inline bool mark_obj(oop obj, size_t size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,2 +147,2 @@\n-inline bool ParMarkBitMap::mark_obj(oop obj, int size) {\n-  return mark_obj(cast_from_oop<HeapWord*>(obj), (size_t)size);\n+inline bool ParMarkBitMap::mark_obj(oop obj, size_t size) {\n+  return mark_obj(cast_from_oop<HeapWord*>(obj), size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parMarkBitMap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        log_develop_trace(gc, scavenge)(\"{%s %s \" PTR_FORMAT \" -> \" PTR_FORMAT \" (%d)}\",\n+        log_develop_trace(gc, scavenge)(\"{%s %s \" PTR_FORMAT \" -> \" PTR_FORMAT \" (\" SIZE_FORMAT \")}\",\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  const int obj_size = obj->size();\n+  const size_t obj_size = obj->size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -683,1 +683,1 @@\n-  log_debug(gc, promotion)(\"Promotion failure size = %d) \", old->size());\n+  log_debug(gc, promotion)(\"Promotion failure size = \" SIZE_FORMAT \") \", old->size());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  static int adjust_pointers(oop obj);\n+  static size_t adjust_pointers(oop obj);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-inline int MarkSweep::adjust_pointers(oop obj) {\n+inline size_t MarkSweep::adjust_pointers(oop obj) {\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-      assert(deferred.word_size() == (size_t)(old_obj->size()),\n+      assert(deferred.word_size() == old_obj->size(),\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,3 +252,3 @@\n-  oop obj_allocate(Klass* klass, int size, TRAPS);\n-  virtual oop array_allocate(Klass* klass, int size, int length, bool do_zero, TRAPS);\n-  oop class_allocate(Klass* klass, int size, TRAPS);\n+  oop obj_allocate(Klass* klass, size_t size, TRAPS);\n+  virtual oop array_allocate(Klass* klass, size_t size, int length, bool do_zero, TRAPS);\n+  oop class_allocate(Klass* klass, size_t size, TRAPS);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-inline oop CollectedHeap::obj_allocate(Klass* klass, int size, TRAPS) {\n+inline oop CollectedHeap::obj_allocate(Klass* klass, size_t size, TRAPS) {\n@@ -39,1 +39,1 @@\n-inline oop CollectedHeap::array_allocate(Klass* klass, int size, int length, bool do_zero, TRAPS) {\n+inline oop CollectedHeap::array_allocate(Klass* klass, size_t size, int length, bool do_zero, TRAPS) {\n@@ -44,1 +44,1 @@\n-inline oop CollectedHeap::class_allocate(Klass* klass, int size, TRAPS) {\n+inline oop CollectedHeap::class_allocate(Klass* klass, size_t size, TRAPS) {\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1240,1 +1240,1 @@\n-  assert(obj_size == (size_t)obj->size(), \"bad obj_size passed in\");\n+  assert(obj_size == obj->size(), \"bad obj_size passed in\");\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  assert(obj_size == (size_t)obj->size(), \"bad obj_size passed in\");\n+  assert(obj_size == obj->size(), \"bad obj_size passed in\");\n","filename":"src\/hotspot\/share\/gc\/shared\/generation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -426,1 +426,1 @@\n-  java_lang_Class::set_oop_size(mem, (int)_word_size);\n+  java_lang_Class::set_oop_size(mem, _word_size);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-        assert(_sp->block_size(top_obj) == (size_t) cast_to_oop(top_obj)->size(),\n+        assert(_sp->block_size(top_obj) == cast_to_oop(top_obj)->size(),\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-      assert(dead_length == (size_t)obj->size(), \"bad filler object size\");\n+      assert(dead_length == obj->size(), \"bad filler object size\");\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -837,1 +837,1 @@\n-    size_t size = (size_t)p->size();\n+    size_t size = p->size();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-    int size = obj->size();\n+    size_t size = obj->size();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-oop ZCollectedHeap::array_allocate(Klass* klass, int size, int length, bool do_zero, TRAPS) {\n+oop ZCollectedHeap::array_allocate(Klass* klass, size_t size, int length, bool do_zero, TRAPS) {\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  virtual oop array_allocate(Klass* klass, int size, int length, bool do_zero, TRAPS);\n+  virtual oop array_allocate(Klass* klass, size_t size, int length, bool do_zero, TRAPS);\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  const int offset = (int)(reference.addr<uintptr_t>() - cast_from_oop<uintptr_t>(ref_owner));\n+  const size_t offset = (reference.addr<uintptr_t>() - cast_from_oop<uintptr_t>(ref_owner));\n@@ -53,1 +53,2 @@\n-  return offset;\n+  assert(offset <= size_t(INT_MAX), \"invariant\");\n+  return (int)offset;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeUtils.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1048,1 +1048,2 @@\n-    value = ((long) stream.bci());\n+    \/\/ FIXME: Why was this long before?\n+    value = ((jlong) stream.bci());\n@@ -1050,1 +1051,1 @@\n-    value = ((long) stream.line());\n+    value = ((jlong) stream.line());\n@@ -1935,1 +1936,1 @@\n-  if (displacement < 0 || ((long) displacement + basic_type_elemsize > HeapWordSize * obj->size())) {\n+  if (displacement < 0 || ((size_t) displacement + basic_type_elemsize > HeapWordSize * obj->size())) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -156,16 +156,0 @@\n-  template <class T> static int count_bytes(T* x) {\n-    return (HeapWordSize * ((x) ? (x)->size() : 0));\n-  }\n-\n-  template <class T> static int count_bytes_array(T* x) {\n-    if (x == NULL) {\n-      return 0;\n-    }\n-    if (x->length() == 0) {\n-      \/\/ This is a shared array, e.g., Universe::the_empty_int_array(). Don't\n-      \/\/ count it to avoid double-counting.\n-      return 0;\n-    }\n-    return HeapWordSize * x->size();\n-  }\n-\n","filename":"src\/hotspot\/share\/memory\/heapInspection.hpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  int size = objArrayOopDesc::object_size(length);\n+  size_t size = objArrayOopDesc::object_size(length);\n","filename":"src\/hotspot\/share\/oops\/arrayKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1391,1 +1391,1 @@\n-  int size = objArrayOopDesc::object_size(length);\n+  size_t size = objArrayOopDesc::object_size(length);\n@@ -1416,1 +1416,1 @@\n-  int size = size_helper();  \/\/ Query before forming handle.\n+  size_t size = size_helper();  \/\/ Query before forming handle.\n@@ -3549,1 +3549,1 @@\n-  st->print_cr(BULLET\"---- fields (total size %d words):\", oop_size(obj));\n+  st->print_cr(BULLET\"---- fields (total size \" SIZE_FORMAT \" words):\", oop_size(obj));\n@@ -3559,1 +3559,1 @@\n-      st->print_cr(BULLET\"---- static fields (%d words):\", java_lang_Class::static_oop_field_count(obj));\n+      st->print_cr(BULLET\"---- static fields (%d):\", java_lang_Class::static_oop_field_count(obj));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -996,1 +996,1 @@\n-  int oop_size(oop obj)  const             { return size_helper(); }\n+  size_t oop_size(oop obj)  const             { return size_helper(); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-int InstanceMirrorKlass::instance_size(Klass* k) {\n+size_t InstanceMirrorKlass::instance_size(Klass* k) {\n@@ -50,2 +50,2 @@\n-  int size = instance_size(k);\n-  assert(size > 0, \"total object size must be positive: %d\", size);\n+  size_t size = instance_size(k);\n+  assert(size > 0, \"total object size must be non-zero: \" SIZE_FORMAT, size);\n@@ -58,1 +58,1 @@\n-int InstanceMirrorKlass::oop_size(oop obj) const {\n+size_t InstanceMirrorKlass::oop_size(oop obj) const {\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  virtual int oop_size(oop obj) const;\n+  virtual size_t oop_size(oop obj) const;\n@@ -89,1 +89,1 @@\n-  int instance_size(Klass* k);\n+  size_t instance_size(Klass* k);\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -552,2 +552,2 @@\n-  \/\/ actual oop size of obj in memory\n-  virtual int oop_size(oop obj) const = 0;\n+  \/\/ actual oop size of obj in memory in word size.\n+  virtual size_t oop_size(oop obj) const = 0;\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-int ObjArrayKlass::oop_size(oop obj) const {\n+size_t ObjArrayKlass::oop_size(oop obj) const {\n@@ -165,1 +165,1 @@\n-  int size = objArrayOopDesc::object_size(length);\n+  size_t size = objArrayOopDesc::object_size(length);\n@@ -170,2 +170,0 @@\n-static int multi_alloc_counter = 0;\n-\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  int oop_size(oop obj) const;\n+  size_t oop_size(oop obj) const;\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  int object_size()           { return object_size(length()); }\n+  size_t object_size()        { return object_size(length()); }\n@@ -96,1 +96,1 @@\n-  static int object_size(int length) {\n+  static size_t object_size(int length) {\n@@ -102,1 +102,1 @@\n-    return (int)osz;\n+    return (size_t)osz;\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  inline int size();\n+  inline size_t size();\n@@ -109,1 +109,1 @@\n-  inline int size_given_klass(Klass* klass);\n+  inline size_t size_given_klass(Klass* klass);\n@@ -275,1 +275,1 @@\n-  inline int oop_iterate_size(OopClosureType* cl);\n+  inline size_t oop_iterate_size(OopClosureType* cl);\n@@ -278,1 +278,1 @@\n-  inline int oop_iterate_size(OopClosureType* cl, MemRegion mr);\n+  inline size_t oop_iterate_size(OopClosureType* cl, MemRegion mr);\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-int oopDesc::size()  {\n+size_t oopDesc::size()  {\n@@ -150,1 +150,1 @@\n-int oopDesc::size_given_klass(Klass* klass)  {\n+size_t oopDesc::size_given_klass(Klass* klass)  {\n@@ -152,1 +152,1 @@\n-  int s;\n+  size_t s;\n@@ -185,1 +185,1 @@\n-      s = (int)(align_up(size_in_bytes, MinObjAlignmentInBytes) \/ HeapWordSize);\n+      s = align_up(size_in_bytes, MinObjAlignmentInBytes) \/ HeapWordSize;\n@@ -201,2 +201,2 @@\n-  assert(s > 0, \"Oop size must be greater than zero, not %d\", s);\n-  assert(is_object_aligned(s), \"Oop size is not properly aligned: %d\", s);\n+  assert(s > 0, \"Oop size must be greater than zero, not \" SIZE_FORMAT, s);\n+  assert(is_object_aligned(s), \"Oop size is not properly aligned: \" SIZE_FORMAT, s);\n@@ -325,1 +325,1 @@\n-int oopDesc::oop_iterate_size(OopClosureType* cl) {\n+size_t oopDesc::oop_iterate_size(OopClosureType* cl) {\n@@ -327,1 +327,1 @@\n-  int size = size_given_klass(k);\n+  size_t size = size_given_klass(k);\n@@ -333,1 +333,1 @@\n-int oopDesc::oop_iterate_size(OopClosureType* cl, MemRegion mr) {\n+size_t oopDesc::oop_iterate_size(OopClosureType* cl, MemRegion mr) {\n@@ -335,1 +335,1 @@\n-  int size = size_given_klass(k);\n+  size_t size = size_given_klass(k);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  return (typeArrayOop)Universe::heap()->array_allocate(this, (int)size, length,\n+  return (typeArrayOop)Universe::heap()->array_allocate(this, size, length,\n@@ -230,1 +230,1 @@\n-int TypeArrayKlass::oop_size(oop obj) const {\n+size_t TypeArrayKlass::oop_size(oop obj) const {\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  int oop_size(oop obj) const;\n+  size_t oop_size(oop obj) const;\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  static int object_size(int lh, int length) {\n+  static size_t object_size(int lh, int length) {\n@@ -131,1 +131,1 @@\n-    return align_object_size((intptr_t)size_in_words);\n+    return align_object_size((size_t)size_in_words);\n@@ -135,1 +135,1 @@\n-  inline int object_size(const TypeArrayKlass* tk) const;\n+  inline size_t object_size(const TypeArrayKlass* tk) const;\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-int typeArrayOopDesc::object_size(const TypeArrayKlass* tk) const {\n+size_t typeArrayOopDesc::object_size(const TypeArrayKlass* tk) const {\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-    int size = TypeArrayKlass::cast(array_type)->oop_size(result);\n+    const size_t size = TypeArrayKlass::cast(array_type)->oop_size(result);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -663,1 +663,1 @@\n-  const int size = obj->size();\n+  const size_t size = obj->size();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-      st.print(\" allocated (%d bytes)\", obj->size() * HeapWordSize);\n+      st.print(\" allocated (\" SIZE_FORMAT \" bytes)\", obj->size() * HeapWordSize);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}