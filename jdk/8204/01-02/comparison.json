{"files":[{"patch":"@@ -576,1 +576,2 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  predicate(UseSVE == 0 &&\n+            n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -590,1 +591,2 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  predicate(UseSVE == 0 &&\n+            n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -604,1 +606,2 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  predicate(UseSVE == 0 &&\n+            n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n@@ -616,44 +619,0 @@\n-\/\/ Versions of vector_round for UseSVE > 0\n-\n-instruct vroundvReg2Fto2I(vReg dst, vReg src, vReg tmp1, vReg tmp2, vReg tmp3)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (RoundVF src));\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n-  format %{ \"vround  $dst, T2S, $src\\t# round vReg 2F to 2I vector\" %}\n-  ins_encode %{\n-    __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                         as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                         as_FloatRegister($tmp3$$reg), __ T2S);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct vroundvReg4Fto4I(vReg dst, vReg src, vReg tmp1, vReg tmp2, vReg tmp3)\n-%{\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (RoundVF src));\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n-  format %{ \"vround  $dst, T4S, $src\\t# round vReg 4F to 4I vector\" %}\n-  ins_encode %{\n-    __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                         as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                         as_FloatRegister($tmp3$$reg), __ T4S);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct vroundvReg2Dto2L(vReg dst, vReg src, vReg tmp1, vReg tmp2, vReg tmp3)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (RoundVD src));\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3);\n-  format %{ \"vround  $dst, T2D, $src\\t# round vReg 2D to 2L vector\" %}\n-  ins_encode %{\n-    __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                         as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                         as_FloatRegister($tmp3$$reg), __ T2D);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":6,"deletions":47,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -355,1 +355,2 @@\n-  predicate(n->as_Vector()->length() == $5 && n->bottom_type()->is_vect()->element_basic_type() == T_$6);\n+  predicate(UseSVE == 0 &&\n+            n->as_Vector()->length() == $5 && n->bottom_type()->is_vect()->element_basic_type() == T_$6);\n@@ -370,5 +371,0 @@\n-\/\/ Versions of vector_round for UseSVE > 0\n-VECTOR_JAVA_FROUND(F, 2F,  I, T2S, 2,  INT, vReg)\n-VECTOR_JAVA_FROUND(F, 4F,  I, T4S, 4,  INT, vReg)\n-VECTOR_JAVA_FROUND(D, 2D,  L, T2D, 2, LONG, vReg)\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n-\n@@ -3855,1 +3854,1 @@\n-instruct vround8Fto8I(vReg dst, vReg src, vReg tmp1, vReg tmp2, pRegGov ptmp)\n+instruct vroundFtoI(vReg dst, vReg src, vReg tmp1, vReg tmp2, vReg tmp3, pRegGov ptmp)\n@@ -3857,2 +3856,1 @@\n-  predicate(UseSVE > 0 &&\n-            n->as_Vector()->length() == 8);\n+  predicate(UseSVE > 0);\n@@ -3860,2 +3858,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP ptmp);\n-  format %{ \"sve_vround  $dst, S, $src\\t# round 8F to 8I vector\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP ptmp);\n+  format %{ \"sve_vround  $dst, S, $src\\t# round F to I vector\" %}\n@@ -3863,3 +3861,13 @@\n-    __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                        as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                        as_PRegister($ptmp$$reg), __ S);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this);\n+    if (vlen > 16) {\n+      __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                          as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                          as_PRegister($ptmp$$reg), __ S);\n+    } else {\n+      __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                           as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                           as_FloatRegister($tmp3$$reg),\n+                           __ esize2arrangement(type2aelembytes(bt),\n+                              \/*isQ*\/ vlen == 16));\n+    }\n@@ -3870,1 +3878,1 @@\n-instruct vround4Dto4L(vReg dst, vReg src, vReg tmp1, vReg tmp2, pRegGov ptmp)\n+instruct vroundDtoL(vReg dst, vReg src, vReg tmp1, vReg tmp2, vReg tmp3, pRegGov ptmp)\n@@ -3872,2 +3880,1 @@\n-  predicate(UseSVE > 0 &&\n-            n->as_Vector()->length() == 4);\n+  predicate(UseSVE > 0);\n@@ -3875,2 +3882,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP ptmp);\n-  format %{ \"sve_vround  $dst, D, $src\\t# round 4D to 4L vector\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP ptmp);\n+  format %{ \"sve_vround  $dst, D, $src\\t# round D to L vector\" %}\n@@ -3878,3 +3885,13 @@\n-    __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                        as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                        as_PRegister($ptmp$$reg), __ D);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this);\n+    if (vlen > 16) {\n+      __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                          as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                          as_PRegister($ptmp$$reg), __ D);\n+    } else {\n+      __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                           as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                           as_FloatRegister($tmp3$$reg),\n+                           __ esize2arrangement(type2aelembytes(bt),\n+                              \/*isQ*\/ vlen == 16));\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-\n@@ -2127,1 +2126,1 @@\n-instruct vround$2to$5$3($7 dst, $7 src, $7 tmp1, $7 tmp2, pRegGov ptmp)\n+instruct vround$1to$3($7 dst, $7 src, $7 tmp1, $7 tmp2, $7 tmp3, pRegGov ptmp)\n@@ -2129,2 +2128,1 @@\n-  predicate(UseSVE > 0 &&\n-            n->as_Vector()->length() == $5);\n+  predicate(UseSVE > 0);\n@@ -2132,2 +2130,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP ptmp);\n-  format %{ \"sve_vround  $dst, $4, $src\\t# round $2 to $5$3 vector\" %}\n+  effect(TEMP_DEF dst, TEMP tmp1, TEMP tmp2, TEMP tmp3, TEMP ptmp);\n+  format %{ \"sve_vround  $dst, $4, $src\\t# round $1 to $3 vector\" %}\n@@ -2135,3 +2133,13 @@\n-    __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n-                        as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n-                        as_PRegister($ptmp$$reg), __ $4);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this);\n+    if (vlen > 16) {\n+      __ vector_round_sve(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                          as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                          as_PRegister($ptmp$$reg), __ $4);\n+    } else {\n+      __ vector_round_neon(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg),\n+                           as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg),\n+                           as_FloatRegister($tmp3$$reg),\n+                           __ esize2arrangement(type2aelembytes(bt),\n+                              \/*isQ*\/ vlen == 16));\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -167,2 +167,10 @@\n-  static int vector_op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n-    return 0;\n+  static int op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n+    switch(vopc) {\n+      default: return 0;\n+      case Op_RoundF: \/\/ fall through\n+      case Op_RoundD: \/\/ fall through\n+      case Op_RoundVF: \/\/ fall through\n+      case Op_RoundVD: {\n+        return 15;\n+      }\n+    }\n@@ -171,1 +179,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  static int vector_op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n+  static int op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  static int vector_op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n+  static int op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  static int vector_op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n+  static int op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-  static int vector_op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n+  static int op_pre_select_sz_estimate(int vopc, BasicType ety, int vlen) {\n@@ -192,0 +192,6 @@\n+      case Op_RoundF: \/\/ fall through\n+      case Op_RoundD: \/\/ fall through\n+      case Op_RoundVF: \/\/ fall through\n+      case Op_RoundVD: {\n+        return 30;\n+      }\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -973,4 +973,4 @@\n-      case Op_RoundF: body_size += 30; break;\n-      case Op_RoundD: body_size += 30; break;\n-      case Op_RoundVF: body_size += 30; break;\n-      case Op_RoundVD: body_size += 30; break;\n+      case Op_RoundF:\n+      case Op_RoundD:\n+      case Op_RoundVF:\n+      case Op_RoundVD:\n@@ -979,2 +979,6 @@\n-        const TypeVect* vt = n->bottom_type()->is_vect();\n-        body_size += Matcher::vector_op_pre_select_sz_estimate(n->Opcode(), vt->element_basic_type(), vt->length());\n+        const TypeVect* vt = n->bottom_type()->isa_vect();\n+        if (vt != NULL) {\n+          body_size += Matcher::op_pre_select_sz_estimate(n->Opcode(), vt->element_basic_type(), vt->length());\n+        } else {\n+          body_size += Matcher::op_pre_select_sz_estimate(n->Opcode(), n->bottom_type()->basic_type(), 1);\n+        }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}