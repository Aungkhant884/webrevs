{"files":[{"patch":"@@ -44,3 +44,0 @@\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowFocusListener;\n@@ -57,1 +54,0 @@\n-import java.util.Arrays;\n@@ -74,1 +70,0 @@\n-import sun.awt.UngrabEvent;\n@@ -767,25 +762,3 @@\n-    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n-    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n-    \/\/ will not be detected.\n-    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n-    \/\/\n-    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n-    \/\/\n-    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n-    \/\/ transfer the focus away and don't dismiss the menu\n-    \/\/ (e.g. the window's own title or the area in the side dock without\n-    \/\/ application icons).\n-    private static final WindowFocusListener waylandWindowFocusListener;\n-\n-    static {\n-        Toolkit toolkit = Toolkit.getDefaultToolkit();\n-        if ((toolkit instanceof SunToolkit\n-                && ((SunToolkit) toolkit).isRunningOnWayland())) {\n-            waylandWindowFocusListener = new WindowAdapter() {\n-                @Override\n-                public void windowLostFocus(WindowEvent e) {\n-                    Window window = e.getWindow();\n-                    window.removeWindowFocusListener(this);\n-                    window.dispatchEvent(new UngrabEvent(window));\n-                }\n-            };\n+    private Window getMenuInvoker() {\n+        if (invoker instanceof Window menuInvoker) {\n+            return menuInvoker;\n@@ -793,27 +766,3 @@\n-            waylandWindowFocusListener = null;\n-        }\n-    }\n-\n-    private void waylandDismissOnWindowFocusLostAdd() {\n-        if (waylandWindowFocusListener == null) return;\n-\n-        Window invokerWindow = (invoker instanceof Window)\n-                ? (Window) invoker\n-                : SwingUtilities.getWindowAncestor(invoker);\n-\n-        if (invokerWindow != null &&\n-                !Arrays.asList(invokerWindow.getWindowFocusListeners())\n-                        .contains(waylandWindowFocusListener)) {\n-            invokerWindow.addWindowFocusListener(waylandWindowFocusListener);\n-        }\n-    }\n-\n-    private void waylandDismissOnWindowFocusLostRemove() {\n-        if (waylandWindowFocusListener == null) return;\n-\n-        Window invokerWindow = (invoker instanceof Window)\n-                ? (Window) invoker\n-                : SwingUtilities.getWindowAncestor(invoker);\n-\n-        if (invokerWindow != null) {\n-            invokerWindow.removeWindowFocusListener(waylandWindowFocusListener);\n+            return invoker == null\n+                    ? null\n+                    : SwingUtilities.getWindowAncestor(invoker);\n@@ -864,1 +813,1 @@\n-        if(b) {\n+        if (b) {\n@@ -866,1 +815,5 @@\n-            waylandDismissOnWindowFocusLostAdd();\n+\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuInvoker());\n+            }\n+\n@@ -871,1 +824,1 @@\n-        } else if(popup != null) {\n+        } else if (popup != null) {\n@@ -873,1 +826,5 @@\n-            waylandDismissOnWindowFocusLostRemove();\n+\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeededCleanUp(getMenuInvoker());\n+            }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":18,"deletions":61,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1890,0 +1890,5 @@\n+    public void dismissPopupOnFocusLostIfNeeded(Window invoker) {}\n+\n+    public void dismissPopupOnFocusLostIfNeededCleanUp(Window invoker) {}\n+\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,9 @@\n-import static java.awt.RenderingHints.*;\n+\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n+\n@@ -30,1 +38,12 @@\n-import java.awt.image.*;\n+\n+import java.awt.Window;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.ComponentColorModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.DataBufferByte;\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n@@ -33,0 +52,1 @@\n+import java.util.Arrays;\n@@ -34,0 +54,1 @@\n+import sun.awt.X11.XBaseWindow;\n@@ -455,0 +476,56 @@\n+\n+    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n+    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n+    \/\/ will not be detected.\n+    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n+    \/\/\n+    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n+    \/\/\n+    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n+    \/\/ transfer the focus away and don't dismiss the menu\n+    \/\/ (e.g. the window's own title or the area in the side dock without\n+    \/\/ application icons).\n+    private static final WindowFocusListener waylandWindowFocusListener;\n+\n+    static {\n+        if (isOnWayland()) {\n+            waylandWindowFocusListener = new WindowAdapter() {\n+                @Override\n+                public void windowLostFocus(WindowEvent e) {\n+                    Window window = e.getWindow();\n+                    window.removeWindowFocusListener(this);\n+\n+                    \/\/ AWT\n+                    XBaseWindow.ungrabInput();\n+\n+                    \/\/ Swing\n+                    window.dispatchEvent(new UngrabEvent(window));\n+                }\n+            };\n+        } else {\n+            waylandWindowFocusListener = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dismissPopupOnFocusLostIfNeeded(Window invoker) {\n+        if (!isOnWayland()\n+                || invoker == null\n+                || Arrays\n+                    .asList(invoker.getWindowFocusListeners())\n+                    .contains(waylandWindowFocusListener)\n+        ) {\n+            return;\n+        }\n+\n+        invoker.addWindowFocusListener(waylandWindowFocusListener);\n+    }\n+\n+    @Override\n+    public void dismissPopupOnFocusLostIfNeededCleanUp(Window invoker) {\n+        if (!isOnWayland() || invoker == null) {\n+            return;\n+        }\n+\n+        invoker.removeWindowFocusListener(waylandWindowFocusListener);\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":79,"deletions":2,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,7 @@\n-import java.awt.*;\n-import sun.awt.*;\n-import java.util.*;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import sun.awt.SunToolkit;\n@@ -915,1 +919,1 @@\n-    static void ungrabInput() {\n+    public static void ungrabInput() {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XBaseWindow.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.awt.Toolkit;\n@@ -34,4 +35,0 @@\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowFocusListener;\n-import java.util.Arrays;\n@@ -39,0 +36,2 @@\n+\n+import sun.awt.SunToolkit;\n@@ -398,22 +397,3 @@\n-    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n-    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n-    \/\/ will not be detected.\n-    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n-    \/\/\n-    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n-    \/\/\n-    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n-    \/\/ transfer the focus away and don't dismiss the menu\n-    \/\/ (e.g. the window's own title or the area in the side dock without\n-    \/\/ application icons).\n-    private static final WindowFocusListener waylandWindowFocusListener;\n-\n-    static {\n-        if (XToolkit.isOnWayland()) {\n-            waylandWindowFocusListener = new WindowAdapter() {\n-                @Override\n-                public void windowLostFocus(WindowEvent e) {\n-                    e.getWindow().removeWindowFocusListener(this);\n-                    ungrabInput();\n-                }\n-            };\n+    protected Window getMenuTarget() {\n+        if (target instanceof Window targetWindow) {\n+            return targetWindow;\n@@ -421,28 +401,3 @@\n-            waylandWindowFocusListener = null;\n-        }\n-    }\n-\n-    protected void waylandDismissOnWindowFocusLostAdd() {\n-        if (waylandWindowFocusListener == null) return;\n-\n-        Window targetWindow = (target instanceof Window)\n-                ? (Window) target\n-                : SwingUtilities.getWindowAncestor(target);\n-\n-\n-        if (targetWindow != null\n-                && !Arrays.asList(targetWindow.getWindowFocusListeners())\n-                .contains(waylandWindowFocusListener)) {\n-            targetWindow.addWindowFocusListener(waylandWindowFocusListener);\n-        }\n-    }\n-\n-    protected void waylandDismissOnWindowFocusLostRemove() {\n-        if (waylandWindowFocusListener == null) return;\n-\n-        Window targetWindow = (target instanceof Window)\n-                ? (Window) target\n-                : SwingUtilities.getWindowAncestor(target);\n-\n-        if (targetWindow != null) {\n-            targetWindow.removeWindowFocusListener(waylandWindowFocusListener);\n+            return target == null\n+                    ? null\n+                    : SwingUtilities.getWindowAncestor(target);\n@@ -468,1 +423,3 @@\n-            waylandDismissOnWindowFocusLostAdd();\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuTarget());\n+            }\n@@ -485,1 +442,3 @@\n-        waylandDismissOnWindowFocusLostRemove();\n+        if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+            sunToolkit.dismissPopupOnFocusLostIfNeededCleanUp(getMenuTarget());\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XMenuWindow.java","additions":15,"deletions":56,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.awt.Toolkit;\n@@ -44,0 +45,1 @@\n+import sun.awt.SunToolkit;\n@@ -139,1 +141,3 @@\n-            waylandDismissOnWindowFocusLostAdd();\n+            if (Toolkit.getDefaultToolkit() instanceof SunToolkit sunToolkit) {\n+                sunToolkit.dismissPopupOnFocusLostIfNeeded(getMenuTarget());\n+            }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XPopupMenuPeer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}