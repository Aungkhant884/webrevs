{"files":[{"patch":"@@ -46,0 +46,4 @@\n+ * @implNote On Linux systems using Wayland, the popup menu may not be dismissed\n+ * by clicking on the decorations of its own parent window\n+ * and on some system panels.\n+ *\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/PopupMenu.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.awt.Window;\n@@ -43,0 +44,3 @@\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n@@ -53,0 +57,1 @@\n+import java.util.Arrays;\n@@ -69,0 +74,1 @@\n+import sun.awt.UngrabEvent;\n@@ -98,0 +104,4 @@\n+ * @implNote On Linux systems using Wayland, the popup menu may not be dismissed\n+ * by clicking on the decorations of its own parent window\n+ * and on some system panels.\n+ *\n@@ -761,0 +771,56 @@\n+    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n+    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n+    \/\/ will not be detected.\n+    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n+    \/\/\n+    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n+    \/\/\n+    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n+    \/\/ transfer the focus away and don't dismiss the menu\n+    \/\/ (e.g. the window's own title or the area in the side dock without\n+    \/\/ application icons).\n+    private static final WindowFocusListener waylandWindowFocusListener;\n+\n+    static {\n+        Toolkit toolkit = Toolkit.getDefaultToolkit();\n+        if ((toolkit instanceof SunToolkit\n+                && ((SunToolkit) toolkit).isRunningOnWayland())) {\n+            waylandWindowFocusListener = new WindowAdapter() {\n+                @Override\n+                public void windowLostFocus(WindowEvent e) {\n+                    Window window = e.getWindow();\n+                    window.removeWindowFocusListener(this);\n+                    window.dispatchEvent(new UngrabEvent(window));\n+                }\n+            };\n+        } else {\n+            waylandWindowFocusListener = null;\n+        }\n+    }\n+\n+    private void waylandDismissOnWindowFocusLostAdd() {\n+        if (waylandWindowFocusListener == null) return;\n+\n+        Window invokerWindow = (invoker instanceof Window)\n+                ? (Window) invoker\n+                : SwingUtilities.getWindowAncestor(invoker);\n+\n+        if (invokerWindow != null &&\n+                !Arrays.asList(invokerWindow.getWindowFocusListeners())\n+                        .contains(waylandWindowFocusListener)) {\n+            invokerWindow.addWindowFocusListener(waylandWindowFocusListener);\n+        }\n+    }\n+\n+    private void waylandDismissOnWindowFocusLostRemove() {\n+        if (waylandWindowFocusListener == null) return;\n+\n+        Window invokerWindow = (invoker instanceof Window)\n+                ? (Window) invoker\n+                : SwingUtilities.getWindowAncestor(invoker);\n+\n+        if (invokerWindow != null) {\n+            invokerWindow.removeWindowFocusListener(waylandWindowFocusListener);\n+        }\n+    }\n+\n@@ -804,0 +870,1 @@\n+            waylandDismissOnWindowFocusLostAdd();\n@@ -810,0 +877,1 @@\n+            waylandDismissOnWindowFocusLostRemove();\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JPopupMenu.java","additions":69,"deletions":1,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -1886,0 +1886,4 @@\n+    public boolean isRunningOnWayland() {\n+        return false;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -424,0 +424,31 @@\n+\n+    private static volatile Boolean isOnWayland = null;\n+\n+    @SuppressWarnings(\"removal\")\n+    public static boolean isOnWayland() {\n+        Boolean result = isOnWayland;\n+        if (result == null) {\n+            synchronized (GTK_LOCK) {\n+                result = isOnWayland;\n+                if (result == null) {\n+                    isOnWayland\n+                            = result\n+                            = AccessController.doPrivileged(\n+                            (PrivilegedAction<Boolean>) () -> {\n+                                final String display =\n+                                        System.getenv(\"WAYLAND_DISPLAY\");\n+\n+                                return display != null\n+                                        && !display.trim().isEmpty();\n+                            }\n+                    );\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isRunningOnWayland() {\n+        return isOnWayland();\n+    }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,11 @@\n-import java.awt.*;\n-import java.awt.peer.*;\n-import java.awt.event.*;\n-\n-import java.awt.image.BufferedImage;\n-import java.awt.geom.Point2D;\n-\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Window;\n+\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n+import java.util.Arrays;\n@@ -37,0 +41,2 @@\n+import javax.swing.SwingUtilities;\n+\n@@ -392,0 +398,54 @@\n+    \/\/ We rely on the X11 input grab mechanism, but for the Wayland session\n+    \/\/ it only works inside the XWayland server, so mouse clicks outside of it\n+    \/\/ will not be detected.\n+    \/\/ (window decorations, pure Wayland applications, desktop, etc.)\n+    \/\/\n+    \/\/ As a workaround, we can dismiss menus when the window loses focus.\n+    \/\/\n+    \/\/ However, there are \"blind spots\" though, which, when clicked, don't\n+    \/\/ transfer the focus away and don't dismiss the menu\n+    \/\/ (e.g. the window's own title or the area in the side dock without\n+    \/\/ application icons).\n+    private static final WindowFocusListener waylandWindowFocusListener;\n+\n+    static {\n+        if (XToolkit.isOnWayland()) {\n+            waylandWindowFocusListener = new WindowAdapter() {\n+                @Override\n+                public void windowLostFocus(WindowEvent e) {\n+                    e.getWindow().removeWindowFocusListener(this);\n+                    ungrabInput();\n+                }\n+            };\n+        } else {\n+            waylandWindowFocusListener = null;\n+        }\n+    }\n+\n+    protected void waylandDismissOnWindowFocusLostAdd() {\n+        if (waylandWindowFocusListener == null) return;\n+\n+        Window targetWindow = (target instanceof Window)\n+                ? (Window) target\n+                : SwingUtilities.getWindowAncestor(target);\n+\n+\n+        if (targetWindow != null\n+                && !Arrays.asList(targetWindow.getWindowFocusListeners())\n+                .contains(waylandWindowFocusListener)) {\n+            targetWindow.addWindowFocusListener(waylandWindowFocusListener);\n+        }\n+    }\n+\n+    protected void waylandDismissOnWindowFocusLostRemove() {\n+        if (waylandWindowFocusListener == null) return;\n+\n+        Window targetWindow = (target instanceof Window)\n+                ? (Window) target\n+                : SwingUtilities.getWindowAncestor(target);\n+\n+        if (targetWindow != null) {\n+            targetWindow.removeWindowFocusListener(waylandWindowFocusListener);\n+        }\n+    }\n+\n@@ -408,0 +468,1 @@\n+            waylandDismissOnWindowFocusLostAdd();\n@@ -424,0 +485,1 @@\n+        waylandDismissOnWindowFocusLostRemove();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XMenuWindow.java","additions":70,"deletions":8,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,15 @@\n-import java.awt.*;\n-import java.awt.peer.*;\n-import java.awt.event.*;\n-\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Event;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.MenuItem;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Rectangle;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+\n+import java.awt.peer.PopupMenuPeer;\n@@ -128,0 +139,1 @@\n+            waylandDismissOnWindowFocusLostAdd();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XPopupMenuPeer.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"}]}