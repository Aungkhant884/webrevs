{"files":[{"patch":"@@ -116,0 +116,1 @@\n+#include \"os_linux.hpp\"\n@@ -2356,0 +2357,12 @@\n+\/\/ Physical memory of the host machine (including containers)\n+WB_ENTRY(jlong, WB_PhysicalMemory(JNIEnv* env, jobject o))\n+  LINUX_ONLY(return os::Linux::physical_memory();)\n+  return os::physical_memory();\n+WB_END\n+\n+\/\/ Physical swap of the host machine (including containers), Linux only.\n+WB_ENTRY(jlong, WB_PhysicalSwap(JNIEnv* env, jobject o))\n+  LINUX_ONLY(return (jlong)os::Linux::host_swap();)\n+  return -1; \/\/ Not used\/implemented on other platforms\n+WB_END\n+\n@@ -2755,0 +2768,2 @@\n+  {CC\"physicalMemory\",            CC\"()J\",            (void*)&WB_PhysicalMemory },\n+  {CC\"physicalSwap\",              CC\"()J\",            (void*)&WB_PhysicalSwap },\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+        long systemTotal = getTotalMemorySize0();\n+        assert(systemTotal > 0);\n@@ -127,1 +129,1 @@\n-        if (subsMem >= getTotalMemorySize0()) {\n+        if (subsMem >= systemTotal) {\n@@ -145,1 +147,9 @@\n-        return subsystem.getMemoryAndSwapLimit();\n+        long totalSystemMemSwap = getTotalMemorySize0() + getTotalSwapSize0();\n+        assert(totalSystemMemSwap > 0);\n+        \/\/ Catch the cgroup memory and swap limit exceeding host physical swap\n+        \/\/ and memory. Treat this case as unlimited.\n+        long subsSwapMem = subsystem.getMemoryAndSwapLimit();\n+        if (subsSwapMem >= totalSystemMemSwap) {\n+            return CgroupSubsystem.LONG_RETVAL_UNLIMITED;\n+        }\n+        return subsSwapMem;\n@@ -188,0 +198,1 @@\n+    private static native long getTotalSwapSize0();\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupMetrics.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <sys\/sysinfo.h>\n@@ -46,0 +47,9 @@\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_platform_CgroupMetrics_getTotalSwapSize0\n+  (JNIEnv *env, jclass ignored)\n+{\n+    struct sysinfo si;\n+    sysinfo(&si);\n+    return (jlong)si.totalswap;\n+}\n","filename":"src\/java.base\/linux\/native\/libjava\/CgroupMetrics.c","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run driver TestMemoryAwareness\n+ * @run main\/othervm -Xbootclasspath\/a:whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI TestMemoryAwareness\n@@ -40,0 +40,1 @@\n+import java.util.function.Consumer;\n@@ -43,0 +44,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -49,0 +51,1 @@\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -50,5 +53,6 @@\n-    private static String getHostMaxMemory() throws Exception {\n-        DockerRunOptions opts = Common.newOpts(imageName);\n-        String goodMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n-        assertNotNull(goodMem, \"no match for 'total physical memory' in trace output\");\n-        return goodMem;\n+    private static String getHostMaxMemory() {\n+        return Long.valueOf(wb.physicalMemory()).toString();\n+    }\n+\n+    private static String getHostSwap() {\n+        return Long.valueOf(wb.physicalSwap()).toString();\n@@ -95,4 +99,5 @@\n-            final String hostMaxMem = getHostMaxMemory();\n-            testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n-            testMetricsIgnoresMemLimitExceedingPhysicalMemory(hostMaxMem);\n-            testContainerMemExceedsPhysical(hostMaxMem);\n+            testOSMXBeanIgnoresMemLimitExceedingPhysicalMemory();\n+            testOSMXBeanIgnoresSwapLimitExceedingPhysical();\n+            testMetricsExceedingPhysicalMemory();\n+            testMetricsSwapExceedingPhysical();\n+            testContainerMemExceedsPhysical();\n@@ -125,1 +130,1 @@\n-    private static void testContainerMemExceedsPhysical(final String hostMaxMem)\n+    private static void testContainerMemExceedsPhysical()\n@@ -128,0 +133,1 @@\n+        String hostMaxMem = getHostMaxMemory();\n@@ -183,0 +189,7 @@\n+        Consumer<OutputAnalyzer> noOp = o -> {};\n+        testOperatingSystemMXBeanAwareness(memoryAllocation, expectedMemory, swapAllocation, expectedSwap, false, noOp);\n+    }\n+\n+    private static void testOperatingSystemMXBeanAwareness(String memoryAllocation, String expectedMemory,\n+            String swapAllocation, String expectedSwap, boolean addCgroupMounts,\n+            Consumer<OutputAnalyzer> additionalMatch) throws Exception {\n@@ -191,0 +204,1 @@\n+            .addJavaOpts(\"-esa\")\n@@ -210,2 +224,6 @@\n-        \/\/ the getTotalSwapSpaceSize and getFreeSwapSpaceSize return the system\n-        \/\/ values as the container setup isn't supported in that case.\n+        \/\/ the getTotalSwapSpaceSize either returns the system (or host) values, or 0\n+        \/\/ if a container memory limit is in place and gets detected. A value of 0 is because,\n+        \/\/ Metrics.getMemoryLimit() returns the same value as Metrics.getMemoryAndSwapLimit().\n+        \/\/\n+        \/\/ getFreeSwapSpaceSize() are a function of what getTotalSwapSpaceSize() returns. Either\n+        \/\/ a number > 0, or 0 if getTotalSwapSpaceSize() == 0.\n@@ -215,1 +233,2 @@\n-            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: [0-9]+\");\n+            String hostSwap = getHostSwap();\n+            out.shouldMatch(\"OperatingSystemMXBean.getTotalSwapSpaceSize: (0|\" + hostSwap + \")\");\n@@ -223,0 +242,1 @@\n+        additionalMatch.accept(out);\n@@ -225,1 +245,0 @@\n-\n@@ -227,1 +246,1 @@\n-    private static void testOperatingSystemMXBeanIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+    private static void testOSMXBeanIgnoresMemLimitExceedingPhysicalMemory()\n@@ -229,0 +248,1 @@\n+        String hostMaxMem = getHostMaxMemory();\n@@ -233,0 +253,29 @@\n+    private static void testOSMXBeanIgnoresSwapLimitExceedingPhysical()\n+            throws Exception {\n+        long totalSwap = wb.physicalSwap() + wb.physicalMemory();\n+        String expectedSwap = Long.valueOf(totalSwap).toString();\n+        String hostMaxMem = getHostMaxMemory();\n+        String badMem = hostMaxMem + \"0\";\n+        final String badSwap = expectedSwap + \"0\";\n+        testOperatingSystemMXBeanAwareness(badMem, hostMaxMem, badSwap, expectedSwap, false, o -> {\n+            o.shouldNotContain(\"Metrics.getMemoryAndSwapLimit() == \" + badSwap);\n+        });\n+    }\n+\n+    private static void testMetricsSwapExceedingPhysical()\n+            throws Exception {\n+        Common.logNewTestCase(\"Metrics ignore container swap memory limit exceeding physical\");\n+        long totalSwap = wb.physicalSwap() + wb.physicalMemory();\n+        String expectedSwap = Long.valueOf(totalSwap).toString();\n+        final String badSwap = expectedSwap + \"0\";\n+        String badMem = getHostMaxMemory() + \"0\";\n+        DockerRunOptions opts = Common.newOpts(imageName)\n+            .addJavaOpts(\"-XshowSettings:system\")\n+            .addDockerOpts(\"--memory\", badMem)\n+            .addDockerOpts(\"--memory-swap\", badSwap);\n+\n+        OutputAnalyzer out = DockerTestUtils.dockerRunJava(opts);\n+        out.shouldContain(\"Memory Limit: Unlimited\");\n+        out.shouldContain(\"Memory & Swap Limit: Unlimited\");\n+    }\n+\n@@ -234,1 +283,1 @@\n-    private static void testMetricsIgnoresMemLimitExceedingPhysicalMemory(final String hostMaxMem)\n+    private static void testMetricsExceedingPhysicalMemory()\n@@ -237,1 +286,1 @@\n-        String badMem = hostMaxMem + \"0\";\n+        String badMem = getHostMaxMemory() + \"0\";\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":67,"deletions":18,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -711,0 +711,2 @@\n+  public native long physicalMemory();\n+  public native long physicalSwap();\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}