{"files":[{"patch":"@@ -441,0 +441,2 @@\n+     * To obtain a {@code Class} object for a named primitive type, use\n+     * {@link #forPrimitiveName(String)}.\n@@ -631,0 +633,35 @@\n+    \/**\n+     * {@return the {@code Class} object associated with the\n+     * {@linkplain #isPrimitive() primitive type} of the given name}\n+     * If the argument is not the name of a primitive type, {@code\n+     * null} is returned.\n+     *\n+     * @param primitiveName the name of the primitive type to find\n+     *\n+     * @throws NullPointerException if the argument is {@code null}\n+     *\n+     * @jls 4.2 Primitive Types and Values\n+     * @jls 15.8.2 Class Literals\n+     * @since 22\n+     *\/\n+    public static Class<?> forPrimitiveName(String primitiveName) {\n+        return switch(primitiveName) {\n+        \/\/ Integral types\n+        case \"int\"     -> int.class;\n+        case \"long\"    -> long.class;\n+        case \"short\"   -> short.class;\n+        case \"char\"    -> char.class;\n+        case \"byte\"    -> byte.class;\n+\n+        \/\/ Floating-point types\n+        case \"float\"   -> float.class;\n+        case \"double\"  -> double.class;\n+\n+        \/\/ Other types\n+        case \"boolean\" -> boolean.class;\n+        case \"void\"    -> void.class;\n+\n+        default        -> null;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}