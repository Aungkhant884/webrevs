{"files":[{"patch":"@@ -264,15 +264,0 @@\n-    \/**\n-     * immutable table mapping primitive type names to corresponding\n-     * class objects\n-     *\/\n-    private static final Map<String, Class<?>> primClasses =\n-        Map.of(\"boolean\", boolean.class,\n-               \"byte\", byte.class,\n-               \"char\", char.class,\n-               \"short\", short.class,\n-               \"int\", int.class,\n-               \"long\", long.class,\n-               \"float\", float.class,\n-               \"double\", double.class,\n-               \"void\", void.class);\n-\n@@ -806,1 +791,1 @@\n-            Class<?> cl = primClasses.get(name);\n+            Class<?> cl = Class.forPrimitiveName(name);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test Class.forPrimitiveName\n+ * @bug 6361826\n+ *\/\n+\n+import java.util.*;\n+\n+public class ForPrimitiveName {\n+    public static void main(String... args) {\n+        positiveTests();\n+        negativeTests();\n+    }\n+\n+    private static final void positiveTests() {\n+\n+        \/**\n+         * immutable table mapping primitive type names to corresponding\n+         * class objects\n+         *\/\n+        final Map<String, Class<?>> primClasses =\n+            Map.of(\"boolean\", boolean.class,\n+                   \"byte\",    byte.class,\n+                   \"char\",    char.class,\n+                   \"short\",   short.class,\n+                   \"int\",     int.class,\n+                   \"long\",    long.class,\n+                   \"float\",   float.class,\n+                   \"double\",  double.class,\n+                   \"void\",    void.class);\n+\n+        for (var entry : primClasses.entrySet()) {\n+            String key = entry.getKey();\n+            Class<?> expected = entry.getValue();\n+            Class<?> result = Class.forPrimitiveName(key);\n+\n+            \/\/ For java.lang.Class, equality is identity.\n+            if (result != expected) {\n+                throw new RuntimeException(\"Unexpected mapping for \" + key);\n+            }\n+        }\n+    }\n+\n+    private static final void negativeTests() {\n+        final List<String> expectedNull =\n+            List.of(\"java.lang.Object\",\n+                    \"java.lang.String\",\n+\n+                    \"java.lang.Byte\",\n+                    \"java.lang.Boolean\",\n+                    \"java.lang.Character\",\n+                    \"java.lang.Short\",\n+                    \"java.lang.Integer\",\n+                    \"java.lang.Long\",\n+                    \"java.lang.Float\",\n+                    \"java.lang.Double\",\n+                    \"java.lang.Void\");\n+        for (var entry : expectedNull) {\n+            Class<?> result = Class.forPrimitiveName(entry);\n+            if (result != null ) {\n+                throw new RuntimeException(\"Unexpected nonnull result for \" +\n+                                           entry);\n+            }\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/java\/lang\/Class\/ForPrimitiveName.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}