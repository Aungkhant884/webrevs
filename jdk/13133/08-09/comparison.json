{"files":[{"patch":"@@ -1536,0 +1536,24 @@\n+  \/\/ This function is needed only for testing purposes to support multiple\n+  \/\/ enable&disable notifyJvmti events. Otherwise, there can be only one call\n+  \/\/ to enable_virtual_threads_notify_jvmti() for late binding agents. There\n+  \/\/ have to be no JvmtiThreadState's and need to correct them in such a case.\n+  static void correct_jvmti_thread_state(JavaThread* jt) {\n+    oop  ct_oop = jt->threadObj();\n+    oop  vt_oop = jt->vthread();\n+    JvmtiThreadState* jt_state = jt->jvmti_thread_state();\n+    JvmtiThreadState* ct_state = java_lang_Thread::jvmti_thread_state(jt->threadObj());\n+    JvmtiThreadState* vt_state = vt_oop != nullptr ? java_lang_Thread::jvmti_thread_state(vt_oop) : nullptr;\n+    bool virt = vt_oop != nullptr && java_lang_VirtualThread::is_instance(vt_oop);\n+\n+    \/\/ Correct jt->jvmti_thread_state() and jt->jvmti_vthread().\n+    \/\/ It was not maintained while notifyJvmti was disabled but there can be\n+    \/\/ a leftover from previous cycle when notification were enabled.\n+    if (virt) {\n+      jt->set_jvmti_thread_state(nullptr);  \/\/ reset jt->jvmti_thread_state()\n+      jt->set_jvmti_vthread(vt_oop);        \/\/ restore jt->jvmti_vthread()\n+    } else { \n+      jt->set_jvmti_thread_state(ct_state); \/\/ restore jt->jvmti_thread_state()\n+      jt->set_jvmti_vthread(ct_oop);        \/\/ restore jt->jvmti_vthread()\n+    }\n+  }\n+\n@@ -1543,7 +1567,0 @@\n-      oop  ct_oop = jt->threadObj();\n-      oop  vt_oop = jt->vthread();\n-      JvmtiThreadState* jt_state = jt->jvmti_thread_state();\n-      JvmtiThreadState* ct_state = java_lang_Thread::jvmti_thread_state(jt->threadObj());\n-      JvmtiThreadState* vt_state = vt_oop != nullptr ? java_lang_Thread::jvmti_thread_state(vt_oop) : nullptr;\n-      bool virt = vt_oop != nullptr && java_lang_VirtualThread::is_instance(vt_oop);\n-\n@@ -1553,16 +1570,1 @@\n-      \/\/ Correct jt->jvmti_thread_state() and jt->jvmti_vthread() if necessary.\n-      \/\/ It was not maintained while notifyJvmti was disabled.\n-      if (virt) {\n-        if (jt_state != vt_state) {\n-          jt->set_jvmti_thread_state(vt_state); \/\/ restore jt->jvmti_thread_state()\n-          jt->set_jvmti_vthread(vt_oop);        \/\/ restore jt->jvmti_vthread()\n-          if (vt_state != nullptr) {\n-            vt_state->set_thread(jt);           \/\/ restore JavaThread link\n-          }\n-        }\n-      } else { \/\/ !virt\n-        if (jt_state != ct_state) {\n-          jt->set_jvmti_thread_state(ct_state); \/\/ restore jt->jvmti_thread_state()\n-          jt->set_jvmti_vthread(ct_oop);        \/\/ reset jt->jvmti_vthread()\n-        }\n-      }\n+      correct_jvmti_thread_state(jt);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -40,0 +40,23 @@\n+static void check_and_print_thread_names(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n+                                         bool is_virtual, const char* msg) {\n+  jthread cthread = NULL;\n+  jthread vthread = NULL;\n+\n+  if (is_virtual) {\n+    vthread = thread;\n+    cthread = get_carrier_thread(jvmti, jni, vthread);\n+    if (jni->IsVirtualThread(cthread)) {\n+      fatal(jni, \"Failed: expected to be carrier thread\");\n+    }\n+  } else {\n+    cthread = thread;\n+  }\n+  char* ctname = get_thread_name(jvmti, jni, cthread);\n+  char* vtname = vthread == NULL ? NULL : get_thread_name(jvmti, jni, vthread);\n+\n+  LOG(\"Event: %s virtual: %d ct: %s vt: %s\\n\", msg, is_virtual, ctname, vtname);\n+\n+  deallocate(jvmti, jni, (void*)ctname);\n+  deallocate(jvmti, jni, (void*)vtname);\n+}\n+\n@@ -47,0 +70,1 @@\n+  check_and_print_thread_names(jvmti, jni, thread, \/* is_virtual *\/ true, \"VirtualThreadStart\");\n@@ -56,0 +80,1 @@\n+  check_and_print_thread_names(jvmti, jni, thread, \/* is_virtual *\/ true, \"VirtualThreadEnd\");\n@@ -65,0 +90,1 @@\n+  check_and_print_thread_names(jvmti, jni, thread, \/*is_virtual*\/ false, \"ThreadStart\");\n@@ -74,0 +100,1 @@\n+  check_and_print_thread_names(jvmti, jni, thread, \/*is_virtual*\/ false, \"ThreadEnd\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ToggleNotifyJvmtiTest\/libToggleNotifyJvmtiTest.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}