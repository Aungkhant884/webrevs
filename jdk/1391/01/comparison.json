{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -563,1 +563,1 @@\n-                ResolvedModule m2 = null;\n+                ResolvedModule m2;\n@@ -575,0 +575,8 @@\n+\n+                    \/\/ m2 is automatic module in parent configuration => m1 reads\n+                    \/\/ all automatic modules that m2 reads.\n+                    if (m2.descriptor().isAutomatic()) {\n+                        m2.reads().stream()\n+                                .filter(d -> d.descriptor().isAutomatic())\n+                                .forEach(reads::add);\n+                    }\n@@ -841,1 +849,0 @@\n-\n@@ -843,1 +850,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Resolver.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8142968 8253751\n@@ -45,1 +46,0 @@\n-import java.nio.file.Paths;\n@@ -63,2 +63,1 @@\n-    private static final Path USER_DIR\n-         = Paths.get(System.getProperty(\"user.dir\"));\n+    private static final Path USER_DIR = Path.of(System.getProperty(\"user.dir\"));\n@@ -169,1 +168,0 @@\n-\n@@ -913,0 +911,66 @@\n+    \/**\n+     * Basic test for a module requiring an automatic module in a parent\n+     * configuration. If an explicit module in a child configuration reads an\n+     * automatic module in a parent configuration then it should read all\n+     * automatic modules in the parent configuration.\n+     *\/\n+    public void testInConfiguration7() throws Exception {\n+        \/\/ m1 requires auto1\n+        ModuleDescriptor descriptor1 = ModuleDescriptor.newModule(\"m1\")\n+                .requires(\"auto1\")\n+                .build();\n+\n+        Path dir1 = Files.createTempDirectory(USER_DIR, \"mods\");\n+        createDummyJarFile(dir1.resolve(\"auto1.jar\"), \"p1\/C.class\");\n+        createDummyJarFile(dir1.resolve(\"auto2.jar\"), \"p2\/C.class\");\n+\n+        \/\/ module finder locates m1, auto1, and auto2\n+        ModuleFinder finder1 = ModuleFinder.compose(ModuleUtils.finderOf(descriptor1),\n+                                                    ModuleFinder.of(dir1));\n+\n+        Configuration parent = ModuleLayer.boot().configuration();\n+        ResolvedModule base = parent.findModule(\"java.base\").orElseThrow();\n+\n+        Configuration cf1 = resolve(parent, finder1, \"m1\");\n+        assertTrue(cf1.modules().size() == 3);\n+\n+        ResolvedModule m1 = cf1.findModule(\"m1\").orElseThrow();\n+        ResolvedModule auto1 = cf1.findModule(\"auto1\").orElseThrow();\n+        ResolvedModule auto2 = cf1.findModule(\"auto2\").orElseThrow();\n+\n+        assertTrue(m1.reads().size() == 3);\n+        assertTrue(m1.reads().contains(base));\n+        assertTrue(m1.reads().contains(auto1));\n+        assertTrue(m1.reads().contains(auto2));\n+\n+        assertTrue(auto1.reads().contains(base));\n+        assertTrue(auto1.reads().contains(m1));\n+        assertTrue(auto1.reads().contains(auto2));\n+\n+        assertTrue(auto2.reads().contains(base));\n+        assertTrue(auto2.reads().contains(m1));\n+        assertTrue(auto2.reads().contains(auto1));\n+\n+        \/\/ m2 requires auto1\n+        ModuleDescriptor descriptor2 = ModuleDescriptor.newModule(\"m2\")\n+                .requires(\"auto1\")\n+                .build();\n+\n+        Path dir2 = Files.createTempDirectory(USER_DIR, \"mods\");\n+        createDummyJarFile(dir1.resolve(\"auto3.jar\"), \"p3\/C.class\");\n+\n+        \/\/ module finder locates m2 and auto3\n+        ModuleFinder finder2 = ModuleFinder.compose(ModuleUtils.finderOf(descriptor2),\n+                                                    ModuleFinder.of(dir2));\n+\n+        Configuration cf2 = resolve(cf1, finder2, \"m2\");\n+        assertTrue(cf2.modules().size() == 1);   \/\/ auto3 should not be resolved\n+\n+        ResolvedModule m2 = cf2.findModule(\"m2\").orElseThrow();\n+\n+        assertTrue(m2.reads().size() == 3);\n+        assertTrue(m2.reads().contains(base));\n+        assertTrue(m2.reads().contains(auto1));\n+        assertTrue(m2.reads().contains(auto2));\n+    }\n+\n@@ -1108,1 +1172,1 @@\n-        Path[] paths = Stream.of(entries).map(Paths::get).toArray(Path[]::new);\n+        Path[] paths = Stream.of(entries).map(Path::of).toArray(Path[]::new);\n","filename":"test\/jdk\/java\/lang\/module\/AutomaticModulesTest.java","additions":70,"deletions":6,"binary":false,"changes":76,"status":"modified"}]}