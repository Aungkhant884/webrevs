[{"commit":{"message":"Merge branch 'openjdk:master' into add_reverse_bit"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"f8cf8c1f22369ff0497a9db0ce55fbe195ff382a"},{"commit":{"message":"8296999: AArch64: scalar intrinsics for reverse method in Integer and Long\n\nx86 implemented the scalar intrinsics for reverse() method in\njava.lang.Integer and java.lang.Long. See JDK-8290034 [1].\n\nIn this patch, we implement the AArch64 backend part\nusing `rbit` intruction [2].\n\nTestReverseBitsVector.java was introduced in [1] to verify the\nIR test results of auto-vectorization and mid-end optimizations.\nIn this patch, we update it to test AArch64 as well.\n\nTests:\n1: These scalar intrinsics can be covered by existing Jtreg cases,\ne.g. [3][4]. Hence, we don't add new one in this patch.\n2: tier1~3 pass on Linux\/AArch64 and Linux\/x86. There are no new failures.\n3: All the vector test cases under the following directories pass on\n128-bit and 256-bit SVE machines.\n\n```\n  test\/hotspot\/jtreg\/compiler\/vectorapi\/\n  test\/jdk\/jdk\/incubator\/vector\/\n  test\/hotspot\/jtreg\/compiler\/vectorization\/\n```\n\n4: JMH results: we initially use the JMH case from [1] (i.e.\nIntegers.reverse and Longs.reverse) to evaluate the performance\nuplifts after enabling these scalar intrinsics. From the data\nshown below, about 5x and 6x performance uplifts can be obtained\nrespectively. However, the benefit comes from auto-vectorization (SLP).\nThat is, ReverseV node can be generated after enabling the newly\nadded scalar intrinsics.\n\nTherefore, in order to evaluate the scalar intrinsics, we firstly\nevaluate the performance on test cases designed to be not\nauto-vectorization friendly. Then, we evaluate the performance\non Integers.reverse and Longs.reverse when using JVM option\n\"-XX:-UseSuperWord\" to disable SLP. We both get about\n5x performance uplifts.\n\n```\nBenchmark              (size) Mode  Before      After        Units\nIntegers.reverse        500   avgt  0.456±0.002 0.080±000.1  us\/op\nLongs.reverse           500   avgt  0.898±0.009 0.142±0.0 0 us\/op\nIntegers.reverse        500   avgt  1.072±0002 0.212±0.01  us\/op\n(disable SLP)\nLongs.reverse           500   avgt  1.073±0.02 0.212±0.01  us\/op\n(disable SLP)\n```\n\n[1] https:\/\/bugs.openjdk.org\/browse\/JDK-8290034\n[2] https:\/\/developer.arm.com\/documentation\/ddi0602\/2022-12\/Base-Instructions\/RBIT--Reverse-Bits-?lang=en\n[3] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java#L1228\n[4] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java#L1250\n\nTEST_LABEL: x86_64&&ubuntu&&conformance\nJDK_SCOPE: hotspot:compiler\/vectorization\/TestReverseBitsVector.java\n\nJira: ENTLLT-5736\nCustomizedGitHooks: yes\nChange-Id: Ic6620d81e787def391d19db07fce53e1e82a0e43"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBitsVector.java"}],"sha":"550634e73b7e5a292bbe39ed9802252888afd32b"}]