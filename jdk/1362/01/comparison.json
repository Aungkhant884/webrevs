{"files":[{"patch":"@@ -68,1 +68,1 @@\n-      CountingSkippedIsAliveClosure<BoolObjectClosure, OopClosure> cl(is_alive, keep_alive);\n+      CountingClosure<BoolObjectClosure, OopClosure> cl(is_alive, keep_alive);\n@@ -70,1 +70,1 @@\n-      it->report_num_dead(cl.num_skipped() + cl.num_dead());\n+      it->report_num_dead(cl.dead());\n@@ -94,6 +94,0 @@\n-  \/\/\n-  \/\/ Serial phases are ignored in this calculation, because of the\n-  \/\/ cost of running unnecessary threads.  These phases are normally\n-  \/\/ small or empty (assuming they are configured to exist at all),\n-  \/\/ and development oriented, so not allocating any threads\n-  \/\/ specifically for them is okay.\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,0 +74,3 @@\n+  template<typename IsAlive, typename KeepAlive>\n+  class CountingClosure;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,21 +41,0 @@\n-template<typename IsAlive>\n-class CountingIsAliveClosure : public BoolObjectClosure {\n-  IsAlive* _inner;\n-\n-  size_t _num_dead;\n-  size_t _num_total;\n-\n-public:\n-  CountingIsAliveClosure(IsAlive* cl) : _inner(cl), _num_dead(0), _num_total(0) { }\n-\n-  virtual bool do_object_b(oop obj) {\n-    bool result = _inner->do_object_b(obj);\n-    _num_dead += !result;\n-    _num_total++;\n-    return result;\n-  }\n-\n-  size_t num_dead() const { return _num_dead; }\n-  size_t num_total() const { return _num_total; }\n-};\n-\n@@ -63,2 +42,2 @@\n-class CountingSkippedIsAliveClosure : public Closure {\n-  CountingIsAliveClosure<IsAlive> _counting_is_alive;\n+class WeakProcessor::CountingClosure : public Closure {\n+  IsAlive* _is_alive;\n@@ -66,2 +45,3 @@\n-\n-  size_t _num_skipped;\n+  size_t _old_dead;\n+  size_t _new_dead;\n+  size_t _live;\n@@ -70,2 +50,7 @@\n-  CountingSkippedIsAliveClosure(IsAlive* is_alive, KeepAlive* keep_alive) :\n-    _counting_is_alive(is_alive), _keep_alive(keep_alive), _num_skipped(0) { }\n+  CountingClosure(IsAlive* is_alive, KeepAlive* keep_alive) :\n+    _is_alive(is_alive),\n+    _keep_alive(keep_alive),\n+    _old_dead(0),\n+    _new_dead(0),\n+    _live(0)\n+  {}\n@@ -76,2 +61,2 @@\n-      _num_skipped++;\n-    } else if (_counting_is_alive.do_object_b(obj)) {\n+      ++_old_dead;\n+    } else if (_is_alive->do_object_b(obj)) {\n@@ -79,0 +64,1 @@\n+      ++_live;\n@@ -81,0 +67,1 @@\n+      ++_new_dead;\n@@ -84,3 +71,3 @@\n-  size_t num_dead() const { return _counting_is_alive.num_dead(); }\n-  size_t num_skipped() const { return _num_skipped; }\n-  size_t num_total() const { return _counting_is_alive.num_total() + num_skipped(); }\n+  size_t dead() const { return _old_dead + _new_dead; }\n+  size_t new_dead() const { return _new_dead; }\n+  size_t total() const { return dead() + _live; }\n@@ -101,1 +88,1 @@\n-    CountingSkippedIsAliveClosure<IsAlive, KeepAlive> cl(is_alive, keep_alive);\n+    CountingClosure<IsAlive, KeepAlive> cl(is_alive, keep_alive);\n@@ -105,1 +92,1 @@\n-    cur_state->increment_num_dead(cl.num_skipped() + cl.num_dead());\n+    cur_state->increment_num_dead(cl.dead());\n@@ -107,1 +94,1 @@\n-      _phase_times->record_worker_items(worker_id, phase, cl.num_dead(), cl.num_total());\n+      _phase_times->record_worker_items(worker_id, phase, cl.new_dead(), cl.total());\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.inline.hpp","additions":22,"deletions":35,"binary":false,"changes":57,"status":"modified"}]}