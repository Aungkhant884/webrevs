{"files":[{"patch":"@@ -0,0 +1,46 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Config'\n+description: 'Read JDK Configuration Variables'\n+inputs:\n+  var:\n+    description: 'The name of the variable to read'\n+    required: true\n+outputs:\n+  value:\n+    description: 'The value of the configuration variable'\n+    value: ${{ steps.read-config.outputs.value }}\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Read configuration variable from repo'\n+      id: read-config\n+      run: |\n+        # Extract value from configuration file\n+        value=\"$(grep -h ${{ inputs.var }}= make\/conf\/github-actions.conf | cut -d '=' -f 2-)\"\n+        echo \"::set-output name=value::$value\"\n+      shell: bash\n","filename":".github\/actions\/config\/action.yml","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Do build'\n+description: 'Build the JDK using make'\n+inputs:\n+  make-target:\n+    description: 'Make target(s)'\n+    required: true\n+  platform:\n+    description: 'Platform name'\n+    required: true\n+  debug-suffix:\n+    description: 'File name suffix denoting debug level, possibly empty'\n+    required: false\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Build'\n+      id: build\n+      run: >\n+        make LOG=info ${{ inputs.make-target }}\n+        || bash .\/.github\/scripts\/gen-build-failure-report.sh \"$GITHUB_STEP_SUMMARY\"\n+      shell: bash\n+\n+    - name: 'Check for failure'\n+      id: check\n+      run: |\n+        # Check for failure marker file\n+        build_dir=\"$(ls -d build\/*)\"\n+        if [[ -e $build_dir\/build-failure ]]; then\n+          # Collect relevant log files\n+          mkdir failure-logs\n+          cp \\\n+              $build_dir\/spec.gmk \\\n+              $build_dir\/build.log \\\n+              $build_dir\/configure.log \\\n+              $build_dir\/make-support\/failure-summary.log \\\n+              $build_dir\/make-support\/failure-logs\/* \\\n+              failure-logs\/ 2> \/dev\/null || true\n+          echo '::set-output name=failure::true'\n+        fi\n+      shell: bash\n+\n+    - name: 'Upload build logs'\n+      uses: actions\/upload-artifact@v3\n+      with:\n+        name: failure-logs-${{ inputs.platform }}${{ inputs.debug-suffix }}\n+        path: failure-logs\n+      if: steps.check.outputs.failure == 'true'\n+\n+      # This is the best way I found to abort the job with an error message\n+    - name: 'Notify about build failures'\n+      uses: actions\/github-script@v6\n+      with:\n+        script: core.setFailed('Build failed. See summary for details.')\n+      if: steps.check.outputs.failure == 'true'\n","filename":".github\/actions\/do-build\/action.yml","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Get BootJDK'\n+description: 'Download the BootJDK from cache or source location'\n+inputs:\n+  platform:\n+    description: 'Platform'\n+    required: true\n+outputs:\n+  path:\n+    description: 'Path to the installed BootJDK'\n+    value: ${{ steps.path-name.outputs.path }}\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Determine platform prefix'\n+      id: platform-prefix\n+      run: |\n+        # Convert platform name to upper case\n+        platform_prefix=\"$(echo ${{ inputs.platform }} | tr [a-z-] [A-Z_])\"\n+        echo \"::set-output name=value::$platform_prefix\"\n+      shell: bash\n+\n+    - name: 'Get URL configuration'\n+      id: url\n+      uses: .\/.github\/actions\/config\n+      with:\n+        var: ${{ steps.platform-prefix.outputs.value}}_BOOT_JDK_URL\n+\n+    - name: 'Get SHA256 configuration'\n+      id: sha256\n+      uses: .\/.github\/actions\/config\n+      with:\n+        var: ${{ steps.platform-prefix.outputs.value}}_BOOT_JDK_SHA256\n+\n+    - name: 'Get file extension configuration'\n+      id: ext\n+      uses: .\/.github\/actions\/config\n+      with:\n+        var: ${{ steps.platform-prefix.outputs.value}}_BOOT_JDK_EXT\n+\n+    - name: 'Check cache for BootJDK'\n+      id: get-cached-bootjdk\n+      uses: actions\/cache@v3\n+      with:\n+        path: bootjdk\/jdk\n+        key: boot-jdk-${{ inputs.platform }}-${{ steps.sha256.outputs.value }}\n+\n+      # macOS is missing sha256sum\n+    - name: 'Install sha256sum'\n+      run: |\n+        # Run Homebrew installation\n+        brew install coreutils\n+      shell: bash\n+      if: steps.get-cached-bootjdk.outputs.cache-hit != 'true' && runner.os == 'macOS'\n+\n+    - name: 'Download BootJDK'\n+      run: |\n+        # Download BootJDK and verify checksum\n+        mkdir -p bootjdk\/jdk\n+        mkdir -p bootjdk\/unpacked\n+        wget --progress=dot:mega -O bootjdk\/jdk.${{ steps.ext.outputs.value }} '${{ steps.url.outputs.value }}'\n+        echo '${{ steps.sha256.outputs.value }} bootjdk\/jdk.${{ steps.ext.outputs.value }}' | sha256sum -c >\/dev\/null -\n+      shell: bash\n+      if: steps.get-cached-bootjdk.outputs.cache-hit != 'true'\n+\n+    - name: 'Unpack BootJDK'\n+      run: |\n+        # Unpack the BootJDK and move files to a common location\n+        if [[ '${{ steps.ext.outputs.value }}' == 'tar.gz' ]]; then\n+          tar -xf bootjdk\/jdk.${{ steps.ext.outputs.value }} -C bootjdk\/unpacked\n+        else\n+          unzip -q bootjdk\/jdk.${{ steps.ext.outputs.value }} -d bootjdk\/unpacked\n+        fi\n+        jdk_root=\"$(dirname $(find bootjdk\/unpacked -name bin -type d))\"\n+        mv \"$jdk_root\"\/* bootjdk\/jdk\/\n+      shell: bash\n+      if: steps.get-cached-bootjdk.outputs.cache-hit != 'true'\n+\n+    - name: 'Export path to where BootJDK is installed'\n+      id: path-name\n+      run: |\n+        # Export the path\n+        echo '::set-output name=path::bootjdk\/jdk'\n+      shell: bash\n","filename":".github\/actions\/get-bootjdk\/action.yml","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Get bundles'\n+description: 'Download resulting JDK bundles'\n+inputs:\n+  platform:\n+    description: 'Platform name'\n+    required: true\n+  debug-suffix:\n+    description: 'File name suffix denoting debug level, possibly empty'\n+    required: false\n+outputs:\n+  jdk-path:\n+    description: 'Path to the installed JDK bundle'\n+    value: ${{ steps.path-name.outputs.jdk }}\n+  symbols-path:\n+    description: 'Path to the installed symbols bundle'\n+    value: ${{ steps.path-name.outputs.symbols }}\n+  tests-path:\n+    description: 'Path to the installed tests bundle'\n+    value: ${{ steps.path-name.outputs.tests }}\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Download bundles artifact'\n+      id: download-bundles\n+      uses: actions\/download-artifact@v3\n+      with:\n+        name: bundles-${{ inputs.platform }}${{ inputs.debug-suffix }}\n+        path: bundles\n+      continue-on-error: true\n+\n+    - name: 'Download bundles artifact (retry)'\n+      uses: actions\/download-artifact@v3\n+      with:\n+        name: bundles-${{ inputs.platform }}${{ inputs.debug-suffix }}\n+        path: bundles\n+      if: steps.download-bundles.outcome == 'failure'\n+\n+    - name: 'Unpack bundles'\n+      run: |\n+        if [[ -e bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.zip ]]; then\n+          echo 'Unpacking jdk bundle...'\n+          mkdir -p bundles\/jdk\n+          unzip -q bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.zip -d bundles\/jdk\n+        fi\n+\n+        if [[ -e bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz ]]; then\n+          echo 'Unpacking jdk bundle...'\n+          mkdir -p bundles\/jdk\n+          tar -xf bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz -C bundles\/jdk\n+        fi\n+\n+        if [[ -e bundles\/symbols-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz ]]; then\n+          echo 'Unpacking symbols bundle...'\n+          mkdir -p bundles\/symbols\n+          tar -xf bundles\/symbols-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz -C bundles\/symbols\n+        fi\n+\n+        if [[ -e bundles\/tests-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz ]]; then\n+          echo 'Unpacking tests bundle...'\n+          mkdir -p bundles\/tests\n+          tar -xf bundles\/tests-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz -C bundles\/tests\n+        fi\n+      shell: bash\n+\n+    - name: 'Export paths to where bundles are installed'\n+      id: path-name\n+      run: |\n+        # Export the paths\n+\n+        jdk_dir=\"$GITHUB_WORKSPACE\/$(dirname $(find bundles\/jdk -name bin -type d))\"\n+        symbols_dir=\"$GITHUB_WORKSPACE\/$(dirname $(find bundles\/symbols -name bin -type d))\"\n+        tests_dir=\"$GITHUB_WORKSPACE\/bundles\/tests\"\n+\n+        if [[ '${{ runner.os }}' == 'Windows' ]]; then\n+          jdk_dir=\"$(cygpath $jdk_dir)\"\n+          symbols_dir=\"$(cygpath $symbols_dir)\"\n+          tests_dir=\"$(cygpath $tests_dir)\"\n+        fi\n+\n+        echo \"::set-output name=jdk::$jdk_dir\"\n+        echo \"::set-output name=symbols::$symbols_dir\"\n+        echo \"::set-output name=tests::$tests_dir\"\n+      shell: bash\n","filename":".github\/actions\/get-bundles\/action.yml","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Get GTest'\n+description: 'Download GTest source'\n+outputs:\n+  path:\n+    description: 'Path to the installed GTest'\n+    value: ${{ steps.path-name.outputs.path }}\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Get GTest version configuration'\n+      id: version\n+      uses: .\/.github\/actions\/config\n+      with:\n+        var: GTEST_VERSION\n+\n+    - name: 'Checkout GTest source'\n+      uses: actions\/checkout@v3\n+      with:\n+        repository: google\/googletest\n+        ref: 'release-${{ steps.version.outputs.value }}'\n+        path: gtest\n+\n+    - name: 'Export path to where GTest is installed'\n+      id: path-name\n+      run: |\n+        # Export the path\n+        echo '::set-output name=path::gtest'\n+      shell: bash\n","filename":".github\/actions\/get-gtest\/action.yml","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Get JTReg'\n+description: 'Download JTReg from cache or source location'\n+outputs:\n+  path:\n+    description: 'Path to the installed JTReg'\n+    value: ${{ steps.path-name.outputs.path }}\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Get JTReg version configuration'\n+      id: version\n+      uses: .\/.github\/actions\/config\n+      with:\n+        var: JTREG_VERSION\n+\n+    - name: 'Check cache for JTReg'\n+      id: get-cached-jtreg\n+      uses: actions\/cache@v3\n+      with:\n+        path: jtreg\/installed\n+        key: jtreg-${{ steps.version.outputs.value }}\n+\n+    - name: 'Checkout the JTReg source'\n+      uses: actions\/checkout@v3\n+      with:\n+        repository: sormuras\/jtreg\n+        ref: 7903206-build-on-msys2\n+        path: jtreg\/src\n+      if: steps.get-cached-jtreg.outputs.cache-hit != 'true'\n+\n+    - name: 'Build JTReg'\n+      run: |\n+        # Build JTReg and move files to the proper locations\n+        bash make\/build.sh --jdk \"$JAVA_HOME_11_X64\"\n+        mkdir ..\/installed\n+        mv build\/images\/jtreg\/* ..\/installed\n+      working-directory: jtreg\/src\n+      shell: bash\n+      if: steps.get-cached-jtreg.outputs.cache-hit != 'true'\n+\n+    - name: 'Export path to where JTReg is installed'\n+      id: path-name\n+      run: |\n+        # Export the path\n+        echo '::set-output name=path::jtreg\/installed'\n+      shell: bash\n","filename":".github\/actions\/get-jtreg\/action.yml","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Get msys'\n+description: 'Download MSYS2 and prepare a Windows host'\n+\n+runs:\n+  using: composite\n+  steps:\n+    - name: 'Install msys2'\n+      uses: msys2\/setup-msys2@v2\n+      with:\n+        install: 'autoconf tar unzip zip make'\n+        path-type: minimal\n+        location: msys\n+\n+      # We can't run bash until this is completed, so stick with pwsh\n+    - name: 'Set msys path'\n+      run: |\n+        # Prepend msys\/msys64\/usr\/bin to the PATH\n+        echo \"$env:GITHUB_WORKSPACE\/msys\/msys64\/usr\/bin\" >> $env:GITHUB_PATH\n+      shell: pwsh\n","filename":".github\/actions\/get-msys\/action.yml","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Upload bundles'\n+description: 'Upload resulting JDK bundles'\n+inputs:\n+  platform:\n+    description: 'Platform name'\n+    required: true\n+  debug-suffix:\n+    description: 'File name suffix denoting debug level, possibly empty'\n+    required: false\n+\n+runs:\n+  using: composite\n+  steps:\n+\n+    - name: 'Determine bundle names'\n+      id: bundles\n+      run: |\n+        # Rename bundles to consistent names\n+        jdk_bundle_zip=\"$(ls build\/*\/bundles\/jdk-*_bin${{ inputs.debug-suffix }}.zip 2> \/dev\/null || true)\"\n+        jdk_bundle_tar_gz=\"$(ls build\/*\/bundles\/jdk-*_bin${{ inputs.debug-suffix }}.tar.gz 2> \/dev\/null || true)\"\n+        symbols_bundle=\"$(ls build\/*\/bundles\/jdk-*_bin${{ inputs.debug-suffix }}-symbols.tar.gz 2> \/dev\/null || true)\"\n+        tests_bundle=\"$(ls build\/*\/bundles\/jdk-*_bin-tests${{ inputs.debug-suffix }}.tar.gz 2> \/dev\/null || true)\"\n+\n+        mkdir bundles\n+\n+        if [[ \"$jdk_bundle_zip\" != \"\" ]]; then\n+          mv \"$jdk_bundle_zip\" \"bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.zip\"\n+        fi\n+        if [[ \"$jdk_bundle_tar_gz\" != \"\" ]]; then\n+          mv \"$jdk_bundle_tar_gz\" \"bundles\/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz\"\n+        fi\n+        if [[ \"$symbols_bundle\" != \"\" ]]; then\n+          mv \"$symbols_bundle\" \"bundles\/symbols-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz\"\n+        fi\n+        if [[ \"$tests_bundle\" != \"\" ]]; then\n+          mv \"$tests_bundle\" \"bundles\/tests-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz\"\n+        fi\n+\n+        if [[ \"$jdk_bundle_zip$jdk_bundle_tar_gz$symbols_bundle$tests_bundle\" != \"\" ]]; then\n+          echo '::set-output name=bundles-found::true'\n+        else\n+          echo '::set-output name=bundles-found::false'\n+        fi\n+      shell: bash\n+\n+    - name: 'Upload bundles artifact'\n+      uses: actions\/upload-artifact@v3\n+      with:\n+        name: bundles-${{ inputs.platform }}${{ inputs.debug-suffix }}\n+        path: bundles\n+        retention-days: 1\n+      if: steps.bundles.outputs.bundles-found == 'true'\n","filename":".github\/actions\/upload-bundles\/action.yml","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+GITHUB_STEP_SUMMARY=\"$1\"\n+BUILD_DIR=\"$(ls -d build\/*)\"\n+\n+# Send signal to the do-build action that we failed\n+touch \"$BUILD_DIR\/build-failure\"\n+\n+(\n+  echo '### :boom: Build failure summary'\n+  echo ''\n+  echo 'The build failed. Here follows the failure summary from the build.'\n+  echo '<details><summary><b>View build failure summary<\/b><\/summary>'\n+  echo ''\n+  echo '```'\n+  if [[ -f \"$BUILD_DIR\/make-support\/failure-summary.log\" ]]; then\n+    cat \"$BUILD_DIR\/make-support\/failure-summary.log\"\n+  else\n+    echo \"Failure summary ($BUILD_DIR\/make-support\/failure-summary.log) not found\"\n+  fi\n+  echo '```'\n+  echo '<\/details>'\n+  echo ''\n+\n+  echo ''\n+  echo ':arrow_right: To see the entire test log, click the job in the list to the left. To download logs, see the `failure-logs` [artifact above](#artifacts).'\n+) >> $GITHUB_STEP_SUMMARY\n","filename":".github\/scripts\/gen-build-failure-report.sh","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+GITHUB_STEP_SUMMARY=\"$1\"\n+\n+test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n+\n+failures=$(sed -E -e 's\/(.*)\\.(java|sh)\/\\1\/' -e '\/^#\/d' $results_dir\/newfailures.txt 2> \/dev\/null || true)\n+errors=$(sed -E -e 's\/(.*)\\.(java|sh)\/\\1\/' -e '\/^#\/d' $results_dir\/other_errors.txt 2> \/dev\/null || true)\n+\n+if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+  # If we have nothing to report, exit this step now\n+  exit 0\n+fi\n+\n+echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n+for test in $failures $errors; do\n+  anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+  base_path=\"$(echo \"$test\" | tr '#' '_')\"\n+  report_file=\"$report_dir\/$base_path.jtr\"\n+  hs_err_files=$(ls $report_dir\/$base_path\/hs_err*.log 2> \/dev\/null || true)\n+  echo \"####  <a id=\"$anchor\">$test\"\n+\n+  echo '<details><summary>View test results<\/summary>'\n+  echo ''\n+  echo '```'\n+  if [[ -f \"$report_file\" ]]; then\n+    cat \"$report_file\"\n+  else\n+    echo \"Error: Result file $report_file not found\"\n+  fi\n+  echo '```'\n+  echo '<\/details>'\n+  echo ''\n+\n+  if [[ \"$hs_err_files\" != \"\" ]]; then\n+    echo '<details><summary>View HotSpot error log<\/summary>'\n+    echo ''\n+    for hs_err in $hs_err_files; do\n+      echo '```'\n+      echo \"$hs_err:\"\n+      echo ''\n+      cat \"$hs_err\"\n+      echo '```'\n+    done\n+\n+    echo '<\/details>'\n+    echo ''\n+  fi\n+\n+done >> $GITHUB_STEP_SUMMARY\n+\n+# With many failures, the summary can easily exceed 1024 kB, the limit set by Github\n+# Trim it down if so.\n+summary_size=$(wc -c < $GITHUB_STEP_SUMMARY)\n+if [[ $summary_size -gt 1000000 ]]; then\n+  # Trim to below 1024 kB, and cut off after the last detail group\n+  head -c 1000000 $GITHUB_STEP_SUMMARY | tac | sed -n -e '\/<\\\/details>\/,$ p' | tac > $GITHUB_STEP_SUMMARY.tmp\n+  mv $GITHUB_STEP_SUMMARY.tmp $GITHUB_STEP_SUMMARY\n+  (\n+    echo ''\n+    echo ':x: **WARNING: Summary is too large and has been truncated.**'\n+    echo ''\n+  )  >> $GITHUB_STEP_SUMMARY\n+fi\n+\n+echo ':arrow_right: To see the entire test log, click the job in the list to the left.'  >> $GITHUB_STEP_SUMMARY\n","filename":".github\/scripts\/gen-test-results.sh","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+#!\/bin\/bash\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+GITHUB_STEP_SUMMARY=\"$1\"\n+\n+test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+\n+if [[ ! -f build\/run-test-prebuilt\/make-support\/exit-with-error ]]; then\n+  # There were no failures, exit now\n+  exit\n+fi\n+\n+failures=$(sed -E -e 's\/(.*)\\.(java|sh)\/\\1\/' -e '\/^#\/d' $results_dir\/newfailures.txt 2> \/dev\/null || true)\n+errors=$(sed -E -e 's\/(.*)\\.(java|sh)\/\\1\/' -e '\/^#\/d' $results_dir\/other_errors.txt 2> \/dev\/null || true)\n+failure_count=$(echo $failures | wc -w || true)\n+error_count=$(echo $errors | wc -w || true)\n+\n+if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+  # We know something went wrong, but not what\n+  echo '::set-output name=error-message::Unspecified test suite failure. Please see log for job for details.'\n+  exit 0\n+fi\n+\n+echo '::set-output name=failure::true'\n+echo \"::set-output name=error-message::Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n+\n+echo '### :boom: Test failures summary' >> $GITHUB_STEP_SUMMARY\n+\n+if [[ \"$failures\" != \"\" ]]; then\n+  echo '' >> $GITHUB_STEP_SUMMARY\n+  echo 'These tests reported failure:' >> $GITHUB_STEP_SUMMARY\n+  for test in $failures; do\n+    anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+    echo \"* [$test](#user-content-$anchor)\"\n+  done >> $GITHUB_STEP_SUMMARY\n+fi\n+\n+if [[ \"$errors\" != \"\" ]]; then\n+  echo '' >> $GITHUB_STEP_SUMMARY\n+  echo 'These tests reported errors:'  >> $GITHUB_STEP_SUMMARY\n+  for test in $errors; do\n+    anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+    echo \"* [$test](#user-content-$anchor)\"\n+  done >> $GITHUB_STEP_SUMMARY\n+fi\n","filename":".github\/scripts\/gen-test-summary.sh","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (cross-compile)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      apt-gcc-version:\n+        required: false\n+        type: string\n+        default: '10=10.3.0-1ubuntu1~20.04'\n+\n+jobs:\n+  build-cross-compile:\n+    name: build\n+    runs-on: ubuntu-20.04\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        target-cpu:\n+          - aarch64\n+          - arm\n+          - s390x\n+          - ppc64le\n+        include:\n+          - target-cpu: aarch64\n+            debian-arch: arm64\n+            gnu-arch: aarch64\n+          - target-cpu: arm\n+            debian-arch: armhf\n+            gnu-arch: arm\n+            gnu-abi: eabihf\n+          - target-cpu: s390x\n+            debian-arch: s390x\n+            gnu-arch: s390x\n+          - target-cpu: ppc64le\n+            debian-arch: ppc64el\n+            gnu-arch: powerpc64le\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v3\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: linux-x64\n+\n+        # Use linux-x64 JDK bundle as build JDK\n+      - name: 'Get build JDK'\n+        id: buildjdk\n+        uses: .\/.github\/actions\/get-bundles\n+        with:\n+          platform: linux-x64\n+\n+        # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Install dependencies using apt-get\n+          sudo apt-get update\n+          sudo apt-get install --only-upgrade apt\n+          sudo apt-get install gcc-${{ inputs.apt-gcc-version }} g++-${{ inputs.apt-gcc-version }} libxrandr-dev${{ inputs.apt-architecture }} libxtst-dev${{ inputs.apt-architecture }} libcups2-dev${{ inputs.apt-architecture }} libasound2-dev${{ inputs.apt-architecture }}\n+          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n+          sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}=10.3.0-1ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}=10.3.0-1ubuntu1~20.04cross1\n+\n+      - name: 'Check cache for sysroot'\n+        id: get-cached-sysroot\n+        uses: actions\/cache@v3\n+        with:\n+          path: sysroot\n+          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('.\/.github\/workflows\/build-cross-compile.yml') }}\n+\n+      - name: 'Install sysroot dependencies'\n+        run: sudo apt-get install debootstrap qemu-user-static\n+        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: 'Create sysroot'\n+        run: >\n+          sudo qemu-debootstrap\n+          --arch=${{ matrix.debian-arch }}\n+          --verbose\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --resolve-deps\n+          buster\n+          sysroot\n+          http:\/\/httpredir.debian.org\/debian\/\n+        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: 'Prepare sysroot'\n+        run: |\n+          # Prepare sysroot and remove unused files to minimize cache\n+          sudo chroot sysroot symlinks -cr .\n+          sudo chown ${USER} -R sysroot\n+          rm -rf sysroot\/{dev,proc,run,sys}\n+        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=linux-${{ matrix.target-cpu }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --with-zlib=system\n+          --enable-debug\n+          --disable-precompiled-headers\n+          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}\n+          --with-sysroot=sysroot\n+          --with-build-jdk=${{ steps.buildjdk.outputs.jdk-path }}\n+          CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-gcc-10\n+          CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-g++-10\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: 'hotspot'\n+          platform: linux-${{ matrix.target-cpu }}\n","filename":".github\/workflows\/build-cross-compile.yml","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (linux)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      extra-conf-options:\n+        required: false\n+        type: string\n+      make-target:\n+        required: false\n+        type: string\n+        default: 'product-bundles test-bundles'\n+      debug-levels:\n+        required: false\n+        type: string\n+        default: '[ \"debug\", \"release\" ]'\n+      apt-gcc-version:\n+        required: true\n+        type: string\n+      apt-architecture:\n+        required: false\n+        type: string\n+      apt-add-architecture:\n+        required: false\n+        type: string\n+      apt-extra-packages:\n+        required: false\n+        type: string\n+\n+jobs:\n+  build-linux:\n+    name: build\n+    runs-on: ubuntu-20.04\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n+        include:\n+          - debug-level: debug\n+            flags: --with-debug-level=fastdebug\n+            suffix: -debug\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v3\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: linux-x64\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get GTest'\n+        id: gtest\n+        uses: .\/.github\/actions\/get-gtest\n+\n+      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Install dependencies using apt-get\n+          ${{ inputs.apt-add-architecture }}\n+          sudo apt-get update\n+          sudo apt-get install --only-upgrade apt\n+          sudo apt-get install gcc-${{ inputs.apt-gcc-version }} g++-${{ inputs.apt-gcc-version }} libxrandr-dev${{ inputs.apt-architecture }} libxtst-dev${{ inputs.apt-architecture }} libcups2-dev${{ inputs.apt-architecture }} libasound2-dev${{ inputs.apt-architecture }} ${{ inputs.apt-extra-packages }}\n+          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n+\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=${{ inputs.platform }}\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --with-jtreg=${{ steps.jtreg.outputs.path }}\n+          --with-gtest=${{ steps.gtest.outputs.path }}\n+          --enable-jtreg-failure-handler\n+          --with-zlib=system\n+          ${{ inputs.extra-conf-options }}\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: '${{ inputs.make-target }}'\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n+\n+      - name: 'Upload bundles'\n+        uses: .\/.github\/actions\/upload-bundles\n+        with:\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n","filename":".github\/workflows\/build-linux.yml","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (macos)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      extra-conf-options:\n+        required: false\n+        type: string\n+      make-target:\n+        required: false\n+        type: string\n+        default: 'product-bundles test-bundles'\n+      debug-levels:\n+        required: false\n+        type: string\n+        default: '[ \"debug\", \"release\" ]'\n+      xcode-toolset-version:\n+        required: true\n+        type: string\n+\n+jobs:\n+  build-macos:\n+    name: build\n+    runs-on: macos-10.15\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n+        include:\n+          - debug-level: debug\n+            flags: --with-debug-level=fastdebug\n+            suffix: -debug\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v3\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: macos-x64\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get GTest'\n+        id: gtest\n+        uses: .\/.github\/actions\/get-gtest\n+\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Run Homebrew installation and xcode-select\n+          brew install make\n+          sudo xcode-select --switch \/Applications\/Xcode_${{ inputs.xcode-toolset-version }}.app\/Contents\/Developer\n+          # This will make GNU make available as 'make' and not only as 'gmake'\n+          echo '\/usr\/local\/opt\/make\/libexec\/gnubin' >> $GITHUB_PATH\n+\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=${{ inputs.platform }}\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --with-jtreg=${{ steps.jtreg.outputs.path }}\n+          --with-gtest=${{ steps.gtest.outputs.path }}\n+          --enable-jtreg-failure-handler\n+          --with-zlib=system\n+          ${{ inputs.extra-conf-options }}\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: '${{ inputs.make-target }}'\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n+\n+      - name: 'Upload bundles'\n+        uses: .\/.github\/actions\/upload-bundles\n+        with:\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n","filename":".github\/workflows\/build-macos.yml","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (windows)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      extra-conf-options:\n+        required: false\n+        type: string\n+      make-target:\n+        required: false\n+        type: string\n+        default: 'product-bundles test-bundles'\n+      debug-levels:\n+        required: false\n+        type: string\n+        default: '[ \"debug\", \"release\" ]'\n+      msvc-toolset-version:\n+        required: true\n+        type: string\n+      msvc-toolset-architecture:\n+        required: true\n+        type: string\n+\n+env:\n+  # These are needed to make the msys bash work properly\n+  MSYS2_PATH_TYPE: minimal\n+  CHERE_INVOKING: 1\n+\n+jobs:\n+  build-windows:\n+    name: build\n+    runs-on: windows-2019\n+    defaults:\n+      run:\n+        shell: bash\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        debug-level: ${{ fromJSON(inputs.debug-levels) }}\n+        include:\n+          - debug-level: debug\n+            flags: --with-debug-level=fastdebug\n+            suffix: -debug\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v3\n+\n+      - name: 'Get MSYS2'\n+        id: msys\n+        uses: .\/.github\/actions\/get-msys\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: windows-x64\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get GTest'\n+        id: gtest\n+        uses: .\/.github\/actions\/get-gtest\n+\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Run Visual Studio Installer\n+          '\/c\/Program Files (x86)\/Microsoft Visual Studio\/Installer\/vs_installer.exe' \\\n+            modify --quiet --installPath 'C:\/Program Files (x86)\/Microsoft Visual Studio\/2019\/Enterprise' \\\n+            --add Microsoft.VisualStudio.Component.VC.${{ inputs.msvc-toolset-version }}.${{ inputs.msvc-toolset-architecture }}\n+\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=${{ inputs.platform }}\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --with-jtreg=${{ steps.jtreg.outputs.path }}\n+          --with-gtest=${{ steps.gtest.outputs.path }}\n+          --enable-jtreg-failure-handler\n+          --with-msvc-toolset-version=${{ inputs.msvc-toolset-version }}\n+          ${{ inputs.extra-conf-options }}\n+        env:\n+          # We need a minimal PATH on Windows\n+          # Set PATH to \"\", so just GITHUB_PATH is included\n+          PATH: ''\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: '${{ inputs.make-target }}'\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n+\n+      - name: 'Upload bundles'\n+        uses: .\/.github\/actions\/upload-bundles\n+        with:\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: '${{ matrix.suffix }}'\n","filename":".github\/workflows\/build-windows.yml","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,285 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'OpenJDK GHA Sanity Checks'\n+\n+on:\n+  push:\n+    branches-ignore:\n+      - master\n+      - pr\/*\n+  workflow_dispatch:\n+    inputs:\n+      platforms:\n+        description: 'Platform(s) to execute on (comma separated, e.g. \"linux-x64, macos, aarch64\")'\n+        required: true\n+        default: 'linux-x64, linux-x86, linux-x64-variants, linux-cross-compile, macos-x64, macos-aarch64, windows-x64, windows-aarch64'\n+\n+concurrency:\n+  group: ${{ github.workflow }}-${{ github.ref }}\n+  cancel-in-progress: false\n+\n+jobs:\n+\n+  ###\n+  ### Determine platforms to include\n+  ###\n+\n+  select:\n+    name: 'Select platforms'\n+    runs-on: ubuntu-20.04\n+    outputs:\n+      linux-x64: ${{ steps.include.outputs.linux-x64 }}\n+      linux-x86: ${{ steps.include.outputs.linux-x86 }}\n+      linux-x64-variants: ${{ steps.include.outputs.linux-x64-variants }}\n+      linux-cross-compile: ${{ steps.include.outputs.linux-cross-compile }}\n+      macos-x64: ${{ steps.include.outputs.macos-x64 }}\n+      macos-aarch64: ${{ steps.include.outputs.macos-aarch64 }}\n+      windows-x64: ${{ steps.include.outputs.windows-x64 }}\n+      windows-aarch64: ${{ steps.include.outputs.windows-aarch64 }}\n+\n+    steps:\n+        # This function must be inlined in main.yml, or we'd be forced to checkout the repo\n+      - name: 'Check what jobs to run'\n+        id: include\n+        run: |\n+          # Determine which platform jobs to run\n+\n+          # Returns 'true' if the input platform list matches any of the platform monikers given as argument,\n+          # 'false' otherwise.\n+          # arg $1: platform name or names to look for\n+          function check_platform() {\n+            if [[ '${{ !secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs\/heads\/submit\/') }}' == 'false' ]]; then\n+              # If JDK_SUBMIT_FILTER is set, and this is not a \"submit\/\" branch, don't run anything\n+              echo 'false'\n+              return\n+            fi\n+\n+            if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then\n+              input='${{ github.event.inputs.platforms }}'\n+            elif [[ $GITHUB_EVENT_NAME == push ]]; then\n+              input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'\n+            else\n+              echo 'Internal error in GHA'\n+              exit 1\n+            fi\n+\n+            normalized_input=\"$(echo ,$input, | tr -d ' ')\"\n+            if [[ \"$normalized_input\" == \",,\" ]]; then\n+              # For an empty input, assume all platforms should run\n+              echo 'true'\n+              return\n+            else\n+              # Check for all acceptable platform names\n+              for part in $* ; do\n+                if echo \"$normalized_input\" | grep -q -e \",$part,\" ; then\n+                  echo 'true'\n+                  return\n+                fi\n+              done\n+            fi\n+\n+            echo 'false'\n+          }\n+\n+          echo \"::set-output name=linux-x64::$(check_platform linux-x64 linux x64)\"\n+          echo \"::set-output name=linux-x86::$(check_platform linux-x86 linux x86)\"\n+          echo \"::set-output name=linux-x64-variants::$(check_platform linux-x64-variants variants)\"\n+          echo \"::set-output name=linux-cross-compile::$(check_platform linux-cross-compile cross-compile)\"\n+          echo \"::set-output name=macos-x64::$(check_platform macos-x64 macos x64)\"\n+          echo \"::set-output name=macos-aarch64::$(check_platform macos-aarch64 macos aarch64)\"\n+          echo \"::set-output name=windows-x64::$(check_platform windows-x64 windows x64)\"\n+          echo \"::set-output name=windows-aarch64::$(check_platform windows-aarch64 windows aarch64)\"\n+\n+  ###\n+  ### Build jobs\n+  ###\n+\n+  build-linux-x64:\n+    name: linux-x64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x64\n+      apt-gcc-version: '10=10.3.0-1ubuntu1~20.04'\n+    # The linux-x64 jdk bundle is used as buildjdk for the cross-compile job\n+    if: needs.select.outputs.linux-x64 == 'true' || needs.select.outputs.linux-cross-compile == 'true'\n+\n+  build-linux-x86:\n+    name: linux-x86\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x86\n+      apt-gcc-version: '10-multilib'\n+      apt-architecture: ':i386'\n+      apt-add-architecture: 'sudo dpkg --add-architecture i386'\n+      # Some multilib libraries do not have proper inter-dependencies, so we have to\n+      # install their dependencies manually.\n+      apt-extra-packages: 'libfreetype6-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386'\n+      extra-conf-options: '--with-target-bits=32'\n+    if: needs.select.outputs.linux-x86 == 'true'\n+\n+  build-linux-x64-hs-nopch:\n+    name: linux-x64-hs-nopch\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x64\n+      make-target: 'hotspot'\n+      debug-levels: '[ \"debug\" ]'\n+      apt-gcc-version: '10=10.3.0-1ubuntu1~20.04'\n+      extra-conf-options: '--disable-precompiled-headers'\n+    if: needs.select.outputs.linux-x64-variants == 'true'\n+\n+  build-linux-x64-hs-zero:\n+    name: linux-x64-hs-zero\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x64\n+      make-target: 'hotspot'\n+      debug-levels: '[ \"debug\" ]'\n+      apt-gcc-version: '10=10.3.0-1ubuntu1~20.04'\n+      extra-conf-options: '--with-jvm-variants=zero --disable-precompiled-headers'\n+    if: needs.select.outputs.linux-x64-variants == 'true'\n+\n+  build-linux-x64-hs-minimal:\n+    name: linux-x64-hs-minimal\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x64\n+      make-target: 'hotspot'\n+      debug-levels: '[ \"debug\" ]'\n+      apt-gcc-version: '10=10.3.0-1ubuntu1~20.04'\n+      extra-conf-options: '--with-jvm-variants=minimal --disable-precompiled-headers'\n+    if: needs.select.outputs.linux-x64-variants == 'true'\n+\n+  build-linux-x64-hs-optimized:\n+    name: linux-x64-hs-optimized\n+    needs: select\n+    uses: .\/.github\/workflows\/build-linux.yml\n+    with:\n+      platform: linux-x64\n+      make-target: 'hotspot'\n+      # Technically this is not the \"debug\" level, but we can't inject a new matrix state for just this job\n+      debug-levels: '[ \"debug\" ]'\n+      apt-gcc-version: '10=10.3.0-1ubuntu1~20.04'\n+      extra-conf-options: '--with-debug-level=optimized --disable-precompiled-headers'\n+    if: needs.select.outputs.linux-x64-variants == 'true'\n+\n+  build-linux-cross-compile:\n+    name: linux-cross-compile\n+    needs:\n+      - select\n+      - build-linux-x64\n+    uses: .\/.github\/workflows\/build-cross-compile.yml\n+    if: needs.select.outputs.linux-cross-compile == 'true'\n+\n+  build-macos-x64:\n+    name: macos-x64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-macos.yml\n+    with:\n+      platform: macos-x64\n+      xcode-toolset-version: '11.3.1'\n+    if: needs.select.outputs.macos-x64 == 'true'\n+\n+  build-macos-aarch64:\n+    name: macos-aarch64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-macos.yml\n+    with:\n+      platform: macos-aarch64\n+      xcode-toolset-version: '12.4'\n+      extra-conf-options: '--openjdk-target=aarch64-apple-darwin'\n+    if: needs.select.outputs.macos-aarch64 == 'true'\n+\n+  build-windows-x64:\n+    name: windows-x64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-windows.yml\n+    with:\n+      platform: windows-x64\n+      msvc-toolset-version: '14.25'\n+      msvc-toolset-architecture: 'x86.x64'\n+    if: needs.select.outputs.windows-x64 == 'true'\n+\n+  build-windows-aarch64:\n+    name: windows-aarch64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-windows.yml\n+    with:\n+      platform: windows-aarch64\n+      msvc-toolset-version: '14.29'\n+      msvc-toolset-architecture: 'arm64'\n+      make-target: 'hotspot'\n+      extra-conf-options: '--openjdk-target=aarch64-unknown-cygwin'\n+    if: needs.select.outputs.windows-aarch64 == 'true'\n+\n+  ###\n+  ### Test jobs\n+  ###\n+\n+  test-linux-x64:\n+    name: linux-x64\n+    needs:\n+      - build-linux-x64\n+    uses: .\/.github\/workflows\/test.yml\n+    with:\n+      platform: linux-x64\n+      bootjdk-platform: linux-x64\n+      runs-on: ubuntu-20.04\n+\n+  test-linux-x86:\n+    name: linux-x86\n+    needs:\n+      - build-linux-x86\n+    uses: .\/.github\/workflows\/test.yml\n+    with:\n+      platform: linux-x86\n+      bootjdk-platform: linux-x64\n+      runs-on: ubuntu-20.04\n+\n+  test-macos-x64:\n+    name: macos-x64\n+    needs:\n+      - build-macos-x64\n+    uses: .\/.github\/workflows\/test.yml\n+    with:\n+      platform: macos-x64\n+      bootjdk-platform: macos-x64\n+      runs-on: macos-10.15\n+\n+  test-windows-x64:\n+    name: windows-x64\n+    needs:\n+      - build-windows-x64\n+    uses: .\/.github\/workflows\/test.yml\n+    with:\n+      platform: windows-x64\n+      bootjdk-platform: windows-x64\n+      runs-on: windows-2019\n","filename":".github\/workflows\/main.yml","additions":285,"deletions":0,"binary":false,"changes":285,"status":"added"},{"patch":"@@ -1,2040 +0,0 @@\n-name: Pre-submit tests\n-\n-on:\n-  push:\n-    branches-ignore:\n-      - master\n-      - pr\/*\n-  workflow_dispatch:\n-    inputs:\n-      platforms:\n-        description: \"Platform(s) to execute on\"\n-        required: true\n-        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows aarch64, Windows x64, macOS x64, macOS aarch64\"\n-\n-concurrency:\n-  group: ${{ github.workflow }}-${{ github.ref }}\n-  cancel-in-progress: true\n-\n-jobs:\n-  prerequisites:\n-    name: Prerequisites\n-    runs-on: \"ubuntu-20.04\"\n-    outputs:\n-      should_run: ${{ steps.check_submit.outputs.should_run }}\n-      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}\n-      jdk_version: ${{ steps.check_jdk_versions.outputs.jdk_version }}\n-      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional }}\n-      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}\n-      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}\n-      platform_windows_aarch64: ${{ steps.check_platforms.outputs.platform_windows_aarch64 }}\n-      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}\n-      platform_macos_x64: ${{ steps.check_platforms.outputs.platform_macos_x64 }}\n-      platform_macos_aarch64: ${{ steps.check_platforms.outputs.platform_macos_aarch64 }}\n-      dependencies: ${{ steps.check_deps.outputs.dependencies }}\n-\n-    steps:\n-      - name: Check if submit tests should actually run depending on secrets and manual triggering\n-        id: check_submit\n-        run: echo \"::set-output name=should_run::${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs\/heads\/submit\/')) }}\"\n-\n-      - name: Check which platforms should be included\n-        id: check_platforms\n-        run: |\n-          echo \"::set-output name=platform_linux_additional::${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}\"\n-          echo \"::set-output name=platform_linux_x64::${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}\"\n-          echo \"::set-output name=platform_linux_x86::${{ contains(github.event.inputs.platforms, 'linux x86') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x86'))) }}\"\n-          echo \"::set-output name=platform_windows_aarch64::${{ contains(github.event.inputs.platforms, 'windows aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows aarch64'))) }}\"\n-          echo \"::set-output name=platform_windows_x64::${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}\"\n-          echo \"::set-output name=platform_macos_x64::${{ contains(github.event.inputs.platforms, 'macos x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos x64'))) }}\"\n-          echo \"::set-output name=platform_macos_aarch64::${{ contains(github.event.inputs.platforms, 'macos aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos aarch64'))) }}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine unique bundle identifier\n-        id: check_bundle_id\n-        run: echo \"::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine versions and locations to be used for dependencies\n-        id: check_deps\n-        run: \"echo ::set-output name=dependencies::`cat make\/conf\/version-numbers.conf make\/conf\/test-dependencies | sed -e '1i {' -e 's\/#.*\/\/g' -e 's\/\\\"\/\/g' -e 's\/\\\\(.*\\\\)=\\\\(.*\\\\)\/\\\"\\\\1\\\": \\\"\\\\2\\\",\/g' -e '$s\/,\\\\s\\\\{0,\\\\}$\/\\\\}\/'`\"\n-        working-directory: jdk\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Print extracted dependencies to the log\n-        run: \"echo '${{ steps.check_deps.outputs.dependencies }}'\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine full JDK versions\n-        id: check_jdk_versions\n-        shell: bash\n-        run: |\n-          FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\n-          INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}\n-          UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}\n-          PATCH=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_PATCH }}\n-          if [ \"x${PATCH}\" != \"x0\" ]; then\n-             V=${FEATURE}.${INTERIM}.${UPDATE}.${PATCH}\n-          elif [ \"x${UPDATE}\" != \"x0\" ]; then\n-             V=${FEATURE}.${INTERIM}.${UPDATE}\n-          elif [ \"x${INTERIM}\" != \"x0\" ]; then\n-             V={FEATURE}.${INTERIM}\n-          else\n-             V=${FEATURE}\n-          fi\n-          echo \"::set-output name=jdk_version::${V}\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Determine the jtreg ref to checkout\n-        run: \"echo JTREG_REF=jtreg-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}+${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV\"\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Check if a jtreg image is present in the cache\n-        id: jtreg\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/jtreg\/\n-          key: jtreg-${{ env.JTREG_REF }}-v1\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-      - name: Checkout the jtreg source\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"openjdk\/jtreg\"\n-          ref: ${{ env.JTREG_REF }}\n-          path: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Build jtreg\n-        run: bash make\/build.sh --jdk ${JAVA_HOME_8_X64}\n-        working-directory: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Move jtreg image to destination folder\n-        run: mv build\/images\/jtreg ~\/\n-        working-directory: jtreg\n-        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'\n-\n-      - name: Store jtreg for use by later steps\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.check_submit.outputs.should_run != 'false'\n-\n-  linux_x64_build:\n-    name: Linux x64\n-    runs-on: \"ubuntu-20.04\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && (needs.prerequisites.outputs.platform_linux_x64 != 'false' || needs.prerequisites.outputs.platform_linux_additional == 'true')\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: |\n-          sudo apt-get update\n-          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-x64\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/linux-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  linux_x64_test:\n-    name: Linux x64\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          JT_HOME=${HOME}\/jtreg\n-          make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=\"${{ matrix.suites }}\"\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Generate test failure summary\n-        run: |\n-          #\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-          failure_count=$(echo $failures | wc -w || true)\n-          error_count=$(echo $errors | wc -w || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n-\n-          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n-\n-          if [[ \"$failures\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n-            for test in $failures; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-          if [[ \"$errors\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n-            for test in $errors; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-      - name: Collect failed test output\n-        run: |\n-          #\n-          # This is a separate step, since if the markdown from a step gets bigger than\n-          # 1024 kB it is skipped, but then the summary above is still generated\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n-          for test in $failures $errors; do\n-            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n-            report_file=\"$report_dir\/$base_path.jtr\"\n-            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n-            echo \"####  <a id=\"$anchor\">$test\"\n-\n-            echo \"<details><summary>View test results<\/summary>\"\n-            echo \"\"\n-            echo '```'\n-            if [[ -f \"$report_file\" ]]; then\n-              cat \"$report_file\"\n-            else\n-              echo \"Error: Result file $report_file not found\"\n-            fi\n-            echo '```'\n-            echo \"<\/details>\"\n-            echo \"\"\n-\n-            if [[ \"$hs_err_files\" != \"\" ]]; then\n-              echo \"<details><summary>View HotSpot error log<\/summary>\"\n-              echo \"\"\n-              for hs_err in $hs_err_files; do\n-                echo '```'\n-                echo \"$hs_err:\"\n-                echo \"\"\n-                cat \"$hs_err\"\n-                echo '```'\n-              done\n-\n-              echo \"<\/details>\"\n-              echo \"\"\n-            fi\n-\n-          done >> $GITHUB_STEP_SUMMARY\n-\n-          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n-\n-          # This will abort the entire job in GHA, which is what we want\n-          exit 1\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  linux_additional_build:\n-    name: Linux additional\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - hs x64 build only\n-          - hs x64 zero build only\n-          - hs x64 minimal build only\n-          - hs x64 optimized build only\n-          - hs aarch64 build only\n-          - hs arm build only\n-          - hs s390x build only\n-          - hs ppc64le build only\n-        include:\n-          - flavor: hs x64 build only\n-            flags: --enable-debug --disable-precompiled-headers\n-          - flavor: hs x64 zero build only\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero\n-          - flavor: hs x64 minimal build only\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal\n-          - flavor: hs x64 optimized build only\n-            flags: --with-debug-level=optimized --disable-precompiled-headers\n-          - flavor: hs aarch64 build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: arm64\n-            gnu-arch: aarch64\n-          - flavor: hs arm build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: armhf\n-            gnu-arch: arm\n-            gnu-flavor: eabihf\n-          - flavor: hs s390x build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: s390x\n-            gnu-arch: s390x\n-          - flavor: hs ppc64le build only\n-            flags: --enable-debug --disable-precompiled-headers\n-            debian-arch: ppc64el\n-            gnu-arch: powerpc64le\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore build JDK\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        continue-on-error: true\n-\n-      - name: Restore build JDK (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack build JDK\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin\"\n-          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin\"\n-\n-      - name: Find root of build JDK image dir\n-        run: |\n-          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal_linux-x64_bin -name release -type f`\n-          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n-\n-      - name: Update apt\n-        run: sudo apt-get update\n-\n-      - name: Install native host dependencies\n-        run: |\n-          sudo apt-get install gcc-10=10.3.0-1ubuntu1~20.04 g++-10=10.3.0-1ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-        if: matrix.debian-arch == ''\n-\n-      - name: Install cross-compilation host dependencies\n-        run: sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.3.0-1ubuntu1~20.04cross1\n-        if: matrix.debian-arch != ''\n-\n-      - name: Cache sysroot\n-        id: cache-sysroot\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/sysroot-${{ matrix.debian-arch }}\/\n-          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n-        if: matrix.debian-arch != ''\n-\n-      - name: Install sysroot host dependencies\n-        run: sudo apt-get install debootstrap qemu-user-static\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Create sysroot\n-        run: >\n-          sudo qemu-debootstrap\n-          --arch=${{ matrix.debian-arch }}\n-          --verbose\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n-          --resolve-deps\n-          buster\n-          ~\/sysroot-${{ matrix.debian-arch }}\n-          http:\/\/httpredir.debian.org\/debian\/\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Prepare sysroot for caching\n-        run: |\n-          sudo chroot ~\/sysroot-${{ matrix.debian-arch }} symlinks -cr .\n-          sudo chown ${USER} -R ~\/sysroot-${{ matrix.debian-arch }}\n-          rm -rf ~\/sysroot-${{ matrix.debian-arch }}\/{dev,proc,run,sys}\n-        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Configure cross compiler\n-        run: |\n-          echo \"CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-10\" >> $GITHUB_ENV\n-          echo \"CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-10\" >> $GITHUB_ENV\n-        if: matrix.debian-arch != ''\n-\n-      - name: Configure cross specific flags\n-        run: >\n-          echo \"cross_flags=\n-          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}\n-          --with-sysroot=${HOME}\/sysroot-${{ matrix.debian-arch }}\/\n-          \" >> $GITHUB_ENV\n-        if: matrix.debian-arch != ''\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot\n-          ${{ matrix.flags }}\n-          ${{ env.cross_flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-default-make-target=\"hotspot\"\n-          --with-zlib=system\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot\n-        working-directory: jdk\n-\n-  linux_x86_build:\n-    name: Linux x86\n-    runs-on: \"ubuntu-20.04\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x86 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    # Reduced 32-bit build uses the same boot JDK as 64-bit build\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      # Roll in the multilib environment and its dependencies.\n-      # Some multilib libraries do not have proper inter-dependencies, so we have to\n-      # install their dependencies manually. Additionally, upgrading apt solves\n-      # the libc6 installation bugs until base image catches up, see JDK-8260460.\n-      - name: Install dependencies\n-        run: |\n-          sudo dpkg --add-architecture i386\n-          sudo apt-get update\n-          sudo apt-get install --only-upgrade apt\n-          sudo apt-get install gcc-10-multilib g++-10-multilib libfreetype6-dev:i386 libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libcups2-dev:i386 libasound2-dev:i386\n-          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=linux-x86\n-          --with-target-bits=32\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-x86\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/linux-x86\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/linux-x86\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  linux_x86_test:\n-    name: Linux x86\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x86_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    # Reduced 32-bit build uses the same boot JDK as 64-bit build\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x86${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x86${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x86${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_linux-x86_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          JT_HOME=${HOME}\/jtreg\n-          make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=\"${{ matrix.suites }}\"\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Generate test failure summary\n-        run: |\n-          #\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-          failure_count=$(echo $failures | wc -w || true)\n-          error_count=$(echo $errors | wc -w || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n-\n-          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n-\n-          if [[ \"$failures\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n-            for test in $failures; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-          if [[ \"$errors\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n-            for test in $errors; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-      - name: Collect failed test output\n-        run: |\n-          #\n-          # This is a separate step, since if the markdown from a step gets bigger than\n-          # 1024 kB it is skipped, but then the summary above is still generated\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n-          for test in $failures $errors; do\n-            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n-            report_file=\"$report_dir\/$base_path.jtr\"\n-            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n-            echo \"####  <a id=\"$anchor\">$test\"\n-\n-            echo \"<details><summary>View test results<\/summary>\"\n-            echo \"\"\n-            echo '```'\n-            if [[ -f \"$report_file\" ]]; then\n-              cat \"$report_file\"\n-            else\n-              echo \"Error: Result file $report_file not found\"\n-            fi\n-            echo '```'\n-            echo \"<\/details>\"\n-            echo \"\"\n-\n-            if [[ \"$hs_err_files\" != \"\" ]]; then\n-              echo \"<details><summary>View HotSpot error log<\/summary>\"\n-              echo \"\"\n-              for hs_err in $hs_err_files; do\n-                echo '```'\n-                echo \"$hs_err:\"\n-                echo \"\"\n-                cat \"$hs_err\"\n-                echo '```'\n-              done\n-\n-              echo \"<\/details>\"\n-              echo \"\"\n-            fi\n-\n-          done >> $GITHUB_STEP_SUMMARY\n-\n-          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n-\n-          # This will abort the entire job in GHA, which is what we want\n-          exit 1\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/linux-x86${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  windows_aarch64_build:\n-    name: Windows aarch64\n-    runs-on: \"windows-2019\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_aarch64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.3.5-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Ensure a specific version of MSVC is installed\n-        run: >\n-          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList\n-          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet\n-          --add Microsoft.VisualStudio.Component.VC.14.29.arm64'\n-\n-      - name: Configure\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          & bash configure\n-          --with-conf-name=windows-aarch64\n-          --with-msvc-toolset-version=14.29\n-          --openjdk-target=aarch64-unknown-cygwin\n-          ${{ matrix.flags }}\n-          --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\"\n-          --with-boot-jdk=\"$env:BOOT_JDK\"\n-          --with-default-make-target=\"hotspot\"\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: |\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          & make CONF_NAME=windows-aarch64\n-        working-directory: jdk\n-\n-  windows_x64_build:\n-    name: Windows x64\n-    runs-on: \"windows-2019\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.3.5-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Ensure a specific version of MSVC is installed\n-        run: >\n-          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList\n-          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet\n-          --add Microsoft.VisualStudio.Component.VC.14.28.x86.x64'\n-\n-      - name: Configure\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n-          $env:GTEST = cygpath \"$env:GITHUB_WORKSPACE\/gtest\" ;\n-          & bash configure\n-          --with-conf-name=windows-x64\n-          --with-msvc-toolset-version=14.28\n-          ${{ matrix.flags }}\n-          --with-version-opt=\"$env:GITHUB_ACTOR-$env:GITHUB_SHA\"\n-          --with-boot-jdk=\"$env:BOOT_JDK\"\n-          --with-jtreg=\"$env:JT_HOME\"\n-          --with-gtest=\"$env:GTEST\"\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: |\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          & make CONF_NAME=windows-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}.zip\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/windows-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\n-\n-  windows_x64_test:\n-    name: Windows x64\n-    runs-on: \"windows-2019\"\n-    needs:\n-      - prerequisites\n-      - windows_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-          & curl -L \"$env:BOOT_JDK_URL\" -o \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash = Get-FileHash -Algorithm SHA256 \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\"\n-          $FileHash.Hash -eq $env:BOOT_JDK_SHA256\n-          & tar -xf \"$HOME\/bootjdk\/$env:BOOT_JDK_FILENAME\" -C \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\"\n-          Get-ChildItem \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\\*\\*\" | Move-Item -Destination \"$HOME\\bootjdk\\$env:BOOT_JDK_VERSION\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin installer from cache\n-        id: cygwin-installer\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/setup-x86_64.exe\n-          key: cygwin-installer\n-\n-      - name: Download cygwin installer\n-        run: |\n-          New-Item -Force -ItemType directory -Path \"$HOME\\cygwin\"\n-          & curl -L \"https:\/\/www.cygwin.com\/setup-x86_64.exe\" -o \"$HOME\/cygwin\/setup-x86_64.exe\"\n-        if: steps.cygwin-installer.outputs.cache-hit != 'true'\n-\n-      - name: Restore cygwin packages from cache\n-        id: cygwin\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/cygwin\/packages\n-          key: cygwin-packages-${{ runner.os }}-v1\n-\n-      - name: Install cygwin\n-        run: |\n-          Start-Process -FilePath \"$HOME\\cygwin\\setup-x86_64.exe\" -ArgumentList \"--quiet-mode --packages cygwin=3.3.5-1,autoconf,make,zip,unzip --root $HOME\\cygwin\\cygwin64 --local-package-dir $HOME\\cygwin\\packages --site http:\/\/mirrors.kernel.org\/sourceware\/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin\" -Wait -NoNewWindow\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-windows-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-windows-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-windows-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}.zip\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack symbols\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }}-symbols\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Find root of jdk image dir\n-        run: echo (\"imageroot=\" + (Get-ChildItem -Path $HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin${{ matrix.artifact }} -Filter release -Recurse -ErrorAction SilentlyContinue -Force).DirectoryName) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          $env:Path = $env:Path -split \";\" -match \"C:\\\\Windows|PowerShell|cygwin\" -join \";\" ;\n-          $env:JDK_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n-          $env:SYMBOLS_IMAGE_DIR = cygpath \"${{ env.imageroot }}\" ;\n-          $env:TEST_IMAGE_DIR = cygpath \"$HOME\/jdk-windows-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_windows-x64_bin-tests${{ matrix.artifact }}\" ;\n-          $env:BOOT_JDK = cygpath \"$HOME\/bootjdk\/$env:BOOT_JDK_VERSION\" ;\n-          $env:JT_HOME = cygpath \"$HOME\/jtreg\" ;\n-          & make test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=${{ matrix.suites }}\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ((Get-ChildItem -Path build\\*\\test-results\\test-summary.txt -Recurse | Select-String -Pattern \"TEST SUCCESS\" ).Count -eq 0) {\n-            Get-Content -Path build\\*\\test-results\\*\\*\\newfailures.txt ;\n-            Get-Content -Path build\\*\\test-results\\*\\*\\other_errors.txt ;\n-            exit 1\n-          }\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo (\"logsuffix=\" + (\"${{ matrix.test }}\" -replace \"\/\", \"_\" -replace \" \", \"_\")) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          zip -r9\n-          \"$HOME\/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          $env:Path = \"$HOME\\cygwin\\cygwin64\\bin;$env:Path\" ;\n-          zip -r9\n-          \"$HOME\/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/windows-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/windows-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  macos_x64_build:\n-    name: macOS x64\n-    runs-on: \"macos-10.15\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_x64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build release\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_11.3.1.app\/Contents\/Developer\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=macos-x64\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=macos-x64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/macos-x64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-  macos_aarch64_build:\n-    name: macOS aarch64\n-    runs-on: \"macos-10.15\"\n-    needs: prerequisites\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_macos_aarch64 != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build release\n-          - build debug\n-        include:\n-          - flavor: build release\n-          - flavor: build debug\n-            flags: --enable-debug\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Checkout gtest sources\n-        uses: actions\/checkout@v3\n-        with:\n-          repository: \"google\/googletest\"\n-          ref: \"release-${{ fromJson(needs.prerequisites.outputs.dependencies).GTEST_VERSION }}\"\n-          path: gtest\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_12.4.app\/Contents\/Developer\n-\n-      - name: Configure\n-        run: >\n-          bash configure\n-          --with-conf-name=macos-aarch64\n-          --openjdk-target=aarch64-apple-darwin\n-          ${{ matrix.flags }}\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          --with-jtreg=${HOME}\/jtreg\n-          --with-gtest=${GITHUB_WORKSPACE}\/gtest\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-          --enable-jtreg-failure-handler\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=macos-aarch64\n-        working-directory: jdk\n-\n-      - name: Persist test bundles\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: transient_jdk-macos-aarch64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: |\n-            jdk\/build\/macos-aarch64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-aarch64_bin${{ matrix.artifact }}.tar.gz\n-            jdk\/build\/macos-aarch64\/bundles\/jdk-${{ env.JDK_VERSION }}-internal_macos-aarch64_bin-tests${{ matrix.artifact }}.tar.gz\n-\n-\n-  macos_x64_test:\n-    name: macOS x64\n-    runs-on: \"macos-10.15\"\n-    needs:\n-      - prerequisites\n-      - macos_x64_build\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        test:\n-          - jdk\/tier1 part 1\n-          - jdk\/tier1 part 2\n-          - jdk\/tier1 part 3\n-          - langtools\/tier1\n-          - hs\/tier1 common\n-          - hs\/tier1 compiler\n-          - hs\/tier1 gc\n-          - hs\/tier1 runtime\n-          - hs\/tier1 serviceability\n-        include:\n-          - test: jdk\/tier1 part 1\n-            suites: test\/jdk\/:tier1_part1\n-          - test: jdk\/tier1 part 2\n-            suites: test\/jdk\/:tier1_part2\n-          - test: jdk\/tier1 part 3\n-            suites: test\/jdk\/:tier1_part3\n-          - test: langtools\/tier1\n-            suites: test\/langtools\/:tier1\n-          - test: hs\/tier1 common\n-            suites: test\/hotspot\/jtreg\/:tier1_common\n-            artifact: -debug\n-          - test: hs\/tier1 compiler\n-            suites: test\/hotspot\/jtreg\/:tier1_compiler\n-            artifact: -debug\n-          - test: hs\/tier1 gc\n-            suites: test\/hotspot\/jtreg\/:tier1_gc\n-            artifact: -debug\n-          - test: hs\/tier1 runtime\n-            suites: test\/hotspot\/jtreg\/:tier1_runtime\n-            artifact: -debug\n-          - test: hs\/tier1 serviceability\n-            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n-            artifact: -debug\n-\n-    env:\n-      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).MACOS_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v3\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v3\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p ${HOME}\/bootjdk\/${BOOT_JDK_VERSION} || true\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256}  ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | shasum -a 256 -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore jtreg artifact\n-        id: jtreg_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        continue-on-error: true\n-\n-      - name: Restore jtreg artifact (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jtreg\/\n-        if: steps.jtreg_restore.outcome == 'failure'\n-\n-      - name: Restore build artifacts\n-        id: build_restore\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-macos-x64${{ matrix.artifact }}\n-        continue-on-error: true\n-\n-      - name: Restore build artifacts (retry)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          name: transient_jdk-macos-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-macos-x64${{ matrix.artifact }}\n-        if: steps.build_restore.outcome == 'failure'\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }}\"\n-\n-      - name: Unpack tests\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\"\n-          tar -xf \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\"\n-\n-      - name: Install dependencies\n-        run: brew install make\n-\n-      - name: Select Xcode version\n-        run: sudo xcode-select --switch \/Applications\/Xcode_11.3.1.app\/Contents\/Developer\n-\n-      - name: Find root of jdk image dir\n-        run: |\n-          imageroot=`find ${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin${{ matrix.artifact }} -name release -type f`\n-          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n-\n-      - name: Run tests\n-        id: run_tests\n-        run: >\n-          JDK_IMAGE_DIR=${{ env.imageroot }}\n-          TEST_IMAGE_DIR=${HOME}\/jdk-macos-x64${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal_macos-x64_bin-tests${{ matrix.artifact }}\n-          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/Contents\/Home\n-          JT_HOME=${HOME}\/jtreg\n-          gmake test-prebuilt\n-          CONF_NAME=run-test-prebuilt\n-          LOG_CMDLINES=true\n-          JTREG_VERBOSE=fail,error,time\n-          TEST=${{ matrix.suites }}\n-          TEST_OPTS_JAVA_OPTIONS=\n-          JTREG_KEYWORDS=\"!headful\"\n-          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n-\n-      - name: Generate test failure summary\n-        run: |\n-          #\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-          failure_count=$(echo $failures | wc -w || true)\n-          error_count=$(echo $errors | wc -w || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n-\n-          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n-\n-          if [[ \"$failures\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n-            for test in $failures; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-          if [[ \"$errors\" != \"\" ]]; then\n-            echo \"\" >> $GITHUB_STEP_SUMMARY\n-            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n-            for test in $errors; do\n-              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-              echo \"* [$test](#user-content-$anchor)\"\n-            done >> $GITHUB_STEP_SUMMARY\n-          fi\n-\n-      - name: Collect failed test output\n-        run: |\n-          #\n-          # This is a separate step, since if the markdown from a step gets bigger than\n-          # 1024 kB it is skipped, but then the summary above is still generated\n-          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n-          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n-          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n-\n-          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n-          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n-\n-          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n-            # If we have nothing to report, exit this step now\n-            exit 0\n-          fi\n-\n-          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n-          for test in $failures $errors; do\n-            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n-            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n-            report_file=\"$report_dir\/$base_path.jtr\"\n-            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n-            echo \"####  <a id=\"$anchor\">$test\"\n-\n-            echo \"<details><summary>View test results<\/summary>\"\n-            echo \"\"\n-            echo '```'\n-            if [[ -f \"$report_file\" ]]; then\n-              cat \"$report_file\"\n-            else\n-              echo \"Error: Result file $report_file not found\"\n-            fi\n-            echo '```'\n-            echo \"<\/details>\"\n-            echo \"\"\n-\n-            if [[ \"$hs_err_files\" != \"\" ]]; then\n-              echo \"<details><summary>View HotSpot error log<\/summary>\"\n-              echo \"\"\n-              for hs_err in $hs_err_files; do\n-                echo '```'\n-                echo \"$hs_err:\"\n-                echo \"\"\n-                cat \"$hs_err\"\n-                echo '```'\n-              done\n-\n-              echo \"<\/details>\"\n-              echo \"\"\n-            fi\n-\n-          done >> $GITHUB_STEP_SUMMARY\n-\n-          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n-\n-          # This will abort the entire job in GHA, which is what we want\n-          exit 1\n-\n-      - name: Create suitable test log artifact name\n-        if: always()\n-        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n-\n-      - name: Package test results\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-results\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/macos-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n-          .\n-        continue-on-error: true\n-\n-      - name: Package test support\n-        if: always()\n-        working-directory: build\/run-test-prebuilt\/test-support\/\n-        run: >\n-          zip -r9\n-          \"$HOME\/macos-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n-          .\n-          -i *.jtr\n-          -i *\/hs_err*.log\n-          -i *\/replay*.log\n-        continue-on-error: true\n-\n-      - name: Persist test results\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/macos-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-      - name: Persist test outputs\n-        if: always()\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          path: ~\/macos-x64${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n-        continue-on-error: true\n-\n-  artifacts:\n-    name: Post-process artifacts\n-    runs-on: \"ubuntu-20.04\"\n-    if: always()\n-    continue-on-error: true\n-    needs:\n-      - prerequisites\n-      - linux_additional_build\n-      - windows_aarch64_build\n-      - linux_x64_test\n-      - linux_x86_test\n-      - windows_x64_test\n-      - macos_x64_test\n-      - macos_aarch64_build\n-\n-    steps:\n-      - name: Determine current artifacts endpoint\n-        id: actions_runtime\n-        uses: actions\/github-script@v6\n-        with:\n-          script: \"return { url: process.env['ACTIONS_RUNTIME_URL'], token: process.env['ACTIONS_RUNTIME_TOKEN'] }\"\n-\n-      - name: Display current artifacts\n-        run: >\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview'\n-\n-      - name: Delete transient artifacts\n-        run: >\n-          for url in `\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n-          jq -r -c '.value | map(select(.name|startswith(\"transient_\"))) | .[].url'`; do\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          -X DELETE \"${url}\";\n-          done\n-\n-      - name: Fetch remaining artifacts (test results)\n-        uses: actions\/download-artifact@v3\n-        with:\n-          path: test-results\n-\n-      - name: Delete remaining artifacts\n-        run: >\n-          for url in `\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          '${{ fromJson(steps.actions_runtime.outputs.result).url }}_apis\/pipelines\/workflows\/${{ github.run_id }}\/artifacts?api-version=6.0-preview' |\n-          jq -r -c '.value | .[].url'`; do\n-          curl -s -H 'Accept: application\/json;api-version=6.0-preview'\n-          -H 'Authorization: Bearer ${{ fromJson(steps.actions_runtime.outputs.result).token }}'\n-          -X DELETE \"${url}\";\n-          done\n-\n-      - name: Upload a combined test results artifact\n-        uses: actions\/upload-artifact@v3\n-        with:\n-          name: test-results_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: test-results\n","filename":".github\/workflows\/submit.yml","additions":0,"deletions":2040,"binary":false,"changes":2040,"status":"deleted"},{"patch":"@@ -0,0 +1,206 @@\n+#\n+# Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Run tests'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      bootjdk-platform:\n+        required: true\n+        type: string\n+      runs-on:\n+        required: true\n+        type: string\n+\n+env:\n+  # These are needed to make the msys bash work properly\n+  MSYS2_PATH_TYPE: minimal\n+  CHERE_INVOKING: 1\n+\n+jobs:\n+  test:\n+    name: test\n+    runs-on: ${{ inputs.runs-on }}\n+    defaults:\n+      run:\n+        shell: bash\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        test-name:\n+          - 'jdk\/tier1 part 1'\n+          - 'jdk\/tier1 part 2'\n+          - 'jdk\/tier1 part 3'\n+          - 'langtools\/tier1'\n+          - 'hs\/tier1 common'\n+          - 'hs\/tier1 compiler'\n+          - 'hs\/tier1 gc'\n+          - 'hs\/tier1 runtime'\n+          - 'hs\/tier1 serviceability'\n+\n+        include:\n+          - test-name: 'jdk\/tier1 part 1'\n+            test-suite: 'test\/jdk\/:tier1_part1'\n+\n+          - test-name: 'jdk\/tier1 part 2'\n+            test-suite: 'test\/jdk\/:tier1_part2'\n+\n+          - test-name: 'jdk\/tier1 part 3'\n+            test-suite: 'test\/jdk\/:tier1_part3'\n+\n+          - test-name: 'langtools\/tier1'\n+            test-suite: 'test\/langtools\/:tier1'\n+\n+          - test-name: 'hs\/tier1 common'\n+            test-suite: 'test\/hotspot\/jtreg\/:tier1_common'\n+            debug-suffix: -debug\n+\n+          - test-name: 'hs\/tier1 compiler'\n+            test-suite: 'test\/hotspot\/jtreg\/:tier1_compiler'\n+            debug-suffix: -debug\n+\n+          - test-name: 'hs\/tier1 gc'\n+            test-suite: 'test\/hotspot\/jtreg\/:tier1_gc'\n+            debug-suffix: -debug\n+\n+          - test-name: 'hs\/tier1 runtime'\n+            test-suite: 'test\/hotspot\/jtreg\/:tier1_runtime'\n+            debug-suffix: -debug\n+\n+          - test-name: 'hs\/tier1 serviceability'\n+            test-suite: 'test\/hotspot\/jtreg\/:tier1_serviceability'\n+            debug-suffix: -debug\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v3\n+\n+      - name: 'Get MSYS2'\n+        id: msys\n+        uses: .\/.github\/actions\/get-msys\n+        if: runner.os == 'Windows'\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: ${{ inputs.bootjdk-platform }}\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get bundles'\n+        id: bundles\n+        uses: .\/.github\/actions\/get-bundles\n+        with:\n+          platform: ${{ inputs.platform }}\n+          debug-suffix: ${{ matrix.debug-suffix }}\n+\n+      - name: 'Install dependencies'\n+        run: |\n+          # On macOS we need to install some dependencies for testing\n+          brew install make\n+          sudo xcode-select --switch \/Applications\/Xcode_11.3.1.app\/Contents\/Developer\n+          # This will make GNU make available as 'make' and not only as 'gmake'\n+          echo '\/usr\/local\/opt\/make\/libexec\/gnubin' >> $GITHUB_PATH\n+        if: runner.os == 'macOS'\n+\n+      - name: 'Set PATH'\n+        id: path\n+        run: |\n+          # We need a minimal PATH on Windows\n+          # Set PATH to \"\", so just GITHUB_PATH is included\n+          if [[ '${{ runner.os }}' == 'Windows' ]]; then\n+            echo \"::set-output name=value::\"\n+          else\n+            echo \"::set-output name=value::$PATH\"\n+          fi\n+\n+      - name: 'Run tests'\n+        id: run-tests\n+        run: >\n+          make test-prebuilt\n+          TEST='${{ matrix.test-suite }}'\n+          BOOT_JDK=${{ steps.bootjdk.outputs.path }}\n+          JT_HOME=${{ steps.jtreg.outputs.path }}\n+          JDK_IMAGE_DIR=${{ steps.bundles.outputs.jdk-path }}\n+          SYMBOLS_IMAGE_DIR=${{ steps.bundles.outputs.symbols-path }}\n+          TEST_IMAGE_DIR=${{ steps.bundles.outputs.tests-path }}\n+          JTREG='JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash;VERBOSE=fail,error,time;KEYWORDS=!headful'\n+          && bash .\/.github\/scripts\/gen-test-summary.sh \"$GITHUB_STEP_SUMMARY\"\n+        env:\n+          PATH: ${{ steps.path.outputs.value }}\n+\n+        # This is a separate step, since if the markdown from a step gets bigger than\n+        # 1024 kB it is skipped, but then the short summary above is still generated\n+      - name: 'Generate test report'\n+        run: bash .\/.github\/scripts\/gen-test-results.sh \"$GITHUB_STEP_SUMMARY\"\n+        if: always()\n+\n+      - name: 'Package test results'\n+        id: package\n+        run: |\n+          # Package test-results and relevant parts of test-support\n+          mkdir results\n+\n+          if [[ -d build\/run-test-prebuilt\/test-results ]]; then\n+            cd build\/run-test-prebuilt\/test-results\/\n+            zip -r -9 \"$GITHUB_WORKSPACE\/results\/test-results.zip\" .\n+            cd $GITHUB_WORKSPACE\n+          else\n+            echo '::warning ::Missing test-results directory'\n+          fi\n+\n+          if [[ -d build\/run-test-prebuilt\/test-support ]]; then\n+            cd build\/run-test-prebuilt\/test-support\/\n+            zip -r -9 \"$GITHUB_WORKSPACE\/results\/test-support.zip\" . -i *.jtr -i *\/hs_err*.log -i *\/replay*.log\n+            cd $GITHUB_WORKSPACE\n+          else\n+            echo '::warning ::Missing test-support directory'\n+          fi\n+\n+          artifact_name=\"results-${{ inputs.platform }}-$(echo ${{ matrix.test-name }} | tr '\/ ' '__')\"\n+          echo \"::set-output name=artifact-name::$artifact_name\"\n+        if: always()\n+\n+      - name: 'Upload test results'\n+        uses: actions\/upload-artifact@v3\n+        with:\n+          path: results\n+          name: ${{ steps.package.outputs.artifact-name }}\n+        if: always()\n+\n+        # This is the best way I found to abort the job with an error message\n+      - name: 'Notify about test failures'\n+        uses: actions\/github-script@v6\n+        with:\n+          script: core.setFailed('${{ steps.run-tests.outputs.error-message }}')\n+        if: steps.run-tests.outputs.failure == 'true'\n","filename":".github\/workflows\/test.yml","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -439,0 +439,1 @@\n+\t  $(RM) $(MAKESUPPORT_OUTPUTDIR)\/failure-summary.log ; \\\n@@ -440,14 +441,16 @@\n-\t    $(PRINTF) \"\\n=== Output from failing command(s) repeated here ===\\n\" $(NEWLINE) \\\n-\t    $(foreach logfile, $(sort $(wildcard $(MAKESUPPORT_OUTPUTDIR)\/failure-logs\/*.log)), \\\n-\t        $(PRINTF) \"* For target $(notdir $(basename $(logfile))):\\n\" $(NEWLINE) \\\n-\t        $(if $(filter all, $(LOG_REPORT)), \\\n-\t          $(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true $(NEWLINE) \\\n-\t        , \\\n-\t          ($(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true) | $(HEAD) -n 15 $(NEWLINE) \\\n-\t          if test `$(WC) -l < $(logfile)` -gt 15; then \\\n-\t            $(ECHO) \"   ... (rest of output omitted)\" ; \\\n-\t          fi $(NEWLINE) \\\n-\t        ) \\\n-\t    ) \\\n-\t    $(PRINTF) \"\\n* All command lines available in $(MAKESUPPORT_OUTPUTDIR)\/failure-logs.\\n\" $(NEWLINE) \\\n-\t    $(PRINTF) \"=== End of repeated output ===\\n\" \\\n+\t    ( \\\n+\t      $(PRINTF) \"\\n=== Output from failing command(s) repeated here ===\\n\" ;  \\\n+\t      $(foreach logfile, $(sort $(wildcard $(MAKESUPPORT_OUTPUTDIR)\/failure-logs\/*.log)), \\\n+\t          $(PRINTF) \"* For target $(notdir $(basename $(logfile))):\\n\" ; \\\n+\t          $(if $(filter all, $(LOG_REPORT)), \\\n+\t            $(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true ; \\\n+\t          , \\\n+\t            ($(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true) | $(HEAD) -n 15 ; \\\n+\t            if test `$(WC) -l < $(logfile)` -gt 15; then \\\n+\t              $(ECHO) \"   ... (rest of output omitted)\" ; \\\n+\t            fi ; \\\n+\t          ) \\\n+\t      ) \\\n+\t      $(PRINTF) \"\\n* All command lines available in $(MAKESUPPORT_OUTPUTDIR)\/failure-logs.\\n\" ; \\\n+\t      $(PRINTF) \"=== End of repeated output ===\\n\" ; \\\n+\t    )  >> $(MAKESUPPORT_OUTPUTDIR)\/failure-summary.log  \\\n@@ -468,1 +471,2 @@\n-\t  fi \\\n+\t  fi >> $(MAKESUPPORT_OUTPUTDIR)\/failure-summary.log ; \\\n+\t  $(CAT) $(MAKESUPPORT_OUTPUTDIR)\/failure-summary.log \\\n","filename":"make\/InitSupport.gmk","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -303,0 +303,2 @@\n+  UTIL_FIXUP_PATH([SYSROOT])\n+\n","filename":"make\/autoconf\/basic.m4","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -314,0 +314,7 @@\n+  if test \"x$DEVKIT_NAME\" != x; then\n+    printf \"* Devkit:         $DEVKIT_NAME ($DEVKIT_ROOT)\\n\"\n+  elif test \"x$DEVKIT_ROOT\" != x; then\n+    printf \"* Devkit:         $DEVKIT_ROOT\\n\"\n+  elif test \"x$SYSROOT\" != x; then\n+    printf \"* Sysroot:        $SYSROOT\\n\"\n+  fi\n","filename":"make\/autoconf\/help.m4","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+#\n+# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# Versions and download locations for dependencies used by GitHub Actions (GHA)\n+\n+GTEST_VERSION=1.8.1\n+JTREG_VERSION=6.1+1\n+\n+LINUX_X64_BOOT_JDK_EXT=tar.gz\n+LINUX_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_linux-x64_bin.tar.gz\n+LINUX_X64_BOOT_JDK_SHA256=0f60aef7b8504983d6e374fe94d09a7bedcf05ec559e812d801a33bd4ebd23d0\n+\n+MACOS_X64_BOOT_JDK_EXT=tar.gz\n+MACOS_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_macos-x64_bin.tar.gz\n+MACOS_X64_BOOT_JDK_SHA256=527b61b4265caf45cdcbacfcf8fbcd0b4b280bede1eff32a5b252d855ff0534b\n+\n+WINDOWS_X64_BOOT_JDK_EXT=zip\n+WINDOWS_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_windows-x64_bin.zip\n+WINDOWS_X64_BOOT_JDK_SHA256=a5b91d4c12752d44aa75df70ae3e2311287b3e60c288b07dade106376c688277\n","filename":"make\/conf\/github-actions.conf","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -1,43 +0,0 @@\n-#\n-# Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# Versions and download locations for dependencies used by pre-submit testing.\n-\n-BOOT_JDK_VERSION=18\n-JTREG_VERSION=6.1\n-JTREG_BUILD=1\n-GTEST_VERSION=1.8.1\n-\n-LINUX_X64_BOOT_JDK_FILENAME=openjdk-18_linux-x64_bin.tar.gz\n-LINUX_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_linux-x64_bin.tar.gz\n-LINUX_X64_BOOT_JDK_SHA256=0f60aef7b8504983d6e374fe94d09a7bedcf05ec559e812d801a33bd4ebd23d0\n-\n-WINDOWS_X64_BOOT_JDK_FILENAME=openjdk-18_windows-x64_bin.zip\n-WINDOWS_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_windows-x64_bin.zip\n-WINDOWS_X64_BOOT_JDK_SHA256=a5b91d4c12752d44aa75df70ae3e2311287b3e60c288b07dade106376c688277\n-\n-MACOS_X64_BOOT_JDK_FILENAME=openjdk-18_macos-x64_bin.tar.gz\n-MACOS_X64_BOOT_JDK_URL=https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_macos-x64_bin.tar.gz\n-MACOS_X64_BOOT_JDK_SHA256=527b61b4265caf45cdcbacfcf8fbcd0b4b280bede1eff32a5b252d855ff0534b\n","filename":"make\/conf\/test-dependencies","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"}]}