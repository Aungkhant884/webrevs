{"files":[{"patch":"@@ -1579,4 +1579,2 @@\n-        if (o instanceof GenericArrayType)\n-            return Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),\n-                                     0)\n-                .getClass();\n+        if (o instanceof GenericArrayType gat)\n+            return toClass(gat.getGenericComponentType()).arrayType();\n@@ -3003,2 +3001,2 @@\n-                } else if (cl instanceof BuiltinClassLoader) {\n-                    return ((BuiltinClassLoader) cl).findResourceAsStream(mn, name);\n+                } else if (cl instanceof BuiltinClassLoader bcl) {\n+                    return bcl.findResourceAsStream(mn, name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -127,2 +127,2 @@\n-        if (c instanceof SpeciesData) {\n-            return (SpeciesData) c;\n+        if (c instanceof SpeciesData sd) {\n+            return sd;\n@@ -156,2 +156,2 @@\n-            if (indentLevel >= 0 && theArg instanceof MethodHandle) {\n-                sb.append(\": MethodHandle = {\").append(((MethodHandle)theArg).debugString(indentLevel+1));\n+            if (indentLevel >= 0 && theArg instanceof MethodHandle mh) {\n+                sb.append(\": MethodHandle = {\").append(mh.debugString(indentLevel+1));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BoundMethodHandle.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,2 +318,2 @@\n-            if (binding instanceof CallSite) {\n-                site = (CallSite) binding;\n+            if (binding instanceof CallSite cs) {\n+                site = cs;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/CallSite.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-            if (!(obj instanceof ClassSpecializer.SpeciesData)) {\n+            if (!(obj instanceof ClassSpecializer<?, ?, ?>.SpeciesData that)) {\n@@ -271,2 +271,1 @@\n-            @SuppressWarnings(\"rawtypes\")\n-            ClassSpecializer.SpeciesData that = (ClassSpecializer.SpeciesData) obj;\n+\n@@ -659,2 +658,2 @@\n-                        if (x instanceof Class) {\n-                            vt = (Class<?>) x;\n+                        if (x instanceof Class<?> cl) {\n+                            vt = cl;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.lang.invoke.MethodHandleNatives.Constants;\n@@ -32,1 +31,0 @@\n-import static java.lang.invoke.MethodHandleStatics.*;\n@@ -135,1 +133,1 @@\n-        if (mem instanceof Method) {\n+        if (mem instanceof Method mth) {\n@@ -137,3 +135,3 @@\n-            return new MemberName((Method) mem, wantSpecial);\n-        } else if (mem instanceof Constructor) {\n-            return new MemberName((Constructor) mem);\n+            return new MemberName(mth, wantSpecial);\n+        } else if (mem instanceof Constructor<?> ctor) {\n+            return new MemberName(ctor);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InfoFromMemberName.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -807,2 +807,2 @@\n-                        assert(name.arguments[0] instanceof Name &&\n-                                ((Name)name.arguments[0]).refersTo(MethodHandleImpl.class, \"profileBoolean\"));\n+                        assert(name.arguments[0] instanceof Name n &&\n+                                n.refersTo(MethodHandleImpl.class, \"profileBoolean\"));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.reflect.Array;\n@@ -247,1 +246,1 @@\n-        return Array.newInstance(argType, 0).getClass();\n+        return argType.arrayType();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -952,2 +952,2 @@\n-            if (a instanceof Name) {\n-                int i2 = ((Name)a).index();\n+            if (a instanceof Name n) {\n+                int i2 = n.index();\n@@ -1064,1 +1064,1 @@\n-        return obj instanceof LambdaForm && equals((LambdaForm)obj);\n+        return obj instanceof LambdaForm lf && equals(lf);\n@@ -1365,1 +1365,1 @@\n-            assert(arguments[0] instanceof Name && ((Name)arguments[0]).type == L_TYPE);\n+            assert(arguments[0] instanceof Name name && name.type == L_TYPE);\n@@ -1527,1 +1527,1 @@\n-            if (c instanceof Class)  c = ((Class<?>)c).getSimpleName();\n+            if (c instanceof Class<?> cl)  c = cl.getSimpleName();\n@@ -1559,2 +1559,2 @@\n-            if (object instanceof Name) {\n-                return ((Name)object).type == parameterType;\n+            if (object instanceof Name name) {\n+                return name.type == parameterType;\n@@ -1611,1 +1611,1 @@\n-            return x instanceof Name && equals((Name)x);\n+            return x instanceof Name n && equals(n);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,2 +104,2 @@\n-            if (obj instanceof TransformKey) {\n-                return equals((TransformKey) obj);\n+            if (obj instanceof TransformKey key) {\n+                return equals(key);\n@@ -107,1 +107,1 @@\n-            return obj instanceof Transform && equals((Transform)obj);\n+            return obj instanceof Transform transform && equals(transform);\n@@ -357,2 +357,2 @@\n-            if (obj instanceof TransformKey) {\n-                return equals((TransformKey) obj);\n+            if (obj instanceof TransformKey key) {\n+                return equals(key);\n@@ -360,1 +360,1 @@\n-            return obj instanceof Transform && equals((Transform)obj);\n+            return obj instanceof Transform transform && equals(transform);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-        return (cl == null || (cl instanceof BuiltinClassLoader)) ? true : false;\n+        return cl == null || (cl instanceof BuiltinClassLoader);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,2 +138,2 @@\n-            if (type instanceof MethodType) {\n-                return (MethodType) type;\n+            if (type instanceof MethodType mt) {\n+                return mt;\n@@ -176,2 +176,2 @@\n-        if (type instanceof String) {\n-            return (String) type;\n+        if (type instanceof String str) {\n+            return str;\n@@ -214,2 +214,2 @@\n-            if (type instanceof Class<?>) {\n-                return (Class<?>) type;\n+            if (type instanceof Class<?> cl) {\n+                return cl;\n@@ -728,1 +728,1 @@\n-        return (that instanceof MemberName && this.equals((MemberName)that));\n+        return that instanceof MemberName mn && this.equals(mn);\n@@ -811,2 +811,2 @@\n-            if (this.type instanceof MethodType)\n-                type = (MethodType) this.type;\n+            if (this.type instanceof MethodType mt)\n+                type = mt;\n@@ -820,2 +820,2 @@\n-            if (this.type instanceof Class<?>)\n-                type = (Class<?>) this.type;\n+            if (this.type instanceof Class<?> cl)\n+                type = cl;\n@@ -866,2 +866,2 @@\n-        if (obj instanceof Class<?>)\n-            return ((Class<?>)obj).getName();\n+        if (obj instanceof Class<?> cl)\n+            return cl.getName();\n@@ -918,2 +918,2 @@\n-        if (resolution instanceof Throwable)\n-            ex.initCause((Throwable) resolution);\n+        if (resolution instanceof Throwable res)\n+            ex.initCause(res);\n@@ -995,1 +995,1 @@\n-            if (ex instanceof IllegalAccessException)  throw (IllegalAccessException) ex;\n+            if (ex instanceof IllegalAccessException iae)  throw iae;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -579,2 +579,2 @@\n-        } else if (av instanceof Object[]) {\n-            int len = ((Object[])av).length;\n+        } else if (av instanceof Object[] array) {\n+            int len = array.length;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -353,4 +353,4 @@\n-        if (staticArguments instanceof Object[])\n-            return \"BSA=\"+java.util.Arrays.asList((Object[]) staticArguments);\n-        if (staticArguments instanceof int[])\n-            return \"BSA@\"+java.util.Arrays.toString((int[]) staticArguments);\n+        if (staticArguments instanceof Object[] array)\n+            return \"BSA=\"+java.util.Arrays.asList(array);\n+        if (staticArguments instanceof int[] array)\n+            return \"BSA@\"+java.util.Arrays.toString(array);\n@@ -512,2 +512,2 @@\n-        if (type instanceof MethodType)\n-            return (MethodType) type;\n+        if (type instanceof MethodType mt)\n+            return mt;\n@@ -640,2 +640,2 @@\n-            if (cause instanceof AbstractMethodError) {\n-                return (AbstractMethodError) cause;\n+            if (cause instanceof AbstractMethodError ame) {\n+                return ame;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleNatives.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -188,2 +188,2 @@\n-        if (ex instanceof Error)  throw (Error) ex;\n-        if (ex instanceof RuntimeException)  throw (RuntimeException) ex;\n+        if (ex instanceof Error error)  throw error;\n+        if (ex instanceof RuntimeException re)  throw re;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleStatics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4257,1 +4257,1 @@\n-            if (mh instanceof DirectMethodHandle\n+            if (mh instanceof DirectMethodHandle dmh\n@@ -4264,1 +4264,1 @@\n-                    LOOKASIDE_TABLE.put(key, (DirectMethodHandle) mh);\n+                    LOOKASIDE_TABLE.put(key, dmh);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -896,2 +896,2 @@\n-        if (x instanceof MethodType) {\n-            return equals((MethodType)x);\n+        if (x instanceof MethodType mt) {\n+            return equals(mt);\n@@ -899,5 +899,2 @@\n-        if (x instanceof ConcurrentWeakInternSet.WeakEntry) {\n-            Object o = ((ConcurrentWeakInternSet.WeakEntry)x).get();\n-            if (o instanceof MethodType) {\n-                return equals((MethodType)o);\n-            }\n+        if (x instanceof ConcurrentWeakInternSet.WeakEntry<?> e && e.get() instanceof MethodType mt) {\n+            return equals(mt);\n@@ -1486,2 +1483,2 @@\n-                if (obj instanceof WeakEntry) {\n-                    Object that = ((WeakEntry) obj).get();\n+                if (obj instanceof WeakEntry<?> we) {\n+                    Object that = we.get();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,2 +283,2 @@\n-            if (cause instanceof RuntimeException)\n-                throw (RuntimeException) cause;\n+            if (cause instanceof RuntimeException re)\n+                throw re;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/SerializedLambda.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -638,2 +638,2 @@\n-        } else if (handle instanceof DelegatingMethodHandle) {\n-            return exceptionTypes(((DelegatingMethodHandle)handle).getTarget());\n+        } else if (handle instanceof DelegatingMethodHandle delegatingMh) {\n+            return exceptionTypes(delegatingMh.getTarget());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -688,2 +688,2 @@\n-        if (cache instanceof Cache) {\n-            return ((Cache) cache).isCacheFor(caller, targetClass);\n+        if (cache instanceof Cache c) {\n+            return c.isCacheFor(caller, targetClass);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -369,1 +369,1 @@\n-             this instanceof Class && \/\/ the element is a class\n+             this instanceof Class<?> cls && \/\/ the element is a class\n@@ -371,1 +371,1 @@\n-             Class<?> superClass = ((Class<?>) this).getSuperclass();\n+             Class<?> superClass = cls.getSuperclass();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedElement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1055,2 +1055,2 @@\n-            if (t instanceof RuntimeException) {\n-                throw (RuntimeException) t;\n+            if (t instanceof RuntimeException re) {\n+                throw re;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-        ArrayList<Class<?>> ptypes = new ArrayList<Class<?>>();\n+        var ptypes = new ArrayList<Class<?>>();\n@@ -100,1 +100,1 @@\n-                t = java.lang.reflect.Array.newInstance(t, 0).getClass();\n+                t = t.arrayType();\n@@ -117,4 +117,4 @@\n-        if (type instanceof Class<?>)\n-            return unparse((Class<?>) type);\n-        if (type instanceof MethodType)\n-            return ((MethodType) type).toMethodDescriptorString();\n+        if (type instanceof Class<?> cl)\n+            return unparse(cl);\n+        if (type instanceof MethodType mt)\n+            return mt.toMethodDescriptorString();\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/BytecodeDescriptor.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -357,2 +357,2 @@\n-            if (c instanceof String) {\n-                String mc = toBytecodeName((String) c);\n+            if (c instanceof String s) {\n+                String mc = toBytecodeName(s);\n@@ -379,2 +379,2 @@\n-            if (c instanceof String)\n-                slen += String.valueOf(c).length();\n+            if (c instanceof String s)\n+                slen += s.length();\n@@ -411,1 +411,1 @@\n-            if (!(components[i] instanceof String))\n+            if (!(components[i] instanceof String sn))\n@@ -413,1 +413,0 @@\n-            String sn = (String) components[i];\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/BytecodeName.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,2 +79,2 @@\n-        if (x instanceof Integer)\n-            return (Integer) x;\n+        if (x instanceof Integer i)\n+            return i;\n@@ -88,2 +88,2 @@\n-        if (x instanceof Byte)\n-            return (Byte) x;\n+        if (x instanceof Byte b)\n+            return b;\n@@ -97,2 +97,2 @@\n-        if (x instanceof Short)\n-            return (Short) x;\n+        if (x instanceof Short s)\n+            return s;\n@@ -106,2 +106,2 @@\n-        if (x instanceof Boolean)\n-            return (Boolean) x;\n+        if (x instanceof Boolean b)\n+            return b;\n@@ -115,2 +115,2 @@\n-        if (x instanceof Character)\n-            return (Character) x;\n+        if (x instanceof Character c)\n+            return c;\n@@ -124,2 +124,2 @@\n-        if (x instanceof Long)\n-            return (Long) x;\n+        if (x instanceof Long l)\n+            return l;\n@@ -133,2 +133,2 @@\n-        if (x instanceof Float)\n-            return (Float) x;\n+        if (x instanceof Float f)\n+            return f;\n@@ -142,2 +142,2 @@\n-        if (x instanceof Double)\n-            return (Double) x;\n+        if (x instanceof Double d)\n+            return d;\n@@ -239,6 +239,6 @@\n-        if (x instanceof Number) {\n-            res = (Number) x;\n-        } else if (x instanceof Boolean) {\n-            res = ((boolean)x ? ONE_INT : ZERO_INT);\n-        } else if (x instanceof Character) {\n-            res = (int)(char)x;\n+        if (x instanceof Number n) {\n+            res = n;\n+        } else if (x instanceof Boolean b) {\n+            res = b ? ONE_INT : ZERO_INT;\n+        } else if (x instanceof Character c) {\n+            res = (int) c;\n@@ -262,10 +262,10 @@\n-        if (x instanceof Integer)\n-            return (int) x;\n-        else if (x instanceof Boolean)\n-            return fromBoolean((boolean) x);\n-        else if (x instanceof Character)\n-            return (char) x;\n-        else if (x instanceof Short)\n-            return (short) x;\n-        else if (x instanceof Byte)\n-            return (byte) x;\n+        if (x instanceof Integer i)\n+            return i;\n+        else if (x instanceof Boolean b)\n+            return fromBoolean(b);\n+        else if (x instanceof Character c)\n+            return c;\n+        else if (x instanceof Short s)\n+            return s;\n+        else if (x instanceof Byte b)\n+            return b;\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/ValueConversions.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -583,3 +583,3 @@\n-        if (x instanceof Number)     return (Number)x;\n-        if (x instanceof Character)  return (int)(Character)x;\n-        if (x instanceof Boolean)    return (Boolean)x ? 1 : 0;\n+        if (x instanceof Number n)     return n;\n+        if (x instanceof Character c)  return (int) c;\n+        if (x instanceof Boolean b)    return b ? 1 : 0;\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/Wrapper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,2 +98,2 @@\n-            if (t.getRawType() instanceof Class\n-                    && Modifier.isStatic(((Class) t.getRawType()).getModifiers()))\n+            if (t.getRawType() instanceof Class<?> c\n+                    && Modifier.isStatic(c.getModifiers()))\n@@ -181,1 +181,1 @@\n-            if (!(type instanceof Class<?>))\n+            if (!(type instanceof Class<?> nested))\n@@ -184,1 +184,0 @@\n-            Class<?> nested = (Class<?>)type;\n@@ -253,1 +252,1 @@\n-            if (o instanceof AnnotatedType &&\n+            return o instanceof AnnotatedType that &&\n@@ -257,6 +256,2 @@\n-                !(o instanceof AnnotatedWildcardType)) {\n-                AnnotatedType that = (AnnotatedType) o;\n-                return equalsTypeAndAnnotations(that);\n-            } else {\n-                return false;\n-            }\n+                !(o instanceof AnnotatedWildcardType) &&\n+                equalsTypeAndAnnotations(that);\n@@ -337,2 +332,2 @@\n-            if (o instanceof AnnotatedArrayType that) {\n-                return equalsTypeAndAnnotations(that) &&\n+            return o instanceof AnnotatedArrayType that &&\n+                    equalsTypeAndAnnotations(that) &&\n@@ -341,3 +336,0 @@\n-            } else {\n-                return false;\n-            }\n@@ -381,5 +373,2 @@\n-            if (o instanceof AnnotatedTypeVariable that) {\n-                return equalsTypeAndAnnotations(that);\n-            } else {\n-                return false;\n-            }\n+            return o instanceof AnnotatedTypeVariable that\n+                    && equalsTypeAndAnnotations(that);\n@@ -460,2 +449,2 @@\n-            if (o instanceof AnnotatedParameterizedType that) {\n-                return equalsTypeAndAnnotations(that) &&\n+            return o instanceof AnnotatedParameterizedType that &&\n+                    equalsTypeAndAnnotations(that) &&\n@@ -463,3 +452,0 @@\n-            } else {\n-                return false;\n-            }\n@@ -571,2 +557,2 @@\n-            if (o instanceof AnnotatedWildcardType that) {\n-                return equalsTypeAndAnnotations(that) &&\n+            return o instanceof AnnotatedWildcardType that &&\n+                    equalsTypeAndAnnotations(that) &&\n@@ -577,3 +563,0 @@\n-            } else {\n-                return false;\n-            }\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotatedTypeFactory.java","additions":15,"deletions":32,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -437,2 +437,2 @@\n-        if (v1 instanceof Object[] && v2 instanceof Object[])\n-            return Arrays.equals((Object[]) v1, (Object[]) v2);\n+        if (v1 instanceof Object[] a1 && v2 instanceof Object[] a2)\n+            return Arrays.equals(a1, a2);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationInvocationHandler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -448,3 +448,2 @@\n-            return Array.newInstance(toClass(gat.getGenericComponentType()), 0)\n-                .getClass();\n-        return (Class)o;\n+            return toClass(gat.getGenericComponentType()).arrayType();\n+        return (Class<?>) o;\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.reflect.Array;\n@@ -62,3 +61,3 @@\n-        if (decl instanceof Class) {return ((Class) decl).getClassLoader();}\n-        if (decl instanceof Method) {\n-            return ((Method) decl).getDeclaringClass().getClassLoader();\n+        if (decl instanceof Class<?> c) {return c.getClassLoader();}\n+        if (decl instanceof Method m) {\n+            return m.getDeclaringClass().getClassLoader();\n@@ -67,1 +66,1 @@\n-        return ((Constructor) decl).getDeclaringClass().getClassLoader();\n+        return ((Constructor<?>) decl).getDeclaringClass().getClassLoader();\n@@ -122,2 +121,2 @@\n-        if (componentType instanceof Class<?>)\n-            return Array.newInstance((Class<?>) componentType, 0).getClass();\n+        if (componentType instanceof Class<?> ct)\n+            return ct.arrayType();\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/factory\/CoreReflectionFactory.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,6 +73,2 @@\n-        if (o instanceof GenericArrayType) {\n-            GenericArrayType that = (GenericArrayType) o;\n-\n-            return Objects.equals(genericComponentType, that.getGenericComponentType());\n-        } else\n-            return false;\n+        return o instanceof GenericArrayType that\n+                && Objects.equals(genericComponentType, that.getGenericComponentType());\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/GenericArrayTypeImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import sun.reflect.generics.tree.FieldTypeSignature;\n-\n@@ -31,1 +29,0 @@\n-import java.lang.reflect.Method;\n@@ -168,32 +165,5 @@\n-        if (o instanceof ParameterizedType) {\n-            \/\/ Check that information is equivalent\n-            ParameterizedType that = (ParameterizedType) o;\n-\n-            if (this == that)\n-                return true;\n-\n-            Type thatOwner   = that.getOwnerType();\n-            Type thatRawType = that.getRawType();\n-\n-            if (false) { \/\/ Debugging\n-                boolean ownerEquality = (ownerType == null ?\n-                                         thatOwner == null :\n-                                         ownerType.equals(thatOwner));\n-                boolean rawEquality = (rawType == null ?\n-                                       thatRawType == null :\n-                                       rawType.equals(thatRawType));\n-\n-                boolean typeArgEquality = Arrays.equals(actualTypeArguments, \/\/ avoid clone\n-                                                        that.getActualTypeArguments());\n-                for (Type t : actualTypeArguments) {\n-                    System.out.printf(\"\\t\\t%s%s%n\", t, t.getClass());\n-                }\n-\n-                System.out.printf(\"\\towner %s\\traw %s\\ttypeArg %s%n\",\n-                                  ownerEquality, rawEquality, typeArgEquality);\n-                return ownerEquality && rawEquality && typeArgEquality;\n-            }\n-\n-            return\n-                Objects.equals(ownerType, thatOwner) &&\n-                Objects.equals(rawType, thatRawType) &&\n+        if (this == o)\n+            return true;\n+        return o instanceof ParameterizedType that &&\n+                Objects.equals(ownerType, that.getOwnerType()) &&\n+                Objects.equals(rawType, that.getRawType()) &&\n@@ -202,2 +172,0 @@\n-        } else\n-            return false;\n@@ -222,1 +190,1 @@\n-            if (ownerType instanceof ParameterizedTypeImpl) {\n+            if (ownerType instanceof ParameterizedTypeImpl pt) {\n@@ -225,1 +193,1 @@\n-                sb.append(rawType.getName().replace( ((ParameterizedTypeImpl)ownerType).rawType.getName() + \"$\",\n+                sb.append(rawType.getName().replace(pt.rawType.getName() + \"$\",\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/ParameterizedTypeImpl.java","additions":8,"deletions":40,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.lang.reflect.Array;\n@@ -45,1 +44,0 @@\n-import sun.reflect.generics.visitor.Reifier;\n@@ -97,1 +95,1 @@\n-        return new TypeVariableImpl<T>(decl, name, bs, f);\n+        return new TypeVariableImpl<>(decl, name, bs, f);\n@@ -124,2 +122,2 @@\n-        if (value instanceof FieldTypeSignature[]) {\n-            value = reifyBounds((FieldTypeSignature[])value);\n+        if (value instanceof FieldTypeSignature[] sigs) {\n+            value = reifyBounds(sigs);\n@@ -140,2 +138,2 @@\n-        if (genericDeclaration instanceof Class)\n-            ReflectUtil.checkPackageAccess((Class)genericDeclaration);\n+        if (genericDeclaration instanceof Class<?> c)\n+            ReflectUtil.checkPackageAccess(c);\n@@ -162,12 +160,4 @@\n-        if (o instanceof TypeVariable &&\n-                o.getClass() == TypeVariableImpl.class) {\n-            TypeVariable<?> that = (TypeVariable<?>) o;\n-\n-            GenericDeclaration thatDecl = that.getGenericDeclaration();\n-            String thatName = that.getName();\n-\n-            return Objects.equals(genericDeclaration, thatDecl) &&\n-                Objects.equals(name, thatName);\n-\n-        } else\n-            return false;\n+        return o instanceof TypeVariable<?> that &&\n+                o.getClass() == TypeVariableImpl.class &&\n+                Objects.equals(genericDeclaration, that.getGenericDeclaration()) &&\n+                Objects.equals(name, that.getName());\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/TypeVariableImpl.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import sun.reflect.generics.visitor.Reifier;\n@@ -104,2 +103,2 @@\n-        if (value instanceof FieldTypeSignature[]) {\n-            value = reifyBounds((FieldTypeSignature[])value);\n+        if (value instanceof FieldTypeSignature[] sigs) {\n+            value = reifyBounds(sigs);\n@@ -135,2 +134,2 @@\n-        if (value instanceof FieldTypeSignature[]) {\n-            value = reifyBounds((FieldTypeSignature[])value);\n+        if (value instanceof FieldTypeSignature[] sigs) {\n+            value = reifyBounds(sigs);\n@@ -171,9 +170,3 @@\n-        if (o instanceof WildcardType) {\n-            WildcardType that = (WildcardType) o;\n-            return\n-                Arrays.equals(this.getLowerBounds(),\n-                              that.getLowerBounds()) &&\n-                Arrays.equals(this.getUpperBounds(),\n-                              that.getUpperBounds());\n-        } else\n-            return false;\n+        return o instanceof WildcardType that\n+                && Arrays.equals(this.getLowerBounds(), that.getLowerBounds())\n+                && Arrays.equals(this.getUpperBounds(), that.getUpperBounds());\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/WildcardTypeImpl.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,8 +101,8 @@\n-            if (t instanceof InvocationTargetException) {\n-                throw (InvocationTargetException)t;\n-            } else if (t instanceof IllegalAccessException) {\n-                throw (IllegalAccessException)t;\n-            } else if (t instanceof RuntimeException) {\n-                throw (RuntimeException)t;\n-            } else if (t instanceof Error) {\n-                throw (Error)t;\n+            if (t instanceof InvocationTargetException ite) {\n+                throw ite;\n+            } else if (t instanceof IllegalAccessException iae) {\n+                throw iae;\n+            } else if (t instanceof RuntimeException re) {\n+                throw re;\n+            } else if (t instanceof Error error) {\n+                throw error;\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/MethodUtil.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}