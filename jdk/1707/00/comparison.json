{"files":[{"patch":"@@ -124,2 +124,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -133,2 +132,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5305,2 +5305,1 @@\n-      for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n-        vmIntrinsicID id = *it;\n+      for (vmIntrinsicID id : EnumRange<vmIntrinsicID>{}) {\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -577,2 +577,1 @@\n-  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n-    vmIntrinsicID index = *it;\n+  for (vmIntrinsicID index : EnumRange<vmIntrinsicID>{}) {\n@@ -605,2 +604,1 @@\n-  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n-    vmIntrinsicID index = *it;\n+  for (vmIntrinsicID index : EnumRange<vmIntrinsicID>{}) {\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1046,2 +1046,0 @@\n-constexpr EnumRange<vmIntrinsicID> vmIntrinsicsRange; \/\/ the default range of all valid vmIntrinsicIDs\n-using vmIntrinsicsIterator = EnumIterator<vmIntrinsicID>; \/\/ convenience\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,2 +86,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -116,2 +115,2 @@\n-  for (vmSymbolsIterator it1 = vmSymbolsRange.begin(); it1 != vmSymbolsRange.end(); ++it1) {\n-    vmSymbolID i1 = *it1;\n+\n+  for (vmSymbolID i1 : EnumRange<vmSymbolID>{}) {\n@@ -119,3 +118,2 @@\n-    for (vmSymbolsIterator it2 = vmSymbolsRange.begin(); it2 != it1; ++it2) {\n-      vmSymbolID i2 = *it2;\n-      if (symbol_at(i2) == sym) {\n+    for (vmSymbolID i2 : EnumRange<vmSymbolID>{vmSymbolID::FIRST_SID, i1}) {\n+      if (i2 != i1 && symbol_at(i2) == sym) {\n@@ -134,2 +132,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -156,2 +153,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -181,2 +177,1 @@\n-  for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-    vmSymbolID index = *it;\n+  for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -195,2 +190,1 @@\n-  for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-    vmSymbolID index = *it;\n+  for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -205,2 +199,1 @@\n-  for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-    vmSymbolID index = *it;\n+  for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n@@ -284,2 +277,1 @@\n-    for (vmSymbolsIterator it = vmSymbolsRange.begin(); it != vmSymbolsRange.end(); ++it) {\n-      vmSymbolID index = *it;\n+    for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -725,2 +725,0 @@\n-constexpr EnumRange<vmSymbolID> vmSymbolsRange; \/\/ the default range of all valid vmSymbolIDs\n-using vmSymbolsIterator = EnumIterator<vmSymbolID>; \/\/ convenience\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  constexpr EnumRange<JVMFlagOrigin> range;\n+  constexpr EnumRange<JVMFlagOrigin> range{};\n@@ -144,2 +144,1 @@\n-  for (EnumIterator<JVMFlagOrigin> it = range.begin(); it != range.end(); ++it) {\n-    JVMFlagOrigin origin = *it;\n+  for (JVMFlagOrigin origin : range) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -237,2 +237,1 @@\n-  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n-    vmIntrinsicID id = *it;\n+  for (vmIntrinsicID id : EnumRange<vmIntrinsicID>{}) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-\/\/ Example (see vmSymbols.hpp\/cpp)\n+\/\/ Example:\n@@ -62,3 +62,4 @@\n-\/\/ ENUMERATOR_RANGE(vmSymbolID, vmSymbolID::FIRST_SID, vmSymbolID::LAST_SID)\n-\/\/ constexpr EnumRange<vmSymbolID> vmSymbolsRange;\n-\/\/ using vmSymbolsIterator = EnumIterator<vmSymbolID>;\n+\/\/ \/* With range-base for (recommended) *\/\n+\/\/ for (vmSymbolID index : EnumRange<vmSymbolID>{}) {\n+\/\/    ....\n+\/\/ }\n@@ -66,1 +67,3 @@\n-\/\/ \/* Without range-based for, allowed *\/\n+\/\/ \/* Without range-based for *\/\n+\/\/ constexpr EnumRange<vmSymbolID> vmSymbolsRange{};\n+\/\/ using vmSymbolsIterator = EnumIterator<vmSymbolID>;\n@@ -70,5 +73,0 @@\n-\/\/\n-\/\/ \/* With range-base for, not allowed by HotSpot coding style yet *\/\n-\/\/ for (vmSymbolID index : vmSymbolsRange) {\n-\/\/    ....\n-\/\/ }\n","filename":"src\/hotspot\/share\/utilities\/enumIterator.hpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -113,0 +113,68 @@\n+\n+TEST(TestEnumIterator, explict_range_based_for_loop_full) {\n+  int i = explicit_start;\n+  for (ExplicitTest value : EnumRange<ExplicitTest>{}) {\n+    EXPECT_EQ(size_t(i - explicit_start), EnumRange<ExplicitTest>{}.index(value));\n+    EXPECT_TRUE(value == ExplicitTest::value1 ||\n+                value == ExplicitTest::value2 ||\n+                value == ExplicitTest::value3);\n+    ++i;\n+  }\n+}\n+\n+TEST(TestEnumIterator, explict_range_based_for_loop_start) {\n+  constexpr EnumRange<ExplicitTest> range{ExplicitTest::value2};\n+  int start = explicit_start + 2;\n+  int i = start;\n+  for (ExplicitTest value : range) {\n+    EXPECT_EQ(size_t(i - start), range.index(value));\n+    EXPECT_TRUE(value == ExplicitTest::value2 || value == ExplicitTest::value3);\n+    EXPECT_TRUE(value != ExplicitTest::value1);\n+    ++i;\n+  }\n+}\n+\n+TEST(TestEnumIterator, explict_range_based_for_loop_start_end) {\n+  constexpr EnumRange<ExplicitTest> range{ExplicitTest::value1, ExplicitTest::value2};\n+  int start = explicit_start + 1;\n+  int i = start;\n+  for (ExplicitTest value : range) {\n+    EXPECT_EQ(size_t(i - start), range.index(value));\n+    EXPECT_TRUE(value == ExplicitTest::value1 || value == ExplicitTest::value2);\n+    EXPECT_TRUE(value != ExplicitTest::value3);\n+    ++i;\n+  }\n+}\n+\n+TEST(TestEnumIterator, implicit_range_based_for_loop) {\n+  int i = implicit_start;\n+  for (ImplicitTest value : EnumRange<ImplicitTest>{}) {\n+    EXPECT_EQ(size_t(i - implicit_start), EnumRange<ImplicitTest>{}.index(value));\n+    ++i;\n+  }\n+}\n+\n+TEST(TestEnumIterator, implicit_range_based_for_loop_start) {\n+  int start = implicit_start + 1;\n+  EnumRange<ImplicitTest> range{static_cast<ImplicitTest>(start)};\n+  int i = start;\n+  for (ImplicitTest value : range) {\n+    EXPECT_EQ(size_t(i - start), range.index(value));\n+    int iv = static_cast<int>(value);\n+    EXPECT_TRUE(start <= iv && iv <= implicit_end);\n+    ++i;\n+  }\n+}\n+\n+TEST(TestEnumIterator, implicit_range_based_for_loop_start_end) {\n+  int start = implicit_start + 1;\n+  int end = implicit_end - 1;\n+  EnumRange<ImplicitTest> range{static_cast<ImplicitTest>(start), static_cast<ImplicitTest>(end)};\n+  int i = start;\n+  for (ImplicitTest value : range) {\n+    EXPECT_EQ(size_t(i - start), range.index(value));\n+    int iv = static_cast<int>(value);\n+    EXPECT_TRUE(start <= iv && iv <= end);\n+    ++i;\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_enumIterator.cpp","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"}]}