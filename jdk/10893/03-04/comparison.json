{"files":[{"patch":"@@ -419,1 +419,1 @@\n-                Secp256R1GeneratorMultiplier.point,\n+                Secp256R1GeneratorMultiplier.generator,\n@@ -426,0 +426,6 @@\n+        \/\/\n+        \/\/ Multiply the ECPoint (that is specified in the implementation) by\n+        \/\/ a scalar and return the result as a ProjectivePoint.Mutable point.\n+        \/\/ The point to be multiplied can be a general EC point or the\n+        \/\/ generator of a named EC group.  The scalar multiplier is an integer\n+        \/\/ in little endian byte array representation.\n@@ -539,1 +545,1 @@\n-            private static final ECPoint point =\n+            private static final ECPoint generator =\n@@ -566,4 +572,4 @@\n-                        int index = (posit(s, pos + 192) << 3) |\n-                                    (posit(s, pos + 128) << 2) |\n-                                    (posit(s, pos +  64) << 1) |\n-                                     posit(s, pos);\n+                        int index = (bit(s, pos + 192) << 3) |\n+                                    (bit(s, pos + 128) << 2) |\n+                                    (bit(s, pos +  64) << 1) |\n+                                     bit(s, pos);\n@@ -579,1 +585,1 @@\n-            private static int posit(byte[] k, int i) {\n+            private static int bit(byte[] k, int i) {\n@@ -585,1 +591,1 @@\n-                \/\/ Pre-computed tables to speed up the point multiplication.\n+                \/\/ Pre-computed table to speed up the point multiplication.\n@@ -587,3 +593,3 @@\n-                \/\/ This is a 4 dimensions table, and each dimension contains\n-                \/\/ 16 elements. For the 1st dimension, each element in it is\n-                \/\/ a pre-computed generator point multiplication value.\n+                \/\/ This is a 4x16 array of ProjectivePoint.Immutable elements.\n+                \/\/ The first row contains the following multiples of the\n+                \/\/ generator.\n@@ -610,3 +616,1 @@\n-                \/\/ For the following dimensions, each element is multiplied\n-                \/\/ by 2^16 of the corresponding element value in the previous\n-                \/\/ dimension.\n+                \/\/ For the other 3 rows, points[i][j] = 2^16 * (points[i-1][j].\n@@ -652,1 +656,1 @@\n-                                        point, zero.getField()));\n+                                        generator, zero.getField()));\n","filename":"src\/jdk.crypto.ec\/share\/classes\/sun\/security\/ec\/ECOperations.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"}]}