{"files":[{"patch":"@@ -153,4 +153,3 @@\n-\/\/ analysis, The method was changed from JRT_LEAF to JRT_BLOCK_ENTRY and\n-\/\/ ResetNoHandleMark and HandleMark were removed from it. The actual reallocation\n-\/\/ of previously eliminated objects occurs in realloc_objects, which is\n-\/\/ called from the method fetch_unroll_info_helper below.\n+\/\/ analysis, the method was changed from JRT_LEAF to JRT_BLOCK_ENTRY.\n+\/\/ The actual reallocation of previously eliminated objects occurs in realloc_objects,\n+\/\/ which is called from the method fetch_unroll_info_helper below.\n@@ -158,4 +157,0 @@\n-  \/\/ It is actually ok to allocate handles in a leaf method. It causes no safepoints,\n-  \/\/ but makes the entry a little slower. There is however a little dance we have to\n-  \/\/ do in debug mode to get around the NoHandleMark code in the JRT_LEAF macro\n-\n@@ -695,1 +690,3 @@\n-  ResetNoHandleMark rnhm; \/\/ No-op in release\/product versions\n+  \/\/ Beware though because allocating Handles must have a HandleMark or else the\n+  \/\/ Handles will be leaked.\n+  ResetNoHandleMark rnhm;\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}