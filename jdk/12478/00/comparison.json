{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/*\n- *\/\n-\n@@ -38,0 +35,1 @@\n+import java.nio.channels.IllegalBlockingModeException;\n@@ -39,0 +37,1 @@\n+import java.nio.channels.SelectableChannel;\n@@ -323,4 +322,17 @@\n-                \/\/ Read from the channel\n-                int n = ch.read(bb);\n-                if (n < 0)\n-                    return n;\n+                if (ch instanceof SelectableChannel sc) {\n+                    synchronized(sc.blockingLock()) {\n+                        if (!sc.isBlocking()) {\n+                            throw new IllegalBlockingModeException();\n+                        }\n+\n+                        \/\/ Read from the channel\n+                        int n = ch.read(bb);\n+                        if (n < 0)\n+                            return n;\n+                    }\n+                } else {\n+                    \/\/ Read from the channel\n+                    int n = ch.read(bb);\n+                    if (n < 0)\n+                        return n;\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/StreamDecoder.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 7174305\n+ * @summary Verify that Reader returned by Channels::newReader throws\n+ * IllegalBlockingMode if read from while configured non-blocking\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Pipe;\n+import java.nio.channels.Pipe.SinkChannel;\n+import java.nio.channels.Pipe.SourceChannel;\n+import java.util.Scanner;\n+\n+\/**\n+ * This test will fail by timing out if no IllegalBlockingMode is thrown.\n+ *\/\n+public class NonBlockingReader {\n+    public static void main(String[] args) throws IOException {\n+        Pipe pipe = Pipe.open();\n+        Pipe.SinkChannel sink = pipe.sink();\n+\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    do {\n+                        sink.write(ByteBuffer.wrap(new byte[] {'A'}));\n+                        Thread.sleep(1000);\n+                    } while(true);\n+                } catch (IOException | InterruptedException e) {\n+                    throw new AssertionError(e);\n+                }\n+\n+            }\n+        }).start();\n+\n+        Pipe.SourceChannel source = pipe.source();\n+        source.configureBlocking(false);\n+\n+        Scanner scanner = new Scanner(source);\n+        while(scanner.hasNextLine()) {\n+            System.out.println(scanner.nextLine());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/NonBlockingReader.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}