{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/javax\/net\/ssl\/templates\n@@ -32,1 +33,0 @@\n-import javax.net.SocketFactory;\n@@ -34,1 +34,0 @@\n-import javax.net.ssl.SSLSocketFactory;\n@@ -38,2 +37,0 @@\n-import java.net.ServerSocket;\n-import java.net.Socket;\n@@ -41,0 +38,3 @@\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n@@ -42,1 +42,0 @@\n-public class CloseSocket {\n@@ -44,1 +43,1 @@\n-    private static ArrayList<TestCase> testCases = new ArrayList<>();\n+public class CloseSocket extends SSLSocketTemplate {\n@@ -46,2 +45,36 @@\n-    static {\n-        testCases.add(socket -> socket.startHandshake());\n+    private volatile Thread clientThread = null;\n+\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        clientThread = Thread.currentThread();\n+        boolean failed = false;\n+        for (TestCase testCase : getTestCases()) {\n+            try {\n+                testCase.test(socket);\n+                System.out.println(\"ERROR: no exception\");\n+                failed = true;\n+            } catch (IOException e) {\n+                System.out.println(\"Failed as expected: \" + e);\n+            }\n+        }\n+        if (failed) {\n+            throw new Exception(\"One or more tests failed\");\n+        }\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        System.out.println(\"Server accepted connection\");\n+        while (!isHandshakeStarted()) {\n+            \/\/ wait for a short time before checking again if handshake started\n+            TimeUnit.MILLISECONDS.sleep(100);\n+        }\n+\n+        socket.close();\n+        System.out.println(\"Server closed socket, done.\");\n+    }\n+\n+    private List<TestCase> getTestCases() {\n+        List<TestCase> testCases = new ArrayList<>();\n+\n+        testCases.add(SSLSocket::startHandshake);\n@@ -56,5 +89,0 @@\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        try (Server server = new Server()) {\n-            new Thread(server).start();\n@@ -62,20 +90,1 @@\n-            SocketFactory factory = SSLSocketFactory.getDefault();\n-            try (SSLSocket socket = (SSLSocket) factory.createSocket(\"localhost\",\n-                    server.getPort())) {\n-                socket.setSoTimeout(2000);\n-                System.out.println(\"Client established TCP connection\");\n-                boolean failed = false;\n-                for (TestCase testCase : testCases) {\n-                    try {\n-                        testCase.test(socket);\n-                        System.out.println(\"ERROR: no exception\");\n-                        failed = true;\n-                    } catch (IOException e) {\n-                        System.out.println(\"Failed as expected: \" + e);\n-                    }\n-                }\n-                if (failed) {\n-                    throw new Exception(\"One or more tests failed\");\n-                }\n-            }\n-        }\n+        return testCases;\n@@ -84,24 +93,7 @@\n-    static class Server implements AutoCloseable, Runnable {\n-\n-        final ServerSocket serverSocket;\n-\n-        Server() throws IOException {\n-            serverSocket = new ServerSocket(0);\n-        }\n-\n-        public int getPort() {\n-            return serverSocket.getLocalPort();\n-        }\n-\n-        @Override\n-        public void run() {\n-            try (Socket s = serverSocket.accept()) {\n-                System.out.println(\"Server accepted connection\");\n-                \/\/ wait a bit before closing the socket to give\n-                \/\/ the client time to send its hello message\n-                Thread.currentThread().sleep(100);\n-                s.close();\n-                System.out.println(\"Server closed socket, done.\");\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"Problem in test execution\", e);\n-            }\n+    private boolean isHandshakeStarted() {\n+        if (clientThread == null) {\n+            return false;\n+        } else {\n+            StackTraceElement[] traces = clientThread.getStackTrace();\n+            return Arrays.stream(traces).anyMatch(stackElement ->\n+                    stackElement.getMethodName().equals(\"readHandshakeRecord\"));\n@@ -109,0 +101,1 @@\n+    }\n@@ -110,6 +103,2 @@\n-        @Override\n-        public void close() throws Exception {\n-            if (!serverSocket.isClosed()) {\n-                serverSocket.close();\n-            }\n-        }\n+    public static void main(String[] args) throws Exception {\n+        new CloseSocket().run();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/CloseSocket.java","additions":53,"deletions":64,"binary":false,"changes":117,"status":"modified"}]}