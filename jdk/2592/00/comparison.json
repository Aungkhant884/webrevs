{"files":[{"patch":"@@ -36,5 +36,0 @@\n-void ShenandoahHeapRegionSetIterator::reset(const ShenandoahHeapRegionSet* const set) {\n-  _set = set;\n-  _current_index = 0;\n-}\n-\n@@ -44,1 +39,0 @@\n-  _region_size_bytes_shift(ShenandoahHeapRegion::region_size_bytes_shift()),\n@@ -46,1 +40,0 @@\n-  _biased_set_map(_set_map - ((uintx)_heap->base() >> _region_size_bytes_shift)),\n@@ -61,1 +54,1 @@\n-  assert(!is_in(r), \"Already in collection set\");\n+  assert(!is_in(r), \"Already in region set\");\n@@ -66,9 +59,0 @@\n-bool ShenandoahHeapRegionSet::add_region_check_for_duplicates(ShenandoahHeapRegion* r) {\n-  if (!is_in(r)) {\n-    add_region(r);\n-    return true;\n-  } else {\n-    return false;\n-  }\n-}\n-\n@@ -80,1 +64,1 @@\n-  _region_count --;\n+  _region_count--;\n@@ -86,1 +70,0 @@\n-\n@@ -90,27 +73,0 @@\n-ShenandoahHeapRegion* ShenandoahHeapRegionSetIterator::claim_next() {\n-  size_t num_regions = _heap->num_regions();\n-  if (_current_index >= (jint)num_regions) {\n-    return NULL;\n-  }\n-\n-  jint saved_current = _current_index;\n-  size_t index = (size_t)saved_current;\n-\n-  while(index < num_regions) {\n-    if (_set->is_in(index)) {\n-      jint cur = Atomic::cmpxchg(&_current_index, saved_current, (jint)(index + 1));\n-      assert(cur >= (jint)saved_current, \"Must move forward\");\n-      if (cur == saved_current) {\n-        assert(_set->is_in(index), \"Invariant\");\n-        return _heap->get_region(index);\n-      } else {\n-        index = (size_t)cur;\n-        saved_current = cur;\n-      }\n-    } else {\n-      index ++;\n-    }\n-  }\n-  return NULL;\n-}\n-\n@@ -118,2 +74,1 @@\n-  size_t num_regions = _heap->num_regions();\n-  for (size_t index = (size_t)_current_index; index < num_regions; index ++) {\n+  for (size_t index = _current_index; index < _heap->num_regions(); index++) {\n@@ -121,1 +76,1 @@\n-      _current_index = (jint)(index + 1);\n+      _current_index = index + 1;\n@@ -125,1 +80,0 @@\n-\n@@ -131,3 +85,1 @@\n-\n-  debug_only(size_t regions = 0;)\n-  for (size_t index = 0; index < _heap->num_regions(); index ++) {\n+  for (size_t index = 0; index < _heap->num_regions(); index++) {\n@@ -136,1 +88,0 @@\n-      debug_only(regions ++;)\n@@ -139,1 +90,0 @@\n-  assert(regions == count(), \"Must match\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.cpp","additions":5,"deletions":55,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -40,4 +40,1 @@\n-\n-  shenandoah_padding(0);\n-  volatile jint _current_index;\n-  shenandoah_padding(1);\n+  size_t _current_index;\n@@ -51,6 +48,0 @@\n-  \/\/ Reset existing iterator to new set\n-  void reset(const ShenandoahHeapRegionSet* const set);\n-\n-  \/\/ MT version\n-  ShenandoahHeapRegion* claim_next();\n-\n@@ -66,1 +57,0 @@\n-  size_t const          _region_size_bytes_shift;\n@@ -68,2 +58,0 @@\n-  \/\/ Bias set map's base address for fast test if an oop is in set\n-  jbyte* const          _biased_set_map;\n@@ -76,1 +64,0 @@\n-  \/\/ Add region to set\n@@ -78,3 +65,0 @@\n-  bool add_region_check_for_duplicates(ShenandoahHeapRegion* r);\n-\n-  \/\/ Remove region from set\n@@ -88,1 +72,0 @@\n-  inline bool is_in(oop p)                   const;\n@@ -93,5 +76,0 @@\n-\n-private:\n-  jbyte* biased_map_address() const {\n-    return _biased_set_map;\n-  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.hpp","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/shenandoah\/shenandoahAsserts.hpp\"\n@@ -31,1 +30,0 @@\n-#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n@@ -43,8 +41,0 @@\n-bool ShenandoahHeapRegionSet::is_in(oop p) const {\n-  shenandoah_assert_in_heap(NULL, p);\n-  uintx index = (cast_from_oop<uintx>(p)) >> _region_size_bytes_shift;\n-  \/\/ no need to subtract the bottom of the heap from p,\n-  \/\/ _biased_set_map is biased\n-  return _biased_set_map[index] == 1;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.inline.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}