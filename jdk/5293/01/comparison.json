{"files":[{"patch":"@@ -173,38 +173,6 @@\n-bool LogFileOutput::parse_options(const char* options, outputStream* errstream) {\n-  if (options == NULL || strlen(options) == 0) {\n-    return true;\n-  }\n-  bool success = true;\n-  char* opts = os::strdup_check_oom(options, mtLogging);\n-\n-  char* comma_pos;\n-  char* pos = opts;\n-  do {\n-    comma_pos = strchr(pos, ',');\n-    if (comma_pos != NULL) {\n-      *comma_pos = '\\0';\n-    }\n-\n-    char* equals_pos = strchr(pos, '=');\n-    if (equals_pos == NULL) {\n-      errstream->print_cr(\"Invalid option '%s' for log file output.\", pos);\n-      success = false;\n-      break;\n-    }\n-    char* key = pos;\n-    char* value_str = equals_pos + 1;\n-    *equals_pos = '\\0';\n-\n-    if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n-      if (strcmp(value_str, \"true\") == 0) {\n-        _fold_multilines = true;\n-      } else if (strcmp(value_str, \"false\") == 0) {\n-        _fold_multilines = false;\n-      } else {\n-        errstream->print_cr(\"Invalid option '%s' for %s.\", value_str, FoldMultilinesOptionKey);\n-        success = false;\n-        break;\n-      }\n-    } else if (strcmp(FileCountOptionKey, key) == 0) {\n-      size_t value = parse_value(value_str);\n-      if (value > MaxRotationFileCount) {\n+bool LogFileOutput::set_option(const char* key, const char* value, outputStream* errstream) {\n+  bool success = LogFileStreamOutput::set_option(key, value, errstream);\n+  if (!success) {\n+    if (strcmp(FileCountOptionKey, key) == 0) {\n+      size_t sizeval = parse_value(value);\n+      if (sizeval > MaxRotationFileCount) {\n@@ -214,2 +182,4 @@\n-        success = false;\n-        break;\n+      } else {\n+        _file_count = static_cast<uint>(sizeval);\n+        _is_default_file_count = false;\n+        success = true;\n@@ -217,2 +187,0 @@\n-      _file_count = static_cast<uint>(value);\n-      _is_default_file_count = false;\n@@ -220,3 +188,3 @@\n-      julong value;\n-      success = Arguments::atojulong(value_str, &value);\n-      if (!success || (value > SIZE_MAX)) {\n+      julong longval;\n+      success = Arguments::atojulong(value, &longval);\n+      if (!success || (longval > SIZE_MAX)) {\n@@ -226,1 +194,3 @@\n-        break;\n+      } else {\n+        _rotate_size = static_cast<size_t>(longval);\n+        success = true;\n@@ -228,5 +198,0 @@\n-      _rotate_size = static_cast<size_t>(value);\n-    } else {\n-      errstream->print_cr(\"Invalid option '%s' for log file output.\", key);\n-      success = false;\n-      break;\n@@ -234,4 +199,1 @@\n-    pos = comma_pos + 1;\n-  } while (comma_pos != NULL);\n-\n-  os::free(opts);\n+  }\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":17,"deletions":55,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-  bool parse_options(const char* options, outputStream* errstream);\n@@ -86,0 +85,1 @@\n+  virtual bool set_option(const char* key, const char* value, outputStream* errstream);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,16 @@\n+bool LogFileStreamOutput::set_option(const char* key, const char* value, outputStream* errstream) {\n+  bool success = false;\n+  if (strcmp(FoldMultilinesOptionKey, key) == 0) {\n+    if (strcmp(value, \"true\") == 0) {\n+      _fold_multilines = true;\n+      success = true;\n+    } else if (strcmp(value, \"false\") == 0) {\n+      _fold_multilines = false;\n+      success = true;\n+    } else {\n+      errstream->print_cr(\"Invalid option: %s must be 'true' or 'false'.\", key);\n+    }\n+  }\n+  return success;\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static const char* const FoldMultilinesOptionKey;\n+  bool                _fold_multilines;\n@@ -49,1 +51,0 @@\n-  static const char* const FoldMultilinesOptionKey;\n@@ -52,1 +53,0 @@\n-  bool                _fold_multilines;\n@@ -54,1 +54,1 @@\n-  LogFileStreamOutput(FILE *stream) : _write_error_is_shown(false), _stream(stream), _fold_multilines(false) {\n+  LogFileStreamOutput(FILE *stream) : _fold_multilines(false), _write_error_is_shown(false), _stream(stream) {\n@@ -64,0 +64,1 @@\n+  virtual bool set_option(const char* key, const char* value, outputStream* errstream);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -342,0 +342,38 @@\n+bool LogOutput::parse_options(const char* options, outputStream* errstream) {\n+  if (options == NULL || strlen(options) == 0) {\n+    return true;\n+  }\n+  bool success = true;\n+  char* opts = os::strdup_check_oom(options, mtLogging);\n+\n+  char* comma_pos;\n+  char* pos = opts;\n+  do {\n+    comma_pos = strchr(pos, ',');\n+    if (comma_pos != NULL) {\n+      *comma_pos = '\\0';\n+    }\n+    char* equals_pos = strchr(pos, '=');\n+    if (equals_pos == NULL) {\n+      errstream->print_cr(\"Invalid option '%s' for log output (%s).\", pos, name());\n+      success = false;\n+      break;\n+    }\n+\n+    char* key = pos;\n+    char* value_str = equals_pos + 1;\n+    *equals_pos = '\\0';\n+    julong errstream_count_before = errstream->count();\n+    success = set_option(key, value_str, errstream);\n+    if (!success) {\n+      if (errstream->count() == errstream_count_before) {\n+        errstream->print_cr(\"Invalid option '%s' for log output (%s).\", key, name());\n+      }\n+      break;\n+    }\n+    pos = comma_pos + 1;\n+  } while (comma_pos != NULL);\n+\n+  os::free(opts);\n+  return success;\n+}\n","filename":"src\/hotspot\/share\/logging\/logOutput.cpp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,0 +96,2 @@\n+  bool parse_options(const char* options, outputStream* errstream);\n+\n@@ -100,0 +102,1 @@\n+  virtual bool set_option(const char* key, const char* value, outputStream* errstream) = 0;\n","filename":"src\/hotspot\/share\/logging\/logOutput.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        output.shouldContain(\"Invalid option 'invalid' for foldmultilines.\");\n+        output.shouldContain(\"Invalid option: foldmultilines must be 'true' or 'false'.\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/FoldMultilinesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}