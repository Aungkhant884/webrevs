{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,11 +57,14 @@\n-\n-        try (Recording r = new Recording()) {\n-            r.enable(EventNames.OldObjectSample).withStackTrace().with(\"cutoff\", \"infinity\");\n-            r.start();\n-            leak = createChain();\n-            List<RecordedEvent> events = Events.fromRecording(r);\n-            if (OldObjects.countMatchingEvents(events, byte[].class, null, null, -1, \"createChain\") == 0) {\n-                throw new Exception(\"Could not find ChainNode\");\n-            }\n-            for (RecordedEvent e : events) {\n-                OldObjects.validateReferenceChainLimit(e, OldObjects.MAX_CHAIN_LENGTH);\n+        while (true) {\n+            try (Recording r = new Recording()) {\n+                r.enable(EventNames.OldObjectSample).withStackTrace().with(\"cutoff\", \"infinity\");\n+                r.start();\n+                leak = createChain();\n+                List<RecordedEvent> events = Events.fromRecording(r);\n+                if (OldObjects.countMatchingEvents(events, byte[].class, null, null, -1, \"createChain\") > 0) {\n+                    for (RecordedEvent e : events) {\n+                        OldObjects.validateReferenceChainLimit(e, OldObjects.MAX_CHAIN_LENGTH);\n+                    }\n+                    return;\n+                }\n+                System.out.println(\"Could not find old object sample of type byte[]. Retrying.\");\n+                leak = null;\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestHeapDeep.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"}]}