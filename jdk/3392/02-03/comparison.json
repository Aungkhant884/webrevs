{"files":[{"patch":"@@ -1939,0 +1939,4 @@\n+      \/\/ An existing entry means we had a true resolution failure (LinkageError) with our nest host, but we\n+      \/\/ still want to add the error message for the higher-level access checks to report. We should\n+      \/\/ only reach here under the same error condition, so we can ignore the potential race with setting\n+      \/\/ the message. If we see it is already set then we can ignore it.\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * This is used to produce a jcod file in which we modify the\n+ * NestMembers attribute to make it empty. The class\n+ * HostNoNestMember$Member has a class HostNoNestMember as its\n+ * NestHost, which will trigger an error when resolving .\n+ *\/\n+class HostNoNestMember {\n+  class Member {\n+    private int value;\n+  }\n+\n+  public int test() {\n+    Member m = new Member();\n+    return m.value;\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/HostNoNestMember.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ NestMembers attribute empty\n+\n@@ -26,1 +51,1 @@\n-    Utf8 \"foo\"; \/\/ #20\n+    Utf8 \"test\"; \/\/ #20\n@@ -62,1 +87,1 @@\n-                0  3;\n+                0  44;\n@@ -87,2 +112,2 @@\n-                0  9;\n-                9  10;\n+                0  50;\n+                9  51;\n@@ -104,1 +129,1 @@\n-       \/\/ #7; delete NestMember\n+      \/\/ #7; delete NestMember\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/HostNoNestMember.jcod","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile TestNestHostErrorWithMultiThread.java\n+ * @compile HostNoNestMember.java\n@@ -38,4 +38,1 @@\n-class HostNoNestMember {\n-  class Member {\n-    private int value;\n-  }\n+public class TestNestHostErrorWithMultiThread {\n@@ -43,5 +40,3 @@\n-  public int foo() {\n-    Member m = new Member();\n-    return m.value;\n-  }\n-}\n+  public static void main(String args[]) {\n+    CountDownLatch latch1 = new CountDownLatch(1);\n+    CountDownLatch latch2 = new CountDownLatch(2);\n@@ -49,1 +44,2 @@\n-public class TestNestHostErrorWithMultiThread {\n+    new Thread(new Test(latch1, latch2)).start();\n+    new Thread(new Test(latch1, latch2)).start();\n@@ -51,3 +47,5 @@\n-  public static void main(String args[]) throws Throwable {\n-    TestNestHostErrorWithMultiThread t = new TestNestHostErrorWithMultiThread();\n-    t.test();\n+    try {\n+      \/\/ waiting thread creation\n+      latch2.await();\n+      latch1.countDown();\n+    } catch (InterruptedException e) {}\n@@ -56,3 +54,3 @@\n-  public void test() throws Throwable {\n-\n-    CountDownLatch latch = new CountDownLatch(1);\n+  static class Test implements Runnable {\n+    private CountDownLatch latch1;\n+    private CountDownLatch latch2;\n@@ -60,9 +58,4 @@\n-    new Thread(() -> {\n-      try {\n-        latch.await();\n-        HostNoNestMember h = new HostNoNestMember();\n-        h.foo();\n-      } catch (IllegalAccessError expected) {\n-        System.out.println(\"OK - got expected exception: \" + expected);\n-      } catch (InterruptedException e) {}\n-    }).start();\n+    Test(CountDownLatch latch1, CountDownLatch latch2) {\n+      this.latch1 = latch1;\n+      this.latch2 = latch2;\n+    }\n@@ -70,1 +63,2 @@\n-    new Thread(() -> {\n+    @Override\n+    public void run() {\n@@ -72,1 +66,3 @@\n-        latch.await();\n+        latch2.countDown();\n+        \/\/ Try to have all threads trigger the nesthost check at the same time\n+        latch1.await();\n@@ -74,1 +70,1 @@\n-        h.foo();\n+        h.test();\n@@ -76,0 +72,6 @@\n+        String msg = \"current type is not listed as a nest member\";\n+        if (!expected.getMessage().contains(msg)) {\n+          throw new Error(\"Wrong \" + expected.getClass().getSimpleName() +\": \\\"\" +\n+                          expected.getMessage() + \"\\\" does not contain \\\"\" +\n+                          msg + \"\\\"\", expected);\n+        }\n@@ -78,3 +80,1 @@\n-    }).start();\n-\n-    latch.countDown();\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/TestNestHostErrorWithMultiThread.java","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"}]}