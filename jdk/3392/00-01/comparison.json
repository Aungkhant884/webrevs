{"files":[{"patch":"@@ -0,0 +1,114 @@\n+class HostNoNestMember {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  60; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1\n+    class #4; \/\/ #2\n+    NameAndType #5 #6; \/\/ #3\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4\n+    Utf8 \"<init>\"; \/\/ #5\n+    Utf8 \"()V\"; \/\/ #6\n+    class #8; \/\/ #7\n+    Utf8 \"HostNoNestMember$Member\"; \/\/ #8\n+    Method #7 #10; \/\/ #9\n+    NameAndType #5 #11; \/\/ #10\n+    Utf8 \"(LHostNoNestMember;)V\"; \/\/ #11\n+    Field #7 #13; \/\/ #12\n+    NameAndType #14 #15; \/\/ #13\n+    Utf8 \"value\"; \/\/ #14\n+    Utf8 \"I\"; \/\/ #15\n+    class #17; \/\/ #16\n+    Utf8 \"HostNoNestMember\"; \/\/ #17\n+    Utf8 \"Code\"; \/\/ #18\n+    Utf8 \"LineNumberTable\"; \/\/ #19\n+    Utf8 \"foo\"; \/\/ #20\n+    Utf8 \"()I\"; \/\/ #21\n+    Utf8 \"SourceFile\"; \/\/ #22\n+    Utf8 \"TestNestHostErrorWithMultiThread.java\"; \/\/ #23\n+    Utf8 \"NestMembers\"; \/\/ #24\n+    Utf8 \"InnerClasses\"; \/\/ #25\n+    Utf8 \"Member\"; \/\/ #26\n+  } \/\/ Constant Pool\n+\n+  0x0020; \/\/ access\n+  #16;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0000; \/\/ access\n+      #5; \/\/ name_index\n+      #6; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  3;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #20; \/\/ name_index\n+      #21; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#18) { \/\/ Code\n+          3; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0xBB0007592AB70009;\n+            0x4C2BB4000CAC;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+            Attr(#19) { \/\/ LineNumberTable\n+              [] { \/\/ line_number_table\n+                0  9;\n+                9  10;\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#22) { \/\/ SourceFile\n+      #23;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#24) { \/\/ NestMembers\n+      [] { \/\/ classes\n+       \/\/ #7; delete NestMember\n+      }\n+    } \/\/ end NestMembers\n+    ;\n+    Attr(#25) { \/\/ InnerClasses\n+      [] { \/\/ classes\n+        #7 #16 #26 0;\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class HostNoNestMember\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/HostNoNestMember.jcod","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264760\n+ * @summary JVM crashes when two threads encounter the same resolution error\n+ *\n+ * @library \/test\/lib\n+ * @compile TestNestHostErrorWithMultiThread.java\n+ * @compile HostNoNestMember.jcod\n+ *\n+ * @run main\/othervm TestNestHostErrorWithMultiThread\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+class HostNoNestMember {\n+  class Member {\n+    private int value;\n+  }\n+\n+  public int foo() {\n+    Member m = new Member();\n+    return m.value;\n+  }\n+}\n+\n+public class TestNestHostErrorWithMultiThread {\n+\n+  public static void main(String args[]) {\n+    TestNestHostErrorWithMultiThread t = new TestNestHostErrorWithMultiThread();\n+    t.test();\n+  }\n+\n+  public void test() {\n+\n+    CountDownLatch latch = new CountDownLatch(1);\n+\n+    new Thread(() -> {\n+      try {\n+        latch.await();\n+        HostNoNestMember h = new HostNoNestMember();\n+        h.foo();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    }).start();\n+\n+    new Thread(() -> {\n+      try {\n+        latch.await();\n+        HostNoNestMember h = new HostNoNestMember();\n+        h.foo();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    }).start();\n+\n+    latch.countDown();\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Nestmates\/membership\/TestNestHostErrorWithMultiThread.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}