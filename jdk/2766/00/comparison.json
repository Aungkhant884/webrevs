{"files":[{"patch":"@@ -1131,1 +1131,1 @@\n-                PMap pmap = new PMap();\n+                PMap pmap = new PMap(debugger.getAgent());\n@@ -1141,1 +1141,1 @@\n-                PStack pstack = new PStack(verbose, true);\n+                PStack pstack = new PStack(verbose, true, debugger.getAgent());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,3 +75,3 @@\n-    private static final int PROCESS_MODE   = 0;\n-    private static final int CORE_FILE_MODE = 1;\n-    private static final int REMOTE_MODE    = 2;\n+    public static final int PROCESS_MODE   = 0;\n+    public static final int CORE_FILE_MODE = 1;\n+    public static final int REMOTE_MODE    = 2;\n@@ -118,1 +118,1 @@\n-    public synchronized Debugger getDebugger() {\n+    public synchronized JVMDebugger getDebugger() {\n@@ -650,0 +650,4 @@\n+\n+    public int getStartupMode() {\n+        return startupMode;\n+    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotAgent.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import sun.jvm.hotspot.*;\n@@ -43,0 +44,4 @@\n+   public PMap(HotSpotAgent agent) {\n+       super(agent);\n+   }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PMap.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import sun.jvm.hotspot.*;\n@@ -39,1 +40,2 @@\n-   public PStack(boolean v, boolean concurrentLocks) {\n+   public PStack(boolean v, boolean concurrentLocks, HotSpotAgent agent) {\n+      super(agent);\n@@ -44,0 +46,4 @@\n+   public PStack(boolean v, boolean concurrentLocks) {\n+      this(v, concurrentLocks, null);\n+   }\n+\n@@ -45,1 +51,1 @@\n-      this(true, true);\n+      this(true, true, null);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,16 @@\n+   public Tool(HotSpotAgent agent) {\n+      this.agent = agent;\n+      if (agent == null) {\n+          jvmDebugger = null;\n+          debugeeType = -1;\n+      } else {\n+          jvmDebugger = agent.getDebugger();\n+          debugeeType = switch (agent.getStartupMode()) {\n+              case HotSpotAgent.PROCESS_MODE   -> DEBUGEE_PID;\n+              case HotSpotAgent.CORE_FILE_MODE -> DEBUGEE_CORE;\n+              case HotSpotAgent.REMOTE_MODE    -> DEBUGEE_REMOTE;\n+              default -> throw new IllegalStateException(\"Invalid attach mode\");\n+          };\n+      }\n+   }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/Tool.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}