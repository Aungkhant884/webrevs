{"files":[{"patch":"@@ -1636,1 +1636,1 @@\n-    if (VM_Version::has_Crypto_AES()   ) { __ z_cghi(keylen, 52); }\n+    __ z_cghi(keylen, 52);\n@@ -1752,4 +1752,0 @@\n-    if (! VM_Version::has_Crypto_AES()) {\n-      __ should_not_reach_here();\n-    }\n-\n@@ -1823,4 +1819,0 @@\n-    if (! VM_Version::has_Crypto_AES()) {\n-      __ should_not_reach_here();\n-    }\n-\n@@ -1902,1 +1894,1 @@\n-  \/\/   :        :  additional alignment loss. Blocks above can't tolerate unusabe DW @SP.\n+  \/\/   :        :  additional alignment loss. Blocks above can't tolerate unusable DW @SP.\n@@ -1914,6 +1906,6 @@\n-  \/\/    parmBlk-8  various lengths\n-  \/\/                parmBlk-1: key_len (only one byte is stored at parmBlk-1)\n-  \/\/                parmBlk-2: fCode (only one byte is stored at parmBlk-2)\n-  \/\/                parmBlk-4: ctrVal_len (as retrieved from iv array), in bytes, as HW\n-  \/\/                parmBlk-8: msglen length (in bytes) of crypto msg, as passed in by caller\n-  \/\/                              return value is calculated from this: rv = msglen - processed.\n+  \/\/    parmBlk-8  various fields of various lengths\n+  \/\/               parmBlk-1: key_len (only one byte is stored at parmBlk-1)\n+  \/\/               parmBlk-2: fCode (only one byte is stored at parmBlk-2)\n+  \/\/               parmBlk-4: ctrVal_len (as retrieved from iv array), in bytes, as HW\n+  \/\/               parmBlk-8: msglen length (in bytes) of crypto msg, as passed in by caller\n+  \/\/                          return value is calculated from this: rv = msglen - processed.\n@@ -1959,9 +1951,0 @@\n-#if defined(ASSERT)\n-    \/\/ save ctr byte array length for debugging and check length against expected.\n-    __ z_lgf(scratch, Address(ctr, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-    __ z_sthy(scratch, ctrVal_len_offset, Z_R0, parmBlk);\n-    \/\/ check length against expected.\n-    __ z_chi(scratch, AES_ctrVal_len);\n-    __ asm_assert_eq(\"counter value needs same size as data block\", 0xb00b);\n-#endif\n-\n@@ -2012,1 +1995,2 @@\n-    AES_dataBlk_space    = (2*dataBlk_len + AES_parmBlk_align - 1) & (~(AES_parmBlk_align - 1)); \/\/ space for data blocks (src and dst, one each) for partial block processing)\n+    \/\/ space for data blocks (src and dst, one each) for partial block processing)\n+    AES_dataBlk_space    = roundup(2*dataBlk_len, AES_parmBlk_align);\n@@ -2029,1 +2013,1 @@\n-                         + ((parmBlk_len + AES_parmBlk_align - 1) & (~(AES_parmBlk_align - 1)))  \/\/ aligned length of parmBlk\n+                         + roundup(parmBlk_len, AES_parmBlk_align)  \/\/ aligned length of parmBlk\n@@ -2197,4 +2181,0 @@\n-    if (! VM_Version::has_Crypto_AES_CTR()) {\n-      __ should_not_reach_here();\n-    }\n-\n@@ -2385,4 +2365,0 @@\n-    if (! VM_Version::has_Crypto_AES_CTR()) {\n-      __ should_not_reach_here();\n-    }\n-\n@@ -2925,4 +2901,8 @@\n-      StubRoutines::_aescrypt_encryptBlock = generate_AES_encryptBlock(\"AES_encryptBlock\");\n-      StubRoutines::_aescrypt_decryptBlock = generate_AES_decryptBlock(\"AES_decryptBlock\");\n-      StubRoutines::_cipherBlockChaining_encryptAESCrypt = generate_cipherBlockChaining_AES_encrypt(\"AES_encryptBlock_chaining\");\n-      StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_AES_decrypt(\"AES_decryptBlock_chaining\");\n+      if (VM_Version::has_Crypto_AES()) {\n+        StubRoutines::_aescrypt_encryptBlock = generate_AES_encryptBlock(\"AES_encryptBlock\");\n+        StubRoutines::_aescrypt_decryptBlock = generate_AES_decryptBlock(\"AES_decryptBlock\");\n+        StubRoutines::_cipherBlockChaining_encryptAESCrypt = generate_cipherBlockChaining_AES_encrypt(\"AES_encryptBlock_chaining\");\n+        StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_AES_decrypt(\"AES_decryptBlock_chaining\");\n+      } else {\n+        assert(VM_Version::has_Crypto_AES(), \"Inconsistent settings. Check vm_version_s390.cpp\");\n+      }\n@@ -2934,0 +2914,2 @@\n+      } else {\n+        assert(VM_Version::has_Crypto_AES_CTR(), \"Inconsistent settings. Check vm_version_s390.cpp\");\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":21,"deletions":39,"binary":false,"changes":60,"status":"modified"}]}