{"files":[{"patch":"@@ -839,1 +839,1 @@\n-void JavaFrameAnchor::make_walkable(JavaThread* thread) {\n+void JavaFrameAnchor::make_walkable() {\n@@ -844,1 +844,0 @@\n-  vmassert(Thread::current() == (Thread*)thread, \"not current thread\");\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  void make_walkable(JavaThread* thread);\n+  void make_walkable();\n","filename":"src\/hotspot\/cpu\/aarch64\/javaFrameAnchor_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  void make_walkable(JavaThread* thread) { }\n+  void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/arm\/javaFrameAnchor_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  void make_walkable(JavaThread* thread) { }\n+  void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/ppc\/javaFrameAnchor_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -681,1 +681,1 @@\n-void JavaFrameAnchor::make_walkable(JavaThread* thread) {\n+void JavaFrameAnchor::make_walkable() {\n@@ -686,1 +686,0 @@\n-  vmassert(Thread::current() == (Thread*)thread, \"not current thread\");\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  void make_walkable(JavaThread* thread);\n+  void make_walkable();\n","filename":"src\/hotspot\/cpu\/riscv\/javaFrameAnchor_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  inline void make_walkable(JavaThread* thread) { }\n+  inline void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/s390\/javaFrameAnchor_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -723,1 +723,1 @@\n-void JavaFrameAnchor::make_walkable(JavaThread* thread) {\n+void JavaFrameAnchor::make_walkable() {\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  void make_walkable(JavaThread* thread);\n+  void make_walkable();\n","filename":"src\/hotspot\/cpu\/x86\/javaFrameAnchor_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  void make_walkable(JavaThread* thread) {\n+  void make_walkable() {\n","filename":"src\/hotspot\/cpu\/zero\/javaFrameAnchor_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-    thread->frame_anchor()->make_walkable(thread);\n+    thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -518,1 +518,1 @@\n-  _handshakee->frame_anchor()->make_walkable(_handshakee);\n+  _handshakee->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-      thread->frame_anchor()->make_walkable(thread);\n+      thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -611,1 +611,1 @@\n-      jt->frame_anchor()->make_walkable(jt);\n+      jt->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -717,1 +717,1 @@\n-  thread->frame_anchor()->make_walkable(thread);\n+  thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1586,1 +1586,1 @@\n-    frame_anchor()->make_walkable(this);\n+    frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1416,1 +1416,1 @@\n-    _anchor.make_walkable(this);\n+    _anchor.make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-            if (nanos != Long.MAX_VALUE) {\n-                eventType.setPeriod(nanos \/ 1_000_000, false, false);\n+            if (nanos == 0 || nanos == Long.MAX_VALUE) {\n+                eventType.setPeriod(nanos, false, false);\n@@ -120,1 +120,1 @@\n-                eventType.setPeriod(Long.MAX_VALUE, false, false);\n+                eventType.setPeriod(Math.max(1, nanos \/ 1_000_000), false, false);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/PeriodSetting.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -163,0 +163,2 @@\n+ * The values are rounded down to full milliseconds,\n+ * values lower than <code>1 ms<\/code> are considered to be <code>1 ms<\/code>.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/package-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jvm;\n+\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test TestPeriodSetting\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main\/othervm jdk.jfr.jvm.TestPeriodSetting\n+ *\/\n+public class TestPeriodSetting {\n+\n+    public static void main(String... args) {\n+        PlatformEventType type = new PlatformEventType(Type.EVENT_NAME_PREFIX + \"ExecutionSample\", 1, true, true);\n+        PeriodSetting setting = new PeriodSetting(eventType);\n+\n+        setting.setValue(\"0.1ms\");\n+        Asserts.assertEquals(1, type.getPeriod());\n+        setting.setValue(\"0ms\");\n+        Asserts.assertEquals(0, type.getPeriod());\n+        setting.setValue(\"10001ns\");\n+        Asserts.assertEquals(10, type.getPeriod());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestPeriodSetting.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}