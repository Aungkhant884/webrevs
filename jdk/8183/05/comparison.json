{"files":[{"patch":"@@ -117,2 +117,2 @@\n-            if (nanos != Long.MAX_VALUE) {\n-                eventType.setPeriod(nanos \/ 1_000_000, false, false);\n+            if (nanos == 0 || nanos == Long.MAX_VALUE) {\n+                eventType.setPeriod(nanos, false, false);\n@@ -120,1 +120,1 @@\n-                eventType.setPeriod(Long.MAX_VALUE, false, false);\n+                eventType.setPeriod(Math.max(1, nanos \/ 1_000_000), false, false);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/settings\/PeriodSetting.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -163,0 +163,2 @@\n+ * The values are rounded down to full milliseconds,\n+ * values lower than <code>1 ms<\/code> are considered to be <code>1 ms<\/code>.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/package-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.api.recording.event;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/**\n+ * @test Tests that periodic events are not disabled when using a very short\n+ *       period\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.api.recording.event.TestShortPeriod\n+ *\/\n+public class TestShortPeriod {\n+\n+    static class PeriodicEvent extends Event {\n+    }\n+\n+    private static Thread startLoopingThread() {\n+        var t = new Thread(() -> {\n+            while (!Thread.interrupted()) {}\n+        });\n+        t.start();\n+        return t;\n+    }\n+\n+    public static void main(String... args) {\n+        testNativeEventPeriod();\n+        testJavaEventPeriod();\n+        testExecutionSamplePeriod();\n+    }\n+\n+    private static void testNativeEventPeriod() {\n+        try (var r = new RecordingStream()) {\n+            r.enable(EventNames.JVMInformation).withPeriod(Duration.ofNanos(1));\n+            r.onEvent(e -> r.close());\n+            r.start();\n+        }\n+    }\n+\n+    private static void testJavaEventPeriod() {\n+        Runnable hook = () -> {\n+            PeriodicEvent e = new PeriodicEvent();\n+            e.commit();\n+        };\n+        FlightRecorder.addPeriodicEvent(PeriodicEvent.class, hook);\n+        try (var r = new RecordingStream()) {\n+            r.enable(PeriodicEvent.class).withPeriod(Duration.ofNanos(1));\n+            r.onEvent(e -> r.close());\n+            r.start();\n+        }\n+        FlightRecorder.removePeriodicEvent(hook);\n+    }\n+\n+    \/\/ The execution sample event doesn't use the standard mechanism\n+    \/\/ for periodic events\n+    private static void testExecutionSamplePeriod() {\n+        try (var r = new RecordingStream()) {\n+            var t = startLoopingThread();\n+            r.enable(EventNames.ExecutionSample).withPeriod(Duration.ofNanos(1));\n+            r.onEvent(\"jdk.ExecutionSample\", e -> {\n+                t.interrupt();\n+                r.close();\n+            });\n+            r.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/event\/TestShortPeriod.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}