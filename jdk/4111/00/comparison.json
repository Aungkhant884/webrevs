{"files":[{"patch":"@@ -643,0 +643,7 @@\n+            \/\/ If it is not a floating point literal,\n+            \/\/ the octal number should be rescanned correctly.\n+            if (radix == 8) {\n+                sb.setLength(0);\n+                reset(pos);\n+                scanDigits(pos, 8);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267361\n+ * @summary JavaTokenizer reads octal numbers mistakenly\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main OctalNumberTest\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.Task;\n+\n+public class OctalNumberTest extends TestRunner {\n+    ToolBox tb;\n+\n+    OctalNumberTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        var t = new OctalNumberTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testOctalNumber() throws Exception {\n+        String code = \"\"\"\n+                class Digit {\n+                    int a = 023; \/\/ normal\n+                    int b = 089;\n+                    int c = 02389;\n+                    int d = 028a;\n+                    int e = 02a8;\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"Digit.java:3:14: compiler.err.expected: ';'\",\n+                \"Digit.java:4:16: compiler.err.expected: ';'\",\n+                \"Digit.java:5:15: compiler.err.expected: ';'\",\n+                \"Digit.java:5:17: compiler.err.expected: token.identifier\",\n+                \"Digit.java:6:15: compiler.err.expected: ';'\",\n+                \"Digit.java:6:17: compiler.err.expected: token.identifier\",\n+                \"6 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lexer\/OctalNumberTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}