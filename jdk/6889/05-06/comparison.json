{"files":[{"patch":"@@ -619,1 +619,1 @@\n-     * See bug 8261407. Indy is not ready so this cannot be a record.\n+     * See bug 8261407. The object methods backed by indy may not be available.\n@@ -621,24 +621,18 @@\n-    private static final class Config {\n-        \/\/\n-        \/\/ \"Inflation\" mechanism. Loading bytecodes to implement\n-        \/\/ Method.invoke() and Constructor.newInstance() currently costs\n-        \/\/ 3-4x more than an invocation via native code for the first\n-        \/\/ invocation (though subsequent invocations have been benchmarked\n-        \/\/ to be over 20x faster). Unfortunately this cost increases\n-        \/\/ startup time for certain applications that use reflection\n-        \/\/ intensively (but only once per class) to bootstrap themselves.\n-        \/\/ To avoid this penalty we reuse the existing JVM entry points\n-        \/\/ for the first few invocations of Methods and Constructors and\n-        \/\/ then switch to the bytecode-based implementations.\n-        \/\/\n-        private final boolean noInflation;\n-        private final int     inflationThreshold;\n-\n-        \/\/\n-        \/\/ New implementation uses direct invocation of method handles\n-        private static final int METHOD_MH_ACCESSOR      = 0x1;\n-        private static final int FIELD_MH_ACCESSOR       = 0x2;\n-        private static final int ALL_MH_ACCESSORS        = METHOD_MH_ACCESSOR|FIELD_MH_ACCESSOR;\n-\n-        private final int     useDirectMethodHandle;\n-        private final boolean useNativeAccessorOnly;  \/\/ for testing only\n+    private record Config(\n+            \/\/ \"Inflation\" mechanism. Loading bytecodes to implement\n+            \/\/ Method.invoke() and Constructor.newInstance() currently costs\n+            \/\/ 3-4x more than an invocation via native code for the first\n+            \/\/ invocation (though subsequent invocations have been benchmarked\n+            \/\/ to be over 20x faster). Unfortunately this cost increases\n+            \/\/ startup time for certain applications that use reflection\n+            \/\/ intensively (but only once per class) to bootstrap themselves.\n+            \/\/ To avoid this penalty we reuse the existing JVM entry points\n+            \/\/ for the first few invocations of Methods and Constructors and\n+            \/\/ then switch to the bytecode-based implementations.\n+            boolean noInflation,\n+            int inflationThreshold,\n+            int useDirectMethodHandle,\n+            boolean useNativeAccessorOnly,\n+            \/\/ true if deserialization constructor checking is disabled\n+            boolean disableSerialConstructorChecks\n+    ) {\n@@ -646,2 +640,4 @@\n-        \/\/ true if deserialization constructor checking is disabled\n-        private final boolean disableSerialConstructorChecks;\n+        \/\/ New implementation uses direct invocation of method handles\n+        private static final int METHOD_MH_ACCESSOR = 0x1;\n+        private static final int FIELD_MH_ACCESSOR = 0x2;\n+        private static final int ALL_MH_ACCESSORS = METHOD_MH_ACCESSOR | FIELD_MH_ACCESSOR;\n@@ -657,5 +653,7 @@\n-        \/** We have to defer full initialization of this class until after\n-         the static initializer is run since java.lang.reflect.Method's\n-         static initializer (more properly, that for\n-         java.lang.reflect.AccessibleObject) causes this class's to be\n-         run, before the system properties are set up. *\/\n+        \/**\n+         * We have to defer full initialization of this class until after\n+         * the static initializer is run since java.lang.reflect.Method's\n+         * static initializer (more properly, that for\n+         * java.lang.reflect.AccessibleObject) causes this class's to be\n+         * run, before the system properties are set up.\n+         *\/\n@@ -664,9 +662,0 @@\n-        private Config(boolean noInflation, int inflationThreshold, int useDirectMethodHandle,\n-                       boolean useNativeAccessorOnly, boolean disableSerialConstructorChecks) {\n-            this.noInflation = noInflation;\n-            this.inflationThreshold = inflationThreshold;\n-            this.useDirectMethodHandle = useDirectMethodHandle;\n-            this.useNativeAccessorOnly = useNativeAccessorOnly;\n-            this.disableSerialConstructorChecks = disableSerialConstructorChecks;\n-        }\n-\n@@ -674,0 +663,5 @@\n+            Config c = instance;\n+            if (c != null) {\n+                return c;\n+            }\n+\n@@ -681,5 +675,1 @@\n-            Config c = instance;\n-            if (c == null) {\n-                instance = c = load();\n-            }\n-            return c;\n+            return instance = load();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":36,"deletions":46,"binary":false,"changes":82,"status":"modified"}]}