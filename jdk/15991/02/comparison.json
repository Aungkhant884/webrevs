{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.file.attribute.*;\n@@ -31,0 +30,5 @@\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.BasicFileAttributeView;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.spi.FileSystemProvider;\n@@ -72,8 +76,0 @@\n-\n-        CopyOption[] replaceExistingOrEmpty() {\n-            if (replaceExisting) {\n-                return new CopyOption[] { StandardCopyOption.REPLACE_EXISTING };\n-            } else {\n-                return new CopyOption[0];\n-            }\n-        }\n@@ -140,0 +136,10 @@\n+        \/\/ delete target if it exists and REPLACE_EXISTING is specified\n+        if (opts.replaceExisting) {\n+            \/\/ ensure source can be copied\n+            FileSystemProvider provider = source.getFileSystem().provider();\n+            provider.checkAccess(source, AccessMode.READ);\n+\n+            Files.deleteIfExists(target);\n+        } else if (Files.exists(target))\n+            throw new FileAlreadyExistsException(target.toString());\n+\n@@ -142,2 +148,0 @@\n-            if (opts.replaceExisting)\n-                Files.deleteIfExists(target);\n@@ -147,1 +151,1 @@\n-                Files.copy(in, target, opts.replaceExistingOrEmpty());\n+                Files.copy(in, target);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/CopyMoveHelper.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * Internal exception thrown when a Win32 calls fails.\n+ * Internal exception thrown when a Win32 call fails.\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}