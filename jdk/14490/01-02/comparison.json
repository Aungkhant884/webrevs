{"files":[{"patch":"@@ -2300,5 +2300,3 @@\n-  if (in(Init)->is_ConI() && in(Limit)->is_ConI() && in(Stride)->is_ConI()) {\n-    int stride_con = stride_t->is_int()->get_con();\n-    if (stride_con == 1) {\n-      return bottom_type();  \/\/ Identity\n-    }\n+  int stride_con = stride_t->is_int()->get_con();\n+  if (stride_con == 1)\n+    return bottom_type();  \/\/ Identity\n@@ -2306,1 +2304,1 @@\n-    assert(init_t->is_int()->is_con() && limit_t->is_int()->is_con(), \"init_t and limit_t should have constant values\");\n+  if (init_t->is_int()->is_con() && limit_t->is_int()->is_con()) {\n@@ -2316,2 +2314,9 @@\n-    assert(final_con == (jlong)final_int, \"final value should be integer\");\n-    return TypeInt::make(final_int);\n+    \/\/ Assert checks for overflow only if all input nodes are ConINodes, as during CCP\n+    \/\/ there might be a temporary overflow from PhiNodes see JDK-8309266\n+    assert(in(Init)->is_ConI() && in(Limit)->is_ConI() && in(Stride)->is_ConI() \\\n+            ? final_con == (jlong)final_int : true, \"final value should be integer\");\n+    if (final_con == (jlong)final_int) {\n+      return TypeInt::make(final_int);\n+    } else {\n+      return bottom_type();\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}