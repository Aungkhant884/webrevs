{"files":[{"patch":"@@ -409,0 +409,10 @@\n+\n+  \/\/ For byte elements, unsigned right shift is equal to signed right shift if the shift_cnt <= 24.\n+  \/\/ For short elements, unsigned right shift is equal to signed right shift if the shift_cnt <= 16.\n+  \/\/ To support unsigned right shift of negative byte\/short elements, we replace the unsigned right\n+  \/\/ shift operation with the signed right shift operation. This is fine because for vector api, the\n+  \/\/ shift count will be masked to shift_cnt <= 7 for bytes and shift_cnt <= 15 for shorts.\n+  if (opc == Op_URShiftB || opc == Op_URShiftS) {\n+    opc = Op_RShiftI;\n+  }\n+\n@@ -2249,0 +2259,9 @@\n+  \/\/ For byte elements, unsigned right shift is equal to signed right shift if the shift_cnt <= 24.\n+  \/\/ For short elements, unsigned right shift is equal to signed right shift if the shift_cnt <= 16.\n+  \/\/ To support unsigned right shift of negative byte\/short elements, we replace the unsigned right\n+  \/\/ shift operation with the signed right shift operation. This is fine because for vector api, the\n+  \/\/ shift count will be masked to shift_cnt <= 7 for bytes and shift_cnt <= 15 for shorts.\n+  if (opc == Op_URShiftB || opc == Op_URShiftS) {\n+    opc = Op_RShiftI;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOp(v1, vm, (i, a, n) -> (byte)(a >>> n));\n@@ -935,1 +935,1 @@\n-                    v.uOp(m, (i, a) -> (byte)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOp(m, (i, a) -> (byte)(a >>> n));\n@@ -950,2 +950,0 @@\n-    \/\/ Also simulate >>> on sub-word variables with a mask.\n-    private static final int LSHR_SETUP_MASK = ((1 << Byte.SIZE) - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOp(v1, vm, (i, a, n) -> (int)(a >>> n));\n@@ -935,1 +935,1 @@\n-                    v.uOp(m, (i, a) -> (int)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOp(m, (i, a) -> (int)(a >>> n));\n@@ -950,1 +950,0 @@\n-    private static final int LSHR_SETUP_MASK = -1;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -716,1 +716,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOp(v1, vm, (i, a, n) -> (long)(a >>> n));\n@@ -848,1 +848,1 @@\n-                    v.uOp(m, (i, a) -> (long)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOp(m, (i, a) -> (long)(a >>> n));\n@@ -863,1 +863,0 @@\n-    private static final long LSHR_SETUP_MASK = -1;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOp(v1, vm, (i, a, n) -> (short)(a >>> n));\n@@ -935,1 +935,1 @@\n-                    v.uOp(m, (i, a) -> (short)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOp(m, (i, a) -> (short)(a >>> n));\n@@ -950,2 +950,0 @@\n-    \/\/ Also simulate >>> on sub-word variables with a mask.\n-    private static final int LSHR_SETUP_MASK = ((1 << Short.SIZE) - 1);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -837,1 +837,1 @@\n-                    v0.bOp(v1, vm, (i, a, n) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n+                    v0.bOp(v1, vm, (i, a, n) -> ($type$)(a >>> n));\n@@ -1040,1 +1040,1 @@\n-                    v.uOp(m, (i, a) -> ($type$)((a & LSHR_SETUP_MASK) >>> n));\n+                    v.uOp(m, (i, a) -> ($type$)(a >>> n));\n@@ -1055,6 +1055,0 @@\n-#if[byteOrShort]\n-    \/\/ Also simulate >>> on sub-word variables with a mask.\n-    private static final int LSHR_SETUP_MASK = ((1 << $Boxtype$.SIZE) - 1);\n-#else[byteOrShort]\n-    private static final $type$ LSHR_SETUP_MASK = -1;\n-#end[byteOrShort]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2331,1 +2331,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte)((a >>> (b & 0x7)));\n@@ -2425,1 +2425,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte)((a >>> (b & 7)));\n@@ -2689,1 +2689,1 @@\n-        return (byte)(((a & 0xFF) >>> CONST_SHIFT));\n+        return (byte)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2331,1 +2331,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte)((a >>> (b & 0x7)));\n@@ -2425,1 +2425,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte)((a >>> (b & 7)));\n@@ -2689,1 +2689,1 @@\n-        return (byte)(((a & 0xFF) >>> CONST_SHIFT));\n+        return (byte)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2331,1 +2331,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte)((a >>> (b & 0x7)));\n@@ -2425,1 +2425,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte)((a >>> (b & 7)));\n@@ -2689,1 +2689,1 @@\n-        return (byte)(((a & 0xFF) >>> CONST_SHIFT));\n+        return (byte)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2331,1 +2331,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte)((a >>> (b & 0x7)));\n@@ -2425,1 +2425,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte)((a >>> (b & 7)));\n@@ -2689,1 +2689,1 @@\n-        return (byte)(((a & 0xFF) >>> CONST_SHIFT));\n+        return (byte)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2336,1 +2336,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte)((a >>> (b & 0x7)));\n@@ -2430,1 +2430,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte)((a >>> (b & 7)));\n@@ -2694,1 +2694,1 @@\n-        return (byte)(((a & 0xFF) >>> CONST_SHIFT));\n+        return (byte)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2323,1 +2323,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short)((a >>> (b & 0xF)));\n@@ -2417,1 +2417,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short)((a >>> (b & 15)));\n@@ -2681,1 +2681,1 @@\n-        return (short)(((a & 0xFFFF) >>> CONST_SHIFT));\n+        return (short)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2323,1 +2323,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short)((a >>> (b & 0xF)));\n@@ -2417,1 +2417,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short)((a >>> (b & 15)));\n@@ -2681,1 +2681,1 @@\n-        return (short)(((a & 0xFFFF) >>> CONST_SHIFT));\n+        return (short)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2323,1 +2323,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short)((a >>> (b & 0xF)));\n@@ -2417,1 +2417,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short)((a >>> (b & 15)));\n@@ -2681,1 +2681,1 @@\n-        return (short)(((a & 0xFFFF) >>> CONST_SHIFT));\n+        return (short)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2323,1 +2323,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short)((a >>> (b & 0xF)));\n@@ -2417,1 +2417,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short)((a >>> (b & 15)));\n@@ -2681,1 +2681,1 @@\n-        return (short)(((a & 0xFFFF) >>> CONST_SHIFT));\n+        return (short)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2328,1 +2328,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short)((a >>> (b & 0xF)));\n@@ -2422,1 +2422,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short)((a >>> (b & 15)));\n@@ -2686,1 +2686,1 @@\n-        return (short)(((a & 0xFFFF) >>> CONST_SHIFT));\n+        return (short)((a >>> CONST_SHIFT));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -433,2 +433,2 @@\n-gen_binary_alu_op \"LSHR\" \"((a \\& 0xFF) >>> (b \\& 0x7))\" \"byte\"\n-gen_binary_alu_op \"LSHR\" \"((a \\& 0xFFFF) >>> (b \\& 0xF))\" \"short\"\n+gen_binary_alu_op \"LSHR\" \"(a >>> (b \\& 0x7))\" \"byte\"\n+gen_binary_alu_op \"LSHR\" \"(a >>> (b \\& 0xF))\" \"short\"\n@@ -439,2 +439,2 @@\n-gen_shift_op  \"LSHR\" \"((a \\& 0xFF) >>> (b \\& 7))\" \"byte\"\n-gen_shift_op  \"LSHR\" \"((a \\& 0xFFFF) >>> (b \\& 15))\" \"short\"\n+gen_shift_op  \"LSHR\" \"(a >>> (b \\& 7))\" \"byte\"\n+gen_shift_op  \"LSHR\" \"(a >>> (b \\& 15))\" \"short\"\n@@ -451,2 +451,2 @@\n-gen_shift_cst_op  \"LSHR\" \"((a \\& 0xFF) >>> CONST_SHIFT)\" \"byte\"\n-gen_shift_cst_op  \"LSHR\" \"((a \\& 0xFFFF) >>> CONST_SHIFT)\" \"short\"\n+gen_shift_cst_op  \"LSHR\" \"(a >>> CONST_SHIFT)\" \"byte\"\n+gen_shift_cst_op  \"LSHR\" \"(a >>> CONST_SHIFT)\" \"short\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}