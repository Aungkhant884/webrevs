{"files":[{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathFactory;\n+import javax.xml.xpath.XPathNodes;\n+\n+\/*\n+ * @test\n+ * @bug     8292990\n+ * @summary Tests the XPath parent axis\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ *\n+ * @run testng xpath.XPathExpParentTest\n+ *\/\n+public class XPathExpParentTest extends XPathTestBase {\n+    private static final Document doc = getDocument();\n+\n+    \/*\n+     * DataProvider for XPath expressions which should provide one and only\n+     * one parent node.\n+     * Data columns:\n+     *  see parameters of the test \"testOneParentNodeExp\"\n+     *\/\n+    @DataProvider(name = \"oneParentNode\")\n+    public Object[][] getOneParentNodeExp() {\n+        return new Object[][]{\n+                {\"\/\/Customer\/parent::*\", \"\/\/Customers\"},\n+                {\"\/\/Customer[1]\/text()\/parent::*\", \"(\/\/Customer)[1]\"},\n+                {\"\/\/Customer[1]\/@id\/parent::*\", \"(\/\/Customer)[1]\"},\n+                {\"\/\/Customer[1]\/namespace::*\/parent::*\", \"\/\/Customers\"},\n+                {\"\/Customers\/comment()\/parent::*\", \"\/\/Customers\"},\n+                {\"\/\/Customer[1]\/..\", \"\/\/Customers\"},\n+                {\"\/\/Customer[1]\/text()\/..\", \"(\/\/Customer)[1]\"},\n+                {\"\/\/Customer[1]\/@id\/..\", \"(\/\/Customer)[1]\"},\n+                {\"\/\/Customer[1]\/namespace::*\/..\", \"\/\/Customers\"},\n+                {\"\/Customers\/comment()\/..\", \"\/\/Customers\"},\n+                {\"\/\/*[parent::Customers][1]\", \"(\/\/Customer)[1]\"},\n+                {\"\/\/*[parent::Customers and @id='x1']\", \"(\/\/Customer)[1]\"},\n+\n+                \/\/ \"..\" is short for parent::node(). A node test node() is true for any node of\n+                \/\/ any type including the document root node.\n+                {\"\/Customers\/parent::node()\", \"\/\"},\n+                {\"\/Customers\/..\", \"\/\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for XPath expressions which should provide no parent node.\n+     * Data columns:\n+     *  see parameters of the test \"testZeroParentNodeExp\"\n+     *\/\n+    @DataProvider(name = \"noParentNode\")\n+    public Object[][] getZeroParentNodeExp() {\n+        return new Object[][]{\n+                \/\/ A node test * is true for any node of the principle node type which contains\n+                \/\/ attribute nodes, namespace nodes and element nodes. parent::* never includes the\n+                \/\/ document root node.\n+                {\"\/Customers\/parent::*\"},\n+\n+                \/\/ \"\/\" selects the document root which has no parent. Expressions below validate\n+                \/\/ no parent is found on the document root node.\n+                {\"\/..\"},\n+                {\"\/parent::node()\"}\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for XPath relative expressions which should provide a parent node.\n+     * Data columns:\n+     *  see parameters of the test \"testRelativeParentExp\"\n+     *\/\n+    @DataProvider(name = \"relativeParent\")\n+    public Object[][] getRelativeParentExp() {\n+        return new Object[][]{\n+                {\"\/Customers\", \"comment()\/parent::*\"},\n+                {\"\/Customers\/Customer[1]\", \"Name\/parent::*\"},\n+                {\"\/Customers\/Customer[1]\", \"text()\/parent::*\"},\n+                {\"\/Customers\/Customer[1]\", \"@id\/parent::*\"},\n+                {\"\/Customers\", \"namespace::*\/parent::*\"},\n+                {\"\/Customers\", \"comment()\/parent::*\"},\n+                {\"\/Customers\/Customer[1]\", \"..\/Customer[1]\/Name\/..\"},\n+                {\"\/Customers\/Customer[1]\", \"..\/Customer[1]\/text()\/..\"},\n+                {\"\/Customers\/Customer[1]\", \"..\/Customer[1]\/@id\/..\"},\n+                {\"\/Customers\", \"namespace::*\/..\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that XPath expressions provide one and only parent node.\n+     *\n+     * @param exp       XPath expression\n+     * @param parentExp XPath parent node expression\n+     * @throws Exception if test failed\n+     *\/\n+    @Test(dataProvider = \"oneParentNode\")\n+    void testOneParentNodeExp(String exp, String parentExp)\n+            throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        Node expected = xPath.evaluateExpression(parentExp, doc, Node.class);\n+\n+        testExp(doc, exp, expected, Node.class);\n+\n+        XPathNodes nodes = xPath.evaluateExpression(exp, doc, XPathNodes.class);\n+\n+        Assert.assertEquals(nodes.size(), 1);\n+    }\n+\n+    \/**\n+     * Verifies that XPath expressions provide no parent node.\n+     *\n+     * @param exp XPath expression\n+     * @throws Exception if test failed\n+     *\/\n+    @Test(dataProvider = \"noParentNode\")\n+    void testZeroParentNodeExp(String exp)\n+            throws Exception {\n+        testExp(doc, exp, null, Node.class);\n+    }\n+\n+    \/**\n+     * Verifies that XPath relative expressions provide a same node as the context node.\n+     *\n+     * @param exp         XPath expression that provides a context node\n+     * @param relativeExp XPath relative expression that is evaluated relatively to the context node\n+     * @throws Exception if test failed\n+     *\/\n+    @Test(dataProvider = \"relativeParent\")\n+    void testRelativeParentExp(String exp, String relativeExp) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        Node contextNode = xPath.evaluateExpression(exp, doc, Node.class);\n+        Node relativeNode = xPath.evaluateExpression(relativeExp, contextNode, Node.class);\n+\n+        Assert.assertEquals(relativeNode, contextNode);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathExpParentTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"},{"patch":"@@ -71,0 +71,1 @@\n+            + \"<!-- This is a comment -->\"\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathTestBase.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}