{"files":[{"patch":"@@ -131,0 +131,5 @@\n+  \/\/ Attempts to claim _claim_step JavaThreads, returning an array of claimed\n+  \/\/ JavaThread* with count elements. Returns null (and a zero count) if there\n+  \/\/ are no more threads to claim.\n+  JavaThread* const* claim(uint& count);\n+\n@@ -136,4 +141,4 @@\n-  \/\/ Attempts to claim _claim_step JavaThreads, returning an array of claimed\n-  \/\/ JavaThread* with count elements. Returns null (and a zero count) if there\n-  \/\/ are no more threads to claim.\n-  JavaThread* const* claim(uint& count);\n+  \/\/ Executes the given closure on the elements of the JavaThread list, chunking the\n+  \/\/ JavaThread set in claim_step chunks for each caller to reduce parallelization\n+  \/\/ overhead.\n+  void apply(ThreadClosure* cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -66,0 +66,11 @@\n+inline void G1JavaThreadsListClaimer::apply(ThreadClosure* cl) {\n+  JavaThread* const* list;\n+  uint count;\n+\n+  while ((list = claim(count)) != nullptr) {\n+    for (uint i = 0; i < count; i++) {\n+      cl->do_thread(list[i]);\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -716,5 +716,5 @@\n-    JavaThread* const* list;\n-    uint count;\n-    while ((list = _claimer.claim(count)) != nullptr) {\n-      for (uint i = 0; i < count; i++) {\n-        list[i]->tlab().resize();\n+    class ResizeClosure : public ThreadClosure {\n+    public:\n+\n+      void do_thread(Thread* thread) {\n+        static_cast<JavaThread*>(thread)->tlab().resize();\n@@ -722,1 +722,2 @@\n-    }\n+    } cl;\n+    _claimer.apply(&cl);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}