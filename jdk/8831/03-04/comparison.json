{"files":[{"patch":"@@ -54,1 +54,0 @@\n-MemoryPool*      MemoryService::_compressed_class_pool = NULL;\n","filename":"src\/hotspot\/share\/services\/memoryService.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-  static MemoryPool*                    _compressed_class_pool;\n@@ -95,3 +94,0 @@\n-  static void track_compressed_class_memory_usage() {\n-    track_memory_pool_usage(_compressed_class_pool);\n-  }\n","filename":"src\/hotspot\/share\/services\/memoryService.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,13 +63,0 @@\n-# Test class metaspace - might hit MaxMetaspaceSize instead if\n-# UseCompressedClassPointers is off or if 32 bit.\n-#\n-# (note: This is very shaky and that shakiness exposes a problem with MemoryMXBean:\n-#\n-#  MemoryMXBean defines \"used\" \"committed\" and \"max\" (see java\/lang\/management\/MemoryUsage.java)\n-#  This abstraction misses a definition for \"address space exhausted\" which with the new Metaspace (jep387)\n-#  can happen before committed\/used hits any trigger. We now commit only on demand and therefore class loaders\n-#  can sit atop of uncommitted address space, denying new loaders address space. In the old Metaspace,\n-#  we would have committed the space right away and therefore the MemoryMXBean \"committed\" trigger\n-#  would have fired. In the new Metaspace, we don't commit, so the MemoryMXBean does not fire.\n-go -noclassgc -XX:MaxMetaspaceSize=4m LowMemoryTest2\n-\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/LowMemoryTest2.sh","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}