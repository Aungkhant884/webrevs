{"files":[{"patch":"@@ -29,4 +29,0 @@\n- * @run main\/othervm MultiThreadTest\n- * @run main\/othervm MultiThreadTest\n- * @run main\/othervm MultiThreadTest\n- * @run main\/othervm MultiThreadTest\n@@ -55,1 +51,0 @@\n-import java.util.stream.LongStream;\n@@ -253,1 +248,0 @@\n-                \/\/ these connections are not necessarily unexpected if SLEEP exceeds keep-alive.\n@@ -263,4 +257,5 @@\n-                \/\/ we could call worker.done(); to force the worker\n-                \/\/ to terminate at this point, but we want to verify\n-                \/\/ that the client will eventually close the idle\n-                \/\/ connection. So just join the worker and wait...\n+                \/\/ We want to verify that the client will eventually\n+                \/\/ close the idle connections. So just join the worker\n+                \/\/ and wait... This shouldn't take more than the granularity\n+                \/\/ of the keep-alive cache timer - so we're not actually\n+                \/\/ going to have to wait for one full minute here.\n@@ -420,6 +415,7 @@\n-         * Tries to figure out whether this worker might have been idle for more\n-         * than the KEEP_ALIVE timeout. This will be true if the worker detected\n-         * that the idle timeout was exceeded between two consecutive request, or\n-         * if the time between the last reply\n-         * @param nanosNow\n-         * @return\n+         * {@return Whether this worker might have been idle for more\n+         * than the KEEP_ALIVE timeout}\n+         * This will be true if the worker detected that the idle timeout\n+         * was exceeded between two consecutive request, or\n+         * if the time between the last reply and `nanosNow` exceeds\n+         * the keep-alive time.\n+         * @param nanosNow a timestamp in nano seconds\n@@ -443,1 +439,1 @@\n-            while (!done) {\n+            while (true) {\n@@ -465,1 +461,0 @@\n-            return count;\n@@ -483,1 +478,1 @@\n-                for (;!done;) {\n+                for (;;) {\n@@ -534,1 +529,1 @@\n-                if (!done) e.printStackTrace();\n+                e.printStackTrace();\n@@ -545,1 +540,2 @@\n-                            \", received \" + expectedReqs + \" genuine requests, \" +\n+                            \", successfuly handled \" + requestHandled + \"\/\" +\n+                             expectedReqs + \" genuine requests, \" +\n@@ -550,8 +546,0 @@\n-        public void done() {\n-            done = true;\n-            try {\n-                s.close();\n-            } catch (IOException x) {\n-                \/\/ ignore\n-            }\n-        }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/MultiThreadTest.java","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"}]}