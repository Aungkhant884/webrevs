{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -78,3 +79,0 @@\n-    \/\/ The time at which the clients have received the last\n-    \/\/ response (last response byte has been read).\n-    static final AtomicLong END = new AtomicLong();\n@@ -98,3 +96,4 @@\n-    String uri;\n-    byte[] b;\n-    int requests;\n+    final String uri;\n+    final byte[] b;\n+    final int requests;\n+    final CountDownLatch countDown;\n@@ -102,1 +101,2 @@\n-    MultiThreadTest(String authority, int requests) throws Exception {\n+    MultiThreadTest(String authority, int requests, CountDownLatch latch) throws Exception {\n+        countDown = latch;\n@@ -104,1 +104,0 @@\n-\n@@ -107,4 +106,0 @@\n-\n-        synchronized (threadlock) {\n-            threadCounter ++;\n-        }\n@@ -126,7 +121,1 @@\n-            synchronized (threadlock) {\n-                threadCounter --;\n-                if (threadCounter == 0) {\n-                    END.set(System.nanoTime());\n-                    threadlock.notifyAll();\n-                }\n-            }\n+            countDown.countDown();\n@@ -153,1 +142,0 @@\n-        END.set(start);\n@@ -174,0 +162,1 @@\n+        var latch = new CountDownLatch(threads);\n@@ -179,10 +168,4 @@\n-            synchronized (lock) {\n-                for (int i = 0; i < threads; i++) {\n-                    MultiThreadTest t = new MultiThreadTest(svr.getAuthority(), requests);\n-                    tests.add(t);\n-                    t.start();\n-                }\n-                try {\n-                    lock.wait();\n-                } catch (InterruptedException e) {\n-                }\n+            for (int i = 0; i < threads; i++) {\n+                MultiThreadTest t = new MultiThreadTest(svr.getAuthority(), requests, latch);\n+                tests.add(t);\n+                t.start();\n@@ -191,0 +174,2 @@\n+            latch.await();\n+            long end = System.nanoTime();\n@@ -192,2 +177,2 @@\n-            END.compareAndSet(start, System.nanoTime()); \/\/ sets END if not set.\n-            long end = END.get();\n+            for (var test : tests) test.join();\n+\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/MultiThreadTest.java","additions":17,"deletions":32,"binary":false,"changes":49,"status":"modified"}]}