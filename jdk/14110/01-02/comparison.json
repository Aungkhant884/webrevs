{"files":[{"patch":"@@ -396,4 +396,6 @@\n-     * Determine if a number should create a 1 in the least significant location\n-     * if truncating the representation to the given number of digits would\n-     * violate the current RoundingMode contract.\n-     * @param maximumDigits The maximum number of digits to be shown.\n+     * This method sets the Digit List to a state that is either\n+     * equivalent to zero, or a state with a 1 in the least significant location\n+     * if an underflow to zero would violate the current RoundingMode contract.\n+     *\n+     * This method does not return any value, and instead adjusts\n+     * the instance variables that the Digit List is composed of.\n@@ -401,1 +403,1 @@\n-     * Upon return, count will either be one or zero.\n+     * @param maximumDigits The maximum number of digits to be shown.\n@@ -404,32 +406,10 @@\n-        switch(roundingMode) {\n-            case UP:\n-                \/\/ RoundingMode.UP can not decrease the magnitude of the value\n-                \/\/ whether negative or positive.\n-                decimalAt = -maximumDigits + 1;\n-                digits[0] = '1';\n-                count = 1;\n-                break;\n-            case CEILING:\n-                \/\/ RoundingMode.CEILING follows RoundingMode.UP behavior when\n-                \/\/ the value is positive\n-                if (!isNegative) {\n-                    decimalAt = -maximumDigits + 1;\n-                    digits[0] = '1';\n-                    count = 1;\n-                } else {\n-                    count = 0;\n-                }\n-                break;\n-            case FLOOR:\n-                \/\/ RoundingMode.FLOOR can not increase the value\n-                \/\/ when negative\n-                if (isNegative) {\n-                    decimalAt = -maximumDigits + 1;\n-                    digits[0] = '1';\n-                    count = 1;\n-                } else {\n-                    count = 0;\n-                }\n-                break;\n-            default:\n-                count = 0;\n+        \/\/ These modes under the right conditions should not\n+        \/\/ decrease the magnitude of the formatted value\n+        if (roundingMode == RoundingMode.UP\n+                || (roundingMode == RoundingMode.CEILING && !isNegative)\n+                || (roundingMode == RoundingMode.FLOOR && isNegative)) {\n+            decimalAt = -maximumDigits + 1;\n+            digits[0] = '1';\n+            count = 1;\n+        } else {\n+            count = 0;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":17,"deletions":37,"binary":false,"changes":54,"status":"modified"}]}