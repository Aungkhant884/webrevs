{"files":[{"patch":"@@ -92,1 +92,3 @@\n-     code_too_large\n+     nmethod_reclaimed, \/\/ code cache sweeper reclaimed nmethod in between its creation and being marked \"in_use\"\n+     code_too_large,\n+     first_permanent_bailout = code_too_large\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -482,0 +482,1 @@\n+    nmethodLocker& nmethod_handle,\n@@ -539,2 +540,1 @@\n-    nmethod* nm = NULL;\n-    result = runtime()->register_method(jvmci_env(), method, nm, entry_bci, &_offsets, _orig_pc_offset, &buffer,\n+    result = runtime()->register_method(jvmci_env(), method, nmethod_handle, entry_bci, &_offsets, _orig_pc_offset, &buffer,\n@@ -545,6 +545,9 @@\n-    cb = nm->as_codeblob_or_null();\n-    if (nm != NULL && compile_state == NULL) {\n-      \/\/ This compile didn't come through the CompileBroker so perform the printing here\n-      DirectiveSet* directive = DirectivesStack::getMatchingDirective(method, compiler);\n-      nm->maybe_print_nmethod(directive);\n-      DirectivesStack::release(directive);\n+    if (result == JVMCI::ok) {\n+      nmethod* nm = nmethod_handle.code()->as_nmethod_or_null();\n+      cb = nm;\n+      if (compile_state == NULL) {\n+        \/\/ This compile didn't come through the CompileBroker so perform the printing here\n+        DirectiveSet* directive = DirectivesStack::getMatchingDirective(method, compiler);\n+        nm->maybe_print_nmethod(directive);\n+        DirectivesStack::release(directive);\n+      }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -190,0 +190,1 @@\n+                                   nmethodLocker& nmethod_handle,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -884,0 +884,1 @@\n+  nmethodLocker nmethod_handle;\n@@ -889,0 +890,1 @@\n+      nmethod_handle,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1644,1 +1644,1 @@\n-                                nmethod*& nm,\n+                                nmethodLocker& code_handle,\n@@ -1665,1 +1665,1 @@\n-  nm = NULL;\n+  nmethod* nm = NULL;\n@@ -1750,0 +1750,1 @@\n+        result = JVMCI::cache_full;\n@@ -1787,0 +1788,2 @@\n+            } else {\n+              result = JVMCI::nmethod_reclaimed;\n@@ -1799,0 +1802,2 @@\n+            } else {\n+              result = JVMCI::nmethod_reclaimed;\n@@ -1803,0 +1808,3 @@\n+          if (!nm->make_in_use()) {\n+            result = JVMCI::nmethod_reclaimed;\n+          }\n@@ -1805,1 +1813,3 @@\n-      result = nm != NULL ? JVMCI::ok :JVMCI::cache_full;\n+    }\n+    if (result == JVMCI::ok) {\n+      code_handle.set_code(nm);\n@@ -1816,2 +1826,2 @@\n-  \/\/ JVMTI -- compiled method notification (must be done outside lock)\n-  if (nm != NULL) {\n+  if (result == JVMCI::ok) {\n+    \/\/ JVMTI -- compiled method notification (must be done outside lock)\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                       nmethod*&                 nm,\n+                       nmethodLocker&            code_handle,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -593,4 +593,7 @@\n-  declare_preprocessor_constant(\"JVMCI::ok\",                   JVMCI::ok)                      \\\n-  declare_preprocessor_constant(\"JVMCI::dependencies_failed\",  JVMCI::dependencies_failed)     \\\n-  declare_preprocessor_constant(\"JVMCI::cache_full\",           JVMCI::cache_full)              \\\n-  declare_preprocessor_constant(\"JVMCI::code_too_large\",       JVMCI::code_too_large)          \\\n+  declare_preprocessor_constant(\"JVMCI::ok\",                      JVMCI::ok)                      \\\n+  declare_preprocessor_constant(\"JVMCI::dependencies_failed\",     JVMCI::dependencies_failed)     \\\n+  declare_preprocessor_constant(\"JVMCI::cache_full\",              JVMCI::cache_full)              \\\n+  declare_preprocessor_constant(\"JVMCI::code_too_large\",          JVMCI::code_too_large)          \\\n+  declare_preprocessor_constant(\"JVMCI::nmethod_reclaimed\",       JVMCI::nmethod_reclaimed)       \\\n+  declare_preprocessor_constant(\"JVMCI::first_permanent_bailout\", JVMCI::first_permanent_bailout) \\\n+                                                                          \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-                throw new BailoutException(result != config.codeInstallResultDependenciesFailed, msg);\n+                throw new BailoutException(result >= config.codeInstallResultFirstPermanentBailout, msg);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -365,0 +365,2 @@\n+    final int codeInstallResultNMethodReclaimed = getConstant(\"JVMCI::nmethod_reclaimed\", Integer.class);\n+    final int codeInstallResultFirstPermanentBailout = getConstant(\"JVMCI::first_permanent_bailout\", Integer.class);\n@@ -379,0 +381,3 @@\n+        if (codeInstallResult == codeInstallResultNMethodReclaimed) {\n+            return \"nmethod reclaimed\";\n+        }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}