{"files":[{"patch":"@@ -46,1 +46,2 @@\n-    private static final VectorSpecies<Integer> SPECIES_I = IntVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Double> SPECIES_D = DoubleVector.SPECIES_128;\n+    private static final VectorSpecies<Integer> SPECIES_I = IntVector.SPECIES_128;\n@@ -61,1 +62,1 @@\n-    static int maskAndTrueCountFloat(boolean[] a, boolean[] b, int idx) {\n+    static int maskAndTrueCount(boolean[] a, boolean[] b, int idx, int SPECIES_length) {\n@@ -63,1 +64,1 @@\n-        boolean[] c = new boolean[SPECIES_F.length()];\n+        boolean[] c = new boolean[SPECIES_length];\n@@ -65,1 +66,1 @@\n-        for (int i = idx; i < idx + SPECIES_F.length(); i++) {\n+        for (int i = idx; i < idx + SPECIES_length; i++) {\n@@ -76,10 +77,3 @@\n-    static int maskAndTrueCountInteger(boolean[] a, boolean[] b, int idx) {\n-        int trueCount = 0;\n-        boolean[] c = new boolean[SPECIES_I.length()];\n-\n-        for (int i = idx; i < idx + SPECIES_I.length(); i++) {\n-            c[i - idx] = a[i] & b[i];\n-        }\n-\n-        for (int i = 0; i < c.length; i++) {\n-            trueCount += c[i] ? 1 : 0;\n+    static void assertArrayEqualsFloat(int[] r, boolean[] a, boolean[] b) {\n+        for (int i = 0; i < a.length; i += SPECIES_F.length()) {\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_F.length()));\n@@ -87,2 +81,0 @@\n-\n-        return trueCount;\n@@ -91,3 +83,3 @@\n-    static void assertArrayEqualsFloat(int[] r, boolean[] a, boolean[] b) {\n-        for (int i = 0; i < a.length; i += SPECIES_F.length()) {\n-            Asserts.assertEquals(r[i], maskAndTrueCountFloat(a, b, i));\n+    static void assertArrayEqualsDouble(int[] r, boolean[] a, boolean[] b) {\n+        for (int i = 0; i < a.length; i += SPECIES_D.length()) {\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_D.length()));\n@@ -99,1 +91,1 @@\n-            Asserts.assertEquals(r[i], maskAndTrueCountInteger(a, b, i));\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_I.length()));\n@@ -116,0 +108,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VSTOREMASK_TRUECOUNT, \">= 1\" })\n+    public static void testDouble() {\n+        int[] r = new int[LENGTH];\n+        for (int i = 0; i < LENGTH; i += SPECIES_D.length()) {\n+            VectorMask<Double> ma = VectorMask.fromArray(SPECIES_D, ba, i);\n+            VectorMask<Double> mb = VectorMask.fromArray(SPECIES_D, bb, i);\n+            r[i] = ma.and(mb).trueCount();\n+        }\n+\n+        assertArrayEqualsDouble(r, ba, bb);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMaskTrueCount.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -748,1 +748,0 @@\n-jdk\/incubator\/vector\/Float64VectorTests.java                    8309129 generic-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}