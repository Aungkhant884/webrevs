{"files":[{"patch":"@@ -5525,2 +5525,5 @@\n-    if (esize == 8) {\n-      __ addpd($vtmp$$FloatRegister, $src$$FloatRegister);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n+    Assembler::SIMD_Arrangement arrangement = Assembler::esize2arrangement(esize,\n+                                                                           \/* isQ *\/ length_in_bytes == 16);\n+    if (arrangement == __ T2D || arrangement == __ T2S) {\n+      __ addpv($vtmp$$FloatRegister, arrangement, $src$$FloatRegister, $src$$FloatRegister);\n@@ -5528,3 +5531,0 @@\n-      uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n-      Assembler::SIMD_Arrangement arrangement = Assembler::esize2arrangement(esize,\n-                                                                             \/* isQ *\/ length_in_bytes == 16);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3835,2 +3835,5 @@\n-    if (esize == 8) {\n-      __ addpd($vtmp$$FloatRegister, $src$$FloatRegister);\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n+    Assembler::SIMD_Arrangement arrangement = Assembler::esize2arrangement(esize,\n+                                                                           \/* isQ *\/ length_in_bytes == 16);\n+    if (arrangement == __ T2D || arrangement == __ T2S) {\n+      __ addpv($vtmp$$FloatRegister, arrangement, $src$$FloatRegister, $src$$FloatRegister);\n@@ -3838,3 +3841,0 @@\n-      uint length_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n-      Assembler::SIMD_Arrangement arrangement = Assembler::esize2arrangement(esize,\n-                                                                             \/* isQ *\/ length_in_bytes == 16);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-    private static final VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_PREFERRED;\n+    private static final VectorSpecies<Float> SPECIES_F = FloatVector.SPECIES_64;\n+    private static final VectorSpecies<Double> SPECIES_D = DoubleVector.SPECIES_128;\n+    private static final VectorSpecies<Integer> SPECIES_I = IntVector.SPECIES_128;\n@@ -60,1 +62,1 @@\n-    static int maskAndTrueCount(boolean[] a, boolean[] b, int idx) {\n+    static int maskAndTrueCount(boolean[] a, boolean[] b, int idx, int SPECIES_length) {\n@@ -62,1 +64,1 @@\n-        boolean[] c = new boolean[SPECIES.length()];\n+        boolean[] c = new boolean[SPECIES_length];\n@@ -64,1 +66,1 @@\n-        for (int i = idx; i < idx + SPECIES.length(); i++) {\n+        for (int i = idx; i < idx + SPECIES_length; i++) {\n@@ -75,3 +77,3 @@\n-    static void assertArrayEquals(int[] r, boolean[] a, boolean[] b) {\n-        for (int i = 0; i < a.length; i += SPECIES.length()) {\n-            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i));\n+    static void assertArrayEqualsFloat(int[] r, boolean[] a, boolean[] b) {\n+        for (int i = 0; i < a.length; i += SPECIES_F.length()) {\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_F.length()));\n@@ -81,0 +83,38 @@\n+    static void assertArrayEqualsDouble(int[] r, boolean[] a, boolean[] b) {\n+        for (int i = 0; i < a.length; i += SPECIES_D.length()) {\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_D.length()));\n+        }\n+    }\n+\n+    static void assertArrayEqualsInteger(int[] r, boolean[] a, boolean[] b) {\n+        for (int i = 0; i < a.length; i += SPECIES_I.length()) {\n+            Asserts.assertEquals(r[i], maskAndTrueCount(a, b, i, SPECIES_I.length()));\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VSTOREMASK_TRUECOUNT, \">= 1\" })\n+    public static void testFloat() {\n+        int[] r = new int[LENGTH];\n+        for (int i = 0; i < LENGTH; i += SPECIES_F.length()) {\n+            VectorMask<Float> ma = VectorMask.fromArray(SPECIES_F, ba, i);\n+            VectorMask<Float> mb = VectorMask.fromArray(SPECIES_F, bb, i);\n+            r[i] = ma.and(mb).trueCount();\n+        }\n+\n+        assertArrayEqualsFloat(r, ba, bb);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.VSTOREMASK_TRUECOUNT, \">= 1\" })\n+    public static void testDouble() {\n+        int[] r = new int[LENGTH];\n+        for (int i = 0; i < LENGTH; i += SPECIES_D.length()) {\n+            VectorMask<Double> ma = VectorMask.fromArray(SPECIES_D, ba, i);\n+            VectorMask<Double> mb = VectorMask.fromArray(SPECIES_D, bb, i);\n+            r[i] = ma.and(mb).trueCount();\n+        }\n+\n+        assertArrayEqualsDouble(r, ba, bb);\n+    }\n+\n@@ -83,1 +123,1 @@\n-    public static void test() {\n+    public static void testInt() {\n@@ -85,3 +125,3 @@\n-        for (int i = 0; i < LENGTH; i += SPECIES.length()) {\n-            VectorMask<Double> ma = VectorMask.fromArray(SPECIES, ba, i);\n-            VectorMask<Double> mb = VectorMask.fromArray(SPECIES, bb, i);\n+        for (int i = 0; i < LENGTH; i += SPECIES_I.length()) {\n+            VectorMask<Integer> ma = VectorMask.fromArray(SPECIES_I, ba, i);\n+            VectorMask<Integer> mb = VectorMask.fromArray(SPECIES_I, bb, i);\n@@ -91,1 +131,1 @@\n-        assertArrayEquals(r, ba, bb);\n+        assertArrayEqualsInteger(r, ba, bb);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMaskTrueCount.java","additions":52,"deletions":12,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -748,1 +748,0 @@\n-jdk\/incubator\/vector\/Float64VectorTests.java                    8309129 generic-aarch64\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}