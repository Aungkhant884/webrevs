[{"commit":{"message":"Generate SVE reduction for MIN\/MAX\/ADD as before\n\nChange-Id: Ibc6b9c1f46c42cd07f7bb73b81ed38829e9d0975"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"}],"sha":"d81fb9c45754cc3767d522a545f2db0282871546"},{"commit":{"message":"8282875: AArch64: [vectorapi] Optimize Vector.reduceLane for SVE 64\/128 vector size\n\nThis patch speeds up add\/mul\/min\/max reductions for SVE for 64\/128\nvector size.\n\nAccording to Neoverse N2\/V1 software optimization guide[1][2], for\n128-bit vector size reduction operations, we prefer using NEON\ninstructions instead of SVE instructions. This patch adds some rules to\ndistinguish 64\/128 bits vector size with others, so that for these two\nspecial cases, they can generate code the same as NEON. E.g., For\nByteVector.SPECIES_128, \"ByteVector.reduceLanes(VectorOperators.ADD)\"\ngenerates code as below:\n\n```\n        Before:\n        uaddv   d17, p0, z16.b\n        smov    x15, v17.b[0]\n        add     w15, w14, w15, sxtb\n\n        After:\n        addv    b17, v16.16b\n        smov    x12, v17.b[0]\n        add     w12, w12, w16, sxtb\n```\nNo multiply reduction instruction in SVE, this patch generates code for\nMulReductionVL by using scalar insnstructions for 128-bit vector size.\n\nWith this patch, all of them have performance gain for specific vector\nmicro benchmarks in my SVE testing system.\n\n[1] https:\/\/developer.arm.com\/documentation\/pjdoc466751330-9685\/latest\/\n[2] https:\/\/developer.arm.com\/documentation\/PJDOC-466751330-18256\/0001\n\nChange-Id: I4bef0b3eb6ad1bac582e4236aef19787ccbd9b1c"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"}],"sha":"59a857e512df12ded92588af27dd8ceb8c4cfbd5"}]