{"files":[{"patch":"@@ -6593,1 +6593,1 @@\n-  predicate(UseAVX <= 2 &&\n+  predicate((UseAVX <= 2 || !VM_Version::supports_avx512vlbw()) &&\n@@ -6609,1 +6609,1 @@\n-  predicate(UseAVX <= 2 &&\n+  predicate((UseAVX <= 2 || !VM_Version::supports_avx512vlbw()) &&\n@@ -6627,1 +6627,1 @@\n-  predicate(UseAVX > 2 ||\n+  predicate((UseAVX > 2 && VM_Version::supports_avx512vlbw()) ||\n@@ -6742,1 +6742,1 @@\n-        __ vcvtdq2ps($dst$$XMMRegister, $dst$$XMMRegister, dst_vlen_enc);\n+        __ vcvtdq2ps($dst$$XMMRegister, $src$$XMMRegister, dst_vlen_enc);\n@@ -6748,1 +6748,1 @@\n-        __ vcvtdq2pd($dst$$XMMRegister, $dst$$XMMRegister, dst_vlen_enc);\n+        __ vcvtdq2pd($dst$$XMMRegister, $src$$XMMRegister, dst_vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import static java.lang.System.Logger.Level.ERROR;\n@@ -311,1 +312,2 @@\n-     * Example, to create a filter that will allow any class loaded from the platform classloader.\n+     * Example, to create a filter that will allow any class loaded from the platform\n+     * or bootstrap classloaders.\n@@ -313,2 +315,3 @@\n-     *     ObjectInputFilter f = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader()\n-     *                                          || cl.getClassLoader() == null, Status.UNDECIDED);\n+     *     ObjectInputFilter f\n+     *         = allowFilter(cl -> cl.getClassLoader() == ClassLoader.getPlatformClassLoader() ||\n+     *                       cl.getClassLoader() == null, Status.UNDECIDED);\n@@ -530,3 +533,0 @@\n-     * <p> If only `jdk.serialFilter` is set and not `jdk.serialFilterFactory` the builtin\n-     * filter factory, compatible with previous versions, is set and can not be replaced,\n-     * see below to override the builtin filter factory.\n@@ -537,1 +537,1 @@\n-     * filter factory or the special value `OVERRIDE`.\n+     * filter factory.\n@@ -540,3 +540,0 @@\n-     *\n-     * If the value is `OVERRIDE`, the filter factory can be set by the application before\n-     * the first deserialization using {@link Config#setSerialFilterFactory(BinaryOperator)};\n@@ -546,1 +543,1 @@\n-     * <p>If not `OVERRIDE`, the class must be public, must have a public zero-argument constructor, implement the\n+     * <p>The class must be public, must have a public zero-argument constructor, implement the\n@@ -581,5 +578,0 @@\n-        \/**\n-         * The property name to enable tracing of filters.\n-         *\/\n-        private static final String SERIAL_FILTER_TRACE_PROPNAME = \"jdk.serialFilterTrace\";\n-\n@@ -601,1 +593,0 @@\n-         * - jdk.serialFilter is set and jdk.serialFilterFactory is unset, the builtin can not be replaced\n@@ -607,1 +598,1 @@\n-         * Debug: Logger\n+         * Debug and Trace Logger\n@@ -611,5 +602,0 @@\n-        \/**\n-         * True when tracing of filters is enabled.\n-         *\/\n-        private static final boolean traceFilters;\n-\n@@ -620,0 +606,1 @@\n+             * <li>The logger is created.\n@@ -624,2 +611,0 @@\n-             * <li>The property jdk.serialFilterTrace, is read, and if set enables tracing of filters.\n-             * <li>If either property is defined or tracing is enabled, the logger is created.\n@@ -629,0 +614,3 @@\n+            \/\/ Initialize the logger.\n+            configLog = System.getLogger(\"java.io.serialization\");\n+\n@@ -641,6 +629,0 @@\n-            traceFilters = GetBooleanAction.privilegedGetProperty(SERIAL_FILTER_TRACE_PROPNAME);\n-\n-            \/\/ Initialize the logger if either filter factory or filter property is set\n-            configLog = (filterString != null || factoryClassName != null || traceFilters)\n-                    ? System.getLogger(\"java.io.serialization\") : null;\n-\n@@ -656,1 +638,1 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n+                    configLog.log(ERROR,\n@@ -664,1 +646,1 @@\n-            if (factoryClassName == null || \"OVERRIDE\".equals(factoryClassName)) {\n+            if (factoryClassName == null) {\n@@ -666,8 +648,0 @@\n-                if (serialFilter != null && factoryClassName == null) {\n-                    \/\/ Ensure backward compatibility, unless factory is explicitly allowed to override\n-                    \/\/ Do not allow factory to be overridden by Config.setSerialFilterFactory\n-                    filterFactoryNoReplace.set(true);\n-                }\n-\n-                configLog.log(DEBUG,\n-                        \"Creating deserialization filter factory for {0}\", factoryClassName);\n@@ -677,3 +651,5 @@\n-                    \/\/ The static initialization of the class or constructor may create a race\n-                    \/\/ if either calls Config.setSerialFilterFactory; the command line configured\n-                    \/\/ Class should not be overridden.\n+                    \/\/ Cause Config.setSerialFilterFactory to throw {@link IllegalStateException}\n+                    \/\/ if Config.setSerialFilterFactory is called as a side effect of the\n+                    \/\/ static initialization of the class or constructor.\n+                    filterFactoryNoReplace.set(true);\n+\n@@ -683,1 +659,1 @@\n-                    BinaryOperator<ObjectInputFilter> f =\n+                    BinaryOperator<ObjectInputFilter> factory =\n@@ -686,10 +662,3 @@\n-                    if (serialFilterFactory != null) {\n-                        \/\/ Init cycle if Config.setSerialFilterFactory called from class initialization\n-                        configLog.log(System.Logger.Level.ERROR,\n-                                \"FilterFactory provided on the command line can not be overridden\");\n-                        \/\/ Do not continue if configuration not initialized\n-                        throw new ExceptionInInitializerError(\n-                                \"FilterFactory provided on the command line can not be overridden\");\n-                    }\n-                    serialFilterFactory = f;\n-                    filterFactoryNoReplace.set(true);\n+                    configLog.log(DEBUG,\n+                            \"Creating deserialization filter factory for {0}\", factoryClassName);\n+                    serialFilterFactory = factory;\n@@ -698,2 +667,3 @@\n-                    configLog.log(System.Logger.Level.ERROR,\n-                            \"Error configuring filter factory\", ex);\n+                    Throwable th = (ex instanceof InvocationTargetException ite) ? ite.getCause() : ex;\n+                    configLog.log(ERROR,\n+                            \"Error configuring filter factory: {0}\", (Object)th);\n@@ -701,2 +671,1 @@\n-                    throw new ExceptionInInitializerError(\n-                            \"FilterFactory configuration: jdk.serialFilterFactory: \" + ex.getMessage());\n+                    throw new ExceptionInInitializerError(th);\n@@ -719,3 +688,1 @@\n-            if (traceFilters && configLog != null) {\n-                configLog.log(TRACE, msg, args);\n-            }\n+            configLog.log(TRACE, msg, args);\n@@ -842,4 +809,4 @@\n-            if (serialFilterFactory == null)\n-                throw new IllegalStateException(\"Serial filter factory initialization incomplete\");\n-                throw new IllegalStateException(\"Cannot replace filter factory: \" +\n-                        serialFilterFactory.getClass().getName());\n+                final String msg = serialFilterFactory != null\n+                        ? serialFilterFactory.getClass().getName()\n+                        : \"initialization incomplete\";\n+                throw new IllegalStateException(\"Cannot replace filter factory: \" + msg);\n@@ -848,0 +815,2 @@\n+            configLog.log(DEBUG,\n+                    \"Setting deserialization filter factory to {0}\", filterFactory.getClass().getName());\n@@ -1165,1 +1134,1 @@\n-                            traceFilter(\"Pattern array class: {0}, filter: {1}\", clazz, this);\n+                            traceFilter(\"Pattern filter array class: {0}, filter: {1}\", clazz, this);\n@@ -1176,1 +1145,1 @@\n-                        traceFilter(\"Pattern UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n+                        traceFilter(\"Pattern filter UNDECIDED, primitive class: {0}, filter: {1}\", clazz, this);\n@@ -1186,1 +1155,1 @@\n-                        traceFilter(\"Pattern {0}, class: {1}, filter: {2}\", s, cl, this);\n+                        traceFilter(\"Pattern filter {0}, class: {1}, filter: {2}\", s, cl, this);\n@@ -1285,1 +1254,1 @@\n-                    traceFilter(\"MergeFilter REJECT first: {0}, filter: {1}\",\n+                    traceFilter(\"MergeFilter REJECTED first: {0}, filter: {1}\",\n@@ -1291,1 +1260,1 @@\n-                    traceFilter(\"MergeFilter REJECT {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter REJECTED {0}, {1}, filter: {2}\",\n@@ -1296,1 +1265,1 @@\n-                    traceFilter(\"MergeFilter ALLOW either: {0}, {1}, filter: {2}\",\n+                    traceFilter(\"MergeFilter ALLOWED either: {0}, {1}, filter: {2}\",\n@@ -1334,1 +1303,0 @@\n-                status = REJECTED;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":41,"deletions":73,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-compiler\/vectorapi\/VectorCastShape128Test.java 8269952 generic-x64\n-compiler\/vectorapi\/VectorCastShape64Test.java 8269952 generic-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}