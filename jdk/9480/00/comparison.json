{"files":[{"patch":"@@ -883,2 +883,9 @@\n-    HotSpotResolvedObjectTypeImpl getResolvedJavaType(long displacement, boolean compressed) {\n-        return getResolvedJavaType0(null, displacement, compressed);\n+    \/**\n+     * Reads a {@code Klass*} from {@code address} (i.e., {@code address} is a {@code Klass**}\n+     * value) and wraps it in a {@link HotSpotResolvedObjectTypeImpl}. This VM call must be used for\n+     * any {@code Klass*} value not known to be already wrapped in a\n+     * {@link HotSpotResolvedObjectTypeImpl}. The VM call is necessary so that the {@code Klass*} is\n+     * wrapped in a {@code JVMCIKlassHandle} to protect it from the concurrent scanning done by G1.\n+     *\/\n+    HotSpotResolvedObjectTypeImpl getResolvedJavaType(long address) {\n+        return getResolvedJavaType0(null, address, false);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -311,5 +311,1 @@\n-        long klassPointer = UNSAFE.getAddress(methodDataPointer + fullOffsetInBytes);\n-        if (klassPointer == 0) {\n-            return null;\n-        }\n-        return runtime().fromMetaspace(klassPointer);\n+        return compilerToVM().getResolvedJavaType(methodDataPointer + fullOffsetInBytes);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotMethodData.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -92,6 +93,5 @@\n-        long metaspaceMethod = UNSAFE.getLong(metaspaceHandle);\n-        assert metaspaceMethod != 0 : metaspaceHandle;\n-        final long metaspaceConstMethod = UNSAFE.getAddress(metaspaceMethod + config.methodConstMethodOffset);\n-        final long metaspaceConstantPool = UNSAFE.getAddress(metaspaceConstMethod + config.constMethodConstantsOffset);\n-        long klassPointer = UNSAFE.getAddress(metaspaceConstantPool + config.constantPoolHolderOffset);\n-        return runtime().fromMetaspace(klassPointer);\n+        long methodPointer = UNSAFE.getLong(metaspaceHandle);\n+        assert methodPointer != 0 : metaspaceHandle;\n+        final long constMethodPointer = UNSAFE.getAddress(methodPointer + config.methodConstMethodOffset);\n+        final long constantPoolPointer = UNSAFE.getAddress(constMethodPointer + config.constMethodConstantsOffset);\n+        return Objects.requireNonNull(compilerToVM().getResolvedJavaType(constantPoolPointer + config.constantPoolHolderOffset));\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedJavaMethodImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}