{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @compile\/module=java.base java\/io\/BitsProxy.java\n@@ -30,1 +31,1 @@\n-import java.lang.reflect.Method;\n+import java.io.BitsProxy;\n@@ -52,1 +53,1 @@\n-            putShort(BUFF, OFFSET, expected);\n+            RefImpl.putShort(BUFF, OFFSET, expected);\n@@ -63,1 +64,1 @@\n-            short actual = getShort(BUFF, OFFSET);\n+            short actual = RefImpl.getShort(BUFF, OFFSET);\n@@ -72,1 +73,1 @@\n-            putChar(BUFF, OFFSET, expected);\n+            RefImpl.putChar(BUFF, OFFSET, expected);\n@@ -83,1 +84,1 @@\n-            char actual = getChar(BUFF, OFFSET);\n+            char actual = RefImpl.getChar(BUFF, OFFSET);\n@@ -92,1 +93,1 @@\n-            putInt(BUFF, OFFSET, expected);\n+            RefImpl.putInt(BUFF, OFFSET, expected);\n@@ -103,1 +104,1 @@\n-            int actual = getInt(BUFF, OFFSET);\n+            int actual = RefImpl.getInt(BUFF, OFFSET);\n@@ -111,1 +112,1 @@\n-            putLong(BUFF, OFFSET, expected);\n+            RefImpl.putLong(BUFF, OFFSET, expected);\n@@ -121,1 +122,1 @@\n-            long actual = getLong(BUFF, OFFSET);\n+            long actual = RefImpl.getLong(BUFF, OFFSET);\n@@ -130,1 +131,1 @@\n-            putFloat(BUFF, OFFSET, expected);\n+            RefImpl.putFloat(BUFF, OFFSET, expected);\n@@ -141,1 +142,1 @@\n-            float actual = getFloat(BUFF, OFFSET);\n+            float actual = RefImpl.getFloat(BUFF, OFFSET);\n@@ -149,1 +150,1 @@\n-            putDouble(BUFF, OFFSET, expected);\n+            RefImpl.putDouble(BUFF, OFFSET, expected);\n@@ -159,1 +160,1 @@\n-            double actual = getDouble(BUFF, OFFSET);\n+            double actual = RefImpl.getDouble(BUFF, OFFSET);\n@@ -168,2 +169,2 @@\n-        assertThrowsOriginal(NullPointerException.class, () -> method(\"getInt\").invoke(null, null, OFFSET));\n-        assertThrowsOriginal(NullPointerException.class, () -> method(\"putInt\", int.class).invoke(null, BUFF, OFFSET, 1));\n+        assertThrowsOriginal(NullPointerException.class, () -> BitsProxy.getInt(null, OFFSET));\n+        assertThrowsOriginal(NullPointerException.class, () -> BitsProxy.putInt(null, OFFSET, 1));\n@@ -174,2 +175,2 @@\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> method(\"getInt\").invoke(null, BUFF, -1));\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> method(\"putInt\", int.class).invoke(null, BUFF, -1, 1));\n+        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> BitsProxy.getInt(BUFF, -1));\n+        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> BitsProxy.putInt(BUFF, -1, 1));\n@@ -180,25 +181,2 @@\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> method(\"getInt\").invoke(null, BUFF, BUFF.length));\n-        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> method(\"putInt\", int.class).invoke(null, BUFF, BUFF.length, 1));\n-    }\n-\n-    static Method method(String name) {\n-        try {\n-            Class<?> bits = Class.forName(\"java.io.Bits\");\n-            Method method = bits.getDeclaredMethod(name, byte[].class, int.class);\n-            method.setAccessible(true);\n-            return method;\n-        } catch (Exception e) {\n-            throw new AssertionError(e);\n-        }\n-    }\n-\n-    static Method method(String name,\n-                         Class<?> primitiveType) {\n-        try {\n-            Class<?> bits = Class.forName(\"java.io.Bits\");\n-            Method method = bits.getDeclaredMethod(name, byte[].class, int.class, primitiveType);\n-            method.setAccessible(true);\n-            return method;\n-        } catch (Exception e) {\n-            throw new AssertionError(e);\n-        }\n+        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> BitsProxy.getInt(BUFF, BUFF.length));\n+        assertThrowsOriginal(IndexOutOfBoundsException.class, () -> BitsProxy.putInt(BUFF, BUFF.length, 1));\n@@ -236,6 +214,5 @@\n-    \/\/ Wrapper methods to test package private methods\n-\n-    private static final class BitsProxy {\n-\n-        private BitsProxy() {\n-        }\n+    \/**\n+    * Reference implementation from the old java.io.Bits implementation\n+    *\/\n+    private static final class RefImpl {\n+        private RefImpl() {}\n@@ -244,1 +221,2 @@\n-            return (char) invoke(\"getChar\", b, off);\n+            return (char) ((b[off + 1] & 0xFF) +\n+                    (b[off] << 8));\n@@ -248,1 +226,2 @@\n-            return (short) invoke(\"getShort\", b, off);\n+            return (short) ((b[off + 1] & 0xFF) +\n+                    (b[off] << 8));\n@@ -252,1 +231,4 @@\n-            return (int) invoke(\"getInt\", b, off);\n+            return ((b[off + 3] & 0xFF)) +\n+                    ((b[off + 2] & 0xFF) << 8) +\n+                    ((b[off + 1] & 0xFF) << 16) +\n+                    ((b[off]) << 24);\n@@ -256,1 +238,1 @@\n-            return (float) invoke(\"getFloat\", b, off);\n+            return Float.intBitsToFloat(getInt(b, off));\n@@ -260,1 +242,8 @@\n-            return (long) invoke(\"getLong\", b, off);\n+            return ((b[off + 7] & 0xFFL)) +\n+                    ((b[off + 6] & 0xFFL) << 8) +\n+                    ((b[off + 5] & 0xFFL) << 16) +\n+                    ((b[off + 4] & 0xFFL) << 24) +\n+                    ((b[off + 3] & 0xFFL) << 32) +\n+                    ((b[off + 2] & 0xFFL) << 40) +\n+                    ((b[off + 1] & 0xFFL) << 48) +\n+                    (((long) b[off]) << 56);\n@@ -264,1 +253,1 @@\n-            return (double) invoke(\"getDouble\", b, off);\n+            return Double.longBitsToDouble(getLong(b, off));\n@@ -273,5 +262,2 @@\n-            try {\n-                method(\"putChar\", char.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            b[off + 1] = (byte) (val);\n+            b[off] = (byte) (val >>> 8);\n@@ -281,5 +267,2 @@\n-            try {\n-                method(\"putShort\", short.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            b[off + 1] = (byte) (val);\n+            b[off] = (byte) (val >>> 8);\n@@ -289,5 +272,4 @@\n-            try {\n-                method(\"putInt\", int.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            b[off + 3] = (byte) (val);\n+            b[off + 2] = (byte) (val >>> 8);\n+            b[off + 1] = (byte) (val >>> 16);\n+            b[off] = (byte) (val >>> 24);\n@@ -297,5 +279,1 @@\n-            try {\n-                method(\"putFloat\", float.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            putInt(b, off, Float.floatToIntBits(val));\n@@ -305,5 +283,8 @@\n-            try {\n-                method(\"putLong\", long.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            b[off + 7] = (byte) (val);\n+            b[off + 6] = (byte) (val >>> 8);\n+            b[off + 5] = (byte) (val >>> 16);\n+            b[off + 4] = (byte) (val >>> 24);\n+            b[off + 3] = (byte) (val >>> 32);\n+            b[off + 2] = (byte) (val >>> 40);\n+            b[off + 1] = (byte) (val >>> 48);\n+            b[off] = (byte) (val >>> 56);\n@@ -313,13 +294,1 @@\n-            try {\n-                method(\"putDouble\", double.class).invoke(null, b, off, val);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n-        }\n-\n-        static Object invoke(String name, byte[] b, int off) {\n-            try {\n-                return method(name).invoke(null, b, off);\n-            } catch (Exception e) {\n-                throw new AssertionError(e);\n-            }\n+            putLong(b, off, Double.doubleToLongBits(val));\n@@ -327,80 +296,0 @@\n-\n-    }\n-\n-    \/\/ Equivalent methods from the old java.io.Bits implementation\n-\n-    static char getChar(byte[] b, int off) {\n-        return (char) ((b[off + 1] & 0xFF) +\n-                (b[off] << 8));\n-    }\n-\n-    static short getShort(byte[] b, int off) {\n-        return (short) ((b[off + 1] & 0xFF) +\n-                (b[off] << 8));\n-    }\n-\n-    static int getInt(byte[] b, int off) {\n-        return ((b[off + 3] & 0xFF)) +\n-                ((b[off + 2] & 0xFF) << 8) +\n-                ((b[off + 1] & 0xFF) << 16) +\n-                ((b[off]) << 24);\n-    }\n-\n-    static float getFloat(byte[] b, int off) {\n-        return Float.intBitsToFloat(getInt(b, off));\n-    }\n-\n-    static long getLong(byte[] b, int off) {\n-        return ((b[off + 7] & 0xFFL)) +\n-                ((b[off + 6] & 0xFFL) << 8) +\n-                ((b[off + 5] & 0xFFL) << 16) +\n-                ((b[off + 4] & 0xFFL) << 24) +\n-                ((b[off + 3] & 0xFFL) << 32) +\n-                ((b[off + 2] & 0xFFL) << 40) +\n-                ((b[off + 1] & 0xFFL) << 48) +\n-                (((long) b[off]) << 56);\n-    }\n-\n-    static double getDouble(byte[] b, int off) {\n-        return Double.longBitsToDouble(getLong(b, off));\n-    }\n-\n-    \/*\n-     * Methods for packing primitive values into byte arrays starting at given\n-     * offsets.\n-     *\/\n-\n-    static void putChar(byte[] b, int off, char val) {\n-        b[off + 1] = (byte) (val);\n-        b[off] = (byte) (val >>> 8);\n-    }\n-\n-    static void putShort(byte[] b, int off, short val) {\n-        b[off + 1] = (byte) (val);\n-        b[off] = (byte) (val >>> 8);\n-    }\n-\n-    static void putInt(byte[] b, int off, int val) {\n-        b[off + 3] = (byte) (val);\n-        b[off + 2] = (byte) (val >>> 8);\n-        b[off + 1] = (byte) (val >>> 16);\n-        b[off] = (byte) (val >>> 24);\n-    }\n-\n-    static void putFloat(byte[] b, int off, float val) {\n-        putInt(b, off, Float.floatToIntBits(val));\n-    }\n-\n-    static void putLong(byte[] b, int off, long val) {\n-        b[off + 7] = (byte) (val);\n-        b[off + 6] = (byte) (val >>> 8);\n-        b[off + 5] = (byte) (val >>> 16);\n-        b[off + 4] = (byte) (val >>> 24);\n-        b[off + 3] = (byte) (val >>> 32);\n-        b[off + 2] = (byte) (val >>> 40);\n-        b[off + 1] = (byte) (val >>> 48);\n-        b[off] = (byte) (val >>> 56);\n-    }\n-\n-    static void putDouble(byte[] b, int off, double val) {\n-        putLong(b, off, Double.doubleToLongBits(val));\n","filename":"test\/jdk\/java\/io\/Bits\/ReadWriteValues.java","additions":61,"deletions":172,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify that reads and writes of primitives are correct\n+ * @compile\/module=java.base java\/io\/ReadWriteValues.java\n+ * @run junit\/othervm --add-opens java.base\/java.io=ALL-UNNAMED ReadWriteValues\n+ *\/\n+\n+package java.io;\n+\n+import java.io.Bits;\n+\n+\/**\n+ * Class to allow public access to package-private methods.\n+ *\/\n+public final class BitsProxy {\n+\n+    public static boolean getBoolean(byte[] b, int off) {\n+        return Bits.getBoolean(b, off);\n+    }\n+\n+    public static char getChar(byte[] b, int off) {\n+        return Bits.getChar(b, off);\n+    }\n+\n+    public static short getShort(byte[] b, int off) {\n+        return Bits.getShort(b, off);\n+    }\n+\n+    public static int getInt(byte[] b, int off) {\n+        return Bits.getInt(b, off);\n+    }\n+\n+    public static float getFloat(byte[] b, int off) {\n+        return Bits.getFloat(b, off);\n+    }\n+\n+    public static long getLong(byte[] b, int off) {\n+        return Bits.getLong(b, off);\n+    }\n+\n+    public static double getDouble(byte[] b, int off) {\n+        return Bits.getDouble(b, off);\n+    }\n+\n+\n+    public static void putBoolean(byte[] b, int off, boolean val) {\n+        Bits.putBoolean(b, off, val);\n+    }\n+\n+    public static void putChar(byte[] b, int off, char val) {\n+        Bits.putChar(b, off, val);\n+    }\n+\n+    public static void putShort(byte[] b, int off, short val) {\n+        Bits.putShort(b, off, val);\n+    }\n+\n+    public static void putInt(byte[] b, int off, int val) {\n+        Bits.putInt(b, off, val);\n+    }\n+\n+    public static void putFloat(byte[] b, int off, float val) {\n+        Bits.putFloat(b, off, val);\n+    }\n+\n+    public static void putLong(byte[] b, int off, long val) {\n+        Bits.putLong(b, off, val);\n+    }\n+\n+    public static void putDouble(byte[] b, int off, double val) {\n+        Bits.putDouble(b, off, val);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/io\/Bits\/java.base\/java\/io\/BitsProxy.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}