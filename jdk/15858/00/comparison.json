{"files":[{"patch":"@@ -122,5 +122,0 @@\n-\n- ~CodeBlob() {\n-    _asm_remarks.clear();\n-    _dbg_strings.clear();\n-  }\n@@ -135,0 +130,3 @@\n+\n+  void operator delete(void* p) { }\n+\n@@ -139,0 +137,4 @@\n+  virtual ~CodeBlob() {\n+    assert(_oop_maps == nullptr, \"Not flushed\");\n+  }\n+\n@@ -407,4 +409,0 @@\n-  \/\/ This ordinary operator delete is needed even though not used, so the\n-  \/\/ below two-argument operator delete will be treated as a placement\n-  \/\/ delete rather than an ordinary sized delete; see C++14 3.7.4.2\/p2.\n-  void operator delete(void* p);\n@@ -495,4 +493,0 @@\n-  \/\/ This ordinary operator delete is needed even though not used, so the\n-  \/\/ below two-argument operator delete will be treated as a placement\n-  \/\/ delete rather than an ordinary sized delete; see C++14 3.7.4.2\/p2.\n-  void operator delete(void* p);\n@@ -535,4 +529,0 @@\n-  \/\/ This ordinary operator delete is needed even though not used, so the\n-  \/\/ below two-argument operator delete will be treated as a placement\n-  \/\/ delete rather than an ordinary sized delete; see C++14 3.7.4.2\/p2.\n-  void operator delete(void* p);\n@@ -753,4 +743,0 @@\n-  \/\/ This ordinary operator delete is needed even though not used, so the\n-  \/\/ below two-argument operator delete will be treated as a placement\n-  \/\/ delete rather than an ordinary sized delete; see C++14 3.7.4.2\/p2.\n-  void operator delete(void* p);\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -607,0 +607,1 @@\n+  cb->~CodeBlob();\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1773,0 +1773,9 @@\n+void CompileBroker::free_buffer_blob_if_allocated(CompilerThread* thread) {\n+  BufferBlob* blob = thread->get_buffer_blob();\n+  if (blob != nullptr) {\n+    blob->flush();\n+    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+    CodeCache::free(blob);\n+  }\n+}\n+\n@@ -1779,5 +1788,1 @@\n-  \/\/ Free buffer blob, if allocated\n-  if (thread->get_buffer_blob() != nullptr) {\n-    MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-    CodeCache::free(thread->get_buffer_blob());\n-  }\n+  free_buffer_blob_if_allocated(thread);\n@@ -1922,5 +1927,1 @@\n-          \/\/ Free buffer blob, if allocated\n-          if (thread->get_buffer_blob() != nullptr) {\n-            MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-            CodeCache::free(thread->get_buffer_blob());\n-          }\n+          free_buffer_blob_if_allocated(thread);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -255,0 +255,2 @@\n+  static void free_buffer_blob_if_allocated(CompilerThread* thread);\n+\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}