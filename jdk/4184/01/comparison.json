{"files":[{"patch":"@@ -543,1 +543,1 @@\n-    MonitorLocker ml(Heap_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(Heap_lock);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,5 +264,0 @@\n-\/\/ Only Threads_lock and Heap_lock may be safepoint_check_sometimes.\n-bool is_sometimes_ok(const char* name) {\n-  return (strcmp(name, \"Threads_lock\") == 0 || strcmp(name, \"Heap_lock\") == 0);\n-}\n-\n@@ -280,3 +275,0 @@\n-  assert(_safepoint_check_required != _safepoint_check_sometimes || is_sometimes_ok(name),\n-         \"Lock has _safepoint_check_sometimes %s\", name);\n-\n@@ -309,1 +301,0 @@\n-  case Mutex::_safepoint_check_sometimes: return \"safepoint_check_sometimes\";\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -135,5 +135,0 @@\n-\n-  \/\/ There are a couple of existing locks that will sometimes have a safepoint check and\n-  \/\/ sometimes not when acquired by a JavaThread, but these locks are set up carefully\n-  \/\/ to avoid deadlocks. TODO: Fix these locks and remove _safepoint_check_sometimes.\n-\n@@ -158,3 +153,0 @@\n-    _safepoint_check_sometimes,   \/\/ A couple of special locks are acquired by JavaThreads sometimes\n-                                  \/\/ with and sometimes without safepoint checks. These\n-                                  \/\/ locks will not produce errors when locked.\n@@ -167,2 +159,0 @@\n-  static const SafepointCheckRequired _safepoint_check_sometimes =\n-    SafepointCheckRequired::_safepoint_check_sometimes;\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -288,1 +288,1 @@\n-  def(Heap_lock                    , PaddedMonitor, nonleaf+1,   false, _safepoint_check_sometimes);  \/\/ Doesn't safepoint check during termination.\n+  def(Heap_lock                    , PaddedMonitor, nonleaf+1,   false, _safepoint_check_always); \/\/ Doesn't safepoint check during termination.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3419,0 +3419,3 @@\n+    \/\/ Assert that the thread is terminated so that acquiring the\n+    \/\/ Heap_lock doesn't cause the terminated thread to participate in\n+    \/\/ the safepoint protocol.\n@@ -3420,1 +3423,2 @@\n-    MutexLocker ml(Heap_lock, Mutex::_no_safepoint_check_flag);\n+    assert(thread->is_terminated(), \"must be terminated here\");\n+    MutexLocker ml(Heap_lock);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}