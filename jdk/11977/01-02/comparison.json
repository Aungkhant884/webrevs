{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+  UTIL_LOOKUP_PROGS(WHOAMI, whoami)\n","filename":"make\/autoconf\/basic_tools.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -454,0 +454,4 @@\n+  # GCC reports lots of likely false positives for stringop-truncation and format-overflow.\n+  # Silence them for now.\n+  UBSAN_CFLAGS=\"-fsanitize=undefined -fsanitize=float-divide-by-zero -Wno-stringop-truncation -Wno-format-overflow -fno-omit-frame-pointer -DUNDEFINED_BEHAVIOR_SANITIZER\"\n+  UBSAN_LDFLAGS=\"-fsanitize=undefined -fsanitize=float-divide-by-zero\"\n@@ -481,0 +485,6 @@\n+  if test \"x$UBSAN_ENABLED\" = xfalse; then\n+    UBSAN_CFLAGS=\"\"\n+    UBSAN_LDFLAGS=\"\"\n+  fi\n+  AC_SUBST(UBSAN_CFLAGS)\n+  AC_SUBST(UBSAN_LDFLAGS)\n","filename":"make\/autoconf\/jdk-options.m4","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,5 @@\n+  # $USER may be not defined in dockers, so try to check with $WHOAMI\n+  if test \"x$USERNAME\" = x && test \"x$WHOAMI\" != x; then\n+    [ USERNAME=`$WHOAMI | $TR -d -c '[a-z][A-Z][0-9]'` ]\n+  fi\n+\n","filename":"make\/autoconf\/jdk-version.m4","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -460,0 +460,2 @@\n+UBSAN_CFLAGS:=@UBSAN_CFLAGS@\n+UBSAN_LDFLAGS:=@UBSAN_LDFLAGS@\n","filename":"make\/autoconf\/spec.gmk.in","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,5 @@\n+  ifeq ($(UBSAN_ENABLED), true)\n+    ADLC_CFLAGS += $(UBSAN_CFLAGS)\n+    ADLC_LDFLAGS += $(UBSAN_LDFLAGS)\n+  endif\n+\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,3 +88,0 @@\n-  bool in_native = (decorators & IN_NATIVE) != 0;\n-  assert(!in_native || (unsafe && !access.is_oop()), \"not supported yet\");\n-\n@@ -147,2 +144,0 @@\n-  bool in_native = (decorators & IN_NATIVE) != 0;\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -421,0 +421,2 @@\n+  assert(result != nullptr, \"invariant\");\n+  assert(result->get_oop() == nullptr, \"result not initialized\");\n@@ -435,0 +437,1 @@\n+  result->set_oop(nullptr); \/\/ Initialize result in case klass initialize throws.\n@@ -440,1 +443,1 @@\n-static void write_field(JfrJavaArguments* args, JavaValue* result, TRAPS) {\n+static void write_field(JfrJavaArguments* args, TRAPS) {\n@@ -442,1 +445,0 @@\n-  assert(result != NULL, \"invariant\");\n@@ -460,1 +462,1 @@\n-  write_field(args, args->result(), THREAD);\n+  write_field(args, THREAD);\n@@ -468,1 +470,1 @@\n-void JfrJavaSupport::get_field(JfrJavaArguments* args, Thread* thread) {\n+static void get_field_ref(JfrJavaArguments* args, bool local_ref, TRAPS) {\n@@ -470,7 +472,1 @@\n-  read_field(args, args->result(), thread);\n-}\n-\n-void JfrJavaSupport::get_field_local_ref(JfrJavaArguments* args, TRAPS) {\n-  assert(args != NULL, \"invariant\");\n-  DEBUG_ONLY(check_java_thread_in_vm(THREAD));\n-\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));\n@@ -480,1 +476,0 @@\n-\n@@ -483,3 +478,7 @@\n-\n-  if (obj != NULL) {\n-    result->set_jobject(local_jni_handle(obj, THREAD));\n+  if (obj == nullptr) {\n+    return;\n+  }\n+  if (local_ref) {\n+    result->set_jobject(JfrJavaSupport::local_jni_handle(obj, THREAD));\n+  } else {\n+    result->set_jobject(JfrJavaSupport::global_jni_handle(obj, THREAD));\n@@ -489,3 +488,3 @@\n-void JfrJavaSupport::get_field_global_ref(JfrJavaArguments* args, TRAPS) {\n-  assert(args != NULL, \"invariant\");\n-  DEBUG_ONLY(check_java_thread_in_vm(THREAD));\n+void JfrJavaSupport::get_field_local_ref(JfrJavaArguments* args, TRAPS) {\n+  get_field_ref(args, true \/* local_ref *\/, THREAD);\n+}\n@@ -493,8 +492,2 @@\n-  JavaValue* const result = args->result();\n-  assert(result != NULL, \"invariant\");\n-  assert(result->get_type() == T_OBJECT, \"invariant\");\n-  read_field(args, result, CHECK);\n-  const oop obj = result->get_oop();\n-  if (obj != NULL) {\n-    result->set_jobject(global_jni_handle(obj, THREAD));\n-  }\n+void JfrJavaSupport::get_field_global_ref(JfrJavaArguments* args, TRAPS) {\n+  get_field_ref(args, false \/* local_ref *\/, THREAD);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-  static void get_field(JfrJavaArguments* args, Thread* thread);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"logging\/log.hpp\"\n@@ -59,1 +60,6 @@\n-  JfrJavaSupport::notify_all(get_chunk_monitor(thread), thread);\n+  jobject monitor = get_chunk_monitor(thread);\n+  if (monitor == nullptr) {\n+    log_error(jfr, system)(\"Unable to create chunk rotation monitor\");\n+    return;\n+  }\n+  JfrJavaSupport::notify_all(monitor, thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3353,3 +3353,1 @@\n-  \/\/ Stores of oops to native memory not supported yet by BarrierSetC2::store_at_resolved\n-  \/\/ access_store_at(NULL, thread_obj_handle, adr_type, arr, _gvn.type(arr), T_OBJECT, IN_NATIVE | MO_UNORDERED);\n-  store_to_memory(control(), thread_obj_handle, arr, T_OBJECT, adr_type, MemNode::unordered);\n+  access_store_at(NULL, thread_obj_handle, adr_type, arr, _gvn.type(arr), T_OBJECT, IN_NATIVE | MO_UNORDERED);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3581,1 +3581,1 @@\n-    const TypeOopPtr *etype = TypeOopPtr::make_from_klass_common(eklass, try_for_exact, false, interface_handling);\n+    const TypeOopPtr *etype = TypeOopPtr::make_from_klass_common(eklass, false, try_for_exact, interface_handling);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1007,0 +1007,2 @@\n+     * The minimal set of system dependent environment variables\n+     * may override the values provided in the environment.\n@@ -1184,0 +1186,2 @@\n+     * The minimal set of system dependent environment variables\n+     * may override the values provided in the environment.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -572,0 +572,2 @@\n+     * The minimal set of system dependent environment variables\n+     * may override the values provided in the environment.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Runtime.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,2 +306,2 @@\n-         * parameter directly following the target address parameter. This memory segment must be a\n-         * native segment into which the captured state is written.\n+         * parameter directly following the target address, and optional {@link SegmentAllocator} parameters.\n+         * This memory segment must be a native segment into which the captured state is written.\n@@ -326,0 +326,4 @@\n+         * For this purpose, a downcall method handle linked with the {@link #captureCallState(String[])}\n+         * option will feature an additional {@link MemorySegment} parameter directly\n+         * following the target address, and optional {@link SegmentAllocator} parameters.\n+         * This parameter represents the native segment into which the captured state is written.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -4599,4 +4599,3 @@\n-            if (width != -1 && Flags.contains(f, Flags.ZERO_PAD)) {\n-                for (int k = sb.length(); k < width; k++) {\n-                    sb.insert(begin, zero);\n-                }\n+            if (width > sb.length() && Flags.contains(f, Flags.ZERO_PAD)) {\n+                String zeros = String.valueOf(zero).repeat(width - sb.length());\n+                sb.insert(begin, zeros);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import java.util.Objects;\n@@ -68,1 +69,1 @@\n-    private static final boolean exclusiveBind;\n+    private static final boolean EXCLUSIVE_BIND;\n@@ -71,1 +72,1 @@\n-    private static final boolean fastLoopback;\n+    private static final boolean FAST_LOOPBACK;\n@@ -75,4 +76,2 @@\n-    private static volatile boolean checkedIPv6;\n-    private static volatile boolean isIPv6Available;\n-    private static volatile boolean checkedReusePort;\n-    private static volatile boolean isReusePortAvailable;\n+    private static final boolean IPV6_AVAILABLE;\n+    private static final boolean SO_REUSEPORT_AVAILABLE;\n@@ -84,5 +83,1 @@\n-        if (!checkedIPv6) {\n-            isIPv6Available = isIPv6Available0();\n-            checkedIPv6 = true;\n-        }\n-        return isIPv6Available;\n+        return IPV6_AVAILABLE;\n@@ -95,5 +90,1 @@\n-        if (!checkedReusePort) {\n-            isReusePortAvailable = isReusePortAvailable0();\n-            checkedReusePort = true;\n-        }\n-        return isReusePortAvailable;\n+        return SO_REUSEPORT_AVAILABLE;\n@@ -106,1 +97,1 @@\n-        return exclusiveBind;\n+        return EXCLUSIVE_BIND;\n@@ -143,3 +134,2 @@\n-        if (sa == null)\n-            throw new NullPointerException();\n-        if (!(sa instanceof InetSocketAddress))\n+        Objects.requireNonNull(sa);\n+        if (!(sa instanceof InetSocketAddress isa))\n@@ -147,1 +137,0 @@\n-        InetSocketAddress isa = (InetSocketAddress)sa;\n@@ -152,1 +141,1 @@\n-            throw new IllegalArgumentException(\"Invalid address type\");\n+            throw new IllegalArgumentException(\"Invalid address type: \" + addr.getClass().getName());\n@@ -167,1 +156,1 @@\n-        if (!(sa instanceof InetSocketAddress))\n+        if (!(sa instanceof InetSocketAddress isa))\n@@ -169,1 +158,1 @@\n-        return (InetSocketAddress)sa;\n+        return isa;\n@@ -175,2 +164,2 @@\n-        if (x instanceof SocketException)\n-            throw (SocketException)x;\n+        if (x instanceof SocketException se)\n+            throw se;\n@@ -179,1 +168,1 @@\n-            nx = new SocketException(\"Socket is closed\");\n+            nx = newSocketException(\"Socket is closed\");\n@@ -181,1 +170,1 @@\n-            nx = new SocketException(\"Socket is not connected\");\n+            nx = newSocketException(\"Socket is not connected\");\n@@ -183,1 +172,1 @@\n-            nx = new SocketException(\"Already bound\");\n+            nx = newSocketException(\"Already bound\");\n@@ -185,1 +174,1 @@\n-            nx = new SocketException(\"Socket is not bound yet\");\n+            nx = newSocketException(\"Socket is not bound yet\");\n@@ -187,1 +176,1 @@\n-            nx = new SocketException(\"Unsupported address type\");\n+            nx = newSocketException(\"Unsupported address type\");\n@@ -189,1 +178,1 @@\n-            nx = new SocketException(\"Unresolved address\");\n+            nx = newSocketException(\"Unresolved address\");\n@@ -191,1 +180,1 @@\n-            nx = new SocketException(x.getMessage());\n+            nx = newSocketException(x.getMessage());\n@@ -196,4 +185,4 @@\n-        if (nx instanceof SocketException)\n-            throw (SocketException)nx;\n-        else if (nx instanceof RuntimeException)\n-            throw (RuntimeException)nx;\n+        if (nx instanceof SocketException se)\n+            throw se;\n+        else if (nx instanceof RuntimeException re)\n+            throw re;\n@@ -204,0 +193,4 @@\n+    private static SocketException newSocketException(String msg) {\n+        return new SocketException(msg);\n+    }\n+\n@@ -208,2 +201,2 @@\n-        if (x instanceof IOException)\n-            throw (IOException)x;\n+        if (x instanceof IOException ioe)\n+            throw ioe;\n@@ -258,4 +251,4 @@\n-    private static final InetAddress anyLocalInet4Address;\n-    private static final InetAddress anyLocalInet6Address;\n-    private static final InetAddress inet4LoopbackAddress;\n-    private static final InetAddress inet6LoopbackAddress;\n+    private static final InetAddress ANY_LOCAL_INET4ADDRESS;\n+    private static final InetAddress ANY_LOCAL_INET6ADDRESS;\n+    private static final InetAddress INET4_LOOPBACK_ADDRESS;\n+    private static final InetAddress INET6_LOOPBACK_ADDRESS;\n@@ -264,3 +257,3 @@\n-            anyLocalInet4Address = inet4FromInt(0);\n-            assert anyLocalInet4Address instanceof Inet4Address\n-                    && anyLocalInet4Address.isAnyLocalAddress();\n+            ANY_LOCAL_INET4ADDRESS = inet4FromInt(0);\n+            assert ANY_LOCAL_INET4ADDRESS instanceof Inet4Address\n+                    && ANY_LOCAL_INET4ADDRESS.isAnyLocalAddress();\n@@ -268,3 +261,3 @@\n-            anyLocalInet6Address = InetAddress.getByAddress(new byte[16]);\n-            assert anyLocalInet6Address instanceof Inet6Address\n-                    && anyLocalInet6Address.isAnyLocalAddress();\n+            ANY_LOCAL_INET6ADDRESS = InetAddress.getByAddress(new byte[16]);\n+            assert ANY_LOCAL_INET6ADDRESS instanceof Inet6Address\n+                    && ANY_LOCAL_INET6ADDRESS.isAnyLocalAddress();\n@@ -272,3 +265,3 @@\n-            inet4LoopbackAddress = inet4FromInt(0x7f000001);\n-            assert inet4LoopbackAddress instanceof Inet4Address\n-                    && inet4LoopbackAddress.isLoopbackAddress();\n+            INET4_LOOPBACK_ADDRESS = inet4FromInt(0x7f000001);\n+            assert INET4_LOOPBACK_ADDRESS instanceof Inet4Address\n+                    && INET4_LOOPBACK_ADDRESS.isLoopbackAddress();\n@@ -278,3 +271,3 @@\n-            inet6LoopbackAddress = InetAddress.getByAddress(bytes);\n-            assert inet6LoopbackAddress instanceof Inet6Address\n-                    && inet6LoopbackAddress.isLoopbackAddress();\n+            INET6_LOOPBACK_ADDRESS = InetAddress.getByAddress(bytes);\n+            assert INET6_LOOPBACK_ADDRESS instanceof Inet6Address\n+                    && INET6_LOOPBACK_ADDRESS.isLoopbackAddress();\n@@ -287,1 +280,1 @@\n-        return inet4LoopbackAddress;\n+        return INET4_LOOPBACK_ADDRESS;\n@@ -291,1 +284,1 @@\n-        return inet6LoopbackAddress;\n+        return INET6_LOOPBACK_ADDRESS;\n@@ -301,1 +294,1 @@\n-            return anyLocalInet4Address;\n+            return ANY_LOCAL_INET4ADDRESS;\n@@ -303,1 +296,1 @@\n-            return anyLocalInet6Address;\n+            return ANY_LOCAL_INET6ADDRESS;\n@@ -320,2 +313,2 @@\n-                    if (addr instanceof Inet4Address) {\n-                        return (Inet4Address)addr;\n+                    if (addr instanceof Inet4Address inet4Address) {\n+                        return inet4Address;\n@@ -341,1 +334,1 @@\n-        throw new AssertionError(\"Should not reach here\");\n+        throw shouldNotReachHere();\n@@ -357,1 +350,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -382,1 +375,1 @@\n-        throw new AssertionError(\"Should not reach here\");\n+        throw shouldNotReachHere();\n@@ -387,1 +380,1 @@\n-    static final ExtendedSocketOptions extendedOptions =\n+    static final ExtendedSocketOptions EXTENDED_OPTIONS =\n@@ -407,2 +400,2 @@\n-        if (extendedOptions.isOptionSupported(name)) {\n-            extendedOptions.setOption(fd, name, value, isIPv6);\n+        if (EXTENDED_OPTIONS.isOptionSupported(name)) {\n+            EXTENDED_OPTIONS.setOption(fd, name, value, isIPv6);\n@@ -413,1 +406,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -469,1 +462,1 @@\n-        if (extendedOptions.isOptionSupported(name)) {\n+        if (EXTENDED_OPTIONS.isOptionSupported(name)) {\n@@ -471,1 +464,1 @@\n-            return extendedOptions.getOption(fd, name, isIPv6);\n+            return EXTENDED_OPTIONS.getOption(fd, name, isIPv6);\n@@ -476,1 +469,1 @@\n-            throw new AssertionError(\"Should not reach here\");\n+            throw shouldNotReachHere();\n@@ -496,1 +489,1 @@\n-        return loopbackProp.isEmpty() ? true : Boolean.parseBoolean(loopbackProp);\n+        return loopbackProp.isEmpty() || Boolean.parseBoolean(loopbackProp);\n@@ -525,1 +518,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, false, fastLoopback));\n+        return IOUtil.newFD(socket0(preferIPv6, stream, false, FAST_LOOPBACK));\n@@ -535,1 +528,1 @@\n-        return IOUtil.newFD(socket0(preferIPv6, stream, true, fastLoopback));\n+        return IOUtil.newFD(socket0(preferIPv6, stream, true, FAST_LOOPBACK));\n@@ -538,1 +531,1 @@\n-    \/\/ Due to oddities SO_REUSEADDR on windows reuse is ignored\n+    \/\/ Due to oddities SO_REUSEADDR on Windows reuse is ignored\n@@ -556,1 +549,1 @@\n-        bind0(fd, preferIPv6, exclusiveBind, addr, port);\n+        bind0(fd, preferIPv6, EXCLUSIVE_BIND, addr, port);\n@@ -658,1 +651,1 @@\n-     * @apiNote This method is public to allow it be used by code in jdk.sctp.\n+     * @apiNote This method is public to allow it to be used by code in jdk.sctp.\n@@ -824,4 +817,1 @@\n-                exclusiveBind = exclBindProp.isEmpty() ?\n-                        true : Boolean.parseBoolean(exclBindProp);\n-            } else if (availLevel == 1) {\n-                exclusiveBind = true;\n+                EXCLUSIVE_BIND = exclBindProp.isEmpty() || Boolean.parseBoolean(exclBindProp);\n@@ -829,1 +819,1 @@\n-                exclusiveBind = false;\n+                EXCLUSIVE_BIND = (availLevel == 1);\n@@ -832,1 +822,1 @@\n-            exclusiveBind = false;\n+            EXCLUSIVE_BIND = false;\n@@ -835,1 +825,8 @@\n-        fastLoopback = isFastTcpLoopbackRequested();\n+        FAST_LOOPBACK = isFastTcpLoopbackRequested();\n+\n+        IPV6_AVAILABLE = isIPv6Available0();\n+        SO_REUSEPORT_AVAILABLE = isReusePortAvailable0();\n+    }\n+\n+    private static AssertionError shouldNotReachHere() {\n+        return new AssertionError(\"Should not reach here\");\n@@ -837,0 +834,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Net.java","additions":83,"deletions":85,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -423,1 +423,1 @@\n-        jplis_assert(success);\n+        jplis_assert_msg(success, \"createInstrumentationImpl failed\");\n@@ -430,1 +430,1 @@\n-            jplis_assert(success);\n+            jplis_assert_msg(success, \"setLivePhaseEventHandlers failed\");\n@@ -442,0 +442,1 @@\n+            jplis_assert_msg(success, \"startJavaAgent failed\");\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/InvocationAdapter.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,0 +451,1 @@\n+    jplis_assert_msg(success, \"commandStringIntoJavaStrings failed\");\n@@ -458,0 +459,1 @@\n+        jplis_assert_msg(success, \"invokeJavaAgentMainMethod failed\");\n@@ -617,0 +619,1 @@\n+            jplis_assert_msg(!errorOutstanding, \"Outstanding error when calling method in invokeJavaAgentMainMethod\");\n","filename":"src\/java.instrument\/share\/native\/libinstrument\/JPLISAgent.c","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-\n-jdk\/internal\/vm\/Continuation\/Fuzz.java#default 8298058 generic-x64\n","filename":"test\/jdk\/ProblemList-zgc.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,313 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4906370\n+ * @summary Tests to excercise padding on int and double values,\n+ *      with various flag combinations.\n+ * @run junit Padding\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class Padding {\n+\n+    static Arguments[] padding() {\n+        return new Arguments[] {\n+                \/* blank padding, right adjusted, optional plus sign *\/\n+                arguments(\"12\", \"%1d\", 12),\n+                arguments(\"12\", \"%2d\", 12),\n+                arguments(\" 12\", \"%3d\", 12),\n+                arguments(\"  12\", \"%4d\", 12),\n+                arguments(\"   12\", \"%5d\", 12),\n+                arguments(\"        12\", \"%10d\", 12),\n+\n+                arguments(\"-12\", \"%1d\", -12),\n+                arguments(\"-12\", \"%2d\", -12),\n+                arguments(\"-12\", \"%3d\", -12),\n+                arguments(\" -12\", \"%4d\", -12),\n+                arguments(\"  -12\", \"%5d\", -12),\n+                arguments(\"       -12\", \"%10d\", -12),\n+\n+                arguments(\"1.2\", \"%1.1f\", 1.2),\n+                arguments(\"1.2\", \"%2.1f\", 1.2),\n+                arguments(\"1.2\", \"%3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%4.1f\", 1.2),\n+                arguments(\"  1.2\", \"%5.1f\", 1.2),\n+                arguments(\"       1.2\", \"%10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+1d\", 12),\n+                arguments(\"+12\", \"%+2d\", 12),\n+                arguments(\"+12\", \"%+3d\", 12),\n+                arguments(\" +12\", \"%+4d\", 12),\n+                arguments(\"  +12\", \"%+5d\", 12),\n+                arguments(\"       +12\", \"%+10d\", 12),\n+\n+                arguments(\"-12\", \"%+1d\", -12),\n+                arguments(\"-12\", \"%+2d\", -12),\n+                arguments(\"-12\", \"%+3d\", -12),\n+                arguments(\" -12\", \"%+4d\", -12),\n+                arguments(\"  -12\", \"%+5d\", -12),\n+                arguments(\"       -12\", \"%+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+4.1f\", 1.2),\n+                arguments(\" +1.2\", \"%+5.1f\", 1.2),\n+                arguments(\"      +1.2\", \"%+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%+5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%+10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 1d\", 12),\n+                arguments(\" 12\", \"% 2d\", 12),\n+                arguments(\" 12\", \"% 3d\", 12),\n+                arguments(\"  12\", \"% 4d\", 12),\n+                arguments(\"   12\", \"% 5d\", 12),\n+                arguments(\"        12\", \"% 10d\", 12),\n+\n+                arguments(\"-12\", \"% 1d\", -12),\n+                arguments(\"-12\", \"% 2d\", -12),\n+                arguments(\"-12\", \"% 3d\", -12),\n+                arguments(\" -12\", \"% 4d\", -12),\n+                arguments(\"  -12\", \"% 5d\", -12),\n+                arguments(\"       -12\", \"% 10d\", -12),\n+\n+                arguments(\" 1.2\", \"% 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 4.1f\", 1.2),\n+                arguments(\"  1.2\", \"% 5.1f\", 1.2),\n+                arguments(\"       1.2\", \"% 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 4.1f\", -1.2),\n+                arguments(\" -1.2\", \"% 5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"% 10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, optional sign *\/\n+                arguments(\"12\", \"%-1d\", 12),\n+                arguments(\"12\", \"%-2d\", 12),\n+                arguments(\"12 \", \"%-3d\", 12),\n+                arguments(\"12  \", \"%-4d\", 12),\n+                arguments(\"12   \", \"%-5d\", 12),\n+                arguments(\"12        \", \"%-10d\", 12),\n+\n+                arguments(\"-12\", \"%-1d\", -12),\n+                arguments(\"-12\", \"%-2d\", -12),\n+                arguments(\"-12\", \"%-3d\", -12),\n+                arguments(\"-12 \", \"%-4d\", -12),\n+                arguments(\"-12  \", \"%-5d\", -12),\n+                arguments(\"-12       \", \"%-10d\", -12),\n+\n+                arguments(\"1.2\", \"%-1.1f\", 1.2),\n+                arguments(\"1.2\", \"%-2.1f\", 1.2),\n+                arguments(\"1.2\", \"%-3.1f\", 1.2),\n+                arguments(\"1.2 \", \"%-4.1f\", 1.2),\n+                arguments(\"1.2  \", \"%-5.1f\", 1.2),\n+                arguments(\"1.2       \", \"%-10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%-+1d\", 12),\n+                arguments(\"+12\", \"%-+2d\", 12),\n+                arguments(\"+12\", \"%-+3d\", 12),\n+                arguments(\"+12 \", \"%-+4d\", 12),\n+                arguments(\"+12  \", \"%-+5d\", 12),\n+                arguments(\"+12       \", \"%-+10d\", 12),\n+\n+                arguments(\"-12\", \"%-+1d\", -12),\n+                arguments(\"-12\", \"%-+2d\", -12),\n+                arguments(\"-12\", \"%-+3d\", -12),\n+                arguments(\"-12 \", \"%-+4d\", -12),\n+                arguments(\"-12  \", \"%-+5d\", -12),\n+                arguments(\"-12       \", \"%-+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%-+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+4.1f\", 1.2),\n+                arguments(\"+1.2 \", \"%-+5.1f\", 1.2),\n+                arguments(\"+1.2      \", \"%-+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-+5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-+10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"%- 1d\", 12),\n+                arguments(\" 12\", \"%- 2d\", 12),\n+                arguments(\" 12\", \"%- 3d\", 12),\n+                arguments(\" 12 \", \"%- 4d\", 12),\n+                arguments(\" 12  \", \"%- 5d\", 12),\n+                arguments(\" 12       \", \"%- 10d\", 12),\n+\n+                arguments(\"-12\", \"%- 1d\", -12),\n+                arguments(\"-12\", \"%- 2d\", -12),\n+                arguments(\"-12\", \"%- 3d\", -12),\n+                arguments(\"-12 \", \"%- 4d\", -12),\n+                arguments(\"-12  \", \"%- 5d\", -12),\n+                arguments(\"-12       \", \"%- 10d\", -12),\n+\n+                arguments(\" 1.2\", \"%- 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 4.1f\", 1.2),\n+                arguments(\" 1.2 \", \"%- 5.1f\", 1.2),\n+                arguments(\" 1.2      \", \"%- 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%- 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%- 5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%- 10.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, optional sign *\/\n+                arguments(\"12\", \"%01d\", 12),\n+                arguments(\"12\", \"%02d\", 12),\n+                arguments(\"012\", \"%03d\", 12),\n+                arguments(\"0012\", \"%04d\", 12),\n+                arguments(\"00012\", \"%05d\", 12),\n+                arguments(\"0000000012\", \"%010d\", 12),\n+\n+                arguments(\"-12\", \"%01d\", -12),\n+                arguments(\"-12\", \"%02d\", -12),\n+                arguments(\"-12\", \"%03d\", -12),\n+                arguments(\"-012\", \"%04d\", -12),\n+                arguments(\"-0012\", \"%05d\", -12),\n+                arguments(\"-000000012\", \"%010d\", -12),\n+\n+                arguments(\"1.2\", \"%01.1f\", 1.2),\n+                arguments(\"1.2\", \"%02.1f\", 1.2),\n+                arguments(\"1.2\", \"%03.1f\", 1.2),\n+                arguments(\"01.2\", \"%04.1f\", 1.2),\n+                arguments(\"001.2\", \"%05.1f\", 1.2),\n+                arguments(\"00000001.2\", \"%010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+01d\", 12),\n+                arguments(\"+12\", \"%+02d\", 12),\n+                arguments(\"+12\", \"%+03d\", 12),\n+                arguments(\"+012\", \"%+04d\", 12),\n+                arguments(\"+0012\", \"%+05d\", 12),\n+                arguments(\"+000000012\", \"%+010d\", 12),\n+\n+                arguments(\"-12\", \"%+01d\", -12),\n+                arguments(\"-12\", \"%+02d\", -12),\n+                arguments(\"-12\", \"%+03d\", -12),\n+                arguments(\"-012\", \"%+04d\", -12),\n+                arguments(\"-0012\", \"%+05d\", -12),\n+                arguments(\"-000000012\", \"%+010d\", -12),\n+\n+                arguments(\"+1.2\", \"%+01.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+02.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+03.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+04.1f\", 1.2),\n+                arguments(\"+01.2\", \"%+05.1f\", 1.2),\n+                arguments(\"+0000001.2\", \"%+010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%+05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%+010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 01d\", 12),\n+                arguments(\" 12\", \"% 02d\", 12),\n+                arguments(\" 12\", \"% 03d\", 12),\n+                arguments(\" 012\", \"% 04d\", 12),\n+                arguments(\" 0012\", \"% 05d\", 12),\n+                arguments(\" 000000012\", \"% 010d\", 12),\n+\n+                arguments(\"-12\", \"% 01d\", -12),\n+                arguments(\"-12\", \"% 02d\", -12),\n+                arguments(\"-12\", \"% 03d\", -12),\n+                arguments(\"-012\", \"% 04d\", -12),\n+                arguments(\"-0012\", \"% 05d\", -12),\n+                arguments(\"-000000012\", \"% 010d\", -12),\n+\n+                arguments(\" 1.2\", \"% 01.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 02.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 03.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 04.1f\", 1.2),\n+                arguments(\" 01.2\", \"% 05.1f\", 1.2),\n+                arguments(\" 0000001.2\", \"% 010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 01.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 02.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 03.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 04.1f\", -1.2),\n+                arguments(\"-01.2\", \"% 05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"% 010.1f\", -1.2),\n+\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void padding(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(format, value));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Formatter\/Padding.java","additions":313,"deletions":0,"binary":false,"changes":313,"status":"added"}]}