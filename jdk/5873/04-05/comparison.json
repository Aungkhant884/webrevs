{"files":[{"patch":"@@ -5379,1 +5379,1 @@\n-instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, rFlagsReg cr) %{\n+instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pReg ptmp, rFlagsReg cr) %{\n@@ -5383,1 +5383,1 @@\n-  effect(TEMP pgtmp, KILL cr);\n+  effect(TEMP ptmp, KILL cr);\n@@ -5389,2 +5389,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size, Matcher::vector_length(this, $src));\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($src$$reg));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), size, Matcher::vector_length(this, $src));\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp$$reg), as_PRegister($src$$reg));\n@@ -5395,1 +5395,1 @@\n-instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pReg ptmp1, pReg ptmp2, rFlagsReg cr) %{\n@@ -5399,1 +5399,1 @@\n-  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  effect(TEMP ptmp1, TEMP ptmp2, KILL cr);\n@@ -5405,1 +5405,1 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size,\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp1$$reg), size,\n@@ -5407,2 +5407,2 @@\n-    __ sve_brkb(as_PRegister($ptmp$$reg), as_PRegister($pgtmp$$reg), as_PRegister($src$$reg), false);\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg));\n+    __ sve_brkb(as_PRegister($ptmp2$$reg), as_PRegister($ptmp1$$reg), as_PRegister($src$$reg), false);\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp1$$reg), as_PRegister($ptmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3029,1 +3029,1 @@\n-instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, rFlagsReg cr) %{\n+instruct vmask_truecount_partial(iRegINoSp dst, pReg src, pReg ptmp, rFlagsReg cr) %{\n@@ -3033,1 +3033,1 @@\n-  effect(TEMP pgtmp, KILL cr);\n+  effect(TEMP ptmp, KILL cr);\n@@ -3039,2 +3039,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size, Matcher::vector_length(this, $src));\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($src$$reg));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), size, Matcher::vector_length(this, $src));\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp$$reg), as_PRegister($src$$reg));\n@@ -3045,1 +3045,1 @@\n-instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pRegGov pgtmp, pReg ptmp, rFlagsReg cr) %{\n+instruct vmask_firsttrue_partial(iRegINoSp dst, pReg src, pReg ptmp1, pReg ptmp2, rFlagsReg cr) %{\n@@ -3049,1 +3049,1 @@\n-  effect(TEMP pgtmp, TEMP ptmp, KILL cr);\n+  effect(TEMP ptmp1, TEMP ptmp2, KILL cr);\n@@ -3055,1 +3055,1 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), size,\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp1$$reg), size,\n@@ -3057,2 +3057,2 @@\n-    __ sve_brkb(as_PRegister($ptmp$$reg), as_PRegister($pgtmp$$reg), as_PRegister($src$$reg), false);\n-    __ sve_cntp($dst$$Register, size, as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg));\n+    __ sve_brkb(as_PRegister($ptmp2$$reg), as_PRegister($ptmp1$$reg), as_PRegister($src$$reg), false);\n+    __ sve_cntp($dst$$Register, size, as_PRegister($ptmp1$$reg), as_PRegister($ptmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1981,1 +1981,1 @@\n-\/\/ Return the number of dwords poped\n+\/\/ Return the number of dwords popped\n@@ -2056,2 +2056,1 @@\n-  const int num_of_regs = PRegisterImpl::number_of_saved_registers;\n-  unsigned char regs[num_of_regs];\n+  unsigned char regs[PRegisterImpl::number_of_saved_registers];\n@@ -2059,1 +2058,1 @@\n-  for (int reg = 0; reg < num_of_regs; reg++) {\n+  for (int reg = 0; reg < PRegisterImpl::number_of_saved_registers; reg++) {\n@@ -2078,1 +2077,1 @@\n-\/\/ Return the number of dwords poped\n+\/\/ Return the number of dwords popped\n@@ -2094,2 +2093,1 @@\n-  const int num_of_regs = PRegisterImpl::number_of_saved_registers;\n-  unsigned char regs[num_of_regs];\n+  unsigned char regs[PRegisterImpl::number_of_saved_registers];\n@@ -2097,1 +2095,1 @@\n-  for (int reg = 0; reg < num_of_regs; reg++) {\n+  for (int reg = 0; reg < PRegisterImpl::number_of_saved_registers; reg++) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -246,3 +246,4 @@\n-    \/\/ AArch64 has 8 governing predicate registers, but p7 is used as an\n-    \/\/ all-1s register so the predicates to save are from p0 to p6 if we\n-    \/\/ don't have non-governing predicate registers support.\n+    \/\/ p0-p7 are governing predicates for load\/store and arithmetic, but p7 is\n+    \/\/ preserved as an all-true predicate in OpenJDK. And since we don't support\n+    \/\/ non-governing predicate registers allocation for non-temp register, the\n+    \/\/ predicate registers to be saved are p0-p6.\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-  assert(is_Register(), \"must be\");\n+  assert( is_Register(), \"must be\");\n+  \/\/ Yuk\n@@ -47,1 +48,2 @@\n-  assert(is_FloatRegister() && is_even(value()), \"must be\");\n+  assert( is_FloatRegister() && is_even(value()), \"must be\" );\n+  \/\/ Yuk\n@@ -53,1 +55,1 @@\n-  assert(is_PRegister(), \"must be\");\n+  assert( is_PRegister(), \"must be\" );\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}