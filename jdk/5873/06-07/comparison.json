{"files":[{"patch":"@@ -4553,1 +4553,1 @@\n-instruct vcvtFtoX_extend(vReg dst, vReg src)\n+instruct vcvtFtoI(vReg dst, vReg src)\n@@ -4556,2 +4556,1 @@\n-            (n->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n-             n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_INT));\n@@ -4560,1 +4559,1 @@\n-  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I\/L vector\" %}\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I vector\" %}\n@@ -4562,1 +4561,0 @@\n-    BasicType to_bt = Matcher::vector_element_basic_type(this);\n@@ -4564,3 +4562,14 @@\n-    if (to_bt == T_LONG) {\n-      __ sve_vector_extend(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($dst$$reg), __ S);\n-    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoL(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 &&\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(SVE_COST * 2);\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to L vector\" %}\n+  ins_encode %{\n+    __ sve_sunpklo(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($src$$reg));\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($dst$$reg), __ S);\n@@ -4598,1 +4607,1 @@\n-    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($src$$reg), __ D);\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ D);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2304,1 +2304,1 @@\n-instruct vcvtFtoX_extend(vReg dst, vReg src)\n+instruct vcvtFtoI(vReg dst, vReg src)\n@@ -2307,2 +2307,1 @@\n-            (n->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n-             n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_INT));\n@@ -2311,1 +2310,1 @@\n-  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I\/L vector\" %}\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to I vector\" %}\n@@ -2313,1 +2312,0 @@\n-    BasicType to_bt = Matcher::vector_element_basic_type(this);\n@@ -2315,3 +2313,14 @@\n-    if (to_bt == T_LONG) {\n-      __ sve_vector_extend(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($dst$$reg), __ S);\n-    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvtFtoL(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 &&\n+            (n->bottom_type()->is_vect()->element_basic_type() == T_LONG));\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(SVE_COST * 2);\n+  format %{ \"sve_vectorcast_f2x  $dst, $src\\t# convert F to L vector\" %}\n+  ins_encode %{\n+    __ sve_sunpklo(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($src$$reg));\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($dst$$reg), __ S);\n@@ -2349,1 +2358,1 @@\n-    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ D, ptrue, as_FloatRegister($src$$reg), __ D);\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ D);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"}]}