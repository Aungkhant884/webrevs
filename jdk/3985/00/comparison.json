{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266925\n+ * @summary hidden class members can't be statically invocable\n+ * @modules java.base\/jdk.internal.misc java.base\/jdk.internal.org.objectweb.asm\n+ * @build java.base\/*\n+ * @run testng StaticInvocableTest\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.LookupHelper;\n+import jdk.internal.org.objectweb.asm.*;\n+import org.testng.annotations.Test;\n+\n+import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+\n+public class StaticInvocableTest {\n+    public static void main(String[] args) throws Throwable {\n+        StaticInvocableTest test = new StaticInvocableTest();\n+        test.testJavaLang();\n+        test.testJavaUtil();\n+        test.testJdkInternalMisc();\n+        test.testJavaLangInvoke();\n+        test.testProhibitedJavaPkg();\n+        System.out.println(\"TEST PASSED\");\n+    }\n+\n+    \/\/ Test hidden classes from different packages\n+    \/\/ (see j.l.i.InvokerBytecodeGenerator::isStaticallyInvocable).\n+    @Test public void testJavaLang()        throws Throwable { test(\"java\/lang\");         }\n+    @Test public void testJavaUtil()        throws Throwable { test(\"java\/util\");         }\n+    @Test public void testJdkInternalMisc() throws Throwable { test(\"jdk\/internal\/misc\"); }\n+    @Test public void testJavaLangInvoke()  throws Throwable { test(\"java\/lang\/invoke\");  }\n+    @Test public void testProhibitedJavaPkg() throws Throwable {\n+       try {\n+           test(\"java\/prohibited\");\n+       } catch (IllegalArgumentException e) {\n+           return;\n+       }\n+       throw new RuntimeException(\"Expected SecurityException\");\n+     }\n+\n+    private static void test(String pkg) throws Throwable {\n+        byte[] bytes = dumpClass(pkg);\n+        Lookup lookup;\n+        if (pkg.equals(\"java\/prohibited\")) {\n+            StaticInvocableTest sampleclass = new StaticInvocableTest();\n+            lookup = LookupHelper.newLookup(sampleclass.getClass());\n+        } else if (pkg.equals(\"java\/lang\")) {\n+            lookup = LookupHelper.newLookup(Object.class);\n+        } else if (pkg.equals(\"java\/util\")) {\n+            lookup = LookupHelper.newLookup(java.util.ArrayList.class);\n+        } else if (pkg.equals(\"jdk\/internal\/misc\")) {\n+            lookup = LookupHelper.newLookup(jdk.internal.misc.Signal.class);\n+        } else if (pkg.equals(\"java\/lang\/invoke\")) {\n+            lookup = LookupHelper.newLookup(java.lang.invoke.CallSite.class);\n+        } else {\n+            throw new RuntimeException(\"Unexpected pkg: \" + pkg);\n+        }\n+\n+        \/\/ Define hidden class\n+        Lookup l = lookup.defineHiddenClass(bytes, true);\n+\n+        MethodType t = MethodType.methodType(Object.class, int.class);\n+        MethodHandle target = l.findStatic(l.lookupClass(), \"get\", t);\n+\n+        \/\/ Wrap target into LF (convert) to get \"target\" referenced from LF\n+        MethodHandle wrappedMH = target.asType(MethodType.methodType(Object.class, Integer.class));\n+\n+        \/\/ Invoke enough times to provoke LF compilation to bytecode.\n+        for (int i = 0; i<100; i++) {\n+            Object r = wrappedMH.invokeExact((Integer)1);\n+        }\n+    }\n+\n+    \/*\n+     * Constructs bytecode for the following class:\n+     * public class pkg.MyClass {\n+     *     MyClass() {}\n+     *     public Object get(int i) { return null; }\n+     * }\n+     *\/\n+    public static byte[] dumpClass(String pkg) {\n+        ClassWriter cw = new ClassWriter(0);\n+        MethodVisitor mv;\n+\n+        cw.visit(52, ACC_SUPER | ACC_PUBLIC, pkg+\"\/MyClass\", null, \"java\/lang\/Object\", null);\n+        {\n+            mv = cw.visitMethod(0, \"<init>\", \"()V\", null, null);\n+            mv.visitCode();\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n+            mv.visitInsn(RETURN);\n+            mv.visitMaxs(1, 1);\n+            mv.visitEnd();\n+        }\n+        {\n+            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"get\", \"(I)Ljava\/lang\/Object;\", null, null);\n+            mv.visitCode();\n+            mv.visitInsn(ACONST_NULL);\n+            mv.visitInsn(ARETURN);\n+            mv.visitMaxs(1, 1);\n+            mv.visitEnd();\n+        }\n+        cw.visitEnd();\n+        return cw.toByteArray();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/StaticInvocableTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.invoke;\n+\n+import java.lang.invoke.MethodHandles.Lookup;\n+\n+public class LookupHelper {\n+     public static Lookup newLookup(Class<?> c) {\n+         return new Lookup(c);\n+     }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/java.base\/java\/lang\/invoke\/LookupHelper.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"}]}