{"files":[{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8266159\n+ * @summary Test to detect regression in pixel drawing.\n+ *          A small circle is drawn and boundary pixels are compared to expected pixels.\n+ *          Note : this test is specifically written for uiScale=1.0\n+ * @run main\/othervm -Dsun.java2d.uiScale=1.0 DrawOvalTest\n+ *\/\n+\n+import javax.imageio.ImageIO;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Transparency;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.VolatileImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class DrawOvalTest {\n+    public static void main(String[] args) throws IOException {\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                .getDefaultScreenDevice().getDefaultConfiguration();\n+        VolatileImage vi = gc.createCompatibleVolatileImage(10, 10, Transparency.TRANSLUCENT);\n+\n+        \/\/ Draw test rendering sequence\n+        render(vi.createGraphics());\n+\n+        BufferedImage snapshot = vi.getSnapshot();\n+\n+        \/\/ Pixel color sequence expected after test rendering is complete\n+        \/\/ Blue color = -16776961\n+        \/\/ Red color  = -65536\n+        int sequence[] = {\n+            -16776961,\n+            -16776961,\n+            -16776961,\n+            -65536,\n+            -65536,\n+            -65536,\n+            -65536,\n+            -16776961,\n+            -16776961,\n+            -16776961\n+        };\n+\n+        \/\/ Test the color of pixels at the image boundary\n+        for (int i = 0; i < snapshot.getWidth(); i++) {\n+\n+            \/\/ Test first row, last row, first column and last column\n+            if ( snapshot.getRGB(i, 0) != sequence[i] ||\n+                 snapshot.getRGB(i, 9) != sequence[i] ||\n+                 snapshot.getRGB(0, i) != sequence[i] ||\n+                 snapshot.getRGB(9, i) != sequence[i] ) {\n+                ImageIO.write(snapshot, \"png\", new File(\"DrawOvalTest_snapshot.png\"));\n+                throw new RuntimeException(\"Test failed.\");\n+            }\n+        }\n+    }\n+\n+    private static void render(Graphics2D g2) {\n+        g2.setColor(Color.BLUE);\n+        g2.fillRect(0, 0, 10, 10);\n+        g2.setColor(Color.RED);\n+        g2.drawOval(0, 0, 9, 9);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics\/DrawOvalTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}