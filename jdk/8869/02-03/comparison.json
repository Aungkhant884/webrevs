{"files":[{"patch":"@@ -326,1 +326,1 @@\n-  \/\/ Find the index of the first bit set scanning from r_index (inclusive) to\n+  \/\/ Find the index of the first bit set scanning from r_index (exclusive) to\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -236,1 +236,0 @@\n-  assert(sizeof(intptr_t) == sizeof(bm_word_t), \"must be for the high bit check\");\n@@ -249,2 +248,3 @@\n-  if (l_index <= r_index) {\n-    \/\/ Get the word containing r_index, and shift out high bits.\n+  if (l_index < r_index) {\n+    \/\/ Get the word containing r_index - 1 (r_index is exclusive), and shift out high bits.\n+    r_index--;\n@@ -253,0 +253,2 @@\n+\n+    STATIC_ASSERT(sizeof(intptr_t) == sizeof(bm_word_t));\n","filename":"src\/hotspot\/share\/utilities\/bitMap.inline.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  if (search_right >= right_bit) {\n+  if (search_right > right_bit) {\n@@ -104,1 +104,1 @@\n-  } else if (search_right >= left_bit) {\n+  } else if (search_right > left_bit) {\n@@ -115,0 +115,2 @@\n+#define PRINT_TESTCASE << \" search_left \" << search_left << \" search_right \" << search_right << \" left \" << left << \" right \" << right << \" result \" << result\n+\n@@ -125,1 +127,1 @@\n-  EXPECT_EQ(result, exp_result) << \" search_left \" << search_left << \" search_right \" << search_right << \" left \" << left << \" right \" << right << \" result \" << result;\n+  EXPECT_EQ(result, exp_result) PRINT_TESTCASE;\n@@ -129,1 +131,1 @@\n-    EXPECT_EQ(result, exp_result) << \" search_left \" << search_left << \" search_right \" << search_right << \" left \" << left << \" right \" << right << \" result \" << result;\n+    EXPECT_EQ(result, exp_result) PRINT_TESTCASE;\n","filename":"test\/hotspot\/gtest\/utilities\/test_bitMap_search.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}