{"files":[{"patch":"@@ -177,0 +177,1 @@\n+  ResourceMark rm(THREAD);\n@@ -216,1 +217,1 @@\n-void jfrDCmd::invoke(JfrJavaArguments& method, TRAPS) const {\n+void JfrDCmd::invoke(JfrJavaArguments& method, TRAPS) const {\n@@ -234,1 +235,1 @@\n-void jfrDCmd::parse(CmdLine* line, char delim, TRAPS) {\n+void JfrDCmd::parse(CmdLine* line, char delim, TRAPS) {\n@@ -242,1 +243,1 @@\n-void jfrDCmd::execute(DCmdSource source, TRAPS) {\n+void JfrDCmd::execute(DCmdSource source, TRAPS) {\n@@ -244,1 +245,0 @@\n-  static const char* jc = javaClass();\n@@ -251,1 +251,1 @@\n-  JfrJavaArguments execute(&result, jc, \"execute\", signature, CHECK);\n+  JfrJavaArguments execute(&result, javaClass(), \"execute\", signature, CHECK);\n@@ -270,1 +270,1 @@\n-void jfrDCmd::print_help(const char* name) const {\n+void JfrDCmd::print_help(const char* name) const {\n@@ -272,2 +272,0 @@\n-  static const char* jc = javaClass();\n-\n@@ -276,2 +274,2 @@\n-  JfrJavaArguments execute(&result, jc, \"printHelp\", signature, thread);\n-  invoke(execute, thread);\n+  JfrJavaArguments print_help(&result, javaClass(), \"printHelp\", signature, thread);\n+  invoke(print_help, thread);\n@@ -281,4 +279,1 @@\n-GrowableArray<DCmdArgumentInfo*>* jfrDCmd::argument_info_array() const {\n-  static const char signature[] = \"()[Ljdk\/jfr\/internal\/dcmd\/Argument;\";\n-  static const char* jc = javaClass();\n-  JavaThread* thread = JavaThread::current();\n+static const char* read_string_field(oop argument, const char* field_name, TRAPS) {\n@@ -286,2 +281,20 @@\n-  JfrJavaArguments execute(&result, jc, \"getArgumentInfos\", signature, thread);\n-  invoke(execute, thread);\n+  JfrJavaArguments args(&result);\n+  args.set_klass(argument->klass());\n+  args.set_name(field_name);\n+  args.set_signature(\"Ljava\/lang\/String;\");\n+  args.set_receiver(argument);\n+  JfrJavaSupport::get_field(&args, THREAD);\n+  const oop string_oop = result.get_oop();\n+  return string_oop != NULL ? JfrJavaSupport::c_str(string_oop, (JavaThread*)THREAD, true) : NULL;\n+}\n+\n+static bool read_boolean_field(oop argument, const char* field_name, TRAPS) {\n+  JavaValue result(T_BOOLEAN);\n+  JfrJavaArguments args(&result);\n+  args.set_klass(argument->klass());\n+  args.set_name(field_name);\n+  args.set_signature(\"Z\");\n+  args.set_receiver(argument);\n+  JfrJavaSupport::get_field(&args, THREAD);\n+  return (result.get_jint() & 1) == 1;\n+}\n@@ -289,3 +302,10 @@\n-  objArrayOop arguments = objArrayOop(result.get_jobject());\n-  assert(arguments != NULL, \"invariant\");\n-  assert(arguments->is_array(), \"must be array\");*\/\n+static DCmdArgumentInfo* create_info(oop argument, TRAPS) {\n+  return new DCmdArgumentInfo(\n+    read_string_field(argument, \"name\", THREAD),\n+    read_string_field(argument, \"description\", THREAD),\n+    read_string_field(argument, \"type\", THREAD),\n+    read_string_field(argument, \"defaultValue\", THREAD),\n+    read_boolean_field(argument, \"mandatory\", THREAD),\n+    true, \/\/ a DcmdFramework \"option\"\n+    read_boolean_field(argument, \"allowMultiple\", THREAD));\n+}\n@@ -293,15 +313,2 @@\n-  GrowableArray<DCmdArgumentInfo*>* array = new GrowableArray<DCmdArgumentInfo*>();\n-  const int length = 0;arguments->length();\n-  for (int i = 0; i < length; ++i) {\n-    oop argument = arguments->obj_at(i);\n-    DCmdArgumentInfo* dai = new DCmdArgumentInfo(\n-      \"name\", \/\/ read_field_string(argument, \"name\"),\n-      \"description\", \/\/ read_field_string(argument, \"description\"),\n-      \"type\", \/\/ read_field_string(argument, \"type\"),\n-      \"defaultValue\", \/\/ read_field_string(argument, \"defaultValue\"),\n-      false, \/\/ read_field_boolean(argument, \"mandatory\"),\n-      false, \/\/ read_field_boolean(argument, \"multiple\"),\n-      i);\n-    array->append(dai);\n-  }\n-  return array;\n+GrowableArray<DCmdArgumentInfo*>* JfrDCmd::argument_info_array() const {\n+  return new GrowableArray<DCmdArgumentInfo*>();\n@@ -310,1 +317,1 @@\n-GrowableArray<const char*>* jfrDCmd::argument_name_array() const {\n+GrowableArray<const char*>* JfrDCmd::argument_name_array() const {\n@@ -312,1 +319,1 @@\n-  GrowableArray<const char *> * array = new GrowableArray<const char *>(argument_infos->length());\n+  GrowableArray<const char*>* array = new GrowableArray<const char*>(argument_infos->length());\n@@ -373,1 +380,1 @@\n-  out->print_cr(\"                     Windwows, the temporary directory is specified by the TMP\");\n+  out->print_cr(\"                     Windows, the temporary directory is specified by the TMP\");\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":44,"deletions":37,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-class jfrDCmd : public DCmd {\n+class JfrDCmd : public DCmd {\n@@ -36,3 +36,2 @@\n-  jfrDCmd(outputStream* output, bool heap)\n-    : DCmd(output,heap), _args(NULL), _delimiter('\\0')  {\n-  }\n+  JfrDCmd(outputStream* output, bool heap) : DCmd(output,heap), _args(NULL), _delimiter('\\0')  {}\n+\n@@ -49,1 +48,1 @@\n-class JfrStartFlightRecordingDCmd : public jfrDCmd {\n+class JfrStartFlightRecordingDCmd : public JfrDCmd {\n@@ -51,3 +50,2 @@\n-  JfrStartFlightRecordingDCmd(outputStream* output, bool heap)\n-    : jfrDCmd(output, heap) {\n-  }\n+  JfrStartFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+\n@@ -72,1 +70,1 @@\n-class JfrDumpFlightRecordingDCmd : public jfrDCmd {\n+class JfrDumpFlightRecordingDCmd : public JfrDCmd {\n@@ -74,3 +72,2 @@\n-  JfrDumpFlightRecordingDCmd(outputStream* output, bool heap)\n-    : jfrDCmd(output, heap) {\n-  }\n+  JfrDumpFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+\n@@ -95,1 +92,1 @@\n-class JfrCheckFlightRecordingDCmd : public jfrDCmd {\n+class JfrCheckFlightRecordingDCmd : public JfrDCmd {\n@@ -97,3 +94,2 @@\n-  JfrCheckFlightRecordingDCmd(outputStream* output, bool heap)\n-    : jfrDCmd(output, heap) {\n-  }\n+  JfrCheckFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+\n@@ -118,1 +114,1 @@\n-class JfrStopFlightRecordingDCmd : public jfrDCmd {\n+class JfrStopFlightRecordingDCmd : public JfrDCmd {\n@@ -120,3 +116,2 @@\n-  JfrStopFlightRecordingDCmd(outputStream* output, bool heap)\n-    : jfrDCmd(output, heap) {\n-  }\n+  JfrStopFlightRecordingDCmd(outputStream* output, bool heap) : JfrDCmd(output, heap) {}\n+\n@@ -141,2 +136,0 @@\n-class JfrRuntimeOptions;\n-\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -490,2 +490,6 @@\n-\/\/ caller needs ResourceMark\n-const char* JfrJavaSupport::c_str(oop string, JavaThread* t) {\n+static char* allocate_string(bool c_heap, int length, JavaThread* jt) {\n+  return c_heap ? NEW_C_HEAP_ARRAY(char, length, mtTracing) :\n+                  NEW_RESOURCE_ARRAY_IN_THREAD(jt, char, length);\n+}\n+\n+const char* JfrJavaSupport::c_str(oop string, JavaThread* t, bool c_heap \/* false *\/) {\n@@ -493,1 +497,1 @@\n-  char* resource_copy = NULL;\n+  char* str = NULL;\n@@ -497,3 +501,3 @@\n-    resource_copy = NEW_RESOURCE_ARRAY_IN_THREAD(t, char, (length + 1));\n-    if (resource_copy == NULL) {\n-      JfrJavaSupport::throw_out_of_memory_error(\"Unable to allocate thread local native memory\", t);\n+    str = allocate_string(c_heap, length + 1, t);\n+    if (str == NULL) {\n+      JfrJavaSupport::throw_out_of_memory_error(\"Unable to allocate native memory\", t);\n@@ -502,2 +506,1 @@\n-    assert(resource_copy != NULL, \"invariant\");\n-    java_lang_String::as_utf8_string(string, value, resource_copy, length + 1);\n+    java_lang_String::as_utf8_string(string, value, str, length + 1);\n@@ -505,1 +508,1 @@\n-  return resource_copy;\n+  return str;\n@@ -509,1 +512,1 @@\n-const char* JfrJavaSupport::c_str(jstring string, JavaThread* t) {\n+const char* JfrJavaSupport::c_str(jstring string, JavaThread* t, bool c_heap \/* false *\/) {\n@@ -511,1 +514,1 @@\n-  return string != NULL ? c_str(resolve_non_null(string), t) : NULL;\n+  return string != NULL ? c_str(resolve_non_null(string), t, c_heap) : NULL;\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -78,3 +78,2 @@\n-  \/\/ caller needs ResourceMark\n-  static const char* c_str(jstring string, JavaThread* jt);\n-  static const char* c_str(oop string, JavaThread* t);\n+  static const char* c_str(jstring string, JavaThread* jt, bool c_heap = false);\n+  static const char* c_str(oop string, JavaThread* jt, bool c_heap = false);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+package jdk.jfr.internal.dcmd;\n@@ -25,1 +26,1 @@\n-package jdk.jfr.internal.dcmd;\n+\n@@ -39,0 +40,2 @@\n+    private final String keyValueDelimiter;\n+    private final String valueDelimiter;\n@@ -46,0 +49,2 @@\n+        this.keyValueDelimiter = \"=\" + delimiter;\n+        this.valueDelimiter = Character.toString(delimiter);\n@@ -51,1 +56,1 @@\n-            String key = readText('=', delimiter);\n+            String key = readText(keyValueDelimiter);\n@@ -54,1 +59,1 @@\n-                value = readText(delimiter);\n+                value = readText(valueDelimiter);\n@@ -129,10 +134,2 @@\n-    private String readText(char... abortCharacters) {\n-        if (accept('\\'') || accept('\\\"')) { \/\/ begin quote\n-            String s = readUntil(false, lastChar());\n-            position++; \/\/ end quote\n-            return s;\n-        }\n-        return readUntil(true, abortCharacters);\n-    }\n-\n-    private String readUntil(boolean acceptEnd, char... abortCharacters) {\n+    \/\/ Mostly copied from native DCmdParser\n+    private String readText(String abortChars) {\n@@ -140,11 +137,11 @@\n-        while (!atEnd()) {\n-            char c = currentChar();\n-            if (c == '\\\\' && position < text.length() - 2) { \/\/ escaped\n-                position++;\n-                c = currentChar();\n-            } else {\n-                for (char a : abortCharacters) {\n-                    if (c == a) {\n-                        return builder.toString();\n-                    }\n-                }\n+        boolean quoted = false; ;\n+        while (position <= text.length() - 1 && abortChars.indexOf(currentChar()) == -1) {\n+          if (currentChar() == '\\\"' || currentChar() == '\\'') {\n+            char quote =currentChar();\n+            quoted = true;\n+            while (position < text.length() - 1) {\n+              position++;\n+              if (currentChar() == quote && lastChar() != '\\\\') {\n+                break;\n+              }\n+              builder.append(currentChar());\n@@ -152,2 +149,7 @@\n-            builder.append(c);\n-            position++;\n+            if (currentChar() != quote) {\n+              throw new IllegalArgumentException(\"Format error in diagnostic command arguments\");\n+            }\n+            break;\n+          }\n+          builder.append(currentChar());\n+          position++;\n@@ -155,2 +157,2 @@\n-        if (acceptEnd) {\n-            return builder.toString();\n+        if (quoted) {\n+            position++;\n@@ -158,1 +160,1 @@\n-        throw new IllegalArgumentException(\"Expected \" + new String());\n+        return builder.toString();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -384,2 +384,2 @@\n-                 jfc-option=value    (Optional) The option value to modify. To see available options for\n-                                     a .jfc file, use the 'jfr configure' command.\n+                 jfc-option=value    (Optional) The option value to modify. To see available\n+                                     options for a .jfc file, use the 'jfr configure' command.\n@@ -391,3 +391,4 @@\n-               In case of a conflict between a parameter and a .jfc option, the parameter will take precedence.\n-               The whitespace character can be omitted for timespan values, i.e. 20s. For\n-               more information about the settings syntax, see Javadoc of the jdk.jfr package.\n+               In case of a conflict between a parameter and a .jfc option, the parameter will\n+               take  precedence. The whitespace character can be omitted for timespan values,\n+               i.e. 20s. For more information about the settings syntax, see Javadoc of the\n+               jdk.jfr package.\n@@ -412,1 +413,1 @@\n-               Note, if the default event settings are modified, overhead may exceed 1%.\n+               Note, if the default event settings are modified, overhead may exceed 1%%.\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}