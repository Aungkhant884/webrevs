{"files":[{"patch":"@@ -1723,2 +1723,0 @@\n-                            } else if (wasUnconditionalPattern) {\n-                                log.error(label.pos(), Errors.PatternDominated);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8269146\n+ * @bug 8269146 8290709\n@@ -123,10 +123,0 @@\n-            if (!asCaseLabelElements) {\n-                \/\/as an edge case, `case <total-pattern>: case null:` is prohibited:\n-                boolean seenPattern = false;\n-                for (CaseLabel label : caseLabels) {\n-                    switch (label) {\n-                        case NULL: if (seenPattern) shouldPass = false; break;\n-                        case PARENTHESIZED_PATTERN, TYPE_PATTERN: seenPattern = true; break;\n-                    }\n-                }\n-            }\n","filename":"test\/langtools\/tools\/javac\/patterns\/CaseStructureTest.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8262891\n+ * @bug 8262891 8290709\n@@ -214,0 +214,7 @@\n+\n+    int testNotDominates2(Integer x) {\n+        switch (x) {\n+            case Integer i: return i;\n+            case null : return -1;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/Domination.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -157,6 +157,0 @@\n-    void nullAfterTotal(Object o) {\n-        switch (o) {\n-            case Object obj: break;\n-            case null: break;\n-        }\n-    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9,1 +9,0 @@\n-SwitchErrors.java:42:18: compiler.err.pattern.dominated\n@@ -30,16 +29,15 @@\n-SwitchErrors.java:160:18: compiler.err.pattern.dominated\n-SwitchErrors.java:172:18: compiler.err.pattern.expected\n-SwitchErrors.java:178:78: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:184:73: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n-SwitchErrors.java:191:21: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:200:44: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:218:29: compiler.err.unconditional.pattern.and.default\n-SwitchErrors.java:225:21: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:225:47: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:232:44: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:232:47: compiler.err.flows.through.from.pattern\n-SwitchErrors.java:244:18: compiler.err.duplicate.unconditional.pattern\n-SwitchErrors.java:249:18: compiler.err.prob.found.req: (compiler.misc.not.applicable.types: int, java.lang.Integer)\n-SwitchErrors.java:254:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n-SwitchErrors.java:267:24: compiler.err.flows.through.to.pattern\n-SwitchErrors.java:281:37: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:166:18: compiler.err.pattern.expected\n+SwitchErrors.java:172:78: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:178:73: compiler.err.cant.resolve.location: kindname.variable, n, , , (compiler.misc.location: kindname.class, SwitchErrors, null)\n+SwitchErrors.java:185:21: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:194:44: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:212:29: compiler.err.unconditional.pattern.and.default\n+SwitchErrors.java:219:21: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:219:47: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:226:44: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:226:47: compiler.err.flows.through.from.pattern\n+SwitchErrors.java:238:18: compiler.err.duplicate.unconditional.pattern\n+SwitchErrors.java:243:18: compiler.err.prob.found.req: (compiler.misc.not.applicable.types: int, java.lang.Integer)\n+SwitchErrors.java:248:18: compiler.err.type.found.req: int, (compiler.misc.type.req.class.array)\n+SwitchErrors.java:261:24: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:275:37: compiler.err.flows.through.from.pattern\n@@ -56,2 +54,2 @@\n-SwitchErrors.java:164:9: compiler.err.not.exhaustive.statement\n-SwitchErrors.java:237:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:158:9: compiler.err.not.exhaustive.statement\n+SwitchErrors.java:231:9: compiler.err.not.exhaustive.statement\n@@ -60,1 +58,1 @@\n-57 errors\n\\ No newline at end of file\n+55 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @bug 8262891 8268333 8268896 8269802 8269808 8270151 8269113 8277864\n+ * @bug 8262891 8268333 8268896 8269802 8269808 8270151 8269113 8277864 8290709\n@@ -97,0 +97,4 @@\n+        assertEquals(\"OK\", totalPatternAndNull(Integer.valueOf(42)));\n+        assertEquals(\"OK\", totalPatternAndNull(null));\n+        assertEquals(\"1\", nullAfterTotal(Integer.valueOf(42)));\n+        assertEquals(\"OK\", nullAfterTotal(null));\n@@ -636,0 +640,14 @@\n+    String totalPatternAndNull(Integer in) {\n+        return switch (in) {\n+            case -1: { yield \"\";}\n+            case Integer i: case null: { yield \"OK\";}\n+        };\n+    }\n+\n+    String nullAfterTotal(Object o) {\n+        return switch (o) {\n+            case Object obj: { yield \"1\";}\n+            case null: { yield \"OK\";}\n+        };\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Switches.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}