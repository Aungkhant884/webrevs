{"files":[{"patch":"@@ -260,5 +260,0 @@\n-address CodeBuffer::locator_address(int locator) const {\n-  if (locator < 0)  return NULL;\n-  address start = code_section(locator_sect(locator))->start();\n-  return start + locator_pos(locator);\n-}\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -560,1 +560,5 @@\n-  address    locator_address(int locator) const;\n+  address    locator_address(int locator) const {\n+    if (locator < 0)  return NULL;\n+    address start = code_section(locator_sect(locator))->start();\n+    return start + locator_pos(locator);\n+  }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -107,0 +107,13 @@\n+EntryPoint::EntryPoint(address aentry, address ientry, address lentry, address fentry, address dentry, address ventry) {\n+  assert(number_of_states == 10, \"check the code below\");\n+  _entry[btos] = ientry;\n+  _entry[ztos] = ientry;\n+  _entry[ctos] = ientry;\n+  _entry[stos] = ientry;\n+  _entry[atos] = aentry;\n+  _entry[itos] = ientry;\n+  _entry[ltos] = lentry;\n+  _entry[ftos] = fentry;\n+  _entry[dtos] = dentry;\n+  _entry[vtos] = ventry;\n+}\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-\n+  \/\/ Will use the ientry for each of [bzcs]entry\n+  EntryPoint(address aentry, address ientry, address lentry, address fentry, address dentry, address ventry);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,4 +71,0 @@\n-                 generate_trace_code(btos),\n-                 generate_trace_code(ztos),\n-                 generate_trace_code(ctos),\n-                 generate_trace_code(stos),\n@@ -86,1 +82,0 @@\n-    const int index_size = sizeof(u2);\n@@ -89,1 +84,0 @@\n-      address return_itos = generate_return_entry_for(itos, i, index_size);\n@@ -92,10 +86,6 @@\n-                   return_itos,\n-                   return_itos,\n-                   return_itos,\n-                   return_itos,\n-                   generate_return_entry_for(atos, i, index_size),\n-                   return_itos,\n-                   generate_return_entry_for(ltos, i, index_size),\n-                   generate_return_entry_for(ftos, i, index_size),\n-                   generate_return_entry_for(dtos, i, index_size),\n-                   generate_return_entry_for(vtos, i, index_size)\n+                   generate_return_entry_for(atos, i, sizeof(u2)),\n+                   generate_return_entry_for(itos, i, sizeof(u2)),\n+                   generate_return_entry_for(ltos, i, sizeof(u2)),\n+                   generate_return_entry_for(ftos, i, sizeof(u2)),\n+                   generate_return_entry_for(dtos, i, sizeof(u2)),\n+                   generate_return_entry_for(vtos, i, sizeof(u2))\n@@ -107,3 +97,3 @@\n-    \/\/ These states are in order specified in TosState, except btos\/ztos\/ctos\/stos are\n-    \/\/ really the same as itos since there is no top of stack optimization for these types\n-    const TosState states[] = {itos, itos, itos, itos, itos, ltos, ftos, dtos, atos, vtos, ilgl};\n+    \/\/ These states are in order specified in TosState, except btos\/ztos\/ctos\/stos which\n+    \/\/ are the same as itos since there is no top of stack optimization for these types\n+    const TosState states[] = {ilgl, ilgl, ilgl, ilgl, itos, ltos, ftos, dtos, atos, vtos, ilgl};\n@@ -114,1 +104,4 @@\n-    for (int i = 0; i < Interpreter::number_of_return_addrs; i++) {\n+    assert(invoke_length >= 0 && invoke_length < Interpreter::number_of_return_entries, \"invariant\");\n+    assert(invokeinterface_length >= 0 && invokeinterface_length < Interpreter::number_of_return_entries, \"invariant\");\n+\n+    for (int i = itos; i < Interpreter::number_of_return_addrs; i++) {\n@@ -117,3 +110,13 @@\n-      Interpreter::_invoke_return_entry[i] = generate_return_entry_for(state, invoke_length, sizeof(u2));\n-      Interpreter::_invokeinterface_return_entry[i] = generate_return_entry_for(state, invokeinterface_length, sizeof(u2));\n-      Interpreter::_invokedynamic_return_entry[i] = generate_return_entry_for(state, invokedynamic_length, sizeof(u4));\n+\n+      \/\/ Reuse generated entry points\n+      Interpreter::_invoke_return_entry[i]          = Interpreter::_return_entry[invoke_length].entry(state);\n+      Interpreter::_invokeinterface_return_entry[i] = Interpreter::_return_entry[invokeinterface_length].entry(state);\n+\n+      Interpreter::_invokedynamic_return_entry[i]   = generate_return_entry_for(state, invokedynamic_length, sizeof(u4));\n+    }\n+\n+    \/\/ set itos entry points for btos\/ztos\/ctos\/stos\n+    for (int i = 0; i < itos; i++) {\n+      Interpreter::_invoke_return_entry[i]          = Interpreter::_invoke_return_entry[itos];\n+      Interpreter::_invokeinterface_return_entry[i] = Interpreter::_invokeinterface_return_entry[itos];\n+      Interpreter::_invokedynamic_return_entry[i]   = Interpreter::_invokedynamic_return_entry[itos];\n@@ -124,0 +127,1 @@\n+    address earlyret_entry_itos = generate_earlyret_entry_for(itos);\n@@ -126,4 +130,0 @@\n-                 generate_earlyret_entry_for(btos),\n-                 generate_earlyret_entry_for(ztos),\n-                 generate_earlyret_entry_for(ctos),\n-                 generate_earlyret_entry_for(stos),\n@@ -156,4 +156,0 @@\n-                 generate_safept_entry_for(btos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),\n-                 generate_safept_entry_for(ztos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),\n-                 generate_safept_entry_for(ctos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),\n-                 generate_safept_entry_for(stos, CAST_FROM_FN_PTR(address, InterpreterRuntime::at_safepoint)),\n@@ -245,4 +241,0 @@\n-                   deopt_itos, \/* btos *\/\n-                   deopt_itos, \/* ztos *\/\n-                   deopt_itos, \/* ctos *\/\n-                   deopt_itos, \/* stos *\/\n@@ -250,1 +242,1 @@\n-                   deopt_itos, \/* itos *\/\n+                   generate_deopt_entry_for(itos, i),\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":28,"deletions":36,"binary":false,"changes":64,"status":"modified"}]}