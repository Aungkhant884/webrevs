{"files":[{"patch":"@@ -94,0 +94,4 @@\n+  \/\/ Initialize card size based on the region size.\n+  \/\/ Maximum no. of cards per region is 2^16.\n+  CardTable::initialize_card_size(1 << (region_size_log - 16));\n+\n@@ -99,0 +103,2 @@\n+  assert(LogCardsPerRegion <= 16, \"Total cards per region should be less than or equal to 2^16\");\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,10 @@\n+uint ObjectStartArray::block_shift = 0;\n+uint ObjectStartArray::block_size = 0;\n+uint ObjectStartArray::block_size_in_words = 0;\n+\n+void ObjectStartArray::initialize_block_size(uint card_shift) {\n+  block_shift = card_shift;\n+  block_size = 1 << block_shift;\n+  block_size_in_words = block_size \/ sizeof(HeapWord);\n+}\n+\n@@ -38,1 +48,1 @@\n-  assert((int)block_size <= 512, \"block_size must be less than or equal to 512\");\n+  assert((int)block_size <= 1024, \"block_size must be less than or equal to 1024\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,5 +55,6 @@\n-  enum BlockSizeConstants {\n-    block_shift                  = 9,\n-    block_size                   = 1 << block_shift,\n-    block_size_in_words          = block_size \/ sizeof(HeapWord)\n-  };\n+  static uint block_shift;\n+  static uint block_size;\n+  static uint block_size_in_words;\n+\n+  \/\/ Initialize block size based on card size\n+  static void initialize_block_size(uint card_shift);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -100,0 +100,2 @@\n+  \/\/ Initialize card size before initializing alignments\n+  CardTable::initialize_card_size();\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelArguments.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,12 @@\n+uint BOTConstants::LogN = 0;\n+uint BOTConstants::LogN_words = 0;\n+uint BOTConstants::N_bytes = 0;\n+uint BOTConstants::N_words = 0;\n+\n+void BOTConstants::initialize_bot_size(uint card_shift) {\n+  LogN =  card_shift;\n+  LogN_words = LogN - LogHeapWordSize;\n+  N_bytes = 1 << LogN;\n+  N_words = 1 << LogN_words;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,4 +52,5 @@\n-  static const uint LogN = 9;\n-  static const uint LogN_words = LogN - LogHeapWordSize;\n-  static const uint N_bytes = 1 << LogN;\n-  static const uint N_words = 1 << LogN_words;\n+  static uint LogN;\n+  static uint LogN_words;\n+  static uint N_bytes;\n+  static uint N_words;\n+\n@@ -62,0 +63,3 @@\n+  \/\/ Initialize bot size based on card size\n+  static void initialize_bot_size(uint card_shift);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"gc\/parallel\/objectStartArray.hpp\"\n@@ -33,0 +34,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -36,0 +38,34 @@\n+uintx CardTable::card_shift = 0;\n+uintx CardTable::card_size = 0;\n+uintx CardTable::card_size_in_words = 0;\n+\n+void CardTable::initialize_card_size(uintx min_card_size) {\n+  assert(UseG1GC || UseParallelGC || UseSerialGC,\n+         \"Initialize card size should only be called by card based collectors.\");\n+\n+  \/\/ GCCardSizeInBytes is rounded off to the nearest power of 2, and clamped\n+  \/\/ between min and max card sizes\n+  card_size = GCCardSizeInBytes;\n+  card_size = round_up_power_of_2(card_size);\n+  card_size = clamp(card_size, MAX2(min_card_size,card_size_min), card_size_max);\n+  card_shift = log2i_exact(card_size);\n+  card_size = 1 << card_shift;\n+  card_size_in_words = card_size \/ sizeof(HeapWord);\n+\n+  \/\/ Set blockOffsetTable size based on card table entry size\n+  BOTConstants::initialize_bot_size(card_shift);\n+\n+  \/\/ Set ObjectStartArray block size based on card table entry size\n+  ObjectStartArray::initialize_block_size(card_shift);\n+\n+  if (GCCardSizeInBytes != card_size) {\n+    FLAG_SET_ERGO(GCCardSizeInBytes, card_size);\n+  }\n+\n+  log_info(gc, barrier)(\"CardTable entry size: \" UINTX_FORMAT,  card_size);\n+}\n+\n+void CardTable::initialize_card_size() {\n+  initialize_card_size(card_size_min);\n+}\n+\n@@ -44,0 +80,1 @@\n+\n@@ -59,2 +96,1 @@\n-\n-  assert(card_size <= 512, \"card_size must be less than 512\"); \/\/ why?\n+  assert(card_size >= card_size_min && card_size <= card_size_max, \"card_size must be between min and max\");\n@@ -431,1 +467,2 @@\n-  return card_size * os::vm_page_size();\n+  \/\/ CardTable max alignment is computed with card_size_max\n+  return card_size_max * os::vm_page_size();\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -231,6 +231,8 @@\n-  \/\/ Constants\n-  enum SomePublicConstants {\n-    card_shift                  = 9,\n-    card_size                   = 1 << card_shift,\n-    card_size_in_words          = card_size \/ sizeof(HeapWord)\n-  };\n+  \/\/ CardTable entry size\n+  static uintx card_shift;\n+  static uintx card_size;\n+  static uintx card_size_in_words;\n+\n+  \/\/ min and max permissible card sizes\n+  static const uintx card_size_min = 128;\n+  static const uintx card_size_max = 1024;\n@@ -242,0 +244,6 @@\n+  \/\/ Initialize card size based on the min_card_size value\n+  static void initialize_card_size(uintx min_card_size);\n+\n+  \/\/Initialize card size based on CardTable::card_size_min\n+  static void initialize_card_size();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -695,3 +695,6 @@\n-          range(0, max_juint)\n-\n-\/\/ end of GC_FLAGS\n+          range(0, max_juint)                                               \\\n+                                                                            \\\n+  product(uintx, GCCardSizeInBytes, 512,                                    \\\n+          \"Card table entry size (in bytes) for card based collectors\")     \\\n+          range(128, 1024)                                                  \\\n+  \/\/ end of GC_FLAGS\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/cardTable.hpp\"\n@@ -64,0 +65,2 @@\n+  \/\/ Initialize card size before initializing alignments\n+  CardTable::initialize_card_size();\n","filename":"src\/hotspot\/share\/gc\/shared\/genArguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}