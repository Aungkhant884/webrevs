{"files":[{"patch":"@@ -31,5 +31,0 @@\n-uint G1CardTable::min_card_size(size_t region_size) {\n-  int region_size_log = exact_log2_long((jlong)region_size);\n-  return 1 << (region_size_log - LogOfMaxCardsPerRegion);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1CardSetContainers.hpp\"\n@@ -79,1 +78,0 @@\n-  static const size_t LogOfMaxCardsPerRegion = BitsPerByte * sizeof(G1CardSetArray::EntryDataType);\n@@ -91,2 +89,0 @@\n-  static uint min_card_size(size_t region_size);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,3 +93,2 @@\n-  \/\/ Initialize card size based on the region size.\n-  \/\/ Maximum no. of cards per region is 2^16.\n-  CardTable::initialize_card_size(G1CardTable::min_card_size(region_size));\n+  \/\/ Initialize card size\n+  CardTable::initialize_card_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  assert(block_size <= MaxBlockSize, \"block_size must be less than or equal to \" UINT32_FORMAT, MaxBlockSize);\n+  assert(block_size <= _max_block_size, \"block_size must be less than or equal to \" UINT32_FORMAT, _max_block_size);\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,3 +59,4 @@\n-  \/\/ This maximum is derived from that we need an extra bit for possible\n-  \/\/ offsets in the byte for backskip values (this is a hard limit)\n-  static const uint MaxBlockSize = 1024;\n+  \/\/ Maximum size an offset table entry can cover. This maximum is derived from that\n+  \/\/ we need an extra bit for possible offsets in the byte for backskip values, leaving 2^7 possible offsets.\n+  \/\/ Mininum object alignment is 8 bytes (2^3), so we can at most represent 2^10 offsets within a BOT value.\n+  static const uint _max_block_size = 1024;\n","filename":"src\/hotspot\/share\/gc\/parallel\/objectStartArray.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-void CardTable::initialize_card_size(uint min_card_size) {\n+void CardTable::initialize_card_size() {\n@@ -48,1 +48,1 @@\n-  card_size = MAX2(min_card_size, GCCardSizeInBytes);\n+  card_size = GCCardSizeInBytes;\n@@ -60,4 +60,0 @@\n-  if (GCCardSizeInBytes != card_size) {\n-    FLAG_SET_ERGO(GCCardSizeInBytes, card_size);\n-  }\n-\n@@ -67,4 +63,0 @@\n-void CardTable::initialize_card_size() {\n-  initialize_card_size(CardSizeMin);\n-}\n-\n@@ -79,1 +71,0 @@\n-\n@@ -465,2 +456,2 @@\n-  \/\/ CardTable max alignment is computed with card_size_max\n-  return CardSizeMax * os::vm_page_size();\n+  \/\/ CardTable max alignment is computed with _card_size_max\n+  return _card_size_max * os::vm_page_size();\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -236,3 +236,2 @@\n-  \/\/ min and max permissible card sizes\n-  static const uint CardSizeMin = 512;\n-  static const uint CardSizeMax = 1024;\n+  \/\/ max permissible card size\n+  static const uint _card_size_max = 1024;\n@@ -244,4 +243,1 @@\n-  \/\/ Initialize card size based on the min_card_size value\n-  static void initialize_card_size(uint min_card_size);\n-\n-  \/\/Initialize card size based on CardTable::card_size_min\n+  \/\/ Initialize card size\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -699,1 +699,1 @@\n-          range(512, 1024)                                                  \\\n+          range(128, 1024)                                                  \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}