{"files":[{"patch":"@@ -53,0 +53,1 @@\n+#include \"runtime\/javaThread.hpp\"\n@@ -56,1 +57,0 @@\n-#include \"runtime\/thread.hpp\"\n@@ -622,0 +622,15 @@\n+  bool need_trampoline = far_branches();\n+  if (!need_trampoline && entry.rspec().type() == relocInfo::runtime_call_type && !CodeCache::contains(entry.target())) {\n+    \/\/ If it is a runtime call of an address outside small CodeCache,\n+    \/\/ we need to check whether it is in range.\n+    address target = entry.target();\n+    assert(target < CodeCache::low_bound() || target >= CodeCache::high_bound(), \"target is inside CodeCache\");\n+    \/\/ Case 1: -------T-------L====CodeCache====H-------\n+    \/\/                ^-------longest branch---|\n+    \/\/ Case 2: -------L====CodeCache====H-------T-------\n+    \/\/                |-------longest branch ---^\n+    address longest_branch_start = (target < CodeCache::low_bound()) ? CodeCache::high_bound() - NativeInstruction::instruction_size\n+                                                                     : CodeCache::low_bound();\n+    need_trampoline = !reachable_from_branch_at(longest_branch_start, target);\n+  }\n+\n@@ -623,1 +638,1 @@\n-  if (far_branches()) {\n+  if (need_trampoline) {\n@@ -646,1 +661,1 @@\n-  if (!far_branches()) {\n+  if (!need_trampoline) {\n@@ -3358,1 +3373,1 @@\n-    cmn(len, 32);\n+    cmn(len, (u1)32);\n@@ -3421,1 +3436,1 @@\n-    cmn(len, 128);\n+    cmn(len, (u1)128);\n@@ -3655,1 +3670,1 @@\n-    cmn(len, 32);\n+    cmn(len, (u1)32);\n@@ -3718,1 +3733,1 @@\n-    cmn(len, 128);\n+    cmn(len, (u1)128);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -84,2 +84,2 @@\n-    rbp_off = 0,\n-    rbp_off2,\n+    rfp_off = 0,\n+    rfp_off2,\n@@ -438,1 +438,1 @@\n-  __ mov(r13, sp);\n+  __ mov(r19_sender_sp, sp);\n@@ -555,6 +555,4 @@\n-  \/\/ Note: r13 contains the senderSP on entry. We must preserve it since\n-  \/\/ we may do a i2c -> c2i transition if we lose a race where compiled\n-  \/\/ code goes non-entrant while we get args ready.\n-\n-  \/\/ In addition we use r13 to locate all the interpreter args because\n-  \/\/ we must align the stack to 16 bytes.\n+  \/\/ Note: r19_sender_sp contains the senderSP on entry. We must\n+  \/\/ preserve it since we may do a i2c -> c2i transition if we lose a\n+  \/\/ race where compiled code goes non-entrant while we get args\n+  \/\/ ready.\n@@ -2804,1 +2802,1 @@\n-\/\/ This is here instead of runtime_x86_64.cpp because it uses SimpleRuntimeFrame\n+\/\/ This is here instead of runtime_aarch64_64.cpp because it uses SimpleRuntimeFrame\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1377,1 +1377,3 @@\n-  \/\/ If continuation, call to thaw. Otherwise, resolve the call and exit.\n+  Label L_thaw, L_exit;\n+\n+  \/\/ If isContinue, call to thaw. Otherwise, call Continuation.enter(Continuation c, boolean isContinue)\n@@ -1381,1 +1383,1 @@\n-  \/\/ --- Resolve path\n+  \/\/ --- call Continuation.enter(Continuation c, boolean isContinue)\n@@ -1393,0 +1395,6 @@\n+  \/\/ The call needs to be resolved. There's a special case for this in\n+  \/\/ SharedRuntime::find_callee_info_helper() which calls\n+  \/\/ LinkResolver::resolve_continuation_enter() which resolves the call to\n+  \/\/ Continuation.enter(Continuation c, boolean isContinue).\n+  AddressLiteral resolve(SharedRuntime::get_resolve_static_call_stub(),\n+                         relocInfo::static_call_type);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/javaThread.hpp\"\n@@ -34,1 +35,0 @@\n-#include \"runtime\/thread.inline.hpp\"\n@@ -97,0 +97,14 @@\n+#ifndef PRODUCT\n+void ContinuationEntry::describe(FrameValues& values, int frame_no) const {\n+  address usp = (address)this;\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_offset())),    \"parent\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::cont_offset())),      \"continuation\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::flags_offset())),     \"flags\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::chunk_offset())),     \"chunk\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::argsize_offset())),   \"argsize\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::pin_count_offset())), \"pin_count\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_cont_fastpath_offset())),      \"parent fastpath\");\n+  values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_held_monitor_count_offset())), \"parent held monitor count\");\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-class RegisterMap;\n-class OopMap;\n+class CompiledMethod;\n@@ -36,0 +35,2 @@\n+class OopMap;\n+class RegisterMap;\n@@ -123,8 +124,1 @@\n-  intptr_t* bottom_sender_sp() const {\n-    intptr_t* sp = entry_sp() - argsize();\n-#ifdef _LP64\n-    sp = align_down(sp, frame::frame_alignment);\n-#endif\n-    return sp;\n-  }\n-\n+  inline intptr_t* bottom_sender_sp() const;\n@@ -138,11 +132,1 @@\n-  void describe(FrameValues& values, int frame_no) const {\n-    address usp = (address)this;\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_offset())),    \"parent\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::cont_offset())),      \"continuation\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::flags_offset())),     \"flags\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::chunk_offset())),     \"chunk\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::argsize_offset())),   \"argsize\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::pin_count_offset())), \"pin_count\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_cont_fastpath_offset())),      \"parent fastpath\");\n-    values.describe(frame_no, (intptr_t*)(usp + in_bytes(ContinuationEntry::parent_held_monitor_count_offset())), \"parent held monitor count\");\n-  }\n+  void describe(FrameValues& values, int frame_no) const;\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/javaClasses.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -1409,1 +1409,1 @@\n-           callee_method->method_holder()->is_reentrant_initialization(current),\n+           callee_method->method_holder()->is_init_thread(current),\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2963,0 +2963,3 @@\n+        \/** NOTE: if annotation processors are present, annotation processing rounds can happen after this method,\n+         *  this can impact in particular records for which annotations are forcibly propagated.\n+         *\/\n@@ -3603,1 +3606,1 @@\n-        if ((s.flags() & PREVIEW_API) != 0 && !preview.participatesInPreview(other, s)) {\n+        if ((s.flags() & PREVIEW_API) != 0 && !preview.participatesInPreview(syms, other, s)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+\n+serviceability\/jvmti\/VMObjectAlloc\/VMObjectAllocTest.java 8288430 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -604,2 +604,0 @@\n-security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/ActalisCA.java  8224768 generic-all\n-\n@@ -664,1 +662,0 @@\n-javax\/swing\/JPopupMenu\/6580930\/bug6580930.java 7124313 macosx-all\n@@ -674,1 +671,0 @@\n-javax\/swing\/Popup\/TaskbarPositionTest.java 8065097 macosx-all,linux-all\n@@ -684,1 +680,0 @@\n-javax\/swing\/JTable\/8236907\/LastVisibleRow.java 8284619 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}