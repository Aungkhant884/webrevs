{"files":[{"patch":"@@ -571,7 +571,8 @@\n-\n-                if (chc.maximumActiveProtocol.useTLS13PlusSpec() &&\n-                        SSLConfiguration.useCompatibilityMode) {\n-                    \/\/ In compatibility mode, the TLS 1.3 legacy_session_id\n-                    \/\/ field MUST be non-empty, so a client not offering a\n-                    \/\/ pre-TLS 1.3 session MUST generate a new 32-byte value.\n-                    sessionId =\n+            }\n+            if (sessionId.length() == 0 &&\n+                    chc.maximumActiveProtocol.useTLS13PlusSpec() &&\n+                    SSLConfiguration.useCompatibilityMode) {\n+                \/\/ In compatibility mode, the TLS 1.3 legacy_session_id\n+                \/\/ field MUST be non-empty, so a client not offering a\n+                \/\/ pre-TLS 1.3 session MUST generate a new 32-byte value.\n+                sessionId =\n@@ -579,1 +580,0 @@\n-                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ClientHello.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    \/\/ Allow full handshake without Extended Master Secret extension.\n+    \/\/ Use TLS1.3 middlebox compatibility mode.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @bug 8211806\n+ * @bug 8211806 8277881\n@@ -341,0 +341,3 @@\n+        if (sessIdLen == 0) {\n+            throw new Exception(\"SessionID field empty\");\n+        }\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLSession\/ResumeTLS13withSNI.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}