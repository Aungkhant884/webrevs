{"files":[{"patch":"@@ -94,1 +94,5 @@\n-                    || storetype.equalsIgnoreCase(\"Windows-ROOT\"));\n+                    || storetype.equalsIgnoreCase(\"Windows-ROOT\")\n+                    || storetype.equalsIgnoreCase(\"Windows-MY-CURRENTUSER\")\n+                    || storetype.equalsIgnoreCase(\"Windows-ROOT-CURRENTUSER\")\n+                    || storetype.equalsIgnoreCase(\"Windows-MY-LOCALMACHINE\")\n+                    || storetype.equalsIgnoreCase(\"Windows-ROOT-LOCALMACHINE\"));\n@@ -105,0 +109,8 @@\n+        } else if(storetype.equalsIgnoreCase(\"Windows-MY-CURRENTUSER\")) {\n+            return \"Windows-MY-CURRENTUSER\";\n+        } else if(storetype.equalsIgnoreCase(\"Windows-ROOT-CURRENTUSER\")) {\n+            return \"Windows-ROOT-CURRENTUSER\";\n+        } else if(storetype.equalsIgnoreCase(\"Windows-MY-LOCALMACHINE\")) {\n+            return \"Windows-MY-LOCALMACHINE\";\n+        } else if(storetype.equalsIgnoreCase(\"Windows-ROOT-LOCALMACHINE\")) {\n+            return \"Windows-ROOT-LOCALMACHINE\";\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/KeyStoreUtil.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+    private static final int LOCATION_CURRENTUSER = 0;\n+    private static final int LOCATION_LOCALMACHINE = 1;\n+\n@@ -59,1 +62,1 @@\n-            super(\"MY\");\n+            super(\"MY\", LOCATION_CURRENTUSER);\n@@ -65,1 +68,13 @@\n-            super(\"ROOT\");\n+            super(\"ROOT\", LOCATION_CURRENTUSER);\n+        }\n+    }\n+\n+    public static final class MYLocalMachine extends CKeyStore {\n+        public MYLocalMachine() {\n+            super(\"MY\", LOCATION_LOCALMACHINE);\n+        }\n+    }\n+\n+    public static final class ROOTLocalMachine extends CKeyStore {\n+        public ROOTLocalMachine() {\n+            super(\"ROOT\", LOCATION_LOCALMACHINE);\n@@ -223,1 +238,6 @@\n-    CKeyStore(String storeName) {\n+    \/*\n+     * The keystore location.\n+     *\/\n+    private final int storeLocation;\n+\n+    CKeyStore(String storeName, int storeLocation) {\n@@ -236,0 +256,1 @@\n+        this.storeLocation = storeLocation;\n@@ -262,1 +283,1 @@\n-        throws NoSuchAlgorithmException, UnrecoverableKeyException {\n+            throws NoSuchAlgorithmException, UnrecoverableKeyException {\n@@ -708,1 +729,1 @@\n-            loadKeysOrCertificateChains(getName());\n+            loadKeysOrCertificateChains(getName(), getLocation());\n@@ -804,1 +825,1 @@\n-        Collection<Certificate> certCollection) {\n+            Collection<Certificate> certCollection) {\n@@ -832,1 +853,8 @@\n-     * Load keys and\/or certificates from keystore into Collection.\n+     * Returns the location of the keystore.\n+     *\/\n+    private int getLocation() {\n+        return storeLocation;\n+    }\n+\n+    \/**\n+     * Loads keys and\/or certificates from keystore into Collection.\n@@ -835,0 +863,1 @@\n+     * @param location Location of keystore.\n@@ -836,2 +865,2 @@\n-    private native void loadKeysOrCertificateChains(String name)\n-            throws KeyStoreException;\n+    private native void loadKeysOrCertificateChains(String name,\n+            int location) throws KeyStoreException;\n@@ -847,2 +876,2 @@\n-        byte[] encoding, int encodingLength, long hCryptProvider,\n-        long hCryptKey) throws CertificateException, KeyStoreException;\n+            byte[] encoding, int encodingLength, long hCryptProvider,\n+            long hCryptKey) throws CertificateException, KeyStoreException;\n@@ -858,1 +887,1 @@\n-        byte[] encoding, int encodingLength)\n+            byte[] encoding, int encodingLength)\n@@ -867,1 +896,1 @@\n-        throws KeyStoreException;\n+            throws KeyStoreException;\n@@ -880,9 +909,9 @@\n-        int keyBitLength,\n-        byte[] modulus,\n-        byte[] publicExponent,\n-        byte[] privateExponent,\n-        byte[] primeP,\n-        byte[] primeQ,\n-        byte[] exponentP,\n-        byte[] exponentQ,\n-        byte[] crtCoefficient) throws InvalidKeyException;\n+            int keyBitLength,\n+            byte[] modulus,\n+            byte[] publicExponent,\n+            byte[] privateExponent,\n+            byte[] primeP,\n+            byte[] primeQ,\n+            byte[] exponentP,\n+            byte[] exponentQ,\n+            byte[] crtCoefficient) throws InvalidKeyException;\n@@ -891,1 +920,1 @@\n-        String keyContainerName, int keySize) throws KeyStoreException;\n+            String keyContainerName, int keySize) throws KeyStoreException;\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CKeyStore.java","additions":52,"deletions":23,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-                    if (algo.equals(\"Windows-MY\")) {\n+                    if (algo.equals(\"Windows-MY\") || algo.equals(\"Windows-MY-CURRENTUSER\")) {\n@@ -96,1 +96,1 @@\n-                    } else if (algo.equals(\"Windows-ROOT\")) {\n+                    } else if (algo.equals(\"Windows-ROOT\") || algo.equals(\"Windows-ROOT-CURRENTUSER\")) {\n@@ -98,0 +98,4 @@\n+                    } else if (algo.equals(\"Windows-MY-LOCALMACHINE\")) {\n+                        return new CKeyStore.MYLocalMachine();\n+                    } else if (algo.equals(\"Windows-ROOT-LOCALMACHINE\")) {\n+                        return new CKeyStore.ROOTLocalMachine();\n@@ -168,0 +172,2 @@\n+                putService(new ProviderService(p, \"KeyStore\",\n+                            \"Windows-MY-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$MY\"));\n@@ -170,0 +176,6 @@\n+                putService(new ProviderService(p, \"KeyStore\",\n+                            \"Windows-ROOT-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$ROOT\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                            \"Windows-MY-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$MYLocalMachine\"));\n+                putService(new ProviderService(p, \"KeyStore\",\n+                            \"Windows-ROOT-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$ROOTLocalMachine\"));\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/SunMSCAPI.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+#define KEYSTORE_LOCATION_CURRENTUSER  0\n+#define KEYSTORE_LOCATION_LOCALMACHINE 1\n+\n@@ -389,1 +392,1 @@\n- * Signature: (Ljava\/lang\/String;)V\n+ * Signature: (Ljava\/lang\/String;I)V\n@@ -392,1 +395,1 @@\n-  (JNIEnv *env, jobject obj, jstring jCertStoreName)\n+  (JNIEnv *env, jobject obj, jstring jCertStoreName, jint jCertStoreLocation)\n@@ -410,1 +413,0 @@\n-\n@@ -418,2 +420,14 @@\n-        if ((hCertStore = ::CertOpenSystemStore(NULL, pszCertStoreName))\n-            == NULL) {\n+\n+        if (jCertStoreLocation == KEYSTORE_LOCATION_CURRENTUSER) {\n+            hCertStore = ::CertOpenSystemStore(NULL, pszCertStoreName);\n+        }\n+        else if (jCertStoreLocation == KEYSTORE_LOCATION_LOCALMACHINE) {\n+            hCertStore = ::CertOpenStore(CERT_STORE_PROV_SYSTEM_A, 0, NULL,\n+                CERT_SYSTEM_STORE_LOCAL_MACHINE, pszCertStoreName);\n+        }\n+        else {\n+            PP(\"jCertStoreLocation is not a valid value\");\n+            __leave;\n+        }\n+\n+        if (hCertStore == NULL) {\n@@ -472,1 +486,1 @@\n-            HCRYPTPROV hCryptProv = NULL;\n+            HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProv = NULL;\n","filename":"src\/jdk.crypto.mscapi\/windows\/native\/libsunmscapi\/security.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.SecurityTools;\n+\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+\n+\/*\n+ * @test\n+ * @bug 6782021\n+ * @requires os.family == \"windows\"\n+ * @library \/test\/lib\n+ * @summary More keystore types\n+ *\/\n+public class AllTypes {\n+\n+    public static void main(String[] args) throws Exception {\n+        var nm = test(\"windows-my\");\n+        var nr = test(\"windows-root\");\n+        var nmu = test(\"windows-my-currentuser\");\n+        var nru = test(\"windows-root-currentuser\");\n+        var nmm = adminTest(\"windows-my-localmachine\");\n+        var nrm = adminTest(\"windows-root-localmachine\");\n+        Asserts.assertEQ(nm, nmu);\n+        Asserts.assertEQ(nr, nru);\n+    }\n+\n+    private static boolean hasAccess(String type) throws Exception {\n+        try {\n+            KeyStore ks = KeyStore.getInstance(type);\n+            ks.load(null, null);\n+            return true;\n+        } catch (IOException ioe) {\n+            if (ioe.getMessage().trim().endsWith(\"java.security.KeyStoreException: Access is denied.\")) {\n+                return false;\n+            }\n+            throw ioe;\n+        }\n+    }\n+\n+    private static List<String> adminTest(String type) throws Exception {\n+        if (hasAccess(type)) {\n+            return test(type);\n+        }\n+        System.out.println(\"Ignoring: \" + type + \" as it requires admin access\");\n+        return null;\n+    }\n+\n+    private static List<String> test(String type) throws Exception {\n+        var stdType = \"Windows-\" + type.substring(8).toUpperCase(Locale.ROOT);\n+        SecurityTools.keytool(\"-storetype \" + type + \" -list\")\n+        .shouldHaveExitValue(0)\n+        .shouldContain(\"Keystore provider: SunMSCAPI\")\n+        .shouldContain(\"Keystore type: \" + stdType);\n+        KeyStore ks = KeyStore.getInstance(type);\n+        ks.load(null, null);\n+        var content = Collections.list(ks.aliases());\n+        Collections.sort(content);\n+        return content;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/mscapi\/AllTypes.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}