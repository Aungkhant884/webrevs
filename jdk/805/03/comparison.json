{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -39,3 +40,2 @@\n-  char* const addr = _top;\n-  _top += size;\n-  assert(_top <= _end, \"Allocation should never fail\");\n+  char* const addr = Atomic::fetch_and_add(&_top, size);\n+  assert(addr + size <= _end, \"Allocation should never fail\");\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/z\/zForwarding.inline.hpp\"\n-#include \"gc\/z\/zForwardingTable.inline.hpp\"\n-#include \"gc\/z\/zGlobals.hpp\"\n-#include \"gc\/z\/zGranuleMap.inline.hpp\"\n-#include \"utilities\/debug.hpp\"\n-\n-ZForwardingTable::ZForwardingTable() :\n-    _map(ZAddressOffsetMax) {}\n-\n-void ZForwardingTable::insert(ZForwarding* forwarding) {\n-  const uintptr_t offset = forwarding->start();\n-  const size_t size = forwarding->size();\n-\n-  assert(_map.get(offset) == NULL, \"Invalid entry\");\n-  _map.put(offset, size, forwarding);\n-}\n-\n-void ZForwardingTable::remove(ZForwarding* forwarding) {\n-  const uintptr_t offset = forwarding->start();\n-  const size_t size = forwarding->size();\n-\n-  assert(_map.get(offset) == forwarding, \"Invalid entry\");\n-  _map.put(offset, size, NULL);\n-}\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingTable.cpp","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"gc\/z\/zForwarding.inline.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"gc\/z\/zGlobals.hpp\"\n@@ -30,0 +32,4 @@\n+#include \"utilities\/debug.hpp\"\n+\n+inline ZForwardingTable::ZForwardingTable() :\n+    _map(ZAddressOffsetMax) {}\n@@ -36,0 +42,16 @@\n+inline void ZForwardingTable::insert(ZForwarding* forwarding) {\n+  const uintptr_t offset = forwarding->start();\n+  const size_t size = forwarding->size();\n+\n+  assert(_map.get(offset) == NULL, \"Invalid entry\");\n+  _map.put(offset, size, forwarding);\n+}\n+\n+inline void ZForwardingTable::remove(ZForwarding* forwarding) {\n+  const uintptr_t offset = forwarding->start();\n+  const size_t size = forwarding->size();\n+\n+  assert(_map.get(offset) == forwarding, \"Invalid entry\");\n+  _map.put(offset, size, NULL);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingTable.inline.hpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    _relocation_set(),\n+    _relocation_set(&_workers),\n@@ -380,2 +380,5 @@\n-  \/\/ Select pages to relocate\n-  selector.select(&_relocation_set);\n+  \/\/ Select relocation set\n+  selector.select();\n+\n+  \/\/ Install relocation set\n+  _relocation_set.install(&selector);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"gc\/z\/zArray.inline.hpp\"\n@@ -28,0 +29,1 @@\n+#include \"gc\/z\/zRelocationSetSelector.inline.hpp\"\n@@ -29,1 +31,3 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"gc\/z\/zTask.hpp\"\n+#include \"gc\/z\/zWorkers.hpp\"\n+#include \"runtime\/atomic.hpp\"\n@@ -32,4 +36,15 @@\n-ZRelocationSet::ZRelocationSet() :\n-    _allocator(),\n-    _forwardings(NULL),\n-    _nforwardings(0) {}\n+class ZRelocationSetInstallTask : public ZTask {\n+private:\n+  ZForwardingAllocator* const    _allocator;\n+  ZForwarding**                  _forwardings;\n+  const size_t                   _nforwardings;\n+  ZArrayParallelIterator<ZPage*> _small_iter;\n+  ZArrayParallelIterator<ZPage*> _medium_iter;\n+  volatile size_t                _small_next;\n+  volatile size_t                _medium_next;\n+\n+  void install(ZForwarding* forwarding, volatile size_t* next) {\n+    const size_t index = Atomic::fetch_and_add(next, 1u);\n+    assert(index < _nforwardings, \"Invalid index\");\n+    _forwardings[index] = forwarding;\n+  }\n@@ -37,5 +52,3 @@\n-void ZRelocationSet::populate(ZPage* const* small, size_t nsmall,\n-                              ZPage* const* medium, size_t nmedium,\n-                              size_t forwarding_entries) {\n-  \/\/ Set relocation set length\n-  _nforwardings = nsmall + nmedium;\n+  void install_small(ZForwarding* forwarding) {\n+    install(forwarding, &_small_next);\n+  }\n@@ -43,6 +56,3 @@\n-  \/\/ Initialize forwarding allocator to have room for the\n-  \/\/ relocation set, all forwardings, and all forwarding entries.\n-  const size_t relocation_set_size = _nforwardings * sizeof(ZForwarding*);\n-  const size_t forwardings_size = _nforwardings * sizeof(ZForwarding);\n-  const size_t forwarding_entries_size = forwarding_entries * sizeof(ZForwardingEntry);\n-  _allocator.reset(relocation_set_size + forwardings_size + forwarding_entries_size);\n+  void install_medium(ZForwarding* forwarding) {\n+    install(forwarding, &_medium_next);\n+  }\n@@ -50,2 +60,10 @@\n-  \/\/ Allocate relocation set\n-  _forwardings = new (_allocator.alloc(relocation_set_size)) ZForwarding*[_nforwardings];\n+public:\n+  ZRelocationSetInstallTask(ZForwardingAllocator* allocator, const ZRelocationSetSelector* selector) :\n+      ZTask(\"ZRelocationSetInstallTask\"),\n+      _allocator(allocator),\n+      _forwardings(NULL),\n+      _nforwardings(selector->small()->length() + selector->medium()->length()),\n+      _small_iter(selector->small()),\n+      _medium_iter(selector->medium()),\n+      _small_next(selector->medium()->length()),\n+      _medium_next(0) {\n@@ -53,2 +71,6 @@\n-  \/\/ Populate relocation set array\n-  size_t j = 0;\n+    \/\/ Reset the allocator to have room for the relocation\n+    \/\/ set, all forwardings, and all forwarding entries.\n+    const size_t relocation_set_size = _nforwardings * sizeof(ZForwarding*);\n+    const size_t forwardings_size = _nforwardings * sizeof(ZForwarding);\n+    const size_t forwarding_entries_size = selector->forwarding_entries() * sizeof(ZForwardingEntry);\n+    _allocator->reset(relocation_set_size + forwardings_size + forwarding_entries_size);\n@@ -56,3 +78,2 @@\n-  \/\/ Populate medium pages\n-  for (size_t i = 0; i < nmedium; i++) {\n-    _forwardings[j++] = ZForwarding::alloc(&_allocator, medium[i]);\n+    \/\/ Allocate relocation set\n+    _forwardings = new (_allocator->alloc(relocation_set_size)) ZForwarding*[_nforwardings];\n@@ -61,3 +82,16 @@\n-  \/\/ Populate small pages\n-  for (size_t i = 0; i < nsmall; i++) {\n-    _forwardings[j++] = ZForwarding::alloc(&_allocator, small[i]);\n+  ~ZRelocationSetInstallTask() {\n+    assert(_allocator->is_full(), \"Should be full\");\n+  }\n+\n+  virtual void work() {\n+    \/\/ Allocate and install forwardings for small pages\n+    for (ZPage* page; _small_iter.next(&page);) {\n+      ZForwarding* const forwarding = ZForwarding::alloc(_allocator, page);\n+      install_small(forwarding);\n+    }\n+\n+    \/\/ Allocate and install forwardings for medium pages\n+    for (ZPage* page; _medium_iter.next(&page);) {\n+      ZForwarding* const forwarding = ZForwarding::alloc(_allocator, page);\n+      install_medium(forwarding);\n+    }\n@@ -66,1 +100,22 @@\n-  assert(_allocator.is_full(), \"Should be full\");\n+  ZForwarding** forwardings() const {\n+    return _forwardings;\n+  }\n+\n+  size_t nforwardings() const {\n+    return _nforwardings;\n+  }\n+};\n+\n+ZRelocationSet::ZRelocationSet(ZWorkers* workers) :\n+    _workers(workers),\n+    _allocator(),\n+    _forwardings(NULL),\n+    _nforwardings(0) {}\n+\n+void ZRelocationSet::install(const ZRelocationSetSelector* selector) {\n+  \/\/ Install relocation set\n+  ZRelocationSetInstallTask task(&_allocator, selector);\n+  _workers->run_concurrent(&task);\n+\n+  _forwardings = task.forwardings();\n+  _nforwardings = task.nforwardings();\n@@ -69,1 +124,1 @@\n-  ZStatRelocation::set_at_populate_relocation_set(_allocator.size());\n+  ZStatRelocation::set_at_install_relocation_set(_allocator.size());\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.cpp","additions":83,"deletions":28,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"memory\/allocation.hpp\"\n@@ -32,1 +31,2 @@\n-class ZPage;\n+class ZRelocationSetSelector;\n+class ZWorkers;\n@@ -38,0 +38,1 @@\n+  ZWorkers*            _workers;\n@@ -43,1 +44,1 @@\n-  ZRelocationSet();\n+  ZRelocationSet(ZWorkers* workers);\n@@ -45,3 +46,1 @@\n-  void populate(ZPage* const* small, size_t nsmall,\n-                ZPage* const* medium, size_t nmedium,\n-                size_t forwarding_entries);\n+  void install(const ZRelocationSetSelector* selector);\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSet.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"gc\/z\/zRelocationSet.hpp\"\n@@ -55,2 +54,0 @@\n-    _sorted_pages(NULL),\n-    _nselected(0),\n@@ -60,4 +57,0 @@\n-ZRelocationSetSelectorGroup::~ZRelocationSetSelectorGroup() {\n-  FREE_C_HEAP_ARRAY(ZPage*, _sorted_pages);\n-}\n-\n@@ -105,1 +98,0 @@\n-  const size_t npages = _registered_pages.length();\n@@ -108,6 +100,1 @@\n-  size_t partitions[npartitions];\n-\n-  \/\/ Allocate destination array\n-  assert(_sorted_pages == NULL, \"Already initialized\");\n-  _sorted_pages = NEW_C_HEAP_ARRAY(ZPage*, npages, mtGC);\n-  debug_only(memset(_sorted_pages, 0, npages * sizeof(ZPage*)));\n+  int partitions[npartitions] = { \/* zero initialize *\/ };\n@@ -116,1 +103,0 @@\n-  memset(partitions, 0, sizeof(partitions));\n@@ -124,1 +110,1 @@\n-  size_t finger = 0;\n+  int finger = 0;\n@@ -126,1 +112,1 @@\n-    const size_t slots = partitions[i];\n+    const int slots = partitions[i];\n@@ -131,0 +117,4 @@\n+  \/\/ Allocate destination array\n+  const int npages = _registered_pages.length();\n+  ZArray<ZPage*> sorted_pages(npages, npages, NULL);\n+\n@@ -135,3 +125,3 @@\n-    const size_t finger = partitions[index]++;\n-    assert(_sorted_pages[finger] == NULL, \"Invalid finger\");\n-    _sorted_pages[finger] = page;\n+    const int finger = partitions[index]++;\n+    assert(sorted_pages.at(finger) == NULL, \"Invalid finger\");\n+    sorted_pages.at_put(finger, page);\n@@ -139,0 +129,2 @@\n+\n+  _registered_pages.swap(&sorted_pages);\n@@ -145,3 +137,3 @@\n-  const size_t npages = _registered_pages.length();\n-  size_t selected_from = 0;\n-  size_t selected_to = 0;\n+  const int npages = _registered_pages.length();\n+  int selected_from = 0;\n+  int selected_to = 0;\n@@ -154,1 +146,1 @@\n-  for (size_t from = 1; from <= npages; from++) {\n+  for (int from = 1; from <= npages; from++) {\n@@ -156,1 +148,1 @@\n-    ZPage* const page = _sorted_pages[from - 1];\n+    ZPage* const page = _registered_pages.at(from - 1);\n@@ -164,1 +156,1 @@\n-    const size_t to = ceil((double)(from_live_bytes) \/ (double)(_page_size - _object_size_limit));\n+    const int to = ceil((double)(from_live_bytes) \/ (double)(_page_size - _object_size_limit));\n@@ -170,2 +162,2 @@\n-    const size_t diff_from = from - selected_from;\n-    const size_t diff_to = to - selected_to;\n+    const int diff_from = from - selected_from;\n+    const int diff_to = to - selected_to;\n@@ -179,1 +171,1 @@\n-    log_trace(gc, reloc)(\"Candidate Relocation Set (%s Pages): \" SIZE_FORMAT \"->\" SIZE_FORMAT \", \"\n+    log_trace(gc, reloc)(\"Candidate Relocation Set (%s Pages): %d->%d, \"\n@@ -186,1 +178,1 @@\n-  _nselected = selected_from;\n+  _registered_pages.trunc_to(selected_from);\n@@ -193,4 +185,2 @@\n-  log_trace(gc, reloc)(\"Relocation Set (%s Pages): \" SIZE_FORMAT \"->\" SIZE_FORMAT \", \"\n-                       SIZE_FORMAT \" skipped, \" SIZE_FORMAT \" forwarding entries\",\n-                       _name, selected_from, selected_to, npages - selected_from,\n-                       selected_forwarding_entries);\n+  log_trace(gc, reloc)(\"Relocation Set (%s Pages): %d->%d, %d skipped, \" SIZE_FORMAT \" forwarding entries\",\n+                       _name, selected_from, selected_to, npages - selected_from, selected_forwarding_entries);\n@@ -244,1 +234,1 @@\n-void ZRelocationSetSelector::select(ZRelocationSet* relocation_set) {\n+void ZRelocationSetSelector::select() {\n@@ -258,5 +248,0 @@\n-  \/\/ Populate relocation set\n-  relocation_set->populate(_small.selected(), _small.nselected(),\n-                           _medium.selected(), _medium.nselected(),\n-                           forwarding_entries());\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":25,"deletions":40,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-class ZRelocationSet;\n@@ -79,2 +78,0 @@\n-  ZPage**                          _sorted_pages;\n-  size_t                           _nselected;\n@@ -94,1 +91,0 @@\n-  ~ZRelocationSetSelectorGroup();\n@@ -100,2 +96,1 @@\n-  ZPage* const* selected() const;\n-  size_t nselected() const;\n+  const ZArray<ZPage*>* selected() const;\n@@ -113,1 +108,0 @@\n-  size_t forwarding_entries() const;\n@@ -124,1 +118,6 @@\n-  void select(ZRelocationSet* relocation_set);\n+\n+  void select();\n+\n+  const ZArray<ZPage*>* small() const;\n+  const ZArray<ZPage*>* medium() const;\n+  size_t forwarding_entries() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -69,6 +69,2 @@\n-inline ZPage* const* ZRelocationSetSelectorGroup::selected() const {\n-  return _sorted_pages;\n-}\n-\n-inline size_t ZRelocationSetSelectorGroup::nselected() const {\n-  return _nselected;\n+inline const ZArray<ZPage*>* ZRelocationSetSelectorGroup::selected() const {\n+  return &_registered_pages;\n@@ -85,4 +81,0 @@\n-inline size_t ZRelocationSetSelector::forwarding_entries() const {\n-  return _small.forwarding_entries() + _medium.forwarding_entries();\n-}\n-\n@@ -105,0 +97,12 @@\n+inline const ZArray<ZPage*>* ZRelocationSetSelector::small() const {\n+  return _small.selected();\n+}\n+\n+inline const ZArray<ZPage*>* ZRelocationSetSelector::medium() const {\n+  return _medium.selected();\n+}\n+\n+inline size_t ZRelocationSetSelector::forwarding_entries() const {\n+  return _small.forwarding_entries() + _medium.forwarding_entries();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.inline.hpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1150,1 +1150,1 @@\n-void ZStatRelocation::set_at_populate_relocation_set(size_t forwarding_usage) {\n+void ZStatRelocation::set_at_install_relocation_set(size_t forwarding_usage) {\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-  static void set_at_populate_relocation_set(size_t forwarding_usage);\n+  static void set_at_install_relocation_set(size_t forwarding_usage);\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}