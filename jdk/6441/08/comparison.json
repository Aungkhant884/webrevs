{"files":[{"patch":"@@ -199,2 +199,2 @@\n-\n-  \/\/ Convert \"x - (y+c0)\" into \"(x-y) - c0\"\n+  \/\/ Convert \"x - (y+c0)\" into \"(x-y) - c0\" AND\n+  \/\/ Convert \"c1 - (y+c0)\" into \"(c1-c0) - y\"\n@@ -202,1 +202,4 @@\n-  if (op2 == Op_AddI && ok_to_convert(in2, in1)) {\n+  if (op2 == Op_AddI\n+      && ok_to_convert(in2, in1)\n+      && in2->in(2)->Opcode() == Op_ConI) {\n+    jint c0 = phase->type(in2->in(2))->isa_int()->get_con();\n@@ -204,5 +207,9 @@\n-    Node* in22 = in2->in(2);\n-    const TypeInt* tcon = phase->type(in22)->isa_int();\n-    if (tcon != NULL && tcon->is_con()) {\n-      Node* sub2 = phase->transform( new SubINode(in1, in21) );\n-      Node* neg_c0 = phase->intcon(- tcon->get_con());\n+    if (in1->Opcode() == Op_ConI) {\n+      \/\/ Match c1\n+      jint c1 = phase->type(in1)->isa_int()->get_con();\n+      Node* sub2 = phase->intcon(java_subtract(c1, c0));\n+      return new SubINode(sub2, in21);\n+    } else {\n+      \/\/ Match x\n+      Node* sub2 = phase->transform(new SubINode(in1, in21));\n+      Node* neg_c0 = phase->intcon(-c0);\n@@ -377,1 +384,2 @@\n-  \/\/ Convert \"x - (y+c0)\" into \"(x-y) - c0\"\n+  \/\/ Convert \"x - (y+c0)\" into \"(x-y) - c0\" AND\n+  \/\/ Convert \"c1 - (y+c0)\" into \"(c1-c0) - y\"\n@@ -379,1 +387,4 @@\n-  if (op2 == Op_AddL && ok_to_convert(in2, in1)) {\n+  if (op2 == Op_AddL\n+      && ok_to_convert(in2, in1)\n+      && in2->in(2)->Opcode() == Op_ConL) {\n+    jlong c0 = phase->type(in2->in(2))->isa_long()->get_con();\n@@ -381,5 +392,8 @@\n-    Node* in22 = in2->in(2);\n-    const TypeLong* tcon = phase->type(in22)->isa_long();\n-    if (tcon != NULL && tcon->is_con()) {\n-      Node* sub2 = phase->transform( new SubLNode(in1, in21) );\n-      Node* neg_c0 = phase->longcon(- tcon->get_con());\n+    if (in1->Opcode() == Op_ConL) {\n+      \/\/ Match c1\n+      jlong c1 = phase->type(in1)->isa_long()->get_con();\n+      Node* sub2 = phase->longcon(java_subtract(c1, c0));\n+      return new SubLNode(sub2, in21);\n+    } else {\n+      Node* sub2 = phase->transform(new SubLNode(in1, in21));\n+      Node* neg_c0 = phase->longcon(-c0);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277882\n+ * @summary New subnode ideal optimization: converting \"c0 - (x + c1)\" into \"(c0 - c1) - x\"\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileCommand=dontinline,compiler.c2.TestSubIdealC0Minus_YPlusC1_::test*\n+ *                   -XX:CompileCommand=compileonly,compiler.c2.TestSubIdealC0Minus_YPlusC1_::test*\n+ *                   compiler.c2.TestSubIdealC0Minus_YPlusC1_\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestSubIdealC0Minus_YPlusC1_ {\n+\n+    private static final int I_C0_0 = 1234;\n+    private static final int I_C1 = 1234;\n+    private static final int I_C0_1 = 4321;\n+\n+    private static final long L_C0_0 = 123_456_789_123L;\n+    private static final long L_C1 = 123_456_789_123L;\n+    private static final long L_C0_1 = 654_321;\n+\n+    public static int testIC0EqualsC1(int x) {\n+        return I_C0_0 - (x + I_C1);\n+    }\n+\n+    public static long testLC0EqualsC1(long x) {\n+        return L_C0_0 - (x + L_C1);\n+    }\n+\n+    public static int testIC0NotEqualsC1(int x) {\n+        return I_C0_1 - (x + I_C1);\n+    }\n+\n+    public static long testLC0NotEqualsC1(long x) {\n+        return L_C0_1 - (x + L_C1);\n+    }\n+\n+    public static int testIXPlusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static long testLXPlusC1IsOverflow(long x) {\n+        return Long.MAX_VALUE - (x + Long.MAX_VALUE);\n+    }\n+\n+    public static int testIXPlusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static long testLXPlusC1IsUnderflow(long x) {\n+        return Long.MIN_VALUE - (x + Long.MIN_VALUE);\n+    }\n+\n+    public static int testIC0MinusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static long testLC0MinusC1IsOverflow(long x) {\n+        return Long.MAX_VALUE - (x + Long.MIN_VALUE);\n+    }\n+\n+    public static int testIC0MinusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static long testLC0MinusC1IsUnderflow(long x) {\n+        return Long.MIN_VALUE - (x + Long.MAX_VALUE);\n+    }\n+\n+    public static int testIResultIsOverflow(int x) {\n+        return 2147483637 - (x + 10); \/\/ Integer.MAX_VALUE == 2147483647\n+    }\n+\n+    public static long testLResultIsOverflow(long x) {\n+        return 9223372036854775797L - (x + 10); \/\/ Long.MAX_VALUE == 9223372036854775807\n+    }\n+\n+    public static int testIResultIsUnderflow(int x) {\n+        return -2147483637 - (x + 10); \/\/ Integer.MIN_VALUE == -2147483648\n+    }\n+\n+    public static long testLResultIsUnderflow(long x) {\n+        return -9223372036854775797L - (x + 10); \/\/ Long.MIN_VALUE == -9223372036854775808\n+    }\n+\n+    public static void main(String... args) {\n+        for (int i = 0; i < 50_000; i++) {\n+            Asserts.assertTrue(testIC0EqualsC1(10) == -10);\n+            Asserts.assertTrue(testIC0NotEqualsC1(100) == 2987);\n+            Asserts.assertTrue(testIXPlusC1IsOverflow(10) == -10);\n+            Asserts.assertTrue(testIXPlusC1IsUnderflow(-10) == 10);\n+            Asserts.assertTrue(testIC0MinusC1IsOverflow(10) == -11);\n+            Asserts.assertTrue(testIC0MinusC1IsUnderflow(10) == -9);\n+            Asserts.assertTrue(testIResultIsOverflow(-21) == Integer.MIN_VALUE);\n+            Asserts.assertTrue(testIResultIsUnderflow(2) == Integer.MAX_VALUE);\n+\n+            Asserts.assertTrue(testLC0EqualsC1(10) == -10);\n+            Asserts.assertTrue(testLC0NotEqualsC1(100) == -123456134902L);\n+            Asserts.assertTrue(testLXPlusC1IsOverflow(10) == -10);\n+            Asserts.assertTrue(testLXPlusC1IsUnderflow(-10) == 10);\n+            Asserts.assertTrue(testLC0MinusC1IsOverflow(10) == -11);\n+            Asserts.assertTrue(testLC0MinusC1IsUnderflow(10) == -9);\n+            Asserts.assertTrue(testLResultIsOverflow(-21) == Long.MIN_VALUE);\n+            Asserts.assertTrue(testLResultIsUnderflow(2) == Long.MAX_VALUE);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSubIdealC0Minus_YPlusC1_.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts \"c0 - (x + c1)\" into \"(c0 - c1)\n+ * - x\" in SubINode::Ideal and SubLNode::Ideal.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3 , jvmArgsAppend = {\"-XX:-TieredCompilation\", \"-Xbatch\", \"-Xcomp\"})\n+public class SubIdealC0Minus_YPlusC1_ {\n+\n+    private static final int I_C0 = 1234567;\n+\n+    private static final int I_C1 = 1234567;\n+\n+    private static final long L_C0 = 123_456_789_123_456L;\n+\n+    private static final long L_C1 = 123_456_789_123_456L;\n+\n+    private final int size = 100_000_000;\n+\n+    private int[] ints_a;\n+\n+    private long[] longs_a;\n+\n+    @Setup\n+    public void init() {\n+        ints_a = new int[size];\n+        longs_a = new long[size];\n+        for (int i = 0; i < size; i++) {\n+            ints_a[i] = i;\n+            longs_a[i] = i * i;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void baseline() {\n+        for (int i = 0; i < size; i++) {\n+            sink(ints_a[i]);\n+            sink(longs_a[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void test() {\n+        for (int i = 0; i < size; i++) {\n+            sink(helper(ints_a[i]));\n+            sink(helper(longs_a[i]));\n+        }\n+    }\n+\n+    \/\/ Convert \"c0 - (x + c1)\" into \"(c0 - c1) - x\" for int.\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static int helper(int x) {\n+        return I_C0 - (x + I_C1);\n+    }\n+\n+    \/\/ Convert \"c0 - (x + c1)\" into \"(c0 - c1) - x\" for long.\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static long helper(long x) {\n+        return L_C0 - (x + L_C1);\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void sink(int v) {}\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void sink(long v) {}\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubIdealC0Minus_YPlusC1_.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}