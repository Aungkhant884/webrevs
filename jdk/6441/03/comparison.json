{"files":[{"patch":"@@ -162,0 +162,4 @@\n+static bool ok_to_convert(Node* inc) {\n+  return !is_cloop_increment(inc);\n+}\n+\n@@ -188,0 +192,12 @@\n+  \/\/ Convert \"c0 - (x + c1)\" into \"(c0 - c1) - x\"\n+  if (in2->Opcode() == Op_AddI\n+      && phase->type(in1)->isa_int() != NULL\n+      && phase->type(in1)->isa_int()->is_con()\n+      && phase->type(in2->in(2))->isa_int() != NULL\n+      && phase->type(in2->in(2))->isa_int()->is_con()\n+      && ok_to_convert(in2)) {\n+    jint c0 = phase->type(in1)->isa_int()->get_con();\n+    jint c1 = phase->type(in2->in(2))->isa_int()->get_con();\n+    return new SubINode(phase->intcon(java_subtract(c0, c1)), in2->in(1));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * @test\n+ * @bug 8277882\n+ * @summary New subnode ideal optimization: converting \"c0 - (x + c1)\" into \"(c0 - c1) - x\"\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileCommand=dontinline,compiler.c2.TestSubIdeal::test*\n+ *                   -XX:CompileCommand=compileonly,compiler.c2.TestSubIdeal::test*\n+ *                   compiler.c2.TestSubIdeal\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestSubIdeal {\n+\n+    private static final int C0_0 = 1234;\n+    private static final int C1 = 1234;\n+    private static final int C0_1 = 4321;\n+\n+    public static int testC0EqualsC1(int x) {\n+        return C0_0 - (x + C1);\n+    }\n+\n+    public static int testC0NotEqualsC1(int x) {\n+        return C0_1 - (x + C1);\n+    }\n+\n+    public static int testXPlusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static int testXPlusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static int testC0MinusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static int testC0MinusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static int testResultIsOverflow(int x) {\n+        return 2147483637 - (x + 10); \/\/ Integer.MAX_VALUE == 2147483647\n+    }\n+\n+    public static int testResultIsUnderflow(int x) {\n+        return -2147483637 - (x + 10); \/\/ Integer.MIN_VALUE == -2147483648\n+    }\n+\n+    public static void main(String... args) {\n+        for (int i = 0; i < 50_000; i++) {\n+            Asserts.assertTrue(testC0EqualsC1(10) == -10);\n+            Asserts.assertTrue(testC0NotEqualsC1(100) == 2987);\n+            Asserts.assertTrue(testXPlusC1IsOverflow(10) == -10);\n+            Asserts.assertTrue(testXPlusC1IsUnderflow(-10) == 10);\n+            Asserts.assertTrue(testC0MinusC1IsOverflow(10) == -11);\n+            Asserts.assertTrue(testC0MinusC1IsUnderflow(10) == -9);\n+            Asserts.assertTrue(testResultIsOverflow(-21) == Integer.MIN_VALUE);\n+            Asserts.assertTrue(testResultIsUnderflow(2) == Integer.MAX_VALUE);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSubIdeal.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformations in SubNode::Ideal.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3 , jvmArgsAppend = {\"-XX:-TieredCompilation\", \"-Xbatch\", \"-Xcomp\"})\n+public class SubIdeal {\n+\n+    private static final int C0 = 1234567;\n+\n+    private static final int C1 = 1234567;\n+\n+    private final int size = 100_000_000;\n+\n+    private int[] ints_a;\n+\n+    @Setup\n+    public void init() {\n+        ints_a = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            ints_a[i] = i;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void baseline() {\n+        for (int i = 0; i < size; i++) {\n+            sink(ints_a[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void test() {\n+        for (int i = 0; i < size; i++) {\n+            sink(helper(ints_a[i]));\n+        }\n+    }\n+\n+    \/\/ Convert \"c0 - (x + c1)\" into \"(c0 - c1) - x\".\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static int helper(int x) {\n+        return C0 - (x + C1);\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void sink(int v) {\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubIdeal.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}