{"files":[{"patch":"@@ -6,1 +6,1 @@\n- * @run main\/othervm -XX:-TieredCompilation\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n@@ -8,0 +8,1 @@\n+ *                   -XX:CompileCommand=compileonly,compiler.c2.TestSubIdeal::test*\n@@ -16,1 +17,1 @@\n-    private static final int C0 = 1234;\n+    private static final int C0_0 = 1234;\n@@ -18,0 +19,1 @@\n+    private static final int C0_1 = 4321;\n@@ -19,2 +21,30 @@\n-    public static int test1(int x) {\n-        return C0 - (x + C1);\n+    public static int testC0EqualsC1(int x) {\n+        return C0_0 - (x + C1);\n+    }\n+\n+    public static int testC0NotEqualsC1(int x) {\n+        return C0_1 - (x + C1);\n+    }\n+\n+    public static int testXPlusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static int testXPlusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static int testC0MinusC1IsOverflow(int x) {\n+        return Integer.MAX_VALUE - (x + Integer.MIN_VALUE);\n+    }\n+\n+    public static int testC0MinusC1IsUnderflow(int x) {\n+        return Integer.MIN_VALUE - (x + Integer.MAX_VALUE);\n+    }\n+\n+    public static int testResultIsOverflow(int x) {\n+        return 2147483637 - (x + 10); \/\/ Integer.MAX_VALUE == 2147483647\n+    }\n+\n+    public static int testResultIsUnderflow(int x) {\n+        return -2147483637 - (x + 10); \/\/ Integer.MIN_VALUE == -2147483648\n@@ -25,1 +55,8 @@\n-            Asserts.assertTrue(test1(10) == -10);\n+            Asserts.assertTrue(testC0EqualsC1(10) == -10);\n+            Asserts.assertTrue(testC0NotEqualsC1(100) == 2987);\n+            Asserts.assertTrue(testXPlusC1IsOverflow(10) == -10);\n+            Asserts.assertTrue(testXPlusC1IsUnderflow(-10) == 10);\n+            Asserts.assertTrue(testC0MinusC1IsOverflow(10) == -11);\n+            Asserts.assertTrue(testC0MinusC1IsUnderflow(10) == -9);\n+            Asserts.assertTrue(testResultIsOverflow(-21) == Integer.MIN_VALUE);\n+            Asserts.assertTrue(testResultIsUnderflow(2) == Integer.MAX_VALUE);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestSubIdeal.java","additions":42,"deletions":5,"binary":false,"changes":47,"status":"modified"}]}