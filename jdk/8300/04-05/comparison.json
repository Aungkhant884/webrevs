{"files":[{"patch":"@@ -1879,1 +1879,1 @@\n-                keyAlgName, skcp);\n+                secKey, skcp);\n@@ -2197,1 +2197,0 @@\n-                String secKeyAlg = secKey.getAlgorithm();\n@@ -2200,1 +2199,1 @@\n-                checkWeakConstraint(label, secKeyAlg, skcp);\n+                checkWeakConstraint(label, secKey, skcp);\n@@ -2202,1 +2201,9 @@\n-                \/\/ skip\n+                \/*\n+                 * UnrecoverableKeyException will be thrown for any secret key\n+                 * entries that are protected by a different password than\n+                 * storePass, and we will not be able to check the constraints.\n+                 * This may occurs for keystores such as JCEKS. Note that this\n+                 * is not really a new issue as details about secret key entries\n+                 * other than the fact they exist as entries are not listed ,\n+                 * presumably because we may not have the right password.\n+                 *\/\n@@ -2518,1 +2525,1 @@\n-                    checkWeakConstraint(\"<\" + newAlias + \">\", key.getAlgorithm(), skcp);\n+                    checkWeakConstraint(\"<\" + newAlias + \">\", (SecretKey)key, skcp);\n@@ -5037,2 +5044,2 @@\n-    private void checkWeakConstraint(String label, String algName,\n-            ConstraintsParameters cp) {\n+    private void checkWeakConstraint(String label, SecretKey secKey,\n+            SecretKeyConstraintsParameters skcp) {\n@@ -5040,0 +5047,1 @@\n+        String secKeyAlg = secKey.getAlgorithm();\n@@ -5041,1 +5049,1 @@\n-            LEGACY_CHECK.permits(algName, cp, false);\n+            LEGACY_CHECK.permits(secKeyAlg, skcp, true);\n@@ -5043,2 +5051,11 @@\n-            weakWarnings.add(String.format(\n-                    rb.getString(\"key.algorithm.weak\"), label, algName));\n+            String eMessage = e.getMessage();\n+            if (eMessage.contains(\"constraints check failed on keysize limits\") &&\n+                    e.getReason() == BasicReason.ALGORITHM_CONSTRAINED) {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"key.size.weak\"), label,\n+                        String.format(rb.getString(\"key.bit\"),\n+                        KeyUtil.getKeySize(secKey), secKeyAlg)));\n+            } else {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"key.algorithm.weak\"), label, secKeyAlg));\n+            }\n@@ -5248,1 +5265,1 @@\n-        public SecretKeyConstraintsParameters(Key key) {\n+        private SecretKeyConstraintsParameters(Key key) {\n@@ -5259,1 +5276,1 @@\n-            return null;\n+            return (key == null) ? Set.of() : Set.of(key);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+        {\"key.size.weak\", \"%1$s uses a %2$s which is considered a security risk.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n@@ -36,0 +39,2 @@\n+    private static final String JAVA_SECURITY_FILE = \"java.security\";\n+\n@@ -66,1 +71,1 @@\n-                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n@@ -76,1 +81,1 @@\n-                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n@@ -84,1 +89,1 @@\n-                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n@@ -87,0 +92,11 @@\n+\n+        Files.writeString(Files.createFile(Paths.get(JAVA_SECURITY_FILE)),\n+                \"jdk.security.legacyAlgorithms=AES keySize < 256\\n\");\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg AES -alias aeskey1 -keysize 128 \" +\n+                \"-J-Djava.security.properties=\" +\n+                JAVA_SECURITY_FILE)\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses a 128-bit AES key.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakSecretKeyTest.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}