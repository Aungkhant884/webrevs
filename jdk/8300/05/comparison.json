{"files":[{"patch":"@@ -66,0 +66,1 @@\n+import sun.security.util.ConstraintsParameters;\n@@ -1875,0 +1876,5 @@\n+        SecretKeyConstraintsParameters skcp =\n+                new SecretKeyConstraintsParameters(secKey);\n+        checkWeakConstraint(rb.getString(\"the.generated.secretkey\"),\n+                secKey, skcp);\n+\n@@ -2188,0 +2194,17 @@\n+\n+            try {\n+                SecretKey secKey = (SecretKey) keyStore.getKey(alias, storePass);\n+                SecretKeyConstraintsParameters skcp =\n+                        new SecretKeyConstraintsParameters(secKey);\n+                checkWeakConstraint(label, secKey, skcp);\n+            } catch (UnrecoverableKeyException e) {\n+                \/*\n+                 * UnrecoverableKeyException will be thrown for any secret key\n+                 * entries that are protected by a different password than\n+                 * storePass, and we will not be able to check the constraints.\n+                 * This may occurs for keystores such as JCEKS. Note that this\n+                 * is not really a new issue as details about secret key entries\n+                 * other than the fact they exist as entries are not listed ,\n+                 * presumably because we may not have the right password.\n+                 *\/\n+            }\n@@ -2495,0 +2518,11 @@\n+                keyStore.setEntry(newAlias, entry, pp);\n+            } else {\n+                keyStore.setEntry(newAlias, entry, pp);\n+                try {\n+                    Key key = keyStore.getKey(newAlias, newPass);\n+                    SecretKeyConstraintsParameters skcp =\n+                            new SecretKeyConstraintsParameters(key);\n+                    checkWeakConstraint(\"<\" + newAlias + \">\", (SecretKey)key, skcp);\n+                } catch (UnrecoverableKeyException e) {\n+                    \/\/ skip\n+                }\n@@ -2496,1 +2530,1 @@\n-            keyStore.setEntry(newAlias, entry, pp);\n+\n@@ -5010,0 +5044,21 @@\n+    private void checkWeakConstraint(String label, SecretKey secKey,\n+            SecretKeyConstraintsParameters skcp) {\n+        \/\/ Do not check disabled algorithms for symmetric key based algorithms for now\n+        String secKeyAlg = secKey.getAlgorithm();\n+        try {\n+            LEGACY_CHECK.permits(secKeyAlg, skcp, true);\n+        } catch (CertPathValidatorException e) {\n+            String eMessage = e.getMessage();\n+            if (eMessage.contains(\"constraints check failed on keysize limits\") &&\n+                    e.getReason() == BasicReason.ALGORITHM_CONSTRAINED) {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"key.size.weak\"), label,\n+                        String.format(rb.getString(\"key.bit\"),\n+                        KeyUtil.getKeySize(secKey), secKeyAlg)));\n+            } else {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"key.algorithm.weak\"), label, secKeyAlg));\n+            }\n+        }\n+    }\n+\n@@ -5207,0 +5262,32 @@\n+\n+    private static class SecretKeyConstraintsParameters implements ConstraintsParameters {\n+        private final Key key;\n+        private SecretKeyConstraintsParameters(Key key) {\n+            this.key = key;\n+        }\n+\n+        @Override\n+        public boolean anchorIsJdkCA() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Set<Key> getKeys() {\n+            return (key == null) ? Set.of() : Set.of(key);\n+        }\n+\n+        @Override\n+        public Date getDate() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String getVariant() {\n+            return null;\n+        }\n+\n+        @Override\n+        public String extendedExceptionMsg() {\n+            return null;\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+        {\"key.algorithm.weak\", \"%1$s uses the %2$s algorithm which is considered a security risk.\"},\n+        {\"key.size.weak\", \"%1$s uses a %2$s which is considered a security risk.\"},\n@@ -459,0 +461,1 @@\n+        {\"the.generated.secretkey\", \"The generated secret key\"},\n@@ -488,1 +491,1 @@\n-        {\"whose.sigalg.weak\", \"%1$s uses the %2$s signature algorithm which is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"whose.sigalg.weak\", \"%1$s uses the %2$s signature algorithm which is considered a security risk.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -641,2 +641,1 @@\n-# Legacy algorithms for certification path (CertPath) processing and\n-# signed JAR files.\n+# Legacy cryptographic algorithms and key lengths.\n@@ -644,2 +643,1 @@\n-# In some environments, a certain algorithm or key length may be undesirable\n-# but is not yet disabled.\n+# In some environments, a certain algorithm or key length may be undesirable.\n@@ -658,1 +656,2 @@\n-    RSA keySize < 2048, DSA keySize < 2048\n+    RSA keySize < 2048, DSA keySize < 2048, \\\n+    DES, DESede, MD5\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,1 +162,1 @@\n-                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*considered a security risk\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ReadJar.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8008296\n+ * @bug 8008296 8255552\n@@ -88,1 +88,1 @@\n-        recoverCount = recoverByShell();\n+        recoverCount = recoverByShell() \/ 2;\n@@ -232,0 +232,4 @@\n+        \/*\n+         * The returned count also contains the same number of warnings emitted by\n+         * keytool for the corresponding secret key entries in the keystore.\n+         *\/\n@@ -235,0 +239,1 @@\n+                .shouldMatch(\"this entry is protected by.*uses the PBEWithMD5AndDES algorithm which is considered a security risk\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/StorePasswords.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-        checkWeakGenKeyPair(\"z\", \"-keyalg RSA\", null);\n+        checkWeakGenKeyPair(\"z\", \"-keyalg RSA\", \"nowarn\");\n@@ -163,1 +163,1 @@\n-                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*considered a security risk\")\n@@ -167,1 +167,1 @@\n-                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*considered a security risk\")\n@@ -176,1 +176,1 @@\n-        checkWeakCertReq(\"x\", \"\", null);\n+        checkWeakCertReq(\"x\", \"\", \"nowarn\");\n@@ -181,1 +181,1 @@\n-                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\");\n@@ -186,1 +186,1 @@\n-                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\");\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*considered a security risk\");\n@@ -189,2 +189,2 @@\n-                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\")\n-                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*considered a security risk\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\");\n@@ -198,1 +198,1 @@\n-        checkWeakCertReq(\"z\", \"\", null);\n+        checkWeakCertReq(\"z\", \"\", \"nowarn\");\n@@ -201,1 +201,1 @@\n-                .shouldMatch(\"The issuer.*SHA1withRSA.*will be disabled\");\n+                .shouldMatch(\"The issuer.*SHA1withRSA.*considered a security risk\");\n@@ -213,1 +213,1 @@\n-        checkWeakGenCRL(\"x\", \"\", null);\n+        checkWeakGenCRL(\"x\", \"\", \"nowarn\");\n@@ -216,1 +216,1 @@\n-        checkWeakGenCRL(\"z\", \"\", null);\n+        checkWeakGenCRL(\"z\", \"\", \"nowarn\");\n@@ -733,5 +733,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -741,5 +748,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -749,5 +763,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -757,5 +778,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -765,5 +793,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -775,6 +810,14 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldContain(bad + \" (weak)\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -784,6 +827,14 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldContain(bad + \" (weak)\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -798,5 +849,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated CRL.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated CRL.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated CRL.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -806,9 +864,18 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\")\n-                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n-                    .shouldNotContain(\"(weak\");\n-        } else {\n-            oa.shouldContain(\"Warning:\")\n-                    .shouldMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n-                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n-                    .shouldContain(bad + \" (weak)\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldNotContain(\"(weak\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The CRL.*\" + bad + \".*considered a security risk\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n@@ -822,5 +889,12 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate request.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -830,7 +904,15 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\")\n-                    .shouldNotContain(\"(weak)\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n-                    .shouldContain(bad + \" (weak)\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\")\n+                        .shouldNotContain(\"(weak)\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate request.*\" + bad + \".*considered a security risk\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakAlg.java","additions":158,"deletions":76,"binary":false,"changes":234,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255552\n+ * @summary Test keytool commands associated with secret key entries which use weak algorithms\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+public class WeakSecretKeyTest {\n+\n+    private static final String JAVA_SECURITY_FILE = \"java.security\";\n+\n+    public static void main(String[] args) throws Exception {\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg DESede -alias des3key\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the DESede algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg DES -alias deskey\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the DES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg AES -alias aeskey -keysize 256\")\n+                .shouldNotContain(\"Warning\")\n+                .shouldNotMatch(\"The generated secret key uses the AES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-importpass -keyalg PBEWithMD5AndDES -alias newentry\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldNotMatch(\"<aeskey> uses the AES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        SecurityTools.keytool(\"-importkeystore -srckeystore ks.p12 -destkeystore ks.new \" +\n+                \"-deststoretype pkcs12 -srcstorepass changeit \")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.new -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        Files.writeString(Files.createFile(Paths.get(JAVA_SECURITY_FILE)),\n+                \"jdk.security.legacyAlgorithms=AES keySize < 256\\n\");\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg AES -alias aeskey1 -keysize 128 \" +\n+                \"-J-Djava.security.properties=\" +\n+                JAVA_SECURITY_FILE)\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses a 128-bit AES key.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakSecretKeyTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}