{"files":[{"patch":"@@ -1875,0 +1875,5 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(secKey, null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.secretkey\"),\n+                keyAlgName, cpcp);\n+\n@@ -2188,0 +2193,9 @@\n+\n+            try {\n+                SecretKey secKey = (SecretKey) keyStore.getKey(alias, storePass);\n+                String secKeyAlg = secKey.getAlgorithm();\n+                cpcp = new CertPathConstraintsParameters(secKey, null, null, null);\n+                checkWeakConstraint(label, secKeyAlg, cpcp);\n+            } catch (UnrecoverableKeyException e) {\n+                \/\/ skip\n+            }\n@@ -2495,0 +2509,11 @@\n+                keyStore.setEntry(newAlias, entry, pp);\n+            } else {\n+                keyStore.setEntry(newAlias, entry, pp);\n+                try {\n+                    Key key = keyStore.getKey(newAlias, newPass);\n+                    CertPathConstraintsParameters cpcp =\n+                            new CertPathConstraintsParameters(key, null, null, null);\n+                    checkWeakConstraint(\"<\" + newAlias + \">\", key.getAlgorithm(), cpcp);\n+                } catch (UnrecoverableKeyException e) {\n+                    \/\/ skip\n+                }\n@@ -2496,1 +2521,1 @@\n-            keyStore.setEntry(newAlias, entry, pp);\n+\n@@ -5010,0 +5035,11 @@\n+    private void checkWeakConstraint(String label, String algName,\n+            CertPathConstraintsParameters cpcp) {\n+        \/\/ Do not check disabled algorithms for symmetric key based algorithms for now\n+        try {\n+            LEGACY_CHECK.permits(algName, cpcp, false);\n+        } catch (CertPathValidatorException e) {\n+            weakWarnings.add(String.format(\n+                    rb.getString(\"key.algorithm.weak\"), label, algName));\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+        {\"key.algorithm.weak\", \"%1$s uses the %2$s algorithm which is considered a security risk.\"},\n@@ -459,0 +460,1 @@\n+        {\"the.generated.secretkey\", \"The generated secret key\"},\n@@ -488,1 +490,1 @@\n-        {\"whose.sigalg.weak\", \"%1$s uses the %2$s signature algorithm which is considered a security risk. This algorithm will be disabled in a future update.\"},\n+        {\"whose.sigalg.weak\", \"%1$s uses the %2$s signature algorithm which is considered a security risk.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -658,1 +658,2 @@\n-    RSA keySize < 2048, DSA keySize < 2048\n+    RSA keySize < 2048, DSA keySize < 2048, \\\n+    DES, DESede, MD5\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6890872 8168882 8257722\n+ * @bug 6890872 8168882 8257722 8255552\n@@ -162,1 +162,2 @@\n-                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*will be disabled\")\n+                .shouldNotMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate #.* of signer #.*\" + \"uses the SHA1withRSA.*considered a security risk\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ReadJar.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8008296\n+ * @bug 8008296 8255552\n@@ -88,1 +88,1 @@\n-        recoverCount = recoverByShell();\n+        recoverCount = recoverByShell() \/ 2;\n@@ -232,0 +232,4 @@\n+        \/*\n+         * The returned count also contains the same number of warnings emitted by\n+         * keytool for the corresponding secret key entries in the keystore.\n+         *\/\n@@ -235,0 +239,1 @@\n+                .shouldMatch(\"this entry is protected by.*uses the PBEWithMD5AndDES algorithm which is considered a security risk\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/StorePasswords.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8171319 8177569 8182879 8172404\n+ * @bug 8171319 8177569 8182879 8172404 8255552\n@@ -159,1 +159,1 @@\n-        checkWeakGenKeyPair(\"z\", \"-keyalg RSA\", null);\n+        checkWeakGenKeyPair(\"z\", \"-keyalg RSA\", \"nowarn\");\n@@ -163,1 +163,2 @@\n-                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldNotMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*considered a security risk\")\n@@ -167,1 +168,2 @@\n-                .shouldMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldNotMatch(\"<x>.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"<x>.*SHA1withRSA.*considered a security risk\")\n@@ -176,1 +178,1 @@\n-        checkWeakCertReq(\"x\", \"\", null);\n+        checkWeakCertReq(\"x\", \"\", \"nowarn\");\n@@ -181,1 +183,2 @@\n-                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+                .shouldNotMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\");\n@@ -186,1 +189,2 @@\n-                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\");\n+                .shouldNotMatch(\"The certificate request.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*considered a security risk\");\n@@ -189,2 +193,4 @@\n-                .shouldMatch(\"The certificate request.*SHA1withRSA.*will be disabled\")\n-                .shouldMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\");\n+                .shouldNotMatch(\"The certificate request.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The certificate request.*SHA1withRSA.*considered a security risk\")\n+                .shouldNotMatch(\"The generated certificate.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\");\n@@ -198,1 +204,1 @@\n-        checkWeakCertReq(\"z\", \"\", null);\n+        checkWeakCertReq(\"z\", \"\", \"nowarn\");\n@@ -201,1 +207,2 @@\n-                .shouldMatch(\"The issuer.*SHA1withRSA.*will be disabled\");\n+                .shouldNotMatch(\"The issuer.*SHA1withRSA.*will be disabled\")\n+                .shouldMatch(\"The issuer.*SHA1withRSA.*considered a security risk\");\n@@ -213,1 +220,1 @@\n-        checkWeakGenCRL(\"x\", \"\", null);\n+        checkWeakGenCRL(\"x\", \"\", \"nowarn\");\n@@ -216,1 +223,1 @@\n-        checkWeakGenCRL(\"z\", \"\", null);\n+        checkWeakGenCRL(\"z\", \"\", \"nowarn\");\n@@ -733,5 +740,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The generated certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The generated certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -741,5 +756,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -749,5 +772,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -757,5 +788,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -765,5 +804,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -775,6 +822,15 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldContain(bad + \" (weak)\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -784,6 +840,15 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldContain(bad + \" (weak)\")\n-                    .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldNotMatch(\"The certificate.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldContain(bad + \" (weak)\")\n+                        .shouldMatch(\"The certificate.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -798,5 +863,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated CRL.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The generated CRL.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The generated CRL.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated CRL.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -806,9 +879,19 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\")\n-                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n-                    .shouldNotContain(\"(weak\");\n-        } else {\n-            oa.shouldContain(\"Warning:\")\n-                    .shouldMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n-                    .shouldContain(\"Verified by \" + alias + \" in keystore\")\n-                    .shouldContain(bad + \" (weak)\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldNotContain(\"(weak\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The CRL.*\" + bad + \".*considered a security risk\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The CRL.*\" + bad + \".*will be disabled\")\n+                        .shouldContain(\"Verified by \" + alias + \" in keystore\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n@@ -822,5 +905,13 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The generated certificate request.*\" + bad + \".*considered a security risk\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The generated certificate request.*\" + bad + \".*will be disabled\");\n+                break;\n@@ -830,7 +921,16 @@\n-        if (bad == null) {\n-            oa.shouldNotContain(\"Warning\")\n-                    .shouldNotContain(\"(weak)\");\n-        } else {\n-            oa.shouldContain(\"Warning\")\n-                    .shouldMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n-                    .shouldContain(bad + \" (weak)\");\n+        switch (bad) {\n+            case \"nowarn\":\n+                oa.shouldNotContain(\"Warning\")\n+                        .shouldNotContain(\"(weak)\");\n+                break;\n+            case \"SHA1withRSA\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldNotMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n+                        .shouldMatch(\"The certificate request.*\" + bad + \".*considered a security risk\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n+            case \"1024-bit RSA key\":\n+                oa.shouldContain(\"Warning\")\n+                        .shouldMatch(\"The certificate request.*\" + bad + \".*will be disabled\")\n+                        .shouldContain(bad + \" (weak)\");\n+                break;\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakAlg.java","additions":177,"deletions":77,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255552\n+ * @summary Test keytool commands associated with secret key entries which use weak algorithms\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class WeakSecretKeyTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg DESede -alias des3key\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the DESede algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg DES -alias deskey\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the DES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-genseckey -keyalg AES -alias aeskey -keysize 256\")\n+                .shouldNotContain(\"Warning\")\n+                .shouldNotMatch(\"The generated secret key uses the AES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-importpass -keyalg PBEWithMD5AndDES -alias newentry\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"The generated secret key uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.p12 -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldNotMatch(\"<aeskey> uses the AES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.setResponse(\"changeit\", \"changeit\");\n+        SecurityTools.keytool(\"-importkeystore -srckeystore ks.p12 -destkeystore ks.new \" +\n+                \"-deststoretype pkcs12 -srcstorepass changeit \")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+\n+        SecurityTools.keytool(\"-keystore ks.new -storepass changeit \" +\n+                \"-list -v\")\n+                .shouldContain(\"Warning\")\n+                .shouldMatch(\"<des3key> uses the DESede algorithm.*considered a security risk\")\n+                .shouldMatch(\"<deskey> uses the DES\/CBC algorithm.*considered a security risk\")\n+                .shouldMatch(\"<newentry> uses the PBEWithMD5AndDES algorithm.*considered a security risk\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/WeakSecretKeyTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}