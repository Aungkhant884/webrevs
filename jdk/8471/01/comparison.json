{"files":[{"patch":"@@ -2381,1 +2381,1 @@\n-  if (Posix::set_minimum_stack_sizes() == JNI_ERR) {\n+  if (set_minimum_stack_sizes(PTHREAD_STACK_MIN) == JNI_ERR) {\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1983,1 +1983,1 @@\n-  if (Posix::set_minimum_stack_sizes() == JNI_ERR) {\n+  if (set_minimum_stack_sizes(PTHREAD_STACK_MIN) == JNI_ERR) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4486,1 +4486,1 @@\n-  if (Posix::set_minimum_stack_sizes() == JNI_ERR) {\n+  if (set_minimum_stack_sizes(PTHREAD_STACK_MIN) == JNI_ERR) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -900,67 +900,0 @@\n-\/\/ Check minimum allowable stack sizes for thread creation and to initialize\n-\/\/ the java system classes, including StackOverflowError - depends on page\n-\/\/ size.\n-\/\/ The space needed for frames during startup is platform dependent. It\n-\/\/ depends on word size, platform calling conventions, C frame layout and\n-\/\/ interpreter\/C1\/C2 design decisions. Therefore this is given in a\n-\/\/ platform (os\/cpu) dependent constant.\n-\/\/ To this, space for guard mechanisms is added, which depends on the\n-\/\/ page size which again depends on the concrete system the VM is running\n-\/\/ on. Space for libc guard pages is not included in this size.\n-jint os::Posix::set_minimum_stack_sizes() {\n-  size_t os_min_stack_allowed = PTHREAD_STACK_MIN;\n-\n-  _java_thread_min_stack_allowed = _java_thread_min_stack_allowed +\n-                                   StackOverflow::stack_guard_zone_size() +\n-                                   StackOverflow::stack_shadow_zone_size();\n-\n-  _java_thread_min_stack_allowed = align_up(_java_thread_min_stack_allowed, vm_page_size());\n-  _java_thread_min_stack_allowed = MAX2(_java_thread_min_stack_allowed, os_min_stack_allowed);\n-\n-  size_t stack_size_in_bytes = ThreadStackSize * K;\n-  if (stack_size_in_bytes != 0 &&\n-      stack_size_in_bytes < _java_thread_min_stack_allowed) {\n-    \/\/ The '-Xss' and '-XX:ThreadStackSize=N' options both set\n-    \/\/ ThreadStackSize so we go with \"Java thread stack size\" instead\n-    \/\/ of \"ThreadStackSize\" to be more friendly.\n-    tty->print_cr(\"\\nThe Java thread stack size specified is too small. \"\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n-                  _java_thread_min_stack_allowed \/ K);\n-    return JNI_ERR;\n-  }\n-\n-  \/\/ Make the stack size a multiple of the page size so that\n-  \/\/ the yellow\/red zones can be guarded.\n-  JavaThread::set_stack_size_at_create(align_up(stack_size_in_bytes, vm_page_size()));\n-\n-  \/\/ Reminder: a compiler thread is a Java thread.\n-  _compiler_thread_min_stack_allowed = _compiler_thread_min_stack_allowed +\n-                                       StackOverflow::stack_guard_zone_size() +\n-                                       StackOverflow::stack_shadow_zone_size();\n-\n-  _compiler_thread_min_stack_allowed = align_up(_compiler_thread_min_stack_allowed, vm_page_size());\n-  _compiler_thread_min_stack_allowed = MAX2(_compiler_thread_min_stack_allowed, os_min_stack_allowed);\n-\n-  stack_size_in_bytes = CompilerThreadStackSize * K;\n-  if (stack_size_in_bytes != 0 &&\n-      stack_size_in_bytes < _compiler_thread_min_stack_allowed) {\n-    tty->print_cr(\"\\nThe CompilerThreadStackSize specified is too small. \"\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n-                  _compiler_thread_min_stack_allowed \/ K);\n-    return JNI_ERR;\n-  }\n-\n-  _vm_internal_thread_min_stack_allowed = align_up(_vm_internal_thread_min_stack_allowed, vm_page_size());\n-  _vm_internal_thread_min_stack_allowed = MAX2(_vm_internal_thread_min_stack_allowed, os_min_stack_allowed);\n-\n-  stack_size_in_bytes = VMThreadStackSize * K;\n-  if (stack_size_in_bytes != 0 &&\n-      stack_size_in_bytes < _vm_internal_thread_min_stack_allowed) {\n-    tty->print_cr(\"\\nThe VMThreadStackSize specified is too small. \"\n-                  \"Specify at least \" SIZE_FORMAT \"k\",\n-                  _vm_internal_thread_min_stack_allowed \/ K);\n-    return JNI_ERR;\n-  }\n-  return JNI_OK;\n-}\n-\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":0,"deletions":67,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -53,10 +53,0 @@\n-  \/\/ Minimum stack size a thread can be created with (allowing\n-  \/\/ the VM to completely create the thread and enter user code).\n-  \/\/ The initial values exclude any guard pages (by HotSpot or libc).\n-  \/\/ set_minimum_stack_sizes() will add the size required for\n-  \/\/ HotSpot guard pages depending on page size and flag settings.\n-  \/\/ Libc guard pages are never considered by these values.\n-  static size_t _compiler_thread_min_stack_allowed;\n-  static size_t _java_thread_min_stack_allowed;\n-  static size_t _vm_internal_thread_min_stack_allowed;\n-\n@@ -69,2 +59,0 @@\n-  \/\/ Check and sets minimum stack sizes\n-  static jint set_minimum_stack_sizes();\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3878,1 +3878,0 @@\n-size_t os::win32::_default_stack_size        = 0;\n@@ -3928,5 +3927,0 @@\n-  _default_stack_size = os::current_stack_size();\n-  assert(_default_stack_size > (size_t) _vm_page_size, \"invalid stack size\");\n-  assert((_default_stack_size & (_vm_page_size - 1)) == 0,\n-         \"stack size not a multiple of page size\");\n-\n@@ -4253,0 +4247,10 @@\n+\/\/ Minimum usable stack sizes required to get to user code. Space for\n+\/\/ HotSpot guard pages is added later.\n+size_t os::_compiler_thread_min_stack_allowed = 48 * K;\n+size_t os::_java_thread_min_stack_allowed = 40 * K;\n+#ifdef _LP64\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n+#else\n+size_t os::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n+#endif \/\/ _LP64\n+\n@@ -4279,25 +4283,7 @@\n-  \/\/ but only commit a small portion of it.\n-  size_t stack_commit_size = align_up(ThreadStackSize*K, os::vm_page_size());\n-  size_t default_reserve_size = os::win32::default_stack_size();\n-  size_t actual_reserve_size = stack_commit_size;\n-  if (stack_commit_size < default_reserve_size) {\n-    \/\/ If stack_commit_size == 0, we want this too\n-    actual_reserve_size = default_reserve_size;\n-  }\n-\n-  \/\/ Check minimum allowable stack size for thread creation and to initialize\n-  \/\/ the java system classes, including StackOverflowError - depends on page\n-  \/\/ size.  Add two 4K pages for compiler2 recursion in main thread.\n-  \/\/ Add in 4*BytesPerWord 4K pages to account for VM stack during\n-  \/\/ class initialization depending on 32 or 64 bit VM.\n-  size_t min_stack_allowed =\n-            (size_t)(StackOverflow::stack_guard_zone_size() +\n-                     StackOverflow::stack_shadow_zone_size() +\n-                     (4*BytesPerWord COMPILER2_PRESENT(+2)) * 4 * K);\n-\n-  min_stack_allowed = align_up(min_stack_allowed, os::vm_page_size());\n-\n-  if (actual_reserve_size < min_stack_allowed) {\n-    tty->print_cr(\"\\nThe Java thread stack size specified is too small. \"\n-                  \"Specify at least %dk\",\n-                  min_stack_allowed \/ K);\n+  \/\/ but only commit a small portion of it.  This stack size is the size of this\n+  \/\/ current thread but is larger than we need for Java threads.\n+  \/\/ If -Xss is given to the launcher, it will pick 64K as default stack size and pass that.\n+  size_t minimum_stack_size = 64*K;\n+\n+  \/\/ Check and sets minimum stack sizes against command line options\n+  if (set_minimum_stack_sizes(minimum_stack_size) == JNI_ERR) {\n@@ -4307,1 +4293,5 @@\n-  JavaThread::set_stack_size_at_create(stack_commit_size);\n+  size_t actual_reserve_size = JavaThread::stack_size_at_create();\n+  if (actual_reserve_size == 0) {\n+    \/\/ -Xss or -XX:ThreadStackSize were not given, use the current stack size.\n+    actual_reserve_size = current_stack_size();\n+  }\n@@ -4309,1 +4299,1 @@\n-  \/\/ Calculate theoretical max. size of Threads to guard gainst artificial\n+  \/\/ Calculate theoretical max. size of Threads to guard against artificial\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":23,"deletions":33,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-  static size_t _default_stack_size;\n@@ -106,3 +105,0 @@\n-  \/\/ Default stack size for the current process.\n-  static size_t default_stack_size() { return _default_stack_size; }\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -420,3 +420,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 192 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 192 * K;\n+size_t os::_java_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -350,3 +350,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 72 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 72 * K;\n+size_t os::_java_thread_min_stack_allowed = 72 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 72 * K;\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -662,2 +662,2 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 48 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 48 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 48 * K;\n+size_t os::_java_thread_min_stack_allowed = 48 * K;\n@@ -665,1 +665,1 @@\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n@@ -667,1 +667,1 @@\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -164,3 +164,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 64 * K;\n+size_t os::_java_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -312,3 +312,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 72 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 72 * K;\n+size_t os::_java_thread_min_stack_allowed = 72 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 72 * K;\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -421,3 +421,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 4)) * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 4)) * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n+size_t os::_compiler_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 4)) * K;\n+size_t os::_java_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 4)) * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -433,3 +433,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 64 * K;\n+size_t os::_java_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -311,3 +311,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 72 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 72 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 72 * K;\n+size_t os::_java_thread_min_stack_allowed = 72 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 72 * K;\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -379,3 +379,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = (52 DEBUG_ONLY(+ 32)) * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 8)) * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 32 * K;\n+size_t os::_compiler_thread_min_stack_allowed = (52 DEBUG_ONLY(+ 32)) * K;\n+size_t os::_java_thread_min_stack_allowed = (32 DEBUG_ONLY(+ 8)) * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 32 * K;\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -502,2 +502,2 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 48 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 40 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 48 * K;\n+size_t os::_java_thread_min_stack_allowed = 40 * K;\n@@ -505,1 +505,1 @@\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n@@ -507,1 +507,1 @@\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = (48 DEBUG_ONLY(+ 4)) * K;\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -188,3 +188,3 @@\n-size_t os::Posix::_compiler_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_java_thread_min_stack_allowed = 64 * K;\n-size_t os::Posix::_vm_internal_thread_min_stack_allowed = 64 * K;\n+size_t os::_compiler_thread_min_stack_allowed = 64 * K;\n+size_t os::_java_thread_min_stack_allowed = 64 * K;\n+size_t os::_vm_internal_thread_min_stack_allowed = 64 * K;\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1996,0 +1996,66 @@\n+\n+\/\/ Check minimum allowable stack sizes for thread creation and to initialize\n+\/\/ the java system classes, including StackOverflowError - depends on page\n+\/\/ size.\n+\/\/ The space needed for frames during startup is platform dependent. It\n+\/\/ depends on word size, platform calling conventions, C frame layout and\n+\/\/ interpreter\/C1\/C2 design decisions. Therefore this is given in a\n+\/\/ platform (os\/cpu) dependent constant.\n+\/\/ To this, space for guard mechanisms is added, which depends on the\n+\/\/ page size which again depends on the concrete system the VM is running\n+\/\/ on. Space for libc guard pages is not included in this size.\n+jint os::set_minimum_stack_sizes(size_t os_min_stack_allowed) {\n+\n+  _java_thread_min_stack_allowed = _java_thread_min_stack_allowed +\n+                                   StackOverflow::stack_guard_zone_size() +\n+                                   StackOverflow::stack_shadow_zone_size();\n+\n+  _java_thread_min_stack_allowed = align_up(_java_thread_min_stack_allowed, vm_page_size());\n+  _java_thread_min_stack_allowed = MAX2(_java_thread_min_stack_allowed, os_min_stack_allowed);\n+\n+  size_t stack_size_in_bytes = ThreadStackSize * K;\n+  if (stack_size_in_bytes != 0 &&\n+      stack_size_in_bytes < _java_thread_min_stack_allowed) {\n+    \/\/ The '-Xss' and '-XX:ThreadStackSize=N' options both set\n+    \/\/ ThreadStackSize so we go with \"Java thread stack size\" instead\n+    \/\/ of \"ThreadStackSize\" to be more friendly.\n+    tty->print_cr(\"\\nThe Java thread stack size specified is too small. \"\n+                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  _java_thread_min_stack_allowed \/ K);\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ Make the stack size a multiple of the page size so that\n+  \/\/ the yellow\/red zones can be guarded.\n+  JavaThread::set_stack_size_at_create(align_up(stack_size_in_bytes, vm_page_size()));\n+\n+  \/\/ Reminder: a compiler thread is a Java thread.\n+  _compiler_thread_min_stack_allowed = _compiler_thread_min_stack_allowed +\n+                                       StackOverflow::stack_guard_zone_size() +\n+                                       StackOverflow::stack_shadow_zone_size();\n+\n+  _compiler_thread_min_stack_allowed = align_up(_compiler_thread_min_stack_allowed, vm_page_size());\n+  _compiler_thread_min_stack_allowed = MAX2(_compiler_thread_min_stack_allowed, os_min_stack_allowed);\n+\n+  stack_size_in_bytes = CompilerThreadStackSize * K;\n+  if (stack_size_in_bytes != 0 &&\n+      stack_size_in_bytes < _compiler_thread_min_stack_allowed) {\n+    tty->print_cr(\"\\nThe CompilerThreadStackSize specified is too small. \"\n+                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  _compiler_thread_min_stack_allowed \/ K);\n+    return JNI_ERR;\n+  }\n+\n+  _vm_internal_thread_min_stack_allowed = align_up(_vm_internal_thread_min_stack_allowed, vm_page_size());\n+  _vm_internal_thread_min_stack_allowed = MAX2(_vm_internal_thread_min_stack_allowed, os_min_stack_allowed);\n+\n+  stack_size_in_bytes = VMThreadStackSize * K;\n+  if (stack_size_in_bytes != 0 &&\n+      stack_size_in_bytes < _vm_internal_thread_min_stack_allowed) {\n+    tty->print_cr(\"\\nThe VMThreadStackSize specified is too small. \"\n+                  \"Specify at least \" SIZE_FORMAT \"k\",\n+                  _vm_internal_thread_min_stack_allowed \/ K);\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -290,0 +290,13 @@\n+  \/\/ Minimum stack size a thread can be created with (allowing\n+  \/\/ the VM to completely create the thread and enter user code).\n+  \/\/ The initial values exclude any guard pages (by HotSpot or libc).\n+  \/\/ set_minimum_stack_sizes() will add the size required for\n+  \/\/ HotSpot guard pages depending on page size and flag settings.\n+  \/\/ Libc guard pages are never considered by these values.\n+  static size_t _compiler_thread_min_stack_allowed;\n+  static size_t _java_thread_min_stack_allowed;\n+  static size_t _vm_internal_thread_min_stack_allowed;\n+\n+  \/\/ Check and sets minimum stack sizes\n+  static jint set_minimum_stack_sizes(size_t os_min_stack_allowed);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+    static String testShadowSize = null;\n+\n@@ -93,0 +95,19 @@\n+    static ProcessBuilder createProcessWithOptions(String stackOption, String stackSize) throws Exception {\n+        if (testShadowSize == null) {\n+            return ProcessTools.createJavaProcessBuilder(\n+                stackOption + stackSize,\n+                \/\/ Uncomment the following to get log output\n+                \/\/ that shows actual thread creation sizes.\n+                \/\/ \"-Xlog:os+thread\",\n+                \"-version\");\n+        } else {\n+            return ProcessTools.createJavaProcessBuilder(\n+                stackOption + stackSize,\n+                \/\/ Uncomment the following to get log output\n+                \/\/ that shows actual thread creation sizes.\n+                \/\/ \"-Xlog:os+thread\",\n+                \"-XX:StackShadowPages=\" + testShadowSize,\n+                \"-version\");\n+        }\n+    }\n+\n@@ -104,7 +125,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            stackOption + stackSize,\n-            \/\/ Uncomment the following to get log output\n-            \/\/ that shows actual thread creation sizes.\n-            \/\/ \"-Xlog:os+thread\",\n-            \"-version\");\n-\n+        ProcessBuilder pb = createProcessWithOptions(stackOption, stackSize);\n@@ -147,7 +162,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            stackOption + stackSize,\n-            \/\/ Uncomment the following to get log output\n-            \/\/ that shows actual thread creation sizes.\n-            \/\/ \"-Xlog:os+thread\",\n-            \"-version\");\n-\n+        ProcessBuilder pb = createProcessWithOptions(stackOption, stackSize);\n@@ -160,1 +169,1 @@\n-    public static void main(String... args) throws Exception {\n+    public static void test(String... args) throws Exception {\n@@ -212,0 +221,9 @@\n+\n+    \/\/ aarch64 StackShadowPage size range is 25-55\n+    static String shadowSizes[] = { null, \"30\" };\n+    public static void main(java.lang.String[] unused) throws Exception {\n+        for (String sz : shadowSizes) {\n+            testShadowSize = sz;\n+            test();\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TooSmallStackSize.java","additions":33,"deletions":15,"binary":false,"changes":48,"status":"modified"}]}