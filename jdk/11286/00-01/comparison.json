{"files":[{"patch":"@@ -325,1 +325,3 @@\n-      if (_from_env != nullptr && _from_env->has_pending_exception()) {\n+      if (_from_env != nullptr && !_from_env->is_hotspot() && _from_env->has_pending_exception()) {\n+        \/\/ Cannot get name of exception thrown by `encode` as that involves\n+        \/\/ calling into libjvmci which in turn can raise another exception.\n@@ -327,1 +329,1 @@\n-        decode(THREAD, runtimeKlass, 0L);\n+        decode(THREAD, runtimeKlass, -2L);\n@@ -330,0 +332,1 @@\n+        Symbol *ex_name = PENDING_EXCEPTION->klass()->name();\n@@ -331,1 +334,5 @@\n-        decode(THREAD, runtimeKlass, 0L);\n+        if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+          decode(THREAD, runtimeKlass, -1L);\n+        } else {\n+          decode(THREAD, runtimeKlass, -2L);\n+        }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -210,3 +210,1 @@\n-     * Decodes the exception encoded in {@code buffer} and throws it. If {@code buffer == 0} then\n-     * something went wrong (e.g. OutOfMemoryError) while encoding the exception. In this case, an\n-     * {@link InternalError} is thrown.\n+     * Decodes the exception encoded in {@code buffer} and throws it.\n@@ -214,2 +212,8 @@\n-     * @param buffer a native byte buffer containing an exception encoded by\n-     *            {@link #encodeThrowable}\n+     * @param errorOrBuffer an error code or a native byte buffer containing an exception encoded by\n+     *            {@link #encodeThrowable}. Error code values and their meanings are:\n+     *\n+     *            <pre>\n+     *             0: native memory for the buffer could not be allocated\n+     *            -1: an OutOfMemoryError was thrown while encoding the exception\n+     *            -2: some other throwable was thrown while encoding the exception\n+     *            <\/pre>\n@@ -218,3 +222,3 @@\n-    static void decodeAndThrowThrowable(long buffer) throws Throwable {\n-        if (buffer == 0L) {\n-            throw new InternalError(String.format(\"unexpected problem occurred while encoding an exception to translate it from %s to %s\",\n+    static void decodeAndThrowThrowable(long errorOrBuffer) throws Throwable {\n+        if (errorOrBuffer >= -2L && errorOrBuffer <= 0) {\n+            String context = String.format(\"while encoding an exception to translate it from %s to %s\",\n@@ -222,1 +226,8 @@\n-                            IS_IN_NATIVE_IMAGE ? \"libjvmci\" : \"HotSpot\"));\n+                            IS_IN_NATIVE_IMAGE ? \"libjvmci\" : \"HotSpot\");\n+            if (errorOrBuffer == 0) {\n+                throw new InternalError(\"native buffer could not be allocated \" + context);\n+            }\n+            if (errorOrBuffer == -1L) {\n+                throw new OutOfMemoryError(\"OutOfMemoryError occurred \" + context);\n+            }\n+            throw new InternalError(\"unexpected problem occurred \" + context);\n@@ -225,1 +236,1 @@\n-        int encodingLength = unsafe.getInt(buffer);\n+        int encodingLength = unsafe.getInt(errorOrBuffer);\n@@ -227,1 +238,1 @@\n-        unsafe.copyMemory(null, buffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n+        unsafe.copyMemory(null, errorOrBuffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"}]}