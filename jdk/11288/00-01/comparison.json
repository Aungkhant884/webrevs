{"files":[{"patch":"@@ -128,1 +128,1 @@\n-void JvmtiTagMap::entry_iterate(JvmtiTagMapEntryClosure* closure) {\n+void JvmtiTagMap::entry_iterate(JvmtiTagMapKeyClosure* closure) {\n@@ -173,1 +173,9 @@\n-  return tag_map->hashmap()->find(o); } \/\/ A CallbackWrapper is a support class for querying and tagging an object \/\/ around a callback to a profiler. The constructor does pre-callback \/\/ work to get the tag value, klass tag value, ... and the destructor \/\/ does the post-callback work of tagging or untagging the object. \/\/ \/\/ {\n+  return tag_map->hashmap()->find(o);\n+}\n+\n+\/\/ A CallbackWrapper is a support class for querying and tagging an object\n+\/\/ around a callback to a profiler. The constructor does pre-callback\n+\/\/ work to get the tag value, klass tag value, ... and the destructor\n+\/\/ does the post-callback work of tagging or untagging the object.\n+\/\/\n+\/\/ {\n@@ -178,1 +186,2 @@\n-\/\/ } \/\/ wrapper goes out of scope here which results in the destructor\n+\/\/ }\n+\/\/ wrapper goes out of scope here which results in the destructor\n@@ -193,1 +202,1 @@\n-  JvmtiTagMap* tag_map() const      { return _tag_map; }\n+  JvmtiTagMap* tag_map() const { return _tag_map; }\n@@ -212,1 +221,0 @@\n-    _obj_tag  = _hashmap->find(_o);\n@@ -215,0 +223,1 @@\n+    _obj_tag = _hashmap->find(_o);\n@@ -253,2 +262,1 @@\n-        hashmap->remove(o);\n-        hashmap->add(o, obj_tag);\n+        hashmap->update(o, obj_tag);\n@@ -271,3 +279,4 @@\n-\/\/ } \/\/ wrapper goes out of scope here which results in the destructor\n-\/\/      checking to see if the referrer object has been tagged, untagged,\n-\/\/      or the tag value has changed.\n+\/\/ }\n+\/\/ wrapper goes out of scope here which results in the destructor\n+\/\/ checking to see if the referrer object has been tagged, untagged,\n+\/\/ or the tag value has changed.\n@@ -301,1 +310,0 @@\n-      _referrer_obj_tag  = _referrer_hashmap->find(_referrer);\n@@ -304,0 +312,2 @@\n+      _referrer_obj_tag = _referrer_hashmap->find(_referrer);\n+\n@@ -312,2 +322,1 @@\n-    if (!is_reference_to_self()){\n-\n+    if (!is_reference_to_self()) {\n@@ -322,1 +331,1 @@\n-  inline jlong* referrer_tag_p()        { return _referrer_tag_p; }\n+  inline jlong* referrer_tag_p() { return _referrer_tag_p; }\n@@ -325,1 +334,1 @@\n-  inline jlong referrer_klass_tag()     { return _referrer_klass_tag; }\n+  inline jlong referrer_klass_tag() { return _referrer_klass_tag; }\n@@ -344,2 +353,0 @@\n-  \/\/JvmtiTagMapEntry entry ;\n-  \/\/_hashmap->add_update_remove(&entry, o, tag);\n@@ -348,1 +355,1 @@\n-  jlong found_tag  = hashmap->find(o);\n+  jlong found_tag = hashmap->find(o);\n@@ -364,2 +371,1 @@\n-        hashmap->remove(o);\n-        hashmap->add(o,tag);\n+        hashmap->update(o, tag);\n@@ -437,1 +443,1 @@\n-  for (int i=0; i<_fields->length(); i++) {\n+  for (int i = 0; i < _fields->length(); i++) {\n@@ -504,1 +510,1 @@\n-   enum {\n+  enum {\n@@ -506,1 +512,1 @@\n-   };\n+  };\n@@ -509,1 +515,1 @@\n-  ClassFieldMap* field_map() const          { return _field_map; }\n+  ClassFieldMap* field_map() const { return _field_map; }\n@@ -563,1 +569,0 @@\n-\n@@ -1229,1 +1234,1 @@\n-class TagObjectCollector : public JvmtiTagMapEntryClosure {\n+class TagObjectCollector : public JvmtiTagMapKeyClosure {\n@@ -1261,2 +1266,2 @@\n-  bool do_entry(JvmtiTagMapEntry & key , jlong & value ) {\n-    for (int i=0; i<_tag_count; i++) {\n+  bool do_entry(JvmtiTagMapKey& key , jlong& value ) {\n+    for (int i = 0; i < _tag_count; i++) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":33,"deletions":28,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class JvmtiTagMapEntryClosure;\n+class JvmtiTagMapKeyClosure;\n@@ -56,1 +56,1 @@\n-  void entry_iterate(JvmtiTagMapEntryClosure* closure);\n+  void entry_iterate(JvmtiTagMapKeyClosure* closure);\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"prims\/jvmtiEventController.inline.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"prims\/jvmtiEventController.inline.hpp\"\n@@ -42,1 +42,1 @@\n-JvmtiTagMapEntry::JvmtiTagMapEntry(oop obj): _obj(obj){}\n+JvmtiTagMapKey::JvmtiTagMapKey(oop obj): _obj(obj) {}\n@@ -44,1 +44,1 @@\n-JvmtiTagMapEntry::JvmtiTagMapEntry(const JvmtiTagMapEntry& src) {\n+JvmtiTagMapKey::JvmtiTagMapKey(const JvmtiTagMapKey& src) {\n@@ -51,1 +51,1 @@\n-JvmtiTagMapEntry::~JvmtiTagMapEntry(){\n+JvmtiTagMapKey::~JvmtiTagMapKey(){\n@@ -62,1 +62,21 @@\n-oop JvmtiTagMapEntry::object() const {\n+JvmtiTagMapKey::JvmtiTagMapKey(oop obj): _obj(obj) {}\n+\n+JvmtiTagMapKey::JvmtiTagMapKey(const JvmtiTagMapKey& src) {\n+  \/\/ move object into WeakHandle when copying into the table\n+  assert(src._obj != nullptr, \"must be set\");\n+  _wh = WeakHandle(JvmtiExport::weak_tag_storage(), src._obj);\n+  _obj = nullptr;\n+}\n+\n+JvmtiTagMapKey::~JvmtiTagMapKey() {\n+  \/\/ If obj is set null it out, this is called for stack object on lookup,\n+  \/\/ and it should not have a WeakHandle created for it yet.\n+  if (_obj != nullptr) {\n+    _obj = nullptr;\n+    assert(_wh.is_null(), \"WeakHandle should be null\");\n+  } else {\n+    _wh.release(JvmtiExport::weak_tag_storage());\n+  }\n+}\n+\n+oop JvmtiTagMapKey::object() const {\n@@ -67,1 +87,1 @@\n-oop JvmtiTagMapEntry::object_no_keepalive() const {\n+oop JvmtiTagMapKey::object_no_keepalive() const {\n@@ -73,1 +93,1 @@\n-  :_rrht_table(Constants::_table_size){\n+  :_table(Constants::_table_size) {\n@@ -77,2 +97,2 @@\n-  struct RemoveAll{\n-    bool do_entry(JvmtiTagMapEntry   & entry, jlong const &  tag)\n+  struct RemoveAll {\n+    bool do_entry(JvmtiTagMapKey& entry, jlong const& tag)\n@@ -82,2 +102,2 @@\n-  }RemoveAll;\n-  _rrht_table.unlink(&RemoveAll);\n+  } RemoveAll;\n+  _table.unlink(&RemoveAll);\n@@ -85,1 +105,1 @@\n-  assert(_rrht_table.number_of_entries() == 0, \"should have removed all entries\");\n+  assert(_table.number_of_entries() == 0, \"should have removed all entries\");\n@@ -93,5 +113,8 @@\n-   \/\/if (obj->fast_no_hash_check()) {\n-   \/\/  return 0;\n-   \/\/} else {\n-     JvmtiTagMapEntry jtme(obj);\n-     jlong* found = _rrht_table.get(jtme);\n+   if (is_empty()) {\n+    return 0;\n+   }\n+   if (obj->fast_no_hash_check()) {\n+    return 0;\n+   } else {\n+     JvmtiTagMapKey jtme(obj);\n+     jlong* found = _table.get(jtme);\n@@ -99,2 +122,2 @@\n-   \/\/}\n- }\n+   }\n+}\n@@ -103,2 +126,3 @@\n-  JvmtiTagMapEntry new_entry(obj);\n-  bool is_added = _rrht_table.put(new_entry, tag);\n+  JvmtiTagMapKey new_entry(obj);\n+  bool is_added = false;\n+  _table.put_if_absent(new_entry, tag, &is_added);\n@@ -109,0 +133,7 @@\n+bool JvmtiTagMapTable::update(oop obj, jlong tag) {\n+  JvmtiTagMapKey new_entry(obj);\n+  bool is_updated = _table.put(new_entry, tag) == false;\n+  assert(is_updated, \"should be updated and not added\");\n+  return is_updated;\n+}\n+\n@@ -110,2 +141,2 @@\n-  JvmtiTagMapEntry jtme(obj);\n-  return _rrht_table.remove(jtme);\n+  JvmtiTagMapKey jtme(obj);\n+  return _table.remove(jtme);\n@@ -114,2 +145,2 @@\n-void JvmtiTagMapTable::entry_iterate(JvmtiTagMapEntryClosure* closure) {\n-  _rrht_table.iterate(closure);\n+void JvmtiTagMapTable::entry_iterate(JvmtiTagMapKeyClosure* closure) {\n+  _table.iterate(closure);\n@@ -119,1 +150,1 @@\n-  _rrht_table.maybe_grow();\n+  _table.maybe_grow();\n@@ -123,1 +154,1 @@\n-  struct IsDead{\n+  struct IsDead {\n@@ -125,4 +156,4 @@\n-    IsDead(GrowableArray<jlong>* objects) : _objects(objects){}\n-    bool do_entry(JvmtiTagMapEntry const & entry, jlong tag){\n-      if ( entry.object_no_keepalive() == NULL){\n-        if(_objects!=NULL){\n+    IsDead(GrowableArray<jlong>* objects) : _objects(objects) {}\n+    bool do_entry(JvmtiTagMapKey const& entry, jlong tag) {\n+      if (entry.object_no_keepalive() == NULL) {\n+        if (_objects!=NULL) {\n@@ -135,2 +166,2 @@\n-  }IsDead(objects);\n-  _rrht_table.unlink(&IsDead);\n+  } IsDead(objects);\n+  _table.unlink(&IsDead);\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.cpp","additions":64,"deletions":33,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -35,12 +35,18 @@\n-class JvmtiTagMapEntryClosure;\n-\n-class JvmtiTagMapEntry : public CHeapObj<mtInternal> {\n-   WeakHandle _wh;\n-   oop _obj; \/\/ temporarily hold obj while searching\n-\n-  public:\n-   JvmtiTagMapEntry(oop obj);\n-   JvmtiTagMapEntry(const JvmtiTagMapEntry& src);\n-   JvmtiTagMapEntry& operator=(JvmtiTagMapEntry const&) = delete;\n-\n-   ~JvmtiTagMapEntry();\n+class JvmtiTagMapKeyClosure;\n+\n+\/\/ The oop is needed for lookup rather than creating a WeakHandle during\n+\/\/ lookup because the HeapWalker may walk soon to be dead objects and\n+\/\/ creating a WeakHandle for an otherwise dead object makes G1 unhappy.\n+\/\/\n+\/\/ This class is the Key type for inserting in ResizeableResourceHashTable\n+\/\/ Its get_hash() and equals() methods are also used for getting the hash\n+\/\/ value of a Key and comparing two Keys, respectively.\n+class JvmtiTagMapKey : public CHeapObj<mtInternal> {\n+  WeakHandle _wh;\n+  oop _obj; \/\/ temporarily hold obj while searching\n+ public:\n+  JvmtiTagMapKey(oop obj);\n+  JvmtiTagMapKey(const JvmtiTagMapKey& src);\n+  JvmtiTagMapKey& operator=(JvmtiTagMapKey const&) = delete;\n+\n+  ~JvmtiTagMapKey();\n@@ -52,1 +58,1 @@\n-  static unsigned get_hash(JvmtiTagMapEntry const &entry)  {\n+  static unsigned get_hash(JvmtiTagMapKey const &entry)  {\n@@ -57,1 +63,1 @@\n-  static bool equals(JvmtiTagMapEntry const & lhs, JvmtiTagMapEntry const & rhs) {\n+  static bool equals(JvmtiTagMapKey const& lhs, JvmtiTagMapKey const& rhs) {\n@@ -64,6 +70,5 @@\n-  typedef\n-  ResizeableResourceHashtable <JvmtiTagMapEntry, jlong,\n-                               AnyObj::C_HEAP, mtInternal,\n-                               JvmtiTagMapEntry::get_hash,\n-                               JvmtiTagMapEntry::equals\n-                               > ResizableResourceHT ;\n+typedef\n+ResizeableResourceHashtable <JvmtiTagMapKey, jlong,\n+                              AnyObj::C_HEAP, mtInternal,\n+                              JvmtiTagMapKey::get_hash,\n+                              JvmtiTagMapKey::equals> ResizableResourceHT;\n@@ -72,5 +77,3 @@\n-  enum Constants {\n-    _table_size  = 1007\n-  };\n-\n-private:\n+ enum Constants {\n+  _table_size  = 1007\n+ };\n@@ -78,0 +81,1 @@\n+ private:\n@@ -79,1 +83,1 @@\n-  ResizableResourceHT  _rrht_table;\n+  ResizableResourceHT _table;\n@@ -81,1 +85,1 @@\n-public:\n+ public:\n@@ -87,1 +91,1 @@\n-\n+  bool update(oop obj, jlong tag);\n@@ -92,1 +96,1 @@\n-  void entry_iterate(JvmtiTagMapEntryClosure* closure);\n+  void entry_iterate(JvmtiTagMapKeyClosure* closure);\n@@ -94,1 +98,1 @@\n-  bool is_empty() const { return _rrht_table.number_of_entries() == 0; }\n+  bool is_empty() const { return _table.number_of_entries() == 0; }\n@@ -102,3 +106,3 @@\n-class JvmtiTagMapEntryClosure {\n-  public:\n-  virtual bool do_entry(JvmtiTagMapEntry & key , jlong & value) = 0;\n+class JvmtiTagMapKeyClosure {\n+ public:\n+  virtual bool do_entry(JvmtiTagMapKey& key , jlong& value) = 0;\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMapTable.hpp","additions":37,"deletions":33,"binary":false,"changes":70,"status":"modified"}]}