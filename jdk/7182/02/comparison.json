{"files":[{"patch":"@@ -65,1 +65,0 @@\n-        \/\/ Opt: Only need to do if we're not using the default GC\n@@ -67,1 +66,2 @@\n-        int screenNum = ((X11GraphicsDevice)gc.getDevice()).getScreen();\n+        final X11GraphicsDevice newDev = getSameScreenDevice(gc);\n+        final int visualToLookFor = graphicsConfig.getVisual();\n@@ -69,13 +69,5 @@\n-        X11GraphicsConfig parentgc;\n-        \/\/ save vis id of current gc\n-        int visual = graphicsConfig.getVisual();\n-\n-        X11GraphicsDevice newDev = (X11GraphicsDevice) GraphicsEnvironment.\n-            getLocalGraphicsEnvironment().\n-            getScreenDevices()[screenNum];\n-\n-        for (int i = 0; i < newDev.getNumConfigs(screenNum); i++) {\n-            if (visual == newDev.getConfigVisualId(i, screenNum)) {\n-                \/\/ use that\n-                graphicsConfig = (X11GraphicsConfig)newDev.getConfigurations()[i];\n-                break;\n+        final GraphicsConfiguration[] configurations = newDev.getConfigurations();\n+        for (final GraphicsConfiguration config : configurations) {\n+            final X11GraphicsConfig x11gc = (X11GraphicsConfig) config;\n+            if (visualToLookFor == x11gc.getVisual()) {\n+                graphicsConfig = x11gc;\n@@ -84,7 +76,0 @@\n-        \/\/ just in case...\n-        if (graphicsConfig == null) {\n-            graphicsConfig = (X11GraphicsConfig) GraphicsEnvironment.\n-                getLocalGraphicsEnvironment().\n-                getScreenDevices()[screenNum].\n-                getDefaultConfiguration();\n-        }\n@@ -95,0 +80,12 @@\n+    private X11GraphicsDevice getSameScreenDevice(GraphicsConfiguration gc) {\n+        XToolkit.awtLock(); \/\/ so that the number of screens doesn't change during\n+        try {\n+            final int screenNum = ((X11GraphicsDevice) gc.getDevice()).getScreen();\n+            return (X11GraphicsDevice) GraphicsEnvironment.\n+                    getLocalGraphicsEnvironment().\n+                    getScreenDevices()[screenNum];\n+        } finally {\n+            XToolkit.awtUnlock();\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XCanvasPeer.java","additions":19,"deletions":22,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import sun.awt.X11.XToolkit;\n@@ -66,1 +67,0 @@\n-    private final Object configLock = new Object();\n@@ -153,3 +153,1 @@\n-            synchronized (configLock) {\n-                makeConfigurations();\n-            }\n+            makeConfigurations();\n@@ -161,10 +159,11 @@\n-        if (configs == null) {\n-            int i = 1;  \/\/ Index 0 is always the default config\n-            int num = getNumConfigs(screen);\n-            GraphicsConfiguration[] ret = new GraphicsConfiguration[num];\n-            if (defaultConfig == null) {\n-                ret [0] = getDefaultConfiguration();\n-            }\n-            else {\n-                ret [0] = defaultConfig;\n-            }\n+        XToolkit.awtLock();\n+        try {\n+            if (configs == null) {\n+                int i = 1;  \/\/ Index 0 is always the default config\n+                int num = getNumConfigs(screen);\n+                GraphicsConfiguration[] ret = new GraphicsConfiguration[num];\n+                if (defaultConfig == null) {\n+                    ret[0] = getDefaultConfiguration();\n+                } else {\n+                    ret[0] = defaultConfig;\n+                }\n@@ -172,2 +171,2 @@\n-            boolean glxSupported = X11GraphicsEnvironment.isGLXAvailable();\n-            boolean xrenderSupported = X11GraphicsEnvironment.isXRenderAvailable();\n+                boolean glxSupported = X11GraphicsEnvironment.isGLXAvailable();\n+                boolean xrenderSupported = X11GraphicsEnvironment.isXRenderAvailable();\n@@ -175,10 +174,4 @@\n-            boolean dbeSupported = isDBESupported();\n-            if (dbeSupported && doubleBufferVisuals == null) {\n-                doubleBufferVisuals = new HashSet<>();\n-                getDoubleBufferVisuals(screen);\n-            }\n-            for ( ; i < num; i++) {\n-                int visNum = getConfigVisualId(i, screen);\n-                int depth = getConfigDepth (i, screen);\n-                if (glxSupported) {\n-                    ret[i] = GLXGraphicsConfig.getConfig(this, visNum);\n+                boolean dbeSupported = isDBESupported();\n+                if (dbeSupported && doubleBufferVisuals == null) {\n+                    doubleBufferVisuals = new HashSet<>();\n+                    getDoubleBufferVisuals(screen);\n@@ -186,12 +179,19 @@\n-                if (ret[i] == null) {\n-                    boolean doubleBuffer =\n-                        (dbeSupported &&\n-                         doubleBufferVisuals.contains(Integer.valueOf(visNum)));\n-\n-                    if (xrenderSupported) {\n-                        ret[i] = XRGraphicsConfig.getConfig(this, visNum, depth,\n-                                getConfigColormap(i, screen), doubleBuffer);\n-                    } else {\n-                       ret[i] = X11GraphicsConfig.getConfig(this, visNum, depth,\n-                              getConfigColormap(i, screen),\n-                              doubleBuffer);\n+                for (; i < num; i++) {\n+                    int visNum = getConfigVisualId(i, screen);\n+                    int depth = getConfigDepth(i, screen);\n+                    if (glxSupported) {\n+                        ret[i] = GLXGraphicsConfig.getConfig(this, visNum);\n+                    }\n+                    if (ret[i] == null) {\n+                        boolean doubleBuffer =\n+                                (dbeSupported &&\n+                                        doubleBufferVisuals.contains(Integer.valueOf(visNum)));\n+\n+                        if (xrenderSupported) {\n+                            ret[i] = XRGraphicsConfig.getConfig(this, visNum, depth,\n+                                    getConfigColormap(i, screen), doubleBuffer);\n+                        } else {\n+                            ret[i] = X11GraphicsConfig.getConfig(this, visNum, depth,\n+                                    getConfigColormap(i, screen),\n+                                    doubleBuffer);\n+                        }\n@@ -200,0 +200,1 @@\n+                configs = ret;\n@@ -201,1 +202,2 @@\n-            configs = ret;\n+        } finally {\n+            XToolkit.awtUnlock();\n@@ -241,3 +243,1 @@\n-            synchronized (configLock) {\n-                makeDefaultConfiguration();\n-            }\n+            makeDefaultConfiguration();\n@@ -249,14 +249,2 @@\n-        if (defaultConfig == null) {\n-            int visNum = getConfigVisualId(0, screen);\n-            if (X11GraphicsEnvironment.isGLXAvailable()) {\n-                defaultConfig = GLXGraphicsConfig.getConfig(this, visNum);\n-                if (X11GraphicsEnvironment.isGLXVerbose()) {\n-                    if (defaultConfig != null) {\n-                        System.out.print(\"OpenGL pipeline enabled\");\n-                    } else {\n-                        System.out.print(\"Could not enable OpenGL pipeline\");\n-                    }\n-                    System.out.println(\" for default config on screen \" +\n-                                       screen);\n-                }\n-            }\n+        XToolkit.awtLock();\n+        try {\n@@ -264,7 +252,12 @@\n-                int depth = getConfigDepth(0, screen);\n-                boolean doubleBuffer = false;\n-                if (isDBESupported() && doubleBufferVisuals == null) {\n-                    doubleBufferVisuals = new HashSet<>();\n-                    getDoubleBufferVisuals(screen);\n-                    doubleBuffer =\n-                        doubleBufferVisuals.contains(Integer.valueOf(visNum));\n+                int visNum = getConfigVisualId(0, screen);\n+                if (X11GraphicsEnvironment.isGLXAvailable()) {\n+                    defaultConfig = GLXGraphicsConfig.getConfig(this, visNum);\n+                    if (X11GraphicsEnvironment.isGLXVerbose()) {\n+                        if (defaultConfig != null) {\n+                            System.out.print(\"OpenGL pipeline enabled\");\n+                        } else {\n+                            System.out.print(\"Could not enable OpenGL pipeline\");\n+                        }\n+                        System.out.println(\" for default config on screen \" +\n+                                screen);\n+                    }\n@@ -272,0 +265,9 @@\n+                if (defaultConfig == null) {\n+                    int depth = getConfigDepth(0, screen);\n+                    boolean doubleBuffer = false;\n+                    if (isDBESupported() && doubleBufferVisuals == null) {\n+                        doubleBufferVisuals = new HashSet<>();\n+                        getDoubleBufferVisuals(screen);\n+                        doubleBuffer =\n+                                doubleBufferVisuals.contains(Integer.valueOf(visNum));\n+                    }\n@@ -273,3 +275,11 @@\n-                if (X11GraphicsEnvironment.isXRenderAvailable()) {\n-                    if (X11GraphicsEnvironment.isXRenderVerbose()) {\n-                        System.out.println(\"XRender pipeline enabled\");\n+                    if (X11GraphicsEnvironment.isXRenderAvailable()) {\n+                        if (X11GraphicsEnvironment.isXRenderVerbose()) {\n+                            System.out.println(\"XRender pipeline enabled\");\n+                        }\n+                        defaultConfig = XRGraphicsConfig.getConfig(this, visNum,\n+                                depth, getConfigColormap(0, screen),\n+                                doubleBuffer);\n+                    } else {\n+                        defaultConfig = X11GraphicsConfig.getConfig(this, visNum,\n+                                depth, getConfigColormap(0, screen),\n+                                doubleBuffer);\n@@ -277,7 +287,0 @@\n-                    defaultConfig = XRGraphicsConfig.getConfig(this, visNum,\n-                            depth, getConfigColormap(0, screen),\n-                            doubleBuffer);\n-                } else {\n-                    defaultConfig = X11GraphicsConfig.getConfig(this, visNum,\n-                                        depth, getConfigColormap(0, screen),\n-                                        doubleBuffer);\n@@ -286,0 +289,2 @@\n+        } finally {\n+            XToolkit.awtUnlock();\n@@ -574,0 +579,2 @@\n+        assert XToolkit.isAWTLockHeldByCurrentThread();\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":80,"deletions":73,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -317,2 +319,0 @@\n-    AWT_LOCK ();\n-\n@@ -375,1 +375,0 @@\n-        AWT_UNLOCK();\n@@ -385,0 +384,3 @@\n+        if (screenDataPtr->defaultConfig == NULL) {\n+            return;\n+        }\n@@ -584,1 +586,0 @@\n-    AWT_UNLOCK ();\n@@ -773,0 +774,1 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n@@ -783,0 +785,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -976,1 +980,2 @@\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -978,3 +983,2 @@\n-    int configs = x11Screens[screen].numConfigs;\n-    AWT_UNLOCK();\n-    return configs;\n+    return x11Screens[screen].numConfigs;\n+\n@@ -992,2 +996,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -997,1 +1001,0 @@\n-    AWT_UNLOCK();\n@@ -1010,2 +1013,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1015,1 +1018,0 @@\n-    AWT_UNLOCK();\n@@ -1028,2 +1030,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1033,1 +1035,0 @@\n-    AWT_UNLOCK();\n@@ -1143,0 +1144,3 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n+\n@@ -1144,1 +1148,0 @@\n-    AWT_LOCK();\n@@ -1166,1 +1169,0 @@\n-        AWT_UNLOCK();\n@@ -1185,1 +1187,0 @@\n-    AWT_UNLOCK();\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"}]}