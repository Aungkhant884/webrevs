{"files":[{"patch":"@@ -67,15 +67,25 @@\n-        int screenNum = ((X11GraphicsDevice)gc.getDevice()).getScreen();\n-\n-        X11GraphicsConfig parentgc;\n-        \/\/ save vis id of current gc\n-        int visual = graphicsConfig.getVisual();\n-\n-        X11GraphicsDevice newDev = (X11GraphicsDevice) GraphicsEnvironment.\n-            getLocalGraphicsEnvironment().\n-            getScreenDevices()[screenNum];\n-\n-        for (int i = 0; i < newDev.getNumConfigs(screenNum); i++) {\n-            if (visual == newDev.getConfigVisualId(i, screenNum)) {\n-                \/\/ use that\n-                graphicsConfig = (X11GraphicsConfig)newDev.getConfigurations()[i];\n-                break;\n+        XToolkit.awtLock(); \/\/ the number of screens may otherwise change during\n+        try {\n+            int screenNum = ((X11GraphicsDevice) gc.getDevice()).getScreen();\n+\n+            X11GraphicsConfig parentgc;\n+            \/\/ save vis id of current gc\n+            int visual = graphicsConfig.getVisual();\n+\n+            X11GraphicsDevice newDev = (X11GraphicsDevice) GraphicsEnvironment.\n+                    getLocalGraphicsEnvironment().\n+                    getScreenDevices()[screenNum];\n+\n+            for (int i = 0; i < newDev.getNumConfigs(screenNum); i++) {\n+                if (visual == newDev.getConfigVisualId(i, screenNum)) {\n+                    \/\/ use that\n+                    graphicsConfig = (X11GraphicsConfig) newDev.getConfigurations()[i];\n+                    break;\n+                }\n+            }\n+            \/\/ just in case...\n+            if (graphicsConfig == null) {\n+                graphicsConfig = (X11GraphicsConfig) GraphicsEnvironment.\n+                        getLocalGraphicsEnvironment().\n+                        getScreenDevices()[screenNum].\n+                        getDefaultConfiguration();\n@@ -83,8 +93,0 @@\n-        }\n-        \/\/ just in case...\n-        if (graphicsConfig == null) {\n-            graphicsConfig = (X11GraphicsConfig) GraphicsEnvironment.\n-                getLocalGraphicsEnvironment().\n-                getScreenDevices()[screenNum].\n-                getDefaultConfiguration();\n-        }\n@@ -92,1 +94,4 @@\n-        return graphicsConfig;\n+            return graphicsConfig;\n+        } finally {\n+            XToolkit.awtUnlock();\n+        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XCanvasPeer.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import sun.awt.X11.XToolkit;\n@@ -162,9 +163,10 @@\n-            int i = 1;  \/\/ Index 0 is always the default config\n-            int num = getNumConfigs(screen);\n-            GraphicsConfiguration[] ret = new GraphicsConfiguration[num];\n-            if (defaultConfig == null) {\n-                ret [0] = getDefaultConfiguration();\n-            }\n-            else {\n-                ret [0] = defaultConfig;\n-            }\n+            XToolkit.awtLock();\n+            try {\n+                int i = 1;  \/\/ Index 0 is always the default config\n+                int num = getNumConfigs(screen);\n+                GraphicsConfiguration[] ret = new GraphicsConfiguration[num];\n+                if (defaultConfig == null) {\n+                    ret[0] = getDefaultConfiguration();\n+                } else {\n+                    ret[0] = defaultConfig;\n+                }\n@@ -172,2 +174,2 @@\n-            boolean glxSupported = X11GraphicsEnvironment.isGLXAvailable();\n-            boolean xrenderSupported = X11GraphicsEnvironment.isXRenderAvailable();\n+                boolean glxSupported = X11GraphicsEnvironment.isGLXAvailable();\n+                boolean xrenderSupported = X11GraphicsEnvironment.isXRenderAvailable();\n@@ -175,10 +177,4 @@\n-            boolean dbeSupported = isDBESupported();\n-            if (dbeSupported && doubleBufferVisuals == null) {\n-                doubleBufferVisuals = new HashSet<>();\n-                getDoubleBufferVisuals(screen);\n-            }\n-            for ( ; i < num; i++) {\n-                int visNum = getConfigVisualId(i, screen);\n-                int depth = getConfigDepth (i, screen);\n-                if (glxSupported) {\n-                    ret[i] = GLXGraphicsConfig.getConfig(this, visNum);\n+                boolean dbeSupported = isDBESupported();\n+                if (dbeSupported && doubleBufferVisuals == null) {\n+                    doubleBufferVisuals = new HashSet<>();\n+                    getDoubleBufferVisuals(screen);\n@@ -186,12 +182,19 @@\n-                if (ret[i] == null) {\n-                    boolean doubleBuffer =\n-                        (dbeSupported &&\n-                         doubleBufferVisuals.contains(Integer.valueOf(visNum)));\n-\n-                    if (xrenderSupported) {\n-                        ret[i] = XRGraphicsConfig.getConfig(this, visNum, depth,\n-                                getConfigColormap(i, screen), doubleBuffer);\n-                    } else {\n-                       ret[i] = X11GraphicsConfig.getConfig(this, visNum, depth,\n-                              getConfigColormap(i, screen),\n-                              doubleBuffer);\n+                for (; i < num; i++) {\n+                    int visNum = getConfigVisualId(i, screen);\n+                    int depth = getConfigDepth(i, screen);\n+                    if (glxSupported) {\n+                        ret[i] = GLXGraphicsConfig.getConfig(this, visNum);\n+                    }\n+                    if (ret[i] == null) {\n+                        boolean doubleBuffer =\n+                                (dbeSupported &&\n+                                        doubleBufferVisuals.contains(Integer.valueOf(visNum)));\n+\n+                        if (xrenderSupported) {\n+                            ret[i] = XRGraphicsConfig.getConfig(this, visNum, depth,\n+                                    getConfigColormap(i, screen), doubleBuffer);\n+                        } else {\n+                            ret[i] = X11GraphicsConfig.getConfig(this, visNum, depth,\n+                                    getConfigColormap(i, screen),\n+                                    doubleBuffer);\n+                        }\n@@ -200,0 +203,3 @@\n+                configs = ret;\n+            } finally {\n+                XToolkit.awtUnlock();\n@@ -201,1 +207,0 @@\n-            configs = ret;\n@@ -250,8 +255,13 @@\n-            int visNum = getConfigVisualId(0, screen);\n-            if (X11GraphicsEnvironment.isGLXAvailable()) {\n-                defaultConfig = GLXGraphicsConfig.getConfig(this, visNum);\n-                if (X11GraphicsEnvironment.isGLXVerbose()) {\n-                    if (defaultConfig != null) {\n-                        System.out.print(\"OpenGL pipeline enabled\");\n-                    } else {\n-                        System.out.print(\"Could not enable OpenGL pipeline\");\n+            XToolkit.awtLock();\n+            try {\n+                int visNum = getConfigVisualId(0, screen);\n+                if (X11GraphicsEnvironment.isGLXAvailable()) {\n+                    defaultConfig = GLXGraphicsConfig.getConfig(this, visNum);\n+                    if (X11GraphicsEnvironment.isGLXVerbose()) {\n+                        if (defaultConfig != null) {\n+                            System.out.print(\"OpenGL pipeline enabled\");\n+                        } else {\n+                            System.out.print(\"Could not enable OpenGL pipeline\");\n+                        }\n+                        System.out.println(\" for default config on screen \" +\n+                                screen);\n@@ -259,12 +269,0 @@\n-                    System.out.println(\" for default config on screen \" +\n-                                       screen);\n-                }\n-            }\n-            if (defaultConfig == null) {\n-                int depth = getConfigDepth(0, screen);\n-                boolean doubleBuffer = false;\n-                if (isDBESupported() && doubleBufferVisuals == null) {\n-                    doubleBufferVisuals = new HashSet<>();\n-                    getDoubleBufferVisuals(screen);\n-                    doubleBuffer =\n-                        doubleBufferVisuals.contains(Integer.valueOf(visNum));\n@@ -272,0 +270,9 @@\n+                if (defaultConfig == null) {\n+                    int depth = getConfigDepth(0, screen);\n+                    boolean doubleBuffer = false;\n+                    if (isDBESupported() && doubleBufferVisuals == null) {\n+                        doubleBufferVisuals = new HashSet<>();\n+                        getDoubleBufferVisuals(screen);\n+                        doubleBuffer =\n+                                doubleBufferVisuals.contains(Integer.valueOf(visNum));\n+                    }\n@@ -273,3 +280,11 @@\n-                if (X11GraphicsEnvironment.isXRenderAvailable()) {\n-                    if (X11GraphicsEnvironment.isXRenderVerbose()) {\n-                        System.out.println(\"XRender pipeline enabled\");\n+                    if (X11GraphicsEnvironment.isXRenderAvailable()) {\n+                        if (X11GraphicsEnvironment.isXRenderVerbose()) {\n+                            System.out.println(\"XRender pipeline enabled\");\n+                        }\n+                        defaultConfig = XRGraphicsConfig.getConfig(this, visNum,\n+                                depth, getConfigColormap(0, screen),\n+                                doubleBuffer);\n+                    } else {\n+                        defaultConfig = X11GraphicsConfig.getConfig(this, visNum,\n+                                depth, getConfigColormap(0, screen),\n+                                doubleBuffer);\n@@ -277,7 +292,0 @@\n-                    defaultConfig = XRGraphicsConfig.getConfig(this, visNum,\n-                            depth, getConfigColormap(0, screen),\n-                            doubleBuffer);\n-                } else {\n-                    defaultConfig = X11GraphicsConfig.getConfig(this, visNum,\n-                                        depth, getConfigColormap(0, screen),\n-                                        doubleBuffer);\n@@ -285,0 +293,2 @@\n+            } finally {\n+                XToolkit.awtUnlock();\n@@ -574,0 +584,2 @@\n+        assert XToolkit.isAWTLockHeldByCurrentThread();\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":76,"deletions":64,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -317,2 +319,0 @@\n-    AWT_LOCK ();\n-\n@@ -375,1 +375,0 @@\n-        AWT_UNLOCK();\n@@ -385,0 +384,3 @@\n+        if (screenDataPtr->defaultConfig == NULL) {\n+            return;\n+        }\n@@ -582,2 +584,0 @@\n-\n-    AWT_UNLOCK ();\n@@ -772,0 +772,1 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n@@ -782,0 +783,2 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -975,1 +978,2 @@\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -977,3 +981,2 @@\n-    int configs = x11Screens[screen].numConfigs;\n-    AWT_UNLOCK();\n-    return configs;\n+    return x11Screens[screen].numConfigs;\n+\n@@ -991,2 +994,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -996,1 +999,0 @@\n-    AWT_UNLOCK();\n@@ -1009,2 +1011,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1014,1 +1016,0 @@\n-    AWT_UNLOCK();\n@@ -1027,2 +1028,2 @@\n-    int visNum;\n-    AWT_LOCK();\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n@@ -1032,1 +1033,0 @@\n-    AWT_UNLOCK();\n@@ -1142,0 +1142,3 @@\n+    \/\/ NB: should be invoked only while holding the AWT lock\n+    DASSERT(screen >= 0 && screen < awt_numScreens);\n+\n@@ -1143,1 +1146,0 @@\n-    AWT_LOCK();\n@@ -1165,1 +1167,0 @@\n-        AWT_UNLOCK();\n@@ -1184,1 +1185,0 @@\n-    AWT_UNLOCK();\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"}]}