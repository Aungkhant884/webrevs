{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,0 +244,5 @@\n+\/\/ Class for all long registers (excluding RBP and R13)\n+reg_class long_no_rbp_r13_reg %{\n+  return _LONG_NO_RBP_R13_REG_mask;\n+%}\n+\n@@ -259,0 +264,5 @@\n+\/\/ Class for all int registers (excluding RBP and R13)\n+reg_class int_no_rbp_r13_reg %{\n+  return _INT_NO_RBP_R13_REG_mask;\n+%}\n+\n@@ -322,0 +332,1 @@\n+extern RegMask _LONG_NO_RBP_R13_REG_mask;\n@@ -325,0 +336,1 @@\n+extern RegMask _INT_NO_RBP_R13_REG_mask;\n@@ -351,0 +363,1 @@\n+RegMask _LONG_NO_RBP_R13_REG_mask;\n@@ -354,0 +367,1 @@\n+RegMask _INT_NO_RBP_R13_REG_mask;\n@@ -412,0 +426,6 @@\n+  _LONG_NO_RBP_R13_REG_mask = _LONG_REG_mask;\n+  _LONG_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(rbp->as_VMReg()));\n+  _LONG_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(rbp->as_VMReg()->next()));\n+  _LONG_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(r13->as_VMReg()));\n+  _LONG_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(r13->as_VMReg()->next()));\n+\n@@ -430,0 +450,4 @@\n+  _INT_NO_RBP_R13_REG_mask = _LONG_REG_mask;\n+  _INT_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(rbp->as_VMReg()));\n+  _INT_NO_RBP_R13_REG_mask.Remove(OptoReg::as_OptoReg(r13->as_VMReg()));\n+\n@@ -3494,0 +3518,15 @@\n+operand no_rbp_r13_RegI()\n+%{\n+  constraint(ALLOC_IN_RC(int_no_rbp_r13_reg));\n+  match(RegI);\n+  match(rRegI);\n+  match(rax_RegI);\n+  match(rbx_RegI);\n+  match(rcx_RegI);\n+  match(rdx_RegI);\n+  match(rdi_RegI);\n+\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -3663,0 +3702,1 @@\n+  match(rcx_RegL);\n@@ -3675,0 +3715,1 @@\n+  match(rcx_RegL);\n@@ -3685,0 +3726,1 @@\n+  match(rcx_RegL);\n@@ -3721,0 +3763,13 @@\n+operand no_rbp_r13_RegL()\n+%{\n+  constraint(ALLOC_IN_RC(long_no_rbp_r13_reg));\n+  match(RegL);\n+  match(rRegL);\n+  match(rax_RegL);\n+  match(rcx_RegL);\n+  match(rdx_RegL);\n+\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -7473,1 +7528,16 @@\n-  predicate(VM_Version::supports_fast_2op_lea());\n+  predicate(VM_Version::supports_fast_3op_lea());\n+  match(Set dst (AddI base (LShiftI index scale)));\n+  match(Set dst (AddI (LShiftI index scale) base));\n+\n+  format %{ \"addr32 leal $dst, [$base + $index << $scale]\\t# int\" %}\n+  ins_encode %{\n+    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($scale$$constant);\n+    __ leal($dst$$Register, Address($base$$Register, $index$$Register, scale));\n+  %}\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct leaI_rReg_rReg_immI2_no_disp(rRegI dst, no_rbp_r13_RegI base, rRegI index, immI2 scale)\n+%{\n+  predicate(VM_Version::supports_fast_2op_lea() &&\n+            !VM_Version::supports_fast_3op_lea());\n@@ -7645,1 +7715,16 @@\n-  predicate(VM_Version::supports_fast_2op_lea());\n+  predicate(VM_Version::supports_fast_3op_lea());\n+  match(Set dst (AddL base (LShiftL index scale)));\n+  match(Set dst (AddL (LShiftL index scale) base));\n+\n+  format %{ \"leaq $dst, [$base + $index << $scale]\\t# long\" %}\n+  ins_encode %{\n+    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($scale$$constant);\n+    __ leaq($dst$$Register, Address($base$$Register, $index$$Register, scale));\n+  %}\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct leaL_rReg_rReg_immI2_no_disp(rRegL dst, no_rbp_r13_RegL base, rRegL index, immI2 scale)\n+%{\n+  predicate(VM_Version::supports_fast_2op_lea() &&\n+            !VM_Version::supports_fast_3op_lea());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":88,"deletions":3,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        bh.consume(x);\n@@ -53,2 +54,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -56,0 +55,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n@@ -64,2 +65,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -67,0 +66,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n@@ -75,2 +76,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -78,0 +77,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n@@ -85,1 +86,0 @@\n-            bh.consume(x);\n@@ -87,0 +87,1 @@\n+        bh.consume(x);\n@@ -95,2 +96,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -98,0 +97,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n@@ -106,2 +107,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -109,0 +108,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n@@ -117,2 +118,0 @@\n-            bh.consume(x);\n-            bh.consume(y);\n@@ -120,0 +119,2 @@\n+        bh.consume(x);\n+        bh.consume(y);\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LeaInstruction.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}