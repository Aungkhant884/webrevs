{"files":[{"patch":"@@ -7511,1 +7511,1 @@\n-instruct leaI_rReg_rReg_immI(rRegI dst, rRegI src1, rRegI src2, immI disp)\n+instruct leaI_rReg_rReg_immI(rRegI dst, rRegI base, rRegI index, immI disp)\n@@ -7514,1 +7514,1 @@\n-  match(Set dst (AddI (AddI src1 src2) disp));\n+  match(Set dst (AddI (AddI base index) disp));\n@@ -7516,1 +7516,1 @@\n-  format %{ \"addr32 leal $dst, [$src1 + $src2 + $disp]\\t# int\" %}\n+  format %{ \"addr32 leal $dst, [$base + $index + $disp]\\t# int\" %}\n@@ -7518,1 +7518,1 @@\n-    __ leal($dst$$Register, Address($src1$$Register, $src2$$Register, Address::times_1, $disp$$constant));\n+    __ leal($dst$$Register, Address($base$$Register, $index$$Register, Address::times_1, $disp$$constant));\n@@ -7523,1 +7523,1 @@\n-instruct leaI_rReg_rReg_immI2(rRegI dst, rRegI base, rRegI index, immI2 scale)\n+instruct leaI_rReg_rReg_immI2(rRegI dst, no_rbp_r13_RegI base, rRegI index, immI2 scale)\n@@ -7525,16 +7525,1 @@\n-  predicate(VM_Version::supports_fast_3op_lea());\n-  match(Set dst (AddI base (LShiftI index scale)));\n-  match(Set dst (AddI (LShiftI index scale) base));\n-\n-  format %{ \"addr32 leal $dst, [$base + $index << $scale]\\t# int\" %}\n-  ins_encode %{\n-    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($scale$$constant);\n-    __ leal($dst$$Register, Address($base$$Register, $index$$Register, scale));\n-  %}\n-  ins_pipe(ialu_reg_reg);\n-%}\n-\n-instruct leaI_rReg_rReg_immI2_no_disp(rRegI dst, no_rbp_r13_RegI base, rRegI index, immI2 scale)\n-%{\n-  predicate(VM_Version::supports_fast_2op_lea() &&\n-            !VM_Version::supports_fast_3op_lea());\n+  predicate(VM_Version::supports_fast_2op_lea());\n@@ -7698,1 +7683,1 @@\n-instruct leaL_rReg_rReg_immL32(rRegL dst, rRegL src1, rRegL src2, immL32 disp)\n+instruct leaL_rReg_rReg_immL32(rRegL dst, rRegL base, rRegL index, immL32 disp)\n@@ -7701,1 +7686,1 @@\n-  match(Set dst (AddL (AddL src1 src2) disp));\n+  match(Set dst (AddL (AddL base index) disp));\n@@ -7703,1 +7688,1 @@\n-  format %{ \"leaq $dst, [$src1 + $src2 + $disp]\\t# long\" %}\n+  format %{ \"leaq $dst, [$base + $index + $disp]\\t# long\" %}\n@@ -7705,1 +7690,1 @@\n-    __ leaq($dst$$Register, Address($src1$$Register, $src2$$Register, Address::times_1, $disp$$constant));\n+    __ leaq($dst$$Register, Address($base$$Register, $index$$Register, Address::times_1, $disp$$constant));\n@@ -7710,1 +7695,1 @@\n-instruct leaL_rReg_rReg_immI2(rRegL dst, rRegL base, rRegL index, immI2 scale)\n+instruct leaL_rReg_rReg_immI2(rRegL dst, no_rbp_r13_RegL base, rRegL index, immI2 scale)\n@@ -7712,16 +7697,1 @@\n-  predicate(VM_Version::supports_fast_3op_lea());\n-  match(Set dst (AddL base (LShiftL index scale)));\n-  match(Set dst (AddL (LShiftL index scale) base));\n-\n-  format %{ \"leaq $dst, [$base + $index << $scale]\\t# long\" %}\n-  ins_encode %{\n-    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($scale$$constant);\n-    __ leaq($dst$$Register, Address($base$$Register, $index$$Register, scale));\n-  %}\n-  ins_pipe(ialu_reg_reg);\n-%}\n-\n-instruct leaL_rReg_rReg_immI2_no_disp(rRegL dst, no_rbp_r13_RegL base, rRegL index, immI2 scale)\n-%{\n-  predicate(VM_Version::supports_fast_2op_lea() &&\n-            !VM_Version::supports_fast_3op_lea());\n+  predicate(VM_Version::supports_fast_2op_lea());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":12,"deletions":42,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-@Fork(value = 2, jvmArgsAppend = {\"-XX:LoopUnrollLimit=1\"})\n+@Fork(value = 1, jvmArgsAppend = {\"-XX:LoopUnrollLimit=1\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/LeaInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}