{"files":[{"patch":"@@ -1047,0 +1047,15 @@\n+  \/\/ Old CPUs perform lea on AGU which causes additional latency transfering the\n+  \/\/ value from\/to ALU for other operations\n+  static bool supports_fast_2op_lea() {\n+    return (is_intel() && supports_avx()) || \/\/ Sandy Bride and above\n+           (is_amd()   && supports_avx());   \/\/ Jaguar and Bulldozer and above\n+  }\n+\n+  \/\/ Pre Icelake Intels have inefficient 3-op lea with 3 latency, this can be\n+  \/\/ replaced by add-add or lea-add\n+  static bool supports_fast_3op_lea() {\n+    return supports_fast_2op_lea() &&\n+           ((is_intel() && supports_clwb()) || \/\/ Icelake and above\n+            is_amd());\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -7448,0 +7448,1 @@\n+  predicate(VM_Version::supports_fast_2op_lea());\n@@ -7460,0 +7461,1 @@\n+  predicate(VM_Version::supports_fast_3op_lea());\n@@ -7471,0 +7473,1 @@\n+  predicate(VM_Version::supports_fast_2op_lea());\n@@ -7484,0 +7487,1 @@\n+  predicate(VM_Version::supports_fast_3op_lea());\n@@ -7616,0 +7620,1 @@\n+  predicate(VM_Version::supports_fast_2op_lea());\n@@ -7628,0 +7633,1 @@\n+  predicate(VM_Version::supports_fast_3op_lea());\n@@ -7639,0 +7645,1 @@\n+  predicate(VM_Version::supports_fast_2op_lea());\n@@ -7652,0 +7659,1 @@\n+  predicate(VM_Version::supports_fast_3op_lea());\n@@ -8802,2 +8810,2 @@\n-\/\/ Shift Left by one, two, three\n-instruct salI_rReg_immI2(rRegI dst, rRegI src, immI2 shift)\n+\/\/ Shift Left by one\n+instruct salI_rReg_1(rRegI dst, immI_1 shift, rFlagsReg cr)\n@@ -8805,1 +8813,2 @@\n-  match(Set dst (LShiftI src shift));\n+  match(Set dst (LShiftI dst shift));\n+  effect(KILL cr);\n@@ -8807,1 +8816,1 @@\n-  format %{ \"leal    $dst, [$src << $shift]\" %}\n+  format %{ \"sall    $dst, $shift\" %}\n@@ -8809,2 +8818,1 @@\n-    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($shift$$constant);\n-    __ leal($dst$$Register, Address(noreg, $src$$Register, scale));\n+    __ sall($dst$$Register, $shift$$constant);\n@@ -8812,1 +8820,1 @@\n-  ins_pipe(ialu_reg_reg);\n+  ins_pipe(ialu_reg);\n@@ -9036,2 +9044,2 @@\n-\/\/ Shift Left by one, two, three\n-instruct salL_rReg_immI2(rRegL dst, rRegL src, immI2 shift)\n+\/\/ Shift Left by one\n+instruct salL_rReg_1(rRegL dst, immI_1 shift, rFlagsReg cr)\n@@ -9039,1 +9047,2 @@\n-  match(Set dst (LShiftL src shift));\n+  match(Set dst (LShiftL dst shift));\n+  effect(KILL cr);\n@@ -9041,1 +9050,1 @@\n-  format %{ \"leaq    $dst, [$src << $shift]\" %}\n+  format %{ \"salq    $dst, $shift\" %}\n@@ -9043,2 +9052,1 @@\n-    Address::ScaleFactor scale = static_cast<Address::ScaleFactor>($shift$$constant);\n-    __ leaq($dst$$Register, Address(noreg, $src$$Register, scale));\n+    __ salq($dst$$Register, $shift$$constant);\n@@ -9046,1 +9054,1 @@\n-  ins_pipe(ialu_reg_reg);\n+  ins_pipe(ialu_reg);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"}]}