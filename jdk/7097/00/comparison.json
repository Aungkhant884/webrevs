{"files":[{"patch":"@@ -429,1 +429,1 @@\n-            else index = (lci < uci) ? lci : uci;\n+            else index = Math.min(lci, uci);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaMenuPainter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1936,2 +1936,1 @@\n-        final int tabIndex = (base - 1 >= 0 ? base - 1 : tabPane.getTabCount() - 1);\n-        return (tabIndex >= 0 ? tabIndex : 0);\n+        return Math.max(base - 1 >= 0 ? base - 1 : tabPane.getTabCount() - 1, 0);\n@@ -1969,2 +1968,1 @@\n-        final int runIndex = (baseRun - 1 >= 0 ? baseRun - 1 : runCount - 1);\n-        return (runIndex >= 0 ? runIndex : 0);\n+        return Math.max(baseRun - 1 >= 0 ? baseRun - 1 : runCount - 1, 0);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaTabbedPaneCopyFromBasicUI.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-        layoutLabel(tabPlacement, metrics, tabIndex < 0 ? 0 : tabIndex, title, icon, fContentRect, iconRect, textRect, false); \/\/ Never give it \"isSelected\" - ApprMgr handles this\n+        layoutLabel(tabPlacement, metrics, Math.max(tabIndex, 0), title, icon, fContentRect, iconRect, textRect, false); \/\/ Never give it \"isSelected\" - ApprMgr handles this\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaTabbedPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        return (shrinkage < 0) ? 0 : (shrinkage > 3) ? 3 : shrinkage;\n+        return Math.max(Math.min(shrinkage, 3), 0);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaTextFieldBorder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,4 +30,0 @@\n-    private static final int abs(int x) {\n-        return (x < 0) ? -x : x;\n-    }\n-\n@@ -46,1 +42,1 @@\n-            badness += abs(difference);\n+            badness += Math.abs(difference);\n@@ -65,1 +61,1 @@\n-            badness += abs(difference);\n+            badness += Math.abs(difference);\n@@ -73,3 +69,3 @@\n-        int pa = abs(p - a);\n-        int pb = abs(p - b);\n-        int pc = abs(p - c);\n+        int pa = Math.abs(p - a);\n+        int pb = Math.abs(p - b);\n+        int pc = Math.abs(p - c);\n@@ -149,1 +145,1 @@\n-                badness += abs(difference);\n+                badness += Math.abs(difference);\n@@ -168,1 +164,1 @@\n-                badness += abs(difference);\n+                badness += Math.abs(difference);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/png\/RowFilter.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                return ((bitOffset < maxOffset) ? bitOffset : maxOffset);\n+                return Math.min(bitOffset, maxOffset);\n@@ -299,1 +299,1 @@\n-                    return ((bitOffset < maxOffset) ? bitOffset : maxOffset);\n+                    return Math.min(bitOffset, maxOffset);\n@@ -304,1 +304,1 @@\n-        return ((bitOffset < maxOffset) ? bitOffset : maxOffset);\n+        return Math.min(bitOffset, maxOffset);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/tiff\/TIFFFaxCompressor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1115,2 +1115,1 @@\n-            return new Dimension(d.width < prefSize.width ? prefSize.width : d.width,\n-                                 d.height < prefSize.height ? prefSize.height : d.height);\n+            return new Dimension(Math.max(d.width, prefSize.width), Math.max(d.height, prefSize.height));\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/gtk\/GTKFileChooserUI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-            x = x < 0 ? 0 : x;\n-            y = y < 0 ? 0 : y;\n+            x = Math.max(x, 0);\n+            y = Math.max(y, 0);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/motif\/MotifDesktopPaneUI.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -637,2 +637,1 @@\n-            return new Dimension(d.width < prefSize.width ? prefSize.width : d.width,\n-                                 d.height < prefSize.height ? prefSize.height : d.height);\n+            return new Dimension(Math.max(d.width, prefSize.width), Math.max(d.height, prefSize.height));\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/java\/swing\/plaf\/motif\/MotifFileChooserUI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -370,1 +370,1 @@\n-                int readLen = ( (readLeft>tempBufferSize) ? tempBufferSize : readLeft );\n+                int readLen = Math.min(readLeft, tempBufferSize);\n@@ -408,1 +408,1 @@\n-                    readLen = ( (readLeft>tempBufferSize) ? tempBufferSize : readLeft );\n+                    readLen = Math.min(readLeft, tempBufferSize);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/AlawCodec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-                int readLen = ( (readLeft>tempBufferSize) ? tempBufferSize : readLeft );\n+                int readLen = Math.min(readLeft, tempBufferSize);\n@@ -385,1 +385,1 @@\n-                    readLen = ( (readLeft>tempBufferSize) ? tempBufferSize : readLeft );\n+                    readLen = Math.min(readLeft, tempBufferSize);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/UlawCodec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -914,1 +914,1 @@\n-        int cmax = (r > g) ? r : g;\n+        int cmax = Math.max(r, g);\n@@ -916,1 +916,1 @@\n-        int cmin = (r < g) ? r : g;\n+        int cmin = Math.min(r, g);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Color.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3479,2 +3479,2 @@\n-                int pwidth = (width > this.width) ? this.width : width;\n-                int pheight = (height > this.height) ? this.height : height;\n+                int pwidth = Math.min(width, this.width);\n+                int pheight = Math.min(height, this.height);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Component.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2484,1 +2484,1 @@\n-        flm.numchars = (numChars < 0)? 0: numChars;\n+        flm.numchars = Math.max(numChars, 0);\n@@ -2503,1 +2503,1 @@\n-        flm.numchars = (numChars < 0)? 0: numChars;\n+        flm.numchars = Math.max(numChars, 0);\n@@ -2522,1 +2522,1 @@\n-        flm.numchars = (numChars < 0)? 0: numChars;\n+        flm.numchars = Math.max(numChars, 0);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Font.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-        int tmp = (v < 1) ? 1 : v;\n+        int tmp = Math.max(v, 1);\n@@ -818,1 +818,1 @@\n-        int tmp = (v < 1) ? 1 : v;\n+        int tmp = Math.max(v, 1);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Scrollbar.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -263,2 +263,2 @@\n-        this.rows = (rows >= 0) ? rows : 0;\n-        this.columns = (columns >= 0) ? columns : 0;\n+        this.rows = Math.max(rows, 0);\n+        this.columns = Math.max(columns, 0);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TextArea.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-        this.columns = (columns >= 0) ? columns : 0;\n+        this.columns = Math.max(columns, 0);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TextField.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-                            int copyw = (i < x) ? i : x;\n+                            int copyw = Math.min(i, x);\n@@ -570,1 +570,1 @@\n-                            int copyw = (i < x) ? i : x;\n+                            int copyw = Math.min(i, x);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TexturePaintContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -535,1 +535,1 @@\n-        return (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n+        return java.lang.Double.compare(ccw, 0.0);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/geom\/Line2D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -832,8 +832,2 @@\n-            float[] dstColor;\n-            if (dstHasAlpha) {\n-                int size = ((dstNumComp + 1) > 3) ? (dstNumComp + 1) : 3;\n-                dstColor = new float[size];\n-            } else {\n-                int size = (dstNumComp  > 3) ? dstNumComp : 3;\n-                dstColor = new float[size];\n-            }\n+            int size = Math.max(dstNumComp + (dstHasAlpha ? 1 : 0), 3);\n+            float[] dstColor = new float[size];\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ColorConvertOp.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1989,1 +1989,1 @@\n-        return alignment > 1.0f ? 1.0f : alignment < 0.0f ? 0.0f : alignment;\n+        return Math.min(Math.max(alignment, 0.0f), 1.0f);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JComponent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1101,4 +1101,2 @@\n-        int width = proposedWidth < 1 ? 1 :\n-            (proposedWidth > maxSize.width? maxSize.width : proposedWidth);\n-        int height = proposedHeight < 1 ? 1 :\n-            (proposedHeight > maxSize.height? maxSize.height : proposedHeight);\n+        int width = Math.max(Math.min(proposedWidth, maxSize.width), 1);\n+        int height = Math.max(Math.min(proposedHeight, maxSize.height), 1);\n@@ -1137,4 +1135,2 @@\n-        width = proposedWidth < 1? 1 :\n-                  (proposedWidth > maxSize.width? maxSize.width : proposedWidth);\n-        height = proposedHeight < 1? 1 :\n-                  (proposedHeight > maxSize.height? maxSize.height : proposedHeight);\n+        width = Math.max(Math.min(proposedWidth, maxSize.width), 1);\n+        height = Math.max(Math.min(proposedHeight, maxSize.height), 1);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/RepaintManager.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        alignment = a > 1.0f ? 1.0f : a < 0.0f ? 0.0f : a;\n+        alignment = Math.min(Math.max(a, 0.0f), 1.0f);\n@@ -234,1 +234,1 @@\n-            alignment = alignment > 1.0f ? 1.0f : alignment < 0.0f ? 0.0f : alignment;\n+            alignment = Math.min(Math.max(alignment, 0.0f), 1.0f);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SizeRequirements.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -548,4 +548,4 @@\n-        int x1 = (x > dest.x) ? x : dest.x;\n-        int x2 = ((x+width) < (dest.x + dest.width)) ? (x+width) : (dest.x + dest.width);\n-        int y1 = (y > dest.y) ? y : dest.y;\n-        int y2 = ((y + height) < (dest.y + dest.height) ? (y+height) : (dest.y + dest.height));\n+        int x1 = Math.max(x, dest.x);\n+        int x2 = Math.min(x + width, dest.x + dest.width);\n+        int y1 = Math.max(y, dest.y);\n+        int y2 = Math.min(y + height, dest.y + dest.height);\n@@ -579,4 +579,4 @@\n-        int x1 = (x < dest.x) ? x : dest.x;\n-        int x2 = ((x+width) > (dest.x + dest.width)) ? (x+width) : (dest.x + dest.width);\n-        int y1 = (y < dest.y) ? y : dest.y;\n-        int y2 = ((y+height) > (dest.y + dest.height)) ? (y+height) : (dest.y + dest.height);\n+        int x1 = Math.min(x, dest.x);\n+        int x2 = Math.max(x + width, dest.x + dest.width);\n+        int y1 = Math.min(y, dest.y);\n+        int y2 = Math.max(y + height, dest.y + dest.height);\n@@ -2087,1 +2087,1 @@\n-            return (lci < uci) ? lci : uci;\n+            return Math.min(lci, uci);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -129,2 +129,1 @@\n-        float min = (red < green) ? red : green;\n-        return (min < blue) ? min : blue;\n+        return Math.min(Math.min(red, green), blue);\n@@ -142,2 +141,1 @@\n-        float max = (red > green) ? red : green;\n-        return (max > blue) ? max : blue;\n+        return Math.max(Math.max(red, green), blue);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/colorchooser\/ColorModelHSL.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1732,2 +1732,1 @@\n-                int index = selectedIndex - listHeight;\n-                return (index < 0 ? 0: index);\n+                return Math.max(selectedIndex - listHeight, 0);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicComboBoxUI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-                index = (lci < uci) ? lci : uci;\n+                index = Math.min(lci, uci);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicGraphicsUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2446,2 +2446,1 @@\n-        int tabIndex = (base - 1 >= 0? base - 1 : tabPane.getTabCount() - 1);\n-        return (tabIndex >= 0? tabIndex : 0);\n+        return Math.max(base - 1 >= 0? base - 1 : tabPane.getTabCount() - 1, 0);\n@@ -2501,2 +2500,1 @@\n-        int runIndex = (baseRun - 1 >= 0? baseRun - 1 : runCount - 1);\n-        return (runIndex >= 0? runIndex : 0);\n+        return Math.max(baseRun - 1 >= 0? baseRun - 1 : runCount - 1, 0);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTabbedPaneUI.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -626,2 +626,1 @@\n-            return new Dimension(d.width < prefWidth ? prefWidth : d.width,\n-                                 d.height < PREF_SIZE.height ? PREF_SIZE.height : d.height);\n+            return new Dimension(Math.max(d.width, prefWidth), Math.max(d.height, PREF_SIZE.height));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalFileChooserUI.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -156,4 +156,4 @@\n-                dstPixels[index] = ((ca > 255 ? 255 : ca) << 24) |\n-                        ((cr > 255 ? 255 : cr) << 16) |\n-                        ((cg > 255 ? 255 : cg) << 8) |\n-                        (cb > 255 ? 255 : cb);\n+                dstPixels[index] = ((Math.min(ca, 255)) << 24) |\n+                        ((Math.min(cr, 255)) << 16) |\n+                        ((Math.min(cg, 255)) << 8) |\n+                        (Math.min(cb, 255));\n@@ -200,1 +200,1 @@\n-                dstPixels[index] = (byte) (cp > 255 ? 255 : cp);\n+                dstPixels[index] = (byte) Math.min(cp, 255);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/EffectUtils.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-            tmpBuf1[i] = (val > 255) ? (byte) 0xFF : (byte) val;\n+            tmpBuf1[i] = (byte) Math.min(val, 0xFF);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/nimbus\/InnerShadowEffect.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                        System.arraycopy(buf,st,alpha_map,0,len<alen ? len : alen);\n+                        System.arraycopy(buf,st,alpha_map,0, Math.min(len, alen));\n@@ -249,1 +249,1 @@\n-            int bitMask = (1<<(bitDepth>=8?8:bitDepth))-1;\n+            int bitMask = (1<<(Math.min(bitDepth, 8)))-1;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/PNGImageDecoder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-         numSlots = (numSlots <= 254) ? numSlots : 254;\n+         numSlots = Math.min(numSlots, 254);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CompositeFont.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1754,2 +1754,2 @@\n-                plgYMin = (plgYMin > y)?y:plgYMin;\n-                plgYMax = (plgYMax < y)?y:plgYMax;\n+                plgYMin = Math.min(plgYMin, y);\n+                plgYMax = Math.max(plgYMax, y);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/ProcessPath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-                int fullcycles = FloatMath.floor_int(-cycles);\n+                int fullcycles = (int) Math.floor(-cycles);\n@@ -180,1 +180,1 @@\n-                int fullcycles = FloatMath.floor_int(cycles);\n+                int fullcycles = (int) Math.floor(cycles);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Dasher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,251 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.java2d.marlin;\n-\n-\/**\n- * Faster Math ceil \/ floor routines derived from StrictMath\n- *\/\n-public final class FloatMath implements MarlinConst {\n-\n-    \/\/ overflow \/ NaN handling enabled:\n-    static final boolean CHECK_OVERFLOW = true;\n-    static final boolean CHECK_NAN = true;\n-    \/\/ Copied from sun.misc.FloatConsts:\n-    public static final int FLOAT_SIGNIFICAND_WIDTH = 24;   \/\/ sun.misc.FloatConsts.SIGNIFICAND_WIDTH\n-    public static final int FLOAT_EXP_BIAS = 127;           \/\/ sun.misc.FloatConsts.EXP_BIAS\n-    public static final int FLOAT_EXP_BIT_MASK = 2139095040;\/\/ sun.misc.FloatConsts.EXP_BIT_MASK\n-    public static final int FLOAT_SIGNIF_BIT_MASK = 8388607;\/\/ sun.misc.FloatConsts.SIGNIF_BIT_MASK\n-\n-    private FloatMath() {\n-        \/\/ utility class\n-    }\n-\n-    \/\/ faster inlined min\/max functions in the branch prediction is high\n-    static int max(final int a, final int b) {\n-        return (a >= b) ? a : b;\n-    }\n-\n-    static int min(final int a, final int b) {\n-        return (a <= b) ? a : b;\n-    }\n-\n-    \/**\n-     * Returns the smallest (closest to negative infinity) {@code float} value\n-     * that is greater than or equal to the argument and is equal to a\n-     * mathematical integer. Special cases:\n-     * <ul><li>If the argument value is already equal to a mathematical integer,\n-     * then the result is the same as the argument.  <li>If the argument is NaN\n-     * or an infinity or positive zero or negative zero, then the result is the\n-     * same as the argument.  <li>If the argument value is less than zero but\n-     * greater than -1.0, then the result is negative zero.<\/ul> Note that the\n-     * value of {@code StrictMath.ceil(x)} is exactly the value of\n-     * {@code -StrictMath.floor(-x)}.\n-     *\n-     * @param a a value.\n-     * @return the smallest (closest to negative infinity) floating-point value\n-     * that is greater than or equal to the argument and is equal to a\n-     * mathematical integer.\n-     *\/\n-    public static float ceil_f(final float a) {\n-        \/\/ Derived from StrictMath.ceil(double):\n-\n-        \/\/ Inline call to Math.getExponent(a) to\n-        \/\/ compute only once Float.floatToRawIntBits(a)\n-        final int doppel = Float.floatToRawIntBits(a);\n-\n-        final int exponent = ((doppel & FLOAT_EXP_BIT_MASK)\n-                >> (FLOAT_SIGNIFICAND_WIDTH - 1))\n-                - FLOAT_EXP_BIAS;\n-\n-        if (exponent < 0) {\n-            \/*\n-             * Absolute value of argument is less than 1.\n-             * floorOrceil(-0.0) => -0.0\n-             * floorOrceil(+0.0) => +0.0\n-             *\/\n-            return ((a == 0.0f) ? a :\n-                    ( (a < 0.0f) ? -0.0f : 1.0f) );\n-        }\n-        if (CHECK_OVERFLOW && (exponent >= 23)) { \/\/ 52 for double\n-            \/*\n-             * Infinity, NaN, or a value so large it must be integral.\n-             *\/\n-            return a;\n-        }\n-        \/\/ Else the argument is either an integral value already XOR it\n-        \/\/ has to be rounded to one.\n-        assert exponent >= 0 && exponent <= 22; \/\/ 51 for double\n-\n-        final int intpart = doppel\n-                & (~(FLOAT_SIGNIF_BIT_MASK >> exponent));\n-\n-        if (intpart == doppel) {\n-            return a; \/\/ integral value (including 0)\n-        }\n-\n-        \/\/ 0 handled above as an integer\n-        \/\/ sign: 1 for negative, 0 for positive numbers\n-        \/\/ add : 0 for negative and 1 for positive numbers\n-        return Float.intBitsToFloat(intpart) + ((~intpart) >>> 31);\n-    }\n-\n-    \/**\n-     * Returns the largest (closest to positive infinity) {@code float} value\n-     * that is less than or equal to the argument and is equal to a mathematical\n-     * integer. Special cases:\n-     * <ul><li>If the argument value is already equal to a mathematical integer,\n-     * then the result is the same as the argument.  <li>If the argument is NaN\n-     * or an infinity or positive zero or negative zero, then the result is the\n-     * same as the argument.<\/ul>\n-     *\n-     * @param a a value.\n-     * @return the largest (closest to positive infinity) floating-point value\n-     * that less than or equal to the argument and is equal to a mathematical\n-     * integer.\n-     *\/\n-    public static float floor_f(final float a) {\n-        \/\/ Derived from StrictMath.floor(double):\n-\n-        \/\/ Inline call to Math.getExponent(a) to\n-        \/\/ compute only once Float.floatToRawIntBits(a)\n-        final int doppel = Float.floatToRawIntBits(a);\n-\n-        final int exponent = ((doppel & FLOAT_EXP_BIT_MASK)\n-                >> (FLOAT_SIGNIFICAND_WIDTH - 1))\n-                - FLOAT_EXP_BIAS;\n-\n-        if (exponent < 0) {\n-            \/*\n-             * Absolute value of argument is less than 1.\n-             * floorOrceil(-0.0) => -0.0\n-             * floorOrceil(+0.0) => +0.0\n-             *\/\n-            return ((a == 0.0f) ? a :\n-                    ( (a < 0.0f) ? -1.0f : 0.0f) );\n-        }\n-        if (CHECK_OVERFLOW && (exponent >= 23)) { \/\/ 52 for double\n-            \/*\n-             * Infinity, NaN, or a value so large it must be integral.\n-             *\/\n-            return a;\n-        }\n-        \/\/ Else the argument is either an integral value already XOR it\n-        \/\/ has to be rounded to one.\n-        assert exponent >= 0 && exponent <= 22; \/\/ 51 for double\n-\n-        final int intpart = doppel\n-                & (~(FLOAT_SIGNIF_BIT_MASK >> exponent));\n-\n-        if (intpart == doppel) {\n-            return a; \/\/ integral value (including 0)\n-        }\n-\n-        \/\/ 0 handled above as an integer\n-        \/\/ sign: 1 for negative, 0 for positive numbers\n-        \/\/ add : -1 for negative and 0 for positive numbers\n-        return Float.intBitsToFloat(intpart) + (intpart >> 31);\n-    }\n-\n-    \/**\n-     * Faster alternative to ceil(float) optimized for the integer domain\n-     * and supporting NaN and +\/-Infinity.\n-     *\n-     * @param a a value.\n-     * @return the largest (closest to positive infinity) integer value\n-     * that less than or equal to the argument and is equal to a mathematical\n-     * integer.\n-     *\/\n-    public static int ceil_int(final float a) {\n-        final int intpart = (int) a;\n-\n-        if (a <= intpart\n-                || (CHECK_OVERFLOW && intpart == Integer.MAX_VALUE)\n-                || CHECK_NAN && Float.isNaN(a)) {\n-            return intpart;\n-        }\n-        return intpart + 1;\n-    }\n-\n-    \/**\n-     * Faster alternative to ceil(double) optimized for the integer domain\n-     * and supporting NaN and +\/-Infinity.\n-     *\n-     * @param a a value.\n-     * @return the largest (closest to positive infinity) integer value\n-     * that less than or equal to the argument and is equal to a mathematical\n-     * integer.\n-     *\/\n-    public static int ceil_int(final double a) {\n-        final int intpart = (int) a;\n-\n-        if (a <= intpart\n-                || (CHECK_OVERFLOW && intpart == Integer.MAX_VALUE)\n-                || CHECK_NAN && Double.isNaN(a)) {\n-            return intpart;\n-        }\n-        return intpart + 1;\n-    }\n-\n-    \/**\n-     * Faster alternative to floor(float) optimized for the integer domain\n-     * and supporting NaN and +\/-Infinity.\n-     *\n-     * @param a a value.\n-     * @return the largest (closest to positive infinity) floating-point value\n-     * that less than or equal to the argument and is equal to a mathematical\n-     * integer.\n-     *\/\n-    public static int floor_int(final float a) {\n-        final int intpart = (int) a;\n-\n-        if (a >= intpart\n-                || (CHECK_OVERFLOW && intpart == Integer.MIN_VALUE)\n-                || CHECK_NAN && Float.isNaN(a)) {\n-            return intpart;\n-        }\n-        return intpart - 1;\n-    }\n-\n-    \/**\n-     * Faster alternative to floor(double) optimized for the integer domain\n-     * and supporting NaN and +\/-Infinity.\n-     *\n-     * @param a a value.\n-     * @return the largest (closest to positive infinity) floating-point value\n-     * that less than or equal to the argument and is equal to a mathematical\n-     * integer.\n-     *\/\n-    public static int floor_int(final double a) {\n-        final int intpart = (int) a;\n-\n-        if (a >= intpart\n-                || (CHECK_OVERFLOW && intpart == Integer.MIN_VALUE)\n-                || CHECK_NAN && Double.isNaN(a)) {\n-            return intpart;\n-        }\n-        return intpart - 1;\n-    }\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/FloatMath.java","additions":0,"deletions":251,"binary":false,"changes":251,"status":"deleted"},{"patch":"@@ -238,1 +238,1 @@\n-        final int px_bbox1 = FloatMath.min(px1, bboxX1);\n+        final int px_bbox1 = Math.min(px1, bboxX1);\n@@ -346,1 +346,1 @@\n-        final int px_bbox1 = FloatMath.min(px1, bboxX1);\n+        final int px_bbox1 = Math.min(px1, bboxX1);\n@@ -404,1 +404,1 @@\n-                blk_x0 = FloatMath.max(last_t0 << _BLK_SIZE_LG, from);\n+                blk_x0 = Math.max(last_t0 << _BLK_SIZE_LG, from);\n@@ -408,1 +408,1 @@\n-                blk_x1 = FloatMath.min((t << _BLK_SIZE_LG) + 1, to);\n+                blk_x1 = Math.min((t << _BLK_SIZE_LG) + 1, to);\n@@ -611,1 +611,1 @@\n-            final int lastXCoord = (nextTileXCoord <= x1) ? nextTileXCoord : x1;\n+            final int lastXCoord = Math.min(nextTileXCoord, x1);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinCache.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        final int ceil = FloatMath.ceil_int( ((float) val) \/ norm);\n+        final int ceil = (int) Math.ceil(((double) val) \/ norm);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-        final int x1 = FloatMath.min(x0 + TILE_W, _cache.bboxX1);\n+        final int x1 = Math.min(x0 + TILE_W, _cache.bboxX1);\n@@ -220,1 +220,1 @@\n-        final int y1 = FloatMath.min(this.y + TILE_H, _cache.bboxY1) - this.y;\n+        final int y1 = Math.min(this.y + TILE_H, _cache.bboxY1) - this.y;\n@@ -268,1 +268,1 @@\n-                    for (end = (aax1 <= x1) ? aax1 : x1; cx < end; cx++) {\n+                    for (end = Math.min(aax1, x1); cx < end; cx++) {\n@@ -326,1 +326,1 @@\n-        final int x1 = FloatMath.min(x0 + TILE_W, _cache.bboxX1);\n+        final int x1 = Math.min(x0 + TILE_W, _cache.bboxX1);\n@@ -331,1 +331,1 @@\n-        final int y1 = FloatMath.min(this.y + TILE_H, _cache.bboxY1) - this.y;\n+        final int y1 = Math.min(this.y + TILE_H, _cache.bboxY1) - this.y;\n@@ -412,1 +412,1 @@\n-                            for (end = (aax1 <= x1) ? aax1 : x1; cx < end; cx++) {\n+                            for (end = Math.min(aax1, x1); cx < end; cx++) {\n@@ -546,1 +546,1 @@\n-                            for (end = (aax1 <= x1) ? aax1 : x1; cx < end; cx++) {\n+                            for (end = Math.min(aax1, x1); cx < end; cx++) {\n@@ -679,1 +679,1 @@\n-                            for (end = (aax1 <= x1) ? aax1 : x1; cx < end; cx++) {\n+                            for (end = Math.min(aax1, x1); cx < end; cx++) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinTileGenerator.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-        final int firstCrossing = FloatMath.max(FloatMath.ceil_int(y1), boundsMinY);\n+        final int firstCrossing = Math.max(((int) Math.ceil(y1)), boundsMinY);\n@@ -345,1 +345,1 @@\n-        final int lastCrossing  = FloatMath.min(FloatMath.ceil_int(y2), boundsMaxY);\n+        final int lastCrossing  = Math.min(((int) Math.ceil(y2)), boundsMaxY);\n@@ -1173,1 +1173,1 @@\n-                            x0 = (prev > bboxx0) ? prev : bboxx0;\n+                            x0 = Math.max(prev, bboxx0);\n@@ -1243,1 +1243,1 @@\n-                            x0 = (prev > bboxx0) ? prev : bboxx0;\n+                            x0 = Math.max(prev, bboxx0);\n@@ -1317,2 +1317,2 @@\n-                minX = FloatMath.max(minX, bboxx0) >> _SUBPIXEL_LG_POSITIONS_X;\n-                maxX = FloatMath.min(maxX, bboxx1) >> _SUBPIXEL_LG_POSITIONS_X;\n+                minX = Math.max(minX, bboxx0) >> _SUBPIXEL_LG_POSITIONS_X;\n+                maxX = Math.min(maxX, bboxx1) >> _SUBPIXEL_LG_POSITIONS_X;\n@@ -1345,1 +1345,1 @@\n-                            tmp = FloatMath.max(1,\n+                            tmp = Math.max(1,\n@@ -1364,2 +1364,2 @@\n-        minX = FloatMath.max(minX, bboxx0) >> _SUBPIXEL_LG_POSITIONS_X;\n-        maxX = FloatMath.min(maxX, bboxx1) >> _SUBPIXEL_LG_POSITIONS_X;\n+        minX = Math.max(minX, bboxx0) >> _SUBPIXEL_LG_POSITIONS_X;\n+        maxX = Math.min(maxX, bboxx1) >> _SUBPIXEL_LG_POSITIONS_X;\n@@ -1398,2 +1398,2 @@\n-        final int spminX = FloatMath.max(FloatMath.ceil_int(edgeMinX - 0.5d), boundsMinX);\n-        final int spmaxX = FloatMath.min(FloatMath.ceil_int(edgeMaxX - 0.5d), boundsMaxX);\n+        final int spminX = Math.max((int) Math.ceil(edgeMinX - 0.5d), boundsMinX);\n+        final int spmaxX = Math.min((int) Math.ceil(edgeMaxX - 0.5d), boundsMaxX);\n@@ -1494,1 +1494,1 @@\n-        final int fixed_spminY = FloatMath.max(bbox_spminY, spminY);\n+        final int fixed_spminY = Math.max(bbox_spminY, spminY);\n@@ -1499,1 +1499,1 @@\n-            final int spmaxY = FloatMath.min(bbox_spmaxY, spminY + SUBPIXEL_TILE);\n+            final int spmaxY = Math.min(bbox_spmaxY, spminY + SUBPIXEL_TILE);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Renderer.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -627,4 +627,4 @@\n-        Region ret = new Region((lox < this.lox) ? this.lox : lox,\n-                                (loy < this.loy) ? this.loy : loy,\n-                                (hix > this.hix) ? this.hix : hix,\n-                                (hiy > this.hiy) ? this.hiy : hiy);\n+        Region ret = new Region(Math.max(lox, this.lox),\n+                Math.max(loy, this.loy),\n+                Math.min(hix, this.hix),\n+                Math.min(hiy, this.hiy));\n@@ -656,4 +656,4 @@\n-        Region ret = new Region((r.lox < this.lox) ? this.lox : r.lox,\n-                                (r.loy < this.loy) ? this.loy : r.loy,\n-                                (r.hix > this.hix) ? this.hix : r.hix,\n-                                (r.hiy > this.hiy) ? this.hiy : r.hiy);\n+        Region ret = new Region(Math.max(r.lox, this.lox),\n+                Math.max(r.loy, this.loy),\n+                Math.min(r.hix, this.hix),\n+                Math.min(r.hiy, this.hiy));\n@@ -685,4 +685,4 @@\n-        Region ret = new Region((r.lox > this.lox) ? this.lox : r.lox,\n-                                (r.loy > this.loy) ? this.loy : r.loy,\n-                                (r.hix < this.hix) ? this.hix : r.hix,\n-                                (r.hiy < this.hiy) ? this.hiy : r.hiy);\n+        Region ret = new Region(Math.min(r.lox, this.lox),\n+                Math.min(r.loy, this.loy),\n+                Math.max(r.hix, this.hix),\n+                Math.max(r.hiy, this.hiy));\n@@ -736,4 +736,4 @@\n-        Region ret = new Region((r.lox > this.lox) ? this.lox : r.lox,\n-                                (r.loy > this.loy) ? this.loy : r.loy,\n-                                (r.hix < this.hix) ? this.hix : r.hix,\n-                                (r.hiy < this.hiy) ? this.hiy : r.hiy);\n+        Region ret = new Region(Math.min(r.lox, this.lox),\n+                Math.min(r.loy, this.loy),\n+                Math.max(r.hix, this.hix),\n+                Math.max(r.hiy, this.hiy));\n@@ -933,4 +933,4 @@\n-        return new Region((lox < this.lox) ? this.lox : lox,\n-                          (loy < this.loy) ? this.loy : loy,\n-                          (hix > this.hix) ? this.hix : hix,\n-                          (hiy > this.hiy) ? this.hiy : hiy);\n+        return new Region(Math.max(lox, this.lox),\n+                Math.max(loy, this.loy),\n+                Math.min(hix, this.hix),\n+                Math.min(hiy, this.hiy));\n@@ -954,4 +954,4 @@\n-        return new Region((r.lox < this.lox) ? this.lox : r.lox,\n-                          (r.loy < this.loy) ? this.loy : r.loy,\n-                          (r.hix > this.hix) ? this.hix : r.hix,\n-                          (r.hiy > this.hiy) ? this.hiy : r.hiy);\n+        return new Region(Math.max(r.lox, this.lox),\n+                Math.max(r.loy, this.loy),\n+                Math.min(r.hix, this.hix),\n+                Math.min(r.hiy, this.hiy));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/pipe\/Region.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-                    double origDpi = (devResX < devResY) ? devResX : devResY;\n+                    double origDpi = Math.min(devResX, devResY);\n@@ -498,1 +498,1 @@\n-                    double maxSF = (maxSFX > maxSFY) ? maxSFY : maxSFX;\n+                    double maxSF = Math.min(maxSFX, maxSFY);\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/PSPathGraphics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1804,1 +1804,1 @@\n-                    pax = (lmVal >= paxMax) ? lmVal : paxMax;\n+                    pax = Math.max(lmVal, paxMax);\n@@ -1813,1 +1813,1 @@\n-                    pay = (tmVal >= payMax) ? tmVal : payMax;\n+                    pay = Math.max(tmVal, payMax);\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/ServiceDialog.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -418,1 +418,1 @@\n-        return items.size() > maxVisItems ? maxVisItems : items.size();\n+        return Math.min(items.size(), maxVisItems);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/ListHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,3 +130,1 @@\n-        maxprimary = ( (red > green) ?\n-                ( (red > blue) ? red : blue ) :\n-                ( (green > blue) ? green : blue ) );\n+        maxprimary = Math.max(Math.max(red, green), blue);\n@@ -134,3 +132,1 @@\n-        minprimary = ( (red < green) ?\n-                ( (red < blue) ? red : blue ) :\n-                ( (green < blue) ? green : blue ) );\n+        minprimary = Math.min(Math.min(red, green), blue);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/MotifColorUtilities.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -679,2 +679,2 @@\n-        int x = (itemBounds.x > screenBounds.x) ? itemBounds.x : screenBounds.x;\n-        int y = (itemBounds.y + itemBounds.height > screenBounds.y) ? itemBounds.y + itemBounds.height : screenBounds.y;\n+        int x = Math.max(itemBounds.x, screenBounds.x);\n+        int y = Math.max(itemBounds.y + itemBounds.height, screenBounds.y);\n@@ -708,1 +708,1 @@\n-        int x = (itemBounds.x > screenBounds.x) ? itemBounds.x : screenBounds.x;\n+        int x = Math.max(itemBounds.x, screenBounds.x);\n@@ -737,2 +737,2 @@\n-        int x = (itemBounds.x + itemBounds.width > screenBounds.x) ? itemBounds.x + itemBounds.width : screenBounds.x;\n-        int y = (itemBounds.y > screenBounds.y) ? itemBounds.y : screenBounds.y;\n+        int x = Math.max(itemBounds.x + itemBounds.width, screenBounds.x);\n+        int y = Math.max(itemBounds.y, screenBounds.y);\n@@ -767,1 +767,1 @@\n-        int y = (itemBounds.y > screenBounds.y) ? itemBounds.y : screenBounds.y;\n+        int y = Math.max(itemBounds.y, screenBounds.y);\n@@ -790,2 +790,2 @@\n-        int width = (windowSize.width < screenBounds.width) ? windowSize.width : screenBounds.width;\n-        int height = (windowSize.height < screenBounds.height) ? windowSize.height : screenBounds.height;\n+        int width = Math.min(windowSize.width, screenBounds.width);\n+        int height = Math.min(windowSize.height, screenBounds.height);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XBaseMenuWindow.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -155,2 +155,2 @@\n-                    int nw = (bounds.width < minWidth) ? minWidth : bounds.width;\n-                    int nh = (bounds.height < minHeight) ? minHeight : bounds.height;\n+                    int nw = Math.max(bounds.width, minWidth);\n+                    int nh = Math.max(bounds.height, minHeight);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDecoratedPeer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -432,1 +432,1 @@\n-        maximum = items.size() < vis ? vis : items.size();\n+        maximum = Math.max(items.size(), vis);\n@@ -440,1 +440,1 @@\n-        maximum = maxLength < vis ? vis : maxLength;\n+        maximum = Math.max(maxLength, vis);\n@@ -449,1 +449,1 @@\n-            maximum = items.size() < vis ? vis : items.size();\n+            maximum = Math.max(items.size(), vis);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XListPeer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-            return nativeScale >= 1 ? nativeScale : 1;\n+            return Math.max(nativeScale, 1);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        return (x > 65535 ? 65535 : (x < 0) ? 0 : x);\n+        return Math.min(Math.max(x, 0), 65535);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-            return new Dimension(d.width < prefWidth ? prefWidth : d.width,\n+            return new Dimension(Math.max(d.width, prefWidth),\n","filename":"src\/java.desktop\/windows\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsFileChooserUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1164,1 +1164,1 @@\n-                    double origDpi = (devResX < devResY) ? devResX : devResY;\n+                    double origDpi = Math.min(devResX, devResY);\n@@ -1170,1 +1170,1 @@\n-                    double maxSF = (maxSFX > maxSFY) ? maxSFY : maxSFX;\n+                    double maxSF = Math.min(maxSFX, maxSFY);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WPathGraphics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1199,1 +1199,1 @@\n-                int res = (yRes > xRes) ? yRes : xRes;\n+                int res = Math.max(yRes, xRes);\n","filename":"src\/java.desktop\/windows\/classes\/sun\/print\/Win32PrintService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,250 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import sun.java2d.marlin.FloatMath;\n-\n-\/*\n- * @test\n- * @summary Check for correct implementation of FloatMath.ceil\/floor\n- * @run main CeilAndFloorTests\n- * @modules java.desktop\/sun.java2d.marlin\n- *\/\n-public class CeilAndFloorTests {\n-\n-    public static String toHexString(float f) {\n-        if (!Float.isNaN(f))\n-            return Float.toHexString(f);\n-        else\n-            return \"NaN(0x\" + Integer.toHexString(Float.floatToRawIntBits(f)) + \")\";\n-    }\n-\n-    public static int test(String testName, float input,\n-                           float result, float expected) {\n-        if (Float.compare(expected, result) != 0) {\n-            System.err.println(\"Failure for \" + testName + \":\\n\" +\n-                               \"\\tFor input \" + input    + \"\\t(\" + toHexString(input) + \")\\n\" +\n-                               \"\\texpected  \" + expected + \"\\t(\" + toHexString(expected) + \")\\n\" +\n-                               \"\\tgot       \" + result   + \"\\t(\" + toHexString(result) + \").\");\n-            return 1;\n-        }\n-        else\n-            return 0;\n-    }\n-\n-    public static int test_skip_0(String testName, float input,\n-                           float result, float expected)\n-    {\n-        \/\/ floor_int does not distinguish +0f and -0f\n-        \/\/ but it is not critical for Marlin\n-        if (Float.compare(expected, result) != 0 && (expected != 0f))\n-        {\n-            System.err.println(\"Failure for \" + testName + \":\\n\" +\n-                               \"\\tFor input \" + input    + \"\\t(\" + toHexString(input) + \")\\n\" +\n-                               \"\\texpected  \" + expected + \"\\t(\" + toHexString(expected) + \")\\n\" +\n-                               \"\\tgot       \" + result   + \"\\t(\" + toHexString(result) + \").\");\n-            return 1;\n-        }\n-        else\n-            return 0;\n-    }\n-\n-    private static int testCeilCase(float input, float expected) {\n-        int failures = 0;\n-        \/\/ float result:\n-        failures += test(\"FloatMath.ceil_f\", input, FloatMath.ceil_f(input), expected);\n-        \/\/ int result:\n-        failures += test(\"FloatMath.ceil_int\", input, FloatMath.ceil_int(input), (int)expected);\n-        failures += test(\"FloatMath.ceil_f (int)\", input, (int)FloatMath.ceil_f(input), (int)expected);\n-        return failures;\n-    }\n-\n-    private static int testFloorCase(float input, float expected) {\n-        int failures = 0;\n-        \/\/ float result:\n-        failures += test       (\"FloatMath.floor_f\", input, FloatMath.floor_f(input), expected);\n-        \/\/ ignore difference between +0f and -0f:\n-        failures += test_skip_0(\"FloatMath.floor_int\", input, FloatMath.floor_int(input), (int)expected);\n-        failures += test_skip_0(\"FloatMath.floor_f (int)\", input, (int)FloatMath.floor_f(input), (int)expected);\n-        return failures;\n-    }\n-\n-    private static int nearIntegerTests() {\n-        int failures = 0;\n-\n-        float [] fixedPoints = {\n-            -0.0f,\n-             0.0f,\n-            -1.0f,\n-             1.0f,\n-            -0x1.0p52f,\n-             0x1.0p52f,\n-            -Float.MAX_VALUE,\n-             Float.MAX_VALUE,\n-             Float.NEGATIVE_INFINITY,\n-             Float.POSITIVE_INFINITY,\n-             Float.NaN,\n-        };\n-\n-        for(float fixedPoint : fixedPoints) {\n-            failures += testCeilCase(fixedPoint, fixedPoint);\n-            failures += testFloorCase(fixedPoint, fixedPoint);\n-        }\n-\n-        for(int i = Float.MIN_EXPONENT; i <= Float.MAX_EXPONENT; i++) {\n-            float powerOfTwo   = Math.scalb(1.0f, i);\n-            float neighborDown = Math.nextDown(powerOfTwo);\n-            float neighborUp   = Math.nextUp(powerOfTwo);\n-\n-            if (i < 0) {\n-                failures += testCeilCase( powerOfTwo,  1.0f);\n-                failures += testCeilCase(-powerOfTwo, -0.0f);\n-\n-                failures += testFloorCase( powerOfTwo,  0.0f);\n-                failures += testFloorCase(-powerOfTwo, -1.0f);\n-\n-                failures += testCeilCase( neighborDown, 1.0f);\n-                failures += testCeilCase(-neighborDown, -0.0f);\n-\n-                failures += testFloorCase( neighborUp,  0.0f);\n-                failures += testFloorCase(-neighborUp, -1.0f);\n-            } else {\n-                failures += testCeilCase(powerOfTwo, powerOfTwo);\n-                failures += testFloorCase(powerOfTwo, powerOfTwo);\n-\n-                if (neighborDown==Math.rint(neighborDown)) {\n-                    failures += testCeilCase( neighborDown,  neighborDown);\n-                    failures += testCeilCase(-neighborDown, -neighborDown);\n-\n-                    failures += testFloorCase( neighborDown, neighborDown);\n-                    failures += testFloorCase(-neighborDown,-neighborDown);\n-                } else {\n-                    failures += testCeilCase( neighborDown, powerOfTwo);\n-                    failures += testFloorCase(-neighborDown, -powerOfTwo);\n-                }\n-\n-                if (neighborUp==Math.rint(neighborUp)) {\n-                    failures += testCeilCase(neighborUp, neighborUp);\n-                    failures += testCeilCase(-neighborUp, -neighborUp);\n-\n-                    failures += testFloorCase(neighborUp, neighborUp);\n-                    failures += testFloorCase(-neighborUp, -neighborUp);\n-                } else {\n-                    failures += testFloorCase(neighborUp, powerOfTwo);\n-                    failures += testCeilCase(-neighborUp, -powerOfTwo);\n-                }\n-            }\n-        }\n-\n-        for(int i = -(0x10000); i <= 0x10000; i++) {\n-            float f = (float) i;\n-            float neighborDown = Math.nextDown(f);\n-            float neighborUp   = Math.nextUp(f);\n-\n-            failures += testCeilCase( f, f);\n-            failures += testCeilCase(-f, -f);\n-\n-            failures += testFloorCase( f, f);\n-            failures += testFloorCase(-f, -f);\n-\n-            if (Math.abs(f) > 1.0) {\n-                failures += testCeilCase( neighborDown, f);\n-                failures += testCeilCase(-neighborDown, -f+1);\n-\n-                failures += testFloorCase( neighborUp, f);\n-                failures += testFloorCase(-neighborUp, -f-1);\n-            }\n-        }\n-\n-        return failures;\n-    }\n-\n-    public static int roundingTests() {\n-        int failures = 0;\n-        float [][] testCases = {\n-            { Float.MIN_VALUE,                           1.0f},\n-            {-Float.MIN_VALUE,                          -0.0f},\n-            { Math.nextDown(Float.MIN_NORMAL),           1.0f},\n-            {-Math.nextDown(Float.MIN_NORMAL),          -0.0f},\n-            { Float.MIN_NORMAL,                          1.0f},\n-            {-Float.MIN_NORMAL,                         -0.0f},\n-\n-            { 0.1f,                                        1.0f},\n-            {-0.1f,                                       -0.0f},\n-\n-            { 0.5f,                                        1.0f},\n-            {-0.5f,                                       -0.0f},\n-\n-            { 1.5f,                                        2.0f},\n-            {-1.5f,                                       -1.0f},\n-\n-            { 2.5f,                                        3.0f},\n-            {-2.5f,                                       -2.0f},\n-\n-            { 12.3456789f,                                13.0f},\n-            {-12.3456789f,                               -12.0f},\n-\n-            { Math.nextDown(1.0f),                         1.0f},\n-            { Math.nextDown(-1.0f),                       -1.0f},\n-\n-            { Math.nextUp(1.0f),                           2.0f},\n-            { Math.nextUp(-1.0f),                         -0.0f},\n-\n-            { 0x1.0p22f,                                 0x1.0p22f},\n-            {-0x1.0p22f,                                -0x1.0p22f},\n-\n-            { Math.nextDown(0x1.0p22f),                  0x1.0p22f},\n-            {-Math.nextUp(0x1.0p22f),                   -0x1.0p22f},\n-\n-            { Math.nextUp(0x1.0p22f),                    0x1.0p22f+1f},\n-            {-Math.nextDown(0x1.0p22f),                 -0x1.0p22f+1f},\n-\n-            { Math.nextDown(0x1.0p23f),                  0x1.0p23f},\n-            {-Math.nextUp(0x1.0p23f),                   -0x1.0p23f-1f},\n-\n-            { Math.nextUp(0x1.0p23f),                    0x1.0p23f+1f},\n-            {-Math.nextDown(0x1.0p23f),                 -0x1.0p23f+1f},\n-        };\n-\n-        for(float[] testCase : testCases) {\n-            failures += testCeilCase(testCase[0], testCase[1]);\n-            failures += testFloorCase(-testCase[0], -testCase[1]);\n-        }\n-        return failures;\n-    }\n-\n-    public static void main(String... args) {\n-        int failures = 0;\n-\n-        System.out.println(\"nearIntegerTests\");\n-        failures += nearIntegerTests();\n-\n-        System.out.println(\"roundingTests\");\n-        failures += roundingTests();\n-\n-        if (failures > 0) {\n-            System.err.println(\"Testing {FloatMath}.ceil\/floor incurred \"\n-                               + failures + \" failures.\");\n-            throw new RuntimeException();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/java2d\/marlin\/CeilAndFloorTests.java","additions":0,"deletions":250,"binary":false,"changes":250,"status":"deleted"}]}