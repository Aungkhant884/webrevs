{"files":[{"patch":"@@ -265,6 +265,7 @@\n-\n-        for (Archive archive : archives) {\n-            String mn = archive.moduleName();\n-            entriesForModule.get(mn).stream()\n-                .map(e -> new ArchiveEntryResourcePoolEntry(mn,\n-                                    e.getResourcePoolEntryName(), e))\n+        archives.stream()\n+                .map(Archive::moduleName)\n+                .sorted()\n+                .flatMap(mn ->\n+                    entriesForModule.get(mn).stream()\n+                            .map(e -> new ArchiveEntryResourcePoolEntry(mn,\n+                                    e.getResourcePoolEntryName(), e)))\n@@ -272,1 +273,0 @@\n-        }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageFileCreator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,3 @@\n+ *          jdk.management\n+ *          jdk.unsupported\n+ *          jdk.charsets\n@@ -51,1 +54,11 @@\n-            new RuntimeException(\"jlink producing inconsistent result\");\n+            throw new RuntimeException(\"jlink producing inconsistent result\");\n+        }\n+\n+        Path image3 = Paths.get(\".\/image3\");\n+        Path image4 = Paths.get(\".\/image4\");\n+\n+        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image3.toString());\n+        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image4.toString());\n+\n+        if (Files.mismatch(image3.resolve(\"lib\").resolve(\"modules\"), image4.resolve(\"lib\").resolve(\"modules\")) != -1L) {\n+            throw new RuntimeException(\"jlink producing inconsistent result with multiple named modules\");\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible2Test.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Optional;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that jimages are consistent when created by jlink. Copies test jdk and runs against original.\n+ * @bug 8252730\n+ * @modules jdk.jlink\n+ *          jdk.management\n+ *          jdk.unsupported\n+ *          jdk.charsets\n+ * @library \/test\/lib\n+ * @run main JLinkReproducible3Test\n+ *\/\n+public class JLinkReproducible3Test {\n+\n+    public static void main(String[] args) throws Exception {\n+        Path image1 = Paths.get(\".\/image1\");\n+        Path image2 = Paths.get(\".\/image2\");\n+\n+        Path copy_jdk1_dir = Path.of(\".\/copy-jdk1-tmpdir\");\n+        Path copy_jdk2_dir = Path.of(\".\/copy-jdk2-tmpdir\");\n+        Path jdk_test_dir = Path.of(\n+                Optional.of(\n+                        System.getProperty(\"test.jdk\"))\n+                        .orElseThrow(() -> new RuntimeException(\"Couldn't load JDK Test Dir\"))\n+        );\n+\n+        Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, copy_jdk1_dir));\n+        Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, copy_jdk2_dir));\n+\n+        File jdk1_dir_file = copy_jdk1_dir.toFile();\n+        File jdk2_dir_file = copy_jdk2_dir.toFile();\n+\n+        if (!jdk2_dir_file.mkdir() && !jdk2_dir_file.exists() || !jdk1_dir_file.mkdir() && !jdk1_dir_file.exists()) {\n+            throw new RuntimeException(\"Unable to create copy jdk directory\");\n+        }\n+\n+        jdk2_dir_file.deleteOnExit();\n+\n+        Path copied_jlink1 = Optional.of(\n+                Paths.get(copy_jdk1_dir.toString(), \"bin\", \"jlink\"))\n+                .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n+                );\n+\n+        Path copied_jlink2 = Optional.of(\n+                Paths.get(copy_jdk2_dir.toString(), \"bin\", \"jlink\"))\n+                .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n+                );\n+\n+        runCopiedJlink(copied_jlink1.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image1.toString());\n+        runCopiedJlink(copied_jlink2.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image2.toString());\n+\n+        long mismatch = Files.mismatch(image1.resolve(\"lib\").resolve(\"modules\"), image2.resolve(\"lib\").resolve(\"modules\"));\n+        if (mismatch != -1L) {\n+            throw new RuntimeException(\"jlink producing inconsistent result in modules. Mismatch in modules file occurred at byte position \" + mismatch);\n+        }\n+    }\n+\n+    private static void runCopiedJlink(String...args) throws Exception {\n+        var pb = new ProcessBuilder(args);\n+        var res = ProcessTools.executeProcess(pb);\n+        res.shouldHaveExitValue(0);\n+    }\n+\n+    private static String runJavaVersion(Path jdk_test_base_dir) throws Exception {\n+        var java_exec = Paths.get(jdk_test_base_dir.toString(), \"bin\", \"java\");\n+        var pb = new ProcessBuilder(java_exec.toString(), \"--version\");\n+        var res = ProcessTools.executeProcess(pb);\n+        res.shouldHaveExitValue(0);\n+        return res.getStdout();\n+    }\n+\n+    private static class CopyFileVisitor extends SimpleFileVisitor<Path> {\n+        private final Path src;\n+        private final Path dst;\n+\n+        public CopyFileVisitor(Path src, Path dst) {\n+            this.src = src;\n+            this.dst = dst;\n+        }\n+\n+        @Override\n+        public FileVisitResult preVisitDirectory(Path file,\n+                                                 BasicFileAttributes attrs) throws IOException {\n+            Path dstDir = dst.resolve(src.relativize(file));\n+            if (!dstDir.toFile().exists()) {\n+                Files.createDirectories(dstDir);\n+            }\n+            return FileVisitResult.CONTINUE;\n+        }\n+\n+        @Override\n+        public FileVisitResult visitFile(Path file,\n+                                         BasicFileAttributes attrs) throws IOException {\n+            if (!file.toFile().isFile()) {\n+                return FileVisitResult.CONTINUE;\n+            }\n+            Path dstFile = dst.resolve(src.relativize(file));\n+            Files.copy(file, dstFile, StandardCopyOption.COPY_ATTRIBUTES);\n+            return FileVisitResult.CONTINUE;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible3Test.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}