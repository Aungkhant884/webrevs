{"files":[{"patch":"@@ -265,6 +265,7 @@\n-\n-        for (Archive archive : archives) {\n-            String mn = archive.moduleName();\n-            entriesForModule.get(mn).stream()\n-                .map(e -> new ArchiveEntryResourcePoolEntry(mn,\n-                                    e.getResourcePoolEntryName(), e))\n+        archives.stream()\n+                .map(Archive::moduleName)\n+                .sorted()\n+                .flatMap(mn ->\n+                    entriesForModule.get(mn).stream()\n+                            .map(e -> new ArchiveEntryResourcePoolEntry(mn,\n+                                    e.getResourcePoolEntryName(), e)))\n@@ -272,1 +273,0 @@\n-        }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/ImageFileCreator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            new RuntimeException(\"jlink producing inconsistent result\");\n+            throw new RuntimeException(\"jlink producing inconsistent result\");\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible2Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.spi.ToolProvider;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that jimages are consistent when created by jlink.\n+ * @bug 8252730\n+ * @modules jdk.jlink\n+ *          java.base\n+ *          jdk.management\n+ *          jdk.unsupported\n+ *          jdk.charsets\n+ * @run main JLinkReproducible3Test\n+ *\/\n+public class JLinkReproducible3Test {\n+    static final ToolProvider JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+            .orElseThrow(() ->\n+                    new RuntimeException(\"jlink tool not found\")\n+            );\n+\n+    public static void main(String[] args) throws Exception {\n+        Path image1 = Paths.get(\".\/image1\");\n+        Path image2 = Paths.get(\".\/image2\");\n+\n+        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image1.toString());\n+        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image2.toString());\n+\n+        if (Files.mismatch(image1.resolve(\"lib\").resolve(\"modules\"), image2.resolve(\"lib\").resolve(\"modules\")) != -1L) {\n+            throw new RuntimeException(\"jlink producing inconsistent result in modules\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible3Test.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Optional;\n+import java.util.spi.ToolProvider;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that jimages are consistent when created by jlink. Copies test jdk and runs against original.\n+ * @bug 8252730\n+ * @modules jdk.jlink\n+ *          java.base\n+ *          jdk.management\n+ *          jdk.unsupported\n+ *          jdk.charsets\n+ * @library \/test\/lib\n+ * @run main JLinkReproducible4Test\n+ *\/\n+public class JLinkReproducible4Test {\n+    static final Path COPIED_JLINK;\n+    static final ToolProvider JLINK_TOOL;\n+\n+    static {\n+        try {\n+            Path jdk2_dir = Files.createTempDirectory(\"JLinkReproducible4Test-jdk2\");\n+            Path jdk_test_dir = Path.of(\n+                    Optional.of(\n+                            System.getProperty(\"test.jdk\"))\n+                            .orElseThrow(() -> new RuntimeException(\"Couldn't load JDK Test Dir\"))\n+            );\n+\n+            Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, jdk2_dir));\n+\n+            COPIED_JLINK = Optional.of(\n+                    Paths.get(jdk2_dir.toString(), \"bin\", \"jlink\"))\n+                    .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n+                    );\n+\n+            JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n+                    .orElseThrow(() ->\n+                            new RuntimeException(\"jlink tool not found\")\n+                    );\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Couldn't intialize JDKs\");\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Path image1 = Paths.get(\".\/image1\");\n+        Path image2 = Paths.get(\".\/image2\");\n+\n+        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image1.toString());\n+        runCopiedJlink(COPIED_JLINK.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image2.toString());\n+\n+        if (Files.mismatch(image1.resolve(\"lib\").resolve(\"modules\"), image2.resolve(\"lib\").resolve(\"modules\")) != -1L) {\n+            throw new RuntimeException(\"jlink producing inconsistent result in modules\");\n+        }\n+    }\n+\n+    private static void runCopiedJlink(String...args) throws Exception {\n+        var pb = new ProcessBuilder(args);\n+        var res = ProcessTools.executeProcess(pb);\n+        res.shouldHaveExitValue(0);\n+    }\n+\n+    private static class CopyFileVisitor extends SimpleFileVisitor<Path> {\n+        private final Path src;\n+        private final Path dst;\n+\n+        public CopyFileVisitor(Path src, Path dst) {\n+            this.src = src;\n+            this.dst = dst;\n+        }\n+\n+        @Override\n+        public FileVisitResult preVisitDirectory(Path file,\n+                                                 BasicFileAttributes attrs) throws IOException {\n+            Path dstDir = dst.resolve(src.relativize(file));\n+            if (!dstDir.toFile().exists()) {\n+                Files.createDirectories(dstDir);\n+            }\n+            return FileVisitResult.CONTINUE;\n+        }\n+\n+        @Override\n+        public FileVisitResult visitFile(Path file,\n+                                         BasicFileAttributes attrs) throws IOException {\n+            if (!file.toFile().isFile()) {\n+                return FileVisitResult.CONTINUE;\n+            }\n+            Path dstFile = dst.resolve(src.relativize(file));\n+            Files.copy(file, dstFile, StandardCopyOption.COPY_ATTRIBUTES);\n+            return FileVisitResult.CONTINUE;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible4Test.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}