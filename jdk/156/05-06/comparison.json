{"files":[{"patch":"@@ -25,0 +25,2 @@\n+\n+import java.io.File;\n@@ -29,1 +31,0 @@\n-import java.util.spi.ToolProvider;\n@@ -43,29 +44,0 @@\n-    static final Path COPIED_JLINK;\n-    static final ToolProvider JLINK_TOOL;\n-\n-    static {\n-        try {\n-            Path jdk2_dir = Files.createTempDirectory(\"JLinkReproducible4Test-jdk2\");\n-            Path jdk_test_dir = Path.of(\n-                    Optional.of(\n-                            System.getProperty(\"test.jdk\"))\n-                            .orElseThrow(() -> new RuntimeException(\"Couldn't load JDK Test Dir\"))\n-            );\n-\n-            Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, jdk2_dir));\n-\n-            COPIED_JLINK = Optional.of(\n-                    Paths.get(jdk2_dir.toString(), \"bin\", \"jlink\"))\n-                    .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n-                    );\n-\n-            JLINK_TOOL = ToolProvider.findFirst(\"jlink\")\n-                    .orElseThrow(() ->\n-                            new RuntimeException(\"jlink tool not found\")\n-                    );\n-\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Couldn't intialize JDKs\");\n-        }\n-\n-    }\n@@ -77,2 +49,32 @@\n-        JLINK_TOOL.run(System.out, System.err, \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image1.toString());\n-        runCopiedJlink(COPIED_JLINK.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image2.toString());\n+        Path copy_jdk1_dir = Path.of(\".\/copy-jdk1-tmpdir\");\n+        Path copy_jdk2_dir = Path.of(\".\/copy-jdk2-tmpdir\");\n+        Path jdk_test_dir = Path.of(\n+                Optional.of(\n+                        System.getProperty(\"test.jdk\"))\n+                        .orElseThrow(() -> new RuntimeException(\"Couldn't load JDK Test Dir\"))\n+        );\n+\n+        Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, copy_jdk1_dir));\n+        Files.walkFileTree(jdk_test_dir, new CopyFileVisitor(jdk_test_dir, copy_jdk2_dir));\n+\n+        File jdk1_dir_file = copy_jdk1_dir.toFile();\n+        File jdk2_dir_file = copy_jdk2_dir.toFile();\n+\n+        if (!jdk2_dir_file.mkdir() && !jdk2_dir_file.exists() || !jdk1_dir_file.mkdir() && !jdk1_dir_file.exists()) {\n+            throw new RuntimeException(\"Unable to create copy jdk directory\");\n+        }\n+\n+        jdk2_dir_file.deleteOnExit();\n+\n+        Path copied_jlink1 = Optional.of(\n+                Paths.get(copy_jdk1_dir.toString(), \"bin\", \"jlink\"))\n+                .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n+                );\n+\n+        Path copied_jlink2 = Optional.of(\n+                Paths.get(copy_jdk2_dir.toString(), \"bin\", \"jlink\"))\n+                .orElseThrow(() -> new RuntimeException(\"Unable to load copied jlink\")\n+                );\n+\n+        runCopiedJlink(copied_jlink1.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image1.toString());\n+        runCopiedJlink(copied_jlink2.toString(), \"--add-modules\", \"java.base,jdk.management,jdk.unsupported,jdk.charsets\", \"--output\", image2.toString());\n@@ -80,2 +82,3 @@\n-        if (Files.mismatch(image1.resolve(\"lib\").resolve(\"modules\"), image2.resolve(\"lib\").resolve(\"modules\")) != -1L) {\n-            throw new RuntimeException(\"jlink producing inconsistent result in modules\");\n+        long mismatch = Files.mismatch(image1.resolve(\"lib\").resolve(\"modules\"), image2.resolve(\"lib\").resolve(\"modules\"));\n+        if (mismatch != -1L) {\n+            throw new RuntimeException(\"jlink producing inconsistent result in modules. Mismatch in modules file occurred at byte position \" + mismatch);\n@@ -91,0 +94,8 @@\n+    private static String runJavaVersion(Path jdk_test_base_dir) throws Exception {\n+        var java_exec = Paths.get(jdk_test_base_dir.toString(), \"bin\", \"java\");\n+        var pb = new ProcessBuilder(java_exec.toString(), \"--version\");\n+        var res = ProcessTools.executeProcess(pb);\n+        res.shouldHaveExitValue(0);\n+        return res.getStdout();\n+    }\n+\n","filename":"test\/jdk\/tools\/jlink\/JLinkReproducible3Test.java","additions":45,"deletions":34,"binary":false,"changes":79,"status":"modified"}]}