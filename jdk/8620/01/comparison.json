{"files":[{"patch":"@@ -2860,1 +2860,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2922,1 +2922,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3078,1 +3078,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3257,1 +3257,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3331,1 +3331,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3486,1 +3488,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3607,1 +3611,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3643,1 +3649,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2685,1 +2685,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2747,1 +2747,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -2972,1 +2972,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3046,1 +3046,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3193,1 +3195,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+            }\n@@ -3229,1 +3233,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2709,1 +2709,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2771,1 +2771,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -2978,1 +2978,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3052,1 +3052,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3180,1 +3182,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+            }\n@@ -3216,1 +3220,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2852,1 +2852,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2914,1 +2914,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3121,1 +3121,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3195,1 +3195,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3323,1 +3325,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, a.length);\n+            }\n@@ -3359,1 +3363,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 4, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2713,1 +2713,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2775,1 +2775,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3000,1 +3000,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3074,1 +3074,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3221,1 +3223,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, a.length);\n+            }\n@@ -3257,1 +3261,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 8, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2860,1 +2860,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -2922,1 +2922,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3071,1 +3071,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3256,1 +3256,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -3330,1 +3330,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3477,1 +3479,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -3593,1 +3597,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, a.length);\n+            }\n@@ -3629,1 +3635,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, 2, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,5 @@\n+    @ForceInline\n+    static boolean indexInRange(int ix, int vlen, int length) {\n+        return ix >= 0 && ix <= (length - vlen);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorIntrinsics.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3378,1 +3378,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n@@ -3440,1 +3440,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3661,1 +3661,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -3820,1 +3820,1 @@\n-        if (offset >= 0 && offset <= (a.length - species.length())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n@@ -4012,1 +4012,1 @@\n-        if (offset >= 0 && offset <= (bb.limit() - species.vectorByteSize())) {\n+        if (VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n@@ -4086,1 +4086,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -4304,1 +4306,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -4466,1 +4470,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.length(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, 1, a.length);\n+            }\n@@ -4588,1 +4594,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), a.length)) {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, a.length);\n+            }\n@@ -4624,1 +4632,3 @@\n-            checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n+            if (!VectorIntrinsics.indexInRange(offset, vsp.vectorByteSize(), bb.limit())) {\n+                checkMaskFromIndexSize(offset, vsp, m, $sizeInBytes$, bb.limit());\n+            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/\/\n+\/\/ Copyright (c) 2022, Arm Limited. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class StoreMaskedBenchmark {\n+    @Param({\"1024\"})\n+    private int size;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private boolean[] m;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[size];\n+        byteOut = new byte[size];\n+        shortIn = new short[size];\n+        shortOut = new short[size];\n+        intIn = new int[size];\n+        intOut = new int[size];\n+        longIn = new long[size];\n+        longOut = new long[size];\n+        floatIn = new float[size];\n+        floatOut = new float[size];\n+        doubleIn = new double[size];\n+        doubleOut = new double[size];\n+        m = new boolean[size];\n+\n+        for (int i = 0; i < size; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+        for (int i = 0; i < size; i++) {\n+            m[i] = i % 2 == 0;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteStoreArrayMask() {\n+        for (int i = 0; i < size; i += bspecies.length()) {\n+            VectorMask<Byte> mask = VectorMask.fromArray(bspecies, m, i);\n+            ByteVector.fromArray(bspecies, byteIn, i).intoArray(byteOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortStoreArrayMask() {\n+        for (int i = 0; i < size; i += sspecies.length()) {\n+            VectorMask<Short> mask = VectorMask.fromArray(sspecies, m, i);\n+            ShortVector.fromArray(sspecies, shortIn, i).intoArray(shortOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intStoreArrayMask() {\n+        for (int i = 0; i < size; i += ispecies.length()) {\n+            VectorMask<Integer> mask = VectorMask.fromArray(ispecies, m, i);\n+            IntVector.fromArray(ispecies, intIn, i).intoArray(intOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longStoreArrayMask() {\n+        for (int i = 0; i < size; i += lspecies.length()) {\n+            VectorMask<Long> mask = VectorMask.fromArray(lspecies, m, i);\n+            LongVector.fromArray(lspecies, longIn, i).intoArray(longOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatStoreArrayMask() {\n+        for (int i = 0; i < size; i += fspecies.length()) {\n+            VectorMask<Float> mask = VectorMask.fromArray(fspecies, m, i);\n+            FloatVector.fromArray(fspecies, floatIn, i).intoArray(floatOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleStoreArrayMask() {\n+        for (int i = 0; i < size; i += dspecies.length()) {\n+            VectorMask<Double> mask = VectorMask.fromArray(dspecies, m, i);\n+            DoubleVector.fromArray(dspecies, doubleIn, i).intoArray(doubleOut, i, mask);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedBenchmark.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}