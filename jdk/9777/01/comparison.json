{"files":[{"patch":"@@ -403,1 +403,1 @@\n-    return mm;\n+    return phase->transform(mm);\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -967,8 +967,0 @@\n-  const TypePtr *t = adr_type();\n-  assert(type() == Type::MEMORY &&\n-         (t == TypePtr::BOTTOM || t == TypeRawPtr::BOTTOM ||\n-          t->isa_oopptr() && !t->is_oopptr()->is_known_instance() &&\n-          t->is_oopptr()->cast_to_exactness(true)\n-           ->is_oopptr()->cast_to_ptr_type(t_oop->ptr())\n-           ->is_oopptr()->cast_to_instance_id(t_oop->instance_id()) == t_oop),\n-         \"bottom or raw memory required\");\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -218,5 +218,17 @@\n-    if (t == TypePtr::BOTTOM || t == TypeRawPtr::BOTTOM ||\n-        (t->isa_oopptr() && !t->is_oopptr()->is_known_instance() &&\n-         t->is_oopptr()->cast_to_exactness(true)\n-           ->is_oopptr()->cast_to_ptr_type(t_oop->ptr())\n-            ->is_oopptr()->cast_to_instance_id(t_oop->instance_id()) == t_oop)) {\n+    bool do_split = false;\n+    if (t == TypePtr::BOTTOM || t == TypeRawPtr::BOTTOM ) {\n+      do_split = true;\n+    } else if (t->isa_oopptr() && !t->is_oopptr()->is_known_instance()) {\n+      const TypeOopPtr* mem_t =\n+        t->is_oopptr()->cast_to_exactness(true)\n+          ->is_oopptr()->cast_to_ptr_type(t_oop->ptr())\n+            ->is_oopptr()->cast_to_instance_id(t_oop->instance_id());\n+      if (t_oop->is_aryptr()) {\n+        mem_t = mem_t->is_aryptr()\n+                      ->cast_to_size(t_oop->is_aryptr()->size())\n+                        ->with_offset(t_oop->is_aryptr()->offset())\n+                          ->is_aryptr();\n+      }\n+      do_split = mem_t == t_oop;\n+    }\n+    if (do_split) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -4616,0 +4616,5 @@\n+const TypePtr *TypeAryPtr::with_offset(int offset) const {\n+  assert(offset != OffsetTop && offset != OffsetBot, \"should be known\");\n+  return make(_ptr, _const_oop, _ary->remove_speculative()->is_ary(), _klass, _klass_is_exact, offset, _instance_id, _speculative, _inline_depth);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1284,0 +1284,1 @@\n+  virtual const TypePtr* with_offset(int offset) const;\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8288204\n+ * @summary GVN Crash: assert() failed: correct memory chain\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.c2.TestGVNCrash::test compiler.c2.TestGVNCrash\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestGVNCrash {\n+    public static int iField = 0;\n+    public static double[] dArrFld = new double[256];\n+    public static int[] iArrFld = new int[256];\n+    public int[][] iArrFld1 = new int[256][256];\n+\n+    public void test() {\n+        int x = 0;\n+        for (int i = 0; i < 10; i++) {\n+            do {\n+                for (float j = 0; j < 0; j++) {\n+                    iArrFld[x] = 3;\n+                    iArrFld1[1][x] -= iField;\n+                    dArrFld = new double[256];\n+                    for (int k = 0; k < dArrFld.length; k++) {\n+                        dArrFld[k] = (k % 2 == 0) ? k + 1 : k - 1;\n+                    }\n+                }\n+            } while (++x < 5);\n+            for (int j = 0; j < 100_000; j++) {\n+                String s = \"test\";\n+                s = s + s;\n+                s = s + s;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestGVNCrash t = new TestGVNCrash();\n+        t.test();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestGVNCrash.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}