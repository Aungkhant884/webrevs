{"files":[{"patch":"@@ -4061,1 +4061,2 @@\n-  if (superelem->is_array_klass())\n+  ciType* subelem = subk;\n+  if (superelem->is_array_klass()) {\n@@ -4063,0 +4064,4 @@\n+  }\n+  if (subelem->is_array_klass()) {\n+    subelem = subelem->as_array_klass()->base_element_type();\n+  }\n@@ -4069,0 +4074,1 @@\n+        !(subelem->is_klass() && subelem->as_klass()->is_interface()) &&\n@@ -4070,1 +4076,1 @@\n-      return SSC_always_false;\n+      return SSC_always_false;  \/\/ (2) true path dead; no dynamic test needed\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266615\n+ * @summary C2 incorrectly folds subtype checks involving an interface array.\n+ * @run main\/othervm -Xbatch\n+ *                   compiler.types.TestInterfaceArraySubtypeCheck\n+ *\/\n+\n+package compiler.types;\n+\n+public class TestInterfaceArraySubtypeCheck {\n+\n+    static interface MyInterface { }\n+\n+    static class MyClassA { }\n+\n+    static class MyClassB extends MyClassA implements MyInterface { }\n+\n+    static MyInterface[] getMyInterfaceArray() {\n+        return new MyClassB[0];\n+    }\n+\n+    static MyInterface getMyInterface() {\n+        return new MyClassB();\n+    }\n+\n+    static MyClassA[] test1() {\n+        return (MyClassA[])getMyInterfaceArray();\n+    }\n+\n+    static void test2() {\n+        if (!(getMyInterfaceArray() instanceof MyClassA[])) {\n+            throw new RuntimeException(\"test2 failed\");\n+        }\n+    }\n+\n+    static MyClassA test3() {\n+        return (MyClassA)getMyInterface();\n+    }\n+\n+    static void test4() {\n+        if (!(getMyInterface() instanceof MyClassA)) {\n+            throw new RuntimeException(\"test4 failed\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 50_000; ++i) {\n+            test1();\n+            test2();\n+            test3();\n+            test4();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestInterfaceArraySubtypeCheck.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}