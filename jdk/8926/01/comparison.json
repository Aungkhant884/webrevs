{"files":[{"patch":"@@ -1089,6 +1089,5 @@\n-  if (resolved_method->is_continuation_enter_intrinsic()) {\n-    if (!resolved_method->has_compiled_code()) {\n-      methodHandle mh(THREAD, resolved_method);\n-      \/\/ Generate a compiled form of the enterSpecial intrinsic.\n-      AdapterHandlerLibrary::create_native_wrapper(mh);\n-    }\n+  if (resolved_method->is_continuation_enter_intrinsic()\n+      && resolved_method->from_interpreted_entry() == NULL) { \/\/ does a load_acquire\n+    methodHandle mh(THREAD, resolved_method);\n+    \/\/ Generate a compiled form of the enterSpecial intrinsic.\n+    AdapterHandlerLibrary::create_native_wrapper(mh);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1239,0 +1239,6 @@\n+\n+  if (h_method->is_continuation_enter_intrinsic()) {\n+    \/\/ the entry points to this method will be set in set_code, called when first resolving this method\n+    _from_interpreted_entry = NULL;\n+    _from_compiled_entry = NULL;\n+  }\n@@ -1320,3 +1326,1 @@\n-  \/\/ Instantly compiled code can execute.\n-  if (!mh->is_method_handle_intrinsic())\n-    mh->_from_interpreted_entry = mh->get_i2c_entry();\n+\n@@ -1324,1 +1328,3 @@\n-    \/\/ this is the entry used when we're in interpreter-only mode; see InterpreterMacroAssembler::jump_from_interpreted\n+    assert(mh->_from_interpreted_entry == NULL, \"initialized incorrectly\"); \/\/ see link_method\n+\n+    \/\/ This is the entry used when we're in interpreter-only mode; see InterpreterMacroAssembler::jump_from_interpreted\n@@ -1326,0 +1332,4 @@\n+    \/\/ This must come last, as it is what's tested in LinkResolver::resolve_static_call\n+    Atomic::release_store(&mh->_from_interpreted_entry , mh->get_i2c_entry());\n+  } else if (!mh->is_method_handle_intrinsic()) {\n+    \/\/ Instantly compiled code can execute.\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}