{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, 2020, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Red Hat Inc. All rights reserved.\n@@ -2660,6 +2660,6 @@\n-#define INSN(NAME, op)                                                     \\\n-  void NAME(Register Rd, FloatRegister Vn, SIMD_RegVariant T, int idx) {   \\\n-    starti;                                                                \\\n-    f(0, 31), f(T==D ? 1:0, 30), f(0b001110000, 29, 21);                   \\\n-    f(((idx<<1)|1)<<(int)T, 20, 16), f(op, 15, 10);                        \\\n-    rf(Vn, 5), rf(Rd, 0);                                                  \\\n+  void umov(Register Rd, FloatRegister Vn, SIMD_RegVariant T, int idx) {\n+    starti;\n+    assert(T != Q, \"invalid register variant\");\n+    f(0, 31), f(T==D ? 1:0, 30), f(0b001110000, 29, 21);\n+    f(((idx<<1)|1)<<(int)T, 20, 16), f(0b001111, 15, 10);\n+    rf(Vn, 5), rf(Rd, 0);\n@@ -2668,3 +2668,7 @@\n-  INSN(umov, 0b001111);\n-  INSN(smov, 0b001011);\n-#undef INSN\n+  void smov(Register Rd, FloatRegister Vn, SIMD_RegVariant T, int idx) {\n+    starti;\n+    assert(T < D, \"invalid register variant\");\n+    f(0, 31), f(1, 30), f(0b001110000, 29, 21);\n+    f(((idx<<1)|1)<<(int)T, 20, 16), f(0b001011, 15, 10);\n+    rf(Vn, 5), rf(Rd, 0);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1502,0 +1502,7 @@\n+                        [\"smov\",   \"__ smov(r0, v1, __ S, 0);\",                          \"smov\\tx0, v1.s[0]\"],\n+                        [\"smov\",   \"__ smov(r0, v1, __ H, 1);\",                          \"smov\\tx0, v1.h[1]\"],\n+                        [\"smov\",   \"__ smov(r0, v1, __ B, 2);\",                          \"smov\\tx0, v1.b[2]\"],\n+                        [\"umov\",   \"__ umov(r0, v1, __ D, 0);\",                          \"umov\\tx0, v1.d[0]\"],\n+                        [\"umov\",   \"__ umov(r0, v1, __ S, 1);\",                          \"umov\\tw0, v1.s[1]\"],\n+                        [\"umov\",   \"__ umov(r0, v1, __ H, 2);\",                          \"umov\\tw0, v1.h[2]\"],\n+                        [\"umov\",   \"__ umov(r0, v1, __ B, 3);\",                          \"umov\\tw0, v1.b[3]\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -688,0 +688,7 @@\n+    __ smov(r0, v1, __ S, 0);                          \/\/       smov    x0, v1.s[0]\n+    __ smov(r0, v1, __ H, 1);                          \/\/       smov    x0, v1.h[1]\n+    __ smov(r0, v1, __ B, 2);                          \/\/       smov    x0, v1.b[2]\n+    __ umov(r0, v1, __ D, 0);                          \/\/       umov    x0, v1.d[0]\n+    __ umov(r0, v1, __ S, 1);                          \/\/       umov    w0, v1.s[1]\n+    __ umov(r0, v1, __ H, 2);                          \/\/       umov    w0, v1.h[2]\n+    __ umov(r0, v1, __ B, 3);                          \/\/       umov    w0, v1.b[3]\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}