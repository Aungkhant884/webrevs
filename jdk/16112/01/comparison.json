{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -550,1 +551,1 @@\n-            throw new NumberFormatException(\"Cannot parse null string\");\n+            throw NumberFormatException.forNull();\n@@ -554,2 +555,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -559,2 +559,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -624,2 +623,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -629,2 +627,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -685,0 +682,29 @@\n+        if (s != null && s.coder() == String.LATIN1) {\n+            final byte[] value = s.value();\n+            final int len = value.length;\n+            if (len == 0) {\n+                throw NumberFormatException.forInputString(\"\", 10);\n+            }\n+            int digit = ~0xFF;\n+            int i = 0;\n+            byte firstChar = value[i++];\n+            if (firstChar != '-' && firstChar != '+') {\n+                digit = DecimalDigits.digit(firstChar);\n+            }\n+            if (digit >= 0 || digit == ~0xFF && len > 1) {\n+                int limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n+                final int multmin = -214748364; \/\/ actual limit \/ 10;\n+                int result = -(digit & 0xFF);\n+                boolean inRange = true;\n+                \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n+                while (i < len && (digit = DecimalDigits.digit(value[i++])) >= 0\n+                        && (inRange = result > multmin\n+                        || result == multmin && digit <= multmin * 10 - limit)) {\n+                    result = 10 * result - digit;\n+                }\n+                if (inRange && i == len && digit >= 0) {\n+                    return firstChar != '-' ? -result : result;\n+                }\n+            }\n+            throw NumberFormatException.forInputString(s, 10);\n+        }\n@@ -734,1 +760,1 @@\n-            throw new NumberFormatException(\"Cannot parse null string\");\n+            throw NumberFormatException.forNull();\n@@ -738,2 +764,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -743,2 +768,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -754,2 +778,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"Illegal leading minus sign on unsigned string %s.\", s));\n+            throw NumberFormatException.forUnsign(s);\n@@ -777,2 +800,1 @@\n-        throw new NumberFormatException(String.format(\n-            \"String value %s exceeds range of unsigned int.\", s));\n+        throw NumberFormatException.forUnsignInt(s);\n@@ -814,2 +836,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -819,2 +840,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -835,2 +855,1 @@\n-            throw new NumberFormatException(\n-                \"Illegal leading minus sign on unsigned string \" + s + \".\");\n+            throw NumberFormatException.forUnsign(s);\n@@ -859,2 +878,1 @@\n-        throw new NumberFormatException(String.format(\n-            \"String value %s exceeds range of unsigned int.\", s));\n+        throw NumberFormatException.forUnsignInt(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":44,"deletions":26,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -580,1 +581,1 @@\n-            throw new NumberFormatException(\"Cannot parse null string\");\n+            throw NumberFormatException.forNull();\n@@ -584,2 +585,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -589,2 +589,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -654,2 +653,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -659,2 +657,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -722,0 +719,30 @@\n+        if (s != null && s.coder() == String.LATIN1) {\n+            final byte[] value = s.value();\n+            final int len = value.length;\n+            if (len == 0) {\n+                throw NumberFormatException.forInputString(\"\", 10);\n+            }\n+            int digit = ~0xFF;\n+            int i = 0;\n+            byte firstChar = value[i++];\n+            if (firstChar != '-' && firstChar != '+') {\n+                digit = DecimalDigits.digit(firstChar);\n+            }\n+            if (digit >= 0 || digit == ~0xFF && len > 1) {\n+                long limit = firstChar != '-' ? MIN_VALUE + 1 : MIN_VALUE;\n+                final long multmin = -922337203685477580L; \/\/ actual limit \/ 10\n+                long result = -(digit & 0xFF);\n+                boolean inRange = true;\n+                \/* Accumulating negatively avoids surprises near MAX_VALUE *\/\n+                while (i < len && (digit = DecimalDigits.digit(value[i++])) >= 0\n+                        && (inRange = result > multmin\n+                        || result == multmin && digit <= (int) (10 * multmin - limit))) {\n+                    result = 10 * result - digit;\n+                }\n+                if (inRange && i == len && digit >= 0) {\n+                    return firstChar != '-' ? -result : result;\n+                }\n+            }\n+            throw NumberFormatException.forInputString(s, 10);\n+        }\n+\n@@ -771,1 +798,1 @@\n-            throw new NumberFormatException(\"Cannot parse null string\");\n+            throw NumberFormatException.forNull();\n@@ -775,2 +802,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -780,2 +806,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -791,2 +816,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"Illegal leading minus sign on unsigned string %s.\", s));\n+            throw NumberFormatException.forUnsign(s);\n@@ -814,2 +838,1 @@\n-        throw new NumberFormatException(String.format(\n-            \"String value %s exceeds range of unsigned long.\", s));\n+        throw NumberFormatException.forUnsignLong(s);\n@@ -851,2 +874,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s less than Character.MIN_RADIX\", radix));\n+            throw NumberFormatException.forMinRadix(radix);\n@@ -856,2 +878,1 @@\n-            throw new NumberFormatException(String.format(\n-                \"radix %s greater than Character.MAX_RADIX\", radix));\n+            throw NumberFormatException.forMaxRadix(radix);\n@@ -872,2 +893,1 @@\n-            throw new NumberFormatException(\n-                \"Illegal leading minus sign on unsigned string \" + s + \".\");\n+            throw NumberFormatException.forUnsign(s);\n@@ -896,2 +916,1 @@\n-        throw new NumberFormatException(String.format(\n-            \"String value %s exceeds range of unsigned long.\", s));\n+        throw NumberFormatException.forUnsignLong(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":45,"deletions":26,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -85,0 +85,24 @@\n+\n+    static NumberFormatException forUnsign(CharSequence s) {\n+        return new NumberFormatException(\"Illegal leading minus sign on unsigned string \" + s + \".\");\n+    }\n+\n+    static NumberFormatException forUnsignLong(CharSequence s) {\n+        return new NumberFormatException(\"String value \" + s + \" exceeds range of unsigned long.\");\n+    }\n+\n+    static NumberFormatException forUnsignInt(CharSequence s) {\n+        return new NumberFormatException(\"String value \" + s + \" exceeds range of unsigned int.\");\n+    }\n+\n+    static NumberFormatException forMinRadix(int radix) {\n+        return new NumberFormatException(\"radix \" + radix + \" greater than Character.MIN_RADIX\");\n+    }\n+\n+    static NumberFormatException forMaxRadix(int radix) {\n+        return new NumberFormatException(\"radix \" + radix + \" greater than Character.MAX_RADIX\");\n+    }\n+\n+    static NumberFormatException forNull() {\n+        return new NumberFormatException(\"Cannot parse null string\");\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/NumberFormatException.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,0 +38,15 @@\n+    @Stable\n+    private static final byte[] DIGITS_LATIN1 = new byte[] {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };\n@@ -162,0 +177,13 @@\n+\n+\n+    \/**\n+     * Returns the numeric value of the character {@code ch}\n+     * <p>\n+     * if the value of {@code ch} is not a valid digit, {@code -1} is returned.\n+     *\n+     * @param   ch      the character to be converted.\n+     * @return  the numeric value represented by the character.\n+     *\/\n+    public static int digit(byte ch) {\n+        return DIGITS_LATIN1[ch & 0xFF];\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+    private String[] stringsUnsigned;\n@@ -66,0 +67,1 @@\n+        stringsUnsigned  = new String[size];\n@@ -72,1 +74,3 @@\n-            strings[i] = \"\" + (r.nextInt(10000) - (5000));\n+            int nextInt = r.nextInt(10000) - (5000);\n+            strings[i] = Integer.toString(nextInt);\n+            stringsUnsigned[i] = Integer.toString(Math.abs(nextInt));\n@@ -86,0 +90,21 @@\n+    @Benchmark\n+    public void parseIntCharSequence(Blackhole bh) {\n+        for (String s : strings) {\n+            bh.consume(Integer.parseInt(s, 0, s.length(), 10));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void parseUnsignedInt(Blackhole bh) {\n+        for (String s : stringsUnsigned) {\n+            bh.consume(Integer.parseUnsignedInt(s));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void parseUnsignedIntCharSequence(Blackhole bh) {\n+        for (String s : stringsUnsigned) {\n+            bh.consume(Integer.parseUnsignedInt(s, 0, s.length(), 10));\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    private String[] stringsUnsigned;\n@@ -63,0 +64,1 @@\n+        stringsUnsigned = new String[size];\n@@ -67,1 +69,3 @@\n-            strings[i] = \"\" + (random.nextLong(10000) - 5000);\n+            long nextLong = random.nextLong(10000) - 5000;\n+            strings[i] = Long.toString(nextLong);\n+            stringsUnsigned[i] = Long.toString(Math.abs(nextLong));\n@@ -88,0 +92,28 @@\n+    @Benchmark\n+    public void parseLong(Blackhole bh) {\n+        for (String s : strings) {\n+            bh.consume(Long.parseLong(s));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void parseLongCharSequence(Blackhole bh) {\n+        for (String s : strings) {\n+            bh.consume(Long.parseLong(s, 0, s.length(), 10));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void parseUnsignedLong(Blackhole bh) {\n+        for (String s : stringsUnsigned) {\n+            bh.consume(Long.parseUnsignedLong(s));\n+        }\n+    }\n+\n+    @Benchmark\n+    public void parseUnsignedLongCharSequence(Blackhole bh) {\n+        for (String s : stringsUnsigned) {\n+            bh.consume(Long.parseUnsignedLong(s, 0, s.length(), 10));\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}