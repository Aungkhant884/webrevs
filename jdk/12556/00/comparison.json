{"files":[{"patch":"@@ -87,2 +87,4 @@\n-    size_t used_bytes, capacity_bytes;\n-    ms->calculate_jfr_stats(&used_bytes, &capacity_bytes);\n+    size_t used_words, capacity_words;\n+    ms->calculate_jfr_stats(&used_words, &capacity_words);\n+    size_t used_bytes = used_words * BytesPerWord;\n+    size_t capacity_bytes = capacity_words * BytesPerWord;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+        output.reportDiagnosticSummary();\n@@ -94,2 +95,14 @@\n-                    checkPositiveInt(m.group(2));\n-                    checkPositiveInt(m.group(3));\n+\n+                    long capacityBytes = Long.parseLong(m.group(2)); \/\/ aka \"Chunksz\"\n+                    long usedBytes = Long.parseLong(m.group(3)); \/\/ aka \"Blocksz\"\n+\n+                    \/\/ Minimum expected sizes: initial capacity is governed by the chunk size of the first chunk, which\n+                    \/\/ depends on the arena growth policy. Since this is a normal class loader, we expect as initial chunk\n+                    \/\/ size at least 4k (if UseCompressedClassPointers is off).\n+                    \/\/ Minimum used size is difficult to guess but should be at least 1k.\n+                    \/\/ Maximum expected sizes: We just assume a reasonable maximum. We only loaded one class, so\n+                    \/\/ we should not see values > 64k.\n+                    long K = 1024;\n+                    if (capacityBytes < (K * 4) || usedBytes < K || capacityBytes > (64 * K) || usedBytes > (64 * K)) {\n+                        throw new RuntimeException(\"Sizes seem off. Chunksz: \" + capacityBytes + \", Blocksz: \" + usedBytes);\n+                    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/ClassLoaderStatsTest.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}