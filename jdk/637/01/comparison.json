{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,13 @@\n-                \"-XX:HeapDumpPath=\" + heapdumpFilename, \"-XX:MaxMetaspaceSize=64m\",\n+                \"-XX:HeapDumpPath=\" + heapdumpFilename,\n+                \/\/ Note: When trying to provoke a metaspace OOM we may generate a lot of classes. In debug VMs this\n+                \/\/  can cause considerable wait times since:\n+                \/\/ - Compiler Dependencies verification iterates the class tree\n+                \/\/ - Before exit, the CLDG is checked.\n+                \/\/ Both verifications show quadratic time or worse wrt to number of loaded classes. Therefore it\n+                \/\/  makes sense to switch one or both off and limit the metaspace size to something sensible.\n+                \/\/ Example numbers on a slow ppc64 machine:\n+                \/\/  MaxMetaspaceSize=64M - ~60-70K classes - ~20min runtime with all verifications\n+                \/\/  MaxMetaspaceSize=16M - ~12-15K classes - ~12sec runtime with all verifications\n+                \/\/  MaxMetaspaceSize=16M - ~12-15K classes - VerifyDependencies off - ~3seconds on ppc\n+                \"-XX:MaxMetaspaceSize=16m\",\n+                \"-XX:-VerifyDependencies\",\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpOnOutOfMemoryError.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}