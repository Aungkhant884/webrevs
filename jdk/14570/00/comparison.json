{"files":[{"patch":"@@ -181,1 +181,0 @@\n-                      Profile profile = result.getTargetProfile(archive);\n@@ -183,2 +182,1 @@\n-                                        profile != null ? profile.profileName()\n-                                                        : archive.getName(), archive);\n+                                        archive.getName(), archive);\n@@ -219,1 +217,0 @@\n-        private Profile profile;\n@@ -239,8 +236,0 @@\n-        Profile getTargetProfile(Archive target) {\n-            if (target.getModule().isJDK()) {\n-                return Profile.getProfile((Module) target);\n-            } else {\n-                return null;\n-            }\n-        }\n-\n@@ -287,6 +276,0 @@\n-            if (targetArchive.getModule().isNamed()) {\n-                Profile p = Profile.getProfile(t.getPackageName());\n-                if (profile == null || (p != null && p.compareTo(profile) > 0)) {\n-                    profile = p;\n-                }\n-            }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/Analyzer.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -129,2 +129,0 @@\n-        initProfiles();\n-\n@@ -135,15 +133,0 @@\n-    private void initProfiles() {\n-        \/\/ other system modules are not observed and not added in nameToModule map\n-        Map<String, Module> systemModules =\n-            system.moduleNames()\n-                .collect(toMap(Function.identity(), (mn) -> {\n-                    Module m = nameToModule.get(mn);\n-                    if (m == null) {\n-                        ModuleReference mref = finder.find(mn).get();\n-                        m = toModule(mref);\n-                    }\n-                    return m;\n-                }));\n-        Profile.init(systemModules);\n-    }\n-\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsConfiguration.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -423,6 +423,0 @@\n-        new Option(false, \"-P\", \"-profile\") {\n-            void process(JdepsTask task, String opt, String arg) throws BadArgs {\n-                task.options.showProfile = true;\n-            }\n-        },\n-\n@@ -518,3 +512,0 @@\n-            if (options.showProfile && !options.nowarning) {\n-                warning(\"warn.deprecated.option\", \"-profile\");\n-            }\n@@ -756,1 +747,0 @@\n-                                                  options.showProfile,\n@@ -1082,1 +1072,0 @@\n-                                                   options.showProfile,\n@@ -1228,1 +1217,0 @@\n-        boolean showProfile;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsTask.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.Optional;\n@@ -44,1 +43,1 @@\n-        return new DotFileWriter(outputdir, type, false, true, false);\n+        return new DotFileWriter(outputdir, type, true, false);\n@@ -48,1 +47,1 @@\n-        return new SimpleWriter(writer, type, false, true);\n+        return new SimpleWriter(writer, type, true);\n@@ -52,1 +51,0 @@\n-    final boolean showProfile;\n@@ -55,1 +53,1 @@\n-    JdepsWriter(Analyzer.Type type, boolean showProfile, boolean showModule) {\n+    JdepsWriter(Analyzer.Type type, boolean showModule) {\n@@ -57,1 +55,0 @@\n-        this.showProfile = showProfile;\n@@ -67,2 +64,2 @@\n-                      boolean showProfile, boolean showModule, boolean showLabel) {\n-            super(type, showProfile, showModule);\n+                      boolean showModule, boolean showLabel) {\n+            super(type, showModule);\n@@ -171,1 +168,1 @@\n-                    String n = showProfileOrModule(m);\n+                    String n = showModule(m);\n@@ -220,2 +217,2 @@\n-                     boolean showProfile, boolean showModule) {\n-            super(type, showProfile, showModule);\n+                     boolean showModule) {\n+            super(type, showModule);\n@@ -287,3 +284,0 @@\n-                if (showProfile && targetArchive.getModule().isJDK()) {\n-                    writer.format(\" (%s)\", target);\n-                }\n@@ -308,2 +302,1 @@\n-     * If the given archive is JDK archive, this method returns the profile name\n-     * only if -profile option is specified; it accesses a private JDK API and\n+     * If the given target is JDK module and the source accesses a private JDK API,\n@@ -328,1 +321,1 @@\n-            return showProfileOrModule(module);\n+            return showModule(module);\n@@ -341,1 +334,1 @@\n-    String showProfileOrModule(Module m) {\n+    String showModule(Module m) {\n@@ -343,6 +336,1 @@\n-        if (showProfile) {\n-            Profile p = Profile.getProfile(m);\n-            if (p != null) {\n-                tag = p.profileName();\n-            }\n-        } else if (showModule) {\n+        if (showModule) {\n@@ -353,10 +341,0 @@\n-\n-    Profile getProfile(String name) {\n-        String pn = name;\n-        if (type == CLASS || type == VERBOSE) {\n-            int i = name.lastIndexOf('.');\n-            pn = i > 0 ? name.substring(0, i) : \"\";\n-        }\n-        return Profile.getProfile(pn);\n-    }\n-\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsWriter.java","additions":12,"deletions":34,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.jdeps;\n-\n-import java.io.IOException;\n-import java.lang.module.ModuleDescriptor;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-\/**\n- * Build the profile information.\n- *\/\n-enum Profile {\n-    COMPACT1(\"compact1\", 1, \"java.logging\",\n-                            \"java.scripting\"),\n-    COMPACT2(\"compact2\", 2, \"java.rmi\",\n-                            \"java.sql\",\n-                            \"java.xml\",\n-                            \"jdk.xml.dom\",\n-                            \"jdk.httpserver\"),\n-    COMPACT3(\"compact3\", 3, \"java.smartcardio\",\n-                            \"java.compiler\",\n-                            \"java.instrument\",\n-                            \"java.management\",\n-                            \"java.naming\",\n-                            \"java.prefs\",\n-                            \"java.security.jgss\",\n-                            \"java.security.sasl\",\n-                            \"java.sql.rowset\",\n-                            \"java.xml.crypto\",\n-                            \"jdk.management\",\n-                            \"jdk.naming.dns\",\n-                            \"jdk.naming.rmi\",\n-                            \"jdk.sctp\",\n-                            \"jdk.security.auth\");\n-\n-    final String name;\n-    final int profile;\n-    final String[] mnames;\n-    final Map<String, Module> modules = new HashMap<>();\n-\n-    Profile(String name, int profile, String... mnames) {\n-        this.name = name;\n-        this.profile = profile;\n-        this.mnames = mnames;\n-    }\n-\n-    public String profileName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return mnames[0];\n-    }\n-\n-    public static int getProfileCount() {\n-        return JDK.isEmpty() ? 0 : Profile.values().length;\n-    }\n-\n-    \/**\n-     * Returns the Profile for the given package name; null if not found.\n-     *\/\n-    public static Profile getProfile(String pn) {\n-        for (Profile p : Profile.values()) {\n-            for (Module m : p.modules.values()) {\n-                if (m.packages().contains(pn)) {\n-                    return p;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    \/*\n-     * Returns the Profile for a given Module; null if not found.\n-     *\/\n-    public static Profile getProfile(Module m) {\n-        for (Profile p : Profile.values()) {\n-            if (p.modules.containsValue(m)) {\n-                return p;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static final Set<Module> JDK = new HashSet<>();\n-    static synchronized void init(Map<String, Module> systemModules) {\n-        Arrays.stream(Profile.values()).forEach(p ->\n-            \/\/ this includes platform-dependent module that may not exist\n-            Arrays.stream(p.mnames)\n-                  .filter(systemModules::containsKey)\n-                  .map(systemModules::get)\n-                  .forEach(m -> p.addModule(systemModules, m)));\n-\n-        \/\/ JDK modules should include full JRE plus other jdk.* modules\n-        \/\/ Just include all installed modules.  Assume jdeps is running\n-        \/\/ in JDK image\n-        JDK.addAll(systemModules.values());\n-    }\n-\n-    private void addModule(Map<String, Module> systemModules, Module module) {\n-        modules.put(module.name(), module);\n-        module.descriptor().requires().stream()\n-              .map(ModuleDescriptor.Requires::name)\n-              .map(systemModules::get)\n-              .forEach(m -> modules.put(m.name(), m));\n-    }\n-\n-    \/\/ for debugging\n-    public static void main(String[] args) throws IOException {\n-        \/\/ initialize Profiles\n-        new JdepsConfiguration.Builder().addmods(Set.of(\"ALL-SYSTEM\")).build();\n-\n-        \/\/ find platform modules\n-        if (Profile.getProfileCount() == 0) {\n-            System.err.println(\"No profile is present in this JDK\");\n-        }\n-        for (Profile p : Profile.values()) {\n-            String profileName = p.name;\n-            System.out.format(\"%2d: %-10s  %s%n\", p.profile, profileName, p.modules);\n-        }\n-        System.out.println(\"All JDK modules:-\");\n-        JDK.stream().sorted(Comparator.comparing(Module::name))\n-           .forEach(System.out::println);\n-    }\n-}\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/Profile.java","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"},{"patch":"@@ -95,1 +95,1 @@\n- \\Options to filter classes to be analyzed:\\n\\\n+\\Options to filter classes to be analyzed:\\n\\\n@@ -101,3 +101,0 @@\n-main.opt.P=\\\n-\\  -P       -profile             Show profile containing a package.  This option\\n\\\n-\\                                is deprecated and may be removed in a future release.\n@@ -238,1 +235,0 @@\n-err.profiles.msg=No profile information\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/resources\/jdeps.properties","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -99,2 +99,1 @@\n-             new String[] {\"compact1\", \"compact3\", testDirBasename},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\", \"-P\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\"});\n@@ -103,2 +102,1 @@\n-             new String[] {testDirBasename},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\", \"-P\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\"});\n@@ -107,2 +105,1 @@\n-             new String[] {testDirBasename},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\", \"-filter:none\", \"-P\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\", \"-filter:none\"});\n@@ -112,2 +109,1 @@\n-             new String[] {testDirBasename, \"JDK internal API\", \"compact3\", \"\"},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\", \"-P\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\"});\n@@ -118,1 +114,0 @@\n-             new String[] {\"JDK internal API\"},\n@@ -124,1 +119,0 @@\n-             new String[] {\"JDK internal API\"},\n@@ -133,2 +127,1 @@\n-             new String[] {\"compact1\", testDirBasename},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\", \"-P\", \"-apionly\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose:class\", \"-apionly\"});\n@@ -140,2 +133,1 @@\n-             new String[] {\"compact1\", testDirBasename, mDir.getName()},\n-             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\", \"-P\", \"--api-only\"});\n+             new String[] {\"-classpath\", testDir.getPath(), \"-verbose\", \"--api-only\"});\n@@ -145,2 +137,2 @@\n-    void test(File file, String[] expect, String[] profiles) {\n-        test(file, expect, profiles, new String[0]);\n+    void test(File file, String[] expect) {\n+        test(file, expect, new String[0]);\n@@ -149,1 +141,1 @@\n-    void test(File file, String[] expect, String[] profiles, String[] options) {\n+    void test(File file, String[] expect, String[] options) {\n@@ -154,2 +146,2 @@\n-        checkResult(\"api-dependencies\", expect, profiles,\n-                    jdeps(args.toArray(new String[0])));\n+        checkResult(\"api-dependencies\", expect,\n+                    jdeps(args.toArray(new String[0])).keySet());\n@@ -200,6 +192,0 @@\n-        List<String> list = Arrays.asList(expect);\n-        if (!isEqual(list, found))\n-            error(\"Unexpected \" + label + \" found: '\" + found + \"', expected: '\" + list + \"'\");\n-    }\n-\n-    void checkResult(String label, String[] expect, String[] profiles, Map<String,String> result) {\n@@ -207,10 +193,3 @@\n-        checkResult(label, expect, result.keySet());\n-        \/\/ check profile information\n-        Set<String> values = new TreeSet<>();\n-        String internal = \"JDK internal API\";\n-        for (String s: result.values()) {\n-            if (s.startsWith(internal)){\n-                values.add(internal);\n-            } else {\n-                values.add(s);\n-            }\n+        if (!isEqual(expect, found)) {\n+            error(\"Unexpected \" + label + \" found: '\" + found +\n+                    \"', expected: '\" + Arrays.toString(expect) + \"'\");\n@@ -218,1 +197,0 @@\n-        checkResult(label, profiles, values);\n@@ -221,2 +199,2 @@\n-    boolean isEqual(List<String> expected, Collection<String> found) {\n-        if (expected.size() != found.size())\n+    boolean isEqual(String[] expected, Collection<String> found) {\n+        if (expected.length != found.size())\n@@ -226,1 +204,1 @@\n-        list.removeAll(expected);\n+        list.removeAll(Arrays.asList(expected));\n","filename":"test\/langtools\/tools\/jdeps\/APIDeps.java","additions":17,"deletions":39,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-             new String[] {\"java.lang\", \"p\"},\n-             new String[] {\"compact1\", \"not found\"});\n+             new String[] {\"java.lang\", \"p\"});\n@@ -64,1 +63,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\"},\n@@ -69,1 +67,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"not found\", \"not found\"},\n@@ -74,1 +71,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\", \"p\"},\n@@ -79,1 +75,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\"},\n@@ -84,1 +79,0 @@\n-             new String[] {\"not found\", \"not found\"},\n@@ -89,1 +83,0 @@\n-             new String[] {\"not found\", \"not found\"},\n@@ -93,1 +86,0 @@\n-             new String[] {\"compact1\"},\n@@ -101,1 +93,0 @@\n-             new String[] {\"compact1\", testDir.getName()},\n@@ -105,1 +96,0 @@\n-             new String[] {\"compact1\", testDir.getName()},\n@@ -112,1 +102,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\"},\n@@ -116,1 +105,0 @@\n-             new String[] {\"compact1\", \"compact1\", testDir.getName(), testDir.getName()},\n@@ -137,1 +125,0 @@\n-             new String[] {\"compact1\", \"compact1\", dir1.toFile().getName(), dir2.toFile().getName()},\n@@ -143,1 +130,0 @@\n-             new String[] {\"not found\", \"not found\"},\n@@ -148,1 +134,0 @@\n-             new String[0],\n@@ -155,2 +140,2 @@\n-    void test(File file, String[] expect, String[] profiles) {\n-        test(file, expect, profiles, new String[0]);\n+    void test(File file, String[] expect) {\n+        test(file, expect, new String[0]);\n@@ -159,1 +144,1 @@\n-    void test(File file, String[] expect, String[] profiles, String[] options) {\n+    void test(File file, String[] expect, String[] options) {\n@@ -164,4 +149,0 @@\n-        List<String> argsWithDashP = new ArrayList<>();\n-        argsWithDashP.add(\"-P\");\n-        argsWithDashP.addAll(args);\n-        \/\/ test without -P\n@@ -169,2 +150,0 @@\n-        \/\/ test with -P\n-        checkResult(\"profiles\", expect, profiles, jdeps(argsWithDashP.toArray(new String[0])));\n@@ -219,15 +198,0 @@\n-    void checkResult(String label, String[] expect, String[] profiles, Map<String,String> result) {\n-        if (expect.length != profiles.length)\n-            error(\"Invalid expected names and profiles\");\n-\n-        \/\/ check the dependencies\n-        checkResult(label, expect, result.keySet());\n-        \/\/ check profile information\n-        checkResult(label, profiles, result.values());\n-        for (int i=0; i < expect.length; i++) {\n-            String profile = result.get(expect[i]);\n-            if (!profile.equals(profiles[i]))\n-                error(\"Unexpected profile: '\" + profile + \"', expected: '\" + profiles[i] + \"'\");\n-        }\n-    }\n-\n","filename":"test\/langtools\/tools\/jdeps\/Basic.java","additions":4,"deletions":40,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -70,2 +70,1 @@\n-             new String[] {\"java.lang\", \"p\"},\n-             new String[] {\"compact1\", \"not found\"});\n+             new String[] {\"java.lang\", \"p\"});\n@@ -75,1 +74,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\"},\n@@ -80,1 +78,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"not found\", \"not found\"},\n@@ -85,1 +82,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\", \"p\"},\n@@ -90,1 +86,0 @@\n-             new String[] {\"compact1\", \"compact1\", \"compact3\", \"compact1\"},\n@@ -92,5 +87,0 @@\n-        \/\/ test -p option\n-        test(new File(testDir, \"Test.class\"),\n-             new String[] {\"p.Foo\", \"p.Bar\"},\n-             new String[] {\"not found\", \"not found\"},\n-             new String[] {\"-verbose:class\", \"-p\", \"p\"});\n@@ -100,1 +90,0 @@\n-             new String[] {\"not found\", \"not found\"},\n@@ -104,1 +93,0 @@\n-             new String[] {\"compact1\"},\n@@ -109,1 +97,0 @@\n-             new String[] {\"compact1\", \"compact1\", testDir.getName(), testDir.getName()},\n@@ -114,1 +101,0 @@\n-             new String[] {\"compact1\", \"\"},\n@@ -118,1 +104,0 @@\n-             new String[] {\"compact1\", testDir.getName()},\n@@ -123,2 +108,2 @@\n-    void test(File file, String[] expect, String[] profiles) throws IOException {\n-        test(file, expect, profiles, new String[0]);\n+    void test(File file, String[] expect) throws IOException {\n+        test(file, expect, new String[0]);\n@@ -127,1 +112,1 @@\n-    void test(File file, String[] expect, String[] profiles, String[] options)\n+    void test(File file, String[] expect, String[] options)\n@@ -141,8 +126,0 @@\n-\n-        \/\/ with -P option\n-        List<String> argsWithDashP = new ArrayList<>();\n-        argsWithDashP.add(\"-P\");\n-        argsWithDashP.addAll(args);\n-\n-        result = jdeps(argsWithDashP, dotfile);\n-        checkResult(\"profiles\", expect, profiles, result);\n@@ -151,1 +128,1 @@\n-    void testSummary(File file, String[] expect, String[] profiles, String[] options)\n+    void testSummary(File file, String[] expect, String[] options)\n@@ -165,8 +142,0 @@\n-\n-        \/\/ with -P option\n-        List<String> argsWithDashP = new ArrayList<>();\n-        argsWithDashP.add(\"-P\");\n-        argsWithDashP.addAll(args);\n-\n-        result = jdeps(argsWithDashP, dotfile);\n-        checkResult(\"profiles\", expect, profiles, result);\n@@ -216,10 +185,1 @@\n-    void checkResult(String label, String[] expect, Collection<String> found) {\n-        List<String> list = Arrays.asList(expect);\n-        if (!isEqual(list, found))\n-            error(\"Unexpected \" + label + \" found: '\" + found + \"', expected: '\" + list + \"'\");\n-    }\n-\n-    void checkResult(String label, String[] expect, String[] profiles, Map<String,String> result) {\n-        if (expect.length != profiles.length)\n-            error(\"Invalid expected names and profiles\");\n-\n+    void checkResult(String label, String[] expect, Collection<String> result) {\n@@ -227,8 +187,3 @@\n-        checkResult(label, expect, result.keySet());\n-        \/\/ check profile information\n-        checkResult(label, profiles, result.values());\n-        for (int i=0; i < expect.length; i++) {\n-            String profile = result.get(expect[i]);\n-            if (!profile.equals(profiles[i]))\n-                error(\"Unexpected profile: '\" + profile + \"', expected: '\" + profiles[i] + \"'\");\n-        }\n+        if (!isEqual(expect, result))\n+            error(\"Unexpected \" + label + \" found: '\" + result +\n+                    \"', expected: '\" + Arrays.toString(expect) + \"'\");\n@@ -237,2 +192,2 @@\n-    boolean isEqual(List<String> expected, Collection<String> found) {\n-        if (expected.size() != found.size())\n+    boolean isEqual(String[] expected, Collection<String> found) {\n+        if (expected.length != found.size())\n@@ -242,1 +197,1 @@\n-        list.removeAll(expected);\n+        list.removeAll(Arrays.asList(expected));\n","filename":"test\/langtools\/tools\/jdeps\/DotFileTest.java","additions":12,"deletions":57,"binary":false,"changes":69,"status":"modified"}]}