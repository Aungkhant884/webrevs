{"files":[{"patch":"@@ -3783,44 +3783,2 @@\n-    const TypeAryPtr *tp = t->is_aryptr();\n-    int offset = meet_offset(tp->offset());\n-    PTR ptr = meet_ptr(tp->ptr());\n-    int instance_id = meet_instance_id(tp->instance_id());\n-    const TypePtr* speculative = xmeet_speculative(tp);\n-    int depth = meet_inline_depth(tp->inline_depth());\n-    switch (ptr) {\n-    case TopPTR:\n-    case AnyNull:                \/\/ Fall 'down' to dual of object klass\n-      \/\/ For instances when a subclass meets a superclass we fall\n-      \/\/ below the centerline when the superclass is exact. We need to\n-      \/\/ do the same here.\n-      if (klass()->equals(ciEnv::current()->Object_klass()) && !klass_is_exact()) {\n-        return TypeAryPtr::make(ptr, tp->ary(), tp->klass(), tp->klass_is_exact(), offset, instance_id, speculative, depth);\n-      } else {\n-        \/\/ cannot subclass, so the meet has to fall badly below the centerline\n-        ptr = NotNull;\n-        instance_id = InstanceBot;\n-        return TypeInstPtr::make( ptr, ciEnv::current()->Object_klass(), false, NULL, offset, instance_id, speculative, depth);\n-      }\n-    case Constant:\n-    case NotNull:\n-    case BotPTR:                \/\/ Fall down to object klass\n-      \/\/ LCA is object_klass, but if we subclass from the top we can do better\n-      if( above_centerline(_ptr) ) { \/\/ if( _ptr == TopPTR || _ptr == AnyNull )\n-        \/\/ If 'this' (InstPtr) is above the centerline and it is Object class\n-        \/\/ then we can subclass in the Java class hierarchy.\n-        \/\/ For instances when a subclass meets a superclass we fall\n-        \/\/ below the centerline when the superclass is exact. We need\n-        \/\/ to do the same here.\n-        if (klass()->equals(ciEnv::current()->Object_klass()) && !klass_is_exact()) {\n-          \/\/ that is, tp's array type is a subtype of my klass\n-          return TypeAryPtr::make(ptr, (ptr == Constant ? tp->const_oop() : NULL),\n-                                  tp->ary(), tp->klass(), tp->klass_is_exact(), offset, instance_id, speculative, depth);\n-        }\n-      }\n-      \/\/ The other case cannot happen, since I cannot be a subtype of an array.\n-      \/\/ The meet falls down to Object class below centerline.\n-      if( ptr == Constant )\n-         ptr = NotNull;\n-      instance_id = InstanceBot;\n-      return make(ptr, ciEnv::current()->Object_klass(), false, NULL, offset, instance_id, speculative, depth);\n-    default: typerr(t);\n-    }\n+    \/\/ Call in reverse direction to avoid duplication\n+    return t->is_aryptr()->xmeet_helper(this);\n@@ -3964,2 +3922,6 @@\n-        if (ptr == Constant)  ptr = NotNull;   \/\/ forget it was a constant\n-        instance_id = InstanceBot;\n+        if (ptr == Constant) {\n+          ptr = NotNull;  \/\/ forget it was a constant\n+        }\n+        if (instance_id > 0) {\n+          instance_id = InstanceBot;\n+        }\n@@ -4054,1 +4016,1 @@\n-    if( ptr == TopPTR || ptr == AnyNull || ptr == Constant )\n+    if (ptr == TopPTR || ptr == AnyNull || ptr == Constant) {\n@@ -4056,1 +4018,1 @@\n-\n+    }\n@@ -4498,1 +4460,1 @@\n-      return TypeAryPtr::make(ptr, o, tary, lazy_klass, xk, off, instance_id, speculative, depth);\n+      return make(ptr, o, tary, lazy_klass, xk, off, instance_id, speculative, depth);\n@@ -4503,5 +4465,7 @@\n-      if (above_centerline(this->_ptr))\n-            xk = tap->_klass_is_exact;\n-      else  xk = (tap->_klass_is_exact & this->_klass_is_exact) &&\n-              (klass() == tap->klass()); \/\/ Only precise for identical arrays\n-      return TypeAryPtr::make(ptr, NULL, tary, lazy_klass, xk, off, instance_id, speculative, depth);\n+      if (above_centerline(this->_ptr)) {\n+        xk = tap->_klass_is_exact;\n+      } else {\n+        xk = (tap->_klass_is_exact & this->_klass_is_exact) &&\n+             (klass() == tap->klass()); \/\/ Only precise for identical arrays\n+      }\n+      return make(ptr, NULL, tary, lazy_klass, xk, off, instance_id, speculative, depth);\n@@ -4527,1 +4491,1 @@\n-        return TypeAryPtr::make(ptr, _ary, _klass, _klass_is_exact, offset, instance_id, speculative, depth);\n+        return make(ptr, _ary, _klass, _klass_is_exact, offset, instance_id, speculative, depth);\n@@ -4552,1 +4516,1 @@\n-      if( ptr == Constant )\n+      if (ptr == Constant) {\n@@ -4554,2 +4518,5 @@\n-      instance_id = InstanceBot;\n-      return TypeInstPtr::make(ptr, ciEnv::current()->Object_klass(), false, NULL,offset, instance_id, speculative, depth);\n+      }\n+      if (instance_id > 0) {\n+        instance_id = InstanceBot;\n+      }\n+      return TypeInstPtr::make(ptr, ciEnv::current()->Object_klass(), false, NULL, offset, instance_id, speculative, depth);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":25,"deletions":58,"binary":false,"changes":83,"status":"modified"}]}