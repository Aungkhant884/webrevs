{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,0 +58,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -1437,1 +1438,1 @@\n-            entry.attributes = new HashSet<>();\n+            entry.attributes = ConcurrentHashMap.newKeySet();\n@@ -2434,1 +2435,1 @@\n-            Set<PKCS12Attribute> attributes = new HashSet<>();\n+            Set<PKCS12Attribute> attributes = ConcurrentHashMap.newKeySet();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309667\n+ * @modules java.base\/sun.security.pkcs12:+open\n+ * @summary TLS handshake fails because of ConcurrentModificationException\n+ *          in PKCS12KeyStore.engineGetEntry\n+ *\/\n+\n+import sun.security.pkcs12.PKCS12KeyStore;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.security.PKCS12Attribute;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AttributesSync {\n+\n+    static volatile boolean success = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        Runnable r = AttributesSync::get;\n+        var all = IntStream.range(0, 100).mapToObj(i -> new Thread(r))\n+                .collect(Collectors.toList());\n+        for (var c : all) {\n+            c.start();\n+        }\n+        for (var c : all) {\n+            c.join();\n+        }\n+        if (!success) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static Set attrs;\n+\n+    static {\n+        try {\n+            PKCS12KeyStore p12 = new PKCS12KeyStore();\n+\n+            \/\/ p12e = new PKCS12KeyStore.Entry();\n+            Class<?> clazz = Class.forName(p12.getClass().getName() + \"$Entry\");\n+            Constructor<?> ctor = clazz.getDeclaredConstructor();\n+            ctor.setAccessible(true);\n+            Object p12e = ctor.newInstance();\n+\n+            \/\/ p12e.alias = \"hello\";\n+            Field f = clazz.getDeclaredField(\"alias\");\n+            f.setAccessible(true);\n+            f.set(p12e, \"hello\");\n+\n+            \/\/ p12.getAttributes(p12e);\n+            Method mgetA = p12.getClass().getDeclaredMethod(\"getAttributes\", clazz);\n+            mgetA.setAccessible(true);\n+            mgetA.invoke(p12, p12e);\n+\n+            \/\/ attrs = p12e.attributes;\n+            f = clazz.getDeclaredField(\"attributes\");\n+            f.setAccessible(true);\n+            attrs = (Set) f.get(p12e);\n+        } catch (Exception e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    static void get() {\n+        try {\n+            for (int i = 0; i < 100; i++) {\n+                Thread.sleep(1);\n+                attrs.add(new PKCS12Attribute(\"1.2.3.\" + i, \"4.5.6\"));\n+                new HashSet<>(attrs);\n+                Thread.sleep(1);\n+            }\n+        } catch (Exception e) {\n+            success = false;\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/AttributesSync.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}