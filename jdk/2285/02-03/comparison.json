{"files":[{"patch":"@@ -139,2 +139,3 @@\n-                                 Integer.compare(rankMatch(rawValue, a.getProperties().get(name)),\n-                                                 rankMatch(rawValue, b.getProperties().get(name))));\n+                                 compareByRankThenNumVal(rawValue,\n+                                                         a.getProperties().get(name),\n+                                                         b.getProperties().get(name)));\n@@ -193,0 +194,21 @@\n+    \/**\n+     * Compare two matches for a given query, first by rank (see rankMatch()\n+     * below) and then by numeric value, if applicable.\n+     *\/\n+    private int compareByRankThenNumVal(String qry, String prop1, String prop2) {\n+        int key1 = rankMatch(qry, prop1);\n+        int key2 = rankMatch(qry, prop2);\n+        if (key1 == key2) {\n+            \/\/ If the matches have the same rank, compare the numeric values of\n+            \/\/ their first words, if applicable.\n+            try {\n+                key1 = Integer.parseInt(prop1.split(\"\\\\W+\")[0]);\n+                key2 = Integer.parseInt(prop2.split(\"\\\\W+\")[0]);\n+            } catch (Exception e) {\n+                \/\/ Not applicable, return equality value.\n+                return 0;\n+            }\n+        }\n+        return Integer.compare(key1, key2);\n+    }\n+\n","filename":"src\/utils\/IdealGraphVisualizer\/View\/src\/com\/sun\/hotspot\/igv\/view\/NodeQuickSearch.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"}]}