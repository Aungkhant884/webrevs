{"files":[{"patch":"@@ -53,0 +53,1 @@\n+  const char* _archive_name;\n@@ -54,0 +55,1 @@\n+  DynamicArchiveBuilder(const char* archive_name) : _archive_name(archive_name) {}\n@@ -322,1 +324,1 @@\n-  dynamic_info->open_for_write(Arguments::GetSharedDynamicArchivePath());\n+  dynamic_info->open_for_write(_archive_name);\n@@ -339,1 +341,2 @@\n-  VM_PopulateDynamicDumpSharedSpace() : VM_GC_Sync_Operation() {}\n+  VM_PopulateDynamicDumpSharedSpace(const char* archive_name)\n+  : VM_GC_Sync_Operation(), builder(archive_name) {}\n@@ -357,1 +360,20 @@\n-void DynamicArchive::prepare_for_dynamic_dumping() {\n+void DynamicArchive::check_for_dynamic_dump() {\n+  if (DynamicDumpSharedSpaces && !UseSharedSpaces) {\n+    \/\/ This could happen if SharedArchiveFile has failed to load:\n+    \/\/ - -Xshare:off was specified\n+    \/\/ - SharedArchiveFile points to an non-existent file.\n+    \/\/ - SharedArchiveFile points to an archive that has failed CRC check\n+    \/\/ - SharedArchiveFile is not specified and the VM doesn't have a compatible default archive\n+\n+#define __THEMSG \" is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\"\n+    if (RecordDynamicDumpInfo) {\n+      vm_exit_during_initialization(\"-XX:+RecordDynamicDumpInfo\" __THEMSG, NULL);\n+    } else {\n+      assert(ArchiveClassesAtExit != nullptr, \"sanity\");\n+      vm_exit_during_initialization(\"-XX:ArchiveClassesAtExit\" __THEMSG, NULL);\n+#undef __THEMSG\n+    }\n+  }\n+}\n+\n+void DynamicArchive::prepare_for_dump_at_exit() {\n@@ -371,20 +393,7 @@\n-void DynamicArchive::dump(const char* archive_name, TRAPS) {\n-  assert(UseSharedSpaces && RecordDynamicDumpInfo, \"already checked in arguments.cpp?\");\n-  assert(ArchiveClassesAtExit == nullptr, \"already checked in arguments.cpp?\");\n-  ArchiveClassesAtExit = archive_name;\n-  if (Arguments::init_shared_archive_paths()) {\n-    prepare_for_dynamic_dumping();\n-    if (DynamicDumpSharedSpaces) {\n-      dump(CHECK);\n-    }\n-  } else {\n-    ArchiveClassesAtExit = nullptr;\n-    THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n-              \"Could not setup SharedDynamicArchivePath\");\n-  }\n-  \/\/ prevent do dynamic dump at exit.\n-  ArchiveClassesAtExit = nullptr;\n-  if (!Arguments::init_shared_archive_paths()) {\n-    THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n-              \"Could not restore SharedDynamicArchivePath\");\n-  }\n+\/\/ This is called by \"jcmd VM.cds dynamic_dump\"\n+void DynamicArchive::dump_for_jcmd(const char* archive_name, TRAPS) {\n+  assert(UseSharedSpaces && RecordDynamicDumpInfo, \"already checked in arguments.cpp\");\n+  assert(ArchiveClassesAtExit == nullptr, \"already checked in arguments.cpp\");\n+  assert(DynamicDumpSharedSpaces, \"already checked by check_for_dynamic_dump() during VM startup\");\n+  MetaspaceShared::link_shared_classes(CHECK);\n+  dump(archive_name, THREAD);\n@@ -393,6 +402,1 @@\n-void DynamicArchive::dump(TRAPS) {\n-  if (Arguments::GetSharedDynamicArchivePath() == NULL) {\n-    log_warning(cds, dynamic)(\"SharedDynamicArchivePath is not specified\");\n-    return;\n-  }\n-\n+void DynamicArchive::dump(const char* archive_name, TRAPS) {\n@@ -402,1 +406,1 @@\n-  VM_PopulateDynamicDumpSharedSpace op;\n+  VM_PopulateDynamicDumpSharedSpace op(archive_name);\n@@ -406,0 +410,4 @@\n+bool DynamicArchive::should_dump_at_vm_exit() {\n+  return DynamicDumpSharedSpaces && (ArchiveClassesAtExit != nullptr);\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":38,"deletions":30,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -62,1 +62,4 @@\n-  static void prepare_for_dynamic_dumping();\n+  static void check_for_dynamic_dump();\n+  static bool should_dump_at_vm_exit();\n+  static void prepare_for_dump_at_exit();\n+  static void dump_for_jcmd(const char* archive_name, TRAPS);\n@@ -64,1 +67,0 @@\n-  static void dump(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -752,4 +752,0 @@\n-\n-  if (DynamicDumpSharedSpaces && !UseSharedSpaces) {\n-    vm_exit_during_initialization(\"DynamicDumpSharedSpaces is unsupported when base CDS archive is not loaded\", NULL);\n-  }\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/dynamicArchive.hpp\"\n@@ -768,0 +769,1 @@\n+  DynamicArchive::check_for_dynamic_dump();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -429,2 +429,2 @@\n-  if (DynamicDumpSharedSpaces) {\n-    DynamicArchive::prepare_for_dynamic_dumping();\n+  if (DynamicArchive::should_dump_at_vm_exit()) {\n+    DynamicArchive::prepare_for_dump_at_exit();\n@@ -3709,1 +3709,1 @@\n-  DynamicArchive::dump(archive_name, CHECK);\n+  DynamicArchive::dump_for_jcmd(archive_name, CHECK);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1442,0 +1442,2 @@\n+      } else {\n+        log_info(cds)(\"CDS is disabled when the %s option is specified.\", unsupported_options[i]);\n@@ -3120,7 +3122,0 @@\n-  if (DumpSharedSpaces || ArchiveClassesAtExit != NULL) {\n-    \/\/ Always verify non-system classes during CDS dump\n-    if (!BytecodeVerificationRemote) {\n-      BytecodeVerificationRemote = true;\n-      log_info(cds)(\"All non-system classes will be verified (-Xverify:remote) during CDS dump time.\");\n-    }\n-  }\n@@ -3130,1 +3125,2 @@\n-    log_info(cds)(\"RecordDynamicDumpInfo is for jcmd only, could not set with -XX:ArchiveClassesAtExit.\");\n+    jio_fprintf(defaultStream::output_stream(),\n+                \"-XX:+RecordDynamicDumpInfo cannot be used with -XX:ArchiveClassesAtExit.\\n\");\n@@ -3146,0 +3142,8 @@\n+\n+  if (DumpSharedSpaces || DynamicDumpSharedSpaces) {\n+    \/\/ Always verify non-system classes during CDS dump\n+    if (!BytecodeVerificationRemote) {\n+      BytecodeVerificationRemote = true;\n+      log_info(cds)(\"All non-system classes will be verified (-Xverify:remote) during CDS dump time.\");\n+    }\n+  }\n@@ -3425,3 +3429,1 @@\n-  if (!init_shared_archive_paths()) {\n-    return JNI_ENOMEM;\n-  }\n+  init_shared_archive_paths();\n@@ -3490,1 +3492,0 @@\n-  \/\/cur_path[len] = '\\0';\n@@ -3495,1 +3496,1 @@\n-bool Arguments::init_shared_archive_paths() {\n+void Arguments::init_shared_archive_paths() {\n@@ -3497,0 +3498,1 @@\n+    assert(!RecordDynamicDumpInfo, \"already checked\");\n@@ -3500,3 +3502,0 @@\n-    if (FLAG_SET_CMDLINE(DynamicDumpSharedSpaces, true) != JVMFlag::SUCCESS) {\n-      return false;\n-    }\n@@ -3504,6 +3503,0 @@\n-    SharedDynamicArchivePath = os::strdup_check_oom(ArchiveClassesAtExit, mtArguments);\n-  } else {\n-    if (SharedDynamicArchivePath != nullptr) {\n-      os::free(SharedDynamicArchivePath);\n-      SharedDynamicArchivePath = nullptr;\n-    }\n@@ -3511,0 +3504,1 @@\n+\n@@ -3515,12 +3509,5 @@\n-    if (is_dumping_archive()) {\n-      if (archives > 1) {\n-        vm_exit_during_initialization(\n-          \"Cannot have more than 1 archive file specified in -XX:SharedArchiveFile during CDS dumping\");\n-      }\n-      if (DynamicDumpSharedSpaces) {\n-        if (os::same_files(SharedArchiveFile, ArchiveClassesAtExit)) {\n-          vm_exit_during_initialization(\n-            \"Cannot have the same archive file specified for -XX:SharedArchiveFile and -XX:ArchiveClassesAtExit\",\n-            SharedArchiveFile);\n-        }\n-      }\n+    assert(archives > 0, \"must be\");\n+\n+    if (is_dumping_archive() && archives > 1) {\n+      vm_exit_during_initialization(\n+        \"Cannot have more than 1 archive file specified in -XX:SharedArchiveFile during CDS dumping\");\n@@ -3528,1 +3515,16 @@\n-    if (!is_dumping_archive()){\n+\n+    if (DumpSharedSpaces) {\n+      assert(archives == 1, \"must be\");\n+      \/\/ Static dump is simple: only one archive is allowed in SharedArchiveFile. This file\n+      \/\/ will be overwritten no matter regardless of its contents\n+      SharedArchivePath = os::strdup_check_oom(SharedArchiveFile, mtArguments);\n+    } else {\n+      \/\/ SharedArchiveFile may specify one or two files. In case (c), the path for base.jsa\n+      \/\/ is read from top.jsa\n+      \/\/    (a) 1 file:  -XX:SharedArchiveFile=base.jsa\n+      \/\/    (b) 2 files: -XX:SharedArchiveFile=base.jsa:top.jsa\n+      \/\/    (c) 2 files: -XX:SharedArchiveFile=top.jsa\n+      \/\/\n+      \/\/ However, if either RecordDynamicDumpInfo or ArchiveClassesAtExit is used, we do not\n+      \/\/ allow cases (b) and (c). Case (b) is already checked above.\n+\n@@ -3546,2 +3548,18 @@\n-    } else { \/\/ CDS dumping\n-      SharedArchivePath = os::strdup_check_oom(SharedArchiveFile, mtArguments);\n+\n+      if (SharedDynamicArchivePath != nullptr) {\n+        \/\/ Check for case (c)\n+        if (RecordDynamicDumpInfo) {\n+          vm_exit_during_initialization(\"-XX:+RecordDynamicDumpInfo is unsupported when a dynamic CDS archive is specified in -XX:SharedArchiveFile\",\n+                                        SharedArchiveFile);\n+        }\n+        if (ArchiveClassesAtExit != nullptr) {\n+          vm_exit_during_initialization(\"-XX:ArchiveClassesAtExit is unsupported when a dynamic CDS archive is specified in -XX:SharedArchiveFile\",\n+                                        SharedArchiveFile);\n+        }\n+      }\n+\n+      if (ArchiveClassesAtExit != nullptr && os::same_files(SharedArchiveFile, ArchiveClassesAtExit)) {\n+          vm_exit_during_initialization(\n+            \"Cannot have the same archive file specified for -XX:SharedArchiveFile and -XX:ArchiveClassesAtExit\",\n+            SharedArchiveFile);\n+      }\n@@ -3550,1 +3568,0 @@\n-  return (SharedArchivePath != NULL);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":55,"deletions":38,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -621,1 +621,1 @@\n-  static bool  init_shared_archive_paths() NOT_CDS_RETURN_(false);\n+  static void  init_shared_archive_paths() NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,2 @@\n-  if (DynamicDumpSharedSpaces) {\n+  if (DynamicArchive::should_dump_at_vm_exit()) {\n+    assert(ArchiveClassesAtExit != NULL, \"Must be already set\");\n@@ -508,1 +509,1 @@\n-    DynamicArchive::dump(thread);\n+    DynamicArchive::dump(ArchiveClassesAtExit, thread);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3306,2 +3306,2 @@\n-  if (DynamicDumpSharedSpaces) {\n-    DynamicArchive::prepare_for_dynamic_dumping();\n+  if (DynamicArchive::should_dump_at_vm_exit()) {\n+    DynamicArchive::prepare_for_dump_at_exit();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n@@ -40,0 +38,3 @@\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jtreg.SkippedException;\n@@ -56,0 +57,20 @@\n+    private static int testnum = 0;\n+    private static void testcase(String s) {\n+        System.out.println(\"\\n\\nTest #\" + (++testnum) + \" \" + s);\n+    }\n+\n+    private interface MyRunnable {\n+        public void run() throws Exception;\n+    }\n+\n+    private static void mustSkipWith(String expectedMsg, MyRunnable r) throws Exception {\n+        try {\n+            r.run();\n+        } catch (SkippedException e) {\n+            System.out.println(\"Got SkippedException: \" + e);\n+            Asserts.assertTrue(e.getMessage().contains(expectedMsg), \"SkippedException must have message \" + expectedMsg);\n+            return;\n+        }\n+        Asserts.fail(\"SkippedException should have been thrown\");\n+    }\n+\n@@ -61,1 +82,1 @@\n-        \/\/ -Xshare:dump specified with -XX:ArchiveClassesAtExit\n+        testcase(\"-Xshare:dump specified with -XX:ArchiveClassesAtExit\");\n@@ -71,2 +92,1 @@\n-        \/\/ more than 1 archive file specified in -XX:SharedArchiveFile during\n-        \/\/ dynamic dumpgin\n+        testcase(\"more than 1 archive file specified in -XX:SharedArchiveFile during dynamic dump\");\n@@ -82,1 +102,1 @@\n-        \/\/ normal dynamic archive dumping\n+        testcase(\"normal dynamic archive dumping\");\n@@ -91,1 +111,1 @@\n-        \/\/ same archive file specified for -XX:SharedArchiveFile and -XX:ArchiveClassesAtExit\n+        testcase(\"same archive file specified for -XX:SharedArchiveFile and -XX:ArchiveClassesAtExit\");\n@@ -102,1 +122,1 @@\n-        \/\/ a top archive specified in the base archive position\n+        testcase(\"a top archive specified in the base archive position\");\n@@ -111,1 +131,1 @@\n-        \/\/ a base archive specified in the top archive position\n+        testcase(\"a base archive specified in the top archive position\");\n@@ -120,1 +140,1 @@\n-        \/\/ more than 2 archives specified in the -XX:ShareArchiveFile option\n+        testcase(\"more than 2 archives specified in the -XX:ShareArchiveFile option\");\n@@ -131,1 +151,1 @@\n-        \/\/ base archive not specified\n+        testcase(\"base archive not specified\");\n@@ -142,1 +162,1 @@\n-        \/\/ top archive not specified\n+        testcase(\"top archive not specified\");\n@@ -152,0 +172,91 @@\n+\n+\n+        testcase(\"A dynamic archive is already loaded when -XX:SharedArchiveFile is specified\");\n+        dump2(baseArchiveName \/*this is overridden by -XX:SharedArchiveFile= below*\/,\n+              topArchiveName,\n+              \"-XX:SharedArchiveFile=\" + topArchiveName,\n+              \"-cp\", appJar, mainClass)\n+            .assertAbnormalExit(\"-XX:ArchiveClassesAtExit is unsupported when a dynamic CDS archive is specified in -XX:SharedArchiveFile:\");\n+\n+        testcase(\"A dynamic archive is already loaded when -XX:+RecordDynamicDumpInfo is specified\");\n+        run2(null, topArchiveName,\n+             \"-XX:+RecordDynamicDumpInfo\",\n+             \"-cp\", appJar, mainClass)\n+            .assertAbnormalExit(\"-XX:+RecordDynamicDumpInfo is unsupported when a dynamic CDS archive is specified in -XX:SharedArchiveFile:\");\n+\n+        testcase(\"-XX:+RecordDynamicDumpInfo cannot be used with -XX:ArchiveClassesAtExit\");\n+        dump2(baseArchiveName,\n+              topArchiveName,\n+              \"-XX:+RecordDynamicDumpInfo\",\n+              \"-cp\", appJar, mainClass)\n+            .assertAbnormalExit(\"-XX:+RecordDynamicDumpInfo cannot be used with -XX:ArchiveClassesAtExit\");\n+\n+        testcase(\"Specifying -XX:+RecordDynamicDumpInfo should not cause dynamic dump\");\n+        run2(baseArchiveName, null,\n+             \"-XX:+RecordDynamicDumpInfo\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldNotMatch(\"\\\\[cds,dynamic\");\n+                });\n+\n+        {\n+            String ERROR = \"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\";\n+\n+            testcase(\"-XX:ArchiveClassesAtExit with CDS disabled (-Xshare:off)\");\n+            mustSkipWith(ERROR, () -> {\n+                    dump2(baseArchiveName,\n+                          topArchiveName,\n+                          \"-Xshare:off\",\n+                          \"-cp\", appJar, mainClass);\n+                });\n+\n+            testcase(\"-XX:ArchiveClassesAtExit with CDS disabled (Base archive cannot be mapped -- doesn't exist\");\n+            mustSkipWith(ERROR, () -> {\n+                    dump2(baseArchiveName + \".notExist\",\n+                          topArchiveName,\n+                          \"-Xlog:cds\",\n+                          \"-Xshare:auto\",\n+                          \"-cp\", appJar, mainClass);\n+                });\n+\n+            testcase(\"-XX:ArchiveClassesAtExit with CDS disabled (incompatible VM options)\");\n+            dump2(baseArchiveName,\n+                  topArchiveName,\n+                  \"--patch-module\",\n+                  \"foo.bar=xxx\",\n+                  \"-Xshare:auto\",\n+                  \"-Xlog:cds\",\n+                  \"-cp\", appJar, mainClass)\n+                .assertAbnormalExit(\"Cannot use the following option when dumping the shared archive: --patch-module\");\n+        }\n+\n+        {\n+            String ERROR = \"-XX:+RecordDynamicDumpInfo is unsupported when base CDS archive is not loaded\";\n+\n+            testcase(\"-XX:+RecordDynamicDumpInfo with CDS disabled (-Xshare:off)\");\n+            run2(baseArchiveName, null,\n+                 \"-XX:+RecordDynamicDumpInfo\",\n+                 \"-Xshare:off\",\n+                 \"-cp\", appJar, mainClass)\n+                .assertAbnormalExit(ERROR);\n+\n+            testcase(\"-XX:+RecordDynamicDumpInfo with CDS disabled (Base archive cannot be mapped -- doesn't exist\");\n+            run2(baseArchiveName + \".notExist\", null,\n+                 \"-XX:+RecordDynamicDumpInfo\",\n+                 \"-Xshare:auto\",\n+                 \"-Xlog:cds\",\n+                 \"-cp\", appJar, mainClass)\n+                .assertAbnormalExit(ERROR);\n+\n+            testcase(\"-XX:+RecordDynamicDumpInfo with CDS disabled (incompatible VM options)\");\n+            run2(baseArchiveName + \".notExist\", null,\n+                 \"-XX:+RecordDynamicDumpInfo\",\n+                 \"--patch-module\",\n+                 \"foo.bar=xxx\",\n+                 \"-Xshare:auto\",\n+                 \"-Xlog:cds\",\n+                 \"-cp\", appJar, mainClass)\n+                .assertAbnormalExit(\"CDS is disabled when the --patch-module option is specified\",\n+                                    ERROR);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/SharedArchiveFileOption.java","additions":123,"deletions":12,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        \"DynamicDumpSharedSpaces is unsupported when base CDS archive is not loaded\";\n+        \"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\";\n@@ -329,3 +329,1 @@\n-        if (isUnableToMap(output)) {\n-            throw new SkippedException(UnableToMapMsg);\n-        }\n+        checkMappingFailure(output);\n@@ -354,1 +352,1 @@\n-    public static boolean isUnableToMap(OutputAnalyzer output) {\n+    private static String hasUnableToMapMessage(OutputAnalyzer output) {\n@@ -356,3 +354,7 @@\n-        if ((output.getExitValue() == 1) &&\n-            (outStr.contains(MSG_RANGE_NOT_WITHIN_HEAP) || outStr.contains(MSG_DYNAMIC_NOT_SUPPORTED))) {\n-            return true;\n+        if ((output.getExitValue() == 1)) {\n+            if (outStr.contains(MSG_RANGE_NOT_WITHIN_HEAP)) {\n+                return MSG_RANGE_NOT_WITHIN_HEAP;\n+            }\n+            if (outStr.contains(MSG_DYNAMIC_NOT_SUPPORTED)) {\n+                return MSG_DYNAMIC_NOT_SUPPORTED;\n+            }\n@@ -361,1 +363,5 @@\n-        return false;\n+        return null;\n+    }\n+\n+    public static boolean isUnableToMap(OutputAnalyzer output) {\n+        return hasUnableToMapMessage(output) != null;\n@@ -365,2 +371,3 @@\n-        if (isUnableToMap(out)) {\n-            throw new SkippedException(UnableToMapMsg);\n+        String match = hasUnableToMapMessage(out);\n+        if (match != null) {\n+            throw new SkippedException(UnableToMapMsg + \": \" + match);\n@@ -475,4 +482,1 @@\n-        if (isUnableToMap(output)) {\n-            throw new SkippedException(UnableToMapMsg);\n-        }\n-\n+        checkMappingFailure(output);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"}]}