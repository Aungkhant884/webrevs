{"files":[{"patch":"@@ -4186,2 +4186,7 @@\n-        \/\/ Get string version of first digit group\n-        String s = Long.toString(digitGroups[numGroups-1], radix);\n+        long digit = digitGroups[numGroups - 1];\n+        if (radix == 10) {\n+            padWithZeros(buf, digits - (jla.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n+            buf.append(digit);\n+        } else {\n+            \/\/ Get string version of first digit group\n+            String s = Long.toString(digit, radix);\n@@ -4189,3 +4194,3 @@\n-        \/\/ Pad with internal zeros if necessary.\n-        padWithZeros(buf, digits - (s.length() +\n-            (numGroups - 1)*digitsPerLong[radix]));\n+            \/\/ Pad with internal zeros if necessary.\n+            padWithZeros(buf, digits - (s.length() +\n+                    (numGroups - 1) * digitsPerLong[radix]));\n@@ -4193,2 +4198,3 @@\n-        \/\/ Put first digit group into result buffer\n-        buf.append(s);\n+            \/\/ Put first digit group into result buffer\n+            buf.append(s);\n+        }\n@@ -4199,2 +4205,52 @@\n-            s = Long.toString(digitGroups[i], radix);\n-            int numLeadingZeros = digitsPerLong[radix] - s.length();\n+            if (radix == 10) {\n+                digit = digitGroups[i];\n+                int numLeadingZeros = digitsPerLong[10] - jla.stringSize(digit);\n+                if (numLeadingZeros != 0) {\n+                    buf.append(ZEROS, 0, numLeadingZeros);\n+                }\n+                buf.append(digit);\n+            } else {\n+                String s = Long.toString(digitGroups[i], radix);\n+                int numLeadingZeros = digitsPerLong[radix] - s.length();\n+                if (numLeadingZeros != 0) {\n+                    buf.append(ZEROS, 0, numLeadingZeros);\n+                }\n+                buf.append(s);\n+            }\n+        }\n+    }\n+\n+    private void smallToString(StringBuilder buf, int digits) {\n+        assert signum >= 0;\n+\n+        if (signum == 0) {\n+            padWithZeros(buf, digits);\n+            return;\n+        }\n+\n+        \/\/ Compute upper bound on number of digit groups and allocate space\n+        int maxNumDigitGroups = (4 * mag.length + 6) \/ 7;\n+        long[] digitGroups = new long[maxNumDigitGroups];\n+\n+        \/\/ Translate number to string, a digit group at a time\n+        BigInteger tmp = this;\n+        int numGroups = 0;\n+        while (tmp.signum != 0) {\n+            BigInteger d = longRadix[10];\n+\n+            MutableBigInteger q = new MutableBigInteger(),\n+                    a = new MutableBigInteger(tmp.mag);\n+\n+            digitGroups[numGroups++] = a.divideKnuthSmall(q).toLong();\n+            tmp = q.toBigInteger(1);\n+        }\n+\n+        long digit = digitGroups[numGroups - 1];\n+        padWithZeros(buf, digits - (jla.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n+        buf.append(digit);\n+\n+        \/\/ Append remaining digit groups each padded with leading zeros\n+        for (int i = numGroups - 2; i >= 0; i--) {\n+            \/\/ Prepend (any) leading zeros for this digit group\n+            digit = digitGroups[i];\n+            int numLeadingZeros = digitsPerLong[10] - jla.stringSize(digit);\n@@ -4204,1 +4260,1 @@\n-            buf.append(s);\n+            buf.append(digit);\n@@ -4280,1 +4336,5 @@\n-            u.smallToString(radix, sb, digits);\n+            if (radix == 10) {\n+                u.smallToString(sb, digits);\n+            } else {\n+                u.smallToString(radix, sb, digits);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":71,"deletions":11,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -186,0 +186,8 @@\n+    long toLong(int sign) {\n+        assert (intLen <= 2) : \"this MutableBigInteger exceeds the range of long\";\n+        if (intLen == 0 || sign == 0)\n+            return 0;\n+        long d = value[offset] & LONG_MASK;\n+        return (intLen == 2) ? d << 32 | (value[offset + 1] & LONG_MASK) : d;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}