{"files":[{"patch":"@@ -2498,1 +2498,1 @@\n-            public short digit(int i) {\n+            public short digitPair(int i) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4245,1 +4245,1 @@\n-                        jla.digit((int) Math.abs(intCompact - highInt * 100)));\n+                        jla.digitPair((int) Math.abs(intCompact - highInt * 100)));\n@@ -4261,1 +4261,1 @@\n-        int adjusted = coeffLen - scale - 1;\n+        long adjusted = -(long)scale + (coeffLen -1);\n@@ -4301,1 +4301,1 @@\n-            int adjusted,\n+            long adjusted,\n@@ -4337,1 +4337,1 @@\n-            int sig = adjusted % 3;\n+            int sig = (int) (adjusted % 3);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -358,1 +358,2 @@\n-     * Pack the two ascii characters corresponding to the value from 0 to 100 into a short\n+     * For values from 0 to 99 return a short encoding a pair of ASCII-encoded digit characters in little-endian,\n+     * e.g. 0 -> ('0' << 8 | '0'). Used for formatting\n@@ -360,1 +361,1 @@\n-    short digit(int i);\n+    short digitPair(int i);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+                {\"1.0E+2147483649\", \"1.0E+2147483649\", \"1.0E+2147483649\"},\n","filename":"test\/jdk\/java\/math\/BigDecimal\/ToStringTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}