{"files":[{"patch":"@@ -2486,8 +2486,0 @@\n-            public int stringSize(long i) {\n-                return Long.stringSize(i);\n-            }\n-\n-            public void getChars(long i, int index, byte[] buf) {\n-                StringLatin1.getChars(i, index, buf);\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3494,1 +3494,1 @@\n-            int size = jla.stringSize(intCompact);\n+            int size = DecimalDigits.stringSize(intCompact);\n@@ -3500,1 +3500,1 @@\n-                jla.getChars(intCompact, off + size, buf);\n+                DecimalDigits.getCharsLatin1(intCompact, off + size, buf);\n@@ -3516,1 +3516,1 @@\n-                    jla.getChars(Math.abs(intCompact), buf.length, buf);\n+                    DecimalDigits.getCharsLatin1(Math.abs(intCompact), buf.length, buf);\n@@ -3522,1 +3522,1 @@\n-                    jla.getChars(div, divOff, buf);\n+                    DecimalDigits.getCharsLatin1(div, divOff, buf);\n@@ -3524,1 +3524,1 @@\n-                    jla.getChars(Math.abs(intCompact - div * power), buf.length, buf);\n+                    DecimalDigits.getCharsLatin1(Math.abs(intCompact - div * power), buf.length, buf);\n@@ -4244,1 +4244,1 @@\n-                int highIntSize = jla.stringSize(highInt) + (negative ? 1 : 0);\n+                int highIntSize = DecimalDigits.stringSize(highInt) + (negative ? 1 : 0);\n@@ -4249,1 +4249,1 @@\n-                jla.getChars(highInt, highIntSize, buf);\n+                DecimalDigits.getCharsLatin1(highInt, highIntSize, buf);\n@@ -4273,1 +4273,1 @@\n-        int coeffLen = jla.stringSize(Math.abs(intCompact));\n+        int coeffLen = DecimalDigits.stringSize(Math.abs(intCompact));\n@@ -4295,1 +4295,1 @@\n-                jla.getChars(div, off, buf);\n+                DecimalDigits.getCharsLatin1(div, off, buf);\n@@ -4297,1 +4297,1 @@\n-                pad = scale - jla.stringSize(rem);\n+                pad = scale - DecimalDigits.stringSize(rem);\n@@ -4303,1 +4303,1 @@\n-            jla.getChars(rem, buf.length, buf);\n+            DecimalDigits.getCharsLatin1(rem, buf.length, buf);\n@@ -4327,1 +4327,1 @@\n-                int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4336,1 +4336,1 @@\n-                int remSize = jla.stringSize(rem);\n+                int remSize = DecimalDigits.stringSize(rem);\n@@ -4342,1 +4342,1 @@\n-                jla.getChars(rem, off + coeffLen + 1, buf);\n+                DecimalDigits.getCharsLatin1(rem, off + coeffLen + 1, buf);\n@@ -4345,1 +4345,1 @@\n-                int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4361,1 +4361,1 @@\n-            int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+            int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4372,1 +4372,1 @@\n-                        adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                        adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4383,1 +4383,1 @@\n-                        adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                        adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4400,1 +4400,1 @@\n-                jla.getChars(intCompactAbs, off + coeffLen, buf);\n+                DecimalDigits.getCharsLatin1(intCompactAbs, off + coeffLen, buf);\n@@ -4415,1 +4415,1 @@\n-                jla.getChars(div, off + sig, buf);\n+                DecimalDigits.getCharsLatin1(div, off + sig, buf);\n@@ -4417,1 +4417,1 @@\n-                for (int i = sig, pad = coeffLen - jla.stringSize(rem) - sig + 1; i < pad; ++i) {\n+                for (int i = sig, pad = coeffLen - DecimalDigits.stringSize(rem) - sig + 1; i < pad; ++i) {\n@@ -4420,1 +4420,1 @@\n-                jla.getChars(rem, off + coeffLen + 1, buf);\n+                DecimalDigits.getCharsLatin1(rem, off + coeffLen + 1, buf);\n@@ -4433,1 +4433,1 @@\n-            jla.getChars(adjusted, buf.length, buf);\n+            DecimalDigits.getCharsLatin1(adjusted, buf.length, buf);\n@@ -4488,1 +4488,1 @@\n-                    int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                    int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4499,1 +4499,1 @@\n-                    int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                    int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4515,1 +4515,1 @@\n-                int adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                int adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4526,1 +4526,1 @@\n-                            adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                            adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4537,1 +4537,1 @@\n-                            adjustedSize = adjusted != 0 ? jla.stringSize(Math.abs(adjusted)) + 2 : 0;\n+                            adjustedSize = adjusted != 0 ? DecimalDigits.stringSize(Math.abs(adjusted)) + 2 : 0;\n@@ -4581,1 +4581,1 @@\n-                jla.getChars(adjusted, buf.length, buf);\n+                DecimalDigits.getCharsLatin1(adjusted, buf.length, buf);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import jdk.internal.util.DecimalDigits;\n@@ -4188,1 +4189,1 @@\n-            padWithZeros(buf, digits - (jla.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n+            padWithZeros(buf, digits - (DecimalDigits.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n@@ -4207,1 +4208,1 @@\n-                int numLeadingZeros = digitsPerLong[10] - jla.stringSize(digit);\n+                int numLeadingZeros = digitsPerLong[10] - DecimalDigits.stringSize(digit);\n@@ -4249,1 +4250,1 @@\n-        padWithZeros(buf, digits - (jla.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n+        padWithZeros(buf, digits - (DecimalDigits.stringSize(digit) + (numGroups - 1) * digitsPerLong[10]));\n@@ -4256,1 +4257,1 @@\n-            int numLeadingZeros = digitsPerLong[10] - jla.stringSize(digit);\n+            int numLeadingZeros = digitsPerLong[10] - DecimalDigits.stringSize(digit);\n@@ -4281,1 +4282,1 @@\n-        int digitSize = jla.stringSize(digit);\n+        int digitSize = DecimalDigits.stringSize(digit);\n@@ -4294,1 +4295,1 @@\n-        jla.getChars(digit, digitSize + off, buf);\n+        DecimalDigits.getCharsLatin1(digit, digitSize + off, buf);\n@@ -4301,1 +4302,1 @@\n-            digitSize = jla.stringSize(digit);\n+            digitSize = DecimalDigits.stringSize(digit);\n@@ -4306,1 +4307,1 @@\n-            jla.getChars(digit, digitsPerLong + off, buf);\n+            DecimalDigits.getCharsLatin1(digit, digitsPerLong + off, buf);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -336,22 +336,0 @@\n-    \/**\n-     * Returns the string representation size for a given long value.\n-     *\n-     * @param x long value\n-     * @return string size\n-     *\n-     *\/\n-    int stringSize(long i);\n-\n-    \/**\n-     * Places characters representing the long i into the\n-     * character array buf. The characters are placed into\n-     * the buffer backwards starting with the least significant\n-     * digit at the specified index (exclusive), and working\n-     * backwards from there.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, Latin1-encoded\n-     *\/\n-    void getChars(long i, int index, byte[] buf);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -134,16 +134,1 @@\n-        boolean negative = value < 0;\n-        int sign = negative ? 1 : 0;\n-\n-        if (!negative) {\n-            value = -value;\n-        }\n-\n-        long precision = -10;\n-        for (int i = 1; i < 19; i++) {\n-            if (value > precision)\n-                return i + sign;\n-\n-            precision = 10 * precision;\n-        }\n-\n-        return 19 + sign;\n+        return stringSize(value);\n@@ -160,0 +145,86 @@\n+\n+\n+    \/**\n+     * Returns the string representation size for a given long value.\n+     *\n+     * @param x long value\n+     * @return string size\n+     *\n+     * @implNote There are other ways to compute this: e.g. binary search,\n+     * but values are biased heavily towards zero, and therefore linear search\n+     * wins. The iteration results are also routinely inlined in the generated\n+     * code after loop unrolling.\n+     *\/\n+    public static int stringSize(long x) {\n+        int d = 1;\n+        if (x >= 0) {\n+            d = 0;\n+            x = -x;\n+        }\n+        long p = -10;\n+        for (int i = 1; i < 19; i++) {\n+            if (x > p)\n+                return i + d;\n+            p = 10 * p;\n+        }\n+        return 19 + d;\n+    }\n+\n+    \/**\n+     * Places characters representing the long i into the\n+     * character array buf. The characters are placed into\n+     * the buffer backwards starting with the least significant\n+     * digit at the specified index (exclusive), and working\n+     * backwards from there. <strong>Caller must ensure buf has enough capacity for the value to be written!<\/strong>\n+     *\n+     * @implNote This method converts positive inputs into negative\n+     * values, to cover the Long.MIN_VALUE case. Converting otherwise\n+     * (negative to positive) will expose -Long.MIN_VALUE that overflows\n+     * long.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, Latin1-encoded\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    public static int getCharsLatin1(long i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DIGITS[(int)((q * 100) - i)]);\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DIGITS[(q2 * 100) - i2]);\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            ByteArrayLittleEndian.setShort(buf, charPos, DIGITS[-i2]);\n+        } else {\n+            buf[--charPos] = (byte)('0' - i2);\n+        }\n+\n+        if (negative) {\n+            buf[--charPos] = (byte)'-';\n+        }\n+        return charPos;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":87,"deletions":16,"binary":false,"changes":103,"status":"modified"}]}