{"files":[{"patch":"@@ -3521,4 +3521,0 @@\n-        if (scale == 0) {\n-            return intVal.toString(10);\n-        }\n-\n@@ -4464,0 +4460,3 @@\n+                    for (int i = sig, end = coeffLen - stringSize(rem) - sig + 1; i < end; ++i) {\n+                        buf[off + sig + i] = '0';\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,0 +70,5 @@\n+            {\"9223372036854775808\", \"9223372036854775808\"},\n+            {\"12345678901234567890\", \"12345678901234567890\"},\n+            {\"12345678901234567890.45\", \"12345678901234567890.45\"},\n+            {\"123.45\", \"123.45\"},\n+            {\"1234567890000012345678900000001234567890000000123456789000000000000000000000000.45\", \"1234567890000012345678900000001234567890000000123456789000000000000000000000000.45\"},\n","filename":"test\/jdk\/java\/math\/BigDecimal\/ToPlainStringTests.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+ \/*\n+  * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+  * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+  *\n+  * This code is free software; you can redistribute it and\/or modify it\n+  * under the terms of the GNU General Public License version 2 only, as\n+  * published by the Free Software Foundation.\n+  *\n+  * This code is distributed in the hope that it will be useful, but WITHOUT\n+  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+  * version 2 for more details (a copy is included in the LICENSE file that\n+  * accompanied this code).\n+  *\n+  * You should have received a copy of the GNU General Public License version\n+  * 2 along with this work; if not, write to the Free Software Foundation,\n+  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+  *\n+  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+  * or visit www.oracle.com if you need additional information or have any\n+  * questions.\n+  *\/\n+\n+\/*\n+ * @test\n+ * @summary Basic tests of toString & toEngineeringString method\n+ * @run main ToStringTests\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+EliminateAutoBox -XX:AutoBoxCacheMax=20000 ToStringTests\n+ * @author shaojin.wensj@alibaba-inc.com\n+ *\/\n+\n+import java.math.BigDecimal;\n+\n+public class ToStringTests {\n+    public static void main(String argv[]) {\n+        String[][] testCases = {\n+                {\"0\", \"0\", \"0\"},\n+                {\"1\", \"1\", \"1\"},\n+                {\"10\", \"10\", \"10\"},\n+                {\"2e1\", \"2E+1\", \"20\"},\n+                {\"3e2\", \"3E+2\", \"300\"},\n+                {\"4e3\", \"4E+3\", \"4E+3\"},\n+                {\"5e4\", \"5E+4\", \"50E+3\"},\n+                {\"6e5\", \"6E+5\", \"600E+3\"},\n+                {\"7e6\", \"7E+6\", \"7E+6\"},\n+                {\"8e7\", \"8E+7\", \"80E+6\"},\n+                {\"9e8\", \"9E+8\", \"900E+6\"},\n+                {\"1e9\", \"1E+9\", \"1E+9\"},\n+\n+                {\".0\", \"0.0\", \"0.0\"},\n+                {\".1\", \"0.1\", \"0.1\"},\n+                {\".10\", \"0.10\", \"0.10\"},\n+                {\"1e-1\", \"0.1\", \"0.1\"},\n+                {\"1e-1\", \"0.1\", \"0.1\"},\n+                {\"2e-2\", \"0.02\", \"0.02\"},\n+                {\"3e-3\", \"0.003\", \"0.003\"},\n+                {\"4e-4\", \"0.0004\", \"0.0004\"},\n+                {\"5e-5\", \"0.00005\", \"0.00005\"},\n+                {\"6e-6\", \"0.000006\", \"0.000006\"},\n+                {\"7e-7\", \"7E-7\", \"700E-9\"},\n+                {\"8e-8\", \"8E-8\", \"80E-9\"},\n+                {\"9e-9\", \"9E-9\", \"9E-9\"},\n+                {\"9000e-12\", \"9.000E-9\", \"9.000E-9\"},\n+\n+                {\"9000e-22\", \"9.000E-19\", \"900.0E-21\"},\n+                {\"12345678901234567890\", \"12345678901234567890\", \"12345678901234567890\"},\n+                {\"12345678901234567890e22\", \"1.2345678901234567890E+41\", \"123.45678901234567890E+39\"},\n+                {\"12345678901234567890e-22\", \"0.0012345678901234567890\", \"0.0012345678901234567890\"},\n+                {\"9223372036854775808\", \"9223372036854775808\", \"9223372036854775808\"},\n+                {\"12345678901234567890\", \"12345678901234567890\", \"12345678901234567890\"},\n+                {\"12345678901234567890.45\", \"12345678901234567890.45\", \"12345678901234567890.45\"},\n+                {\"123.45\", \"123.45\", \"123.45\"},\n+                {\n+                        \"1234567890000012345678900000001234567890000000123456789000000000000000000000000.45\",\n+                        \"1234567890000012345678900000001234567890000000123456789000000000000000000000000.45\",\n+                        \"1234567890000012345678900000001234567890000000123456789000000000000000000000000.45\"\n+                }\n+        };\n+\n+        int errors = 0;\n+        for (String[] testCase : testCases) {\n+            BigDecimal bd = new BigDecimal(testCase[0]);\n+            String s;\n+\n+            if (!(s = bd.toString()).equals(testCase[1])) {\n+                errors++;\n+                System.err.println(\"Unexpected result ``\" +\n+                        s + \"'', expect ``\" + testCase[1] + \"'' from BigDecimal \" +\n+                        bd);\n+            }\n+            if (!(s = bd.toEngineeringString()).equals(testCase[2])) {\n+                errors++;\n+                System.err.println(\"Unexpected engineering result ``\" +\n+                        s + \"'', expect ``\" + testCase[2] + \"'' from BigDecimal \" +\n+                        testCase[0]);\n+            }\n+\n+            bd = new BigDecimal(\"-\" + testCase[0]);\n+            if (bd.signum() != 0 && !(s = (bd.toString())).equals(\"-\" + testCase[1])) {\n+                errors++;\n+                System.err.println(\"Unexpected result ``\" +\n+                        s + \"'', expect ``\" + testCase[1] + \"'' from BigDecimal \" +\n+                        bd);\n+            }\n+\n+            if (bd.signum() != 0 && !(s = (bd.toEngineeringString())).equals(\"-\" + testCase[2])) {\n+                errors++;\n+                System.err.println(\"Unexpected engineering result ``\" +\n+                        s + \"'', expect ``\" + testCase[2] + \"'' from BigDecimal \" +\n+                        bd);\n+            }\n+        }\n+\n+        if (errors > 0) {\n+            throw new RuntimeException(errors + \" errors during run.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/math\/BigDecimal\/ToStringTests.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}