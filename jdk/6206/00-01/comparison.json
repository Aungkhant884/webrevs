{"files":[{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Fork;\n+\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests java.util.random.RandomGenerator's different random number generators \n+ * which use Math.unsignedMultiplyHigh().\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class RandomGeneratorNext {\n+\n+    public RandomGenerator rngL128X128MixRandom;\n+    public RandomGenerator rngL128X256MixRandom;\n+    public RandomGenerator rngL128X1024MixRandom;\n+    public static long[] buffer;\n+    public static final int SIZE = 1024;\n+\n+    @Setup\n+    public void setup() {\n+        buffer = new long[SIZE];\n+        rngL128X128MixRandom = RandomGeneratorFactory.of(\"L128X128MixRandom\").create();\n+        rngL128X256MixRandom = RandomGeneratorFactory.of(\"L128X256MixRandom\").create();\n+        rngL128X1024MixRandom = RandomGeneratorFactory.of(\"L128X1024MixRandom\").create();\n+    }\n+\n+    @Benchmark\n+    public long testL128X128MixRandomNextLong() {\n+        return rngL128X128MixRandom.nextLong();\n+    }\n+\n+    @Benchmark\n+    public long testL128X256MixRandomNextLong() {\n+        return rngL128X256MixRandom.nextLong();\n+    }\n+\n+    @Benchmark\n+    public long testL128X1024MixRandomNextLong() {\n+        return rngL128X1024MixRandom.nextLong();\n+    }\n+\n+    @Benchmark\n+    @Fork(1)\n+    public void testL128X128MixRandomNextLongLoop() {\n+        for (int i = 0; i < SIZE; i++) buffer[i] = rngL128X128MixRandom.nextLong();\n+    }\n+\n+    @Benchmark\n+    @Fork(1)\n+    public void testL128X256MixRandomNextLongLoop() {\n+        for (int i = 0; i < SIZE; i++) buffer[i] = rngL128X256MixRandom.nextLong();\n+    }\n+\n+    @Benchmark\n+    @Fork(1)\n+    public void testL128X1024MixRandomNextLongLoop() {\n+        for (int i = 0; i < SIZE; i++) buffer[i] = rngL128X1024MixRandom.nextLong();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomGeneratorNext.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}