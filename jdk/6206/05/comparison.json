{"files":[{"patch":"@@ -326,11 +326,1 @@\n-\n-        \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-        \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-        \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-        \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-        \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-        \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-        \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-        \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-        \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X1024MixRandom.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -251,10 +251,1 @@\n-       \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-       \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-       \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-       \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-       \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-       \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-       \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-       \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-       \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X128MixRandom.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -272,10 +272,1 @@\n-       \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-       \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-       \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-       \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-       \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-       \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-       \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-       \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-       \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X256MixRandom.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.util;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Param;\n+import java.util.random.RandomGenerator;\n+import java.util.random.RandomGeneratorFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests java.util.random.RandomGenerator's different random number generators which use Math.unsignedMultiplyHigh().\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class RandomGeneratorNext {\n+\n+    RandomGenerator randomGenerator;\n+\n+    @Param({\"L128X128MixRandom\", \"L128X256MixRandom\", \"L128X1024MixRandom\"})\n+    String randomGeneratorName;\n+\n+    long[] buffer;\n+\n+    @Param(\"1024\")\n+    int size;\n+\n+    @Setup\n+    public void setup() {\n+        buffer = new long[size];\n+        randomGenerator = RandomGeneratorFactory.of(randomGeneratorName).create(randomGeneratorName.hashCode());\n+    }\n+\n+    @Benchmark\n+    public long testNextLong() {\n+        return randomGenerator.nextLong();\n+    }\n+\n+    @Benchmark\n+    public long[] testFillBufferWithNextLong() {\n+        for (int i = 0; i < size; i++) buffer[i] = randomGenerator.nextLong();\n+        return buffer;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/RandomGeneratorNext.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}