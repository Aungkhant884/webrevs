{"files":[{"patch":"@@ -326,11 +326,1 @@\n-\n-        \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-        \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-        \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-        \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-        \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-        \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-        \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-        \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-        \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X1024MixRandom.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -251,10 +251,1 @@\n-       \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-       \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-       \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-       \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-       \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-       \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-       \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-       \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-       \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X128MixRandom.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -272,10 +272,1 @@\n-       \/\/ Note that Math.multiplyHigh computes the high half of the product of signed values,\n-       \/\/ but what we need is the high half of the product of unsigned values; for this we use the\n-       \/\/ formula \"unsignedMultiplyHigh(a, b) = multiplyHigh(a, b) + ((a >> 63) & b) + ((b >> 63) & a)\";\n-       \/\/ in effect, each operand is added to the result iff the sign bit of the other operand is 1.\n-       \/\/ (See Henry S. Warren, Jr., _Hacker's Delight_ (Second Edition), Addison-Wesley (2013),\n-       \/\/ Section 8-3, p. 175; or see the First Edition, Addison-Wesley (2003), Section 8-3, p. 133.)\n-       \/\/ If Math.unsignedMultiplyHigh(long, long) is ever implemented, the following line can become:\n-       \/\/         sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n-       \/\/ and this entire comment can be deleted.\n-        sh = (ML * sh) + (Math.multiplyHigh(ML, sl) + ((ML >> 63) & sl) + ((sl >> 63) & ML)) + sl + ah;\n+        sh = (ML * sh) + Math.unsignedMultiplyHigh(ML, sl) + sl + ah;\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/L128X256MixRandom.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}