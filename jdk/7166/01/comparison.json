{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Comparator;\n@@ -266,1 +267,1 @@\n-            buf.append(htmlstr.substring(prevEnd, match));\n+            buf.append(htmlstr, prevEnd, match);\n@@ -552,2 +553,1 @@\n-        Content li = HtmlTree.LI(mainTreeContent);\n-        return li;\n+        return HtmlTree.LI(mainTreeContent);\n@@ -626,1 +626,1 @@\n-        DocLink targetLink = null;\n+        DocLink targetLink;\n@@ -1534,12 +1534,5 @@\n-                    String quote;\n-                    switch (node.getValueKind()) {\n-                        case DOUBLE:\n-                            quote = \"\\\"\";\n-                            break;\n-                        case SINGLE:\n-                            quote = \"'\";\n-                            break;\n-                        default:\n-                            quote = \"\";\n-                            break;\n-                    }\n+                    String quote = switch (node.getValueKind()) {\n+                        case DOUBLE -> \"\\\"\";\n+                        case SINGLE -> \"'\";\n+                        default -> \"\";\n+                    };\n@@ -1797,3 +1790,3 @@\n-        return new HtmlTree(TagName.DETAILS).addStyle(HtmlStyle.invalidTag)\n-                .add(new HtmlTree(TagName.SUMMARY).add(Text.of(summary)))\n-                .add(new HtmlTree(TagName.PRE).add(detail.get()));\n+        return HtmlTree.DETAILS(HtmlStyle.invalidTag)\n+                .add(HtmlTree.SUMMARY(Text.of(summary)))\n+                .add(HtmlTree.PRE(detail.get()));\n@@ -2229,2 +2222,1 @@\n-                case MODULE:\n-                case PACKAGE:\n+                case MODULE, PACKAGE -> {\n@@ -2235,5 +2227,2 @@\n-                    break;\n-\n-                default:\n-                    name = e.getSimpleName().toString();\n-                    break;\n+                }\n+                default -> name = e.getSimpleName().toString();\n@@ -2448,2 +2437,1 @@\n-        features.stream()\n-                .forEach(c -> {\n+        features.forEach(c -> {\n@@ -2464,1 +2452,1 @@\n-                .sorted((te1, te2) -> te1.getSimpleName().toString().compareTo(te2.getSimpleName().toString()))\n+                .sorted(Comparator.comparing(te -> te.getSimpleName().toString()))\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":17,"deletions":29,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.net.URI;\n@@ -33,0 +34,1 @@\n+import java.util.Collection;\n@@ -38,0 +40,1 @@\n+import java.util.function.Function;\n@@ -225,0 +228,14 @@\n+    \/**\n+     * Adds each of a collection of items, using a map function to create the content for each item.\n+     *\n+     * @param items  the items\n+     * @param mapper the map function to generate the content for each item\n+     *\n+     * @return this object\n+     *\/\n+    @Override\n+    public <T> HtmlTree addAll(Collection<T> items, Function<T, Content> mapper) {\n+        items.forEach(item -> add(mapper.apply(item)));\n+        return this;\n+    }\n+\n@@ -304,0 +321,1 @@\n+     * The {@code ref} argument will be URL-encoded for use as the attribute value.\n@@ -315,0 +333,16 @@\n+    \/**\n+     * Creates an HTML {@code A} element.\n+     * The {@code ref} argument is assumed to be already suitably encoded,\n+     * and will <i>not<\/i> be additionally URL-encoded, but will be\n+     * {@link URI#toASCIIString() converted} to ASCII for use as the attribute value.\n+     *\n+     * @param ref the value for the {@code href} attribute}\n+     * @param body the content for element\n+     * @return the element\n+     *\/\n+    public static HtmlTree A(URI ref, Content body) {\n+        return new HtmlTree(TagName.A)\n+                .put(HtmlAttr.HREF, ref.toASCIIString())\n+                .add(body);\n+    }\n+\n@@ -348,0 +382,10 @@\n+    \/**\n+     * Creates an HTML {@code DETAILS} element.\n+     *\n+     * @return the element\n+     *\/\n+    public static HtmlTree DETAILS(HtmlStyle style) {\n+        return new HtmlTree(TagName.DETAILS)\n+                .setStyle(style);\n+    }\n+\n@@ -498,6 +542,4 @@\n-        switch (headingTag) {\n-            case H1: case H2: case H3: case H4: case H5: case H6:\n-                return headingTag;\n-            default:\n-                throw new IllegalArgumentException(headingTag.toString());\n-        }\n+        return switch (headingTag) {\n+            case H1, H2, H3, H4, H5, H6 -> headingTag;\n+            default -> throw new IllegalArgumentException(headingTag.toString());\n+        };\n@@ -685,0 +727,10 @@\n+    \/**\n+     * Creates an HTML {@code PRE} element with some content.\n+     *\n+     * @param body  the content\n+     * @return the element\n+     *\/\n+    public static HtmlTree PRE(Content body) {\n+        return new HtmlTree(TagName.PRE).add(body);\n+    }\n+\n@@ -785,0 +837,11 @@\n+    \/**\n+     * Creates an HTML {@code SUMMARY} element with the given content.\n+     *\n+     * @param body the content\n+     * @return the element\n+     *\/\n+    public static HtmlTree SUMMARY(Content body) {\n+        return new HtmlTree(TagName.SUMMARY)\n+                .add(body);\n+    }\n+\n@@ -866,0 +929,15 @@\n+    \/**\n+     * Creates an HTML {@code UL} element with the given style and content generated\n+     * from a collection of items..\n+     *\n+     * @param style the style\n+     * @param items the items to be added to the list\n+     * @param mapper a mapper to create the content for each item\n+     * @return the element\n+     *\/\n+    public static <T> HtmlTree UL(HtmlStyle style, Collection<T> items, Function<T,Content> mapper) {\n+        return new HtmlTree(TagName.UL)\n+                .setStyle(style)\n+                .addAll(items, mapper);\n+    }\n+\n@@ -908,24 +986,23 @@\n-        switch (tagName) {\n-            case A:\n-                return (hasAttr(HtmlAttr.ID) || (hasAttr(HtmlAttr.HREF) && hasContent()));\n-            case BR:\n-                return (!hasContent() && (!hasAttrs() || hasAttr(HtmlAttr.CLEAR)));\n-            case HR:\n-            case INPUT:\n-                return (!hasContent());\n-            case IMG:\n-                return (hasAttr(HtmlAttr.SRC) && hasAttr(HtmlAttr.ALT) && !hasContent());\n-            case LINK:\n-                return (hasAttr(HtmlAttr.HREF) && !hasContent());\n-            case META:\n-                return (hasAttr(HtmlAttr.CONTENT) && !hasContent());\n-            case SCRIPT:\n-                return ((hasAttr(HtmlAttr.TYPE) && hasAttr(HtmlAttr.SRC) && !hasContent()) ||\n-                        (hasAttr(HtmlAttr.TYPE) && hasContent()));\n-            case SPAN:\n-                return (hasAttr(HtmlAttr.ID) || hasContent());\n-            case WBR:\n-                return (!hasContent());\n-            default :\n-                return hasContent();\n-        }\n+        return switch (tagName) {\n+            case A ->\n+                    hasAttr(HtmlAttr.ID) || (hasAttr(HtmlAttr.HREF) && hasContent());\n+            case BR ->\n+                    !hasContent() && (!hasAttrs() || hasAttr(HtmlAttr.CLEAR));\n+            case HR, INPUT ->\n+                    !hasContent();\n+            case IMG ->\n+                    hasAttr(HtmlAttr.SRC) && hasAttr(HtmlAttr.ALT) && !hasContent();\n+            case LINK ->\n+                    hasAttr(HtmlAttr.HREF) && !hasContent();\n+            case META ->\n+                    hasAttr(HtmlAttr.CONTENT) && !hasContent();\n+            case SCRIPT ->\n+                    (hasAttr(HtmlAttr.TYPE) && hasAttr(HtmlAttr.SRC) && !hasContent())\n+                            || (hasAttr(HtmlAttr.TYPE) && hasContent());\n+            case SPAN ->\n+                    hasAttr(HtmlAttr.ID) || hasContent();\n+            case WBR ->\n+                    !hasContent();\n+            default ->\n+                    hasContent();\n+        };\n@@ -942,8 +1019,4 @@\n-        switch (tagName) {\n-            case A: case BUTTON: case BR: case CODE: case EM: case I: case IMG:\n-            case LABEL: case SMALL: case SPAN: case STRONG: case SUB: case SUP:\n-            case WBR:\n-                return true;\n-            default:\n-                return false;\n-        }\n+        return switch (tagName) {\n+            case A, BUTTON, BR, CODE, EM, I, IMG, LABEL, SMALL, SPAN, STRONG, SUB, SUP, WBR -> true;\n+            default -> false;\n+        };\n@@ -960,6 +1033,4 @@\n-        switch (tagName) {\n-            case BR: case HR: case IMG: case INPUT: case LINK: case META: case WBR:\n-                return true;\n-            default:\n-                return false;\n-        }\n+        return switch (tagName) {\n+            case BR, HR, IMG, INPUT, LINK, META, WBR -> true;\n+            default -> false;\n+        };\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":116,"deletions":45,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Collection;\n+import java.util.function.Function;\n@@ -92,0 +94,19 @@\n+    \/**\n+     * Adds content to the existing content, generated from a collection of items\n+     * This is an optional operation.\n+     *\n+     * @implSpec This implementation delegates to {@link #add(Content)}.\n+     *\n+     * @param items  the items to be added\n+     * @param mapper the function to create content for each item\n+     *\n+     * @return this object\n+     * @throws UnsupportedOperationException if this operation is not supported by\n+     *                                       a particular implementation\n+     * @throws IllegalArgumentException      if the content is not suitable to be added\n+     *\/\n+    public <T> Content addAll(Collection<T> items, Function<T, Content> mapper) {\n+        items.forEach(item -> add(mapper.apply(item)));\n+        return this;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Content.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}