{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n@@ -35,1 +36,0 @@\n-import org.openjdk.jmh.annotations.Param;\n@@ -37,0 +37,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n@@ -46,3 +47,3 @@\n-@Warmup(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n-@Measurement(iterations = 5, time = 10, timeUnit = TimeUnit.SECONDS)\n-@Fork(1)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n@@ -52,2 +53,1 @@\n-    @Param({\"1.23\", \"1.49\", \"1.80\", \"1.7\", \"0.0\", \"-1.49\", \"-1.50\", \"9999.9123\", \"1.494\", \"1.495\", \"1.03\", \"25.996\", \"-25.996\"})\n-    public double value;\n+    public double[] values;\n@@ -55,1 +55,8 @@\n-    private DefNumerFormat dnf = new DefNumerFormat();\n+    @Setup\n+    public void setup() {\n+        values = new double[] {\n+            1.23, 1.49, 1.80, 1.7, 0.0, -1.49, -1.50, 9999.9123, 1.494, 1.495, 1.03, 25.996, -25.996\n+        };\n+    }\n+\n+    private DefNumberFormat dnf = new DefNumberFormat();\n@@ -58,0 +65,1 @@\n+    @OperationsPerInvocation(13)\n@@ -59,1 +67,3 @@\n-        blackhole.consume(this.dnf.format(this.value));\n+        for (double value : values) {\n+            blackhole.consume(this.dnf.format(value));\n+        }\n@@ -67,1 +77,1 @@\n-    private static class DefNumerFormat {\n+    private static class DefNumberFormat {\n@@ -71,1 +81,1 @@\n-        public DefNumerFormat() {\n+        public DefNumberFormat() {\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DefFormatterBench.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"}]}