{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-     * @throws IllegalArgumentException if length is not a positive integer.\n+     * @throws IllegalArgumentException if length is not in the range of 1 to 32.\n@@ -86,1 +86,3 @@\n-        if (length > 0) {\n+        \/\/ RFC 8954, section 2.1: the length of the nonce MUST be at least 1 octet\n+        \/\/ and can be up to 32 octets.\n+        if (length > 0 && length <= 32) {\n@@ -94,1 +96,1 @@\n-                    \"Length must be a positive integer\");\n+                    \"Length of nonce must be at least 1 byte and can be up to 32 bytes\");\n@@ -124,1 +126,2 @@\n-     *      must be a non-null array of at least one byte long.\n+     *      must be a non-null array of at least one byte long and can be up to\n+     *      32 bytes.\n@@ -128,2 +131,2 @@\n-     * @throws IllegalArgumentException if the incomingNonce length is not a\n-     *      positive integer.\n+     * @throws IllegalArgumentException if the incomingNonce length is not\n+     *      in the range of 1 to 32.\n@@ -138,1 +141,3 @@\n-        if (incomingNonce.length > 0) {\n+        \/\/ RFC 8954, section 2.1: the length of the nonce MUST be at least 1 octet\n+        \/\/ and can be up to 32 octets.\n+        if (incomingNonce.length > 0 && incomingNonce.length <= 32) {\n@@ -144,1 +149,1 @@\n-                    \"Nonce data must be at least 1 byte in length\");\n+                    \"Nonce data must be at least 1 byte and can be up to 32 bytes in length\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSPNonceExtension.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,1 @@\n+        boolean ocspNonce;\n@@ -87,0 +88,2 @@\n+    private RevocationProperties rp;\n+    private static final int DEFAULT_NONCE_BYTES = 16;\n@@ -102,1 +105,1 @@\n-        RevocationProperties rp = getRevocationProperties();\n+        rp = getRevocationProperties();\n@@ -201,0 +204,2 @@\n+                    rp.ocspNonce\n+                        = Boolean.getBoolean(\"jdk.security.certpath.ocspNonce\");\n@@ -715,0 +720,7 @@\n+            byte[] nonce = null;\n+            for (Extension ext : ocspExtensions) {\n+                if (ext.getId().equals(KnownOIDs.OCSPNonceExt.value())) {\n+                    nonce = ext.getValue();\n+                }\n+            }\n+\n@@ -724,6 +736,0 @@\n-                byte[] nonce = null;\n-                for (Extension ext : ocspExtensions) {\n-                    if (ext.getId().equals(KnownOIDs.OCSPNonceExt.value())) {\n-                        nonce = ext.getValue();\n-                    }\n-                }\n@@ -743,0 +749,34 @@\n+                List<Extension> tmpExtensions = Collections.<Extension>emptyList();\n+                if (rp.ocspNonce) {\n+                    if (nonce == null) {\n+                        try {\n+                            \/\/ create the 16-byte nonce by default\n+                            Extension nonceExt = new OCSPNonceExtension(DEFAULT_NONCE_BYTES);\n+\n+                            if (ocspExtensions.size() > 0) {\n+                                tmpExtensions = new ArrayList<Extension>(ocspExtensions);\n+                                tmpExtensions.add(nonceExt);\n+                            } else {\n+                                tmpExtensions = List.of(nonceExt);\n+                            }\n+\n+                            if (debug != null) {\n+                                debug.println(\"Default nonce has been created in the OCSP extensions\");\n+                            }\n+                        } catch (IOException e) {\n+                            throw new CertPathValidatorException(\"Failed to create the default nonce \" +\n+                                    \"in OCSP extensions\", e);\n+                        }\n+                    } else {\n+                        throw new CertPathValidatorException(\"Application provided nonce cannot be \" +\n+                                \"used if the value of the jdk.security.certpath.ocspNonce system \" +\n+                                \"property is true\");\n+                    }\n+                } else {\n+                    if (nonce != null) {\n+                        if (debug != null) {\n+                            debug.println(\"Using application provided nonce\");\n+                        }\n+                    }\n+                }\n+\n@@ -745,1 +785,1 @@\n-                        ocspExtensions, params.variant());\n+                        rp.ocspNonce ? tmpExtensions : ocspExtensions, params.variant());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":49,"deletions":9,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8232019\n+ * @bug 8232019 8256895\n@@ -176,0 +176,1 @@\n+        System.setProperty(\"jdk.security.certpath.ocspNonce\", \"true\");\n","filename":"test\/jdk\/security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/LuxTrustCA.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8243320\n+ * @bug 8243320 8256895\n@@ -50,0 +50,1 @@\n+        System.setProperty(\"jdk.security.certpath.ocspNonce\", \"true\");\n","filename":"test\/jdk\/security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/SSLCA.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8046321\n+ * @bug 8046321 8256895\n@@ -195,0 +195,6 @@\n+                \/\/ Length of the nonce exceeds the maximum 32 bytes\n+                try {\n+                    Extension bigLenNonce = new OCSPNonceExtension(33);\n+                    throw new RuntimeException(\"Accepted a larger than 32 bytes of nonce\");\n+                } catch (IllegalArgumentException iae) { }\n+\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/Extensions\/OCSPNonceExtensionTests.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}