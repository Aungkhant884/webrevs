{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,1 @@\n-     * @throws IllegalArgumentException if length is not a positive integer.\n+     * @throws IllegalArgumentException if length is not in the range of 1 to 32.\n@@ -86,1 +86,3 @@\n-        if (length > 0) {\n+        \/\/ RFC 8954, section 2.1: the length of the nonce MUST be at least 1 octet\n+        \/\/ and can be up to 32 octets.\n+        if (length > 0 && length <= 32) {\n@@ -94,1 +96,1 @@\n-                    \"Length must be a positive integer\");\n+                    \"Length of nonce must be at least 1 byte and can be up to 32 bytes\");\n@@ -124,1 +126,2 @@\n-     *      must be a non-null array of at least one byte long.\n+     *      must be a non-null array of at least one byte long and can be up to\n+     *      32 bytes.\n@@ -128,2 +131,2 @@\n-     * @throws IllegalArgumentException if the incomingNonce length is not a\n-     *      positive integer.\n+     * @throws IllegalArgumentException if the incomingNonce length is not\n+     *      in the range of 1 to 32.\n@@ -138,1 +141,3 @@\n-        if (incomingNonce.length > 0) {\n+        \/\/ RFC 8954, section 2.1: the length of the nonce MUST be at least 1 octet\n+        \/\/ and can be up to 32 octets.\n+        if (incomingNonce.length > 0 && incomingNonce.length <= 32) {\n@@ -144,1 +149,1 @@\n-                    \"Nonce data must be at least 1 byte in length\");\n+                    \"Nonce data must be at least 1 byte and can be up to 32 bytes in length\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSPNonceExtension.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,1 @@\n+        boolean ocspNonce;\n@@ -87,0 +88,2 @@\n+    private RevocationProperties rp;\n+    private static final int DEFAULT_NONCE_BYTES = 16;\n@@ -89,0 +92,1 @@\n+        rp = getRevocationProperties();\n@@ -90,0 +94,1 @@\n+        setDefaultNonce();\n@@ -95,0 +100,1 @@\n+        rp = getRevocationProperties();\n@@ -96,0 +102,1 @@\n+        setDefaultNonce();\n@@ -99,0 +106,21 @@\n+    private void setDefaultNonce() {\n+        byte[] nonce = null;\n+\n+        \/\/ Set the nonce by default in OCSP request extension when the sytem property\n+        \/\/ jdk.security.certpath.ocspNonce=true.\n+        if (rp.ocspNonce) {\n+            try {\n+                setOcspExtensions(List.of(new OCSPNonceExtension(DEFAULT_NONCE_BYTES)));\n+                ocspExtensions = getOcspExtensions();\n+\n+                if (debug != null) {\n+                    debug.println(\"Default nonce has been set in the OCSP extensions\");\n+                }\n+            } catch (IOException e) {\n+                if (debug != null) {\n+                    debug.println(\"Default nonce not set in the OCSP extensions\");\n+                }\n+            }\n+        }\n+    }\n+\n@@ -102,1 +130,0 @@\n-        RevocationProperties rp = getRevocationProperties();\n@@ -201,0 +228,2 @@\n+                    rp.ocspNonce\n+                        = Boolean.getBoolean(\"jdk.security.certpath.ocspNonce\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6854712 7171570 8010748 8025287\n+ * @bug 6854712 7171570 8010748 8025287 8256895\n@@ -28,0 +28,2 @@\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n@@ -38,0 +40,2 @@\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.PKIXExtensions;\n@@ -41,0 +45,1 @@\n+    private static final int DEFAULT_NONCE_BYTES = 16;\n@@ -108,0 +113,30 @@\n+\n+        System.setProperty(\"jdk.security.certpath.ocspNonce\", \"true\");\n+        cpv = CertPathValidator.getInstance(\"PKIX\");\n+        cpc = cpv.getRevocationChecker();\n+        prc = (PKIXRevocationChecker)cpc;\n+\n+        prc.init(false);\n+\n+        System.out.println(\"Testing that getOcspExtensions returns non-empty list if \" +\n+                           \"system property jdk.security.certpath.ocspNonce=true\");\n+        requireNotEmpty(prc.getOcspExtensions(), \"getOcspExtensions()\");\n+\n+        List<Extension> ocspExtensions;\n+        byte[] nonce = null;\n+        ocspExtensions = prc.getOcspExtensions();\n+\n+        for (Extension ext : ocspExtensions) {\n+            if (ext.getId().equals(PKIXExtensions.OCSPNonce_Id.toString())) {\n+                nonce = ext.getValue();\n+            }\n+        }\n+\n+        if (nonce == null) {\n+            throw new Exception(\"FAILED: default nonce should be set in OCSP extensions\");\n+        } else {\n+            \/\/ tag + length + default nonce 16 bytes\n+            if (nonce.length != DEFAULT_NONCE_BYTES + 2) {\n+                throw new Exception(\"FAILED: default nonce should not be \" + nonce.length + \" bytes long\");\n+            }\n+        }\n@@ -126,0 +161,6 @@\n+    }\n+\n+    static void requireNotEmpty(List<?> l, String msg) throws Exception {\n+        if (l.isEmpty()) {\n+            throw new Exception(\"FAILED: \" + msg +\" must return a non-empty list\");\n+        }\n","filename":"test\/jdk\/java\/security\/cert\/PKIXRevocationChecker\/UnitTest.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8232019\n+ * @bug 8232019 8256895\n@@ -176,0 +176,1 @@\n+        System.setProperty(\"jdk.security.certpath.ocspNonce\", \"true\");\n","filename":"test\/jdk\/security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/LuxTrustCA.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8243320\n+ * @bug 8243320 8256895\n@@ -50,0 +50,1 @@\n+        System.setProperty(\"jdk.security.certpath.ocspNonce\", \"true\");\n","filename":"test\/jdk\/security\/infra\/java\/security\/cert\/CertPathValidator\/certification\/SSLCA.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8046321\n+ * @bug 8046321 8256895\n@@ -195,0 +195,6 @@\n+                \/\/ Length of the nonce exceeds the maximum 32 bytes\n+                try {\n+                    Extension bigLenNonce = new OCSPNonceExtension(33);\n+                    throw new RuntimeException(\"Accepted a larger than 32 bytes of nonce\");\n+                } catch (IllegalArgumentException iae) { }\n+\n","filename":"test\/jdk\/sun\/security\/provider\/certpath\/Extensions\/OCSPNonceExtensionTests.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}