{"files":[{"patch":"@@ -240,7 +240,2 @@\n-            try {\n-                sig = constPool.getUTF8At(typeIndex);\n-                annotationClass = (Class<? extends Annotation>)parseSig(sig, container);\n-            } catch (IllegalArgumentException ex) {\n-                \/\/ support obsolete early jsr175 format class files\n-                annotationClass = (Class<? extends Annotation>)constPool.getClassAt(typeIndex);\n-            }\n+            sig = constPool.getUTF8At(typeIndex);\n+            annotationClass = (Class<? extends Annotation>)parseSig(sig, container);\n@@ -423,7 +418,2 @@\n-            try {\n-                String sig = constPool.getUTF8At(classIndex);\n-                return parseSig(sig, container);\n-            } catch (IllegalArgumentException ex) {\n-                \/\/ support obsolete early jsr175 format class files\n-                return constPool.getClassAt(classIndex);\n-            }\n+            String sig = constPool.getUTF8At(classIndex);\n+            return parseSig(sig, container);\n@@ -432,2 +422,1 @@\n-        }\n-        catch (TypeNotPresentException e) {\n+        } catch (TypeNotPresentException e) {\n@@ -479,5 +468,0 @@\n-        } else if (!typeName.endsWith(\";\")) {\n-            \/\/ support now-obsolete early jsr175-format class files.\n-            if (!enumType.getName().equals(typeName))\n-            return new AnnotationTypeMismatchExceptionProxy(\n-                typeName + \".\" + constName);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1518,3 +1518,0 @@\n-        \/\/ support preliminary jsr175-format class files\n-        if (poolReader.hasTag(i, CONSTANT_Class))\n-            return poolReader.getClass(i).type;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}