{"files":[{"patch":"@@ -132,1 +132,2 @@\n-           URI uri) {\n+           URI uri)\n+    {\n@@ -209,1 +210,2 @@\n-     * @throws SecurityException If denied by the security manager\n+     * @throws SecurityException\n+     *         If denied by the security manager\n@@ -233,1 +235,1 @@\n-     * <p>\n+     *\n@@ -262,1 +264,1 @@\n-        AccessHolder.trySetEnableNativeAccess(this);\n+        EnableNativeAccessHandler.trySetEnableNativeAccess(this);\n@@ -276,1 +278,1 @@\n-        return AccessHolder.isNativeAccessEnabled(target);\n+        return EnableNativeAccessHandler.isNativeAccessEnabled(target);\n@@ -279,3 +281,5 @@\n-    \/\/ This class is used to be able to bootstrap without using Unsafe\n-    \/\/ in the outer Module class as that would create a circular initializer dependency\n-    private static final class AccessHolder {\n+    \/**\n+     * This class is used to be able to bootstrap without using Unsafe\n+     * in the outer Module class as that would create a circular initializer dependency.\n+     *\/\n+    private static final class EnableNativeAccessHandler {\n@@ -283,1 +287,1 @@\n-        private AccessHolder() {}\n+        private EnableNativeAccessHandler() {}\n@@ -309,1 +313,1 @@\n-        if (!AccessHolder.isNativeAccessEnabled(target)) {\n+        if (!EnableNativeAccessHandler.isNativeAccessEnabled(target)) {\n@@ -313,1 +317,1 @@\n-            if (AccessHolder.trySetEnableNativeAccess(target)) {\n+            if (EnableNativeAccessHandler.trySetEnableNativeAccess(target)) {\n@@ -332,1 +336,1 @@\n-        AccessHolder.trySetEnableNativeAccess(ALL_UNNAMED_MODULE);\n+        EnableNativeAccessHandler.trySetEnableNativeAccess(ALL_UNNAMED_MODULE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"}]}