{"files":[{"patch":"@@ -116,0 +116,2 @@\n+    \/\/ Accessing this variable is mostly done under synchronization as\n+    \/\/ constructs like VarHandle and AtomicBoolean are not available at this stage.\n@@ -262,1 +264,1 @@\n-        casEnableNativeAccess(this);\n+        trySetEnableNativeAccess(this);\n@@ -302,1 +304,1 @@\n-                if (casEnableNativeAccess(target)) {\n+                if (trySetEnableNativeAccess(target)) {\n@@ -318,1 +320,7 @@\n-    private static boolean casEnableNativeAccess(Module target) {\n+    \/**\n+     * Atomically sets {@code enableNativeAccess} if not already set.\n+     *\n+     * @param target module for which the enableNativeAccess should potentially be updated\n+     * @return if the value was updated.\n+     *\/\n+    private static boolean trySetEnableNativeAccess(Module target) {\n@@ -332,1 +340,1 @@\n-        casEnableNativeAccess(ALL_UNNAMED_MODULE);\n+        trySetEnableNativeAccess(ALL_UNNAMED_MODULE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-@Fork(value = 3, jvmArgsAppend = \"--enable-preview\")\n+@Fork(value = 3, jvmArgsAppend = \"--enable-preview --enable-native-access=ALL-UNNAMED\")\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverOfAddress.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}