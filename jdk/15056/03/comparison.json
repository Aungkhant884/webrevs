{"files":[{"patch":"@@ -56,2 +56,2 @@\n-  int32_t _max_locals;\n-  int32_t _max_stack;\n+  u2 _max_locals;\n+  u2 _max_stack;\n@@ -103,2 +103,2 @@\n-                u2 locals_size,\n-                u2 stack_size,\n+                int32_t locals_size,\n+                int32_t stack_size,\n@@ -125,2 +125,2 @@\n-  inline void set_locals_size(u2 locals_size) { _locals_size = locals_size; }\n-  inline void set_stack_size(u2 stack_size)   { _stack_size = _stack_mark = stack_size; }\n+  inline void set_locals_size(int32_t locals_size) { _locals_size = locals_size; }\n+  inline void set_stack_size(int32_t stack_size)   { _stack_size = _stack_mark = stack_size; }\n@@ -135,2 +135,2 @@\n-  inline int32_t max_locals() const           { return _max_locals; }\n-  inline int32_t max_stack() const            { return _max_stack; }\n+  inline u2 max_locals() const                { return _max_locals; }\n+  inline u2 max_stack() const                 { return _max_stack; }\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-      return (u1)(offset_delta - 1); }\n+      return checked_cast<u1>(offset_delta - 1); }\n@@ -304,1 +304,1 @@\n-    Bytes::put_Java_u2(offset_delta_addr(), offset_delta - 1);\n+    Bytes::put_Java_u2(offset_delta_addr(), checked_cast<u2>(offset_delta - 1));\n@@ -440,1 +440,1 @@\n-    Bytes::put_Java_u2(offset_delta_addr(), offset_delta - 1);\n+    Bytes::put_Java_u2(offset_delta_addr(), checked_cast<u2>(offset_delta - 1));\n@@ -481,1 +481,1 @@\n-    return 251 - chop;\n+    return static_cast<u1>(251 - chop);\n@@ -510,1 +510,1 @@\n-    Bytes::put_Java_u2(offset_delta_addr(), offset_delta - 1);\n+    Bytes::put_Java_u2(offset_delta_addr(), checked_cast<u2>(offset_delta - 1));\n@@ -552,1 +552,1 @@\n-    return 251 + appends;\n+    return static_cast<u1>(251 + appends);\n@@ -601,1 +601,1 @@\n-    Bytes::put_Java_u2(offset_delta_addr(), offset_delta - 1);\n+    Bytes::put_Java_u2(offset_delta_addr(), checked_cast<u2>(offset_delta - 1));\n@@ -751,1 +751,1 @@\n-    Bytes::put_Java_u2(offset_delta_addr(), offset_delta - 1);\n+    Bytes::put_Java_u2(offset_delta_addr(), checked_cast<u2>(offset_delta - 1));\n@@ -754,1 +754,1 @@\n-    Bytes::put_Java_u2(num_locals_addr(), num_locals);\n+    Bytes::put_Java_u2(num_locals_addr(), checked_cast<u2>(num_locals));\n@@ -757,1 +757,1 @@\n-    Bytes::put_Java_u2(stack_slots_addr(end_of_locals), stack_slots);\n+    Bytes::put_Java_u2(stack_slots_addr(end_of_locals), checked_cast<u2>(stack_slots));\n","filename":"src\/hotspot\/share\/classfile\/stackMapTableFormat.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-  static VerificationType uninitialized_type(u2 bci)\n+  static VerificationType uninitialized_type(int bci)\n","filename":"src\/hotspot\/share\/classfile\/verificationType.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-TypeOrigin TypeOrigin::local(u2 index, StackMapFrame* frame) {\n+TypeOrigin TypeOrigin::local(int index, StackMapFrame* frame) {\n@@ -352,1 +352,1 @@\n-TypeOrigin TypeOrigin::stack(u2 index, StackMapFrame* frame) {\n+TypeOrigin TypeOrigin::stack(int index, StackMapFrame* frame) {\n@@ -357,1 +357,1 @@\n-TypeOrigin TypeOrigin::sm_local(u2 index, StackMapFrame* frame) {\n+TypeOrigin TypeOrigin::sm_local(int index, StackMapFrame* frame) {\n@@ -362,1 +362,1 @@\n-TypeOrigin TypeOrigin::sm_stack(u2 index, StackMapFrame* frame) {\n+TypeOrigin TypeOrigin::sm_stack(int index, StackMapFrame* frame) {\n@@ -367,1 +367,1 @@\n-TypeOrigin TypeOrigin::bad_index(u2 index) {\n+TypeOrigin TypeOrigin::bad_index(int index) {\n@@ -370,1 +370,1 @@\n-TypeOrigin TypeOrigin::cp(u2 index, VerificationType vt) {\n+TypeOrigin TypeOrigin::cp(int index, VerificationType vt) {\n@@ -705,2 +705,2 @@\n-  int32_t max_stack = m->verifier_max_stack();\n-  int32_t max_locals = m->max_locals();\n+  u2 max_stack = m->verifier_max_stack();\n+  u2 max_locals = m->max_locals();\n@@ -718,1 +718,1 @@\n-  int32_t stackmap_index = 0; \/\/ index to the stackmap array\n+  u2 stackmap_index = 0; \/\/ index to the stackmap array\n@@ -765,1 +765,1 @@\n-    u2 bci = bcs.bci();\n+    int bci = bcs.bci();\n@@ -784,1 +784,0 @@\n-      u2 index;\n@@ -886,2 +885,2 @@\n-        case Bytecodes::_iload_3 :\n-          index = opcode - Bytecodes::_iload_0;\n+        case Bytecodes::_iload_3 : {\n+          int index = opcode - Bytecodes::_iload_0;\n@@ -890,0 +889,1 @@\n+          }\n@@ -896,2 +896,2 @@\n-        case Bytecodes::_lload_3 :\n-          index = opcode - Bytecodes::_lload_0;\n+        case Bytecodes::_lload_3 : {\n+          int index = opcode - Bytecodes::_lload_0;\n@@ -900,0 +900,1 @@\n+          }\n@@ -906,2 +907,2 @@\n-        case Bytecodes::_fload_3 :\n-          index = opcode - Bytecodes::_fload_0;\n+        case Bytecodes::_fload_3 : {\n+          int index = opcode - Bytecodes::_fload_0;\n@@ -910,0 +911,1 @@\n+          }\n@@ -916,2 +918,2 @@\n-        case Bytecodes::_dload_3 :\n-          index = opcode - Bytecodes::_dload_0;\n+        case Bytecodes::_dload_3 : {\n+          int index = opcode - Bytecodes::_dload_0;\n@@ -920,0 +922,1 @@\n+          }\n@@ -926,2 +929,2 @@\n-        case Bytecodes::_aload_3 :\n-          index = opcode - Bytecodes::_aload_0;\n+        case Bytecodes::_aload_3 : {\n+          int index = opcode - Bytecodes::_aload_0;\n@@ -930,0 +933,1 @@\n+          }\n@@ -1057,2 +1061,2 @@\n-        case Bytecodes::_istore_3 :\n-          index = opcode - Bytecodes::_istore_0;\n+        case Bytecodes::_istore_3 : {\n+          int index = opcode - Bytecodes::_istore_0;\n@@ -1061,0 +1065,1 @@\n+          }\n@@ -1067,2 +1072,2 @@\n-        case Bytecodes::_lstore_3 :\n-          index = opcode - Bytecodes::_lstore_0;\n+        case Bytecodes::_lstore_3 : {\n+          int index = opcode - Bytecodes::_lstore_0;\n@@ -1071,0 +1076,1 @@\n+          }\n@@ -1077,2 +1083,2 @@\n-        case Bytecodes::_fstore_3 :\n-          index = opcode - Bytecodes::_fstore_0;\n+        case Bytecodes::_fstore_3 : {\n+          int index = opcode - Bytecodes::_fstore_0;\n@@ -1081,0 +1087,1 @@\n+          }\n@@ -1087,2 +1094,2 @@\n-        case Bytecodes::_dstore_3 :\n-          index = opcode - Bytecodes::_dstore_0;\n+        case Bytecodes::_dstore_3 : {\n+          int index = opcode - Bytecodes::_dstore_0;\n@@ -1091,0 +1098,1 @@\n+          }\n@@ -1097,2 +1105,2 @@\n-        case Bytecodes::_astore_3 :\n-          index = opcode - Bytecodes::_astore_0;\n+        case Bytecodes::_astore_3 : {\n+          int index = opcode - Bytecodes::_astore_0;\n@@ -1101,0 +1109,1 @@\n+          }\n@@ -1711,1 +1720,1 @@\n-          index = bcs.get_index_u2();\n+          u2 index = bcs.get_index_u2();\n@@ -1748,1 +1757,1 @@\n-          index = bcs.get_index_u2();\n+          u2 index = bcs.get_index_u2();\n@@ -1757,1 +1766,1 @@\n-          index = bcs.get_index_u2();\n+          u2 index = bcs.get_index_u2();\n@@ -1771,1 +1780,1 @@\n-          index = bcs.get_index_u2();\n+          u2 index = bcs.get_index_u2();\n@@ -1880,1 +1889,1 @@\n-    int catch_type_index = exhandlers.catch_type_index(i);\n+    u2 catch_type_index = exhandlers.catch_type_index(i);\n@@ -1933,1 +1942,1 @@\n-u2 ClassVerifier::verify_stackmap_table(u2 stackmap_index, u2 bci,\n+u2 ClassVerifier::verify_stackmap_table(u2 stackmap_index, int bci,\n@@ -1938,1 +1947,1 @@\n-    u2 this_offset = stackmap_table->get_offset(stackmap_index);\n+    int this_offset = stackmap_table->get_offset(stackmap_index);\n@@ -1973,1 +1982,1 @@\n-void ClassVerifier::verify_exception_handler_targets(u2 bci, bool this_uninit,\n+void ClassVerifier::verify_exception_handler_targets(int bci, bool this_uninit,\n@@ -2012,1 +2021,1 @@\n-    u2 bci, const constantPoolHandle& cp, int index, TRAPS) {\n+    int bci, const constantPoolHandle& cp, u2 index, TRAPS) {\n@@ -2023,1 +2032,1 @@\n-    u2 bci, int index, const constantPoolHandle& cp, unsigned int types, TRAPS) {\n+    int bci, u2 index, const constantPoolHandle& cp, unsigned int types, TRAPS) {\n@@ -2042,1 +2051,1 @@\n-    u2 bci, int index, const constantPoolHandle& cp, TRAPS) {\n+    int bci, u2 index, const constantPoolHandle& cp, TRAPS) {\n@@ -2140,1 +2149,1 @@\n-    const constantPoolHandle& cp, u2 bci, TRAPS) {\n+    const constantPoolHandle& cp, int bci, TRAPS) {\n@@ -2343,1 +2352,1 @@\n-  u2 bci = bcs->bci();\n+  int bci = bcs->bci();\n@@ -2462,1 +2471,1 @@\n-  u4 code_length = method()->code_size();\n+  int code_length = method()->code_size();\n@@ -2464,1 +2473,1 @@\n-  u4 target;\n+\n@@ -2481,1 +2490,1 @@\n-      if ((bci_stack->is_empty()) || ((u4)bcs.end_bci() == code_length))\n+      if ((bci_stack->is_empty()) || (bcs.end_bci() == code_length))\n@@ -2487,1 +2496,1 @@\n-    u4 bci = bcs.bci();\n+    int bci = bcs.bci();\n@@ -2509,2 +2518,2 @@\n-      case Bytecodes::_ifnonnull:\n-        target = bcs.dest();\n+      case Bytecodes::_ifnonnull: {\n+        int target = bcs.dest();\n@@ -2540,0 +2549,1 @@\n+        }\n@@ -2542,2 +2552,2 @@\n-      case Bytecodes::_goto_w:\n-        target = (opcode == Bytecodes::_goto ? bcs.dest() : bcs.dest_w());\n+      case Bytecodes::_goto_w: {\n+        int target = (opcode == Bytecodes::_goto ? bcs.dest() : bcs.dest_w());\n@@ -2564,0 +2574,1 @@\n+        }\n@@ -2578,1 +2589,1 @@\n-          u4 default_offset = Bytes::get_Java_u4(aligned_bcp) + bci;\n+          int default_offset = Bytes::get_Java_u4(aligned_bcp) + bci;\n@@ -2600,1 +2611,1 @@\n-            u4 target = bci + (jint)Bytes::get_Java_u4(aligned_bcp+(3+i*delta)*jintSize);\n+            int target = bci + (jint)Bytes::get_Java_u4(aligned_bcp+(3+i*delta)*jintSize);\n@@ -2643,1 +2654,1 @@\n-  u2 bci = bcs->bci();\n+  int bci = bcs->bci();\n@@ -2848,1 +2859,1 @@\n-  u2 bci = bcs->bci();\n+  int bci = bcs->bci();\n@@ -2991,1 +3002,1 @@\n-    u2 index, u2 bci, TRAPS) {\n+    u2 index, int bci, TRAPS) {\n@@ -3006,1 +3017,1 @@\n-    u2 bci, u2 index, const constantPoolHandle& cp,\n+    int bci, u2 index, const constantPoolHandle& cp,\n@@ -3046,1 +3057,1 @@\n-void ClassVerifier::verify_iload(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_iload(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3053,1 +3064,1 @@\n-void ClassVerifier::verify_lload(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_lload(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3062,1 +3073,1 @@\n-void ClassVerifier::verify_fload(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_fload(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3069,1 +3080,1 @@\n-void ClassVerifier::verify_dload(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_dload(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3078,1 +3089,1 @@\n-void ClassVerifier::verify_aload(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_aload(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3084,1 +3095,1 @@\n-void ClassVerifier::verify_istore(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_istore(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3091,1 +3102,1 @@\n-void ClassVerifier::verify_lstore(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_lstore(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3100,1 +3111,1 @@\n-void ClassVerifier::verify_fstore(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_fstore(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3106,1 +3117,1 @@\n-void ClassVerifier::verify_dstore(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_dstore(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3115,1 +3126,1 @@\n-void ClassVerifier::verify_astore(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_astore(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3121,1 +3132,1 @@\n-void ClassVerifier::verify_iinc(u2 index, StackMapFrame* current_frame, TRAPS) {\n+void ClassVerifier::verify_iinc(int index, StackMapFrame* current_frame, TRAPS) {\n@@ -3128,1 +3139,1 @@\n-    VerificationType return_type, VerificationType type, u2 bci,\n+    VerificationType return_type, VerificationType type, int bci,\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":81,"deletions":70,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-  u2 _index;              \/\/ local, stack, or constant pool index\n+  int _index;              \/\/ local, stack, or constant pool index\n@@ -115,1 +115,1 @@\n-      Origin origin, u2 index, StackMapFrame* frame, VerificationType type)\n+      Origin origin, int index, StackMapFrame* frame, VerificationType type)\n@@ -122,5 +122,5 @@\n-  static TypeOrigin local(u2 index, StackMapFrame* frame);\n-  static TypeOrigin stack(u2 index, StackMapFrame* frame);\n-  static TypeOrigin sm_local(u2 index, StackMapFrame* frame);\n-  static TypeOrigin sm_stack(u2 index, StackMapFrame* frame);\n-  static TypeOrigin cp(u2 index, VerificationType vt);\n+  static TypeOrigin local(int index, StackMapFrame* frame);\n+  static TypeOrigin stack(int index, StackMapFrame* frame);\n+  static TypeOrigin sm_local(int index, StackMapFrame* frame);\n+  static TypeOrigin sm_stack(int index, StackMapFrame* frame);\n+  static TypeOrigin cp(int index, VerificationType vt);\n@@ -128,1 +128,1 @@\n-  static TypeOrigin bad_index(u2 index);\n+  static TypeOrigin bad_index(int index);\n@@ -137,1 +137,1 @@\n-  u2 index() const { return _index; }\n+  int index() const { return _index; }\n@@ -177,1 +177,1 @@\n-  static ErrorContext bad_code(u2 bci) {\n+  static ErrorContext bad_code(int bci) {\n@@ -180,1 +180,1 @@\n-  static ErrorContext bad_type(u2 bci, TypeOrigin type) {\n+  static ErrorContext bad_type(int bci, TypeOrigin type) {\n@@ -183,1 +183,1 @@\n-  static ErrorContext bad_type(u2 bci, TypeOrigin type, TypeOrigin exp) {\n+  static ErrorContext bad_type(int bci, TypeOrigin type, TypeOrigin exp) {\n@@ -186,1 +186,1 @@\n-  static ErrorContext bad_flags(u2 bci, StackMapFrame* frame) {\n+  static ErrorContext bad_flags(int bci, StackMapFrame* frame) {\n@@ -189,1 +189,1 @@\n-  static ErrorContext bad_flags(u2 bci, StackMapFrame* cur, StackMapFrame* sm) {\n+  static ErrorContext bad_flags(int bci, StackMapFrame* cur, StackMapFrame* sm) {\n@@ -193,1 +193,1 @@\n-  static ErrorContext bad_cp_index(u2 bci, u2 index) {\n+  static ErrorContext bad_cp_index(int bci, int index) {\n@@ -196,1 +196,1 @@\n-  static ErrorContext bad_local_index(u2 bci, u2 index) {\n+  static ErrorContext bad_local_index(int bci, int index) {\n@@ -200,1 +200,1 @@\n-      u2 bci, StackMapFrame* frame0, StackMapFrame* frame1) {\n+      int bci, StackMapFrame* frame0, StackMapFrame* frame1) {\n@@ -205,1 +205,1 @@\n-      u2 bci, StackMapFrame* frame0, StackMapFrame* frame1) {\n+      int bci, StackMapFrame* frame0, StackMapFrame* frame1) {\n@@ -209,1 +209,1 @@\n-  static ErrorContext stack_overflow(u2 bci, StackMapFrame* frame) {\n+  static ErrorContext stack_overflow(int bci, StackMapFrame* frame) {\n@@ -212,1 +212,1 @@\n-  static ErrorContext stack_underflow(u2 bci, StackMapFrame* frame) {\n+  static ErrorContext stack_underflow(int bci, StackMapFrame* frame) {\n@@ -215,1 +215,1 @@\n-  static ErrorContext missing_stackmap(u2 bci) {\n+  static ErrorContext missing_stackmap(int bci) {\n@@ -307,2 +307,2 @@\n-  void verify_cp_index(u2 bci, const constantPoolHandle& cp, int index, TRAPS);\n-  void verify_cp_type(u2 bci, int index, const constantPoolHandle& cp,\n+  void verify_cp_index(int bci, const constantPoolHandle& cp, u2 index, TRAPS);\n+  void verify_cp_type(int bci, u2 index, const constantPoolHandle& cp,\n@@ -310,1 +310,1 @@\n-  void verify_cp_class_type(u2 bci, int index, const constantPoolHandle& cp, TRAPS);\n+  void verify_cp_class_type(int bci, u2 index, const constantPoolHandle& cp, TRAPS);\n@@ -313,1 +313,1 @@\n-    u2 stackmap_index, u2 bci, StackMapFrame* current_frame,\n+    u2 stackmap_index, int bci, StackMapFrame* current_frame,\n@@ -317,1 +317,1 @@\n-    u2 bci, bool this_uninit, StackMapFrame* current_frame,\n+    int bci, bool this_uninit, StackMapFrame* current_frame,\n@@ -322,1 +322,1 @@\n-    const constantPoolHandle& cp, u2 bci, TRAPS);\n+    const constantPoolHandle& cp, int bci, TRAPS);\n@@ -354,2 +354,2 @@\n-  VerificationType get_newarray_type(u2 index, u2 bci, TRAPS);\n-  void verify_anewarray(u2 bci, u2 index, const constantPoolHandle& cp,\n+  VerificationType get_newarray_type(u2 index, int bci, TRAPS);\n+  void verify_anewarray(int bci, u2 index, const constantPoolHandle& cp,\n@@ -358,1 +358,1 @@\n-      VerificationType return_type, VerificationType type, u2 offset,\n+      VerificationType return_type, VerificationType type, int bci,\n@@ -361,11 +361,11 @@\n-  void verify_iload (u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_lload (u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_fload (u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_dload (u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_aload (u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_istore(u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_lstore(u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_fstore(u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_dstore(u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_astore(u2 index, StackMapFrame* current_frame, TRAPS);\n-  void verify_iinc  (u2 index, StackMapFrame* current_frame, TRAPS);\n+  void verify_iload (int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_lload (int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_fload (int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_dload (int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_aload (int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_istore(int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_lstore(int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_fstore(int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_dstore(int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_astore(int index, StackMapFrame* current_frame, TRAPS);\n+  void verify_iinc  (int index, StackMapFrame* current_frame, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/verifier.hpp","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  int get_index_u1(Bytecodes::Code bc) const {\n+  u1 get_index_u1(Bytecodes::Code bc) const {\n@@ -76,1 +76,1 @@\n-    return *(jubyte*)addr_at(1);\n+    return *(u1*)addr_at(1);\n@@ -78,1 +78,1 @@\n-  int get_index_u2(Bytecodes::Code bc, bool is_wide = false) const {\n+  u2 get_index_u2(Bytecodes::Code bc, bool is_wide = false) const {\n@@ -89,1 +89,1 @@\n-    return *(jubyte*)addr_at(1) + ConstantPool::CPCACHE_INDEX_TAG;\n+    return *(u1*)addr_at(1) + ConstantPool::CPCACHE_INDEX_TAG;\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-  int             get_index_u1() const           { assert_raw_index_size(1); return *(jubyte*)(bcp()+1); }\n+  u1              get_index_u1() const           { assert_raw_index_size(1); return *(jubyte*)(bcp()+1); }\n@@ -152,1 +152,1 @@\n-  int             get_index() const          { return (is_wide()) ? get_index_u2_raw(bcp() + 2) : get_index_u1(); }\n+  u2              get_index() const          { return (is_wide()) ? get_index_u2_raw(bcp() + 2) : get_index_u1(); }\n@@ -154,1 +154,1 @@\n-  int             get_index_u2() const       { assert(!is_wide(), \"\"); return get_index_u2_raw(bcp() + 1);  }\n+  u2              get_index_u2() const       { assert(!is_wide(), \"\"); return get_index_u2_raw(bcp() + 1);  }\n@@ -157,1 +157,1 @@\n-  int get_index_u2_raw(address p) const {\n+  u2  get_index_u2_raw(address p) const {\n@@ -221,1 +221,1 @@\n-  int             get_index() const              { return is_wide() ? bytecode().get_index_u2(raw_code(), true) : get_index_u1(); }\n+  u2              get_index() const              { return is_wide() ? bytecode().get_index_u2(raw_code(), true) : get_index_u1(); }\n@@ -223,1 +223,1 @@\n-  int             get_index_u2() const           { assert_raw_stream(false);\n+  u2              get_index_u2() const           { assert_raw_stream(false);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeStream.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}