{"files":[{"patch":"@@ -262,1 +262,1 @@\n-    \/\/ Actual RSS increase is a lot larger than 16MB. Depends on glibc overhead, and NMT malloc headers in debug VMs.\n+    \/\/ Actual RSS increase is a lot larger than 4 MB. Depends on glibc overhead, and NMT malloc headers in debug VMs.\n@@ -265,1 +265,0 @@\n-    static final int numAllocations = 1024 * 1024;\n@@ -267,0 +266,3 @@\n+    static final int totalAllocationsSize = 4 * 1024 * 1024;\n+    static final int numAllocations = totalAllocationsSize \/ szAllocations;\n+\n@@ -357,0 +359,1 @@\n+        int sleeptime_secs = 2;\n@@ -359,1 +362,1 @@\n-                new String[] { \"true\" \/* full gc *\/, \"3000\" \/* ms after peak *\/ }\n+                new String[] { \"true\" \/* full gc *\/, String.valueOf(sleeptime_secs * 1000) \/* ms after peak *\/ }\n@@ -379,0 +382,2 @@\n+        long t1 = System.currentTimeMillis();\n+        int sleeptime_secs = 4;\n@@ -381,1 +386,1 @@\n-                new String[] { \"false\" \/* full gc *\/, \"6000\" \/* ms after peak *\/ }\n+                new String[] { \"false\" \/* full gc *\/, String.valueOf(sleeptime_secs * 1000) \/* ms after peak *\/ }\n@@ -383,2 +388,4 @@\n-        \/\/ With an interval time of 1 second and a runtime of 6 seconds we expect to see 6 log lines (+ fudge factor).\n-        parseOutputAndLookForNegativeTrim(output, 5, 7);\n+        long t2 = System.currentTimeMillis();\n+        int runtime_s = (int)((t2 - t1) \/ 1000);\n+        \/\/ With an interval time of 1 second and a runtime of 6..x seconds we expect to see x log lines (+- fudge factor).\n+        parseOutputAndLookForNegativeTrim(output, runtime_s - 4, runtime_s + 2);\n@@ -455,0 +462,2 @@\n+                Unsafe.getUnsafe().putByte(ptrs[i], (byte)0);\n+                Unsafe.getUnsafe().putByte(ptrs[i] + szAllocations \/ 2, (byte)0);\n","filename":"test\/hotspot\/jtreg\/gc\/TestTrimNative.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"}]}