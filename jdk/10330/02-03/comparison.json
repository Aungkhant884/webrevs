{"files":[{"patch":"@@ -162,1 +162,0 @@\n-  _prelinker(),\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"cds\/classPrelinker.hpp\"\n@@ -232,1 +231,0 @@\n-  ClassPrelinker _prelinker;\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-ClassPrelinker* ClassPrelinker::_singleton = NULL;\n+ClassPrelinker::ClassesTable* ClassPrelinker::_processed_classes = NULL;\n+ClassPrelinker::ClassesTable* ClassPrelinker::_vm_classes = NULL;\n@@ -39,1 +40,1 @@\n-  return (_vm_classes.get(ik) != NULL);\n+  return (_vm_classes->get(ik) != NULL);\n@@ -44,1 +45,1 @@\n-  _vm_classes.put_if_absent(ik, &created);\n+  _vm_classes->put_if_absent(ik, &created);\n@@ -57,3 +58,4 @@\n-ClassPrelinker::ClassPrelinker() {\n-  assert(_singleton == NULL, \"must be\");\n-  _singleton = this;\n+void ClassPrelinker::initialize() {\n+  assert(_vm_classes == NULL, \"must be\");\n+  _vm_classes = new (ResourceObj::C_HEAP, mtClass)ClassesTable();\n+  _processed_classes = new (ResourceObj::C_HEAP, mtClass)ClassesTable();\n@@ -65,3 +67,6 @@\n-ClassPrelinker::~ClassPrelinker() {\n-  assert(_singleton == this, \"must be\");\n-  _singleton = NULL;\n+void ClassPrelinker::dispose() {\n+  assert(_vm_classes != NULL, \"must be\");\n+  delete _vm_classes;\n+  delete _processed_classes;\n+  _vm_classes = NULL;\n+  _processed_classes = NULL;\n@@ -120,1 +125,1 @@\n-  _processed_classes.put_if_absent(ik, &first_time);\n+  _processed_classes->put_if_absent(ik, &first_time);\n@@ -122,0 +127,1 @@\n+    \/\/ We have already resolved the constants in class, so no need to do it again.\n","filename":"src\/hotspot\/share\/cds\/classPrelinker.cpp","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -50,4 +51,4 @@\n-class ClassPrelinker :  public StackObj {\n-  typedef ResourceHashtable<InstanceKlass*, bool, 15889, ResourceObj::C_HEAP, mtClassShared> ClassesTable;\n-  ClassesTable _processed_classes;\n-  ClassesTable _vm_classes;\n+class ClassPrelinker :  AllStatic {\n+  using ClassesTable = ResourceHashtable<InstanceKlass*, bool, 15889, ResourceObj::C_HEAP, mtClassShared> ;\n+  static ClassesTable* _processed_classes;\n+  static ClassesTable* _vm_classes;\n@@ -55,1 +56,1 @@\n-  void add_one_vm_class(InstanceKlass* ik);\n+  static void add_one_vm_class(InstanceKlass* ik);\n@@ -65,4 +66,4 @@\n-  void resolve_string(constantPoolHandle cp, int cp_index, TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n-  Klass* maybe_resolve_class(constantPoolHandle cp, int cp_index, TRAPS);\n-  bool can_archive_resolved_klass(InstanceKlass* cp_holder, Klass* resolved_klass);\n-  Klass* find_loaded_class(JavaThread* THREAD, oop class_loader, Symbol* name);\n+  static void resolve_string(constantPoolHandle cp, int cp_index, TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n+  static Klass* maybe_resolve_class(constantPoolHandle cp, int cp_index, TRAPS);\n+  static bool can_archive_resolved_klass(InstanceKlass* cp_holder, Klass* resolved_klass);\n+  static Klass* find_loaded_class(JavaThread* THREAD, oop class_loader, Symbol* name);\n@@ -70,1 +71,0 @@\n-  static ClassPrelinker* _singleton;\n@@ -72,6 +72,2 @@\n-  ClassPrelinker();\n-  ~ClassPrelinker();\n-  static ClassPrelinker* current() {\n-    assert(_singleton != NULL, \"must have one\");\n-    return _singleton;\n-  }\n+  static void initialize();\n+  static void dispose();\n@@ -83,1 +79,1 @@\n-  bool is_vm_class(InstanceKlass* ik);\n+  static bool is_vm_class(InstanceKlass* ik);\n@@ -87,1 +83,1 @@\n-  void dumptime_resolve_constants(InstanceKlass* ik, TRAPS);\n+  static void dumptime_resolve_constants(InstanceKlass* ik, TRAPS);\n@@ -92,1 +88,1 @@\n-  bool can_archive_resolved_klass(ConstantPool* cp, int cp_index);\n+  static bool can_archive_resolved_klass(ConstantPool* cp, int cp_index);\n","filename":"src\/hotspot\/share\/cds\/classPrelinker.hpp","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cds\/classPrelinker.hpp\"\n@@ -211,0 +212,1 @@\n+  ClassPrelinker::dispose();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -636,1 +636,1 @@\n-  ClassPrelinker::current()->dumptime_resolve_constants(ik, CHECK_(false));\n+  ClassPrelinker::dumptime_resolve_constants(ik, CHECK_(false));\n@@ -641,1 +641,1 @@\n-  ClassPrelinker prelinker;\n+  ClassPrelinker::initialize();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-    if (ClassPrelinker::current()->can_archive_resolved_klass(src_cp, cp_index)) {\n+    if (ClassPrelinker::can_archive_resolved_klass(src_cp, cp_index)) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}