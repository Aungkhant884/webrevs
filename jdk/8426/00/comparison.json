{"files":[{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4632782\n+ * @summary This test checks CCC #4632782, which verifies that showing a\n+ *          JPopupMenu shouldn't steal the focus out of current focused component.\n+ * @run main JPopupMenuFocusStealTest\n+ *\/\n+public class JPopupMenuFocusStealTest {\n+    private static JPopupMenu popupMenu;\n+    private static JComboBox comboBox;\n+    private static JFrame frame;\n+    private static Robot robot;\n+    private static JLabel label;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(200);\n+        robot.setAutoWaitForIdle(true);\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Bring the mouse pointer to label\n+                mouseClick(label);\n+                \/\/ Get the Popup menu by Mouse Button 3 click\n+                robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+                hitKeys(KeyEvent.VK_DOWN, KeyEvent.VK_DOWN, KeyEvent.VK_ENTER);\n+                final AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(\n+                        () -> isFocusOwner.set(comboBox.isFocusOwner()));\n+\n+                if (isFocusOwner.get()) {\n+                    System.out.println(\"Test Passed for \" + laf);\n+                } else {\n+                    throw new RuntimeException(\"Test Failed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities\n+                        .invokeAndWait(JPopupMenuFocusStealTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        frame.setTitle(\"Popup Menu Application\");\n+        JPanel topPanel = new JPanel(new BorderLayout());\n+        Object[] array = {\"Item1\", \"Item2\", \"Item3\"};\n+        comboBox = new JComboBox(array);\n+        label = new JLabel(\"Check focus transfer from Combo to Popupmenu\");\n+        topPanel.add(comboBox, BorderLayout.NORTH);\n+        topPanel.add(label, BorderLayout.CENTER);\n+        frame.getContentPane().add(topPanel);\n+\n+        \/\/ Create some menu items for the popup\n+        popupMenu = new JPopupMenu(\"Menu\");\n+        popupMenu.add(new JMenuItem(\"New\"));\n+        popupMenu.add(new JMenuItem(\"Open...\"));\n+        popupMenu.add(new JMenuItem(\"Save\"));\n+        popupMenu.add(new JMenuItem(\"Save As...\"));\n+        popupMenu.add(new JMenuItem(\"Exit\"));\n+\n+        topPanel.addMouseListener(new PopupMenuEventListener());\n+        popupMenu.setFocusable(false);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static void mouseClick(JComponent jComponent) throws Exception {\n+        final AtomicReference<Point> loc = new AtomicReference<>();\n+        SwingUtilities\n+                .invokeAndWait(() -> loc.set(jComponent.getLocationOnScreen()));\n+        final Point location = loc.get();\n+        robot.mouseMove(location.x + 15, location.y + 5);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static class PopupMenuEventListener extends MouseAdapter {\n+        public void mousePressed(MouseEvent me) {\n+            if (me.isPopupTrigger()) {\n+                popupMenu.show(me.getComponent(), me.getX(), me.getY());\n+            }\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JPopupMenu\/JPopupMenuFocusStealTest.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}