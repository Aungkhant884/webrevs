{"files":[{"patch":"@@ -1868,12 +1868,0 @@\n-  \/\/ invoke-special-super\n-  if (bc_raw == Bytecodes::_invokespecial && !target->is_object_initializer()) {\n-    ciInstanceKlass* sender_klass = calling_klass;\n-    if (sender_klass->is_interface()) {\n-      int index = state()->stack_size() - (target->arg_size_no_receiver() + 1);\n-      Value receiver = state()->stack_at(index);\n-      CheckCast* c = new CheckCast(sender_klass, receiver, copy_state_before());\n-      c->set_invokespecial_receiver_check();\n-      state()->stack_at_put(index, append_split(c));\n-    }\n-  }\n-\n@@ -1884,0 +1872,7 @@\n+    case Bytecodes::_invokeinterface:\n+      \/\/ convert to invokespecial if the target is the private interface method.\n+      if (target->is_private()) {\n+        assert(holder->is_interface(), \"How did we get a non-interface method here!\");\n+        code = Bytecodes::_invokespecial;\n+      }\n+      break;\n@@ -1900,0 +1895,20 @@\n+  if (code == Bytecodes::_invokespecial) {\n+    \/\/ Additional receiver subtype checks for interface calls via invokespecial or invokeinterface.\n+    ciKlass* receiver_constraint = nullptr;\n+\n+    if (bc_raw == Bytecodes::_invokeinterface) {\n+      receiver_constraint = holder;\n+    } else if (bc_raw == Bytecodes::_invokespecial && !target->is_object_initializer() && calling_klass->is_interface()) {\n+      receiver_constraint = calling_klass;\n+    }\n+\n+    if (receiver_constraint != nullptr) {\n+      int index = state()->stack_size() - (target->arg_size_no_receiver() + 1);\n+      Value receiver = state()->stack_at(index);\n+      CheckCast* c = new CheckCast(receiver_constraint, receiver, copy_state_before());\n+      \/\/ go to uncommon_trap when checkcast fails\n+      c->set_invokespecial_receiver_check();\n+      state()->stack_at_put(index, append_split(c));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+public class InterfacePrivateCalls {\n+    interface I {\n+        private int bar() { return 0; }\n+        default int foo() {\n+            return bar();\n+        }\n+    }\n+\n+    static class C1 implements I {}\n+    static class C2 implements I {}\n+    static class C3 implements I {}\n+    \n+    private I[] objs;\n+\n+    @Setup(Level.Trial)\n+    public void setupTrial() {\n+        objs = new I[3];\n+        objs[0] = new C1();\n+        objs[1] = new C2();\n+        objs[2] = new C3();\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    @Fork(value=1, jvmArgsAppend={\"-XX:TieredStopAtLevel=1\"})\n+    public void invokePrivateInterfaceMethodC1() {\n+        for (int i = 0; i < objs.length; ++i) {\n+            objs[i].foo();\n+        }\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    @Fork(value=1)\n+    public void invokePrivateInterfaceMethodC2() {\n+        for (int i = 0; i < objs.length; ++i) {\n+            objs[i].foo();\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/InterfacePrivateCalls.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}