[{"commit":{"message":"8274983: C1 optimizes the invocation of private interface methods"},"files":[{"filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp"}],"sha":"acf7b9f8c9fb7061aa76cbe0d2f6664fb0838d42"},{"commit":{"message":"Merge branch 'master' into JDK-8274983"},"files":[{"filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp"}],"sha":"4ab4e3aaeffcbadc084f588dd37c4a821c61ca2f"},{"commit":{"message":"8274983: Pattern.matcher performance regression after JDK-823835\n\nThis patch allows c1 to generate the optimized virtual call for invokeinterface\nwhose targets are the private interface methods.\n\nBefore JDK-823835, LambdaMetaFactory generates invokespecial in this case. Because the private\ninterface methods can not be overrided, c1 generates the optimized virtual call. After JDK-823835,\nLambdaMetaFactory generates invokeinterface instead. C1 generates the regular virtual call because\nit can not recognize the new pattern. If a multiple of subclasses all implement a same interface,\nit is possible that they trash the IC stub using their own concrete klass in runtime.\n\nOptimized virtual call uses relocInfo::opt_virtual_call_type(3), It will call VM\n'resolve_opt_virtual_call_C' once and resolve the target to the VEP of the nmethod.\nTherefore, this patch can prevent the callsite from trashing."},"files":[{"filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp"},{"filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp"},{"filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp"}],"sha":"5a00e1f7db04dd01e7eb626874e530d89b0b0825"}]