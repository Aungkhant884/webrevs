{"files":[{"patch":"@@ -1868,19 +1868,0 @@\n-  \/\/ Additional receiver subtype checks for interface calls via invokespecial or invokeinterface.\n-  ciKlass* receiver_constraint = nullptr;\n-  if (bc_raw == Bytecodes::_invokespecial && !target->is_object_initializer()) {\n-    if (calling_klass->is_interface()) {\n-      receiver_constraint = calling_klass;\n-    }\n-  } else if (bc_raw == Bytecodes::_invokeinterface && target->is_loaded() && target->is_private()) {\n-    assert(holder->is_interface(), \"How did we get a non-interface method here!\");\n-    receiver_constraint = holder;\n-  }\n-\n-  if (receiver_constraint != nullptr) {\n-    int index = state()->stack_size() - (target->arg_size_no_receiver() + 1);\n-    Value receiver = state()->stack_at(index);\n-    CheckCast* c = new CheckCast(receiver_constraint, receiver, copy_state_before());\n-    c->set_invokespecial_receiver_check();\n-    state()->stack_at_put(index, append_split(c));\n-  }\n-\n@@ -1890,0 +1871,2 @@\n+    ciKlass* receiver_constraint = nullptr;\n+\n@@ -1891,0 +1874,13 @@\n+    case Bytecodes::_invokespecial:\n+      if (!target->is_object_initializer() && calling_klass->is_interface()) {\n+        receiver_constraint = calling_klass;\n+      }\n+      break;\n+    case Bytecodes::_invokeinterface:\n+      \/\/ convert to invokespecial if the target is the private interface method.\n+      if (target->is_private()) {\n+        assert(holder->is_interface(), \"How did we get a non-interface method here!\");\n+        receiver_constraint = holder;\n+        code = Bytecodes::_invokespecial;\n+      }\n+      break;\n@@ -1900,0 +1896,9 @@\n+\n+    \/\/ Additional receiver subtype checks for interface calls via invokespecial or invokeinterface.\n+    if (receiver_constraint != nullptr) {\n+      int index = state()->stack_size() - (target->arg_size_no_receiver() + 1);\n+      Value receiver = state()->stack_at(index);\n+      CheckCast* c = new CheckCast(receiver_constraint, receiver, copy_state_before());\n+      c->set_incompatible_class_change_check();\n+      state()->stack_at_put(index, append_split(c));\n+    }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1255,1 +1255,0 @@\n-  bool is_private_interface_method() const       { return code() == Bytecodes::_invokeinterface && target_is_loaded() && _target->is_private(); }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2799,2 +2799,1 @@\n-      if (x->code() == Bytecodes::_invokespecial || x->target_is_final() ||\n-          x->is_private_interface_method()) {\n+      if (x->code() == Bytecodes::_invokespecial || x->target_is_final()) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}