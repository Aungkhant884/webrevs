{"files":[{"patch":"@@ -156,1 +156,0 @@\n-        \/\/ No alignment of scalar will greater than STACK_SLOT_SIZE now.\n@@ -170,2 +169,2 @@\n-            var availableRegs = MAX_REGISTER_ARGUMENTS - nRegs[storageClass];\n-            if (availableRegs > 0) {\n+            var regsAvailable = MAX_REGISTER_ARGUMENTS - nRegs[storageClass];\n+            if (regsAvailable > 0) {\n@@ -180,1 +179,0 @@\n-        \/\/ Try to get Storage corresponding to storageClass,\n@@ -212,3 +210,3 @@\n-        boolean availableRegs(int integerReg, int floatReg) {\n-            return nRegs[IntegerRegIdx] + integerReg <= MAX_REGISTER_ARGUMENTS &&\n-                   nRegs[FloatRegIdx] + floatReg <= MAX_REGISTER_ARGUMENTS;\n+        boolean regsAvailable(int integerRegs, int floatRegs) {\n+            return nRegs[IntegerRegIdx] + integerRegs <= MAX_REGISTER_ARGUMENTS &&\n+                   nRegs[FloatRegIdx] + floatRegs <= MAX_REGISTER_ARGUMENTS;\n@@ -217,5 +215,5 @@\n-        \/\/ Variadic arguments with 2 * XLEN-bit alignment and size at most 2 * XLEN bits are passed\n-        \/\/ in an aligned register pair (i.e., the first register in the pair is even-numbered),\n-        \/\/ or on the stack by value if none is available.\n-        \/\/ After a variadic argument has been passed on the stack, all future arguments will\n-        \/\/ also be passed on the stack.\n+        \/\/ Variadic arguments with 2 * XLEN-bit alignment and size at most 2 * XLEN bits\n+        \/\/ are passed in an aligned register pair (i.e., the first register in the pair\n+        \/\/ is even-numbered), or on the stack by value if none is available.\n+        \/\/ After a variadic argument has been passed on the stack, all future arguments\n+        \/\/ will also be passed on the stack.\n@@ -301,1 +299,1 @@\n-                    if (!storageCalculator.availableRegs(1, 0)) {\n+                    if (!storageCalculator.regsAvailable(1, 0)) {\n@@ -323,1 +321,1 @@\n-                    if (storageCalculator.availableRegs(0, descs.size())) {\n+                    if (storageCalculator.regsAvailable(0, descs.size())) {\n@@ -342,1 +340,1 @@\n-                    if (storageCalculator.availableRegs(1, 1)) {\n+                    if (storageCalculator.regsAvailable(1, 1)) {\n@@ -418,1 +416,1 @@\n-                    if (!storageCalculator.availableRegs(1, 0)) {\n+                    if (!storageCalculator.regsAvailable(1, 0)) {\n@@ -439,1 +437,1 @@\n-                    if (storageCalculator.availableRegs(0, descs.size())) {\n+                    if (storageCalculator.regsAvailable(0, descs.size())) {\n@@ -455,1 +453,1 @@\n-                    if (storageCalculator.availableRegs(1, 1)) {\n+                    if (storageCalculator.regsAvailable(1, 1)) {\n@@ -485,0 +483,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64CallArranger.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n- * Copyright (c) 2023, Institute of Software, Chinese Academy of Sciences. All rights reserved.\n+ * Copyright (c) 2023, Institute of Software, Chinese Academy of Sciences.\n+ * All rights reserved.\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestRISCV64CallArranger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}