{"files":[{"patch":"@@ -44,0 +44,16 @@\n+    @Override\n+    public boolean isStackType(int cls) {\n+        return cls == StorageType.STACK;\n+    }\n+\n+    @Override\n+    public int typeSize(int cls) {\n+        switch (cls) {\n+            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n+            case StorageType.FLOAT: return FLOAT_REG_SIZE;\n+            \/\/ STACK is deliberately omitted\n+        }\n+\n+        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n+    }\n+\n@@ -131,16 +147,0 @@\n-    @Override\n-    public boolean isStackType(int cls) {\n-        return cls == StorageType.STACK;\n-    }\n-\n-    @Override\n-    public int typeSize(int cls) {\n-        switch (cls) {\n-            case StorageType.INTEGER: return INTEGER_REG_SIZE;\n-            case StorageType.FLOAT: return FLOAT_REG_SIZE;\n-            \/\/ STACK is deliberately omitted\n-        }\n-\n-        throw new IllegalArgumentException(\"Invalid Storage Class: \" + cls);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/RISCV64Architecture.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {\n+    public Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall) {\n@@ -85,1 +85,1 @@\n-    public static Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall, LinkerOptions options) {\n+    public Bindings getBindings(MethodType mt, FunctionDescriptor cDesc, boolean forUpcall, LinkerOptions options) {\n@@ -90,1 +90,0 @@\n-        \/\/ When return struct is classified as STRUCT_REFERENCE, it will be true.\n@@ -112,1 +111,1 @@\n-    public static MethodHandle arrangeDowncall(MethodType mt, FunctionDescriptor cDesc, LinkerOptions options) {\n+    public MethodHandle arrangeDowncall(MethodType mt, FunctionDescriptor cDesc, LinkerOptions options) {\n@@ -124,1 +123,1 @@\n-    public static MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope scope) {\n+    public MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope scope) {\n@@ -142,1 +141,1 @@\n-    static class StorageCalculator {\n+    class StorageCalculator {\n@@ -240,1 +239,1 @@\n-    abstract static class BindingCalculator {\n+    abstract class BindingCalculator {\n@@ -261,1 +260,1 @@\n-    static class UnboxBindingCalculator extends BindingCalculator {\n+    class UnboxBindingCalculator extends BindingCalculator {\n@@ -380,1 +379,1 @@\n-    static class BoxBindingCalculator extends BindingCalculator {\n+    class BoxBindingCalculator extends BindingCalculator {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/LinuxRISCV64CallArranger.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-    static TypeClass classifyLayout(MemoryLayout type) {\n+    public static TypeClass classifyLayout(MemoryLayout type) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/linux\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}