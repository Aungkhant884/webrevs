{"files":[{"patch":"@@ -766,8 +766,4 @@\n-        int inline_late = parse_int(\"inline_late\");\n-        if (had_error()) {\n-          if (_version < 2) {\n-            \/\/ Old format, ignore error and continue\n-            _error_message = NULL;\n-            inline_late = 0;\n-            if (had_error()) {\n-              \/\/ Pending exception?\n+        int inline_late = 0;\n+        if (_version >= 2) {\n+          inline_late = parse_int(\"inline_late\");\n+          if (had_error()) {\n@@ -775,3 +771,0 @@\n-            }\n-          } else {\n-            break;\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -381,0 +381,2 @@\n+\n+  \/\/ 'should_delay' can be overridden during replay compilation\n@@ -384,0 +386,1 @@\n+  \/\/ 'should_delay' can be overridden during replay compilation\n@@ -570,1 +573,1 @@\n-  assert(!should_delay, \"should be initialized to false\");\n+  assert(!should_delay || AlwaysIncrementalInline, \"should be initialized to false\");\n@@ -608,1 +611,2 @@\n-    if (should_delay || AlwaysIncrementalInline) {\n+    if (should_delay) {\n+      \/\/ Record late inlining decision in order to dump it for compiler replay\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-      bool should_delay = false;\n+      bool should_delay = AlwaysIncrementalInline;\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+        commandLineNormal.add(\"-XX:-AlwaysIncrementalInline\");\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestIncrementalInlining.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}