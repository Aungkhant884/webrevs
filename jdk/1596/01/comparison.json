{"files":[{"patch":"@@ -358,1 +358,3 @@\n-    if (PrintInlining) print_inlining(callee, jvms->depth() - 1, jvms->bci(), msg);\n+    if (C->print_inlining()) {\n+      print_inlining(callee, jvms->depth() - 1, jvms->bci(), msg);\n+    }\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8255742\n+ * @summary PrintInlining as compiler directive doesn't print virtual calls\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ *\n+ * @run driver compiler.inlining.PrintInlining\n+ *\/\n+\n+package compiler.inlining;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class PrintInlining {\n+\n+    static void test(String option) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \"-showversion\",\n+                \"-server\", \"-XX:-TieredCompilation\", \"-Xbatch\", \"-XX:-UseOnStackReplacement\",\n+                \"-XX:CompileCommand=dontinline,*::bar\",\n+                \"-XX:CompileCommand=compileonly,*::foo\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", option,\n+                Launcher.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        \/\/ The test is applicable only to C2 (present in Server VM).\n+        if (analyzer.getStderr().contains(\"Server VM\")) {\n+            analyzer.outputTo(System.out);\n+            if (analyzer.asLines().stream()\n+                .filter(s -> s.matches(\".*A::bar.+virtual call.*\"))\n+                .count() != 1) {\n+                throw new Exception(\"'\" + option + \"' didn't print virtual call.\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test(\"-XX:+PrintInlining\");\n+        test(\"-XX:CompileCommand=option,*::foo,PrintInlining\");\n+    }\n+\n+    static class A {\n+        void bar() {}\n+    }\n+\n+    static class B extends A {\n+        void bar() {}\n+    }\n+\n+    static class C extends A {\n+        void bar() {}\n+    }\n+\n+    static class D extends A {\n+        void bar() {}\n+    }\n+\n+    static void foo(A a) {\n+        a.bar();\n+    }\n+\n+    static class Launcher {\n+        public static void main(String[] args) throws Exception {\n+            A[] as = { new B(), new C(), new D() };\n+            for (int i = 0; i < 20_000; i++) {\n+                foo(as[i % 3]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/PrintInlining.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}