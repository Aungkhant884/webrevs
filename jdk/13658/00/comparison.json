{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import java.util.function.Function;\n@@ -55,0 +56,2 @@\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n@@ -89,1 +92,1 @@\n-    private static final Map<IdentityWrapper, Object>\n+    private static final Map<WeakIdentityWrapper, Object>\n@@ -96,0 +99,3 @@\n+    \/\/ weak references queued by GC\n+    private static final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+\n@@ -202,8 +208,6 @@\n-        IdentityWrapper pKey = new IdentityWrapper(p);\n-        Object o = verificationResults.get(pKey);\n-        \/\/ no mapping found\n-        if (o == null) {\n-            synchronized (JceSecurity.class) {\n-                \/\/ check cache again in case the result is now available\n-                o = verificationResults.get(pKey);\n-                if (o == null) {\n+        expungeStaleWrappers();\n+        WeakIdentityWrapper pKey = new WeakIdentityWrapper(p, queue);\n+        try {\n+            Object o = verificationResults.computeIfAbsent(pKey, new Function<>() {\n+                public Object apply(WeakIdentityWrapper key) {\n+                    \/\/ no mapping found\n@@ -212,1 +216,1 @@\n-                        return new NoSuchProviderException\n+                        throw new IllegalStateException\n@@ -215,0 +219,1 @@\n+                    Object result;\n@@ -219,1 +224,1 @@\n-                        o = PROVIDER_VERIFIED;\n+                        result = PROVIDER_VERIFIED;\n@@ -221,1 +226,1 @@\n-                        o = e;\n+                        result = e;\n@@ -225,1 +230,0 @@\n-                    verificationResults.put(pKey, o);\n@@ -228,1 +232,1 @@\n-                                \" verification result: \" + o);\n+                                \" verification result: \" + result);\n@@ -230,0 +234,1 @@\n+                    return result;\n@@ -231,1 +236,17 @@\n-            }\n+            });\n+            return (o == PROVIDER_VERIFIED? null : (Exception) o);\n+\n+        } catch (IllegalStateException ise) {\n+            \/\/ recursive update detected\n+            return new NoSuchProviderException\n+                    (\"Recursion during verification\");\n+        }\n+    }\n+\n+    \/**\n+     * Removes weakly reachable keys from history.\n+     *\/\n+    static void expungeStaleWrappers() {\n+        WeakIdentityWrapper key;\n+        while ((key = (WeakIdentityWrapper) queue.poll()) != null) {\n+            verificationResults.remove(key);\n@@ -233,1 +254,0 @@\n-        return (o == PROVIDER_VERIFIED? null : (Exception) o);\n@@ -407,1 +427,1 @@\n-    private static final class IdentityWrapper {\n+    private static final class WeakIdentityWrapper extends WeakReference<Object> {\n@@ -409,1 +429,1 @@\n-        final Provider obj;\n+        final int hash;\n@@ -411,2 +431,3 @@\n-        IdentityWrapper(Provider obj) {\n-            this.obj = obj;\n+        WeakIdentityWrapper(Provider obj, ReferenceQueue<Object> queue) {\n+            super(obj, queue);\n+            hash = System.identityHashCode(obj);\n@@ -420,4 +441,1 @@\n-            if (!(o instanceof IdentityWrapper)) {\n-                return false;\n-            }\n-            return this.obj == ((IdentityWrapper)o).obj;\n+            return o instanceof WeakIdentityWrapper w && get() == w.get();\n@@ -428,1 +446,1 @@\n-            return System.identityHashCode(obj);\n+            return hash;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":44,"deletions":26,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8168469\n+ * @summary Memory leak in JceSecurity\n+ * @compile --add-exports java.base\/com.sun.crypto.provider=ALL-UNNAMED VerificationResults.java\n+ * @run main\/othervm -Xmx128m --add-exports java.base\/com.sun.crypto.provider=ALL-UNNAMED VerificationResults\n+ *\/\n+\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import com.sun.crypto.provider.SunJCE;\n+\n+public class VerificationResults {\n+\n+    \/\/ approximate double the number of providers that fits in -Xmx128m heap\n+    private static final int PROVIDERS_COUNT = 2000;\n+    \/\/ the heap buffer size that triggers the OOME when the providers heap cannot be reclaimed\n+    private static final int OOM_TRIGGER_SIZE = 10 * 1024 * 1024;\n+    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException {\n+        int i = 0;\n+        try {\n+            for (; i < PROVIDERS_COUNT; i++) {\n+                SunJCE jceProvider = new SunJCE();\n+                Cipher c = Cipher.getInstance(\"AES\", jceProvider);\n+                char[] arr = new char[OOM_TRIGGER_SIZE];\n+            }\n+        } catch (OutOfMemoryError e) {\n+            System.out.println(\"Caught OOME - less than 10M heap left.\\nCreated \" + i + \" SunJCE providers\");\n+            throw e;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/JceSecurity\/VerificationResults.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}