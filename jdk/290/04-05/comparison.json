{"files":[{"patch":"@@ -7,1 +7,0 @@\n- * @compile\/fail\/ref=IllegalAnnotation.out -XDrawDiagnostics --enable-preview -source ${jdk.version} IllegalAnnotation.java\n","filename":"test\/langtools\/tools\/javac\/IllegalAnnotation.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -207,5 +207,2 @@\n-    \/\/ options to be passed if all targets, including RECORD_COMPONENTS, are to be considered\n-    List<String> previewOptions = List.of(\n-            \"--enable-preview\",\n-            \"-source\", Integer.toString(Runtime.version().feature())\n-    );\n+    \/\/ options to be passed if target RECORD_COMPONENT can't be considered\n+    List<String> source8 = List.of(\"-source\", \"8\");\n@@ -217,1 +214,1 @@\n-                new TestCase(noSet, noSet),\n+    \/*  0*\/     new TestCase(noSet, noSet),\n@@ -219,1 +216,1 @@\n-                new TestCase(noSet, empty),\n+    \/*  1*\/     new TestCase(noSet, empty),\n@@ -221,1 +218,1 @@\n-                new TestCase(noSet, less(jdk8, TYPE_PARAMETER)),\n+                new TestCase(noSet, less(jdk8, TYPE_PARAMETER), source8),\n@@ -223,1 +220,1 @@\n-                new TestCase(noSet, less(jdk8, TYPE_USE)),\n+                new TestCase(noSet, less(jdk8, TYPE_USE), source8),\n@@ -225,1 +222,1 @@\n-                new TestCase(noSet, jdk8),\n+                new TestCase(noSet, jdk8, source8),\n@@ -236,1 +233,1 @@\n-                new TestCase(noSet, plus(empty, METHOD)),\n+    \/*  10*\/    new TestCase(noSet, plus(empty, METHOD)),\n@@ -249,1 +246,1 @@\n-                new TestCase(empty, plus(empty, METHOD)),\n+    \/*  20*\/    new TestCase(empty, plus(empty, METHOD)),\n@@ -254,2 +251,2 @@\n-                new TestCase(empty, less(jdk8, TYPE_USE)),\n-                new TestCase(empty, less(jdk8, TYPE_PARAMETER)),\n+                new TestCase(empty, less(jdk8, TYPE_USE), source8),\n+                new TestCase(empty, less(jdk8, TYPE_PARAMETER), source8),\n@@ -257,8 +254,8 @@\n-                new TestCase(less(jdk7, TYPE), noSet),\n-                new TestCase(less(jdk7, PARAMETER), noSet),\n-                new TestCase(less(jdk7, PACKAGE), noSet),\n-                new TestCase(less(jdk7, METHOD), noSet),\n-                new TestCase(less(jdk7, LOCAL_VARIABLE), noSet),\n-                new TestCase(less(jdk7, FIELD), noSet),\n-                new TestCase(less(jdk7, CONSTRUCTOR), noSet),\n-                new TestCase(less(jdk7, ANNOTATION_TYPE), noSet),\n+                new TestCase(less(jdk7, TYPE), noSet, source8),\n+                new TestCase(less(jdk7, PARAMETER), noSet, source8),\n+                new TestCase(less(jdk7, PACKAGE), noSet, source8),\n+    \/*  30*\/    new TestCase(less(jdk7, METHOD), noSet, source8),\n+                new TestCase(less(jdk7, LOCAL_VARIABLE), noSet, source8),\n+                new TestCase(less(jdk7, FIELD), noSet, source8),\n+                new TestCase(less(jdk7, CONSTRUCTOR), noSet, source8),\n+                new TestCase(less(jdk7, ANNOTATION_TYPE), noSet, source8),\n@@ -268,1 +265,1 @@\n-                new TestCase(jdk7, noSet),\n+                new TestCase(jdk7, noSet, source8),\n@@ -270,3 +267,3 @@\n-                new TestCase(plus(jdk7, TYPE_USE), noSet),\n-                new TestCase(plus(jdk7, TYPE_PARAMETER), noSet),\n-                new TestCase(allTargets, noSet, previewOptions),\n+                new TestCase(plus(jdk7, TYPE_USE), noSet, source8),\n+                new TestCase(plus(jdk7, TYPE_PARAMETER), noSet, source8),\n+                new TestCase(allTargets, noSet, null),\n@@ -274,1 +271,1 @@\n-                new TestCase(plus(empty, TYPE), empty),\n+    \/*  40*\/    new TestCase(plus(empty, TYPE), empty),\n@@ -285,1 +282,1 @@\n-                new TestCase(allTargets, allTargets, previewOptions),\n+    \/*  50*\/    new TestCase(allTargets, allTargets),\n@@ -287,10 +284,10 @@\n-                new TestCase(allTargets, less(allTargets, TYPE), previewOptions),\n-                new TestCase(allTargets, less(allTargets, PARAMETER), previewOptions),\n-                new TestCase(allTargets, less(allTargets, PACKAGE), previewOptions),\n-                new TestCase(allTargets, less(allTargets, METHOD), previewOptions),\n-                new TestCase(allTargets, less(allTargets, LOCAL_VARIABLE), previewOptions),\n-                new TestCase(allTargets, less(allTargets, FIELD), previewOptions),\n-                new TestCase(allTargets, less(allTargets, CONSTRUCTOR), previewOptions),\n-                new TestCase(allTargets, less(allTargets, ANNOTATION_TYPE), previewOptions),\n-                new TestCase(allTargets, less(allTargets, TYPE_USE), previewOptions),\n-                new TestCase(allTargets, less(allTargets, TYPE_PARAMETER), previewOptions),\n+                new TestCase(allTargets, less(allTargets, TYPE)),\n+                new TestCase(allTargets, less(allTargets, PARAMETER)),\n+                new TestCase(allTargets, less(allTargets, PACKAGE)),\n+                new TestCase(allTargets, less(allTargets, METHOD)),\n+                new TestCase(allTargets, less(allTargets, LOCAL_VARIABLE)),\n+                new TestCase(allTargets, less(allTargets, FIELD)),\n+                new TestCase(allTargets, less(allTargets, CONSTRUCTOR)),\n+                new TestCase(allTargets, less(allTargets, ANNOTATION_TYPE)),\n+                new TestCase(allTargets, less(allTargets, TYPE_USE)),\n+    \/*  60*\/    new TestCase(allTargets, less(allTargets, TYPE_PARAMETER)),\n@@ -298,10 +295,10 @@\n-                new TestCase(less(allTargets, TYPE), allTargets, previewOptions),\n-                new TestCase(less(allTargets, PARAMETER), allTargets, previewOptions),\n-                new TestCase(less(allTargets, PACKAGE), allTargets, previewOptions),\n-                new TestCase(less(allTargets, METHOD), allTargets, previewOptions),\n-                new TestCase(less(allTargets, LOCAL_VARIABLE), allTargets, previewOptions),\n-                new TestCase(less(allTargets, FIELD), allTargets, previewOptions),\n-                new TestCase(less(allTargets, CONSTRUCTOR), allTargets, previewOptions),\n-                new TestCase(less(allTargets, ANNOTATION_TYPE), allTargets, previewOptions),\n-                new TestCase(less(allTargets, TYPE_USE), allTargets, previewOptions),\n-                new TestCase(less(allTargets, TYPE_PARAMETER), allTargets, previewOptions)));\n+                new TestCase(less(allTargets, TYPE), allTargets),\n+                new TestCase(less(allTargets, PARAMETER), allTargets),\n+                new TestCase(less(allTargets, PACKAGE), allTargets),\n+                new TestCase(less(allTargets, METHOD), allTargets),\n+                new TestCase(less(allTargets, LOCAL_VARIABLE), allTargets),\n+                new TestCase(less(allTargets, FIELD), allTargets),\n+                new TestCase(less(allTargets, CONSTRUCTOR), allTargets),\n+                new TestCase(less(allTargets, ANNOTATION_TYPE), allTargets),\n+                new TestCase(less(allTargets, TYPE_USE), allTargets),\n+    \/*  70*\/    new TestCase(less(allTargets, TYPE_PARAMETER), allTargets)));\n@@ -312,1 +309,1 @@\n-                testCases.add(new TestCase(plus(empty, b), plus(empty, c), previewOptions));\n+                testCases.add(new TestCase(plus(empty, b), plus(empty, c)));\n@@ -459,1 +456,1 @@\n-                    errMesg = \"Test failed, compiled unexpectedly.\";\n+                    errMesg = \"Test failed, should have compiled successfully.\";\n","filename":"test\/langtools\/tools\/javac\/annotations\/repeatingAnnotations\/combo\/TargetAnnoCombo.java","additions":47,"deletions":50,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsComponentsCanNotDeclareCStyleArrays.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,5 +108,3 @@\n-        List<String> expected = List.of(\"Note: field: i\",\n-                \"Note: record component: i\",\n-                \"Note: testQualifiedClassForProcessing\" + File.separator + \"src\" + File.separator\n-                     + \"R\" + File.separator + \"R.java uses preview language features.\",\n-                \"Note: Recompile with -Xlint:preview for details.\");\n+        List<String> expected = List.of(\n+                \"Note: field: i\",\n+                \"Note: record component: i\");\n@@ -116,3 +114,1 @@\n-                    .options(\"-processor\", QualifiedClassForProcessing.class.getName(),\n-                            \"--enable-preview\",\n-                            \"-source\", Integer.toString(Runtime.version().feature()))\n+                    .options(\"-processor\", QualifiedClassForProcessing.class.getName())\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/JavaxLangModelForRecords.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCMethodDecl;\n@@ -422,0 +423,8 @@\n+        @Override\n+        public void visitMethodDef(JCMethodDecl tree) {\n+            \/\/ ignore compact record constructors\n+            if ((tree.mods.flags & Flags.COMPACT_RECORD_CONSTRUCTOR) == 0) {\n+                super.visitMethodDef(tree);\n+            }\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/tree\/TreePosTest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}