{"files":[{"patch":"@@ -3523,6 +3523,0 @@\n-bool ClassFileParser::supports_records() {\n-  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&\n-         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&\n-         Arguments::enable_preview();\n-}\n-\n@@ -3757,8 +3751,7 @@\n-        } else if (_major_version >= JAVA_14_VERSION) {\n-          if (tag == vmSymbols::tag_record()) {\n-            \/\/ Skip over Record attribute if not supported or if super class is\n-            \/\/ not java.lang.Record.\n-            if (supports_records() &&\n-                cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n-              if (parsed_record_attribute) {\n-                classfile_parse_error(\"Multiple Record attributes in class file %s\", CHECK);\n+\n+        } else if (_major_version >= JAVA_15_VERSION) {\n+          \/\/ Check for PermittedSubclasses tag\n+          if (tag == vmSymbols::tag_permitted_subclasses()) {\n+            if (supports_sealed_types()) {\n+              if (parsed_permitted_subclasses_attribute) {\n+                classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", CHECK);\n@@ -3766,21 +3759,3 @@\n-              \/\/ Check that class is final and not abstract.\n-              if (!_access_flags.is_final() || _access_flags.is_abstract()) {\n-                classfile_parse_error(\"Record attribute in non-final or abstract class file %s\", CHECK);\n-              }\n-              parsed_record_attribute = true;\n-              record_attribute_start = cfs->current();\n-              record_attribute_length = attribute_length;\n-            } else if (log_is_enabled(Info, class, record)) {\n-              \/\/ Log why the Record attribute was ignored.  Note that if the\n-              \/\/ class file version is JVM_CLASSFILE_MAJOR_VERSION.65535 and\n-              \/\/ --enable-preview wasn't specified then a java.lang.UnsupportedClassVersionError\n-              \/\/ exception would have been thrown.\n-              ResourceMark rm(THREAD);\n-              if (supports_records()) {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n-                  _class_name->as_C_string());\n-              } else {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n-                   _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n+              \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n+              if (_access_flags.is_final()) {\n+                classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", CHECK);\n@@ -3788,0 +3763,3 @@\n+              parsed_permitted_subclasses_attribute = true;\n+              permitted_subclasses_attribute_start = cfs->current();\n+              permitted_subclasses_attribute_length = attribute_length;\n@@ -3790,6 +3768,7 @@\n-          } else if (_major_version >= JAVA_15_VERSION) {\n-            \/\/ Check for PermittedSubclasses tag\n-            if (tag == vmSymbols::tag_permitted_subclasses()) {\n-              if (supports_sealed_types()) {\n-                if (parsed_permitted_subclasses_attribute) {\n-                  classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", CHECK);\n+\n+          } else if (_major_version >= JAVA_16_VERSION) {\n+            if (tag == vmSymbols::tag_record()) {\n+              \/\/ Skip over Record attribute if super class is not java.lang.Record.\n+              if (cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n+                if (parsed_record_attribute) {\n+                  classfile_parse_error(\"Multiple Record attributes in class file %s\", CHECK);\n@@ -3797,3 +3776,3 @@\n-                \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n-                if (_access_flags.is_final()) {\n-                  classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", CHECK);\n+                \/\/ Check that class is final and not abstract.\n+                if (!_access_flags.is_final() || _access_flags.is_abstract()) {\n+                  classfile_parse_error(\"Record attribute in non-final or abstract class file %s\", CHECK);\n@@ -3801,3 +3780,8 @@\n-                parsed_permitted_subclasses_attribute = true;\n-                permitted_subclasses_attribute_start = cfs->current();\n-                permitted_subclasses_attribute_length = attribute_length;\n+                parsed_record_attribute = true;\n+                record_attribute_start = cfs->current();\n+                record_attribute_length = attribute_length;\n+              } else if (log_is_enabled(Info, class, record)) {\n+                ResourceMark rm(THREAD);\n+                log_info(class, record)(\n+                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n+                  _class_name->as_C_string());\n@@ -3805,4 +3789,0 @@\n-              cfs->skip_u1(attribute_length, CHECK);\n-            } else {\n-              \/\/ Unknown attribute\n-              cfs->skip_u1(attribute_length, CHECK);\n@@ -3810,0 +3790,1 @@\n+            cfs->skip_u1(attribute_length, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":32,"deletions":51,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2345,7 +2345,0 @@\n-     * {@preview Associated with records, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>records<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -2390,3 +2383,0 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                                 essentialAPI=false)\n-    @SuppressWarnings(\"preview\")\n@@ -3691,7 +3681,0 @@\n-     * {@preview Associated with records, a preview feature of the Java language.\n-     *\n-     *           This method is associated with <i>records<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -3712,2 +3695,0 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                                 essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,8 +28,0 @@\n- * {@preview Associated with records, a preview feature of the Java language.\n- *\n- *           This class is associated with <i>records<\/i>, a preview\n- *           feature of the Java language. Programs can only use this\n- *           class when preview features are enabled. Preview features\n- *           may be removed in a future release, or upgraded to permanent\n- *           features of the Java language.}\n- *\n@@ -91,2 +83,0 @@\n-@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                             essentialAPI=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Record.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -121,8 +121,0 @@\n-     * {@preview Associated with records, a preview feature of the Java language.\n-     *\n-     *           This constant is associated with <i>records<\/i>, a preview\n-     *           feature of the Java language. Programs can only use this\n-     *           constant when preview features are enabled. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -136,2 +128,0 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                                 essentialAPI=true)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/annotation\/ElementType.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,7 +41,0 @@\n- * {@preview Associated with records, a preview feature of the Java language.\n- *\n- *           This class is associated with <i>records<\/i>, a preview\n- *           feature of the Java language. Preview features\n- *           may be removed in a future release, or upgraded to permanent\n- *           features of the Java language.}\n- *\n@@ -56,2 +49,0 @@\n-@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                             essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/RecordComponent.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,7 +41,0 @@\n- * {@preview Associated with records, a preview feature of the Java language.\n- *\n- *           This class is associated with <i>records<\/i>, a preview\n- *           feature of the Java language. Preview features\n- *           may be removed in a future release, or upgraded to permanent\n- *           features of the Java language.}\n- *\n@@ -56,2 +49,0 @@\n-@jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                             essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ObjectMethods.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -95,6 +95,0 @@\n-         * {@preview Associated with records, a preview feature of the Java language.\n-         *\n-         *           This enum constant is associated with <i>records<\/i>, a preview\n-         *           feature of the Java language. Preview features\n-         *           may be removed in a future release, or upgraded to permanent\n-         *           features of the Java language.}\n@@ -103,2 +97,0 @@\n-        @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                                     essentialAPI=false)\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/TypeAnnotation.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -652,7 +652,0 @@\n-         * {@preview Associated with records, a preview feature of the Java language.\n-         *\n-         *           This enum constant is associated with <i>records<\/i>, a preview\n-         *           feature of the Java language. Preview features\n-         *           may be removed in a future release, or upgraded to permanent\n-         *           features of the Java language.}\n-         *\n@@ -660,1 +653,0 @@\n-         *\n@@ -663,2 +655,0 @@\n-        @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,\n-                                     essentialAPI=false)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -170,1 +170,0 @@\n-            feature == Feature.RECORDS ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -162,2 +162,1 @@\n-        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n-                Feature.RECORDS.allowedInSource(source);\n+        allowRecords = Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -153,2 +153,1 @@\n-        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n-                Feature.RECORDS.allowedInSource(source);\n+        allowRecords = Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -275,2 +275,1 @@\n-        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n-                Feature.RECORDS.allowedInSource(source);\n+        allowRecords = Feature.RECORDS.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -187,2 +187,1 @@\n-        this.allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&\n-                Feature.RECORDS.allowedInSource(source);\n+        this.allowRecords = Feature.RECORDS.allowedInSource(source);\n@@ -3719,1 +3718,1 @@\n-            if (token.kind == IDENTIFIER && token.name() == names.record && preview.isEnabled()) {\n+            if (token.kind == IDENTIFIER && token.name() == names.record) {\n@@ -4216,1 +4215,1 @@\n-             checkSourceLevel(Feature.RECORDS);\n+            checkSourceLevel(Feature.RECORDS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineRecord.java\n- * @run main\/othervm --enable-preview RedefineRecord buildagent\n- * @run main\/othervm\/timeout=6000 --enable-preview RedefineRecord runtest\n+ * @compile RedefineRecord.java\n+ * @run main\/othervm RedefineRecord buildagent\n+ * @run main\/othervm\/timeout=6000 RedefineRecord runtest\n@@ -102,1 +102,0 @@\n-                \"--enable-preview\",\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/RedefineRecord.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/abstractRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/badRecordAttribute.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"--enable-preview\",\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n@@ -44,6 +44,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"--enable-preview\",\n-            \"-Xlog:class+record\", \"-Xshare:off\", \"recordIgnoredVersion\");\n-        output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"Ignoring Record attribute\");\n-        output.shouldContain(\"because class file version is not \" + MAJOR_VERSION + \".65535\");\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/ignoreRecordAttribute.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/notFinalRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm --enable-preview recordAttributeTest\n+ * @run main\/othervm recordAttributeTest\n@@ -40,1 +40,1 @@\n-            throw new RuntimeException(\"Expected ClasFormatError exception not thrown\");\n+            throw new RuntimeException(\"Expected ClassFormatError exception not thrown\");\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordAttributeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/\/ Record attribute is ignored because class file minor version is 0.\n+\/\/ Record attribute is ignored because class file major version is < 60.\n@@ -28,1 +28,1 @@\n-  60; \/\/ version\n+  59; \/\/ version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordIgnoredVersion.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n- * @compile --enable-preview --source ${jdk.version} recordReflectionTest.java\n- * @run main\/othervm --enable-preview recordReflectionTest\n+ * @run main\/othervm recordReflectionTest\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordReflectionTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/shortRecordAttribute.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/superNotJLRecord.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/twoRecordAttributes.jcod","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,9 +36,9 @@\n- * @compile --enable-preview -source ${jdk.version} Host\/Host.java\n- * @compile --enable-preview -source ${jdk.version} TestRecordAttr.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr Host\n- * @compile --enable-preview -source ${jdk.version} HostA\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostA\n- * @compile --enable-preview -source ${jdk.version} HostAB\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostAB\n- * @compile --enable-preview -source ${jdk.version} HostABC\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+record=trace TestRecordAttr HostABC\n+ * @compile Host\/Host.java\n+ * @compile TestRecordAttr.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr Host\n+ * @compile HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostA\n+ * @compile HostAB\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostAB\n+ * @compile HostABC\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttr HostABC\n@@ -272,3 +272,1 @@\n-                              false \/* don't recurse *\/,\n-                              \"--enable-preview\",\n-                              \"--source\", VERSION);\n+                              false \/* don't recurse *\/);\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/TestRecordAttr.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -36,5 +36,5 @@\n- * @compile --enable-preview --source ${jdk.version} Host\/Host.java\n- * @compile --enable-preview --source ${jdk.version} TestRecordAttrGenericSig.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace --enable-preview TestRecordAttrGenericSig Host\n- * @compile --enable-preview --source ${jdk.version} HostA\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace --enable-preview TestRecordAttrGenericSig HostA\n+ * @compile Host\/Host.java\n+ * @compile TestRecordAttrGenericSig.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttrGenericSig Host\n+ * @compile HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+record=trace TestRecordAttrGenericSig HostA\n@@ -210,3 +210,1 @@\n-                              false \/* don't recurse *\/,\n-                              \"--enable-preview\",\n-                              \"--source\", VERSION);\n+                              false \/* don't recurse *\/);\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttrGenericSig\/TestRecordAttrGenericSig.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordLinks\/TestRecordLinks.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile --enable-preview --source ${jdk.version} TestRecordTypes.java\n- * @run main\/othervm --enable-preview TestRecordTypes\n+ * @compile TestRecordTypes.java\n+ * @run main TestRecordTypes\n@@ -72,1 +72,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -94,1 +93,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -116,1 +114,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -142,1 +139,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -174,1 +170,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -207,1 +202,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -271,1 +265,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -351,1 +344,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -377,1 +369,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -408,1 +399,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -417,1 +407,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n@@ -423,1 +412,0 @@\n-    @SuppressWarnings(\"preview\")\n@@ -469,1 +457,0 @@\n-                \"--enable-preview\", \"--source\", thisRelease,\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                        \"compiler.err.expected3\",   \/\/ class, interface, enum, or __datum expected\n+                        \"compiler.err.expected4\",   \/\/ class, interface, enum, or record expected\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/GetTask_DiagListenerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -382,6 +382,0 @@\n-\n-    @BeforeMethod\n-    public void setUp() {\n-        setUp(b -> b.compilerOptions(\"--enable-preview\", \"-source\", String.valueOf(SourceVersion.latest().ordinal())));\n-    }\n-\n","filename":"test\/langtools\/jdk\/jshell\/CompletenessTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,6 +79,0 @@\n-\n-    @BeforeMethod\n-    public void setUp() {\n-        setUp(b -> b.compilerOptions(\"--enable-preview\", \"-source\", String.valueOf(SourceVersion.latest().ordinal()))\n-                    .remoteVMOptions(\"--enable-preview\"));\n-    }\n","filename":"test\/langtools\/jdk\/jshell\/RecordsTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -920,1 +920,1 @@\n-        test(new String[] {\"--enable-preview\"},\n+        test(new String[] {},\n","filename":"test\/langtools\/jdk\/jshell\/ToolSimpleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-IllegalAnnotation.java:11:10: compiler.err.annotation.decl.not.allowed.here\n+IllegalAnnotation.java:10:10: compiler.err.annotation.decl.not.allowed.here\n","filename":"test\/langtools\/tools\/javac\/IllegalAnnotation.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n- * @compile\/fail\/ref=LocalInterface.out -XDrawDiagnostics LocalInterface.java\n- * @compile --enable-preview -source ${jdk.version} LocalInterface.java\n+ * @compile\/fail\/ref=LocalInterface.out -XDrawDiagnostics -source 15 LocalInterface.java\n+ * @compile LocalInterface.java\n","filename":"test\/langtools\/tools\/javac\/LocalInterface.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+- compiler.warn.source.no.system.modules.path: 15\n@@ -3,0 +4,1 @@\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/LocalInterface.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} LocalRecord.java\n+ * @compile LocalRecord.java\n","filename":"test\/langtools\/tools\/javac\/LocalRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n- * @compile --enable-preview -source ${jdk.version} ApplicableAnnotationsOnRecords.java\n- * @run main\/othervm --enable-preview ApplicableAnnotationsOnRecords\n+ * @compile ApplicableAnnotationsOnRecords.java\n+ * @run main ApplicableAnnotationsOnRecords\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n- * @compile --enable-preview -source ${jdk.version} TypeAnnotationsPositionsOnRecords.java\n- * @run main\/othervm --enable-preview TypeAnnotationsPositionsOnRecords\n+ * @compile TypeAnnotationsPositionsOnRecords.java\n+ * @run main TypeAnnotationsPositionsOnRecords\n@@ -108,1 +108,0 @@\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedImport.java:10:16: compiler.err.expected3: class, interface, enum\n+AnnotatedImport.java:10:16: compiler.err.expected4: class, interface, enum, record\n@@ -4,1 +4,1 @@\n-AnnotatedImport.java:11:11: compiler.err.expected3: class, interface, enum\n+AnnotatedImport.java:11:11: compiler.err.expected4: class, interface, enum, record\n@@ -6,1 +6,1 @@\n-AnnotatedImport.java:12:21: compiler.err.expected3: class, interface, enum\n+AnnotatedImport.java:12:21: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedImport.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedPackage1.java:9:17: compiler.err.expected3: class, interface, enum\n+AnnotatedPackage1.java:9:17: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage1.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-AnnotatedPackage2.java:9:12: compiler.err.expected3: class, interface, enum\n+AnnotatedPackage2.java:9:12: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/failures\/AnnotatedPackage2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -562,3 +562,1 @@\n-            List<String> options = List.of(\"--enable-preview\",\n-                                           \"-source\", System.getProperty(\"java.specification.version\"));\n-            JavacTask t = (JavacTask) c.getTask(null, fm, null, options, null,\n+            JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n@@ -639,3 +637,1 @@\n-                List<String> options = List.of(\"--enable-preview\",\n-                                               \"-source\", System.getProperty(\"java.specification.version\"));\n-                JavacTask t = (JavacTask) c.getTask(null, fm, null, options, null,\n+                JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorCantBeGeneric.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorCantThrowException.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorMethodCantBeStatic.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AccessorReturnTypeDoesntMatch.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalCantHaveStrongerAccessPrivileges.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalCantInvokeOtherConstructor.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorArgumentMismatch.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorCantHaveReturn.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalConstructorCantHaveThrowsClause.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CanonicalMustNotDeclareTypeVariables.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ConstructorWithSameErasureAsCanonical.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/Expected3.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FirstInvocationMustBeAnotherConstructor.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IllegalRecordComponentName.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IncorrectRecordDeclaration.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceInitializersNotAllowedInRecords.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InterfaceNotAllowed.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidSuperTypeRecord.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ key: compiler.note.note\n@@ -34,1 +31,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/KindnameRecord.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/LocalEnum.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MethodMustBePublic.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,2 +25,3 @@\n-\/\/ key: compiler.warn.preview.feature.use.plural\n-\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: -source 15\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/Records.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsCanNotDeclareInstanceFields.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsCantDeclareComponentModifiers.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/RecordsNotAllowedInInnerClasses.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8,1 +8,0 @@\n- * @compile\/fail\/ref=FauxEnum3.out -XDrawDiagnostics --enable-preview -source ${jdk.version} FauxEnum3.java\n","filename":"test\/langtools\/tools\/javac\/enum\/FauxEnum3.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-FauxEnum3.java:11:14: compiler.err.enum.types.not.extensible\n-1 error\n\\ No newline at end of file\n+FauxEnum3.java:10:14: compiler.err.enum.types.not.extensible\n+1 error\n","filename":"test\/langtools\/tools\/javac\/enum\/FauxEnum3.out","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,2 +6,2 @@\n- * @compile\/fail\/ref=LocalEnum.out -XDrawDiagnostics  LocalEnum.java\n- * @compile --enable-preview -source ${jdk.version}  LocalEnum.java\n+ * @compile\/fail\/ref=LocalEnum.out -XDrawDiagnostics -source 15 LocalEnum.java\n+ * @compile LocalEnum.java\n","filename":"test\/langtools\/tools\/javac\/enum\/LocalEnum.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+- compiler.warn.source.no.system.modules.path: 15\n@@ -3,0 +4,1 @@\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/enum\/LocalEnum.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-            file + \":1: error: class, interface, or enum expected\\n\" +\n+            file + \":1: error: class, interface, enum, or record expected\\n\" +\n@@ -508,1 +508,1 @@\n-            file + \":1: error: class, interface, or enum expected\\n\" +\n+            file + \":1: error: class, interface, enum, or record expected\\n\" +\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1002,1 +1002,1 @@\n-        String expectedErrors = \"Test.java:1:1: compiler.err.expected3: class, interface, enum\\n\" +\n+        String expectedErrors = \"Test.java:1:1: compiler.err.expected4: class, interface, enum, record\\n\" +\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-SingleCommaAnnotationValueFail.java:34:14: compiler.err.expected3: class, interface, enum\n+SingleCommaAnnotationValueFail.java:34:14: compiler.err.expected4: class, interface, enum, record\n","filename":"test\/langtools\/tools\/javac\/parser\/SingleCommaAnnotationValueFail.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,2 +50,1 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null,\n-                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n","filename":"test\/langtools\/tools\/javac\/records\/ElementFilterRecordComponentTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n- * @compile --enable-preview -source ${jdk.version} LocalStaticDeclarations.java\n- * @run main\/othervm --enable-preview LocalStaticDeclarations\n+ * @compile LocalStaticDeclarations.java\n+ * @run main LocalStaticDeclarations\n@@ -178,1 +178,0 @@\n-                .withOptions(new String[]{\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())})\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null,\n-                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n","filename":"test\/langtools\/tools\/javac\/records\/MapAccessorToComponent.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n- * @compile --enable-preview -source ${jdk.version} RecordCompilationTests.java\n- * @run testng\/othervm -DuseAP=false --enable-preview RecordCompilationTests\n- * @run testng\/othervm -DuseAP=true --enable-preview RecordCompilationTests\n+ * @compile RecordCompilationTests.java\n+ * @run testng\/othervm -DuseAP=false RecordCompilationTests\n+ * @run testng\/othervm -DuseAP=true RecordCompilationTests\n@@ -122,11 +122,1 @@\n-    \/\/ @@@ When records become a permanent feature, we don't need these any more\n-    private static String[] PREVIEW_OPTIONS = {\n-            \"--enable-preview\",\n-            \"-source\", Integer.toString(Runtime.version().feature())\n-    };\n-\n-    private static String[] PREVIEW_OPTIONS_WITH_AP = {\n-            \"--enable-preview\",\n-            \"-source\", Integer.toString(Runtime.version().feature()),\n-            \"-processor\", SimplestAP.class.getName()\n-    };\n+    private static String[] OPTIONS_WITH_AP = {\"-processor\", SimplestAP.class.getName()};\n@@ -151,1 +141,3 @@\n-        setCompileOptions(useAP ? PREVIEW_OPTIONS_WITH_AP : PREVIEW_OPTIONS);\n+        if (useAP) {\n+            setCompileOptions(OPTIONS_WITH_AP);\n+        }\n@@ -1011,1 +1003,1 @@\n-        assertOKWithWarning(\"compiler.warn.restricted.type.not.allowed.preview\",\n+        assertFail(\"compiler.err.illegal.start.of.type\",\n@@ -1063,2 +1055,0 @@\n-                \"--enable-preview\",\n-                \"-source\", Integer.toString(Runtime.version().feature()),\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile --enable-preview -source ${jdk.version} RecordMemberTests.java\n- * @run testng\/othervm --enable-preview RecordMemberTests\n+ * @compile RecordMemberTests.java\n+ * @run testng RecordMemberTests\n","filename":"test\/langtools\/tools\/javac\/records\/RecordMemberTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * @compile --enable-preview -source ${jdk.version} VarargsRecordsTest.java\n- * @run testng\/othervm --enable-preview VarargsRecordsTest\n+ * @compile VarargsRecordsTest.java\n+ * @run testng VarargsRecordsTest\n","filename":"test\/langtools\/tools\/javac\/records\/VarargsRecordsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run main\/othervm --enable-preview CheckRecordMembers\n+ * @run main CheckRecordMembers\n@@ -105,1 +105,0 @@\n-                .withOptions(new String[]{\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())})\n","filename":"test\/langtools\/tools\/javac\/records\/mandated_members\/CheckRecordMembers.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @compile --enable-preview -source ${jdk.version} Record.java\n- * @compile --enable-preview -source ${jdk.version} WriteReadTest.java\n+ * @compile Record.java\n+ * @compile WriteReadTest.java\n","filename":"test\/langtools\/tools\/javac\/records\/writeread\/WriteReadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,2 +51,1 @@\n-        JavacTask t = (JavacTask) c.getTask(null, null, null,\n-                List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n+        JavacTask t = (JavacTask) c.getTask(null, null, null, null, null,\n","filename":"test\/langtools\/tools\/sjavac\/PubApisTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}