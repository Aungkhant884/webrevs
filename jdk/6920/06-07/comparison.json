{"files":[{"patch":"@@ -1114,1 +1114,1 @@\n-      FileMapInfo::fail_continue(\"The shared archive file version %d which is not current version %d\",\n+      FileMapInfo::fail_continue(\"The shared archive file version %d does not match the required version %d\",\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,3 @@\n-        CDSTestUtils.renameModulesFile(java_home_dst + File.separator + \"lib\", \"modules\", \"orig-modules\");\n+        String locDir = java_home_dst + File.separator + \"lib\";\n+        CDSTestUtils.rename(new File(locDir + File.separator + \"modules\"),\n+                            new File(locDir + File.separator + \"orig-modules\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/MoveJDKTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-        output.shouldContain(\"The shared archive file version \" + version + \" which is not current version \" + currentCDSArchiveVersion);\n+        output.shouldContain(\"The shared archive file version \" + version + \" does not match the required version \" + currentCDSArchiveVersion);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- *  (B) Test with the base archive is specified: -XX:SharedArchiveFile=<base>:<file>\n+ *  (B) Test with the base archive is specified: -XX:SharedArchiveFile=<base>:<top>\n@@ -91,1 +91,1 @@\n- * 23  mismatched jvm_indent in top archive\n+ * 23  mismatched jvm_indent in base\/top archive\n@@ -99,1 +99,1 @@\n- *     top archive will not be shared. No shared archive will be generated.\n+ *     top archive will not be shared if base archive failed to load.\n@@ -177,1 +177,1 @@\n-        print(\"    10.1 run with non-existing archive should automatically create dynamic archive\");\n+        print(\"    10.01 run with non-existing archive should automatically create dynamic archive\");\n@@ -196,2 +196,2 @@\n-        \/\/ 10.2 run with the created dynamic archive should pass\n-        print(\"    10.2 run with the created dynamic archive should pass\");\n+        \/\/10.02 run with the created dynamic archive should pass\n+        print(\"    10.02 run with the created dynamic archive should pass\");\n@@ -211,1 +211,1 @@\n-        \/\/ 10.3 run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\n+        \/\/ 10.03 run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\n@@ -213,1 +213,1 @@\n-        print(\"    10.3 run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\");\n+        print(\"    10.03 run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\");\n@@ -330,1 +330,1 @@\n-                      .shouldContain(\"The shared archive file version \" + version2 + \" which is not current version \" + currentCDSVersion)\n+                      .shouldContain(\"The shared archive file version \" + version2 + \" does not match the required version \" + currentCDSVersion)\n@@ -473,2 +473,2 @@\n-        \/\/ 20.03 run with -XX:SharedArchveFile=top:base\n-        print(\"    20.03 run with -XX:SharedArchveFile=top:base\");\n+        \/\/ 20.03 run with -XX:SharedArchveFile=base:top\n+        print(\"    20.03 run with -XX:SharedArchveFile=base:top\");\n@@ -486,2 +486,2 @@\n-        \/\/ 20.04 run with -XX:SharedArchveFile=base:top (reversed)\n-        print(\"    20.04 run with -XX:SharedArchveFile=base:top (reversed)\");\n+        \/\/ 20.04 run with -XX:SharedArchveFile=top:base (reversed)\n+        print(\"    20.04 run with -XX:SharedArchveFile=top:base (reversed)\");\n@@ -547,1 +547,1 @@\n-                 output.shouldContain(\"The shared archive file version \" + version2 + \" which is not current version \" + currentCDSVersion)\n+                 output.shouldContain(\"The shared archive file version \" + version2 + \" does not match the required version \" + currentCDSVersion)\n@@ -581,1 +581,1 @@\n-        \/\/ 23  mismatched jvm_indent in top archive\n+        \/\/ 23  mismatched jvm_indent in top or base archive\n@@ -583,1 +583,1 @@\n-        print(\"    23.01  mismatched jvm_indent in archive\");\n+        print(\"    23.01  mismatched jvm_indent in top archive\");\n@@ -610,2 +610,2 @@\n-        \/\/    23.02 mismatched jvm_indent in base archive -Xshare:auto -XX:SahredArchiveFile=base:top\n-        print(\"    23.02  mismatched jvm_indent in base archive, -Xshare:auto -XX:SahredArchiveFile=base:top\");\n+        \/\/    23.02 mismatched jvm_indent in base archive\n+        print(\"    23.02  mismatched jvm_indent in base archive\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -107,2 +107,3 @@\n-        CDSTestUtils.renameModulesFile(dstDir, \"classes.jsa\", \"old-classes.jsa\");\n-        System.out.println(\"======= renamed \" + dstDir + File.separator + \"classes.jsa to old-classes.jsa\");\n+        CDSTestUtils.rename(new File(dstDir + File.separator +  \"classes.jsa\"),\n+                            new File(dstDir + File.separator +  \"old-classes.jsa\"));\n+        System.out.println(\"======= renamed classes.jsa to old-classes.jsa\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveNoDefaultArchive.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -741,4 +741,3 @@\n-    public static void renameModulesFile(String modulesDir, String oldName, String newName) throws Exception {\n-        File origModules = new File(modulesDir, oldName);\n-        if (!origModules.exists()) {\n-            throw new RuntimeException(oldName + \" file not found\");\n+    public static void rename(File fromFile, File toFile) throws Exception {\n+        if (!fromFile.exists()) {\n+            throw new RuntimeException(fromFile.getName() + \" does not exist\");\n@@ -747,3 +746,2 @@\n-        File renamedModules = new File(modulesDir, newName);\n-        if (renamedModules.exists()) {\n-            throw new RuntimeException(newName + \" found unexpectedly\");\n+        if (toFile.exists()) {\n+            throw new RuntimeException(toFile.getName() + \" already exists\");\n@@ -752,1 +750,1 @@\n-        boolean success = origModules.renameTo(renamedModules);\n+        boolean success = fromFile.renameTo(toFile);\n@@ -754,1 +752,1 @@\n-            throw new RuntimeException(\"rename file \" + oldName + \" to \" + newName + \" failed\");\n+            throw new RuntimeException(\"rename file \" + fromFile.getName()+ \" to \" + toFile.getName() + \" failed\");\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}