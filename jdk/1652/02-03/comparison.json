{"files":[{"patch":"@@ -430,1 +430,1 @@\n-static enum CompileCommand parse_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n+static enum CompileCommand match_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n@@ -447,0 +447,19 @@\n+\/\/ match exactly and don't mess with errorbuf\n+enum CompileCommand CompilerOracle::parse_option_name(const char* line) {\n+  for (uint i = 0; i < ARRAY_SIZE(option_names); i++) {\n+    if (strcasecmp(line, option_names[i]) == 0) {\n+      return static_cast<enum CompileCommand>(i);\n+    }\n+  }\n+  return CompileCommand::Unknown;\n+}\n+\n+enum OptionType CompilerOracle::parse_option_type(const char* type_str) {\n+  for (uint i = 0; i < ARRAY_SIZE(optiontype_names); i++) {\n+    if (strcasecmp(type_str, optiontype_names[i]) == 0) {\n+      return static_cast<enum OptionType>(i);\n+    }\n+  }\n+  return OptionType::Unknown;\n+}\n+\n@@ -656,1 +675,1 @@\n-    enum CompileCommand option = parse_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n+    enum CompileCommand option = match_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n@@ -685,9 +704,0 @@\n-enum OptionType CompilerOracle::parse_option_type(const char* type_str) {\n-  for (uint i = 0; i < ARRAY_SIZE(optiontype_names); i++) {\n-    if (strcasecmp(type_str, optiontype_names[i]) == 0) {\n-      return static_cast<enum OptionType>(i);\n-    }\n-  }\n-  return OptionType::Unknown;\n-}\n-\n@@ -716,1 +726,1 @@\n-  enum CompileCommand option = parse_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n+  enum CompileCommand option = match_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n@@ -777,1 +787,1 @@\n-        enum CompileCommand option = parse_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n+        enum CompileCommand option = match_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n@@ -994,1 +1004,1 @@\n-  return parse_option_name(name, &bytes_read, errorbuf, sizeof(errorbuf));\n+  return match_option_name(name, &bytes_read, errorbuf, sizeof(errorbuf));\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -175,0 +175,4 @@\n+  \/\/ convert a string to a proper compilecommand option\n+  \/\/ returns CompileCommand::Unknown if name is not an option.\n+  static enum CompileCommand parse_option_name(const char* name);\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-        CompileCommand::Unknown != CompilerOracle::string_to_option(method_name)) &&\n+        CompileCommand::Unknown != CompilerOracle::parse_option_name(method_name)) &&\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,8 @@\n+\n+        \/\/-XX:CompileCommand=dontinline,*::dontinline_*  -version\n+        \/\/ corner case:\n+        \/\/ PrintIntrinsics could be a valid method name, so it is accepted in the well-formed case.\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n+                    .shouldContain(\"CompileCommand: PrintIntrinsics class.PrintIntrinsics bool PrintIntrinsics = true\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}