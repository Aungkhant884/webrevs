{"files":[{"patch":"@@ -430,1 +430,1 @@\n-static enum CompileCommand parse_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n+static enum CompileCommand match_option_name(const char* line, int* bytes_read, char* errorbuf, int bufsize) {\n@@ -447,0 +447,19 @@\n+\/\/ match exactly and don't mess with errorbuf\n+enum CompileCommand CompilerOracle::parse_option_name(const char* line) {\n+  for (uint i = 0; i < ARRAY_SIZE(option_names); i++) {\n+    if (strcasecmp(line, option_names[i]) == 0) {\n+      return static_cast<enum CompileCommand>(i);\n+    }\n+  }\n+  return CompileCommand::Unknown;\n+}\n+\n+enum OptionType CompilerOracle::parse_option_type(const char* type_str) {\n+  for (uint i = 0; i < ARRAY_SIZE(optiontype_names); i++) {\n+    if (strcasecmp(type_str, optiontype_names[i]) == 0) {\n+      return static_cast<enum OptionType>(i);\n+    }\n+  }\n+  return OptionType::Unknown;\n+}\n+\n@@ -656,1 +675,1 @@\n-    enum CompileCommand option = parse_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n+    enum CompileCommand option = match_option_name(option_buf, &bytes_read2, errorbuf, buf_size);\n@@ -685,9 +704,0 @@\n-enum OptionType parse_option_type(const char* type_str) {\n-  for (uint i = 0; i < ARRAY_SIZE(optiontype_names); i++) {\n-    if (strcasecmp(type_str, optiontype_names[i]) == 0) {\n-      return static_cast<enum OptionType>(i);\n-    }\n-  }\n-  return OptionType::Unknown;\n-}\n-\n@@ -716,1 +726,1 @@\n-  enum CompileCommand option = parse_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n+  enum CompileCommand option = match_option_name(line, &bytes_read, error_buf, sizeof(error_buf));\n@@ -777,1 +787,1 @@\n-        enum CompileCommand option = parse_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n+        enum CompileCommand option = match_option_name(option_type, &bytes_read, error_buf, sizeof(error_buf));\n@@ -994,1 +1004,1 @@\n-  return parse_option_name(name, &bytes_read, errorbuf, sizeof(errorbuf));\n+  return match_option_name(name, &bytes_read, errorbuf, sizeof(errorbuf));\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -174,0 +174,8 @@\n+\n+  \/\/ convert a string to a proper compilecommand option\n+  \/\/ returns CompileCommand::Unknown if name is not an option.\n+  static enum CompileCommand parse_option_name(const char* name);\n+\n+  \/\/ convert a string to a proper option type\n+  \/\/ returns OptionType::Unknown on strings not matching an option type.\n+  static enum OptionType parse_option_type(const char* type_str);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compilerOracle.hpp\"\n@@ -108,1 +109,0 @@\n-    bool in_signature = false;\n@@ -272,0 +272,13 @@\n+    \/\/ Over-consumption\n+    \/\/ method_name points to an option type or option name because the method name is not specified by users.\n+    \/\/ In very rare case, the method name happens to be same as option type\/name, so look ahead to make sure\n+    \/\/ it doesn't show up again.\n+    if ((OptionType::Unknown != CompilerOracle::parse_option_type(method_name) ||\n+        CompileCommand::Unknown != CompilerOracle::parse_option_name(method_name)) &&\n+        *(line + bytes_read) != '\\0' &&\n+        strstr(line + bytes_read, method_name) == NULL) {\n+      error_msg = \"Did not specify any method name\";\n+      method_name[0] = '\\0';\n+      return;\n+    }\n+\n@@ -277,0 +290,1 @@\n+\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257800\n+ * @summary Tests CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_id\n+ * @library \/test\/lib \/\n+ *\n+ * @run driver compiler.compilercontrol.commands.OptionTest\n+ *\/\n+\n+package compiler.compilercontrol.commands;\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class OptionTest {\n+    public static void main(String[] args) throws Exception {\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,package\/class,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"CompileCommand: An error occurred during parsing\")\n+                    .shouldContain(\"Error: Did not specify any method name\")\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldContain(\"CompileCommand: An error occurred during parsing\")\n+                    .shouldContain(\"Error: Did not specify any method name\")\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        \/\/ corner case:\n+        \/\/ ccstrlist could be a valid method name, so it is accepted in the well-formed case.\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.ccstrlist,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+                    .shouldContain(\"CompileCommand: ControlIntrinsic *.ccstrlist const char* ControlIntrinsic\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,*.*,ccstrlist,ControlIntrinsic,+_id\", \"-version\")\n+                    .shouldContain(\"CompileCommand: ControlIntrinsic *.* const char* ControlIntrinsic\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,class,PrintIntrinsics\", \"-version\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        \/\/ corner case:\n+        \/\/ PrintIntrinsics could be a valid method name, so it is accepted in the well-formed case.\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=option,class.PrintIntrinsics,PrintIntrinsics\", \"-version\")\n+                    .shouldContain(\"CompileCommand: PrintIntrinsics class.PrintIntrinsics bool PrintIntrinsics = true\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        \/\/ corner case:\n+        \/\/ _dontinline_* is a valid method pattern, so it should be accepted\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=dontinline,*::dontinline_*\", \"-version\")\n+                    .shouldContain(\"CompileCommand: dontinline *.dontinline_* bool dontinline = true\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+\n+        ProcessTools.executeTestJvm(\"-XX:CompileCommand=dontinline,*.dontinline\", \"-version\")\n+                    .shouldContain(\"CompileCommand: dontinline *.dontinline bool dontinline = true\")\n+                    .shouldHaveExitValue(0)\n+                    .shouldNotContain(\"Error: Did not specify any method name\")\n+                    .shouldNotContain(\"# A fatal error has been detected by the Java Runtime Environment\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/commands\/OptionTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}