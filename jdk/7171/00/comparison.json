{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.time.ZonedDateTime;\n@@ -169,0 +170,5 @@\n+    \/**\n+     * TRhe build date, to be recorded in generated files.\n+     *\/\n+    private Date buildDate;\n+\n@@ -218,0 +224,1 @@\n+\n@@ -226,1 +233,0 @@\n-    public final Date startTime = new Date();\n@@ -262,0 +268,4 @@\n+\n+        ZonedDateTime zdt = options.date();\n+        buildDate = zdt != null ? new Date(zdt.toEpochSecond() * 1000) : new Date();\n+\n@@ -282,0 +292,7 @@\n+    \/**\n+     * {@return the date to be recorded in generated files}\n+     *\/\n+    public Date getBuildDate() {\n+        return buildDate;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -455,1 +455,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.getBuildDate())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.getBuildDate())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexRedirectWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -235,1 +235,1 @@\n-        Head head = new Head(path, configuration.getDocletVersion(), configuration.startTime)\n+        Head head = new Head(path, configuration.getDocletVersion(), configuration.getBuildDate())\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SourceToHTMLConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,0 +172,6 @@\n+# 0: a date\n+doclet.Option_date_out_of_range=value for ''--date'' out of range: {0}\n+\n+# 0: a date\n+doclet.Option_date_not_valid=value for ''--date'' not valid: {0}\n+\n@@ -423,0 +429,6 @@\n+doclet.usage.date.parameters=\\\n+    <date-and-time>\n+doclet.usage.date.description=\\\n+    Specifies the value to be used to timestamp the generated\\n\\\n+    pages, in ISO_ZONED_DATE_TIME format\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,7 @@\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.time.temporal.ChronoUnit;\n+import java.time.temporal.TemporalUnit;\n@@ -35,0 +42,1 @@\n+import java.util.Calendar;\n@@ -85,0 +93,6 @@\n+    \/**\n+     * Argument for command-line option {@code --date}.\n+     * {@code null} if option not given.\n+     *\/\n+    private ZonedDateTime date;\n+\n@@ -341,0 +355,28 @@\n+                new XOption(resources, \"--date\", 1) {\n+                    \/\/ Valid --date range: within a year of now\n+                    private static final ZonedDateTime now = ZonedDateTime.now();\n+                    static final ZonedDateTime DATE_MIN = now.minusYears(1);\n+                    static final ZonedDateTime DATE_MAX = now.plusYears(1);\n+\n+                    @Override\n+                    public boolean process(String opt,  List<String> args) {\n+                        if (noTimestamp) {\n+                            messages.error(\"doclet.Option_conflict\", \"--date\", \"-notimestamp\");\n+                            return false;\n+                        }\n+                        String arg = args.get(0);\n+                        try {\n+                            date = ZonedDateTime.parse(arg, DateTimeFormatter.ISO_ZONED_DATE_TIME)\n+                                    .withZoneSameInstant(ZoneOffset.UTC);\n+                            if (date.isBefore(DATE_MIN) || date.isAfter(DATE_MAX)) {\n+                                messages.error(\"doclet.Option_date_out_of_range\", arg);\n+                                return false;\n+                            }\n+                            return true;\n+                        } catch (DateTimeParseException x) {\n+                            messages.error(\"doclet.Option_date_not_valid\", arg);\n+                            return false;\n+                        }\n+                    }\n+                },\n+\n@@ -474,0 +516,4 @@\n+                        if (date != null) {\n+                            messages.error(\"doclet.Option_conflict\", \"--date\", \"-notimestamp\");\n+                            return false;\n+                        }\n@@ -742,0 +788,7 @@\n+    \/**\n+     * Argument for command-line option {@code --date}.\n+     *\/\n+    public ZonedDateTime date() {\n+        return date;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseOptions.java","additions":54,"deletions":1,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8272984\n+ * @summary  javadoc support for SOURCE_DATE_EPOCH\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main TestDateOption\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.nio.file.Path;\n+import java.text.SimpleDateFormat;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestDateOption extends JavadocTester {\n+\n+    \/**\n+     * The entry point of the test.\n+     *\n+     * @param args the array of command line arguments\n+     * @throws Exception if the test fails\n+     *\/\n+    public static void main(String... args) throws Exception {\n+        TestDateOption tester = new TestDateOption();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testDateOption(Path base) throws Exception {\n+        Calendar c = Calendar.getInstance(); \/\/ uses current date, time, timezone etc\n+        \/\/ adjust the calendar to some date before the default used by javadoc (i.e. today)\n+        c.add(Calendar.DAY_OF_MONTH, -100);\n+        \/\/ set a specific time, such as 10 to 3. (Rupert Brooke, Grantchester)\n+        c.set(Calendar.HOUR, 2);\n+        c.set(Calendar.MINUTE, 50);\n+        c.set(Calendar.SECOND, 0);\n+        c.set(Calendar.AM_PM, Calendar.PM);\n+        Date testDate = c.getTime();\n+        out.println(\"Test Date: '\" + testDate + \"'\");\n+\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir, \"\"\"\n+                package p;\n+                \/** Comment. *\/\n+                public interface I { }\n+                \"\"\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"--date\", testDate.toInstant().toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        int featureVersion = Runtime.version().feature();\n+        String generatedByStamp = testDate.toString(); \/\/ matches what javadoc will use internally\n+        String generatedBy = String.format(\"<!-- Generated by javadoc (%d) on %s -->\",\n+                featureVersion, generatedByStamp);\n+\n+        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        String dcCreatedStamp = dateFormat.format(testDate);\n+        String dcCreated = String.format(\"\"\"\n+                        <meta name=\"dc.created\" content=\"%s\">\"\"\",\n+                dcCreatedStamp);\n+\n+        \/\/ check the timestamps in all generated HTML files\n+        for (Path file : tb.findFiles(\".html\", outputDir)) {\n+            checkOutput(outputDir.relativize(file).toString(), true,\n+                    generatedBy,\n+                    dcCreated);\n+        }\n+    }\n+\n+    @Test\n+    public void testBadDateOption(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir, \"\"\"\n+                package p;\n+                \/** Comment. *\/\n+                public interface I { }\n+                \"\"\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"--date\", \"NOT A DATE\",\n+                \"p\");\n+        checkExit(Exit.CMDERR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"error: value for '--date' not valid: NOT A DATE\");\n+    }\n+\n+    @Test\n+    public void testInvalidDateOption(Path base) throws Exception {\n+        Path srcDir = base.resolve(\"src\");\n+        tb.writeJavaFiles(srcDir, \"\"\"\n+                package p;\n+                \/** Comment. *\/\n+                public interface I { }\n+                \"\"\");\n+        Path outDir = base.resolve(\"out\");\n+\n+        javadoc(\"-d\", outDir.toString(),\n+                \"-sourcepath\", srcDir.toString(),\n+                \"--date\", new Date(0).toInstant().toString(),\n+                \"p\");\n+        checkExit(Exit.CMDERR);\n+\n+        checkOutput(Output.OUT, true,\n+                \"error: value for '--date' out of range: 1970-01-01T00:00:00Z\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDateOption\/TestDateOption.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,2 @@\n-                \"-Xdoclint:\");\n+                \"-Xdoclint:\",\n+                \"--date \");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testXOption\/TestXOption.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    List<String> MISSING_IN_MAN_PAGE = List.of();\n+    List<String> MISSING_IN_MAN_PAGE = List.of(\"--date\");\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckManPageOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}