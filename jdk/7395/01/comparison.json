{"files":[{"patch":"@@ -325,0 +325,8 @@\n+  \/\/ Convert \"(x|y)-(x^y)\" into \"x&y\"\n+  if (in(1)->Opcode() == Op_OrI\n+      && in(2)->Opcode() == Op_XorI\n+      && in(1)->in(1) == in(2)->in(1)\n+      && in(1)->in(2) == in(2)->in(2)) {\n+    return new AndINode(in(1)->in(1), in(1)->in(2));\n+  }\n+\n@@ -498,0 +506,8 @@\n+  \/\/ Convert \"(x|y)-(x^y)\" into \"x&y\"\n+  if (in(1)->Opcode() == Op_OrL\n+      && in(2)->Opcode() == Op_XorL\n+      && in(1)->in(1) == in(2)->in(1)\n+      && in(1)->in(2) == in(2)->in(2)) {\n+    return new AndLNode(in(1)->in(1), in(1)->in(2));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8281518\n+ * @summary Test that transformation from \"(x|y)-(x^y)\" to \"x&y\" works\n+ *          as intended.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestIRSubIdeal_XOrY_Minus_XXorY_\n+ *\/\n+public class TestIRSubIdeal_XOrY_Minus_XXorY_ {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.OR_I, IRNode.XOR_I, IRNode.SUB_I})\n+    @IR(counts = {IRNode.AND_I, \"1\"})\n+    public int testInt(int x, int y) {\n+        return (x | y) - (x ^ y); \/\/ transformed to x & y\n+    }\n+\n+    @Run(test = \"testInt\")\n+    public void checkTestInt(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(0x5050_A0A0, testInt(0x5A5A_A5A5, 0x5555_AAAA));\n+        Asserts.assertEquals(0x0000_0000, testInt(0x0000_0000, 0x0000_0000));\n+        Asserts.assertEquals(0xFFFF_FFFF, testInt(0xFFFF_FFFF, 0xFFFF_FFFF));\n+        Asserts.assertEquals(0x0000_0000, testInt(0xFFFF_FFFF, 0x0000_0000));\n+        Asserts.assertEquals(0x0000_0000, testInt(0x0000_0000, 0xFFFF_FFFF));\n+        Asserts.assertEquals(0x8000_0000, testInt(0x8000_0000, 0xFFFF_0000));\n+        Asserts.assertEquals(0x7FFF_FFFF, testInt(0x7FFF_FFFF, 0x7FFF_FFFF));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.OR_L, IRNode.XOR_L, IRNode.SUB_L})\n+    @IR(counts = {IRNode.AND_L, \"1\"})\n+    public long testLong(long x, long y) {\n+        return (x | y) - (x ^ y); \/\/ transformed to x & y\n+    }\n+\n+    @Run(test = \"testLong\")\n+    public void checkTestLong(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(0x5050_A0A0_0000_50A0L, testLong(0x5A5A_A5A5_5AA5_55AAL, 0x5555_AAAA_A55A_5AA5L));\n+        Asserts.assertEquals(0x0000_0000_0000_0000L, testLong(0x0000_0000_0000_0000L, 0x0000_0000_0000_0000L));\n+        Asserts.assertEquals(0xFFFF_FFFF_FFFF_FFFFL, testLong(0xFFFF_FFFF_FFFF_FFFFL, 0xFFFF_FFFF_FFFF_FFFFL));\n+        Asserts.assertEquals(0x0000_0000_0000_0000L, testLong(0xFFFF_FFFF_FFFF_FFFFL, 0x0000_0000_0000_0000L));\n+        Asserts.assertEquals(0x0000_0000_0000_0000L, testLong(0x0000_0000_0000_0000L, 0xFFFF_FFFF_FFFF_FFFFL));\n+        Asserts.assertEquals(0x8000_0000_0000_0000L, testLong(0x8000_0000_0000_0000L, 0xFFFF_0000_0000_0000L));\n+        Asserts.assertEquals(0x7FFF_FFFF_FFFF_FFFFL, testLong(0x7FFF_FFFF_FFFF_FFFFL, 0x7FFF_FFFF_FFFF_FFFFL));\n+    }\n+\n+    private void assertC2Compiled(RunInfo info) {\n+        \/\/ Test VM allows C2 to work\n+        Asserts.assertTrue(info.isC2CompilationEnabled());\n+        if (!info.isWarmUp()) {\n+            \/\/ C2 compilation happens\n+            Asserts.assertTrue(info.isTestC2Compiled());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRSubIdeal_XOrY_Minus_XXorY_.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -145,0 +145,2 @@\n+    public static final String OR_I = START + \"OrI\" + MID + END;\n+    public static final String OR_L = START + \"OrL\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformation that converts \"(x|y)-(x^y)\" into \"x&y\" in\n+ * SubINode:Ideal and SubLNode::Ideal.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 20, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3)\n+public class SubIdeal_XOrY_Minus_XXorY_ {\n+\n+    private int iX = 4711;\n+\n+    private int iY = 1174;\n+\n+    private long lX = 4711 * 4711 * 4711;\n+\n+    private long lY = 1174 * 1174 * 1174;\n+\n+    @Benchmark\n+    public void baselineInt(Blackhole bh) {\n+        bh.consume(iX);\n+    }\n+\n+    @Benchmark\n+    public void baselineLong(Blackhole bh) {\n+        bh.consume(lX);\n+    }\n+\n+    \/\/ Convert \"(x|y)-(x^y)\" into \"x&y\" for int.\n+    @Benchmark\n+    public void testInt(Blackhole bh) {\n+        bh.consume((iX | iY) - (iX ^ iY));\n+    }\n+\n+    \/\/ Convert \"(x|y)-(x^y)\" into \"x&y\" for long.\n+    @Benchmark\n+    public void testLong(Blackhole bh) {\n+        bh.consume((lX | lY) - (lX ^ lY));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SubIdeal_XOrY_Minus_XXorY_.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}