{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import static sun.nio.fs.UnixNativeDispatcher.unlink;\n@@ -48,4 +49,0 @@\n-    \/\/ whether file cloning is supported on this platform\n-    private static volatile boolean cloneFileNotSupported;\n-\n-\n@@ -90,3 +87,2 @@\n-     * @return 0 on success, IOStatus.UNSUPPORTED_CASE if the call does not work\n-     *         with the given parameters, or IOStatus.UNSUPPORTED if cloning is\n-     *         not supported on this platform\n+     * @return 0 on success, or IOStatus.UNSUPPORTED_CASE if the call\n+     *         does not work with the given parameters\n@@ -97,6 +93,0 @@\n-        \/\/ Do not attempt cloning if the source volume does not support it\n-        long options = followLinks ? 0 : FSOPT_NOFOLLOW;\n-        if ((BsdNativeDispatcher.getattrlist(src, options) &\n-            VOL_CAP_INT_CLONE) == 0)\n-            return IOStatus.UNSUPPORTED_CASE;\n-\n@@ -107,0 +97,5 @@\n+            \/\/ clone failed so roll back\n+            try {\n+                unlink(dst);\n+            } catch (UnixException ignore) { }\n+\n@@ -109,1 +104,0 @@\n-                    return IOStatus.UNSUPPORTED;\n@@ -137,4 +131,3 @@\n-        \/\/ Attempt to clone the source unless cloning is not supported,\n-        \/\/ cancellation is not possible, or attributes are not to be copied\n-        if (!cloneFileNotSupported && addressToPollForCancel == 0 &&\n-            flags.copyPosixAttributes) {\n+        \/\/ Attempt to clone the source unless cancellation is not possible,\n+        \/\/ or attributes are not to be copied\n+        if (addressToPollForCancel == 0 && flags.copyPosixAttributes) {\n@@ -154,4 +147,0 @@\n-            if (res == IOStatus.UNSUPPORTED) {\n-                cloneFileNotSupported = true;\n-            }\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -84,18 +84,0 @@\n-    \/**\n-     * int getattrlist(const char* path, struct attrlist* attrList,\n-     *                 void* attrBuf, size_t attrBufSize,\n-     *                 unsigned long options);\n-     *\/\n-    static int getattrlist(UnixPath path, long options)\n-    {\n-        try (NativeBuffer pathBuffer = copyToNativeBuffer(path)) {\n-            long comp = Blocker.begin();\n-            try {\n-                return getattrlist0(pathBuffer.address(), options);\n-            } finally {\n-                Blocker.end(comp);\n-            }\n-        }\n-    }\n-    private static native int getattrlist0(long pathAddress, long options);\n-\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdNativeDispatcher.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include <unistd.h>\n@@ -247,29 +246,0 @@\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_fs_BsdNativeDispatcher_getattrlist0(JNIEnv* env, jclass this,\n-    jlong pathAddress, jlong options)\n-{\n-    const char* path = (const char*)jlong_to_ptr(pathAddress);\n-\n-    struct attrlist alist;\n-    bzero(&alist, sizeof(alist));\n-    alist.bitmapcount = ATTR_BIT_MAP_COUNT;\n-    alist.volattr     = ATTR_VOL_INFO | ATTR_VOL_CAPABILITIES;\n-\n-    struct volAttrsBuf {\n-        u_int32_t length;\n-        vol_capabilities_attr_t capabilities;\n-    } __attribute__((aligned(4), packed));\n-    struct volAttrsBuf volAttrs;\n-    bzero(&volAttrs, sizeof(volAttrs));\n-\n-    if (getattrlist(path, &alist, &volAttrs, sizeof(volAttrs), options) == 0) {\n-        vol_capabilities_attr_t volCaps = volAttrs.capabilities;\n-        int index = VOL_CAPABILITIES_INTERFACES;\n-        int caps = volCaps.valid[index] & volCaps.capabilities[index];\n-        if (caps & VOL_CAP_INT_ATTRLIST)\n-            return caps;\n-    }\n-\n-    return 0;\n-}\n-\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/BsdNativeDispatcher.c","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -156,4 +156,0 @@\n-    \/\/ flags used with getattrlist\n-    static final int PREFIX_VOL_CAPABILITIES_INTERFACES = VOL_CAPABILITIES_INTERFACES;\n-    static final int PREFIX_VOL_CAP_INT_CLONE = VOL_CAP_INT_CLONE;\n-\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixConstants.java.template","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}