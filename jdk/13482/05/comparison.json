{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -863,1 +863,1 @@\n-                throw new FileSystemException(getString(path), \"is a directory\", null);\n+                throw new FileSystemException(getString(path), null, \"is a directory\");\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8305945\n+ * @summary Validate that Zip FS provides the correct exception message when an\n+ * attempt is made to obtain an InputStream from a directory entry\n+ * @modules jdk.zipfs\n+ * @run junit ZipFSDirectoryExceptionMessageTest\n+ *\/\n+public class ZipFSDirectoryExceptionMessageTest {\n+    \/**\n+     * Name of Directory created within the Zip file\n+     *\/\n+    public static final String DIRECTORY_NAME = \"folder\/\";\n+    \/**\n+     * The expected error message\n+     *\/\n+    public static final String DIR_EXCEPTION_MESSAGE = \"\/folder: is a directory\";\n+    \/**\n+     * Zip file to create\n+     *\/\n+    public static final Path ZIP_FILE = Path.of(\"directoryExceptionTest.zip\");\n+\n+    \/**\n+     * Create a Zip file which contains a single directory entry\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeEach\n+    public void setup() throws IOException {\n+        var ze = new ZipEntry(DIRECTORY_NAME);\n+        ze.setMethod(ZipEntry.STORED);\n+        ze.setCompressedSize(0);\n+        ze.setSize(0);\n+        ze.setCrc(0);\n+        try (ZipOutputStream zos = new ZipOutputStream(\n+                Files.newOutputStream(ZIP_FILE))) {\n+            zos.putNextEntry(ze);\n+        }\n+    }\n+\n+    \/**\n+     * Delete the Zip file used by the test\n+     * @throws IOException If an error occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(ZIP_FILE);\n+    }\n+\n+    \/**\n+     * Validate that Zip FS returns the correct Exception message when\n+     * attempting to obtain an InputStream from a path representing a directory\n+     * and the FileSystemException::getOtherfile returns null\n+     *\n+     * @throws IOException If an error occurs\n+     *\/\n+    @Test\n+    public void testException() throws IOException {\n+        try (FileSystem zipfs = FileSystems.newFileSystem(ZIP_FILE)) {\n+            var file = zipfs.getPath(DIRECTORY_NAME);\n+            var x = assertThrows(FileSystemException.class, () -> Files.newInputStream(file));\n+            \/\/ validate that other file should be null\n+            assertNull(x.getOtherFile());\n+            assertEquals(DIR_EXCEPTION_MESSAGE, x.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSDirectoryExceptionMessageTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}