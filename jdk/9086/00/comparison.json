{"files":[{"patch":"@@ -463,2 +463,1 @@\n-    NOT_LP64(__ get_thread(thread);)\n-    __ dec_held_monitor_count(thread);\n+    __ dec_held_monitor_count();\n@@ -3519,11 +3518,1 @@\n-#ifndef _LP64\n-    Register thread = rsi;\n-    __ push(thread);\n-    __ get_thread(thread);\n-#else\n-    Register thread = r15_thread;\n-#endif\n-    __ inc_held_monitor_count(thread);\n-#ifndef _LP64\n-    __ pop(thread);\n-#endif\n+    __ inc_held_monitor_count();\n@@ -3534,11 +3523,1 @@\n-#ifndef _LP64\n-    Register thread = rsi;\n-    __ push(thread);\n-    __ get_thread(thread);\n-#else\n-    Register thread = r15_thread;\n-#endif\n-    __ dec_held_monitor_count(thread);\n-#ifndef _LP64\n-    __ pop(thread);\n-#endif\n+    __ dec_held_monitor_count();\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1067,2 +1067,1 @@\n-  NOT_LP64(get_thread(rthread);)\n-  dec_held_monitor_count(rthread);\n+  dec_held_monitor_count();\n@@ -1114,2 +1113,1 @@\n-      NOT_LP64(get_thread(rthread);)\n-      dec_held_monitor_count(rthread);\n+      dec_held_monitor_count();\n@@ -1176,1 +1174,1 @@\n-  pop_cont_fastpath(rthread);\n+  pop_cont_fastpath();\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2836,1 +2836,1 @@\n-void MacroAssembler::push_cont_fastpath(Register java_thread) {\n+void MacroAssembler::push_cont_fastpath() {\n@@ -2838,0 +2838,18 @@\n+\n+#ifndef _LP64\n+  Register rthread = rax;\n+  Register rrealsp = rbx;\n+  push(rthread);\n+  push(rrealsp);\n+\n+  get_thread(rthread);\n+\n+  \/\/ The code below wants the original RSP.\n+  \/\/ Move it back after the pushes above.\n+  movptr(rrealsp, rsp);\n+  addptr(rrealsp, 2*wordSize);\n+#else\n+  Register rthread = r15_thread;\n+  Register rrealsp = rsp;\n+#endif\n+\n@@ -2839,1 +2857,1 @@\n-  cmpptr(rsp, Address(java_thread, JavaThread::cont_fastpath_offset()));\n+  cmpptr(rrealsp, Address(rthread, JavaThread::cont_fastpath_offset()));\n@@ -2841,1 +2859,1 @@\n-  movptr(Address(java_thread, JavaThread::cont_fastpath_offset()), rsp);\n+  movptr(Address(rthread, JavaThread::cont_fastpath_offset()), rrealsp);\n@@ -2843,0 +2861,5 @@\n+\n+#ifndef _LP64\n+  pop(rrealsp);\n+  pop(rthread);\n+#endif\n@@ -2845,1 +2868,1 @@\n-void MacroAssembler::pop_cont_fastpath(Register java_thread) {\n+void MacroAssembler::pop_cont_fastpath() {\n@@ -2847,0 +2870,18 @@\n+\n+#ifndef _LP64\n+  Register rthread = rax;\n+  Register rrealsp = rbx;\n+  push(rthread);\n+  push(rrealsp);\n+\n+  get_thread(rthread);\n+\n+  \/\/ The code below wants the original RSP.\n+  \/\/ Move it back after the pushes above.\n+  movptr(rrealsp, rsp);\n+  addptr(rrealsp, 2*wordSize);\n+#else\n+  Register rthread = r15_thread;\n+  Register rrealsp = rsp;\n+#endif\n+\n@@ -2848,1 +2889,1 @@\n-  cmpptr(rsp, Address(java_thread, JavaThread::cont_fastpath_offset()));\n+  cmpptr(rrealsp, Address(rthread, JavaThread::cont_fastpath_offset()));\n@@ -2850,1 +2891,1 @@\n-  movptr(Address(java_thread, JavaThread::cont_fastpath_offset()), 0);\n+  movptr(Address(rthread, JavaThread::cont_fastpath_offset()), 0);\n@@ -2852,0 +2893,5 @@\n+\n+#ifndef _LP64\n+  pop(rrealsp);\n+  pop(rthread);\n+#endif\n@@ -2854,1 +2900,1 @@\n-void MacroAssembler::inc_held_monitor_count(Register java_thread) {\n+void MacroAssembler::inc_held_monitor_count() {\n@@ -2856,1 +2902,14 @@\n-  incrementl(Address(java_thread, JavaThread::held_monitor_count_offset()));\n+\n+#ifndef _LP64\n+  Register thread = rax;\n+  push(thread);\n+  get_thread(thread);\n+#else\n+  Register thread = r15_thread;\n+#endif\n+\n+  incrementl(Address(thread, JavaThread::held_monitor_count_offset()));\n+\n+#ifndef _LP64\n+  pop(thread);\n+#endif\n@@ -2859,1 +2918,1 @@\n-void MacroAssembler::dec_held_monitor_count(Register java_thread) {\n+void MacroAssembler::dec_held_monitor_count() {\n@@ -2861,1 +2920,14 @@\n-  decrementl(Address(java_thread, JavaThread::held_monitor_count_offset()));\n+\n+#ifndef _LP64\n+  Register thread = rax;\n+  push(thread);\n+  get_thread(thread);\n+#else\n+  Register thread = r15_thread;\n+#endif\n+\n+  decrementl(Address(thread, JavaThread::held_monitor_count_offset()));\n+\n+#ifndef _LP64\n+  pop(thread);\n+#endif\n@@ -2864,2 +2936,16 @@\n-void MacroAssembler::reset_held_monitor_count(Register java_thread) {\n-  movl(Address(java_thread, JavaThread::held_monitor_count_offset()), (int32_t)0);\n+void MacroAssembler::reset_held_monitor_count() {\n+  if (!Continuations::enabled()) return;\n+\n+#ifndef _LP64\n+  Register thread = rax;\n+  push(thread);\n+  get_thread(thread);\n+#else\n+  Register thread = r15_thread;\n+#endif\n+\n+  movl(Address(thread, JavaThread::held_monitor_count_offset()), (int32_t)0);\n+\n+#ifndef _LP64\n+  pop(thread);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -527,5 +527,5 @@\n-  void push_cont_fastpath(Register java_thread);\n-  void pop_cont_fastpath(Register java_thread);\n-  void inc_held_monitor_count(Register java_thread);\n-  void dec_held_monitor_count(Register java_thread);\n-  void reset_held_monitor_count(Register java_thread);\n+  void push_cont_fastpath();\n+  void pop_cont_fastpath();\n+  void inc_held_monitor_count();\n+  void dec_held_monitor_count();\n+  void reset_held_monitor_count();\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -944,1 +944,1 @@\n-  __ push_cont_fastpath(r15_thread); \/\/ Set JavaThread::_cont_fastpath to the sp of the oldest interpreted frame we know about\n+  __ push_cont_fastpath(); \/\/ Set JavaThread::_cont_fastpath to the sp of the oldest interpreted frame we know about\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-    __ pop_cont_fastpath(r15_thread);\n+    __ pop_cont_fastpath();\n@@ -8341,1 +8341,1 @@\n-  __ reset_held_monitor_count(r15_thread);\n+  __ reset_held_monitor_count();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -370,2 +370,0 @@\n-  const Register rthread = NOT_LP64(rcx) LP64_ONLY(r15_thread);\n-\n@@ -373,2 +371,1 @@\n-  NOT_LP64(__ get_thread(rthread);)\n-  __ push_cont_fastpath(rthread);\n+  __ push_cont_fastpath();\n@@ -376,2 +373,1 @@\n-  NOT_LP64(__ get_thread(rthread);)\n-  __ pop_cont_fastpath(rthread);\n+  __ pop_cont_fastpath();\n@@ -612,3 +608,1 @@\n-  Register rthread = NOT_LP64(rax) LP64_ONLY(r15_thread);\n-  NOT_LP64(__ get_thread(rthread);)\n-  __ inc_held_monitor_count(rthread);\n+  __ inc_held_monitor_count();\n@@ -669,1 +663,0 @@\n-#ifdef _LP64\n@@ -673,4 +666,1 @@\n-  \/\/ __ movl(c_rarg1, Address(rsp, wordSize)); \/\/ scopes\n-  const Register thread1 = NOT_LP64(rdi) LP64_ONLY(r15_thread);\n-  NOT_LP64(__ get_thread(thread1));\n-  __ push_cont_fastpath(thread1);\n+  __ push_cont_fastpath();\n@@ -682,5 +672,0 @@\n-#else\n-  \/\/ Not implemented. Allow startup of legacy Java code that does not touch\n-  \/\/ Continuation.doYield yet. Throw AbstractMethodError on access.\n-  return generate_abstract_entry();\n-#endif\n@@ -1282,2 +1267,1 @@\n-      NOT_LP64(__ get_thread(thread);)\n-      __ dec_held_monitor_count(thread);\n+      __ dec_held_monitor_count();\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2595,1 +2595,1 @@\n-    __ push_cont_fastpath(NOT_LP64(thread) LP64_ONLY(r15_thread));\n+    __ push_cont_fastpath();\n@@ -2598,2 +2598,1 @@\n-    NOT_LP64(__ get_thread(thread);)\n-    __ pop_cont_fastpath(NOT_LP64(thread) LP64_ONLY(r15_thread));\n+    __ pop_cont_fastpath();\n@@ -4368,3 +4367,1 @@\n-  Register rthread = LP64_ONLY(r15_thread) NOT_LP64(rbx);\n-  NOT_LP64(__ get_thread(rthread);)\n-  __ inc_held_monitor_count(rthread);\n+  __ inc_held_monitor_count();\n@@ -4431,3 +4428,1 @@\n-  Register rthread = LP64_ONLY(r15_thread) NOT_LP64(rax);\n-  NOT_LP64(__ get_thread(rthread);)\n-  __ dec_held_monitor_count(rthread);\n+  __ dec_held_monitor_count();\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"}]}