{"files":[{"patch":"@@ -595,1 +595,15 @@\n-    offset = timezone;\n+    struct tm localtm;\n+    time_t clock;\n+\n+    clock = time(NULL);\n+    if (localtime_r(&clock, &localtm) == NULL) {\n+        return strdup(\"GMT\");\n+    }\n+\n+    struct tm gmt;\n+\n+    if (gmtime_r(&clock, &gmt) == NULL) {\n+        return strdup(\"GMT\");\n+    }\n+\n+    offset = (gmt.tm_hour - localtm.tm_hour)*3600 + (gmt.tm_min - localtm.tm_min)*60;\n","filename":"src\/java.base\/unix\/native\/libjava\/TimeZone_md.c","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Specifically called by runCustomTzIDCheckDST.sh to check if Daylight savings is\n+ * properly followed with a custom TZ code set through environment variables.\n+ * *\/\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.time.Month;\n+import java.time.DayOfWeek;\n+import java.time.ZonedDateTime;\n+import java.time.temporal.TemporalAdjusters;\n+import java.text.SimpleDateFormat;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+public class CustomTzIDCheckDST {\n+    public static void main(String args[]) {\n+        Calendar calendar = Calendar.getInstance();\n+        Date time = calendar.getTime();\n+        int month = time.getMonth();\n+        ZonedDateTime date = ZonedDateTime.ofInstant(time.toInstant(), ZoneId.systemDefault());\n+\n+        \/* TZ code will always be set to \"MEZ-1MESZ,M3.5.0,M10.5.0\" via invoking shell script.\n+         * This ensures the transition periods for Daylights Savings should be at March's last\n+         * Sunday and October's last Sunday.\n+         *\/\n+        if ((month > Month.MARCH.getValue() && month < Month.OCTOBER.getValue()) ||\n+                (month == Month.MARCH.getValue() && date.isAfter(getLastSundayOfMonth(date))) ||\n+                (month == Month.OCTOBER.getValue() && date.isBefore(getLastSundayOfMonth(date)))) {\n+            \/\/ We are in Daylight savings period.\n+            if (time.toString().endsWith(\"GMT+02:00 \" + Integer.toString(calendar.getTime().getYear() + 1900)))\n+                return;\n+        } else {\n+            if (time.toString().endsWith(\"GMT+01:00 \" + Integer.toString(calendar.getTime().getYear() + 1900)))\n+                return;\n+        }\n+\n+        \/\/ Reaching here means time zone did not match up as expected.\n+        throw new RuntimeException(\"Got unexpected timezone information: \" + time);\n+    }\n+\n+    private static ZonedDateTime getLastSundayOfMonth(ZonedDateTime date) {\n+        return date.with(TemporalAdjusters.lastInMonth(DayOfWeek.SUNDAY));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/TimeZone\/CustomTzIDCheckDST.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+#\n+# Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# @test\n+# @bug 8285838\n+# @summary This test checks to ensure that daylight savings rules are followed \n+# appropriately when setting a custom timezone ID via the TZ env variable.\n+# @requires os.family != \"windows\"\n+# @run shell runCustomTzIDCheckDST.sh\n+\n+if [ \"${TESTSRC}\" = \"\" ]\n+then\n+  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n+  exit 1\n+fi\n+\n+. ${TESTROOT}\/javax\/script\/CommonSetup.sh\n+\n+OS=`uname -s`\n+case \"$OS\" in \n+  Linux | AIX )\n+    TEST=CustomTzIDCheckDST\n+\n+    export TZ=\"MEZ-1MESZ,M3.5.0,M10.5.0\"\n+\n+    ${JAVAC} ${TESTVMOPTS} -d ${TESTCLASSES}\/ ${TESTSRC}\/${TEST}.java\n+    ${JAVA} ${TESTVMOPTS} -classpath ${TESTCLASSES} ${TEST}\n+\n+    ret=$?\n+    if [ $ret -ne 0 ]\n+    then\n+      exit $ret\n+    fi\n+  ;;\n+esac\n+\n","filename":"test\/jdk\/java\/util\/TimeZone\/runCustomTzIDCheckDST.sh","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}