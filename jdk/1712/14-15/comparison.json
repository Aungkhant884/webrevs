{"files":[{"patch":"@@ -1800,5 +1800,10 @@\n-                        String option  = t.nextToken();\n-                        gzlevel = parseHeapDumpCompressionLevel(option);\n-                        if (gzlevel <= 0 || gzlevel > 9) {\n-                            usage();\n-                            return;\n+                        String option = t.nextToken();\n+                        if (!option.startsWith(\"gz=\")) {\n+                            filename = option;\n+                        } else {\n+                            gzlevel = parseHeapDumpCompressionLevel(option);\n+                            if (gzlevel <= 0 || gzlevel > 9) {\n+                                usage();\n+                                return;\n+                            }\n+                            filename = \"heap.bin.gz\";\n@@ -1806,1 +1811,0 @@\n-                        filename = \"heap.bin.gz\";\n@@ -1809,0 +1813,6 @@\n+                        if (gzlevel == 0) {\n+                            \/\/ The first option is not compression level, it is parsed as filename.\n+                            err.println(\"unknown option: \" + filename);\n+                            usage();\n+                            return;\n+                        }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -128,4 +128,3 @@\n-        System.out.println(\"    --binaryheap            To dump java heap in hprof binary format.\");\n-        System.out.println(\"        dump options:\");\n-        System.out.println(\"          --dumpfile <name> The name of the dump file.\");\n-        System.out.println(\"          --gz <1-9>        The compression level for gzipped dump file.\");\n+        System.out.println(\"    --binaryheap            To dump java heap in hprof binary format. Only valid with --binaryheap.\");\n+        System.out.println(\"    --dumpfile <name>       The name of the dump file. Only valid with --binaryheap.\");\n+        System.out.println(\"    --gz <1-9>              The compression level for gzipped dump file.\");\n@@ -497,0 +496,2 @@\n+            \/\/ Exit with error status\n+            System.exit(1);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/SALauncher.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1406,0 +1406,3 @@\n+                \/\/ The case that nothing has been written in segment.\n+                if (segmentWritten == 0) return;\n+                \/\/ There must be more data than just header size written for non-empty segment.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/HeapHprofBinWriter.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-               if (compress_level == null || compress_level.length() == 0) {\n+               if (compress_level == null) {\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jmap\/JMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-\n+    private static final String SUCCESS_STRING = \"heap written to\";\n@@ -58,1 +58,1 @@\n-    public static void launch(String expectedMessage, List<String> toolArgs)\n+    public static void launch(int expectedExitValue, List<String> toolArgs)\n@@ -84,3 +84,6 @@\n-            output.shouldContain(expectedMessage);\n-            output.shouldHaveExitValue(0);\n-\n+            output.shouldHaveExitValue(expectedExitValue);\n+            if (expectedExitValue == 0) {\n+                output.shouldContain(SUCCESS_STRING);\n+            } else {\n+                output.stdoutShouldNotContain(SUCCESS_STRING);\n+            }\n@@ -94,1 +97,1 @@\n-    public static void launch(String expectedMessage, String... toolArgs)\n+    public static void launch(int expectedExitValue, String... toolArgs)\n@@ -96,2 +99,1 @@\n-\n-        launch(expectedMessage, Arrays.asList(toolArgs));\n+        launch(expectedExitValue, Arrays.asList(toolArgs));\n@@ -111,1 +113,5 @@\n-    public static void testHeapDump() throws IOException {\n+    public static void testHeapDump(SubTest subtest) throws IOException {\n+        String gzOption = subtest.getGzOption();\n+        boolean checkSuccess = subtest.needCheckSuccess();\n+        int expectedExitValue = checkSuccess ? 0 : 1;\n+\n@@ -117,0 +123,7 @@\n+        if (gzOption == null || gzOption.length() == 0) {\n+            launch(expectedExitValue, \"jmap\",\n+                   \"--binaryheap\", \"--dumpfile=\" + dump.getAbsolutePath());\n+        } else {\n+            launch(expectedExitValue, \"jmap\",\n+                   \"--binaryheap\", gzOption, \"--dumpfile=\" + dump.getAbsolutePath());\n+        }\n@@ -118,7 +131,3 @@\n-        launch(\"heap written to\", \"jmap\",\n-               \"--binaryheap\", \"--dumpfile=\" + dump.getAbsolutePath());\n-\n-        assertTrue(dump.exists() && dump.isFile(),\n-                   \"Could not create dump file \" + dump.getAbsolutePath());\n-\n-        printStackTraces(dump.getAbsolutePath());\n+        if (checkSuccess) {\n+            assertTrue(dump.exists() && dump.isFile(),\n+                       \"Could not create dump file \" + dump.getAbsolutePath());\n@@ -126,1 +135,5 @@\n-        dump.delete();\n+            printStackTraces(dump.getAbsolutePath());\n+            dump.delete();\n+        } else {\n+            assertTrue(!dump.exists(), \"Unexpected file created: \" + dump.getAbsolutePath());\n+        }\n@@ -131,2 +144,13 @@\n-        testHeapDump();\n-\n+        SubTest[] subtests = new SubTest[] {\n+                new SubTest(\"\", true\/*checkSuccess*\/),\n+                new SubTest(\"--gz=1\", true),\n+                new SubTest(\"--gz=9\", true),\n+                new SubTest(\"--gz=0\", false),\n+                new SubTest(\"--gz=100\", false),\n+                new SubTest(\"--gz=\", false),\n+                new SubTest(\"--gz\", false),\n+        };\n+        \/\/ Run subtests\n+        for (int i = 0; i < subtests.length;i++) {\n+            testHeapDump(subtests[i]);\n+        }\n@@ -138,0 +162,13 @@\n+\n+    private static class SubTest {\n+        private String gzOption;\n+        boolean needCheckSuccess;\n+\n+        public SubTest(String gzOpt, boolean checkSuccess) {\n+            gzOption = gzOpt;\n+            needCheckSuccess = checkSuccess;\n+        }\n+\n+        public String getGzOption() { return gzOption; }\n+        public boolean needCheckSuccess() { return needCheckSuccess; }\n+    }\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/HeapDumpTest.java","additions":57,"deletions":20,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -121,1 +121,0 @@\n-        testDumpIllegalCompressedArgs();\n@@ -234,7 +233,0 @@\n-    private static void testDumpIllegalCompressedArgs() throws Exception{\n-        dump(true, false, true, \"0\", 1, \"Compression level out of range\");\n-        dump(true, false, true, \"100\", 1, \"Compression level out of range\");\n-        dump(true, false, true, \"abc\", 1, \"Invalid compress level\");\n-        dump(true, false, true, \"\", 1, \"Fail: no number provided in option:\");\n-    }\n-\n@@ -242,9 +234,0 @@\n-        dump(live, explicitAll, compressed, \"1\", 0, \"Heap dump file created\");\n-    }\n-\n-    private static void dump(boolean live,\n-                             boolean explicitAll,\n-                             boolean compressed,\n-                             String compressLevel,\n-                             int expExitValue,\n-                             String expOutput) throws Exception {\n@@ -268,1 +251,1 @@\n-            compressArg = \"gz=\" + compressLevel;\n+            compressArg = \"gz=1,\";\n@@ -276,1 +259,1 @@\n-        fileArg = \"file=\" + file.getName() + \",\";\n+        fileArg = \"file=\" + file.getName();\n@@ -279,1 +262,1 @@\n-        allArgs = allArgs + liveArg + \"format=b,\" + fileArg + compressArg;\n+        allArgs = allArgs + liveArg + compressArg + \"format=b,\" + fileArg;\n@@ -281,5 +264,3 @@\n-        output.shouldHaveExitValue(expExitValue);\n-        output.shouldContain(expOutput);\n-        if (expExitValue == 0) {\n-            verifyDumpFile(file);\n-        }\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"Heap dump file created\");\n+        verifyDumpFile(file);\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"}]}