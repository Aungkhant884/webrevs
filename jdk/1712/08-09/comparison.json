{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1777,1 +1777,2 @@\n-                if (t.countTokens() > 2) {\n+                int cntTokens = t.countTokens();\n+                if (cntTokens > 2) {\n@@ -1783,1 +1784,2 @@\n-                    int cntTokens = t.countTokens();\n+                    \/\/ When cntTokens is zero, use default filename.\n+                    \/\/ Handle with cntTokens = 1 or 2.\n@@ -1787,1 +1789,1 @@\n-                         * possible command:\n+                         * Possible command:\n@@ -1793,1 +1795,1 @@\n-                            \/* first argument is compression level, second is filename *\/\n+                            \/* First argument is compression level, second is filename *\/\n@@ -1804,1 +1806,1 @@\n-                            \/\/ Try to parse \"gz=\" option, if failed, treat it as filename\n+                            \/\/ Try to parse \"gz=\" option. If failed, treat it as filename\n@@ -1810,1 +1812,1 @@\n-                                      \/\/ compression level not in range.\n+                                      \/\/ Compression level not in range.\n@@ -2096,2 +2098,3 @@\n-     * @return  0 compress level is out of range\n-     *          1 compress level can not be parsed as number\n+     * @return   1-9    compression level\n+     *           0      compression level is out of range\n+     *          -1      compression level can not be parsed as number\n@@ -2119,1 +2122,1 @@\n-            err.println(\"Unknow option \\\"\" + option + \"\\\"\");\n+            err.println(\"Unknown option \\\"\" + option + \"\\\"\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/SALauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,4 @@\n+                            if (mode == MODE_HEAP_GRAPH_GXL) {\n+                                System.err.println(\"\\\"gz\\\" option is not compatible with heap dump in GXL format\");\n+                                System.exit(1);\n+                            }\n@@ -166,4 +170,0 @@\n-                            if (mode == MODE_HEAP_GRAPH_GXL) {\n-                                System.err.println(\"\\\"gz\\\" option is not compatible with heap dump in GXL format\");\n-                                System.exit(1);\n-                            }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/JMap.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -400,1 +400,0 @@\n-        GZIPOutputStream gzipOut = null;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/HeapHprofBinWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.util.zip.GZIPInputStream;\n@@ -49,2 +48,3 @@\n-    private static final String kHeapDumpFileNameDefault = \"heap.bin\";\n-    private static final String kHeapDumpFileNameGzDefault = \"heap.bin.gz\";\n+    \/\/ The default heap dump file name defined in JDK.\n+    private static final String HEAP_DUMP_FILENAME_DEFAULT = \"heap.bin\";\n+    private static final String HEAP_DUMP_GZIPED_FILENAME_DEFAULT = \"heap.bin.gz\";\n@@ -64,1 +64,1 @@\n-    private static void verifyDumpFile(File dump, boolean compression) throws Exception {\n+    private static void verifyDumpFile(File dump) throws Exception {\n@@ -66,20 +66,1 @@\n-        if (!compression) {\n-            printStackTraces(dump.getAbsolutePath());\n-            return;\n-        } else {\n-            String deCompressedFile = \"SAdump\" + System.currentTimeMillis() + \".hprof\";\n-            File out = new File(deCompressedFile);\n-            try {\n-                GZIPInputStream gis = new GZIPInputStream(new FileInputStream(dump));\n-                FileOutputStream fos = new FileOutputStream(out);\n-                byte[] buffer = new byte[1 << 20];\n-                int len = 0;\n-                while ((len = gis.read(buffer)) > 0) {\n-                    fos.write(buffer, 0, len);\n-                }\n-            } catch (Exception e) {\n-                throw new RuntimeException(\"Can not decompress the compressed hprof file\");\n-            }\n-            printStackTraces(out.getAbsolutePath());\n-            out.delete();\n-        }\n+        printStackTraces(dump.getAbsolutePath());\n@@ -95,1 +76,1 @@\n-        public SubTest(String comm, String fName, String expected, boolean isComp, boolean verify) {\n+        public SubTest(String comm, String fName, boolean isComp, boolean verify, String expected) {\n@@ -120,1 +101,1 @@\n-                expectedFileName = kHeapDumpFileNameDefault;\n+                expectedFileName = HEAP_DUMP_FILENAME_DEFAULT;\n@@ -122,1 +103,1 @@\n-                expectedFileName = kHeapDumpFileNameGzDefault;\n+                expectedFileName = HEAP_DUMP_GZIPED_FILENAME_DEFAULT;\n@@ -137,1 +118,1 @@\n-            verifyDumpFile(file, compression);\n+            verifyDumpFile(file);\n@@ -147,1 +128,1 @@\n-            \/\/ Use file name different with JDK's default value \"heapdump.bin\".\n+            \/\/ Use file name different with JDK's default value \"heap.bin\".\n@@ -156,30 +137,28 @@\n-                    new SubTest(\"dumpheap \", heapDumpFileName,\n-                            \"heap written to \" + heapDumpFileName, false\/*compression*\/, true\/*verify*\/),\n-                    new SubTest(\"dumpheap gz=1 \", heapDumpFileNameGz,\n-                            \"heap written to \" + heapDumpFileNameGz, true, true),\n-                    new SubTest(\"dumpheap gz=9 \", heapDumpFileNameGz,\n-                            \"heap written to \" + heapDumpFileNameGz, true, true),\n-                    new SubTest(\"dumpheap gz=0 \", heapDumpFileNameGz,\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    new SubTest(\"dumpheap gz=100 \", heapDumpFileNameGz,\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    new SubTest(\"dumpheap gz= \", heapDumpFileNameGz,\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    new SubTest(\"dumpheap gz \", heapDumpFileNameGz,\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    new SubTest(\"dumpheap\", \"\",\n-                            \"heap written to \" + kHeapDumpFileNameDefault, false, true),\n-                    new SubTest(\"dumpheap gz=1\", \"\",\n-                            \"heap written to \" + kHeapDumpFileNameGzDefault, true, true),\n-                    new SubTest(\"dumpheap gz=9\", \"\",\n-                            \"heap written to \" + kHeapDumpFileNameGzDefault, true, true),\n-                    new SubTest(\"dumpheap gz=0\", \"\",\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    new SubTest(\"dumpheap gz=100\", \"\",\n-                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\", true, false),\n-                    \/\/ command \"dumpheap gz=\"\n-                    new SubTest(\"dumpheap \", \"gz=\",\n-                            \"heap written to gz=\", false, true),\n-                    \/\/ command \"dumpheap gz\"\n-                    new SubTest(\"dumpheap \", \"gz\",\n-                            \"heap written to gz\", false, true)\n+                    new SubTest(\"dumpheap \", heapDumpFileName, false\/*compression*\/, true,\/*verify*\/\n+                            \"heap written to \" + heapDumpFileName),\n+                    new SubTest(\"dumpheap gz=1 \", heapDumpFileNameGz, true, true,\n+                            \"heap written to \" + heapDumpFileNameGz),\n+                    new SubTest(\"dumpheap gz=9 \", heapDumpFileNameGz, true, true,\n+                            \"heap written to \" + heapDumpFileNameGz),\n+                    new SubTest(\"dumpheap gz=0 \", heapDumpFileNameGz, true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    new SubTest(\"dumpheap gz=100 \", heapDumpFileNameGz, true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    new SubTest(\"dumpheap gz= \", heapDumpFileNameGz, true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    new SubTest(\"dumpheap gz \", heapDumpFileNameGz, true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    new SubTest(\"dumpheap\", \"\", false, true,\n+                            \"heap written to \" + HEAP_DUMP_FILENAME_DEFAULT),\n+                    new SubTest(\"dumpheap gz=1\", \"\", true, true,\n+                            \"heap written to \" + HEAP_DUMP_GZIPED_FILENAME_DEFAULT),\n+                    new SubTest(\"dumpheap gz=9\", \"\", true, true,\n+                            \"heap written to \" + HEAP_DUMP_GZIPED_FILENAME_DEFAULT),\n+                    new SubTest(\"dumpheap gz=0\", \"\", true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    new SubTest(\"dumpheap gz=100\", \"\", true, false,\n+                            \"Usage: dumpheap \\\\[gz=<1-9>\\\\] \\\\[filename\\\\]\"),\n+                    \/\/ Command \"dumpheap gz=\"\n+                    new SubTest(\"dumpheap \", \"gz=\", false, true, \"heap written to gz=\"),\n+                    \/\/ Command \"dumpheap gz\"\n+                    new SubTest(\"dumpheap \", \"gz\", false, true, \"heap written to gz\")\n@@ -187,1 +166,1 @@\n-\n+            \/\/ Run subtests\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbDumpheap.java","additions":40,"deletions":61,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.zip.GZIPInputStream;\n@@ -145,0 +146,29 @@\n+            } else if ((i >>> 8) == 0x1f8b08) {\n+                \/\/ Possible gziped file.\n+                in.close();\n+                String deCompressedFile = \"heapdump\" + System.currentTimeMillis() + \".hprof\";\n+                File out = new File(deCompressedFile);\n+                try {\n+                    \/\/GZIPOutputStream\n+                    GZIPInputStream gis = new GZIPInputStream(new FileInputStream(heapFile));\n+                    FileOutputStream fos = new FileOutputStream(out);\n+                    byte[] buffer = new byte[1 << 20];\n+                    int len = 0;\n+                    while ((len = gis.read(buffer)) > 0) {\n+                        fos.write(buffer, 0, len);\n+                    }\n+\n+                    PositionDataInputStream in2 = new PositionDataInputStream(\n+                        new BufferedInputStream(new FileInputStream(out)));\n+                    i = in2.readInt();\n+                    if (i == HprofReader.MAGIC_NUMBER) {\n+                        HprofReader r\n+                            = new HprofReader(deCompressedFile, in2, dumpNumber,\n+                                              true, debugLevel);\n+                        r.read();\n+                        return r.printStackTraces();\n+                    }\n+                } catch (Exception e) {\n+                    throw new IOException(\"Can not decompress the compressed hprof file\");\n+                }\n+                out.delete();\n@@ -149,0 +179,1 @@\n+        return null;\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/parser\/Reader.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}