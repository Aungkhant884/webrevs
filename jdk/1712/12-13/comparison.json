{"files":[{"patch":"@@ -1792,0 +1792,1 @@\n+                     *     dumpheap\n@@ -1803,0 +1804,7 @@\n+                        \/\/ Don't accept filename that start with \"gz=\" to avoid case like\n+                        \/\/ \"dumpheap gz=1 gz=2\"\n+                        if (filename.startsWith(\"gz=\")) {\n+                            err.println(\"Illegal filename \\\" + filename + \\\" should not start with \\\"gz=\\\".\");\n+                            usage();\n+                            return;\n+                        }\n@@ -1809,2 +1817,2 @@\n-                                 usage();\n-                                 return;\n+                                usage();\n+                                return;\n@@ -1815,7 +1823,0 @@\n-                    \/\/ Don't accept filename that start with \"gz=\" to avoid case like\n-                    \/\/ \"dumpheap gz=1 gz=2\"\n-                    if (filename.startsWith(\"gz=\")) {\n-                        err.println(\"Illegal filename \\\" + filename + \\\" should not start with \\\"gz=\\\".\");\n-                        usage();\n-                        return;\n-                    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        return \"-heap|-heap:format=b[,gz=<1-9>]|-histo|-clstats|-finalizerinfo\";\n+        return \"-heap|-heap:format=b[,gz=<1-9>][,file=<dumpfile>]|-heap:format=x[,file=<dumpfile>]|{-histo|-clstats|-finalizerinfo\";\n@@ -59,6 +59,6 @@\n-        System.out.println(\"    -heap:format=b[,gz=<1-9>]\\tTo dump java heap in hprof binary format.\");\n-        System.out.println(\"                             \\tIf gz specified, the heap dump is written\");\n-        System.out.println(\"                             \\tin gzipped format using the given compression level.\");\n-        System.err.println(\"                             \\t1 (recommended) is the fastest, 9 the strongest compression.\");\n-        System.out.println(\"    -heap:format=x           \\tTo dump java heap in GXL format.\");\n-        System.out.println(\"                             \\tPlease be aware that \\\"gz\\\" option is not valid for heap dump in GXL format.\");\n+        System.out.println(\"    -heap:format=b[,gz=<1-9>][,file=<dumpfile>]  \\tTo dump java heap in hprof binary format.\");\n+        System.out.println(\"                                                 \\tIf gz specified, the heap dump is written\");\n+        System.out.println(\"                                                 \\tin gzipped format using the given compression level.\");\n+        System.err.println(\"                                                 \\t1 (recommended) is the fastest, 9 the strongest compression.\");\n+        System.out.println(\"    -heap:format=x[,file=<dumpfile>]             \\tTo dump java heap in GXL format.\");\n+        System.out.println(\"                                                 \\tPlease be aware that \\\"gz\\\" option is not valid for heap dump in GXL format.\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/JMap.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-               if (compress_level == null) {\n+               if (compress_level == null || compress_level.length() == 0) {\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jmap\/JMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,0 +121,1 @@\n+        testDumpIllegalCompressedArgs();\n@@ -233,0 +234,7 @@\n+    private static void testDumpIllegalCompressedArgs() throws Exception{\n+        dump(true, false, true, \"0\", 1, \"Compression level out of range\");\n+        dump(true, false, true, \"100\", 1, \"Compression level out of range\");\n+        dump(true, false, true, \"abc\", 1, \"Invalid compress level\");\n+        dump(true, false, true, \"\", 1, \"Fail: no number provided in option:\");\n+    }\n+\n@@ -234,0 +242,9 @@\n+        dump(live, explicitAll, compressed, \"1\", 0, \"Heap dump file created\");\n+    }\n+\n+    private static void dump(boolean live,\n+                             boolean explicitAll,\n+                             boolean compressed,\n+                             String compressLevel,\n+                             int expExitValue,\n+                             String expOutput) throws Exception {\n@@ -251,1 +268,1 @@\n-            compressArg = \"gz=1,\";\n+            compressArg = \"gz=\" + compressLevel;\n@@ -259,1 +276,1 @@\n-        fileArg = \"file=\" + file.getName();\n+        fileArg = \"file=\" + file.getName() + \",\";\n@@ -262,1 +279,1 @@\n-        allArgs = allArgs + liveArg + compressArg + \"format=b,\" + fileArg;\n+        allArgs = allArgs + liveArg + \"format=b,\" + fileArg + compressArg;\n@@ -264,3 +281,5 @@\n-        output.shouldHaveExitValue(0);\n-        output.shouldContain(\"Heap dump file created\");\n-        verifyDumpFile(file);\n+        output.shouldHaveExitValue(expExitValue);\n+        output.shouldContain(expOutput);\n+        if (expExitValue == 0) {\n+            verifyDumpFile(file);\n+        }\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"}]}