{"files":[{"patch":"@@ -65,1 +65,1 @@\n-static bool commute(Node *add, bool con_left, bool con_right) {\n+static bool commute(PhaseGVN* phase, Node* add) {\n@@ -69,0 +69,25 @@\n+  \/\/ convert \"max(a,b) + min(a,b)\" into \"a+b\".\n+  if ((in1->Opcode() == add->as_Add()->max_opcode() && in2->Opcode() == add->as_Add()->min_opcode())\n+      || (in1->Opcode() == add->as_Add()->min_opcode() && in2->Opcode() == add->as_Add()->max_opcode())) {\n+    Node *in11 = in1->in(1);\n+    Node *in12 = in1->in(2);\n+\n+    Node *in21 = in2->in(1);\n+    Node *in22 = in2->in(2);\n+\n+    if ((in11 == in21 && in12 == in22) ||\n+        (in11 == in22 && in12 == in21)) {\n+      add->set_req(1, in11);\n+      add->set_req(2, in22);\n+      PhaseIterGVN* igvn = phase->is_IterGVN();\n+      if (igvn) {\n+        igvn->_worklist.push(in1);\n+        igvn->_worklist.push(in2);\n+      }\n+      return true;\n+    }\n+  }\n+\n+  bool con_left = phase->type(in1)->singleton();\n+  bool con_right = phase->type(in2)->singleton();\n+\n@@ -118,1 +143,1 @@\n-  if (commute(this, con_left, con_right)) return this;\n+  if (commute(phase, this)) return this;\n@@ -552,3 +577,1 @@\n-  return commute(this,\n-                 phase->type( in(1) )->singleton(),\n-                 phase->type( in(2) )->singleton() ) ? this : NULL;\n+  return commute(phase, this) ? this : NULL;\n@@ -589,3 +612,1 @@\n-  return commute(this,\n-                 phase->type( in(1) )->singleton(),\n-                 phase->type( in(2) )->singleton() ) ? this : NULL;\n+  return commute(phase, this) ? this : NULL;\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -71,0 +71,6 @@\n+  \/\/ Supplied function to return the additive opcode\n+  virtual int max_opcode() const = 0;\n+\n+  \/\/ Supplied function to return the multiplicative opcode\n+  virtual int min_opcode() const = 0;\n+\n@@ -87,0 +93,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -105,0 +113,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -125,0 +135,2 @@\n+  int max_opcode() const { return Op_MaxF; }\n+  int min_opcode() const { return Op_MinF; }\n@@ -140,0 +152,2 @@\n+  int max_opcode() const { return Op_MaxD; }\n+  int min_opcode() const { return Op_MinD; }\n@@ -186,0 +200,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -201,0 +217,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -215,0 +233,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -228,0 +248,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -244,0 +266,2 @@\n+  virtual int max_opcode() const = 0;\n+  virtual int min_opcode() const = 0;\n@@ -283,0 +307,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -296,0 +322,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -309,0 +337,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -321,0 +351,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -333,0 +365,2 @@\n+  int max_opcode() const { return Op_MaxF; }\n+  int min_opcode() const { return Op_MinF; }\n@@ -345,0 +379,2 @@\n+  int max_opcode() const { return Op_MaxF; }\n+  int min_opcode() const { return Op_MinF; }\n@@ -357,0 +393,2 @@\n+  int max_opcode() const { return Op_MaxD; }\n+  int min_opcode() const { return Op_MinD; }\n@@ -369,0 +407,2 @@\n+  int max_opcode() const { return Op_MaxD; }\n+  int min_opcode() const { return Op_MinD; }\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,25 @@\n+\n+  \/\/ convert \"max(a,b) * min(a,b)\" into \"a*b\".\n+  Node *in1 = in(1);\n+  Node *in2 = in(2);\n+  if ((in(1)->Opcode() == max_opcode() && in(2)->Opcode() == min_opcode())\n+      || (in(1)->Opcode() == min_opcode() && in(2)->Opcode() == max_opcode())) {\n+    Node *in11 = in(1)->in(1);\n+    Node *in12 = in(1)->in(2);\n+\n+    Node *in21 = in(2)->in(1);\n+    Node *in22 = in(2)->in(2);\n+\n+    if ((in11 == in21 && in12 == in22) ||\n+        (in11 == in22 && in12 == in21)) {\n+      set_req(1, in11);\n+      set_req(2, in22);\n+      PhaseIterGVN* igvn = phase->is_IterGVN();\n+      if (igvn) {\n+        igvn->_worklist.push(in1);\n+        igvn->_worklist.push(in2);\n+      }\n+      progress = this;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,5 @@\n+  \/\/ Supplied function to return the additive opcode\n+  virtual int max_opcode() const = 0;\n+\n+  \/\/ Supplied function to return the multiplicative opcode\n+  virtual int min_opcode() const = 0;\n@@ -92,0 +97,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -108,0 +115,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n@@ -124,0 +133,2 @@\n+  int max_opcode() const { return Op_MaxF; }\n+  int min_opcode() const { return Op_MinF; }\n@@ -139,0 +150,2 @@\n+  int max_opcode() const { return Op_MaxD; }\n+  int min_opcode() const { return Op_MinD; }\n@@ -168,0 +181,2 @@\n+  int max_opcode() const { return Op_MaxI; }\n+  int min_opcode() const { return Op_MinI; }\n@@ -185,0 +200,2 @@\n+  int max_opcode() const { return Op_MaxL; }\n+  int min_opcode() const { return Op_MinL; }\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}