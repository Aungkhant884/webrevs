{"files":[{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode({Mode.AverageTime})\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Thread)\n+public class MaxMinOptimizeTest {\n+    private static final int COUNT = 100000;\n+\n+    private float[] floats_a = new float[COUNT];\n+    private float[] floats_b = new float[COUNT];\n+    private double[] doubles_a = new double[COUNT];\n+    private double[] doubles_b = new double[COUNT];\n+\n+    private Random r = new Random();\n+\n+    @Setup\n+    public void init() {\n+        for (int i=0; i<COUNT; i++) {\n+            floats_a[i] = r.nextFloat();\n+            floats_b[i] = r.nextFloat();\n+            doubles_a[i] = r.nextDouble();\n+            doubles_b[i] = r.nextDouble();\n+        }\n+    }\n+\n+    @Benchmark\n+    public void fAdd(Blackhole bh) {\n+        float sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += fAddBench(floats_a[i], floats_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void fMul(Blackhole bh) {\n+        float sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += fMulBench(floats_a[i], floats_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void fMax(Blackhole bh) {\n+        float sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += fMaxBench(floats_a[i], floats_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void fMin(Blackhole bh) {\n+        float sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += fMinBench(floats_a[i], floats_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    private float fAddBench(float a, float b) {\n+        return Math.max(a, b) + Math.min(a, b);\n+    }\n+\n+    private float fMulBench(float a, float b) {\n+        return Math.max(a, b) * Math.min(a, b);\n+    }\n+\n+    private float fMaxBench(float a, float b) {\n+        return Math.max(Math.max(a, b), Math.min(a, b));\n+    }\n+\n+    private float fMinBench(float a, float b) {\n+        return Math.min(Math.max(a, b), Math.min(a, b));\n+    }\n+\n+\n+    @Benchmark\n+    public void dAdd(Blackhole bh) {\n+        double sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += dAddBench(doubles_a[i], doubles_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void dMul(Blackhole bh) {\n+        double sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += dMulBench(doubles_a[i], doubles_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void dMax(Blackhole bh) {\n+        double sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += dMaxBench(doubles_a[i], doubles_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    @Benchmark\n+    public void dMin(Blackhole bh) {\n+        double sum = 0;\n+        for (int i=0; i<COUNT; i++)\n+            sum += dMinBench(doubles_a[i], doubles_b[i]);\n+        bh.consume(sum);\n+    }\n+\n+    private double dAddBench(double a, double b) {\n+        return Math.max(a, b) + Math.min(a, b);\n+    }\n+\n+    private double dMulBench(double a, double b) {\n+        return Math.max(a, b) * Math.min(a, b);\n+    }\n+\n+    private double dMaxBench(double a, double b) {\n+        return Math.max(Math.max(a, b), Math.min(a, b));\n+    }\n+\n+    private double dMinBench(double a, double b) {\n+        return Math.min(Math.max(a, b), Math.min(a, b));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MaxMinOptimizeTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"}]}