{"files":[{"patch":"@@ -252,5 +252,0 @@\n-#if INCLUDE_JVMCI\n-  if (task->is_blocking() && CompileBroker::compiler(task->comp_level())->is_jvmci()) {\n-    task->set_jvmci_compiler_thread(thread);\n-  }\n-#endif\n@@ -280,1 +275,1 @@\n-        task->set_jvmci_compiler_thread(NULL);\n+        task->set_blocking_jvmci_compile_state(NULL);\n@@ -1607,1 +1602,2 @@\n-  int methods_compiled = jvmci->methods_compiled();\n+  jint thread_jvmci_compilation_ticks = 0;\n+  jint global_jvmci_compilation_ticks = jvmci->global_compilation_ticks();\n@@ -1610,1 +1606,1 @@\n-    CompilerThread* jvmci_compiler_thread = task->jvmci_compiler_thread();\n+    JVMCICompileState* jvmci_compile_state = task->blocking_jvmci_compile_state();\n@@ -1613,4 +1609,5 @@\n-    if (jvmci_compiler_thread != NULL) {\n-      \/\/ If the JVMCI compiler thread is not blocked or suspended, we deem it to be making progress.\n-      progress = jvmci_compiler_thread->thread_state() != _thread_blocked &&\n-        !jvmci_compiler_thread->is_external_suspend();\n+    if (jvmci_compile_state != NULL) {\n+      jint ticks = jvmci_compile_state->compilation_ticks();\n+      progress = (ticks - thread_jvmci_compilation_ticks) != 0;\n+      JVMCI_event_1(\"waiting on compilation %d [ticks=%d]\", task->compile_id(), ticks);\n+      thread_jvmci_compilation_ticks = ticks;\n@@ -1619,2 +1616,2 @@\n-      \/\/ that all JVMCI compiler threads are blocked on. We use the counter for\n-      \/\/ successful JVMCI compilations to determine whether JVMCI compilation\n+      \/\/ that all JVMCI compiler threads are blocked on. We use the global JVMCI\n+      \/\/ compilation ticks to determine whether JVMCI compilation\n@@ -1622,1 +1619,4 @@\n-      progress = jvmci->methods_compiled() != methods_compiled;\n+      jint ticks = jvmci->global_compilation_ticks();\n+      progress = (ticks - global_jvmci_compilation_ticks) != 0;\n+      JVMCI_event_1(\"waiting on compilation %d to be queued [ticks=%d]\", task->compile_id(), ticks);\n+      global_jvmci_compilation_ticks = ticks;\n@@ -1630,0 +1630,1 @@\n+        JVMCI_event_1(\"waiting on compilation %d timed out\", task->compile_id());\n@@ -1634,3 +1635,0 @@\n-      if (jvmci_compiler_thread == NULL) {\n-        methods_compiled = jvmci->methods_compiled();\n-      }\n@@ -2155,1 +2153,1 @@\n-    JVMCICompileState compile_state(task);\n+    JVMCICompileState compile_state(task, jvmci);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-  JVMCI_ONLY(_jvmci_compiler_thread = NULL;)\n+  JVMCI_ONLY(_blocking_jvmci_compile_state = NULL;)\n","filename":"src\/hotspot\/share\/compiler\/compileTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+JVMCI_ONLY(class JVMCICompileState;)\n+\n@@ -84,2 +86,2 @@\n-  \/\/ Compiler thread for a blocking JVMCI compilation\n-  CompilerThread* _jvmci_compiler_thread;\n+  \/\/ Compilation state for a blocking JVMCI compilation\n+  JVMCICompileState* _blocking_jvmci_compile_state;\n@@ -147,5 +149,3 @@\n-  CompilerThread* jvmci_compiler_thread() const  { return _jvmci_compiler_thread; }\n-  void         set_jvmci_compiler_thread(CompilerThread* t) {\n-    assert(is_blocking(), \"must be\");\n-    assert((t == NULL) != (_jvmci_compiler_thread == NULL), \"must be\");\n-    _jvmci_compiler_thread = t;\n+  JVMCICompileState* blocking_jvmci_compile_state() const { return _blocking_jvmci_compile_state; }\n+  void         set_blocking_jvmci_compile_state(JVMCICompileState* state) {\n+    _blocking_jvmci_compile_state = state;\n","filename":"src\/hotspot\/share\/compiler\/compileTask.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"compiler\/compileTask.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"jvmci\/jvmciEnv.hpp\"\n@@ -126,0 +128,12 @@\n+JavaThread* JVMCI::compilation_tick(JavaThread* thread) {\n+  if (thread->is_Compiler_thread()) {\n+    CompileTask *task = thread->as_CompilerThread()->task();\n+    if (task != NULL) {\n+      JVMCICompileState *state = task->blocking_jvmci_compile_state();\n+      if (state != NULL) {\n+        state->inc_compilation_ticks();\n+      }\n+    }\n+  }\n+  return thread;\n+}\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -113,0 +113,5 @@\n+  \/\/ Increments a value indicating some JVMCI compilation activity\n+  \/\/ happened on `thread` if it is a CompilerThread.\n+  \/\/ Returns `thread`.\n+  static JavaThread* compilation_tick(JavaThread* thread);\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+  _global_compilation_ticks = 0;\n@@ -157,0 +158,9 @@\n+\n+void JVMCICompiler::inc_methods_compiled() {\n+  Atomic::inc(&_methods_compiled);\n+  Atomic::inc(&_global_compilation_ticks);\n+}\n+\n+void JVMCICompiler::inc_global_compilation_ticks() {\n+  Atomic::inc(&_global_compilation_ticks);\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+  \/\/ Incremented periodically by JVMCI compiler threads\n+  \/\/ to indicate JVMCI compilation activity.\n+  volatile int _global_compilation_ticks;\n+\n@@ -102,4 +106,2 @@\n-  \/**\n-   * Gets the number of methods that have been successfully compiled by\n-   * a call to JVMCICompiler::compile_method().\n-   *\/\n+  \/\/ Gets the number of methods that have been successfully compiled by\n+  \/\/ a call to JVMCICompiler::compile_method().\n@@ -107,0 +109,1 @@\n+  void inc_methods_compiled();\n@@ -108,3 +111,5 @@\n-  void inc_methods_compiled() {\n-    Atomic::inc(&_methods_compiled);\n-  }\n+  \/\/ Gets a value indicating JVMCI compilation activity on any thread.\n+  \/\/ If successive calls to this method return a different value, then\n+  \/\/ some degree of JVMCI compilation occurred between the calls.\n+  int global_compilation_ticks() const { return _global_compilation_ticks; }\n+  void inc_global_compilation_ticks();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  JNI_JVMCIENV(thread, env);\n+  JNI_JVMCIENV(JVMCI::compilation_tick(thread), env);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"jvmci\/jvmciCompiler.hpp\"\n@@ -41,1 +42,1 @@\n-JVMCICompileState::JVMCICompileState(CompileTask* task):\n+JVMCICompileState::JVMCICompileState(CompileTask* task, JVMCICompiler* compiler):\n@@ -43,0 +44,1 @@\n+  _compiler(compiler),\n@@ -54,0 +56,14 @@\n+  if (task->is_blocking()) {\n+    task->set_blocking_jvmci_compile_state(this);\n+  }\n+}\n+\n+\/\/ Update global JVMCI compilation ticks after 512 thread-local JVMCI compilation ticks.\n+\/\/ This mitigates the overhead of the atomic operation used for the global update.\n+#define THREAD_TICKS_PER_GLOBAL_TICKS (2 << 9)\n+#define THREAD_TICKS_PER_GLOBAL_TICKS_MASK (THREAD_TICKS_PER_GLOBAL_TICKS - 1)\n+\n+void JVMCICompileState::inc_compilation_ticks() {\n+  if ((++_compilation_ticks & THREAD_TICKS_PER_GLOBAL_TICKS_MASK) == 0) {\n+    _compiler->inc_global_compilation_ticks();\n+  }\n@@ -622,0 +638,1 @@\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -623,1 +640,0 @@\n-    Thread* THREAD = Thread::current();\n@@ -637,1 +653,1 @@\n-    JNIAccessMark jni(this);\n+    JNIAccessMark jni(this, THREAD);\n@@ -650,0 +666,1 @@\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -651,1 +668,0 @@\n-    Thread* THREAD = Thread::current();\n@@ -657,1 +673,1 @@\n-    JNIAccessMark jni(this);\n+    JNIAccessMark jni(this, THREAD);\n@@ -683,1 +699,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -700,1 +716,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -717,1 +733,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -736,1 +752,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -760,1 +776,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -784,1 +800,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -807,1 +823,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -888,1 +904,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -991,1 +1007,1 @@\n-  Thread* THREAD = Thread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -1007,1 +1023,1 @@\n-    JNIAccessMark jni(this);\n+    JNIAccessMark jni(this, THREAD);\n@@ -1034,1 +1050,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n@@ -1073,1 +1089,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+  JavaThread* THREAD = JVMCI::compilation_tick(JavaThread::current());\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":33,"deletions":17,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+  JVMCICompiler*   _compiler;\n@@ -116,0 +117,5 @@\n+  \/\/ A value indicating compilation activity during the compilation.\n+  \/\/ If successive calls to this method return a different value, then\n+  \/\/ some degree of JVMCI compilation occurred between the calls.\n+  jint             _compilation_ticks;\n+\n@@ -117,1 +123,1 @@\n-  JVMCICompileState(CompileTask* task);\n+  JVMCICompileState(CompileTask* task, JVMCICompiler* compiler);\n@@ -138,0 +144,3 @@\n+\n+  jint compilation_ticks() const { return _compilation_ticks; }\n+  void inc_compilation_ticks();\n@@ -287,1 +296,1 @@\n-  \/\/ Compiles a method with the JVMIC compiler.\n+  \/\/ Compiles a method with the JVMCI compiler.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+  nonstatic_field(JVMCICompileState,           _compilation_ticks,                            jint)                                  \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}