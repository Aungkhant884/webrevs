{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/assembler_ppc.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRGenerator_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c2_MacroAssembler_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/c2_init_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"runtime\/vm_version.hpp\"\n@@ -211,0 +212,46 @@\n+void Assembler::init_attributes(void) {\n+  _legacy_mode_bw = (VM_Version::supports_avx512bw() == false);\n+  _legacy_mode_dq = (VM_Version::supports_avx512dq() == false);\n+  _legacy_mode_vl = (VM_Version::supports_avx512vl() == false);\n+  _legacy_mode_vlbw = (VM_Version::supports_avx512vlbw() == false);\n+  NOT_LP64(_is_managed = false;)\n+  _attributes = NULL;\n+}\n+\n+\n+void Assembler::membar(Membar_mask_bits order_constraint) {\n+  \/\/ We only have to handle StoreLoad\n+  if (order_constraint & StoreLoad) {\n+    \/\/ All usable chips support \"locked\" instructions which suffice\n+    \/\/ as barriers, and are much faster than the alternative of\n+    \/\/ using cpuid instruction. We use here a locked add [esp-C],0.\n+    \/\/ This is conveniently otherwise a no-op except for blowing\n+    \/\/ flags, and introducing a false dependency on target memory\n+    \/\/ location. We can't do anything with flags, but we can avoid\n+    \/\/ memory dependencies in the current method by locked-adding\n+    \/\/ somewhere else on the stack. Doing [esp+C] will collide with\n+    \/\/ something on stack in current method, hence we go for [esp-C].\n+    \/\/ It is convenient since it is almost always in data cache, for\n+    \/\/ any small C.  We need to step back from SP to avoid data\n+    \/\/ dependencies with other things on below SP (callee-saves, for\n+    \/\/ example). Without a clear way to figure out the minimal safe\n+    \/\/ distance from SP, it makes sense to step back the complete\n+    \/\/ cache line, as this will also avoid possible second-order effects\n+    \/\/ with locked ops against the cache line. Our choice of offset\n+    \/\/ is bounded by x86 operand encoding, which should stay within\n+    \/\/ [-128; +127] to have the 8-byte displacement encoding.\n+    \/\/\n+    \/\/ Any change to this code may need to revisit other places in\n+    \/\/ the code where this idiom is used, in particular the\n+    \/\/ orderAccess code.\n+\n+    int offset = -VM_Version::L1_line_size();\n+    if (offset < -128) {\n+      offset = -128;\n+    }\n+\n+    lock();\n+    addl(Address(rsp, offset), 0);\/\/ Assert the lock# signal here\n+  }\n+}\n+\n@@ -10542,0 +10589,7 @@\n+\n+void InstructionAttr::set_address_attributes(int tuple_type, int input_size_in_bits) {\n+  if (VM_Version::supports_evex()) {\n+    _tuple_type = tuple_type;\n+    _input_size_in_bits = input_size_in_bits;\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"runtime\/vm_version.hpp\"\n@@ -899,8 +898,1 @@\n-  void init_attributes(void) {\n-    _legacy_mode_bw = (VM_Version::supports_avx512bw() == false);\n-    _legacy_mode_dq = (VM_Version::supports_avx512dq() == false);\n-    _legacy_mode_vl = (VM_Version::supports_avx512vl() == false);\n-    _legacy_mode_vlbw = (VM_Version::supports_avx512vlbw() == false);\n-    NOT_LP64(_is_managed = false;)\n-    _attributes = NULL;\n-  }\n+  void init_attributes(void);\n@@ -1450,35 +1442,1 @@\n-  void membar(Membar_mask_bits order_constraint) {\n-    \/\/ We only have to handle StoreLoad\n-    if (order_constraint & StoreLoad) {\n-      \/\/ All usable chips support \"locked\" instructions which suffice\n-      \/\/ as barriers, and are much faster than the alternative of\n-      \/\/ using cpuid instruction. We use here a locked add [esp-C],0.\n-      \/\/ This is conveniently otherwise a no-op except for blowing\n-      \/\/ flags, and introducing a false dependency on target memory\n-      \/\/ location. We can't do anything with flags, but we can avoid\n-      \/\/ memory dependencies in the current method by locked-adding\n-      \/\/ somewhere else on the stack. Doing [esp+C] will collide with\n-      \/\/ something on stack in current method, hence we go for [esp-C].\n-      \/\/ It is convenient since it is almost always in data cache, for\n-      \/\/ any small C.  We need to step back from SP to avoid data\n-      \/\/ dependencies with other things on below SP (callee-saves, for\n-      \/\/ example). Without a clear way to figure out the minimal safe\n-      \/\/ distance from SP, it makes sense to step back the complete\n-      \/\/ cache line, as this will also avoid possible second-order effects\n-      \/\/ with locked ops against the cache line. Our choice of offset\n-      \/\/ is bounded by x86 operand encoding, which should stay within\n-      \/\/ [-128; +127] to have the 8-byte displacement encoding.\n-      \/\/\n-      \/\/ Any change to this code may need to revisit other places in\n-      \/\/ the code where this idiom is used, in particular the\n-      \/\/ orderAccess code.\n-\n-      int offset = -VM_Version::L1_line_size();\n-      if (offset < -128) {\n-        offset = -128;\n-      }\n-\n-      lock();\n-      addl(Address(rsp, offset), 0);\/\/ Assert the lock# signal here\n-    }\n-  }\n+  void membar(Membar_mask_bits order_constraint);\n@@ -2628,6 +2586,1 @@\n-  void set_address_attributes(int tuple_type, int input_size_in_bits) {\n-    if (VM_Version::supports_evex()) {\n-      _tuple_type = tuple_type;\n-      _input_size_in_bits = input_size_in_bits;\n-    }\n-  }\n+  void set_address_attributes(int tuple_type, int input_size_in_bits);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":4,"deletions":51,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/c2_init_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1116,0 +1116,2 @@\n+#include \"runtime\/vm_version.hpp\"\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrOSInterface.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+#include \"runtime\/vm_version.hpp\"\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}