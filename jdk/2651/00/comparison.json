{"files":[{"patch":"@@ -355,1 +355,1 @@\n-  total += _total_dump_regions * reserve_alignment();\n+  total += _total_dump_regions * MetaspaceShared::core_region_alignment();\n@@ -363,1 +363,1 @@\n-  return align_up(total, reserve_alignment());\n+  return align_up(total, MetaspaceShared::core_region_alignment());\n@@ -368,1 +368,1 @@\n-  ReservedSpace rs(buffer_size);\n+  ReservedSpace rs(buffer_size, MetaspaceShared::core_region_alignment(), false);\n@@ -406,1 +406,1 @@\n-    my_archive_requested_bottom = align_up(_requested_static_archive_top, MetaspaceShared::reserved_space_alignment());\n+    my_archive_requested_bottom = align_up(_requested_static_archive_top, MetaspaceShared::core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -229,2 +229,1 @@\n-  \/\/ Use this when you allocate space with MetaspaceShare::read_only_space_alloc()\n-  \/\/ outside of ArchiveBuilder::dump_{rw,ro}_region. These are usually for misc tables\n+  \/\/ Use this when you allocate space outside of ArchiveBuilder::dump_{rw,ro}_region. These are usually for misc tables\n@@ -272,4 +271,0 @@\n-  static size_t reserve_alignment() {\n-    return os::vm_allocation_granularity();\n-  }\n-\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-  _end = (char*)align_up(_top, MetaspaceShared::reserved_space_alignment());\n+  _end = (char*)align_up(_top, MetaspaceShared::core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,6 +50,0 @@\n-public:\n-\n-  static size_t reserve_alignment() {\n-    return os::vm_allocation_granularity();\n-  }\n-\n@@ -186,1 +180,1 @@\n-  _header->populate(base_info, os::vm_allocation_granularity());\n+  _header->populate(base_info, base_info->region_alignment());\n","filename":"src\/hotspot\/share\/memory\/dynamicArchive.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -201,2 +201,2 @@\n-void FileMapInfo::populate_header(size_t alignment) {\n-  header()->populate(this, alignment);\n+void FileMapInfo::populate_header(size_t region_alignment) {\n+  header()->populate(this, region_alignment);\n@@ -205,1 +205,1 @@\n-void FileMapHeader::populate(FileMapInfo* mapinfo, size_t alignment) {\n+void FileMapHeader::populate(FileMapInfo* mapinfo, size_t region_alignment) {\n@@ -212,1 +212,1 @@\n-  _alignment = alignment;\n+  _region_alignment = region_alignment;\n@@ -270,1 +270,1 @@\n-  st->print_cr(\"- alignment:                      \" SIZE_FORMAT, _alignment);\n+  st->print_cr(\"- region_alignment:               \" SIZE_FORMAT, _region_alignment);\n@@ -1229,1 +1229,1 @@\n-  header_bytes = align_up(header_bytes, os::vm_allocation_granularity());\n+  header_bytes = align_up(header_bytes, MetaspaceShared::core_region_alignment());\n@@ -1255,1 +1255,1 @@\n-  return align_up(used(), os::vm_allocation_granularity());\n+  return align_up(used(), MetaspaceShared::core_region_alignment());\n@@ -1460,1 +1460,1 @@\n-                                  os::vm_allocation_granularity());\n+                                  MetaspaceShared::core_region_alignment());\n@@ -1468,1 +1468,1 @@\n-                                    os::vm_allocation_granularity());\n+                                    MetaspaceShared::core_region_alignment());\n@@ -1511,2 +1511,1 @@\n-  size_t used = si->used();\n-  size_t size = align_up(used, os::vm_allocation_granularity());\n+  size_t size = si->used_aligned();\n@@ -2092,2 +2091,1 @@\n-  size_t used = si->used();\n-  size_t size = align_up(used, os::vm_allocation_granularity());\n+  size_t size = si->used_aligned();\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-  size_t used_aligned()             const; \/\/ aligned up to os::vm_allocation_granularity()\n+  size_t used_aligned()             const; \/\/ aligned up to MetaspaceShared::core_region_alignment()\n@@ -194,1 +194,1 @@\n-  size_t _alignment;                \/\/ how shared archive should be aligned\n+  size_t _region_alignment;         \/\/ how shared archive should be aligned\n@@ -259,1 +259,1 @@\n-  size_t alignment()                       const { return _alignment; }\n+  size_t region_alignment()                const { return _region_alignment; }\n@@ -324,1 +324,1 @@\n-  void populate(FileMapInfo* info, size_t alignment);\n+  void populate(FileMapInfo* info, size_t region_alignment);\n@@ -390,1 +390,1 @@\n-  void   populate_header(size_t alignment);\n+  void   populate_header(size_t region_alignment);\n@@ -395,1 +395,1 @@\n-  size_t alignment()           const { return header()->alignment(); }\n+  size_t region_alignment()    const { return header()->region_alignment(); }\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+size_t MetaspaceShared::_core_region_alignment = 0;\n@@ -104,1 +105,1 @@\n-\/\/ These regions are aligned with MetaspaceShared::reserved_space_alignment().\n+\/\/ These regions are aligned with MetaspaceShared::core_region_alignment().\n@@ -125,1 +126,21 @@\n-size_t MetaspaceShared::reserved_space_alignment() { return os::vm_allocation_granularity(); }\n+void MetaspaceShared::init_alignments() {\n+  assert(_core_region_alignment == 0, \"call this only once\");\n+  _core_region_alignment = (size_t)os::vm_allocation_granularity();\n+  if (DumpSharedSpaces) {\n+    \/\/ os::vm_allocation_granularity() is usually 4K for most OSes. However, on Linux\/aarch64,\n+    \/\/ it can be either 4K or 64K. To generate archives that are compatible for\n+    \/\/ both settings, always dump the static archive with 64K alignment.\n+    \/\/ The dynamic archive will always use the same value as the base archive.\n+    if (_core_region_alignment < 64*K) {\n+      log_info(cds)(\"Set core region alignment to 64K for all platforms\");\n+      _core_region_alignment = 64*K;\n+    }\n+  } else {\n+    assert(UseSharedSpaces, \"don't call this if not mapping at least the base archive\");\n+    assert(FileMapInfo::current_info() != NULL, \"Call init_alignments() after base archive is opened\");\n+    _core_region_alignment = FileMapInfo::current_info()->region_alignment();\n+    assert(_core_region_alignment == 64*K, \"CDS always use 64K region alignment\");\n+  }\n+\n+  log_info(cds)(\"core_region_alignment = \" SIZE_FORMAT, _core_region_alignment);\n+}\n@@ -138,1 +159,1 @@\n-    \/\/ align_up(SharedBaseAddress, MetaspaceShared::reserved_space_alignment()) has wrapped around.\n+    \/\/ align_up(SharedBaseAddress, MetaspaceShared::core_region_alignment()) has wrapped around.\n@@ -151,1 +172,1 @@\n-  char* aligned_base = align_up(specified_base, MetaspaceShared::reserved_space_alignment());\n+  char* aligned_base = align_up(specified_base, MetaspaceShared::core_region_alignment());\n@@ -167,1 +188,1 @@\n-  aligned_base = align_up(specified_base, MetaspaceShared::reserved_space_alignment());\n+  aligned_base = align_up(specified_base, MetaspaceShared::core_region_alignment());\n@@ -177,1 +198,1 @@\n-\n+  init_alignments();\n@@ -181,1 +202,1 @@\n-  const size_t reserve_alignment = MetaspaceShared::reserved_space_alignment();\n+  const size_t reserve_alignment = core_region_alignment();\n@@ -512,1 +533,1 @@\n-  mapinfo->populate_header(os::vm_allocation_granularity());\n+  mapinfo->populate_header(MetaspaceShared::core_region_alignment());\n@@ -883,0 +904,1 @@\n+    init_alignments();\n@@ -1003,1 +1025,1 @@\n-                        MetaspaceShared::reserved_space_alignment()),\n+                        core_region_alignment()),\n@@ -1011,1 +1033,1 @@\n-    log_debug(cds)(\"Reserved archive_space_rs     [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved archive_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n@@ -1013,1 +1035,1 @@\n-    log_debug(cds)(\"Reserved class_space_rs [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n+    log_info(cds)(\"Reserved class_space_rs   [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT \"] (\" SIZE_FORMAT \") bytes\",\n@@ -1175,1 +1197,1 @@\n-  const size_t archive_space_alignment = MetaspaceShared::reserved_space_alignment();\n+  const size_t archive_space_alignment = core_region_alignment();\n@@ -1233,2 +1255,1 @@\n-      align_up(archive_space_size + gap_size + class_space_size,\n-               os::vm_allocation_granularity());\n+      align_up(archive_space_size + gap_size + class_space_size, core_region_alignment());\n@@ -1277,1 +1298,1 @@\n-                                                 (size_t)os::vm_allocation_granularity());\n+                                                 (size_t)archive_space_alignment);\n@@ -1330,4 +1351,4 @@\n-\n-  if (mapinfo->alignment() != (size_t)os::vm_allocation_granularity()) {\n-    log_info(cds)(\"Unable to map CDS archive -- os::vm_allocation_granularity() expected: \" SIZE_FORMAT\n-                  \" actual: %d\", mapinfo->alignment(), os::vm_allocation_granularity());\n+  assert(mapinfo->region_alignment() == 64*K, \"Should always use 64K alignment\");\n+  if (mapinfo->region_alignment() != (size_t)core_region_alignment()) {\n+    log_info(cds)(\"Unable to map CDS archive -- core_region_alignment() expected: \" SIZE_FORMAT\n+                  \" actual: \" SIZE_FORMAT, mapinfo->region_alignment(), core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":40,"deletions":19,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+  static size_t _core_region_alignment;\n@@ -140,1 +141,7 @@\n-  static size_t reserved_space_alignment();\n+  static void init_alignments();\n+  \/\/ Alignment for the 3 core CDS regions (MC\/RW\/RO) only.\n+  \/\/ (Heap region alignments are decided by GC).\n+  static size_t core_region_alignment() {\n+    assert(_core_region_alignment != 0, \"must be initialized\");\n+    return _core_region_alignment;\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @requires vm.cds\n+ * @requires vm.gc != \"Z\"\n+ * @summary Testing handling of CDS region alignment\n+ * @bug 8236847\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build Hello\n+ * @run driver ClassFileInstaller -jar hello.jar Hello\n+ * @run driver SharedRegionAlignmentTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class SharedRegionAlignmentTest {\n+    static String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+    static String mainClass = \"Hello\";\n+    static String logArg = \"-Xlog:cds\";\n+\n+    static void testCombo() throws Exception {\n+        \/\/ Test the following combinations:\n+        \/\/ Dump (3 combinations): largePageArgs\n+        \/\/ Run  (3 combinations): largePageArgs\n+        String UseLargePages = \"-XX:+UseLargePages\";\n+\n+        String [][] largePageArgs = {\n+            {}, \/\/ default\n+            {UseLargePages}\n+        };\n+\n+        final String logFor64K = \"core_region_alignment = 65535\";\n+\n+        int dumpCase = 0;\n+        for (String[] dumpLP: largePageArgs) {\n+            dumpCase ++;\n+            System.out.println(\"============================================================\");\n+            System.out.println(\"dump case (\" + dumpCase + \"): \" + formatLargePageArgs(dumpLP));\n+            System.out.println(\"============================================================\");\n+\n+            OutputAnalyzer out = TestCommon.dump(appJar,\n+                                                 TestCommon.list(mainClass),\n+                                                 TestCommon.concat(dumpLP, logArg));\n+            out.shouldContain(\"Dumping shared data to file\");\n+            boolean is_aligned_64k = out.getStdout().contains(logFor64K);\n+\n+            int runCase = 0;\n+            for (String[] runLP: largePageArgs) {\n+                runCase++;\n+                System.out.println(\"--------------------------------------------------\");\n+                System.out.println(\"run case (\" + dumpCase + \".\" + runCase + \"):\" + formatLargePageArgs(runLP));\n+                System.out.println(\"--------------------------------------------------\");\n+\n+                TestCommon.run(TestCommon.concat(runLP, \"-cp\", appJar, logArg, mainClass))\n+                    .assertNormalExit(output -> {\n+                            if (is_aligned_64k) {\n+                                output.shouldContain(logFor64K);\n+                            }\n+                            output.shouldContain(\"Hello World\");\n+                        });\n+            }\n+        }\n+    }\n+\n+    static String formatLargePageArgs(String args[]) {\n+        StringBuilder sb = new StringBuilder();\n+        for (String a : args) {\n+            sb.append(\" \");\n+            sb.append(a);\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        testCombo();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedRegionAlignmentTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}