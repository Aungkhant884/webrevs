{"files":[{"patch":"@@ -251,0 +251,1 @@\n+JDKOPT_ENABLE_DISABLE_COMPATIBLE_CDS_ALIGNMENT\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -586,0 +586,1 @@\n+])\n@@ -587,27 +588,22 @@\n-  AC_ARG_WITH([cds-region-alignment],\n-       [AS_HELP_STRING([--with-cds-region-alignment],\n-                       [set cds region alignment (4096, 16384, 65536)])],\n-  [\n-      AC_MSG_CHECKING([if cds-region-alignmenat specified])\n-      CORE_REGION_ALIGNMENT=${withval}\n-      if test \"x$BUILD_CDS_ARCHIVE\" = \"xfalse\"; then\n-          if test \"x$CORE_REGION_ALIGNMENT\" != \"x\"; then\n-              AC_MSG_ERROR([--with-cds-region-alignment used when cds is disabled])\n-          fi\n-      fi\n-      if test \"x$BUILD_CDS_ARCHIVE\" = \"xtrue\"; then\n-          if test \"x$CORE_REGION_ALIGNMENT\" != \"x\"; then\n-              if test \"x$CORE_REGION_ALIGNMENT\" != \"x4096\" && \\\n-                 test \"x$CORE_REGION_ALIGNMENT\" != \"x16384\" && \\\n-                 test \"x$CORE_REGION_ALIGNMENT\" != \"x65536\"; then\n-                  AC_MSG_ERROR([$CORE_REGION_ALIGNMENT: Allowed values are: 4096, 16384 and 65536])\n-              fi\n-          fi\n-          # define CDS_CORE_REGION_ALIGNMENT\n-          CDS_CORE_REGION_ALIGNMENT=$CORE_REGION_ALIGNMENT\n-          AC_SUBST(CDS_CORE_REGION_ALIGNMENT)\n-          AC_MSG_RESULT([yes $CDS_CORE_REGION_ALIGNMENT])\n-      else\n-          AC_MSG_RESULT([no])\n-      fi\n-   ])\n+################################################################################\n+#\n+# Enable the alternative CDS core region alignment\n+#\n+AC_DEFUN([JDKOPT_ENABLE_DISABLE_COMPATIBLE_CDS_ALIGNMENT],\n+[\n+  UTIL_ARG_ENABLE(NAME: compatible-cds-alignment, DEFAULT: false,\n+      RESULT: ENABLE_COMPATIBLE_CDS_ALIGNMENT,\n+      DESC: [enable use alternative compatible cds core region alignment],\n+      DEFAULT_DESC: [disabled],\n+      CHECKING_MSG: [if compatible cds region alignment enabled],\n+      CHECK_AVAILABLE: [\n+        AC_MSG_CHECKING([if CDS archive is available])\n+        if test \"x$BUILD_CDS_ARCHIVE\" = \"xfalse\"; then\n+          AVAILABLE=false\n+          AC_MSG_RESULT([no (CDS is disabled)])\n+        else\n+          AVAILABLE=true\n+          AC_MSG_RESULT([yes])\n+        fi\n+      ])\n+  AC_SUBST(ENABLE_COMPATIBLE_CDS_ALIGNMENT)\n","filename":"make\/autoconf\/jdk-options.m4","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -352,3 +352,1 @@\n-ifneq (@CDS_CORE_REGION_ALIGNMENT@,)\n-  CDS_CORE_REGION_ALIGNMENT := @CDS_CORE_REGION_ALIGNMENT@\n-endif\n+ENABLE_COMPATIBLE_CDS_ALIGNMENT := @ENABLE_COMPATIBLE_CDS_ALIGNMENT@\n","filename":"make\/autoconf\/spec.gmk.in","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-ifneq ($(CDS_CORE_REGION_ALIGNMENT), )\n-  JVM_CFLAGS += -DCDS_CORE_REGION_ALIGNMENT=\"$(CDS_CORE_REGION_ALIGNMENT)\"\n+ifeq ($(ENABLE_COMPATIBLE_CDS_ALIGNMENT), true)\n+  JVM_CFLAGS += -DCOMPATIBLE_CDS_ALIGNMENT\n","filename":"make\/hotspot\/lib\/JvmFlags.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+#if defined(COMPATIBLE_CDS_ALIGNMENT)\n+#define CDS_CORE_REGION_ALIGNMENT (16*K)\n+#endif\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+#if defined(COMPATIBLE_CDS_ALIGNMENT)\n+#define CDS_CORE_REGION_ALIGNMENT (64*K)\n+#endif\n+\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -125,1 +125,8 @@\n-\/\/ core region alignment is configurable during build time.\n+\/\/ os::vm_allocation_granularity() is usually 4K for most OSes. However, on Linux\/aarch64,\n+\/\/ it can be either 4K or 64K and on Macosx-arm it is 16K. To generate archives that are\n+\/\/ compatible for both settings. An alternative cds core region alignment can be enabled\n+\/\/ at building time:\n+\/\/   --enable-compactible-cds-alignment\n+\/\/ Upon successful configuration, the compactible alignment then can be defined as in:\n+\/\/   os_linux_aarch64.hpp\n+\/\/ which is the highest page size configured on the platform.\n@@ -128,9 +135,0 @@\n-  assert(CDS_CORE_REGION_ALIGNMENT == 4096  ||\n-         CDS_CORE_REGION_ALIGNMENT == 16384 ||\n-         CDS_CORE_REGION_ALIGNMENT == 65536, \"Sanity check\");\n-  assert(is_power_of_2(CDS_CORE_REGION_ALIGNMENT),\n-         \"CDS core region alignment must be power of 2.\");\n-  assert(CDS_CORE_REGION_ALIGNMENT >= (size_t)os::vm_allocation_granularity(),\n-         \"CDS core region aligment must be greater or equal to OS page size.\");\n-  assert(CDS_CORE_REGION_ALIGNMENT % os::vm_allocation_granularity() == 0,\n-         \"CDS core region alignment must be divisible by page size\");\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"}]}