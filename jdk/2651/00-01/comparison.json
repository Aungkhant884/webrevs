{"files":[{"patch":"@@ -229,2 +229,2 @@\n-  \/\/ Use this when you allocate space outside of ArchiveBuilder::dump_{rw,ro}_region. These are usually for misc tables\n-  \/\/ that are allocated in the RO space.\n+  \/\/ Use this when you allocate space outside of ArchiveBuilder::dump_{rw,ro}_region.\n+  \/\/ These are usually for misc tables that are allocated in the RO space.\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-  _header->populate(base_info, base_info->region_alignment());\n+  _header->populate(base_info, base_info->core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,2 +201,2 @@\n-void FileMapInfo::populate_header(size_t region_alignment) {\n-  header()->populate(this, region_alignment);\n+void FileMapInfo::populate_header(size_t core_region_alignment) {\n+  header()->populate(this, core_region_alignment);\n@@ -205,1 +205,1 @@\n-void FileMapHeader::populate(FileMapInfo* mapinfo, size_t region_alignment) {\n+void FileMapHeader::populate(FileMapInfo* mapinfo, size_t core_region_alignment) {\n@@ -212,1 +212,1 @@\n-  _region_alignment = region_alignment;\n+  _core_region_alignment = core_region_alignment;\n@@ -270,1 +270,1 @@\n-  st->print_cr(\"- region_alignment:               \" SIZE_FORMAT, _region_alignment);\n+  st->print_cr(\"- core_region_alignment:          \" SIZE_FORMAT, _core_region_alignment);\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-  size_t _region_alignment;         \/\/ how shared archive should be aligned\n+  size_t _core_region_alignment;    \/\/ how shared archive should be aligned\n@@ -259,1 +259,1 @@\n-  size_t region_alignment()                const { return _region_alignment; }\n+  size_t core_region_alignment()           const { return _core_region_alignment; }\n@@ -324,1 +324,1 @@\n-  void populate(FileMapInfo* info, size_t region_alignment);\n+  void populate(FileMapInfo* info, size_t core_region_alignment);\n@@ -390,1 +390,1 @@\n-  void   populate_header(size_t region_alignment);\n+  void   populate_header(size_t core_region_alignment);\n@@ -395,1 +395,0 @@\n-  size_t region_alignment()    const { return header()->region_alignment(); }\n@@ -401,0 +400,1 @@\n+  size_t  core_region_alignment() const { return header()->core_region_alignment(); }\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -128,1 +128,0 @@\n-  _core_region_alignment = (size_t)os::vm_allocation_granularity();\n@@ -130,4 +129,9 @@\n-    \/\/ os::vm_allocation_granularity() is usually 4K for most OSes. However, on Linux\/aarch64,\n-    \/\/ it can be either 4K or 64K. To generate archives that are compatible for\n-    \/\/ both settings, always dump the static archive with 64K alignment.\n-    \/\/ The dynamic archive will always use the same value as the base archive.\n+    _core_region_alignment = (size_t)os::vm_allocation_granularity();\n+#if (defined(LINUX) && defined(AARCH64)) || (defined(__APPLE__) && defined(AMD64))\n+    \/\/ If a CDS archive is created on one machine, and used on another, and the two\n+    \/\/ machines have different page sizes, make sure the archive can be used on\n+    \/\/ both machines.\n+    \/\/\n+    \/\/ (a) Linux\/aarch64 can be configured to have either 4KB or 64KB page sizes.\n+    \/\/ (b) macOS\/x64 uses 4KB, but macOS\/aarch64 uses 64KB (note: you can run a x64 JDK\n+    \/\/     on a M1-based MacBook using Rosetta).\n@@ -135,1 +139,1 @@\n-      log_info(cds)(\"Set core region alignment to 64K for all platforms\");\n+      log_info(cds)(\"Force core region alignment to 64K\");\n@@ -138,0 +142,1 @@\n+#endif\n@@ -141,2 +146,1 @@\n-    _core_region_alignment = FileMapInfo::current_info()->region_alignment();\n-    assert(_core_region_alignment == 64*K, \"CDS always use 64K region alignment\");\n+    _core_region_alignment = FileMapInfo::current_info()->core_region_alignment();\n@@ -1351,2 +1355,1 @@\n-  assert(mapinfo->region_alignment() == 64*K, \"Should always use 64K alignment\");\n-  if (mapinfo->region_alignment() != (size_t)core_region_alignment()) {\n+  if (mapinfo->core_region_alignment() != (size_t)core_region_alignment()) {\n@@ -1354,1 +1357,1 @@\n-                  \" actual: \" SIZE_FORMAT, mapinfo->region_alignment(), core_region_alignment());\n+                  \" actual: \" SIZE_FORMAT, mapinfo->core_region_alignment(), core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+ * @comment ZGC may exit the VM if -XX:+UseLargePages is specified but\n+ *          unavailable. Since this test is independent of the actual GC type, let's\n+ *          disable it if ZGC is used.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedRegionAlignmentTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}