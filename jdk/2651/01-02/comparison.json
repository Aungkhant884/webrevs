{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -586,0 +586,28 @@\n+\n+  AC_ARG_WITH([cds-region-alignment],\n+       [AS_HELP_STRING([--with-cds-region-alignment],\n+                       [set cds region alignment (4096, 16384, 65536)])],\n+  [\n+      AC_MSG_CHECKING([if cds-region-alignmenat specified])\n+      CORE_REGION_ALIGNMENT=${withval}\n+      if test \"x$BUILD_CDS_ARCHIVE\" = \"xfalse\"; then\n+          if test \"x$CORE_REGION_ALIGNMENT\" != \"x\"; then\n+              AC_MSG_ERROR([--with-cds-region-alignment used when cds is disabled])\n+          fi\n+      fi\n+      if test \"x$BUILD_CDS_ARCHIVE\" = \"xtrue\"; then\n+          if test \"x$CORE_REGION_ALIGNMENT\" != \"x\"; then\n+              if test \"x$CORE_REGION_ALIGNMENT\" != \"x4096\" && \\\n+                 test \"x$CORE_REGION_ALIGNMENT\" != \"x16384\" && \\\n+                 test \"x$CORE_REGION_ALIGNMENT\" != \"x65536\"; then\n+                  AC_MSG_ERROR([$CORE_REGION_ALIGNMENT: Allowed values are: 4096, 16384 and 65536])\n+              fi\n+          fi\n+          # define CDS_CORE_REGION_ALIGNMENT\n+          CDS_CORE_REGION_ALIGNMENT=$CORE_REGION_ALIGNMENT\n+          AC_SUBST(CDS_CORE_REGION_ALIGNMENT)\n+          AC_MSG_RESULT([yes $CDS_CORE_REGION_ALIGNMENT])\n+      else\n+          AC_MSG_RESULT([no])\n+      fi\n+   ])\n","filename":"make\/autoconf\/jdk-options.m4","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -352,0 +352,4 @@\n+ifneq (@CDS_CORE_REGION_ALIGNMENT@,)\n+  CDS_CORE_REGION_ALIGNMENT := @CDS_CORE_REGION_ALIGNMENT@\n+endif\n+\n","filename":"make\/autoconf\/spec.gmk.in","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,0 +102,4 @@\n+\n+ifneq ($(CDS_CORE_REGION_ALIGNMENT), )\n+  JVM_CFLAGS += -DCDS_CORE_REGION_ALIGNMENT=\"$(CDS_CORE_REGION_ALIGNMENT)\"\n+endif\n","filename":"make\/hotspot\/lib\/JvmFlags.gmk","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-size_t MetaspaceShared::_core_region_alignment = 0;\n@@ -126,24 +125,16 @@\n-void MetaspaceShared::init_alignments() {\n-  assert(_core_region_alignment == 0, \"call this only once\");\n-  if (DumpSharedSpaces) {\n-    _core_region_alignment = (size_t)os::vm_allocation_granularity();\n-#if (defined(LINUX) && defined(AARCH64)) || (defined(__APPLE__) && defined(AMD64))\n-    \/\/ If a CDS archive is created on one machine, and used on another, and the two\n-    \/\/ machines have different page sizes, make sure the archive can be used on\n-    \/\/ both machines.\n-    \/\/\n-    \/\/ (a) Linux\/aarch64 can be configured to have either 4KB or 64KB page sizes.\n-    \/\/ (b) macOS\/x64 uses 4KB, but macOS\/aarch64 uses 64KB (note: you can run a x64 JDK\n-    \/\/     on a M1-based MacBook using Rosetta).\n-    if (_core_region_alignment < 64*K) {\n-      log_info(cds)(\"Force core region alignment to 64K\");\n-      _core_region_alignment = 64*K;\n-    }\n-#endif\n-  } else {\n-    assert(UseSharedSpaces, \"don't call this if not mapping at least the base archive\");\n-    assert(FileMapInfo::current_info() != NULL, \"Call init_alignments() after base archive is opened\");\n-    _core_region_alignment = FileMapInfo::current_info()->core_region_alignment();\n-  }\n-\n-  log_info(cds)(\"core_region_alignment = \" SIZE_FORMAT, _core_region_alignment);\n+\/\/ core region alignment is configurable during build time.\n+size_t MetaspaceShared::core_region_alignment() {\n+#if defined(CDS_CORE_REGION_ALIGNMENT)\n+  assert(CDS_CORE_REGION_ALIGNMENT == 4096  ||\n+         CDS_CORE_REGION_ALIGNMENT == 16384 ||\n+         CDS_CORE_REGION_ALIGNMENT == 65536, \"Sanity check\");\n+  assert(is_power_of_2(CDS_CORE_REGION_ALIGNMENT),\n+         \"CDS core region alignment must be power of 2.\");\n+  assert(CDS_CORE_REGION_ALIGNMENT >= (size_t)os::vm_allocation_granularity(),\n+         \"CDS core region aligment must be greater or equal to OS page size.\");\n+  assert(CDS_CORE_REGION_ALIGNMENT % os::vm_allocation_granularity() == 0,\n+         \"CDS core region alignment must be divisible by page size\");\n+  return CDS_CORE_REGION_ALIGNMENT;\n+#else\n+  return (size_t)os::vm_allocation_granularity();\n+#endif \/\/ CDS_CORE_REGION_ALIGNMENT\n@@ -202,1 +193,1 @@\n-  init_alignments();\n+  log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, core_region_alignment());\n@@ -908,1 +899,1 @@\n-    init_alignments();\n+    log_info(cds)(\"Core region alignment: \" SIZE_FORMAT, static_mapinfo->core_region_alignment());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":18,"deletions":27,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  static size_t _core_region_alignment;\n@@ -141,1 +140,0 @@\n-  static void init_alignments();\n@@ -144,4 +142,1 @@\n-  static size_t core_region_alignment() {\n-    assert(_core_region_alignment != 0, \"must be initialized\");\n-    return _core_region_alignment;\n-  }\n+  static size_t core_region_alignment();\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}