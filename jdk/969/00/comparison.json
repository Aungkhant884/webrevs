{"files":[{"patch":"@@ -419,0 +419,10 @@\n+    public $Type$Buffer put(int index, $Type$Buffer src, int offset, int length) {\n+#if[rw]\n+        checkSegment();\n+        super.put(index, src, offset, length);\n+        return this;\n+#else[rw]\n+        throw new ReadOnlyBufferException();\n+#end[rw]\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Direct-X-Buffer.java.template","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -254,0 +254,10 @@\n+    public $Type$Buffer put(int index, $Type$Buffer src, int offset, int length) {\n+#if[rw]\n+        checkSegment();\n+        super.put(index, src, offset, length);\n+        return this;\n+#else[rw]\n+        throw new ReadOnlyBufferException();\n+#end[rw]\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -959,0 +959,70 @@\n+        putBuffer(pos, src, srcPos, n);\n+\n+        position(pos + n);\n+        src.position(srcPos + n);\n+\n+        return this;\n+    }\n+\n+    \/**\n+     * Absolute bulk <i>put<\/i> method&nbsp;&nbsp;<i>(optional operation)<\/i>.\n+     *\n+     * <p> This method transfers {@code length} $type$s into this buffer from\n+     * the given source buffer, starting at the given {@code offset} in the\n+     * source buffer and the given {@code index} in this buffer. The positions\n+     * of both buffers are unchanged.\n+     *\n+     * <p> In other words, an invocation of this method of the form\n+     * <code>dst.put(index,&nbsp;src,&nbsp;offset,&nbsp;length)<\/code>\n+     * has exactly the same effect as the loop\n+     *\n+     * <pre>{@code\n+     * for (int i = offset, j = index; i < offset + length; i++, j++)\n+     *     dst.put(j, src.get(i));\n+     * }<\/pre>\n+     *\n+     * except that it first checks the consistency of the supplied parameters\n+     * and it is potentially much more efficient.  If this buffer and\n+     * the source buffer share the same backing array or memory, then the\n+     * result will be as if the source elements were first copied to an\n+     * intermediate location before being written into this buffer.\n+     *\n+     * @param index\n+     * The index in this buffer at which the first $type$ will be\n+     * written; must be non-negative and less than {@code limit()}\n+     *\n+     * @param src\n+     * The buffer from which $type$s are to be read\n+     *\n+     * @param offset\n+     * The index within the source buffer of the first $type$ to be\n+     * read; must be non-negative and less than {@code src.limit()}\n+     *\n+     * @param length\n+     * The number of $type$s to be read from the given buffer;\n+     * must be non-negative and no larger than the smaller of\n+     * {@code limit() - index} and {@code src.limit() - offset}\n+     *\n+     * @return This buffer\n+     *\n+     * @throws IndexOutOfBoundsException\n+     * If the preconditions on the {@code index}, {@code offset}, and\n+     * {@code length} parameters do not hold\n+     *\n+     * @throws ReadOnlyBufferException\n+     * If this buffer is read-only\n+     *\n+     * @since 16\n+     *\/\n+    public $Type$Buffer put(int index, $Type$Buffer src, int offset, int length) {\n+        Objects.checkFromIndexSize(index, length, limit());\n+        Objects.checkFromIndexSize(offset, length, src.limit());\n+        if (isReadOnly())\n+            throw new ReadOnlyBufferException();\n+\n+        putBuffer(index, src, offset, length);\n+\n+        return this;\n+    }\n+\n+    void putBuffer(int pos, $Type$Buffer src, int srcPos, int n) {\n@@ -1002,3 +1072,0 @@\n-\n-            position(pos + n);\n-            src.position(srcPos + n);\n@@ -1008,2 +1075,3 @@\n-            for (int i = 0; i < n; i++)\n-                put(src.get());\n+            int posMax = pos + n;\n+            for (int i = pos, j = srcPos; i < posMax; i++, j++)\n+                put(i, src.get(j));\n@@ -1012,2 +1080,0 @@\n-\n-        return this;\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":73,"deletions":7,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * @bug 8245121\n+ * @bug 8219014 8245121\n@@ -145,0 +145,1 @@\n+        MethodHandle asReadOnlyBuffer;\n@@ -148,0 +149,1 @@\n+        MethodHandle putBufAbs;\n@@ -171,0 +173,3 @@\n+\n+                asReadOnlyBuffer = lookup.findVirtual(bufferType,\n+                        \"asReadOnlyBuffer\", MethodType.methodType(bufferType));\n@@ -180,0 +185,4 @@\n+\n+                putBufAbs = lookup.findVirtual(bufferType, \"put\",\n+                    MethodType.methodType(bufferType, int.class, bufferType,\n+                        int.class, int.class));\n@@ -182,0 +191,1 @@\n+\n@@ -242,0 +252,19 @@\n+        Buffer asReadOnlyBuffer(Buffer buf) throws Throwable {\n+            try {\n+                return (Buffer)asReadOnlyBuffer.invoke(buf);\n+            } catch (Exception e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+\n+        void put(Buffer src, int srcOff, Buffer dst, int dstOff, int length)\n+            throws Throwable {\n+            try {\n+                putBufAbs.invoke(dst, dstOff, src, srcOff, length);\n+            } catch (ReadOnlyBufferException ro) {\n+                throw ro;\n+            } catch (Exception e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+\n@@ -297,0 +326,35 @@\n+    private static void expectThrows(Class exClass,\n+        Assert.ThrowingRunnable r) {\n+        try {\n+            r.run();\n+        } catch(Throwable e) {\n+            if (e.getClass() != exClass && e.getCause().getClass() != exClass) {\n+                throw new RuntimeException(\"Expected \" + exClass +\n+                \"; got \" + e.getCause().getClass(), e);\n+            }\n+        }\n+    }\n+\n+    @Test(dataProvider = \"proxies\")\n+    public static void testExceptions(BufferProxy bp) throws Throwable {\n+        int cap = 27;\n+        Buffer buf = bp.create(cap);\n+\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, -1, buf, 0, 1));\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, 0, buf, -1, 1));\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, 1, buf, 0, cap));\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, 0, buf, 1, cap));\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, 0, buf, 0, cap + 1));\n+        expectThrows(IndexOutOfBoundsException.class,\n+            () -> bp.put(buf, 0, buf, 0, Integer.MAX_VALUE));\n+\n+        Buffer rob = buf.isReadOnly() ? buf : bp.asReadOnlyBuffer(buf);\n+        expectThrows(ReadOnlyBufferException.class,\n+            () -> bp.put(buf, 0, rob, 0, cap));\n+    }\n+\n@@ -314,2 +378,0 @@\n-            } else {\n-                bp.copy(lower, 0, lowerCopy, 0, lowerLength);\n@@ -317,0 +379,1 @@\n+            bp.copy(lower, 0, lowerCopy, 0, lowerLength);\n@@ -320,0 +383,2 @@\n+            Buffer middleCopy = bp.create(lowerLength);\n+            bp.copy(middle, 0, middleCopy, 0, lowerLength);\n@@ -321,7 +386,1 @@\n-            if (middle.isReadOnly()) {\n-                Assert.expectThrows(ReadOnlyBufferException.class,\n-                    () -> bp.put(lower, middle));\n-                break;\n-            } else {\n-                bp.put(lower, middle);\n-            }\n+            bp.put(lower, middle);\n@@ -330,0 +389,10 @@\n+            Assert.assertTrue(bp.equals(lowerCopy, middle),\n+                String.format(\"%d %s %d %d %d %d%n\", SEED,\n+                    buf.getClass().getName(), cap,\n+                    lowerOffset, lowerLength, middleOffset));\n+\n+            bp.copy(lowerCopy, 0, buf, lowerOffset, lowerLength);\n+            bp.copy(middleCopy, 0, buf, middleOffset, lowerLength);\n+\n+            bp.put(buf, lowerOffset, buf, middleOffset, lowerLength);\n+\n@@ -364,2 +433,0 @@\n-            } else {\n-                bp.put(src, buf);\n@@ -368,0 +435,4 @@\n+            Buffer backup = bp.create(slim - spos);\n+            bp.copy(buf, pos, backup, 0, backup.capacity());\n+            bp.put(src, buf);\n+\n@@ -371,0 +442,14 @@\n+            Assert.assertTrue(bp.equals(src, buf),\n+                String.format(\"%d %s %d %d %d %s %d %d %d%n\", SEED,\n+                    buf.getClass().getName(), cap, pos, lim,\n+                    src.getClass().getName(), scap, spos, slim));\n+\n+            src.clear();\n+            buf.clear();\n+            bp.copy(backup, 0, buf, pos, backup.capacity());\n+            bp.put(src, spos, buf, pos, backup.capacity());\n+            src.position(spos);\n+            src.limit(slim);\n+            buf.position(pos);\n+            buf.limit(lim);\n+\n","filename":"test\/jdk\/java\/nio\/Buffer\/BulkPutBuffer.java","additions":97,"deletions":12,"binary":false,"changes":109,"status":"modified"}]}