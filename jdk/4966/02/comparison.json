{"files":[{"patch":"@@ -101,0 +101,1 @@\n+    private final boolean optimizeOuterThis;\n@@ -122,0 +123,3 @@\n+        optimizeOuterThis =\n+            target.omitUnusedPrivateSyntheticEnclosingInstanceFields() ||\n+            options.getBoolean(\"optimizeOuterThis\", false);\n@@ -1483,0 +1487,4 @@\n+        \/\/ Set NOOUTERTHIS for all synthetic outer instance variables, and unset\n+        \/\/ it when the variable is accessed. If the variable is never accessed,\n+        \/\/ we skip creating an outer instance field and saving the constructor\n+        \/\/ parameter to it.\n@@ -1484,1 +1492,1 @@\n-            new VarSymbol(flags, outerThisName(target, owner), target, owner);\n+            new VarSymbol(flags | NOOUTERTHIS, outerThisName(target, owner), target, owner);\n@@ -1731,0 +1739,1 @@\n+        ot.flags_field &= ~NOOUTERTHIS;\n@@ -1748,0 +1757,1 @@\n+            ot.flags_field &= ~NOOUTERTHIS;\n@@ -1787,0 +1797,1 @@\n+        ot.flags_field &= ~NOOUTERTHIS;\n@@ -1799,0 +1810,1 @@\n+            ot.flags_field &= ~NOOUTERTHIS;\n@@ -1820,2 +1832,1 @@\n-    JCStatement initOuterThis(int pos) {\n-        VarSymbol rhs = outerThisStack.head;\n+    JCStatement initOuterThis(int pos, VarSymbol rhs) {\n@@ -1823,1 +1834,1 @@\n-        VarSymbol lhs = outerThisStack.tail.head;\n+        VarSymbol lhs = outerThisStack.head;\n@@ -2227,1 +2238,1 @@\n-        \/\/ Add this$n and free variables proxy definitions to class.\n+        \/\/ Add free variables proxy definitions to class.\n@@ -2233,1 +2244,4 @@\n-        if (currentClass.hasOuterInstance()) {\n+        \/\/ If this$n was accessed, add the field definition and\n+        \/\/ update initial constructors to initialize it\n+        if (currentClass.hasOuterInstance()\n+            && (((outerThisStack.head.flags_field & NOOUTERTHIS) == 0) || !optimizeOuterThis)) {\n@@ -2236,0 +2250,9 @@\n+\n+           for (JCTree def : tree.defs) {\n+                if (!TreeInfo.isInitialConstructor(def)) {\n+                    continue;\n+                }\n+                JCMethodDecl mdef = (JCMethodDecl) def;\n+                mdef.body.stats = mdef.body.stats.prepend(\n+                    initOuterThis(mdef.body.pos, mdef.params.head.sym));\n+            }\n@@ -2706,5 +2729,0 @@\n-            if (currentClass.hasOuterInstance() &&\n-                TreeInfo.isInitialConstructor(tree))\n-            {\n-                added = added.prepend(initOuterThis(tree.body.pos));\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -206,0 +206,7 @@\n+\n+    \/** Omit unused enclosing instance fields from inner classes that don't access enclosing\n+     * instance state.\n+     *\/\n+    public boolean omitUnusedPrivateSyntheticEnclosingInstanceFields() {\n+        return compareTo(JDK1_18) >= 0;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,6 @@\n-    class Outer {}\n+    class Outer {\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            T6521805.this.toString();\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/6521805\/T6521805d.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -6,1 +6,6 @@\n-    class Super {}\n+    class Super {\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            Outer.this.toString();\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/6521805\/p\/Outer.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4,2 +4,0 @@\n-FIELD  this$0\n---- FINAL\n@@ -23,2 +21,0 @@\n-FIELD  this$1\n---- FINAL\n@@ -32,2 +28,0 @@\n-FIELD  this$0\n---- FINAL\n","filename":"test\/langtools\/tools\/javac\/ClassFileModifiers\/MemberModifiers.out","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        if (!javapOut.contains(\"0: #22(): CLASS_EXTENDS, type_index=65535\"))\n+        if (!javapOut.contains(\"0: #20(): CLASS_EXTENDS, type_index=65535\"))\n@@ -65,1 +65,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/AnnotatedExtendsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,5 @@\n+\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            AccessToPrivateInnerClassConstructorsTest.this.toString();\n+        }\n@@ -70,1 +75,6 @@\n-        class Local {};\n+        class Local {\n+            {\n+                \/\/ access enclosing instance so this$0 field is generated\n+                AccessToPrivateInnerClassConstructorsTest.this.toString();\n+            }\n+        };\n@@ -75,1 +85,6 @@\n-        class Local {};\n+        class Local {\n+            {\n+                \/\/ access enclosing instance so this$0 field is generated\n+                AccessToPrivateInnerClassConstructorsTest.this.toString();\n+            }\n+        };\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassConstructorsTest.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -63,1 +63,4 @@\n-        private void function() {}\n+        private void function() {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            AccessToPrivateInnerClassMembersTest.this.toString();\n+        }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateInnerClassMembersTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -68,1 +68,4 @@\n-        private void function() {}\n+        private void function() {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            AccessToPrivateSiblingsTest.this.toString();\n+        }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/AccessToPrivateSiblingsTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,0 +83,5 @@\n+\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            BridgeMethodsForLambdaTest.this.toString();\n+        }\n@@ -95,0 +100,5 @@\n+\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            BridgeMethodsForLambdaTest.this.toString();\n+        }\n@@ -102,0 +112,5 @@\n+\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            BridgeMethodsForLambdaTest.this.toString();\n+        }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/BridgeMethodsForLambdaTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,0 +52,4 @@\n+            {\n+                \/\/ access enclosing instance so this$0 field is generated\n+                ThisFieldTest.this.toString();\n+            }\n@@ -55,0 +59,4 @@\n+            {\n+                \/\/ access enclosing instance so this$0 field is generated\n+                ThisFieldTest.this.toString();\n+            }\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/Synthetic\/ThisFieldTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,6 @@\n-    public class Inner extends Outer { }\n+    public class Inner extends Outer {\n+        {\n+            \/\/ access enclosing instance so this$0 field is generated\n+            ErrSyntheticNameConflict.this.toString();\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ErrSyntheticNameConflict.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+\/**\n+ * @test\n+ * @bug 8271623\n+ *\n+ * @compile --release 17 DontOptimizeOuterThis.java InnerClasses.java\n+ * @run main DontOptimizeOuterThis\n+ *\/\n+public class DontOptimizeOuterThis extends InnerClasses {\n+\n+    public static void main(String[] args) {\n+        new DontOptimizeOuterThis().test();\n+    }\n+\n+    public void test() {\n+        checkInner(localCapturesParameter(0), true);\n+        checkInner(localCapturesLocal(), true);\n+        checkInner(localCapturesEnclosing(), true);\n+\n+        checkInner(anonCapturesParameter(0), true);\n+        checkInner(anonCapturesLocal(), true);\n+        checkInner(anonCapturesEnclosing(), true);\n+\n+        checkInner(StaticMemberClass.class, false); \/\/ static\n+        checkInner(NonStaticMemberClass.class, true);\n+        checkInner(NonStaticMemberClassCapturesEnclosing.class, true);\n+\n+        checkInner(N0.class, false); \/\/ static\n+        checkInner(N0.N1.class, true);\n+        checkInner(N0.N1.N2.class, true);\n+        checkInner(N0.N1.N2.N3.class, true);\n+        checkInner(N0.N1.N2.N3.N4.class, true);\n+        checkInner(N0.N1.N2.N3.N4.N5.class, true);\n+    }\n+\n+    private static void checkInner(Class<?> clazz, boolean expectOuterThis) {\n+        Optional<Field> outerThis = Arrays.stream(clazz.getDeclaredFields())\n+                .filter(f -> f.getName().startsWith(\"this$\")).findFirst();\n+        if (expectOuterThis) {\n+            if (outerThis.isEmpty()) {\n+                throw new AssertionError(\n+                        String.format(\n+                                \"expected %s to have an enclosing instance\", clazz.getName()));\n+            }\n+        } else {\n+            if (outerThis.isPresent()) {\n+                throw new AssertionError(\n+                        String.format(\"%s had an unexpected enclosing instance\", clazz.getName()));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/optimizeOuterThis\/DontOptimizeOuterThis.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2021, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class InnerClasses {\n+\n+    public Class<?> localCapturesParameter(final int x) {\n+        class Local {\n+            public void f() {\n+                System.err.println(x);\n+            }\n+        }\n+        return Local.class;\n+    }\n+\n+    public Class<?> localCapturesLocal() {\n+        final int x = 0;\n+        class Local {\n+            public void f() {\n+                System.err.println(x);\n+            }\n+        }\n+        return Local.class;\n+    }\n+\n+    public Class<?> localCapturesEnclosing() {\n+        class Local {\n+            public void f() {\n+                System.err.println(InnerClasses.this);\n+            }\n+        }\n+        return Local.class;\n+    }\n+\n+    public Class<?> anonCapturesParameter(final int x) {\n+        return new Object() {\n+            public void f() {\n+                System.err.println(x);\n+            }\n+        }.getClass();\n+    }\n+\n+    public Class<?> anonCapturesLocal() {\n+        final int x = 0;\n+        return new Object() {\n+            public void f() {\n+                System.err.println(x);\n+            }\n+        }.getClass();\n+    }\n+\n+    public Class<?> anonCapturesEnclosing() {\n+        return new Object() {\n+            public void f() {\n+                System.err.println(InnerClasses.this);\n+            }\n+        }.getClass();\n+    }\n+\n+    public static class StaticMemberClass {}\n+\n+    public class NonStaticMemberClass {}\n+\n+    public class NonStaticMemberClassCapturesEnclosing {\n+        public void f() {\n+            System.err.println(InnerClasses.this);\n+        }\n+    }\n+\n+    static class N0 {\n+        int x;\n+\n+        class N1 {\n+            class N2 {\n+                class N3 {\n+                    void f() {\n+                        System.err.println(x);\n+                    }\n+\n+                    class N4 {\n+                        class N5 {}\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/optimizeOuterThis\/InnerClasses.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+\/**\n+ * @test\n+ * @bug 8271623\n+ *\n+ * @clean *\n+ * @compile OptimizeOuterThis.java InnerClasses.java\n+ * @run main OptimizeOuterThis\n+ *\n+ * @clean *\n+ * @compile -XDoptimizeOuterThis=true --release 17 OptimizeOuterThis.java InnerClasses.java\n+ * @run main OptimizeOuterThis\n+ *\/\n+public class OptimizeOuterThis extends InnerClasses {\n+\n+    public static void main(String[] args) {\n+        new OptimizeOuterThis().test();\n+    }\n+\n+    public void test() {\n+        checkInner(localCapturesParameter(0), false);\n+        checkInner(localCapturesLocal(), false);\n+        checkInner(localCapturesEnclosing(), true);\n+\n+        checkInner(anonCapturesParameter(0), false);\n+        checkInner(anonCapturesLocal(), false);\n+        checkInner(anonCapturesEnclosing(), true);\n+\n+        checkInner(StaticMemberClass.class, false);\n+        checkInner(NonStaticMemberClass.class, false);\n+        checkInner(NonStaticMemberClassCapturesEnclosing.class, true);\n+\n+        checkInner(N0.class, false);\n+        checkInner(N0.N1.class, true);\n+        checkInner(N0.N1.N2.class, true);\n+        checkInner(N0.N1.N2.N3.class, true);\n+        checkInner(N0.N1.N2.N3.N4.class, false);\n+        checkInner(N0.N1.N2.N3.N4.N5.class, false);\n+    }\n+\n+    private static void checkInner(Class<?> clazz, boolean expectOuterThis) {\n+        Optional<Field> outerThis = Arrays.stream(clazz.getDeclaredFields())\n+                .filter(f -> f.getName().startsWith(\"this$\")).findFirst();\n+        if (expectOuterThis) {\n+            if (outerThis.isEmpty()) {\n+                throw new AssertionError(\n+                        String.format(\n+                                \"expected %s to have an enclosing instance\", clazz.getName()));\n+            }\n+        } else {\n+            if (outerThis.isPresent()) {\n+                throw new AssertionError(\n+                        String.format(\"%s had an unexpected enclosing instance\", clazz.getName()));\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/optimizeOuterThis\/OptimizeOuterThis.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-                \"  0: #21(#22=B#23)\\n\" +\n+                \"  0: #17(#18=B#19)\\n\" +\n@@ -56,1 +56,1 @@\n-                \"  1: #24(#22=S#25)\\n\" +\n+                \"  1: #20(#18=S#21)\\n\" +\n@@ -62,1 +62,1 @@\n-                \"  0: #27(#22=[J#28,J#30,J#32,J#34,J#36])\\n\" +\n+                \"  0: #23(#18=[J#24,J#26,J#28,J#30,J#32])\\n\" +\n@@ -66,1 +66,1 @@\n-                \"  1: #38(#22=Z#39)\\n\" +\n+                \"  1: #34(#18=Z#35)\\n\" +\n@@ -70,1 +70,1 @@\n-                \"  2: #40(#41=c#42)\\n\" +\n+                \"  2: #36(#37=c#38)\\n\" +\n@@ -74,1 +74,1 @@\n-                \"  3: #43(#44=e#45.#46)\\n\" +\n+                \"  3: #39(#40=e#41.#42)\\n\" +\n@@ -78,1 +78,1 @@\n-                \"  4: #47(#22=I#48)\\n\" +\n+                \"  4: #43(#18=I#44)\\n\" +\n@@ -82,1 +82,1 @@\n-                \"  5: #49()\\n\" +\n+                \"  5: #45()\\n\" +\n@@ -84,1 +84,1 @@\n-                \"  6: #50(#51=s#52)\\n\" +\n+                \"  6: #46(#47=s#48)\\n\" +\n@@ -88,1 +88,1 @@\n-                \"  7: #53(#54=D#55,#57=F#58)\\n\" +\n+                \"  7: #49(#50=D#51,#53=F#54)\\n\" +\n@@ -93,1 +93,1 @@\n-                \"  8: #59()\\n\" +\n+                \"  8: #55()\\n\" +\n@@ -95,1 +95,1 @@\n-                \"  9: #60(#22=@#47(#22=I#61))\\n\" +\n+                \"  9: #56(#18=@#43(#18=I#57))\\n\" +\n@@ -103,1 +103,1 @@\n-                \"  0: #63(): CLASS_EXTENDS, type_index=0\\n\" +\n+                \"  0: #59(): CLASS_EXTENDS, type_index=0\\n\" +\n","filename":"test\/langtools\/tools\/javap\/AnnoTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}