[{"commit":{"message":"Update the warning message"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"b22fa23dd13df34fe94f78e37c7b0f343f40958e"},{"commit":{"message":"Disable ROP-protection if VMContinuations is on\n\nVirtual threads are proposed to be a permanent feature in JDK 21, and\nArguments:enable_preview check no longer works. As an alternative, we\ncheck if VMContinuations is on.\n\nIn this way, ROP protection is enabled only with VM options\n`-XX:UseBranchProtection=standard|pac-ret\n-XX:+UnlockExperimentalVMOptions -XX:-VMContinuations` on hardware with\nthe support of PAC feature."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"fbbf86a85e4069e0f12fa0a8236dc7d1a60a3b16"},{"commit":{"message":"8308503: AArch64: SIGILL when running with -XX:UseBranchProtection=pac-ret on hardware without PAC feature\n\nWhen revisiting the behavior of UseBranchProtection [1], we get one\nSIGILL error when running with -XX:UseBranchProtection=pac-ret on\nhardware without PAC.\n\nProblem:\n\nWe build and run `java --version` with the following configuration\nmatrix `Config X VMoption X Machine`.\n\n```\n  Config = {--enable-branch-protection, null}\n  VMoption = {-XX:UseBranchProtection=pac-ret, -XX:UseBranchProtection=standard}\n  Machine = {w\/ PAC, w\/o PAC}\n```\n\nVM crashes with SIGILL error for configure `Config=null,\nVMoption=pac-ret, Machine=w\/o PAC`. The unrecognized instruction is\n`pacia x30, x29`, i.e. `pacia(lr, rfp)` generated by function\n`MacroAssembler::protect_return_address()`. [2]\n\nRoot cause:\n\n1. Instruction `pacia` is not in the NOP space. That's why `Config=null,\n  VMoption=pac-ret` passes on hardware w\/ PAC, but fails on hardware\n  w\/o PAC.\n\n2. -XX:UseBranchProtection=pac-ret behaves differently from the document\n[3], i.e.\n\n```\n  In order to use Branch Protection features in the VM,\n  --enable-branch-protection must be used\n```\n\n`_rop_protection` is not turned off for `Config=null`. That's why\n`VMoption=pac-ret, Machine=w\/o PAC` passes with\n`Config=--enable-branch-protection` but fails with `Config=null`.\n\nFix:\n\nThis patch refines the parsing of -XX:UseBranchProtection=pac-ret:\n\n1. We handle \"pac-ret\" and \"standard\" in the same way, since only one\ntype of branch protection is implemented for now, i.e. \"pac-ret\". We may\nupdate \"standard\" in the future if \"bti\" protection is added.\n\n2. `_rop_protection` is not turned on unless all the three conditions\nare satisfied [4]. Otherwise, it's kept off and one warning message is\nemitted.\n\n```\n\/\/ Enable PAC if this code has been built with branch-protection, the\n\/\/ CPU\/OS supports it, and incompatible preview features aren't enabled.\n```\n\n[1] https:\/\/bugs.openjdk.org\/browse\/JDK-8287325?focusedCommentId=14581099&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-14581099\n[2] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp#L5976\n[3] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/building.md#branch-protection\n[4] https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp#L457"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp"}],"sha":"4d2358b07db6f8beda36c72f44765cc85897e794"}]