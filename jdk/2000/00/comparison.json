{"files":[{"patch":"@@ -155,1 +155,1 @@\n-                                                    \/*strict*\/ false,\n+                                                    \/*strict*\/ descriptor.isAutomatic(),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModulePatcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,0 +186,61 @@\n+    \/**\n+     * Test using --patch-module with main class in a new package in the patch\n+     *\n+     * The consists of 1 module:\n+     *\n+     * somelib - dummy automatic module.\n+     *\n+     * And one patch:\n+     *\n+     * somelibTest - contains the test logic to test somelib\n+     *\n+     * The test patches somelib with somelibTest.\n+     * @bug 8259395\n+     *\/\n+\n+    public void testPatchModule() throws Exception {\n+        boolean compiled;\n+\n+        Path somelibSrc = SRC_DIR.resolve(\"somelib\");\n+        Path somelibClasses = CLASSES_DIR.resolve(\"somelib\");\n+\n+        Path somelibTestSrc = SRC_DIR.resolve(\"somelibTest\");\n+        Path somelibTestClasses = CLASSES_DIR.resolve(\"somelibTest\");\n+\n+        String testModule = \"somelib\";\n+        String mainClass = \"somelib.test.TestMain\";\n+\n+        Path somelibJar = MODS_DIR.resolve(\"somelib-0.19.jar\");\n+\n+        \/\/ create mods\/somelib-0.19.jar\n+\n+        compiled = CompilerUtils.compile(somelibSrc, somelibClasses);\n+        assertTrue(compiled);\n+\n+        JarUtils.createJarFile(somelibJar, somelibClasses);\n+\n+\n+        \/\/ compile patch\n+\n+        compiled = CompilerUtils.compile(somelibTestSrc, somelibTestClasses,\n+                        \"--module-path\", MODS_DIR.toString(),\n+                        \"--add-modules\", testModule,\n+                        \"--patch-module\", testModule + \"=\" + somelibTestClasses);\n+\n+        assertTrue(compiled);\n+\n+\n+        \/\/ launch the test\n+\n+        int exitValue\n+            = executeTestJava(\"--module-path\", somelibJar.toString(),\n+                              \"--patch-module\", testModule + \"=\" + somelibTestClasses,\n+                              \"-m\", testModule + \"\/\" + mainClass)\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n+\n+        assertTrue(exitValue == 0);\n+\n+    }\n+\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/RunWithAutomaticModules.java","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package somelib;\n+\n+public class Dummy {\n+    public static boolean returnTrue() {\n+        return true;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/src\/somelib\/somelib\/Dummy.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package somelib.test;\n+\n+import somelib.Dummy;\n+\n+import java.lang.module.ModuleDescriptor;\n+\n+\/**\n+ * This test is modelled to use --patch-module to gain access to non-exported internals.\n+ *\/\n+\n+public class TestMain {\n+    public static void main(String[] args) {\n+        ModuleDescriptor ownDesc = TestMain.class.getModule().getDescriptor();\n+\n+        assertThat(ownDesc.isAutomatic(), \"Expected to be executed in an automatic module\");\n+        assertThat(ownDesc.requires().stream().anyMatch(\n+                r -> r.name().equals(\"java.base\") && r.modifiers().contains(ModuleDescriptor.Requires.Modifier.MANDATED)),\n+                \"requires mandated java.base\");\n+        assertThat(Dummy.returnTrue(), \"Dummy.returnTrue returns true\");\n+    }\n+\n+    private static void assertThat(boolean expected, String message) {\n+        if (!expected)\n+            throw new AssertionError(message);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/src\/somelibTest\/somelib\/test\/TestMain.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}