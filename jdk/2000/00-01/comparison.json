{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,61 +186,0 @@\n-    \/**\n-     * Test using --patch-module with main class in a new package in the patch\n-     *\n-     * The consists of 1 module:\n-     *\n-     * somelib - dummy automatic module.\n-     *\n-     * And one patch:\n-     *\n-     * somelibTest - contains the test logic to test somelib\n-     *\n-     * The test patches somelib with somelibTest.\n-     * @bug 8259395\n-     *\/\n-\n-    public void testPatchModule() throws Exception {\n-        boolean compiled;\n-\n-        Path somelibSrc = SRC_DIR.resolve(\"somelib\");\n-        Path somelibClasses = CLASSES_DIR.resolve(\"somelib\");\n-\n-        Path somelibTestSrc = SRC_DIR.resolve(\"somelibTest\");\n-        Path somelibTestClasses = CLASSES_DIR.resolve(\"somelibTest\");\n-\n-        String testModule = \"somelib\";\n-        String mainClass = \"somelib.test.TestMain\";\n-\n-        Path somelibJar = MODS_DIR.resolve(\"somelib-0.19.jar\");\n-\n-        \/\/ create mods\/somelib-0.19.jar\n-\n-        compiled = CompilerUtils.compile(somelibSrc, somelibClasses);\n-        assertTrue(compiled);\n-\n-        JarUtils.createJarFile(somelibJar, somelibClasses);\n-\n-\n-        \/\/ compile patch\n-\n-        compiled = CompilerUtils.compile(somelibTestSrc, somelibTestClasses,\n-                        \"--module-path\", MODS_DIR.toString(),\n-                        \"--add-modules\", testModule,\n-                        \"--patch-module\", testModule + \"=\" + somelibTestClasses);\n-\n-        assertTrue(compiled);\n-\n-\n-        \/\/ launch the test\n-\n-        int exitValue\n-            = executeTestJava(\"--module-path\", somelibJar.toString(),\n-                              \"--patch-module\", testModule + \"=\" + somelibTestClasses,\n-                              \"-m\", testModule + \"\/\" + mainClass)\n-                .outputTo(System.out)\n-                .errorTo(System.out)\n-                .getExitValue();\n-\n-        assertTrue(exitValue == 0);\n-\n-    }\n-\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/RunWithAutomaticModules.java","additions":1,"deletions":62,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @modules jdk.compiler\n+ *          java.scripting\n+ *          jdk.zipfs\n+ * @build PatchTest\n+ *        jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.util.JarUtils\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run testng PatchTest\n+ * @bug 8259395\n+ * @summary Runs tests that make use of automatic modules\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.util.JarUtils;\n+import static jdk.test.lib.process.ProcessTools.*;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+@Test\n+public class PatchTest {\n+\n+    private static final String MODULE_NAME = \"somelib\";\n+    private static final String PATCH_NAME = \"somelibTest\";\n+    private static final String MAIN_CLASS = \"somelib.test.TestMain\";\n+\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+\n+    private static final Path SOMELIB_SRC = Paths.get(TEST_SRC, MODULE_NAME);\n+    private static final Path SOMELIB_TEST_SRC = Paths.get(TEST_SRC, PATCH_NAME);\n+    private static final Path SOMELIB_CLASSES = Paths.get(\"classes\", MODULE_NAME);\n+    private static final Path SOMELIB_TEST_CLASSES = Paths.get(\"classes\", PATCH_NAME);\n+    private static final Path SOMELIB_JAR = Paths.get(\"mods\", MODULE_NAME + \"-0.19.jar\");\n+\n+    \/**\n+     * Test using --patch-module with main class in a new package in the patch\n+     *\n+     * The consists of 1 module:\n+     *\n+     * somelib - dummy automatic module.\n+     *\n+     * And one patch:\n+     *\n+     * somelibTest - contains the test logic to test somelib\n+     *\n+     * The test patches somelib with somelibTest.\n+     *\/\n+\n+    public void testPatchModule() throws Exception {\n+        boolean compiled;\n+\n+        \/\/ create mods\/somelib-0.19.jar\n+\n+        compiled = CompilerUtils.compile(SOMELIB_SRC, SOMELIB_CLASSES);\n+        assertTrue(compiled);\n+\n+        JarUtils.createJarFile(SOMELIB_JAR, SOMELIB_CLASSES);\n+\n+\n+        \/\/ compile patch\n+\n+        compiled = CompilerUtils.compile(SOMELIB_TEST_SRC, SOMELIB_TEST_CLASSES,\n+                        \"--module-path\", SOMELIB_JAR.toString(),\n+                        \"--add-modules\", MODULE_NAME,\n+                        \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_TEST_CLASSES);\n+\n+        assertTrue(compiled);\n+\n+\n+        \/\/ launch the test\n+\n+        int exitValue\n+            = executeTestJava(\"--module-path\", SOMELIB_JAR.toString(),\n+                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_TEST_CLASSES,\n+                              \"-m\", MODULE_NAME + \"\/\" + MAIN_CLASS)\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n+\n+        assertTrue(exitValue == 0);\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/PatchTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/somelib\/somelib\/Dummy.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/src\/somelib\/somelib\/Dummy.java","status":"renamed"},{"patch":"","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/somelibTest\/somelib\/test\/TestMain.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/src\/somelibTest\/somelib\/test\/TestMain.java","status":"renamed"}]}