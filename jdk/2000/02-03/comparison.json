{"files":[{"patch":"@@ -28,2 +28,0 @@\n- *          java.scripting\n- *          jdk.zipfs\n@@ -39,0 +37,2 @@\n+import java.io.File;\n+import java.util.List;\n@@ -41,1 +41,0 @@\n-import java.nio.file.Paths;\n@@ -48,0 +47,1 @@\n+import org.testng.annotations.BeforeClass;\n@@ -50,1 +50,0 @@\n-@Test\n@@ -53,0 +52,2 @@\n+    private static final String APP_NAME = \"myapp\";\n+\n@@ -54,2 +55,7 @@\n-    private static final String PATCH_NAME = \"somelibTest\";\n-    private static final String MAIN_CLASS = \"somelib.test.TestMain\";\n+\n+    private static final String PATCH1_NAME = \"patch1\";\n+    private static final String PATCH2_NAME = \"patch2\";\n+\n+    private static final String APP_MAIN = \"myapp.Main\";\n+    private static final String PATCH1_MAIN = \"somelib.test.TestMain\";\n+    private static final String PATCH2_MAIN = \"somelib.Dummy\";\n@@ -59,5 +65,11 @@\n-    private static final Path SOMELIB_SRC = Paths.get(TEST_SRC, MODULE_NAME);\n-    private static final Path SOMELIB_TEST_SRC = Paths.get(TEST_SRC, PATCH_NAME);\n-    private static final Path SOMELIB_CLASSES = Paths.get(\"classes\", MODULE_NAME);\n-    private static final Path SOMELIB_TEST_CLASSES = Paths.get(\"classes\", PATCH_NAME);\n-    private static final Path SOMELIB_JAR = Paths.get(\"mods\", MODULE_NAME + \"-0.19.jar\");\n+    private static final Path APP_SRC = Path.of(TEST_SRC, APP_NAME);\n+    private static final Path APP_CLASSES = Path.of(\"classes\", APP_NAME);\n+    private static final Path SOMELIB_SRC = Path.of(TEST_SRC, MODULE_NAME);\n+    private static final Path SOMELIB_PATCH1_SRC = Path.of(TEST_SRC, PATCH1_NAME);\n+    private static final Path SOMELIB_PATCH2_SRC = Path.of(TEST_SRC, PATCH2_NAME);\n+    private static final Path SOMELIB_CLASSES = Path.of(\"classes\", MODULE_NAME);\n+    private static final Path SOMELIB_PATCH1_CLASSES = Path.of(\"classes\", PATCH1_NAME);\n+    private static final Path SOMELIB_PATCH2_CLASSES = Path.of(\"classes\", PATCH2_NAME);\n+    private static final Path SOMELIB_JAR = Path.of(\"mods\", MODULE_NAME + \"-0.19.jar\");\n+\n+    private static final String MODULE_PATH = String.join(File.pathSeparator, SOMELIB_JAR.toString(), APP_CLASSES.toString());\n@@ -68,1 +80,1 @@\n-     * The consists of 1 module:\n+     * The consists of 2 modules:\n@@ -71,0 +83,1 @@\n+     * myapp - explicit module, uses somelib\n@@ -72,1 +85,1 @@\n-     * And one patch:\n+     * And two patches:\n@@ -74,1 +87,2 @@\n-     * somelibTest - contains the test logic to test somelib\n+     * patch1 - adds an additional package.\n+     * patch2 - only replaces existing classes.\n@@ -76,1 +90,0 @@\n-     * The test patches somelib with somelibTest.\n@@ -78,2 +91,2 @@\n-\n-    public void testPatchModule() throws Exception {\n+    @BeforeClass\n+    public void compile() throws Exception {\n@@ -90,1 +103,6 @@\n-        \/\/ compile patch\n+        \/\/ compile patch 1\n+        compiled = CompilerUtils.compile(SOMELIB_PATCH1_SRC, SOMELIB_PATCH1_CLASSES,\n+                        \"--module-path\", SOMELIB_JAR.toString(),\n+                        \"--add-modules\", MODULE_NAME,\n+                        \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH1_SRC);\n+        assertTrue(compiled);\n@@ -92,1 +110,2 @@\n-        compiled = CompilerUtils.compile(SOMELIB_TEST_SRC, SOMELIB_TEST_CLASSES,\n+        \/\/ compile patch 2\n+        compiled = CompilerUtils.compile(SOMELIB_PATCH2_SRC, SOMELIB_PATCH2_CLASSES,\n@@ -95,1 +114,2 @@\n-                        \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_TEST_CLASSES);\n+                        \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH2_SRC);\n+        assertTrue(compiled);\n@@ -97,0 +117,3 @@\n+        \/\/ compile app\n+        compiled = CompilerUtils.compile(APP_SRC, APP_CLASSES,\n+                        \"--module-path\", SOMELIB_JAR.toString());\n@@ -98,0 +121,14 @@\n+    }\n+\n+    @Test\n+    public void modulePathExtend() throws Exception {\n+        int exitValue\n+            = executeTestJava(\"--module-path\", MODULE_PATH,\n+                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH1_CLASSES,\n+                              \"-m\", APP_NAME + \"\/\" + APP_MAIN, \"patch1\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n+\n+        assertTrue(exitValue == 0);\n+    }\n@@ -99,0 +136,9 @@\n+    @Test\n+    public void modulePathAugment() throws Exception {\n+        int exitValue\n+            = executeTestJava(\"--module-path\", MODULE_PATH,\n+                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH2_CLASSES,\n+                              \"-m\", APP_NAME + \"\/\" + APP_MAIN, \"patch2\")\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n@@ -100,1 +146,2 @@\n-        \/\/ launch the test\n+        assertTrue(exitValue == 0);\n+    }\n@@ -102,0 +149,2 @@\n+    @Test\n+    public void rootModuleExtend() throws Exception {\n@@ -104,2 +153,2 @@\n-                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_TEST_CLASSES,\n-                              \"-m\", MODULE_NAME + \"\/\" + MAIN_CLASS)\n+                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH1_CLASSES,\n+                              \"-m\", MODULE_NAME + \"\/\" + PATCH1_MAIN)\n@@ -111,0 +160,11 @@\n+    }\n+\n+    @Test\n+    public void rootModuleAugment() throws Exception {\n+        int exitValue\n+            = executeTestJava(\"--module-path\", SOMELIB_JAR.toString(),\n+                              \"--patch-module\", MODULE_NAME + \"=\" + SOMELIB_PATCH2_CLASSES,\n+                              \"-m\", MODULE_NAME + \"\/\" + PATCH2_MAIN)\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .getExitValue();\n@@ -112,0 +172,1 @@\n+        assertTrue(exitValue == 0);\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/PatchTest.java","additions":84,"deletions":23,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -0,0 +1,3 @@\n+module myapp {\n+    requires somelib;\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/myapp\/module-info.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package myapp;\n+\n+import somelib.Invariants;\n+\n+\/**\n+ * This test is modelled to use --patch-module to gain access to non-exported internals.\n+ *\/\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        Invariants.test(args[0]);\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/myapp\/myapp\/Main.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package somelib;\n+\n+\/\/ This class will be patched\n+public class PatchInfo {\n+\n+    public static String patchName() {\n+        return \"patch1\";\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/patch1\/somelib\/PatchInfo.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package somelib.test;\n+\n+import somelib.Invariants;\n+\n+\/**\n+ * This test is modelled to use --patch-module to gain access to non-exported internals.\n+ *\/\n+\n+public class TestMain {\n+    public static void main(String[] args) {\n+        Invariants.test(\"patch1\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/patch1\/somelib\/test\/TestMain.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package somelib;\n+\n+public class Dummy {\n+    public static boolean returnTrue() {\n+        return true;\n+    }\n+\n+    public static void main(String[] args) {\n+        Invariants.test(\"patch2\");\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/patch2\/somelib\/Dummy.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package somelib;\n+\n+\/\/ This class will be patched\n+public class PatchInfo {\n+\n+    public static String patchName() {\n+        return \"patch2\";\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/patch2\/somelib\/PatchInfo.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package somelib;\n+\n+import java.lang.module.ModuleDescriptor;\n+\n+public class Invariants {\n+    public static void test(String expectPatch) {\n+        ModuleDescriptor ownDesc = Invariants.class.getModule().getDescriptor();\n+\n+        assertThat(ownDesc.isAutomatic(), \"Expected to be executed in an automatic module\");\n+        assertThat(ownDesc.requires().stream().anyMatch(\n+                r -> r.name().equals(\"java.base\") && r.modifiers().contains(ModuleDescriptor.Requires.Modifier.MANDATED)),\n+                \"requires mandated java.base\");\n+        assertThat(Dummy.returnTrue(), \"Dummy.returnTrue returns true\");\n+        assertThat(expectPatch.equals(PatchInfo.patchName()), \"Module is patched with the right patch\");\n+    }\n+\n+    private static void assertThat(boolean expected, String message) {\n+        if (!expected) {\n+            throw new AssertionError(message);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/somelib\/somelib\/Invariants.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package somelib;\n+\n+\/\/ This class will be patched\n+public class PatchInfo {\n+\n+    public static String patchName() {\n+        return \"original\";\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/somelib\/somelib\/PatchInfo.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package somelib.test;\n-\n-import somelib.Dummy;\n-\n-import java.lang.module.ModuleDescriptor;\n-\n-\/**\n- * This test is modelled to use --patch-module to gain access to non-exported internals.\n- *\/\n-\n-public class TestMain {\n-    public static void main(String[] args) {\n-        ModuleDescriptor ownDesc = TestMain.class.getModule().getDescriptor();\n-\n-        assertThat(ownDesc.isAutomatic(), \"Expected to be executed in an automatic module\");\n-        assertThat(ownDesc.requires().stream().anyMatch(\n-                r -> r.name().equals(\"java.base\") && r.modifiers().contains(ModuleDescriptor.Requires.Modifier.MANDATED)),\n-                \"requires mandated java.base\");\n-        assertThat(Dummy.returnTrue(), \"Dummy.returnTrue returns true\");\n-    }\n-\n-    private static void assertThat(boolean expected, String message) {\n-        if (!expected)\n-            throw new AssertionError(message);\n-    }\n-}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/automatic\/somelibTest\/somelib\/test\/TestMain.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"}]}