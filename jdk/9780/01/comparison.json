{"files":[{"patch":"@@ -516,1 +516,1 @@\n-        for (String loc : Arrays.asList(\"en\", \"ja\", \"zh_CN\")) {\n+        for (String loc : Arrays.asList(\"de\", \"en\", \"ja\", \"zh_CN\")) {\n@@ -518,3 +518,3 @@\n-            try (InputStream is = OverridableResource.readDefault(fname)) {\n-                Files.copy(is, CONFIG_ROOT.fetchFrom(params).resolve(fname));\n-            }\n+            createResource(fname, params)\n+                    .setCategory(I18N.getString(\"resource.wxl-file\"))\n+                    .saveToFile(configDir.resolve(fname));\n@@ -566,4 +566,20 @@\n-        final Path primaryWxlFile = CONFIG_ROOT.fetchFrom(params).resolve(\n-                I18N.getString(\"resource.wxl-file-name\")).toAbsolutePath();\n-\n-        wixPipeline.addLightOptions(\"-loc\", primaryWxlFile.toString());\n+        \/\/ Filter out custom l10n files that were already used to\n+        \/\/ override primary l10n files. Ignore case filename comparison,\n+        \/\/ both lists are expected to be short.\n+        List<Path> primaryWxlFiles = getWxlFilesFromDir(params, CONFIG_ROOT);\n+        List<Path> customWxlFiles = getWxlFilesFromDir(params, RESOURCE_DIR).stream()\n+                .filter(custom -> primaryWxlFiles.stream().noneMatch(primary ->\n+                        primary.getFileName().toString().equalsIgnoreCase(\n+                                custom.getFileName().toString())))\n+                .peek(custom -> Log.verbose(MessageFormat.format(\n+                        I18N.getString(\"message.using-custom-resource\"),\n+                                String.format(\"[%s]\", I18N.getString(\"resource.wxl-file\")),\n+                                custom.getFileName().toString())))\n+                .toList();\n+\n+        \/\/ All l10n files are supplied to WiX with \"-loc\", but only\n+        \/\/ Cultures from custom files and a single primary Culture are\n+        \/\/ included into \"-cultures\" list\n+        for (var wxl : primaryWxlFiles) {\n+            wixPipeline.addLightOptions(\"-loc\", wxl.toAbsolutePath().normalize().toString());\n+        }\n@@ -572,2 +588,2 @@\n-        for (var wxl : getCustomWxlFiles(params)) {\n-            wixPipeline.addLightOptions(\"-loc\", wxl.toAbsolutePath().toString());\n+        for (var wxl : customWxlFiles) {\n+            wixPipeline.addLightOptions(\"-loc\", wxl.toAbsolutePath().normalize().toString());\n@@ -576,0 +592,4 @@\n+\n+        \/\/ Append a primary culture bases on runtime locale.\n+        final Path primaryWxlFile = CONFIG_ROOT.fetchFrom(params).resolve(\n+                I18N.getString(\"resource.wxl-file-name\"));\n@@ -589,4 +609,4 @@\n-    private static List<Path> getCustomWxlFiles(Map<String, ? super Object> params)\n-            throws IOException {\n-        Path resourceDir = RESOURCE_DIR.fetchFrom(params);\n-        if (resourceDir == null) {\n+    private static List<Path> getWxlFilesFromDir(Map<String, ? super Object> params,\n+            StandardBundlerParam<Path> pathParam) throws IOException {\n+        Path dir = pathParam.fetchFrom(params);\n+        if (dir == null) {\n@@ -600,1 +620,1 @@\n-        try (var walk = Files.walk(resourceDir, 1)) {\n+        try (var walk = Files.walk(dir, 1)) {\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":35,"deletions":15,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+resource.wxl-file=WiX localization file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+resource.wxl-file=WiX localization file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+resource.wxl-file=WiX localization file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+resource.wxl-file=WiX localization file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,0 +64,16 @@\n+    \/\/ Tests have problems on windows where path in the temp dir are too long\n+    \/\/ for the wix tools.  We can't use a tempDir outside the TKit's WorkDir, so\n+    \/\/ we minimize both the tempRoot directory name (above) and the tempDir name\n+    \/\/ (below) to the extension part (which is necessary to differenciate between\n+    \/\/ the multiple PackageTypes that will be run for one JPackageCommand).\n+    \/\/ It might be beter if the whole work dir name was shortened from:\n+    \/\/ jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java.\n+    public static Path getTempDirectory(JPackageCommand cmd, Path tempRoot) {\n+        String ext = cmd.outputBundle().getFileName().toString();\n+        int i = ext.lastIndexOf(\".\");\n+        if (i > 0 && i < (ext.length() - 1)) {\n+            ext = ext.substring(i+1);\n+        }\n+        return tempRoot.resolve(ext);\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+import static jdk.jpackage.test.WindowsHelper.getTempDirectory;\n+\n@@ -276,15 +278,0 @@\n-        \/\/ This Test has problems on windows where path in the temp dir are too long\n-        \/\/ for the wix tools.  We can't use a tempDir outside the TKit's WorkDir, so\n-        \/\/ we minimize both the tempRoot directory name (above) and the tempDir name\n-        \/\/ (below) to the extension part (which is necessary to differenciate between\n-        \/\/ the multiple PackageTypes that will be run for one JPackageCommand).\n-        \/\/ It might be beter if the whole work dir name was shortened from:\n-        \/\/ jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java.\n-        Function<JPackageCommand, Path> getTempDir = cmd -> {\n-            String ext = cmd.outputBundle().getFileName().toString();\n-            int i = ext.lastIndexOf(\".\");\n-            if (i > 0 && i < (ext.length() - 1)) {\n-                ext = ext.substring(i+1);\n-            }\n-            return tempRoot.resolve(ext);\n-        };\n@@ -298,1 +285,1 @@\n-                Path tempDir = getTempDir.apply(cmd);\n+                Path tempDir = getTempDirectory(cmd, tempRoot);\n@@ -311,1 +298,1 @@\n-            Path tempDir = getTempDir.apply(cmd);\n+            Path tempDir = getTempDirectory(cmd, tempRoot);\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/BasicTest.java","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.nio.file.Files;\n@@ -31,0 +32,2 @@\n+\n+import java.util.Arrays;\n@@ -34,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -37,0 +39,2 @@\n+import static jdk.jpackage.test.WindowsHelper.getTempDirectory;\n+\n@@ -91,1 +95,4 @@\n-            }, null, null}\n+            }, null, null},\n+            {new WixFileInitializer[] {\n+                WixFileInitializer.create(\"MsiInstallerStrings_de.wxl\", \"de\")\n+            }, \"en-us\", null},\n@@ -95,1 +102,1 @@\n-    private final static Stream<String> getLightCommandLine(\n+    private static Stream<String> getLightCommandLine(\n@@ -104,0 +111,7 @@\n+    private static List<TKit.TextStreamVerifier> createDefaultL10nFilesLocVerifiers(Path tempDir) {\n+        return Arrays.stream(DEFAULT_L10N_FILES).map(loc ->\n+                TKit.assertTextStream(\"-loc \" + tempDir.resolve(\n+                        String.format(\"config\/MsiInstallerStrings_%s.wxl\", loc)).normalize()))\n+                .toList();\n+    }\n+\n@@ -106,0 +120,1 @@\n+        final Path tempRoot = TKit.createTempDirectory(\"tmp\");\n@@ -122,0 +137,3 @@\n+            Path tempDir = getTempDirectory(cmd, tempRoot);\n+            Files.createDirectories(tempDir.getParent());\n+            cmd.addArguments(\"--temp\", tempDir.toString());\n@@ -137,2 +155,8 @@\n-                        v.createCmdOutputVerifier(resourceDir).apply(\n-                                getLightCommandLine(result));\n+                        if (!v.name.startsWith(\"MsiInstallerStrings_\")) {\n+                            v.createCmdOutputVerifier(resourceDir).apply(\n+                                    getLightCommandLine(result));\n+                        }\n+                    }\n+                    Path tempDir = getTempDirectory(cmd, tempRoot).toAbsolutePath();\n+                    for (var v : createDefaultL10nFilesLocVerifiers(tempDir)) {\n+                        v.apply(getLightCommandLine(result));\n@@ -171,1 +195,1 @@\n-    final private WixFileInitializer wxlFileInitializers[];\n+    final private WixFileInitializer[] wxlFileInitializers;\n@@ -224,1 +248,1 @@\n-                    root.resolve(name).toAbsolutePath().toString());\n+                    \"-loc \" + root.resolve(name).toAbsolutePath().normalize());\n@@ -239,0 +263,2 @@\n+\n+    private static final String[] DEFAULT_L10N_FILES = { \"de\", \"en\", \"ja\", \"zh_CN\" };\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinL10nTest.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"}]}