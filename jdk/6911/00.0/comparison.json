{"files":[{"patch":"@@ -3097,2 +3097,1 @@\n-  \/\/ subkeyHtbl_48_entries = c_rarg7 (not used)\n-  \/\/ counter = [sp, #0] pointer to 16 bytes of CTR\n+  \/\/ counter = c_rarg7 - 16 bytes of CTR\n@@ -3124,3 +3123,0 @@\n-    \/\/ Pointer to CTR is passed on the stack before the (fp, lr) pair.\n-    const Address counter_mem(sp, 2 * wordSize);\n-    __ ldr(counter, counter_mem);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4583,1 +4583,2 @@\n-    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant);\n+    uint x_idx = $idx$$constant & right_n_bits(2);\n+    __ insertps($dst$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4603,1 +4604,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4609,1 +4610,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -804,0 +804,5 @@\n+\n+        if (existing_value != new_state->local_at(index) && existing_value->as_Phi() == NULL) {\n+          TRACE_PHI(tty->print_cr(\"required phi for local %d is missing, irreducible loop?\", index));\n+          return false; \/\/ BAILOUT in caller\n+        }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-  nmethod::oops_do_marking_prologue();\n@@ -90,4 +89,0 @@\n-ShenandoahCodeCacheRoots::~ShenandoahCodeCacheRoots() {\n-  nmethod::oops_do_marking_epilogue();\n-}\n-\n@@ -230,26 +225,49 @@\n-   ShenandoahRootProcessor(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _thread_roots(ShenandoahPhaseTimings::heap_iteration_roots, false \/*is par*\/),\n-   _vm_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, n_workers, true \/*heap iteration*\/),\n-   _weak_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n-   _code_roots(ShenandoahPhaseTimings::heap_iteration_roots) {\n- }\n-\n- void ShenandoahHeapIterationRootScanner::roots_do(OopClosure* oops) {\n-   \/\/ Must use _claim_other to avoid interfering with concurrent CLDG iteration\n-   CLDToOopClosure clds(oops, ClassLoaderData::_claim_other);\n-   MarkingCodeBlobClosure code(oops, !CodeBlobToOopClosure::FixRelocations);\n-   ShenandoahParallelOopsDoThreadClosure tc_cl(oops, &code, NULL);\n-   AlwaysTrueClosure always_true;\n-\n-   ResourceMark rm;\n-\n-   \/\/ Process light-weight\/limited parallel roots then\n-   _vm_roots.oops_do(oops, 0);\n-   _weak_roots.oops_do<OopClosure>(oops, 0);\n-   _cld_roots.cld_do(&clds, 0);\n-\n-   \/\/ Process heavy-weight\/fully parallel roots the last\n-   _code_roots.code_blobs_do(&code, 0);\n-   _thread_roots.threads_do(&tc_cl, 0);\n- }\n+  ShenandoahRootProcessor(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _thread_roots(ShenandoahPhaseTimings::heap_iteration_roots, false \/*is par*\/),\n+  _vm_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _cld_roots(ShenandoahPhaseTimings::heap_iteration_roots, n_workers, true \/*heap iteration*\/),\n+  _weak_roots(ShenandoahPhaseTimings::heap_iteration_roots),\n+  _code_roots(ShenandoahPhaseTimings::heap_iteration_roots) {\n+}\n+\n+class ShenandoahMarkCodeBlobClosure : public CodeBlobClosure {\n+private:\n+  OopClosure* const _oops;\n+  BarrierSetNMethod* const _bs_nm;\n+\n+public:\n+  ShenandoahMarkCodeBlobClosure(OopClosure* oops) :\n+    _oops(oops),\n+    _bs_nm(BarrierSet::barrier_set()->barrier_set_nmethod()) {}\n+\n+  virtual void do_code_blob(CodeBlob* cb) {\n+    nmethod* const nm = cb->as_nmethod_or_null();\n+    if (nm != nullptr) {\n+      if (_bs_nm != nullptr) {\n+        \/\/ Make sure it only sees to-space objects\n+        _bs_nm->nmethod_entry_barrier(nm);\n+      }\n+      ShenandoahNMethod* const snm = ShenandoahNMethod::gc_data(nm);\n+      assert(snm != nullptr, \"Sanity\");\n+      snm->oops_do(_oops, false \/*fix_relocations*\/);\n+    }\n+  }\n+};\n+\n+void ShenandoahHeapIterationRootScanner::roots_do(OopClosure* oops) {\n+  \/\/ Must use _claim_other to avoid interfering with concurrent CLDG iteration\n+  CLDToOopClosure clds(oops, ClassLoaderData::_claim_other);\n+  ShenandoahMarkCodeBlobClosure code(oops);\n+  ShenandoahParallelOopsDoThreadClosure tc_cl(oops, &code, NULL);\n+\n+  ResourceMark rm;\n+\n+  \/\/ Process light-weight\/limited parallel roots then\n+  _vm_roots.oops_do(oops, 0);\n+  _weak_roots.oops_do<OopClosure>(oops, 0);\n+  _cld_roots.cld_do(&clds, 0);\n+\n+  \/\/ Process heavy-weight\/fully parallel roots the last\n+  _code_roots.code_blobs_do(&code, 0);\n+  _thread_roots.threads_do(&tc_cl, 0);\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":49,"deletions":31,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  ~ShenandoahCodeCacheRoots();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3761,1 +3761,1 @@\n-          CallNode *call = n->in(0)->in(0)->as_Call();\n+          CallNode* call = n->in(0)->in(0)->as_Call();\n@@ -3770,1 +3770,1 @@\n-            Node *arg0 = call->in(TypeFunc::Parms);\n+            Node* arg0 = call->in(TypeFunc::Parms);\n@@ -3775,3 +3775,2 @@\n-          } else if (call->entry_point() == OptoRuntime::new_array_Java() &&\n-                     call->req() > TypeFunc::Parms+1 &&\n-                     call->is_CallStaticJava()) {\n+          } else if (call->entry_point() == OptoRuntime::new_array_Java() ||\n+                     call->entry_point() == OptoRuntime::new_array_nozero_Java()) {\n@@ -3781,3 +3780,5 @@\n-            Node *arg1 = call->in(TypeFunc::Parms+1);\n-            if (arg1->is_Type() &&\n-                arg1->as_Type()->type()->join(TypeInt::POS)->empty()) {\n+            assert(call->is_CallStaticJava(), \"static call expected\");\n+            assert(call->len() > call->req() && call->in(call->req()) != NULL, \"no precendent edge\");\n+            Node* valid_length_test = call->in(call->req());\n+            call->rm_prec(call->req());\n+            if (valid_length_test->find_int_con(1) == 0) {\n@@ -3786,0 +3787,2 @@\n+            assert(n->outcnt() == required_outcnt, \"malformed control flow\");\n+            continue;\n@@ -3794,0 +3797,7 @@\n+    } else if (n->is_PCTable() && n->in(0) && n->in(0)->in(0) && n->in(0)->in(0)->is_Call()) {\n+      CallNode* call = n->in(0)->in(0)->as_Call();\n+      if (call->entry_point() == OptoRuntime::new_array_Java() ||\n+          call->entry_point() == OptoRuntime::new_array_nozero_Java()) {\n+        assert(call->len() > call->req() && call->in(call->req()) != NULL, \"precedent edge expected\");\n+        call->rm_prec(call->req());\n+      }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -6798,1 +6798,1 @@\n-      return false;\n+    return false;\n@@ -6814,1 +6814,0 @@\n-\n@@ -6820,16 +6819,0 @@\n-  ciKlass* klass = ciTypeArrayKlass::make(T_LONG);\n-  Node* klass_node = makecon(TypeKlassPtr::make(klass));\n-\n-  \/\/ Does this target support this intrinsic?\n-  if (Matcher::htbl_entries == -1) return false;\n-\n-  Node* subkeyHtbl_48_entries_start;\n-  if (Matcher::htbl_entries != 0) {\n-    \/\/ new array to hold 48 computed htbl entries\n-    Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n-    if (subkeyHtbl_48_entries == NULL) return false;\n-    subkeyHtbl_48_entries_start = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n-  } else {\n-    \/\/ This target doesn't need the extra-large Htbl.\n-    subkeyHtbl_48_entries_start = ConvL2X(intcon(0));\n-  }\n@@ -6841,1 +6824,1 @@\n-                               in_start, len, ct_start, out_start, k_start, state_start, subkeyHtbl_start, subkeyHtbl_48_entries_start, cnt_start);\n+                               in_start, len, ct_start, out_start, k_start, state_start, subkeyHtbl_start, cnt_start);\n@@ -6846,0 +6829,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}