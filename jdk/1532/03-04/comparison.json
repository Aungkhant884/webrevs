{"files":[{"patch":"@@ -2399,1 +2399,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -2440,0 +2440,4 @@\n+bool Matcher::supports_vector_variable_rotates(VectorNode *n) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -981,1 +981,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1000,0 +1000,4 @@\n+bool Matcher::supports_vector_variable_rotates(VectorNode *n) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2141,1 +2141,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -2156,0 +2156,4 @@\n+bool Matcher::supports_vector_variable_rotates(VectorNode *n) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1538,1 +1538,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1553,0 +1553,4 @@\n+bool Matcher::supports_vector_variable_rotates(VectorNode *n) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1557,1 +1557,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n@@ -1817,0 +1817,5 @@\n+bool Matcher::supports_vector_variable_rotates(VectorNode *n) {\n+  BasicType bt = n->vect_type()->element_basic_type();\n+  return match_rule_supported_vector(n->Opcode(), n->length(), bt);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -316,11 +316,0 @@\n-  static const int MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO  = 0;\n-  static const int MATCH_RULE_SUPPORT_VECTOR_INITIAL_EXTINFO = 1;\n-\n-  static const bool match_rule_supported_vector_has_extinfo(int extinfo) {\n-    return extinfo != MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO;\n-  }\n-\n-  static const int match_rule_supported_vector_init_extinfo(void) {\n-    return MATCH_RULE_SUPPORT_VECTOR_INITIAL_EXTINFO;\n-  }\n-\n@@ -329,2 +318,1 @@\n-  static const bool match_rule_supported_vector(int opcode, int vlen, BasicType bt,\n-                      int ext = MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO);\n+  static const bool match_rule_supported_vector(int opcode, int vlen, BasicType bt);\n@@ -363,0 +351,3 @@\n+  \/\/ Does the CPU supports vector vairable rotate instructions?\n+  static bool supports_vector_variable_rotates(VectorNode *n);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -346,10 +346,0 @@\n-int VectorNode::encode_rotate_vector_shift_type(Node *shift) {\n-    int info = Matcher::match_rule_supported_vector_init_extinfo();\n-    int rotate_shift_type = shift->is_Con() ? 0 : 1 << 1;\n-    return info | rotate_shift_type;\n-}\n-\n-bool VectorNode::is_rotate_vector_var(int info) {\n-  return (info & (1 << 1)) ? true : false;\n-}\n-\n@@ -1185,2 +1175,2 @@\n-  int extinfo = encode_rotate_vector_shift_type(in(2));\n-  if (!Matcher::match_rule_supported_vector(Op_RotateLeftV, vlen, bt, extinfo)) {\n+  if ((!in(2)->is_Con() && !Matcher::supports_vector_variable_rotates(this)) ||\n+       !Matcher::match_rule_supported_vector(Op_RotateLeftV, vlen, bt)) {\n@@ -1195,2 +1185,2 @@\n-  int extinfo = encode_rotate_vector_shift_type(in(2));\n-  if (!Matcher::match_rule_supported_vector(Op_RotateRightV, vlen, bt, extinfo)) {\n+  if ((!in(2)->is_Con() && !Matcher::supports_vector_variable_rotates(this)) ||\n+       !Matcher::match_rule_supported_vector(Op_RotateRightV, vlen, bt)) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-  static int  encode_rotate_vector_shift_type(Node *shift);\n-  static bool is_rotate_vector_var(int info);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}