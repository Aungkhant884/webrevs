{"files":[{"patch":"@@ -2399,1 +2399,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -981,1 +981,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2141,1 +2141,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1538,1 +1538,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1557,1 +1557,1 @@\n-const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt) {\n+const bool Matcher::match_rule_supported_vector(int opcode, int vlen, BasicType bt, int ext) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,0 +316,11 @@\n+  static const int MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO  = 0;\n+  static const int MATCH_RULE_SUPPORT_VECTOR_INITIAL_EXTINFO = 1;\n+\n+  static const bool match_rule_supported_vector_has_extinfo(int extinfo) {\n+    return extinfo != MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO;\n+  }\n+\n+  static const int match_rule_supported_vector_init_extinfo(void) {\n+    return MATCH_RULE_SUPPORT_VECTOR_INITIAL_EXTINFO;\n+  }\n+\n@@ -318,1 +329,2 @@\n-  static const bool match_rule_supported_vector(int opcode, int vlen, BasicType bt);\n+  static const bool match_rule_supported_vector(int opcode, int vlen, BasicType bt,\n+                      int ext = MATCH_RULE_SUPPORT_VECTOR_HAS_NO_EXTINFO);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -346,0 +346,10 @@\n+int VectorNode::encode_rotate_vector_shift_type(Node *shift) {\n+    int info = Matcher::match_rule_supported_vector_init_extinfo();\n+    int rotate_shift_type = shift->is_Con() ? 0 : 1 << 1;\n+    return info | rotate_shift_type;\n+}\n+\n+bool VectorNode::is_rotate_vector_var(int info) {\n+  return (info & (1 << 1)) ? true : false; \n+}\n+\n@@ -1175,1 +1185,2 @@\n-  if (!Matcher::match_rule_supported_vector(Op_RotateLeftV, vlen, bt)) {\n+  int extinfo = encode_rotate_vector_shift_type(in(2));\n+  if (!Matcher::match_rule_supported_vector(Op_RotateLeftV, vlen, bt, extinfo)) {\n@@ -1184,1 +1195,2 @@\n-  if (!Matcher::match_rule_supported_vector(Op_RotateRightV, vlen, bt)) {\n+  int extinfo = encode_rotate_vector_shift_type(in(2));\n+  if (!Matcher::match_rule_supported_vector(Op_RotateRightV, vlen, bt, extinfo)) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,0 +91,2 @@\n+  static int  encode_rotate_vector_shift_type(Node *shift);\n+  static bool is_rotate_vector_var(int info);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}