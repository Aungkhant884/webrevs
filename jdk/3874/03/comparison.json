{"files":[{"patch":"@@ -34,5 +34,1 @@\n-\n-LogDecorations::LogDecorations(LogLevelType level, const LogTagSet &tagset, const LogDecorators &decorators)\n-    : _level(level), _tagset(tagset) {\n-  create_decorations(decorators);\n-}\n+const int LogDecorations::_pid = os::current_process_id(); \/\/ This is safe to call during dynamic initialization.\n@@ -56,9 +52,29 @@\n-void LogDecorations::create_decorations(const LogDecorators &decorators) {\n-  char* position = _decorations_buffer;\n-  #define DECORATOR(full_name, abbr) \\\n-  if (decorators.is_decorator(LogDecorators::full_name##_decorator)) { \\\n-    _decoration_offset[LogDecorators::full_name##_decorator] = position; \\\n-    position = create_##full_name##_decoration(position) + 1; \\\n-  } else { \\\n-    _decoration_offset[LogDecorators::full_name##_decorator] = NULL; \\\n-  }\n+LogDecorations::LogDecorations(LogLevelType level, const LogTagSet &tagset, const LogDecorators &decorators) :\n+  \/\/ When constructing the LogDecorations we resolve values for the requested decorators.\n+  \/\/\n+  \/\/ _millis: needed for \"time\", \"utctime\", \"timemillis\":\n+  _millis(\n+      (decorators.is_decorator(LogDecorators::time_decorator) ||\n+       decorators.is_decorator(LogDecorators::utctime_decorator) ||\n+       decorators.is_decorator(LogDecorators::timemillis_decorator)) ? os::javaTimeMillis() : 0),\n+  \/\/ _nanos: needed for \"timenanos\"\n+  _nanos(decorators.is_decorator(LogDecorators::timenanos_decorator) ? os::javaTimeNanos() : 0),\n+  \/\/ _elapsed_seconds: needed for \"uptime\", \"uptimemillis\", \"uptimenanos\"\n+  _elapsed_seconds(\n+      (decorators.is_decorator(LogDecorators::uptime_decorator) ||\n+       decorators.is_decorator(LogDecorators::uptimemillis_decorator) ||\n+       decorators.is_decorator(LogDecorators::uptimenanos_decorator)) ? os::elapsedTime() : 0),\n+  \/\/ tid\n+  _tid(decorators.is_decorator(LogDecorators::tid_decorator) ? os::current_thread_id() : 0),\n+  \/\/ the rest is handed down by the caller\n+  _level(level), _tagset(tagset)\n+#ifdef ASSERT\n+  , _decorators(decorators)\n+#endif\n+{\n+}\n+\n+void LogDecorations::print_decoration(LogDecorators::Decorator decorator, outputStream* st) const {\n+  assert(_decorators.is_decorator(decorator), \"decorator was not part of the decorator set specified at creation.\");\n+  switch(decorator) {\n+#define DECORATOR(name, abbr) case LogDecorators:: name##_decorator: print_##name##_decoration(st); break;\n@@ -67,0 +83,2 @@\n+    default: ShouldNotReachHere();\n+  }\n@@ -69,8 +87,4 @@\n-#define ASSERT_AND_RETURN(written, pos) \\\n-    assert(written >= 0, \"Decorations buffer overflow\"); \\\n-    return pos + written;\n-\n-char* LogDecorations::create_time_decoration(char* pos) {\n-  char* buf = os::iso8601_time(pos, 29);\n-  int written = buf == NULL ? -1 : 29;\n-  ASSERT_AND_RETURN(written, pos)\n+const char* LogDecorations::decoration(LogDecorators::Decorator decorator, char* buf, size_t buflen) const {\n+  stringStream ss(buf, buflen);\n+  print_decoration(decorator, &ss);\n+  return buf;\n@@ -79,4 +93,4 @@\n-char* LogDecorations::create_utctime_decoration(char* pos) {\n-  char* buf = os::iso8601_time(pos, 29, true);\n-  int written = buf == NULL ? -1 : 29;\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_time_decoration(outputStream* st) const {\n+  char buf[29];\n+  char* result = os::iso8601_time(_millis, buf, sizeof(buf), false);\n+  st->print_raw(result ? result : \"\");\n@@ -85,3 +99,4 @@\n-char * LogDecorations::create_uptime_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), \"%.3fs\", os::elapsedTime());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_utctime_decoration(outputStream* st) const {\n+  char buf[29];\n+  char* result = os::iso8601_time(_millis, buf, sizeof(buf), true);\n+  st->print_raw(result ? result : \"\");\n@@ -90,3 +105,2 @@\n-char * LogDecorations::create_timemillis_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), INT64_FORMAT \"ms\", os::javaTimeMillis());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_uptime_decoration(outputStream* st) const {\n+  st->print(\"%.3fs\", _elapsed_seconds);\n@@ -95,3 +109,2 @@\n-\/\/ Small helper for uptime conversion\n-static jlong elapsed_time(int unit_multiplier) {\n-  return (jlong)(os::elapsedTime() * unit_multiplier);\n+void LogDecorations::print_timemillis_decoration(outputStream* st) const {\n+  st->print(INT64_FORMAT \"ms\", (int64_t)_millis);\n@@ -100,4 +113,2 @@\n-char * LogDecorations::create_uptimemillis_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer),\n-                             INT64_FORMAT \"ms\", elapsed_time(MILLIUNITS));\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_uptimemillis_decoration(outputStream* st) const {\n+  st->print(INT64_FORMAT \"ms\", (int64_t)(_elapsed_seconds * MILLIUNITS));\n@@ -106,3 +117,2 @@\n-char * LogDecorations::create_timenanos_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), INT64_FORMAT \"ns\", os::javaTimeNanos());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_timenanos_decoration(outputStream* st) const {\n+  st->print(INT64_FORMAT \"ns\", (int64_t)_nanos);\n@@ -111,3 +121,2 @@\n-char * LogDecorations::create_uptimenanos_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), INT64_FORMAT \"ns\", elapsed_time(NANOUNITS));\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_uptimenanos_decoration(outputStream* st) const {\n+  st->print(INT64_FORMAT \"ns\", (int64_t)(_elapsed_seconds * NANOUNITS));\n@@ -116,3 +125,2 @@\n-char * LogDecorations::create_pid_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), \"%d\", os::current_process_id());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_pid_decoration(outputStream* st) const {\n+  st->print(\"%d\", _pid);\n@@ -121,4 +129,2 @@\n-char * LogDecorations::create_tid_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer),\n-                             INTX_FORMAT, os::current_thread_id());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_tid_decoration(outputStream* st) const {\n+  st->print(INTX_FORMAT, _tid);\n@@ -127,4 +133,2 @@\n-char* LogDecorations::create_level_decoration(char* pos) {\n-  \/\/ Avoid generating the level decoration because it may change.\n-  \/\/ The decoration() method has a special case for level decorations.\n-  return pos;\n+void LogDecorations::print_level_decoration(outputStream* st) const {\n+  st->print_raw(LogLevel::name(_level));\n@@ -133,3 +137,2 @@\n-char* LogDecorations::create_tags_decoration(char* pos) {\n-  int written = _tagset.label(pos, DecorationsBufferSize - (pos - _decorations_buffer));\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_tags_decoration(outputStream* st) const {\n+  _tagset.label(st);\n@@ -138,3 +141,2 @@\n-char* LogDecorations::create_hostname_decoration(char* pos) {\n-  int written = jio_snprintf(pos, DecorationsBufferSize - (pos - _decorations_buffer), \"%s\", host_name());\n-  ASSERT_AND_RETURN(written, pos)\n+void LogDecorations::print_hostname_decoration(outputStream* st) const {\n+  st->print_raw(host_name());\n","filename":"src\/hotspot\/share\/logging\/logDecorations.cpp","additions":64,"deletions":62,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -30,1 +30,7 @@\n-\/\/ Temporary object containing the necessary data for a log call's decorations (timestamps, etc).\n+class outputStream;\n+\n+\/\/ LogDecorations keeps resolved values for decorators, as well as the\n+\/\/ printing code to print them. The values are resolved at the log site (in the\n+\/\/ constructor of LogDecorations); the printing happens when the log message is\n+\/\/ printed. That may happen delayed, and the object may be stored for some time,\n+\/\/ in the context of asynchronous logging. Therefore size of this object matters.\n@@ -32,8 +38,0 @@\n- public:\n-  static const int DecorationsBufferSize = 256;\n- private:\n-  char _decorations_buffer[DecorationsBufferSize];\n-  char* _decoration_offset[LogDecorators::Count];\n-  LogLevelType _level;\n-  const LogTagSet& _tagset;\n-  static const char* volatile _host_name;\n@@ -41,2 +39,12 @@\n-  const char* host_name();\n-  void create_decorations(const LogDecorators& decorators);\n+  const jlong _millis;            \/\/ for \"time\", \"utctime\", \"timemillis\"\n+  const jlong _nanos;             \/\/ for \"timenanos\"\n+  const double _elapsed_seconds;  \/\/ for \"uptime\", \"uptimemillis\", \"uptimenanos\"\n+  const intx _tid;                \/\/ for \"tid\"\n+  LogLevelType _level;            \/\/ for \"level\" (needs to be nonconst)\n+  const LogTagSet& _tagset;       \/\/ for \"tags\"\n+  \/\/ In debug mode we keep the decorators around for sanity checking when printing\n+  DEBUG_ONLY(const LogDecorators& _decorators;)\n+\n+  static const char* volatile _host_name;\n+  static const char* host_name();\n+  static const int _pid;          \/\/ for \"pid\"\n@@ -44,1 +52,1 @@\n-#define DECORATOR(name, abbr) char* create_##name##_decoration(char* pos);\n+#define DECORATOR(name, abbr) void print_##name##_decoration(outputStream* st) const;\n@@ -49,0 +57,4 @@\n+\n+  \/\/ max size of a single decoration.\n+  static const size_t max_decoration_size = 255;\n+\n@@ -55,6 +67,3 @@\n-  const char* decoration(LogDecorators::Decorator decorator) const {\n-    if (decorator == LogDecorators::level_decorator) {\n-      return LogLevel::name(_level);\n-    }\n-    return _decoration_offset[decorator];\n-  }\n+  void print_decoration(LogDecorators::Decorator decorator, outputStream* st) const;\n+  const char* decoration(LogDecorators::Decorator decorator, char* buf, size_t buflen) const;\n+\n","filename":"src\/hotspot\/share\/logging\/logDecorations.hpp","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -65,1 +66,1 @@\n-                              decorations.decoration(decorator));\n+                              decorations.decoration(decorator, buf, sizeof(buf)));\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-int LogTagSet::label(char* buf, size_t len, const char* separator) const {\n-  int tot_written = 0;\n+void LogTagSet::label(outputStream* st, const char* separator) const {\n@@ -92,7 +91,10 @@\n-    int written = jio_snprintf(buf + tot_written, len - tot_written, \"%s%s\",\n-                               (i == 0 ? \"\" : separator),\n-                               LogTag::name(_tag[i]));\n-    if (written < 0) {\n-      return -1;\n-    }\n-    tot_written += written;\n+    st->print(\"%s%s\", (i == 0 ? \"\" : separator), LogTag::name(_tag[i]));\n+  }\n+}\n+\n+int LogTagSet::label(char* buf, size_t len, const char* separator) const {\n+  stringStream ss(buf, len);\n+  label(&ss, separator);\n+  size_t written = ss.size();\n+  if (written >= len - 1) {\n+    return -1; \/\/ truncation\n@@ -100,1 +102,1 @@\n-  return tot_written;\n+  return (int)written;\n@@ -175,3 +177,3 @@\n-    char buf[TagSetBufferSize];\n-    d->tagset->label(buf, sizeof(buf), \"+\");\n-    out->print_cr(\" %s: %s\", buf, d->descr);\n+    out->sp();\n+    d->tagset->label(out, \"+\");\n+    out->print_cr(\": %s\", d->descr);\n@@ -209,1 +211,0 @@\n-\n","filename":"src\/hotspot\/share\/logging\/logTagSet.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+class outputStream;\n+\n@@ -113,0 +115,1 @@\n+  void label(outputStream* st, const char* separator = \",\") const;\n","filename":"src\/hotspot\/share\/logging\/logTagSet.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -40,1 +41,1 @@\n-    EXPECT_STREQ(LogLevel::name(level), decorations.decoration(LogDecorators::level_decorator));\n+    EXPECT_STREQ(LogLevel::name(level), decorations.decoration(LogDecorators::level_decorator, buf, sizeof(buf)));\n@@ -50,1 +51,1 @@\n-    EXPECT_STREQ(LogLevel::name(other_level), decorations.decoration(LogDecorators::level_decorator))\n+    EXPECT_STREQ(LogLevel::name(other_level), decorations.decoration(LogDecorators::level_decorator, buf, sizeof(buf)))\n@@ -56,0 +57,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -60,1 +62,1 @@\n-  const char* uptime = decorations.decoration(LogDecorators::uptime_decorator);\n+  const char* uptime = decorations.decoration(LogDecorators::uptime_decorator, buf, sizeof(buf));\n@@ -70,1 +72,1 @@\n-    double cur = strtod(d.decoration(LogDecorators::uptime_decorator), NULL);\n+    double cur = strtod(d.decoration(LogDecorators::uptime_decorator, buf, sizeof(buf)), NULL);\n@@ -77,0 +79,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -81,1 +84,1 @@\n-  EXPECT_STREQ(expected_tags, decorations.decoration(LogDecorators::tags_decorator));\n+  EXPECT_STREQ(expected_tags, decorations.decoration(LogDecorators::tags_decorator, buf, sizeof(buf)));\n@@ -86,0 +89,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -105,1 +109,1 @@\n-    const char* decoration = decorations.decoration(decorator);\n+    const char* decoration = decorations.decoration(decorator, buf, sizeof(buf));\n@@ -122,1 +126,1 @@\n-      julong val = strtoull(d.decoration(decorator), NULL, 10);\n+      julong val = strtoull(d.decoration(decorator, buf, sizeof(buf)), NULL, 10);\n@@ -132,0 +136,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -136,1 +141,1 @@\n-  const char *timestr = decorations.decoration(LogDecorators::time_decorator);\n+  const char *timestr = decorations.decoration(LogDecorators::time_decorator, buf, sizeof(buf));\n@@ -166,0 +171,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -170,1 +176,1 @@\n-  const char *timestr = decorations.decoration(LogDecorators::utctime_decorator);\n+  const char *timestr = decorations.decoration(LogDecorators::utctime_decorator, buf, sizeof(buf));\n@@ -207,0 +213,1 @@\n+  char buf[LogDecorations::max_decoration_size + 1];\n@@ -220,1 +227,1 @@\n-    const char* reported = decorations.decoration(ids[i].decorator);\n+    const char* reported = decorations.decoration(ids[i].decorator, buf, sizeof(buf));\n","filename":"test\/hotspot\/gtest\/logging\/test_logDecorations.cpp","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -122,0 +123,5 @@\n+  \/\/ Test with a stream too\n+  stringStream ss(buf, sizeof(buf));\n+  ts.label(&ss, \"*-*\");\n+  EXPECT_STREQ(\"logging*-*safepoint\", buf);\n+\n@@ -131,0 +137,1 @@\n+\n","filename":"test\/hotspot\/gtest\/logging\/test_logTagSet.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}