{"files":[{"patch":"@@ -1381,1 +1381,1 @@\n-            List<JCVariableDecl> params = make.Params(constructorSymbol(), constructorType().getParameterTypes());\n+            List<JCVariableDecl> params = make.Params(constructorSymbol());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1038,1 +1038,1 @@\n-                Params(m, mtype.getParameterTypes()),\n+                m.params != null ? Params(m) : Params(m, mtype.getParameterTypes()),\n@@ -1067,3 +1067,14 @@\n-    \/** Create a list of value parameter trees for a method's parameters.\n-     *  If the method has parameter names defined, use those same symbols,\n-     *  otherwse create placeholders x0, x1, ..., xn.\n+    \/** Create a list of value parameter trees for a method's parameters\n+     *  using the same names as the method's existing parameters.\n+     *\/\n+    public List<JCVariableDecl> Params(MethodSymbol mth) {\n+        Assert.check(mth.params != null);\n+        ListBuffer<JCVariableDecl> params = new ListBuffer<>();\n+        for (VarSymbol param : mth.params)\n+            params.append(VarDef(param, null));\n+        return params.toList();\n+    }\n+\n+    \/** Synthesize a list of parameter trees for a method's parameters.\n+     *  Used for methods with no parameters defined, e.g. bridge methods.\n+     *  The placeholder names will be x0, x1, ..., xn.\n@@ -1072,0 +1083,1 @@\n+        Assert.check(mth.params == null);\n@@ -1073,9 +1085,3 @@\n-        if (mth.params != null) {\n-            Assert.check(argtypes.length() == mth.params.length());\n-            for (VarSymbol param : mth.params)\n-                params.append(VarDef(param, null));\n-        } else {\n-            int i = 0;\n-            for (List<Type> l = argtypes; l.nonEmpty(); l = l.tail)\n-                params.append(Param(paramName(i++), l.head, mth));\n-        }\n+        int i = 0;\n+        for (List<Type> l = argtypes; l.nonEmpty(); l = l.tail)\n+            params.append(Param(paramName(i++), l.head, mth));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}