{"files":[{"patch":"@@ -375,6 +375,3 @@\n-  \/\/ Remove the ScopedValue cache in case we got a StackOverflowError\n-  \/\/ while we were trying to remove ScopedValue bindings.\n-  current->set_scopedValueCache(NULL);\n-  \/\/ And the ScopedValue bindings too.\n-  oop threadObj = current->vthread();\n-  java_lang_Thread::clear_scopedValueBindings(threadObj);\n+  \/\/ Remove the ScopedValue bindings in case we got a StackOverflowError\n+  \/\/ while we were trying to manipulate ScopedValue bindings.\n+  current->clear_scopedValueBindings();\n@@ -392,6 +389,3 @@\n-  \/\/ Remove the ScopedValue cache in case we got a StackOverflowError\n-  \/\/ while we were trying to remove ScopedValue bindings.\n-  current->set_scopedValueCache(NULL);\n-  \/\/ And the ScopedValue bindings too.\n-  oop threadObj = current->vthread();\n-  java_lang_Thread::clear_scopedValueBindings(threadObj);\n+  \/\/ Remove the ScopedValue bindings in case we got a StackOverflowError\n+  \/\/ while we were trying to manipulate ScopedValue bindings.\n+  current->clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -457,6 +457,2 @@\n-    \/\/ FIXME: This very crudely destroys all ScopedValue bindings. This\n-    \/\/ is better than a bound value escaping, but far from ideal.\n-    oop java_thread = current->threadObj();\n-    current->set_scopedValueCache(NULL);\n-    java_lang_Thread::clear_scopedValueBindings(java_thread);\n-    pop_frames_failed_reallocs(current, array);\n+    \/\/ This destroys all ScopedValue bindings.\n+    current->clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -201,0 +201,7 @@\n+void JavaThread::clear_scopedValueBindings() {\n+  set_scopedValueCache(NULL);\n+  oop threadObj = vthread();\n+  assert(threadObj != NULL, \"must be\");\n+  java_lang_Thread::clear_scopedValueBindings(threadObj);\n+}\n+\n@@ -1074,5 +1081,1 @@\n-  \/\/ Clear any scoped-value bindings\n-  set_scopedValueCache(NULL);\n-  oop threadOop = threadObj();\n-  assert(threadOop != NULL, \"must be\");\n-  java_lang_Thread::clear_scopedValueBindings(threadOop);\n+  clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -525,0 +525,1 @@\n+  void clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -889,6 +889,4 @@\n-  \/\/ Remove the ScopedValue cache in case we got a StackOverflowError\n-  \/\/ while we were trying to remove ScopedValue bindings.\n-  current->set_scopedValueCache(NULL);\n-  \/\/ And the ScopedValue bindings too.\n-  oop threadObj = current->vthread();\n-  java_lang_Thread::clear_scopedValueBindings(threadObj);\n+  \/\/ Remove the ScopedValue bindings in case we got a\n+  \/\/ StackOverflowError while we were trying to remove ScopedValue\n+  \/\/ bindings.\n+  current->clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    \/\/ Remove the ScopedValue cache in case we got a virtual machine\n+    \/\/ Remove the ScopedValue bindings in case we got a virtual machine\n@@ -166,4 +166,1 @@\n-    thread->set_scopedValueCache(NULL);\n-    \/\/ And the ScopedValue bindings too.\n-    oop threadObj = thread->vthread();\n-    java_lang_Thread::clear_scopedValueBindings(threadObj);\n+    thread->clear_scopedValueBindings();\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -74,0 +74,22 @@\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public int thousandIsBoundQueries(Blackhole bh) throws Exception {\n+        var result = 0;\n+        for (int i = 0; i < 1_000; i++) {\n+            result += ScopedValuesData.sl1.isBound() ? 1 : 0;\n+        }\n+        return result;\n+    }\n+\n+    @Benchmark\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public int thousandMaybeGets(Blackhole bh) throws Exception {\n+        int result = 0;\n+        for (int i = 0; i < 1_000; i++) {\n+            if (ScopedValuesData.sl1.isBound()) {\n+                result += ScopedValuesData.sl1.get();\n+            }\n+        }\n+        return result;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/concurrent\/ScopedValues.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}