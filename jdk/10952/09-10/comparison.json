{"files":[{"patch":"@@ -288,0 +288,2 @@\n+    private static final Object NEW_THREAD_BINDINGS = Thread.class;\n+\n@@ -744,1 +746,1 @@\n-        this.scopedValueBindings = Thread.class;\n+        this.scopedValueBindings = NEW_THREAD_BINDINGS;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-            ScopedValue.Cache.invalidate(bitmask);\n+            Cache.invalidate(bitmask);\n@@ -399,1 +399,1 @@\n-                ScopedValue.Cache.invalidate(bitmask);\n+                Cache.invalidate(bitmask);\n@@ -589,6 +589,10 @@\n-        \/\/ ??? Do we want to search cache for this? In most cases we don't expect\n-        \/\/ this {@link ScopedValue} to be bound, so it's not worth it. But I may\n-        \/\/ be wrong about that.\n-\/*\n-        if (Cache.find(this) != Snapshot.NIL) {\n-            return true;\n+        Object[] objects = scopedValueCache();\n+        if (objects != null) {\n+            int n = (hash & Cache.SLOT_MASK) * 2;\n+            if (objects[n] == this) {\n+                return true;\n+            }\n+            n = ((hash >>> Cache.INDEX_BITS) & Cache.SLOT_MASK) * 2;\n+            if (objects[n] == this) {\n+                return true;\n+            }\n@@ -596,2 +600,4 @@\n- *\/\n-        return findBinding() != Snapshot.NIL;\n+        var value = findBinding();\n+        boolean result = (value != Snapshot.NIL);\n+        if (result)  Cache.put(this, value);\n+        return result;\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/ScopedValue.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"}]}