{"files":[{"patch":"@@ -288,0 +288,2 @@\n+    \/\/ special value to indicate this is a newly-created Thread\n+    \/\/ Note that his must match the declaration in ScopedValue.\n@@ -745,1 +747,1 @@\n-        \/\/ special value to mean a new thread\n+        \/\/ special value to indicate this is a newly-created Thread\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    static sealed class Snapshot permits EmptySnapshot {\n+    static final class Snapshot {\n@@ -211,0 +211,1 @@\n+        static final Snapshot EMPTY_SNAPSHOT = new Snapshot();\n@@ -241,13 +242,0 @@\n-    static final class EmptySnapshot extends Snapshot {\n-\n-        private EmptySnapshot() {\n-            super();\n-        }\n-\n-        private static final Snapshot SINGLETON = new EmptySnapshot();\n-\n-        static final Snapshot getInstance() {\n-            return SINGLETON;\n-        }\n-    }\n-\n@@ -391,0 +379,2 @@\n+        @Hidden\n+        @ForceInline\n@@ -661,0 +651,4 @@\n+    \/\/ special value to indicate this is a newly-created Thread\n+    \/\/ Note that his must match the declaration in j.l.Thread.\n+    private static final Object NEW_THREAD_BINDINGS = Thread.class;\n+\n@@ -674,1 +668,1 @@\n-        if (bindings == Thread.class) {\n+        if (bindings == NEW_THREAD_BINDINGS) {\n@@ -676,1 +670,1 @@\n-           return EmptySnapshot.getInstance();\n+           return Snapshot.EMPTY_SNAPSHOT;\n@@ -683,1 +677,1 @@\n-                bindings = EmptySnapshot.getInstance();\n+                bindings = Snapshot.EMPTY_SNAPSHOT;\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/ScopedValue.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}