{"files":[{"patch":"@@ -1742,1 +1742,1 @@\n-    st->print(\"ldr  rscratch2, [rthread, #thread_disarmed_offset]\\n\\t\");\n+    st->print(\"ldr  rscratch2, [rthread, #thread_disarmed_guard_value_offset]\\n\\t\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-    Address thread_disarmed_addr(rthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+    Address thread_disarmed_addr(rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n@@ -241,1 +241,1 @@\n-    Address thread_disarmed_and_epoch_addr(rthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+    Address thread_disarmed_and_epoch_addr(rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n@@ -249,1 +249,1 @@\n-    Address thread_disarmed_addr(rthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+    Address thread_disarmed_addr(rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -171,21 +171,1 @@\n-  \/\/ The patching epoch is incremented before the nmethod is disarmed. Disarming\n-  \/\/ is performed with a release store. In the nmethod entry barrier, the values\n-  \/\/ are read in the opposite order, such that the load of the nmethod guard\n-  \/\/ acquires the patching epoch. This way, the guard is guaranteed to block\n-  \/\/ entries to the nmethod, until it has safely published the requirement for\n-  \/\/ further fencing by mutators, before they are allowed to enter.\n-  BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs_asm->increment_patching_epoch();\n-\n-  \/\/ Disarms the nmethod guard emitted by BarrierSetAssembler::nmethod_entry_barrier.\n-  \/\/ Symmetric \"LDR; DMB ISHLD\" is in the nmethod barrier.\n-  NativeNMethodBarrier* barrier = native_nmethod_barrier(nm);\n-  barrier->set_value(nm, disarmed_value());\n-}\n-\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n-  if (!supports_entry_barrier(nm)) {\n-    return;\n-  }\n-\n-  if (arm_value == disarmed_value()) {\n+  if (value == disarmed_guard_value()) {\n@@ -203,1 +183,1 @@\n-  barrier->set_value(nm, arm_value);\n+  barrier->set_value(nm, value);\n@@ -206,1 +186,1 @@\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -208,1 +188,1 @@\n-    return false;\n+    return disarmed_guard_value();\n@@ -212,1 +192,1 @@\n-  return barrier->get_value(nm) != disarmed_value();\n+  return barrier->get_value(nm);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -5334,1 +5334,1 @@\n-      Address thread_epoch_addr(rthread, in_bytes(bs_nm->thread_disarmed_offset()) + 4);\n+      Address thread_epoch_addr(rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()) + 4);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-    st->print(\"ldr t1, [Rthread, #thread_disarmed_offset]\\n\\t\");\n+    st->print(\"ldr t1, [Rthread, #thread_disarmed_guard_value_offset]\\n\\t\");\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-  Address thread_disarmed_addr(Rthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+  Address thread_disarmed_addr(Rthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -127,1 +127,1 @@\n-  barrier->set_value(disarmed_value());\n+  barrier->set_value(value);\n@@ -130,1 +130,1 @@\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -132,10 +132,1 @@\n-    return;\n-  }\n-\n-  NativeNMethodBarrier* barrier = native_nmethod_barrier(nm);\n-  barrier->set_value(arm_value);\n-}\n-\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n-  if (!supports_entry_barrier(nm)) {\n-    return false;\n+    return disarmed_guard_value();\n@@ -145,1 +136,1 @@\n-  return barrier->get_value() != disarmed_value();\n+  return barrier->get_value();\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetNMethod_arm.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-  __ ld(R0, in_bytes(bs_nm->thread_disarmed_offset()), R16_thread);\n+  __ ld(R0, in_bytes(bs_nm->thread_disarmed_guard_value_offset()), R16_thread);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -127,1 +127,1 @@\n-  barrier->release_set_guard_value(disarmed_value());\n+  barrier->release_set_guard_value(value);\n@@ -130,1 +130,1 @@\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -132,10 +132,1 @@\n-    return;\n-  }\n-\n-  NativeNMethodBarrier* barrier = get_nmethod_barrier(nm);\n-  barrier->release_set_guard_value(arm_value);\n-}\n-\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n-  if (!supports_entry_barrier(nm)) {\n-    return false;\n+    return disarmed_guard_value();\n@@ -145,1 +136,1 @@\n-  return barrier->get_guard_value() != disarmed_value();\n+  return barrier->get_guard_value();\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-        Address thread_disarmed_addr(xthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+        Address thread_disarmed_addr(xthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n@@ -248,1 +248,1 @@\n-        Address thread_disarmed_and_epoch_addr(xthread, in_bytes(bs_nm->thread_disarmed_offset()));\n+        Address thread_disarmed_and_epoch_addr(xthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -179,21 +179,1 @@\n-  \/\/ The patching epoch is incremented before the nmethod is disarmed. Disarming\n-  \/\/ is performed with a release store. In the nmethod entry barrier, the values\n-  \/\/ are read in the opposite order, such that the load of the nmethod guard\n-  \/\/ acquires the patching epoch. This way, the guard is guaranteed to block\n-  \/\/ entries to the nmethod, util it has safely published the requirement for\n-  \/\/ further fencing by mutators, before they are allowed to enter.\n-  BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs_asm->increment_patching_epoch();\n-\n-  \/\/ Disarms the nmethod guard emitted by BarrierSetAssembler::nmethod_entry_barrier.\n-  \/\/ Symmetric \"LD; FENCE IR, IR\" is in the nmethod barrier.\n-  NativeNMethodBarrier* barrier = native_nmethod_barrier(nm);\n-  barrier->set_value(nm, disarmed_value());\n-}\n-\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n-  if (!supports_entry_barrier(nm)) {\n-    return;\n-  }\n-\n-  if (arm_value == disarmed_value()) {\n+  if (value == disarmed_guard_value()) {\n@@ -211,1 +191,1 @@\n-  barrier->set_value(nm, arm_value);\n+  barrier->set_value(nm, value);\n@@ -214,1 +194,1 @@\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -216,1 +196,1 @@\n-    return false;\n+    return disarmed_guard_value();\n@@ -220,1 +200,1 @@\n-  return barrier->get_value(nm) != disarmed_value();\n+  return barrier->get_value(nm);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetNMethod_riscv.cpp","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1306,1 +1306,1 @@\n-    st->print(\"ld  t1, [xthread, #thread_disarmed_offset]\\n\\t\");\n+    st->print(\"ld  t1, [xthread, #thread_disarmed_guard_value_offset]\\n\\t\");\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2464,1 +2464,1 @@\n-      Address thread_epoch_addr(xthread, in_bytes(bs_nm->thread_disarmed_offset()) + 4);\n+      Address thread_epoch_addr(xthread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()) + 4);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-    __ z_lg(Z_R0_scratch, in_bytes(bs_nm->thread_disarmed_offset()), Z_thread); \/\/ 6 bytes\n+    __ z_lg(Z_R0_scratch, in_bytes(bs_nm->thread_disarmed_guard_value_offset()), Z_thread); \/\/ 6 bytes\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -110,1 +110,1 @@\n-  barrier->set_guard_value(arm_value);\n+  barrier->set_guard_value(value);\n@@ -113,1 +113,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -115,10 +115,1 @@\n-    return;\n-  }\n-\n-  NativeMethodBarrier* barrier = get_nmethod_barrier(nm);\n-  barrier->set_guard_value(disarmed_value());\n-}\n-\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n-  if (!supports_entry_barrier(nm)) {\n-    return false;\n+    return disarmed_guard_value();\n@@ -128,1 +119,1 @@\n-  return barrier->get_guard_value() != disarmed_value();\n+  return barrier->get_guard_value();\n","filename":"src\/hotspot\/cpu\/s390\/gc\/shared\/barrierSetNMethod_s390.cpp","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-  Address disarmed_addr(thread, in_bytes(bs_nm->thread_disarmed_offset()));\n+  Address disarmed_addr(thread, in_bytes(bs_nm->thread_disarmed_guard_value_offset()));\n@@ -313,1 +313,1 @@\n-  __ movptr(tmp, (intptr_t)bs_nm->disarmed_value_address());\n+  __ movptr(tmp, (intptr_t)bs_nm->disarmed_guard_value_address());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  jint get_immedate() const { return int_at(imm_offset); }\n+  jint get_immediate() const { return int_at(imm_offset); }\n@@ -179,1 +179,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -185,1 +185,1 @@\n-  cmp->set_immediate(disarmed_value());\n+  cmp->set_immediate(value);\n@@ -188,1 +188,1 @@\n-void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -190,10 +190,1 @@\n-    return;\n-  }\n-\n-  NativeNMethodCmpBarrier* cmp = native_nmethod_barrier(nm);\n-  cmp->set_immediate(arm_value);\n-}\n-\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n-  if (!supports_entry_barrier(nm)) {\n-    return false;\n+    return disarmed_guard_value();\n@@ -203,1 +194,1 @@\n-  return (disarmed_value() != cmp->get_immedate());\n+  return cmp->get_immediate();\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetNMethod_x86.cpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -892,1 +892,1 @@\n-    st->print(\"cmpl    [r15_thread + #disarmed_offset], #disarmed_value\\t\");\n+    st->print(\"cmpl    [r15_thread + #disarmed_guard_value_offset], #disarmed_guard_value\\t\");\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-void BarrierSetNMethod::arm(nmethod* nm, int value) {\n+void BarrierSetNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -37,1 +37,1 @@\n-void BarrierSetNMethod::disarm(nmethod* nm) {\n+int BarrierSetNMethod::guard_value(nmethod* nm) {\n@@ -39,5 +39,1 @@\n-}\n-\n-bool BarrierSetNMethod::is_armed(nmethod* nm) {\n-  ShouldNotReachHere();\n-  return false;\n+  return -1;\n","filename":"src\/hotspot\/cpu\/zero\/gc\/shared\/barrierSetNMethod_zero.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    thread->set_nmethod_disarm_value(bs_nm->disarmed_value());\n+    thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-int BarrierSetNMethod::disarmed_value() const {\n-  return *disarmed_value_address();\n+int BarrierSetNMethod::disarmed_guard_value() const {\n+  return *disarmed_guard_value_address();\n@@ -72,0 +72,8 @@\n+void BarrierSetNMethod::disarm(nmethod* nm) {\n+  set_guard_value(nm, disarmed_guard_value());\n+}\n+\n+bool BarrierSetNMethod::is_armed(nmethod* nm) {\n+  return guard_value(nm) != disarmed_guard_value();\n+}\n+\n@@ -105,1 +113,1 @@\n-int* BarrierSetNMethod::disarmed_value_address() const {\n+int* BarrierSetNMethod::disarmed_guard_value_address() const {\n@@ -109,2 +117,2 @@\n-ByteSize BarrierSetNMethod::thread_disarmed_offset() const {\n-  return Thread::nmethod_disarmed_offset();\n+ByteSize BarrierSetNMethod::thread_disarmed_guard_value_offset() const {\n+  return Thread::nmethod_disarmed_guard_value_offset();\n@@ -115,1 +123,1 @@\n-  int _disarm_value;\n+  int _disarmed_guard_value;\n@@ -118,2 +126,2 @@\n-  BarrierSetNMethodArmClosure(int disarm_value) :\n-      _disarm_value(disarm_value) {}\n+  BarrierSetNMethodArmClosure(int disarmed_guard_value) :\n+      _disarmed_guard_value(disarmed_guard_value) {}\n@@ -122,1 +130,1 @@\n-    thread->set_nmethod_disarm_value(_disarm_value);\n+    thread->set_nmethod_disarmed_guard_value(_disarmed_guard_value);\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-  virtual ByteSize thread_disarmed_offset() const;\n-  virtual int* disarmed_value_address() const;\n+  virtual ByteSize thread_disarmed_guard_value_offset() const;\n+  virtual int* disarmed_guard_value_address() const;\n@@ -47,1 +47,1 @@\n-  int disarmed_value() const;\n+  int disarmed_guard_value() const;\n@@ -53,1 +53,3 @@\n-  void arm(nmethod* nm, int arm_value);\n+\n+  int guard_value(nmethod* nm);\n+  void set_guard_value(nmethod* nm, int value);\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-      thread->set_nmethod_disarm_value(bs_nm->disarmed_value());\n+      thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-      _bs->arm(nm, 0);\n+      _bs->set_guard_value(nm, 0);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-int* ZBarrierSetNMethod::disarmed_value_address() const {\n+int* ZBarrierSetNMethod::disarmed_guard_value_address() const {\n@@ -75,1 +75,1 @@\n-ByteSize ZBarrierSetNMethod::thread_disarmed_offset() const {\n+ByteSize ZBarrierSetNMethod::thread_disarmed_guard_value_offset() const {\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-  virtual ByteSize thread_disarmed_offset() const;\n-  virtual int* disarmed_value_address() const;\n+  virtual ByteSize thread_disarmed_guard_value_offset() const;\n+  virtual int* disarmed_guard_value_address() const;\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-void ZNMethod::arm(nmethod* nm, int arm_value) {\n+void ZNMethod::set_guard_value(nmethod* nm, int value) {\n@@ -202,3 +202,1 @@\n-  if (bs != NULL) {\n-    bs->arm(nm, arm_value);\n-  }\n+  bs->set_guard_value(nm, value);\n@@ -303,1 +301,1 @@\n-      \/\/ Heal oops and disarm\n+      \/\/ Heal oops and arm phase invariantly\n@@ -305,1 +303,1 @@\n-      ZNMethod::arm(nm, 0);\n+      ZNMethod::set_guard_value(nm, 0);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  static void arm(nmethod* nm, int arm_value);\n+  static void set_guard_value(nmethod* nm, int value);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-  \/\/ an nmethod gets disarmed. The low order 32 bit denote the disarm value.\n-  uint64_t _nmethod_disarm_value;\n+  \/\/ an nmethod gets disarmed. The low order 32 bits denote the disarmed value.\n+  uint64_t _nmethod_disarmed_guard_value;\n@@ -122,2 +122,2 @@\n-  void set_nmethod_disarm_value(int value) {\n-    _nmethod_disarm_value = (uint64_t)(uint32_t)value;\n+  void set_nmethod_disarmed_guard_value(int value) {\n+    _nmethod_disarmed_guard_value = (uint64_t)(uint32_t)value;\n@@ -126,2 +126,2 @@\n-  static ByteSize nmethod_disarmed_offset() {\n-    ByteSize offset = byte_offset_of(Thread, _nmethod_disarm_value);\n+  static ByteSize nmethod_disarmed_guard_value_offset() {\n+    ByteSize offset = byte_offset_of(Thread, _nmethod_disarmed_guard_value);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}