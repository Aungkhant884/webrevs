{"files":[{"patch":"@@ -56,1 +56,1 @@\n-     * @param clz objects factory class\n+     * @param serialClass objects factory class\n@@ -59,2 +59,2 @@\n-    public static boolean checkGlobalFilter(Class<?> clz) {\n-        return checkInput(\"global\", () -> clz);\n+    public static boolean checkGlobalFilter(Class<?> serialClass) {\n+        return checkInput(GLOBAL_FILTER, () -> serialClass);\n@@ -70,1 +70,1 @@\n-     * @param clz objects factory class\n+     * @param serialClass objects factory class\n@@ -73,2 +73,2 @@\n-    public static boolean checkLdapFilter(Class<?> clz) {\n-        return checkInput(\"ldap\", () -> clz);\n+    public static boolean checkLdapFilter(Class<?> serialClass) {\n+        return checkInput(LDAP_FILTER, () -> serialClass);\n@@ -84,1 +84,1 @@\n-     * @param clz objects factory class\n+     * @param serialClass objects factory class\n@@ -87,2 +87,2 @@\n-    public static boolean checkRmiFilter(Class<?> clz) {\n-        return checkInput(\"rmi\", () -> clz);\n+    public static boolean checkRmiFilter(Class<?> serialClass) {\n+        return checkInput(RMI_FILTER, () -> serialClass);\n@@ -91,7 +91,11 @@\n-    private static boolean checkInput(String scheme, FactoryInfo factoryInfo) {\n-        Status result = switch(scheme) {\n-            case \"ldap\" -> LDAP_FILTER.checkInput(factoryInfo);\n-            case \"rmi\" -> RMI_FILTER.checkInput(factoryInfo);\n-            default -> Status.UNDECIDED;\n-        };\n-        return switch(result) {\n+    private static boolean checkInput(ConfiguredFilter filter, FactoryInfo serialClass) {\n+        var globalFilter = GLOBAL_FILTER.filter();\n+        var specificFilter = filter.filter();\n+\n+        Status globalResult = globalFilter.checkInput(serialClass);\n+        if (filter == GLOBAL_FILTER) {\n+            return globalResult == Status.ALLOWED;\n+        }\n+\n+        Status specificResult = specificFilter.checkInput(serialClass);\n+        return switch (specificResult) {\n@@ -99,2 +103,1 @@\n-            case ALLOWED -> GLOBAL_FILTER.checkInput(factoryInfo) != Status.REJECTED;\n-            \/\/ Rejected\n+            case ALLOWED -> globalResult != Status.REJECTED;\n@@ -103,1 +106,1 @@\n-            case UNDECIDED -> GLOBAL_FILTER.checkInput(factoryInfo) == Status.ALLOWED;\n+            case UNDECIDED -> globalResult == Status.ALLOWED;\n@@ -139,1 +142,1 @@\n-    private static final String FACTORIES_FILTER_PROPNAME =\n+    private static final String GLOBAL_FACTORIES_FILTER_PROPNAME =\n@@ -168,4 +171,2 @@\n-    private static final ObjectInputFilter GLOBAL_FILTER =\n-            ObjectInputFilter.Config.createFilter(\n-                    getFilterPropertyValue(FACTORIES_FILTER_PROPNAME,\n-                                           DEFAULT_GLOBAL_SP_VALUE));\n+    private static final ConfiguredFilter GLOBAL_FILTER =\n+            initializeFilter(GLOBAL_FACTORIES_FILTER_PROPNAME, DEFAULT_GLOBAL_SP_VALUE);\n@@ -175,4 +176,2 @@\n-    private static final ObjectInputFilter LDAP_FILTER =\n-            ObjectInputFilter.Config.createFilter(\n-                    getFilterPropertyValue(LDAP_FACTORIES_FILTER_PROPNAME,\n-                                           DEFAULT_LDAP_SP_VALUE));\n+    private static final ConfiguredFilter LDAP_FILTER =\n+            initializeFilter(LDAP_FACTORIES_FILTER_PROPNAME, DEFAULT_LDAP_SP_VALUE);\n@@ -182,4 +181,41 @@\n-    private static final ObjectInputFilter RMI_FILTER =\n-            ObjectInputFilter.Config.createFilter(\n-                    getFilterPropertyValue(RMI_FACTORIES_FILTER_PROPNAME,\n-                                           DEFAULT_RMI_SP_VALUE));\n+    private static final ConfiguredFilter RMI_FILTER =\n+            initializeFilter(RMI_FACTORIES_FILTER_PROPNAME, DEFAULT_RMI_SP_VALUE);\n+\n+    \/\/ Record for storing a factory filter configuration\n+    private interface ConfiguredFilter {\n+        ObjectInputFilter filter();\n+    }\n+\n+    \/\/ Record to store an object input filter constructed from a valid filter\n+    \/\/ pattern string\n+    private record ValidFilter(ObjectInputFilter filter)\n+            implements ConfiguredFilter {\n+    }\n+\n+    \/\/ Record to store parsing results for a filter with\n+    \/\/ illegal or malformed pattern string\n+    private record InvalidFilter(String filterPropertyName,\n+                                 IllegalArgumentException error)\n+            implements ConfiguredFilter {\n+\n+        @Override\n+        public ObjectInputFilter filter() {\n+            \/\/ Report a filter property name and an error message\n+            throw new IllegalArgumentException(filterPropertyName +\n+                    \": \" + error.getMessage());\n+        }\n+    }\n+\n+    \/\/ Read filter pattern value from a system\/security property\n+    \/\/ and create a filter record from it (valid or invalid).\n+    private static ConfiguredFilter initializeFilter(String filterPropertyName,\n+                                                     String filterDefaultValue) {\n+        try {\n+            var filter = ObjectInputFilter.Config.createFilter(\n+                    getFilterPropertyValue(filterPropertyName,\n+                            filterDefaultValue));\n+            return new ValidFilter(filter);\n+        } catch (IllegalArgumentException iae) {\n+            return new InvalidFilter(filterPropertyName, iae);\n+        }\n+    }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/naming\/internal\/ObjectFactoriesFilter.java","additions":68,"deletions":32,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n- * @run main\/othervm LdapFactoriesFilterTest false\n+ * @run main\/othervm LdapFactoriesFilterTest false true\n@@ -49,1 +49,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -52,1 +52,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -55,1 +55,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -58,1 +58,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -61,1 +61,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -64,1 +64,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -67,1 +67,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -70,1 +70,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -73,1 +73,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -76,1 +76,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -79,1 +79,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -82,1 +82,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -85,1 +85,1 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n@@ -89,1 +89,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -92,1 +92,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -96,1 +96,1 @@\n- *                   LdapFactoriesFilterTest true\n+ *                   LdapFactoriesFilterTest true true\n@@ -100,1 +100,13 @@\n- *                   LdapFactoriesFilterTest false\n+ *                   LdapFactoriesFilterTest false true\n+ *\n+ * @run main\/othervm -Djdk.jndi.ldap.object.factoriesFilter=.*\n+ *                   LdapFactoriesFilterTest false false\n+ *\n+ * @run main\/othervm -Djdk.jndi.ldap.object.factoriesFilter=*\n+ *                   -Djdk.jndi.object.factoriesFilter=.*\n+ *                   LdapFactoriesFilterTest false false\n+ *\n+ * @run main\/othervm -Djdk.jndi.ldap.object.factoriesFilter=*\n+ *                   -Djdk.jndi.object.factoriesFilter=*\n+ *                   -Djdk.jndi.rmi.object.factoriesFilter=.*\n+ *                   LdapFactoriesFilterTest true true\n@@ -107,0 +119,2 @@\n+        boolean ldapAndGlobalFiltersValid =\n+                Boolean.parseBoolean(args[1]);\n@@ -164,0 +178,17 @@\n+            } else if (!ldapAndGlobalFiltersValid) {\n+                \/\/ If LDAP or GLOBAL factories filter are not properly formatted we're expecting to\n+                \/\/ get NamingException with IllegalArgumentException set as a cause that contains\n+                \/\/ formatting error message.\n+                \/\/ If RMI filter is not properly formatted we're not expecting IAE here since\n+                \/\/ this test only performing LDAP lookups\n+                if (observedException instanceof NamingException ne) {\n+                    if (ne.getCause() instanceof IllegalArgumentException iae) {\n+                        \/\/ All tests with malformed filters contain wildcards with\n+                        \/\/ package name missing, therefore the message is expected\n+                        \/\/ to start with \"package missing in:\"\n+                        System.err.println(\"Found expected exception: \" + iae);\n+                    } else {\n+                        throw new AssertionError(\"IllegalArgumentException\" +\n+                                \" is expected for malformed filter values\");\n+                    }\n+                }\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/objects\/factory\/LdapFactoriesFilterTest.java","additions":49,"deletions":18,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import javax.naming.ConfigurationException;\n@@ -47,1 +46,1 @@\n- * @run main\/othervm RmiFactoriesFilterTest false\n+ * @run main\/othervm RmiFactoriesFilterTest false true\n@@ -50,1 +49,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -53,1 +52,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -56,1 +55,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -59,1 +58,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -62,1 +61,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -65,1 +64,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -68,1 +67,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -71,1 +70,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -74,1 +73,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -77,1 +76,1 @@\n- *                    RmiFactoriesFilterTest false\n+ *                    RmiFactoriesFilterTest false true\n@@ -80,1 +79,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -83,1 +82,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -86,1 +85,1 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n@@ -90,1 +89,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -93,1 +92,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -97,1 +96,1 @@\n- *                   RmiFactoriesFilterTest true\n+ *                   RmiFactoriesFilterTest true true\n@@ -101,1 +100,13 @@\n- *                   RmiFactoriesFilterTest false\n+ *                   RmiFactoriesFilterTest false true\n+ *\n+ * @run main\/othervm -Djdk.jndi.rmi.object.factoriesFilter=.*\n+ *                   RmiFactoriesFilterTest false false\n+ *\n+ * @run main\/othervm -Djdk.jndi.rmi.object.factoriesFilter=*\n+ *                   -Djdk.jndi.object.factoriesFilter=.*\n+ *                   RmiFactoriesFilterTest false false\n+ *\n+ * @run main\/othervm -Djdk.jndi.rmi.object.factoriesFilter=*\n+ *                   -Djdk.jndi.object.factoriesFilter=*\n+ *                   -Djdk.jndi.ldap.object.factoriesFilter=.*\n+ *                   RmiFactoriesFilterTest true true\n@@ -108,0 +119,2 @@\n+        boolean rmiAndGlobalFiltersValid =\n+                Boolean.parseBoolean(args[1]);\n@@ -117,1 +130,12 @@\n-        loadUsingFactoryFromTCCL(registryPort, classExpectedToLoad);\n+        Context context = getInitialContext(registryPort);\n+        \/\/ Bind the Reference object\n+        Reference ref = new Reference(\"TestObject\", \"com.test.TestFactory\",\n+                null);\n+        context.bind(\"objectTest\", ref);\n+\n+        loadUsingFactoryFromTCCL(registryPort, classExpectedToLoad, rmiAndGlobalFiltersValid);\n+        if (!rmiAndGlobalFiltersValid) {\n+            \/\/ Check that IAE is set as NamingException cause for malformed RMI or GLOBAL\n+            \/\/ filter values when lookup is called for the second time\n+            loadUsingFactoryFromTCCL(registryPort, classExpectedToLoad, false);\n+        }\n@@ -120,2 +144,1 @@\n-    private static void loadUsingFactoryFromTCCL(int registryPort, boolean classExpectedToLoad)\n-            throws NamingException {\n+    private static Context getInitialContext(int port) throws NamingException {\n@@ -125,1 +148,7 @@\n-        env.put(Context.PROVIDER_URL, \"rmi:\/\/127.0.0.1:\" + registryPort);\n+        env.put(Context.PROVIDER_URL, \"rmi:\/\/127.0.0.1:\" + port);\n+        return new InitialContext(env);\n+    }\n+\n+    private static void loadUsingFactoryFromTCCL(int registryPort,\n+                                                 boolean classExpectedToLoad,\n+                                                 boolean rmiAndGlobalFiltersValid) {\n@@ -127,4 +156,0 @@\n-        Context context = new InitialContext(env);\n-        Reference ref = new Reference(\"TestObject\", \"com.test.TestFactory\",\n-                null);\n-        context.bind(\"objectTest\", ref);\n@@ -133,0 +158,1 @@\n+            Context context = getInitialContext(registryPort);\n@@ -147,2 +173,14 @@\n-        } catch (ConfigurationException ce) {\n-            throw new AssertionError(\"Test infrastructure failure\", ce);\n+        } catch (NamingException ne) {\n+            \/\/ Only expecting NamingException for cases when RMI or GLOBAL filters are malformed\n+            if (rmiAndGlobalFiltersValid) {\n+                throw new AssertionError(\"Unexpected NamingException observed\", ne);\n+            }\n+            if (ne.getCause() instanceof IllegalArgumentException iae) {\n+                \/\/ All tests with malformed filters contain wildcards with\n+                \/\/ package name missing, therefore the message is expected\n+                \/\/ to start with \"package missing in:\"\n+                System.err.println(\"Found expected exception: \" + iae);\n+            } else {\n+                throw new AssertionError(\"IllegalArgument exception\" +\n+                        \" is expected for malformed filter values\");\n+            }\n","filename":"test\/jdk\/com\/sun\/jndi\/rmi\/registry\/objects\/RmiFactoriesFilterTest.java","additions":67,"deletions":29,"binary":false,"changes":96,"status":"modified"}]}