{"files":[{"patch":"@@ -65,10 +65,11 @@\n-      \/\/ No multiply reduction instructions\n-      case Op_MulReductionVD:\n-      case Op_MulReductionVF:\n-      case Op_MulReductionVI:\n-      case Op_MulReductionVL:\n-      \/\/ Vector API specific\n-      case Op_VectorTest:\n-      case Op_PopCountVI:\n-      case Op_PopCountVL:\n-        return false;\n+      case Op_VectorMaskLastTrue:\n+        if (!UseZbb || vlen > XLEN) {\n+          return false;\n+        }\n+        break;\n+      case Op_VectorMaskToLong:\n+      case Op_VectorLongToMask:\n+        if (vlen > XLEN) {\n+          return false;\n+        }\n+        break;\n@@ -76,1 +77,1 @@\n-        return true;\n+        break;\n@@ -78,0 +79,1 @@\n+    return true;\n@@ -4255,4 +4257,8 @@\n-instruct vmask_firsttrue_masked(iRegINoSp dst, vRegMask src, vRegMask_V0 v0, vRegMask tmp) %{\n-  match(Set dst (VectorMaskFirstTrue src v0));\n-  effect(TEMP tmp);\n-  format %{ \"vmask_firsttrue_masked $dst, $src, $v0\\t# KILL $tmp\" %}\n+\/\/ last true\n+\n+\/\/ Return the index of the first last lane that is set, or -1 if none of\n+\/\/ them are set.\n+\n+instruct vmask_lasttrue(iRegINoSp dst, vRegMask src) %{\n+  match(Set dst (VectorMaskLastTrue src));\n+  format %{ \"vmask_lasttrue $dst, $src\" %}\n@@ -4260,4 +4266,11 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this, $src));\n-    __ vmsbf_m(as_VectorRegister($tmp$$reg), as_VectorRegister($src$$reg), Assembler::v0_t);\n-    __ vcpop_m($dst$$Register, as_VectorRegister($tmp$$reg));\n+    uint vector_length = Matcher::vector_length(this, $src);\n+    assert(UseZbb && vector_length <= XLEN, \"precondition\");\n+    __ vsetvli_helper(T_LONG, 1);\n+    __ vmv_x_s($dst$$Register, as_VectorRegister($src$$reg));\n+    if (XLEN != vector_length) {\n+      __ slli($dst$$Register, $dst$$Register, XLEN - vector_length);\n+      __ srli($dst$$Register, $dst$$Register, XLEN - vector_length);\n+    }\n+    __ clz($dst$$Register, $dst$$Register);\n+    __ mv(t0, XLEN - 1);\n+    __ sub($dst$$Register, t0, $dst$$Register);\n@@ -4274,2 +4287,3 @@\n-    uint shift = 64 - Matcher::vector_length(this, $src);\n-    __ vsetivli(t0, 1, Assembler::e64);\n+    uint vector_length = Matcher::vector_length(this, $src);\n+    assert(vector_length <= XLEN, \"precondition\");\n+    __ vsetvli_helper(T_LONG, 1);\n@@ -4277,2 +4291,4 @@\n-    __ slli($dst$$Register, $dst$$Register, shift);\n-    __ srli($dst$$Register, $dst$$Register, shift);\n+    if (XLEN != vector_length) {\n+      __ slli($dst$$Register, $dst$$Register, XLEN - vector_length);\n+      __ srli($dst$$Register, $dst$$Register, XLEN - vector_length);\n+    }\n@@ -4289,1 +4305,2 @@\n-    __ vsetivli(t0, 1, Assembler::e64);\n+    assert(Matcher::vector_length(this) <= XLEN, \"precondition\");\n+    __ vsetvli_helper(T_LONG, 1);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":41,"deletions":24,"binary":false,"changes":65,"status":"modified"}]}