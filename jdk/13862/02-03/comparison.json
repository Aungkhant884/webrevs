{"files":[{"patch":"@@ -1643,9 +1643,6 @@\n-void C2_MacroAssembler::minmax_fp_masked_v(VectorRegister dst, VectorRegister src1, VectorRegister src2,\n-                                           bool is_double, bool is_min, int vector_length,\n-                                           VectorRegister tmp1, VectorRegister tmp2, VectorRegister vmask) {\n-  assert_different_registers(dst, src2);\n-  if (dst != src1) {\n-    \/\/ Inactive elements need to transfer the value in src1 to dst\n-    vmv_v_v(dst, src1);\n-  }\n-  vsetvli_helper(is_double ? T_DOUBLE : T_FLOAT, vector_length);\n+\/\/ The destination vector register elements corresponding to masked-off elements\n+\/\/ are handled with a mask-undisturbed policy.\n+void C2_MacroAssembler::minmax_fp_masked_v(VectorRegister dst, VectorRegister src1,\n+                                           VectorRegister src2, bool is_double, bool is_min,\n+                                           int vector_length, VectorRegister vmask) {\n+  assert_different_registers(dst, src1, src2);\n@@ -1653,5 +1650,2 @@\n-  \/\/ Check vector elements of src1 and src2 for NaN.\n-  vmfeq_vv(tmp1, src1, src1);\n-  vmfeq_vv(tmp2, src2, src2);\n-  vmand_mm(tmp1, tmp1, tmp2);\n-  vmand_mm(v0, vmask, tmp1);\n+  vsetvli_helper(is_double ? T_DOUBLE : T_FLOAT, vector_length);\n+  vmmv_m(v0, vmask);\n@@ -1662,1 +1656,4 @@\n-  vmandn_mm(v0, vmask, tmp2);\n+  vmfne_vv(v0, src1, src1, Assembler::v0_t);\n+  vfadd_vv(dst, src1, src1, Assembler::v0_t);\n+  vmmv_m(v0, vmask);\n+  vmfne_vv(v0, src2, src2, Assembler::v0_t);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -193,2 +193,1 @@\n-                         bool is_double, bool is_min, int vector_length,\n-                         VectorRegister tmp1, VectorRegister tmp2, VectorRegister vmask);\n+                         bool is_double, bool is_min, int vector_length, VectorRegister vmask);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -726,1 +726,1 @@\n-instruct vmaxF_masked(vReg dst_src1, vReg src2, vRegMask vmask, vReg tmp1, vReg tmp2) %{\n+instruct vmaxF_masked(vReg dst_src1, vReg src2, vRegMask vmask, vRegMask_V0 v0) %{\n@@ -729,1 +729,1 @@\n-  effect(TEMP_DEF dst_src1, TEMP tmp1, TEMP tmp2);\n+  effect(TEMP_DEF dst_src1, TEMP v0);\n@@ -731,1 +731,1 @@\n-  format %{ \"vmaxF_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $tmp1, $tmp2\" %}\n+  format %{ \"vmaxF_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $v0\" %}\n@@ -735,2 +735,1 @@\n-                          Matcher::vector_length(this), as_VectorRegister($tmp1$$reg),\n-                          as_VectorRegister($tmp2$$reg), as_VectorRegister($vmask$$reg));\n+                          Matcher::vector_length(this), as_VectorRegister($vmask$$reg));\n@@ -741,1 +740,1 @@\n-instruct vmaxD_masked(vReg dst_src1, vReg src2, vRegMask vmask, vReg tmp1, vReg tmp2) %{\n+instruct vmaxD_masked(vReg dst_src1, vReg src2, vRegMask vmask, vRegMask_V0 v0) %{\n@@ -744,1 +743,1 @@\n-  effect(TEMP_DEF dst_src1, TEMP tmp1, TEMP tmp2);\n+  effect(TEMP_DEF dst_src1, TEMP v0);\n@@ -746,1 +745,1 @@\n-  format %{ \"vmaxD_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $tmp1, $tmp2\" %}\n+  format %{ \"vmaxD_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $v0\" %}\n@@ -750,2 +749,1 @@\n-                          Matcher::vector_length(this), as_VectorRegister($tmp1$$reg),\n-                          as_VectorRegister($tmp2$$reg), as_VectorRegister($vmask$$reg));\n+                          Matcher::vector_length(this), as_VectorRegister($vmask$$reg));\n@@ -756,1 +754,1 @@\n-instruct vminF_masked(vReg dst_src1, vReg src2, vRegMask vmask, vReg tmp1, vReg tmp2) %{\n+instruct vminF_masked(vReg dst_src1, vReg src2, vRegMask vmask, vRegMask_V0 v0) %{\n@@ -759,1 +757,1 @@\n-  effect(TEMP_DEF dst_src1, TEMP tmp1, TEMP tmp2);\n+  effect(TEMP_DEF dst_src1, TEMP v0);\n@@ -761,1 +759,1 @@\n-  format %{ \"vminF_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $tmp1, $tmp2\" %}\n+  format %{ \"vminF_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $v0\" %}\n@@ -765,2 +763,1 @@\n-                          Matcher::vector_length(this), as_VectorRegister($tmp1$$reg),\n-                          as_VectorRegister($tmp2$$reg), as_VectorRegister($vmask$$reg));\n+                          Matcher::vector_length(this), as_VectorRegister($vmask$$reg));\n@@ -771,1 +768,1 @@\n-instruct vminD_masked(vReg dst_src1, vReg src2, vRegMask vmask, vReg tmp1, vReg tmp2) %{\n+instruct vminD_masked(vReg dst_src1, vReg src2, vRegMask vmask, vRegMask_V0 v0) %{\n@@ -774,1 +771,1 @@\n-  effect(TEMP_DEF dst_src1, TEMP tmp1, TEMP tmp2);\n+  effect(TEMP_DEF dst_src1, TEMP v0);\n@@ -776,1 +773,1 @@\n-  format %{ \"vminD_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $tmp1, $tmp2\" %}\n+  format %{ \"vminD_masked $dst_src1, $dst_src1, $src2, $vmask\\t# KILL $v0\" %}\n@@ -780,2 +777,1 @@\n-                          Matcher::vector_length(this), as_VectorRegister($tmp1$$reg),\n-                          as_VectorRegister($tmp2$$reg), as_VectorRegister($vmask$$reg));\n+                          Matcher::vector_length(this), as_VectorRegister($vmask$$reg));\n@@ -2895,1 +2891,1 @@\n-instruct vsqrt_masked(vReg dst_src, vRegMask_V0 v0) %{\n+instruct vsqrtF_masked(vReg dst_src, vRegMask_V0 v0) %{\n@@ -2897,0 +2893,11 @@\n+  ins_cost(VEC_COST);\n+  format %{ \"vsqrtF_masked $dst_src, $v0\" %}\n+  ins_encode %{\n+    __ vsetvli_helper(T_FLOAT, Matcher::vector_length(this));\n+    __ vfsqrt_v(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vsqrtD_masked(vReg dst_src, vRegMask_V0 v0) %{\n@@ -2899,1 +2906,1 @@\n-  format %{ \"vsqrt_masked $dst_src, $v0\" %}\n+  format %{ \"vsqrtD_masked $dst_src, $v0\" %}\n@@ -2901,2 +2908,1 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsetvli_helper(T_DOUBLE, Matcher::vector_length(this));\n@@ -3352,1 +3358,1 @@\n-instruct vmaskAllI(vRegMask dst, iRegI src) %{\n+instruct vmaskAllI(vRegMask dst, iRegIorL2I src) %{\n@@ -3364,1 +3370,1 @@\n-instruct vmaskAllI_masked(vRegMask dst, iRegI src, vRegMask_V0 v0, vReg tmp) %{\n+instruct vmaskAllI_masked(vRegMask dst, iRegIorL2I src, vRegMask_V0 v0, vReg tmp) %{\n@@ -4049,1 +4055,1 @@\n-instruct populateindex(vReg dst, iRegI src1, iRegI src2, vReg tmp1) %{\n+instruct populateindex(vReg dst, iRegIorL2I src1, iRegIorL2I src2, vReg tmp1) %{\n@@ -4068,1 +4074,1 @@\n-instruct insertI_index_lt32(vReg dst, vReg src, iRegI val, immI idx, vRegMask_V0 v0) %{\n+instruct insertI_index_lt32(vReg dst, vReg src, iRegIorL2I val, immI idx, vRegMask_V0 v0) %{\n@@ -4087,1 +4093,1 @@\n-instruct insertI_index(vReg dst, vReg src, iRegI val, iRegI idx, vReg tmp1, vRegMask_V0 v0) %{\n+instruct insertI_index(vReg dst, vReg src, iRegIorL2I val, iRegIorL2I idx, vReg tmp1, vRegMask_V0 v0) %{\n@@ -4125,1 +4131,1 @@\n-instruct insertL_index(vReg dst, vReg src, iRegL val, iRegI idx, vReg tmp1, vRegMask_V0 v0) %{\n+instruct insertL_index(vReg dst, vReg src, iRegL val, iRegIorL2I idx, vReg tmp1, vRegMask_V0 v0) %{\n@@ -4160,1 +4166,1 @@\n-instruct insertF_index(vReg dst, vReg src, fRegF val, iRegI idx, vReg tmp1, vRegMask_V0 v0) %{\n+instruct insertF_index(vReg dst, vReg src, fRegF val, iRegIorL2I idx, vReg tmp1, vRegMask_V0 v0) %{\n@@ -4194,1 +4200,1 @@\n-instruct insertD_index(vReg dst, vReg src, fRegD val, iRegI idx, vReg tmp1, vRegMask_V0 v0) %{\n+instruct insertD_index(vReg dst, vReg src, fRegD val, iRegIorL2I idx, vReg tmp1, vRegMask_V0 v0) %{\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":38,"deletions":32,"binary":false,"changes":70,"status":"modified"}]}