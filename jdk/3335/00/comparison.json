{"files":[{"patch":"@@ -364,3 +364,5 @@\n-                testClassNamed.append(\"package test;\\n\" +\n-                                      \"public class Test {\\n\" +\n-                                      \"    public static void main(String... args) throws Exception {\\n\");\n+                testClassNamed.append(\"\"\"\n+                        package test;\n+                        public class Test {\n+                            public static void main(String... args) throws Exception {\n+                        \"\"\");\n@@ -372,8 +374,8 @@\n-                testClassNamed.append(\"        Class<?> cp = Class.forName(Test.class.getClassLoader().getUnnamedModule(), \\\"cp.CP\\\");\\n\");\n-                testClassNamed.append(\"        cp.getDeclaredMethod(\\\"runMe\\\").invoke(null);\\n\");\n-\n-                testClassNamed.append(\"        Class<?> automatic = Class.forName(ModuleLayer.boot().findModule(\\\"automatic\\\").get(), \\\"automatic.Automatic\\\");\\n\");\n-                testClassNamed.append(\"        automatic.getDeclaredMethod(\\\"runMe\\\").invoke(null);\\n\");\n-\n-                testClassNamed.append(\"    }\\n\" +\n-                                      \"}\");\n+                testClassNamed.append(\"\"\"\n+                                Class<?> cp = Class.forName(Test.class.getClassLoader().getUnnamedModule(), \"cp.CP\");\n+                                cp.getDeclaredMethod(\"runMe\").invoke(null);\n+                                Class<?> automatic = Class.forName(ModuleLayer.boot().findModule(\"automatic\").get(), \"automatic.Automatic\");\n+                                automatic.getDeclaredMethod(\"runMe\").invoke(null);\n+                            }\n+                        }\n+                        \"\"\");\n@@ -418,2 +420,4 @@\n-                                  \"package test;\\n\" +\n-                                  \"public class Test {}\\n\");\n+                                  \"\"\"\n+                                      package test;\n+                                      public class Test {}\n+                                      \"\"\");\n@@ -451,6 +455,7 @@\n-            checkClassesAccessible.append(\"try {\");\n-            checkClassesAccessible.append(\"Class.forName(\\\"\" + e.getValue() + \"\\\").newInstance();\");\n-            checkClassesAccessible.append(\"System.err.println(\\\"\" + fqn + \":\" + e.getKey() + \":true\\\");\");\n-            checkClassesAccessible.append(\"} catch (Exception ex) {\");\n-            checkClassesAccessible.append(\"System.err.println(\\\"\" + fqn + \":\" + e.getKey() + \":false\\\");\");\n-            checkClassesAccessible.append(\"}\");\n+            checkClassesAccessible\n+                    .append(\"try {\")\n+                    .append(\"Class.forName(\\\"\" + e.getValue() + \"\\\").newInstance();\")\n+                    .append(\"System.err.println(\\\"\" + fqn + \":\" + e.getKey() + \":true\\\");\")\n+                    .append(\"} catch (Exception ex) {\")\n+                    .append(\"System.err.println(\\\"\" + fqn + \":\" + e.getKey() + \":false\\\");\")\n+                    .append(\"}\");\n","filename":"test\/langtools\/tools\/javac\/modules\/AddLimitMods.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -7,6 +7,6 @@\n-    class #6; \/\/ #1    \n-    Utf8 \"SourceFile\"; \/\/ #2    \n-    Utf8 \"module-info.java\"; \/\/ #3    \n-    Utf8 \"Module\"; \/\/ #4    \n-    Utf8 \"java.base\"; \/\/ #5    \n-    Utf8 \"foo\/module-info\"; \/\/ #6    \n+    class #6; \/\/ #1\n+    Utf8 \"SourceFile\"; \/\/ #2\n+    Utf8 \"module-info.java\"; \/\/ #3\n+    Utf8 \"Module\"; \/\/ #4\n+    Utf8 \"java.base\"; \/\/ #5\n+    Utf8 \"foo\/module-info\"; \/\/ #6\n","filename":"test\/langtools\/tools\/javac\/modules\/AnachronisticModuleInfo\/module-info.jcod","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -909,1 +909,2 @@\n-                                \"createSource(() -> filer.createResource(StandardLocation.CLASS_OUTPUT, \\\"impl\\\", \\\"impl\\\"\" + originating + \"), \\\"impl\\\", \\\"impl\\\")\",\n+                                \"\"\"\n+                                    createSource(() -> filer.createResource(StandardLocation.CLASS_OUTPUT, \"impl\", \"impl\\\"\"\"\" + originating + \"), \\\"impl\\\", \\\"impl\\\")\",\n@@ -1047,22 +1048,25 @@\n-            \"import java.util.*;\\n\" +\n-            \"import javax.annotation.processing.*;\\n\" +\n-            \"import javax.lang.model.*;\\n\" +\n-            \"import javax.lang.model.element.*;\\n\" +\n-            \"import javax.lang.model.type.*;\\n\" +\n-            \"import javax.lang.model.util.*;\\n\" +\n-            \"import javax.tools.*;\\n\" +\n-            \"@SupportedAnnotationTypes(\\\"*\\\")\\n\" +\n-            \"public final class AP extends AnnotationProcessing.GeneratingAP {\\n\" +\n-            \"\\n\" +\n-            \"        int round;\\n\" +\n-            \"\\n\" +\n-            \"        @Override\\n\" +\n-            \"        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\\n\" +\n-            \"            if (round++ != 0)\\n\" +\n-            \"                return false;\\n\" +\n-            \"            Filer filer = processingEnv.getFiler();\\n\" +\n-            \"            TypeElement jlObject = processingEnv.getElementUtils().getTypeElement(\\\"java.lang.Object\\\");\\n\" +\n-            code + \";\\n\" +\n-            \"            return false;\\n\" +\n-            \"        }\\n\" +\n-            \"    }\\n\";\n+            \"\"\"\n+                import java.util.*;\n+                import javax.annotation.processing.*;\n+                import javax.lang.model.*;\n+                import javax.lang.model.element.*;\n+                import javax.lang.model.type.*;\n+                import javax.lang.model.util.*;\n+                import javax.tools.*;\n+                @SupportedAnnotationTypes(\"*\")\n+                public final class AP extends AnnotationProcessing.GeneratingAP {\n+\n+                        int round;\n+\n+                        @Override\n+                        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                            if (round++ != 0)\n+                                return false;\n+                            Filer filer = processingEnv.getFiler();\n+                            TypeElement jlObject = processingEnv.getElementUtils().getTypeElement(\"java.lang.Object\");\n+                \"\"\" + code + \"\"\"\n+                ;\n+                            return false;\n+                        }\n+                    }\n+                \"\"\";\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessing.java","additions":27,"deletions":23,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -49,6 +49,7 @@\n-            \"module anno_proc1x {\\n\" +\n-            \"    requires java.compiler;\\n\" +\n-            \"\\n\" +\n-            \"    provides javax.annotation.processing.Processor\\n\" +\n-            \"      with mypkg1.MyProcessor1;\\n\" +\n-            \"}\";\n+            \"\"\"\n+                module anno_proc1x {\n+                    requires java.compiler;\n+\n+                    provides javax.annotation.processing.Processor\n+                      with mypkg1.MyProcessor1;\n+                }\"\"\";\n@@ -57,6 +58,7 @@\n-            \"module anno_proc2x {\\n\" +\n-            \"    requires java.compiler;\\n\" +\n-            \"\\n\" +\n-            \"    provides javax.annotation.processing.Processor\\n\" +\n-            \"      with mypkg2.MyProcessor2;\\n\" +\n-            \"}\";\n+            \"\"\"\n+                module anno_proc2x {\n+                    requires java.compiler;\n+\n+                    provides javax.annotation.processing.Processor\n+                      with mypkg2.MyProcessor2;\n+                }\"\"\";\n@@ -65,24 +67,25 @@\n-            \"package mypkg1;\\n\" +\n-            \"\\n\" +\n-            \"import javax.annotation.processing.AbstractProcessor;\\n\" +\n-            \"import javax.annotation.processing.RoundEnvironment;\\n\" +\n-            \"import javax.annotation.processing.SupportedAnnotationTypes;\\n\" +\n-            \"import javax.lang.model.SourceVersion;\\n\" +\n-            \"import javax.lang.model.element.*;\\n\" +\n-            \"\\n\" +\n-            \"import java.util.*;\\n\" +\n-            \"\\n\" +\n-            \"@SupportedAnnotationTypes(\\\"*\\\")\\n\" +\n-            \"public final class MyProcessor1 extends AbstractProcessor {\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\\n\" +\n-            \"        return false;\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public SourceVersion getSupportedSourceVersion() {\\n\" +\n-            \"        System.out.println(\\\"the annotation processor 1 is working!\\\");\\n\" +\n-            \"        return SourceVersion.latest();\\n\" +\n-            \"    }\\n\" +\n-            \"}\";\n+            \"\"\"\n+                package mypkg1;\n+\n+                import javax.annotation.processing.AbstractProcessor;\n+                import javax.annotation.processing.RoundEnvironment;\n+                import javax.annotation.processing.SupportedAnnotationTypes;\n+                import javax.lang.model.SourceVersion;\n+                import javax.lang.model.element.*;\n+\n+                import java.util.*;\n+\n+                @SupportedAnnotationTypes(\"*\")\n+                public final class MyProcessor1 extends AbstractProcessor {\n+\n+                    @Override\n+                    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public SourceVersion getSupportedSourceVersion() {\n+                        System.out.println(\"the annotation processor 1 is working!\");\n+                        return SourceVersion.latest();\n+                    }\n+                }\"\"\";\n@@ -91,24 +94,25 @@\n-            \"package mypkg2;\\n\" +\n-            \"\\n\" +\n-            \"import javax.annotation.processing.AbstractProcessor;\\n\" +\n-            \"import javax.annotation.processing.RoundEnvironment;\\n\" +\n-            \"import javax.annotation.processing.SupportedAnnotationTypes;\\n\" +\n-            \"import javax.lang.model.SourceVersion;\\n\" +\n-            \"import javax.lang.model.element.*;\\n\" +\n-            \"\\n\" +\n-            \"import java.util.*;\\n\" +\n-            \"\\n\" +\n-            \"@SupportedAnnotationTypes(\\\"*\\\")\\n\" +\n-            \"public final class MyProcessor2 extends AbstractProcessor {\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\\n\" +\n-            \"        return false;\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public SourceVersion getSupportedSourceVersion() {\\n\" +\n-            \"        System.out.println(\\\"the annotation processor 2 is working!\\\");\\n\" +\n-            \"        return SourceVersion.latest();\\n\" +\n-            \"    }\\n\" +\n-            \"}\";\n+            \"\"\"\n+                package mypkg2;\n+\n+                import javax.annotation.processing.AbstractProcessor;\n+                import javax.annotation.processing.RoundEnvironment;\n+                import javax.annotation.processing.SupportedAnnotationTypes;\n+                import javax.lang.model.SourceVersion;\n+                import javax.lang.model.element.*;\n+\n+                import java.util.*;\n+\n+                @SupportedAnnotationTypes(\"*\")\n+                public final class MyProcessor2 extends AbstractProcessor {\n+\n+                    @Override\n+                    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public SourceVersion getSupportedSourceVersion() {\n+                        System.out.println(\"the annotation processor 2 is working!\");\n+                        return SourceVersion.latest();\n+                    }\n+                }\"\"\";\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessorsInModulesTest.java","additions":64,"deletions":60,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -273,5 +273,6 @@\n-                \"module A { \" +\n-                        \"exports p1 to B; opens p1 to B;\" +\n-                        \"exports p2 to C; opens p2 to C;\" +\n-                        \"exports p3 to B,C; opens p3 to B,C;\" +\n-                        \"}\",\n+                \"\"\"\n+                    module A {\n+                        exports p1 to B; opens p1 to B;\n+                        exports p2 to C; opens p2 to C;\n+                        exports p3 to B,C; opens p3 to B,C;\n+                    }\"\"\",\n@@ -550,4 +551,5 @@\n-                              suppress + \"module m3x {\\n\" +\n-                              \"    requires m1x;\\n\" +\n-                              \"    exports api to m1x, m2x;\\n\" +\n-                              \"}\",\n+                              suppress + \"\"\"\n+                                  module m3x {\n+                                      requires m1x;\n+                                      exports api to m1x, m2x;\n+                                  }\"\"\",\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationsOnModules.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -464,4 +464,5 @@\n-                          \"module m1x {\\n\" +\n-                          \"    requires transitive automaticA;\\n\" +\n-                          \"    requires automaticB;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module m1x {\n+                                  requires transitive automaticA;\n+                                  requires automaticB;\n+                              }\"\"\");\n@@ -553,5 +554,6 @@\n-                          \"@SuppressWarnings(\\\"requires-transitive-automatic\\\")\\n\" +\n-                          \"module m1x {\\n\" +\n-                          \"    requires transitive automaticA;\\n\" +\n-                          \"    requires automaticB;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              @SuppressWarnings(\"requires-transitive-automatic\")\n+                              module m1x {\n+                                  requires transitive automaticA;\n+                                  requires automaticB;\n+                              }\"\"\");\n@@ -593,5 +595,6 @@\n-                          \"@SuppressWarnings(\\\"requires-automatic\\\")\\n\" +\n-                          \"module m1x {\\n\" +\n-                          \"    requires transitive automaticA;\\n\" +\n-                          \"    requires automaticB;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              @SuppressWarnings(\"requires-automatic\")\n+                              module m1x {\n+                                  requires transitive automaticA;\n+                                  requires automaticB;\n+                              }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/AutomaticModules.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -580,7 +580,9 @@\n-                          \"package test;\\n\" +\n-                          \"import api.Sub;\\n\" +\n-                          \"import api.Base;\\n\" +\n-                          \"public class Test {\\n\" +\n-                          \"    Sub a2;\\n\" +\n-                          \"    Base a;\\n\" +\n-                          \"}\\n\");\n+                          \"\"\"\n+                              package test;\n+                              import api.Sub;\n+                              import api.Base;\n+                              public class Test {\n+                                  Sub a2;\n+                                  Base a;\n+                              }\n+                              \"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/ConvenientAccessErrorsTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -305,2 +305,4 @@\n-                          \"package test.m1x;\\n\" +\n-                          \"public class Test {}\\n\");\n+                          \"\"\"\n+                              package test.m1x;\n+                              public class Test {}\n+                              \"\"\");\n@@ -310,2 +312,4 @@\n-                          \"package test;\\n\" +\n-                          \"public class m1x {}\\n\");\n+                          \"\"\"\n+                              package test;\n+                              public class m1x {}\n+                              \"\"\");\n@@ -518,4 +522,8 @@\n-                          \"package m1x;\\n\" +\n-                          \"import m1x.a.*; public class Test { A a; }\\n\",\n-                          \"package m1x.a;\\n\" +\n-                          \"public class A { }\\n\");\n+                          \"\"\"\n+                              package m1x;\n+                              import m1x.a.*; public class Test { A a; }\n+                              \"\"\",\n+                          \"\"\"\n+                              package m1x.a;\n+                              public class A { }\n+                              \"\"\");\n@@ -525,2 +533,4 @@\n-                          \"package m1x;\\n\" +\n-                          \"public class a { public static class A { } }\\n\");\n+                          \"\"\"\n+                              package m1x;\n+                              public class a { public static class A { } }\n+                              \"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/EdgeCases.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -56,21 +56,31 @@\n-        String warningsTest = \"package api;\\n\" +\n-                      \"import impl.impl.*;\\n\" +\n-                      \"@impl.impl^.DocAnn\\n\" +\n-                      \"public abstract class Api<T extends impl.impl^.Cls&impl.impl^.Intf> extends impl.impl^.Cls implements impl.impl^.Intf, impl.impl^.NonDocAnn, impl.impl^.DocAnn {\\n\" +\n-                      \"    public static <E extends impl.impl^.Cls&impl.impl^.Intf> impl.impl^.Cls m(impl.impl^.Intf i, impl.impl^.Cls c) throws impl.impl^.Exc { return null; }\\n\" +\n-                      \"    public static impl.impl^.Cls f;\\n\" +\n-                      \"}\";\n-        String noWarningsTest = \"package api;\\n\" +\n-                      \"import impl.impl.*;\\n\" +\n-                      \"@impl.impl.NonDocAnn\\n\" +\n-                      \"public abstract class Api {\\n\" +\n-                      \"    private static abstract class I <T extends impl.impl.Cls&impl.impl.Intf> extends impl.impl.Cls implements impl.impl.Intf, impl.impl.NonDocAnn, impl.impl.DocAnn {\\n\" +\n-                      \"        public static abstract class II <T extends impl.impl.Cls&impl.impl.Intf> extends impl.impl.Cls implements impl.impl.Intf, impl.impl.NonDocAnn, impl.impl.DocAnn { }\\n\" +\n-                      \"        public static <E extends impl.impl.Cls&impl.impl.Intf> impl.impl.Cls m(impl.impl.Intf i, impl.impl.Cls c) throws impl.impl.Exc { return null; }\\n\" +\n-                      \"        public static impl.impl.Cls f;\\n\" +\n-                      \"    }\\n\" +\n-                      \"    private static <E extends impl.impl.Cls&impl.impl.Intf> impl.impl.Cls m(impl.impl.Intf i, impl.impl.Cls c) throws impl.impl.Exc { return null; }\\n\" +\n-                      \"    private static impl.impl.Cls f1;\\n\" +\n-                      \"    public static void m() { new impl.impl.Cls(); }\\n\" +\n-                      \"    public static Object f2 = new impl.impl.Cls();\\n\" +\n-                      \"}\";\n+        String warningsTest = \"\"\"\n+            package api;\n+            import impl.impl.*;\n+            @impl.impl^.DocAnn\n+            public abstract class Api<T extends impl.impl^.Cls&impl.impl^.Intf> extends impl\\\n+            .impl^.Cls implements impl.impl^.Intf, impl.impl^.NonDocAnn, impl.impl^.DocAnn {\n+                public static <E extends impl.impl^.Cls&impl.impl^.Intf> impl.impl^.Cls m(im\\\n+            pl.impl^.Intf i, impl.impl^.Cls c) throws impl.impl^.Exc { return null; }\n+                public static impl.impl^.Cls f;\n+            }\"\"\";\n+        String noWarningsTest = \"\"\"\n+            package api;\n+            import impl.impl.*;\n+            @impl.impl.NonDocAnn\n+            public abstract class Api {\n+                private static abstract class I <T extends impl.impl.Cls&impl.impl.Intf> ext\\\n+            ends impl.impl.Cls implements impl.impl.Intf, impl.impl.NonDocAnn, impl.impl.Doc\\\n+            Ann {\n+                    public static abstract class II <T extends impl.impl.Cls&impl.impl.Intf>\\\n+             extends impl.impl.Cls implements impl.impl.Intf, impl.impl.NonDocAnn, impl.impl\\\n+            .DocAnn { }\n+                    public static <E extends impl.impl.Cls&impl.impl.Intf> impl.impl.Cls m(i\\\n+            mpl.impl.Intf i, impl.impl.Cls c) throws impl.impl.Exc { return null; }\n+                    public static impl.impl.Cls f;\n+                }\n+                private static <E extends impl.impl.Cls&impl.impl.Intf> impl.impl.Cls m(impl\\\n+            .impl.Intf i, impl.impl.Cls c) throws impl.impl.Exc { return null; }\n+                private static impl.impl.Cls f1;\n+                public static void m() { new impl.impl.Cls(); }\n+                public static Object f2 = new impl.impl.Cls();\n+            }\"\"\";\n@@ -174,25 +184,31 @@\n-                          \"module api {\\n\" +\n-                          \"    exports api;\\n\" +\n-                          \"    exports qapi1 to qual1x;\\n\" +\n-                          \"    exports qapi2 to qual1x, qual2x;\\n\" +\n-                          \"    requires transitive lib1x;\\n\" +\n-                          \"    requires lib2x;\\n\" +\n-                          \"}\\n\",\n-                          \"package api;\\n\" +\n-                          \"public class Api {\\n\" +\n-                          \"    public lib1.Lib1 lib1;\\n\" +\n-                          \"    public lib2.Lib2 lib2;\\n\" +\n-                          \"    public qapi1.QApi1 qapi1;\\n\" +\n-                          \"    public impl.Impl impl;\\n\" +\n-                          \"}\",\n-                          \"package qapi1;\\n\" +\n-                          \"public class QApi1 {\\n\" +\n-                          \"    public qapi2.QApi2 qapi2;\\n\" +\n-                          \"}\",\n-                          \"package qapi2;\\n\" +\n-                          \"public class QApi2 {\\n\" +\n-                          \"    public qapi1.QApi1 qapi1;\\n\" +\n-                          \"}\",\n-                          \"package impl;\\n\" +\n-                          \"public class Impl {\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module api {\n+                                  exports api;\n+                                  exports qapi1 to qual1x;\n+                                  exports qapi2 to qual1x, qual2x;\n+                                  requires transitive lib1x;\n+                                  requires lib2x;\n+                              }\n+                              \"\"\",\n+                          \"\"\"\n+                              package api;\n+                              public class Api {\n+                                  public lib1.Lib1 lib1;\n+                                  public lib2.Lib2 lib2;\n+                                  public qapi1.QApi1 qapi1;\n+                                  public impl.Impl impl;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package qapi1;\n+                              public class QApi1 {\n+                                  public qapi2.QApi2 qapi2;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package qapi2;\n+                              public class QApi2 {\n+                                  public qapi1.QApi1 qapi1;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package impl;\n+                              public class Impl {\n+                              }\"\"\");\n@@ -235,15 +251,18 @@\n-                          \"module api {\\n\" +\n-                          \"    exports api;\\n\" +\n-                          \"}\\n\",\n-                          \"package api;\\n\" +\n-                          \"import impl.Impl.Nested;\\n\" +\n-                          \"public class Api {\\n\" +\n-                          \"    public impl.Impl impl1;\\n\" +\n-                          \"    public impl.Impl.Nested impl2;\\n\" +\n-                          \"    public Nested impl3;\\n\" +\n-                          \"}\",\n-                          \"package impl;\\n\" +\n-                          \"public class Impl {\\n\" +\n-                          \"    public static class Nested {\\n\" +\n-                          \"    }\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module api {\n+                                  exports api;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package api;\n+                              import impl.Impl.Nested;\n+                              public class Api {\n+                                  public impl.Impl impl1;\n+                                  public impl.Impl.Nested impl2;\n+                                  public Nested impl3;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package impl;\n+                              public class Impl {\n+                                  public static class Nested {\n+                                  }\n+                              }\"\"\");\n@@ -282,19 +301,23 @@\n-                          \"module api {\\n\" +\n-                          \"    exports api;\\n\" +\n-                          \"}\\n\",\n-                          \"package api;\\n\" +\n-                          \"public class Api extends PackagePrivateClass<PackagePrivateInterface> implements PackagePrivateInterface<PackagePrivateClass> {\\n\" +\n-                          \"    protected PackagePrivateClass<?> f1;\\n\" +\n-                          \"    protected PackagePrivateInterface<?> f2;\\n\" +\n-                          \"    protected Inner f3;\\n\" +\n-                          \"    protected PrivateInner f4;\\n\" +\n-                          \"    protected impl.Impl f5;\\n\" +\n-                          \"    public static class InnerClass extends PrivateInner {}\\n\" +\n-                          \"    protected static class Inner {}\\n\" +\n-                          \"    private static class PrivateInner {}\\n\" +\n-                          \"}\\n\" +\n-                          \"class PackagePrivateClass<T> {}\\n\" +\n-                          \"interface PackagePrivateInterface<T> {}\",\n-                          \"package impl;\\n\" +\n-                          \"public class Impl {\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module api {\n+                                  exports api;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package api;\n+                              public class Api extends PackagePrivateClass<PackagePrivateInterface> implements\\\n+                               PackagePrivateInterface<PackagePrivateClass> {\n+                                  protected PackagePrivateClass<?> f1;\n+                                  protected PackagePrivateInterface<?> f2;\n+                                  protected Inner f3;\n+                                  protected PrivateInner f4;\n+                                  protected impl.Impl f5;\n+                                  public static class InnerClass extends PrivateInner {}\n+                                  protected static class Inner {}\n+                                  private static class PrivateInner {}\n+                              }\n+                              class PackagePrivateClass<T> {}\n+                              interface PackagePrivateInterface<T> {}\"\"\",\n+                          \"\"\"\n+                              package impl;\n+                              public class Impl {\n+                              }\"\"\");\n@@ -336,18 +359,21 @@\n-                          \"module api {\\n\" +\n-                          \"    exports api;\\n\" +\n-                          \"}\\n\",\n-                          \"package api;\\n\" +\n-                          \"public class Api {\\n\" +\n-                          \"    @SuppressWarnings(\\\"exports\\\")\\n\" +\n-                          \"    public PackagePrivateClass f1;\\n\" +\n-                          \"    public PackagePrivateClass f2;\\n\" +\n-                          \"    @SuppressWarnings(\\\"exports\\\")\\n\" +\n-                          \"    public void t() {}\\n\" +\n-                          \"    public PackagePrivateClass f3;\\n\" +\n-                          \"    @SuppressWarnings(\\\"exports\\\")\\n\" +\n-                          \"    public static class C {\\n\" +\n-                          \"        public PackagePrivateClass f4;\\n\" +\n-                          \"    }\\n\" +\n-                          \"    public PackagePrivateClass f5;\\n\" +\n-                          \"}\\n\" +\n-                          \"class PackagePrivateClass<T> {}\\n\");\n+                          \"\"\"\n+                              module api {\n+                                  exports api;\n+                              }\"\"\",\n+                          \"\"\"\n+                              package api;\n+                              public class Api {\n+                                  @SuppressWarnings(\"exports\")\n+                                  public PackagePrivateClass f1;\n+                                  public PackagePrivateClass f2;\n+                                  @SuppressWarnings(\"exports\")\n+                                  public void t() {}\n+                                  public PackagePrivateClass f3;\n+                                  @SuppressWarnings(\"exports\")\n+                                  public static class C {\n+                                      public PackagePrivateClass f4;\n+                                  }\n+                                  public PackagePrivateClass f5;\n+                              }\n+                              class PackagePrivateClass<T> {}\n+                              \"\"\");\n@@ -400,7 +426,11 @@\n-                          \"module api {\\n\" +\n-                          \"    requires transitive dep;\\n\" +\n-                          \"    requires transitive api.one;\\n\" +\n-                          \"    exports api;\\n\" +\n-                          \"}\\n\",\n-                          \"package api;\\n\" +\n-                          \"public class Api extends dep.Dep implements api2.Api2 {}\\n\");\n+                          \"\"\"\n+                              module api {\n+                                  requires transitive dep;\n+                                  requires transitive api.one;\n+                                  exports api;\n+                              }\n+                              \"\"\",\n+                          \"\"\"\n+                              package api;\n+                              public class Api extends dep.Dep implements api2.Api2 {}\n+                              \"\"\");\n@@ -409,6 +439,10 @@\n-                          \"module dep {\\n\" +\n-                          \"    requires transitive api.one;\\n\" +\n-                          \"    exports dep;\\n\" +\n-                          \"}\\n\",\n-                          \"package dep;\\n\" +\n-                          \"public class Dep {}\\n\");\n+                          \"\"\"\n+                              module dep {\n+                                  requires transitive api.one;\n+                                  exports dep;\n+                              }\n+                              \"\"\",\n+                          \"\"\"\n+                              package dep;\n+                              public class Dep {}\n+                              \"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/ExportsUnexported.java","additions":145,"deletions":111,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -50,5 +50,6 @@\n-          \"class HelloWorld {\\n\"\n-        + \"    public static void main(String... args) {\\n\"\n-        + \"        System.out.println(\\\"Hello World!\\\");\\n\"\n-        + \"    }\\n\"\n-        + \"}\";\n+          \"\"\"\n+              class HelloWorld {\n+                  public static void main(String... args) {\n+                      System.out.println(\"Hello World!\");\n+                  }\n+              }\"\"\";\n","filename":"test\/langtools\/tools\/javac\/modules\/HelloWorldTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -751,4 +751,5 @@\n-                          \"module m1a {\\n\" +\n-                          \"    requires m2a;\\n\" +\n-                          \"    requires m2b;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module m1a {\n+                                  requires m2a;\n+                                  requires m2b;\n+                              }\"\"\");\n@@ -756,4 +757,5 @@\n-                          \"module m1b {\\n\" +\n-                          \"    requires m2b;\\n\" +\n-                          \"    requires m2a;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module m1b {\n+                                  requires m2b;\n+                                  requires m2a;\n+                              }\"\"\");\n@@ -761,5 +763,6 @@\n-                          \"module m2a {\\n\" +\n-                          \"    requires m3;\\n\" +\n-                          \"    requires m1a;\\n\" +\n-                          \"    requires m1b;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module m2a {\n+                                  requires m3;\n+                                  requires m1a;\n+                                  requires m1b;\n+                              }\"\"\");\n@@ -767,5 +770,6 @@\n-                          \"module m2b {\\n\" +\n-                          \"    requires m3;\\n\" +\n-                          \"    requires m1a;\\n\" +\n-                          \"    requires m1b;\\n\" +\n-                          \"}\");\n+                          \"\"\"\n+                              module m2b {\n+                                  requires m3;\n+                                  requires m1a;\n+                                  requires m1b;\n+                              }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/ModuleInfoTest.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -93,5 +93,6 @@\n-        String expected = \"module m1x {\\n\" +\n-                          \"  requires java.base;\\n\" +\n-                          \"  exports api1;\\n\" +\n-                          \"  opens api2;\\n\" +\n-                          \"}\";\n+        String expected = \"\"\"\n+            module m1x {\n+              requires java.base;\n+              exports api1;\n+              opens api2;\n+            }\"\"\";\n@@ -157,4 +158,5 @@\n-        String expected = \"open module m1x {\\n\" +\n-                          \"  requires java.base;\\n\" +\n-                          \"  exports api1;\\n\" +\n-                          \"}\";\n+        String expected = \"\"\"\n+                open module m1x {\n+                  requires java.base;\n+                  exports api1;\n+                }\"\"\";\n","filename":"test\/langtools\/tools\/javac\/modules\/OpenModulesTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -50,6 +50,7 @@\n-            \"module pluginMod1x {\\n\" +\n-            \"    requires jdk.compiler;\\n\" +\n-            \"\\n\" +\n-            \"    provides com.sun.source.util.Plugin\\n\" +\n-            \"      with mypkg1.SimplePlugin1;\\n\" +\n-            \"}\";\n+            \"\"\"\n+                module pluginMod1x {\n+                    requires jdk.compiler;\n+\n+                    provides com.sun.source.util.Plugin\n+                      with mypkg1.SimplePlugin1;\n+                }\"\"\";\n@@ -58,34 +59,35 @@\n-            \"package mypkg1;\\n\" +\n-            \"import com.sun.source.util.JavacTask;\\n\" +\n-            \"import com.sun.source.util.Plugin;\\n\" +\n-            \"import com.sun.source.util.TaskEvent;\\n\" +\n-            \"import com.sun.source.util.TaskListener;\\n\" +\n-            \"\\n\" +\n-            \"public class SimplePlugin1 implements Plugin {\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public String getName() {\\n\" +\n-            \"        return \\\"simpleplugin1\\\";\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    @Override\\n\" +\n-            \"    public void init(JavacTask task, String... args) {\\n\" +\n-            \"        task.addTaskListener(new PostAnalyzeTaskListener());\\n\" +\n-            \"    }\\n\" +\n-            \"\\n\" +\n-            \"    private static class PostAnalyzeTaskListener implements TaskListener {\\n\" +\n-            \"        @Override\\n\" +\n-            \"        public void started(TaskEvent taskEvent) { \\n\" +\n-            \"            if (taskEvent.getKind().equals(TaskEvent.Kind.COMPILATION)) {\\n\" +\n-            \"                System.out.println(\\\"simpleplugin1 started for event \\\" + taskEvent.getKind());\\n\" +\n-            \"            }\\n\" +\n-            \"        }\\n\" +\n-            \"\\n\" +\n-            \"        @Override\\n\" +\n-            \"        public void finished(TaskEvent taskEvent) {\\n\" +\n-            \"            if (taskEvent.getKind().equals(TaskEvent.Kind.COMPILATION)) {\\n\" +\n-            \"                System.out.println(\\\"simpleplugin1 finished for event \\\" + taskEvent.getKind());\\n\" +\n-            \"            }\\n\" +\n-            \"        }\\n\" +\n-            \"    }\\n\" +\n-            \"}\";\n+            \"\"\"\n+                package mypkg1;\n+                import com.sun.source.util.JavacTask;\n+                import com.sun.source.util.Plugin;\n+                import com.sun.source.util.TaskEvent;\n+                import com.sun.source.util.TaskListener;\n+\n+                public class SimplePlugin1 implements Plugin {\n+\n+                    @Override\n+                    public String getName() {\n+                        return \"simpleplugin1\";\n+                    }\n+\n+                    @Override\n+                    public void init(JavacTask task, String... args) {\n+                        task.addTaskListener(new PostAnalyzeTaskListener());\n+                    }\n+\n+                    private static class PostAnalyzeTaskListener implements TaskListener {\n+                        @Override\n+                        public void started(TaskEvent taskEvent) {\\s\n+                            if (taskEvent.getKind().equals(TaskEvent.Kind.COMPILATION)) {\n+                                System.out.println(\"simpleplugin1 started for event \" + taskEvent.getKind());\n+                            }\n+                        }\n+\n+                        @Override\n+                        public void finished(TaskEvent taskEvent) {\n+                            if (taskEvent.getKind().equals(TaskEvent.Kind.COMPILATION)) {\n+                                System.out.println(\"simpleplugin1 finished for event \" + taskEvent.getKind());\n+                            }\n+                        }\n+                    }\n+                }\"\"\";\n","filename":"test\/langtools\/tools\/javac\/modules\/PluginsInModulesTest.java","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -59,5 +59,6 @@\n-                \"module m { requires static java.se; }\",\n-                \"import java.awt.Frame;\\n\"  \/\/ in java.se\n-                + \"class Test {\\n\"\n-                + \"    Frame f;\\n\"\n-                + \"}\");\n+                \/\/ use class in java.se\n+                \"\"\"\n+                    import java.awt.Frame;\n+                    class Test {\n+                        Frame f;\n+                    }\"\"\");\n@@ -79,4 +80,6 @@\n-                \"import com.sun.source.tree.Tree;\\n\" \/\/ not in java.se (in jdk.compiler)\n-                + \"class Test {\\n\"\n-                + \"    Tree t;\\n\"\n-                + \"}\");\n+                \/\/ use class not in java.se (in jdk.compiler)\n+                \"\"\"\n+                    import com.sun.source.tree.Tree;\n+                    class Test {\n+                        Tree t;\n+                    }\"\"\");\n@@ -157,4 +160,6 @@\n-                \"package p1;\\n\"\n-                + \"import p2.C2;\\n\"\n-                + \"import p3.C3;\\n\"\n-                + \"import p4.C4;\\n\"\n+                \"\"\"\n+                    package p1;\n+                    import p2.C2;\n+                    import p3.C3;\n+                    import p4.C4;\n+                    \"\"\"\n@@ -162,2 +167,4 @@\n-                + \"class C1 {\\n\"\n-                + \"  C2 c2; C3 c3; C4 c4;\\n\"\n+                + \"\"\"\n+                    class C1 {\n+                      C2 c2; C3 c3; C4 c4;\n+                    \"\"\"\n@@ -169,7 +176,9 @@\n-                \"module m2x {\\n\"\n-                + \"  requires transitive m3x;\\n\"\n-                + \"  requires static m6x;\\n\"\n-                + \"  exports p2;\\n\"\n-                + \"}\",\n-                \"package p2;\\n\"\n-                + \"public class C2 {p7.C7 c7; p6.C6 c6; p4.C4 c4;}\\n\");\n+                \"\"\"\n+                    module m2x {\n+                      requires transitive m3x;\n+                      requires static m6x;\n+                      exports p2;\n+                    }\"\"\",\n+                \"\"\"\n+                    package p2;\n+                    public class C2 {p7.C7 c7; p6.C6 c6; p4.C4 c4;}\"\"\");\n@@ -180,2 +189,3 @@\n-                \"package p3;\\n\"\n-                + \"public class C3 { }\\n\");\n+                \"\"\"\n+                    package p3;\n+                    public class C3 { }\"\"\");\n@@ -186,2 +196,3 @@\n-                \"package p4;\\n\"\n-                + \"public class C4 { p6.C6 c6; p7.C7 c7;}\\n\");\n+                \"\"\"\n+                    package p4;\n+                    public class C4 { p6.C6 c6; p7.C7 c7;}\"\"\");\n@@ -192,2 +203,3 @@\n-                \"package p5;\\n\"\n-                + \"public class C5 { }\\n\");\n+                \"\"\"\n+                    package p5;\n+                    public class C5 { }\"\"\");\n@@ -198,2 +210,3 @@\n-                \"package p6;\\n\"\n-                + \"public class C6 { p7.C7 c7; }\\n\");\n+                \"\"\"\n+                    package p6;\n+                    public class C6 { p7.C7 c7; }\"\"\");\n@@ -204,2 +217,3 @@\n-                \"package p7;\\n\"\n-                + \"public class C7 { p8.C8 c8; }\\n\");\n+                \"\"\"\n+                    package p7;\n+                    public class C7 { p8.C8 c8; }\"\"\");\n@@ -210,2 +224,3 @@\n-                \"package p8;\\n\"\n-                        + \"public class C8 { }\\n\");\n+                \"\"\"\n+                    package p8;\n+                    public class C8 { }\"\"\");\n@@ -238,14 +253,16 @@\n-                \"package m3x;\\n\" +\n-                \"public class Test {\\n\" +\n-                \"    public static void main(String... args) {\\n\" +\n-                \"        try {\\n\" +\n-                \"           Class.forName(\\\"m1x.Api\\\");\\n\" +\n-                \"        } catch (ClassNotFoundException e) {\\n\" +\n-                \"            System.err.println(\\\"ok\\\");\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\",\n-                \"package m3x;\\n\" +\n-                \"public class ApiUse{\\n\" +\n-                \"    m1x.Api api;\\n\" +\n-                \"}\");\n+                \"\"\"\n+                    package m3x;\n+                    public class Test {\n+                        public static void main(String... args) {\n+                            try {\n+                               Class.forName(\"m1x.Api\");\n+                            } catch (ClassNotFoundException e) {\n+                                System.err.println(\"ok\");\n+                            }\n+                        }\n+                    }\"\"\",\n+                \"\"\"\n+                    package m3x;\n+                    public class ApiUse{\n+                        m1x.Api api;\n+                    }\"\"\");\n@@ -310,14 +327,16 @@\n-                \"package m3x;\\n\" +\n-                \"public class Test {\\n\" +\n-                \"    public static void main(String... args) {\\n\" +\n-                \"        try {\\n\" +\n-                \"           Class.forName(\\\"m1x.Api\\\");\\n\" +\n-                \"        } catch (ClassNotFoundException e) {\\n\" +\n-                \"            System.err.println(\\\"ok\\\");\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\",\n-                \"package m3x;\\n\" +\n-                \"public class ApiUse{\\n\" +\n-                \"    m1x.Api api;\\n\" +\n-                \"}\");\n+                \"\"\"\n+                    package m3x;\n+                    public class Test {\n+                        public static void main(String... args) {\n+                            try {\n+                               Class.forName(\"m1x.Api\");\n+                            } catch (ClassNotFoundException e) {\n+                                System.err.println(\"ok\");\n+                            }\n+                        }\n+                    }\"\"\",\n+                \"\"\"\n+                    package m3x;\n+                    public class ApiUse{\n+                        m1x.Api api;\n+                    }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/RequiresStaticTest.java","additions":81,"deletions":62,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -54,4 +54,6 @@\n-                \"import java.awt.Frame;\\n\"  \/\/ in java.se\n-                + \"class Test {\\n\"\n-                + \"    Frame f;\\n\"\n-                + \"}\");\n+                \/\/ use class in java.se\n+                \"\"\"\n+                    import java.awt.Frame;\n+                    class Test {\n+                        Frame f;\n+                    }\"\"\");\n@@ -73,4 +75,6 @@\n-                \"import com.sun.source.tree.Tree;\\n\" \/\/ not in java.se (in jdk.compiler)\n-                + \"class Test {\\n\"\n-                + \"    Tree t;\\n\"\n-                + \"}\");\n+                \/\/ use class not in java.se (in jdk.compiler)\n+                \"\"\"\n+                    import com.sun.source.tree.Tree;\n+                    class Test {\n+                        Tree t;\n+                    }\"\"\");\n@@ -147,4 +151,6 @@\n-                \"package p1;\\n\"\n-                + \"import p2.C2;\\n\"\n-                + \"import p3.C3;\\n\"\n-                + \"import p4.C4;\\n\"\n+                \"\"\"\n+                    package p1;\n+                    import p2.C2;\n+                    import p3.C3;\n+                    import p4.C4;\n+                    \"\"\"\n@@ -152,2 +158,4 @@\n-                + \"class C1 {\\n\"\n-                + \"  C2 c2; C3 c3; C4 c4;\\n\"\n+                + \"\"\"\n+                    class C1 {\n+                      C2 c2; C3 c3; C4 c4;\n+                    \"\"\"\n@@ -159,7 +167,10 @@\n-                \"module m2x {\\n\"\n-                + \"  requires transitive m3x;\\n\"\n-                + \"  requires        m6x;\\n\"\n-                + \"  exports p2;\\n\"\n-                + \"}\",\n-                \"package p2;\\n\"\n-                + \"public class C2 { }\\n\");\n+                \"\"\"\n+                    module m2x {\n+                      requires transitive m3x;\n+                      requires        m6x;\n+                      exports p2;\n+                    }\"\"\",\n+                \"\"\"\n+                    package p2;\n+                    public class C2 { }\n+                    \"\"\");\n@@ -169,3 +180,7 @@\n-                \"module m3x { requires transitive m4x; exports p3; }\",\n-                \"package p3;\\n\"\n-                + \"public class C3 { }\\n\");\n+                \"\"\"\n+                    module m3x { requires transitive m4x; exports p3; }\n+                    \"\"\",\n+                \"\"\"\n+                    package p3;\n+                    public class C3 { }\n+                    \"\"\");\n@@ -175,3 +190,7 @@\n-                \"module m4x { requires m5x; exports p4; }\",\n-                \"package p4;\\n\"\n-                + \"public class C4 { }\\n\");\n+                \"\"\"\n+                    module m4x { requires m5x; exports p4; }\n+                    \"\"\",\n+                \"\"\"\n+                    package p4;\n+                    public class C4 { }\n+                    \"\"\");\n@@ -181,3 +200,7 @@\n-                \"module m5x { exports p5; }\",\n-                \"package p5;\\n\"\n-                + \"public class C5 { }\\n\");\n+                \"\"\"\n+                    module m5x { exports p5; }\n+                    \"\"\",\n+                \"\"\"\n+                    package p5;\n+                    public class C5 { }\n+                    \"\"\");\n@@ -188,2 +211,3 @@\n-                \"package p6;\\n\"\n-                + \"public class C6 { }\\n\");\n+                \"\"\"\n+                    package p6;\n+                    public class C6 { }\"\"\");\n@@ -194,2 +218,3 @@\n-                \"package p7;\\n\"\n-                + \"public class C7 { }\\n\");\n+                \"\"\"\n+                    package p7;\n+                    public class C7 { }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/RequiresTransitiveTest.java","additions":59,"deletions":34,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -69,5 +69,6 @@\n-            \"package p.q;\\n\"\n-            + \"import p.E;\\n\"\n-            + \"class Test {\\n\"\n-            + \"  void m() { throw new E(); }\\n\"\n-            + \"}\");\n+            \"\"\"\n+                package p.q;\n+                import p.E;\n+                class Test {\n+                  void m() { throw new E(); }\n+                }\"\"\");\n@@ -98,11 +99,12 @@\n-                \"module m {\"\n-                + \"  requires mp;\\n\"\n-                + \"  requires mpq;\\n\"\n-                + \"  requires mpqr;\\n\"\n-                + \"}\",\n-                \"package x;\\n\"\n-                + \"class C {\\n\"\n-                + \"  p.C1 c1;\\n\"\n-                + \"  p.q.C2 c2;\\n\"\n-                + \"  p.q.r.C3 c3;\\n\"\n-                + \"}\");\n+                \"\"\"\n+                    module m {  requires mp;\n+                      requires mpq;\n+                      requires mpqr;\n+                    }\"\"\",\n+                \"\"\"\n+                    package x;\n+                    class C {\n+                      p.C1 c1;\n+                      p.q.C2 c2;\n+                      p.q.r.C3 c3;\n+                    }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/SubpackageTest.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -7,9 +7,9 @@\n-    Utf8 \"mod\/module-info\"; \/\/ #1    \n-    class #1; \/\/ #2    \n-    Utf8 \"java\/lang\/Object\"; \/\/ #3    \n-    class #3; \/\/ #4    \n-    Utf8 \"java.base\"; \/\/ #5    \n-    Utf8 \"pkg\"; \/\/ #6    \n-    Utf8 \"Module\"; \/\/ #7    \n-    Utf8 \"Version\"; \/\/ #8    \n-    Utf8 \"6.0\"; \/\/ #9    \n+    Utf8 \"mod\/module-info\"; \/\/ #1\n+    class #1; \/\/ #2\n+    Utf8 \"java\/lang\/Object\"; \/\/ #3\n+    class #3; \/\/ #4\n+    Utf8 \"java.base\"; \/\/ #5\n+    Utf8 \"pkg\"; \/\/ #6\n+    Utf8 \"Module\"; \/\/ #7\n+    Utf8 \"Version\"; \/\/ #8\n+    Utf8 \"6.0\"; \/\/ #9\n","filename":"test\/langtools\/tools\/javac\/modules\/T8159439\/module-info.jcod","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,5 +52,6 @@\n-            \"module m {\\n\" +\n-            \"    exports example;\\n\" +\n-            \"    provides example.SomeService with example.ServiceImpl;\\n\" +\n-            \"    provides example.SomeServiceOuter with example.Outer.ServiceImplOuter;\\n\" +\n-            \"}\";\n+            \"\"\"\n+                module m {\n+                    exports example;\n+                    provides example.SomeService with example.ServiceImpl;\n+                    provides example.SomeServiceOuter with example.Outer.ServiceImplOuter;\n+                }\"\"\";\n@@ -59,4 +60,5 @@\n-            \"package example;\\n\" +\n-            \"public interface SomeService {\\n\" +\n-            \"    public void foo();\\n\" +\n-            \"}\";\n+            \"\"\"\n+                package example;\n+                public interface SomeService {\n+                    public void foo();\n+                }\"\"\";\n@@ -65,4 +67,5 @@\n-            \"package example;\\n\" +\n-            \"public interface SomeServiceOuter {\\n\" +\n-            \"    public void foo();\\n\" +\n-            \"}\";\n+            \"\"\"\n+                package example;\n+                public interface SomeServiceOuter {\n+                    public void foo();\n+                }\"\"\";\n@@ -77,13 +80,15 @@\n-                \"package example;\\n\" +\n-                \"public class ServiceImpl implements example.SomeService {\\n\" +\n-                \"    public ServiceImpl() {}\\n\" +\n-                \"    public void foo() {}\\n\" +\n-                \"}\",\n-\n-                \"package example;\\n\" +\n-                \"class Outer {\\n\" +\n-                \"    public static class ServiceImplOuter implements example.SomeServiceOuter {\\n\" +\n-                \"        public ServiceImplOuter() {}\\n\" +\n-                \"        public void foo() {}\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                    package example;\n+                    public class ServiceImpl implements example.SomeService {\n+                        public ServiceImpl() {}\n+                        public void foo() {}\n+                    }\"\"\",\n+\n+                \"\"\"\n+                    package example;\n+                    class Outer {\n+                        public static class ServiceImplOuter implements example.SomeServiceOuter {\n+                            public ServiceImplOuter() {}\n+                            public void foo() {}\n+                        }\n+                    }\"\"\");\n@@ -113,14 +118,15 @@\n-\n-                \"package example;\\n\" +\n-                \"class ServiceImpl implements example.SomeService {\\n\" +\n-                \"    public ServiceImpl() {}\\n\" +\n-                \"    public void foo() {}\\n\" +\n-                \"}\",\n-\n-                \"package example;\\n\" +\n-                \"class Outer {\\n\" +\n-                \"    static class ServiceImplOuter implements example.SomeServiceOuter {\\n\" +\n-                \"        public ServiceImplOuter() {}\\n\" +\n-                \"        public void foo() {}\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                    package example;\n+                    class ServiceImpl implements example.SomeService {\n+                        public ServiceImpl() {}\n+                        public void foo() {}\n+                    }\"\"\",\n+\n+                \"\"\"\n+                    package example;\n+                    class Outer {\n+                        static class ServiceImplOuter implements example.SomeServiceOuter {\n+                            public ServiceImplOuter() {}\n+                            public void foo() {}\n+                        }\n+                    }\"\"\");\n@@ -150,4 +156,5 @@\n-                \"module m {\\n\" +\n-                \"    exports example;\\n\" +\n-                \"    provides example.SomeServiceOuter with example.Outer1.Outer2.ServiceImplOuter;\\n\" +\n-                \"}\",\n+                \"\"\"\n+                    module m {\n+                        exports example;\n+                        provides example.SomeServiceOuter with example.Outer1.Outer2.ServiceImplOuter;\n+                    }\"\"\",\n@@ -157,9 +164,10 @@\n-                \"package example;\\n\" +\n-                \"class Outer1 {\\n\" +\n-                \"    static private class Outer2 {\\n\" +\n-                \"        public static class ServiceImplOuter implements example.SomeServiceOuter {\\n\" +\n-                \"            public ServiceImplOuter() {}\\n\" +\n-                \"            public void foo() {}\\n\" +\n-                \"        }\\n\" +\n-                \"    }\\n\" +\n-                \"}\");\n+                \"\"\"\n+                    package example;\n+                    class Outer1 {\n+                        static private class Outer2 {\n+                            public static class ServiceImplOuter implements example.SomeServiceOuter {\n+                                public ServiceImplOuter() {}\n+                                public void foo() {}\n+                            }\n+                        }\n+                    }\"\"\");\n","filename":"test\/langtools\/tools\/javac\/modules\/WrongErrorMessageForNestedServiceProviderTest.java","additions":61,"deletions":53,"binary":false,"changes":114,"status":"modified"}]}