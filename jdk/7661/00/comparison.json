{"files":[{"patch":"@@ -193,1 +193,1 @@\n-            NativeLibraryImpl lib = new NativeLibraryImpl(fromClass, name, isBuiltin, true);\n+            NativeLibraryImpl lib = new NativeLibraryImpl(fromClass, name, isBuiltin);\n@@ -293,2 +293,0 @@\n-        \/\/ Indicate if this is JNI native library\n-        final boolean isJNI;\n@@ -301,3 +299,1 @@\n-        NativeLibraryImpl(Class<?> fromClass, String name, boolean isBuiltin, boolean isJNI) {\n-            assert !isBuiltin || isJNI : \"a builtin native library must be JNI library\";\n-\n+        NativeLibraryImpl(Class<?> fromClass, String name, boolean isBuiltin) {\n@@ -307,1 +303,0 @@\n-            this.isJNI = isJNI;\n@@ -325,1 +320,1 @@\n-            return new Unloader(name, handle, isBuiltin, isJNI);\n+            return new Unloader(name, handle, isBuiltin);\n@@ -336,1 +331,1 @@\n-            return load(this, name, isBuiltin, isJNI, loadLibraryOnlyIfPresent);\n+            return load(this, name, isBuiltin, loadLibraryOnlyIfPresent);\n@@ -343,1 +338,1 @@\n-            unload(name, isBuiltin, isJNI, handle);\n+            unload(name, isBuiltin, handle);\n@@ -355,1 +350,1 @@\n-                new NativeLibraryImpl(null, \"dummy\", false, false);\n+                new NativeLibraryImpl(null, \"dummy\", false);\n@@ -360,1 +355,0 @@\n-        final boolean isJNI;\n@@ -362,2 +356,1 @@\n-        Unloader(String name, long handle, boolean isBuiltin, boolean isJNI) {\n-            assert !isBuiltin || isJNI : \"a builtin native library must be JNI library\";\n+        Unloader(String name, long handle, boolean isBuiltin) {\n@@ -372,1 +365,0 @@\n-            this.isJNI = isJNI;\n@@ -380,1 +372,1 @@\n-                if (isJNI && !loadedLibraryNames.remove(name)) {\n+                if (!loadedLibraryNames.remove(name)) {\n@@ -385,1 +377,1 @@\n-                    unload(name, isBuiltin, isJNI, handle);\n+                    unload(name, isBuiltin, handle);\n@@ -527,2 +519,9 @@\n-    \/\/ JNI FindClass expects the caller class if invoked from JNI_OnLoad\n-    \/\/ and JNI_OnUnload is NativeLibrary class\n+    \/*\n+     * Return true if the given library is successfully loaded.\n+     * If the given library cannot be loaded for any reason,\n+     * if throwExceptionIfFail is false, then this method returns false;\n+     * otherwise, UnsatisfiedLinkError will be thrown.\n+     *\n+     * JNI FindClass expects the caller class if invoked from JNI_OnLoad\n+     * and JNI_OnUnload is NativeLibrary class.\n+     *\/\n@@ -530,1 +529,1 @@\n-                                       boolean isBuiltin, boolean isJNI,\n+                                       boolean isBuiltin,\n@@ -532,1 +531,5 @@\n-    private static native void unload(String name, boolean isBuiltin, boolean isJNI, long handle);\n+    \/*\n+     * Unload the named library.  JNI_OnUnload, if present, will be invoked\n+     * before the native library is unloaded.\n+     *\/\n+    private static native void unload(String name, boolean isBuiltin, long handle);\n@@ -534,1 +537,6 @@\n-    private static native long findEntry0(NativeLibraryImpl lib, String name);\n+\n+    \/*\n+     * Returns the address of the named symbol defined in the given library.\n+     * Returns 0 if not found.\n+     *\/\n+    static native long findEntry0(NativeLibrary lib, String name);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    final Map<String, NativeLibraryImpl> libraries = new ConcurrentHashMap<>();\n+    final Map<String, RawNativeLibraryImpl> libraries = new ConcurrentHashMap<>();\n@@ -119,2 +119,2 @@\n-    private NativeLibraryImpl get(String pathname) {\n-        NativeLibraryImpl lib = new NativeLibraryImpl(caller, pathname, false, false);\n+    private RawNativeLibraryImpl get(String pathname) {\n+        RawNativeLibraryImpl lib = new RawNativeLibraryImpl(caller, pathname);\n@@ -122,1 +122,1 @@\n-            return null;    \/\/ fail to open the native library\n+            return null;\n@@ -135,1 +135,1 @@\n-        NativeLibraryImpl nl = (NativeLibraryImpl)lib;\n+        RawNativeLibraryImpl nl = (RawNativeLibraryImpl)lib;\n@@ -138,0 +138,41 @@\n+\n+    static class RawNativeLibraryImpl implements NativeLibrary {\n+        \/\/ the name of the raw native library.\n+        final String name;\n+        \/\/ opaque handle to raw native library, used in native code.\n+        long handle;\n+\n+        RawNativeLibraryImpl(Class<?> fromClass, String name) {\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public String name() {\n+            return name;\n+        }\n+\n+        @Override\n+        public long find(String name) {\n+            return findEntry0(this, name);\n+        }\n+\n+        \/*\n+         * Loads the named native library.\n+         *\/\n+        boolean open() {\n+            if (handle != 0) {\n+                throw new InternalError(\"Native library \" + name + \" has been loaded\");\n+            }\n+            return load0(this, name);\n+        }\n+\n+        \/*\n+         * Close this native library.\n+         *\/\n+        void close() {\n+            unload0(name, handle);\n+        }\n+    }\n+\n+    private static native boolean load0(RawNativeLibraryImpl impl, String name);\n+    private static native void unload0(String name, long handle);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/RawNativeLibraries.java","additions":46,"deletions":5,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <string.h>\n@@ -34,1 +35,0 @@\n-#include <string.h>\n@@ -43,1 +43,0 @@\n-\n@@ -47,1 +46,1 @@\n-        jclass this =\n+        jclass nlClz =\n@@ -49,1 +48,1 @@\n-        if (this == 0)\n+        if (nlClz == 0)\n@@ -51,1 +50,1 @@\n-        handleID = (*env)->GetFieldID(env, this, \"handle\", \"J\");\n+        handleID = (*env)->GetFieldID(env, nlClz, \"handle\", \"J\");\n@@ -54,1 +53,1 @@\n-        jniVersionID = (*env)->GetFieldID(env, this, \"jniVersion\", \"I\");\n+        jniVersionID = (*env)->GetFieldID(env, nlClz, \"jniVersion\", \"I\");\n@@ -112,1 +111,1 @@\n- * Signature: (Ljava\/lang\/String;ZZ)Z\n+ * Signature: (Ljdk\/internal\/loader\/NativeLibraries\/NativeLibraryImpl;Ljava\/lang\/String;ZZ)Z\n@@ -116,2 +115,2 @@\n-  (JNIEnv *env, jobject this, jobject lib, jstring name,\n-   jboolean isBuiltin, jboolean isJNI, jboolean throwExceptionIfFail)\n+  (JNIEnv *env, jclass cls, jobject lib, jstring name,\n+   jboolean isBuiltin, jboolean throwExceptionIfFail)\n@@ -132,13 +131,12 @@\n-    if (isJNI) {\n-        if (handle) {\n-            JNI_OnLoad_t JNI_OnLoad;\n-            JNI_OnLoad = (JNI_OnLoad_t)findJniFunction(env, handle,\n-                                                       isBuiltin ? cname : NULL,\n-                                                       JNI_TRUE);\n-            if (JNI_OnLoad) {\n-                JavaVM *jvm;\n-                (*env)->GetJavaVM(env, &jvm);\n-                jniVersion = (*JNI_OnLoad)(jvm, NULL);\n-            } else {\n-                jniVersion = 0x00010001;\n-            }\n+    if (handle) {\n+        JNI_OnLoad_t JNI_OnLoad;\n+        JNI_OnLoad = (JNI_OnLoad_t)findJniFunction(env, handle,\n+                                                   isBuiltin ? cname : NULL,\n+                                                   JNI_TRUE);\n+        if (JNI_OnLoad) {\n+            JavaVM *jvm;\n+            (*env)->GetJavaVM(env, &jvm);\n+            jniVersion = (*JNI_OnLoad)(jvm, NULL);\n+        } else {\n+            jniVersion = 0x00010001;\n+        }\n@@ -146,8 +144,6 @@\n-            cause = (*env)->ExceptionOccurred(env);\n-            if (cause) {\n-                (*env)->ExceptionClear(env);\n-                (*env)->Throw(env, cause);\n-                if (!isBuiltin) {\n-                    JVM_UnloadLibrary(handle);\n-                }\n-                goto done;\n+        cause = (*env)->ExceptionOccurred(env);\n+        if (cause) {\n+            (*env)->ExceptionClear(env);\n+            (*env)->Throw(env, cause);\n+            if (!isBuiltin) {\n+                JVM_UnloadLibrary(handle);\n@@ -155,0 +151,2 @@\n+            goto done;\n+        }\n@@ -156,19 +154,9 @@\n-            if (!JVM_IsSupportedJNIVersion(jniVersion) ||\n-                (isBuiltin && jniVersion < JNI_VERSION_1_8)) {\n-                char msg[256];\n-                jio_snprintf(msg, sizeof(msg),\n-                             \"unsupported JNI version 0x%08X required by %s\",\n-                             jniVersion, cname);\n-                JNU_ThrowByName(env, \"java\/lang\/UnsatisfiedLinkError\", msg);\n-                if (!isBuiltin) {\n-                    JVM_UnloadLibrary(handle);\n-                }\n-                goto done;\n-            }\n-            (*env)->SetIntField(env, lib, jniVersionID, jniVersion);\n-        } else {\n-            cause = (*env)->ExceptionOccurred(env);\n-            if (cause) {\n-                (*env)->ExceptionClear(env);\n-                (*env)->SetLongField(env, lib, handleID, (jlong)0);\n-                (*env)->Throw(env, cause);\n+        if (!JVM_IsSupportedJNIVersion(jniVersion) ||\n+            (isBuiltin && jniVersion < JNI_VERSION_1_8)) {\n+            char msg[256];\n+            jio_snprintf(msg, sizeof(msg),\n+                         \"unsupported JNI version 0x%08X required by %s\",\n+                         jniVersion, cname);\n+            JNU_ThrowByName(env, \"java\/lang\/UnsatisfiedLinkError\", msg);\n+            if (!isBuiltin) {\n+                JVM_UnloadLibrary(handle);\n@@ -178,0 +166,9 @@\n+        (*env)->SetIntField(env, lib, jniVersionID, jniVersion);\n+    } else {\n+        cause = (*env)->ExceptionOccurred(env);\n+        if (cause) {\n+            (*env)->ExceptionClear(env);\n+            (*env)->SetLongField(env, lib, handleID, (jlong)0);\n+            (*env)->Throw(env, cause);\n+        }\n+        goto done;\n@@ -179,0 +176,1 @@\n+\n@@ -190,1 +188,1 @@\n- * Signature: (Ljava\/lang\/String;ZZJ)V\n+ * Signature: (Ljava\/lang\/String;ZJ)V\n@@ -194,1 +192,1 @@\n-(JNIEnv *env, jclass cls, jstring name, jboolean isBuiltin, jboolean isJNI, jlong address)\n+(JNIEnv *env, jclass cls, jstring name, jboolean isBuiltin, jlong address)\n@@ -208,9 +206,8 @@\n-    if (isJNI) {\n-        JNI_OnUnload = (JNI_OnUnload_t )findJniFunction(env, handle,\n-                                                        isBuiltin ? cname : NULL,\n-                                                        JNI_FALSE);\n-        if (JNI_OnUnload) {\n-            JavaVM *jvm;\n-            (*env)->GetJavaVM(env, &jvm);\n-            (*JNI_OnUnload)(jvm, NULL);\n-        }\n+\n+    JNI_OnUnload = (JNI_OnUnload_t )findJniFunction(env, handle,\n+                                                    isBuiltin ? cname : NULL,\n+                                                    JNI_FALSE);\n+    if (JNI_OnUnload) {\n+        JavaVM *jvm;\n+        (*env)->GetJavaVM(env, &jvm);\n+        (*JNI_OnUnload)(jvm, NULL);\n@@ -228,1 +225,1 @@\n- * Signature: (Ljava\/lang\/String;)J\n+ * Signature: (Ljdk\/internal\/loader\/NativeLibrary;Ljava\/lang\/String;)J\n@@ -232,1 +229,1 @@\n-  (JNIEnv *env, jobject this, jobject lib, jstring name)\n+  (JNIEnv *env, jclass cls, jobject lib, jstring name)\n","filename":"src\/java.base\/share\/native\/libjava\/NativeLibraries.c","additions":59,"deletions":62,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <string.h>\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jlong.h\"\n+#include \"jvm.h\"\n+#include \"jdk_internal_loader_RawNativeLibraries.h\"\n+\n+static jfieldID handleID;\n+\n+static jboolean initIDs(JNIEnv *env)\n+{\n+    if (handleID == 0) {\n+        jclass rnlClz =\n+            (*env)->FindClass(env, \"jdk\/internal\/loader\/RawNativeLibraries$RawNativeLibraryImpl\");\n+        if (rnlClz == 0)\n+            return JNI_FALSE;\n+        handleID = (*env)->GetFieldID(env, rnlClz, \"handle\", \"J\");\n+        if (handleID == 0)\n+            return JNI_FALSE;\n+    }\n+    return JNI_TRUE;\n+}\n+\n+\/*\n+ * Class:     jdk_internal_loader_RawNativeLibraries\n+ * Method:    Java_jdk_internal_loader_RawNativeLibraries_load0\n+ * Signature: (Ljdk\/internal\/loader\/RawNativeLibraries\/RawNativeLibraryImpl;Ljava\/lang\/String;)Z\n+ *\/\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_loader_RawNativeLibraries_load0\n+  (JNIEnv *env, jclass cls, jobject lib, jstring name)\n+{\n+    const char *cname;\n+    void * handle;\n+\n+    if (!initIDs(env))\n+        return JNI_FALSE;\n+\n+    cname = JNU_GetStringPlatformChars(env, name, 0);\n+    if (cname == 0)\n+        return JNI_FALSE;\n+    handle = JVM_LoadLibrary(cname, JNI_FALSE);\n+    (*env)->SetLongField(env, lib, handleID, ptr_to_jlong(handle));\n+\n+    JNU_ReleaseStringPlatformChars(env, name, cname);\n+    return handle != 0L;\n+}\n+\n+\/*\n+ * Class:     jdk_internal_loader_RawNativeLibraries\n+ * Method:    unload0\n+ * Signature: (Ljava\/lang\/String;J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_loader_RawNativeLibraries_unload0\n+(JNIEnv *env, jclass cls, jstring name, jlong address)\n+{\n+    void *handle;\n+    const char *cname;\n+\n+    if (!initIDs(env))\n+        return;\n+    cname = JNU_GetStringPlatformChars(env, name, 0);\n+    if (cname == NULL) {\n+        return;\n+    }\n+    handle = jlong_to_ptr(address);\n+\n+    JVM_UnloadLibrary(handle);\n+    JNU_ReleaseStringPlatformChars(env, name, cname);\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/native\/libjava\/RawNativeLibraries.c","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -57,1 +57,1 @@\n-        test.load(true);\n+        test.loadTestLibrary();\n@@ -60,1 +60,4 @@\n-        test.load(System.mapLibraryName(\"zip\"));\n+        test.load(System.mapLibraryName(\"zip\"), true \/* succeed *\/);\n+\n+        \/\/ load non-existent library\n+        test.load(System.mapLibraryName(\"NotExist\"), false \/* fail to load *\/);\n","filename":"test\/jdk\/jdk\/internal\/loader\/NativeLibraries\/Main.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        load(true); \/\/ expect loading of native library succeed\n+        loadTestLibrary(); \/\/ expect loading of native library succeed\n@@ -104,1 +104,1 @@\n-    public void load(boolean succeed) {\n+    public void loadTestLibrary() {\n@@ -106,5 +106,1 @@\n-        if (succeed) {\n-            assertTrue(nl != null, \"fail to load library\");\n-        } else {\n-            assertTrue(nl == null, \"load library should fail\");\n-        }\n+        assertTrue(nl != null, \"fail to load \" + libraryPath());\n@@ -113,1 +109,1 @@\n-    public void load(String pathname) {\n+    public void load(String pathname, boolean succeed) {\n@@ -115,1 +111,5 @@\n-        assertTrue(nl != null, \"fail to load zip library\");\n+        if (succeed) {\n+            assertTrue(nl != null, \"fail to load \" + pathname);\n+        } else {\n+            assertTrue(nl == null, \"expect to return null for \" + pathname);\n+        }\n","filename":"test\/jdk\/jdk\/internal\/loader\/NativeLibraries\/java.base\/jdk\/internal\/loader\/NativeLibrariesTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}