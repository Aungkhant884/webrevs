{"files":[{"patch":"@@ -477,6 +477,1 @@\n-             VarHandleByteArrayAsChars.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsDoubles.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsFloats.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsInts.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsLongs.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsShorts.ByteArrayViewVarHandle,\n+             VarHandleByteArrayBase,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n@@ -30,0 +32,4 @@\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.nio.ByteBuffer;\n@@ -37,1 +43,13 @@\n-abstract class VarHandleByteArrayBase {\n+abstract sealed class VarHandleByteArrayBase extends VarHandle\n+    permits VarHandleByteArrayAsChars.ArrayHandle,\n+            VarHandleByteArrayAsChars.ByteBufferHandle,\n+            VarHandleByteArrayAsDoubles.ArrayHandle,\n+            VarHandleByteArrayAsDoubles.ByteBufferHandle,\n+            VarHandleByteArrayAsFloats.ArrayHandle,\n+            VarHandleByteArrayAsFloats.ByteBufferHandle,\n+            VarHandleByteArrayAsInts.ArrayHandle,\n+            VarHandleByteArrayAsInts.ByteBufferHandle,\n+            VarHandleByteArrayAsLongs.ArrayHandle,\n+            VarHandleByteArrayAsLongs.ByteBufferHandle,\n+            VarHandleByteArrayAsShorts.ArrayHandle,\n+            VarHandleByteArrayAsShorts.ByteBufferHandle {\n@@ -45,0 +63,14 @@\n+    final boolean be;\n+\n+    VarHandleByteArrayBase(VarForm form, boolean be, boolean exact) {\n+        super(form, exact);\n+        this.be = be;\n+    }\n+\n+    @ForceInline\n+    static MemorySessionImpl session(ByteBuffer bb) {\n+        MemorySegment segment = NIO_ACCESS.bufferSegment(bb);\n+        return segment != null ?\n+                ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleByteArrayBase.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n@@ -49,7 +47,0 @@\n-    static ClassValue<ConcurrentMap<Integer, MethodHandle>> ADDRESS_FACTORIES = new ClassValue<>() {\n-        @Override\n-        protected ConcurrentMap<Integer, MethodHandle> computeValue(Class<?> type) {\n-            return new ConcurrentHashMap<>();\n-        }\n-    };\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,2 +27,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n-import jdk.internal.foreign.MemorySessionImpl;\n@@ -33,1 +31,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -42,1 +39,1 @@\n-final class VarHandleByteArrayAs$Type$s extends VarHandleByteArrayBase {\n+final class VarHandleByteArrayAs$Type$s {\n@@ -50,1 +47,1 @@\n-        return big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+        return big == VarHandleByteArrayBase.BE ? rv : $RawBoxType$.reverseBytes(rv);\n@@ -55,1 +52,1 @@\n-        rv = big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+        rv = big == VarHandleByteArrayBase.BE ? rv : $RawBoxType$.reverseBytes(rv);\n@@ -61,1 +58,1 @@\n-        return big == BE ? n : $BoxType$.reverseBytes(n);\n+        return big == VarHandleByteArrayBase.BE ? n : $BoxType$.reverseBytes(n);\n@@ -65,11 +62,1 @@\n-\n-    static abstract sealed class ByteArrayViewVarHandle extends VarHandle {\n-        final boolean be;\n-\n-        ByteArrayViewVarHandle(VarForm form, boolean be, boolean exact) {\n-            super(form, exact);\n-            this.be = be;\n-        }\n-    }\n-\n-    static final class ArrayHandle extends ByteArrayViewVarHandle {\n+    static final class ArrayHandle extends VarHandleByteArrayBase {\n@@ -571,1 +558,1 @@\n-    static final class ByteBufferHandle extends ByteArrayViewVarHandle {\n+    static final class ByteBufferHandle extends VarHandleByteArrayBase {\n@@ -605,7 +592,0 @@\n-        @ForceInline\n-        static MemorySessionImpl session(ByteBuffer bb) {\n-            MemorySegment segment = NIO_ACCESS.bufferSegment(bb);\n-            return segment != null ?\n-                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"}]}