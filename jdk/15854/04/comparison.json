{"files":[{"patch":"@@ -477,6 +477,1 @@\n-             VarHandleByteArrayAsChars.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsDoubles.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsFloats.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsInts.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsLongs.ByteArrayViewVarHandle,\n-             VarHandleByteArrayAsShorts.ByteArrayViewVarHandle,\n+             VarHandleByteArrayBase,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,8 @@\n-import java.nio.Buffer;\n+import jdk.internal.access.JavaNioAccess;\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.MemorySessionImpl;\n+import jdk.internal.misc.ScopedMemoryAccess;\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+import java.lang.foreign.MemorySegment;\n@@ -36,4 +43,15 @@\n-abstract class VarHandleByteArrayBase {\n-    \/\/ Buffer.address\n-    static final long BUFFER_ADDRESS\n-            = UNSAFE.objectFieldOffset(Buffer.class, \"address\");\n+abstract sealed class VarHandleByteArrayBase extends VarHandle\n+    permits VarHandleByteArrayAsChars.ArrayHandle,\n+            VarHandleByteArrayAsChars.ByteBufferHandle,\n+            VarHandleByteArrayAsDoubles.ArrayHandle,\n+            VarHandleByteArrayAsDoubles.ByteBufferHandle,\n+            VarHandleByteArrayAsFloats.ArrayHandle,\n+            VarHandleByteArrayAsFloats.ByteBufferHandle,\n+            VarHandleByteArrayAsInts.ArrayHandle,\n+            VarHandleByteArrayAsInts.ByteBufferHandle,\n+            VarHandleByteArrayAsLongs.ArrayHandle,\n+            VarHandleByteArrayAsLongs.ByteBufferHandle,\n+            VarHandleByteArrayAsShorts.ArrayHandle,\n+            VarHandleByteArrayAsShorts.ByteBufferHandle {\n+\n+    static final boolean BE = UNSAFE.isBigEndian();\n@@ -41,3 +59,1 @@\n-    \/\/ Buffer.limit\n-    static final long BUFFER_LIMIT\n-            = UNSAFE.objectFieldOffset(Buffer.class, \"limit\");\n+    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n@@ -45,3 +61,1 @@\n-    \/\/ ByteBuffer.hb\n-    static final long BYTE_BUFFER_HB\n-            = UNSAFE.objectFieldOffset(ByteBuffer.class, \"hb\");\n+    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n@@ -49,3 +63,1 @@\n-    \/\/ ByteBuffer.isReadOnly\n-    static final long BYTE_BUFFER_IS_READ_ONLY\n-            = UNSAFE.objectFieldOffset(ByteBuffer.class, \"isReadOnly\");\n+    final boolean be;\n@@ -53,1 +65,11 @@\n-    static final boolean BE = UNSAFE.isBigEndian();\n+    VarHandleByteArrayBase(VarForm form, boolean be, boolean exact) {\n+        super(form, exact);\n+        this.be = be;\n+    }\n+\n+    @ForceInline\n+    static MemorySessionImpl session(ByteBuffer bb) {\n+        MemorySegment segment = NIO_ACCESS.bufferSegment(bb);\n+        return segment != null ?\n+                ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleByteArrayBase.java","additions":38,"deletions":16,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,8 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.misc.ScopedMemoryAccess;\n+import jdk.internal.vm.annotation.ForceInline;\n+\n+import java.util.Objects;\n+\n+import static java.lang.invoke.MethodHandleStatics.UNSAFE;\n+\n@@ -40,0 +48,4 @@\n+    static final boolean BE = UNSAFE.isBigEndian();\n+\n+    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n+\n@@ -56,0 +68,18 @@\n+    @ForceInline\n+    static AbstractMemorySegmentImpl checkAddress(Object obb, long offset, long length, boolean ro) {\n+        AbstractMemorySegmentImpl oo = (AbstractMemorySegmentImpl) Objects.requireNonNull(obb);\n+        oo.checkAccess(offset, length, ro);\n+        return oo;\n+    }\n+\n+    @ForceInline\n+    static long offsetPlain(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n+        long base = bb.unsafeGetOffset();\n+        long address = base + offset;\n+        long maxAlignMask = bb.maxAlignMask();\n+        if (((address | maxAlignMask) & alignmentMask) != 0) {\n+            throw newIllegalArgumentExceptionForMisalignedAccess(address);\n+        }\n+        return address;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleSegmentViewBase.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n@@ -49,7 +47,0 @@\n-    static ClassValue<ConcurrentMap<Integer, MethodHandle>> ADDRESS_FACTORIES = new ClassValue<>() {\n-        @Override\n-        protected ConcurrentMap<Integer, MethodHandle> computeValue(Class<?> type) {\n-            return new ConcurrentHashMap<>();\n-        }\n-    };\n-\n@@ -208,4 +199,0 @@\n-        int aoffset = UNSAFE.arrayBaseOffset(arrayClass);\n-        int ascale = UNSAFE.arrayIndexScale(arrayClass);\n-        int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n-\n@@ -213,0 +200,3 @@\n+            int aoffset = UNSAFE.arrayBaseOffset(arrayClass);\n+            int ascale = UNSAFE.arrayIndexScale(arrayClass);\n+            int ashift = 31 - Integer.numberOfLeadingZeros(ascale);\n@@ -216,1 +206,1 @@\n-            return maybeAdapt(new VarHandleBooleans.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleBooleans.Array.INSTANCE);\n@@ -219,1 +209,1 @@\n-            return maybeAdapt(new VarHandleBytes.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleBytes.Array.INSTANCE);\n@@ -222,1 +212,1 @@\n-            return maybeAdapt(new VarHandleShorts.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleShorts.Array.INSTANCE);\n@@ -225,1 +215,1 @@\n-            return maybeAdapt(new VarHandleChars.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleChars.Array.INSTANCE);\n@@ -228,1 +218,1 @@\n-            return maybeAdapt(new VarHandleInts.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleInts.Array.INSTANCE);\n@@ -231,1 +221,1 @@\n-            return maybeAdapt(new VarHandleLongs.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleLongs.Array.INSTANCE);\n@@ -234,1 +224,1 @@\n-            return maybeAdapt(new VarHandleFloats.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleFloats.Array.INSTANCE);\n@@ -237,1 +227,1 @@\n-            return maybeAdapt(new VarHandleDoubles.Array(aoffset, ashift));\n+            return maybeAdapt(VarHandleDoubles.Array.INSTANCE);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.invoke.VarHandle.VarHandleDesc;\n@@ -733,0 +732,1 @@\n+#if[Object]\n@@ -735,2 +735,1 @@\n-#if[Object]\n-        final Class<{#if[Object]??:$type$[]}> arrayType;\n+        final Class<?> arrayType;\n@@ -738,0 +737,3 @@\n+#else[Object]\n+        private static final int BASE = UNSAFE.arrayBaseOffset($type$[].class);\n+        private static final int SHIFT = 31 - Integer.numberOfLeadingZeros(UNSAFE.arrayIndexScale($type$[].class));\n@@ -740,2 +742,3 @@\n-        Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}) {\n-            this(abase, ashift{#if[Object]?, arrayType}, false);\n+#if[Object]\n+        Array(int abase, int ashift, Class<?> arrayType) {\n+            this(abase, ashift, arrayType, false);\n@@ -744,1 +747,2 @@\n-        private Array(int abase, int ashift{#if[Object]?, Class<?> arrayType}, boolean exact) {\n+#end[Object]\n+        private Array({#if[Object]?int abase, int ashift, Class<?> arrayType, }boolean exact) {\n@@ -746,0 +750,1 @@\n+#if[Object]\n@@ -748,2 +753,1 @@\n-#if[Object]\n-            this.arrayType = {#if[Object]?arrayType:$type$[].class};\n+            this.arrayType = arrayType;\n@@ -758,1 +762,1 @@\n-                : new Array(abase, ashift{#if[Object]?, arrayType}, true);\n+                : {#if[Object]?new Array(abase, ashift, arrayType, true):EXACT_INSTANCE};\n@@ -765,1 +769,1 @@\n-                : new Array(abase, ashift{#if[Object]?, arrayType}, false);\n+                : {#if[Object]?new Array(abase, ashift, arrayType, false):INSTANCE};\n@@ -802,0 +806,1 @@\n+\n@@ -803,0 +808,4 @@\n+        @ForceInline\n+        static long offset({#if[Object]?Array handle, Object:$type$}[] array, int index)  {\n+            return (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << {#if[Object]?handle.ashift:SHIFT}) + {#if[Object]?handle.abase:BASE};\n+        }\n@@ -806,1 +815,0 @@\n-            Array handle = (Array)ob;\n@@ -808,0 +816,1 @@\n+            Array handle = (Array)ob;\n@@ -817,1 +826,0 @@\n-            Array handle = (Array)ob;\n@@ -819,0 +827,1 @@\n+            Array handle = (Array)ob;\n@@ -828,1 +837,0 @@\n-            Array handle = (Array)ob;\n@@ -830,0 +838,1 @@\n+            Array handle = (Array)ob;\n@@ -835,1 +844,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n+                    offset({#if[Object]?handle, }array, index));\n@@ -840,1 +849,0 @@\n-            Array handle = (Array)ob;\n@@ -842,0 +850,1 @@\n+            Array handle = (Array)ob;\n@@ -847,1 +856,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -853,1 +862,0 @@\n-            Array handle = (Array)ob;\n@@ -855,0 +863,1 @@\n+            Array handle = (Array)ob;\n@@ -860,1 +869,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n+                    offset({#if[Object]?handle, }array, index));\n@@ -865,1 +874,0 @@\n-            Array handle = (Array)ob;\n@@ -867,0 +875,1 @@\n+            Array handle = (Array)ob;\n@@ -872,1 +881,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -878,1 +887,0 @@\n-            Array handle = (Array)ob;\n@@ -880,0 +888,1 @@\n+            Array handle = (Array)ob;\n@@ -885,1 +894,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n+                    offset({#if[Object]?handle, }array, index));\n@@ -890,1 +899,0 @@\n-            Array handle = (Array)ob;\n@@ -892,0 +900,1 @@\n+            Array handle = (Array)ob;\n@@ -897,1 +906,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -904,1 +913,0 @@\n-            Array handle = (Array)ob;\n@@ -906,0 +914,1 @@\n+            Array handle = (Array)ob;\n@@ -911,1 +920,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -918,1 +927,0 @@\n-            Array handle = (Array)ob;\n@@ -920,0 +928,1 @@\n+            Array handle = (Array)ob;\n@@ -925,1 +934,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -932,1 +941,0 @@\n-            Array handle = (Array)ob;\n@@ -934,0 +942,1 @@\n+            Array handle = (Array)ob;\n@@ -939,1 +948,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -946,1 +955,0 @@\n-            Array handle = (Array)ob;\n@@ -948,0 +956,1 @@\n+            Array handle = (Array)ob;\n@@ -953,1 +962,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -960,1 +969,0 @@\n-            Array handle = (Array)ob;\n@@ -962,0 +970,1 @@\n+            Array handle = (Array)ob;\n@@ -967,1 +976,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -974,1 +983,0 @@\n-            Array handle = (Array)ob;\n@@ -976,0 +984,1 @@\n+            Array handle = (Array)ob;\n@@ -981,1 +990,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -988,1 +997,0 @@\n-            Array handle = (Array)ob;\n@@ -990,0 +998,1 @@\n+            Array handle = (Array)ob;\n@@ -995,1 +1004,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -1002,1 +1011,0 @@\n-            Array handle = (Array)ob;\n@@ -1004,0 +1012,1 @@\n+            Array handle = (Array)ob;\n@@ -1009,1 +1018,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -1016,1 +1025,0 @@\n-            Array handle = (Array)ob;\n@@ -1018,0 +1026,1 @@\n+            Array handle = (Array)ob;\n@@ -1023,1 +1032,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -1029,1 +1038,0 @@\n-            Array handle = (Array)ob;\n@@ -1031,0 +1039,1 @@\n+            Array handle = (Array)ob;\n@@ -1036,1 +1045,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -1042,1 +1051,0 @@\n-            Array handle = (Array)ob;\n@@ -1044,0 +1052,1 @@\n+            Array handle = (Array)ob;\n@@ -1049,1 +1058,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset({#if[Object]?handle, }array, index),\n@@ -1057,1 +1066,0 @@\n-            Array handle = (Array)ob;\n@@ -1060,1 +1068,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset(array, index),\n@@ -1066,1 +1074,0 @@\n-            Array handle = (Array)ob;\n@@ -1069,1 +1076,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset(array, index),\n@@ -1075,1 +1082,0 @@\n-            Array handle = (Array)ob;\n@@ -1078,1 +1084,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                    offset(array, index),\n@@ -1086,1 +1092,0 @@\n-            Array handle = (Array)ob;\n@@ -1089,1 +1094,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1095,1 +1100,0 @@\n-            Array handle = (Array)ob;\n@@ -1098,1 +1102,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1104,1 +1108,0 @@\n-            Array handle = (Array)ob;\n@@ -1107,1 +1110,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1113,1 +1116,0 @@\n-            Array handle = (Array)ob;\n@@ -1116,1 +1118,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1122,1 +1124,0 @@\n-            Array handle = (Array)ob;\n@@ -1125,1 +1126,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1131,1 +1132,0 @@\n-            Array handle = (Array)ob;\n@@ -1134,1 +1134,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1140,1 +1140,0 @@\n-            Array handle = (Array)ob;\n@@ -1143,1 +1142,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1149,1 +1148,0 @@\n-            Array handle = (Array)ob;\n@@ -1152,1 +1150,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1158,1 +1156,0 @@\n-            Array handle = (Array)ob;\n@@ -1161,1 +1158,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n+                                       offset(array, index),\n@@ -1167,0 +1164,7 @@\n+#if[Object]\n+#else[Object]\n+\n+        \/\/ Must be initialized after FORM is ready\n+        static final Array INSTANCE = new Array(false);\n+        static final Array EXACT_INSTANCE = new Array(true);\n+#end[Object]\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":74,"deletions":70,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,0 @@\n-import jdk.internal.access.JavaNioAccess;\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n-import jdk.internal.foreign.MemorySessionImpl;\n-import jdk.internal.misc.ScopedMemoryAccess;\n@@ -36,1 +31,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -39,1 +33,0 @@\n-import java.util.List;\n@@ -41,1 +34,0 @@\n-import java.util.function.BiFunction;\n@@ -47,3 +39,1 @@\n-final class VarHandleByteArrayAs$Type$s extends VarHandleByteArrayBase {\n-\n-    static final JavaNioAccess NIO_ACCESS = SharedSecrets.getJavaNioAccess();\n+final class VarHandleByteArrayAs$Type$s {\n@@ -52,2 +42,0 @@\n-    \n-    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n@@ -59,1 +47,1 @@\n-        return big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+        return big == VarHandleByteArrayBase.BE ? rv : $RawBoxType$.reverseBytes(rv);\n@@ -64,1 +52,1 @@\n-        rv = big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+        rv = big == VarHandleByteArrayBase.BE ? rv : $RawBoxType$.reverseBytes(rv);\n@@ -70,1 +58,1 @@\n-        return big == BE ? n : $BoxType$.reverseBytes(n);\n+        return big == VarHandleByteArrayBase.BE ? n : $BoxType$.reverseBytes(n);\n@@ -74,11 +62,1 @@\n-\n-    static abstract sealed class ByteArrayViewVarHandle extends VarHandle {\n-        final boolean be;\n-\n-        ByteArrayViewVarHandle(VarForm form, boolean be, boolean exact) {\n-            super(form, exact);\n-            this.be = be;\n-        }\n-    }\n-\n-    static final class ArrayHandle extends ByteArrayViewVarHandle {\n+    static final class ArrayHandle extends VarHandleByteArrayBase {\n@@ -580,1 +558,1 @@\n-    static final class ByteBufferHandle extends ByteArrayViewVarHandle {\n+    static final class ByteBufferHandle extends VarHandleByteArrayBase {\n@@ -611,9 +589,1 @@\n-            MemorySegment segment = NIO_ACCESS.bufferSegment(bb);\n-            return Preconditions.checkIndex(index, UNSAFE.getInt(bb, BUFFER_LIMIT) - ALIGN, null);\n-        }\n-\n-        @ForceInline\n-        static MemorySessionImpl session(ByteBuffer bb) {\n-            MemorySegment segment = NIO_ACCESS.bufferSegment(bb);\n-            return segment != null ?\n-                    ((AbstractMemorySegmentImpl)segment).sessionImpl() : null;\n+            return Preconditions.checkIndex(index, bb.limit() - ALIGN, null);\n@@ -624,1 +594,1 @@\n-            if (UNSAFE.getBoolean(bb, BYTE_BUFFER_IS_READ_ONLY))\n+            if (bb.isReadOnly())\n@@ -631,1 +601,1 @@\n-            long address = ((long) index) + UNSAFE.getLong(bb, BUFFER_ADDRESS);\n+            long address = ((long) index) + NIO_ACCESS.getBufferAddress(bb);\n@@ -643,2 +613,2 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                    ((long) index(bb, index)) + UNSAFE.getLong(bb, BUFFER_ADDRESS),\n+                    NIO_ACCESS.getBufferBase(bb),\n+                    ((long) index(bb, index)) + NIO_ACCESS.getBufferAddress(bb),\n@@ -649,2 +619,2 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                    ((long) index(bb, index)) + UNSAFE.getLong(bb, BUFFER_ADDRESS),\n+                    NIO_ACCESS.getBufferBase(bb),\n+                    ((long) index(bb, index)) + NIO_ACCESS.getBufferAddress(bb),\n@@ -661,2 +631,2 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                    ((long) indexRO(bb, index)) + UNSAFE.getLong(bb, BUFFER_ADDRESS),\n+                    NIO_ACCESS.getBufferBase(bb),\n+                    ((long) indexRO(bb, index)) + NIO_ACCESS.getBufferAddress(bb),\n@@ -667,2 +637,2 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n-                    ((long) indexRO(bb, index)) + UNSAFE.getLong(bb, BUFFER_ADDRESS),\n+                    NIO_ACCESS.getBufferBase(bb),\n+                    ((long) indexRO(bb, index)) + NIO_ACCESS.getBufferAddress(bb),\n@@ -680,1 +650,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -689,1 +659,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -700,1 +670,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -709,1 +679,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -720,1 +690,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -729,1 +699,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -741,1 +711,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -746,1 +716,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -758,1 +728,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -769,1 +739,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -780,1 +750,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -790,1 +760,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -800,1 +770,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -810,1 +780,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -820,1 +790,1 @@\n-                    UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                    NIO_ACCESS.getBufferBase(bb),\n@@ -832,1 +802,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -838,1 +808,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -850,1 +820,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -861,1 +831,1 @@\n-                                      UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                                      NIO_ACCESS.getBufferBase(bb),\n@@ -874,1 +844,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -888,1 +858,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -902,1 +872,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -913,1 +883,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = NIO_ACCESS.getBufferBase(bb);\n@@ -931,1 +901,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -945,1 +915,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -959,1 +929,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -970,1 +940,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = NIO_ACCESS.getBufferBase(bb);\n@@ -986,1 +956,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1000,1 +970,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1014,1 +984,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1025,1 +995,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = NIO_ACCESS.getBufferBase(bb);\n@@ -1042,1 +1012,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1056,1 +1026,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1070,1 +1040,1 @@\n-                        UNSAFE.getReference(bb, BYTE_BUFFER_HB),\n+                        NIO_ACCESS.getBufferBase(bb),\n@@ -1081,1 +1051,1 @@\n-            Object base = UNSAFE.getReference(bb, BYTE_BUFFER_HB);\n+            Object base = NIO_ACCESS.getBufferBase(bb);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":53,"deletions":83,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.misc.ScopedMemoryAccess;\n@@ -32,5 +31,0 @@\n-import java.lang.ref.Reference;\n-\n-import java.util.Objects;\n-\n-import static java.lang.invoke.MethodHandleStatics.UNSAFE;\n@@ -42,4 +36,0 @@\n-    static final boolean BE = UNSAFE.isBigEndian();\n-\n-    static final ScopedMemoryAccess SCOPED_MEMORY_ACCESS = ScopedMemoryAccess.getScopedMemoryAccess();\n-\n@@ -99,7 +89,0 @@\n-    @ForceInline\n-    static AbstractMemorySegmentImpl checkAddress(Object obb, long offset, long length, boolean ro) {\n-        AbstractMemorySegmentImpl oo = (AbstractMemorySegmentImpl)Objects.requireNonNull(obb);\n-        oo.checkAccess(offset, length, ro);\n-        return oo;\n-    }\n-\n@@ -114,11 +97,0 @@\n-    @ForceInline\n-    static long offsetPlain(AbstractMemorySegmentImpl bb, long offset, long alignmentMask) {\n-        long base = bb.unsafeGetOffset();\n-        long address = base + offset;\n-        long maxAlignMask = bb.maxAlignMask();\n-        if (((address | maxAlignMask) & alignmentMask) != 0) {\n-            throw VarHandleSegmentViewBase.newIllegalArgumentExceptionForMisalignedAccess(address);\n-        }\n-        return address;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleSegmentView.java.template","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"}]}