{"files":[{"patch":"@@ -839,1 +839,1 @@\n-Node *PhaseGVN::transform_no_reclaim( Node *n ) {\n+Node *PhaseGVN::transform_no_reclaim(Node *n) {\n@@ -844,5 +844,4 @@\n-  NOT_PRODUCT( uint loop_count = 0; )\n-  while( 1 ) {\n-    Node *i = apply_ideal(k, \/*can_reshape=*\/false);\n-    if( !i ) break;\n-    assert( i->_idx >= k->_idx, \"Idealize should return new nodes, use Identity to return old nodes\" );\n+  Node *i = apply_ideal(k, \/*can_reshape=*\/false);\n+  NOT_PRODUCT(uint loop_count = 1;)\n+  while (i != NULL) {\n+    assert(i->_idx >= k->_idx, \"Idealize should return new nodes, use Identity to return old nodes\" );\n@@ -850,1 +849,7 @@\n-    assert(loop_count++ < K, \"infinite loop in PhaseGVN::transform\");\n+    NOT_PRODUCT(loop_count++;)\n+#ifdef ASSERT\n+    if (loop_count >= K * C->live_nodes()) {\n+      dump_infinite_loop_info(i, \"PhaseGVN::transform_no_reclaim\");\n+    }\n+#endif\n+    i = apply_ideal(k, \/*can_reshape=*\/false);\n@@ -852,2 +857,1 @@\n-  NOT_PRODUCT( if( loop_count != 0 ) { set_progress(); } )\n-\n+  NOT_PRODUCT(if(loop_count != 0) { set_progress(); })\n@@ -877,2 +881,2 @@\n-  if( t->singleton() && !k->is_Con() ) {\n-    NOT_PRODUCT( set_progress(); )\n+  if (t->singleton() && !k->is_Con()) {\n+    NOT_PRODUCT(set_progress();)\n@@ -883,3 +887,3 @@\n-  Node *i = k->Identity(this);  \/\/ Look for a nearby replacement\n-  if( i != k ) {                \/\/ Found? Return replacement!\n-    NOT_PRODUCT( set_progress(); )\n+  i = k->Identity(this);        \/\/ Look for a nearby replacement\n+  if (i != k) {                 \/\/ Found? Return replacement!\n+    NOT_PRODUCT(set_progress();)\n@@ -891,1 +895,1 @@\n-  if( i && (i != k) ) {\n+  if (i && (i != k)) {\n@@ -893,1 +897,1 @@\n-    NOT_PRODUCT( set_progress(); )\n+    NOT_PRODUCT(set_progress();)\n@@ -946,0 +950,10 @@\n+\n+\n+\/**\n+ * Dumps information that can help to debug the problem. A debug\n+ * build fails with an assert.\n+ *\/\n+void PhaseGVN::dump_infinite_loop_info(Node* n, const char* where) {\n+  n->dump(4);\n+  assert(false, \"infinite loop in %s\", where);\n+}\n@@ -1141,1 +1155,1 @@\n-void PhaseIterGVN::dump_infinite_loop_info(Node* n) {\n+void PhaseIterGVN::dump_infinite_loop_info(Node* n, const char* where) {\n@@ -1144,1 +1158,1 @@\n-  assert(false, \"infinite loop in PhaseIterGVN::optimize\");\n+  assert(false, \"infinite loop in %s\", where);\n@@ -1177,1 +1191,1 @@\n-      DEBUG_ONLY(dump_infinite_loop_info(n);)\n+      DEBUG_ONLY(dump_infinite_loop_info(n, \"PhaseIterGVN::optimize\");)\n@@ -1186,0 +1200,3 @@\n+      if (C->failing()) {\n+        return;\n+      }\n@@ -1225,1 +1242,0 @@\n-  DEBUG_ONLY(uint loop_count = 0;);\n@@ -1227,1 +1243,0 @@\n-\n@@ -1245,0 +1260,1 @@\n+  DEBUG_ONLY(uint loop_count = 1;)\n@@ -1247,2 +1263,2 @@\n-    if (loop_count >= K) {\n-      dump_infinite_loop_info(i);\n+    if (loop_count >= K * C->live_nodes()) {\n+      dump_infinite_loop_info(i, \"PhaseIterGVN::transform_old\");\n@@ -1250,1 +1266,0 @@\n-    loop_count++;\n@@ -1270,0 +1285,1 @@\n+    DEBUG_ONLY(loop_count++;)\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":40,"deletions":24,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -432,0 +432,2 @@\n+#ifdef ASSERT\n+  void dump_infinite_loop_info(Node* n, const char* where);\n@@ -433,1 +435,2 @@\n-  DEBUG_ONLY(void dead_loop_check(Node *n);)\n+  void dead_loop_check(Node *n);\n+#endif\n@@ -451,1 +454,0 @@\n-\n@@ -484,1 +486,1 @@\n-  void dump_infinite_loop_info(Node* n);\n+  void dump_infinite_loop_info(Node* n, const char* where);\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}