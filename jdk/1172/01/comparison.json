{"files":[{"patch":"@@ -46,10 +46,35 @@\n-static void save_xmm_registers(MacroAssembler* masm) {\n-    __ subptr(rsp, 64);\n-    __ movdbl(Address(rsp, 0), xmm0);\n-    __ movdbl(Address(rsp, 8), xmm1);\n-    __ movdbl(Address(rsp, 16), xmm2);\n-    __ movdbl(Address(rsp, 24), xmm3);\n-    __ movdbl(Address(rsp, 32), xmm4);\n-    __ movdbl(Address(rsp, 40), xmm5);\n-    __ movdbl(Address(rsp, 48), xmm6);\n-    __ movdbl(Address(rsp, 56), xmm7);\n+static void save_machine_state(MacroAssembler* masm, bool handle_gpr, bool handle_fp) {\n+  if (handle_gpr) {\n+    __ push_IU_state();\n+  }\n+\n+  if (handle_fp) {\n+    \/\/ Some paths can be reached from the c2i adapter with live fp arguments in registers.\n+    LP64_ONLY(assert(Argument::n_float_register_parameters_j == 8, \"8 fp registers to save at java call\"));\n+\n+    if (UseSSE >= 2) {\n+      const int xmm_size = wordSize * LP64_ONLY(2) NOT_LP64(4);\n+      __ subptr(rsp, xmm_size * 8);\n+      __ movdbl(Address(rsp, xmm_size * 0), xmm0);\n+      __ movdbl(Address(rsp, xmm_size * 1), xmm1);\n+      __ movdbl(Address(rsp, xmm_size * 2), xmm2);\n+      __ movdbl(Address(rsp, xmm_size * 3), xmm3);\n+      __ movdbl(Address(rsp, xmm_size * 4), xmm4);\n+      __ movdbl(Address(rsp, xmm_size * 5), xmm5);\n+      __ movdbl(Address(rsp, xmm_size * 6), xmm6);\n+      __ movdbl(Address(rsp, xmm_size * 7), xmm7);\n+    } else if (UseSSE >= 1) {\n+      const int xmm_size = wordSize * LP64_ONLY(1) NOT_LP64(2);\n+      __ subptr(rsp, xmm_size * 8);\n+      __ movflt(Address(rsp, xmm_size * 0), xmm0);\n+      __ movflt(Address(rsp, xmm_size * 1), xmm1);\n+      __ movflt(Address(rsp, xmm_size * 2), xmm2);\n+      __ movflt(Address(rsp, xmm_size * 3), xmm3);\n+      __ movflt(Address(rsp, xmm_size * 4), xmm4);\n+      __ movflt(Address(rsp, xmm_size * 5), xmm5);\n+      __ movflt(Address(rsp, xmm_size * 6), xmm6);\n+      __ movflt(Address(rsp, xmm_size * 7), xmm7);\n+    } else {\n+      __ push_FPU_state();\n+    }\n+  }\n@@ -58,10 +83,32 @@\n-static void restore_xmm_registers(MacroAssembler* masm) {\n-    __ movdbl(xmm0, Address(rsp, 0));\n-    __ movdbl(xmm1, Address(rsp, 8));\n-    __ movdbl(xmm2, Address(rsp, 16));\n-    __ movdbl(xmm3, Address(rsp, 24));\n-    __ movdbl(xmm4, Address(rsp, 32));\n-    __ movdbl(xmm5, Address(rsp, 40));\n-    __ movdbl(xmm6, Address(rsp, 48));\n-    __ movdbl(xmm7, Address(rsp, 56));\n-    __ addptr(rsp, 64);\n+static void restore_machine_state(MacroAssembler* masm, bool handle_gpr, bool handle_fp) {\n+  if (handle_fp) {\n+    if (UseSSE >= 2) {\n+      const int xmm_size = wordSize * LP64_ONLY(2) NOT_LP64(4);\n+      __ movdbl(xmm0, Address(rsp, xmm_size * 0));\n+      __ movdbl(xmm1, Address(rsp, xmm_size * 1));\n+      __ movdbl(xmm2, Address(rsp, xmm_size * 2));\n+      __ movdbl(xmm3, Address(rsp, xmm_size * 3));\n+      __ movdbl(xmm4, Address(rsp, xmm_size * 4));\n+      __ movdbl(xmm5, Address(rsp, xmm_size * 5));\n+      __ movdbl(xmm6, Address(rsp, xmm_size * 6));\n+      __ movdbl(xmm7, Address(rsp, xmm_size * 7));\n+      __ addptr(rsp, xmm_size * 8);\n+    } else if (UseSSE >= 1) {\n+      const int xmm_size = wordSize * LP64_ONLY(1) NOT_LP64(2);\n+      __ movflt(xmm0, Address(rsp, xmm_size * 0));\n+      __ movflt(xmm1, Address(rsp, xmm_size * 1));\n+      __ movflt(xmm2, Address(rsp, xmm_size * 2));\n+      __ movflt(xmm3, Address(rsp, xmm_size * 3));\n+      __ movflt(xmm4, Address(rsp, xmm_size * 4));\n+      __ movflt(xmm5, Address(rsp, xmm_size * 5));\n+      __ movflt(xmm6, Address(rsp, xmm_size * 6));\n+      __ movflt(xmm7, Address(rsp, xmm_size * 7));\n+      __ addptr(rsp, xmm_size * 8);\n+    } else {\n+      __ pop_FPU_state();\n+    }\n+  }\n+\n+  if (handle_gpr) {\n+    __ pop_IU_state();\n+  }\n@@ -112,1 +159,1 @@\n-      __ pusha();                      \/\/ push registers\n+      save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ false);\n@@ -128,1 +175,2 @@\n-      __ popa();\n+      restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ false);\n+\n@@ -332,0 +380,4 @@\n+  save_machine_state(masm, \/* handle_gpr = *\/ false, \/* handle_fp = *\/ true);\n+\n+  \/\/ The rest is saved with the optimized path\n+\n@@ -365,1 +417,0 @@\n-  save_xmm_registers(masm);\n@@ -383,1 +434,0 @@\n-  restore_xmm_registers(masm);\n@@ -404,0 +454,2 @@\n+  restore_machine_state(masm, \/* handle_gpr = *\/ false, \/* handle_fp = *\/ true);\n+\n@@ -432,6 +484,1 @@\n-    \/\/ The set of registers to be saved+restored is the same as in the write-barrier above.\n-    \/\/ Those are the commonly used registers in the interpreter.\n-    __ pusha();\n-    \/\/ __ push_callee_saved_registers();\n-    __ subptr(rsp, 2 * Interpreter::stackElementSize);\n-    __ movdbl(Address(rsp, 0), xmm0);\n+    save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n@@ -454,4 +501,2 @@\n-    __ movdbl(xmm0, Address(rsp, 0));\n-    __ addptr(rsp, 2 * Interpreter::stackElementSize);\n-    \/\/__ pop_callee_saved_registers();\n-    __ popa();\n+\n+    restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n@@ -522,5 +567,1 @@\n-    __ push_IU_state();\n-    \/\/ That path can be reached from the c2i adapter with live fp\n-    \/\/ arguments in registers.\n-    LP64_ONLY(assert(Argument::n_float_register_parameters_j == 8, \"8 fp registers to save at java call\"));\n-    save_xmm_registers(masm);\n+    save_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n@@ -543,2 +584,2 @@\n-    restore_xmm_registers(masm);\n-    __ pop_IU_state();\n+\n+    restore_machine_state(masm, \/* handle_gpr = *\/ true, \/* handle_fp = *\/ true);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":82,"deletions":41,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -3672,5 +3672,12 @@\n-    const int xmm_size = wordSize * 4;\n-    const int xmm_spill_size = xmm_size * 2;\n-    __ subptr(rsp, xmm_spill_size);\n-    __ movdqu(Address(rsp, xmm_size * 1), xmm1);\n-    __ movdqu(Address(rsp, xmm_size * 0), xmm0);\n+\n+    if (UseSSE >= 2) {\n+      const int xmm_size = wordSize * 4;\n+      __ subptr(rsp, xmm_size * 2);\n+      __ movdbl(Address(rsp, xmm_size * 1), xmm1);\n+      __ movdbl(Address(rsp, xmm_size * 0), xmm0);\n+    } else if (UseSSE >= 1) {\n+      const int xmm_size = wordSize * 2;\n+      __ subptr(rsp, xmm_size * 2);\n+      __ movflt(Address(rsp, xmm_size * 1), xmm1);\n+      __ movflt(Address(rsp, xmm_size * 0), xmm0);\n+    }\n@@ -3680,3 +3687,11 @@\n-    __ movdqu(xmm0, Address(rsp, xmm_size * 0));\n-    __ movdqu(xmm1, Address(rsp, xmm_size * 1));\n-    __ addptr(rsp, xmm_spill_size);\n+    if (UseSSE >= 2) {\n+      const int xmm_size = wordSize * 4;\n+      __ movdbl(xmm0, Address(rsp, xmm_size * 0));\n+      __ movdbl(xmm1, Address(rsp, xmm_size * 1));\n+      __ addptr(rsp, xmm_size * 2);\n+    } else if (UseSSE >= 1) {\n+      const int xmm_size = wordSize * 2;\n+      __ movflt(xmm0, Address(rsp, xmm_size * 0));\n+      __ movflt(xmm1, Address(rsp, xmm_size * 1));\n+      __ addptr(rsp, xmm_size * 2);\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"}]}