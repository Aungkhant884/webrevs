{"files":[{"patch":"@@ -37,2 +37,0 @@\n-import jdk.internal.classfile.impl.Util;\n-\n@@ -40,0 +38,4 @@\n+import jdk.internal.classfile.impl.ClassHierarchyImpl.ClassLoadingClassHierarchyResolver;\n+import jdk.internal.classfile.impl.ClassHierarchyImpl.StaticClassHierarchyResolver;\n+import jdk.internal.classfile.impl.ClassHierarchyImpl.ResourceParsingClassHierarchyResolver;\n+import jdk.internal.classfile.impl.Util;\n@@ -54,3 +56,3 @@\n-            = ofCached(ofParsing(ClassLoader.getSystemClassLoader())\n-                    .orElse(ofReflection(ClassLoader.getSystemClassLoader())),\n-            new Supplier<Map<ClassDesc, ClassHierarchyInfo>>() {\n+            = ofCached(ofResourceParsing(ResourceParsingClassHierarchyResolver.SYSTEM_STREAM_PROVIDER)\n+                    .orElse(new ClassLoadingClassHierarchyResolver(ClassLoadingClassHierarchyResolver.SYSTEM_CLASS_PROVIDER)),\n+            new Supplier<>() {\n@@ -143,2 +145,2 @@\n-    static ClassHierarchyResolver ofParsing(Function<ClassDesc, InputStream> classStreamResolver) {\n-        return new ClassHierarchyImpl.ParsingClassHierarchyResolver(classStreamResolver);\n+    static ClassHierarchyResolver ofResourceParsing(Function<ClassDesc, InputStream> classStreamResolver) {\n+        return new ClassHierarchyImpl.ResourceParsingClassHierarchyResolver(classStreamResolver);\n@@ -154,2 +156,2 @@\n-    static ClassHierarchyResolver ofParsing(ClassLoader loader) {\n-        return ofParsing(new Function<ClassDesc, InputStream>() {\n+    static ClassHierarchyResolver ofResourceParsing(ClassLoader loader) {\n+        return ofResourceParsing(new Function<>() {\n@@ -173,1 +175,1 @@\n-        return new ClassHierarchyImpl.StaticClassHierarchyResolver(interfaces, classToSuperClass);\n+        return new StaticClassHierarchyResolver(interfaces, classToSuperClass);\n@@ -183,2 +185,2 @@\n-    static ClassHierarchyResolver ofReflection(ClassLoader loader) {\n-        return new ClassHierarchyImpl.ReflectionClassHierarchyResolver() {\n+    static ClassHierarchyResolver ofClassLoading(ClassLoader loader) {\n+        return new ClassLoadingClassHierarchyResolver(new Function<>() {\n@@ -186,1 +188,1 @@\n-            protected Class<?> resolve(ClassDesc cd) {\n+            public Class<?> apply(ClassDesc cd) {\n@@ -193,1 +195,1 @@\n-        };\n+        });\n@@ -205,2 +207,2 @@\n-    static ClassHierarchyResolver ofReflection(MethodHandles.Lookup lookup) {\n-        return new ClassHierarchyImpl.ReflectionClassHierarchyResolver() {\n+    static ClassHierarchyResolver ofClassLoading(MethodHandles.Lookup lookup) {\n+        return new ClassLoadingClassHierarchyResolver(new Function<>() {\n@@ -208,1 +210,1 @@\n-            protected Class<?> resolve(ClassDesc cd) {\n+            public Class<?> apply(ClassDesc cd) {\n@@ -210,1 +212,1 @@\n-                    return (Class<?>) cd.resolveConstantDesc(lookup);\n+                    return cd.resolveConstantDesc(lookup);\n@@ -217,1 +219,1 @@\n-        };\n+        });\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassHierarchyResolver.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -121,1 +125,1 @@\n-            var ret = resolvedCache.computeIfAbsent(classDesc, new Function<ClassDesc, ClassHierarchyInfo>() {\n+            var ret = resolvedCache.computeIfAbsent(classDesc, new Function<>() {\n@@ -132,1 +136,17 @@\n-    public static final class ParsingClassHierarchyResolver implements ClassHierarchyResolver {\n+    public static final class ResourceParsingClassHierarchyResolver implements ClassHierarchyResolver {\n+        public static final Function<ClassDesc, InputStream> SYSTEM_STREAM_PROVIDER = new Function<>() {\n+            @SuppressWarnings(\"removal\")\n+            @Override\n+            public InputStream apply(ClassDesc cd) {\n+                var sm = System.getSecurityManager();\n+                if (sm != null) {\n+                    return AccessController.doPrivileged(new PrivilegedAction<>() {\n+                        @Override\n+                        public InputStream run() {\n+                            return ClassLoader.getSystemClassLoader().getResourceAsStream(Util.toInternalName(cd) + \".class\");\n+                        }\n+                    });\n+                }\n+                return ClassLoader.getSystemClassLoader().getResourceAsStream(Util.toInternalName(cd) + \".class\");\n+            }\n+        };\n@@ -135,1 +155,1 @@\n-        public ParsingClassHierarchyResolver(Function<ClassDesc, InputStream> classStreamProvider) {\n+        public ResourceParsingClassHierarchyResolver(Function<ClassDesc, InputStream> classStreamProvider) {\n@@ -139,1 +159,0 @@\n-\n@@ -201,1 +220,31 @@\n-    public abstract static class ReflectionClassHierarchyResolver implements ClassHierarchyResolver {\n+    public static final class ClassLoadingClassHierarchyResolver implements ClassHierarchyResolver {\n+        public static final Function<ClassDesc, Class<?>> SYSTEM_CLASS_PROVIDER = new Function<>() {\n+            @Override\n+            @SuppressWarnings(\"removal\")\n+            public Class<?> apply(ClassDesc cd) {\n+                var sm = System.getSecurityManager();\n+                if (sm != null) {\n+                    try {\n+                        return AccessController.doPrivileged(new PrivilegedExceptionAction<>() {\n+                            @Override\n+                            public Class<?> run() throws ClassNotFoundException {\n+                                return Class.forName(Util.toBinaryName(cd.descriptorString()), false, ClassLoader.getSystemClassLoader());\n+                            }\n+                        });\n+                    } catch (PrivilegedActionException ex) {\n+                        return null;\n+                    }\n+                } else {\n+                    try {\n+                        return Class.forName(Util.toBinaryName(cd.descriptorString()), false, ClassLoader.getSystemClassLoader());\n+                    } catch (ClassNotFoundException ex) {\n+                        return null;\n+                    }\n+                }\n+            }\n+        };\n+        private final Function<ClassDesc, Class<?>> classProvider;\n+\n+        public ClassLoadingClassHierarchyResolver(Function<ClassDesc, Class<?>> classProvider) {\n+            this.classProvider = classProvider;\n+        }\n@@ -207,1 +256,1 @@\n-            var cl = resolve(cd);\n+            var cl = classProvider.apply(cd);\n@@ -215,2 +264,0 @@\n-\n-        protected abstract Class<?> resolve(ClassDesc cd);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":55,"deletions":8,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-        ClassHierarchyResolver resolver = ClassHierarchyResolver.ofCached(ClassHierarchyResolver.ofReflection(lookup));\n+        ClassHierarchyResolver resolver = ClassHierarchyResolver.ofCached(ClassHierarchyResolver.ofClassLoading(lookup));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/snippet-files\/PackageSnippets.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        transformAndVerify(ClassHierarchyResolver.ofParsing(classDesc -> {\n+        transformAndVerify(ClassHierarchyResolver.ofResourceParsing(classDesc -> {\n@@ -104,1 +104,1 @@\n-        transformAndVerify(ClassHierarchyResolver.ofParsing(ClassLoader.getSystemClassLoader()));\n+        transformAndVerify(ClassHierarchyResolver.ofResourceParsing(ClassLoader.getSystemClassLoader()));\n@@ -109,1 +109,1 @@\n-        transformAndVerify(ClassHierarchyResolver.ofReflection(ClassLoader.getSystemClassLoader()));\n+        transformAndVerify(ClassHierarchyResolver.ofClassLoading(ClassLoader.getSystemClassLoader()));\n@@ -116,1 +116,1 @@\n-        transformAndVerify(ClassHierarchyResolver.ofReflection(privilegedLookup));\n+        transformAndVerify(ClassHierarchyResolver.ofClassLoading(privilegedLookup));\n@@ -123,1 +123,1 @@\n-        assertThrows(IllegalArgumentException.class, () -> transformAndVerify(ClassHierarchyResolver.ofReflection(lookup)));\n+        assertThrows(IllegalArgumentException.class, () -> transformAndVerify(ClassHierarchyResolver.ofClassLoading(lookup)));\n","filename":"test\/jdk\/jdk\/classfile\/ClassHierarchyInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}