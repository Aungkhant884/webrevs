{"files":[{"patch":"@@ -290,1 +290,1 @@\n-  JavaThread* thread = JavaThread::current();\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -504,1 +504,1 @@\n-void ClassLoader::setup_bootstrap_search_path() {\n+void ClassLoader::setup_bootstrap_search_path(TRAPS) {\n@@ -513,1 +513,1 @@\n-  setup_boot_search_path(sys_class_path);\n+  setup_bootstrap_search_path_impl(sys_class_path, CHECK);\n@@ -517,1 +517,1 @@\n-void ClassLoader::setup_app_search_path(const char *class_path) {\n+void ClassLoader::setup_app_search_path(const char *class_path, TRAPS) {\n@@ -525,1 +525,1 @@\n-    update_class_path_entry_list(path, false, false, false);\n+    update_class_path_entry_list(path, false, false, false, CHECK);\n@@ -545,1 +545,1 @@\n-void ClassLoader::update_module_path_entry_list(const char *path, TRAPS) {\n+void ClassLoader::setup_module_search_path(const char* path, TRAPS) {\n@@ -565,4 +565,0 @@\n-void ClassLoader::setup_module_search_path(const char* path, TRAPS) {\n-  update_module_path_entry_list(path, THREAD);\n-}\n-\n@@ -635,2 +631,1 @@\n-void ClassLoader::setup_boot_search_path(const char *class_path) {\n-  EXCEPTION_MARK;\n+void ClassLoader::setup_bootstrap_search_path_impl(const char *class_path, TRAPS) {\n@@ -678,1 +673,1 @@\n-      update_class_path_entry_list(path, false, true, false);\n+      update_class_path_entry_list(path, false, true, false, CHECK);\n@@ -725,1 +720,1 @@\n-  JavaThread* thread = JavaThread::current();\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -850,1 +845,2 @@\n-                                               bool check_for_duplicates) {\n+                                               bool check_for_duplicates,\n+                                               TRAPS) {\n@@ -874,1 +870,1 @@\n-    ClassLoaderExt::process_jar_manifest(entry, check_for_duplicates);\n+    ClassLoaderExt::process_jar_manifest(entry, check_for_duplicates, CHECK);\n@@ -884,1 +880,1 @@\n-                                               bool throw_exception) {\n+                                               TRAPS) {\n@@ -889,2 +885,1 @@\n-    Thread* THREAD = Thread::current();\n-    new_entry = create_class_path_entry(path, &st, throw_exception, is_boot_append, from_class_path_attr, CHECK_(false));\n+    new_entry = create_class_path_entry(path, &st, \/*throw_exception=*\/true, is_boot_append, from_class_path_attr, CHECK_false);\n@@ -900,1 +895,1 @@\n-      add_to_app_classpath_entries(path, new_entry, check_for_duplicates);\n+      add_to_app_classpath_entries(path, new_entry, check_for_duplicates, CHECK_false);\n@@ -1289,1 +1284,1 @@\n-  result->set_classpath_index(classpath_index, THREAD);\n+  result->set_classpath_index(classpath_index);\n@@ -1424,1 +1419,1 @@\n-  ClassLoaderExt::record_result(classpath_index, ik, THREAD);\n+  ClassLoaderExt::record_result(classpath_index, ik, CHECK);\n@@ -1433,3 +1428,1 @@\n-void ClassLoader::initialize() {\n-  EXCEPTION_MARK;\n-\n+void ClassLoader::initialize(TRAPS) {\n@@ -1467,1 +1460,1 @@\n-  setup_bootstrap_search_path();\n+  setup_bootstrap_search_path(CHECK);\n@@ -1504,1 +1497,1 @@\n-void ClassLoader::initialize_shared_path() {\n+void ClassLoader::initialize_shared_path(TRAPS) {\n@@ -1506,1 +1499,1 @@\n-    ClassLoaderExt::setup_search_paths();\n+    ClassLoaderExt::setup_search_paths(CHECK);\n@@ -1512,2 +1505,2 @@\n-    ClassLoaderExt::setup_module_paths(THREAD);\n-    FileMapInfo::allocate_shared_path_table();\n+    ClassLoaderExt::setup_module_paths(CHECK);\n+    FileMapInfo::allocate_shared_path_table(CHECK);\n@@ -1569,1 +1562,5 @@\n-  ClassLoader::initialize();\n+  EXCEPTION_MARK;\n+  ClassLoader::initialize(THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    vm_exit_during_initialization(\"ClassLoader::initialize() failed unexpectedly\");\n+  }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":28,"deletions":31,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-  CDS_ONLY(static void setup_app_search_path(const char* class_path);)\n+  CDS_ONLY(static void setup_app_search_path(const char* class_path, TRAPS);)\n@@ -229,1 +229,2 @@\n-                                           bool check_for_duplicates);\n+                                           bool check_for_duplicates,\n+                                           TRAPS);\n@@ -243,2 +244,2 @@\n-  static void setup_bootstrap_search_path();\n-  static void setup_boot_search_path(const char *class_path);\n+  static void setup_bootstrap_search_path(TRAPS);\n+  static void setup_bootstrap_search_path_impl(const char *class_path, TRAPS);\n@@ -275,2 +276,1 @@\n-                                           bool throw_exception=true);\n-  CDS_ONLY(static void update_module_path_entry_list(const char *path, TRAPS);)\n+                                           TRAPS);\n@@ -338,1 +338,1 @@\n-  static void initialize();\n+  static void initialize(TRAPS);\n@@ -340,1 +340,1 @@\n-  CDS_ONLY(static void initialize_shared_path();)\n+  CDS_ONLY(static void initialize_shared_path(TRAPS);)\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-void ClassLoaderExt::setup_app_search_path() {\n+void ClassLoaderExt::setup_app_search_path(TRAPS) {\n@@ -80,1 +80,1 @@\n-    ClassLoader::setup_app_search_path(app_class_path);\n+    ClassLoader::setup_app_search_path(app_class_path, CHECK);\n@@ -91,1 +91,1 @@\n-        ClassLoader::setup_module_search_path(path, THREAD);\n+        ClassLoader::setup_module_search_path(path, CHECK);\n@@ -103,1 +103,1 @@\n-  process_module_table(met, THREAD);\n+  process_module_table(met, CHECK);\n@@ -167,2 +167,1 @@\n-                                          bool check_for_duplicates) {\n-  Thread* THREAD = Thread::current();\n+                                          bool check_for_duplicates, TRAPS) {\n@@ -216,1 +215,2 @@\n-        if (ClassLoader::update_class_path_entry_list(libname, true, false, true \/* from_class_path_attr *\/)) {\n+        bool status = ClassLoader::update_class_path_entry_list(libname, true, false, true \/* from_class_path_attr *\/, CHECK);\n+        if (status) {\n@@ -229,2 +229,2 @@\n-void ClassLoaderExt::setup_search_paths() {\n-  ClassLoaderExt::setup_app_search_path();\n+void ClassLoaderExt::setup_search_paths(TRAPS) {\n+  ClassLoaderExt::setup_app_search_path(CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-  static void setup_app_search_path(); \/\/ Only when -Xshare:dump\n+  static void setup_app_search_path(TRAPS); \/\/ Only when -Xshare:dump\n@@ -64,1 +64,1 @@\n-  static void process_jar_manifest(ClassPathEntry* entry, bool check_for_duplicates);\n+  static void process_jar_manifest(ClassPathEntry* entry, bool check_for_duplicates, TRAPS);\n@@ -69,1 +69,1 @@\n-  static void setup_search_paths();\n+  static void setup_search_paths(TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        new_ik->set_classpath_index(path_index, THREAD);\n+        new_ik->set_classpath_index(path_index);\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1363,1 +1363,1 @@\n-    ik->set_classpath_index(path_index, THREAD);\n+    ik->set_classpath_index(path_index);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -307,1 +307,1 @@\n-  set_name(path, THREAD);\n+  set_name(path, CHECK);\n@@ -346,1 +346,1 @@\n-  set_name(name, THREAD);\n+  set_name(name, CHECK);\n@@ -351,1 +351,1 @@\n-  _name = MetadataFactory::new_array<char>(ClassLoaderData::the_null_class_loader_data(), (int)len, THREAD);\n+  _name = MetadataFactory::new_array<char>(ClassLoaderData::the_null_class_loader_data(), (int)len, CHECK);\n@@ -361,1 +361,1 @@\n-  set_name(ent->name(), THREAD);\n+  set_name(ent->name(), CHECK);\n@@ -366,1 +366,1 @@\n-                                                    THREAD);\n+                                                    CHECK);\n@@ -452,1 +452,1 @@\n-void SharedPathTable::dumptime_init(ClassLoaderData* loader_data, Thread* THREAD) {\n+void SharedPathTable::dumptime_init(ClassLoaderData* loader_data, TRAPS) {\n@@ -461,1 +461,1 @@\n-  _table = MetadataFactory::new_array<u8>(loader_data, (int)bytes, THREAD);\n+  _table = MetadataFactory::new_array<u8>(loader_data, (int)bytes, CHECK);\n@@ -469,1 +469,1 @@\n-void FileMapInfo::copy_shared_path_table(ClassLoaderData* loader_data, Thread* THREAD) {\n+void FileMapInfo::copy_shared_path_table(ClassLoaderData* loader_data, TRAPS) {\n@@ -473,2 +473,2 @@\n-  _saved_shared_path_table = SharedPathTable(MetadataFactory::new_array<u8>(loader_data, (int)bytes, THREAD),\n-                                             _shared_path_table.size());\n+  Array<u8>* array = MetadataFactory::new_array<u8>(loader_data, (int)bytes, CHECK);\n+  _saved_shared_path_table = SharedPathTable(array, _shared_path_table.size());\n@@ -477,1 +477,1 @@\n-    _saved_shared_path_table.path_at(i)->copy_from(shared_path(i), loader_data, THREAD);\n+    _saved_shared_path_table.path_at(i)->copy_from(shared_path(i), loader_data, CHECK);\n@@ -481,1 +481,1 @@\n-void FileMapInfo::allocate_shared_path_table() {\n+void FileMapInfo::allocate_shared_path_table(TRAPS) {\n@@ -484,1 +484,0 @@\n-  EXCEPTION_MARK; \/\/ The following calls should never throw, but would exit VM on error.\n@@ -491,1 +490,1 @@\n-  _shared_path_table.dumptime_init(loader_data, THREAD);\n+  _shared_path_table.dumptime_init(loader_data, CHECK);\n@@ -495,3 +494,3 @@\n-  i = add_shared_classpaths(i, \"boot\",   jrt, THREAD);\n-  i = add_shared_classpaths(i, \"app\",    ClassLoader::app_classpath_entries(), THREAD);\n-  i = add_shared_classpaths(i, \"module\", ClassLoader::module_path_entries(), THREAD);\n+  i = add_shared_classpaths(i, \"boot\",   jrt, CHECK);\n+  i = add_shared_classpaths(i, \"app\",    ClassLoader::app_classpath_entries(), CHECK);\n+  i = add_shared_classpaths(i, \"module\", ClassLoader::module_path_entries(), CHECK);\n@@ -501,1 +500,1 @@\n-    shared_path(i)->init_as_non_existent(path, THREAD);\n+    shared_path(i)->init_as_non_existent(path, CHECK);\n@@ -506,1 +505,1 @@\n-  copy_shared_path_table(loader_data, THREAD);\n+  copy_shared_path_table(loader_data, CHECK);\n@@ -516,1 +515,1 @@\n-    ent->init(is_jrt, is_module_path, cpe, THREAD);\n+    ent->init(is_jrt, is_module_path, cpe, CHECK_0);\n@@ -518,1 +517,1 @@\n-      update_jar_manifest(cpe, ent, THREAD);\n+      update_jar_manifest(cpe, ent, CHECK_0);\n@@ -673,1 +672,1 @@\n-                                                      THREAD);\n+                                                      CHECK);\n@@ -2367,1 +2366,2 @@\n-  assert(cfs != NULL, \"must be able to read the classfile data of shared classes for built-in loaders.\");\n+  assert(!HAS_PENDING_EXCEPTION &&\n+         cfs != NULL, \"must be able to read the classfile data of shared classes for built-in loaders.\");\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  void dumptime_init(ClassLoaderData* loader_data, Thread* THREAD);\n+  void dumptime_init(ClassLoaderData* loader_data, TRAPS);\n@@ -501,2 +501,2 @@\n-  static void allocate_shared_path_table();\n-  static void copy_shared_path_table(ClassLoaderData* loader_data, Thread* THREAD);\n+  static void allocate_shared_path_table(TRAPS);\n+  static void copy_shared_path_table(ClassLoaderData* loader_data, TRAPS);\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -819,0 +819,1 @@\n+  Arguments::assert_is_dumping_archive();\n@@ -820,1 +821,7 @@\n-  ClassLoader::initialize_shared_path();\n+\n+  EXCEPTION_MARK;\n+  ClassLoader::initialize_shared_path(THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    java_lang_Throwable::print(PENDING_EXCEPTION, tty);\n+    vm_exit_during_initialization(\"ClassLoader::initialize_shared_path() failed unexpectedly\");\n+  }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2937,1 +2937,1 @@\n-void InstanceKlass::set_classpath_index(s2 path_index, TRAPS) {\n+void InstanceKlass::set_classpath_index(s2 path_index) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -527,1 +527,1 @@\n-  void set_classpath_index(s2 path_index, TRAPS);\n+  void set_classpath_index(s2 path_index);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3364,0 +3364,4 @@\n+  if (HAS_PENDING_EXCEPTION) {\n+    java_lang_Throwable::print(PENDING_EXCEPTION, tty);\n+    vm_exit_during_initialization(\"ClassLoader::initialize_module_path() failed unexpectedly\");\n+  }\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}