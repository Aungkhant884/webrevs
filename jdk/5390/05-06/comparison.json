{"files":[{"patch":"@@ -154,3 +154,18 @@\n-\/\/ The abstract base class of an unrolled funtion\n-\/\/ generator. Subclasses override generate(), length(), and next() to\n-\/\/ generate unrolled and interleaved functions.\n+\/\/ KernelGenerator\n+\/\/\n+\/\/ The abstract base class of an unrolled function generator.\n+\/\/ Subclasses override generate(), length(), and next() to generate\n+\/\/ unrolled and interleaved functions.\n+\/\/\n+\/\/ The core idea is that a subclass defines a method which generates\n+\/\/ the base case of a function and a method to generate a clone of it,\n+\/\/ shifted to a different set of registers. KernelGenerator will then\n+\/\/ generate several interleaved copies of the function, with each one\n+\/\/ using a different set of registers.\n+\n+\/\/ The subclass must implement three methods: length(), which is the\n+\/\/ number of instruction bundles in the intrinsic, generate(int n)\n+\/\/ which emits the nth instruction bundle in the intrinsic, and next()\n+\/\/ which takes an instance of the generator and returns a version of it,\n+\/\/ shifted to a new set of registers.\n+\n@@ -187,2 +202,1 @@\n-\/\/ An unrolled and interleaved generator for the kernel AES\n-\/\/ encryption.\n+\/\/ An unrolled and interleaved generator for AES encryption.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_aes.cpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -3153,1 +3153,1 @@\n-      __ aesecb_encrypt(noreg, noreg, keylen, v0, 8);\n+      __ aesecb_encrypt(noreg, noreg, keylen, v0, \/*unrolls*\/8);\n@@ -3175,1 +3175,2 @@\n-    __ ghash_processBlocks_wide(ghash_polynomial, state, subkeyHtbl, ct, len, 4);\n+    __ ghash_processBlocks_wide(ghash_polynomial, state, subkeyHtbl, ct,\n+\t\t\t\tlen, \/*unrolls*\/4);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}