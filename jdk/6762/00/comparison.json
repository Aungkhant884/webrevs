{"files":[{"patch":"@@ -98,1 +98,1 @@\n-void G1BlockOffsetTablePart:: set_remainder_to_point_to_start(HeapWord* start, HeapWord* end) {\n+void G1BlockOffsetTablePart::set_remainder_to_point_to_start(HeapWord* start, HeapWord* end) {\n@@ -146,1 +146,1 @@\n-  assert(_bot->offset_array(start_card-1) <= BOTConstants::card_size_in_words(),\n+  assert(_bot->offset_array(start_card-1) < BOTConstants::card_size_in_words(),\n@@ -198,1 +198,1 @@\n-      guarantee(_bot->offset_array(landing_card) <= BOTConstants::card_size_in_words(),\n+      guarantee(_bot->offset_array(landing_card) < BOTConstants::card_size_in_words(),\n@@ -226,2 +226,2 @@\n-  assert(pointer_delta(threshold, blk_start) <= BOTConstants::card_size_in_words(),\n-         \"offset should be <= BlockOffsetSharedArray::N\");\n+  assert(pointer_delta(threshold, blk_start) < BOTConstants::card_size_in_words(),\n+         \"offset should be < BOTConstants::card_size_in_words()\");\n@@ -256,1 +256,0 @@\n-  index = end_index + 1;\n@@ -270,1 +269,1 @@\n-         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) <= BOTConstants::card_size_in_words()),\n+         (_bot->offset_array(orig_index) > 0 && _bot->offset_array(orig_index) < BOTConstants::card_size_in_words()),\n@@ -349,5 +348,2 @@\n-void G1BlockOffsetTablePart::zero_bottom_entry_raw() {\n-  size_t bottom_index = _bot->index_for_raw(_hr->bottom());\n-  assert(_bot->address_for_index_raw(bottom_index) == _hr->bottom(),\n-         \"Precondition of call\");\n-  _bot->set_offset_array_raw(bottom_index, 0);\n+void G1BlockOffsetTablePart::reset_bot() {\n+  _next_offset_threshold = _hr->bottom();\n@@ -356,2 +352,2 @@\n-void G1BlockOffsetTablePart::initialize_threshold() {\n-  _next_offset_threshold = _hr->bottom() + BOTConstants::card_size_in_words();\n+bool G1BlockOffsetTablePart::is_empty() const {\n+  return _next_offset_threshold == _hr->bottom();\n@@ -361,2 +357,1 @@\n-  \/\/ The first BOT entry should have offset 0.\n-  reset_bot();\n+  assert(is_empty(), \"first obj\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    assert(offset <= BOTConstants::card_size_in_words(),\n+    assert(offset < BOTConstants::card_size_in_words(),\n@@ -132,4 +132,0 @@\n-  \/\/ Zero out the entry for _bottom (offset will be zero). Does not check for availability of the\n-  \/\/ memory first.\n-  void zero_bottom_entry_raw();\n-\n@@ -180,3 +176,2 @@\n-  \/\/ Initialize the threshold to reflect the first boundary after the\n-  \/\/ bottom of the covered region.\n-  void initialize_threshold();\n+  \/\/ Reset bot to be empty.\n+  void reset_bot();\n@@ -184,4 +179,1 @@\n-  void reset_bot() {\n-    zero_bottom_entry_raw();\n-    initialize_threshold();\n-  }\n+  bool is_empty() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-  _bot_part.initialize_threshold();\n+  _bot_part.reset_bot();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}