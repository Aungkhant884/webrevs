{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,8 @@\n+static unsigned calculate_hash(address stack[NMT_TrackingStackDepth]) {\n+  unsigned hash = 0;\n+  for (int i = 0; i < NMT_TrackingStackDepth; i++) {\n+    hash += (unsigned)(uintptr_t)stack[i];\n+  }\n+  return hash;\n+}\n+\n@@ -54,0 +62,1 @@\n+  _hash_value = calculate_hash(_stack);\n@@ -66,1 +75,1 @@\n-  _hash_value = 0;\n+  _hash_value = calculate_hash(_stack);\n@@ -80,15 +89,0 @@\n-\/\/ Hash code. Any better algorithm?\n-unsigned int NativeCallStack::hash() const {\n-  uintptr_t hash_val = _hash_value;\n-  if (hash_val == 0) {\n-    for (int index = 0; index < NMT_TrackingStackDepth; index++) {\n-      if (_stack[index] == NULL) break;\n-      hash_val += (uintptr_t)_stack[index];\n-    }\n-\n-    NativeCallStack* p = const_cast<NativeCallStack*>(this);\n-    p->_hash_value = (unsigned int)(hash_val & 0xFFFFFFFF);\n-  }\n-  return _hash_value;\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.cpp","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,2 +94,1 @@\n-  \/\/ Hash code. Any better algorithm?\n-  unsigned int hash() const;\n+  unsigned int hash() const { return _hash_value; }\n","filename":"src\/hotspot\/share\/utilities\/nativeCallStack.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}