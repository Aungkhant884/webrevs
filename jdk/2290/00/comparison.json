{"files":[{"patch":"@@ -599,1 +599,1 @@\n-  ShenandoahConcurrentEvacUpdateThreadTask() :\n+  ShenandoahConcurrentEvacUpdateThreadTask(uint n_workers) :\n@@ -601,1 +601,1 @@\n-    _java_threads(ShenandoahPhaseTimings::conc_thread_roots) {\n+    _java_threads(ShenandoahPhaseTimings::conc_thread_roots, n_workers) {\n@@ -617,1 +617,1 @@\n-  ShenandoahConcurrentEvacUpdateThreadTask task;\n+  ShenandoahConcurrentEvacUpdateThreadTask task(heap->workers()->active_workers());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-ShenandoahJavaThreadsIterator::ShenandoahJavaThreadsIterator(ShenandoahPhaseTimings::Phase phase) :\n+ShenandoahJavaThreadsIterator::ShenandoahJavaThreadsIterator(ShenandoahPhaseTimings::Phase phase, uint n_workers) :\n@@ -43,0 +43,2 @@\n+  _length(_threads.length()),\n+  _stride(MAX2(1u, _length \/ n_workers \/ _chunks_per_worker)),\n@@ -48,1 +50,1 @@\n-  return Atomic::fetch_and_add(&_claimed, 1u);\n+  return Atomic::fetch_and_add(&_claimed, _stride);\n@@ -53,2 +55,4 @@\n-  for (uint i = claim(); i < _threads.length(); i = claim()) {\n-    cl->do_thread(_threads.thread_at(i));\n+  for (uint i = claim(); i < _length; i = claim()) {\n+    for (uint t = i; t < MIN2(_length, i + _stride); t++) {\n+      cl->do_thread(thread_at(t));\n+    }\n@@ -210,1 +214,1 @@\n-   _java_threads(phase),\n+   _java_threads(phase, n_workers),\n@@ -234,3 +238,1 @@\n-  ShenandoahConcurrentMarkThreadClosure thr_cl(oops);\n-  _java_threads.threads_do(&thr_cl, worker_id);\n-\n+  \/\/ Process light-weight\/limited parallel roots then\n@@ -239,6 +241,1 @@\n-  if (!heap->unload_classes()) {\n-    _cld_roots.cld_do(&clds_cl, worker_id);\n-    ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CodeCacheRoots, worker_id);\n-    CodeBlobToOopClosure blobs(oops, !CodeBlobToOopClosure::FixRelocations);\n-    _codecache_snapshot->parallel_blobs_do(&blobs);\n-  } else {\n+  if (heap->unload_classes()) {\n@@ -246,0 +243,8 @@\n+  } else {\n+    _cld_roots.cld_do(&clds_cl, worker_id);\n+\n+    {\n+      ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CodeCacheRoots, worker_id);\n+      CodeBlobToOopClosure blobs(oops, !CodeBlobToOopClosure::FixRelocations);\n+      _codecache_snapshot->parallel_blobs_do(&blobs);\n+    }\n@@ -247,0 +252,4 @@\n+\n+  \/\/ Process heavy-weight\/fully parallel roots the last\n+  ShenandoahConcurrentMarkThreadClosure thr_cl(oops);\n+  _java_threads.threads_do(&thr_cl, worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+  static const uint _chunks_per_worker = 16; \/\/ educated guess\n+\n@@ -71,0 +73,2 @@\n+  uint const                    _length;\n+  uint const                    _stride;\n@@ -76,1 +80,1 @@\n-  ShenandoahJavaThreadsIterator(ShenandoahPhaseTimings::Phase phase);\n+  ShenandoahJavaThreadsIterator(ShenandoahPhaseTimings::Phase phase, uint n_workers);\n@@ -79,1 +83,1 @@\n-  uint length() const { return _threads.length(); }\n+  uint length() const { return _length; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}