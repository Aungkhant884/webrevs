{"files":[{"patch":"@@ -39,1 +39,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,0 +323,39 @@\n+\n+\/\/ Iterating over the CLDG needs to be locked because\n+\/\/ unloading can remove entries concurrently soon.\n+template <bool keep_alive = true>\n+class ClassLoaderDataGraphIteratorBase : public StackObj {\n+  ClassLoaderData* _next;\n+  Thread*          _thread;\n+  HandleMark       _hm;  \/\/ clean up handles when this is done.\n+  NoSafepointVerifier _nsv; \/\/ No safepoints allowed in this scope\n+                            \/\/ unless verifying at a safepoint.\n+\n+public:\n+  ClassLoaderDataGraphIteratorBase() : _next(ClassLoaderDataGraph::_head), _thread(Thread::current()), _hm(_thread) {\n+    if (keep_alive) {\n+      assert_locked_or_safepoint(ClassLoaderDataGraph_lock);\n+    } else {\n+      assert_at_safepoint();\n+    }\n+  }\n+\n+  ClassLoaderData* get_next() {\n+    ClassLoaderData* cld = _next;\n+    \/\/ Skip already unloaded CLD for concurrent unloading.\n+    while (cld != NULL && !cld->is_alive()) {\n+      cld = cld->next();\n+    }\n+    if (cld != NULL) {\n+      if (keep_alive) {\n+        \/\/ Keep cld that is being returned alive.\n+        Handle(_thread, cld->holder());\n+      }\n+      _next = cld->next();\n+    } else {\n+      _next = NULL;\n+    }\n+    return cld;\n+  }\n+};\n+\n@@ -326,0 +365,14 @@\n+void ClassLoaderDataGraph::loaded_cld_do(CLDClosure* cl) {\n+  ClassLoaderDataGraphIterator iter;\n+  while (ClassLoaderData* cld = iter.get_next()) {\n+    cl->do_cld(cld);\n+  }\n+}\n+\n+void ClassLoaderDataGraph::loaded_cld_do_no_keepalive(CLDClosure* cl) {\n+  ClassLoaderDataGraphIteratorNoKeepAlive iter;\n+  while (ClassLoaderData* cld = iter.get_next()) {\n+    cl->do_cld(cld);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.cpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/safepointVerifiers.hpp\"\n@@ -77,1 +76,0 @@\n-  template <bool keep_alive = true>\n@@ -79,1 +77,1 @@\n-\n+  static void loaded_cld_do_no_keepalive(CLDClosure* cl);\n@@ -149,15 +147,0 @@\n-\/\/ Iterating over the CLDG needs to be locked because\n-\/\/ unloading can remove entries concurrently soon.\n-template <bool keep_alive = true>\n-class ClassLoaderDataGraphIteratorBase : public StackObj {\n-  ClassLoaderData*    _next;\n-  Thread*             _thread;\n-  HandleMark          _hm;  \/\/ clean up handles when this is done.\n-  NoSafepointVerifier _nsv; \/\/ No safepoints allowed in this scope\n-                            \/\/ unless verifying at a safepoint.\n-\n-public:\n-  ClassLoaderDataGraphIteratorBase();\n-  ClassLoaderData* get_next();\n-};\n-\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.hpp","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-#include \"runtime\/handles.inline.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -36,40 +34,0 @@\n-#include \"runtime\/safepoint.hpp\"\n-\n-template<bool keep_alive>\n-inline ClassLoaderDataGraphIteratorBase<keep_alive>::ClassLoaderDataGraphIteratorBase() :\n-    _next(ClassLoaderDataGraph::_head),\n-    _thread(Thread::current()),\n-    _hm(_thread) {\n-  if (keep_alive) {\n-    assert_locked_or_safepoint(ClassLoaderDataGraph_lock);\n-  } else {\n-    assert_at_safepoint();\n-  }\n-}\n-\n-template<bool keep_alive>\n-inline ClassLoaderData* ClassLoaderDataGraphIteratorBase<keep_alive>::get_next() {\n-  ClassLoaderData* cld = _next;\n-  \/\/ Skip already unloaded CLD for concurrent unloading.\n-  while (cld != NULL && !cld->is_alive()) {\n-    cld = cld->next();\n-  }\n-  if (cld != NULL) {\n-    if (keep_alive) {\n-      \/\/ Keep cld that is being returned alive.\n-      Handle(_thread, cld->holder());\n-    }\n-    _next = cld->next();\n-  } else {\n-    _next = NULL;\n-  }\n-  return cld;\n-}\n-\n-template<bool keep_alive>\n-inline void ClassLoaderDataGraph::loaded_cld_do(CLDClosure* cl) {\n-  ClassLoaderDataGraphIteratorBase<keep_alive> iter;\n-  while (ClassLoaderData* cld = iter.get_next()) {\n-    cl->do_cld(cld);\n-  }\n-}\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.inline.hpp","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -31,1 +31,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderHierarchyDCmd.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n@@ -29,1 +29,0 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n@@ -70,1 +69,1 @@\n-    cls->_parent = java_lang_ClassLoader::parent<AS_NO_KEEPALIVE>(cl);\n+    cls->_parent = java_lang_ClassLoader::parent_no_keepalive(cl);\n@@ -156,1 +155,1 @@\n-      cls->_parent = java_lang_ClassLoader::parent<AS_NO_KEEPALIVE>(cl);\n+      cls->_parent = java_lang_ClassLoader::parent_no_keepalive(cl);\n@@ -161,1 +160,1 @@\n-    cl = java_lang_ClassLoader::parent<AS_NO_KEEPALIVE>(cl);\n+    cl = java_lang_ClassLoader::parent_no_keepalive(cl);\n@@ -168,1 +167,1 @@\n-  ClassLoaderDataGraph::loaded_cld_do<false>(&clsc);\n+  ClassLoaderDataGraph::loaded_cld_do_no_keepalive(&clsc);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4667,0 +4667,10 @@\n+oop java_lang_ClassLoader::parent(oop loader) {\n+  assert(is_instance(loader), \"loader must be oop\");\n+  return loader->obj_field(_parent_offset);\n+}\n+\n+oop java_lang_ClassLoader::parent_no_keepalive(oop loader) {\n+  assert(is_instance(loader), \"loader must be oop\");\n+  return loader->obj_field_access<AS_NO_KEEPALIVE>(_parent_offset);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"oops\/accessDecorators.hpp\"\n@@ -1479,1 +1478,0 @@\n-  template <DecoratorSet decorators = DECORATORS_NONE>\n@@ -1481,0 +1479,1 @@\n+  static oop parent_no_keepalive(oop loader);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -313,6 +313,0 @@\n-template <DecoratorSet decorators>\n-inline oop java_lang_ClassLoader::parent(oop loader) {\n-  assert(is_instance(loader), \"loader must be oop\");\n-  return loader->obj_field_access<decorators>(_parent_offset);\n-}\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/protectionDomainCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"classfile\/classLoaderDataGraph.inline.hpp\"\n+#include \"classfile\/classLoaderDataGraph.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,5 @@\n-        System.out.println(\"testClassIsUnloaded loaded klass: \" + className);\n+\n+        \/\/ Printing the object to ensure the class is kept alive. If the test\n+        \/\/ is run with -Xcomp and ergonomically triggered GCs occur the class\n+        \/\/ could otherwise be unloaded before verified to be alive above.\n+        System.out.println(\"testClassIsUnloaded loaded klass: \" + className + \" and created object: \" + object);\n@@ -101,2 +105,6 @@\n-        System.out.println(\"testClassLoadedInParentIsUnloaded loaded klass: \" + loadedParent);\n-        System.out.println(\"testClassLoadedInParentIsUnloaded loaded klass: \" + loadedChild);\n+\n+        \/\/ Printing the objects to ensure the classes are kept alive. If the test\n+        \/\/ is run with -Xcomp and ergonomically triggered GCs occur they could\n+        \/\/ otherwise be unloaded before verified to be alive above.\n+        System.out.println(\"testClassLoadedInParentIsUnloaded loaded klass: \" + loadedParent + \" and created object: \" + parent);\n+        System.out.println(\"testClassLoadedInParentIsUnloaded loaded klass: \" + loadedChild + \" and created object: \" + child);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassUnload\/UnloadTestDuringClassLoaderStatsVMOperation.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}