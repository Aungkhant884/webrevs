{"files":[{"patch":"@@ -386,1 +386,1 @@\n-    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(1));\n+    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::gt));\n@@ -389,1 +389,1 @@\n-    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ge, bcast_lane_cnt, res, pred_node, vt));\n+    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::gt, bcast_lane_cnt, res, pred_node, vt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorShuffle;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8265956\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm compiler.vectorapi.TestVectorShuffleIotaByteWrongImpl\n+ *\/\n+\n+@Test\n+public class TestVectorShuffleIotaByteWrongImpl {\n+    static final VectorSpecies<Byte> SPECIESb_64 = ByteVector.SPECIES_64;\n+    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 50000);\n+\n+    static byte[] ab_64 = {87, 65, 78, 71, 72, 69, 82, 69};\n+    static byte[] expected_64 = {0, 2, 4, 6, -8, -6, -4, -2};\n+\n+    @Test\n+    static void testShuffleIota_64() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ByteVector bv = (ByteVector) VectorShuffle.iota(SPECIESb_64, 0, 2, false).toVector();\n+            bv.intoArray(ab_64, 0);\n+        }\n+        Assert.assertEquals(ab_64, expected_64);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIotaByteWrongImpl.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}