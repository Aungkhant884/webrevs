{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.ByteOrder;\n@@ -152,0 +151,2 @@\n+        private final boolean failOnMod;\n+        private final boolean singleHop;\n@@ -163,1 +164,3 @@\n-                                  boolean useModulePath) {\n+                                  boolean useModulePath,\n+                                  boolean failOnMod,\n+                                  boolean singleHop) {\n@@ -168,0 +171,2 @@\n+            this.failOnMod = failOnMod;\n+            this.singleHop = singleHop;\n@@ -196,0 +201,8 @@\n+        public boolean failOnMod() {\n+            return failOnMod;\n+        }\n+\n+        public boolean singleHop() {\n+            return singleHop;\n+        }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Jlink.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -186,1 +186,9 @@\n-        }, \"--ignore-signing-information\"),};\n+        }, \"--ignore-signing-information\"),\n+        new Option<JlinkTask>(false, (task, opt, arg) -> {\n+            task.options.runImageOnlyWarning = true;\n+        }, \"--run-image-only-warnings\"),\n+        new Option<JlinkTask>(false, (task, opt, arg) -> {\n+            task.options.runImageSingleHop = false;\n+        }, \"--run-image-ignore-single-hop\"),\n+    };\n+\n@@ -226,0 +234,2 @@\n+        boolean runImageOnlyWarning = false;\n+        boolean runImageSingleHop = true;\n@@ -395,1 +405,3 @@\n-                                      useModulePath);\n+                                      useModulePath,\n+                                      !options.runImageOnlyWarning,\n+                                      options.runImageSingleHop);\n@@ -585,1 +597,3 @@\n-        return new ImageHelper(cf, mods, targetPlatform, retainModulesPath, ignoreSigning, config.useModulePath());\n+        return new ImageHelper(cf, mods, targetPlatform, retainModulesPath,\n+                               ignoreSigning, config.useModulePath(),\n+                               config.failOnMod(), config.singleHop());\n@@ -856,0 +870,2 @@\n+        final boolean failOnMod;\n+        final boolean singleHop;\n@@ -862,1 +878,3 @@\n-                    boolean useModulePath) throws IOException {\n+                    boolean useModulePath,\n+                    boolean failOnMod,\n+                    boolean singleHop) throws IOException {\n@@ -867,0 +885,2 @@\n+            this.failOnMod = failOnMod;\n+            this.singleHop = singleHop;\n@@ -922,1 +942,1 @@\n-                return new JmodLessArchive(module, path);\n+                return new JmodLessArchive(module, path, failOnMod, singleHop);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.ByteArrayInputStream;\n@@ -51,0 +52,4 @@\n+    private static final String JAVA_BASE_MODULE = \"java.base\";\n+    \/\/ File marker in lib\/modules file for java.base indicating it got created\n+    \/\/ with a run-image-type link.\n+    private static final String JMODLESS_SINGLE_HOP_STAMP = \".runimage.stamp\";\n@@ -56,0 +61,2 @@\n+    private final boolean failOnMod;\n+    private final boolean singleHop;\n@@ -57,1 +64,1 @@\n-    JmodLessArchive(String module, Path path) {\n+    JmodLessArchive(String module, Path path, boolean failOnMod, boolean singleHop) {\n@@ -64,0 +71,2 @@\n+        this.failOnMod = failOnMod;\n+        this.singleHop = singleHop;\n@@ -82,0 +91,3 @@\n+        } catch (RunImageLinkException e) {\n+            \/\/ populate single-hop issue\n+            throw e.getReason();\n@@ -122,1 +134,2 @@\n-            files.addAll(ref.open().list().map(s -> {\n+            files.addAll(ref.open().list()\n+                                   .map(s -> {\n@@ -124,1 +137,1 @@\n-                        Type.CLASS_OR_RESOURCE, null \/* sha *\/, false \/* symlink *\/);\n+                        Type.CLASS_OR_RESOURCE, null \/* sha *\/, false \/* symlink *\/, failOnMod);\n@@ -126,0 +139,11 @@\n+            \/\/ if we use single-hop and we find a stamp file we fail the link\n+            if (files.stream().anyMatch(f -> { return JMODLESS_SINGLE_HOP_STAMP.equals(f.resPath);})) {\n+                String msg = \"Run image links only allow single-hop.\";\n+                IllegalArgumentException ise = new IllegalArgumentException(msg);\n+                throw new RunImageLinkException(ise);\n+            };\n+            \/\/ add\/persist a special, empty file for java.base so as to support\n+            \/\/ the single-hop-only runimage-jlink\n+            if (singleHop && JAVA_BASE_MODULE.equals(module)) {\n+                files.add(createJmodLessSingleHopStamp());\n+            }\n@@ -129,0 +153,4 @@\n+    private JmodLessFile createJmodLessSingleHopStamp() {\n+        return new JmodLessStampFile(this, JMODLESS_SINGLE_HOP_STAMP, Type.CLASS_OR_RESOURCE, null, false, failOnMod);\n+    }\n+\n@@ -139,1 +167,1 @@\n-                            return new JmodLessFile(JmodLessArchive.this, m.resPath, m.resType, m.sha, m.symlink);\n+                            return new JmodLessFile(JmodLessArchive.this, m.resPath, m.resType, m.sha, m.symlink, failOnMod);\n@@ -196,0 +224,1 @@\n+        final boolean failOnMod;\n@@ -197,1 +226,1 @@\n-        JmodLessFile(Archive archive, String resPath, Type resType, String sha, boolean symlink) {\n+        JmodLessFile(Archive archive, String resPath, Type resType, String sha, boolean symlink, boolean failOnMod) {\n@@ -203,0 +232,1 @@\n+            this.failOnMod = failOnMod;\n@@ -237,3 +267,9 @@\n-                        if (shaSumMismatch(path, sha, symlink) && !warningProduced) {\n-                            System.err.printf(\"WARNING: %s has been modified. Please double check!%n\", path.toString());\n-                            warningProduced = true;\n+                        if (shaSumMismatch(path, sha, symlink)) {\n+                            String msg = String.format(\"%s has been modified. Please double check!%n\", path.toString());\n+                            if (failOnMod) {\n+                                IllegalArgumentException ise = new IllegalArgumentException(msg);\n+                                throw new RunImageLinkException(ise);\n+                            } else if (!warningProduced) {\n+                                System.err.printf(\"WARNING: %s\", msg);\n+                                warningProduced = true;\n+                            }\n@@ -304,0 +340,26 @@\n+    \/\/ Stamp file marker for single-hop implementation\n+    static class JmodLessStampFile extends JmodLessFile {\n+        JmodLessStampFile(Archive archive, String resPath, Type resType, String sha, boolean symlink, boolean failOnMod) {\n+            super(archive, resPath, resType, sha, symlink, failOnMod);\n+        }\n+\n+        @Override\n+        Entry toEntry() {\n+            return new Entry(archive, resPath, resPath, resType) {\n+\n+                @Override\n+                public long size() {\n+                    \/\/ empty file\n+                    return 0;\n+                }\n+\n+                @Override\n+                public InputStream stream() throws IOException {\n+                    \/\/ empty content\n+                    return new ByteArrayInputStream(new byte[0]);\n+                }\n+\n+            };\n+        }\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JmodLessArchive.java","additions":70,"deletions":8,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal;\n+\n+\/**\n+ * Exception thrown for links without packaged modules. I.e. run-image link.\n+ *\n+ *\/\n+public class RunImageLinkException extends IllegalStateException {\n+\n+    private static final long serialVersionUID = -1848914673073119403L;\n+\n+    private final IllegalArgumentException iae;\n+\n+    public RunImageLinkException(IllegalArgumentException cause) {\n+        super(cause);\n+        this.iae = cause;\n+    }\n+\n+    public IllegalArgumentException getReason() {\n+        return iae;\n+    }\n+\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/RunImageLinkException.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.tools.jlink.internal.RunImageLinkException;\n@@ -51,1 +52,1 @@\n- * resources.\n+ * resources. Needed for the the run-image-based jlink.\n@@ -165,0 +166,4 @@\n+        } catch (RunImageLinkException e) {\n+            \/\/ JmodLessArchive::JmodLessFile.content() may throw this when\n+            \/\/ getting the content(). Populate the actual reason.\n+            throw e.getReason();\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddJmodResourcesPlugin.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -92,0 +92,14 @@\n+main.opt.run-image-only-warnings=\\\n+\\      --run-image-only-warnings         Only produce a warning for a modified\\n\\\n+\\                                        file taken from the current run-image\\n\\\n+\\                                        in a link using only the JDK run-image.\\n\\\n+\\                                        Default is a fatal error.\n+\n+main.opt.run-image-ignore-single-hop=\\\n+\\      --run-image-ignore-single-hop     Allow for multi-hop run-image based links.\\n\\\n+\\                                        Default is to only allow a single link using\\n\\\n+\\                                        the run-image. With this option a run-image\\n\\\n+\\                                        link and a link using packaged modules become\\n\\\n+\\                                        equivalent as it doesn't add a stamp file to\\n\\\n+\\                                        the module image.\\n\\\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/jlink.properties","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.ByteOrder;\n@@ -41,2 +40,1 @@\n-import jdk.tools.jlink.internal.Jlink;\n-import jdk.tools.jlink.internal.JlinkTask;\n+\n@@ -44,4 +42,0 @@\n-import jdk.tools.jlink.internal.Platform;\n-import jdk.tools.jlink.plugin.ResourcePool;\n-import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -49,0 +43,1 @@\n+import jdk.tools.jlink.internal.Jlink;\n@@ -51,0 +46,2 @@\n+import jdk.tools.jlink.internal.JlinkTask;\n+import jdk.tools.jlink.internal.Platform;\n@@ -52,3 +49,3 @@\n-import jdk.tools.jlink.internal.plugins.DefaultCompressPlugin;\n-import jdk.tools.jlink.internal.plugins.DefaultStripDebugPlugin;\n-\n+import jdk.tools.jlink.plugin.Plugin;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+import jdk.tools.jlink.plugin.ResourcePoolBuilder;\n@@ -165,1 +162,1 @@\n-                JlinkTask.newModuleFinder(modulePaths, limits, mods, true), true);\n+                JlinkTask.newModuleFinder(modulePaths, limits, mods, true), true, false, true);\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.function.Predicate;\n@@ -118,0 +119,3 @@\n+        for (String extra: baseSpec.getExtraOptions()) {\n+            builder.extraJlinkOpt(extra);\n+        }\n@@ -126,0 +130,4 @@\n+        return jlinkUsingImage(spec, handler, new DefaultSuccessExitPredicate());\n+    }\n+\n+    protected Path jlinkUsingImage(JlinkSpec spec, OutputAnalyzerHandler handler, Predicate<OutputAnalyzer> exitChecker) throws Exception {\n@@ -149,1 +157,1 @@\n-        if (analyzer.getExitValue() != 0) {\n+        if (!exitChecker.test(analyzer)) {\n@@ -156,1 +164,6 @@\n-            throw new AssertionError(\"Expected jlink to pass given a jmodless image\");\n+            \/\/ if the exit checker failed, we expected the other outcome\n+            \/\/ i.e. fail for success and success for fail.\n+            boolean successExit = analyzer.getExitValue() == 0;\n+            String msg = String.format(\"Expected jlink to %s given a jmodless image. Exit code was: %d\",\n+                                       (successExit ? \"fail\" : \"pass\"), analyzer.getExitValue());\n+            throw new AssertionError(msg);\n@@ -160,6 +173,9 @@\n-        \/\/ validate the resulting image; Includes running 'java -version'\n-        JImageValidator validator = new JImageValidator(spec.getValidatingModule(), spec.getExpectedLocations(),\n-                targetImageDir.toFile(), spec.getUnexpectedLocations(), Collections.emptyList(), spec.getExpectedFiles());\n-        validator.validate(); \/\/ This doesn't validate locations\n-        if (!spec.getExpectedLocations().isEmpty() || !spec.getUnexpectedLocations().isEmpty()) {\n-            JImageValidator.validate(targetImageDir.resolve(\"lib\").resolve(\"modules\"), spec.getExpectedLocations(), spec.getUnexpectedLocations());\n+        \/\/ validate the resulting image; Includes running 'java -version', only do this\n+        \/\/ if the jlink succeeded.\n+        if (analyzer.getExitValue() == 0) {\n+            JImageValidator validator = new JImageValidator(spec.getValidatingModule(), spec.getExpectedLocations(),\n+                    targetImageDir.toFile(), spec.getUnexpectedLocations(), Collections.emptyList(), spec.getExpectedFiles());\n+            validator.validate(); \/\/ This doesn't validate locations\n+            if (!spec.getExpectedLocations().isEmpty() || !spec.getUnexpectedLocations().isEmpty()) {\n+                JImageValidator.validate(targetImageDir.resolve(\"lib\").resolve(\"modules\"), spec.getExpectedLocations(), spec.getUnexpectedLocations());\n+            }\n@@ -459,0 +475,9 @@\n+\n+    static class DefaultSuccessExitPredicate implements Predicate<OutputAnalyzer> {\n+\n+        @Override\n+        public boolean test(OutputAnalyzer t) {\n+            return t.getExitValue() == 0;\n+        }\n+\n+    }\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/AbstractJmodLessTest.java","additions":33,"deletions":8,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+class CapturingHandler extends AbstractJmodLessTest.OutputAnalyzerHandler {\n+\n+    private OutputAnalyzer output;\n+\n+    public String stdErr() {\n+        return output.getStderr();\n+    }\n+\n+    public OutputAnalyzer analyzer() {\n+        return output;\n+    }\n+\n+    @Override\n+    public void handleAnalyzer(OutputAnalyzer out) {\n+        this.output = out;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/CapturingHandler.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import tests.Helper;\n+\n+\/*\n+ * @test\n+ * @summary Verify jlink fails by default when jlinking in jmod-less mode and files have been changed\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @library ..\/..\/lib \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1g ModifiedFilesExitTest\n+ *\/\n+public class ModifiedFilesExitTest extends ModifiedFilesTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        ModifiedFilesExitTest test = new ModifiedFilesExitTest();\n+        test.run();\n+    }\n+\n+    @Override\n+    String initialImageName() {\n+        return \"java-base-jlink-with-mod-exit\";\n+    }\n+\n+    @Override\n+    void testAndAssert(Path modifiedFile, Helper helper, Path initialImage)\n+            throws Exception {\n+        CapturingHandler handler = new CapturingHandler();\n+        Predicate<OutputAnalyzer> exitFailPred = new Predicate<>() {\n+\n+            @Override\n+            public boolean test(OutputAnalyzer t) {\n+                return t.getExitValue() != 0; \/\/ expect failure\n+            }\n+        };\n+        jlinkUsingImage(new JlinkSpecBuilder()\n+                                .helper(helper)\n+                                .imagePath(initialImage)\n+                                .name(\"java-base-jlink-with-mod-exit-target\")\n+                                .addModule(\"java.base\")\n+                                .validatingModule(\"java.base\")\n+                                .build(), handler, exitFailPred);\n+        if (handler.analyzer().getExitValue() == 0) {\n+            throw new AssertionError(\"Expected jlink to fail due to modified file!\");\n+        }\n+        handler.analyzer().stdoutShouldContain(modifiedFile.toString() + \" has been modified\");\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/ModifiedFilesExitTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Properties;\n+\n+import tests.Helper;\n+\n+public abstract class ModifiedFilesTest extends AbstractJmodLessTest {\n+\n+    abstract String initialImageName();\n+    abstract void testAndAssert(Path modifiedFile, Helper helper, Path initialImage) throws Exception;\n+\n+    @Override\n+    void runTest(Helper helper) throws Exception {\n+        Path initialImage = createJavaImageJmodLess(new BaseJlinkSpecBuilder()\n+                \/\/.name(\"java-base-jlink-with-mod\")\n+                .name(initialImageName())\n+                .addModule(\"java.base\")\n+                .addModule(\"jdk.jlink\")\n+                .validatingModule(\"java.base\")\n+                .addExtraOption(\"--run-image-ignore-single-hop\")\n+                .helper(helper)\n+                .build());\n+\n+        Path netPropertiesFile = modifyFileInImage(initialImage);\n+\n+        testAndAssert(netPropertiesFile, helper, initialImage);\n+    }\n+\n+    protected Path modifyFileInImage(Path jmodLessImg)\n+            throws IOException, AssertionError {\n+        \/\/ modify net.properties config file\n+        Path netPropertiesFile = jmodLessImg.resolve(\"conf\").resolve(\"net.properties\");\n+        Properties props = new Properties();\n+        try (InputStream is = Files.newInputStream(netPropertiesFile)) {\n+            props.load(is);\n+        }\n+        String prevVal = (String)props.put(\"java.net.useSystemProxies\", Boolean.TRUE.toString());\n+        if (prevVal == null || Boolean.getBoolean(prevVal) != false) {\n+            throw new AssertionError(\"Expected previous value to be false!\");\n+        }\n+        try (OutputStream out = Files.newOutputStream(netPropertiesFile)) {\n+            props.store(out, \"Modified net.properties file!\");\n+        }\n+        return netPropertiesFile;\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/ModifiedFilesTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -24,3 +24,0 @@\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n@@ -28,1 +25,0 @@\n-import java.util.Properties;\n@@ -31,1 +27,0 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -48,1 +43,1 @@\n-public class ModifiedFilesWarningTest extends AbstractJmodLessTest {\n+public class ModifiedFilesWarningTest extends ModifiedFilesTest {\n@@ -56,22 +51,3 @@\n-    void runTest(Helper helper) throws Exception {\n-        Path initialImage = createJavaImageJmodLess(new BaseJlinkSpecBuilder()\n-                .name(\"java-base-jlink-with-mod\")\n-                .addModule(\"java.base\")\n-                .addModule(\"jdk.jlink\")\n-                .validatingModule(\"java.base\")\n-                .helper(helper)\n-                .build());\n-\n-        \/\/ modify net.properties config file\n-        Path netPropertiesFile = initialImage.resolve(\"conf\").resolve(\"net.properties\");\n-        Properties props = new Properties();\n-        try (InputStream is = Files.newInputStream(netPropertiesFile)) {\n-            props.load(is);\n-        }\n-        String prevVal = (String)props.put(\"java.net.useSystemProxies\", Boolean.TRUE.toString());\n-        if (prevVal == null || Boolean.getBoolean(prevVal) != false) {\n-            throw new AssertionError(\"Expected previous value to be false!\");\n-        }\n-        try (OutputStream out = Files.newOutputStream(netPropertiesFile)) {\n-            props.store(out, \"Modified net.properties file!\");\n-        }\n+    String initialImageName() {\n+        return \"java-base-jlink-with-mod-warn\";\n+    }\n@@ -79,0 +55,2 @@\n+    @Override\n+    void testAndAssert(Path modifiedFile, Helper helper, Path initialImage) throws Exception {\n@@ -83,1 +61,1 @@\n-                                .name(\"java-base-jlink-with-mod-target\")\n+                                .name(\"java-base-jlink-with-mod-warn-target\")\n@@ -86,0 +64,1 @@\n+                                .extraJlinkOpt(\"--run-image-only-warnings\") \/\/ only generate a warning\n@@ -88,1 +67,1 @@\n-        expectMatch(netPropertiesFile.toString(), handler.stdErr());\n+        expectMatch(modifiedFile.toString(), handler.stdErr());\n@@ -109,14 +88,0 @@\n-\n-    static class CapturingHandler extends OutputAnalyzerHandler {\n-\n-        private OutputAnalyzer output;\n-\n-        public String stdErr() {\n-            return output.getStderr();\n-        }\n-\n-        @Override\n-        public void handleAnalyzer(OutputAnalyzer out) {\n-            this.output = out;\n-        }\n-    }\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/ModifiedFilesWarningTest.java","additions":9,"deletions":44,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.function.Predicate;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import tests.Helper;\n+\n+\/*\n+ * @test\n+ * @summary Verify that a jlink unsing the run-image only is single-hop only\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g)\n+ * @library ..\/..\/lib \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1g MultiHopTest\n+ *\/\n+public class MultiHopTest extends AbstractJmodLessTest {\n+\n+    @Override\n+    void runTest(Helper helper) throws Exception {\n+        Path jdkJlinkJmodless = createJDKJlinkJmodLess(helper, \"jdk.jlink-multi-hop1\");\n+        CapturingHandler handler = new CapturingHandler();\n+        Predicate<OutputAnalyzer> exitFailPred = new Predicate<>() {\n+\n+            @Override\n+            public boolean test(OutputAnalyzer a) {\n+                return a.getExitValue() != 0; \/\/ expect failure\n+            }\n+        };\n+        jlinkUsingImage(new JlinkSpecBuilder()\n+                                .helper(helper)\n+                                .imagePath(jdkJlinkJmodless)\n+                                .name(\"jdk-jlink-multi-hop1-target\")\n+                                .addModule(\"java.base\")\n+                                .validatingModule(\"java.base\")\n+                                .build(), handler, exitFailPred);\n+        if (handler.analyzer().getExitValue() == 0) {\n+            throw new AssertionError(\"Expected jlink to fail due to multi-hop (hop 2)\");\n+        }\n+        handler.analyzer().stdoutShouldContain(\"Run image links only allow single-hop.\");\n+    }\n+\n+    private Path createJDKJlinkJmodLess(Helper helper, String name) throws Exception {\n+        BaseJlinkSpecBuilder builder = new BaseJlinkSpecBuilder();\n+        builder.helper(helper)\n+               .name(name)\n+               .addModule(\"jdk.jlink\")\n+               .validatingModule(\"java.base\");\n+        return createJavaImageJmodLess(builder.build());\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        MultiHopTest test = new MultiHopTest();\n+        test.run();\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/MultiHopTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -68,0 +68,1 @@\n+                                                            .addExtraOption(\"--run-image-ignore-single-hop\")\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/PackagedModulesVsJmodLessTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+                                                            .addExtraOption(\"--run-image-ignore-single-hop\")\n","filename":"test\/jdk\/tools\/jlink\/JmodLess\/SystemModulesTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}