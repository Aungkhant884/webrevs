{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-        if (sym.isDeprecated()) {\n+        if (sym.isDeprecated() && sym.isDeprecatableViaAnnotation()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.function.Consumer;\n@@ -5191,2 +5192,2 @@\n-        Env<AttrContext> env = typeEnvs.get(p);\n-        chk.checkDeprecatedAnnotation(((JCPackageDecl) env.tree).pid.pos(), p);\n+        attribWithLint(p,\n+                       env -> chk.checkDeprecatedAnnotation(((JCPackageDecl) env.tree).pid.pos(), p));\n@@ -5205,3 +5206,22 @@\n-        \/\/ Get environment current at the point of module definition.\n-        Env<AttrContext> env = enter.typeEnvs.get(m);\n-        attribStat(env.tree, env);\n+        attribWithLint(m, env -> attribStat(env.tree, env));\n+    }\n+\n+    private void attribWithLint(TypeSymbol sym, Consumer<Env<AttrContext>> attrib) {\n+        Env<AttrContext> env = typeEnvs.get(sym);\n+\n+        Env<AttrContext> lintEnv = env;\n+        while (lintEnv.info.lint == null)\n+            lintEnv = lintEnv.next;\n+\n+        Lint lint = lintEnv.info.lint.augment(sym);\n+\n+        Lint prevLint = chk.setLint(lint);\n+        JavaFileObject prev = log.useSource(env.toplevel.sourcefile);\n+\n+        try {\n+            deferredLintHandler.flush(env.tree.pos());\n+            attrib.accept(env);\n+        } finally {\n+            log.useSource(prev);\n+            chk.setLint(prevLint);\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -374,2 +374,7 @@\n-                    \/\/check @Deprecated:\n-                    markDeprecated(decl.sym, decl.mods.annotations, env);\n+                    DiagnosticPosition prevCheckDeprecatedLintPos = deferredLintHandler.setPos(decl.pos());\n+                    try {\n+                        \/\/check @Deprecated:\n+                        markDeprecated(decl.sym, decl.mods.annotations, env);\n+                    } finally {\n+                        deferredLintHandler.setPos(prevCheckDeprecatedLintPos);\n+                    }\n@@ -377,1 +382,1 @@\n-                    annotate.annotateLater(decl.mods.annotations, env, env.toplevel.modle, null);\n+                    annotate.annotateLater(decl.mods.annotations, env, env.toplevel.modle, decl.pos());\n@@ -405,1 +410,1 @@\n-            annotate.annotateLater(tree.annotations, env, env.toplevel.packge, null);\n+            annotate.annotateLater(tree.annotations, env, env.toplevel.packge, tree.pos());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8280866\n+ * @summary Verify SuppressWarnings works on package clauses and modules.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox\n+ * @run main SuppressWarningsPackage\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class SuppressWarningsPackage extends TestRunner {\n+    public static void main(String... args) throws Exception {\n+        SuppressWarningsPackage t = new SuppressWarningsPackage();\n+        t.runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public SuppressWarningsPackage() throws IOException {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void testSuppressWarningsOnPackageInfo(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        Path classes = Files.createDirectories(base.resolve(\"classes\"));\n+        TestCase[] testCases = new TestCase[] {\n+            new TestCase(\"\",\n+                         \"package-info.java:1:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"package-info.java:1:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"Use.java:2:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"Use.java:2:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"4 warnings\"),\n+            new TestCase(\"@SuppressWarnings(\\\"deprecation\\\")\",\n+                         \"Use.java:2:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"Use.java:2:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"2 warnings\")\n+        };\n+        for (TestCase tc : testCases) {\n+            tb.writeJavaFiles(src,\n+                              \"\"\"\n+                              @DeprecatedAnn(DeprecatedClass.class)\n+                              #\n+                              package test;\n+                              \"\"\".replace(\"#\", tc.sw),\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public @interface DeprecatedAnn {\n+                                  public Class<?> value();\n+                              }\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public class DeprecatedClass {\n+                                  public static class Nested {}\n+                              }\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @DeprecatedAnn(DeprecatedClass.class)\n+                              public class Use {}\n+                              \"\"\");\n+\n+            List<String> log = new JavacTask(tb)\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .options(\"-XDrawDiagnostics\",\n+                             \"-Xlint:deprecation\")\n+                    .run(Expect.SUCCESS)\n+                    .writeAll()\n+                    .getOutputLines(OutputKind.DIRECT);\n+\n+            if (!Objects.equals(log, List.of(tc.expectedOutput))) {\n+                error(\"Unexpected output, expected:\\n\" + Arrays.toString(tc.expectedOutput) +\n+                                         \"\\nactual:\\n\" + log);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSuppressWarningsOnModuleInfo(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        Path classes = Files.createDirectories(base.resolve(\"classes\"));\n+        TestCase[] testCases = new TestCase[] {\n+            new TestCase(\"\",\n+                         \"module-info.java:3:12: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"module-info.java:4:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"module-info.java:4:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"module-info.java:7:14: compiler.warn.has.been.deprecated: test.Service, test\",\n+                         \"module-info.java:8:18: compiler.warn.has.been.deprecated: test.Service, test\",\n+                         \"module-info.java:8:36: compiler.warn.has.been.deprecated: test.ServiceImpl, test\",\n+                         \"package-info.java:1:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"package-info.java:1:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"Use.java:2:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"Use.java:2:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"10 warnings\"),\n+            new TestCase(\"@SuppressWarnings(\\\"deprecation\\\")\",\n+                         \"module-info.java:3:12: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"package-info.java:1:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"package-info.java:1:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"Use.java:2:2: compiler.warn.has.been.deprecated: test.DeprecatedAnn, test\",\n+                         \"Use.java:2:16: compiler.warn.has.been.deprecated: test.DeprecatedClass, test\",\n+                         \"5 warnings\")\n+        };\n+        for (TestCase tc : testCases) {\n+            tb.writeJavaFiles(src,\n+                              \"\"\"\n+                              import test.DeprecatedAnn;\n+                              import test.DeprecatedClass;\n+                              import test.DeprecatedClass.Nested;\n+                              @DeprecatedAnn(DeprecatedClass.class)\n+                              #\n+                              module m {\n+                                  uses test.Service;\n+                                  provides test.Service with test.ServiceImpl;\n+                              }\n+                              \"\"\".replace(\"#\", tc.sw),\n+                              \"\"\"\n+                              @DeprecatedAnn(DeprecatedClass.class)\n+                              package test;\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public @interface DeprecatedAnn {\n+                                  public Class<?> value();\n+                              }\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public class DeprecatedClass {\n+                                  public static class Nested {}\n+                              }\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public interface Service {}\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @Deprecated\n+                              public class ServiceImpl implements Service {}\n+                              \"\"\",\n+                              \"\"\"\n+                              package test;\n+                              @DeprecatedAnn(DeprecatedClass.class)\n+                              public class Use {}\n+                              \"\"\");\n+\n+            List<String> log = new JavacTask(tb)\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .options(\"-XDrawDiagnostics\",\n+                             \"-Xlint:deprecation\")\n+                    .run(Expect.SUCCESS)\n+                    .writeAll()\n+                    .getOutputLines(OutputKind.DIRECT);\n+\n+            if (!Objects.equals(log, List.of(tc.expectedOutput))) {\n+                error(\"Unexpected output, expected:\\n\" + Arrays.toString(tc.expectedOutput) +\n+                                         \"\\nactual:\\n\" + log);\n+            }\n+        }\n+    }\n+\n+    record TestCase(String sw, String... expectedOutput) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/suppress\/SuppressWarningsPackage.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"}]}