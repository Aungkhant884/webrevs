{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Objects;\n@@ -36,1 +35,0 @@\n-import jdk.internal.util.Preconditions;\n@@ -444,1 +442,3 @@\n-        checkRange(beginIndex, endIndex, count);\n+        if (beginIndex < 0 || endIndex > count || beginIndex > endIndex) {\n+            throw new IndexOutOfBoundsException();\n+        }\n@@ -471,1 +471,3 @@\n-        checkOffset(index, count);\n+        if (index < 0 || index > count) {\n+            throw new IndexOutOfBoundsException();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -934,1 +934,2 @@\n-            Preconditions.checkFromIndexSize(len, off, b.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+            Preconditions.checkFromIndexSize(len, off, b.length,\n+                Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/Base64.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,1 +77,2 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, b.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,1 +77,2 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, b.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,1 +152,2 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, b.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -234,1 +234,2 @@\n-        Preconditions.checkFromIndexSize(len, off, input.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, input.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n@@ -299,1 +300,2 @@\n-        Preconditions.checkFromIndexSize(len, off, dictionary.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n@@ -556,1 +558,2 @@\n-        Preconditions.checkFromIndexSize(len, off, output.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, output.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -155,1 +155,2 @@\n-        Preconditions.checkFromIndexSize(len, off, input.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, input.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n@@ -220,1 +221,2 @@\n-        Preconditions.checkFromIndexSize(len, off, dictionary.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n@@ -363,1 +365,2 @@\n-        Preconditions.checkFromIndexSize(len, off, output.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(len, off, output.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-        Preconditions.checkFromIndexSize(ofs, len, b.length, (xa, xb) -> new ArrayIndexOutOfBoundsException());\n+        Preconditions.checkFromIndexSize(ofs, len, b.length,\n+            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DigestBase.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}