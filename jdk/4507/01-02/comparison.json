{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -4556,4 +4557,1 @@\n-        if (index < 0 || index >= length) {\n-            throw new StringIndexOutOfBoundsException(\"index \" + index +\n-                                                      \", length \" + length);\n-        }\n+        Preconditions.checkIndex(index, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4567,4 +4565,1 @@\n-        if (offset < 0 || offset > length) {\n-            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n-                                                      \", length \" + length);\n-        }\n+        Preconditions.checkFromToIndex(offset, length, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4582,4 +4577,1 @@\n-        if (offset < 0 || count < 0 || offset > length - count) {\n-            throw new StringIndexOutOfBoundsException(\n-                \"offset \" + offset + \", count \" + count + \", length \" + length);\n-        }\n+        Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4597,4 +4589,1 @@\n-        if (begin < 0 || begin > end || end > length) {\n-            throw new StringIndexOutOfBoundsException(\n-                \"begin \" + begin + \", end \" + end + \", length \" + length);\n-        }\n+        Preconditions.checkFromToIndex(begin, end, length, Preconditions.SIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2182,9 +2182,0 @@\n-    static final BiFunction<String, List<Number>, ArrayIndexOutOfBoundsException>\n-            AIOOBE_SUPPLIER = Preconditions.outOfBoundsExceptionFormatter(\n-            new Function<String, ArrayIndexOutOfBoundsException>() {\n-                @Override\n-                public ArrayIndexOutOfBoundsException apply(String s) {\n-                    return new ArrayIndexOutOfBoundsException(s);\n-                }\n-            });\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -845,1 +845,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -858,1 +858,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -870,1 +870,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -883,1 +883,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -895,1 +895,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -909,1 +909,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -923,1 +923,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -937,1 +937,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -951,1 +951,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -965,1 +965,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -979,1 +979,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -993,1 +993,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1007,1 +1007,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1021,1 +1021,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1034,1 +1034,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1047,1 +1047,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1058,1 +1058,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1067,1 +1067,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1076,1 +1076,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1087,1 +1087,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1096,1 +1096,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1105,1 +1105,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1114,1 +1114,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1123,1 +1123,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1132,1 +1132,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1141,1 +1141,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1150,1 +1150,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1159,1 +1159,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -112,3 +112,0 @@\n-        private static final BiFunction<String, List<Number>, ArrayIndexOutOfBoundsException>\n-            OOBEF = Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new);\n-\n@@ -117,1 +114,1 @@\n-            return Preconditions.checkIndex(index, ba.length - ALIGN, OOBEF);\n+            return Preconditions.checkIndex(index, ba.length - ALIGN, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -934,2 +934,1 @@\n-            Preconditions.checkFromIndexSize(len, off, b.length,\n-                Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+            Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Base64.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,2 +77,1 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,2 +77,1 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -152,2 +152,1 @@\n-        Preconditions.checkFromIndexSize(len, off, b.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -234,2 +234,1 @@\n-        Preconditions.checkFromIndexSize(len, off, input.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, input.length, Preconditions.AIOOBE_FORMATTER);\n@@ -300,2 +299,1 @@\n-        Preconditions.checkFromIndexSize(len, off, dictionary.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length, Preconditions.AIOOBE_FORMATTER);\n@@ -558,2 +556,1 @@\n-        Preconditions.checkFromIndexSize(len, off, output.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, output.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -155,2 +155,1 @@\n-        Preconditions.checkFromIndexSize(len, off, input.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, input.length, Preconditions.AIOOBE_FORMATTER);\n@@ -221,2 +220,1 @@\n-        Preconditions.checkFromIndexSize(len, off, dictionary.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length, Preconditions.AIOOBE_FORMATTER);\n@@ -365,2 +363,1 @@\n-        Preconditions.checkFromIndexSize(len, off, output.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(len, off, output.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,0 +39,42 @@\n+    \/**\n+     * Utility classes for creating the desired exception which can be used\n+     * for {@code outOfBoundsExceptionFormatter}\n+     *\n+     * @implNote They can be syntactically replaced by lambda expression or\n+     * method reference, but it's not feasible in practices, because\n+     * {@code Preconditions} is used in many fundamental classes such as\n+     * java.lang.String, lambda expressions or method references exercise\n+     * many other code at VM startup, this could lead an {@code StackOverflowError}.\n+     * That's the reason why these utility classes are created.\n+     *\/\n+    static class StringIndexOutOfBoundsExceptionProducer implements Function<String, StringIndexOutOfBoundsException> {\n+        @Override\n+        public StringIndexOutOfBoundsException apply(String s) {\n+            return new StringIndexOutOfBoundsException(s);\n+        }\n+    }\n+\n+    static class ArrayIndexOutOfBoundsExceptionProducer implements Function<String, ArrayIndexOutOfBoundsException> {\n+        @Override\n+        public ArrayIndexOutOfBoundsException apply(String s) {\n+            return new ArrayIndexOutOfBoundsException(s);\n+        }\n+    }\n+\n+    static class IndexOutOfBoundsExceptionProducer implements Function<String, IndexOutOfBoundsException> {\n+        @Override\n+        public IndexOutOfBoundsException apply(String s) {\n+            return new IndexOutOfBoundsException(s);\n+        }\n+    }\n+\n+    public static final BiFunction<String, List<Number>, StringIndexOutOfBoundsException> SIOOBE_FORMATTER\n+            = Preconditions.outOfBoundsExceptionFormatter(new StringIndexOutOfBoundsExceptionProducer());\n+\n+    public static final BiFunction<String, List<Number>, StringIndexOutOfBoundsException> AIOOBE_FORMATTER\n+            = Preconditions.outOfBoundsExceptionFormatter(new StringIndexOutOfBoundsExceptionProducer());\n+\n+    public static final BiFunction<String, List<Number>, StringIndexOutOfBoundsException> IOOBE_FORMATTER\n+            = Preconditions.outOfBoundsExceptionFormatter(new StringIndexOutOfBoundsExceptionProducer());\n+\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Preconditions.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -109,2 +109,1 @@\n-        Preconditions.checkFromIndexSize(ofs, len, b.length,\n-            Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new));\n+        Preconditions.checkFromIndexSize(ofs, len, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DigestBase.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-    private static final BiFunction<String, List<Number>,\n-            ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER =\n-            Preconditions.outOfBoundsExceptionFormatter\n-            (ArrayIndexOutOfBoundsException::new);\n-\n@@ -53,1 +48,1 @@\n-        Preconditions.checkFromIndexSize(offset, len, array.length, AIOOBE_SUPPLIER);\n+        Preconditions.checkFromIndexSize(offset, len, array.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ArrayUtil.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}