{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -412,3 +413,1 @@\n-        if (i < 0 || i >= count) {\n-            throw new StringIndexOutOfBoundsException(index);\n-        }\n+        checkIndex(i, count);\n@@ -508,1 +507,1 @@\n-        checkRangeSIOOBE(srcBegin, srcEnd, count);  \/\/ compatible to old version\n+        Preconditions.checkFromToIndex(srcBegin, srcEnd, count, Preconditions.SIOOBE_FORMATTER);  \/\/ compatible to old version\n@@ -510,1 +509,1 @@\n-        checkRange(dstBegin, dstBegin + n, dst.length);\n+        Preconditions.checkFromToIndex(dstBegin, dstBegin + n, dst.length, Preconditions.IOOBE_FORMATTER);\n@@ -680,1 +679,1 @@\n-        checkRange(start, end, s.length());\n+        Preconditions.checkFromToIndex(start, end, s.length(), Preconditions.IOOBE_FORMATTER);\n@@ -739,1 +738,1 @@\n-        checkRange(offset, end, str.length);\n+        Preconditions.checkFromToIndex(offset, end, str.length, Preconditions.IOOBE_FORMATTER);\n@@ -917,1 +916,1 @@\n-        checkRangeSIOOBE(start, end, count);\n+        Preconditions.checkFromToIndex(start, end, count, Preconditions.SIOOBE_FORMATTER);\n@@ -1000,1 +999,1 @@\n-        checkRangeSIOOBE(start, end, count);\n+        Preconditions.checkFromToIndex(start, end, count, Preconditions.SIOOBE_FORMATTER);\n@@ -1070,1 +1069,1 @@\n-        checkRangeSIOOBE(start, end, count);\n+        Preconditions.checkFromToIndex(start, end, count, Preconditions.SIOOBE_FORMATTER);\n@@ -1107,1 +1106,1 @@\n-        checkRangeSIOOBE(offset, offset + len, str.length);\n+        Preconditions.checkFromToIndex(offset, offset + len, str.length, Preconditions.SIOOBE_FORMATTER);\n@@ -1295,1 +1294,1 @@\n-        checkRange(start, end, s.length());\n+        Preconditions.checkFromToIndex(start, end, s.length(), Preconditions.IOOBE_FORMATTER);\n@@ -1798,16 +1797,0 @@\n-\n-    \/* IndexOutOfBoundsException, if out of bounds *\/\n-    private static void checkRange(int start, int end, int len) {\n-        if (start < 0 || start > end || end > len) {\n-            throw new IndexOutOfBoundsException(\n-                \"start \" + start + \", end \" + end + \", length \" + len);\n-        }\n-    }\n-\n-    \/* StringIndexOutOfBoundsException, if out of bounds *\/\n-    private static void checkRangeSIOOBE(int start, int end, int len) {\n-        if (start < 0 || start > end || end > len) {\n-            throw new StringIndexOutOfBoundsException(\n-                \"start \" + start + \", end \" + end + \", length \" + len);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":11,"deletions":28,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -9252,4 +9253,1 @@\n-        int length = seq.length();\n-        if (beginIndex < 0 || endIndex > length || beginIndex > endIndex) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkFromToIndex(beginIndex, endIndex, seq.length());\n@@ -9287,3 +9285,1 @@\n-        if (count > a.length - offset || offset < 0 || count < 0) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkFromIndexSize(count, offset, a.length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -712,0 +712,1 @@\n+        Objects.checkFromToIndex(beginIndex, endIndex, s.length());\n@@ -713,3 +714,0 @@\n-        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n@@ -895,0 +893,1 @@\n+        Objects.checkFromToIndex(beginIndex, endIndex, s.length());\n@@ -896,3 +895,0 @@\n-        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -755,0 +755,1 @@\n+        Objects.checkFromToIndex(beginIndex, endIndex, s.length());\n@@ -756,3 +757,0 @@\n-        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n@@ -1001,0 +999,1 @@\n+        Objects.checkFromToIndex(beginIndex, endIndex, s.length());\n@@ -1002,3 +1001,0 @@\n-        if (beginIndex < 0 || beginIndex > endIndex || endIndex > s.length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -1574,3 +1575,1 @@\n-        if (i < 0 || i >= length()) {\n-            throw new StringIndexOutOfBoundsException(index);\n-        }\n+        checkIndex(i, length());\n@@ -1605,4 +1604,1 @@\n-        if (beginIndex < 0 || beginIndex > endIndex ||\n-            endIndex > length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkFromToIndex(beginIndex, endIndex, length());\n@@ -4559,4 +4555,1 @@\n-        if (index < 0 || index >= length) {\n-            throw new StringIndexOutOfBoundsException(\"index \" + index +\n-                                                      \", length \" + length);\n-        }\n+        Preconditions.checkIndex(index, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4570,4 +4563,1 @@\n-        if (offset < 0 || offset > length) {\n-            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n-                                                      \", length \" + length);\n-        }\n+        Preconditions.checkFromToIndex(offset, length, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4585,4 +4575,1 @@\n-        if (offset < 0 || count < 0 || offset > length - count) {\n-            throw new StringIndexOutOfBoundsException(\n-                \"offset \" + offset + \", count \" + count + \", length \" + length);\n-        }\n+        Preconditions.checkFromIndexSize(offset, count, length, Preconditions.SIOOBE_FORMATTER);\n@@ -4600,4 +4587,1 @@\n-        if (begin < 0 || begin > end || end > length) {\n-            throw new StringIndexOutOfBoundsException(\n-                \"begin \" + begin + \", end \" + end + \", length \" + length);\n-        }\n+        Preconditions.checkFromToIndex(begin, end, length, Preconditions.SIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import static java.lang.String.checkIndex;\n@@ -47,3 +48,1 @@\n-        if (index < 0 || index >= value.length) {\n-            throw new StringIndexOutOfBoundsException(index);\n-        }\n+        checkIndex(index, value.length);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -116,2 +117,3 @@\n-        if (start < 0 || start >= argTypes.length || end < 0 || end > argTypes.length || start > end)\n-            throw new IndexOutOfBoundsException();\n+        Objects.checkIndex(start, argTypes.length);\n+        Objects.checkFromToIndex(start, end, argTypes.length);\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDescImpl.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import static java.lang.invoke.MethodHandleStatics.rangeCheck1;\n-import static java.lang.invoke.MethodHandleStatics.rangeCheck2;\n-\n@@ -122,1 +119,1 @@\n-            rangeCheck2(start, end, size);\n+            Objects.checkFromToIndex(start, end, size);\n@@ -126,1 +123,1 @@\n-            return rangeCheck1(index, size) + offset;\n+            return Objects.checkIndex(index, size) + offset;\n@@ -146,1 +143,1 @@\n-            rangeCheck2(start, end, size);\n+            Objects.checkFromToIndex(start, end, size);\n@@ -163,1 +160,1 @@\n-            rangeCheck2(start, end, size);\n+            Objects.checkFromToIndex(start, end, size);\n@@ -172,1 +169,1 @@\n-            rangeCheck2(start, end, size);\n+            Objects.checkFromToIndex(start, end, size);\n@@ -192,1 +189,1 @@\n-            rangeCheck2(start, end, self.size());\n+            Objects.checkFromToIndex(start, end, self.size());\n@@ -203,1 +200,1 @@\n-            return rangeCheck1(index, size) + offset;\n+            return Objects.checkIndex(index, size) + offset;\n@@ -226,1 +223,1 @@\n-            rangeCheck2(start, end, size);\n+            Objects.checkFromToIndex(start, end, size);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractConstantGroup.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -192,11 +192,0 @@\n-    \/*non-public*\/\n-    static void rangeCheck2(int start, int end, int size) {\n-        if (0 > start || start > end || end > size)\n-            throw new IndexOutOfBoundsException(start+\"..\"+end);\n-    }\n-    \/*non-public*\/\n-    static int rangeCheck1(int index, int size) {\n-        if (0 > index || index >= size)\n-            throw new IndexOutOfBoundsException(index);\n-        return index;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleStatics.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2182,9 +2182,0 @@\n-    static final BiFunction<String, List<Number>, ArrayIndexOutOfBoundsException>\n-            AIOOBE_SUPPLIER = Preconditions.outOfBoundsExceptionFormatter(\n-            new Function<String, ArrayIndexOutOfBoundsException>() {\n-                @Override\n-                public ArrayIndexOutOfBoundsException apply(String s) {\n-                    return new ArrayIndexOutOfBoundsException(s);\n-                }\n-            });\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -833,1 +833,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -845,1 +845,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -858,1 +858,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -870,1 +870,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -883,1 +883,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase);\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase);\n@@ -895,1 +895,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -909,1 +909,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -923,1 +923,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -937,1 +937,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -951,1 +951,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -965,1 +965,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -979,1 +979,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -993,1 +993,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1007,1 +1007,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1021,1 +1021,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1034,1 +1034,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1047,1 +1047,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1058,1 +1058,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1067,1 +1067,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1076,1 +1076,1 @@\n-                    (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                    (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1087,1 +1087,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1096,1 +1096,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1105,1 +1105,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1114,1 +1114,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1123,1 +1123,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1132,1 +1132,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1141,1 +1141,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1150,1 +1150,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n@@ -1159,1 +1159,1 @@\n-                                       (((long) Preconditions.checkIndex(index, array.length, AIOOBE_SUPPLIER)) << handle.ashift) + handle.abase,\n+                                       (((long) Preconditions.checkIndex(index, array.length, Preconditions.AIOOBE_FORMATTER)) << handle.ashift) + handle.abase,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -112,3 +112,0 @@\n-        private static final BiFunction<String, List<Number>, ArrayIndexOutOfBoundsException>\n-            OOBEF = Preconditions.outOfBoundsExceptionFormatter(ArrayIndexOutOfBoundsException::new);\n-\n@@ -117,1 +114,1 @@\n-            return Preconditions.checkIndex(index, ba.length - ALIGN, OOBEF);\n+            return Preconditions.checkIndex(index, ba.length - ALIGN, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleByteArrayView.java.template","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-\n+import jdk.internal.util.Preconditions;\n@@ -934,2 +934,1 @@\n-            if (off < 0 || len < 0 || len > b.length - off)\n-                throw new ArrayIndexOutOfBoundsException();\n+            Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Base64.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5181,3 +5181,1 @@\n-            if (index < 0 || index >= n)\n-                throw new IndexOutOfBoundsException(\"Index: \"+index+\n-                                                    \", Size: \"+n);\n+            Objects.checkIndex(index, n);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -564,2 +564,1 @@\n-            if (fromIndex < 0 || toIndex > len || toIndex < fromIndex)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkFromToIndex(fromIndex, toIndex, len);\n@@ -1176,2 +1175,1 @@\n-            if (fromIndex < 0 || toIndex > len || size < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkFromToIndex(fromIndex, toIndex, len);\n@@ -1460,2 +1458,1 @@\n-                if (fromIndex < 0 || toIndex > size || fromIndex > toIndex)\n-                    throw new IndexOutOfBoundsException();\n+                Objects.checkFromToIndex(fromIndex, toIndex, size);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\n+import jdk.internal.util.Preconditions;\n@@ -77,3 +77,1 @@\n-        if (off < 0 || len < 0 || off > b.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Adler32.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -76,3 +77,1 @@\n-        if (off < 0 || len < 0 || off > b.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n@@ -151,9 +150,2 @@\n-\n-        if (off < 0 || off >= b.length) {\n-            throw new ArrayIndexOutOfBoundsException(off);\n-        }\n-\n-        int endIndex = off + len - 1;\n-        if (endIndex < 0 || endIndex >= b.length) {\n-            throw new ArrayIndexOutOfBoundsException(endIndex);\n-        }\n+        Preconditions.checkIndex(off, b.length, Preconditions.AIOOBE_FORMATTER);\n+        Preconditions.checkIndex(off + len - 1, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -151,3 +152,1 @@\n-        if (off < 0 || len < 0 || off > b.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/CRC32C.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -233,3 +234,1 @@\n-        if (off < 0 || len < 0 || off > input.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, input.length, Preconditions.AIOOBE_FORMATTER);\n@@ -300,3 +299,1 @@\n-        if (off < 0 || len < 0 || off > dictionary.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length, Preconditions.AIOOBE_FORMATTER);\n@@ -559,3 +556,1 @@\n-        if (off < 0 || len < 0 || off > output.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, output.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Deflater.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -154,3 +155,1 @@\n-        if (off < 0 || len < 0 || off > input.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, input.length, Preconditions.AIOOBE_FORMATTER);\n@@ -221,3 +220,1 @@\n-        if (off < 0 || len < 0 || off > dictionary.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, dictionary.length, Preconditions.AIOOBE_FORMATTER);\n@@ -366,3 +363,1 @@\n-        if (off < 0 || len < 0 || off > output.length - len) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(len, off, output.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,0 +39,36 @@\n+    \/**\n+     * Utility exception formatters which can be used in {@code Preconditions}\n+     * check functions below.\n+     *\n+     * These anonymous inner classes can be syntactically replaced by lambda\n+     * expression or method reference, but it's not feasible in practices,\n+     * because {@code Preconditions} is used in many fundamental classes such\n+     * as {@code java.lang.String}, lambda expressions or method references\n+     * exercise many other code at VM startup, this could lead a recursive\n+     * calls when fundamental classes is used in lambda expressions or method\n+     * references.\n+     *\/\n+    public static final BiFunction<String, List<Number>, StringIndexOutOfBoundsException>\n+            SIOOBE_FORMATTER = Preconditions.outOfBoundsExceptionFormatter(new Function<>() {\n+        @Override\n+        public StringIndexOutOfBoundsException apply(String s) {\n+            return new StringIndexOutOfBoundsException(s);\n+        }\n+    });\n+\n+    public static final BiFunction<String, List<Number>, ArrayIndexOutOfBoundsException>\n+            AIOOBE_FORMATTER = Preconditions.outOfBoundsExceptionFormatter(new Function<>() {\n+        @Override\n+        public ArrayIndexOutOfBoundsException apply(String s) {\n+            return new ArrayIndexOutOfBoundsException(s);\n+        }\n+    });\n+\n+    public static final BiFunction<String,List<Number>, IndexOutOfBoundsException>\n+            IOOBE_FORMATTER = Preconditions.outOfBoundsExceptionFormatter(new Function<>() {\n+        @Override\n+        public IndexOutOfBoundsException apply(String s) {\n+            return new IndexOutOfBoundsException(s);\n+        }\n+    });\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Preconditions.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -311,2 +312,1 @@\n-        if ((offset < 0) || (length < 0) || (offset > dsts.length - length))\n-            throw new IndexOutOfBoundsException();\n+        Objects.checkFromIndexSize(offset, length, dsts.length);\n@@ -413,2 +413,1 @@\n-        if ((offset < 0) || (length < 0) || (offset > srcs.length - length))\n-            throw new IndexOutOfBoundsException();\n+        Objects.checkFromIndexSize(offset, length, srcs.length);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/AsynchronousSocketChannelImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -172,0 +173,2 @@\n+            Preconditions.checkIndex(sp, sa.length, Preconditions.AIOOBE_FORMATTER);\n+            Preconditions.checkIndex(dp, da.length, Preconditions.AIOOBE_FORMATTER);\n@@ -173,17 +176,2 @@\n-            if (sp < 0 || sp >= sa.length) {\n-                throw new ArrayIndexOutOfBoundsException(sp);\n-            }\n-\n-            if (dp < 0 || dp >= da.length) {\n-                throw new ArrayIndexOutOfBoundsException(dp);\n-            }\n-\n-            int endIndexSP = sp + len - 1;\n-            if (endIndexSP < 0 || endIndexSP >= sa.length) {\n-                throw new ArrayIndexOutOfBoundsException(endIndexSP);\n-            }\n-\n-            int endIndexDP = dp + len - 1;\n-            if (endIndexDP < 0 || endIndexDP >= da.length) {\n-                throw new ArrayIndexOutOfBoundsException(endIndexDP);\n-            }\n+            Preconditions.checkIndex(sp + len - 1, sa.length, Preconditions.AIOOBE_FORMATTER);\n+            Preconditions.checkIndex(dp + len - 1, da.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/ISO_8859_1.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -108,3 +109,1 @@\n-        if ((ofs < 0) || (len < 0) || (ofs > b.length - len)) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(ofs, len, b.length, Preconditions.AIOOBE_FORMATTER);\n@@ -162,4 +161,1 @@\n-\n-        if (ofs < 0 || ofs >= b.length) {\n-            throw new ArrayIndexOutOfBoundsException(ofs);\n-        }\n+        Preconditions.checkIndex(ofs, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DigestBase.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+\n+import jdk.internal.util.Preconditions;\n@@ -155,3 +157,1 @@\n-        if ((ofs < 0) || ((buf.length - ofs) < 64)) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(ofs, 64, buf.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/MD5.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+\n+import jdk.internal.util.Preconditions;\n@@ -139,3 +141,1 @@\n-        if (ofs < 0 || (buf.length - ofs) < 64) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(ofs, 64, buf.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -131,3 +132,1 @@\n-        if (ofs < 0 || (buf.length - ofs) < 64) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(ofs, 64, buf.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA2.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -232,3 +233,1 @@\n-        if (ofs < 0 || (buf.length - ofs) < 128) {\n-            throw new ArrayIndexOutOfBoundsException();\n-        }\n+        Preconditions.checkFromIndexSize(ofs, 128, buf.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA5.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,5 +40,0 @@\n-    private static final BiFunction<String, List<Number>,\n-            ArrayIndexOutOfBoundsException> AIOOBE_SUPPLIER =\n-            Preconditions.outOfBoundsExceptionFormatter\n-            (ArrayIndexOutOfBoundsException::new);\n-\n@@ -53,1 +48,1 @@\n-        Preconditions.checkFromIndexSize(offset, len, array.length, AIOOBE_SUPPLIER);\n+        Preconditions.checkFromIndexSize(offset, len, array.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ArrayUtil.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.internal.util.Preconditions;\n+\n@@ -128,3 +130,1 @@\n-        if (index < 0 || index >= length) {\n-            throw new ArrayIndexOutOfBoundsException(Integer.toString(index));\n-        }\n+        Preconditions.checkIndex(index, length, Preconditions.AIOOBE_FORMATTER);\n@@ -140,3 +140,1 @@\n-        if (index < 0 || index >= length) {\n-            throw new ArrayIndexOutOfBoundsException(Integer.toString(index));\n-        }\n+        Preconditions.checkIndex(index, length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/BitArray.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -142,2 +143,1 @@\n-        if ((offset < 0) || (length < 0) || (offset > srcs.length - length))\n-           throw new IndexOutOfBoundsException();\n+        Objects.checkFromIndexSize(offset, length, srcs.length);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SinkChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -123,2 +124,1 @@\n-        if ((offset < 0) || (length < 0) || (offset > dsts.length - length))\n-           throw new IndexOutOfBoundsException();\n+        Objects.checkFromIndexSize(offset, length, dsts.length);\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/ch\/SourceChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -84,2 +85,1 @@\n-            if (off < 0 || len < 0 || len > b.length - off)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkFromIndexSize(len, off, b.length);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/AudioFloatInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.Objects;\n@@ -1792,3 +1793,1 @@\n-        if (index < 0 || index >= pages.size()) {\n-            throw new IndexOutOfBoundsException(\"Index: \"+index+\", Tab count: \"+pages.size());\n-        }\n+        Objects.checkIndex(index, pages.size());\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTabbedPane.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Objects;\n@@ -239,3 +240,1 @@\n-            if (i < 0 || i >= length) {\n-                throw new IndexOutOfBoundsException(String.valueOf(i));\n-            }\n+            Objects.checkIndex(i, length);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -756,1 +756,1 @@\n-          if ((i < 0) || (i >= getNumEntries())) throw new IndexOutOfBoundsException();\n+          Objects.checkIndex(i, getNumEntries());\n@@ -812,3 +812,1 @@\n-          if (i < 0 || i >= getSizeOfData()) {\n-            throw new IndexOutOfBoundsException();\n-          }\n+          Objects.checkIndex(i, getSizeOfData());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/win32\/coff\/COFFFileParser.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    if (i < 0 || i >= getLength()) throw new IndexOutOfBoundsException(i + \" \" + getLength());\n+    Objects.checkIndex(i, getLength());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstantPoolCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Objects;\n+\n@@ -268,3 +270,1 @@\n-            if (off < 0 || srclen < 0|| srclen > (b.length-off)) {\n-                throw new IndexOutOfBoundsException ();\n-            }\n+            Objects.checkFromIndexSize(srclen, off, b.length);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/Request.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Objects;\n@@ -236,3 +237,1 @@\n-        if (i < 0 || i >= numLocals) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(i, numLocals);\n@@ -250,3 +249,1 @@\n-        if (i < 0 || i >= numStack) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(i, numStack);\n@@ -264,3 +261,1 @@\n-        if (i < 0 || i >= numLocals) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(i, numLocals);\n@@ -278,3 +273,1 @@\n-        if (i < 0 || i >= numStack) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(i, numStack);\n@@ -292,3 +285,1 @@\n-        if (i < 0 || i >= numLocks) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(i, numLocks);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/BytecodeFrame.java","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -199,4 +200,1 @@\n-\n-        if (pageIndex < 0 || pageIndex >= getNumberOfPages()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+        Objects.checkIndex(pageIndex, getNumberOfPages());\n@@ -228,0 +226,1 @@\n+        Objects.checkIndex(pageIndex, getNumberOfPages());\n@@ -229,3 +228,0 @@\n-        if (pageIndex < 0 || pageIndex >= getNumberOfPages()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ClippedImages.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Objects;\n@@ -117,2 +118,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -126,2 +126,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -135,2 +134,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -153,2 +151,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -168,2 +165,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n","filename":"test\/jdk\/javax\/imageio\/AppletResourceTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -90,2 +91,1 @@\n-            if (imageIndex >= 1 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 1);\n@@ -104,2 +104,1 @@\n-            if (imageIndex >= 1 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 1);\n","filename":"test\/jdk\/javax\/imageio\/ImageReaderReadAll.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Objects;\n@@ -118,2 +119,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -127,2 +127,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -136,2 +135,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -153,2 +151,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n@@ -172,2 +169,1 @@\n-            if (imageIndex >= 5 || imageIndex < 0)\n-                throw new IndexOutOfBoundsException();\n+            Objects.checkIndex(imageIndex, 5);\n","filename":"test\/jdk\/javax\/imageio\/metadata\/IIOMetadataFormat\/UserPluginMetadataFormatTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Objects;\n@@ -266,3 +267,1 @@\n-        if (index < 0 || index >= getLength()) {\n-            throw new ArrayIndexOutOfBoundsException(index);\n-        }\n+        Objects.checkIndex(index, getLength());\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaValueArray.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -141,3 +142,1 @@\n-            if ((index < 0) || (index >= count)) {\n-                throw new StringIndexOutOfBoundsException(index);\n-            }\n+            Objects.checkIndex(index, count);\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/CopyLoop.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}