{"files":[{"patch":"@@ -39,1 +39,1 @@\n-  attach pid | exec core  <font color=\"red\">attach SA to a process or core<\/font>\n+  attach pid | exec core | debugserver  <font color=\"red\">attach SA to a process, core, or remote debug server<\/font>\n","filename":"src\/jdk.hotspot.agent\/doc\/clhsdb.html","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,4 @@\n+        pid = -1;\n+        execPath = null;\n+        coreFilename = null;\n+        debugServerName = null;\n@@ -45,2 +49,2 @@\n-        \/\/ Otherwise, if pidText != null we are supposed to attach to it.\n-        \/\/ Finally, if execPath != null, it is the path of a jdk\/bin\/java\n+        \/\/ Otherwise, if pid != -1 we are supposed to attach to it.\n+        \/\/ If execPath != null, it is the path of a jdk\/bin\/java\n@@ -49,0 +53,2 @@\n+        \/\/ Finally, if debugServerName != null, we are supposed to\n+        \/\/ connect to remote debug server.\n@@ -60,2 +66,2 @@\n-        } else if (pidText != null) {\n-            attachDebugger(pidText);\n+        } else if (pid != -1) {\n+            attachDebugger(pid);\n@@ -64,0 +70,2 @@\n+        } else if (debugServerName != null) {\n+            connect(debugServerName);\n@@ -74,1 +82,1 @@\n-                public void attach(String pid) {\n+                public void attach(int pid) {\n@@ -80,0 +88,3 @@\n+                public void attach(String debugServerName) {\n+                    connect(debugServerName);\n+                }\n@@ -87,2 +98,4 @@\n-                    if (pidText != null) {\n-                        attach(pidText);\n+                    if (pid != -1) {\n+                        attach(pid);\n+                    } else if (debugServerName != null) {\n+                        connect(debugServerName);\n@@ -110,1 +123,0 @@\n-    private String pidText;\n@@ -114,0 +126,1 @@\n+    private String debugServerName;\n@@ -125,0 +138,5 @@\n+        pid = -1;\n+        execPath = null;\n+        coreFilename = null;\n+        debugServerName = null;\n+\n@@ -137,3 +155,1 @@\n-                int unused = Integer.parseInt(args[0]);\n-                \/\/ If we get here, we have a PID and not a core file name\n-                pidText = args[0];\n+                pid = Integer.parseInt(args[0]);\n@@ -166,9 +182,2 @@\n-    private void attachDebugger(String pidText) {\n-        try {\n-            this.pidText = pidText;\n-            pid = Integer.parseInt(pidText);\n-        }\n-        catch (NumberFormatException e) {\n-            System.err.print(\"Unable to parse process ID \\\"\" + pidText + \"\\\".\\nPlease enter a number.\");\n-        }\n-\n+    private void attachDebugger(int pid) {\n+        this.pid = pid;\n@@ -176,1 +185,1 @@\n-            System.err.println(\"Attaching to process \" + pid + \", please wait...\");\n+            System.out.println(\"Attaching to process \" + pid + \", please wait...\");\n@@ -217,1 +226,1 @@\n-    private void connect(final String remoteMachineName) {\n+    private void connect(final String debugServerName) {\n@@ -220,2 +229,3 @@\n-            System.err.println(\"Connecting to debug server, please wait...\");\n-            agent.attach(remoteMachineName);\n+            System.out.println(\"Connecting to debug server, please wait...\");\n+            agent.attach(debugServerName);\n+            this.debugServerName = debugServerName;\n@@ -226,1 +236,1 @@\n-            System.err.println(\"Unable to connect to machine \\\"\" + remoteMachineName + \"\\\":\\n\\n\" + errMsg);\n+            System.err.println(\"Unable to connect to debug server \\\"\" + debugServerName + \"\\\":\\n\\n\" + errMsg);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CLHSDB.java","additions":36,"deletions":26,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-        public abstract void attach(String pid);\n+        public abstract void attach(int pid);\n@@ -119,0 +119,1 @@\n+        public abstract void attach(String debugServerName);\n@@ -385,1 +386,1 @@\n-        new Command(\"attach\", \"attach pid | exec core\", true) {\n+        new Command(\"attach\", \"attach pid | exec core | remote_server\", true) {\n@@ -390,1 +391,8 @@\n-                    debugger.attach(t.nextToken());\n+                    String arg = t.nextToken();\n+                    try {\n+                        \/\/ Attempt to attach as a PID\n+                        debugger.attach(Integer.parseInt(arg));\n+                    } catch (NumberFormatException e) {\n+                        \/\/ Attempt to connect to remote debug server\n+                        debugger.attach(arg);\n+                    }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,0 @@\n-  private String pidText;\n@@ -85,0 +84,1 @@\n+  private String debugServerName;\n@@ -97,0 +97,4 @@\n+    pid = -1;\n+    execPath = null;\n+    coreFilename = null;\n+    debugServerName = null;\n@@ -101,0 +105,5 @@\n+    pid = -1;\n+    execPath = null;\n+    coreFilename = null;\n+    debugServerName = null;\n+\n@@ -112,3 +121,1 @@\n-        int unused = Integer.parseInt(args[0]);\n-        \/\/ If we get here, we have a PID and not a core file name\n-        pidText = args[0];\n+        pid = Integer.parseInt(args[0]);\n@@ -425,2 +432,2 @@\n-    \/\/ Otherwise, if pidText != null we are supposed to attach to it.\n-    \/\/ Finally, if execPath != null, it is the path of a jdk\/bin\/java\n+    \/\/ Otherwise, if pid != -1 we are supposed to attach to it.\n+    \/\/ If execPath != null, it is the path of a jdk\/bin\/java\n@@ -429,0 +436,2 @@\n+    \/\/ Finally, if debugServerName != null, we are supposed to\n+    \/\/ connect to remote debug server.\n@@ -432,2 +441,2 @@\n-    } else if (pidText != null) {\n-      attach(pidText);\n+    } else if (pid != -1) {\n+      attach(pid);\n@@ -436,0 +445,2 @@\n+    } else if (debugServerName != null) {\n+      connect(debugServerName);\n@@ -459,1 +470,1 @@\n-                attach(pidTextField.getText());\n+                attach(Integer.parseInt(pidTextField.getText()));\n@@ -1175,18 +1186,2 @@\n-  private void attach(String pidText) {\n-      try {\n-      this.pidText = pidText;\n-      pid = Integer.parseInt(pidText);\n-    }\n-    catch (NumberFormatException e) {\n-      SwingUtilities.invokeLater(new Runnable() {\n-          public void run() {\n-            setMenuItemsEnabled(attachMenuItems, true);\n-            JOptionPane.showInternalMessageDialog(desktop,\n-                                                  \"Unable to parse process ID \\\"\" + HSDB.this.pidText + \"\\\".\\nPlease enter a number.\",\n-                                                  \"Parse error\",\n-                                                  JOptionPane.WARNING_MESSAGE);\n-          }\n-        });\n-      return;\n-    }\n-\n+  private void attach(int pid) {\n+    this.pid = pid;\n@@ -1296,1 +1291,1 @@\n-  private void connect(final String remoteMachineName) {\n+  private void connect(final String debugServerName) {\n@@ -1316,1 +1311,1 @@\n-      agent.attach(remoteMachineName);\n+      agent.attach(debugServerName);\n@@ -1330,1 +1325,1 @@\n-                                                  \"Unable to connect to machine \\\"\" + remoteMachineName + \"\\\":\\n\\n\" + errMsg,\n+                                                  \"Unable to connect to machine \\\"\" + debugServerName + \"\\\":\\n\\n\" + errMsg,\n@@ -1502,1 +1497,1 @@\n-              public void attach(String pid) {\n+              public void attach(int pid) {\n@@ -1507,0 +1502,3 @@\n+              public void attach(String debugServerName) {\n+                  HSDB.this.connect(debugServerName);\n+              }\n@@ -1514,2 +1512,4 @@\n-                  if (pidText != null) {\n-                      attach(pidText);\n+                  if (pid != -1) {\n+                      attach(pid);\n+                  } else if (debugServerName != null) {\n+                      connect(debugServerName);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8262520\n+ * @summary Test clhsdb connect, detach, reattach commands\n+ * @requires vm.hasSA\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbAttachToDebugServer\n+ *\/\n+\n+public class ClhsdbAttachToDebugServer {\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        if (SATestUtils.needsPrivileges()) {\n+            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n+            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n+            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n+            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n+            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n+            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n+            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n+            \/\/ are not required.\n+            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n+        }\n+\n+        System.out.println(\"Starting ClhsdbAttachToDebugServer test\");\n+\n+        LingeredApp theApp = null;\n+        DebugdUtils debugd = null;\n+        try {\n+            theApp = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+            debugd = new DebugdUtils(null);\n+            debugd.attach(theApp.getPid());\n+\n+            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+            jhsdbLauncher.addToolArg(\"clhsdb\");\n+\n+            Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+            try (PrintStream console = new PrintStream(jhsdb.getOutputStream(), true)) {\n+                console.println(\"echo true\");\n+                console.println(\"verbose true\");\n+                console.println(\"attach localhost\");\n+                console.println(\"class java.lang.Object\");\n+                console.println(\"detach\");\n+                console.println(\"reattach\");\n+                console.println(\"class java.lang.String\");\n+                console.println(\"quit\");\n+            }\n+\n+            jhsdb.waitFor();\n+            System.out.println(out.getStdout());\n+            System.err.println(out.getStderr());\n+\n+            out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+            out.shouldMatch(\"^java\/lang\/Object @0x[0-9a-f]+$\"); \/\/ for \"class java.lang.Object\"\n+            out.shouldMatch(\"^java\/lang\/String @0x[0-9a-f]+$\"); \/\/ for \"class java.lang.String\"\n+            out.shouldHaveExitValue(0);\n+\n+            \/\/ This will detect most SA failures, including during the attach.\n+            out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+            \/\/ This will detect unexpected exceptions, like NPEs and asserts, that are caught\n+            \/\/ by sun.jvm.hotspot.CommandProcessor.\n+            out.shouldNotMatch(\"^Error: .*$\");\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd != null) {\n+                debugd.detach();\n+            }\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/ClhsdbAttachToDebugServer.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}