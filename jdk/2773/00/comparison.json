{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,3 @@\n+                public void connect(String remoteServer) {\n+                    CLHSDB.this.connect(remoteServer);\n+                }\n@@ -89,1 +92,1 @@\n-                    } else {\n+                    } else if (execPath != null) {\n@@ -91,0 +94,2 @@\n+                    } else if (remoteServer != null) {\n+                        connect(remoteServer);\n@@ -114,0 +119,1 @@\n+    private String remoteServer;\n@@ -220,1 +226,1 @@\n-            System.err.println(\"Connecting to debug server, please wait...\");\n+            System.out.println(\"Connecting to debug server, please wait...\");\n@@ -222,0 +228,1 @@\n+            remoteServer = remoteMachineName;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CLHSDB.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+        public abstract void connect(String remoteServer);\n@@ -401,0 +402,12 @@\n+        new Command(\"connect\", \"connect remote_server\", true) {\n+            public void doit(Tokens t) {\n+                int tokens = t.countTokens();\n+                if (tokens == 1) {\n+                    preAttach();\n+                    debugger.connect(t.nextToken());\n+                    postAttach();\n+                } else {\n+                    usage();\n+                }\n+            }\n+        },\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,1 @@\n+  private String remoteServer;\n@@ -1320,0 +1321,1 @@\n+      remoteServer = remoteMachineName;\n@@ -1507,0 +1509,3 @@\n+              public void connect(String remoteServer) {\n+                  HSDB.this.connect(remoteServer);\n+              }\n@@ -1516,1 +1521,1 @@\n-                  } else {\n+                  } else if (execPath != null) {\n@@ -1518,0 +1523,2 @@\n+                  } else if (remoteServer != null) {\n+                      connect(remoteServer);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8262520\n+ * @summary Test clhsdb connect, detach, reattach commands\n+ * @requires vm.hasSA\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbConnect\n+ *\/\n+\n+public class ClhsdbConnect {\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        if (SATestUtils.needsPrivileges()) {\n+            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n+            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n+            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n+            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n+            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n+            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n+            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n+            \/\/ are not required.\n+            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n+        }\n+\n+        System.out.println(\"Starting ClhsdbConnect test\");\n+\n+        LingeredApp theApp = null;\n+        DebugdUtils debugd = null;\n+        try {\n+            theApp = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+            debugd = new DebugdUtils(null);\n+            debugd.attach(theApp.getPid());\n+\n+            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+            jhsdbLauncher.addToolArg(\"clhsdb\");\n+\n+            Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+            try (PrintStream console = new PrintStream(jhsdb.getOutputStream(), true)) {\n+                console.println(\"echo true\");\n+                console.println(\"verbose true\");\n+                console.println(\"connect localhost\");\n+                console.println(\"universe\");\n+                console.println(\"detach\");\n+                console.println(\"reattach\");\n+                console.println(\"universe\");\n+                console.println(\"quit\");\n+            }\n+\n+            jhsdb.waitFor();\n+            System.out.println(out.getStdout());\n+            System.err.println(out.getStderr());\n+\n+            out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+            out.shouldHaveExitValue(0);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd != null) {\n+                debugd.detach();\n+            }\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/ClhsdbConnect.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}