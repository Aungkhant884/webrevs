{"files":[{"patch":"@@ -437,1 +437,1 @@\n-            StringUTF16.getChars(i, size, buf);\n+            DecimalDigits.getCharsUTF16(i, size, buf);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -467,1 +467,1 @@\n-            StringUTF16.getChars(i, size, buf);\n+            DecimalDigits.getCharsUTF16(i, size, buf);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1363,1 +1363,1 @@\n-        int pos = getChars(i, end, value);\n+        int pos = DecimalDigits.getCharsUTF16(i, end, value);\n@@ -1519,103 +1519,0 @@\n-    \/\/ Used by trusted callers.  Assumes all necessary bounds checks have\n-    \/\/ been done by the caller.\n-\n-    \/**\n-     * This is a variant of {@link StringLatin1#getChars(int, int, byte[])}, but for\n-     * UTF-16 coder.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, UTF16-coded.\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(int i, int index, byte[] buf) {\n-        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n-        int q, r;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        while (i <= -100) {\n-            q = i \/ 100;\n-            r = (q * 100) - i;\n-            i = q;\n-            charPos -= 2;\n-            putPair(buf, charPos, r);\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        if (i < -9) {\n-            charPos -= 2;\n-            putPair(buf, charPos, -i);\n-        } else {\n-            putChar(buf, --charPos, '0' - i);\n-        }\n-\n-        if (negative) {\n-            putChar(buf, --charPos, '-');\n-        }\n-        return charPos;\n-    }\n-\n-    \/**\n-     * This is a variant of {@link StringLatin1#getChars(long, int, byte[])}, but for\n-     * UTF-16 coder.\n-     *\n-     * @param i     value to convert\n-     * @param index next index, after the least significant digit\n-     * @param buf   target buffer, UTF16-coded.\n-     * @return index of the most significant digit or minus sign, if present\n-     *\/\n-    static int getChars(long i, int index, byte[] buf) {\n-        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n-        long q;\n-        int charPos = index;\n-\n-        boolean negative = (i < 0);\n-        if (!negative) {\n-            i = -i;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-        while (i <= Integer.MIN_VALUE) {\n-            q = i \/ 100;\n-            charPos -= 2;\n-            putPair(buf, charPos, (int)((q * 100) - i));\n-            i = q;\n-        }\n-\n-        \/\/ Get 2 digits\/iteration using ints\n-        int q2;\n-        int i2 = (int)i;\n-        while (i2 <= -100) {\n-            q2 = i2 \/ 100;\n-            charPos -= 2;\n-            putPair(buf, charPos, (q2 * 100) - i2);\n-            i2 = q2;\n-        }\n-\n-        \/\/ We know there are at most two digits left at this point.\n-        if (i2 < -9) {\n-            charPos -= 2;\n-            putPair(buf, charPos, -i2);\n-        } else {\n-            putChar(buf, --charPos, '0' - i2);\n-        }\n-\n-        if (negative) {\n-            putChar(buf, --charPos, '-');\n-        }\n-        return charPos;\n-    }\n-\n-    private static void putPair(byte[] buf, int charPos, int v) {\n-        int packed = (int) DecimalDigits.digitPair(v);\n-        putChar(buf, charPos, packed & 0xFF);\n-        putChar(buf, charPos + 1, packed >> 8);\n-    }\n-    \/\/ End of trusted methods.\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":104,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-        private final byte[] digits;\n@@ -106,2 +105,0 @@\n-            this.digits = new byte[length];\n-            DecimalDigits.getCharsLatin1(value, length, this.digits);\n@@ -141,1 +138,3 @@\n-        private long prependUTF16(long lengthCoder, byte[] buffer) throws Throwable {\n+        private long prependLatin1(long lengthCoder, byte[] buffer) throws Throwable {\n+            int lengthCoderLatin1 = (int) lengthCoder;\n+\n@@ -143,1 +142,1 @@\n-                putCharUTF16(buffer, (int)--lengthCoder, (int)')');\n+                buffer[--lengthCoderLatin1] = ')';\n@@ -149,0 +148,3 @@\n+                byte[] digits = new byte[length];\n+                DecimalDigits.getCharsLatin1(value, length, digits);\n+\n@@ -151,1 +153,1 @@\n-                        putCharUTF16(buffer, (int) --lengthCoder, (int) groupingSeparator);\n+                        buffer[--lengthCoderLatin1] = (byte) groupingSeparator;\n@@ -155,1 +157,1 @@\n-                    putCharUTF16(buffer, (int) --lengthCoder, digits[digits.length - i] + digitOffset);\n+                    buffer[--lengthCoderLatin1] = (byte) (digits[digits.length - i] + digitOffset);\n@@ -158,3 +160,2 @@\n-                for (int i = 1; i <= length; i++) {\n-                    putCharUTF16(buffer, (int) --lengthCoder, digits[digits.length - i] + digitOffset);\n-                }\n+                DecimalDigits.getCharsLatin1(value, (int)lengthCoder, buffer);\n+                lengthCoderLatin1 -= length;\n@@ -164,1 +165,1 @@\n-                putCharUTF16(buffer, (int) --lengthCoder, (int) '0');\n+                buffer[--lengthCoderLatin1] = '0';\n@@ -168,1 +169,1 @@\n-                putCharUTF16(buffer, (int) --lengthCoder, (int) '(');\n+                buffer[--lengthCoderLatin1] = '(';\n@@ -172,1 +173,1 @@\n-                putCharUTF16(buffer, (int) --lengthCoder, (int) prefixSign);\n+                buffer[--lengthCoderLatin1] = prefixSign;\n@@ -175,1 +176,1 @@\n-            return lengthCoder;\n+            return lengthCoderLatin1;\n@@ -178,3 +179,1 @@\n-        private long prependLatin1(long lengthCoder, byte[] buffer) throws Throwable {\n-            int lengthCoderLatin1 = (int) lengthCoder;\n-\n+        private long prependUTF16(long lengthCoder, byte[] buffer) throws Throwable {\n@@ -182,1 +181,1 @@\n-                buffer[--lengthCoderLatin1] = ')';\n+                putCharUTF16(buffer, (int)--lengthCoder, (int)')');\n@@ -188,0 +187,3 @@\n+                byte[] digits = new byte[length];\n+                DecimalDigits.getCharsLatin1(value, length, digits);\n+\n@@ -190,1 +192,1 @@\n-                        buffer[--lengthCoderLatin1] = (byte) groupingSeparator;\n+                        putCharUTF16(buffer, (int) --lengthCoder, (int) groupingSeparator);\n@@ -194,1 +196,1 @@\n-                    buffer[--lengthCoderLatin1] = (byte) (digits[digits.length - i] + digitOffset);\n+                    putCharUTF16(buffer, (int) --lengthCoder, digits[digits.length - i] + digitOffset);\n@@ -197,3 +199,2 @@\n-                for (int i = 1; i <= length; i++) {\n-                    buffer[--lengthCoderLatin1] = (byte) (digits[digits.length - i] + digitOffset);\n-                }\n+                DecimalDigits.getCharsUTF16(value, (int)lengthCoder, buffer);\n+                lengthCoder -= length;\n@@ -203,1 +204,1 @@\n-                buffer[--lengthCoderLatin1] = '0';\n+                putCharUTF16(buffer, (int) --lengthCoder, (int) '0');\n@@ -207,1 +208,1 @@\n-                buffer[--lengthCoderLatin1] = '(';\n+                putCharUTF16(buffer, (int) --lengthCoder, (int) '(');\n@@ -211,1 +212,1 @@\n-                buffer[--lengthCoderLatin1] = prefixSign;\n+                putCharUTF16(buffer, (int) --lengthCoder, (int) prefixSign);\n@@ -214,1 +215,1 @@\n-            return lengthCoderLatin1;\n+            return lengthCoder;\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -39,0 +41,1 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -143,0 +146,3 @@\n+    \/\/ Used by trusted callers.  Assumes all necessary bounds checks have\n+    \/\/ been done by the caller.\n+\n@@ -252,0 +258,100 @@\n+\n+    \/**\n+     * This is a variant of {@link StringLatin1#getChars(int, int, byte[])}, but for\n+     * UTF-16 coder.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, UTF16-coded.\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    public static int getCharsUTF16(int i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        int q, r;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        while (i <= -100) {\n+            q = i \/ 100;\n+            r = (q * 100) - i;\n+            i = q;\n+            charPos -= 2;\n+            JLA.putCharUTF16(buf, charPos, r);\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i < -9) {\n+            charPos -= 2;\n+            putPair(buf, charPos, -i);\n+        } else {\n+            JLA.putCharUTF16(buf, --charPos, '0' - i);\n+        }\n+\n+        if (negative) {\n+            JLA.putCharUTF16(buf, --charPos, '-');\n+        }\n+        return charPos;\n+    }\n+\n+    \/**\n+     * This is a variant of {@link StringLatin1#getChars(long, int, byte[])}, but for\n+     * UTF-16 coder.\n+     *\n+     * @param i     value to convert\n+     * @param index next index, after the least significant digit\n+     * @param buf   target buffer, UTF16-coded.\n+     * @return index of the most significant digit or minus sign, if present\n+     *\/\n+    public static int getCharsUTF16(long i, int index, byte[] buf) {\n+        \/\/ Used by trusted callers.  Assumes all necessary bounds checks have been done by the caller.\n+        long q;\n+        int charPos = index;\n+\n+        boolean negative = (i < 0);\n+        if (!negative) {\n+            i = -i;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n+        while (i <= Integer.MIN_VALUE) {\n+            q = i \/ 100;\n+            charPos -= 2;\n+            putPair(buf, charPos, (int)((q * 100) - i));\n+            i = q;\n+        }\n+\n+        \/\/ Get 2 digits\/iteration using ints\n+        int q2;\n+        int i2 = (int)i;\n+        while (i2 <= -100) {\n+            q2 = i2 \/ 100;\n+            charPos -= 2;\n+            putPair(buf, charPos, (q2 * 100) - i2);\n+            i2 = q2;\n+        }\n+\n+        \/\/ We know there are at most two digits left at this point.\n+        if (i2 < -9) {\n+            charPos -= 2;\n+            putPair(buf, charPos, -i2);\n+        } else {\n+            JLA.putCharUTF16(buf, --charPos, '0' - i2);\n+        }\n+\n+        if (negative) {\n+            JLA.putCharUTF16(buf, --charPos, '-');\n+        }\n+        return charPos;\n+    }\n+\n+    private static void putPair(byte[] buf, int charPos, int v) {\n+        int packed = (int) DecimalDigits.digitPair(v);\n+        JLA.putCharUTF16(buf, charPos, packed & 0xFF);\n+        JLA.putCharUTF16(buf, charPos + 1, packed >> 8);\n+    }\n+    \/\/ End of trusted methods.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"modified"}]}