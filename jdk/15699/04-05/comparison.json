{"files":[{"patch":"@@ -229,1 +229,1 @@\n-            this.length = HexDigits.stringSize(value);\n+            this.length = HexDigits.INSTANCE.size(value);\n@@ -248,1 +248,1 @@\n-            HexDigits.getCharsLatin1(value, (int)lengthCoder, buffer);\n+            HexDigits.INSTANCE.digits(value, buffer, (int)lengthCoder, putCharMH);\n@@ -277,1 +277,1 @@\n-            this.length = OctalDigits.stringSize(value);\n+            this.length = HexDigits.INSTANCE.size(value);\n@@ -296,1 +296,1 @@\n-            OctalDigits.getCharsLatin1(value, (int)lengthCoder, buffer);\n+            OctalDigits.INSTANCE.digits(value, buffer, (int)lengthCoder, putCharMH);\n","filename":"src\/java.base\/share\/classes\/java\/util\/FormatItem.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.util;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+\/**\n+ * Digits provides a fast methodology for converting integers and longs to\n+ * ASCII strings.\n+ *\n+ * @since 21\n+ *\/\n+public sealed interface Digits permits HexDigits, OctalDigits {\n+    \/**\n+     * Insert digits for long value in buffer from high index to low index.\n+     *\n+     * @param value      value to convert\n+     * @param buffer     byte buffer to copy into\n+     * @param index      insert point + 1\n+     * @param putCharMH  method to put character\n+     *\n+     * @return the last index used\n+     *\n+     * @throws Throwable if putCharMH fails (unusual).\n+     *\/\n+    int digits(long value, byte[] buffer, int index,\n+               MethodHandle putCharMH) throws Throwable;\n+\n+    \/**\n+     * Calculate the number of digits required to represent the long.\n+     *\n+     * @param value value to convert\n+     *\n+     * @return number of digits\n+     *\/\n+    int size(long value);\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Digits.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -33,2 +33,1 @@\n- * Digits provides a fast methodology for converting integers and longs to\n- * hexadecimal digits ASCII strings.\n+ * Digits class for hexadecimal digits.\n@@ -38,1 +37,1 @@\n-public final class HexDigits {\n+public final class HexDigits implements Digits {\n@@ -69,0 +68,5 @@\n+    \/**\n+     * Singleton instance of HexDigits.\n+     *\/\n+    public static final Digits INSTANCE = new HexDigits();\n+\n@@ -111,13 +115,3 @@\n-    \/**\n-     * Insert digits for long value in buffer from high index to low index.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     * @param putCharMH  method to put character\n-     *\n-     * @return the last index used\n-     *\n-     * @throws Throwable if putCharMH fails (unusual).\n-     *\/\n-    public static int getCharsLatin1(long value, int index, byte[] buffer) {\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n@@ -127,2 +121,2 @@\n-            buffer[--index] = (byte) (digits >> 8);\n-            buffer[--index] = (byte) (digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n@@ -132,1 +126,1 @@\n-        buffer[--index] = (byte) (digits >> 8);\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n@@ -135,1 +129,1 @@\n-            buffer[--index] = (byte) (digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n@@ -141,8 +135,2 @@\n-    \/**\n-     * Calculate the number of digits required to represent the long.\n-     *\n-     * @param value value to convert\n-     *\n-     * @return number of digits\n-     *\/\n-    public static int stringSize(long value) {\n+    @Override\n+    public int size(long value) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/HexDigits.java","additions":16,"deletions":28,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -37,7 +37,1 @@\n-\/**\n- * Digits provides a fast methodology for converting integers and longs to\n- * octal digits ASCII strings.\n- *\n- * @since 21\n- *\/\n-public final class OctalDigits {\n+public final class OctalDigits implements Digits {\n@@ -47,0 +41,5 @@\n+    \/**\n+     * Singleton instance of OctalDigits.\n+     *\/\n+    public static final Digits INSTANCE = new OctalDigits();\n+\n@@ -68,13 +67,3 @@\n-    \/**\n-     * Insert digits for long value in buffer from high index to low index.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     * @param putCharMH  method to put character\n-     *\n-     * @return the last index used\n-     *\n-     * @throws Throwable if putCharMH fails (unusual).\n-     *\/\n-    public static int getCharsLatin1(long value, int index, byte[] buffer){\n+    @Override\n+    public int digits(long value, byte[] buffer, int index,\n+                      MethodHandle putCharMH) throws Throwable {\n@@ -84,2 +73,2 @@\n-            buffer[--index] = (byte) (digits >> 8);\n-            buffer[--index] = (byte) (digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits >> 8);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n@@ -89,1 +78,1 @@\n-        buffer[--index] = (byte) (digits >> 8);\n+        putCharMH.invokeExact(buffer, --index, digits >> 8);\n@@ -92,1 +81,1 @@\n-            buffer[--index] = (byte) (digits & 0xFF);\n+            putCharMH.invokeExact(buffer, --index, digits & 0xFF);\n@@ -98,8 +87,2 @@\n-    \/**\n-     * Calculate the number of digits required to represent the long.\n-     *\n-     * @param value value to convert\n-     *\n-     * @return number of digits\n-     *\/\n-    public static int stringSize(long value) {\n+    @Override\n+    public int size(long value) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":15,"deletions":32,"binary":false,"changes":47,"status":"modified"}]}