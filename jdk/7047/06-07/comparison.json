{"files":[{"patch":"@@ -156,1 +156,0 @@\n-  size_t* _marked_words_in_regions;\n@@ -158,0 +157,2 @@\n+  uint _region_idx;\n+  size_t _marked_words;\n@@ -169,1 +170,11 @@\n-    _marked_words_in_regions[chunk->heap_region()->hrm_index()] += rspc.marked_words();\n+    uint current_region_idx = chunk->heap_region()->hrm_index();\n+    if (_region_idx == _g1h->max_regions()) {\n+      _region_idx = current_region_idx;\n+      _marked_words = rspc.marked_words();\n+    } else if (_region_idx == current_region_idx) {\n+      _marked_words += rspc.marked_words();\n+    } else {\n+      _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+      _region_idx = current_region_idx;\n+      _marked_words = rspc.marked_words();\n+    }\n@@ -181,2 +192,1 @@\n-  RemoveSelfForwardPtrHRChunkClosure(size_t* marked_words_in_regions,\n-                                     uint worker_id) :\n+  RemoveSelfForwardPtrHRChunkClosure(uint worker_id) :\n@@ -184,2 +194,3 @@\n-    _marked_words_in_regions(marked_words_in_regions),\n-    _worker_id(worker_id) {\n+    _worker_id(worker_id),\n+    _region_idx(),\n+    _marked_words(0) {\n@@ -192,0 +203,6 @@\n+\n+  void sync_last_region_data() {\n+    if (_region_idx != _g1h->max_regions()) {\n+      _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+    }\n+  }\n@@ -202,3 +219,1 @@\n-  size_t* marked_words_in_regions = NEW_C_HEAP_ARRAY(size_t, max_regions, mtGC);\n-  memset(marked_words_in_regions, 0, sizeof(size_t) * max_regions);\n-  RemoveSelfForwardPtrHRChunkClosure chunk_closure(marked_words_in_regions, worker_id);\n+  RemoveSelfForwardPtrHRChunkClosure chunk_closure(worker_id);\n@@ -209,12 +224,1 @@\n-  Ticks start = Ticks::now();\n-  G1GCPhaseTimes* phase_times = G1CollectedHeap::heap()->phase_times();\n-  \/\/ Sync marked words of regions to HeapRegion.\n-  for (uint idx = 0; idx < _evac_failure_regions->max_regions(); idx++) {\n-    if (marked_words_in_regions[idx] > 0) {\n-      HeapRegion* region = _g1h->region_at(idx);\n-      region->note_self_forwarding_removal_end_par(marked_words_in_regions[idx] * BytesPerWord);\n-    }\n-  }\n-  phase_times->record_or_add_time_secs(G1GCPhaseTimes::SyncMarkedWordInRetainedRegions, worker_id, (Ticks::now() - start).seconds());\n-\n-  FREE_C_HEAP_ARRAY(size_t, marked_words_in_regions);\n+  chunk_closure.sync_last_region_data();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-  _gc_par_phases[SyncMarkedWordInRetainedRegions] = new WorkerDataArray<double>(\"SyncMarkedWordInRetainedRegions\", \"Sync Marked Words In Retained Regions (ms):\", max_gc_threads);\n@@ -499,1 +498,0 @@\n-    debug_phase(_gc_par_phases[SyncMarkedWordInRetainedRegions], 1);\n@@ -507,1 +505,3 @@\n-    debug_phase(_gc_par_phases[VerifyAfterSelfForwardingPtrRemoval], 1);\n+    if (G1VerifyBitmaps) {\n+      debug_phase(_gc_par_phases[VerifyAfterSelfForwardingPtrRemoval], 1);\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-    SyncMarkedWordInRetainedRegions,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  _chunk_num(G1YoungGCEvacFailureInjector::evacuation_failure_heap_region_chunk_num()),\n+  _chunk_num(G1EvacuationFailureHeapRegionChunkNum),\n@@ -74,1 +74,1 @@\n-  G1GCPhaseTimes* phase_times = G1CollectedHeap::heap()->phase_times();\n+  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n@@ -83,1 +83,1 @@\n-      Ticks start2 = Ticks::now();\n+      Ticks chunk_prepare_start = Ticks::now();\n@@ -85,1 +85,1 @@\n-      phase_times->record_or_add_time_secs(G1GCPhaseTimes::PrepareChunks, _worker_id, (Ticks::now() - start2).seconds());\n+      p->record_or_add_time_secs(G1GCPhaseTimes::PrepareChunks, _worker_id, (Ticks::now() - chunk_prepare_start).seconds());\n@@ -88,1 +88,1 @@\n-        phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardEmptyChunksNum);\n+        p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardEmptyChunksNum);\n@@ -91,1 +91,1 @@\n-      phase_times->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardChunksNum);\n+      p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardChunksNum);\n@@ -94,1 +94,1 @@\n-      phase_times->record_or_add_time_secs(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, (Ticks::now() - start).seconds());\n+      p->record_or_add_time_secs(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, (Ticks::now() - start).seconds());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,3 +58,1 @@\n-  HeapRegion* heap_region() const {\n-    return _region;\n-  }\n+  HeapRegion* heap_region() const { return _region;}\n@@ -62,3 +60,1 @@\n-  HeapWord* first_obj_in_chunk() const {\n-    return _first_obj_in_chunk;\n-  }\n+  HeapWord* first_obj_in_chunk() const { return _first_obj_in_chunk; }\n@@ -66,3 +62,1 @@\n-  HeapWord* next_obj_in_region() const {\n-    return _next_obj_in_region;\n-  }\n+  HeapWord* next_obj_in_region() const { return _next_obj_in_region; }\n@@ -70,3 +64,1 @@\n-  bool empty() const {\n-    return _first_obj_in_chunk >= _limit;\n-  }\n+  bool empty() const { return _first_obj_in_chunk >= _limit; }\n@@ -74,3 +66,1 @@\n-  bool include_first_obj_in_region() const {\n-    return _include_first_obj_in_region;\n-  }\n+  bool include_first_obj_in_region() const { return _include_first_obj_in_region; }\n@@ -78,3 +68,1 @@\n-  bool include_last_obj_in_region() const {\n-    return _include_last_obj_in_region;\n-  }\n+  bool include_last_obj_in_region() const { return _include_last_obj_in_region; }\n@@ -100,6 +88,2 @@\n-  uint chunk_size() {\n-    return _chunk_size;\n-  }\n-  uint chunk_num() {\n-    return _chunk_num;\n-  }\n+  uint chunk_size() { return _chunk_size; }\n+  uint chunk_num() { return _chunk_num; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.hpp","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-\n-  \/\/ assert(next_addr == _limit, \"Should stop the scan at the limit.\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,8 +110,0 @@\n-uint G1YoungGCEvacFailureInjector::evacuation_failure_worker_cost() {\n-  return G1EvacuationFailureALotWorkerCost;\n-}\n-\n-uint G1YoungGCEvacFailureInjector::evacuation_failure_heap_region_chunk_num() {\n-  return G1EvacuationFailureHeapRegionChunkNum;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,4 +83,0 @@\n-\n-  static uint evacuation_failure_worker_cost() EVAC_FAILURE_INJECTOR_RETURN_( return 2; );\n-\n-  static uint evacuation_failure_heap_region_chunk_num() EVAC_FAILURE_INJECTOR_RETURN_( return 256; );\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCEvacFailureInjector.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    return _evac_failure_regions->num_regions_failed_evacuation() * G1YoungGCEvacFailureInjector::evacuation_failure_worker_cost();\n+    return _evac_failure_regions->num_regions_failed_evacuation() * G1RemoveSelfForwardPtrsWorkerCost;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+\/\/ - Verify Retained Regions\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -82,9 +82,1 @@\n-          range(1, 100)                                                     \\\n-  product(uint, G1EvacuationFailureALotWorkerCost, 2,                       \\\n-          \"The factor for per region work cost to remove self forwardee \"   \\\n-          \"for evecuation failure regions.\")                                \\\n-          range(1, 16)                                                      \\\n-  product(uint, G1EvacuationFailureHeapRegionChunkNum, 256,                 \\\n-          \"Chunks num per G1 region when process evacuation failure \"       \\\n-          \"regions in parallel.\")                                           \\\n-          range(1, 1024)\n+          range(1, 100)\n@@ -390,0 +382,10 @@\n+  product(uint, G1RemoveSelfForwardPtrsWorkerCost, 2,                       \\\n+          \"The factor for per region work cost to remove self forwardee \"   \\\n+          \"for evecuation failure regions.\")                                \\\n+          range(1, 16)                                                      \\\n+                                                                            \\\n+  product(uint, G1EvacuationFailureHeapRegionChunkNum, 256,                 \\\n+          \"Number of chunks per G1 region when processing evacuation \"      \\\n+          \"failed regions in parallel. \")                                   \\\n+          range(1, 1024)                                                    \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}