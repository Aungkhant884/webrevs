{"files":[{"patch":"@@ -157,0 +157,1 @@\n+    const uint _uninitialized_idx;\n@@ -163,1 +164,2 @@\n-      _region_idx(_g1h->max_regions()),\n+      _uninitialized_idx(_g1h->max_regions()),\n+      _region_idx(_uninitialized_idx),\n@@ -166,0 +168,4 @@\n+    void note_self_forwarding_removal_end_par() {\n+      _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+    }\n+\n@@ -167,1 +173,1 @@\n-      if (_region_idx == _g1h->max_regions()) {\n+      if (_region_idx == _uninitialized_idx) {\n@@ -173,1 +179,1 @@\n-        _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+        note_self_forwarding_removal_end_par();\n@@ -180,2 +186,2 @@\n-      if (_region_idx != _g1h->max_regions()) {\n-        _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+      if (_region_idx != _uninitialized_idx) {\n+        note_self_forwarding_removal_end_par();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,4 +38,1 @@\n-  _evac_failure_regions_cur_length(0),\n-  _max_regions(0),\n-  _heap(G1CollectedHeap::heap()),\n-  _phase_times(_heap->phase_times()) {\n+  _evac_failure_regions_cur_length(0) {\n@@ -51,3 +48,2 @@\n-  _max_regions = max_regions;\n-  _regions_failed_evacuation.resize(_max_regions);\n-  _evac_failure_regions = NEW_C_HEAP_ARRAY(uint, _max_regions, mtGC);\n+  _regions_failed_evacuation.resize(max_regions);\n+  _evac_failure_regions = NEW_C_HEAP_ARRAY(uint, max_regions, mtGC);\n@@ -65,1 +61,0 @@\n-  _max_regions = 0; \/\/ To have any record() attempt fail in the future.\n@@ -69,1 +64,0 @@\n-  assert(region_idx < _max_regions, \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,4 +48,0 @@\n-  \/\/ Maximum of regions number.\n-  uint _max_regions;\n-  G1CollectedHeap* _heap;\n-  G1GCPhaseTimes* _phase_times;\n@@ -74,4 +70,0 @@\n-  uint max_regions() const {\n-    return _max_regions;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-  assert(region_idx < _max_regions, \"must be\");\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-  _include_last_obj_in_region = marked_obj_in_this_chunk\n-                                && _bitmap->get_next_marked_addr(_limit, top) == top;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-  bool _include_last_obj_in_region;\n@@ -68,2 +67,0 @@\n-\n-  bool include_last_obj_in_region() const { return _include_last_obj_in_region; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}