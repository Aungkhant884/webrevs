{"files":[{"patch":"@@ -48,0 +48,1 @@\n+  size_t _marked_objects;\n@@ -62,0 +63,1 @@\n+    _marked_objects(0),\n@@ -68,1 +70,2 @@\n-  size_t marked_bytes() { return _marked_words * HeapWordSize; }\n+  size_t marked_words() const { return _marked_words; }\n+  size_t marked_objects() const { return _marked_objects; }\n@@ -103,0 +106,1 @@\n+    _marked_objects++;\n@@ -158,0 +162,1 @@\n+  size_t* _marked_words_in_regions;\n@@ -170,0 +175,1 @@\n+    _marked_words_in_regions[chunk->heap_region()->hrm_index()] += rspc.marked_words();\n@@ -174,0 +180,4 @@\n+\n+    G1GCPhaseTimes* p = _g1h->phase_times();\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, rspc.marked_words(), G1GCPhaseTimes::RemoveSelfForwardObjectsBytes);\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, rspc.marked_objects(), G1GCPhaseTimes::RemoveSelfForwardObjectsNum);\n@@ -177,1 +187,2 @@\n-  RemoveSelfForwardPtrHRChunkClosure(uint worker_id) :\n+  RemoveSelfForwardPtrHRChunkClosure(size_t* marked_words_in_regions,\n+                                     uint worker_id) :\n@@ -179,0 +190,1 @@\n+    _marked_words_in_regions(marked_words_in_regions),\n@@ -221,5 +233,3 @@\n-                                                   _worker_id,\n-                                                   1,\n-                                                   G1GCPhaseTimes::RestoreRetainedRegionsNum);\n-\n-    size_t live_bytes = _evac_failure_regions->live_bytes_in_region(hr->hrm_index());\n+                                                 _worker_id,\n+                                                 1,\n+                                                 G1GCPhaseTimes::RestoreRetainedRegionsNum);\n@@ -230,1 +240,1 @@\n-    hr->note_self_forwarding_removal_end(live_bytes);\n+    hr->note_self_forwarding_removal_start_2();\n@@ -245,1 +255,6 @@\n-  RemoveSelfForwardPtrHRChunkClosure chunk_closure(worker_id);\n+\n+  \/\/ TODO: maybe only allocate and iterate through evacuation failed regions\n+  size_t marked_words_in_regions[_evac_failure_regions->max_regions()];\n+  memset(marked_words_in_regions, 0, sizeof marked_words_in_regions);\n+  RemoveSelfForwardPtrHRChunkClosure chunk_closure(marked_words_in_regions, worker_id);\n+\n@@ -248,0 +263,8 @@\n+\n+  \/\/ Sync marked words of regions to HeapRegion.\n+  for (uint idx = 0; idx < _evac_failure_regions->max_regions(); idx++) {\n+    if (marked_words_in_regions[idx] > 0) {\n+      HeapRegion* region = _g1h->region_at(idx);\n+      region->note_self_forwarding_removal_end_par(marked_words_in_regions[idx] * BytesPerWord);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":32,"deletions":9,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-  _live_stats = NEW_C_HEAP_ARRAY(G1RegionMarkStats, G1CollectedHeap::heap()->max_regions(), mtGC);\n-  for (uint j = 0; j < G1CollectedHeap::heap()->max_regions(); j++) {\n-    _live_stats[j].clear();\n-  }\n@@ -49,2 +45,0 @@\n-  FREE_C_HEAP_ARRAY(uint, _live_stats);\n-  _live_stats = nullptr;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-  \/\/ Live bytes in evacuation failed regions\n-  G1RegionMarkStats* _live_stats;\n-\n@@ -72,2 +69,2 @@\n-  uint num_regions_failed_evacuation() const {\n-    return Atomic::load(&_evac_failure_regions_cur_length);\n+  uint max_regions() {\n+    return _max_regions;\n@@ -76,6 +73,2 @@\n-  size_t live_bytes_in_region(uint region_idx) const {\n-    return _live_stats[region_idx]._live_words * BytesPerWord;\n-  }\n-\n-  G1RegionMarkStats* live_stats() const {\n-    return _live_stats;\n+  uint num_regions_failed_evacuation() const {\n+    return Atomic::load(&_evac_failure_regions_cur_length);\n@@ -91,1 +84,1 @@\n-  inline bool record(uint region_idx, size_t word_sz, G1RegionMarkStatsCache* _mark_stats_cache);\n+  inline bool record(uint region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":5,"deletions":12,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-bool G1EvacFailureRegions::record(uint region_idx, size_t word_sz, G1RegionMarkStatsCache* mark_stats_cache) {\n+bool G1EvacFailureRegions::record(uint region_idx) {\n@@ -34,1 +34,0 @@\n-  mark_stats_cache->add_live_words(region_idx, word_sz);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -106,0 +106,4 @@\n+  _gc_par_phases[PrepareRetainedRegions] = new WorkerDataArray<double>(\"PrepareRetainedRegions\", \"Prepared Retained Regions (ms):\", max_gc_threads);\n+  _gc_par_phases[WaitReadyRetainedRegions] = new WorkerDataArray<double>(\"WaitReadyRetainedRegions\", \"Wait For Ready In Retained Regions (ms):\", max_gc_threads);\n+  _gc_par_phases[RemoveSelfForwardsInChunks] = new WorkerDataArray<double>(\"RemoveSelfForwardsInChunks\", \"Remove Self Forwards In Chunks (ms):\", max_gc_threads);\n+  _gc_par_phases[PrepareChunks] = new WorkerDataArray<double>(\"PrepareChunks\", \"Prepare Chunks (ms):\", max_gc_threads);\n@@ -137,0 +141,5 @@\n+  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Chunks:\", RemoveSelfForwardChunksNum);\n+  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Empty Forward Chunks:\", RemoveSelfForwardEmptyChunksNum);\n+  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Objects:\", RemoveSelfForwardObjectsNum);\n+  _gc_par_phases[RemoveSelfForwardsInChunks]->create_thread_work_items(\"Forward Bytes:\", RemoveSelfForwardObjectsBytes);\n+\n@@ -486,0 +495,4 @@\n+    debug_phase(_gc_par_phases[PrepareRetainedRegions], 2);\n+    debug_phase(_gc_par_phases[WaitReadyRetainedRegions], 2);\n+    debug_phase(_gc_par_phases[PrepareChunks], 2);\n+    debug_phase(_gc_par_phases[RemoveSelfForwardsInChunks], 2);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -81,0 +81,4 @@\n+    PrepareRetainedRegions,\n+    WaitReadyRetainedRegions,\n+    RemoveSelfForwardsInChunks,\n+    PrepareChunks,\n@@ -151,0 +155,7 @@\n+  enum RemoveSelfForwardsInChunksWorkItems {\n+    RemoveSelfForwardChunksNum,\n+    RemoveSelfForwardEmptyChunksNum,\n+    RemoveSelfForwardObjectsNum,\n+    RemoveSelfForwardObjectsBytes,\n+  };\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -66,1 +66,4 @@\n-void G1HeapRegionChunksClaimer::prepare_region(HeapRegionClosure* prepare_region_closure) {\n+void G1HeapRegionChunksClaimer::prepare_region(HeapRegionClosure* prepare_region_closure, uint worker_id) {\n+  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+  G1GCPhaseTimes::GCParPhases phase;\n+  Ticks start = Ticks::now();\n@@ -68,0 +71,1 @@\n+    phase = G1GCPhaseTimes::PrepareRetainedRegions;\n@@ -70,1 +74,3 @@\n-    return;\n+  } else {\n+    phase = G1GCPhaseTimes::WaitReadyRetainedRegions;\n+    while (!region_ready());\n@@ -72,1 +78,1 @@\n-  while (!region_ready());\n+  p->record_or_add_time_secs(phase, worker_id, (Ticks::now() - start).seconds());\n@@ -87,0 +93,1 @@\n+  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n@@ -88,1 +95,1 @@\n-  claimer->prepare_region(_prepare_region_closure);\n+  claimer->prepare_region(_prepare_region_closure, _worker_id);\n@@ -93,0 +100,1 @@\n+\n@@ -95,0 +103,1 @@\n+      Ticks start2 = Ticks::now();\n@@ -96,0 +105,2 @@\n+      p->record_or_add_time_secs(G1GCPhaseTimes::PrepareChunks, _worker_id, (Ticks::now() - start2).seconds());\n+\n@@ -97,0 +108,1 @@\n+        p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardEmptyChunksNum);\n@@ -99,0 +111,2 @@\n+      p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, 1, G1GCPhaseTimes::RemoveSelfForwardChunksNum);\n+      Ticks start = Ticks::now();\n@@ -100,0 +114,1 @@\n+      p->record_or_add_time_secs(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, (Ticks::now() - start).seconds());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  void prepare_region(HeapRegionClosure* prepare_region_closure);\n+  void prepare_region(HeapRegionClosure* prepare_region_closure, uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,2 +63,1 @@\n-                                           G1EvacFailureRegions* evac_failure_regions,\n-                                           G1RegionMarkStats* evac_failure_mark_stats)\n+                                           G1EvacFailureRegions* evac_failure_regions)\n@@ -92,2 +91,1 @@\n-    _evac_failure_regions(evac_failure_regions),\n-    _evac_failure_mark_stats_cache(evac_failure_mark_stats, G1RegionMarkStatsCache::RegionMarkStatsCacheSize)\n+    _evac_failure_regions(evac_failure_regions)\n@@ -116,1 +114,0 @@\n-  flush_evac_failure_mark_stats_cache();\n@@ -572,2 +569,1 @@\n-                               _evac_failure_regions,\n-                               _evac_failure_live_stats);\n+                               _evac_failure_regions);\n@@ -608,9 +604,0 @@\n-void G1ParScanThreadStateSet::flush_evac_failure_live_data() {\n-  assert(!_flushed, \"thread local state from the per thread states should be flushed once\");\n-\n-  for (uint worker_id = 0; worker_id < _n_workers; ++worker_id) {\n-    G1ParScanThreadState* pss = _states[worker_id];\n-    pss->flush_evac_failure_mark_stats_cache();\n-  }\n-}\n-\n@@ -641,1 +628,1 @@\n-    if (_evac_failure_regions->record(r->hrm_index(), word_sz, &_evac_failure_mark_stats_cache)) {\n+    if (_evac_failure_regions->record(r->hrm_index())) {\n@@ -713,2 +700,1 @@\n-    _evac_failure_regions(evac_failure_regions),\n-    _evac_failure_live_stats(_evac_failure_regions->live_stats()) {\n+    _evac_failure_regions(evac_failure_regions) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -109,1 +109,0 @@\n-  G1RegionMarkStatsCache _evac_failure_mark_stats_cache;\n@@ -121,2 +120,1 @@\n-                       G1EvacFailureRegions* evac_failure_regions,\n-                       G1RegionMarkStats* evac_failure_mark_stats);\n+                       G1EvacFailureRegions* evac_failure_regions);\n@@ -159,2 +157,0 @@\n-  void flush_evac_failure_mark_stats_cache() { _evac_failure_mark_stats_cache.evict_all(); }\n-\n@@ -245,2 +241,0 @@\n-  \/\/ Records the liveness of regions which failed evacuation.\n-  G1RegionMarkStats* _evac_failure_live_stats;\n@@ -262,1 +256,0 @@\n-  void flush_evac_failure_live_data();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -125,3 +125,0 @@\n-  if (evacuation_failed) {\n-    per_thread_states->flush_evac_failure_live_data();\n-  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -298,3 +298,1 @@\n-void HeapRegion::note_self_forwarding_removal_end(size_t marked_bytes) {\n-  assert(marked_bytes <= used(),\n-         \"marked: \" SIZE_FORMAT \" used: \" SIZE_FORMAT, marked_bytes, used());\n+void HeapRegion::note_self_forwarding_removal_start_2() {\n@@ -302,1 +300,4 @@\n-  _prev_marked_bytes = marked_bytes;\n+}\n+\n+void HeapRegion::note_self_forwarding_removal_end_par(size_t marked_bytes) {\n+  Atomic::add(&_prev_marked_bytes, marked_bytes, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -515,1 +515,2 @@\n-  void note_self_forwarding_removal_end(size_t marked_bytes);\n+  void note_self_forwarding_removal_start_2();\n+  void note_self_forwarding_removal_end_par(size_t mared_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}