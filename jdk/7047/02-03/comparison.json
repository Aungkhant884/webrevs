{"files":[{"patch":"@@ -71,0 +71,41 @@\n+class PrepareEvacFailureRegionTask : public WorkerTask {\n+  G1EvacFailureRegions* _evac_failure_regions;\n+  uint _num_workers;\n+  HeapRegionClaimer _claimer;\n+\n+  class PrepareEvacFailureRegionClosure : public HeapRegionClosure {\n+    G1EvacFailureRegions* _evac_failure_regions;\n+    uint _worker_id;\n+  public:\n+    PrepareEvacFailureRegionClosure(G1EvacFailureRegions* evac_failure_regions, uint worker_id) :\n+      _evac_failure_regions(evac_failure_regions),\n+      _worker_id(worker_id) { }\n+\n+    bool do_heap_region(HeapRegion* r) override {\n+      assert(_evac_failure_regions->contains(r->hrm_index()), \"precondition\");\n+      _evac_failure_regions->prepare_region(r->hrm_index(), _worker_id);\n+      return false;\n+    }\n+  };\n+\n+public:\n+  PrepareEvacFailureRegionTask(G1EvacFailureRegions* evac_failure_regions, uint num_workers) :\n+  WorkerTask(\"Prepare Evacuation Failure Region Task\"),\n+  _evac_failure_regions(evac_failure_regions),\n+  _num_workers(num_workers),\n+  _claimer(_num_workers) {\n+  }\n+\n+  void work(uint worker_id) override {\n+    PrepareEvacFailureRegionClosure closure(_evac_failure_regions, worker_id);\n+    _evac_failure_regions->par_iterate(&closure, &_claimer, worker_id);\n+  }\n+\n+};\n+\n+void G1EvacFailureRegions::prepare_regions() {\n+  uint num_workers = MAX2(1u, MIN2(_evac_failure_regions_cur_length, G1CollectedHeap::heap()->workers()->active_workers()));\n+  PrepareEvacFailureRegionTask task(this, num_workers);\n+  G1CollectedHeap::heap()->workers()->run_task(&task, num_workers);\n+}\n+\n@@ -72,1 +113,1 @@\n-                                       HeapRegionClaimer* _hrclaimer,\n+                                       HeapRegionClaimer* hrclaimer,\n@@ -75,1 +116,1 @@\n-                                                     _hrclaimer,\n+                                                     hrclaimer,\n@@ -97,1 +138,1 @@\n-void G1EvacFailureRegions::prepare_region(uint region_idx) {\n+void G1EvacFailureRegions::prepare_region(uint region_idx, uint worker_id) {\n@@ -103,0 +144,3 @@\n+  Ticks start = Ticks::now();\n+  G1GCPhaseTimes* phase_times = G1CollectedHeap::heap()->phase_times();\n+\n@@ -114,1 +158,1 @@\n-                                               0,\n+                                               worker_id,\n@@ -117,0 +161,5 @@\n+\n+  hr->rem_set()->clean_strong_code_roots(hr);\n+  hr->rem_set()->clear_locked(true);\n+\n+  phase_times->record_or_add_time_secs(G1GCPhaseTimes::PrepareRetainedRegions, worker_id, (Ticks::now() - start).seconds());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":53,"deletions":4,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-  \/\/ Do necessary preparation for evacuation failure regions\n-  void prepare_region(uint region_idx);\n-\n@@ -67,1 +64,1 @@\n-                   HeapRegionClaimer* _hrclaimer,\n+                   HeapRegionClaimer* hrclaimer,\n@@ -73,0 +70,4 @@\n+  \/\/ Do necessary preparation for evacuation failure regions\n+  void prepare_region(uint region_idx, uint worker_id);\n+  void prepare_regions();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-    prepare_region(region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+  _gc_par_phases[PrepareRetainedRegions] = new WorkerDataArray<double>(\"PrepareRetainedRegions\", \"Prepare Retained Regions (ms):\", max_gc_threads);\n@@ -493,0 +494,1 @@\n+    debug_phase(_gc_par_phases[PrepareRetainedRegions], 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    PrepareRetainedRegions,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1027,0 +1027,2 @@\n+  _evac_failure_regions.prepare_regions();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,8 +97,0 @@\n-\n-        \/\/ Put the clearing code here on purpose to make sure the rem set data\n-        \/\/ is cleared only after syncing.\n-        \/\/ It also avoid race condition by putting the clearing code here.\n-        if (_evac_failure_regions->contains(hr->hrm_index())) {\n-          hr->rem_set()->clean_strong_code_roots(hr);\n-          hr->rem_set()->clear_locked(true);\n-        }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}