{"files":[{"patch":"@@ -78,1 +78,1 @@\n-void G1EvacFailureRegions::initialize_chunks(uint num_workers, const char* task_name) {\n+void G1EvacFailureRegions::initialize_chunks(uint num_workers) {\n@@ -81,1 +81,1 @@\n-                                 num_workers, task_name);\n+                                 num_workers);\n@@ -106,2 +106,0 @@\n-      hr->clear_index_in_opt_cset();\n-\n@@ -113,2 +111,3 @@\n-      hr->rem_set()->clean_code_roots(hr);\n-      hr->rem_set()->clear_locked(true);\n+      HeapRegionRemSet* rem_set = hr->rem_set();\n+      rem_set->clean_code_roots(hr);\n+      rem_set->clear_locked(true);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  void initialize_chunks(uint active_workers, const char* task_name);\n+  void initialize_chunks(uint active_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+\n+  \/\/ Prepare and analyze assigned chunk.\n@@ -59,2 +61,1 @@\n-  HeapRegion* r = glh->region_at(region_idx);\n-  G1HeapRegionChunk chunk(r, chunk_id % _chunks_per_region, _chunk_size, _bitmap);\n+  G1HeapRegionChunk chunk(glh->region_at(region_idx), chunk_id % _chunks_per_region, _chunk_size, _bitmap);\n@@ -68,0 +69,2 @@\n+\n+  \/\/ Process the chunk.\n@@ -77,1 +80,1 @@\n-void G1ScanChunksInHeapRegions::initialize(const uint* evac_failure_regions, uint evac_failure_regions_length, uint num_workers, const char* task_name) {\n+void G1ScanChunksInHeapRegions::initialize(const uint* evac_failure_regions, uint evac_failure_regions_length, uint num_workers) {\n@@ -82,2 +85,1 @@\n-  log_debug(gc, ergo)(\"Running %s using %u workers for removing self forwards with %u chunks per region\",\n-                      task_name, num_workers, _chunk_size);\n+  log_debug(gc, ergo)(\"Initializing removing self forwards with %u chunks per region given %u workers\", _chunks_per_region, num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+\/\/ Unit of work for removing self forwards in regions.\n@@ -86,1 +87,1 @@\n-  void initialize(const uint* evac_failure_regions, uint evac_failure_regions_length, uint num_workers, const char* task_name);\n+  void initialize(const uint* evac_failure_regions, uint evac_failure_regions_length, uint num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    _evac_failure_regions->initialize_chunks(num_workers, _task_name);\n+    _evac_failure_regions->initialize_chunks(num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,0 +277,2 @@\n+  clear_index_in_opt_cset();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}