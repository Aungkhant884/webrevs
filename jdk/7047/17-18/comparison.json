{"files":[{"patch":"@@ -218,1 +218,1 @@\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, rspc.marked_words(), G1GCPhaseTimes::RemoveSelfForwardObjectsBytes);\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RemoveSelfForwardsInChunks, _worker_id, rspc.marked_words() << LogHeapWordSize, G1GCPhaseTimes::RemoveSelfForwardObjectsBytes);\n@@ -238,1 +238,0 @@\n-  WorkerTask(\"G1 Remove Self-forwarding Pointers\"),\n@@ -250,4 +249,0 @@\n-\n-uint G1ParRemoveSelfForwardPtrsTask::num_failed_regions() const {\n-  return _evac_failure_regions->num_regions_failed_evacuation();\n-}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class G1ParRemoveSelfForwardPtrsTask: public WorkerTask {\n+class G1ParRemoveSelfForwardPtrsTask {\n@@ -49,2 +49,0 @@\n-\n-  uint num_failed_regions() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-  G1CollectedHeap* glh = G1CollectedHeap::heap();\n-  G1GCPhaseTimes* p = glh->phase_times();\n+  G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+  G1GCPhaseTimes* p = g1h->phase_times();\n@@ -61,1 +61,1 @@\n-  G1HeapRegionChunk chunk(glh->region_at(region_idx), chunk_id % _chunks_per_region, _chunk_size, _bitmap);\n+  G1HeapRegionChunk chunk(g1h->region_at(region_idx), chunk_id % _chunks_per_region, _chunk_size, _bitmap);\n@@ -83,2 +83,3 @@\n-  _chunks_per_region = next_power_of_2(num_workers * G1RemoveSelfForwardPtrsThreadLoadFactor \/ evac_failure_regions_length);\n-  _chunk_size = static_cast<uint>(G1HeapRegionSize \/ _chunks_per_region);\n+  \/\/ Same heuristic as G1RemSetScanState\n+  _chunks_per_region = 1u << (HeapRegion::LogOfHRGrainBytes \/ 2 - 4);\n+  _chunk_size = static_cast<uint>(HeapRegion::GrainWords \/ _chunks_per_region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -103,1 +103,0 @@\n-  const char* _task_name;\n@@ -106,1 +105,1 @@\n-  RemoveSelfForwardPtrsTask(G1EvacFailureRegions* evac_failure_regions, const char* task_name) :\n+  RemoveSelfForwardPtrsTask(G1EvacFailureRegions* evac_failure_regions) :\n@@ -109,2 +108,1 @@\n-    _evac_failure_regions(evac_failure_regions),\n-    _task_name(task_name) { }\n+    _evac_failure_regions(evac_failure_regions) { }\n@@ -114,1 +112,1 @@\n-    return _evac_failure_regions->num_regions_failed_evacuation() * G1RemoveSelfForwardPtrsWorkerCost;\n+    return _evac_failure_regions->num_regions_failed_evacuation() * G1PerRetainedRegionThreads;\n@@ -126,2 +124,0 @@\n-const char* G1PostEvacuateCollectionSetCleanupTask1::_name = \"Post Evacuate Cleanup 1\";\n-\n@@ -130,1 +126,1 @@\n-  G1BatchedTask(_name, G1CollectedHeap::heap()->phase_times())\n+  G1BatchedTask(\"Post Evacuate Cleanup 1\", G1CollectedHeap::heap()->phase_times())\n@@ -143,1 +139,1 @@\n-    RemoveSelfForwardPtrsTask* remove_self_forward_task = new RemoveSelfForwardPtrsTask(evac_failure_regions, _name);\n+    RemoveSelfForwardPtrsTask* remove_self_forward_task = new RemoveSelfForwardPtrsTask(evac_failure_regions);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-  static const char* _name;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -382,3 +382,4 @@\n-  product(uint, G1RemoveSelfForwardPtrsWorkerCost, 2, DIAGNOSTIC,           \\\n-          \"The factor for per region work cost to remove self forwardee \"   \\\n-          \"for evecuation failure regions.\")                                \\\n+  product(uint, G1PerRetainedRegionThreads, 2, DIAGNOSTIC,                  \\\n+          \"The number of worker threads used for each retained \"            \\\n+          \"(evacuation failure) region, subject to ParallelGCThreads \"      \\\n+          \"constraint.\")                                                    \\\n@@ -387,5 +388,0 @@\n-  product(uint, G1RemoveSelfForwardPtrsThreadLoadFactor, 16, DIAGNOSTIC,    \\\n-          \"The factor for per worker thread load to remove self forwardee \" \\\n-          \"for evecuation failure regions.\")                                \\\n-          range(1, 1024)                                                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}