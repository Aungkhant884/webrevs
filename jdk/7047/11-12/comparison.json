{"files":[{"patch":"@@ -155,0 +155,3 @@\n+\n+  \/\/ Caches the currently accumulated number of live\/marked words found in this heap region.\n+  \/\/ Avoids direct (frequent) atomic operations on the HeapRegion's marked words.\n@@ -161,0 +164,4 @@\n+    void note_self_forwarding_removal_end_par() {\n+      _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n+    }\n+\n@@ -168,4 +175,0 @@\n-    void note_self_forwarding_removal_end_par() {\n-      _g1h->region_at(_region_idx)->note_self_forwarding_removal_end_par(_marked_words * BytesPerWord);\n-    }\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2021, 2022 Huawei Technologies Co. Ltd. All rights reserved.\n@@ -98,3 +98,3 @@\n-      G1CollectedHeap* _heap = G1CollectedHeap::heap();\n-      G1GCPhaseTimes* p = _heap->phase_times();\n-      HeapRegion* hr = _heap->region_at(region_idx);\n+      G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+      G1GCPhaseTimes* p = g1h->phase_times();\n+      HeapRegion* hr = g1h->region_at(region_idx);\n@@ -109,2 +109,2 @@\n-      bool during_concurrent_start = _heap->collector_state()->in_concurrent_start_gc();\n-      bool during_concurrent_mark = _heap->collector_state()->mark_or_rebuild_in_progress();\n+      bool during_concurrent_start = g1h->collector_state()->in_concurrent_start_gc();\n+      bool during_concurrent_mark = g1h->collector_state()->mark_or_rebuild_in_progress();\n@@ -125,0 +125,1 @@\n+\n@@ -139,4 +140,4 @@\n-  WorkerTask(\"Prepare Evacuation Failure Region Task\"),\n-  _evac_failure_regions(evac_failure_regions),\n-  _num_workers(num_workers),\n-  _claimer(_num_workers) {\n+    WorkerTask(\"Prepare Evacuation Failure Region Task\"),\n+    _evac_failure_regions(evac_failure_regions),\n+    _num_workers(num_workers),\n+    _claimer(_num_workers) {\n@@ -152,1 +153,2 @@\n-  uint num_workers = MAX2(1u, MIN2(_evac_failure_regions_cur_length, G1CollectedHeap::heap()->workers()->active_workers()));\n+  WorkerThreads* workers = G1CollectedHeap::heap()->workers();\n+  uint num_workers = clamp(_evac_failure_regions_cur_length, 1u, workers->active_workers());\n@@ -154,1 +156,1 @@\n-  G1CollectedHeap::heap()->workers()->run_task(&task, num_workers);\n+  workers->run_task(&task, num_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2021, 2022 Huawei Technologies Co. Ltd. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2022, Huawei Technologies Co. Ltd. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2022, Huawei Technologies Co. Ltd. All rights reserved.\n@@ -55,1 +55,2 @@\n-  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+  G1CollectedHeap* glh = G1CollectedHeap::heap();\n+  G1GCPhaseTimes* p = glh->phase_times();\n@@ -58,1 +59,1 @@\n-  HeapRegion* r = G1CollectedHeap::heap()->region_at(region_idx);\n+  HeapRegion* r = glh->region_at(region_idx);\n@@ -81,2 +82,0 @@\n-  _total_chunks = _chunks_per_region * evac_failure_regions_length;\n-\n@@ -86,1 +85,1 @@\n-  _chunks.resize(_total_chunks);\n+  _chunks.resize(_chunks_per_region * evac_failure_regions_length);\n@@ -91,3 +90,3 @@\n-  const uint start_chunk_id = worker_id * _total_chunks \/ total_workers;\n-  for (uint i = 0; i < _total_chunks; i++) {\n-    const uint chunk_id = (start_chunk_id + i) % _total_chunks;\n+  const uint start_chunk_id = worker_id * _chunks.size() \/ total_workers;\n+  for (uint i = 0; i < _chunks.size(); i++) {\n+    const uint chunk_id = (start_chunk_id + i) % _chunks.size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2022, Huawei Technologies Co. Ltd. All rights reserved.\n@@ -80,1 +80,0 @@\n-  uint _total_chunks;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2022, Huawei Technologies Co. Ltd. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionChunk.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-\n@@ -72,2 +71,1 @@\n-  SampleCollectionSetCandidatesTask() :\n-    G1AbstractSubTask(G1GCPhaseTimes::SampleCollectionSetCandidates) { }\n+  SampleCollectionSetCandidatesTask() : G1AbstractSubTask(G1GCPhaseTimes::SampleCollectionSetCandidates) { }\n@@ -89,2 +87,2 @@\n-      bool do_heap_region(HeapRegion* hr) override {\n-        _total.add(hr->rem_set()->card_set_memory_stats());\n+      bool do_heap_region(HeapRegion* r) override {\n+        _total.add(r->rem_set()->card_set_memory_stats());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  product(uint, G1RemoveSelfForwardPtrsWorkerCost, 2,                       \\\n+  product(uint, G1RemoveSelfForwardPtrsWorkerCost, 2, DIAGNOSTIC,           \\\n@@ -387,1 +387,1 @@\n-  product(uint, G1RemoveSelfForwardPtrsThreadLoadFactor, 16,                \\\n+  product(uint, G1RemoveSelfForwardPtrsThreadLoadFactor, 16, DIAGNOSTIC,    \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}