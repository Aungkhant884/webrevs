{"files":[{"patch":"@@ -32,2 +32,0 @@\n-size_t PSPromotionLAB::filler_header_size;\n-\n@@ -48,4 +46,0 @@\n-  \/\/ Initialize after VM starts up because header_size depends on compressed\n-  \/\/ oops.\n-  filler_header_size = align_object_size(typeArrayOopDesc::header_size(T_INT));\n-\n@@ -59,2 +53,2 @@\n-    assert(lab.word_size() >= filler_header_size, \"lab is too small\");\n-    end = end - filler_header_size;\n+    assert(lab.word_size() >= CollectedHeap::min_dummy_object_size(), \"lab is too small\");\n+    end = end - CollectedHeap::min_dummy_object_size();\n@@ -84,14 +78,2 @@\n-  HeapWord* tlab_end = end() + filler_header_size;\n-  typeArrayOop filler_oop = (typeArrayOop) cast_to_oop(top());\n-  filler_oop->set_mark(markWord::prototype());\n-  filler_oop->set_klass(Universe::intArrayKlassObj());\n-  const size_t array_length =\n-    pointer_delta(tlab_end, top()) - typeArrayOopDesc::header_size(T_INT);\n-  assert( (array_length * (HeapWordSize\/sizeof(jint))) < (size_t)max_jint, \"array too big in PSPromotionLAB\");\n-  filler_oop->set_length((int)(array_length * (HeapWordSize\/sizeof(jint))));\n-\n-#ifdef ASSERT\n-  \/\/ Note that we actually DO NOT want to use the aligned header size!\n-  HeapWord* elt_words = cast_from_oop<HeapWord*>(filler_oop) + typeArrayOopDesc::header_size(T_INT);\n-  Copy::fill_to_words(elt_words, array_length, 0xDEAABABE);\n-#endif\n+  HeapWord* tlab_end = end() + CollectedHeap::min_dummy_object_size();\n+  CollectedHeap::fill_with_object(top(), tlab_end, DEBUG_ONLY(true) NOT_DEBUG(false));\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.cpp","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-  static size_t filler_header_size;\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionLAB.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-size_t CollectedHeap::min_dummy_object_size() const {\n+size_t CollectedHeap::min_dummy_object_size() {\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -292,1 +292,2 @@\n-  virtual size_t min_dummy_object_size() const;\n+  static size_t min_dummy_object_size();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -733,32 +733,0 @@\n-void ContiguousSpace::allocate_temporary_filler(int factor) {\n-  \/\/ allocate temporary type array decreasing free size with factor 'factor'\n-  assert(factor >= 0, \"just checking\");\n-  size_t size = pointer_delta(end(), top());\n-\n-  \/\/ if space is full, return\n-  if (size == 0) return;\n-\n-  if (factor > 0) {\n-    size -= size\/factor;\n-  }\n-  size = align_object_size(size);\n-\n-  const size_t array_header_size = typeArrayOopDesc::header_size(T_INT);\n-  if (size >= align_object_size(array_header_size)) {\n-    size_t length = (size - array_header_size) * (HeapWordSize \/ sizeof(jint));\n-    \/\/ allocate uninitialized int array\n-    typeArrayOop t = (typeArrayOop) cast_to_oop(allocate(size));\n-    assert(t != NULL, \"allocation should succeed\");\n-    t->set_mark(markWord::prototype());\n-    t->set_klass(Universe::intArrayKlassObj());\n-    t->set_length((int)length);\n-  } else {\n-    assert(size == CollectedHeap::min_fill_size(),\n-           \"size for smallest fake object doesn't match\");\n-    instanceOop obj = (instanceOop) cast_to_oop(allocate(size));\n-    obj->set_mark(markWord::prototype());\n-    obj->set_klass_gap(0);\n-    obj->set_klass(vmClasses::Object_klass());\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -535,4 +535,0 @@\n-\n-  \/\/ Used to increase collection frequency.  \"factor\" of 0 means entire\n-  \/\/ space.\n-  void allocate_temporary_filler(int factor);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}