{"files":[{"patch":"@@ -50,3 +50,3 @@\n- * {@snippet lang = java:\n- * MemorySegment segment = Arena.global().allocate(100, 1);\n- * ...\n+ * {@snippet file=Snippets.java region=global-allocation lang = java:\n+ * MemorySegment segment = Arena.global().allocate(100, 1); \/\/ @highlight regex='global()'\n+ * \/\/ ...\n@@ -54,1 +54,1 @@\n- *}\n+ * }\n@@ -61,4 +61,3 @@\n- *\n- * {@snippet lang = java:\n- * MemorySegment segment = Arena.ofAuto().allocate(100, 1);\n- * ...\n+ * {@snippet file=Snippets.java region=auto-allocation lang = java:\n+ * MemorySegment segment = Arena.ofAuto().allocate(100, 1); \/\/ @highlight regex='ofAuto()'\n+ * \/\/ ...\n@@ -66,1 +65,1 @@\n- *}\n+ * }\n@@ -78,1 +77,1 @@\n- * {@snippet lang = java:\n+ * {@snippet file=Snippets.java region=confined-allocation lang = java:\n@@ -80,1 +79,1 @@\n- * try (Arena arena = Arena.ofConfined()) {\n+ * try (Arena arena = Arena.ofConfined()) { \/\/ @highlight regex='ofConfined()'\n@@ -82,1 +81,1 @@\n- *     ...\n+ *     \/\/ ...\n@@ -85,1 +84,1 @@\n- *}\n+ * }\n@@ -158,1 +157,1 @@\n- * {@snippet lang = java:\n+ * {@snippet  lang = java:\n@@ -160,2 +159,6 @@\n- *      final Arena arena = Arena.ofConfined();\n- *      final SegmentAllocator slicingAllocator;\n+ *     final Arena arena = Arena.ofConfined();\n+ *     final SegmentAllocator slicingAllocator;\n+ *\n+ *     SlicingArena(long size) {\n+ *         slicingAllocator = SegmentAllocator.slicingAllocator(arena.allocate(size));\n+ *     }\n@@ -163,3 +166,3 @@\n- *      SlicingArena(long size) {\n- *          slicingAllocator = SegmentAllocator.slicingAllocator(arena.allocate(size));\n- *      }\n+ *     public MemorySegment allocate(long byteSize, long byteAlignment) {\n+ *         return slicingAllocator.allocate(byteSize, byteAlignment);\n+ *     }\n@@ -167,3 +170,3 @@\n- *      public MemorySegment allocate(long byteSize, long byteAlignment) {\n- *          return slicingAllocator.allocate(byteSize, byteAlignment);\n- *      }\n+ *     public MemorySegment.Scope scope() {\n+ *         return arena.scope();\n+ *     }\n@@ -171,3 +174,3 @@\n- *      public MemorySegment.Scope scope() {\n- *          return arena.scope();\n- *      }\n+ *     public void close() {\n+ *         arena.close();\n+ *     }\n@@ -175,3 +178,0 @@\n- *      public void close() {\n- *          arena.close();\n- *      }\n@@ -186,4 +186,4 @@\n- *      for (int i = 0 ; i < 10 ; i++) {\n- *          MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n- *          ...\n- *      }\n+ *     for (int i = 0; i < 10; i++) {\n+ *         MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n+ *         \/\/ ...\n+ *     }\n@@ -255,3 +255,3 @@\n-     * {@snippet lang = java:\n-     * S1.overlappingSlice(S2).isEmpty() == true\n-     *}\n+     * {@snippet file=Snippets.java region=arena-overlap lang = java:\n+     *     S1.asOverlappingSlice(S2).isEmpty() == true\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-            \/\/ @start region=\"global-allocation\"\n+            \/\/ @start region=\"global-allocation\":\n@@ -77,1 +77,1 @@\n-            \/\/ @start region=\"auto-allocation\"\n+            \/\/ @start region=\"auto-allocation\":\n@@ -80,1 +80,1 @@\n-            segment = null; \/\/ the segment region becomes available for deallocation after this points\n+            segment = null; \/\/ the segment region becomes available for deallocation after this point\n@@ -85,2 +85,2 @@\n-            \/\/ @start region=\"confined-allocation\"\n-            MemorySegment segment;\n+            \/\/ @start region=\"confined-allocation\":\n+            MemorySegment segment = null;\n@@ -95,2 +95,3 @@\n-\n-        static class SlicingArena implements Arena {\n+        static\n+        \/\/ @start region=\"slicing-arena\":\n+        class SlicingArena implements Arena {\n@@ -116,9 +117,0 @@\n-            public static void main(String[] args) {\n-                try (Arena slicingArena = new SlicingArena(1000)) {\n-                    for (int i = 0; i < 10; i++) {\n-                        MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n-                        \/\/ ...\n-                    }\n-                } \/\/ all memory allocated is released here\n-            }\n-\n@@ -126,1 +118,12 @@\n-\n+        \/\/ @end\n+\n+        public static void main(String[] args) {\n+            \/\/ @start region=\"slicing-arena-main\":\n+            try (Arena slicingArena = new SlicingArena(1000)) {\n+                for (int i = 0; i < 10; i++) {\n+                    MemorySegment s = slicingArena.allocateArray(JAVA_INT, 1, 2, 3, 4, 5);\n+                    \/\/ ...\n+                }\n+            } \/\/ all memory allocated is released here\n+            \/\/ @end\n+        }\n@@ -132,3 +135,7 @@\n-                \/\/ @start region=\"arena-overlap\"\n-                var isOverlapping = S1.asOverlappingSlice(S2).isEmpty() == true;\n-                \/\/ @end\n+\n+                if (\n+                    \/\/ @start region=\"arena-overlap\":\n+                        S1.asOverlappingSlice(S2).isEmpty() == true\n+                    \/\/ @end\n+                ) {}\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/snippet-files\/Snippets.java","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"}]}