{"files":[{"patch":"@@ -1120,2 +1120,7 @@\n-      const char* mismatch_msg = \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\";\n-      fail_continue(\"%s\", mismatch_msg);\n+      const char* mismatch_msg = \"shared class paths mismatch\";\n+      const char* hint_msg = \"(hint: enable -Xlog:class+path=info to diagnose the failure)\";\n+      if (log_is_enabled(Info, class, path)) {\n+        fail_continue(\"%s\", mismatch_msg);\n+      } else {\n+        fail_continue(\"%s %s\", mismatch_msg, hint_msg);\n+      }\n@@ -1123,1 +1128,1 @@\n-        log_warning(cds)(\"%s\", mismatch_msg);\n+        log_warning(cds)(\"%s %s\", mismatch_msg, hint_msg);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-    String mismatchMsg = \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\";\n+    String mismatchMsg = \"shared class paths mismatch\";\n+    String hintMsg = \"(hint: enable -Xlog:class+path=info to diagnose the failure)\";\n@@ -54,1 +55,1 @@\n-        .assertAbnormalExit(unableToUseMsg, mismatchMsg);\n+        .assertAbnormalExit(unableToUseMsg, mismatchMsg, hintMsg);\n@@ -59,1 +60,13 @@\n-    output.shouldContain(mismatchMsg);\n+    output.shouldContain(mismatchMsg)\n+          .shouldContain(hintMsg);\n+\n+    \/\/ Run with -Xshare:on and -Xlog:class+path=info, the mismatchMsg should\n+    \/\/ be there, the hintMsg should NOT be there.\n+    TestCommon.run(\n+        \"-Xlog:class+path=info\",\n+        \"Hello\")\n+        .assertAbnormalExit( out -> {\n+            out.shouldContain(unableToUseMsg)\n+               .shouldContain(mismatchMsg)\n+               .shouldNotContain(hintMsg);\n+        });\n@@ -69,1 +82,1 @@\n-        .assertAbnormalExit(unableToUseMsg, mismatchMsg);\n+        .assertAbnormalExit(unableToUseMsg, mismatchMsg, hintMsg);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/WrongClasspath.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+        String mismatchMsg = \"shared class paths mismatch\";\n+        String hintMsg = \"(hint: enable -Xlog:class+path=info to diagnose the failure)\";\n@@ -85,2 +87,14 @@\n-          .assertNormalExit(topArchiveMsg,\n-                            \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\");\n+          .assertNormalExit(topArchiveMsg, mismatchMsg, hintMsg);\n+\n+        \/\/ Enable class+path logging and run with -Xshare:on, the mismatchMsg\n+        \/\/ should be there, the hintMsg should NOT be there.\n+        run2_WB(baseArchiveName, topArchiveName,\n+                \"-Xlog:class+path=info\",\n+                \"-Xshare:on\",\n+                \"-cp\", wrongJar, mainClass,\n+                \"assertShared:java.lang.Object\",  \/\/ base archive still useable\n+                \"assertNotShared:GenericTestApp\") \/\/ but top archive is not useable\n+          .assertAbnormalExit( output -> {\n+            output.shouldContain(mismatchMsg)\n+                  .shouldNotContain(hintMsg);\n+          });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/WrongTopClasspath.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}