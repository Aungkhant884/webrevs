{"files":[{"patch":"@@ -114,0 +114,12 @@\n+  fail_continue_impl(LogLevel::Info, msg, ap);\n+  va_end(ap);\n+}\n+\n+void FileMapInfo::fail_continue(LogLevelType level, const char *msg, ...) {\n+  va_list ap;\n+  va_start(ap, msg);\n+  fail_continue_impl(level, msg, ap);\n+  va_end(ap);\n+}\n+\n+void FileMapInfo::fail_continue_impl(LogLevelType level, const char *msg, va_list ap) {\n@@ -125,5 +137,2 @@\n-      if (log_is_enabled(Info, cds)) {\n-        LogStream ls(Log(cds)::info());\n-        ls.print(\"UseSharedSpaces: \");\n-        ls.vprint_cr(msg, ap);\n-      }\n+      LogMessage(cds) lm;\n+      lm.vwrite(level, msg, ap);\n@@ -132,1 +141,0 @@\n-  va_end(ap);\n@@ -1120,5 +1128,4 @@\n-      const char* mismatch_msg = \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\";\n-      fail_continue(\"%s\", mismatch_msg);\n-      if (!log_is_enabled(Info, cds) && !log_is_enabled(Info, class, path)) {\n-        log_warning(cds)(\"%s\", mismatch_msg);\n-      }\n+      const char* mismatch_msg = \"shared class paths mismatch\";\n+      const char* hint_msg = log_is_enabled(Info, class, path) ?\n+          \"\" : \" (hint: enable -Xlog:class+path=info to diagnose the failure)\";\n+      fail_continue(LogLevel::Warning, \"%s%s\", mismatch_msg, hint_msg);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"logging\/logLevel.hpp\"\n@@ -484,0 +485,2 @@\n+  static void fail_continue(LogLevelType level, const char *msg, ...) ATTRIBUTE_PRINTF(2, 3);\n+  static void fail_continue_impl(LogLevelType level, const char *msg, va_list ap) ATTRIBUTE_PRINTF(2, 0);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n-        \"UseSharedSpaces: shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\",\n-        \"UseSharedSpaces: Unable to map shared spaces\"};\n+        \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\",\n+        \"Unable to map shared spaces\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/MismatchedPathTriggerMemoryRelease.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        \"UseSharedSpaces: Header checksum verification failed.\",\n+        \"Header checksum verification failed.\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-    String mismatchMsg = \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\";\n+    String mismatchMsg = \"shared class paths mismatch\";\n+    String hintMsg = \"(hint: enable -Xlog:class+path=info to diagnose the failure)\";\n@@ -54,1 +55,1 @@\n-        .assertAbnormalExit(unableToUseMsg, mismatchMsg);\n+        .assertAbnormalExit(unableToUseMsg, mismatchMsg, hintMsg);\n@@ -59,1 +60,13 @@\n-    output.shouldContain(mismatchMsg);\n+    output.shouldContain(mismatchMsg)\n+          .shouldContain(hintMsg);\n+\n+    \/\/ Run with -Xshare:on and -Xlog:class+path=info, the mismatchMsg should\n+    \/\/ be there, the hintMsg should NOT be there.\n+    TestCommon.run(\n+        \"-Xlog:class+path=info\",\n+        \"Hello\")\n+        .assertAbnormalExit( out -> {\n+            out.shouldContain(unableToUseMsg)\n+               .shouldContain(mismatchMsg)\n+               .shouldNotContain(hintMsg);\n+        });\n@@ -69,1 +82,1 @@\n-        .assertAbnormalExit(unableToUseMsg, mismatchMsg);\n+        .assertAbnormalExit(unableToUseMsg, mismatchMsg, hintMsg);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/WrongClasspath.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -339,2 +339,2 @@\n-                      .shouldContain(\"UseSharedSpaces: The shared archive file has the wrong version\")\n-                      .shouldContain(\"UseSharedSpaces: Initialize dynamic archive failed\")\n+                      .shouldContain(\"The shared archive file has the wrong version\")\n+                      .shouldContain(\"Initialize dynamic archive failed\")\n@@ -403,1 +403,1 @@\n-                    output.shouldContain(\"UseSharedSpaces: Header checksum verification failed\")\n+                    output.shouldContain(\"Header checksum verification failed\")\n@@ -608,1 +608,1 @@\n-                    output.shouldContain(\"UseSharedSpaces: Header checksum verification failed\");\n+                    output.shouldContain(\"Header checksum verification failed\");\n@@ -637,1 +637,1 @@\n-                    output.shouldContain(\"UseSharedSpaces: Header checksum verification failed\");\n+                    output.shouldContain(\"Header checksum verification failed\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -115,2 +115,2 @@\n-                      .shouldContain(\"UseSharedSpaces: Initialize static archive failed\")\n-                      .shouldContain(\"UseSharedSpaces: Unable to map shared spaces\")\n+                      .shouldContain(\"Initialize static archive failed\")\n+                      .shouldContain(\"Unable to map shared spaces\")\n@@ -135,2 +135,2 @@\n-                      .shouldContain(\"UseSharedSpaces: Initialize static archive failed\")\n-                      .shouldContain(\"UseSharedSpaces: Unable to map shared spaces\")\n+                      .shouldContain(\"Initialize static archive failed\")\n+                      .shouldContain(\"Unable to map shared spaces\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchiveNoDefaultArchive.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+        String mismatchMsg = \"shared class paths mismatch\";\n+        String hintMsg = \"(hint: enable -Xlog:class+path=info to diagnose the failure)\";\n@@ -85,2 +87,14 @@\n-          .assertNormalExit(topArchiveMsg,\n-                            \"shared class paths mismatch (hint: enable -Xlog:class+path=info to diagnose the failure)\");\n+          .assertNormalExit(topArchiveMsg, mismatchMsg, hintMsg);\n+\n+        \/\/ Enable class+path logging and run with -Xshare:on, the mismatchMsg\n+        \/\/ should be there, the hintMsg should NOT be there.\n+        run2_WB(baseArchiveName, topArchiveName,\n+                \"-Xlog:class+path=info\",\n+                \"-Xshare:on\",\n+                \"-cp\", wrongJar, mainClass,\n+                \"assertShared:java.lang.Object\",  \/\/ base archive still useable\n+                \"assertNotShared:GenericTestApp\") \/\/ but top archive is not useable\n+          .assertAbnormalExit( output -> {\n+            output.shouldContain(mismatchMsg)\n+                  .shouldNotContain(hintMsg);\n+          });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/WrongTopClasspath.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-                    out.shouldContain(\"UseSharedSpaces: CDS is disabled because early JVMTI ClassFileLoadHook is in use.\");\n+                    out.shouldContain(\"CDS is disabled because early JVMTI ClassFileLoadHook is in use.\");\n@@ -192,1 +192,1 @@\n-                        if (!out.getOutput().contains(\"UseSharedSpaces: Unable to map at required address in java heap\")) {\n+                        if (!out.getOutput().contains(\"Unable to map at required address in java heap\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/serviceability\/ReplaceCriticalClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}