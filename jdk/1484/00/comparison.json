{"files":[{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import static java.lang.ProcessBuilder.Redirect.*;\n-\n-class InheritIO {\n-\n-    public static class TestInheritIO {\n-        public static void main(String args[]) throws Throwable {\n-            int err = new ProcessBuilder(args).inheritIO().start().waitFor();\n-            System.err.print(\"exit value: \" + err);\n-            System.exit(err);\n-        }\n-    }\n-\n-    public static class TestRedirectInherit {\n-        public static void main(String args[]) throws Throwable {\n-            int err = new ProcessBuilder(args)\n-                    .redirectInput(INHERIT)\n-                    .redirectOutput(INHERIT)\n-                    .redirectError(INHERIT)\n-                    .start().waitFor();\n-            System.err.print(\"exit value: \" + err);\n-            System.exit(err);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/InheritIO\/InheritIO.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-#\n-# Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 8023130\n-# @summary (process) ProcessBuilder#inheritIO does not work on Windows\n-# @run shell InheritIO.sh\n-\n-if [ \"x${TESTSRC}\" = \"x\" ]; then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"x${TESTJAVA}\" = \"x\" ]; then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-\n-if [ \"x${COMPILEJAVA}\" = \"x\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-\n-JAVA=\"${TESTJAVA}\/bin\/java\"\n-JAVAC=\"${COMPILEJAVA}\/bin\/javac\"\n-\n-cp -f ${TESTSRC}\/InheritIO.java .\n-\n-# compile the class ourselves, so this can run as a standalone test\n-\n-${JAVAC} InheritIO.java\n-RES=\"$?\"\n-if [ ${RES} != 0 ]; then\n-    echo 'FAIL: Cannot compile InheritIO.java'\n-    exit ${RES}\n-fi\n-\n-\n-for TEST_NAME in TestInheritIO TestRedirectInherit\n-do\n-    ${JAVA} ${TESTVMOPTS} -classpath . \\\n-        'InheritIO$'${TEST_NAME} printf message > stdout.txt 2> stderr.txt\n-\n-    RES=\"$?\"\n-    if [ ${RES} != 0 ]; then\n-        echo 'FAIL: InheritIO$'${TEST_NAME}' failed with '${RES}\n-        exit ${RES}\n-    fi\n-\n-    OUT_EXPECTED='message'\n-    OUT_RECEIVED=`cat stdout.txt`\n-    if [ \"x${OUT_RECEIVED}\" != \"x${OUT_EXPECTED}\" ]; then\n-        echo \"FAIL: unexpected '${OUT_RECEIVED}' in stdout\"\n-        exit 1\n-    fi\n-\n-    ERR_EXPECTED='exit value: 0'\n-    ERR_RECEIVED=`cat stderr.txt`\n-    if [ \"x${ERR_RECEIVED}\" != \"x${ERR_EXPECTED}\" ]; then\n-        echo \"FAIL: unexpected '${ERR_RECEIVED}' in stderr\"\n-        exit 1\n-    fi\n-done\n-\n-echo 'PASS: InheritIO works as expected'\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/InheritIO\/InheritIO.sh","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2013, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static java.lang.ProcessBuilder.Redirect.*;\n+\n+class InheritIo {\n+\n+    final static String EXIT_VALUE_TEMPLATE = \"exit value: %d\";\n+\n+    public static class TestInheritIo {\n+        public static void main(String args[]) throws Throwable {\n+            int err = new ProcessBuilder(args).inheritIO().start().waitFor();\n+            System.err.printf(EXIT_VALUE_TEMPLATE, err);\n+            System.exit(err);\n+        }\n+    }\n+\n+    public static class TestRedirectInherit {\n+        public static void main(String args[]) throws Throwable {\n+            int err = new ProcessBuilder(args)\n+                    .redirectInput(INHERIT)\n+                    .redirectOutput(INHERIT)\n+                    .redirectError(INHERIT)\n+                    .start().waitFor();\n+            System.err.printf(EXIT_VALUE_TEMPLATE, err);\n+            System.exit(err);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/InheritIO\/InheritIo.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8023130 8166026\n+ * @summary Unit test for java.lang.ProcessBuilder inheritance of standard output and standard error streams\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        InheritIo\n+ * @run testng InheritIoTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import java.util.List;\n+import static org.testng.Assert.*;\n+\n+public class InheritIoTest {\n+\n+    private static final String EXPECTED_RESULT_STDOUT = \"message\";\n+    private static final String EXPECTED_RESULT_STDERR = InheritIo.EXIT_VALUE_TEMPLATE.formatted(0);\n+\n+    @DataProvider\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+             new Object[] { List.of(\"InheritIo$TestInheritIo\", \"printf\", EXPECTED_RESULT_STDOUT) },\n+             new Object[] { List.of(\"InheritIo$TestRedirectInherit\", \"printf\", EXPECTED_RESULT_STDOUT) }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void testInheritWithoutRedirect(List<String> arguments) throws Throwable {\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(arguments);\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+        outputAnalyzer.stderrShouldMatch(EXPECTED_RESULT_STDERR);\n+        outputAnalyzer.stdoutShouldMatch(EXPECTED_RESULT_STDOUT);\n+        assertEquals(outputAnalyzer.getOutput(),EXPECTED_RESULT_STDOUT + EXPECTED_RESULT_STDERR);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/InheritIO\/InheritIoTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -1,66 +0,0 @@\n-#\n-# Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @summary Basic test of -Djava.security.manager to a class in named module.\n-\n-set -e\n-\n-if [ -z \"$TESTJAVA\" ]; then\n-  if [ $# -lt 1 ]; then exit 1; fi\n-  TESTJAVA=\"$1\"; shift\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-  TESTSRC=`pwd`\n-  TESTCLASSES=`pwd`\n-fi\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  Windows*)\n-    PS=\";\"\n-    ;;\n-  CYGWIN* )\n-    PS=\";\"\n-    ;;\n-  * )\n-    PS=\":\"\n-    ;;\n-esac\n-\n-JAVAC=\"$COMPILEJAVA\/bin\/javac\"\n-JAVA=\"$TESTJAVA\/bin\/java ${TESTVMOPTS}\"\n-\n-mkdir -p mods\n-$JAVAC -d mods --module-source-path ${TESTSRC} `find ${TESTSRC}\/m -name \"*.java\"`\n-\n-mkdir -p classes\n-$JAVAC -d classes ${TESTSRC}\/Test.java\n-\n-$JAVA -cp classes --module-path mods --add-modules m \\\n-    -Djava.security.manager \\\n-    -Djava.security.policy=${TESTSRC}\/test.policy Test\n-$JAVA -cp classes --module-path mods --add-modules m \\\n-    -Djava.security.manager=p.CustomSecurityManager \\\n-    -Djava.security.policy=${TESTSRC}\/test.policy Test\n-\n-exit 0\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/CustomSecurityManager.sh","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2015, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @summary Basic test of -Djava.security.manager to a class in named module.\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        m\/*\n+ *        Test\n+ * @run testng\/othervm CustomSecurityManagerTest\n+ *\/\n+public class CustomSecurityManagerTest {\n+\n+    private static final String MODULE_PATH = Paths.get(Utils.TEST_CLASSES).resolve(\"modules\").toString();\n+    private static final String POLICY_PATH = Paths.get(Utils.TEST_SRC).resolve(\"test.policy\").toString();\n+\n+    @DataProvider\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+            new Object[] { List.of(\n+                    \"--module-path\", MODULE_PATH,\n+                    \"--add-modules\", \"m\",\n+                    \"-Djava.security.manager\",\n+                    String.format(\"-Djava.security.policy=%s\", POLICY_PATH),\n+                    \"Test\"\n+            ) },\n+            new Object[] { List.of(\n+                    \"--module-path\", MODULE_PATH,\n+                    \"--add-modules\", \"m\",\n+                    \"-Djava.security.manager=p.CustomSecurityManager\",\n+                    String.format(\"-Djava.security.policy=%s\", POLICY_PATH),\n+                    \"Test\"\n+            ) }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void testProvider(List<String> args) throws Throwable {\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(args);\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/SecurityManager\/modules\/CustomSecurityManagerTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -1,205 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug 4833089 4992454\n-# @summary Check for proper handling of uncaught exceptions\n-# @author Martin Buchholz\n-#\n-# @run shell UncaughtExceptions.sh\n-\n-# To run this test manually, simply do .\/UncaughtExceptions.sh\n-\n- java=\"${TESTJAVA+${TESTJAVA}\/bin\/}java\"\n-javac=\"${COMPILEJAVA+${COMPILEJAVA}\/bin\/}javac\"\n-\n-failed=\"\"\n-Fail() { echo \"FAIL: $1\"; failed=\"${failed}.\"; }\n-\n-Die() { printf \"%s\\n\" \"$*\"; exit 1; }\n-\n-Sys() {\n-    \"$@\"; rc=\"$?\";\n-    test \"$rc\" -eq 0 || Die \"Command \\\"$*\\\" failed with exitValue $rc\";\n-}\n-\n-HorizontalRule() {\n-    echo \"-----------------------------------------------------------------\"\n-}\n-\n-Bottom() {\n-    test \"$#\" = 1 -a \"$1\" = \"Line\" || Die \"Usage: Bottom Line\"\n-\n-    HorizontalRule\n-    if test -n \"$failed\"; then\n-\tcount=`printf \"%s\" \"$failed\" | wc -c | tr -d ' '`\n-\techo \"FAIL: $count tests failed\"\n-\texit 1\n-    else\n-\techo \"PASS: all tests gave expected results\"\n-\texit 0\n-    fi\n-}\n-\n-Cleanup() { Sys rm -f Seppuku* OK.class; }\n-\n-set -u\n-\n-checkOutput() {\n-    name=\"$1\" expected=\"$2\" got=\"$3\"\n-    printf \"$name:\\n\"; cat \"$got\"\n-    if test -z \"$expected\"; then\n-\ttest \"`cat $got`\" != \"\" && \\\n-\t    Fail \"Unexpected $name: `cat $got`\"\n-    else\n-\tgrep \"$expected\" \"$got\" >\/dev\/null || \\\n-\t    Fail \"Expected \\\"$expected\\\", got `cat $got`\"\n-    fi\n-}\n-\n-CheckCommandResults() {\n-    expectedRC=\"$1\" expectedOut=\"$2\" expectedErr=\"$3\"; shift 3\n-    saveFailed=\"${failed}\"\n-    \"$@\" >TmpTest.Out 2>TmpTest.Err; rc=\"$?\";\n-    printf \"==> %s (rc=%d)\\n\" \"$*\" \"$rc\"\n-    checkOutput \"stdout\" \"$expectedOut\" \"TmpTest.Out\"\n-    checkOutput \"stderr\" \"$expectedErr\" \"TmpTest.Err\"\n-    test \"${saveFailed}\" = \"${failed}\" && \\\n-\techo \"PASS: command completed as expected\"\n-    Sys rm -f TmpTest.Out TmpTest.Err\n-}\n-\n-Run() {\n-    expectedRC=\"$1\" expectedOut=\"$2\" expectedErr=\"$3\" mainBody=\"$4\"\n-    cat > Seppuku.java <<EOJAVA\n-import static java.lang.Thread.*;\n-import static java.lang.System.*;\n-\n-class OK implements UncaughtExceptionHandler {\n-    public void uncaughtException(Thread t, Throwable e) {\n-\tout.println(\"OK\");\n-    }\n-}\n-\n-class NeverInvoked implements UncaughtExceptionHandler {\n-    public void uncaughtException(Thread t, Throwable e) {\n-\terr.println(\"Test failure: This handler should never be invoked!\");\n-    }\n-}\n-\n-public class Seppuku extends Thread implements Runnable {\n-    public static void seppuku() { throw new RuntimeException(\"Seppuku!\"); }\n-\n-    public void run() {\tseppuku(); }\n-\n-    public static void main(String[] args) throws Exception {\n-\t$mainBody\n-    }\n-}\n-EOJAVA\n-\n-    Sys \"$javac\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \"Seppuku.java\"\n-    CheckCommandResults \"$expectedRC\" \"$expectedOut\" \"$expectedErr\" \\\n-\t\"$java\" \"Seppuku\"\n-    Cleanup\n-}\n-\n-#----------------------------------------------------------------\n-# A thread is never alive after you've join()ed it.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"Exception in thread \\\"Thread-0\\\".*Seppuku\" \"\n-    Thread t = new Seppuku();\n-    t.start(); t.join();\n-    if (! t.isAlive())\n-\tout.println(\\\"OK\\\");\"\n-\n-#----------------------------------------------------------------\n-# Even the main thread is mortal - here it terminates \"abruptly\"\n-#----------------------------------------------------------------\n-Run 1 \"OK\" \"Exception in thread \\\"main\\\".*Seppuku\" \"\n-    final Thread mainThread = currentThread();\n-    new Thread() { public void run() {\n-\ttry { mainThread.join(); }\n-\tcatch (InterruptedException e) {}\n-\tif (! mainThread.isAlive())\n-\t    out.println(\\\"OK\\\");\n-    }}.start();\n-    seppuku();\"\n-\n-#----------------------------------------------------------------\n-# Even the main thread is mortal - here it terminates normally.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    final Thread mainThread = currentThread();\n-    new Thread() { public void run() {\n-\ttry { mainThread.join(); }\n-\tcatch (InterruptedException e) {}\n-\tif (! mainThread.isAlive())\n-\t    out.println(\\\"OK\\\");\n-    }}.start();\"\n-\n-#----------------------------------------------------------------\n-# Check uncaught exception handler mechanism on the main thread.\n-# Check that thread-level handler overrides global default handler.\n-#----------------------------------------------------------------\n-Run 1 \"OK\" \"\" \"\n-    currentThread().setUncaughtExceptionHandler(new OK());\n-    setDefaultUncaughtExceptionHandler(new NeverInvoked());\n-    seppuku();\"\n-\n-Run 1 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new OK());\n-    seppuku();\"\n-\n-#----------------------------------------------------------------\n-# Check uncaught exception handler mechanism on non-main threads.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    Thread t = new Seppuku();\n-    t.setUncaughtExceptionHandler(new OK());\n-    t.start();\"\n-\n-Run 0 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new OK());\n-    new Seppuku().start();\"\n-\n-#----------------------------------------------------------------\n-# Test ThreadGroup based uncaught exception handler mechanism.\n-# Since the handler for the main thread group cannot be changed,\n-# there are no tests for the main thread here.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new NeverInvoked());\n-    new Thread(\n-\tnew ThreadGroup(\\\"OK\\\") {\n-\t    public void uncaughtException(Thread t, Throwable e) {\n-\t\tout.println(\\\"OK\\\");}},\n-\tnew Seppuku()\n-    ).start();\"\n-\n-Cleanup\n-\n-Bottom Line\n","filename":"test\/jdk\/java\/lang\/Thread\/UncaughtExceptions.sh","additions":0,"deletions":205,"binary":false,"changes":205,"status":"deleted"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2004, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static java.lang.Thread.*;\n+import static java.lang.System.*;\n+\n+class OK implements UncaughtExceptionHandler {\n+    public void uncaughtException(Thread t, Throwable e) {\n+        out.println(Seppuku.EXPECTED_RESULT);\n+    }\n+}\n+\n+class NeverInvoked implements UncaughtExceptionHandler {\n+    public void uncaughtException(Thread t, Throwable e) {\n+        err.println(\"Test failure: This handler should never be invoked!\");\n+    }\n+}\n+\n+public class Seppuku extends Thread implements Runnable {\n+\n+    final static String EXPECTED_RESULT = \"OK\";\n+\n+    public static void seppuku() { throw new RuntimeException(\"Seppuku!\"); }\n+\n+    public void run() { seppuku(); }\n+\n+    \/**\n+     * A thread is never alive after you've join()ed it.\n+     *\/\n+    public static class ThreadIsDeadAfterJoin extends Seppuku {\n+        public static void main(String[] args) throws Exception {\n+            Thread t = new Seppuku();\n+            t.start(); t.join();\n+            if (! t.isAlive()) {\n+                out.println(EXPECTED_RESULT);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Even the main thread is mortal - here it terminates \"abruptly\"\n+     *\/\n+    public static class MainThreadAbruptTermination extends Seppuku {\n+        public static void main(String[] args) {\n+            final Thread mainThread = currentThread();\n+            new Thread() { public void run() {\n+                try { mainThread.join(); }\n+                catch (InterruptedException e) {}\n+                if (! mainThread.isAlive())\n+                    out.println(EXPECTED_RESULT);\n+            }}.start();\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Even the main thread is mortal - here it terminates normally.\n+     *\/\n+    public static class MainThreadNormalTermination extends Seppuku {\n+        public static void main(String[] args) {\n+            final Thread mainThread = currentThread();\n+            new Thread() {\n+                public void run() {\n+                    try {\n+                        mainThread.join();\n+                    } catch (InterruptedException e) {\n+                    }\n+                    if (!mainThread.isAlive())\n+                        out.println(EXPECTED_RESULT);\n+                }\n+            }.start();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on the main thread.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            currentThread().setUncaughtExceptionHandler(new OK());\n+            setDefaultUncaughtExceptionHandler(new NeverInvoked());\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Check that thread-level handler overrides global default handler.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnMainThreadOverride extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new OK());\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on non-main threads.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnNonMainThreadOverride extends Seppuku {\n+        public static void main(String[] args) {\n+            Thread t = new Seppuku();\n+            t.setUncaughtExceptionHandler(new OK());\n+            t.start();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on non-main threads.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnNonMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new OK());\n+            new Seppuku().start();\n+        }\n+    }\n+\n+    \/**\n+     * Test ThreadGroup based uncaught exception handler mechanism.\n+     * Since the handler for the main thread group cannot be changed,\n+     * there are no tests for the main thread here.\n+     *\/\n+    public static class ThreadGroupUncaughtExceptionHandlerOnNonMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new NeverInvoked());\n+            new Thread(\n+                    new ThreadGroup(EXPECTED_RESULT) {\n+                            public void uncaughtException(Thread t, Throwable e) {\n+                                out.println(EXPECTED_RESULT);\n+                            }\n+                        },\n+                        new Seppuku()\n+                    ).start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/uncaughtexceptions\/Seppuku.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2004, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 4833089 4992454\n+ * @summary Check for proper handling of uncaught exceptions\n+ * @author Martin Buchholz\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        Seppuku\n+ * @run testng UncaughtExceptionsTest\n+ *\/\n+public class UncaughtExceptionsTest {\n+\n+    @DataProvider\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+            new Object[] { \"ThreadIsDeadAfterJoin\",\n+                           0,\n+                           Seppuku.EXPECTED_RESULT,\n+                           \"Exception in thread \\\"Thread-0\\\".*Seppuku\"\n+            },\n+            new Object[] {\n+                            \"MainThreadAbruptTermination\",\n+                            1,\n+                            Seppuku.EXPECTED_RESULT,\n+                            \"Exception in thread \\\"main\\\".*Seppuku\"\n+            },\n+            new Object[] { \"MainThreadNormalTermination\", 0, Seppuku.EXPECTED_RESULT, \"\"},\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThread\", 1, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThreadOverride\", 1, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThreadOverride\", 0, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThread\", 0, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"ThreadGroupUncaughtExceptionHandlerOnNonMainThread\", 0, Seppuku.EXPECTED_RESULT, \"\" }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void test(String className, int exitValue, String stdOutMatch, String stdErrMatch) throws Throwable {\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(String.format(\"Seppuku$%s\",className));\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n+        outputAnalyzer.shouldHaveExitValue(exitValue);\n+        outputAnalyzer.stderrShouldMatch(stdErrMatch);\n+        outputAnalyzer.stdoutShouldMatch(stdOutMatch);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/Thread\/uncaughtexceptions\/UncaughtExceptionsTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -1,93 +0,0 @@\n-#!\/bin\/sh\n-\n-# Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTCLASSES=${TESTCLASSES}\"\n-echo \"CLASSPATH=${CLASSPATH}\"\n-\n-# set platform-dependent variables\n-OS=`uname -s`\n-case \"$OS\" in\n-  Linux | Darwin | AIX )\n-    NULL=\/dev\/null\n-    PS=\":\"\n-    FS=\"\/\"\n-    ;;\n-  CYGWIN* )\n-    NULL=\/dev\/null\n-    PS=\";\"\n-    FS=\"\/\"\n-    ;;\n-  Windows* )\n-    NULL=NUL\n-    PS=\";\"\n-    FS=\"\\\\\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-mkdir -p classes\n-cp ${TESTSRC}${FS}*.java .\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d classes A.java B.java C.java\n-${COMPILEJAVA}${FS}bin${FS}javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} Main.java\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} Main\n-result=$?\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed 1 of 2\"\n-else\n-  echo \"Failed 1 of 2\"\n-  exit $result\n-fi\n-${TESTJAVA}${FS}bin${FS}java ${TESTVMOPTS} Main foo\n-result=$?\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed 2 of 2\"\n-else\n-  echo \"Failed 2 of 2\"\n-fi\n-exit $result\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/LoaderLeak.sh","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2004, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5040740\n+ * @summary annotations cause memory leak\n+ * @author gafter\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ *        Main\n+ *        A\n+ *        B\n+ *        C\n+ * @run testng LoaderLeakTest\n+*\/\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import java.nio.file.*;\n+import java.util.List;\n+\n+public class LoaderLeakTest {\n+\n+    @BeforeClass\n+    public void initialize() throws Exception {\n+        final Path CLASSES_PATH = Paths.get(Utils.TEST_CLASSES).toAbsolutePath();\n+        final Path REPOSITORY_PATH = CLASSES_PATH.resolve(\"classes\").toAbsolutePath();\n+        Files.createDirectories(REPOSITORY_PATH);\n+        List<String> classes = List.of(\"A.class\", \"B.class\", \"C.class\");\n+        for (String fileName : classes) {\n+            Files.move(\n+                CLASSES_PATH.resolve(fileName),\n+                REPOSITORY_PATH.resolve(fileName),\n+                StandardCopyOption.REPLACE_EXISTING\n+            );\n+        }\n+    }\n+\n+    @Test\n+    public void testWithoutReadingAnnotations() throws Throwable {\n+        runJavaProcessExpectSuccesExitCode(\"Main\");\n+    }\n+\n+    @Test\n+    public void testWithReadingAnnotations() throws Throwable {\n+        runJavaProcessExpectSuccesExitCode(\"Main\",  \"foo\");\n+    }\n+\n+    private void runJavaProcessExpectSuccesExitCode(String ... command) throws Throwable {\n+        ProcessTools\n+                .executeCommand(\n+                        ProcessTools\n+                                .createJavaProcessBuilder(command)\n+                                .directory(Paths.get(Utils.TEST_CLASSES).toFile()\n+                        )\n+                ).shouldHaveExitValue(0);\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/LoaderLeakTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,10 +24,0 @@\n-\/*\n- * @test\n- * @bug 5040740\n- * @summary annotations cause memory leak\n- * @author gafter\n- *\n- * @run shell LoaderLeak.sh\n- *\/\n-\n-import java.net.*;\n","filename":"test\/jdk\/java\/lang\/annotation\/loaderLeak\/Main.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"}]}