{"files":[{"patch":"@@ -749,0 +749,35 @@\n+    \/**\n+     * Appends the string representation of a subarray of the latin1 encoded\n+     * {@code byte} array argument to this sequence.\n+     * <p>\n+     * Characters of the {@code char} array {@code str}, starting at\n+     * index {@code offset}, are appended, in order, to the contents\n+     * of this sequence. The length of this sequence increases\n+     * by the value of {@code len}.\n+     * <p>\n+     * The overall effect is exactly as if the arguments were converted\n+     * to a string by the method {@link String#valueOf(char[],int,int)},\n+     * and the characters of that string were then\n+     * {@link #append(String) appended} to this character sequence.\n+     *\n+     * @param   str      the latin1 encoded characters to be appended.\n+     * @param   offset   the index of the first {@code char} to append.\n+     * @param   len      the number of {@code char}s to append.\n+     * @return  a reference to this object.\n+     * @throws IndexOutOfBoundsException\n+     *         if {@code offset < 0} or {@code len < 0}\n+     *         or {@code offset+len > str.length}\n+     *\/\n+    AbstractStringBuilder append(byte[] str, int off, int len) {\n+        int count = this.count;\n+        int spaceNeeded = count + len;\n+        ensureCapacityInternal(spaceNeeded);\n+        if (isLatin1()) {\n+            System.arraycopy(str, off, value, count, len);\n+        } else {\n+            StringLatin1.inflate(str, off, value, count, len);\n+        }\n+        this.count += len;\n+        return this;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    private static void writeDigitPair(byte[] buf, int charPos, int value) {\n+    static void writeDigitPair(byte[] buf, int charPos, int value) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2547,0 +2547,24 @@\n+            public void stringBuilderAppend(StringBuilder sb, byte[] str, int off, int len) {\n+                sb.append(str, off, len);\n+            }\n+\n+            public int stringSize(int i) {\n+                return Long.stringSize(i);\n+            }\n+\n+            public int stringSize(long i) {\n+                return Long.stringSize(i);\n+            }\n+\n+            public int getCharsLatin1(int i, int index, byte[] buf) {\n+                return StringLatin1.getChars(i, index, buf);\n+            }\n+\n+            public int getCharsLatin1(long i, int index, byte[] buf) {\n+                return StringLatin1.getChars(i, index, buf);\n+            }\n+\n+            public void writeDigitPairLatin1(byte[] buf, int charPos, int value) {\n+                StringLatin1.writeDigitPair(buf, charPos, value);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.StandardCharsets;\n@@ -41,0 +43,3 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n+\n@@ -310,0 +315,2 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n@@ -4157,1 +4164,1 @@\n-        final char[] cmpCharArray; \/\/ character array to place the intCompact\n+        final byte[] cmpCharArray; \/\/ character array to place the intCompact\n@@ -4162,1 +4169,1 @@\n-            cmpCharArray = new char[19];\n+            cmpCharArray = new byte[19];\n@@ -4171,1 +4178,1 @@\n-        char[] getCompactCharArray() {\n+        byte[] getCompactCharArray() {\n@@ -4185,33 +4192,1 @@\n-            assert intCompact >= 0;\n-\n-            long q;\n-            int r;\n-            \/\/ since we start from the least significant digit, charPos points to\n-            \/\/ the last character in cmpCharArray.\n-            int charPos = cmpCharArray.length;\n-\n-            \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-            while (intCompact > Integer.MAX_VALUE) {\n-                q = intCompact \/ 100;\n-                r = (int)(intCompact - q * 100);\n-                intCompact = q;\n-                cmpCharArray[--charPos] = DIGIT_ONES[r];\n-                cmpCharArray[--charPos] = DIGIT_TENS[r];\n-            }\n-\n-            \/\/ Get 2 digits\/iteration using ints when i2 >= 100\n-            int q2;\n-            int i2 = (int)intCompact;\n-            while (i2 >= 100) {\n-                q2 = i2 \/ 100;\n-                r  = i2 - q2 * 100;\n-                i2 = q2;\n-                cmpCharArray[--charPos] = DIGIT_ONES[r];\n-                cmpCharArray[--charPos] = DIGIT_TENS[r];\n-            }\n-\n-            cmpCharArray[--charPos] = DIGIT_ONES[i2];\n-            if (i2 >= 10)\n-                cmpCharArray[--charPos] = DIGIT_TENS[i2];\n-\n-            return charPos;\n+            return JLA.getCharsLatin1(intCompact, cmpCharArray.length, cmpCharArray);\n@@ -4219,26 +4194,0 @@\n-\n-        static final char[] DIGIT_TENS = {\n-            '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n-            '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n-            '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n-            '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n-            '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n-            '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n-            '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n-            '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n-            '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n-            '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n-        };\n-\n-        static final char[] DIGIT_ONES = {\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        };\n@@ -4264,1 +4213,0 @@\n-            int lowInt = (int)intCompact % 100;\n@@ -4266,3 +4214,11 @@\n-            return (Integer.toString(highInt) + '.' +\n-                    StringBuilderHelper.DIGIT_TENS[lowInt] +\n-                    StringBuilderHelper.DIGIT_ONES[lowInt]) ;\n+            int lowInt = (int) intCompact - highInt * 100;\n+            int highIntSize = JLA.stringSize(highInt);\n+            byte[] buf = new byte[highIntSize + 3];\n+            JLA.getCharsLatin1(highInt, highIntSize, buf);\n+            buf[highIntSize] = '.';\n+            JLA.writeDigitPairLatin1(buf, highIntSize + 1, lowInt);\n+            try {\n+                return JLA.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+            } catch (CharacterCodingException e) {\n+                throw new AssertionError(e);\n+            }\n@@ -4272,1 +4228,1 @@\n-        char[] coeff;\n+        byte[] coeff;\n@@ -4280,1 +4236,1 @@\n-            coeff  = intVal.abs().toString().toCharArray();\n+            coeff = intVal.abs().toString().getBytes(StandardCharsets.ISO_8859_1);\n@@ -4300,1 +4256,1 @@\n-                buf.append(coeff, offset, coeffLen);\n+                JLA.stringBuilderAppend(buf, coeff, offset, coeffLen);\n@@ -4302,1 +4258,1 @@\n-                buf.append(coeff, offset, -pad);\n+                JLA.stringBuilderAppend(buf, coeff, offset, -pad);\n@@ -4304,1 +4260,1 @@\n-                buf.append(coeff, -pad + offset, scale);\n+                JLA.stringBuilderAppend(buf, coeff, -pad + offset, scale);\n@@ -4308,1 +4264,1 @@\n-                buf.append(coeff[offset]);   \/\/ first character\n+                buf.append((char) coeff[offset]);   \/\/ first character\n@@ -4311,1 +4267,1 @@\n-                    buf.append(coeff, offset + 1, coeffLen - 1);\n+                    JLA.stringBuilderAppend(buf, coeff, offset + 1, coeffLen - 1);\n@@ -4336,1 +4292,1 @@\n-                    buf.append(coeff, offset, coeffLen);\n+                    JLA.stringBuilderAppend(buf, coeff, offset, coeffLen);\n@@ -4342,1 +4298,1 @@\n-                    buf.append(coeff, offset, sig);\n+                    JLA.stringBuilderAppend(buf, coeff, offset, sig);\n@@ -4344,1 +4300,1 @@\n-                    buf.append(coeff, offset + sig, coeffLen - sig);\n+                    JLA.stringBuilderAppend(buf, coeff, offset + sig, coeffLen - sig);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":32,"deletions":76,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -449,0 +449,15 @@\n+    \/**\n+     * Appends the string representation of a subarray of the latin1 encoded {@code byte} array argument to StringBuilder\n+     *\/\n+    void stringBuilderAppend(StringBuilder sb, byte[] str, int off, int len);\n+\n+    int stringSize(int i);\n+\n+    int stringSize(long i);\n+\n+    int getCharsLatin1(int i, int index, byte[] buf);\n+\n+    int getCharsLatin1(long i, int index, byte[] buf);\n+\n+    void writeDigitPairLatin1(byte[] buf, int charPos, int value);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -145,0 +145,8 @@\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testToEngineeringString(Blackhole bh) {\n+        for (BigDecimal s : bigDecimals) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n@@ -216,0 +224,8 @@\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testHugeToEngineeringString(Blackhole bh) {\n+        for (BigDecimal s : hugeArray) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n@@ -225,0 +241,8 @@\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testLargeToEngineeringString(Blackhole bh) {\n+        for (BigDecimal s : largeArray) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n@@ -233,0 +257,8 @@\n+\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void testSmallToEngineeringString(Blackhole bh) {\n+        for (BigDecimal s : smallArray) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimals.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"}]}