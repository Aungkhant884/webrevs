{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import java.lang.invoke.*;\n+import java.nio.charset.StandardCharsets;\n@@ -42,0 +44,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -312,0 +316,1 @@\n+    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n@@ -4143,0 +4148,37 @@\n+    static final class ConcatHelper {\n+        private static final MethodHandle LONG_CHAR_CHAR_CHAR;\n+        static {\n+            try {\n+                LONG_CHAR_CHAR_CHAR\n+                        = StringConcatFactory.makeConcatWithConstants(\n+                            MethodHandles.lookup(),\n+                            \"scale2\",\n+                            MethodType.methodType(String.class, long.class, char.class, char.class, char.class),\n+                            \"\\1\\1\\1\\1\"\n+                        ).dynamicInvoker();\n+            } catch (Exception e) {\n+                throw new Error(\"Bootstrap error\", e);\n+            }\n+        }\n+\n+        static String scale2(long intCompact) {\n+            long highInt = intCompact \/ 100;\n+            short pair = DecimalDigits.digitPair((int)(Math.abs(intCompact) % 100));\n+            try {\n+                if (highInt == 0 && intCompact < 0) {\n+                    byte[] buf = new byte[5];\n+                    buf[0] = '-';\n+                    buf[1] = '0';\n+                    buf[2] = '.';\n+                    buf[3] = (byte)(pair & 0xff);\n+                    buf[4] = (byte)(pair >> 8);\n+                    return JLA.newStringNoRepl(buf, StandardCharsets.ISO_8859_1);\n+                }\n+\n+                return (String) LONG_CHAR_CHAR_CHAR.invokeExact(highInt, '.', (char)(pair & 0xff), (char)(pair >> 8));\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n+            }\n+        }\n+    }\n+\n@@ -4157,2 +4199,1 @@\n-        if (scale == 2  &&\n-            intCompact >= 0 && intCompact < Integer.MAX_VALUE) {\n+        if (scale == 2 && intCompact != INFLATED) {\n@@ -4160,3 +4201,1 @@\n-            int highInt = (int)intCompact \/ 100;\n-            short pair = DecimalDigits.digitPair((int)intCompact % 100);\n-            return \"\" + highInt + '.' + (char)(pair & 0xff) + (char)(pair >> 8);\n+            return ConcatHelper.scale2(intCompact);\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":44,"deletions":5,"binary":false,"changes":49,"status":"modified"}]}