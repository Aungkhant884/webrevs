{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.*;\n@@ -41,0 +42,2 @@\n+import jdk.internal.util.DecimalDigits;\n+\n@@ -3473,9 +3476,12 @@\n-        if(scale==0) {\n-            if(intCompact!=INFLATED) {\n-                return Long.toString(intCompact);\n-            } else {\n-                return intVal.toString();\n-            }\n-        }\n-        if(this.scale<0) { \/\/ No decimal point\n-            if(signum()==0) {\n+        int scale = this.scale;\n+        long intCompact = this.intCompact;\n+\n+        if (scale == 0)\n+            return unscaledString();\n+        \/\/ currency fast path\n+        if (scale == 2 && intCompact != INFLATED)\n+            return ConcatHelper.scale2(intCompact);\n+\n+        int signum = signum();\n+        if (this.scale < 0) { \/\/ No decimal point\n+            if (signum == 0)\n@@ -3483,1 +3489,1 @@\n-            }\n+\n@@ -3486,3 +3492,3 @@\n-            if(intCompact!=INFLATED) {\n-                buf = new StringBuilder(20+trailingZeros);\n-                buf.append(intCompact);\n+            if (intCompact != INFLATED) {\n+                buf = new StringBuilder(20 + trailingZeros)\n+                        .append(intCompact);\n@@ -3491,5 +3497,2 @@\n-                buf = new StringBuilder(str.length()+trailingZeros);\n-                buf.append(str);\n-            }\n-            for (int i = 0; i < trailingZeros; i++) {\n-                buf.append('0');\n+                buf = new StringBuilder(str.length() + trailingZeros)\n+                        .append(str);\n@@ -3497,1 +3500,2 @@\n-            return buf.toString();\n+            return buf.repeat('0', trailingZeros)\n+                    .toString();\n@@ -3499,7 +3503,2 @@\n-        String str ;\n-        if(intCompact!=INFLATED) {\n-            str = Long.toString(Math.abs(intCompact));\n-        } else {\n-            str = intVal.abs().toString();\n-        }\n-        return getValueString(signum(), str, scale);\n+\n+        return layoutCharsPlain(signum, unscaledAbsString(), scale);\n@@ -3508,2 +3507,8 @@\n-    \/* Returns a digit.digit string *\/\n-    private String getValueString(int signum, String intString, int scale) {\n+    \/**\n+     *\n+     * @param signum\n+     * @param coeff the significand as an absolute value\n+     * @param scale\n+     * @return\n+     *\/\n+    private static String layoutCharsPlain(int signum, String coeff, int scale) {\n@@ -3511,0 +3516,5 @@\n+        int coeffLen = coeff.length();\n+        int insertionPoint = coeffLen - scale;\n+        if (insertionPoint == 0)  \/* Point goes right before intVal *\/\n+            return (signum < 0 ? \"-0.\" : \"0.\").concat(coeff);\n+\n@@ -3512,6 +3522,2 @@\n-        int insertionPoint = intString.length() - scale;\n-        if (insertionPoint == 0) {  \/* Point goes right before intVal *\/\n-            return (signum<0 ? \"-0.\" : \"0.\") + intString;\n-        } else if (insertionPoint > 0) { \/* Point goes inside intVal *\/\n-            buf = new StringBuilder(intString);\n-            buf.insert(insertionPoint, '.');\n+        if (insertionPoint > 0) { \/* Point goes inside intVal *\/\n+            buf = new StringBuilder();\n@@ -3519,1 +3525,3 @@\n-                buf.insert(0, '-');\n+                buf.append('-');\n+            buf.append(coeff)\n+               .insert(insertionPoint + (signum < 0 ? 1 : 0), '.');\n@@ -3521,6 +3529,4 @@\n-            buf = new StringBuilder(3-insertionPoint + intString.length());\n-            buf.append(signum<0 ? \"-0.\" : \"0.\");\n-            for (int i=0; i<-insertionPoint; i++) {\n-                buf.append('0');\n-            }\n-            buf.append(intString);\n+            buf = new StringBuilder(3 - insertionPoint + coeffLen)\n+                    .append(signum < 0 ? \"-0.\" : \"0.\")\n+                    .repeat('0', -insertionPoint)\n+                    .append(coeff);\n@@ -4150,13 +4156,25 @@\n-    \/\/ Private class to build a string representation for BigDecimal object. The\n-    \/\/ StringBuilder field acts as a buffer to hold the temporary representation\n-    \/\/ of BigDecimal. The cmpCharArray holds all the characters for the compact\n-    \/\/ representation of BigDecimal (except for '-' sign' if it is negative) if\n-    \/\/ its intCompact field is not INFLATED.\n-    static class StringBuilderHelper {\n-        final StringBuilder sb;    \/\/ Placeholder for BigDecimal string\n-        final char[] cmpCharArray; \/\/ character array to place the intCompact\n-\n-        StringBuilderHelper() {\n-            sb = new StringBuilder(32);\n-            \/\/ All non negative longs can be made to fit into 19 character array.\n-            cmpCharArray = new char[19];\n+    private static final class ConcatHelper {\n+        static final MethodHandle NEGATIVE_ZERO_CHAR_CHAR;\n+        static final MethodHandle LONG_DOT_CHAR_CHAR;\n+        static final MethodHandle INT_DOT_CHAR_CHAR;\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                NEGATIVE_ZERO_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"neg_zero_scale2\",\n+                        MethodType.methodType(String.class, char.class, char.class),\n+                        \"-0.\\1\\1\").dynamicInvoker();\n+                LONG_DOT_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"scale2\",\n+                        MethodType.methodType(String.class, long.class, char.class, char.class),\n+                        \"\\1.\\1\\1\").dynamicInvoker();\n+                INT_DOT_CHAR_CHAR = StringConcatFactory.makeConcatWithConstants(\n+                        lookup,\n+                        \"scale2\",\n+                        MethodType.methodType(String.class, int.class, char.class, char.class),\n+                        \"\\1.\\1\\1\").dynamicInvoker();\n+            } catch (Exception e) {\n+                throw new Error(\"Bootstrap error\", e);\n+            }\n@@ -4165,5 +4183,8 @@\n-        \/\/ Accessors.\n-        StringBuilder getStringBuilder() {\n-            sb.setLength(0);\n-            return sb;\n-        }\n+        static String scale2(long intCompact) {\n+            long highInt = intCompact \/ 100;\n+            short pair = DecimalDigits.digitPair((int)(Math.abs(intCompact) % 100));\n+            char c0 = (char)(pair & 0xff);\n+            char c1 = (char)(pair >> 8);\n+            try {\n+                if (highInt == 0 && intCompact < 0)\n+                    return (String) NEGATIVE_ZERO_CHAR_CHAR.invokeExact(c0, c1);\n@@ -4171,3 +4192,2 @@\n-        char[] getCompactCharArray() {\n-            return cmpCharArray;\n-        }\n+                if (highInt >= Integer.MIN_VALUE && highInt <= Integer.MAX_VALUE)\n+                    return (String) INT_DOT_CHAR_CHAR.invokeExact((int) highInt, c0, c1);\n@@ -4175,25 +4195,3 @@\n-        \/**\n-         * Places characters representing the intCompact in {@code long} into\n-         * cmpCharArray and returns the offset to the array where the\n-         * representation starts.\n-         *\n-         * @param intCompact the number to put into the cmpCharArray.\n-         * @return offset to the array where the representation starts.\n-         * Note: intCompact must be greater or equal to zero.\n-         *\/\n-        int putIntCompact(long intCompact) {\n-            assert intCompact >= 0;\n-\n-            long q;\n-            int r;\n-            \/\/ since we start from the least significant digit, charPos points to\n-            \/\/ the last character in cmpCharArray.\n-            int charPos = cmpCharArray.length;\n-\n-            \/\/ Get 2 digits\/iteration using longs until quotient fits into an int\n-            while (intCompact > Integer.MAX_VALUE) {\n-                q = intCompact \/ 100;\n-                r = (int)(intCompact - q * 100);\n-                intCompact = q;\n-                cmpCharArray[--charPos] = DIGIT_ONES[r];\n-                cmpCharArray[--charPos] = DIGIT_TENS[r];\n+                return (String) LONG_DOT_CHAR_CHAR.invokeExact(highInt, c0, c1);\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n@@ -4201,17 +4199,0 @@\n-\n-            \/\/ Get 2 digits\/iteration using ints when i2 >= 100\n-            int q2;\n-            int i2 = (int)intCompact;\n-            while (i2 >= 100) {\n-                q2 = i2 \/ 100;\n-                r  = i2 - q2 * 100;\n-                i2 = q2;\n-                cmpCharArray[--charPos] = DIGIT_ONES[r];\n-                cmpCharArray[--charPos] = DIGIT_TENS[r];\n-            }\n-\n-            cmpCharArray[--charPos] = DIGIT_ONES[i2];\n-            if (i2 >= 10)\n-                cmpCharArray[--charPos] = DIGIT_TENS[i2];\n-\n-            return charPos;\n@@ -4219,26 +4200,0 @@\n-\n-        static final char[] DIGIT_TENS = {\n-            '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n-            '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n-            '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n-            '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n-            '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n-            '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n-            '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n-            '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n-            '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n-            '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n-        };\n-\n-        static final char[] DIGIT_ONES = {\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n-        };\n@@ -4257,0 +4212,2 @@\n+        int scale = this.scale;\n+        long intCompact = this.intCompact;\n@@ -4258,12 +4215,4 @@\n-            return (intCompact != INFLATED) ?\n-                Long.toString(intCompact):\n-                intVal.toString();\n-        if (scale == 2  &&\n-            intCompact >= 0 && intCompact < Integer.MAX_VALUE) {\n-            \/\/ currency fast path\n-            int lowInt = (int)intCompact % 100;\n-            int highInt = (int)intCompact \/ 100;\n-            return (Integer.toString(highInt) + '.' +\n-                    StringBuilderHelper.DIGIT_TENS[lowInt] +\n-                    StringBuilderHelper.DIGIT_ONES[lowInt]) ;\n-        }\n+            return unscaledString();\n+        \/\/ currency fast path\n+        if (scale == 2 && intCompact != INFLATED)\n+            return ConcatHelper.scale2(intCompact);\n@@ -4271,3 +4220,0 @@\n-        StringBuilderHelper sbHelper = new StringBuilderHelper();\n-        char[] coeff;\n-        int offset;  \/\/ offset is the starting index for coeff array\n@@ -4275,7 +4221,1 @@\n-        if (intCompact != INFLATED) {\n-            offset = sbHelper.putIntCompact(Math.abs(intCompact));\n-            coeff  = sbHelper.getCompactCharArray();\n-        } else {\n-            offset = 0;\n-            coeff  = intVal.abs().toString().toCharArray();\n-        }\n+        String coeff = unscaledAbsString();\n@@ -4287,4 +4227,1 @@\n-        StringBuilder buf = sbHelper.getStringBuilder();\n-        if (signum() < 0)             \/\/ prefix '-' if negative\n-            buf.append('-');\n-        int coeffLen = coeff.length - offset;\n+        int coeffLen = coeff.length();\n@@ -4293,12 +4230,16 @@\n-            int pad = scale - coeffLen;         \/\/ count of padding zeros\n-            if (pad >= 0) {                     \/\/ 0.xxx form\n-                buf.append('0');\n-                buf.append('.');\n-                for (; pad>0; pad--) {\n-                    buf.append('0');\n-                }\n-                buf.append(coeff, offset, coeffLen);\n-            } else {                         \/\/ xx.xx form\n-                buf.append(coeff, offset, -pad);\n-                buf.append('.');\n-                buf.append(coeff, -pad + offset, scale);\n+            return layoutCharsPlain(signum(), coeff, scale);\n+        }\n+        \/\/ E-notation is needed\n+        return layoutCharsE(sci, coeff, coeffLen, adjusted);\n+    }\n+\n+    private String layoutCharsE(boolean sci, String coeff, int coeffLen, long adjusted) {\n+        StringBuilder buf = new StringBuilder(32);\n+        int signum = signum();\n+        if (signum < 0)                  \/\/ prefix '-' if negative\n+            buf.append('-');\n+        if (sci) {                       \/\/ Scientific notation\n+            buf.append(coeff.charAt(0)); \/\/ first character\n+            if (coeffLen > 1) {          \/\/ more to come\n+                buf.append('.')\n+                   .append(coeff, 1, coeffLen);\n@@ -4306,15 +4247,8 @@\n-        } else { \/\/ E-notation is needed\n-            if (sci) {                       \/\/ Scientific notation\n-                buf.append(coeff[offset]);   \/\/ first character\n-                if (coeffLen > 1) {          \/\/ more to come\n-                    buf.append('.');\n-                    buf.append(coeff, offset + 1, coeffLen - 1);\n-                }\n-            } else {                         \/\/ Engineering notation\n-                int sig = (int)(adjusted % 3);\n-                if (sig < 0)\n-                    sig += 3;                \/\/ [adjusted was negative]\n-                adjusted -= sig;             \/\/ now a multiple of 3\n-                sig++;\n-                if (signum() == 0) {\n-                    switch (sig) {\n+        } else {                         \/\/ Engineering notation\n+            int sig = (int)(adjusted % 3);\n+            if (sig < 0)\n+                sig += 3;                \/\/ [adjusted was negative]\n+            adjusted -= sig;             \/\/ now a multiple of 3\n+            sig++;\n+            if (signum == 0) {\n+                switch (sig) {\n@@ -4334,11 +4268,0 @@\n-                    }\n-                } else if (sig >= coeffLen) {   \/\/ significand all in integer\n-                    buf.append(coeff, offset, coeffLen);\n-                    \/\/ may need some zeros, too\n-                    for (int i = sig - coeffLen; i > 0; i--) {\n-                        buf.append('0');\n-                    }\n-                } else {                     \/\/ xx.xxE form\n-                    buf.append(coeff, offset, sig);\n-                    buf.append('.');\n-                    buf.append(coeff, offset + sig, coeffLen - sig);\n@@ -4346,0 +4269,7 @@\n+            } else if (sig >= coeffLen) {\/\/ significand all in integer\n+                buf.append(coeff, 0, coeffLen)\n+                   .repeat('0', sig - coeffLen); \/\/ may need some zeros, too\n+            } else {                     \/\/ xx.xxE form\n+                buf.append(coeff, 0, sig)\n+                   .append('.')\n+                   .append(coeff, sig, coeffLen);\n@@ -4347,6 +4277,6 @@\n-            if (adjusted != 0) {             \/\/ [!sci could have made 0]\n-                buf.append('E');\n-                if (adjusted > 0)            \/\/ force sign for positive\n-                    buf.append('+');\n-                buf.append(adjusted);\n-            }\n+        }\n+        if (adjusted != 0) {             \/\/ [!sci could have made 0]\n+            buf.append('E');\n+            if (adjusted > 0)            \/\/ force sign for positive\n+                buf.append('+');\n+            buf.append(adjusted);\n@@ -4357,0 +4287,15 @@\n+    \/**\n+     * Get the significand as an absolute value\n+     *\/\n+    private String unscaledAbsString() {\n+        return intCompact != INFLATED\n+                ? Long.toString(Math.abs(intCompact))\n+                : intVal.abs().toString();\n+    }\n+\n+    private String unscaledString() {\n+        return intCompact != INFLATED\n+                ? Long.toString(intCompact)\n+                : intVal.toString();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":145,"deletions":200,"binary":false,"changes":345,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.lang.invoke.*;\n@@ -48,1 +49,1 @@\n-@Fork(value = 3)\n+@Fork(value = 3, jvmArgsAppend = {\"--add-opens\", \"java.base\/java.math=ALL-UNNAMED\"})\n@@ -63,1 +64,3 @@\n-    private BigDecimal[] hugeArray, largeArray, smallArray;\n+    private BigDecimal[] hugeArray;\n+    private BigDecimal[] large2Array, small2Array;\n+    private BigDecimal[] large3Array, small3Array;\n@@ -99,3 +102,4 @@\n-        * Large numbers less than MAX_LONG but larger than MAX_INT\n-        *\/\n-        largeArray = new BigDecimal[TEST_SIZE];\n+         * Large numbers less than MAX_LONG but larger than MAX_INT\n+         *\/\n+        large2Array = new BigDecimal[TEST_SIZE];\n+        large3Array = new BigDecimal[TEST_SIZE];\n@@ -104,3 +108,4 @@\n-        * Small number less than MAX_INT\n-        *\/\n-        smallArray = new BigDecimal[TEST_SIZE];\n+         * Small number less than MAX_INT\n+         *\/\n+        small2Array = new BigDecimal[TEST_SIZE];\n+        small3Array = new BigDecimal[TEST_SIZE];\n@@ -113,2 +118,6 @@\n-            largeArray[i] = new BigDecimal(\"\" + ((long) value + (long) Integer.MAX_VALUE) + \".55\");\n-            smallArray[i] = new BigDecimal(\"\" + ((long) value \/ 1000) + \".55\");\n+\n+            large2Array[i] = new BigDecimal(\"\" + ((long) value + (long) Integer.MAX_VALUE) + \".55\");\n+            large3Array[i] = new BigDecimal(\"\" + ((long) value + (long) Integer.MAX_VALUE) + \".555\");\n+\n+            small2Array[i] = new BigDecimal(\"\" + ((long) value \/ 1000) + \".55\");\n+            small3Array[i] = new BigDecimal(\"\" + ((long) value \/ 1000) + \".555\");\n@@ -136,9 +145,0 @@\n-    \/** Invokes the toString method of BigDecimal with various different values. *\/\n-    @Benchmark\n-    @OperationsPerInvocation(TEST_SIZE)\n-    public void testToString(Blackhole bh) {\n-        for (BigDecimal s : bigDecimals) {\n-            bh.consume(s.toString());\n-        }\n-    }\n-\n@@ -207,1 +207,1 @@\n-    \/** Test BigDecimal.toString() with huge numbers larger than MAX_LONG *\/\n+    \/** Test BigDecimal.toString() with large numbers (scale 2) less than MAX_LONG but larger than MAX_INT *\/\n@@ -210,1 +210,1 @@\n-    public void testHugeToString(Blackhole bh) {\n+    public void hugeLayoutCharsToString(Blackhole bh) throws Throwable {\n@@ -212,1 +212,1 @@\n-            bh.consume(s.toString());\n+            bh.consume((String) BigDecimalAccess.layoutChars.invokeExact(s, true));\n@@ -216,1 +216,1 @@\n-    \/** Test BigDecimal.toString() with large numbers less than MAX_LONG but larger than MAX_INT *\/\n+    \/** Test BigDecimal.toEngineeringString() with huge numbers larger than MAX_LONG *\/\n@@ -219,3 +219,12 @@\n-    public void testLargeToString(Blackhole bh) {\n-        for (BigDecimal s : largeArray) {\n-            bh.consume(s.toString());\n+    public void hugeEngineeringToString(Blackhole bh) {\n+        for (BigDecimal s : hugeArray) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toEngineeringString() with huge numbers larger than MAX_LONG *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void hugePlainToString(Blackhole bh) {\n+        for (BigDecimal s : hugeArray) {\n+            bh.consume(s.toPlainString());\n@@ -225,1 +234,1 @@\n-    \/** Test BigDecimal.toString() with small numbers less than MAX_INT *\/\n+    \/** Test BigDecimal.toString() with large numbers (scale 2) less than MAX_LONG but larger than MAX_INT *\/\n@@ -228,3 +237,115 @@\n-    public void testSmallToString(Blackhole bh) {\n-        for (BigDecimal s : smallArray) {\n-            bh.consume(s.toString());\n+    public void largeScale2LayoutCharsToString(Blackhole bh) throws Throwable {\n+        for (BigDecimal s : large2Array) {\n+            bh.consume((String) BigDecimalAccess.layoutChars.invokeExact(s, true));\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toEngineeringString() with large numbers (scale 2) less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void largeScale2EngineeringToString(Blackhole bh) {\n+        for (BigDecimal s : large2Array) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toPlainString() with large numbers (scale 2) less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void largeScale2PlainToString(Blackhole bh) {\n+        for (BigDecimal s : large2Array) {\n+            bh.consume(s.toPlainString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toString() with large numbers (scale 3) less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void largeScale3LayoutCharsToString(Blackhole bh) throws Throwable {\n+        for (BigDecimal s : large3Array) {\n+            bh.consume((String) BigDecimalAccess.layoutChars.invokeExact(s, true));\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toEngineeringString() with large numbers (scale 3) less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void largeScale3EngineeringToString(Blackhole bh) {\n+        for (BigDecimal s : large3Array) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n+\n+    \/** Test BigDecimal.toPlainString() with large numbers (scale 3) less than MAX_LONG but larger than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void largeScale3PlainToString(Blackhole bh) {\n+        for (BigDecimal s : large3Array) {\n+            bh.consume(s.toPlainString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toString() with small numbers (scale 2) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale2LayoutCharsToString(Blackhole bh) throws Throwable {\n+        for (BigDecimal s : small2Array) {\n+            bh.consume((String) BigDecimalAccess.layoutChars.invokeExact(s, true));\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toEngineeringString() with small numbers (scale 2) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale2EngineeringToString(Blackhole bh) {\n+        for (BigDecimal s : small2Array) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toPlainString() with small numbers (scale 3) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale2PlainToString(Blackhole bh) {\n+        for (BigDecimal s : small2Array) {\n+            bh.consume(s.toPlainString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toString() with small numbers (scale 3) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale3LayoutCharsToString(Blackhole bh) throws Throwable {\n+        for (BigDecimal s : small3Array) {\n+            bh.consume((String) BigDecimalAccess.layoutChars.invokeExact(s, true));\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toEngineeringString() with small numbers (scale 3) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale3EngineeringToString(Blackhole bh) {\n+        for (BigDecimal s : small3Array) {\n+            bh.consume(s.toEngineeringString());\n+        }\n+    }\n+\n+    \/** Test BigDecimal.toPlainString() with small numbers (scale 3) less than MAX_INT *\/\n+    @Benchmark\n+    @OperationsPerInvocation(TEST_SIZE)\n+    public void smallScale3PlainToString(Blackhole bh) {\n+        for (BigDecimal s : small3Array) {\n+            bh.consume(s.toPlainString());\n+        }\n+    }\n+\n+    static class BigDecimalAccess {\n+        final static MethodHandle layoutChars;\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(BigDecimal.class, MethodHandles.lookup());\n+                layoutChars = lookup.findVirtual(BigDecimal.class, \"layoutChars\", MethodType.methodType(String.class, boolean.class));\n+            } catch (Throwable e) {\n+                throw new AssertionError(e);\n+            }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/math\/BigDecimals.java","additions":151,"deletions":30,"binary":false,"changes":181,"status":"modified"}]}