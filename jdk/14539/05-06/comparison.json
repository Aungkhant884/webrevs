{"files":[{"patch":"@@ -111,2 +111,4 @@\n-    public static final String VECTOR_SIZE_ANY = VECTOR_SIZE + \"any\"; \/\/ default for count \"=0\" and failOn\n-    public static final String VECTOR_SIZE_MAX = VECTOR_SIZE + \"max_for_type\"; \/\/ default in count\n+    public static final String VECTOR_SIZE_TAG_ANY = \"any\";\n+    public static final String VECTOR_SIZE_TAG_MAX = \"max_for_type\";\n+    public static final String VECTOR_SIZE_ANY = VECTOR_SIZE + VECTOR_SIZE_TAG_ANY; \/\/ default for count \"=0\" and failOn\n+    public static final String VECTOR_SIZE_MAX = VECTOR_SIZE + VECTOR_SIZE_TAG_MAX; \/\/ default in count\n@@ -2239,1 +2241,1 @@\n-        if (sizeString.equals(\"any\")) {\n+        if (sizeString.equals(VECTOR_SIZE_TAG_ANY)) {\n@@ -2287,10 +2289,10 @@\n-            case \"max_for_type\"  -> String.valueOf(getMaxElementsForType(typeString, vmInfo));\n-            case \"max_byte\"      -> String.valueOf(getMaxElementsForType(\"byte\", vmInfo));\n-            case \"max_char\"      -> String.valueOf(getMaxElementsForType(\"char\", vmInfo));\n-            case \"max_short\"     -> String.valueOf(getMaxElementsForType(\"short\", vmInfo));\n-            case \"max_int\"       -> String.valueOf(getMaxElementsForType(\"int\", vmInfo));\n-            case \"max_long\"      -> String.valueOf(getMaxElementsForType(\"long\", vmInfo));\n-            case \"max_float\"     -> String.valueOf(getMaxElementsForType(\"float\", vmInfo));\n-            case \"max_double\"    -> String.valueOf(getMaxElementsForType(\"double\", vmInfo));\n-            case \"LoopMaxUnroll\" -> String.valueOf(vmInfo.getLong(\"LoopMaxUnroll\", -1));\n-            default              -> sizeTagString;\n+            case VECTOR_SIZE_TAG_MAX -> String.valueOf(getMaxElementsForType(typeString, vmInfo));\n+            case \"max_byte\"          -> String.valueOf(getMaxElementsForType(\"byte\", vmInfo));\n+            case \"max_char\"          -> String.valueOf(getMaxElementsForType(\"char\", vmInfo));\n+            case \"max_short\"         -> String.valueOf(getMaxElementsForType(\"short\", vmInfo));\n+            case \"max_int\"           -> String.valueOf(getMaxElementsForType(\"int\", vmInfo));\n+            case \"max_long\"          -> String.valueOf(getMaxElementsForType(\"long\", vmInfo));\n+            case \"max_float\"         -> String.valueOf(getMaxElementsForType(\"float\", vmInfo));\n+            case \"max_double\"        -> String.valueOf(getMaxElementsForType(\"double\", vmInfo));\n+            case \"LoopMaxUnroll\"     -> String.valueOf(vmInfo.getLong(\"LoopMaxUnroll\", -1));\n+            default                  -> sizeTagString;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import compiler.lib.ir_framework.IRNode;\n@@ -92,1 +93,1 @@\n-        String vectorSizeTag = expectMaxSizeForVectorNode() ? \"max_for_type\" : \"any\";\n+        String vectorSizeTag = expectMaxSizeForVectorNode() ? IRNode.VECTOR_SIZE_TAG_MAX : IRNode.VECTOR_SIZE_TAG_ANY;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawCountsConstraint.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import compiler.lib.ir_framework.IRNode;\n@@ -55,1 +56,1 @@\n-        return Constraint.createFailOn(rawIRNode.regex(compilePhase, vmInfo, \"any\"), constraintIndex, compilationOutput);\n+        return Constraint.createFailOn(rawIRNode.regex(compilePhase, vmInfo, IRNode.VECTOR_SIZE_TAG_ANY), constraintIndex, compilationOutput);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawFailOnConstraint.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    private static final Pattern VMINFO_PATTERN =\n+    private static final Pattern VM_INFO_PATTERN =\n@@ -115,33 +115,0 @@\n-    }\n-\n-    \/**\n-     * Extract VMInfo from the irEncoding.\n-     *\/\n-    public VMInfo parseVMInfo(String irEncoding) {\n-        Map<String, String> map = new HashMap<>();\n-        String[] lines = getVMInfoLines(irEncoding);\n-        for (String s : lines) {\n-            String line = s.trim();\n-            String[] splitLine = line.split(\":\", 2);\n-            if (splitLine.length != 2) {\n-                throw new TestFrameworkException(\"Invalid VMInfo key:value encoding. Found: \" + splitLine[0]);\n-            }\n-            String key = splitLine[0];\n-            String value = splitLine[1];\n-            map.put(key, value);\n-        }\n-        return new VMInfo(map);\n-    }\n-\n-    \/**\n-     * Extract the VMInfo from the irEncoding string, strip away the header and return the individual key-value lines.\n-     *\/\n-    private String[] getVMInfoLines(String irEncoding) {\n-        Matcher matcher = VMINFO_PATTERN.matcher(irEncoding);\n-        TestFramework.check(matcher.find(), \"Did not find VMInfo in:\" + System.lineSeparator() + irEncoding);\n-        String lines = matcher.group(1).trim();\n-        if (lines.isEmpty()) {\n-            \/\/ Nothing to IR match.\n-            return new String[0];\n-        }\n-        return lines.split(\"\\\\R\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/IREncodingParser.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        VMInfo vmInfo = irEncodingParser.parseVMInfo(irEncoding);\n+        VMInfo vmInfo = VMInfoParser.parseVMInfo(irEncoding);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/TestClassParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.driver.irmatching.parser.hotspot.HotSpotPidFileParser;\n+import compiler.lib.ir_framework.shared.TestFormat;\n+import compiler.lib.ir_framework.shared.TestFrameworkException;\n+import compiler.lib.ir_framework.test.IREncodingPrinter;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Class to parse the VMInfo emitted by the test VM and creating {@link VMInfo} objects for each entry.\n+ *\n+ * @see VMInfo\n+ *\/\n+public class VMInfoParser {\n+\n+    private static final Pattern VM_INFO_PATTERN =\n+            Pattern.compile(\"(?<=\" + IREncodingPrinter.START_VMINFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + IREncodingPrinter.END_VMINFO + \")\");\n+\n+    \/**\n+     * Extract VMInfo from the irEncoding.\n+     *\/\n+    public static VMInfo parseVMInfo(String irEncoding) {\n+        Map<String, String> map = new HashMap<>();\n+        String[] lines = getVMInfoLines(irEncoding);\n+        for (String s : lines) {\n+            String line = s.trim();\n+            String[] splitLine = line.split(\":\", 2);\n+            if (splitLine.length != 2) {\n+                throw new TestFrameworkException(\"Invalid VMInfo key:value encoding. Found: \" + splitLine[0]);\n+            }\n+            String key = splitLine[0];\n+            String value = splitLine[1];\n+            map.put(key, value);\n+        }\n+        return new VMInfo(map);\n+    }\n+\n+    \/**\n+     * Extract the VMInfo from the irEncoding string, strip away the header and return the individual key-value lines.\n+     *\/\n+    private static String[] getVMInfoLines(String irEncoding) {\n+        Matcher matcher = VM_INFO_PATTERN.matcher(irEncoding);\n+        TestFramework.check(matcher.find(), \"Did not find VMInfo in:\" + System.lineSeparator() + irEncoding);\n+        String lines = matcher.group(1).trim();\n+        if (lines.isEmpty()) {\n+            \/\/ Nothing to IR match.\n+            return new String[0];\n+        }\n+        return lines.split(\"\\\\R\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfoParser.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}