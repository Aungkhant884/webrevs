{"files":[{"patch":"@@ -49,2 +49,0 @@\n-    private static final Pattern VM_INFO_PATTERN =\n-            Pattern.compile(\"(?<=\" + IREncodingPrinter.START_VMINFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + IREncodingPrinter.END_VMINFO + \")\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/IREncodingParser.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import compiler.lib.ir_framework.test.IREncodingPrinter;\n+import compiler.lib.ir_framework.test.VMInfoPrinter;\n@@ -47,1 +47,1 @@\n-            Pattern.compile(\"(?<=\" + IREncodingPrinter.START_VMINFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + IREncodingPrinter.END_VMINFO + \")\");\n+            Pattern.compile(\"(?<=\" + VMInfoPrinter.START_VM_INFO + \"\\r?\\n).*\\\\R([\\\\s\\\\S]*)(?=\" + VMInfoPrinter.END_VM_INFO + \")\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/VMInfoParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-    public static final String START_VMINFO = \"##### IRMatchingVMInfo - used by TestFramework #####\";\n-    public static final String END_VMINFO = \"----- END VMInfo -----\";\n@@ -372,12 +370,0 @@\n-\n-        StringBuilder vmInfo = new StringBuilder();\n-        vmInfo.append(START_VMINFO).append(System.lineSeparator());\n-        vmInfo.append(\"<key>:<value>\").append(System.lineSeparator());\n-        String cpuFeatures = WHITE_BOX.getCPUFeatures();\n-        vmInfo.append(\"cpuFeatures:\" + cpuFeatures).append(System.lineSeparator());\n-        long maxVectorSize = WHITE_BOX.getIntxVMFlag(\"MaxVectorSize\");\n-        vmInfo.append(\"MaxVectorSize:\" + maxVectorSize).append(System.lineSeparator());\n-        long loopMaxUnroll = WHITE_BOX.getIntxVMFlag(\"LoopMaxUnroll\");\n-        vmInfo.append(\"LoopMaxUnroll:\" + loopMaxUnroll).append(System.lineSeparator());\n-        vmInfo.append(END_VMINFO);\n-        TestFrameworkSocket.write(vmInfo.toString(), \"VMInfo\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -269,0 +269,1 @@\n+            VMInfoPrinter.emit();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.lib.ir_framework.test;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.shared.*;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+\/**\n+ * Prints some test VM info to the socket. \n+ *\/\n+public class VMInfoPrinter {\n+    public static final String START_VM_INFO = \"##### IRMatchingVMInfo - used by TestFramework #####\";\n+    public static final String END_VM_INFO = \"----- END VMInfo -----\";\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    public static void emit() {\n+        StringBuilder vmInfo = new StringBuilder();\n+        vmInfo.append(START_VM_INFO).append(System.lineSeparator());\n+        vmInfo.append(\"<key>:<value>\").append(System.lineSeparator());\n+        String cpuFeatures = WHITE_BOX.getCPUFeatures();\n+        vmInfo.append(\"cpuFeatures:\" + cpuFeatures).append(System.lineSeparator());\n+        long maxVectorSize = WHITE_BOX.getIntxVMFlag(\"MaxVectorSize\");\n+        vmInfo.append(\"MaxVectorSize:\" + maxVectorSize).append(System.lineSeparator());\n+        long loopMaxUnroll = WHITE_BOX.getIntxVMFlag(\"LoopMaxUnroll\");\n+        vmInfo.append(\"LoopMaxUnroll:\" + loopMaxUnroll).append(System.lineSeparator());\n+        vmInfo.append(END_VM_INFO);\n+        TestFrameworkSocket.write(vmInfo.toString(), \"VMInfo\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/VMInfoPrinter.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}