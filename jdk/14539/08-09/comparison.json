{"files":[{"patch":"@@ -122,0 +122,8 @@\n+    private static final String TYPE_BYTE   = \"byte\";\n+    private static final String TYPE_CHAR   = \"char\";\n+    private static final String TYPE_SHORT  = \"short\";\n+    private static final String TYPE_INT    = \"int\";\n+    private static final String TYPE_LONG   = \"long\";\n+    private static final String TYPE_FLOAT  = \"float\";\n+    private static final String TYPE_DOUBLE = \"double\";\n+\n@@ -169,1 +177,1 @@\n-        vectorNode(ABS_VB, \"AbsVB\", \"byte\");\n+        vectorNode(ABS_VB, \"AbsVB\", TYPE_BYTE);\n@@ -176,1 +184,1 @@\n-        vectorNode(ABS_VS, \"AbsVS\", \"short\");\n+        vectorNode(ABS_VS, \"AbsVS\", TYPE_SHORT);\n@@ -181,1 +189,1 @@\n-        vectorNode(ABS_VI, \"AbsVI\", \"int\");\n+        vectorNode(ABS_VI, \"AbsVI\", TYPE_INT);\n@@ -186,1 +194,1 @@\n-        vectorNode(ABS_VL, \"AbsVL\", \"long\");\n+        vectorNode(ABS_VL, \"AbsVL\", TYPE_LONG);\n@@ -191,1 +199,1 @@\n-        vectorNode(ABS_VF, \"AbsVF\", \"float\");\n+        vectorNode(ABS_VF, \"AbsVF\", TYPE_FLOAT);\n@@ -196,1 +204,1 @@\n-        vectorNode(ABS_VD, \"AbsVD\", \"double\");\n+        vectorNode(ABS_VD, \"AbsVD\", TYPE_DOUBLE);\n@@ -216,1 +224,1 @@\n-        vectorNode(ADD_VD, \"AddVD\", \"double\");\n+        vectorNode(ADD_VD, \"AddVD\", TYPE_DOUBLE);\n@@ -221,1 +229,1 @@\n-        vectorNode(ADD_VI, \"AddVI\", \"int\");\n+        vectorNode(ADD_VI, \"AddVI\", TYPE_INT);\n@@ -226,1 +234,1 @@\n-        vectorNode(ADD_VF, \"AddVF\", \"float\");\n+        vectorNode(ADD_VF, \"AddVF\", TYPE_FLOAT);\n@@ -231,1 +239,1 @@\n-        vectorNode(ADD_VB, \"AddVB\", \"byte\");\n+        vectorNode(ADD_VB, \"AddVB\", TYPE_BYTE);\n@@ -236,1 +244,1 @@\n-        vectorNode(ADD_VS, \"AddVS\", \"short\");\n+        vectorNode(ADD_VS, \"AddVS\", TYPE_SHORT);\n@@ -241,1 +249,1 @@\n-        vectorNode(ADD_VL, \"AddVL\", \"long\");\n+        vectorNode(ADD_VL, \"AddVL\", TYPE_LONG);\n@@ -310,1 +318,1 @@\n-        vectorNode(AND_VB, \"AndV\", \"byte\");\n+        vectorNode(AND_VB, \"AndV\", TYPE_BYTE);\n@@ -315,1 +323,1 @@\n-        vectorNode(AND_VC, \"AndV\", \"char\");\n+        vectorNode(AND_VC, \"AndV\", TYPE_CHAR);\n@@ -320,1 +328,1 @@\n-        vectorNode(AND_VS, \"AndV\", \"short\");\n+        vectorNode(AND_VS, \"AndV\", TYPE_SHORT);\n@@ -325,1 +333,1 @@\n-        vectorNode(AND_VI, \"AndV\", \"int\");\n+        vectorNode(AND_VI, \"AndV\", TYPE_INT);\n@@ -330,1 +338,1 @@\n-        vectorNode(AND_VL, \"AndV\", \"long\");\n+        vectorNode(AND_VL, \"AndV\", TYPE_LONG);\n@@ -481,1 +489,1 @@\n-        vectorNode(DIV_VF, \"DivVF\", \"float\");\n+        vectorNode(DIV_VF, \"DivVF\", TYPE_FLOAT);\n@@ -486,1 +494,1 @@\n-        vectorNode(DIV_VD, \"DivVD\", \"double\");\n+        vectorNode(DIV_VD, \"DivVD\", TYPE_DOUBLE);\n@@ -518,1 +526,1 @@\n-        vectorNode(FMA_VF, \"FmaVF\", \"float\");\n+        vectorNode(FMA_VF, \"FmaVF\", TYPE_FLOAT);\n@@ -523,1 +531,1 @@\n-        vectorNode(FMA_VD, \"FmaVD\", \"double\");\n+        vectorNode(FMA_VD, \"FmaVD\", TYPE_DOUBLE);\n@@ -687,1 +695,1 @@\n-        vectorNode(LOAD_VB, \"LoadVector\", \"byte\");\n+        vectorNode(LOAD_VB, \"LoadVector\", TYPE_BYTE);\n@@ -692,1 +700,1 @@\n-        vectorNode(LOAD_VC, \"LoadVector\", \"char\");\n+        vectorNode(LOAD_VC, \"LoadVector\", TYPE_CHAR);\n@@ -697,1 +705,1 @@\n-        vectorNode(LOAD_VS, \"LoadVector\", \"short\");\n+        vectorNode(LOAD_VS, \"LoadVector\", TYPE_SHORT);\n@@ -702,1 +710,1 @@\n-        vectorNode(LOAD_VI, \"LoadVector\", \"int\");\n+        vectorNode(LOAD_VI, \"LoadVector\", TYPE_INT);\n@@ -707,1 +715,1 @@\n-        vectorNode(LOAD_VL, \"LoadVector\", \"long\");\n+        vectorNode(LOAD_VL, \"LoadVector\", TYPE_LONG);\n@@ -712,1 +720,1 @@\n-        vectorNode(LOAD_VF, \"LoadVector\", \"float\");\n+        vectorNode(LOAD_VF, \"LoadVector\", TYPE_FLOAT);\n@@ -717,1 +725,1 @@\n-        vectorNode(LOAD_VD, \"LoadVector\", \"double\");\n+        vectorNode(LOAD_VD, \"LoadVector\", TYPE_DOUBLE);\n@@ -759,1 +767,1 @@\n-        vectorNode(LSHIFT_VB, \"LShiftVB\", \"byte\");\n+        vectorNode(LSHIFT_VB, \"LShiftVB\", TYPE_BYTE);\n@@ -764,1 +772,1 @@\n-        vectorNode(LSHIFT_VS, \"LShiftVS\", \"short\");\n+        vectorNode(LSHIFT_VS, \"LShiftVS\", TYPE_SHORT);\n@@ -769,1 +777,1 @@\n-        vectorNode(LSHIFT_VC, \"LShiftVS\", \"char\"); \/\/ using short op with char type\n+        vectorNode(LSHIFT_VC, \"LShiftVS\", TYPE_CHAR); \/\/ using short op with char type\n@@ -774,1 +782,1 @@\n-        vectorNode(LSHIFT_VI, \"LShiftVI\", \"int\");\n+        vectorNode(LSHIFT_VI, \"LShiftVI\", TYPE_INT);\n@@ -779,1 +787,1 @@\n-        vectorNode(LSHIFT_VL, \"LShiftVL\", \"long\");\n+        vectorNode(LSHIFT_VL, \"LShiftVL\", TYPE_LONG);\n@@ -824,1 +832,1 @@\n-        vectorNode(MAX_VI, \"MaxV\", \"int\");\n+        vectorNode(MAX_VI, \"MaxV\", TYPE_INT);\n@@ -829,1 +837,1 @@\n-        vectorNode(MAX_VF, \"MaxV\", \"float\");\n+        vectorNode(MAX_VF, \"MaxV\", TYPE_FLOAT);\n@@ -834,1 +842,1 @@\n-        vectorNode(MAX_VD, \"MaxV\", \"double\");\n+        vectorNode(MAX_VD, \"MaxV\", TYPE_DOUBLE);\n@@ -884,1 +892,1 @@\n-        vectorNode(MIN_VI, \"MinV\", \"int\");\n+        vectorNode(MIN_VI, \"MinV\", TYPE_INT);\n@@ -889,1 +897,1 @@\n-        vectorNode(MIN_VF, \"MinV\", \"float\");\n+        vectorNode(MIN_VF, \"MinV\", TYPE_FLOAT);\n@@ -894,1 +902,1 @@\n-        vectorNode(MIN_VD, \"MinV\", \"double\");\n+        vectorNode(MIN_VD, \"MinV\", TYPE_DOUBLE);\n@@ -924,1 +932,1 @@\n-        vectorNode(MUL_VL, \"MulVL\", \"long\");\n+        vectorNode(MUL_VL, \"MulVL\", TYPE_LONG);\n@@ -929,1 +937,1 @@\n-        vectorNode(MUL_VI, \"MulVI\", \"int\");\n+        vectorNode(MUL_VI, \"MulVI\", TYPE_INT);\n@@ -934,1 +942,1 @@\n-        vectorNode(MUL_VF, \"MulVF\", \"float\");\n+        vectorNode(MUL_VF, \"MulVF\", TYPE_FLOAT);\n@@ -939,1 +947,1 @@\n-        vectorNode(MUL_VD, \"MulVD\", \"double\");\n+        vectorNode(MUL_VD, \"MulVD\", TYPE_DOUBLE);\n@@ -944,1 +952,1 @@\n-        vectorNode(MUL_VB, \"MulVB\", \"byte\");\n+        vectorNode(MUL_VB, \"MulVB\", TYPE_BYTE);\n@@ -949,1 +957,1 @@\n-        vectorNode(MUL_VS, \"MulVS\", \"short\");\n+        vectorNode(MUL_VS, \"MulVS\", TYPE_SHORT);\n@@ -984,1 +992,1 @@\n-        vectorNode(NEG_VF, \"NegVF\", \"float\");\n+        vectorNode(NEG_VF, \"NegVF\", TYPE_FLOAT);\n@@ -989,1 +997,1 @@\n-        vectorNode(NEG_VD, \"NegVD\", \"double\");\n+        vectorNode(NEG_VD, \"NegVD\", TYPE_DOUBLE);\n@@ -1009,1 +1017,1 @@\n-        vectorNode(OR_VB, \"OrV\", \"byte\");\n+        vectorNode(OR_VB, \"OrV\", TYPE_BYTE);\n@@ -1014,1 +1022,1 @@\n-        vectorNode(OR_VS, \"OrV\", \"short\");\n+        vectorNode(OR_VS, \"OrV\", TYPE_SHORT);\n@@ -1019,1 +1027,1 @@\n-        vectorNode(OR_VI, \"OrV\", \"int\");\n+        vectorNode(OR_VI, \"OrV\", TYPE_INT);\n@@ -1024,1 +1032,1 @@\n-        vectorNode(OR_VL, \"OrV\", \"long\");\n+        vectorNode(OR_VL, \"OrV\", TYPE_LONG);\n@@ -1055,1 +1063,1 @@\n-        vectorNode(POPCOUNT_VI, \"PopCountVI\", \"int\");\n+        vectorNode(POPCOUNT_VI, \"PopCountVI\", TYPE_INT);\n@@ -1060,1 +1068,1 @@\n-        vectorNode(POPCOUNT_VL, \"PopCountVL\", \"long\");\n+        vectorNode(POPCOUNT_VL, \"PopCountVL\", TYPE_LONG);\n@@ -1065,1 +1073,1 @@\n-        vectorNode(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\", \"long\");\n+        vectorNode(COUNTTRAILINGZEROS_VL, \"CountTrailingZerosV\", TYPE_LONG);\n@@ -1070,1 +1078,1 @@\n-        vectorNode(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\", \"long\");\n+        vectorNode(COUNTLEADINGZEROS_VL, \"CountLeadingZerosV\", TYPE_LONG);\n@@ -1141,1 +1149,1 @@\n-        vectorNode(REVERSE_BYTES_VB, \"ReverseBytesV\", \"byte\");\n+        vectorNode(REVERSE_BYTES_VB, \"ReverseBytesV\", TYPE_BYTE);\n@@ -1146,1 +1154,1 @@\n-        vectorNode(REVERSE_BYTES_VS, \"ReverseBytesV\", \"short\");\n+        vectorNode(REVERSE_BYTES_VS, \"ReverseBytesV\", TYPE_SHORT);\n@@ -1151,1 +1159,1 @@\n-        vectorNode(REVERSE_BYTES_VI, \"ReverseBytesV\", \"int\");\n+        vectorNode(REVERSE_BYTES_VI, \"ReverseBytesV\", TYPE_INT);\n@@ -1156,1 +1164,1 @@\n-        vectorNode(REVERSE_BYTES_VL, \"ReverseBytesV\", \"long\");\n+        vectorNode(REVERSE_BYTES_VL, \"ReverseBytesV\", TYPE_LONG);\n@@ -1171,1 +1179,1 @@\n-        vectorNode(REVERSE_VI, \"ReverseV\", \"int\");\n+        vectorNode(REVERSE_VI, \"ReverseV\", TYPE_INT);\n@@ -1176,1 +1184,1 @@\n-        vectorNode(REVERSE_VL, \"ReverseV\", \"long\");\n+        vectorNode(REVERSE_VL, \"ReverseV\", TYPE_LONG);\n@@ -1181,1 +1189,1 @@\n-        vectorNode(ROUND_VD, \"RoundVD\", \"long\");\n+        vectorNode(ROUND_VD, \"RoundVD\", TYPE_LONG);\n@@ -1186,1 +1194,1 @@\n-        vectorNode(ROUND_VF, \"RoundVF\", \"int\");\n+        vectorNode(ROUND_VF, \"RoundVF\", TYPE_INT);\n@@ -1211,1 +1219,1 @@\n-        vectorNode(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\", \"double\");\n+        vectorNode(ROUND_DOUBLE_MODE_V, \"RoundDoubleModeV\", TYPE_DOUBLE);\n@@ -1231,1 +1239,1 @@\n-        vectorNode(RSHIFT_VB, \"RShiftVB\", \"byte\");\n+        vectorNode(RSHIFT_VB, \"RShiftVB\", TYPE_BYTE);\n@@ -1236,1 +1244,1 @@\n-        vectorNode(RSHIFT_VS, \"RShiftVS\", \"short\");\n+        vectorNode(RSHIFT_VS, \"RShiftVS\", TYPE_SHORT);\n@@ -1241,1 +1249,1 @@\n-        vectorNode(RSHIFT_VC, \"RShiftVS\", \"char\"); \/\/ short computation with char type\n+        vectorNode(RSHIFT_VC, \"RShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n@@ -1246,1 +1254,1 @@\n-        vectorNode(RSHIFT_VI, \"RShiftVI\", \"int\");\n+        vectorNode(RSHIFT_VI, \"RShiftVI\", TYPE_INT);\n@@ -1251,1 +1259,1 @@\n-        vectorNode(RSHIFT_VL, \"RShiftVL\", \"long\");\n+        vectorNode(RSHIFT_VL, \"RShiftVL\", TYPE_LONG);\n@@ -1267,1 +1275,1 @@\n-        vectorNode(SIGNUM_VD, \"SignumVD\", \"double\");\n+        vectorNode(SIGNUM_VD, \"SignumVD\", TYPE_DOUBLE);\n@@ -1272,1 +1280,1 @@\n-        vectorNode(SIGNUM_VF, \"SignumVF\", \"float\");\n+        vectorNode(SIGNUM_VF, \"SignumVF\", TYPE_FLOAT);\n@@ -1277,1 +1285,1 @@\n-        vectorNode(SQRT_VF, \"SqrtVF\", \"float\");\n+        vectorNode(SQRT_VF, \"SqrtVF\", TYPE_FLOAT);\n@@ -1282,1 +1290,1 @@\n-        vectorNode(SQRT_VD, \"SqrtVD\", \"double\");\n+        vectorNode(SQRT_VD, \"SqrtVD\", TYPE_DOUBLE);\n@@ -1423,1 +1431,1 @@\n-        vectorNode(SUB_VB, \"SubVB\", \"byte\");\n+        vectorNode(SUB_VB, \"SubVB\", TYPE_BYTE);\n@@ -1428,1 +1436,1 @@\n-        vectorNode(SUB_VS, \"SubVS\", \"short\");\n+        vectorNode(SUB_VS, \"SubVS\", TYPE_SHORT);\n@@ -1433,1 +1441,1 @@\n-        vectorNode(SUB_VI, \"SubVI\", \"int\");\n+        vectorNode(SUB_VI, \"SubVI\", TYPE_INT);\n@@ -1438,1 +1446,1 @@\n-        vectorNode(SUB_VL, \"SubVL\", \"long\");\n+        vectorNode(SUB_VL, \"SubVL\", TYPE_LONG);\n@@ -1443,1 +1451,1 @@\n-        vectorNode(SUB_VF, \"SubVF\", \"float\");\n+        vectorNode(SUB_VF, \"SubVF\", TYPE_FLOAT);\n@@ -1448,1 +1456,1 @@\n-        vectorNode(SUB_VD, \"SubVD\", \"double\");\n+        vectorNode(SUB_VD, \"SubVD\", TYPE_DOUBLE);\n@@ -1523,1 +1531,1 @@\n-        vectorNode(URSHIFT_VB, \"URShiftVB\", \"byte\");\n+        vectorNode(URSHIFT_VB, \"URShiftVB\", TYPE_BYTE);\n@@ -1528,1 +1536,1 @@\n-        vectorNode(URSHIFT_VS, \"URShiftVS\", \"short\");\n+        vectorNode(URSHIFT_VS, \"URShiftVS\", TYPE_SHORT);\n@@ -1533,1 +1541,1 @@\n-        vectorNode(URSHIFT_VC, \"URShiftVS\", \"char\"); \/\/ short computation with char type\n+        vectorNode(URSHIFT_VC, \"URShiftVS\", TYPE_CHAR); \/\/ short computation with char type\n@@ -1538,1 +1546,1 @@\n-        vectorNode(URSHIFT_VI, \"URShiftVI\", \"int\");\n+        vectorNode(URSHIFT_VI, \"URShiftVI\", TYPE_INT);\n@@ -1543,1 +1551,1 @@\n-        vectorNode(URSHIFT_VL, \"URShiftVL\", \"long\");\n+        vectorNode(URSHIFT_VL, \"URShiftVL\", TYPE_LONG);\n@@ -1558,1 +1566,1 @@\n-        vectorNode(BLEND_VB, \"VectorBlend\", \"byte\");\n+        vectorNode(BLEND_VB, \"VectorBlend\", TYPE_BYTE);\n@@ -1563,1 +1571,1 @@\n-        vectorNode(BLEND_VF, \"VectorBlend\", \"float\");\n+        vectorNode(BLEND_VF, \"VectorBlend\", TYPE_FLOAT);\n@@ -1568,1 +1576,1 @@\n-        vectorNode(BLEND_VD, \"VectorBlend\", \"double\");\n+        vectorNode(BLEND_VD, \"VectorBlend\", TYPE_DOUBLE);\n@@ -1573,1 +1581,1 @@\n-        vectorNode(MASK_CMP_VI, \"VectorMaskCmp\", \"int\");\n+        vectorNode(MASK_CMP_VI, \"VectorMaskCmp\", TYPE_INT);\n@@ -1578,1 +1586,1 @@\n-        vectorNode(MASK_CMP_VL, \"VectorMaskCmp\", \"long\");\n+        vectorNode(MASK_CMP_VL, \"VectorMaskCmp\", TYPE_LONG);\n@@ -1583,1 +1591,1 @@\n-        vectorNode(MASK_CMP_VF, \"VectorMaskCmp\", \"float\");\n+        vectorNode(MASK_CMP_VF, \"VectorMaskCmp\", TYPE_FLOAT);\n@@ -1588,1 +1596,1 @@\n-        vectorNode(MASK_CMP_VD, \"VectorMaskCmp\", \"double\");\n+        vectorNode(MASK_CMP_VD, \"VectorMaskCmp\", TYPE_DOUBLE);\n@@ -1593,1 +1601,1 @@\n-        vectorNode(VECTOR_CAST_B2S, \"VectorCastB2\", \"short\");\n+        vectorNode(VECTOR_CAST_B2S, \"VectorCastB2\", TYPE_SHORT);\n@@ -1598,1 +1606,1 @@\n-        vectorNode(VECTOR_CAST_B2I, \"VectorCastB2\", \"int\");\n+        vectorNode(VECTOR_CAST_B2I, \"VectorCastB2\", TYPE_INT);\n@@ -1603,1 +1611,1 @@\n-        vectorNode(VECTOR_CAST_B2L, \"VectorCastB2\", \"long\");\n+        vectorNode(VECTOR_CAST_B2L, \"VectorCastB2\", TYPE_LONG);\n@@ -1608,1 +1616,1 @@\n-        vectorNode(VECTOR_CAST_B2F, \"VectorCastB2\", \"float\");\n+        vectorNode(VECTOR_CAST_B2F, \"VectorCastB2\", TYPE_FLOAT);\n@@ -1613,1 +1621,1 @@\n-        vectorNode(VECTOR_CAST_B2D, \"VectorCastB2\", \"double\");\n+        vectorNode(VECTOR_CAST_B2D, \"VectorCastB2\", TYPE_DOUBLE);\n@@ -1618,1 +1626,1 @@\n-        vectorNode(VECTOR_CAST_D2B, \"VectorCastD2X\", \"byte\");\n+        vectorNode(VECTOR_CAST_D2B, \"VectorCastD2X\", TYPE_BYTE);\n@@ -1623,1 +1631,1 @@\n-        vectorNode(VECTOR_CAST_D2S, \"VectorCastD2X\", \"short\");\n+        vectorNode(VECTOR_CAST_D2S, \"VectorCastD2X\", TYPE_SHORT);\n@@ -1628,1 +1636,1 @@\n-        vectorNode(VECTOR_CAST_D2I, \"VectorCastD2X\", \"int\");\n+        vectorNode(VECTOR_CAST_D2I, \"VectorCastD2X\", TYPE_INT);\n@@ -1633,1 +1641,1 @@\n-        vectorNode(VECTOR_CAST_D2L, \"VectorCastD2X\", \"long\");\n+        vectorNode(VECTOR_CAST_D2L, \"VectorCastD2X\", TYPE_LONG);\n@@ -1638,1 +1646,1 @@\n-        vectorNode(VECTOR_CAST_D2F, \"VectorCastD2X\", \"float\");\n+        vectorNode(VECTOR_CAST_D2F, \"VectorCastD2X\", TYPE_FLOAT);\n@@ -1643,1 +1651,1 @@\n-        vectorNode(VECTOR_CAST_F2B, \"VectorCastF2X\", \"byte\");\n+        vectorNode(VECTOR_CAST_F2B, \"VectorCastF2X\", TYPE_BYTE);\n@@ -1648,1 +1656,1 @@\n-        vectorNode(VECTOR_CAST_F2S, \"VectorCastF2X\", \"short\");\n+        vectorNode(VECTOR_CAST_F2S, \"VectorCastF2X\", TYPE_SHORT);\n@@ -1653,1 +1661,1 @@\n-        vectorNode(VECTOR_CAST_F2I, \"VectorCastF2X\", \"int\");\n+        vectorNode(VECTOR_CAST_F2I, \"VectorCastF2X\", TYPE_INT);\n@@ -1658,1 +1666,1 @@\n-        vectorNode(VECTOR_CAST_F2L, \"VectorCastF2X\", \"long\");\n+        vectorNode(VECTOR_CAST_F2L, \"VectorCastF2X\", TYPE_LONG);\n@@ -1663,1 +1671,1 @@\n-        vectorNode(VECTOR_CAST_F2D, \"VectorCastF2X\", \"double\");\n+        vectorNode(VECTOR_CAST_F2D, \"VectorCastF2X\", TYPE_DOUBLE);\n@@ -1668,1 +1676,1 @@\n-        vectorNode(VECTOR_CAST_I2B, \"VectorCastI2X\", \"byte\");\n+        vectorNode(VECTOR_CAST_I2B, \"VectorCastI2X\", TYPE_BYTE);\n@@ -1673,1 +1681,1 @@\n-        vectorNode(VECTOR_CAST_I2S, \"VectorCastI2X\", \"short\");\n+        vectorNode(VECTOR_CAST_I2S, \"VectorCastI2X\", TYPE_SHORT);\n@@ -1678,1 +1686,1 @@\n-        vectorNode(VECTOR_CAST_I2L, \"VectorCastI2X\", \"long\");\n+        vectorNode(VECTOR_CAST_I2L, \"VectorCastI2X\", TYPE_LONG);\n@@ -1683,1 +1691,1 @@\n-        vectorNode(VECTOR_CAST_I2F, \"VectorCastI2X\", \"float\");\n+        vectorNode(VECTOR_CAST_I2F, \"VectorCastI2X\", TYPE_FLOAT);\n@@ -1688,1 +1696,1 @@\n-        vectorNode(VECTOR_CAST_I2D, \"VectorCastI2X\", \"double\");\n+        vectorNode(VECTOR_CAST_I2D, \"VectorCastI2X\", TYPE_DOUBLE);\n@@ -1693,1 +1701,1 @@\n-        vectorNode(VECTOR_CAST_L2B, \"VectorCastL2X\", \"byte\");\n+        vectorNode(VECTOR_CAST_L2B, \"VectorCastL2X\", TYPE_BYTE);\n@@ -1698,1 +1706,1 @@\n-        vectorNode(VECTOR_CAST_L2S, \"VectorCastL2X\", \"short\");\n+        vectorNode(VECTOR_CAST_L2S, \"VectorCastL2X\", TYPE_SHORT);\n@@ -1703,1 +1711,1 @@\n-        vectorNode(VECTOR_CAST_L2I, \"VectorCastL2X\", \"int\");\n+        vectorNode(VECTOR_CAST_L2I, \"VectorCastL2X\", TYPE_INT);\n@@ -1708,1 +1716,1 @@\n-        vectorNode(VECTOR_CAST_L2F, \"VectorCastL2X\", \"float\");\n+        vectorNode(VECTOR_CAST_L2F, \"VectorCastL2X\", TYPE_FLOAT);\n@@ -1713,1 +1721,1 @@\n-        vectorNode(VECTOR_CAST_L2D, \"VectorCastL2X\", \"double\");\n+        vectorNode(VECTOR_CAST_L2D, \"VectorCastL2X\", TYPE_DOUBLE);\n@@ -1718,1 +1726,1 @@\n-        vectorNode(VECTOR_CAST_S2B, \"VectorCastS2X\", \"byte\");\n+        vectorNode(VECTOR_CAST_S2B, \"VectorCastS2X\", TYPE_BYTE);\n@@ -1723,1 +1731,1 @@\n-        vectorNode(VECTOR_CAST_S2I, \"VectorCastS2X\", \"int\");\n+        vectorNode(VECTOR_CAST_S2I, \"VectorCastS2X\", TYPE_INT);\n@@ -1728,1 +1736,1 @@\n-        vectorNode(VECTOR_CAST_S2L, \"VectorCastS2X\", \"long\");\n+        vectorNode(VECTOR_CAST_S2L, \"VectorCastS2X\", TYPE_LONG);\n@@ -1733,1 +1741,1 @@\n-        vectorNode(VECTOR_CAST_S2F, \"VectorCastS2X\", \"float\");\n+        vectorNode(VECTOR_CAST_S2F, \"VectorCastS2X\", TYPE_FLOAT);\n@@ -1738,1 +1746,1 @@\n-        vectorNode(VECTOR_CAST_S2D, \"VectorCastS2X\", \"double\");\n+        vectorNode(VECTOR_CAST_S2D, \"VectorCastS2X\", TYPE_DOUBLE);\n@@ -1743,1 +1751,1 @@\n-        vectorNode(VECTOR_CAST_F2HF, \"VectorCastF2HF\", \"short\");\n+        vectorNode(VECTOR_CAST_F2HF, \"VectorCastF2HF\", TYPE_SHORT);\n@@ -1748,1 +1756,1 @@\n-        vectorNode(VECTOR_CAST_HF2F, \"VectorCastHF2F\", \"float\");\n+        vectorNode(VECTOR_CAST_HF2F, \"VectorCastHF2F\", TYPE_FLOAT);\n@@ -1763,1 +1771,1 @@\n-        vectorNode(VECTOR_UCAST_B2S, \"VectorUCastB2X\", \"short\");\n+        vectorNode(VECTOR_UCAST_B2S, \"VectorUCastB2X\", TYPE_SHORT);\n@@ -1768,1 +1776,1 @@\n-        vectorNode(VECTOR_UCAST_B2I, \"VectorUCastB2X\", \"int\");\n+        vectorNode(VECTOR_UCAST_B2I, \"VectorUCastB2X\", TYPE_INT);\n@@ -1773,1 +1781,1 @@\n-        vectorNode(VECTOR_UCAST_B2L, \"VectorUCastB2X\", \"long\");\n+        vectorNode(VECTOR_UCAST_B2L, \"VectorUCastB2X\", TYPE_LONG);\n@@ -1778,1 +1786,1 @@\n-        vectorNode(VECTOR_UCAST_I2L, \"VectorUCastI2X\", \"long\");\n+        vectorNode(VECTOR_UCAST_I2L, \"VectorUCastI2X\", TYPE_LONG);\n@@ -1783,1 +1791,1 @@\n-        vectorNode(VECTOR_UCAST_S2I, \"VectorUCastS2X\", \"int\");\n+        vectorNode(VECTOR_UCAST_S2I, \"VectorUCastS2X\", TYPE_INT);\n@@ -1788,1 +1796,1 @@\n-        vectorNode(VECTOR_UCAST_S2L, \"VectorUCastS2X\", \"long\");\n+        vectorNode(VECTOR_UCAST_S2L, \"VectorUCastS2X\", TYPE_LONG);\n@@ -1938,1 +1946,1 @@\n-        vectorNode(XOR_VB, \"XorV\", \"byte\");\n+        vectorNode(XOR_VB, \"XorV\", TYPE_BYTE);\n@@ -1943,1 +1951,1 @@\n-        vectorNode(XOR_VS, \"XorV\", \"short\");\n+        vectorNode(XOR_VS, \"XorV\", TYPE_SHORT);\n@@ -1948,1 +1956,1 @@\n-        vectorNode(XOR_VI, \"XorV\", \"int\");\n+        vectorNode(XOR_VI, \"XorV\", TYPE_INT);\n@@ -1953,1 +1961,1 @@\n-        vectorNode(XOR_VL, \"XorV\", \"long\");\n+        vectorNode(XOR_VL, \"XorV\", TYPE_LONG);\n@@ -1978,1 +1986,1 @@\n-        vectorNode(COMPRESS_BITSVI, \"CompressBitsV\", \"int\");\n+        vectorNode(COMPRESS_BITSVI, \"CompressBitsV\", TYPE_INT);\n@@ -1983,1 +1991,1 @@\n-        vectorNode(COMPRESS_BITSVL, \"CompressBitsV\", \"long\");\n+        vectorNode(COMPRESS_BITSVL, \"CompressBitsV\", TYPE_LONG);\n@@ -1988,1 +1996,1 @@\n-        vectorNode(EXPAND_BITSVI, \"ExpandBitsV\", \"int\");\n+        vectorNode(EXPAND_BITSVI, \"ExpandBitsV\", TYPE_INT);\n@@ -1993,1 +2001,1 @@\n-        vectorNode(EXPAND_BITSVL, \"ExpandBitsV\", \"long\");\n+        vectorNode(EXPAND_BITSVL, \"ExpandBitsV\", TYPE_LONG);\n@@ -2290,7 +2298,7 @@\n-            case \"max_byte\"          -> String.valueOf(getMaxElementsForType(\"byte\", vmInfo));\n-            case \"max_char\"          -> String.valueOf(getMaxElementsForType(\"char\", vmInfo));\n-            case \"max_short\"         -> String.valueOf(getMaxElementsForType(\"short\", vmInfo));\n-            case \"max_int\"           -> String.valueOf(getMaxElementsForType(\"int\", vmInfo));\n-            case \"max_long\"          -> String.valueOf(getMaxElementsForType(\"long\", vmInfo));\n-            case \"max_float\"         -> String.valueOf(getMaxElementsForType(\"float\", vmInfo));\n-            case \"max_double\"        -> String.valueOf(getMaxElementsForType(\"double\", vmInfo));\n+            case \"max_byte\"          -> String.valueOf(getMaxElementsForType(TYPE_BYTE, vmInfo));\n+            case \"max_char\"          -> String.valueOf(getMaxElementsForType(TYPE_CHAR, vmInfo));\n+            case \"max_short\"         -> String.valueOf(getMaxElementsForType(TYPE_SHORT, vmInfo));\n+            case \"max_int\"           -> String.valueOf(getMaxElementsForType(TYPE_INT, vmInfo));\n+            case \"max_long\"          -> String.valueOf(getMaxElementsForType(TYPE_LONG, vmInfo));\n+            case \"max_float\"         -> String.valueOf(getMaxElementsForType(TYPE_FLOAT, vmInfo));\n+            case \"max_double\"        -> String.valueOf(getMaxElementsForType(TYPE_DOUBLE, vmInfo));\n@@ -2321,1 +2329,1 @@\n-        if (avx1 && (typeString.equals(\"float\") || typeString.equals(\"double\"))) {\n+        if (avx1 && (typeString.equals(TYPE_FLOAT) || typeString.equals(TYPE_DOUBLE))) {\n@@ -2324,1 +2332,1 @@\n-        if (avx512 && (typeString.equals(\"byte\") || typeString.equals(\"short\") || typeString.equals(\"char\"))) {\n+        if (avx512 && (typeString.equals(TYPE_BYTE) || typeString.equals(TYPE_SHORT) || typeString.equals(TYPE_CHAR))) {\n@@ -2342,5 +2350,5 @@\n-            case \"byte\"           -> 1;\n-            case \"char\", \"short\"  -> 2;\n-            case \"int\", \"float\"   -> 4;\n-            case \"long\", \"double\" -> 8;\n-            default               -> 0;\n+            case TYPE_BYTE              -> 1;\n+            case TYPE_CHAR, TYPE_SHORT  -> 2;\n+            case TYPE_INT, TYPE_FLOAT   -> 4;\n+            case TYPE_LONG, TYPE_DOUBLE -> 8;\n+            default                     -> 0;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":159,"deletions":151,"binary":false,"changes":310,"status":"modified"}]}