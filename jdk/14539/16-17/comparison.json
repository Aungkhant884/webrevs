{"files":[{"patch":"@@ -2268,1 +2268,1 @@\n-                TestFormat.checkNoReport(false, \"Vector node has invalid size \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n+                throw new TestFormatException(\"Vector node has invalid size \\\"\" + sizes[i] + \"\\\", in \\\"\" + sizeString + \"\\\"\");\n@@ -2316,1 +2316,1 @@\n-                TestFormat.checkNoReport(false, \"Vector node has invalid size in \\\"min(...)\\\", argument \" + i + \", \\\"\" + tag + \"\\\", in \\\"\" + sizeTagString + \"\\\"\");\n+                throw new TestFormatException(\"Vector node has invalid size in \\\"min(...)\\\", argument \" + i + \", \\\"\" + tag + \"\\\", in \\\"\" + sizeTagString + \"\\\"\");\n@@ -2346,2 +2346,0 @@\n-        long maxBytes = 64;\n-\n@@ -2349,1 +2347,0 @@\n-        \/\/  -> x86:\n@@ -2354,0 +2351,1 @@\n+        long maxBytes;\n@@ -2358,1 +2356,1 @@\n-        } else if (avx1) {\n+        } else {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -62,1 +62,2 @@\n-                TestFormat.checkNoReport(comparison.getGivenValue() > 1, \"Node count comparison \\\"<\" + comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() > 1, \"Node count comparison \\\"<\" +\n+                                         comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n@@ -66,1 +67,2 @@\n-                TestFormat.checkNoReport(comparison.getGivenValue() >= 1, \"Node count comparison \\\"<=\" + comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() >= 1, \"Node count comparison \\\"<=\" +\n+                                         comparison.getGivenValue() + \"\\\" should be rewritten as \\\"=0\\\"\");\n@@ -74,1 +76,2 @@\n-                TestFormat.checkNoReport(comparison.getGivenValue() >= 0, \"Node count comparison \\\">\" + comparison.getGivenValue() + \"\\\" is useless, please only use positive numbers.\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() >= 0, \"Node count comparison \\\">\" +\n+                                         comparison.getGivenValue() + \"\\\" is useless, please only use positive numbers.\");\n@@ -78,1 +81,2 @@\n-                TestFormat.checkNoReport(comparison.getGivenValue() > 0, \"Node count comparison \\\">=\" + comparison.getGivenValue() + \"\\\" is useless, please only use strictly positive numbers with greater-equal.\");\n+                TestFormat.checkNoReport(comparison.getGivenValue() > 0, \"Node count comparison \\\">=\" +\n+                                         comparison.getGivenValue() + \"\\\" is useless, please only use strictly positive numbers with greater-equal.\");\n@@ -81,1 +85,2 @@\n-            case \"!=\" -> throw new TestFormatException(\"Not-equal comparator not supported for node count: \\\"\" + comparison.getComparator() + \"\\\". Please rewrite the rule.\");\n+            case \"!=\" -> throw new TestFormatException(\"Not-equal comparator not supported for node count: \\\"\" +\n+                                                       comparison.getComparator() + \"\\\". Please rewrite the rule.\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/constraint\/raw\/RawCountsConstraint.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}