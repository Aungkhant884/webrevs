{"files":[{"patch":"@@ -2267,2 +2267,1 @@\n-        if (sizeTagString.startsWith(\"min(\")) {\n-            TestFormat.checkNoReport(sizeTagString.endsWith(\")\"), \"Vector node size \\\"min(...)\\\" must end with \\\")\\\" \\\"\" + sizeTagString + \"\\\"\");\n+        if (sizeTagString.startsWith(\"min(\") && sizeTagString.endsWith(\")\")) {\n@@ -2337,1 +2336,1 @@\n-        TestFramework.check(maxVectorSize > 0, \"VMInfo: MaxVectorSize is not larger than zero\");\n+        TestFormat.checkNoReport(maxVectorSize > 0, \"VMInfo: MaxVectorSize is not larger than zero\");\n@@ -2457,1 +2456,1 @@\n-        TestFormat.checkNoReport(typeString != null, failMsg);\n+        TestFormat.check(typeString != null, failMsg);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -984,0 +984,20 @@\n+\n+    @Test\n+    @FailCount(2)\n+    @IR(counts = {IRNode.LOAD_VI, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE_MAX, \"> 0\"}, \/\/ valid\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE_ANY, \"> 0\"}, \/\/ valid\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE + \"\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE + \"xxx\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+    public int[] badVectorNodeSize() {\n+        int[] a = new int[1024*8];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i]++;\n+        }\n+        return a;\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8310308\n+ * @summary Basic examples for vector node type and size verification\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @run driver TestVectorNode\n+ *\/\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestVectorNode {\n+    public static void main(String args[]) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    \/\/ By default, we search for the maximal size possible\n+    @IR(counts = {IRNode.LOAD_VI, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+\n+    \/\/ We can also specify that we want the maximum explicitly\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE_MAX, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+\n+    \/\/ As a last resort, we can match with any size\n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE_ANY, \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+ \n+    \/\/ \n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE + \"\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+\n+    \/\/ \n+    @IR(counts = {IRNode.LOAD_VI, IRNode.VECTOR_SIZE + \"xxx\", \"> 0\"},\n+        applyIfCPUFeatureOr = {\"sse2\", \"true\", \"asimd\", \"true\"})\n+\n+    static int[] test0() {\n+        int[] a = new int[1024*8];\n+        for (int i = 0; i < a.length; i++) {\n+            a[i]++;\n+        }\n+        return a;\n+    }\n+}\n+\n+\n+\n+\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestVectorNode.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}