{"files":[{"patch":"@@ -885,3 +885,2 @@\n-bool FileMapInfo::check_paths_ignoring_common_prefix(int shared_path_start_idx, int num_paths,\n-                                                     GrowableArray<const char*>* rp_array,\n-                                                     unsigned int dumptime_prefix_len, unsigned int runtime_prefix_len) {\n+bool FileMapInfo::check_paths(int shared_path_start_idx, int num_paths, GrowableArray<const char*>* rp_array,\n+                              unsigned int dumptime_prefix_len, unsigned int runtime_prefix_len) {\n@@ -899,2 +898,2 @@\n-    const char* runtime_path = rp_array->at(i)  + runtime_prefix_len;\n-    if (strcmp(dumptime_path, runtime_path) != 0) {\n+    const char* runtime_path = runtime_path = rp_array->at(i)  + runtime_prefix_len;\n+    if (!os::same_files(dumptime_path, runtime_path)) {\n@@ -909,19 +908,0 @@\n-bool FileMapInfo::check_paths(int shared_path_start_idx, int num_paths, GrowableArray<const char*>* rp_array) {\n-  int i = 0;\n-  int j = shared_path_start_idx;\n-  bool mismatch = false;\n-  while (i < num_paths && !mismatch) {\n-    while (shared_path(j)->from_class_path_attr()) {\n-      \/\/ shared_path(j) was expanded from the JAR file attribute \"Class-Path:\"\n-      \/\/ during dump time. It's not included in the -classpath VM argument.\n-      j++;\n-    }\n-    if (!os::same_files(shared_path(j)->name(), rp_array->at(i))) {\n-      mismatch = true;\n-    }\n-    i++;\n-    j++;\n-  }\n-  return mismatch;\n-}\n-\n@@ -979,1 +959,1 @@\n-      mismatch = check_paths(1, num, rp_array);\n+      mismatch = check_paths(1, num, rp_array, 0, 0);\n@@ -1028,1 +1008,1 @@\n-    mismatch = check_paths(j, shared_app_paths_len, rp_array);\n+    mismatch = check_paths(j, shared_app_paths_len, rp_array, 0, 0);\n@@ -1030,0 +1010,5 @@\n+      \/\/ To facilitate app deployment, we allow the JAR files to be moved *together* to\n+      \/\/ a different location, as long as they are still stored under the same directory\n+      \/\/ structure. E.g., the following is OK.\n+      \/\/     java -Xshare:dump -cp \/a\/Foo.jar:\/a\/b\/Bar.jar  ...\n+      \/\/     java -Xshare:auto -cp \/x\/y\/Foo.jar:\/x\/y\/b\/Bar.jar  ...\n@@ -1032,2 +1017,2 @@\n-      mismatch = check_paths_ignoring_common_prefix(j, shared_app_paths_len, rp_array,\n-                                                    dumptime_prefix_len, runtime_prefix_len);\n+      mismatch = check_paths(j, shared_app_paths_len, rp_array,\n+                             dumptime_prefix_len, runtime_prefix_len);\n@@ -1064,1 +1049,1 @@\n-  return check_paths(header()->app_module_paths_start_index(), num_paths, rp_array);\n+  return check_paths(header()->app_module_paths_start_index(), num_paths, rp_array, 0, 0);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":14,"deletions":29,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -567,4 +567,0 @@\n-  bool  check_paths_ignoring_common_prefix(int shared_path_start_idx, int num_paths,\n-                                           GrowableArray<const char*>* rp_array,\n-                                           unsigned int dumptime_prefix_len, unsigned int runtime_prefix_len)\n-                                           NOT_CDS_RETURN_(false);\n@@ -572,1 +568,3 @@\n-                    GrowableArray<const char*>* rp_array) NOT_CDS_RETURN_(false);\n+                    GrowableArray<const char*>* rp_array,\n+                    unsigned int dumptime_prefix_len,\n+                    unsigned int runtime_prefix_len) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}