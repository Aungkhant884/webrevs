{"files":[{"patch":"@@ -38,1 +38,0 @@\n-  { \"GenericCDSFileMapHeader::_common_app_classpath_offset\", offset_of(GenericCDSFileMapHeader, _common_app_classpath_offset) },\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -229,9 +229,1 @@\n-  char* lcp = NULL;\n-  if (len > 0) {\n-    lcp = longest_common_app_classpath(len, app_cp_array);\n-  }\n-  if (lcp != NULL) {\n-    longest_common_prefix_size = strlen(lcp) + 1;\n-    header_size += longest_common_prefix_size;\n-    longest_common_prefix_offset = c_header_size + base_archive_name_size;\n-  }\n+  longest_common_prefix_size = longest_common_app_classpath_len(len, app_cp_array);\n@@ -246,2 +238,1 @@\n-                    longest_common_prefix_offset,\n-                    (const char*)lcp);\n+                    longest_common_prefix_offset);\n@@ -253,1 +244,1 @@\n-                             size_t common_app_classpath_offset, const char* lcp) {\n+                             size_t common_app_classpath_offset) {\n@@ -260,1 +251,0 @@\n-  set_common_app_classpath_offset((unsigned int)common_app_classpath_offset);\n@@ -269,3 +259,0 @@\n-  if(common_app_classpath_size > 0) {\n-    copy_common_app_classpath(lcp);\n-  }\n@@ -330,7 +317,0 @@\n-void FileMapHeader::copy_common_app_classpath(const char* lcp) {\n-  assert(common_app_classpath_size() != 0, \"_common_app_classpath_size not set\");\n-  assert(common_app_classpath_offset() != 0, \"_common_app_classpath_offset not set\");\n-  assert(header_size() > sizeof(*this), \"_common_app_classpath_size not included in header size?\");\n-  memcpy((char*)this + common_app_classpath_offset(), lcp, common_app_classpath_size());\n-}\n-\n@@ -346,1 +326,0 @@\n-  st->print_cr(\"- common_app_classpath_offset:    \" UINT32_FORMAT, common_app_classpath_offset());\n@@ -888,26 +867,4 @@\n-char* FileMapInfo::longest_common_app_classpath(int num_paths,\n-                                                GrowableArray<const char*>* rp_array) {\n-  \/\/ find the shortest path length among all the entries\n-  char* chr = strrchr((char*)rp_array->at(0), *os::file_separator());\n-  size_t min_len = chr != NULL ? chr - rp_array->at(0) + 1 : strlen(rp_array->at(0)) + 1;\n-  for (int i = 1; i < num_paths; i++) {\n-    chr = strrchr((char*)rp_array->at(i), *os::file_separator());\n-    size_t curr_len = chr != NULL ? chr - rp_array->at(i) + 1 : strlen(rp_array->at(i)) + 1;\n-    min_len = MIN2(min_len, curr_len);\n-  }\n-\n-  \/\/ allocate a buffer to store the longest common prefix\n-  char* lcp = NEW_C_HEAP_ARRAY(char, min_len + 1, mtInternal);\n-  memset(lcp, 0, min_len + 1);\n-  char c;\n-  \/\/ find the longest common prefix\n-  for (int j = 0; j < (int)min_len; j++) {\n-    c = rp_array->at(0)[j];\n-    int k = 1;\n-    while (k < num_paths) {\n-      if (rp_array->at(k)[j] != c) {\n-        break;\n-      }\n-      k++;\n-    }\n-    *(lcp + j) = c;\n+unsigned int FileMapInfo::longest_common_app_classpath_len(int num_paths,\n+                                                  GrowableArray<const char*>* rp_array) {\n+  if (num_paths == 0) {\n+    return 0;\n@@ -915,0 +872,6 @@\n+  unsigned int pos;\n+  for (pos = 0; ; pos++) {\n+    for (int i = 0; i < num_paths; i++) {\n+      if (rp_array->at(i)[pos] != '\\0' && rp_array->at(i)[pos] == rp_array->at(0)[pos]) {\n+        continue;\n+      }\n@@ -916,6 +879,4 @@\n-  if (*lcp == '\\0') {\n-    \/\/ no longest common prefix, release the buffer\n-    FREE_C_HEAP_ARRAY(char, lcp);\n-    return NULL;\n-  } else {\n-    return lcp;\n+      \/\/ search backward for the pos before the file separator char\n+      while (pos > 0 && rp_array->at(0)[--pos] != *os::file_separator());\n+      return pos;\n+    }\n@@ -923,0 +884,1 @@\n+  return 0;\n@@ -927,1 +889,1 @@\n-                                                   const char* dumptime_prefix, const char* runtime_prefix) {\n+                                                   unsigned int dumptime_prefix_len, unsigned int runtime_prefix_len) {\n@@ -930,2 +892,1 @@\n-  bool mismatch = false;\n-  while (i < num_paths && !mismatch) {\n+  while (i < num_paths) {\n@@ -937,4 +898,4 @@\n-    assert(strlen(shared_path(j)->name()) > strlen(dumptime_prefix), \"sanity\");\n-    const char* dumptime_path = shared_path(j)->name() + strlen(dumptime_prefix);\n-    assert(strlen(rp_array->at(i)) > strlen(runtime_prefix), \"sanity\");\n-    const char* runtime_path = rp_array->at(i)  + strlen(runtime_prefix);\n+    assert(strlen(shared_path(j)->name()) > (size_t)dumptime_prefix_len, \"sanity\");\n+    const char* dumptime_path = shared_path(j)->name() + dumptime_prefix_len;\n+    assert(strlen(rp_array->at(i)) > (size_t)runtime_prefix_len, \"sanity\");\n+    const char* runtime_path = rp_array->at(i)  + runtime_prefix_len;\n@@ -942,1 +903,1 @@\n-      mismatch = true;\n+      return true;\n@@ -947,1 +908,1 @@\n-  return mismatch;\n+  return false;\n@@ -1071,10 +1032,4 @@\n-      char* dumptime_prefix = NULL;\n-      if (header()->common_app_classpath_size() > 0) {\n-        dumptime_prefix = (char*)header() + header()->common_app_classpath_offset();\n-      }\n-      const char* runtime_prefix = (const char*)longest_common_app_classpath(shared_app_paths_len, rp_array);\n-      if (dumptime_prefix != NULL && runtime_prefix != NULL) {\n-        mismatch = check_paths_ignoring_common_path(j, shared_app_paths_len, rp_array,\n-                                                    (const char*)dumptime_prefix, runtime_prefix);\n-      }\n-      FREE_C_HEAP_ARRAY(char, runtime_prefix);\n+      unsigned int dumptime_prefix_len = header()->common_app_classpath_size();\n+      unsigned int runtime_prefix_len = longest_common_app_classpath_len(shared_app_paths_len, rp_array);\n+      mismatch = check_paths_ignoring_common_path(j, shared_app_paths_len, rp_array,\n+                                                  dumptime_prefix_len, runtime_prefix_len);\n@@ -1411,8 +1366,4 @@\n-    unsigned int common_path_size    = _header->_common_app_classpath_size;\n-    \/\/ check the longest common prefix of the app class paths\n-    if (common_path_size > 0) {\n-      const char* lcp = ((const char*)_header) + _header->_common_app_classpath_offset;\n-      if (lcp[common_path_size - 1] != '\\0' || strlen(lcp) != common_path_size - 1) {\n-        FileMapInfo::fail_continue(\"common app classpath is damaged\");\n-        return false;\n-      }\n+    int common_path_size = _header->_common_app_classpath_size;\n+    if (common_path_size < 0) {\n+      FileMapInfo::fail_continue(\"common app classpath size < 0\");\n+      return false;\n@@ -1496,2 +1447,2 @@\n-  unsigned int lcp_offset = header()->common_app_classpath_offset();\n-  unsigned int name_size = header()->common_app_classpath_size();\n+  unsigned int base_offset = header()->base_archive_name_offset();\n+  unsigned int name_size = header()->base_archive_name_size();\n@@ -1499,2 +1450,2 @@\n-  if (lcp_offset != 0 && name_size != 0) {\n-    if (header_size != lcp_offset + name_size) {\n+  if (base_offset != 0 && name_size != 0) {\n+    if (header_size != base_offset + name_size) {\n@@ -1502,0 +1453,1 @@\n+      log_info(cds)(\"common_app_classpath_size: \" UINT32_FORMAT, header()->common_app_classpath_size());\n@@ -1504,2 +1456,0 @@\n-      log_info(cds)(\"common_app_classpath_size: \" UINT32_FORMAT, name_size);\n-      log_info(cds)(\"common_app_classpath_offset: \" UINT32_FORMAT, lcp_offset);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":39,"deletions":89,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -247,1 +247,0 @@\n-  unsigned int common_app_classpath_offset() const { return _generic_header._common_app_classpath_offset; }\n@@ -256,1 +255,0 @@\n-  void set_common_app_classpath_offset(unsigned int s) { _generic_header._common_app_classpath_offset = s; }\n@@ -292,1 +290,0 @@\n-  void copy_common_app_classpath(const char* name);\n@@ -319,1 +316,1 @@\n-                size_t common_app_classpath_size, size_t common_app_classpath_offset, const char* lcp);\n+                size_t common_app_classpath_size, size_t common_app_classpath_offset);\n@@ -567,2 +564,2 @@\n-  char* longest_common_app_classpath(int num_paths,\n-                                     GrowableArray<const char*>* rp_array) NOT_CDS_RETURN_(NULL);\n+  unsigned int longest_common_app_classpath_len(int num_paths,\n+                                       GrowableArray<const char*>* rp_array) NOT_CDS_RETURN_(0);\n@@ -571,1 +568,1 @@\n-                                         const char* dumptime_prefix, const char* runtime_prefix)\n+                                         unsigned int dumptime_prefix_len, unsigned int runtime_prefix_len)\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -72,0 +72,2 @@\n+  unsigned int _common_app_classpath_size; \/\/ size of the common prefix of app class paths\n+                                           \/\/    0 if no common prefix exists\n@@ -84,6 +86,1 @@\n-  unsigned int _common_app_classpath_offset; \/\/ offset to the common prefix of app class paths\n-                                             \/\/ if there exists a common prefix, the following offset\n-                                             \/\/ points to a 0-terminated string for the prefix\n-                                             \/\/ (char*)this + _base_archive_name_offset + _common_app_classpath_offset\n-  unsigned int _common_app_classpath_size;   \/\/ size of the common prefix of app class paths\n-                                             \/\/    0 if no common prefix exists\n+\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.nio.file.Files;\n@@ -40,2 +39,0 @@\n-import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n-import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n@@ -46,39 +43,4 @@\n-  private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n-\n-  public static void main(String[] args) throws Exception {\n-    String appJar = JarBuilder.getOrCreateHelloJar();\n-    String appJar2 = JarBuilder.build(\"AppendClasspath_HelloMore\", \"HelloMore\");\n-\n-    \/\/ dump an archive with both jars in the original location\n-    int idx = appJar.lastIndexOf(File.separator);\n-    String jarName = appJar.substring(idx + 1);\n-    String jarDir = appJar.substring(0, idx);\n-    String jars = appJar + File.pathSeparator + appJar2;\n-    TestCommon.testDump(jars, TestCommon.list(\"Hello\", \"HelloMore\"));\n-\n-    \/\/ copy hello.jar to USER_DIR\/deploy\n-    Path srcPath = Paths.get(appJar);\n-    Path newPath = Paths.get(USER_DIR.toString() + File.separator + \"deploy\");\n-    Path destDir = Files.createDirectory(newPath);\n-    Path destPath = destDir.resolve(jarName);\n-    Files.copy(srcPath, destPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\n-\n-    \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/deploy\n-    idx = appJar2.lastIndexOf(File.separator);\n-    jarName = appJar2.substring(idx + 1);\n-    srcPath = Paths.get(appJar2);\n-    Path destPath2 = destDir.resolve(jarName);\n-    Files.copy(srcPath, destPath2, REPLACE_EXISTING, COPY_ATTRIBUTES);\n-\n-    \/\/ Run with both jars relocated to USER_DIR\/dpeloy - should PASS\n-    TestCommon.run(\n-        \"-Xshare:on\",\n-        \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n-        \"-cp\", destPath.toString() + File.pathSeparator + destPath2.toString(),\n-        \"-Xlog:class+load=trace,class+path=info\",\n-        \"HelloMore\")\n-        .assertNormalExit(output -> {\n-                output.shouldContain(\"Hello source: shared objects file\")\n-                      .shouldContain(\"HelloMore source: shared objects file\")\n-                      .shouldHaveExitValue(0);\n-            });\n+    private static final Path USER_DIR = Paths.get(CDSTestUtils.getOutputDir());\n+    private static final String failedMessage = \"APP classpath mismatch\";\n+    private static final String successMessage1 = \"Hello source: shared objects file\";\n+    private static final String successMessage2 = \"HelloMore source: shared objects file\";\n@@ -86,10 +48,13 @@\n-    \/\/ Run with relocation of only the second jar - should FAIL\n-    TestCommon.run(\n-        \"-Xshare:on\",\n-        \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n-        \"-cp\", appJar + File.pathSeparator + destPath2.toString(),\n-        \"-Xlog:class+load=trace,class+path=info\",\n-        \"HelloMore\")\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"APP classpath mismatch\")\n-                      .shouldHaveExitValue(1);\n+    private static void runtimeTest(String classPath, int expectedExitValue,\n+                                    String ... checkMessages) throws Exception {\n+        CDSTestUtils.Result result = TestCommon.run(\n+            \"-Xshare:on\",\n+            \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n+            \"-cp\", classPath,\n+            \"-Xlog:class+load=trace,class+path=info\",\n+            \"HelloMore\");\n+        if (expectedExitValue == 0) {\n+            result.assertNormalExit( output -> {\n+                for (String s : checkMessages) {\n+                    output.shouldContain(s);\n+                }\n@@ -97,11 +62,5 @@\n-\n-    \/\/ Run with relocation of only the first jar - should FAIL\n-    TestCommon.run(\n-        \"-Xshare:on\",\n-        \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n-        \"-cp\", destPath.toString() + File.pathSeparator + appJar2,\n-        \"-Xlog:class+load=trace,class+path=info\",\n-        \"HelloMore\")\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"APP classpath mismatch\")\n-                      .shouldHaveExitValue(1);\n+        } else {\n+            result.assertAbnormalExit( output -> {\n+                for (String s : checkMessages) {\n+                    output.shouldContain(s);\n+                }\n@@ -109,0 +68,2 @@\n+        }\n+    }\n@@ -110,16 +71,3 @@\n-    \/\/ Dump CDS archive with the first jar relocated.\n-    jars = destPath.toString() + File.pathSeparator + appJar2;\n-    TestCommon.testDump(jars, TestCommon.list(\"Hello\", \"HelloMore\"));\n-\n-    \/\/ Run with first jar relocated - should PASS\n-    TestCommon.run(\n-        \"-Xshare:on\",\n-        \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n-        \"-cp\", destPath.toString() + File.pathSeparator + appJar2,\n-        \"-Xlog:class+load=trace,class+path=info\",\n-        \"HelloMore\")\n-        .assertNormalExit(output -> {\n-                output.shouldContain(\"Hello source: shared objects file\")\n-                      .shouldContain(\"HelloMore source: shared objects file\")\n-                      .shouldHaveExitValue(0);\n-            });\n+    public static void main(String[] args) throws Exception {\n+        String appJar = JarBuilder.getOrCreateHelloJar();\n+        String appJar2 = JarBuilder.build(\"AppendClasspath_HelloMore\", \"HelloMore\");\n@@ -127,11 +75,63 @@\n-    \/\/ Run with both jars relocated - should FAIL\n-    TestCommon.run(\n-        \"-Xshare:on\",\n-        \"-XX:SharedArchiveFile=\" + TestCommon.getCurrentArchiveName(),\n-        \"-cp\", destPath.toString() + File.pathSeparator + destPath2.toString(),\n-        \"-Xlog:class+load=trace,class+path=info\",\n-        \"HelloMore\")\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"APP classpath mismatch\")\n-                      .shouldHaveExitValue(1);\n-            });\n+        \/\/ dump an archive with both jars in the original location\n+        String jars = appJar + File.pathSeparator + appJar2;\n+        TestCommon.testDump(jars, TestCommon.list(\"Hello\", \"HelloMore\"));\n+\n+        \/\/ copy hello.jar to USER_DIR\/deploy\n+        String newDir = USER_DIR.toString() + File.separator + \"deploy\";\n+        Path destPath = CDSTestUtils.copyFile(appJar, newDir);\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/deploy\n+        Path destPath2 = CDSTestUtils.copyFile(appJar2, newDir);\n+\n+        \/\/ Run with both jars relocated to USER_DIR\/dpeloy - should PASS\n+        runtimeTest(destPath.toString() + File.pathSeparator + destPath2.toString(),\n+                    0, successMessage1, successMessage2);\n+\n+        \/\/ Run with relocation of only the second jar - should FAIL\n+        runtimeTest(appJar + File.pathSeparator + destPath2.toString(),\n+                    1, failedMessage);\n+\n+        \/\/ Run with relocation of only the first jar - should FAIL\n+        runtimeTest(destPath.toString() + File.pathSeparator + appJar2,\n+                    1, failedMessage);\n+\n+        \/\/ Dump CDS archive with the first jar relocated.\n+        jars = destPath.toString() + File.pathSeparator + appJar2;\n+        TestCommon.testDump(jars, TestCommon.list(\"Hello\", \"HelloMore\"));\n+\n+        \/\/ Run with first jar relocated - should PASS\n+        runtimeTest(destPath.toString() + File.pathSeparator + appJar2,\n+                    0, successMessage1, successMessage2);\n+\n+        \/\/ Run with both jars relocated - should FAIL\n+        runtimeTest(destPath.toString() + File.pathSeparator + destPath2.toString(),\n+                    1, failedMessage);\n+\n+        \/\/ Copy hello.jar to USER_DIR\/a\n+        destPath = CDSTestUtils.copyFile(appJar, USER_DIR.toString() + File.separator + \"a\");\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/aa\n+        destPath2 = CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"aa\");\n+\n+        \/\/ Dump CDS archive with the both jar files relocated\n+        \/\/ appJar to USER_DIR\/a\n+        \/\/ appJar2 to USER_DIR\/aa\n+        jars = destPath.toString() + File.pathSeparator + destPath2.toString();\n+        TestCommon.testDump(jars, TestCommon.list(\"Hello\", \"HelloMore\"));\n+\n+        \/\/ Copy hello.jar to USER_DIR\/x\/a\n+        Path runPath = CDSTestUtils.copyFile(appJar, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"a\");\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/x\/aa\n+        Path runPath2= CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"aa\");\n+\n+        \/\/ Run with both jars relocated to USER_DIR\/x\/a and USER_DIR\/x\/aa dirs - should PASS\n+        runtimeTest(runPath.toString() + File.pathSeparator + runPath2.toString(),\n+                    0, successMessage1, successMessage2);\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/x\/a\n+        runPath2= CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"a\");\n+\n+        \/\/ Run with both jars relocated to USER_DIR\/x\/a dir - should FAIL\n+        runtimeTest(runPath.toString() + File.pathSeparator + runPath2.toString(),\n+                    1, failedMessage);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/CommonAppClasspath.java","additions":90,"deletions":90,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-        \/\/ modify _common_app_classpath_offset to point to middle of the common app classpath\n+        \/\/ modify _common_app_classpath_size\n@@ -280,5 +280,3 @@\n-        int commonAppClasspathOffset = CDSArchiveUtils.commonAppClasspathOffset(copiedJsa);\n-        System.out.println(\"    commonAppClasspathOffset = \" + commonAppClasspathOffset);\n-        CDSArchiveUtils.writeData(copiedJsa, CDSArchiveUtils.offsetCommonAppClasspathOffset(), commonAppClasspathOffset + commonAppClasspathSize\/2);\n-        commonAppClasspathOffset = CDSArchiveUtils.commonAppClasspathOffset(copiedJsa);\n-        System.out.println(\"new commonAppClasspathOffset = \" + commonAppClasspathOffset);\n+        CDSArchiveUtils.writeData(copiedJsa, CDSArchiveUtils.offsetCommonAppClasspathSize(), commonAppClasspathSize * 2);\n+        commonAppClasspathSize = CDSArchiveUtils.commonAppClasspathSize(copiedJsa);\n+        System.out.println(\"new commonAppClasspathSize = \" + commonAppClasspathSize);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-        startTest(\"5. Make common app classpath offset points to middle of the common app classpath\");\n+        startTest(\"5a. Modify common app classpath size\");\n@@ -157,3 +157,1 @@\n-        int commonAppClasspathOffset = CDSArchiveUtils.commonAppClasspathOffset(copiedJsa);\n-        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, commonAppClasspathOffset,\n-                                             commonAppClasspathOffset + commonAppClasspathSize\/2);\n+        CDSArchiveUtils.writeData(copiedJsa, CDSArchiveUtils.offsetCommonAppClasspathSize(), -1);\n@@ -162,1 +160,8 @@\n-               \"common app classpath is damaged\");\n+               \"common app classpath size < 0\");\n+\n+        startTest(\"5b. Modify common app classpath size, run with -XX:-VerifySharedSpaces\");\n+        VERIFY_CRC = true;\n+        runTwo(baseArchiveName, modTop,\n+               appJar, mainClass, isAuto ? 0 : 1,\n+               \"Header checksum verification failed\");\n+        VERIFY_CRC = false;\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArchiveConsistency.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.nio.file.Files;\n@@ -42,2 +41,0 @@\n-import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n-import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n@@ -49,0 +46,25 @@\n+    private static final String failedMessage = \"shared class paths mismatch\";\n+    private static final String successMessage1 = \"Hello source: shared objects file\";\n+    private static final String successMessage2 = \"HelloMore source: shared objects file\";\n+\n+    private static void runtimeTest(String topArchiveName, String classPath,\n+                                    String mainClass, int expectedExitValue,\n+                                    String ... checkMessages) throws Exception {\n+        CDSTestUtils.Result result = run(topArchiveName,\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds+dynamic=debug,cds=debug\",\n+            \"-cp\", classPath, mainClass);\n+        if (expectedExitValue == 0) {\n+            result.assertNormalExit( output -> {\n+                for (String s : checkMessages) {\n+                    output.shouldContain(s);\n+                }\n+            });\n+        } else {\n+            result.assertAbnormalExit( output -> {\n+                for (String s : checkMessages) {\n+                    output.shouldContain(s);\n+                }\n+            });\n+        }\n+    }\n@@ -75,7 +97,2 @@\n-        Path srcPath = Paths.get(appJar);\n-        Path newPath = Paths.get(USER_DIR.toString() + File.separator + \"deploy\");\n-        Path destDir = Files.createDirectory(newPath);\n-        int idx = appJar.lastIndexOf(File.separator);\n-        String jarName = appJar.substring(idx + 1);\n-        Path destPath = destDir.resolve(jarName);\n-        Files.copy(srcPath, destPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\n+        String newDir = USER_DIR.toString() + File.separator + \"deploy\";\n+        Path destPath = CDSTestUtils.copyFile(appJar, newDir);\n@@ -84,5 +101,1 @@\n-        idx = appJar2.lastIndexOf(File.separator);\n-        jarName = appJar2.substring(idx + 1);\n-        srcPath = Paths.get(appJar2);\n-        Path destPath2 = destDir.resolve(jarName);\n-        Files.copy(srcPath, destPath2, REPLACE_EXISTING, COPY_ATTRIBUTES);\n+        Path destPath2 = CDSTestUtils.copyFile(appJar2, newDir);\n@@ -92,9 +105,1 @@\n-        run(topArchiveName,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-cp\", jars, mainClass)\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Hello source: shared objects file\")\n-                          .shouldContain(\"HelloMore source: shared objects file\")\n-                          .shouldHaveExitValue(0);\n-                });\n+        runtimeTest(topArchiveName, jars, mainClass, 0, successMessage1, successMessage2);\n@@ -104,8 +109,1 @@\n-        run(topArchiveName,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-cp\", jars, mainClass)\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"shared class paths mismatch\")\n-                      .shouldHaveExitValue(1);\n-            });\n+        runtimeTest(topArchiveName, jars, mainClass, 1, failedMessage);\n@@ -115,8 +113,1 @@\n-        run(topArchiveName,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-cp\", jars, mainClass)\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"shared class paths mismatch\")\n-                      .shouldHaveExitValue(1);\n-            });\n+        runtimeTest(topArchiveName, jars, mainClass, 1, failedMessage);\n@@ -136,9 +127,1 @@\n-        run(topArchiveName,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-cp\", jars, mainClass)\n-            .assertNormalExit(output -> {\n-                    output.shouldContain(\"Hello source: shared objects file\")\n-                          .shouldContain(\"HelloMore source: shared objects file\")\n-                          .shouldHaveExitValue(0);\n-                });\n+        runtimeTest(topArchiveName, jars, mainClass, 0, successMessage1, successMessage2);\n@@ -148,8 +131,32 @@\n-        run(topArchiveName,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-cp\", jars, mainClass)\n-        .assertAbnormalExit(output -> {\n-                output.shouldContain(\"shared class paths mismatch\")\n-                      .shouldHaveExitValue(1);\n-            });\n+        runtimeTest(topArchiveName, jars, mainClass, 1, failedMessage);\n+\n+        \/\/ Copy hello.jar to USER_DIR\/a\n+        destPath = CDSTestUtils.copyFile(appJar, USER_DIR.toString() + File.separator + \"a\");\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/aa\n+        destPath2 = CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"aa\");\n+\n+        \/\/ Dump CDS archive with the both jar files relocated\n+        \/\/ appJar to USER_DIR\/a\n+        \/\/ appJar2 to USER_DIR\/aa\n+        jars = destPath.toString() + File.pathSeparator + destPath2.toString();\n+        dump(topArchiveName,\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", jars, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        \/\/ Copy hello.jar to USER_DIR\/x\/a\n+        Path runPath = CDSTestUtils.copyFile(appJar, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"a\");\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/x\/aa\n+        Path runPath2= CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"aa\");\n+\n+        \/\/ Run with both jars relocated to USER_DIR\/x\/a and USER_DIR\/x\/aa dirs - should PASS\n+        jars = runPath.toString() + File.pathSeparator + runPath2.toString();\n+        runtimeTest(topArchiveName, jars, mainClass, 0, successMessage1, successMessage2);\n+\n+        \/\/ copy AppendClasspath_HelloMore.jar to USER_DIR\/x\/a\n+        runPath2= CDSTestUtils.copyFile(appJar2, USER_DIR.toString() + File.separator + \"x\" + File.separator + \"a\");\n@@ -157,0 +164,3 @@\n+        \/\/ Run with both jars relocated to USER_DIR\/x\/a dir - should FAIL\n+        jars = runPath.toString() + File.pathSeparator + runPath2.toString();\n+        runtimeTest(topArchiveName, jars, mainClass, 1, failedMessage);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/CommonAppClasspath.java","additions":67,"deletions":57,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    private static int offsetCommonAppClasspathOffset;\/\/ offset of GenericCDSFileMapHeader::_common_app_classpath_offset\n@@ -98,1 +97,0 @@\n-            offsetCommonAppClasspathOffset = wb.getCDSOffsetForName(\"GenericCDSFileMapHeader::_common_app_classpath_offset\");\n@@ -138,1 +136,0 @@\n-    public static int offsetCommonAppClasspathOffset() { return offsetCommonAppClasspathOffset; }\n@@ -167,4 +164,0 @@\n-    public static int commonAppClasspathOffset(File jsaFile) throws Exception {\n-        return (int)readInt(jsaFile, offsetCommonAppClasspathOffset, 4);\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -32,0 +34,2 @@\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n@@ -764,0 +768,16 @@\n+\n+    public static Path copyFile(String srcFile, String destDir) throws Exception {\n+        int idx = srcFile.lastIndexOf(File.separator);\n+        String jarName = srcFile.substring(idx + 1);\n+        Path srcPath = Paths.get(jarName);\n+        Path newPath = Paths.get(destDir);\n+        Path newDir;\n+        if (!Files.exists(newPath)) {\n+            newDir = Files.createDirectories(newPath);\n+        } else {\n+            newDir = newPath;\n+        }\n+        Path destPath = newDir.resolve(jarName);\n+        Files.copy(srcPath, destPath, REPLACE_EXISTING, COPY_ATTRIBUTES);\n+        return destPath;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}