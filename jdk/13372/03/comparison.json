{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2015 SAP SE. All rights reserved.\n+ * Copyright (c) 2015, 2023 SAP SE. All rights reserved.\n@@ -60,1 +60,1 @@\n-  const int abi_scratch = frame::abi_reg_args_size;\n+  const int abi_scratch = frame::top_ijava_frame_abi_size;\n@@ -79,2 +79,2 @@\n-  const int abi_scratch = is_top_frame ? (frame::abi_reg_args_size \/ Interpreter::stackElementSize) :\n-                                         (frame::abi_minframe_size \/ Interpreter::stackElementSize);\n+  const int abi_scratch = is_top_frame ? (frame::top_ijava_frame_abi_size \/ Interpreter::stackElementSize) :\n+                                         (frame::parent_ijava_frame_abi_size \/ Interpreter::stackElementSize);\n@@ -125,2 +125,2 @@\n-  const int abi_scratch = is_top_frame ? (frame::abi_reg_args_size \/ Interpreter::stackElementSize) :\n-                                         (frame::abi_minframe_size \/ Interpreter::stackElementSize);\n+  const int abi_scratch = is_top_frame ? (frame::top_ijava_frame_abi_size \/ Interpreter::stackElementSize) :\n+                                         (frame::parent_ijava_frame_abi_size \/ Interpreter::stackElementSize);\n@@ -130,1 +130,1 @@\n-    caller->sp() + method->max_locals() - 1 + (frame::abi_minframe_size \/ Interpreter::stackElementSize);\n+    caller->sp() + method->max_locals() - 1 + (frame::java_abi_size \/ Interpreter::stackElementSize);\n@@ -137,2 +137,2 @@\n-  intptr_t* sender_sp    = caller->sp() + (frame::abi_minframe_size - frame::abi_reg_args_size) \/ Interpreter::stackElementSize;\n-  intptr_t* top_frame_sp = is_top_frame ? sp : sp + (frame::abi_minframe_size - frame::abi_reg_args_size) \/ Interpreter::stackElementSize;\n+  intptr_t* sender_sp    = caller->sp() + (frame::parent_ijava_frame_abi_size - frame::top_ijava_frame_abi_size) \/ Interpreter::stackElementSize;\n+  intptr_t* top_frame_sp = is_top_frame ? sp : sp + (frame::parent_ijava_frame_abi_size - frame::top_ijava_frame_abi_size) \/ Interpreter::stackElementSize;\n","filename":"src\/hotspot\/cpu\/ppc\/abstractInterpreter_ppc.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -1837,1 +1837,1 @@\n-  const int frame_resize = frame::abi_reg_args_size - sizeof(frame::jit_abi); \/\/ C calls need larger frame.\n+  const int frame_resize = frame::native_abi_reg_args_size - sizeof(frame::java_abi); \/\/ C calls need larger frame.\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -156,1 +156,1 @@\n-  assert(frame_size_in_bytes > frame::abi_reg_args_size, \"init\");\n+  assert(frame_size_in_bytes > frame::native_abi_reg_args_size, \"init\");\n@@ -244,1 +244,1 @@\n-  int sp_offset = frame::abi_reg_args_size;\n+  int sp_offset = frame::native_abi_reg_args_size;\n@@ -490,3 +490,3 @@\n-        __ push_frame(frame::abi_reg_args_size, R0); \/\/ Empty dummy frame (no callee-save regs).\n-        sasm->set_frame_size(frame::abi_reg_args_size \/ BytesPerWord);\n-        OopMap* oop_map = new OopMap(frame::abi_reg_args_size \/ sizeof(jint), 0);\n+        __ push_frame(frame::native_abi_reg_args_size, R0); \/\/ Empty dummy frame (no callee-save regs).\n+        sasm->set_frame_size(frame::native_abi_reg_args_size \/ BytesPerWord);\n+        OopMap* oop_map = new OopMap(frame::native_abi_reg_args_size \/ sizeof(jint), 0);\n@@ -735,3 +735,3 @@\n-        __ push_frame(frame::abi_reg_args_size, R0); \/\/ empty dummy frame\n-        sasm->set_frame_size(frame::abi_reg_args_size \/ BytesPerWord);\n-        OopMap* oop_map = new OopMap(frame::abi_reg_args_size \/ sizeof(jint), 0);\n+        __ push_frame(frame::native_abi_reg_args_size, R0); \/\/ empty dummy frame\n+        sasm->set_frame_size(frame::native_abi_reg_args_size \/ BytesPerWord);\n+        OopMap* oop_map = new OopMap(frame::native_abi_reg_args_size \/ sizeof(jint), 0);\n","filename":"src\/hotspot\/cpu\/ppc\/c1_Runtime1_ppc.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2022, 2023 SAP SE. All rights reserved.\n@@ -32,1 +32,1 @@\n-  frame::abi_reg_args _abi;\n+  frame::native_abi_reg_args _abi;\n","filename":"src\/hotspot\/cpu\/ppc\/continuationEntry_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-\/\/     | frame::abi_minframe    |                          |                        |\n+\/\/     | frame::java_abi        |                          |                        |\n@@ -144,1 +144,1 @@\n-\/\/     | frame::abi_minframe    |                    |     | Lm                     |\n+\/\/     | frame::java_abi        |                    |     | Lm                     |\n@@ -146,1 +146,1 @@\n-\/\/     ==========================   of caller      -----   | frame::abi_minframe    |\n+\/\/     ==========================   of caller      -----   | frame::java_abi        |\n@@ -157,1 +157,1 @@\n-\/\/                                                         | frame::abi_minframe    |\n+\/\/                                                         | frame::java_abi        |\n@@ -167,1 +167,1 @@\n-\/\/     | frame::abi_minframe    |                          |                        |\n+\/\/     | frame::java_abi        |                          |                        |\n@@ -173,1 +173,1 @@\n-\/\/     | frame::abi_minframe    |                          | frame::abi_minframe    |\n+\/\/     | frame::java_abi        |                          | frame::java_abi        |\n@@ -181,1 +181,1 @@\n-\/\/      f is the frame to be relocated on the heap         | frame::abi_minframe    |\n+\/\/      f is the frame to be relocated on the heap         | frame::java_abi        |\n@@ -192,1 +192,1 @@\n-\/\/                                                         | frame::abi_minframe    |\n+\/\/                                                         | frame::java_abi        |\n@@ -212,1 +212,1 @@\n-\/\/     | frame::abi_minframe    |                          | frame::abi_minframe    |\n+\/\/     | frame::java_abi        |                          | frame::java_abi        |\n@@ -222,1 +222,1 @@\n-\/\/     | frame::abi_minframe    |                          | frame::abi_minframe    |\n+\/\/     | frame::java_abi        |                          | frame::java_abi        |\n@@ -228,1 +228,1 @@\n-\/\/      f is the frame to be relocated on the heap         | frame::abi_minframe    |\n+\/\/      f is the frame to be relocated on the heap         | frame::java_abi        |\n@@ -234,1 +234,1 @@\n-\/\/                                                         | frame::abi_minframe    |\n+\/\/                                                         | frame::java_abi        |\n@@ -242,1 +242,1 @@\n-\/\/     | frame::abi_minframe    |                          | frame::abi_minframe    |\n+\/\/     | frame::java_abi        |                          | frame::java_abi        |\n@@ -251,1 +251,1 @@\n-\/\/     | frame::abi_minframe    |                     |    | frame::abi_minframe    |\n+\/\/     | frame::java_abi        |                     |    | frame::java_abi        |\n@@ -257,1 +257,1 @@\n-\/\/                                                         | frame::abi_minframe    |\n+\/\/                                                         | frame::java_abi        |\n@@ -349,1 +349,1 @@\n-    address pc = (address)((frame::abi_minframe*) sp)->lr;\n+    address pc = (address)((frame::java_abi*) sp)->lr;\n@@ -360,1 +360,1 @@\n-    ((frame::abi_minframe*) sp)->callers_sp = (intptr_t) callers_sp;\n+    ((frame::java_abi*) sp)->callers_sp = (intptr_t) callers_sp;\n@@ -379,1 +379,1 @@\n-\/\/     |----------------------|    ^                                       | frame::abi_minframe  |<- unextended SP\n+\/\/     |----------------------|    ^                                       | frame::java_abi      |<- unextended SP\n@@ -386,1 +386,1 @@\n-\/\/     | frame::abi_minframe  |    |                                       | :                    |\n+\/\/     | frame::java_abi      |    |                                       | :                    |\n@@ -391,1 +391,1 @@\n-\/\/     |----------------------|    |                                    |  | frame::abi_minframe  |<- new SP of caller\n+\/\/     |----------------------|    |                                    |  | frame::java_abi      |<- new SP of caller\n@@ -398,1 +398,1 @@\n-\/\/     | frame::abi_minframe  |<- SP \/ unextended SP                    |  | :                    |\n+\/\/     | frame::java_abi      |<- SP \/ unextended SP                    |  | :                    |\n@@ -401,1 +401,1 @@\n-\/\/                                           | Growth |                 v  | frame::abi_minframe  |<- unextended SP \/ SP of new frame\n+\/\/                                           | Growth |                 v  | frame::java_abi      |<- unextended SP \/ SP of new frame\n@@ -418,1 +418,1 @@\n-\/\/     | frame::abi_minframe  |<- unextended SP            v            |  | :                    |   (unaligned)\n+\/\/     | frame::java_abi      |<- unextended SP            v            |  | :                    |   (unaligned)\n@@ -424,1 +424,1 @@\n-\/\/                                                                      |  | frame::abi_minframe  |<- new SP of caller\n+\/\/                                                                      |  | frame::java_abi      |<- new SP of caller\n@@ -434,1 +434,1 @@\n-\/\/                                                                      v  | frame::abi_minframe  |<- unextended SP \/ SP of new frame\n+\/\/                                                                      v  | frame::java_abi      |<- unextended SP \/ SP of new frame\n@@ -462,2 +462,2 @@\n-\/\/   a    |----------------------|                     | frame::abi_minframe  |\n-\/\/   l    | frame::abi_minframe  |<- unext. SP \/ SP    | (unused)             |<- unal.unext.SP\n+\/\/   a    |----------------------|                     | frame::java_abi      |\n+\/\/   l    | frame::java_abi      |<- unext. SP \/ SP    | (unused)             |<- unal.unext.SP\n@@ -468,1 +468,1 @@\n-\/\/        | frame::abi_minframe  |<- unext. SP \/ SP    | (if any)             |\n+\/\/        | frame::java_abi      |<- unext. SP \/ SP    | (if any)             |\n@@ -470,1 +470,1 @@\n-\/\/    r                                                | frame::abi_minframe  |<- caller's SP\n+\/\/    r                                                | frame::java_abi      |<- caller's SP\n@@ -475,1 +475,1 @@\n-\/\/                                                     | frame::abi_minframe  |<- unext. SP \/ SP\n+\/\/                                                     | frame::java_abi      |<- unext. SP \/ SP\n@@ -585,2 +585,2 @@\n-\/\/ | Minimal ABI          |                 | Minimal ABI          |                      | Minimal ABI          |\n-\/\/ | (frame::abi_minframe)|                 | (frame::abi_minframe)|                      | (frame::abi_minframe)|\n+\/\/ |                      |                 |                      |                      |                      |\n+\/\/ | (frame::java_abi)    |                 | (frame::java_abi)    |                      | (frame::java_abi)    |\n@@ -602,2 +602,2 @@\n-\/\/ |----------------------|   ::_max_stack  | Minimal ABI          |                      | Minimal ABI          |\n-\/\/ | Opt. Alignm. Padding |                 | (frame::abi_minframe)|                      | (frame::abi_minframe)|\n+\/\/ |----------------------|   ::_max_stack  |                      |                      |                      |\n+\/\/ | Opt. Alignm. Padding |                 | (frame::java_abi)    |                      | (frame::java_abi)    |\n@@ -607,2 +607,2 @@\n-\/\/ | (frame::abi_reg_args)|                                                               | frame::              |   (aligned)\n-\/\/ |                      |                                                               | ijava_state          |\n+\/\/ | (frame::             |                                                               | frame::              |   (aligned)\n+\/\/ |  native_abi_reg_args)|                                                               | ijava_state          |\n@@ -624,2 +624,2 @@\n-\/\/                                                                                        | (frame::abi_reg_args)|\n-\/\/                                                                                        |                      |\n+\/\/                                                                                        | (frame::             |\n+\/\/                                                                                        |  native_abi_reg_args)|\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-\/\/                     | (frame::abi_minframe)|\n+\/\/                     | (frame::java_abi)    |\n@@ -127,1 +127,1 @@\n-\/\/                     | (frame::abi_minframe)|\n+\/\/                     | (frame::java_abi)    |\n@@ -148,1 +148,1 @@\n-\/\/                     | (frame::abi_minframe)|\n+\/\/                     | (frame::java_abi)    |\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -120,1 +120,1 @@\n-    abi_minframe* sender_abi = (abi_minframe*) fp;\n+    common_abi* sender_abi = (common_abi*) fp;\n@@ -294,1 +294,1 @@\n-  int min_frame_slots = (abi_minframe_size + ijava_state_size) \/ sizeof(intptr_t);\n+  int min_frame_slots = (parent_ijava_frame_abi_size + ijava_state_size) \/ sizeof(intptr_t);\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  \/\/  ABI_48:\n+  \/\/  ABI_MINFRAME:\n@@ -69,2 +69,2 @@\n-  \/\/    24      reserved\n-  \/\/    32      reserved\n+  \/\/    24      reserved (ABI_ELFv2 only)\n+  \/\/    32      reserved (ABI_ELFv2 only)\n@@ -74,1 +74,1 @@\n-  \/\/    0       [ABI_48]\n+  \/\/    0       [ABI_MINFRAME]\n@@ -85,2 +85,2 @@\n-  \/\/ ABI_MINFRAME:\n-  struct abi_minframe {\n+  \/\/ Common ABI. On top of all frames, C and Java\n+  struct common_abi {\n@@ -88,1 +88,1 @@\n-    uint64_t cr;                                  \/\/_16\n+    uint64_t cr;\n@@ -90,0 +90,4 @@\n+  };\n+\n+  \/\/ ABI_MINFRAME. Used for native C frames.\n+  struct native_abi_minframe : common_abi {\n@@ -99,5 +103,1 @@\n-  enum {\n-    abi_minframe_size = sizeof(abi_minframe)\n-  };\n-\n-  struct abi_reg_args : abi_minframe {\n+  struct native_abi_reg_args : native_abi_minframe {\n@@ -116,1 +116,2 @@\n-    abi_reg_args_size = sizeof(abi_reg_args)\n+    native_abi_minframe_size = sizeof(native_abi_minframe),\n+    native_abi_reg_args_size = sizeof(native_abi_reg_args)\n@@ -120,1 +121,1 @@\n-          (offset_of(frame::abi_reg_args, _component))\n+          (offset_of(frame::native_abi_reg_args, _component))\n@@ -122,1 +123,1 @@\n-  struct abi_reg_args_spill : abi_reg_args {\n+  struct native_abi_reg_args_spill : native_abi_reg_args {\n@@ -130,1 +131,1 @@\n-    abi_reg_args_spill_size = sizeof(abi_reg_args_spill)\n+    native_abi_reg_args_spill_size = sizeof(native_abi_reg_args_spill)\n@@ -133,2 +134,2 @@\n-  #define _abi_reg_args_spill(_component) \\\n-          (offset_of(frame::abi_reg_args_spill, _component))\n+  #define _native_abi_reg_args_spill(_component) \\\n+          (offset_of(frame::native_abi_reg_args_spill, _component))\n@@ -189,0 +190,4 @@\n+  \/\/ We differnetiate between TOP and PARENT frames.\n+  \/\/ TOP frames allow for calling native C code.\n+  \/\/ A TOP frame is trimmed to a PARENT frame when calling a Java method.\n+  \/\/\n@@ -230,1 +235,3 @@\n-  struct parent_ijava_frame_abi : abi_minframe {\n+  \/\/ ABI for every Java frame, compiled and interpreted\n+  struct java_abi : common_abi {\n+    uint64_t toc;\n@@ -233,2 +240,1 @@\n-  enum {\n-    parent_ijava_frame_abi_size = sizeof(parent_ijava_frame_abi)\n+  struct parent_ijava_frame_abi : java_abi {\n@@ -240,1 +246,1 @@\n-  struct top_ijava_frame_abi : abi_reg_args {\n+  struct top_ijava_frame_abi : native_abi_reg_args {\n@@ -244,0 +250,2 @@\n+    java_abi_size = sizeof(java_abi),\n+    parent_ijava_frame_abi_size = sizeof(parent_ijava_frame_abi),\n@@ -321,10 +329,2 @@\n-  \/\/ JIT_ABI (TOP and PARENT)\n-\n-  struct jit_abi {\n-    uint64_t callers_sp;\n-    uint64_t cr;\n-    uint64_t lr;\n-    uint64_t toc;\n-    \/\/ Nothing to add here!\n-    \/\/ NOT ALIGNED to frame::alignment_in_bytes (16).\n-  };\n+  \/\/ For JIT frames we don't differentiate between TOP and PARENT frames.\n+  \/\/ Runtime calls go through stubs which push a new frame.\n@@ -332,1 +332,1 @@\n-  struct jit_out_preserve : jit_abi {\n+  struct jit_out_preserve : java_abi {\n@@ -393,2 +393,2 @@\n-  inline abi_minframe* own_abi()     const { return (abi_minframe*) _sp; }\n-  inline abi_minframe* callers_abi() const { return (abi_minframe*) _fp; }\n+  inline common_abi* own_abi()     const { return (common_abi*) _sp; }\n+  inline common_abi* callers_abi() const { return (common_abi*) _fp; }\n@@ -442,1 +442,1 @@\n-    metadata_words                         = sizeof(abi_minframe) >> LogBytesPerWord,\n+    metadata_words                         = sizeof(java_abi) >> LogBytesPerWord,\n@@ -449,1 +449,1 @@\n-    metadata_words_at_top                  = sizeof(abi_minframe) >> LogBytesPerWord,\n+    metadata_words_at_top                  = sizeof(java_abi) >> LogBytesPerWord,\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2023 SAP SE. All rights reserved.\n@@ -57,1 +57,1 @@\n-    const int frame_size = align_up(frame::abi_reg_args_size + spill_slots * BytesPerWord, frame::alignment_in_bytes);\n+    const int frame_size = align_up(frame::native_abi_reg_args_size + spill_slots * BytesPerWord, frame::alignment_in_bytes);\n@@ -101,1 +101,1 @@\n-  const int frame_size = align_up(frame::abi_reg_args_size + spill_slots * BytesPerWord, frame::alignment_in_bytes);\n+  const int frame_size = align_up(frame::native_abi_reg_args_size + spill_slots * BytesPerWord, frame::alignment_in_bytes);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023 SAP SE. All rights reserved.\n@@ -414,1 +414,1 @@\n-                  + frame::abi_reg_args_size;\n+                  + frame::native_abi_reg_args_size;\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1174,1 +1174,1 @@\n-  addi(Rscratch2, R15_esp, Interpreter::stackElementSize - frame::abi_reg_args_size);\n+  addi(Rscratch2, R15_esp, Interpreter::stackElementSize - frame::top_ijava_frame_abi_size);\n@@ -2189,1 +2189,1 @@\n-    \/\/ After thawing the top frame of a continuation we reach here with frame::abi_minframe.\n+    \/\/ After thawing the top frame of a continuation we reach here with frame::java_abi.\n@@ -2214,1 +2214,1 @@\n-    cmpdi(CCR0, R0, frame::abi_reg_args_size + frame::ijava_state_size);\n+    cmpdi(CCR0, R0, frame::top_ijava_frame_abi_size + frame::ijava_state_size);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -733,1 +733,1 @@\n-    std(tmp, frame::abi_minframe_size + m * 8, R1_SP);\n+    std(tmp, frame::native_abi_minframe_size + m * 8, R1_SP);\n@@ -979,1 +979,1 @@\n-\/\/ Push a frame of size `bytes' plus abi_reg_args on top.\n+\/\/ Push a frame of size `bytes' plus native_abi_reg_args on top.\n@@ -981,1 +981,1 @@\n-  push_frame(bytes + frame::abi_reg_args_size, tmp);\n+  push_frame(bytes + frame::native_abi_reg_args_size, tmp);\n@@ -988,1 +988,1 @@\n-  push_frame(bytes + frame::abi_reg_args_size + frame::spill_nonvolatiles_size, tmp);\n+  push_frame(bytes + frame::native_abi_reg_args_size + frame::spill_nonvolatiles_size, tmp);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -319,1 +319,1 @@\n-  \/\/ Push a frame of size `bytes' plus abi_reg_args on top.\n+  \/\/ Push a frame of size `bytes' plus native_abi_reg_args on top.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -509,1 +509,1 @@\n-    const int abi_offset = frame::abi_reg_args_size \/ 8;\n+    const int abi_offset = frame::native_abi_reg_args_size \/ 8;\n@@ -513,1 +513,1 @@\n-      \/\/ The registers are stored in reverse order on the stack (by save_volatile_gprs(R1_SP, abi_reg_args_size)).\n+      \/\/ The registers are stored in reverse order on the stack (by save_volatile_gprs(R1_SP, native_abi_reg_args_size)).\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3802,1 +3802,1 @@\n-  varargs_C_out_slots_killed(((frame::abi_reg_args_size - frame::jit_out_preserve_size) \/ VMRegImpl::stack_slot_size));\n+  varargs_C_out_slots_killed(((frame::native_abi_reg_args_size - frame::jit_out_preserve_size) \/ VMRegImpl::stack_slot_size));\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2018 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -80,1 +80,1 @@\n-  int frame_size_in_bytes = frame::abi_reg_args_size;\n+  int frame_size_in_bytes = frame::native_abi_reg_args_size;\n","filename":"src\/hotspot\/cpu\/ppc\/runtime_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -275,1 +275,1 @@\n-                                   + frame::abi_reg_args_size;\n+                                   + frame::native_abi_reg_args_size;\n@@ -793,1 +793,1 @@\n-  int stk = (frame::abi_reg_args_size - frame::jit_out_preserve_size) \/ VMRegImpl::stack_slot_size;\n+  int stk = (frame::native_abi_reg_args_size - frame::jit_out_preserve_size) \/ VMRegImpl::stack_slot_size;\n@@ -1954,1 +1954,1 @@\n-  const int framesize_bytes = (int)align_up((int)frame::abi_reg_args_size, frame::alignment_in_bytes);\n+  const int framesize_bytes = (int)align_up((int)frame::native_abi_reg_args_size, frame::alignment_in_bytes);\n@@ -2483,1 +2483,1 @@\n-    int frame_size = frame::abi_reg_args_size + align_up(total_c_args * wordSize, frame::alignment_in_bytes);\n+    int frame_size = frame::native_abi_reg_args_size + align_up(total_c_args * wordSize, frame::alignment_in_bytes);\n@@ -2953,1 +2953,1 @@\n-  const int frame_size_in_bytes = frame::abi_reg_args_spill_size;\n+  const int frame_size_in_bytes = frame::native_abi_reg_args_spill_size;\n@@ -3122,2 +3122,2 @@\n-  __ std( R3_RET, _abi_reg_args_spill(spill_ret),  R1_SP);\n-  __ stfd(F1_RET, _abi_reg_args_spill(spill_fret), R1_SP);\n+  __ std( R3_RET, _native_abi_reg_args_spill(spill_ret),  R1_SP);\n+  __ stfd(F1_RET, _native_abi_reg_args_spill(spill_fret), R1_SP);\n@@ -3135,2 +3135,2 @@\n-  __ ld( R3_RET, _abi_reg_args_spill(spill_ret),  R1_SP);\n-  __ lfd(F1_RET, _abi_reg_args_spill(spill_fret), R1_SP);\n+  __ ld( R3_RET, _native_abi_reg_args_spill(spill_ret),  R1_SP);\n+  __ lfd(F1_RET, _native_abi_reg_args_spill(spill_fret), R1_SP);\n@@ -3182,1 +3182,1 @@\n-  int frame_size_in_bytes = frame::abi_reg_args_size;\n+  int frame_size_in_bytes = frame::native_abi_reg_args_size;\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-  return (address)((frame::abi_minframe*) _sp)->lr;\n+  return (address)((frame::common_abi*) _sp)->lr;\n@@ -64,1 +64,1 @@\n-  intptr_t* fp_addr = (intptr_t*)&((frame::abi_minframe*)_sp)->callers_sp;\n+  intptr_t* fp_addr = (intptr_t*)&((frame::common_abi*)_sp)->callers_sp;\n","filename":"src\/hotspot\/cpu\/ppc\/stackChunkFrameStream_ppc.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2012, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2023 SAP SE. All rights reserved.\n@@ -94,2 +94,2 @@\n-    assert((sizeof(frame::abi_minframe) % 16) == 0,           \"unaligned\");\n-    assert((sizeof(frame::abi_reg_args) % 16) == 0,           \"unaligned\");\n+    assert((sizeof(frame::native_abi_minframe) % 16) == 0,    \"unaligned\");\n+    assert((sizeof(frame::native_abi_reg_args) % 16) == 0,    \"unaligned\");\n@@ -543,1 +543,1 @@\n-    int frame_size_in_bytes = frame::abi_reg_args_size;\n+    int frame_size_in_bytes = frame::native_abi_reg_args_size;\n@@ -4556,1 +4556,1 @@\n-    __ addi(R3_RET, R3_RET, frame::abi_reg_args_size); \/\/ Large abi required for C++ calls.\n+    __ addi(R3_RET, R3_RET, frame::native_abi_reg_args_size); \/\/ Large abi required for C++ calls.\n@@ -4620,1 +4620,1 @@\n-    int framesize = frame::abi_reg_args_size \/ VMRegImpl::stack_slot_size;\n+    int framesize = frame::native_abi_reg_args_size \/ VMRegImpl::stack_slot_size;\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -981,1 +981,1 @@\n-  __ addi(Rtop_frame_size, Rtop_frame_size, frame::abi_reg_args_size + frame::ijava_state_size);\n+  __ addi(Rtop_frame_size, Rtop_frame_size, frame::top_ijava_frame_abi_size + frame::ijava_state_size);\n@@ -984,1 +984,1 @@\n-  __ addi(Rparent_frame_resize, Rparent_frame_resize, frame::abi_minframe_size - Interpreter::stackElementSize);\n+  __ addi(Rparent_frame_resize, Rparent_frame_resize, frame::parent_ijava_frame_abi_size - Interpreter::stackElementSize);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-  static const int doYield_stub_frame_size = frame::abi_reg_args_size >> LogBytesPerWord;\n+  static const int doYield_stub_frame_size = frame::native_abi_reg_args_size >> LogBytesPerWord;\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}