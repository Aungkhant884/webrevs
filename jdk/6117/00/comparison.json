{"files":[{"patch":"@@ -394,1 +394,0 @@\n-\n@@ -414,1 +413,1 @@\n-     * Validates a RFC 7230 field-name.\n+     * Validates an RFC 7230 field-name.\n@@ -475,1 +474,1 @@\n-     * Validates a RFC 7230 field-value.\n+     * Validates an RFC 7230 field-value.\n@@ -498,1 +497,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import static sun.net.httpserver.Utils.isQuotedString;\n@@ -52,0 +53,4 @@\n+     * @apiNote Where a backslash (\"\\\") is used as quoting mechanism within the\n+     * realm string, it must be escaped by two preceding backslashes, for example\n+     * {@code \"foo\\\\\\\"bar\\\\\\\"\"} will be embedded as {@code \"foo\\\"bar\\\"\"}.\n+     *\n@@ -54,1 +59,3 @@\n-     * @throws IllegalArgumentException if realm is an empty string\n+     * @throws IllegalArgumentException if realm is an empty string or is not\n+     *         valid, see <a href=\"https:\/\/tools.ietf.org\/html\/rfc7230#section-3.2\">\n+     *         RFC 7230 section-3.2<\/a>.\n@@ -56,1 +63,1 @@\n-    public BasicAuthenticator (String realm) {\n+    public BasicAuthenticator(String realm) {\n@@ -68,0 +75,3 @@\n+     * <p>Where a backslash (\"\\\") is used as quoting mechanism within the realm\n+     * string, it must be escaped by two preceding backslashes, for example\n+     * {@code \"foo\\\\\\\"bar\\\\\\\"\"} will be embedded as {@code \"foo\\\"bar\\\"\"}.\n@@ -72,1 +82,3 @@\n-     * @throws IllegalArgumentException if realm is an empty string\n+     * @throws IllegalArgumentException if realm is an empty string or is not\n+     *         valid, see <a href=\"https:\/\/tools.ietf.org\/html\/rfc7230#section-3.2\">\n+     *         RFC 7230 section-3.2<\/a>.\n@@ -74,1 +86,1 @@\n-    public BasicAuthenticator (String realm, Charset charset) {\n+    public BasicAuthenticator(String realm, Charset charset) {\n@@ -78,0 +90,2 @@\n+        if (!isQuotedString(realm))\n+            throw new IllegalArgumentException(\"realm invalid: \" + realm);\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/BasicAuthenticator.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import static sun.net.httpserver.Utils.*;\n@@ -589,1 +590,1 @@\n-                    if (!isValidHeaderKey(k)) {\n+                    if (!isValidName(k)) {\n@@ -937,20 +938,0 @@\n-\n-    \/*\n-     * Validates a RFC 7230 header-key.\n-     *\/\n-    static boolean isValidHeaderKey(String token) {\n-        if (token == null) return false;\n-\n-        boolean isValidChar;\n-        char[] chars = token.toCharArray();\n-        String validSpecialChars = \"!#$%&'*+-.^_`|~\";\n-        for (char c : chars) {\n-            isValidChar = ((c >= 'a') && (c <= 'z')) ||\n-                          ((c >= 'A') && (c <= 'Z')) ||\n-                          ((c >= '0') && (c <= '9'));\n-            if (!isValidChar && validSpecialChars.indexOf(c) == -1) {\n-                return false;\n-            }\n-        }\n-        return !token.isEmpty();\n-    }\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.net.httpserver;\n+\n+\/**\n+ * Provides utility methods for checking header field names and quoted strings.\n+ *\/\n+public class Utils {\n+\n+    \/\/ ABNF primitives defined in RFC 7230\n+    private static final boolean[] TCHAR = new boolean[256];\n+    private static final boolean[] QDTEXT = new boolean[256];\n+    private static final boolean[] QUOTED_PAIR = new boolean[256];\n+\n+    static {\n+        char[] allowedTokenChars =\n+                (\"!#$%&'*+-.^_`|~0123456789\" +\n+                        \"abcdefghijklmnopqrstuvwxyz\" +\n+                        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").toCharArray();\n+        for (char c : allowedTokenChars) {\n+            TCHAR[c] = true;\n+        }\n+        for (char c = 0x20; c <= 0xFF; c++) {\n+            QDTEXT[c] = true;\n+        }\n+        QDTEXT[0x22] = false;  \/\/ (\")   illegal\n+        QDTEXT[0x5c] = false;  \/\/ (\\)   illegal\n+        QDTEXT[0x7F] = false;  \/\/ (DEL) illegal\n+\n+        for (char c = 0x20; c <= 0xFF; c++) {\n+            QUOTED_PAIR[c] = true;\n+        }\n+        QUOTED_PAIR[0x09] = true;  \/\/ (\\t)    legal\n+        QUOTED_PAIR[0x7F] = false; \/\/ (DEL) illegal\n+    }\n+\n+    \/*\n+     * Validates an RFC 7230 field-name.\n+     *\/\n+    public static boolean isValidName(String token) {\n+        for (int i = 0; i < token.length(); i++) {\n+            char c = token.charAt(i);\n+            if (c > 255 || !TCHAR[c]) {\n+                return false;\n+            }\n+        }\n+        return !token.isEmpty();\n+    }\n+\n+    \/*\n+     * Validates an RFC 7230 quoted-string.\n+     *\/\n+    public static boolean isQuotedString(String token) {\n+        for (int i = 0; i < token.length(); i++) {\n+            char c = token.charAt(i);\n+            if (c > 255) {\n+                return false;\n+            } else if (c == 0x5c) {  \/\/ check if valid quoted-pair\n+                if (i == token.length() - 1 || !QUOTED_PAIR[token.charAt(i++)]) {\n+                    return false;\n+                }\n+            } else if (!QDTEXT[c]) {\n+                return false; \/\/ illegal char\n+            }\n+        }\n+        return true;\n+    }\n+}\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/Utils.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8275534\n+ * @summary  Check that ISO-8859-1 encoded realm strings are transported correctly\n+ *           with HttpURLConnection and HttpClient\n+ * @modules jdk.httpserver\n+ * @library \/test\/lib\n+ * @run testng\/othervm BasicAuthenticatorRealm\n+ *\/\n+\n+import com.sun.net.httpserver.BasicAuthenticator;\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpHandlers;\n+import com.sun.net.httpserver.HttpServer;\n+import java.net.Authenticator;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse.BodyHandlers;\n+\n+import jdk.test.lib.net.URIBuilder;\n+import org.testng.annotations.Test;\n+\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertEquals;\n+\n+public class BasicAuthenticatorRealm {\n+\n+    static final String REALM = \"U\\u00ffU@realm\";  \/\/ non-ASCII char\n+    static final String EXPECTED_AUTH_HEADER_VALUE = \"Basic realm=\\\"U\\u00ffU@realm\\\", charset=\\\"UTF-8\\\"\";\n+\n+    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+\n+    @Test\n+    public static void testURLConnection() throws Exception {\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n+        var handler = HttpHandlers.of(200, Headers.of(), \"\");\n+        var context = server.createContext(\"\/test\", handler);\n+        var auth = new ServerAuthenticator(REALM);\n+\n+        context.setAuthenticator(auth);\n+\n+        try {\n+            server.start();\n+            var url = uri(server).toURL();\n+            var connection = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            assertEquals(connection.getResponseCode(), 401);\n+            assertEquals(connection.getHeaderField(\"WWW-Authenticate\"), EXPECTED_AUTH_HEADER_VALUE);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public static void testURLConnectionAuthenticated() throws Exception {\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n+        var handler = HttpHandlers.of(200, Headers.of(), \"foo\");\n+        var context = server.createContext(\"\/test\", handler);\n+        var auth = new ServerAuthenticator(REALM);\n+\n+        context.setAuthenticator(auth);\n+        Authenticator.setDefault(new ClientAuthenticator());\n+\n+        try {\n+            server.start();\n+            var url = uri(server).toURL();\n+            var connection = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+            assertEquals(connection.getResponseCode(), 200);\n+            assertEquals(connection.getInputStream().readAllBytes(), \"foo\".getBytes(UTF_8));\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public static void testHttpClient() throws Exception {\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n+        var client = HttpClient.newBuilder().proxy(NO_PROXY).build();\n+        var request = HttpRequest.newBuilder(uri(server)).build();\n+        var handler = HttpHandlers.of(200, Headers.of(), \"foo\");\n+        var context = server.createContext(\"\/test\", handler);\n+        var authenticator = new ServerAuthenticator(REALM);\n+\n+        context.setAuthenticator(authenticator);\n+\n+        try {\n+            server.start();\n+            var response = client.send(request, BodyHandlers.ofString(UTF_8));\n+            assertEquals(response.statusCode(), 401);\n+            assertEquals(response.headers().firstValue(\"WWW-Authenticate\").orElseThrow(), EXPECTED_AUTH_HEADER_VALUE);\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    @Test\n+    public static void testHttpClientAuthenticated() throws Exception {\n+        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n+        var request = HttpRequest.newBuilder(uri(server)).build();\n+        var handler = HttpHandlers.of(200, Headers.of(), \"foo\");\n+        var context = server.createContext(\"\/test\", handler);\n+        var auth = new ServerAuthenticator(REALM);\n+        var client = HttpClient.newBuilder()\n+                .proxy(NO_PROXY)\n+                .authenticator(new ClientAuthenticator())\n+                .build();\n+\n+        context.setAuthenticator(auth);\n+\n+        try {\n+            server.start();\n+            var response = client.send(request, BodyHandlers.ofString(UTF_8));\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.body(), \"foo\");\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    static class ServerAuthenticator extends BasicAuthenticator {\n+        ServerAuthenticator(String realm) {\n+            super(realm);\n+        }\n+\n+        @Override\n+        public boolean checkCredentials(String username, String password) {\n+            if (!getRealm().equals(realm)) {\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n+\n+    static class ClientAuthenticator extends java.net.Authenticator {\n+        @Override\n+        public PasswordAuthentication getPasswordAuthentication() {\n+            if (!getRequestingPrompt().equals(REALM)) {\n+                throw new RuntimeException(\"realm does not match\");\n+            }\n+            return new PasswordAuthentication(\"username\", \"password\".toCharArray());\n+        }\n+    }\n+\n+    public static URI uri(HttpServer server) {\n+        return URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(server.getAddress().getAddress())\n+                .port(server.getAddress().getPort())\n+                .path(\"\/test\/\")\n+                .buildUnchecked();\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/BasicAuthenticatorRealm.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -26,1 +26,1 @@\n- * @bug 8230159\n+ * @bug 8230159 8275534\n@@ -29,1 +29,1 @@\n- * BasicAuthenticator constructor\n+ *          BasicAuthenticator constructor\n@@ -39,0 +39,1 @@\n+import static org.testng.Assert.assertEquals;\n@@ -76,0 +77,1 @@\n+        assertEquals(ex.getMessage(), \"realm must not be empty\");\n@@ -86,0 +88,1 @@\n+        assertEquals(ex.getMessage(), \"realm must not be empty\");\n@@ -88,0 +91,14 @@\n+\n+        ex = expectThrows(IAE, () ->\n+                createBasicAuthenticator(\"\\\"\/test\\\"\"));\n+        assertEquals(ex.getMessage(), \"realm invalid: \\\"\/test\\\"\");\n+        System.out.println(\"Invalid string for realm provided - \" +\n+                \"IllegalArgumentException thrown as expected: \" + ex);\n+\n+        ex = expectThrows(IAE, () ->\n+                createBasicAuthenticator(\"\\\"\"));\n+        assertEquals(ex.getMessage(), \"realm invalid: \\\"\");\n+        System.out.println(\"Invalid string for realm provided - \" +\n+                \"IllegalArgumentException thrown as expected: \" + ex);\n+\n+        createBasicAuthenticator(\"\\\\\\\"\/test\\\\\\\"\");\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/bugs\/BasicAuthenticatorExceptionCheck.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}