{"files":[{"patch":"@@ -442,0 +442,7 @@\n+            if (e.getErrorCode() == CKR_OPERATION_NOT_INITIALIZED) {\n+                \/\/ Cancel Operation may be invoked after an error on a PKCS#11\n+                \/\/ call. If the operation inside the token was already cancelled,\n+                \/\/ do not fail here. This is part of a defensive mechanism for\n+                \/\/ PKCS#11 libraries that do not strictly follow the standard.\n+                return;\n+            }\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -657,0 +657,5 @@\n+            \/\/ As per the PKCS#11 standard, C_Sign and C_SignFinal may only\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors.\n+            \/\/ However, this type of error is prevented from reaching this\n+            \/\/ point at OpenJDK's libj2pkcs11 native library. Thus, doCancel\n+            \/\/ can safely be 'false' here.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}