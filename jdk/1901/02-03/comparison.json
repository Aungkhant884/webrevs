{"files":[{"patch":"@@ -353,0 +353,7 @@\n+            if (e.getErrorCode() == CKR_OPERATION_NOT_INITIALIZED) {\n+                \/\/ Cancel Operation may be invoked after an error on a PKCS#11\n+                \/\/ call. If the operation inside the token was already cancelled,\n+                \/\/ do not fail here. This is part of a defensive mechanism for\n+                \/\/ PKCS#11 libraries that do not strictly follow the standard.\n+                return;\n+            }\n@@ -619,0 +626,6 @@\n+            \/\/ As per the PKCS#11 standard, C_Encrypt and C_Decrypt may only\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors or\n+            \/\/ successful calls to determine the output length. However,\n+            \/\/ these cases are not expected here because the output length\n+            \/\/ is checked in the OpenJDK side before making the PKCS#11 call.\n+            \/\/ Thus, doCancel can safely be 'false'.\n@@ -705,0 +718,6 @@\n+            \/\/ As per the PKCS#11 standard, C_Encrypt and C_Decrypt may only\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors or\n+            \/\/ successful calls to determine the output length. However,\n+            \/\/ these cases are not expected here because the output length\n+            \/\/ is checked in the OpenJDK side before making the PKCS#11 call.\n+            \/\/ Thus, doCancel can safely be 'false'.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11AEADCipher.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -854,0 +854,1 @@\n+                doCancel = false;\n@@ -856,1 +857,0 @@\n-                doCancel = false;\n@@ -870,0 +870,1 @@\n+                    doCancel = false;\n@@ -872,1 +873,0 @@\n-                    doCancel = false;\n@@ -879,0 +879,1 @@\n+                    doCancel = false;\n@@ -881,1 +882,0 @@\n-                    doCancel = false;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -154,0 +154,7 @@\n+            if (e.getErrorCode() == CKR_OPERATION_NOT_INITIALIZED) {\n+                \/\/ Cancel Operation may be invoked after an error on a PKCS#11\n+                \/\/ call. If the operation inside the token was already cancelled,\n+                \/\/ do not fail here. This is part of a defensive mechanism for\n+                \/\/ PKCS#11 libraries that do not strictly follow the standard.\n+                return;\n+            }\n@@ -216,0 +223,5 @@\n+            \/\/ As per the PKCS#11 standard, C_SignFinal may only\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors or\n+            \/\/ successful calls to determine the output length. However,\n+            \/\/ these cases are handled at OpenJDK's libj2pkcs11 native\n+            \/\/ library. Thus, doCancel can safely be 'false' here.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Mac.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -301,0 +301,7 @@\n+            if (e.getErrorCode() == CKR_OPERATION_NOT_INITIALIZED) {\n+                \/\/ Cancel Operation may be invoked after an error on a PKCS#11\n+                \/\/ call. If the operation inside the token was already cancelled,\n+                \/\/ do not fail here. This is part of a defensive mechanism for\n+                \/\/ PKCS#11 libraries that do not strictly follow the standard.\n+                return;\n+            }\n@@ -665,0 +672,5 @@\n+            \/\/ As per the PKCS#11 standard, C_Sign and C_SignFinal may only\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors or\n+            \/\/ successful calls to determine the output length. However,\n+            \/\/ these cases are handled at OpenJDK's libj2pkcs11 native\n+            \/\/ library. Thus, doCancel can safely be 'false' here.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11PSSSignature.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -317,0 +317,7 @@\n+            if (e.getErrorCode() == CKR_OPERATION_NOT_INITIALIZED) {\n+                \/\/ Cancel Operation may be invoked after an error on a PKCS#11\n+                \/\/ call. If the operation inside the token was already cancelled,\n+                \/\/ do not fail here. This is part of a defensive mechanism for\n+                \/\/ PKCS#11 libraries that do not strictly follow the standard.\n+                return;\n+            }\n@@ -658,4 +665,4 @@\n-            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors.\n-            \/\/ However, this type of error is prevented from reaching this\n-            \/\/ point at OpenJDK's libj2pkcs11 native library. Thus, doCancel\n-            \/\/ can safely be 'false' here.\n+            \/\/ keep the operation active on CKR_BUFFER_TOO_SMALL errors or\n+            \/\/ successful calls to determine the output length. However,\n+            \/\/ these cases are handled at OpenJDK's libj2pkcs11 native\n+            \/\/ library. Thus, doCancel can safely be 'false' here.\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}