{"files":[{"patch":"@@ -104,1 +104,1 @@\n-static jint CurrentVersion = JNI_VERSION_19;\n+static jint CurrentVersion = JNI_VERSION_20;\n@@ -3761,1 +3761,0 @@\n-  \/\/ Since this is not a JVM_ENTRY we have to set the thread state manually before entering.\n@@ -3764,0 +3763,8 @@\n+  \/\/ Make sure we are actually in a newly attached thread, with no\n+  \/\/ existing Java frame.\n+  if (thread->has_last_Java_frame()) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ Since this is not a JVM_ENTRY we have to set the thread state manually before entering.\n+\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1994,0 +1994,1 @@\n+#define JNI_VERSION_20  0x00140000\n","filename":"src\/java.base\/share\/native\/include\/jni.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8290482\n+ * @summary Tests that DestroyJavaVM from an active thread\n+ *          reports JNI_ERR.\n+ * @run main\/native TestActiveDestroy driver\n+ *\/\n+\n+public class TestActiveDestroy {\n+\n+    static native boolean tryDestroyJavaVM();\n+\n+    static {\n+        System.loadLibrary(\"activeDestroy\");\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (tryDestroyJavaVM()) {\n+            throw new Error(\"DestroyJavaVM succeeded when it should not!\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/activeDestroy\/TestActiveDestroy.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"jni.h\"\n+\n+static const char* jni_error_code(int ret) {\n+  switch(ret) {\n+  case JNI_OK: return \"JNI_OK\";\n+  case JNI_ERR: return \"JNI_ERR\";\n+  case JNI_EDETACHED: return \"JNI_EDETACHED\";\n+  case JNI_EVERSION: return \"JNI_EVERSION\";\n+  case JNI_ENOMEM: return \"JNI_ENOMEM\";\n+  case JNI_EEXIST: return \"JNI_EEXIST\";\n+  case JNI_EINVAL: return \"JNI_EINVAL\";\n+  default: return \"Invalid JNI error code\";\n+  }\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_TestActiveDestroy_tryDestroyJavaVM(JNIEnv *env, jclass cls) {\n+  JavaVM* jvm;\n+  int res = (*env)->GetJavaVM(env, &jvm);\n+  if (res != JNI_OK) {\n+    fprintf(stderr, \"GetJavaVM failed: %s\\n\", jni_error_code(res));\n+    exit(1);\n+  }\n+  printf(\"Calling DestroyJavaVM from active thread\\n\");\n+  res = (*jvm)->DestroyJavaVM(jvm);\n+  printf(\"DestroyJavaVM returned: %s\\n\", jni_error_code(res));\n+  return res == JNI_OK;\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/activeDestroy\/libactiveDestroy.c","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}