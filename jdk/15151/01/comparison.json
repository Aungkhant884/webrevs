{"files":[{"patch":"@@ -147,2 +147,2 @@\n-        return Platform.jvmLibDir().resolve((Platform.isWindows() ? \"\" : \"lib\")\n-                + \"jsig.\" + Platform.sharedLibraryExt());\n+        return Platform.jvmLibDir().resolve(Platform.sharedLibraryPrefix() + \"jsig.\"\n+                + Platform.sharedLibraryExt());\n","filename":"test\/hotspot\/jtreg\/runtime\/signal\/SigTestDriver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,8 +42,1 @@\n-        String libname;\n-        if (Platform.isWindows()) {\n-            libname = name + \".dll\";\n-        } else if (Platform.isOSX()) {\n-            libname = \"lib\" + name + \".dylib\";\n-        } else {\n-            libname = \"lib\" + name + \".so\";\n-        }\n+        String libname = Platform.sharedLibraryPrefix() + name + \".\" + Platform.sharedLibraryExt();\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/AttachFailed\/AttachFailedTestBase.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -66,1 +66,2 @@\n-        Path libpath = Paths.get(jdkPath, jdkLibPath(), sharedObjectName(\"instrument\"));\n+        Path libpath = Paths.get(jdkPath, jdkLibPath(),\n+                                 Platform.sharedLibraryPrefix() + \"instrument.\" + Platform.sharedLibraryExt());\n@@ -160,13 +161,0 @@\n-    \/**\n-     * Build name of shared object according to platform rules\n-     *\/\n-    public static String sharedObjectName(String name) {\n-        if (Platform.isWindows()) {\n-            return name + \".dll\";\n-        }\n-        if (Platform.isOSX()) {\n-            return \"lib\" + name + \".dylib\";\n-        }\n-        return \"lib\" + name + \".so\";\n-    }\n-\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/LoadAgentDcmdTest.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,14 +48,1 @@\n-        String osDependentBaseString = null;\n-        if (Platform.isAix()) {\n-            osDependentBaseString = \"lib%s.so\";\n-        } else if (Platform.isLinux()) {\n-            osDependentBaseString = \"lib%s.so\";\n-        } else if (Platform.isOSX()) {\n-            osDependentBaseString = \"lib%s.dylib\";\n-        } else if (Platform.isWindows()) {\n-            osDependentBaseString = \"%s.dll\";\n-        }\n-\n-        if (osDependentBaseString == null) {\n-            Assert.fail(\"Unsupported OS\");\n-        }\n+        String osDependentBaseString = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/DynLibsTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -53,4 +53,1 @@\n-        return String.format(\"%s%s.%s\",\n-                Platform.isWindows() ? \"\" : \"lib\",\n-                name,\n-                Platform.sharedLibraryExt());\n+        return Platform.sharedLibraryPrefix() + name + \".\" + Platform.sharedLibraryExt();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/NativeLibraryCopier.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,3 +82,2 @@\n-        String prefix = Platform.isWindows() ? \"\" : \"lib\";\n-        String libname1 = prefix + JVMTI_AGENT1_LIB + \".\" + Platform.sharedLibraryExt();\n-        String libname2 = prefix + JVMTI_AGENT2_LIB + \".\" + Platform.sharedLibraryExt();\n+        String libname1 = Platform.sharedLibraryPrefix() + JVMTI_AGENT1_LIB + \".\" + Platform.sharedLibraryExt();\n+        String libname2 = Platform.sharedLibraryPrefix() + JVMTI_AGENT2_LIB + \".\" + Platform.sharedLibraryExt();\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,14 +73,1 @@\n-        String libTemplate = null;\n-        if (Platform.isWindows()) {\n-            libTemplate = \"%s.dll\";\n-        } else if (Platform.isOSX()) {\n-            libTemplate = \"lib%s.dylib\";\n-        } else if (Platform.isLinux()) {\n-            libTemplate = \"lib%s.so\";\n-        } else if (Platform.isAix()) {\n-            libTemplate = \"lib%s.so\";\n-        }\n-\n-        if (libTemplate == null) {\n-            throw new Exception(\"Unsupported OS\");\n-        }\n+        String libTemplate = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibrariesEvent.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -73,14 +73,1 @@\n-        String libTemplate = null;\n-        if (Platform.isWindows()) {\n-            libTemplate = \"%s.dll\";\n-        } else if (Platform.isOSX()) {\n-            libTemplate = \"lib%s.dylib\";\n-        } else if (Platform.isLinux()) {\n-            libTemplate = \"lib%s.so\";\n-        } else if (Platform.isAix()) {\n-            libTemplate = \"lib%s.so\";\n-        }\n-\n-        if (libTemplate == null) {\n-            throw new Exception(\"Unsupported OS\");\n-        }\n+        String libTemplate = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibraryLoadEvent.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -365,0 +365,12 @@\n+    \/**\n+     * Returns the usual file prefix of a shared library, e.g. \"lib\" on linux, empty on windows.\n+     * @return file name prefix\n+     *\/\n+    public static String sharedLibraryPrefix() {\n+        if (isWindows()) {\n+            return \"\";\n+        } else {\n+            return \"lib\";\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}