{"files":[{"patch":"@@ -147,2 +147,1 @@\n-        return Platform.jvmLibDir().resolve(Platform.sharedLibraryPrefix() + \"jsig.\"\n-                + Platform.sharedLibraryExt());\n+        return Platform.jvmLibDir().resolve(Platform.buildSharedLibraryName(\"jsig\"));\n","filename":"test\/hotspot\/jtreg\/runtime\/signal\/SigTestDriver.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        String libname = Platform.sharedLibraryPrefix() + name + \".\" + Platform.sharedLibraryExt();\n+        String libname = Platform.buildSharedLibraryName(name);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/AttachFailed\/AttachFailedTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-        Path libpath = Paths.get(jdkPath, jdkLibPath(),\n-                                 Platform.sharedLibraryPrefix() + \"instrument.\" + Platform.sharedLibraryExt());\n+        Path libpath = Paths.get(jdkPath, jdkLibPath(), Platform.buildSharedLibraryName(\"instrument\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/LoadAgentDcmdTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,6 +47,3 @@\n-\n-        String osDependentBaseString = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n-\n-        output.shouldContain(String.format(osDependentBaseString, \"jvm\"));\n-        output.shouldContain(String.format(osDependentBaseString, \"java\"));\n-        output.shouldContain(String.format(osDependentBaseString, \"management\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"jvm\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"java\"));\n+        output.shouldContain(Platform.buildSharedLibraryName(\"management\"));\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/vm\/DynLibsTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-                        .resolve(libname(args[0]))\n+                        .resolve(Platform.buildSharedLibraryName(args[0]))\n@@ -42,1 +42,1 @@\n-            Path dst = dstDir.resolve(libname(args[i])).toAbsolutePath();\n+            Path dst = dstDir.resolve(Platform.buildSharedLibraryName(args[i])).toAbsolutePath();\n@@ -51,4 +51,0 @@\n-\n-    private static String libname(String name) {\n-        return Platform.sharedLibraryPrefix() + name + \".\" + Platform.sharedLibraryExt();\n-    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/NativeLibraryCopier.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-        String libname1 = Platform.sharedLibraryPrefix() + JVMTI_AGENT1_LIB + \".\" + Platform.sharedLibraryExt();\n-        String libname2 = Platform.sharedLibraryPrefix() + JVMTI_AGENT2_LIB + \".\" + Platform.sharedLibraryExt();\n+        String libname1 = Platform.buildSharedLibraryName(JVMTI_AGENT1_LIB);\n+        String libname2 = Platform.buildSharedLibraryName(JVMTI_AGENT2_LIB);\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/warnings\/DynamicLoadWarningTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,2 +73,0 @@\n-        String libTemplate = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n-\n@@ -78,1 +76,1 @@\n-            libs.add(String.format(libTemplate, name));\n+            libs.add(Platform.buildSharedLibraryName(name));\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibrariesEvent.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n-            List<String> expectedLibs = getExpectedLibs();\n+            String expectedLib = Platform.buildSharedLibraryName(\"instrument\");\n+            boolean expectedLibFound = false;\n@@ -62,4 +63,2 @@\n-                for (String expectedLib : new ArrayList<>(expectedLibs)) {\n-                    if (lib.contains(expectedLib)) {\n-                        expectedLibs.remove(expectedLib);\n-                    }\n+                if (lib.contains(expectedLib)) {\n+                    expectedLibFound = true;\n@@ -68,1 +67,1 @@\n-            assertTrue(expectedLibs.isEmpty(), \"Missing libraries:\" + expectedLibs.stream().collect(Collectors.joining(\", \")));\n+            assertTrue(expectedLibFound, \"Missing library \" + expectedLib);\n@@ -71,12 +70,0 @@\n-\n-    private static List<String> getExpectedLibs() throws Throwable {\n-        String libTemplate = Platform.sharedLibraryPrefix() + \"%s.\" + Platform.sharedLibraryExt();\n-\n-        List<String> libs = new ArrayList<String>();\n-        String[] names = { \"instrument\" };\n-        for (String name : names) {\n-            libs.add(String.format(libTemplate, name));\n-        }\n-        return libs;\n-    }\n-\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeLibraryLoadEvent.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -377,0 +377,9 @@\n+    \/**\n+     * Returns the usual full shared lib name of a name without prefix and extension, e.g. for jsig\n+     * \"libjsig.so\" on linux, \"jsig.dll\" on windows.\n+     * @return the full shared lib name\n+     *\/\n+    public static String buildSharedLibraryName(String name) {\n+        return sharedLibraryPrefix() + name + \".\" + sharedLibraryExt();\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}