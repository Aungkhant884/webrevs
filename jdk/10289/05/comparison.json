{"files":[{"patch":"@@ -849,0 +849,17 @@\n+    @SuppressWarnings(\"unchecked\")\n+    public static float getTracking(Map<?, ?> map) {\n+        if (map != null) {\n+            AttributeValues av = null;\n+            if (map instanceof AttributeMap &&\n+                    ((AttributeMap) map).getValues() != null) {\n+                av = ((AttributeMap)map).getValues();\n+            } else if (map.get(TextAttribute.TRACKING) != null) {\n+                av = AttributeValues.fromMap((Map<Attribute, ?>)map);\n+            }\n+            if (av != null) {\n+                return av.tracking;\n+            }\n+        }\n+        return 0;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/AttributeValues.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -74,0 +74,2 @@\n+  float advTracking;\n+\n@@ -113,0 +115,2 @@\n+\n+    advTracking = font.getSize() * AttributeValues.getTracking(atts);\n@@ -381,1 +385,1 @@\n-    if (charinfo == null || idx >= charinfo.length) {\n+    if (charinfo == null || idx >= charinfo.length || charinfo[idx] == 0) {\n@@ -384,1 +388,1 @@\n-        return charinfo[idx];\n+        return charinfo[idx] + advTracking;\n@@ -480,0 +484,2 @@\n+    final float epsilon = 0.005f;\n+\n@@ -482,0 +488,5 @@\n+\n+    if (advTracking > 0) {\n+      width += advTracking;\n+    }\n+\n@@ -483,1 +494,1 @@\n-    while (width >= 0 && ++start < length) {\n+    while (width >= -epsilon && ++start < length) {\n@@ -489,1 +500,3 @@\n-      width -= adv;\n+      if (adv != 0) {\n+          width -= adv + advTracking;\n+      }\n@@ -505,1 +518,4 @@\n-      a += charinfo[cidx];\n+      float adv = charinfo[cidx];\n+      if (adv != 0) {\n+          a += adv + advTracking;\n+      }\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/ExtendedTextSourceLabel.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -200,2 +200,0 @@\n-            Font2D f2d = FontUtilities.getFont2D(font);\n-            FontStrike strike = f2d.getStrike(font, frc);\n@@ -206,0 +204,1 @@\n+                float prevPos = 0;\n@@ -208,2 +207,3 @@\n-                    for (int i = j, n = 0; n < glyphs.length; i += 2) {\n-                        if (strike.getGlyphAdvance(glyphs[n++]) != 0) { \/\/ might be an inadequate test\n+                    for (int i = j; i < positions.length; i += 2) {\n+                        if (i == j || prevPos != positions[i]) {\n+                            prevPos = positions[i];\n@@ -212,0 +212,2 @@\n+                        } else if (prevPos == positions[i]) {\n+                            positions[i] = positions[i - 2];\n@@ -214,1 +216,0 @@\n-                    positions[positions.length-2+j] += delta;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/StandardGlyphVector.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8165943\n+ * @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual LineBreakWithTracking\n+ *\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedString;\n+import java.util.Hashtable;\n+import java.lang.reflect.InvocationTargetException;\n+\n+class LineBreakPanel extends JPanel implements ActionListener {\n+\n+  private float textTracking = 0.0f;\n+  private static String fontName = \"Dialog\";\n+  private static String text = \"This is a long line of text that should be broken across multiple lines. \"\n+          + \"Please set the different tracking values to test via menu! This test should pass if \"\n+          + \"these lines are broken to fit the width, and fail otherwise.  It should \"\n+          + \"also format the hebrew (\\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5) and arabic \"\n+          + \"(\\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e) and CJK \"\n+          + \"(\\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\u67b1\\u67b2\\u67b3\\u67b4\\u67b5\\u67b6\\u67b7\"\n+          + \"\\u67b8\\u67b9) text correctly.\";\n+\n+  private LineBreakMeasurer lineMeasurer;\n+\n+  public void actionPerformed(ActionEvent e) {\n+    textTracking = (float)((JRadioButtonMenuItem)e.getSource()).getClientProperty( \"tracking\" );\n+    lineMeasurer = null;\n+    invalidate();\n+    repaint();\n+  }\n+\n+  public void paintComponent(Graphics g) {\n+    super.paintComponent(g);\n+    setBackground(Color.white);\n+\n+    Graphics2D g2d = (Graphics2D)g;\n+\n+    if (lineMeasurer == null) {\n+      Float regular = Float.valueOf(16.0f);\n+      Float big = Float.valueOf(24.0f);\n+\n+      Hashtable map = new Hashtable();\n+      map.put(TextAttribute.SIZE, (float)18.0);\n+      map.put(TextAttribute.TRACKING, (float)textTracking);\n+\n+      AttributedString astr = new AttributedString(text, map);\n+      astr.addAttribute(TextAttribute.SIZE, regular, 0, text.length());\n+      astr.addAttribute(TextAttribute.FAMILY, fontName, 0, text.length());\n+\n+      int ix = text.indexOf(\"broken\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"hebrew\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"arabic\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"CJK\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 3);\n+\n+      FontRenderContext frc = g2d.getFontRenderContext();\n+      lineMeasurer = new LineBreakMeasurer(astr.getIterator(), frc);\n+    }\n+\n+    lineMeasurer.setPosition(0);\n+\n+    float w = (float)getSize().width;\n+    float x = 0, y = 0;\n+    TextLayout layout;\n+    while ((layout = lineMeasurer.nextLayout(w)) != null) {\n+      x = layout.isLeftToRight() ? 0 : w - layout.getAdvance();\n+      y += layout.getAscent();\n+      layout.draw(g2d, x, y);\n+      y += layout.getDescent() + layout.getLeading();\n+    }\n+  }\n+}\n+\n+public class LineBreakWithTracking {\n+\n+  private static final String INSTRUCTIONS = \"\"\"\n+     This manual test verifies that LineBreakMeasurer measures the lines'\n+     breaks correctly taking into account the TextAttribute.TRACKING value.\n+     The test string includes Latin, Arabic, CJK and Hebrew.\n+\n+     You should choose a tracking value from the menu and resize the window.\n+     If the text lines break exactly to the wrapping width:\n+     no room for one more word exists and\n+     the text lines are not too long for given wrapping width, -\n+     then press PASS, otherwise - FAIL.\n+     \"\"\";\n+\n+  public void createGUI(JFrame frame) {\n+\n+    LineBreakPanel panel = new LineBreakPanel();\n+    frame.getContentPane().add(panel, BorderLayout.CENTER);\n+\n+    JMenuBar menuBar = new JMenuBar();\n+\n+    JMenu menu = new JMenu(\"Tracking\");\n+    ButtonGroup btnGroup = new ButtonGroup();\n+    String btnLabels[] = {\"-0.1\", \"0\", \"0.1\", \"0.2\", \"0.3\"};\n+    float val = -0.1f;\n+    for (String label : btnLabels) {\n+      JRadioButtonMenuItem btn = new JRadioButtonMenuItem(label);\n+      btn.putClientProperty( \"tracking\", val );\n+      btn.addActionListener(panel);\n+      btnGroup.add(btn);\n+      menu.add(btn);\n+      val += 0.1f;\n+    }\n+    menuBar.add(menu);\n+\n+    frame.setJMenuBar(menuBar);\n+  }\n+\n+  public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+\n+    JFrame frame = new JFrame(\"LineBreakMeasurer with Tracking\");\n+    frame.setSize(new Dimension(640, 480));\n+\n+    LineBreakWithTracking controller = new LineBreakWithTracking();\n+    controller.createGUI(frame);\n+\n+    PassFailJFrame passFailJFrame = new PassFailJFrame(INSTRUCTIONS);\n+    PassFailJFrame.addTestWindow(frame);\n+    PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+    frame.setVisible(true);\n+    passFailJFrame.awaitAndCheck();\n+  }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/LineBreakWithTracking.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 8165943\n+  @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n+  @run main\/othervm LineBreakWithTrackingAuto\n+*\/\n+\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedString;\n+\n+public class LineBreakWithTrackingAuto {\n+\n+  private static final String WORD = \"word\";\n+  private static final String SPACE = \" \";\n+  private static final int NUM_WORDS = 12;\n+  private static final float FONT_SIZE = 24.0f;\n+  private static final float TEXT_TRACKING[] = { -0.1f, 0f, 0.1f, 0.2f, 0.3f };\n+  private static final float EPSILON = 0.005f;\n+\n+\n+  public static void main(String[] args) {\n+    new LineBreakWithTrackingAuto().test();\n+  }\n+\n+  public void test() {\n+\n+    final FontRenderContext frc = new FontRenderContext(null, false, false);\n+\n+    \/\/ construct a paragraph as follows: [SPACE + WORD] + ...\n+    StringBuffer text = new StringBuffer();\n+    for (int i = 0; i < NUM_WORDS; i++) {\n+      text.append(SPACE);\n+      text.append(WORD);\n+    }\n+    AttributedString attrString = new AttributedString(text.toString());\n+    attrString.addAttribute(TextAttribute.SIZE, Float.valueOf(FONT_SIZE));\n+\n+    \/\/ test different tracking values: -0.1f, 0f, 0.1f, 0.2f, 0.3f\n+    for (float textTracking : TEXT_TRACKING) {\n+\n+      final float trackingAdvance = FONT_SIZE * textTracking;\n+      attrString.addAttribute(TextAttribute.TRACKING, textTracking);\n+\n+      LineBreakMeasurer measurer = new LineBreakMeasurer(attrString.getIterator(), frc);\n+\n+      final int sequenceLength = WORD.length() + SPACE.length();\n+      final float sequenceAdvance = getSequenceAdvance(measurer, text.length(), sequenceLength);\n+      final float textAdvance = NUM_WORDS * sequenceAdvance;\n+\n+      \/\/ test different wrapping width starting from the WORD+SPACE to TEXT width\n+      for (float wrappingWidth = sequenceAdvance; wrappingWidth < textAdvance; wrappingWidth += sequenceAdvance \/ sequenceLength) {\n+\n+        measurer.setPosition(0);\n+\n+        \/\/ break a paragraph into lines that fit the given wrapping width\n+        do {\n+          TextLayout layout = measurer.nextLayout(wrappingWidth);\n+          float visAdvance = layout.getVisibleAdvance();\n+\n+          int currPos = measurer.getPosition();\n+          if ((trackingAdvance <= 0 && visAdvance - wrappingWidth > EPSILON)\n+                  || (trackingAdvance > 0 && visAdvance - wrappingWidth > trackingAdvance + EPSILON)) {\n+            throw new Error(\"text line is too long for given wrapping width\");\n+          }\n+\n+          if (currPos < text.length() && visAdvance <= wrappingWidth - sequenceAdvance) {\n+            throw new Error(\"text line is too short for given wrapping width\");\n+          }\n+        } while (measurer.getPosition() != text.length());\n+\n+      }\n+    }\n+  }\n+\n+  private float getSequenceAdvance(LineBreakMeasurer measurer, int textLength, int sequenceLength) {\n+\n+    measurer.setPosition(textLength - sequenceLength);\n+\n+    TextLayout layout = measurer.nextLayout(10000.0f);\n+    if (layout.getCharacterCount() != sequenceLength) {\n+      throw new Error(\"layout length is incorrect\");\n+    }\n+\n+    return layout.getVisibleAdvance();\n+  }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/LineBreakWithTrackingAuto.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}