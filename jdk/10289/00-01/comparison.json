{"files":[{"patch":"@@ -176,0 +176,1 @@\n+\n@@ -200,2 +201,0 @@\n-            Font2D f2d = FontUtilities.getFont2D(font);\n-            FontStrike strike = f2d.getStrike(font, frc);\n@@ -206,0 +205,1 @@\n+                float prevPos = 0;\n@@ -208,2 +208,3 @@\n-                    for (int i = j, n = 0; n < glyphs.length; i += 2) {\n-                        if (strike.getGlyphAdvance(glyphs[n++]) != 0) { \/\/ might be an inadequate test\n+                    for (int i = j; i < positions.length; i += 2) {\n+                        if (i == j || prevPos != positions[i]) {\n+                            prevPos = positions[i];\n@@ -212,0 +213,2 @@\n+                        } else if (prevPos == positions[i]) {\n+                            positions[i] = positions[i - 2];\n@@ -214,1 +217,0 @@\n-                    positions[positions.length-2+j] += delta;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/StandardGlyphVector.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @key headful\n+  @bug 8165943\n+  @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n+  @compile LineBreakWithTracking.java\n+  @run main\/manual LineBreakWithTracking\n+*\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedString;\n+import java.util.Hashtable;\n+\n+class LineBreakPanel extends JPanel implements ActionListener {\n+\n+  private float textTracking = 0.0f;\n+  private static String fontName = \"Bitstream Cyberbit\";\n+  private static String text = \"This is a long line of text that should be broken across multiple lines. \"\n+          + \"Please set the different tracking values to test via menu! This test should pass if \"\n+          + \"these lines are broken to fit the width, and fail otherwise.  It should \"\n+          + \"also format the hebrew (\\u05d0\\u05d1\\u05d2 \\u05d3\\u05d4\\u05d5) and arabic \"\n+          + \"(\\u0627\\u0628\\u062a\\u062c \\u062e\\u0644\\u0627\\u062e) and CJK \"\n+          + \"(\\u4e00\\u4e01\\u4e02\\uac00\\uac01\\uc4fa\\u67b1\\u67b2\\u67b3\\u67b4\\u67b5\\u67b6\\u67b7\"\n+          + \"\\u67b8\\u67b9) text correctly.\";\n+\n+  private LineBreakMeasurer lineMeasurer;\n+\n+  public void actionPerformed(ActionEvent e) {\n+    textTracking = (float)((JRadioButtonMenuItem)e.getSource()).getClientProperty( \"tracking\" );\n+    lineMeasurer = null;\n+    invalidate();\n+    repaint();\n+  }\n+\n+  public void paintComponent(Graphics g) {\n+    super.paintComponent(g);\n+    setBackground(Color.white);\n+\n+    Graphics2D g2d = (Graphics2D)g;\n+\n+    if (lineMeasurer == null) {\n+      Float regular = new Float(16.0);\n+      Float big = new Float(24.0);\n+\n+      Hashtable map = new Hashtable();\n+      map.put(TextAttribute.SIZE, (float)18.0);\n+      map.put(TextAttribute.TRACKING, (float)textTracking);\n+\n+      AttributedString astr = new AttributedString(text, map);\n+      astr.addAttribute(TextAttribute.SIZE, regular, 0, text.length());\n+      astr.addAttribute(TextAttribute.FAMILY, fontName, 0, text.length());\n+\n+      int ix = text.indexOf(\"broken\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"hebrew\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"arabic\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 6);\n+      ix = text.indexOf(\"CJK\");\n+      astr.addAttribute(TextAttribute.SIZE, big, ix, ix + 3);\n+\n+      FontRenderContext frc = g2d.getFontRenderContext();\n+      lineMeasurer = new LineBreakMeasurer(astr.getIterator(), frc);\n+    }\n+\n+    lineMeasurer.setPosition(0);\n+\n+    float w = (float)getSize().width;\n+    float x = 0, y = 0;\n+    TextLayout layout;\n+    while ((layout = lineMeasurer.nextLayout(w)) != null) {\n+      x = layout.isLeftToRight() ? 0 : w - layout.getAdvance();\n+      y += layout.getAscent();\n+      layout.draw(g2d, x, y);\n+      y += layout.getDescent() + layout.getLeading();\n+    }\n+  }\n+}\n+\n+public class LineBreakWithTracking {\n+\n+  public void createGUI(JFrame frame) {\n+\n+    LineBreakPanel panel = new LineBreakPanel();\n+    frame.getContentPane().add(panel, BorderLayout.CENTER);\n+\n+    JMenuBar menuBar = new JMenuBar();\n+\n+    JMenu menu = new JMenu(\"Tracking\");\n+    ButtonGroup btnGroup = new ButtonGroup();\n+    String btnLabels[] = {\"-0.1\", \"0\", \"0.1\", \"0.2\", \"0.3\"};\n+    float val = -0.1f;\n+    for (String label : btnLabels) {\n+      JRadioButtonMenuItem btn = new JRadioButtonMenuItem(label);\n+      btn.putClientProperty( \"tracking\", val );\n+      btn.addActionListener(panel);\n+      btnGroup.add(btn);\n+      menu.add(btn);\n+      val += 0.1f;\n+    }\n+    menuBar.add(menu);\n+\n+    JButton btn = new JButton(\"Pass\");\n+    btn.addActionListener(new ActionListener(){\n+      public void actionPerformed(ActionEvent e){\n+        System.exit(0);\n+      }\n+    });\n+    menuBar.add(btn);\n+\n+    btn = new JButton(\"Fail\");\n+    btn.addActionListener(new ActionListener(){\n+      public void actionPerformed(ActionEvent e){\n+        System.exit(1);\n+      }\n+    });\n+    menuBar.add(btn);\n+\n+    frame.setJMenuBar(menuBar);\n+  }\n+\n+  public static void main(String[] args) {\n+\n+    JFrame frame = new JFrame(\"LineBreakMeasurer with Tracking\");\n+\n+    LineBreakWithTracking controller = new LineBreakWithTracking();\n+    controller.createGUI(frame);\n+\n+    frame.addWindowListener(new WindowAdapter() {\n+      public void windowClosing(WindowEvent e) {\n+        System.exit(1);\n+      }\n+    });\n+\n+    frame.setSize(new Dimension(640, 480));\n+    frame.setVisible(true);\n+  }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/LineBreakWithTracking.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}