{"files":[{"patch":"@@ -484,0 +484,2 @@\n+    final float epsilon = 0.005f;\n+\n@@ -487,1 +489,3 @@\n-    width += advTracking;\n+    if (advTracking > 0) {\n+      width += advTracking;\n+    }\n@@ -490,1 +494,1 @@\n-    while (width >= 0 && ++start < length) {\n+    while (width >= -epsilon && ++start < length) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/ExtendedTextSourceLabel.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,7 +25,7 @@\n-  @test\n-  @key headful\n-  @bug 8165943\n-  @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n-  @compile LineBreakWithTracking.java\n-  @run main\/manual LineBreakWithTracking\n-*\/\n+ * @test\n+ * @bug 8165943\n+ * @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n+ * @library ..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual LineBreakWithTracking\n+ *\/\n@@ -45,0 +45,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -74,2 +75,2 @@\n-      Float regular = new Float(16.0);\n-      Float big = new Float(24.0);\n+      Float regular = Float.valueOf(16.0f);\n+      Float big = Float.valueOf(24.0f);\n@@ -114,0 +115,12 @@\n+  private static final String INSTRUCTIONS = \"\"\"\n+     This manual test verifies that LineBreakMeasurer measures the lines' \n+     breaks correctly taking into account the TextAttribute.TRACKING value.\n+     The test string includes Latin, Arabic, CJK and Hebrew. \n+            \n+     You should choose a tracking value from the menu and resize the window.\n+     If the text lines break exactly to the wrapping width:\n+     no room for one more word exists and \n+     the text lines are not too long for given wrapping width, -\n+     then press PASS, otherwise - FAIL.\n+     \"\"\";\n+\n@@ -135,16 +148,0 @@\n-    JButton btn = new JButton(\"Pass\");\n-    btn.addActionListener(new ActionListener(){\n-      public void actionPerformed(ActionEvent e){\n-        System.exit(0);\n-      }\n-    });\n-    menuBar.add(btn);\n-\n-    btn = new JButton(\"Fail\");\n-    btn.addActionListener(new ActionListener(){\n-      public void actionPerformed(ActionEvent e){\n-        System.exit(1);\n-      }\n-    });\n-    menuBar.add(btn);\n-\n@@ -154,1 +151,1 @@\n-  public static void main(String[] args) {\n+  public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n@@ -157,0 +154,1 @@\n+    frame.setSize(new Dimension(640, 480));\n@@ -161,7 +159,3 @@\n-    frame.addWindowListener(new WindowAdapter() {\n-      public void windowClosing(WindowEvent e) {\n-        System.exit(1);\n-      }\n-    });\n-\n-    frame.setSize(new Dimension(640, 480));\n+    PassFailJFrame passFailJFrame = new PassFailJFrame(INSTRUCTIONS);\n+    PassFailJFrame.addTestWindow(frame);\n+    PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n@@ -169,0 +163,1 @@\n+    passFailJFrame.awaitAndCheck();\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/LineBreakWithTracking.java","additions":28,"deletions":33,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 8165943\n+  @summary LineBreakMeasurer does not measure correctly if TextAttribute.TRACKING is set\n+  @run main\/othervm LineBreakWithTrackingAuto\n+*\/\n+\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.LineBreakMeasurer;\n+import java.awt.font.TextAttribute;\n+import java.awt.font.TextLayout;\n+import java.text.AttributedString;\n+\n+public class LineBreakWithTrackingAuto {\n+\n+  private static final String WORD = \"word\";\n+  private static final String SPACE = \" \";\n+  private static final int NUM_WORDS = 12;\n+  private static final float FONT_SIZE = 24.0f;\n+  private static final float TEXT_TRACKING[] = { -0.1f, 0f, 0.1f, 0.2f, 0.3f };\n+  private static final float EPSILON = 0.005f;\n+\n+\n+  public static void main(String[] args) {\n+    new LineBreakWithTrackingAuto().test();\n+  }\n+\n+  public void test() {\n+\n+    final FontRenderContext frc = new FontRenderContext(null, false, false);\n+\n+    \/\/ construct a paragraph as follows: [SPACE + WORD] + ...\n+    StringBuffer text = new StringBuffer();\n+    for (int i = 0; i < NUM_WORDS; i++) {\n+      text.append(SPACE);\n+      text.append(WORD);\n+    }\n+    AttributedString attrString = new AttributedString(text.toString());\n+    attrString.addAttribute(TextAttribute.SIZE, Float.valueOf(FONT_SIZE));\n+\n+    \/\/ test different tracking values: -0.1f, 0f, 0.1f, 0.2f, 0.3f\n+    for (float textTracking : TEXT_TRACKING) {\n+\n+      final float trackingAdvance = FONT_SIZE * textTracking;\n+      attrString.addAttribute(TextAttribute.TRACKING, textTracking);\n+\n+      LineBreakMeasurer measurer = new LineBreakMeasurer(attrString.getIterator(), frc);\n+\n+      final int sequenceLength = WORD.length() + SPACE.length();\n+      final float sequenceAdvance = getSequenceAdvance(measurer, text.length(), sequenceLength);\n+      final float textAdvance = NUM_WORDS * sequenceAdvance;\n+\n+      \/\/ test different wrapping width starting from the WORD+SPACE to TEXT width\n+      for (float wrappingWidth = sequenceAdvance; wrappingWidth < textAdvance; wrappingWidth += sequenceAdvance \/ sequenceLength) {\n+\n+        measurer.setPosition(0);\n+\n+        \/\/ break a paragraph into lines that fit the given wrapping width\n+        do {\n+          TextLayout layout = measurer.nextLayout(wrappingWidth);\n+          float visAdvance = layout.getVisibleAdvance();\n+\n+          int currPos = measurer.getPosition();\n+          if ((trackingAdvance <= 0 && visAdvance - wrappingWidth > EPSILON)\n+                  || (trackingAdvance > 0 && visAdvance - wrappingWidth > trackingAdvance + EPSILON)) {\n+            throw new Error(\"text line is too long for given wrapping width\");\n+          }\n+\n+          if (currPos < text.length() && visAdvance <= wrappingWidth - sequenceAdvance) {\n+            throw new Error(\"text line is too short for given wrapping width\");\n+          }\n+        } while (measurer.getPosition() != text.length());\n+\n+      }\n+    }\n+  }\n+\n+  private float getSequenceAdvance(LineBreakMeasurer measurer, int textLength, int sequenceLength) {\n+\n+    measurer.setPosition(textLength - sequenceLength);\n+\n+    TextLayout layout = measurer.nextLayout(10000.0f);\n+    if (layout.getCharacterCount() != sequenceLength) {\n+      throw new Error(\"layout length is incorrect\");\n+    }\n+\n+    return layout.getVisibleAdvance();\n+  }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/font\/LineBreakMeasurer\/LineBreakWithTrackingAuto.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}