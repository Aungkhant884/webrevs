{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import com.sun.tools.javac.code.Kinds;\n+import com.sun.tools.javac.code.Kinds.Kind;\n@@ -35,1 +37,0 @@\n-import com.sun.tools.javac.tree.JCTree;\n@@ -52,1 +53,0 @@\n-import com.sun.tools.javac.util.Assert;\n@@ -71,0 +71,1 @@\n+import com.sun.tools.javac.tree.TreeInfo;\n@@ -155,0 +156,1 @@\n+            Symbol exprSym = TreeInfo.symbol(tree.expr);\n@@ -160,4 +162,11 @@\n-            VarSymbol temp = new VarSymbol(pattSym.flags() | Flags.SYNTHETIC,\n-                    names.fromString(pattSym.name.toString() + target.syntheticNameChar() + \"temp\"),\n-                    tempType,\n-                    patt.var.sym.owner);\n+            VarSymbol temp;\n+            if (exprSym != null &&\n+                exprSym.kind == Kind.VAR &&\n+                exprSym.owner.kind.matches(Kinds.KindSelector.VAL_MTH)) {\n+                temp = (VarSymbol) exprSym;\n+            } else {\n+                temp = new VarSymbol(pattSym.flags() | Flags.SYNTHETIC,\n+                        names.fromString(pattSym.name.toString() + target.syntheticNameChar() + \"temp\"),\n+                        tempType,\n+                        patt.var.sym.owner);\n+            }\n@@ -179,2 +188,4 @@\n-            result = make.at(tree.pos).LetExpr(make.VarDef(temp, translatedExpr), (JCExpression)result).setType(syms.booleanType);\n-            ((LetExpr) result).needsCond = true;\n+            if (temp != exprSym) {\n+                result = make.at(tree.pos).LetExpr(make.VarDef(temp, translatedExpr), (JCExpression)result).setType(syms.booleanType);\n+                ((LetExpr) result).needsCond = true;\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,0 +234,5 @@\n+        \/\/binding in an anonymous class:\n+        if (!(invokeOnce(\"\") instanceof String s)) {\n+            throw new AssertionError();\n+        }\n+\n@@ -243,0 +248,9 @@\n+    private static boolean invoked;\n+    static Object invokeOnce(Object val) {\n+        if (invoked) {\n+            throw new IllegalStateException();\n+        } else {\n+            invoked = true;\n+            return val;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest1.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8260593\n+ * @summary Verify that a temporary storage variable is or is not used as needed when pattern matching.\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build combo.ComboTestHelper\n+ * @compile LocalVariableReuse.java\n+ * @run main LocalVariableReuse\n+ *\/\n+\n+import combo.ComboInstance;\n+import combo.ComboParameter;\n+import combo.ComboTask;\n+import combo.ComboTestHelper;\n+import java.io.IOException;\n+import javax.tools.JavaFileObject;\n+import toolbox.ToolBox;\n+\n+public class LocalVariableReuse extends ComboInstance<LocalVariableReuse> {\n+    protected ToolBox tb;\n+\n+    LocalVariableReuse() {\n+        super();\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ComboTestHelper<LocalVariableReuse>()\n+                .withDimension(\"CODE\", (x, code) -> x.code = code, Code.values())\n+                .run(LocalVariableReuse::new);\n+    }\n+\n+    private Code code;\n+\n+    private static final String MAIN_TEMPLATE =\n+            \"\"\"\n+            public class Test {\n+                #{CODE}\n+            }\n+            \"\"\";\n+\n+    @Override\n+    protected void doWork() throws Throwable {\n+        ComboTask task = newCompilationTask()\n+                .withSourceFromTemplate(MAIN_TEMPLATE, pname -> switch (pname) {\n+                        case \"CODE\" -> code;\n+                        default -> throw new UnsupportedOperationException(pname);\n+                    });\n+\n+        task.withOption(\"-printsource\");\n+        task.generate(result -> {\n+            for (JavaFileObject out : result.get()) {\n+                try {\n+                    String actualDesugared = out.getCharContent(false).toString();\n+                    boolean hasTempVar = actualDesugared.contains(\"$temp\");\n+                    if (hasTempVar != code.useTemporaryVariable) {\n+                        throw new AssertionError(\"Expected temporary variable: \" + code.useTemporaryVariable +\n+                                                  \", but got: \" + actualDesugared);\n+                    }\n+                } catch (IOException ex) {\n+                    throw new AssertionError(ex);\n+                }\n+            }\n+        });\n+    }\n+\n+    public enum Code implements ComboParameter {\n+        LOCAL_VARIABLE(\n+                \"\"\"\n+                private boolean test() {\n+                    Object o = null;\n+                    return o instanceof String s && s.length() > 0;\n+                }\n+                \"\"\", false),\n+        PARAMETER(\n+                \"\"\"\n+                private boolean test(Object o) {\n+                    return o instanceof String s && s.length() > 0;\n+                }\n+                \"\"\", false),\n+        LAMBDA_PARAMETER(\n+                \"\"\"\n+                private void test(Object o) {\n+                    I i = o -> o instanceof String s && s.length() > 0;\n+                interface I {\n+                    public boolean run(Object o);\n+                }\n+                \"\"\", false),\n+        EXCEPTION(\n+                \"\"\"\n+                private boolean test() {\n+                    try {\n+                        throw new Exception();\n+                    } catch (Exception o) {\n+                        return o instanceof RuntimeException re && re.getMessage() != null;\n+                    }\n+                }\n+                \"\"\", false),\n+        RESOURCE(\n+                \"\"\"\n+                private boolean test() throws Exception {\n+                    try (AutoCloseable r = null) {\n+                        return r instanceof java.io.InputStream in && in.read() != (-1);\n+                    } catch (Exception o) {\n+                    }\n+                }\n+                \"\"\", false),\n+        FIELD(\"\"\"\n+              private Object o;\n+              private boolean test() {\n+                  return o instanceof String s && s.length() > 0;\n+              }\n+              \"\"\",\n+              true),\n+        FINAL_FIELD(\"\"\"\n+              private final Object o;\n+              private boolean test() {\n+                  return o instanceof String s && s.length() > 0;\n+              }\n+              \"\"\",\n+              true),\n+        ARRAY_ACCESS(\"\"\"\n+              private boolean test() {\n+                  Object[] o = null;\n+                  return o[0] instanceof String s && s.length() > 0;\n+              }\n+              \"\"\",\n+              true),\n+        METHOD_INVOCATION(\"\"\"\n+              private boolean test() {\n+                  return get() instanceof String s && s.length() > 0;\n+              }\n+              private Object get() {\n+                  return null;\n+              }\n+              \"\"\",\n+              true),\n+        ;\n+        private final String body;\n+        private final boolean useTemporaryVariable;\n+\n+        private Code(String body, boolean useTemporaryVariable) {\n+            this.body = body;\n+            this.useTemporaryVariable = useTemporaryVariable;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return body;\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableReuse.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}