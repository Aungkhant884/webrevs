{"files":[{"patch":"@@ -952,4 +952,0 @@\n-  \/\/ These are dummies to prevent surprise implicit conversions to Register\n-  void push(void* v);\n-  void pop(void* v);\n-\n@@ -1111,4 +1107,0 @@\n-  \/\/ these are dummies used to catch attempting to convert NULL to Register\n-  void cmpl(Register dst, void* junk); \/\/ dummy\n-  void cmpq(Register dst, void* junk); \/\/ dummy\n-\n@@ -1616,6 +1608,0 @@\n-  \/\/ These dummies prevent using movl from converting a zero (like NULL) into Register\n-  \/\/ by giving the compiler two choices it can't resolve\n-\n-  void movl(Address  dst, void* junk);\n-  void movl(Register dst, void* junk);\n-\n@@ -1628,6 +1614,0 @@\n-\n-  \/\/ These dummies prevent using movq from converting a zero (like NULL) into Register\n-  \/\/ by giving the compiler two choices it can't resolve\n-\n-  void movq(Address  dst, void* dummy);\n-  void movq(Register dst, void* dummy);\n@@ -1656,1 +1636,0 @@\n-  void movslq(Register dst, void* src); \/\/ Dummy declaration to cause NULL to be ambiguous\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-        __ cmpptr(Address(OSR_buf, slot_offset + 1*BytesPerWord), (int32_t)NULL_WORD);\n+        __ cmpptr(Address(OSR_buf, slot_offset + 1*BytesPerWord), NULL_WORD);\n@@ -443,2 +443,2 @@\n-  __ movptr(Address(thread, JavaThread::exception_oop_offset()), (intptr_t)NULL_WORD);\n-  __ movptr(Address(thread, JavaThread::exception_pc_offset()), (intptr_t)NULL_WORD);\n+  __ movptr(Address(thread, JavaThread::exception_oop_offset()), NULL_WORD);\n+  __ movptr(Address(thread, JavaThread::exception_pc_offset()), NULL_WORD);\n@@ -736,1 +736,1 @@\n-          __ movl(as_Address(addr), (int32_t)NULL_WORD);\n+          __ movl(as_Address(addr), NULL_WORD);\n@@ -1662,1 +1662,1 @@\n-    __ cmpptr(recv_addr, (intptr_t)NULL_WORD);\n+    __ cmpptr(recv_addr, NULL_WORD);\n@@ -1714,1 +1714,1 @@\n-  __ cmpptr(obj, (int32_t)NULL_WORD);\n+  __ cmpptr(obj, NULL_WORD);\n@@ -1860,1 +1860,1 @@\n-    __ cmpptr(value, (int32_t)NULL_WORD);\n+    __ cmpptr(value, NULL_WORD);\n@@ -2666,1 +2666,1 @@\n-          __ cmpptr(reg1, (int32_t)0);\n+          __ cmpptr(reg1, NULL_WORD);\n@@ -2674,1 +2674,1 @@\n-          __ cmpptr(reg1, (int32_t)NULL_WORD);\n+          __ cmpptr(reg1, NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -149,2 +149,1 @@\n-  \/\/ This assumes that all prototype bits fit in an int32_t\n-  movptr(Address(obj, oopDesc::mark_offset_in_bytes ()), (int32_t)(intptr_t)markWord::prototype().value());\n+  movptr(Address(obj, oopDesc::mark_offset_in_bytes()), checked_cast<int32_t>(markWord::prototype().value()));\n@@ -256,1 +255,1 @@\n-  cmpptr(len, (int32_t)max_array_allocation_length);\n+  cmpptr(len, checked_cast<int32_t>(max_array_allocation_length));\n@@ -261,1 +260,1 @@\n-  movptr(arr_size, (int32_t)header_size * BytesPerWord + MinObjAlignmentInBytesMask);\n+  movptr(arr_size, header_size * BytesPerWord + MinObjAlignmentInBytesMask);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-    cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+    cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -732,1 +732,1 @@\n-  __ cmpptr(Address(thread, JavaThread::exception_oop_offset()), (int32_t) NULL_WORD);\n+  __ cmpptr(Address(thread, JavaThread::exception_oop_offset()), NULL_WORD);\n@@ -914,1 +914,1 @@\n-    __ cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -938,1 +938,1 @@\n-    __ cmpptr(Address(thread, JavaThread::exception_oop_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(thread, JavaThread::exception_oop_offset()), NULL_WORD);\n@@ -944,1 +944,1 @@\n-    __ cmpptr(Address(thread, JavaThread::exception_pc_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(thread, JavaThread::exception_pc_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -414,2 +414,1 @@\n-  \/\/ Without cast to int32_t this style of movptr will destroy r10 which is typically obj.\n-  movptr(Address(boxReg, 0), (int32_t)intptr_t(markWord::unused_mark().value()));\n+  movptr(Address(boxReg, 0), checked_cast<int32_t>(markWord::unused_mark().value()));\n@@ -696,1 +695,1 @@\n-  movptr(Address(boxReg, 0), (int32_t)intptr_t(markWord::unused_mark().value()));\n+  movptr(Address(boxReg, 0), checked_cast<int32_t>(markWord::unused_mark().value()));\n@@ -791,1 +790,1 @@\n-    cmpptr(Address(boxReg, 0), (int32_t)NULL_WORD);                   \/\/ Examine the displaced header\n+    cmpptr(Address(boxReg, 0), NULL_WORD);                            \/\/ Examine the displaced header\n@@ -881,1 +880,1 @@\n-  movptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int32_t)NULL_WORD);\n+  movptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), NULL_WORD);\n@@ -891,1 +890,1 @@\n-  cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(succ)), (int32_t)NULL_WORD);\n+  cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(succ)), NULL_WORD);\n@@ -896,1 +895,1 @@\n-  movptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), (int32_t)NULL_WORD);\n+  movptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(owner)), NULL_WORD);\n@@ -907,1 +906,1 @@\n-  cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(succ)), (int32_t)NULL_WORD);\n+  cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(succ)), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  __ cmpptr(pre_val, (int32_t) NULL_WORD);\n+  __ cmpptr(pre_val, NULL_WORD);\n@@ -296,1 +296,1 @@\n-  __ cmpptr(new_val, (int32_t) NULL_WORD);\n+  __ cmpptr(new_val, NULL_WORD);\n@@ -311,1 +311,1 @@\n-  __ cmpb(Address(card_addr, 0), (int)G1CardTable::g1_young_card_val());\n+  __ cmpb(Address(card_addr, 0), G1CardTable::g1_young_card_val());\n@@ -315,1 +315,1 @@\n-  __ cmpb(Address(card_addr, 0), (int)G1CardTable::dirty_card_val());\n+  __ cmpb(Address(card_addr, 0), G1CardTable::dirty_card_val());\n@@ -322,1 +322,1 @@\n-  __ movb(Address(card_addr, 0), (int)G1CardTable::dirty_card_val());\n+  __ movb(Address(card_addr, 0), G1CardTable::dirty_card_val());\n@@ -423,1 +423,1 @@\n-  __ cmpptr(pre_val_reg, (int32_t)NULL_WORD);\n+  __ cmpptr(pre_val_reg, NULL_WORD);\n@@ -437,1 +437,1 @@\n-  __ cmpptr(new_val_reg, (int32_t) NULL_WORD);\n+  __ cmpptr(new_val_reg, NULL_WORD);\n@@ -536,1 +536,1 @@\n-  __ cmpb(Address(card_addr, 0), (int)G1CardTable::g1_young_card_val());\n+  __ cmpb(Address(card_addr, 0), G1CardTable::g1_young_card_val());\n@@ -540,1 +540,1 @@\n-  __ cmpb(Address(card_addr, 0), (int)CardTable::dirty_card_val());\n+  __ cmpb(Address(card_addr, 0), CardTable::dirty_card_val());\n@@ -546,1 +546,1 @@\n-  __ movb(Address(card_addr, 0), (int)CardTable::dirty_card_val());\n+  __ movb(Address(card_addr, 0), CardTable::dirty_card_val());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-          __ movl(dst, (int32_t)NULL_WORD);\n+          __ movl(dst, NULL_WORD);\n@@ -122,1 +122,1 @@\n-          __ movslq(dst, (int32_t)NULL_WORD);\n+          __ movslq(dst, NULL_WORD);\n@@ -125,1 +125,1 @@\n-        __ movl(dst, (int32_t)NULL_WORD);\n+        __ movl(dst, NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  __ cmpptr(pre_val, (int32_t) NULL_WORD);\n+  __ cmpptr(pre_val, NULL_WORD);\n@@ -852,1 +852,1 @@\n-  __ cmpptr(pre_val_reg, (int32_t)NULL_WORD);\n+  __ cmpptr(pre_val_reg, NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-    cmpptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+    cmpptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -301,1 +301,1 @@\n-    cmpptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+    cmpptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -352,1 +352,1 @@\n-               movptr(oop_addr, (int32_t)NULL_WORD);\n+               movptr(oop_addr, NULL_WORD);\n@@ -366,2 +366,2 @@\n-  movl(tos_addr,  (int) ilgl);\n-  movl(val_addr,  (int32_t) NULL_WORD);\n+  movl(tos_addr, ilgl);\n+  movl(val_addr, NULL_WORD);\n@@ -389,2 +389,2 @@\n-  movl(tos_addr,  (int32_t) ilgl);\n-  movptr(val_addr,  NULL_WORD);\n+  movl(tos_addr, ilgl);\n+  movptr(val_addr, NULL_WORD);\n@@ -846,1 +846,1 @@\n-    cmpptr(rcx, (int32_t)min_frame_size);\n+    cmpptr(rcx, min_frame_size);\n@@ -1125,1 +1125,1 @@\n-    cmpptr(Address(rmon, BasicObjectLock::obj_offset_in_bytes()), (int32_t) NULL_WORD);\n+    cmpptr(Address(rmon, BasicObjectLock::obj_offset_in_bytes()), NULL_WORD);\n@@ -1228,1 +1228,1 @@\n-    movl(swap_reg, (int32_t)1);\n+    movl(swap_reg, 1);\n@@ -1330,1 +1330,1 @@\n-    movptr(Address(lock_reg, BasicObjectLock::obj_offset_in_bytes()), (int32_t)NULL_WORD);\n+    movptr(Address(lock_reg, BasicObjectLock::obj_offset_in_bytes()), NULL_WORD);\n@@ -1460,1 +1460,1 @@\n-    addptr(data, (int32_t) -DataLayout::counter_increment);\n+    addptr(data, -DataLayout::counter_increment);\n@@ -1464,1 +1464,1 @@\n-    addptr(data, (int32_t) DataLayout::counter_increment);\n+    addptr(data, DataLayout::counter_increment);\n@@ -1472,1 +1472,1 @@\n-    sbbptr(data, (int32_t)0);\n+    sbbptr(data, 0);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -179,4 +179,0 @@\n-  \/\/ These are dummies to prevent surprise implicit conversions to Register\n-  void pop(void* v); \/\/ Add unimplemented ambiguous method\n-  void push(void* v);   \/\/ Add unimplemented ambiguous method\n-\n@@ -186,1 +182,1 @@\n-    movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+    movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  __ cmpptr(Address(from(), Interpreter::local_offset_in_bytes(from_offset)), (int32_t)NULL_WORD); \/\/ do not use temp() to avoid AGI\n+  __ cmpptr(Address(from(), Interpreter::local_offset_in_bytes(from_offset)), NULL_WORD); \/\/ do not use temp() to avoid AGI\n","filename":"src\/hotspot\/cpu\/x86\/interpreterRT_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-    mov_literal32(dst, (int32_t)src.target(), src.rspec());\n+  mov_literal32(dst, (int32_t)src.target(), src.rspec());\n@@ -201,1 +201,1 @@\n-  mov_literal32(dst, (int32_t) adr.target(), adr.rspec());\n+  mov_literal32(dst, (int32_t)adr.target(), adr.rspec());\n@@ -480,1 +480,1 @@\n-  return Address((int32_t)(intptr_t)(adr.target() - pc()), adr.target(), adr.reloc());\n+  return Address(checked_cast<int32_t>(adr.target() - pc()), adr.target(), adr.reloc());\n@@ -700,4 +700,0 @@\n-void MacroAssembler::movptr(Register dst, int32_t src) {\n-  mov64(dst, (intptr_t)src);\n-}\n-\n@@ -1065,1 +1061,1 @@\n-    cmpptr(Address(rbp, reg2offset_in(src.first())), (int32_t)NULL_WORD);\n+    cmpptr(Address(rbp, reg2offset_in(src.first())), NULL_WORD);\n@@ -1101,1 +1097,1 @@\n-    cmpptr(rOop, (int32_t)NULL_WORD);\n+    cmpptr(rOop, NULL_WORD);\n@@ -1586,1 +1582,1 @@\n-    cmpptr(Address(java_thread, Thread::pending_exception_offset()), (int32_t) NULL_WORD);\n+    cmpptr(Address(java_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -1825,1 +1821,1 @@\n-    cmp_literal32(src1, (int32_t) src2.target(), src2.rspec());\n+    cmp_literal32(src1, (int32_t)src2.target(), src2.rspec());\n@@ -1839,1 +1835,1 @@\n-  cmp_literal32(src1, (int32_t) src2.target(), src2.rspec());\n+  cmp_literal32(src1, (int32_t)src2.target(), src2.rspec());\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -724,2 +724,2 @@\n-    if (src.is_constant()) addptr(dst, (int) src.as_constant());\n-    else                   addptr(dst,       src.as_register());\n+    if (src.is_constant()) addptr(dst, src.as_constant());\n+    else                   addptr(dst, src.as_register());\n@@ -1847,1 +1847,0 @@\n-  void movptr(Register dst, int32_t imm32);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    __ cmpptr(obj_reg, (int32_t)NULL_WORD);\n+    __ cmpptr(obj_reg, NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,1 +538,1 @@\n-  __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), NULL_WORD);\n@@ -987,1 +987,1 @@\n-    __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), NULL_WORD);\n@@ -1099,1 +1099,1 @@\n-    __ cmpptr(Address(rbp, reg2offset_in(src.first())), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(rbp, reg2offset_in(src.first())), NULL_WORD);\n@@ -1121,1 +1121,1 @@\n-    __ cmpptr(rOop, (int32_t)NULL_WORD);\n+    __ cmpptr(rOop, NULL_WORD);\n@@ -1866,1 +1866,1 @@\n-      __ cmpptr(Address(rbp, lock_slot_rbp_offset), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(rbp, lock_slot_rbp_offset), NULL_WORD);\n@@ -1937,1 +1937,1 @@\n-  __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -1984,1 +1984,1 @@\n-    __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), (int)NULL_WORD);\n+    __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2021,1 +2021,1 @@\n-      __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2705,1 +2705,1 @@\n-  __ cmpptr(Address(java_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(java_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -2833,1 +2833,1 @@\n-  __ cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-  __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), NULL_WORD);\n@@ -1000,1 +1000,1 @@\n-    __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(rbx, in_bytes(Method::code_offset())), NULL_WORD);\n@@ -2116,1 +2116,1 @@\n-      __ cmpptr(Address(rsp, lock_slot_offset * VMRegImpl::stack_slot_size), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(rsp, lock_slot_offset * VMRegImpl::stack_slot_size), NULL_WORD);\n@@ -2177,1 +2177,1 @@\n-  __ movl(Address(rcx, JNIHandleBlock::top_offset_in_bytes()), (int32_t)NULL_WORD);\n+  __ movl(Address(rcx, JNIHandleBlock::top_offset_in_bytes()), NULL_WORD);\n@@ -2184,1 +2184,1 @@\n-  __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2221,1 +2221,1 @@\n-    __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2252,1 +2252,1 @@\n-    __ movptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), (int32_t)NULL_WORD);\n+    __ movptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2261,1 +2261,1 @@\n-      __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), (int)NULL_WORD);\n+      __ cmpptr(Address(r15_thread, in_bytes(Thread::pending_exception_offset())), NULL_WORD);\n@@ -2419,1 +2419,1 @@\n-    __ movptr(Address(r15_thread, in_bytes(JavaThread::jvmci_implicit_exception_pc_offset())), (int32_t)NULL_WORD);\n+    __ movptr(Address(r15_thread, in_bytes(JavaThread::jvmci_implicit_exception_pc_offset())), NULL_WORD);\n@@ -2431,1 +2431,1 @@\n-    __ movl(r14, (int32_t)Deoptimization::Unpack_reexecute);\n+    __ movl(r14, Deoptimization::Unpack_reexecute);\n@@ -2483,1 +2483,1 @@\n-  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), (int32_t)NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), NULL_WORD);\n@@ -2511,3 +2511,1 @@\n-    __ cmpptr(Address(r15_thread,\n-                    JavaThread::last_Java_fp_offset()),\n-            (int32_t)0);\n+    __ cmpptr(Address(r15_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n@@ -2545,2 +2543,2 @@\n-  __ movptr(Address(r15_thread, JavaThread::exception_oop_offset()), (int32_t)NULL_WORD);\n-  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), (int32_t)NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_oop_offset()), NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), NULL_WORD);\n@@ -2628,1 +2626,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD );\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -2758,1 +2756,1 @@\n-            (int32_t)Deoptimization::Unpack_uncommon_trap);\n+              Deoptimization::Unpack_uncommon_trap);\n@@ -2829,1 +2827,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD );\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -2951,1 +2949,1 @@\n-  __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -3092,1 +3090,1 @@\n-  __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -3115,1 +3113,1 @@\n-  __ movptr(Address(r15_thread, JavaThread::vm_result_offset()), (int)NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::vm_result_offset()), NULL_WORD);\n@@ -3507,2 +3505,2 @@\n-  __ movptr(Address(r15_thread, JavaThread::exception_handler_pc_offset()), (int)NULL_WORD);\n-  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), (int)NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_handler_pc_offset()), NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_pc_offset()), NULL_WORD);\n@@ -3511,1 +3509,1 @@\n-  __ movptr(Address(r15_thread, JavaThread::exception_oop_offset()), (int)NULL_WORD);\n+  __ movptr(Address(r15_thread, JavaThread::exception_oop_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-      __ cmpptr(Address(rcx, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(rcx, Thread::pending_exception_offset()), NULL_WORD);\n@@ -391,1 +391,1 @@\n-      __ cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -1857,1 +1857,1 @@\n-      __ cmpptr(dst_klass_addr, (int32_t)NULL_WORD);\n+      __ cmpptr(dst_klass_addr, NULL_WORD);\n@@ -3951,1 +3951,1 @@\n-    __ cmpptr(Address(java_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(java_thread, Thread::pending_exception_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -532,1 +532,1 @@\n-      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), (int32_t) NULL_WORD);\n+      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -550,1 +550,1 @@\n-    __ movptr(Address(r15_thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);\n+    __ movptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -7844,2 +7844,1 @@\n-    __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()),\n-            (int32_t) NULL_WORD);\n+    __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -8371,1 +8370,1 @@\n-  __ addptr(rsp, (int32_t)ContinuationEntry::size());\n+  __ addptr(rsp, checked_cast<int32_t>(ContinuationEntry::size()));\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -257,1 +257,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -291,1 +291,1 @@\n-    __ cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t) NULL_WORD);\n+    __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -512,1 +512,1 @@\n-  __ cmpptr(stack_limit, (int32_t)NULL_WORD);\n+  __ cmpptr(stack_limit, NULL_WORD);\n@@ -623,1 +623,1 @@\n-  __ push((int)NULL_WORD); \/\/ leave last_sp as null\n+  __ push(NULL_WORD); \/\/ leave last_sp as null\n@@ -754,1 +754,1 @@\n-  __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);\n@@ -760,1 +760,1 @@\n-  __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), (int32_t)NULL_WORD);\n+  __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);\n@@ -826,1 +826,1 @@\n-  __ push((int) NULL_WORD);\n+  __ push(NULL_WORD);\n@@ -829,1 +829,1 @@\n-  __ push((int) NULL_WORD);\n+  __ push(NULL_WORD);\n@@ -1159,1 +1159,1 @@\n-  __ movl(Address(t, JNIHandleBlock::top_offset_in_bytes()), (int32_t)NULL_WORD);\n+  __ movl(Address(t, JNIHandleBlock::top_offset_in_bytes()), NULL_WORD);\n@@ -1218,1 +1218,1 @@\n-    __ cmpptr(Address(thread, Thread::pending_exception_offset()), (int32_t) NULL_WORD);\n+    __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -1375,1 +1375,1 @@\n-    __ push((int) NULL_WORD); \/\/ initialize local variables\n+    __ push(NULL_WORD); \/\/ initialize local variables\n@@ -1490,1 +1490,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n@@ -1636,1 +1636,1 @@\n-  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), (int32_t)NULL_WORD);\n+  __ movptr(Address(rbp, frame::interpreter_frame_last_sp_offset * wordSize), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -4284,1 +4284,1 @@\n-    __ cmpptr(Address(rtop, BasicObjectLock::obj_offset_in_bytes()), (int32_t) NULL_WORD);\n+    __ cmpptr(Address(rtop, BasicObjectLock::obj_offset_in_bytes()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    __ cmpptr(method, (int32_t)NULL_WORD);\n+    __ cmpptr(method, NULL_WORD);\n@@ -130,1 +130,1 @@\n-    __ cmpptr(Address(method, Method::from_compiled_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(method, Method::from_compiled_offset()), NULL_WORD);\n@@ -240,1 +240,1 @@\n-    __ cmpptr(method, (int32_t)NULL_WORD);\n+    __ cmpptr(method, NULL_WORD);\n@@ -242,1 +242,1 @@\n-    __ cmpptr(Address(method, Method::from_compiled_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(method, Method::from_compiled_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-    __ cmpptr(method, (int32_t)NULL_WORD);\n+    __ cmpptr(method, NULL_WORD);\n@@ -122,1 +122,1 @@\n-    __ cmpptr(Address(method, Method::from_compiled_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(method, Method::from_compiled_offset()), NULL_WORD);\n@@ -238,1 +238,1 @@\n-    __ cmpptr(method, (int32_t)NULL_WORD);\n+    __ cmpptr(method, NULL_WORD);\n@@ -240,1 +240,1 @@\n-    __ cmpptr(Address(method, Method::from_compiled_offset()), (int32_t)NULL_WORD);\n+    __ cmpptr(Address(method, Method::from_compiled_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -6161,1 +6161,1 @@\n-      __ movl($mem$$Address, (int32_t)0);\n+      __ movl($mem$$Address, 0);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}