{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1124,10 +1124,16 @@\n-        synchronized(children) {\n-            if (\"beanContext\".equals(propertyName) &&\n-                containsKey(source)                    &&\n-                children.get(source).isRemovePending()) {\n-                BeanContext bc = getBeanContextPeer();\n-\n-                if (bc.equals(pce.getOldValue()) && !bc.equals(pce.getNewValue())) {\n-                    remove(source, false);\n-                } else {\n-                    children.get(source).setRemovePending(false);\n+        if (\"beanContext\".equals(propertyName)) {\n+            synchronized (BeanContext.globalHierarchyLock) {\n+                synchronized (children) {\n+                    if (containsKey(source)\n+                            && children.get(source).isRemovePending())\n+                    {\n+                        BeanContext bc = getBeanContextPeer();\n+\n+                        if (bc.equals(pce.getOldValue())\n+                                && !bc.equals(pce.getNewValue()))\n+                        {\n+                            remove(source, false);\n+                        } else {\n+                            children.get(source).setRemovePending(false);\n+                        }\n+                    }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/beancontext\/BeanContextSupport.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.beans.beancontext.BeanContextSupport;\n+\n+\/**\n+ * @test\n+ * @bug 8238170\n+ * @summary Some basic tests\n+ *\/\n+public final class AddRemove {\n+\n+    public static void main(String[] args) {\n+        BeanContextSupport bcs = new BeanContextSupport();\n+        if (!bcs.isEmpty()) {\n+            throw new RuntimeException(\"The new context is not empty\");\n+        }\n+        Object child1 = new Object();\n+        bcs.add(child1);\n+        if (bcs.size() != 1) {\n+            throw new RuntimeException(\"Expected one element\");\n+        }\n+        Object child2 = new Object();\n+        bcs.add(child2);\n+        if (bcs.size() != 2) {\n+            throw new RuntimeException(\"Expected two elements\");\n+        }\n+        bcs.remove(child1);\n+        if (bcs.size() != 1) {\n+            throw new RuntimeException(\"Expected one element\");\n+        }\n+        if (bcs.toArray()[0] != child2) {\n+            throw new RuntimeException(\"Wrong element\");\n+        }\n+        bcs.remove(child2);\n+        if (!bcs.isEmpty()) {\n+            throw new RuntimeException(\"The context is not empty\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/beancontext\/BeanContextSupport\/AddRemove.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyVetoException;\n+import java.beans.beancontext.BeanContextSupport;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * @test\n+ * @bug 8238170\n+ * @summary Test for a possible deadlock in the BeanContextSupport\n+ *\/\n+public final class NotificationDeadlock {\n+\n+    private static volatile long endtime;\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Will run the test no more than 5 seconds\n+        endtime = System.nanoTime() + TimeUnit.SECONDS.toNanos(5);\n+\n+        BeanContextSupport bcs = new BeanContextSupport();\n+        Thread add = new Thread(() -> {\n+            while (!isComplete()) {\n+                bcs.add(bcs);\n+            }\n+        });\n+        Thread remove = new Thread(() -> {\n+            while (!isComplete()) {\n+                Object[] objects = bcs.toArray();\n+                for (Object object : objects) {\n+                    bcs.remove(object);\n+                }\n+            }\n+        });\n+        Thread props = new Thread(() -> {\n+            while (!isComplete()) {\n+                Object[] objects = bcs.toArray();\n+                for (Object object : objects) {\n+                    PropertyChangeEvent beanContext = new PropertyChangeEvent(\n+                            object, \"beanContext\", object, null);\n+                    try {\n+                        bcs.vetoableChange(beanContext);\n+                    } catch (PropertyVetoException ignore) {\n+                    }\n+                    bcs.propertyChange(beanContext);\n+                }\n+            }\n+        });\n+        add.start();\n+        remove.start();\n+        props.start();\n+        add.join();\n+        remove.join();\n+        props.join();\n+    }\n+\n+    private static boolean isComplete() {\n+        return endtime - System.nanoTime() < 0;\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/beancontext\/BeanContextSupport\/NotificationDeadlock.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}