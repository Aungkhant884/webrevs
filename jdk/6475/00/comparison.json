{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -258,0 +260,7 @@\n+    @SuppressWarnings(\"removal\")\n+    private String getNativeEncoding() {\n+        return AccessController.doPrivileged(\n+            (PrivilegedAction<String>) ()\n+            -> System.getProperty(\"native.encoding\"));\n+    }\n+\n@@ -270,0 +279,6 @@\n+                if (\"COMPAT\".equals(encodingName)) {\n+                    String enc = getNativeEncoding();\n+                    if (enc != null) {\n+                        encodingName = enc;\n+                    }\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8277398\n+ * @summary javac does not accept encoding name COMPAT\n+ * @modules java.compiler\n+ *          jdk.compiler\n+ * @compile -encoding utf-8 CompatEncoding.java\n+ * @run main CompatEncoding\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.tools.*;\n+import static java.nio.file.StandardOpenOption.*;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+\n+public class CompatEncoding {\n+    boolean error;\n+    final StandardJavaFileManager fm;\n+    final JavaCompiler compiler;\n+    Iterable<? extends JavaFileObject> files;\n+    DiagnosticListener<JavaFileObject> dl;\n+    final File testFile = new File(\"Compat.java\");\n+\n+    CompatEncoding() throws IOException {\n+        dl = new DiagnosticListener<JavaFileObject>() {\n+            public void report(Diagnostic<? extends JavaFileObject> message) {\n+                error = message.getKind() == Diagnostic.Kind.ERROR;\n+            }\n+        };\n+        compiler = ToolProvider.getSystemJavaCompiler();\n+        fm = compiler.getStandardFileManager(dl, null, null);\n+        files = fm.getJavaFileObjectsFromFiles(Arrays.asList(testFile));\n+        createTestFile();\n+    }\n+    final void createTestFile() throws IOException {\n+        List<String> scratch = new ArrayList<>();\n+        scratch.add(\"class Compat{}\");\n+        Files.write(testFile.toPath(), scratch, US_ASCII,\n+                CREATE, TRUNCATE_EXISTING);\n+    }\n+    void test() {\n+        error = false;\n+        Iterable<String> args = Arrays.asList(\"-encoding\", \"COMPAT\", \"-d\", \".\");\n+        compiler.getTask(null, fm, dl, args, null, files).call();\n+        if (error)\n+            throw new AssertionError(\"Error reported\");\n+    }\n+\n+    void close() throws IOException {\n+        fm.close();\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        CompatEncoding self = new CompatEncoding();\n+        try {\n+            self.test();\n+        } finally {\n+            self.close();\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/8277398\/CompatEncoding.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6964768 6964461 6964469 6964487 6964460 6964481 6980021\n+ * @bug 6964768 6964461 6964469 6964487 6964460 6964481 6980021 8277398\n@@ -291,0 +291,1 @@\n+            \"native.encoding\",\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}