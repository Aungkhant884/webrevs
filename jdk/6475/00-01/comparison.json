{"files":[{"patch":"@@ -479,0 +479,5 @@\n+# Dummy entry for COMPAT\n+charset compat COMPAT\n+    package sun.nio.cs\n+    type    source\n+\n","filename":"make\/data\/charsetmapping\/charsets","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -159,0 +160,9 @@\n+            if (\"COMPAT\".equals(cln) && \"compat\".equals(csn)) {\n+                classMap().put(csn, null);\n+                String enc = StaticProperty.nativeEncoding();\n+                if (enc != null) {\n+                    Charset chs = lookup(enc);\n+                    if (chs != null)\n+                        return cache(csn, chs);\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/StandardCharsets.java.template","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -260,7 +258,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private String getNativeEncoding() {\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<String>) ()\n-            -> System.getProperty(\"native.encoding\"));\n-    }\n-\n@@ -279,6 +270,0 @@\n-                if (\"COMPAT\".equals(encodingName)) {\n-                    String enc = getNativeEncoding();\n-                    if (enc != null) {\n-                        encodingName = enc;\n-                    }\n-                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/BaseFileManager.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277398\n+ * @summary COMPAT charset is required\n+ * @modules java.base\/sun.nio.cs:+open java.base\/java.nio.charset:+open\n+ * @run main\/othervm TestCompatCharset\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.nio.charset.Charset;\n+import java.util.Map;\n+import sun.nio.cs.StandardCharsets;\n+\n+public class TestCompatCharset {\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Get sun.nio.cs.StandardCharsets instance\n+        Field standardProviderFid = Charset.class.getDeclaredField(\"standardProvider\");\n+        standardProviderFid.setAccessible(true);\n+        StandardCharsets standardProvider = (StandardCharsets) standardProviderFid.get(null);\n+        \/\/ Get Map classMap on StandardCharsets\n+        Method classMapMid = StandardCharsets.class.getDeclaredMethod(\"classMap\");\n+        classMapMid.setAccessible(true);\n+        Map classMap = (Map)classMapMid.invoke(standardProvider);\n+        Method cacheMid = StandardCharsets.class.getDeclaredMethod(\"cache\");\n+        \/\/ Get Map cache on StandardCharsets\n+        cacheMid.setAccessible(true);\n+        \/\/ Check initial setting\n+        Map cache = (Map)cacheMid.invoke(standardProvider);\n+        String cl1 = (String)classMap.get(\"compat\");\n+        if (!\"COMPAT\".equals(cl1)) throw new RuntimeException(\"Dummy class name should be COMPAT\");\n+        Charset cs1 = (Charset)cache.get(\"compat\");\n+        if (cs1 != null) throw new RuntimeException(\"compat should not be in cache\");\n+        \/\/ Set compat charset\n+        Charset compat = Charset.forName(\"compat\");\n+        \/\/ Check compat charset on cache\n+        Charset cs2 = (Charset)cache.get(\"compat\");\n+        if (cs2 == null) throw new RuntimeException(\"compat should be in cache\");\n+        if (compat != cs2) throw new RuntimeException(\"compat and cache entry should be same\");\n+        String cl2 = (String)classMap.get(\"compat\");\n+        if (cl2 != null) throw new RuntimeException(\"Dummy class name should be null\");\n+        Charset cs = Charset.forName(System.getProperty(\"native.encoding\"));\n+        if (compat != cs) throw new RuntimeException(\"compat and native.encoding should be same\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/nio\/cs\/TestCompatCharset.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8277398\n- * @summary javac does not accept encoding name COMPAT\n- * @modules java.compiler\n- *          jdk.compiler\n- * @compile -encoding utf-8 CompatEncoding.java\n- * @run main CompatEncoding\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import java.nio.file.Files;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import javax.tools.*;\n-import static java.nio.file.StandardOpenOption.*;\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n-\n-public class CompatEncoding {\n-    boolean error;\n-    final StandardJavaFileManager fm;\n-    final JavaCompiler compiler;\n-    Iterable<? extends JavaFileObject> files;\n-    DiagnosticListener<JavaFileObject> dl;\n-    final File testFile = new File(\"Compat.java\");\n-\n-    CompatEncoding() throws IOException {\n-        dl = new DiagnosticListener<JavaFileObject>() {\n-            public void report(Diagnostic<? extends JavaFileObject> message) {\n-                error = message.getKind() == Diagnostic.Kind.ERROR;\n-            }\n-        };\n-        compiler = ToolProvider.getSystemJavaCompiler();\n-        fm = compiler.getStandardFileManager(dl, null, null);\n-        files = fm.getJavaFileObjectsFromFiles(Arrays.asList(testFile));\n-        createTestFile();\n-    }\n-    final void createTestFile() throws IOException {\n-        List<String> scratch = new ArrayList<>();\n-        scratch.add(\"class Compat{}\");\n-        Files.write(testFile.toPath(), scratch, US_ASCII,\n-                CREATE, TRUNCATE_EXISTING);\n-    }\n-    void test() {\n-        error = false;\n-        Iterable<String> args = Arrays.asList(\"-encoding\", \"COMPAT\", \"-d\", \".\");\n-        compiler.getTask(null, fm, dl, args, null, files).call();\n-        if (error)\n-            throw new AssertionError(\"Error reported\");\n-    }\n-\n-    void close() throws IOException {\n-        fm.close();\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        CompatEncoding self = new CompatEncoding();\n-        try {\n-            self.test();\n-        } finally {\n-            self.close();\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/8277398\/CompatEncoding.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6964768 6964461 6964469 6964487 6964460 6964481 6980021 8277398\n+ * @bug 6964768 6964461 6964469 6964487 6964460 6964481 6980021\n@@ -291,1 +291,0 @@\n-            \"native.encoding\",\n","filename":"test\/langtools\/tools\/javac\/diags\/CheckResourceKeys.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}