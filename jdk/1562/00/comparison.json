{"files":[{"patch":"@@ -1509,2 +1509,3 @@\n-      int shift = r2->get_con() & (BitsPerJavaInteger - 1); \/\/ semantics of Java shifts\n-      return TypeInt::make((r1->get_con() << shift) | (r1->get_con() >> (32 - shift)));\n+      unsigned int r1_con = (unsigned int)r1->get_con();\n+      unsigned int shift = (unsigned int)(r2->get_con()) & (unsigned int)(BitsPerJavaInteger - 1); \/\/ semantics of Java shifts\n+      return TypeInt::make((r1_con << shift) | (r1_con >> (32 - shift)));\n@@ -1527,2 +1528,3 @@\n-      int shift = r2->get_con() & (BitsPerJavaLong - 1); \/\/ semantics of Java shifts\n-      return TypeLong::make((r1->get_con() << shift) | (r1->get_con() >> (64 - shift)));\n+      julong r1_con = (julong)r1->get_con();\n+      julong shift = (julong)(r2->get_con()) & (julong)(BitsPerJavaLong - 1); \/\/ semantics of Java shifts\n+      return TypeLong::make((r1_con << shift) | (r1_con >> (64 - shift)));\n@@ -1586,2 +1588,3 @@\n-      int shift = r2->get_con() & (BitsPerJavaInteger - 1); \/\/ semantics of Java shifts\n-      return TypeInt::make((r1->get_con() >> shift) | (r1->get_con() << (32 - shift)));\n+      unsigned int r1_con = (unsigned int)r1->get_con();\n+      unsigned int shift = (unsigned int)(r2->get_con()) & (unsigned int)(BitsPerJavaInteger - 1); \/\/ semantics of Java shifts\n+      return TypeInt::make((r1_con >> shift) | (r1_con << (32 - shift)));\n@@ -1603,2 +1606,3 @@\n-      int shift = r2->get_con() & (BitsPerJavaLong - 1); \/\/ semantics of Java shifts\n-      return TypeLong::make((r1->get_con() >> shift) | (r1->get_con() << (64 - shift)));\n+      julong r1_con = (julong)r1->get_con();\n+      julong shift = (julong)(r2->get_con()) & (julong)(BitsPerJavaLong - 1); \/\/ semantics of Java shifts\n+      return TypeLong::make((r1_con >> shift) | (r1_con << (64 - shift)));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257182\n+ * @requires vm.compiler2.enabled\n+ * @summary Test RotateLeftNode and RotateRightNode with negative even numbers which produces a wrong result due to\n+ *          applying an arithemtic instead of a logical shift.\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.c2.TestRotateNegativeEvenValues::run\n+ *                   -XX:CompileCommand=inline,compiler.c2.TestRotateNegativeEvenValues::test\n+ *                   -Xcomp -XX:-TieredCompilation compiler.c2.TestRotateNegativeEvenValues\n+ *\/\n+package compiler.c2;\n+\n+public class TestRotateNegativeEvenValues {\n+\n+    public static void run() {\n+        test(1 << 31); \/\/ INT_MIN\n+        test(1L << 63); \/\/ LONG_MIN\n+        test(-1 << 10); \/\/ -1024\n+        test(-1L << 10); \/\/ -1024\n+        test(-1 << 20); \/\/ -1048576\n+        test(-1L << 20); \/\/ -1048576\n+        test(-2); \/\/ 111...10\n+        test(-2L); \/\/ 111...10\n+        test(-3546); \/\/ Random minus even number\n+        test(-3546L); \/\/ Random minus even number\n+    }\n+\n+    \/\/ Inlined such that negativeEvenNumber is a constant\n+    public static void test(int negativeEvenNumber) {\n+        for (int i = 1; i <= 1; i++) {\n+            int leftShift = negativeEvenNumber << -i;\n+            int rightShift = negativeEvenNumber >>> i;\n+            if ((leftShift | rightShift) != (rightShift | leftShift)) {\n+                int or1 = leftShift | rightShift;\n+                int or2 = rightShift | leftShift;\n+                throw new RuntimeException(\"Or operations are not equal:\" + \" \" + or1 + \" vs. \"+ or2\n+                                           + \" - leftShift: \" + leftShift + \", rightShift: \" + rightShift);\n+            }\n+        }\n+    }\n+\n+    \/\/ Inlined such that negativeEvenNumber is a constant\n+    public static void test(long negativeEvenNumber) {\n+        for (int i = 1; i <= 1; i++) {\n+            long leftShift = negativeEvenNumber << -i;\n+            long rightShift = negativeEvenNumber >>> i;\n+            if ((leftShift | rightShift) != (rightShift | leftShift)) {\n+                long or1 = leftShift | rightShift;\n+                long or2 = rightShift | leftShift;\n+                throw new RuntimeException(\"Or operations are not equal:\" + \" \" + or1 + \" vs. \"+ or2\n+                                           + \" - leftShift: \" + leftShift + \", rightShift: \" + rightShift);\n+            }\n+        }\n+    }\n+\n+    public static void main(String argv[]) {\n+        run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestRotateNegativeEvenValues.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}