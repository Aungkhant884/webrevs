{"files":[{"patch":"@@ -71,0 +71,1 @@\n+import java.util.function.UnaryOperator;\n@@ -4138,2 +4139,1 @@\n-                JCDiagnostic simpleDiag =\n-                    MethodResolutionDiagHelper.rewrite(diags, pos, log.currentSource(), dkind, c.snd);\n+                JCDiagnostic simpleDiag = MethodResolutionDiagHelper.rewrite(diags, pos, log.currentSource(), dkind, c.snd);\n@@ -4202,1 +4202,0 @@\n-            boolean truncatedDiag = candidatesMap.size() != filteredCandidates.size();\n@@ -4206,3 +4205,1 @@\n-                        truncatedDiag ?\n-                            EnumSet.of(DiagnosticFlag.COMPRESSED) :\n-                            EnumSet.noneOf(DiagnosticFlag.class),\n+                        EnumSet.noneOf(DiagnosticFlag.class),\n@@ -4227,3 +4224,0 @@\n-                if (truncatedDiag) {\n-                    d.setFlag(DiagnosticFlag.COMPRESSED);\n-                }\n@@ -4790,0 +4784,4 @@\n+                final DiagnosticPosition pos = d.getDiagnosticPosition();\n+                UnaryOperator<JCDiagnostic> rewriter = pos != null ?\n+                        diag -> diags.create(preferredKind, preferredSource, pos, \"prob.found.req\", cause) :\n+                        null;\n@@ -4791,1 +4789,1 @@\n-                        \"prob.found.req\", cause);\n+                        \"prob.found.req\", rewriter, cause);\n@@ -4853,1 +4851,0 @@\n-                    simpleDiag.setFlag(DiagnosticFlag.COMPRESSED);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1716,3 +1716,0 @@\n-        if (log.compressedOutput) {\n-            log.mandatoryNote(null, Notes.CompressedDiags);\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1585,3 +1585,0 @@\n-compiler.note.compressed.diags=\\\n-    Some messages have been simplified; recompile with -Xdiags:verbose to get full output\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.function.UnaryOperator;\n@@ -246,0 +247,15 @@\n+        \/**\n+         * Create a new diagnostic of the given kind, which is not mandatory and which has\n+         * no lint category.\n+         *  @param kind        The diagnostic kind\n+         *  @param source      The source of the compilation unit, if any, in which to report the message.\n+         *  @param pos         The source position at which to report the message.\n+         *  @param key         The key for the localized message.\n+         *  @param rewriter    A rewriter function used if this diagnostic needs to be rewritten\n+         *  @param args        Fields of the message.\n+         *\/\n+        public JCDiagnostic create(\n+                DiagnosticType kind, DiagnosticSource source, DiagnosticPosition pos, String key, UnaryOperator<JCDiagnostic> rewriter, Object... args) {\n+            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args), rewriter);\n+        }\n+\n@@ -285,0 +301,5 @@\n+\n+        public JCDiagnostic create(\n+                LintCategory lc, Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo, UnaryOperator<JCDiagnostic> rewriter) {\n+            return new JCDiagnostic(formatter, normalize(diagnosticInfo), lc, flags, source, pos, rewriter);\n+        }\n@@ -431,1 +452,0 @@\n-        COMPRESSED,\n@@ -449,0 +469,2 @@\n+    private final UnaryOperator<JCDiagnostic> rewriter;\n+\n@@ -599,0 +621,19 @@\n+        this(formatter, diagnosticInfo, lc, flags, source, pos, null);\n+    }\n+\n+    \/**\n+     * Create a diagnostic object.\n+     * @param formatter the formatter to use for the diagnostic\n+     * @param diagnosticInfo the diagnostic key\n+     * @param lc     the lint category for the diagnostic\n+     * @param source the name of the source file, or null if none.\n+     * @param pos the character offset within the source file, if given.\n+     * @param rewriter the rewriter function used if this diagnostic needs to be rewritten\n+     *\/\n+    protected JCDiagnostic(DiagnosticFormatter<JCDiagnostic> formatter,\n+                           DiagnosticInfo diagnosticInfo,\n+                           LintCategory lc,\n+                           Set<DiagnosticFlag> flags,\n+                           DiagnosticSource source,\n+                           DiagnosticPosition pos,\n+                           UnaryOperator<JCDiagnostic> rewriter) {\n@@ -608,0 +649,1 @@\n+        this.rewriter = rewriter;\n@@ -810,0 +852,8 @@\n+    boolean hasRewriter() {\n+        return rewriter != null;\n+    }\n+\n+    JCDiagnostic rewrite() {\n+        return rewriter.apply(this);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.EnumSet;\n@@ -217,5 +216,0 @@\n-    \/**\n-     * Set to true if a compressed diagnostic is reported\n-     *\/\n-    public boolean compressedOutput;\n-\n@@ -674,0 +668,4 @@\n+            if (diagnostic.hasRewriter()) {\n+                diagnostic = diagnostic.rewrite();\n+            }\n+\n@@ -710,3 +708,0 @@\n-            if (diagnostic.isFlagSet(JCDiagnostic.DiagnosticFlag.COMPRESSED)) {\n-                compressedOutput = true;\n-            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T8067883.java:15:9: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<java.lang.Integer>, java.util.List<java.lang.String>)\n+T8067883.java:15:17: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<java.lang.Integer>, java.util.List<java.lang.String>)\n@@ -3,1 +3,1 @@\n-T8067883.java:20:9: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<java.lang.Integer>, java.util.List<java.lang.String>)\n+T8067883.java:20:25: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.util.List<java.lang.Integer>, java.util.List<java.lang.String>)\n@@ -5,1 +5,0 @@\n-- compiler.note.compressed.diags\n","filename":"test\/langtools\/tools\/javac\/Diagnostics\/compressed\/8067883\/T8067883a.out","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-T8012003a.java:19:9: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n-T8012003a.java:20:9: compiler.err.prob.found.req: (compiler.misc.incompatible.type.in.conditional: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer))\n-T8012003a.java:21:9: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+T8012003a.java:19:12: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n+T8012003a.java:20:20: compiler.err.prob.found.req: (compiler.misc.incompatible.type.in.conditional: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer))\n+T8012003a.java:21:12: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer)\n@@ -5,1 +5,0 @@\n-- compiler.note.compressed.diags\n","filename":"test\/langtools\/tools\/javac\/Diagnostics\/compressed\/T8012003a.out","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,5 +1,5 @@\n-T8012003b.java:30:9: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.cant.apply.symbol: kindname.method, g, java.lang.String, compiler.misc.no.args, kindname.class, T8012003b, (compiler.misc.arg.length.mismatch)))\n-T8012003b.java:31:9: compiler.err.prob.found.req: (compiler.misc.stat.expr.expected)\n-T8012003b.java:32:9: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.conditional.target.cant.be.void))\n-T8012003b.java:33:9: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.String)))\n-T8012003b.java:34:9: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.mref: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer))\n+T8012003b.java:30:12: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.cant.apply.symbol: kindname.method, g, java.lang.String, compiler.misc.no.args, kindname.class, T8012003b, (compiler.misc.arg.length.mismatch)))\n+T8012003b.java:31:16: compiler.err.prob.found.req: (compiler.misc.stat.expr.expected)\n+T8012003b.java:32:22: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.conditional.target.cant.be.void))\n+T8012003b.java:33:12: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.String)))\n+T8012003b.java:34:12: compiler.err.prob.found.req: (compiler.misc.incompatible.ret.type.in.mref: (compiler.misc.inconvertible.types: java.lang.String, java.lang.Integer))\n@@ -7,1 +7,0 @@\n-- compiler.note.compressed.diags\n","filename":"test\/langtools\/tools\/javac\/Diagnostics\/compressed\/T8012003b.out","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,3 +1,2 @@\n-T8020286.java:12:8: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.String)\n-T8020286.java:13:8: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.String)\n-- compiler.note.compressed.diags\n+T8020286.java:12:13: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.String)\n+T8020286.java:13:10: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: int, java.lang.String)\n","filename":"test\/langtools\/tools\/javac\/Diagnostics\/compressed\/T8020286.out","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-DiagnosticRewriterTest.java:12:13: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, int)\n-- compiler.note.compressed.diags\n+DiagnosticRewriterTest.java:12:15: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, int)\n","filename":"test\/langtools\/tools\/javac\/diags\/DiagnosticRewriterTest.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-DiagnosticRewriterTest2.java:15:13: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, int)\n+DiagnosticRewriterTest2.java:15:15: compiler.err.prob.found.req: (compiler.misc.possible.loss.of.precision: long, int)\n@@ -3,1 +3,0 @@\n-- compiler.note.compressed.diags\n","filename":"test\/langtools\/tools\/javac\/diags\/DiagnosticRewriterTest2.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268312\n+ * @summary Compilation error with nested generic functional interface\n+ * @compile DiagnosticRewriterTest3.java\n+ *\/\n+\n+class DiagnosticRewriterTest3 {\n+    void m() {\n+        Optional.of(\"\").map(outer -> {\n+            Optional.of(\"\")\n+                    .map(inner -> returnGeneric(outer))\n+                    .ifPresent(String::toString);\n+            return \"\";\n+        });\n+    }\n+\n+    <T> T returnGeneric(T generic) {\n+        return generic;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/DiagnosticRewriterTest3.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.prob.found.req\n-\/\/ key: compiler.misc.inconvertible.types\n-\/\/ key: compiler.note.compressed.diags\n-\/\/ key: compiler.note.note\n-\/\/ key: compiler.misc.count.error\n-\/\/ key: compiler.err.error\n-\/\/ run: backdoor\n-\n-class CompressedDiags {\n-\n-    void m(String s) { }\n-\n-    void test() {\n-        m(1);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CompressedDiags.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"}]}