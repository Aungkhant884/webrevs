{"files":[{"patch":"@@ -71,0 +71,1 @@\n+import java.util.function.UnaryOperator;\n@@ -4177,7 +4178,0 @@\n-            if (compactMethodDiags) {\n-                JCDiagnostic simpleDiag =\n-                    MethodResolutionDiagHelper.rewrite(diags, pos, log.currentSource(), dkind, c.snd);\n-                if (simpleDiag != null) {\n-                    return simpleDiag;\n-                }\n-            }\n@@ -4187,0 +4181,2 @@\n+                      compactMethodDiags ?\n+                              d -> MethodResolutionDiagHelper.rewrite(diags, pos, log.currentSource(), dkind, c.snd) : null,\n@@ -4247,2 +4243,2 @@\n-                            EnumSet.of(DiagnosticFlag.COMPRESSED) :\n-                            EnumSet.noneOf(DiagnosticFlag.class),\n+                                EnumSet.of(DiagnosticFlag.COMPRESSED) :\n+                                EnumSet.noneOf(DiagnosticFlag.class),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2513,4 +2513,0 @@\n-# 0: message segment\n-compiler.misc.prob.found.req=\\\n-    incompatible types: {0}\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.function.UnaryOperator;\n@@ -246,0 +247,15 @@\n+        \/**\n+         * Create a new diagnostic of the given kind, which is not mandatory and which has\n+         * no lint category.\n+         *  @param kind        The diagnostic kind\n+         *  @param source      The source of the compilation unit, if any, in which to report the message.\n+         *  @param pos         The source position at which to report the message.\n+         *  @param key         The key for the localized message.\n+         *  @param rewriter    A rewriter function used if this diagnostic needs to be rewritten\n+         *  @param args        Fields of the message.\n+         *\/\n+        public JCDiagnostic create(\n+                DiagnosticType kind, DiagnosticSource source, DiagnosticPosition pos, String key, UnaryOperator<JCDiagnostic> rewriter, Object... args) {\n+            return create(null, EnumSet.noneOf(DiagnosticFlag.class), source, pos, DiagnosticInfo.of(kind, prefix, key, args), rewriter);\n+        }\n+\n@@ -285,0 +301,5 @@\n+\n+        public JCDiagnostic create(\n+                LintCategory lc, Set<DiagnosticFlag> flags, DiagnosticSource source, DiagnosticPosition pos, DiagnosticInfo diagnosticInfo, UnaryOperator<JCDiagnostic> rewriter) {\n+            return new JCDiagnostic(formatter, normalize(diagnosticInfo), lc, flags, source, pos, rewriter);\n+        }\n@@ -449,0 +470,2 @@\n+    private final UnaryOperator<JCDiagnostic> rewriter;\n+\n@@ -599,0 +622,19 @@\n+        this(formatter, diagnosticInfo, lc, flags, source, pos, null);\n+    }\n+\n+    \/**\n+     * Create a diagnostic object.\n+     * @param formatter the formatter to use for the diagnostic\n+     * @param diagnosticInfo the diagnostic key\n+     * @param lc     the lint category for the diagnostic\n+     * @param source the name of the source file, or null if none.\n+     * @param pos the character offset within the source file, if given.\n+     * @param rewriter the rewriter function used if this diagnostic needs to be rewritten\n+     *\/\n+    protected JCDiagnostic(DiagnosticFormatter<JCDiagnostic> formatter,\n+                           DiagnosticInfo diagnosticInfo,\n+                           LintCategory lc,\n+                           Set<DiagnosticFlag> flags,\n+                           DiagnosticSource source,\n+                           DiagnosticPosition pos,\n+                           UnaryOperator<JCDiagnostic> rewriter) {\n@@ -608,0 +650,1 @@\n+        this.rewriter = rewriter;\n@@ -810,0 +853,8 @@\n+    boolean hasRewriter() {\n+        return rewriter != null;\n+    }\n+\n+    JCDiagnostic rewrite() {\n+        return rewriter.apply(this);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.EnumSet;\n@@ -674,0 +673,5 @@\n+            if (diagnostic.hasRewriter()) {\n+                JCDiagnostic rewrittenDiag = diagnostic.rewrite();\n+                diagnostic = rewrittenDiag != null ? rewrittenDiag : diagnostic;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-T8012003b.java:33:12: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.String)))\n+T8012003b.java:33:12: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.method, (compiler.misc.cant.apply.symbol: kindname.method, g, java.lang.String, java.lang.Integer, kindname.class, T8012003b, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: java.lang.Integer, java.lang.String))))\n","filename":"test\/langtools\/tools\/javac\/Diagnostics\/compressed\/T8012003b.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268312\n+ * @summary Compilation error with nested generic functional interface\n+ * @compile DiagnosticRewriterTest3.java\n+ *\/\n+\n+import java.util.Optional;\n+\n+class DiagnosticRewriterTest3 {\n+    void m() {\n+        Optional.of(\"\").map(outer -> {\n+            Optional.of(\"\")\n+                    .map(inner -> returnGeneric(outer))\n+                    .ifPresent(String::toString);\n+            return \"\";\n+        });\n+    }\n+\n+    <T> T returnGeneric(T generic) {\n+        return generic;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/DiagnosticRewriterTest3.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -209,0 +209,1 @@\n+compiler.note.compressed.diags\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.prob.found.req\n-\/\/ key: compiler.misc.inconvertible.types\n-\/\/ key: compiler.note.compressed.diags\n-\/\/ key: compiler.note.note\n-\/\/ key: compiler.misc.count.error\n-\/\/ key: compiler.err.error\n-\/\/ run: backdoor\n-\n-class CompressedDiags {\n-\n-    void m(String s) { }\n-\n-    void test() {\n-        m(1);\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CompressedDiags.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ key: compiler.misc.infer.no.conforming.assignment.exists\n@@ -27,0 +26,1 @@\n+\/\/ key: compiler.misc.infer.no.conforming.assignment.exists\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/IncompatibleArgTypesInMethodRef.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InferNoConformingAssignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InferredDoNotConformToEq.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InferredDoNotConformToUpper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\/\/ key: compiler.misc.kindname.class\n@@ -27,2 +26,0 @@\n-\/\/ key: compiler.misc.no.conforming.assignment.exists\n-\/\/ key: compiler.misc.inconvertible.types\n@@ -30,0 +27,2 @@\n+\/\/ key: compiler.misc.kindname.class\n+\/\/ key: compiler.misc.inconvertible.types\n@@ -31,0 +30,1 @@\n+\/\/ key: compiler.misc.no.conforming.assignment.exists\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/KindnameConstructor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/LambdaBodyNeitherValueNorVoidCompatible.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NotApplicableMethodFound.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,3 @@\n-\/\/ key: compiler.misc.prob.found.req\n+\/\/ key: compiler.misc.kindname.class\n+\/\/ key: compiler.misc.no.conforming.assignment.exists\n+\/\/ key: compiler.misc.cant.apply.symbol\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProbFoundReqFragment.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/VerboseResolveMulti1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\/\/ key: compiler.misc.no.conforming.assignment.exists\n@@ -30,0 +29,1 @@\n+\/\/ key: compiler.misc.no.conforming.assignment.exists\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WhereTypeVar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}