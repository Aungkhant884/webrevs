{"files":[{"patch":"@@ -478,1 +478,1 @@\n-                handleResponse();\n+                handleResponse(hf);\n@@ -514,1 +514,1 @@\n-    protected void handleResponse() throws IOException {\n+    protected void handleResponse(HeaderFrame hf) throws IOException {\n@@ -522,1 +522,1 @@\n-            if (responseCode < 100 || responseCode > 199)\n+            if (responseCode < 100 || responseCode > 199) {\n@@ -524,0 +524,12 @@\n+            } else if (hf.getFlag(HeaderFrame.END_STREAM)) {\n+                \/\/ see RFC 9113 section 8.1:\n+                \/\/ A HEADERS frame with the END_STREAM flag set that carries an\n+                \/\/ informational status code is malformed\n+                String msg = (\"Stream %s PROTOCOL_ERROR: \" +\n+                        \"HEADERS frame with status %s has END_STREAM flag set\")\n+                        .formatted(streamid, responseCode);\n+                if (debug.on()) {\n+                    debug.log(msg);\n+                }\n+                cancelImpl(new IOException(msg), ResetFrame.PROTOCOL_ERROR);\n+            }\n@@ -570,0 +582,4 @@\n+                    if (debug.on()) {\n+                        debug.log(\"completing requestBodyCF exceptionally due to received\" +\n+                                \" RESET(%s) (stream=%s)\", frame.getErrorCode(), streamid);\n+                    }\n@@ -572,0 +588,4 @@\n+                    if (debug.on()) {\n+                        debug.log(\"completing requestBodyCF normally due to received\" +\n+                                \" RESET(NO_ERROR) (stream=%s)\", streamid);\n+                    }\n@@ -953,0 +973,4 @@\n+                if (debug.on()) {\n+                    debug.log(\"RequestSubscriber: requestBodyCf is done: \" +\n+                            \"cancelling subscription\");\n+                }\n@@ -1531,1 +1555,1 @@\n-        protected void handleResponse() {\n+        protected void handleResponse(HeaderFrame hf) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import java.net.http.HttpClient.Builder;\n@@ -109,0 +110,4 @@\n+        System.out.println(\"HTTP\/1.1 server listening at: \" + http1TestServer.serverAuthority());\n+        System.out.println(\"HTTP\/1.1 hang server listening at: \" + hangUri.getRawAuthority());\n+        System.out.println(\"HTTP\/2 clear server listening at: \" + http2TestServer.serverAuthority());\n+\n@@ -127,0 +132,1 @@\n+                System.err.println(\"Server reading body\");\n@@ -129,0 +135,1 @@\n+                System.err.println(\"Server sending 200  (length=\"+bytes.length+\")\");\n@@ -142,0 +149,1 @@\n+                System.err.println(\"Server sending 100 (length = 0)\");\n@@ -148,0 +156,1 @@\n+                System.err.println(\"Server reading body\");\n@@ -149,0 +158,1 @@\n+                System.err.println(\"Server send 200 (length=0)\");\n@@ -162,0 +172,1 @@\n+                System.err.println(\"Server send 417 (length=\"+bytes.length+\")\");\n@@ -187,0 +198,1 @@\n+            boolean closed = this.closed;\n@@ -191,1 +203,3 @@\n-                    client = ss.accept();\n+                    System.err.println(\"Http1HangServer accepting connections\");\n+                    var client = this.client = ss.accept();\n+                    System.err.println(\"Http1HangServer accepted connection: \" + client);\n@@ -216,1 +230,2 @@\n-                        closed = true;\n+                        System.err.println(\"Http1HangServer sending 417\");\n+                        closed = this.closed = true;\n@@ -227,0 +242,1 @@\n+                        System.err.println(\"Http1HangServer received invalid request: closing\");\n@@ -230,1 +246,1 @@\n-                    closed = true;\n+                    closed = this.closed = true;\n@@ -232,0 +248,6 @@\n+                } finally {\n+                    if (closed = this.closed) {\n+                        System.err.println(\"Http1HangServer: finished\");\n+                    } else {\n+                        System.err.println(\"Http1HangServer: looping for accepting next connection\");\n+                    }\n@@ -238,0 +260,1 @@\n+            var client = this.client;\n@@ -247,1 +270,1 @@\n-                { h2getUri,  h2postUri, h2hangUri, HttpClient.Version.HTTP_2 }\n+                { h2getUri,  h2postUri, h2hangUri, HTTP_2 }\n@@ -253,0 +276,1 @@\n+        System.out.println(\"Testing with version: \" + version);\n@@ -254,0 +278,1 @@\n+                .proxy(Builder.NO_PROXY)\n@@ -271,0 +296,2 @@\n+        System.out.printf(\"Sending request (%s): %s%n\", version, getRequest);\n+        System.err.println(\"Sending request: \" + getRequest);\n@@ -277,0 +304,2 @@\n+        System.out.printf(\"Sending request (%s): %s%n\", version, postRequest);\n+        System.err.println(\"Sending request: \" + postRequest);\n@@ -283,0 +312,2 @@\n+        System.out.printf(\"Sending request (%s): %s%n\", version, hangRequest);\n+        System.err.println(\"Sending request: \" + hangRequest);\n","filename":"test\/jdk\/java\/net\/httpclient\/ExpectContinueTest.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+        \/\/ Do not set Content-Length for 100, and do not set END_STREAM\n+        if (rCode == 100) responseLength = 0;\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestExchangeImpl.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}