{"files":[{"patch":"@@ -1646,0 +1646,1 @@\n+  out->print_cr(\"version %d\", REPLAY_VERSION);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-  _creation_mileage(0),\n-  _current_mileage(0),\n@@ -55,1 +53,0 @@\n-  _backedge_counter(0),\n@@ -253,2 +250,0 @@\n-  _creation_mileage = mdo->creation_mileage();\n-  _current_mileage = MethodData::mileage_of(mdo->method());\n@@ -256,1 +251,0 @@\n-  _backedge_counter = mdo->backedge_count();\n@@ -709,1 +703,1 @@\n-  out->print(\" %d %d\", _state, current_mileage());\n+  out->print(\" %d %d\", _state, _invocation_counter);\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -398,5 +398,0 @@\n-  int _creation_mileage; \/\/ method mileage at MDO creation\n-\n-  \/\/ Maturity of the oop when the snapshot is taken.\n-  int _current_mileage;\n-\n@@ -407,1 +402,0 @@\n-  int _backedge_counter;\n@@ -480,3 +474,0 @@\n-  int creation_mileage() { return _creation_mileage; }\n-  int current_mileage()  { return _current_mileage; }\n-\n@@ -484,1 +475,0 @@\n-  int backedge_count()   { return _backedge_counter;   }\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  int _current_mileage;\n+  int _invocation_counter;\n@@ -118,0 +118,1 @@\n+  int     _version;\n@@ -162,0 +163,1 @@\n+    _version = 0;\n@@ -641,0 +643,5 @@\n+    } else if (strcmp(\"version\", cmd) == 0) {\n+      _version = parse_int(\"version\");\n+      if (_version > REPLAY_VERSION) {\n+        report_error(\"unrecognized version\");\n+      }\n@@ -830,1 +837,5 @@\n-    rec->_current_mileage = parse_int(\"current_mileage\");\n+    if (_version < 1) {\n+      parse_int(\"current_mileage\");\n+    } else {\n+      rec->_invocation_counter = parse_int(\"invocation_counter\");\n+    }\n@@ -879,7 +890,0 @@\n-    if (!_protection_domain_initialized && k != NULL) {\n-      assert(_protection_domain() == NULL, \"must be uninitialized\");\n-      \/\/ The first entry is the holder class of the method for which a replay compilation is requested.\n-      \/\/ Use the same protection domain to load all subsequent classes in order to resolve all classes\n-      \/\/ in signatures of inlinees. This ensures that inlining can be done as stated in the replay file.\n-      _protection_domain = Handle(_thread, k->protection_domain());\n-    }\n@@ -887,3 +891,11 @@\n-    \/\/ Only initialize the protection domain handle with the protection domain of the very first entry.\n-    \/\/ This also ensures that older replay files work.\n-    _protection_domain_initialized = true;\n+    if (_version >= 1) {\n+      if (!_protection_domain_initialized && k != NULL) {\n+        assert(_protection_domain() == NULL, \"must be uninitialized\");\n+        \/\/ The first entry is the holder class of the method for which a replay compilation is requested.\n+        \/\/ Use the same protection domain to load all subsequent classes in order to resolve all classes\n+        \/\/ in signatures of inlinees. This ensures that inlining can be done as stated in the replay file.\n+        _protection_domain = Handle(_thread, k->protection_domain());\n+      }\n+\n+      _protection_domain_initialized = true;\n+    }\n@@ -1416,1 +1428,1 @@\n-    m->_current_mileage = rec->_current_mileage;\n+    m->_invocation_counter = rec->_invocation_counter;\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -134,0 +134,6 @@\n+\/\/ Replay file format version history\n+\/\/ 0: legacy (no version number)\n+\/\/ 1: first instanceKlass sets protection domain (8275868)\n+\/\/    replace current_mileage with invocation_count (8276095)\n+#define REPLAY_VERSION 1 \/\/ current version, bump up for incompatible changes\n+\n","filename":"src\/hotspot\/share\/ci\/ciReplay.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -827,1 +827,0 @@\n-  nonstatic_field(ciMethodData,                _current_mileage,                              int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    currentMileageField = new CIntField(type.getCIntegerField(\"_current_mileage\"), 0);\n@@ -55,1 +54,0 @@\n-    currentMileageField = new CIntField(type.getCIntegerField(\"_current_mileage\"), 0);\n@@ -66,1 +64,0 @@\n-  private static CIntField currentMileageField;\n@@ -144,1 +141,1 @@\n-    return (int)currentMileageField.getValue(getAddress());\n+    return 0;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ci\/ciMethodData.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @summary testing of ciReplay with inlining\n+ * @summary testing of ciReplay with nested BoundMethodHandles\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestLambdas.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}