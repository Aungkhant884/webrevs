{"files":[{"patch":"@@ -153,1 +153,1 @@\n-    __ mvw(t1, objArray_lh);\n+    __ mv(t1, objArray_lh);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-      __ mvw(dest->as_register(), c->as_jint());\n+      __ mv(dest->as_register(), c->as_jint());\n@@ -521,1 +521,1 @@\n-        __ mvw(t1, c->as_jint_bits());\n+        __ mv(t1, c->as_jint_bits());\n@@ -1004,1 +1004,1 @@\n-    __ mvw(t1, InstanceKlass::fully_initialized);\n+    __ mv(t1, InstanceKlass::fully_initialized);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  mvw(t0, (int) ilgl);\n+  mv(t0, (int)ilgl);\n@@ -1500,2 +1500,2 @@\n-    mvw(reg2, in_bytes(MultiBranchData::per_case_size()));\n-    mvw(t0, in_bytes(MultiBranchData::case_array_offset()));\n+    mv(reg2, in_bytes(MultiBranchData::per_case_size()));\n+    mv(t0, in_bytes(MultiBranchData::case_array_offset()));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2172,1 +2172,1 @@\n-void  MacroAssembler::decode_heap_oop_not_null(Register r) {\n+void MacroAssembler::decode_heap_oop_not_null(Register r) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-  void li(Register Rd, int64_t imm);  \/\/ optimized load immediate\n+  void li  (Register Rd, int64_t imm);  \/\/ optimized load immediate\n@@ -706,2 +706,0 @@\n-  inline void mvw(Register Rd, int32_t imm32)         { mv(Rd, imm32); }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3901,3 +3901,3 @@\n-\/\/ (actually a mvw $dst $src) and the downstream instructions consume\n-\/\/ the result of the l2i as an iRegI input. That's a shame since the\n-\/\/ mvw is actually redundant but its not too costly.\n+\/\/ (actually an addiw $dst, $src, 0) and the downstream instructions\n+\/\/ consume the result of the L2I as an iRegI input. That's a shame since\n+\/\/ the addiw is actually redundant but its not too costly.\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-        if ( sig_bt[i] == T_LONG || sig_bt[i] == T_DOUBLE) {\n+        if (sig_bt[i] == T_LONG || sig_bt[i] == T_DOUBLE) {\n@@ -889,1 +889,1 @@\n-  __ mvw(t0, ContinuationEntry::cookie_value());\n+  __ mv(t0, ContinuationEntry::cookie_value());\n@@ -2102,1 +2102,1 @@\n-  __ mvw(xcpool, Deoptimization::Unpack_deopt); \/\/ callee-saved\n+  __ mv(xcpool, Deoptimization::Unpack_deopt); \/\/ callee-saved\n@@ -2119,1 +2119,1 @@\n-  __ mvw(xcpool, Deoptimization::Unpack_reexecute); \/\/ callee-saved\n+  __ mv(xcpool, Deoptimization::Unpack_reexecute); \/\/ callee-saved\n@@ -2142,1 +2142,1 @@\n-    __ mvw(t0, -1);\n+    __ mv(t0, -1);\n@@ -2145,1 +2145,1 @@\n-    __ mvw(xcpool, (int32_t)Deoptimization::Unpack_reexecute);\n+    __ mv(xcpool, (int32_t)Deoptimization::Unpack_reexecute);\n@@ -2486,1 +2486,1 @@\n-  __ mvw(c_rarg2, (unsigned)Deoptimization::Unpack_uncommon_trap);\n+  __ mv(c_rarg2, (unsigned)Deoptimization::Unpack_uncommon_trap);\n@@ -2512,1 +2512,1 @@\n-    __ mvw(t1, Deoptimization::Unpack_uncommon_trap);\n+    __ mv(t1, Deoptimization::Unpack_uncommon_trap);\n@@ -2613,1 +2613,1 @@\n-  __ mvw(c_rarg1, (unsigned)Deoptimization::Unpack_uncommon_trap);\n+  __ mv(c_rarg1, (unsigned)Deoptimization::Unpack_uncommon_trap);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1852,1 +1852,1 @@\n-    __ mvw(t0, objArray_lh);\n+    __ mv(t0, objArray_lh);\n@@ -1869,1 +1869,1 @@\n-      __ mvw(t1, Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift);\n+      __ mv(t1, Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift);\n@@ -1942,1 +1942,1 @@\n-      __ mvw(t0, LogBytesPerLong);\n+      __ mv(t0, LogBytesPerLong);\n@@ -1980,1 +1980,1 @@\n-      __ mvw(t1, objArray_lh);\n+      __ mv(t1, objArray_lh);\n@@ -3858,1 +3858,1 @@\n-    __ mvw(c_rarg1, (return_barrier ? 1 : 0));\n+    __ mv(c_rarg1, (return_barrier ? 1 : 0));\n@@ -3898,1 +3898,1 @@\n-    __ mvw(c_rarg1, (uint32_t)kind);\n+    __ mv(c_rarg1, (uint32_t)kind);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -92,2 +92,2 @@\n-    __ lwu(t0, Address(t2, Klass::vtable_length_offset()));\n-    __ mvw(t1, vtable_index * vtableEntry::size());\n+    __ lw(t0, Address(t2, Klass::vtable_length_offset()));\n+    __ mv(t1, vtable_index * vtableEntry::size());\n","filename":"src\/hotspot\/cpu\/riscv\/vtableStubs_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}