{"files":[{"patch":"@@ -3608,0 +3608,12 @@\n+\n+        @Override\n+        Symbol access(Env<AttrContext> env, DiagnosticPosition pos, Symbol location, Symbol sym) {\n+            if (originalSite.hasTag(TYPEVAR) && sym.kind == MTH) {\n+                sym = (sym.flags() & Flags.PRIVATE) != 0 ?\n+                        new AccessError(env, site, sym) :\n+                        sym;\n+                return accessBase(sym, pos, location, originalSite, name, true);\n+            } else {\n+                return super.access(env, pos, location, sym);\n+            }\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8318160\n+ * @summary javac does not reject private method reference with type-variable receiver\n+ * @compile\/fail\/ref=PrivateMethodReferenceWithTypeVarTest.out -XDrawDiagnostics PrivateMethodReferenceWithTypeVarTest.java\n+ *\/\n+\n+import java.util.function.*;\n+\n+class PrivateMethodReferenceWithTypeVarTest {\n+    class Foo<X> {\n+        X get() { return null; }\n+    }\n+\n+    private String asString() {\n+        return \"bar\";\n+    }\n+\n+    private String asString2(Object o) {\n+        return \"bar\";\n+    }\n+\n+    static <T extends PrivateMethodReferenceWithTypeVarTest> Function<T, String> m1() {\n+        return T::asString;\n+    }\n+\n+    static <T extends PrivateMethodReferenceWithTypeVarTest> Function<T, String> m2(T t) {\n+        return t::asString2;\n+    }\n+\n+    static Function<?, String> m2(Foo<? extends PrivateMethodReferenceWithTypeVarTest> foo) {\n+        return foo.get()::asString2;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/PrivateMethodReferenceWithTypeVarTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+PrivateMethodReferenceWithTypeVarTest.java:24:16: compiler.err.report.access: asString(), private, PrivateMethodReferenceWithTypeVarTest\n+PrivateMethodReferenceWithTypeVarTest.java:28:16: compiler.err.report.access: asString2(java.lang.Object), private, PrivateMethodReferenceWithTypeVarTest\n+PrivateMethodReferenceWithTypeVarTest.java:32:16: compiler.err.report.access: asString2(java.lang.Object), private, PrivateMethodReferenceWithTypeVarTest\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/PrivateMethodReferenceWithTypeVarTest.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}