{"files":[{"patch":"@@ -1573,1 +1573,1 @@\n-                (currentResolutionContext.lookupHelper.isInheritedIn(site, sym)) ||\n+                (site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types)) ||\n@@ -3463,4 +3463,0 @@\n-\n-        boolean isInheritedIn(Type site, Symbol sym) {\n-            return site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types);\n-        }\n@@ -3614,4 +3610,9 @@\n-        boolean isInheritedIn(Type site, Symbol sym) {\n-            return (types.skipTypeVars(originalSite, true) == site) ?\n-                originalSite.tsym != sym.owner && !sym.isInheritedIn(originalSite.tsym, types) :\n-                site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types);\n+        Symbol access(Env<AttrContext> env, DiagnosticPosition pos, Symbol location, Symbol sym) {\n+            if (originalSite.hasTag(TYPEVAR) && sym.kind == MTH) {\n+                sym = (sym.flags() & Flags.PRIVATE) != 0 ?\n+                        new AccessError(env, site, sym) :\n+                        sym;\n+                return accessBase(sym, pos, location, originalSite, name, true);\n+            } else {\n+                return super.access(env, pos, location, sym);\n+            }\n@@ -3734,1 +3735,0 @@\n-            currentResolutionContext.lookupHelper = lookupHelper;\n@@ -5015,2 +5015,0 @@\n-        LookupHelper lookupHelper;\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,3 +1,3 @@\n-PrivateMethodReferenceWithTypeVarTest.java:24:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n-PrivateMethodReferenceWithTypeVarTest.java:28:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString2, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n-PrivateMethodReferenceWithTypeVarTest.java:32:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString2, , java.lang.Object, (compiler.misc.location: kindname.type.variable.bound, compiler.misc.type.captureof: 1, ? extends PrivateMethodReferenceWithTypeVarTest, null))\n+PrivateMethodReferenceWithTypeVarTest.java:24:16: compiler.err.report.access: asString(), private, PrivateMethodReferenceWithTypeVarTest\n+PrivateMethodReferenceWithTypeVarTest.java:28:16: compiler.err.report.access: asString2(java.lang.Object), private, PrivateMethodReferenceWithTypeVarTest\n+PrivateMethodReferenceWithTypeVarTest.java:32:16: compiler.err.report.access: asString2(java.lang.Object), private, PrivateMethodReferenceWithTypeVarTest\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/PrivateMethodReferenceWithTypeVarTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}