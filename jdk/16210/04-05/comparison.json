{"files":[{"patch":"@@ -183,8 +183,1 @@\n-        return skipTypeVars(site, capture, false);\n-    }\n-\n-    \/* same as above but with an additional parameter to specify if only captured type variables should be\n-     * skipped\n-     *\/\n-    public Type skipTypeVars(Type site, boolean capture, boolean capturedOnly) {\n-        while (!capturedOnly ? site.hasTag(TYPEVAR) : site.hasTag(TYPEVAR) && ((TypeVar)site).isCaptured()) {\n+        while (site.hasTag(TYPEVAR)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1573,1 +1573,1 @@\n-                (site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types)) ||\n+                (currentResolutionContext.lookupHelper.isInheritedIn(site, sym)) ||\n@@ -3463,0 +3463,4 @@\n+\n+        boolean isInheritedIn(Type site, Symbol sym) {\n+            return site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types);\n+        }\n@@ -3555,1 +3559,1 @@\n-            super(referenceTree, name, types.skipTypeVars(site, true, true), argtypes, typeargtypes, maxPhase);\n+            super(referenceTree, name, types.skipTypeVars(site, true), argtypes, typeargtypes, maxPhase);\n@@ -3608,0 +3612,7 @@\n+\n+        @Override\n+        boolean isInheritedIn(Type site, Symbol sym) {\n+            return (types.skipTypeVars(originalSite, true) == site) ?\n+                originalSite.tsym != sym.owner && !sym.isInheritedIn(originalSite.tsym, types) :\n+                site.tsym != sym.owner && !sym.isInheritedIn(site.tsym, types);\n+        }\n@@ -3624,1 +3635,1 @@\n-                this.site = types.skipTypeVars(asSuperSite, true, true);\n+                this.site = types.skipTypeVars(asSuperSite, true);\n@@ -3723,0 +3734,1 @@\n+            currentResolutionContext.lookupHelper = lookupHelper;\n@@ -5003,0 +5015,2 @@\n+        LookupHelper lookupHelper;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -11,0 +11,4 @@\n+    class Foo<X> {\n+        X get() { return null; }\n+    }\n+\n@@ -26,0 +30,4 @@\n+\n+    static Function<?, String> m2(Foo<? extends PrivateMethodReferenceWithTypeVarTest> foo) {\n+        return foo.get()::asString2;\n+    }\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/PrivateMethodReferenceWithTypeVarTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,3 +1,4 @@\n-PrivateMethodReferenceWithTypeVarTest.java:20:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n-PrivateMethodReferenceWithTypeVarTest.java:24:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString2, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n-2 errors\n+PrivateMethodReferenceWithTypeVarTest.java:24:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n+PrivateMethodReferenceWithTypeVarTest.java:28:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString2, , T, (compiler.misc.location: kindname.type.variable.bound, T, null))\n+PrivateMethodReferenceWithTypeVarTest.java:32:16: compiler.err.invalid.mref: kindname.method, (compiler.misc.cant.resolve.location.args: kindname.method, asString2, , java.lang.Object, (compiler.misc.location: kindname.type.variable.bound, compiler.misc.type.captureof: 1, ? extends PrivateMethodReferenceWithTypeVarTest, null))\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/methodReference\/PrivateMethodReferenceWithTypeVarTest.out","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}