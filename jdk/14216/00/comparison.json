{"files":[{"patch":"@@ -110,1 +110,1 @@\n-        String[] tokens = line.split(\"\\\\s+\");\n+        String[] tokens = line.split(\"\\t\");\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.UncheckedIOException;\n@@ -35,1 +34,0 @@\n-import java.util.Optional;\n@@ -37,1 +35,0 @@\n-import java.util.stream.Stream;\n@@ -164,7 +161,9 @@\n-        try (Stream<String> lines = CgroupUtil.readFilePrivileged(Paths.get(controller.path(), param))) {\n-\n-            Optional<String> result = lines.map(line -> line.split(\" \"))\n-                                           .filter(line -> (line.length == 2 &&\n-                                                   line[0].equals(entryname)))\n-                                           .map(line -> line[1])\n-                                           .findFirst();\n+        try {\n+            long result = defaultRetval;\n+            for (String line : CgroupUtil.readAllLinesPrivileged(Paths.get(controller.path(), param))) {\n+                String[] tokens = line.split(\" \");\n+                if (tokens.length == 2 && tokens[0].equals(entryname)) {\n+                    result = Long.parseLong(tokens[1]);\n+                    break;\n+                }\n+            }\n@@ -172,2 +171,2 @@\n-            return result.isPresent() ? Long.parseLong(result.get()) : defaultRetval;\n-        } catch (UncheckedIOException | IOException e) {\n+            return result;\n+        } catch (IOException e) {\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemController.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.UncheckedIOException;\n@@ -41,3 +40,0 @@\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Stream;\n@@ -57,25 +53,0 @@\n-    \/*\n-     * From https:\/\/www.kernel.org\/doc\/Documentation\/filesystems\/proc.txt\n-     *\n-     *  36 35 98:0 \/mnt1 \/mnt2 rw,noatime master:1 - ext3 \/dev\/root rw,errors=continue\n-     *  (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)\n-     *\n-     *  (1) mount ID:  unique identifier of the mount (may be reused after umount)\n-     *  (2) parent ID:  ID of parent (or of self for the top of the mount tree)\n-     *  (3) major:minor:  value of st_dev for files on filesystem\n-     *  (4) root:  root of the mount within the filesystem\n-     *  (5) mount point:  mount point relative to the process's root\n-     *  (6) mount options:  per mount options\n-     *  (7) optional fields:  zero or more fields of the form \"tag[:value]\"\n-     *  (8) separator:  marks the end of the optional fields\n-     *  (9) filesystem type:  name of filesystem of the form \"type[.subtype]\"\n-     *  (10) mount source:  filesystem specific information or \"none\"\n-     *  (11) super options:  per super block options\n-     *\/\n-    private static final Pattern MOUNTINFO_PATTERN = Pattern.compile(\n-        \"^[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+[^\\\\s]+\\\\s+\" + \/\/ (1), (2), (3)\n-        \"([^\\\\s]+)\\\\s+([^\\\\s]+)\\\\s+\" +         \/\/ (4), (5)     - group 1, 2: root, mount point\n-        \"[^-]+-\\\\s+\" +                         \/\/ (6), (7), (8)\n-        \"([^\\\\s]+)\\\\s+\" +                      \/\/ (9)          - group 3: filesystem type\n-        \".*$\");                                \/\/ (10), (11)\n-\n@@ -86,1 +57,1 @@\n-        } catch (IOException | UncheckedIOException e) {\n+        } catch (IOException e) {\n@@ -107,2 +78,1 @@\n-            Logger logger = System.getLogger(\"jdk.internal.platform\");\n-            logger.log(Level.DEBUG, \"Mixed cgroupv1 and cgroupv2 not supported. Metrics disabled.\");\n+            warn(\"Mixed cgroupv1 and cgroupv2 not supported. Metrics disabled.\");\n@@ -124,0 +94,5 @@\n+    private static void warn(String msg) {\n+        Logger logger = System.getLogger(\"jdk.internal.platform\");\n+        logger.log(Level.DEBUG, msg);\n+    }\n+\n@@ -199,6 +174,5 @@\n-        try (Stream<String> selfCgroupLines =\n-             CgroupUtil.readFilePrivileged(Paths.get(selfCgroup))) {\n-            Consumer<String[]> action = (tokens -> setCgroupV1Path(infos, tokens));\n-            if (isCgroupsV2) {\n-                action = (tokens -> setCgroupV2Path(infos, tokens));\n-            }\n+        Consumer<String[]> action = (tokens -> setCgroupV1Path(infos, tokens));\n+        if (isCgroupsV2) {\n+            action = (tokens -> setCgroupV2Path(infos, tokens));\n+        }\n+        for (String line : CgroupUtil.readAllLinesPrivileged(Paths.get(selfCgroup))) {\n@@ -208,1 +182,1 @@\n-            selfCgroupLines.map(line -> line.split(\":\", 3)).forEach(action);\n+            action.accept(line.split(\":\", 3));\n@@ -284,2 +258,2 @@\n-     * \/proc\/self\/mountinfo. Each line is matched with MOUNTINFO_PATTERN\n-     * (see above), so as to extract the relevant tokens from the line.\n+     * \/proc\/self\/mountinfo. Each line is parsed with {@link MountInfo#parse},\n+     * so as to extract the relevant tokens from the line.\n@@ -306,1 +280,1 @@\n-        Matcher lineMatcher = MOUNTINFO_PATTERN.matcher(mntInfoLine.trim());\n+        MountInfo mountInfo = MountInfo.parse(mntInfoLine);\n@@ -309,4 +283,4 @@\n-        if (lineMatcher.matches()) {\n-            String mountRoot = lineMatcher.group(1);\n-            String mountPath = lineMatcher.group(2);\n-            String fsType = lineMatcher.group(3);\n+        if (mountInfo != null) {\n+            String mountRoot = mountInfo.mountRoot;\n+            String mountPath = mountInfo.mountPath;\n+            String fsType = mountInfo.fsType;\n@@ -348,0 +322,53 @@\n+    private record MountInfo(String mountRoot, String mountPath, String fsType) {\n+        \/*\n+         * From https:\/\/www.kernel.org\/doc\/Documentation\/filesystems\/proc.txt\n+         *\n+         *  36 35 98:0 \/mnt1 \/mnt2 rw,noatime master:1 - ext3 \/dev\/root rw,errors=continue\n+         *  (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)\n+         *\n+         *  (1) mount ID:  unique identifier of the mount (may be reused after umount)\n+         *  (2) parent ID:  ID of parent (or of self for the top of the mount tree)\n+         *  (3) major:minor:  value of st_dev for files on filesystem\n+         *  (4) root:  root of the mount within the filesystem\n+         *  (5) mount point:  mount point relative to the process's root\n+         *  (6) mount options:  per mount options\n+         *  (7) optional fields:  zero or more fields of the form \"tag[:value]\"\n+         *  (8) separator:  marks the end of the optional fields\n+         *  (9) filesystem type:  name of filesystem of the form \"type[.subtype]\"\n+         *  (10) mount source:  filesystem specific information or \"none\"\n+         *  (11) super options:  per super block options\n+         *\/\n+        static MountInfo parse(String line) {\n+            String mountRoot = null;\n+            String mountPath = null;\n+\n+            int separatorOrdinal = -1;\n+            \/\/ loop over space-separated tokens\n+            for (int tOrdinal = 1, tStart = 0, tEnd = line.indexOf(' '); tEnd != -1; tOrdinal++, tStart = tEnd + 1, tEnd = line.indexOf(' ', tStart)) {\n+                if (tStart == tEnd) {\n+                    break; \/\/ unexpected empty token\n+                }\n+                switch (tOrdinal) {\n+                    case 1, 2, 3, 6 -> {} \/\/ skip token\n+                    case 4 -> mountRoot = line.substring(tStart, tEnd); \/\/ root token\n+                    case 5 -> mountPath = line.substring(tStart, tEnd); \/\/ mount point token\n+                    default -> {\n+                        assert tOrdinal >= 7;\n+                        if (separatorOrdinal == -1) {\n+                            \/\/ check if we found a separator token\n+                            if (tEnd - tStart == 1 && line.charAt(tStart) == '-') {\n+                                separatorOrdinal = tOrdinal;\n+                            }\n+                            continue; \/\/ skip token\n+                        }\n+                        if (tOrdinal == separatorOrdinal + 1) { \/\/ filesystem type token\n+                            String fsType = line.substring(tStart, tEnd);\n+                            return new MountInfo(mountRoot, mountPath, fsType);\n+                        }\n+                    }\n+                }\n+            }\n+            return null; \/\/ parsing failed\n+        }\n+    }\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":73,"deletions":46,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.FileReader;\n@@ -30,2 +31,1 @@\n-import java.io.UncheckedIOException;\n-import java.nio.file.Files;\n+import java.nio.charset.StandardCharsets;\n@@ -37,0 +37,1 @@\n+import java.util.ArrayList;\n@@ -38,1 +39,0 @@\n-import java.util.stream.Stream;\n@@ -42,13 +42,0 @@\n-    @SuppressWarnings(\"removal\")\n-    public static Stream<String> readFilePrivileged(Path path) throws IOException {\n-        try {\n-            PrivilegedExceptionAction<Stream<String>> pea = () -> Files.lines(path);\n-            return AccessController.doPrivileged(pea);\n-        } catch (PrivilegedActionException e) {\n-            unwrapIOExceptionAndRethrow(e);\n-            throw new InternalError(e.getCause());\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n-        }\n-    }\n-\n@@ -67,1 +54,1 @@\n-                Files.newBufferedReader(Paths.get(controller.path(), param));\n+                new BufferedReader(new FileReader(Paths.get(controller.path(), param).toString(), StandardCharsets.UTF_8));\n@@ -75,2 +62,0 @@\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n@@ -83,1 +68,10 @@\n-            PrivilegedExceptionAction<List<String>> pea = () -> Files.readAllLines(path);\n+            PrivilegedExceptionAction<List<String>> pea = () -> {\n+                try (BufferedReader bufferedReader = new BufferedReader(new FileReader(path.toString(), StandardCharsets.UTF_8))) {\n+                    String line;\n+                    List<String> lines = new ArrayList<>();\n+                    while ((line = bufferedReader.readLine()) != null) {\n+                        lines.add(line);\n+                    }\n+                    return lines;\n+                }\n+            };\n@@ -88,2 +82,0 @@\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupUtil.java","additions":14,"deletions":22,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-        String[] tokens = line.split(\"\\\\s\");\n+        String[] tokens = line.split(\" \");\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1SubsystemController.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.UncheckedIOException;\n@@ -33,1 +32,0 @@\n-import java.util.stream.Collectors;\n@@ -146,1 +144,1 @@\n-        String[] tokens = cpuMaxRaw.split(\"\\\\s+\");\n+        String[] tokens = cpuMaxRaw.split(\" \");\n@@ -332,4 +330,6 @@\n-            return CgroupUtil.readFilePrivileged(Paths.get(unified.path(), \"io.stat\"))\n-                                .map(mapFunc)\n-                                .collect(Collectors.summingLong(e -> e));\n-        } catch (UncheckedIOException | IOException e) {\n+            long sum = 0L;\n+            for (String line : CgroupUtil.readAllLinesPrivileged(Paths.get(unified.path(), \"io.stat\"))) {\n+                sum += mapFunc.apply(line);\n+            }\n+            return sum;\n+        } catch (IOException e) {\n@@ -362,1 +362,1 @@\n-        String[] tokens = line.split(\"\\\\s+\");\n+        String[] tokens = line.split(\" \");\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2Subsystem.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}