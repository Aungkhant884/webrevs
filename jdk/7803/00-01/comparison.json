{"files":[{"patch":"@@ -54,1 +54,2 @@\n- * @summary This test confirms that the Drag color of JSplitPane divider should be the user specified one(Red here).\n+ * @summary This test confirms that the Drag color of JSplitPane divider should\n+ *          be the user specified one(Red here).\n@@ -59,1 +60,2 @@\n-    \/\/ Tolerance is set inorder to negate small differences in pixel color values, especially in Mac machines.\n+    \/\/ Tolerance is set inorder to negate small differences in pixel color values,\n+    \/\/ especially in Mac machines.\n@@ -71,1 +73,2 @@\n-        \/\/ Skipping NimbusLookAndFeel & GTKLookAndFeel as both are not supported for this feature - JDK-8075914\n+        \/\/ Skipping NimbusLookAndFeel & GTKLookAndFeel,\n+        \/\/ as both are not supported for this feature - JDK-8075914, JDK-8075608\n@@ -73,3 +76,4 @@\n-                                  .filter(laf -> !(laf.getName().contains(\"GTK\") || laf.getName().contains(\"Nimbus\")))\n-                                  .map(LookAndFeelInfo::getClassName)\n-                                  .collect(Collectors.toList());\n+                .filter(laf -> !(laf.getName().contains(\"GTK\")\n+                        || laf.getName().contains(\"Nimbus\")))\n+                .map(LookAndFeelInfo::getClassName)\n+                .collect(Collectors.toList());\n@@ -98,3 +102,5 @@\n-                \/\/ Get the color of one of the pixels of the splitpane divider after the drag has started\n-                \/\/ Ideally it should be the SplitPaneDivider.draggingColor set by user, otherwise the test fails\n-                final Color actualDragColor = robot.getPixelColor(dividerRect.x + 2, dividerRect.y + 2);\n+                \/\/ Get the color of one of the pixels of the splitpane divider\n+                \/\/ after the drag has started. Ideally it should be the\n+                \/\/ SplitPaneDivider.draggingColor set by user, otherwise the test fails\n+                final Color actualDragColor = robot.getPixelColor(dividerRect.x + 2,\n+                        dividerRect.y + 2);\n@@ -110,1 +116,2 @@\n-                    throw new RuntimeException(\"Test failed, drag color is wrong in \" + laf);\n+                    throw new RuntimeException(\"Test failed, drag color is wrong in \"\n+                            + laf);\n@@ -127,3 +134,4 @@\n-        final double tolerance = Math.sqrt((actualRed - expectedRed) * (actualRed - expectedRed) +\n-                (actualGreen - expectedGreen) * (actualGreen - expectedGreen) +\n-                (actualBlue - expectedBlue) * (actualBlue - expectedBlue));\n+        final double tolerance = Math.sqrt(\n+                (actualRed - expectedRed) * (actualRed - expectedRed) +\n+                        (actualGreen - expectedGreen) * (actualGreen - expectedGreen) +\n+                        (actualBlue - expectedBlue) * (actualBlue - expectedBlue));\n@@ -141,1 +149,2 @@\n-            rect.set(new Rectangle(dividerLoc.x, dividerLoc.y, divider.getWidth(), divider.getHeight()));\n+            rect.set(new Rectangle(dividerLoc.x, dividerLoc.y, divider.getWidth(),\n+                    divider.getHeight()));\n@@ -151,1 +160,3 @@\n-                    robot.createScreenCapture(new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                    robot.createScreenCapture(new Rectangle(0, 0,\n+                            screenSize.width,\n+                            screenSize.height)),\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/4820080\/JSplitPaneDragColorTest.java","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"}]}