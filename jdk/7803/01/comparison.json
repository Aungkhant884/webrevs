{"files":[{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.InputEvent;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JSplitPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4820080\n+ * @summary This test confirms that the Drag color of JSplitPane divider should\n+ *          be the user specified one(Red here).\n+ * @run main JSplitPaneDragColorTest\n+ *\/\n+public class JSplitPaneDragColorTest {\n+\n+    \/\/ Tolerance is set inorder to negate small differences in pixel color values,\n+    \/\/ especially in Mac machines.\n+    private final static int COLOR_TOLERANCE = 9;\n+    private static final Color EXPECTED_DRAG_COLOR = Color.RED;\n+    private static JFrame frame;\n+    private static JSplitPane pane;\n+    private static Robot robot;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        \/\/ Skipping NimbusLookAndFeel & GTKLookAndFeel,\n+        \/\/ as both are not supported for this feature - JDK-8075914, JDK-8075608\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                .filter(laf -> !(laf.getName().contains(\"GTK\")\n+                        || laf.getName().contains(\"Nimbus\")))\n+                .map(LookAndFeelInfo::getClassName)\n+                .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                Rectangle dividerRect = getDividerRect();\n+\n+                \/\/ Mouse click and right drag split pane divider\n+                robot.mouseMove(dividerRect.x + 5, dividerRect.y + 36);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseMove(dividerRect.x + 15, dividerRect.y + 36);\n+                robot.mouseMove(dividerRect.x + 5, dividerRect.y + 36);\n+\n+                \/\/ Get the color of one of the pixels of the splitpane divider\n+                \/\/ after the drag has started. Ideally it should be the\n+                \/\/ SplitPaneDivider.draggingColor set by user, otherwise the test fails\n+                final Color actualDragColor = robot.getPixelColor(dividerRect.x + 2,\n+                        dividerRect.y + 2);\n+                if (checkDragColor(actualDragColor)) {\n+                    System.out.println(\"Test passed in \" + laf);\n+                } else {\n+                    System.out.print(\"Expected pixel color = \");\n+                    System.out.printf(\"%X\", EXPECTED_DRAG_COLOR.getRGB());\n+                    System.out.print(\", but actual color = \");\n+                    System.out.printf(\"%X\", actualDragColor.getRGB());\n+                    System.out.println();\n+                    captureScreen();\n+                    throw new RuntimeException(\"Test failed, drag color is wrong in \"\n+                            + laf);\n+                }\n+            } finally {\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                SwingUtilities.invokeAndWait(JSplitPaneDragColorTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static boolean checkDragColor(Color actualDragColor) {\n+        int actualRed = actualDragColor.getRed();\n+        int actualGreen = actualDragColor.getGreen();\n+        int actualBlue = actualDragColor.getBlue();\n+        int expectedRed = EXPECTED_DRAG_COLOR.getRed();\n+        int expectedGreen = EXPECTED_DRAG_COLOR.getGreen();\n+        int expectedBlue = EXPECTED_DRAG_COLOR.getBlue();\n+\n+        final double tolerance = Math.sqrt(\n+                (actualRed - expectedRed) * (actualRed - expectedRed) +\n+                        (actualGreen - expectedGreen) * (actualGreen - expectedGreen) +\n+                        (actualBlue - expectedBlue) * (actualBlue - expectedBlue));\n+        return (tolerance <= COLOR_TOLERANCE);\n+    }\n+\n+    private static Rectangle getDividerRect() {\n+        final AtomicReference<Rectangle> rect = new AtomicReference<>();\n+        SwingUtilities.invokeLater(() -> {\n+            javax.swing.plaf.basic.BasicSplitPaneUI ui =\n+                    (javax.swing.plaf.basic.BasicSplitPaneUI) pane.getUI();\n+\n+            javax.swing.plaf.basic.BasicSplitPaneDivider divider = ui.getDivider();\n+            Point dividerLoc = divider.getLocationOnScreen();\n+            rect.set(new Rectangle(dividerLoc.x, dividerLoc.y, divider.getWidth(),\n+                    divider.getHeight()));\n+        });\n+        robot.waitForIdle();\n+        return rect.get();\n+    }\n+\n+    private static void captureScreen() {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        try {\n+            ImageIO.write(\n+                    robot.createScreenCapture(new Rectangle(0, 0,\n+                            screenSize.width,\n+                            screenSize.height)),\n+                    \"png\",\n+                    new File(\"screen1.png\")\n+            );\n+        } catch (IOException ignore) {\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        UIManager.put(\"SplitPaneDivider.draggingColor\", EXPECTED_DRAG_COLOR);\n+        JLabel l1 = new JLabel(\"LEFT  LABEL\", JLabel.CENTER);\n+        JLabel l2 = new JLabel(\"RIGHT LABEL\", JLabel.CENTER);\n+        pane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, l1, l2);\n+        frame.setSize(400, 400);\n+        pane.setDividerSize(15);\n+        pane.setDividerLocation(frame.getSize().width \/ 2);\n+        frame.getContentPane().add(pane, BorderLayout.CENTER);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JSplitPane\/4820080\/JSplitPaneDragColorTest.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"}]}