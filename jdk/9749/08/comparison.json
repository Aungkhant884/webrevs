{"files":[{"patch":"@@ -247,2 +247,2 @@\n-                if (LoadLibrary(crtpath) == 0) {\n-                    JLI_ReportErrorMessage(DLL_ERROR4, crtpath);\n+                if (LoadLibrary(crtpath) == NULL) {\n+                    reportWithLastWindowsError(DLL_ERROR4, crtpath);\n@@ -264,2 +264,2 @@\n-                if (LoadLibrary(crtpath) == 0) {\n-                    JLI_ReportErrorMessage(DLL_ERROR4, crtpath);\n+                if (LoadLibrary(crtpath) == NULL) {\n+                    reportWithLastWindowsError(DLL_ERROR4, crtpath);\n@@ -281,2 +281,2 @@\n-                if (LoadLibrary(crtpath) == 0) {\n-                    JLI_ReportErrorMessage(DLL_ERROR4, crtpath);\n+                if (LoadLibrary(crtpath) == NULL) {\n+                    reportWithLastWindowsError(DLL_ERROR4, crtpath);\n@@ -387,3 +387,3 @@\n-    \/* Load the Java VM DLL *\/\n-    if ((handle = LoadLibrary(jvmpath)) == 0) {\n-        JLI_ReportErrorMessage(DLL_ERROR4, (char *)jvmpath);\n+    \/* Load the Java Virtual Machine *\/\n+    if ((handle = LoadLibrary(jvmpath)) == NULL) {\n+        reportWithLastWindowsError(DLL_ERROR4, (char *) jvmpath);\n@@ -691,0 +691,70 @@\n+void reportWithLastWindowsError(const char *format, ...) {\n+    va_list vl;\n+\n+    DWORD errval;\n+    jboolean localFree = JNI_FALSE;\n+    char *error = NULL;\n+\n+    va_start(vl, format);\n+\n+    if ((errval = GetLastError()) != 0) {               \/* Platform SDK \/ DOS Error *\/\n+        int n = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM |\n+            FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_ALLOCATE_BUFFER,\n+            NULL, errval, 0, (LPTSTR) &error, 0, NULL);\n+        if (error == NULL || n == 0) {                  \/* Paranoia check *\/\n+            char* buffer = \"Java detected but could not determine the underlying Windows error\";\n+            error = (char*) JLI_MemAlloc(JLI_StrLen(buffer) + 1);\n+            JLI_StrCpy(error, buffer);\n+            n = 0;\n+        } else {\n+            localFree = JNI_TRUE;\n+            if (n > 3) {                                \/* Drop final CR, LF *\/\n+                if (error[n - 1] == '\\n') n--;\n+                if (error[n - 1] == '\\r') n--;\n+                if (error[n - 1] == '.') n--;           \/* Drop '.' to match HotSpot *\/\n+                error[n] = '\\0';\n+            }\n+        }\n+    }\n+\n+    if (IsJavaw()) {\n+        char *message;\n+        int mlen;\n+        \/* Get the length of the string we need *\/\n+        int len = mlen =  _vscprintf(format, vl) + 1;\n+        if (error != NULL) {\n+            mlen += 2 + (int) JLI_StrLen(error);\n+        }\n+\n+        message = (char *) JLI_MemAlloc(mlen);\n+        _vsnprintf(message, len, format, vl);\n+\n+        if (error != NULL) {\n+            message[len] = ':';\n+            message[len + 1] = ' ';\n+            JLI_StrCat(message, error);\n+        } else {\n+            message[len] = '\\0';\n+        }\n+\n+        MessageBox(NULL, message, \"Java Virtual Machine Launcher\",\n+            (MB_OK|MB_ICONSTOP|MB_APPLMODAL));\n+\n+        JLI_MemFree(message);\n+    } else {\n+        vfprintf(stderr, format, vl);\n+        if (error != NULL) {\n+            fprintf(stderr, \": %s\", error);\n+        }\n+        fprintf(stderr, \"\\n\");\n+    }\n+    if (error != NULL) {\n+        if (localFree) {\n+            (void) LocalFree((HLOCAL) error);\n+        } else {\n+            free(error);\n+        }\n+    }\n+    va_end(vl);\n+}\n+\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":79,"deletions":9,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * Function prototypes.\n+ * Windows specific declarations.\n@@ -48,0 +48,1 @@\n+void reportWithLastWindowsError(const char* message, ...);\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}