{"files":[{"patch":"@@ -164,2 +164,2 @@\n-    [sActions setObject:NSAccessibilityShowMenuAction forKey:@\"togglePopup\"];\n-    [sActions setObject:NSAccessibilityPressAction forKey:@\"toggleExpand\"];\n+    [sActions setObject:NSAccessibilityShowMenuAction forKey:@\"toggle popup\"];\n+    [sActions setObject:NSAccessibilityPressAction forKey:@\"toggleexpand\"];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test for an element that has more than one Accessibility Action\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleActionsTest\n+ * @requires (os.family == \"mac\")\n+ *\/\n+\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleAction;\n+import javax.accessibility.AccessibleContext;\n+import javax.swing.*;\n+import javax.swing.tree.TreeModel;\n+import javax.swing.tree.TreePath;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.Hashtable;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class AccessibleActionsTest extends AccessibleComponentTest {\n+\n+  @Override\n+  public CountDownLatch createCountDownLatch() {\n+    return new CountDownLatch(1);\n+  }\n+\n+  void createTest() {\n+    INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+            + \"Check a11y actions.\\n\\n\"\n+            + \"Turn screen reader on, and Tab to the label.\\n\\n\"\n+            + \"Perform the VO action \\\"Press\\\" (VO+space)\\n\"\n+            + \"Perform the VO action \\\"Show menu\\\" (VO+m)\\n\\n\"\n+            + \"If after the first action the text of the label has changed, and after the second action the menu appears  tab further and press PASS, otherwise press FAIL.\";\n+\n+    exceptionString = \"AccessibleAction test failed!\";\n+    super.createUI(new AccessibleActionsTestFrame(), \"AccessibleActionsTest\");\n+  }\n+\n+  void createTree() {\n+    INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+            + \"Check a11y actions.\\n\\n\"\n+            + \"Turn screen reader on, and Tab to the label.\\n\\n\"\n+            + \"Perform the VO action \\\"Press\\\" (VO+space) on tree nodes\\n\\n\"\n+            + \"If after press the tree node is expanded  tab further and press PASS, otherwise press FAIL.\";\n+\n+    String root = \"Root\";\n+    String[] nodes = new String[] {\"One node\", \"Two node\"};\n+    String[][] leafs = new String[][]{{\"leaf 1.1\", \"leaf 1.2\", \"leaf 1.3\", \"leaf 1.4\"},\n+            {\"leaf 2.1\", \"leaf 2.2\", \"leaf 2.3\", \"leaf 2.4\"}};\n+\n+    Hashtable<String, String[]> data = new Hashtable<String, String[]>();\n+    for (int i = 0; i < nodes.length; i++) {\n+      data.put(nodes[i], leafs[i]);\n+    }\n+\n+    JTree tree = new JTree(data);\n+    tree.setRootVisible(true);\n+\n+    JPanel panel = new JPanel();\n+    panel.setLayout(new FlowLayout());\n+    JScrollPane scrollPane = new JScrollPane(tree);\n+    panel.add(scrollPane);\n+    panel.setFocusable(false);\n+\n+    exceptionString = \"AccessibleAction test failed!\";\n+    super.createUI(panel, \"AccessibleActionsTest\");\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    AccessibleActionsTest test = new AccessibleActionsTest();\n+\n+    countDownLatch = test.createCountDownLatch();\n+    SwingUtilities.invokeLater(test::createTest);\n+    countDownLatch.await();\n+\n+    if (!testResult) {\n+      throw new RuntimeException(a11yTest.exceptionString);\n+    }\n+\n+    countDownLatch = test.createCountDownLatch();\n+    SwingUtilities.invokeLater(test::createTree);\n+    countDownLatch.await();\n+\n+    if (!testResult) {\n+      throw new RuntimeException(a11yTest.exceptionString);\n+    }\n+  }\n+\n+  private class AccessibleActionsTestFrame extends JPanel {\n+\n+    public AccessibleActionsTestFrame() {\n+      MyLabel label = new MyLabel(\"I'm waiting for the push\");\n+      label.setComponentPopupMenu(createPopup());\n+      label.setFocusable(true);\n+      add(label);\n+      setLayout(new FlowLayout());\n+    }\n+\n+    private static class MyLabel extends JLabel {\n+      public MyLabel(String text) {\n+        super(text);\n+      }\n+\n+      @Override\n+      public AccessibleContext getAccessibleContext() {\n+        if (accessibleContext == null) {\n+          accessibleContext = new MyAccessibleJLabel();\n+        }\n+        return accessibleContext;\n+      }\n+\n+      private class MyAccessibleJLabel extends JLabel.AccessibleJLabel {\n+        @Override\n+        public AccessibleAction getAccessibleAction() {\n+          return new AccessibleAction() {\n+            @Override\n+            public int getAccessibleActionCount() {\n+              return 2;\n+            }\n+\n+            @Override\n+            public String getAccessibleActionDescription(int i) {\n+              if (i == 0) {\n+                return AccessibleAction.CLICK;\n+              }\n+              return AccessibleAction.TOGGLE_POPUP;\n+            }\n+\n+            @Override\n+            public boolean doAccessibleAction(int i) {\n+              if (i == 0) {\n+                changeText(MyLabel.this, \"label is pressed\");\n+                return true;\n+              }\n+              JPopupMenu popup = createPopup();\n+              popup.show(MyLabel.this, 0, 0);\n+              return true;\n+            }\n+          };\n+        }\n+      }\n+    }\n+\n+    private static JPopupMenu createPopup() {\n+      JPopupMenu popup = new JPopupMenu(\"MENU\");\n+      popup.add(\"One\");\n+      popup.add(\"Two\");\n+      popup.add(\"Three\");\n+      return popup;\n+    }\n+\n+    private static void changeText(JLabel label, String text) {\n+      label.setText(text);\n+    }\n+\n+  }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleActionsTest.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"}]}