{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,2 @@\n- * where <i>w<\/i> is 23 for {@code float} values and 52 for {@code double}\n+ * where <i>w<\/i> is {@link Float#PRECISION} for {@code float} values\n+ * and {@link Double#PRECISION} for {@code double}\n@@ -499,2 +500,2 @@\n-     * @implSpec The default implementation uses the 24 high-order bits from a call to\n-     * {@link RandomGenerator#nextInt() nextInt}().\n+     * @implSpec The default implementation uses the {@link Float#PRECISION}\n+     * high-order bits from a call to {@link RandomGenerator#nextInt() nextInt()}.\n@@ -503,1 +504,1 @@\n-        return (nextInt() >>> 8) * 0x1.0p-24f;\n+        return (nextInt() >>> (Float.SIZE - Float.PRECISION)) * 0x1.0p-24f;\n@@ -565,2 +566,2 @@\n-     * @implSpec The default implementation uses the 53 high-order bits from a call to\n-     * {@link RandomGenerator#nextLong nextLong}().\n+     * @implSpec The default implementation uses the {@link Double#PRECISION}\n+     * high-order bits from a call to {@link RandomGenerator#nextLong() nextLong()}.\n@@ -569,1 +570,1 @@\n-        return (nextLong() >>> 11) * 0x1.0p-53;\n+        return (nextLong() >>> (Double.SIZE - Double.PRECISION)) * 0x1.0p-53;\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}