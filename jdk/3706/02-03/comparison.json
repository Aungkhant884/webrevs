{"files":[{"patch":"@@ -2675,1 +2675,0 @@\n-\n@@ -2678,1 +2677,0 @@\n-\n@@ -2680,2 +2678,0 @@\n-  BasicType    int_args[] = { T_INT };\n-\n@@ -2683,2 +2679,0 @@\n-  BasicType    obj_args[] = { T_OBJECT };\n-\n@@ -2686,2 +2680,0 @@\n-  BasicType    obj_int_args[] = { T_OBJECT, T_INT };\n-\n@@ -2689,2 +2681,0 @@\n-  BasicType    obj_obj_args[] = { T_OBJECT, T_OBJECT };\n-\n@@ -2710,0 +2700,2 @@\n+\n+    BasicType obj_args[] = { T_OBJECT };\n@@ -2711,0 +2703,2 @@\n+\n+    BasicType int_args[] = { T_INT };\n@@ -2712,0 +2706,2 @@\n+\n+    BasicType obj_int_args[] = { T_OBJECT, T_INT };\n@@ -2713,0 +2709,2 @@\n+\n+    BasicType obj_obj_args[] = { T_OBJECT, T_OBJECT };\n@@ -2722,1 +2720,0 @@\n-\n@@ -2839,1 +2836,3 @@\n-  AdapterSignatureIterator si(method->signature(), method->constMethod()->fingerprint(), method->is_static(), total_args_passed);\n+  AdapterSignatureIterator si(method->signature(), method->constMethod()->fingerprint(),\n+                              method->is_static(), total_args_passed);\n+  assert(si.slots() == total_args_passed, \"\");\n@@ -2844,2 +2843,0 @@\n-    assert(si.slots() == total_args_passed, \"\");\n-\n@@ -3055,1 +3052,0 @@\n-      BasicType stack_sig_bt[16];\n@@ -3057,1 +3053,0 @@\n-      BasicType* sig_bt = (total_args_passed <= 16) ? stack_sig_bt : NEW_RESOURCE_ARRAY(BasicType, total_args_passed);\n@@ -3060,11 +3055,5 @@\n-      int i = 0;\n-      if (!method->is_static())  \/\/ Pass in receiver first\n-        sig_bt[i++] = T_OBJECT;\n-      SignatureStream ss(method->signature());\n-      for (; !ss.at_return_type(); ss.next()) {\n-        sig_bt[i++] = ss.type();  \/\/ Collect remaining bits of signature\n-        if (ss.type() == T_LONG || ss.type() == T_DOUBLE)\n-          sig_bt[i++] = T_VOID;   \/\/ Longs & doubles take 2 Java slots\n-      }\n-      assert(i == total_args_passed, \"\");\n-      BasicType ret_type = ss.type();\n+      AdapterSignatureIterator si(method->signature(), method->constMethod()->fingerprint(),\n+                              method->is_static(), total_args_passed);\n+      BasicType* sig_bt = si.basic_types();\n+      assert(si.slots() == total_args_passed, \"\");\n+      BasicType ret_type = si.return_type();\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":16,"deletions":27,"binary":false,"changes":43,"status":"modified"}]}