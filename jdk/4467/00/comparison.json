{"files":[{"patch":"@@ -1357,0 +1357,18 @@\n+\/\/ Check if a class or any of its supertypes has been redefined.\n+bool SystemDictionaryShared::has_been_redefined(InstanceKlass* k) {\n+  if (k->has_been_redefined()) {\n+    return true;\n+  }\n+  if (k->java_super() != NULL && has_been_redefined(k->java_super())) {\n+    return true;\n+  }\n+  Array<InstanceKlass*>* interfaces = k->local_interfaces();\n+  int len = interfaces->length();\n+  for (int i = 0; i < len; i++) {\n+    if (has_been_redefined(interfaces->at(i))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -1361,1 +1379,1 @@\n-  if (k->has_been_redefined()) {\n+  if (has_been_redefined(k)) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -218,0 +218,1 @@\n+  static bool has_been_redefined(InstanceKlass* k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8268470\n+ * @summary Test dynamic CDS with JFR recording.\n+ *          Dynamic dump should skip the class such as jdk\/jfr\/events\/FileReadEvent\n+ *          if one of its super classes has been redefined during JFR startup.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n+ * @build JFRDynamicCDSApp sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar jfr_dynamic_cds_app.jar JFRDynamicCDSApp JFRDynamicCDSApp$StressEvent\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. JFRDynamicCDS\n+ *\/\n+\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class JFRDynamicCDS extends DynamicArchiveTestBase {\n+    public static void main(String[] args) throws Exception {\n+        runTest(JFRDynamicCDS::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName();\n+        String appJar = ClassFileInstaller.getJarPath(\"jfr_dynamic_cds_app.jar\");\n+        String mainClass = \"JFRDynamicCDSApp\";\n+        \/\/ 0 : without JFR recording\n+        \/\/ 4 : with JFR recording\n+        int[] modes = {0, 4};\n+\n+        for (int mode : modes) {\n+            dump(topArchiveName,\n+                \"-Xlog:class+load,cds=debug\",\n+                \"-cp\", appJar, mainClass, String.valueOf(mode))\n+                .assertNormalExit(output -> {\n+                    output.shouldHaveExitValue(0);\n+                    if (mode == 4) {\n+                        output.shouldMatch(\"Skipping.jdk\/jfr\/events.*Has.been.redefined\");\n+                    }\n+                });\n+\n+            run(topArchiveName,\n+                \"-Xlog:class+load=info\",\n+                \"-cp\", appJar, mainClass, String.valueOf(mode))\n+                .assertNormalExit(output -> {\n+                    output.shouldHaveExitValue(0)\n+                          .shouldContain(\"[class,load] JFRDynamicCDSApp source: shared objects file (top)\");\n+                    if (mode == 4) {\n+                        output.shouldMatch(\".class.load. jdk.jfr.events.*source:.*jrt:\/jdk.jfr\");\n+                    }\n+                });\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/JFRDynamicCDS.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+import java.nio.file.Paths;\n+import jdk.jfr.Configuration;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+\n+public class JFRDynamicCDSApp {\n+    public static void main(String args[]) throws Exception {\n+        int mode = 4;\n+        try {\n+            mode = Integer.parseInt(args[0]);\n+        } catch (Throwable t) {}\n+\n+        if (mode > 0) {\n+            RecordingStream rs = new RecordingStream();\n+            if (mode > 1) {\n+                rs.enable(\"JFRDynamicCDS.StressEvent\");\n+                rs.startAsync();\n+\n+                if (mode > 2) {\n+                    Recording recording = startRecording();\n+                    if (mode > 3) {\n+                        loop();\n+                    }\n+                    recording.stop();\n+                    recording.close();\n+                }\n+            }\n+\n+            rs.close();\n+        }\n+    }\n+\n+    static Recording startRecording() throws Exception {\n+        Configuration configuration = Configuration.getConfiguration(\"default\");\n+        Recording recording = new Recording(configuration);\n+\n+        recording.setName(\"internal\");\n+        recording.enable(StressEvent.class);\n+        recording.setDestination(Paths.get(\"JFRDynamicCDS.jfr\"));\n+        recording.start();\n+        return recording;\n+    }\n+\n+\n+    static void loop() {\n+        for (int i=0; i<100; i++) {\n+            StressEvent event = new StressEvent();\n+            event.iteration = i;\n+            event.description = \"Stressful Event, take it easy!\";\n+            event.customClazz = StressEvent.class;\n+            event.value = i;\n+            event.commit();\n+        }\n+    }\n+\n+\n+    \/**\n+     * Internal StressEvent class.\n+     *\/\n+    @Label(\"Stress Event\")\n+    @Description(\"A duration event with 4 entries\")\n+    @Name(\"JFRDynamicCDS.StressEvent\")\n+    public static class StressEvent extends jdk.jfr.Event {\n+        public Class<?> customClazz;\n+        public String description;\n+        public int iteration;\n+        public double value;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/JFRDynamicCDSApp.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}