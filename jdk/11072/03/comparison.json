{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.net.URL;\n@@ -42,1 +41,0 @@\n-import java.security.CodeSource;\n@@ -45,1 +43,0 @@\n-import java.util.Collections;\n@@ -661,1 +658,1 @@\n-                certs = jv.getCerts(JarFile.this, realEntry());\n+                certs = jv.getCerts(realEntry());\n@@ -674,1 +671,1 @@\n-                signers = jv.getCodeSigners(JarFile.this, realEntry());\n+                signers = jv.getCodeSigners(realEntry());\n@@ -1105,24 +1102,0 @@\n-    Enumeration<String> entryNames(CodeSource[] cs) {\n-        ensureInitialization();\n-        if (jv != null) {\n-            return jv.entryNames(this, cs);\n-        }\n-\n-        \/*\n-         * JAR file has no signed content. Is there a non-signing\n-         * code source?\n-         *\/\n-        boolean includeUnsigned = false;\n-        for (CodeSource c : cs) {\n-            if (c.getCodeSigners() == null) {\n-                includeUnsigned = true;\n-                break;\n-            }\n-        }\n-        if (includeUnsigned) {\n-            return unsignedEntryNames();\n-        } else {\n-            return Collections.emptyEnumeration();\n-        }\n-    }\n-\n@@ -1173,18 +1146,0 @@\n-    CodeSource[] getCodeSources(URL url) {\n-        ensureInitialization();\n-        if (jv != null) {\n-            return jv.getCodeSources(this, url);\n-        }\n-\n-        \/*\n-         * JAR file has no signed content. Is there a non-signing\n-         * code source?\n-         *\/\n-        Enumeration<String> unsigned = unsignedEntryNames();\n-        if (unsigned.hasMoreElements()) {\n-            return new CodeSource[]{JarVerifier.getUnsignedCS(url)};\n-        } else {\n-            return null;\n-        }\n-    }\n-\n@@ -1229,31 +1184,0 @@\n-    CodeSource getCodeSource(URL url, String name) {\n-        ensureInitialization();\n-        if (jv != null) {\n-            if (jv.eagerValidation) {\n-                CodeSource cs;\n-                JarEntry je = getJarEntry(name);\n-                if (je != null) {\n-                    cs = jv.getCodeSource(url, this, je);\n-                } else {\n-                    cs = jv.getCodeSource(url, name);\n-                }\n-                return cs;\n-            } else {\n-                return jv.getCodeSource(url, name);\n-            }\n-        }\n-\n-        return JarVerifier.getUnsignedCS(url);\n-    }\n-\n-    void setEagerValidation(boolean eager) {\n-        try {\n-            maybeInstantiateVerifier();\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        if (jv != null) {\n-            jv.setEagerValidation(eager);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":2,"deletions":78,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -31,1 +31,5 @@\n-import java.security.*;\n+import java.security.CodeSigner;\n+import java.security.CodeSource;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SignatureException;\n+import java.security.cert.Certificate;\n@@ -90,3 +94,0 @@\n-    \/** controls eager signature validation *\/\n-    boolean eagerValidation;\n-\n@@ -335,12 +336,1 @@\n-    \/**\n-     * Return an array of java.security.cert.Certificate objects for\n-     * the given file in the jar.\n-     * @deprecated\n-     *\/\n-    @Deprecated\n-    public java.security.cert.Certificate[] getCerts(String name)\n-    {\n-        return mapSignersToCertArray(getCodeSigners(name));\n-    }\n-\n-    public java.security.cert.Certificate[] getCerts(JarFile jar, JarEntry entry)\n+    public Certificate[] getCerts(JarEntry entry)\n@@ -348,1 +338,1 @@\n-        return mapSignersToCertArray(getCodeSigners(jar, entry));\n+        return mapSignersToCertArray(getCodeSigners(entry));\n@@ -361,1 +351,1 @@\n-    public CodeSigner[] getCodeSigners(JarFile jar, JarEntry entry)\n+    public CodeSigner[] getCodeSigners(JarEntry entry)\n@@ -363,18 +353,1 @@\n-        String name = entry.getName();\n-        if (eagerValidation && sigFileSigners.get(name) != null) {\n-            \/*\n-             * Force a read of the entry data to generate the\n-             * verification hash.\n-             *\/\n-            try {\n-                InputStream s = jar.getInputStream(entry);\n-                byte[] buffer = new byte[1024];\n-                int n = buffer.length;\n-                while (n != -1) {\n-                    n = s.read(buffer, 0, buffer.length);\n-                }\n-                s.close();\n-            } catch (IOException e) {\n-            }\n-        }\n-        return getCodeSigners(name);\n+        return getCodeSigners(entry.getName());\n@@ -387,1 +360,1 @@\n-    private static java.security.cert.Certificate[] mapSignersToCertArray(\n+    private static Certificate[] mapSignersToCertArray(\n@@ -391,1 +364,1 @@\n-            ArrayList<java.security.cert.Certificate> certChains = new ArrayList<>();\n+            ArrayList<Certificate> certChains = new ArrayList<>();\n@@ -399,1 +372,1 @@\n-                    new java.security.cert.Certificate[certChains.size()]);\n+                    new Certificate[certChains.size()]);\n@@ -519,38 +492,0 @@\n-\n-    \/*\n-     * Create a unique mapping from codeSigner cache entries to CodeSource.\n-     * In theory, multiple URLs origins could map to a single locally cached\n-     * and shared JAR file although in practice there will be a single URL in use.\n-     *\/\n-    private synchronized CodeSource mapSignersToCodeSource(URL url, CodeSigner[] signers) {\n-        Map<CodeSigner[], CodeSource> map;\n-        if (url == lastURL) {\n-            map = lastURLMap;\n-        } else {\n-            map = urlToCodeSourceMap.get(url);\n-            if (map == null) {\n-                map = new HashMap<>();\n-                urlToCodeSourceMap.put(url, map);\n-            }\n-            lastURLMap = map;\n-            lastURL = url;\n-        }\n-        CodeSource cs = map.get(signers);\n-        if (cs == null) {\n-            cs = new VerifierCodeSource(csdomain, url, signers);\n-            signerToCodeSource.put(signers, cs);\n-        }\n-        return cs;\n-    }\n-\n-    private CodeSource[] mapSignersToCodeSources(URL url, List<CodeSigner[]> signers, boolean unsigned) {\n-        List<CodeSource> sources = new ArrayList<>();\n-\n-        for (CodeSigner[] signer : signers) {\n-            sources.add(mapSignersToCodeSource(url, signer));\n-        }\n-        if (unsigned) {\n-            sources.add(mapSignersToCodeSource(url, null));\n-        }\n-        return sources.toArray(new CodeSource[sources.size()]);\n-    }\n@@ -559,31 +494,0 @@\n-    \/*\n-     * Match CodeSource to a CodeSigner[] in the signer cache.\n-     *\/\n-    private CodeSigner[] findMatchingSigners(CodeSource cs) {\n-        if (cs instanceof VerifierCodeSource vcs) {\n-            if (vcs.isSameDomain(csdomain)) {\n-                return vcs.getPrivateSigners();\n-            }\n-        }\n-\n-        \/*\n-         * In practice signers should always be optimized above\n-         * but this handles a CodeSource of any type, just in case.\n-         *\/\n-        CodeSource[] sources = mapSignersToCodeSources(cs.getLocation(), getJarCodeSigners(), true);\n-        List<CodeSource> sourceList = new ArrayList<>();\n-        for (CodeSource source : sources) {\n-            sourceList.add(source);\n-        }\n-        int j = sourceList.indexOf(cs);\n-        if (j != -1) {\n-            CodeSigner[] match;\n-            match = ((VerifierCodeSource) sourceList.get(j)).getPrivateSigners();\n-            if (match == null) {\n-                match = emptySigner;\n-            }\n-            return match;\n-        }\n-        return null;\n-    }\n-\n@@ -600,1 +504,1 @@\n-        java.security.cert.Certificate[] vcerts;\n+        Certificate[] vcerts;\n@@ -611,1 +515,1 @@\n-        VerifierCodeSource(Object csdomain, URL location, java.security.cert.Certificate[] certs) {\n+        VerifierCodeSource(Object csdomain, URL location, Certificate[] certs) {\n@@ -660,1 +564,1 @@\n-        private java.security.cert.Certificate[] getPrivateCertificates() {\n+        private Certificate[] getPrivateCertificates() {\n@@ -680,60 +584,0 @@\n-    public synchronized Enumeration<String> entryNames(JarFile jar, final CodeSource[] cs) {\n-        final Map<String, CodeSigner[]> map = signerMap();\n-        final Iterator<Map.Entry<String, CodeSigner[]>> itor = map.entrySet().iterator();\n-        boolean matchUnsigned = false;\n-\n-        \/*\n-         * Grab a single copy of the CodeSigner arrays. Check\n-         * to see if we can optimize CodeSigner equality test.\n-         *\/\n-        List<CodeSigner[]> req = new ArrayList<>(cs.length);\n-        for (CodeSource c : cs) {\n-            CodeSigner[] match = findMatchingSigners(c);\n-            if (match != null) {\n-                if (match.length > 0) {\n-                    req.add(match);\n-                } else {\n-                    matchUnsigned = true;\n-                }\n-            } else {\n-                matchUnsigned = true;\n-            }\n-        }\n-\n-        final List<CodeSigner[]> signersReq = req;\n-        final Enumeration<String> enum2 = matchUnsigned ? unsignedEntryNames(jar) : Collections.emptyEnumeration();\n-\n-        return new Enumeration<>() {\n-\n-            String name;\n-\n-            public boolean hasMoreElements() {\n-                if (name != null) {\n-                    return true;\n-                }\n-\n-                while (itor.hasNext()) {\n-                    Map.Entry<String, CodeSigner[]> e = itor.next();\n-                    if (signersReq.contains(e.getValue())) {\n-                        name = e.getKey();\n-                        return true;\n-                    }\n-                }\n-                while (enum2.hasMoreElements()) {\n-                    name = enum2.nextElement();\n-                    return true;\n-                }\n-                return false;\n-            }\n-\n-            public String nextElement() {\n-                if (hasMoreElements()) {\n-                    String value = name;\n-                    name = null;\n-                    return value;\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n-\n@@ -847,21 +691,0 @@\n-    public synchronized CodeSource[] getCodeSources(JarFile jar, URL url) {\n-        boolean hasUnsigned = unsignedEntryNames(jar).hasMoreElements();\n-\n-        return mapSignersToCodeSources(url, getJarCodeSigners(), hasUnsigned);\n-    }\n-\n-    public CodeSource getCodeSource(URL url, String name) {\n-        CodeSigner[] signers;\n-\n-        signers = signerMap().get(name);\n-        return mapSignersToCodeSource(url, signers);\n-    }\n-\n-    public CodeSource getCodeSource(URL url, JarFile jar, JarEntry je) {\n-        return mapSignersToCodeSource(url, getCodeSigners(jar, je));\n-    }\n-\n-    public void setEagerValidation(boolean eager) {\n-        eagerValidation = eager;\n-    }\n-\n@@ -873,1 +696,1 @@\n-        return new VerifierCodeSource(null, url, (java.security.cert.Certificate[]) null);\n+        return new VerifierCodeSource(null, url, (Certificate[]) null);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":16,"deletions":193,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -29,6 +29,0 @@\n-import java.net.URL;\n-import java.security.CodeSource;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipFile;\n@@ -43,24 +37,0 @@\n-    public CodeSource[] getCodeSources(JarFile jar, URL url) {\n-        return jar.getCodeSources(url);\n-    }\n-\n-    public CodeSource getCodeSource(JarFile jar, URL url, String name) {\n-        return jar.getCodeSource(url, name);\n-    }\n-\n-    public Enumeration<String> entryNames(JarFile jar, CodeSource[] cs) {\n-        return jar.entryNames(cs);\n-    }\n-\n-    public Enumeration<JarEntry> entries2(JarFile jar) {\n-        return jar.entries2();\n-    }\n-\n-    public void setEagerValidation(JarFile jar, boolean eager) {\n-        jar.setEagerValidation(eager);\n-    }\n-\n-    public List<Object> getManifestDigests(JarFile jar) {\n-        return jar.getManifestDigests();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JavaUtilJarAccessImpl.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,4 +29,0 @@\n-import java.net.URL;\n-import java.security.CodeSource;\n-import java.util.Enumeration;\n-import java.util.List;\n@@ -40,6 +36,0 @@\n-    public CodeSource[] getCodeSources(JarFile jar, URL url);\n-    public CodeSource getCodeSource(JarFile jar, URL url, String name);\n-    public Enumeration<String> entryNames(JarFile jar, CodeSource[] cs);\n-    public Enumeration<JarEntry> entries2(JarFile jar);\n-    public void setEagerValidation(JarFile jar, boolean eager);\n-    public List<Object> getManifestDigests(JarFile jar);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilJarAccess.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}