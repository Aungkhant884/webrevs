{"files":[{"patch":"@@ -42,1 +42,0 @@\n-import java.util.ArrayList;\n@@ -45,1 +44,0 @@\n-import java.util.NoSuchElementException;\n@@ -1073,118 +1071,0 @@\n-\n-    \/*\n-     * Returns a versioned {@code JarFileEntry} for the given entry,\n-     * if there is one. Otherwise returns the original entry. This\n-     * is invoked by the {@code entries2} for verifier.\n-     *\/\n-    JarEntry newEntry(JarEntry je) {\n-        if (isMultiRelease()) {\n-            return getVersionedEntry(je.getName(), je);\n-        }\n-        return je;\n-    }\n-\n-    \/*\n-     * Returns a versioned {@code JarFileEntry} for the given entry\n-     * name, if there is one. Otherwise returns a {@code JarFileEntry}\n-     * with the given name. It is invoked from JarVerifier's entries2\n-     * for {@code singers}.\n-     *\/\n-    JarEntry newEntry(String name) {\n-        if (isMultiRelease()) {\n-            JarEntry vje = getVersionedEntry(name, null);\n-            if (vje != null) {\n-                return vje;\n-            }\n-        }\n-        return new JarFileEntry(name);\n-    }\n-\n-    \/**\n-     * Returns an enumeration of the zip file entries\n-     * excluding internal JAR mechanism entries and including\n-     * signed entries missing from the ZIP directory.\n-     *\/\n-    Enumeration<JarEntry> entries2() {\n-        ensureInitialization();\n-        if (jv != null) {\n-            return jv.entries2(this, JUZFA.entries(JarFile.this));\n-        }\n-\n-        \/\/ screen out entries which are never signed\n-        final var unfilteredEntries = JUZFA.entries(JarFile.this);\n-\n-        return new Enumeration<>() {\n-\n-            JarEntry entry;\n-\n-            public boolean hasMoreElements() {\n-                if (entry != null) {\n-                    return true;\n-                }\n-                while (unfilteredEntries.hasMoreElements()) {\n-                    JarEntry je = unfilteredEntries.nextElement();\n-                    if (JarVerifier.isSigningRelated(je.getName())) {\n-                        continue;\n-                    }\n-                    entry = je;\n-                    return true;\n-                }\n-                return false;\n-            }\n-\n-            public JarEntry nextElement() {\n-                if (hasMoreElements()) {\n-                    JarEntry je = entry;\n-                    entry = null;\n-                    return newEntry(je);\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n-\n-    private Enumeration<String> unsignedEntryNames() {\n-        final Enumeration<JarEntry> entries = entries();\n-        return new Enumeration<>() {\n-\n-            String name;\n-\n-            \/*\n-             * Grab entries from ZIP directory but screen out\n-             * metadata.\n-             *\/\n-            public boolean hasMoreElements() {\n-                if (name != null) {\n-                    return true;\n-                }\n-                while (entries.hasMoreElements()) {\n-                    String value;\n-                    ZipEntry e = entries.nextElement();\n-                    value = e.getName();\n-                    if (e.isDirectory() || JarVerifier.isSigningRelated(value)) {\n-                        continue;\n-                    }\n-                    name = value;\n-                    return true;\n-                }\n-                return false;\n-            }\n-\n-            public String nextElement() {\n-                if (hasMoreElements()) {\n-                    String value = name;\n-                    name = null;\n-                    return value;\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n-\n-    List<Object> getManifestDigests() {\n-        ensureInitialization();\n-        if (jv != null) {\n-            return jv.getManifestDigests();\n-        }\n-        return new ArrayList<>();\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":0,"deletions":120,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.zip.ZipEntry;\n@@ -487,7 +486,0 @@\n-\n-    private Map<URL, Map<CodeSigner[], CodeSource>> urlToCodeSourceMap = new HashMap<>();\n-    private Map<CodeSigner[], CodeSource> signerToCodeSource = new HashMap<>();\n-    private URL lastURL;\n-    private Map<CodeSigner[], CodeSource> lastURLMap;\n-    private CodeSigner[] emptySigner = new CodeSigner[0];\n-\n@@ -568,65 +560,0 @@\n-    private Map<String, CodeSigner[]> signerMap;\n-\n-    private synchronized Map<String, CodeSigner[]> signerMap() {\n-        if (signerMap == null) {\n-            \/*\n-             * Snapshot signer state so it doesn't change on us. We care\n-             * only about the asserted signatures. Verification of\n-             * signature validity happens via the JarEntry apis.\n-             *\/\n-            signerMap = HashMap.newHashMap(verifiedSigners.size() + sigFileSigners.size());\n-            signerMap.putAll(verifiedSigners);\n-            signerMap.putAll(sigFileSigners);\n-        }\n-        return signerMap;\n-    }\n-\n-    \/*\n-     * Like entries() but screens out internal JAR mechanism entries\n-     * and includes signed entries with no ZIP data.\n-     *\/\n-    public Enumeration<JarEntry> entries2(final JarFile jar, Enumeration<JarEntry> e) {\n-        final Map<String, CodeSigner[]> map = new HashMap<>();\n-        map.putAll(signerMap());\n-        final Enumeration<JarEntry> enum_ = e;\n-        return new Enumeration<>() {\n-\n-            Enumeration<String> signers = null;\n-            JarEntry entry;\n-\n-            public boolean hasMoreElements() {\n-                if (entry != null) {\n-                    return true;\n-                }\n-                while (enum_.hasMoreElements()) {\n-                    JarEntry je = enum_.nextElement();\n-                    if (JarVerifier.isSigningRelated(je.getName())) {\n-                        continue;\n-                    }\n-                    entry = jar.newEntry(je);\n-                    return true;\n-                }\n-                if (signers == null) {\n-                    signers = Collections.enumeration(map.keySet());\n-                }\n-                while (signers.hasMoreElements()) {\n-                    String name = signers.nextElement();\n-                    entry = jar.newEntry(name);\n-                    return true;\n-                }\n-\n-                \/\/ Any map entries left?\n-                return false;\n-            }\n-\n-            public JarEntry nextElement() {\n-                if (hasMoreElements()) {\n-                    JarEntry je = entry;\n-                    map.remove(je.getName());\n-                    entry = null;\n-                    return je;\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n@@ -639,56 +566,0 @@\n-    private Enumeration<String> unsignedEntryNames(JarFile jar) {\n-        final Map<String, CodeSigner[]> map = signerMap();\n-        final Enumeration<JarEntry> entries = jar.entries();\n-        return new Enumeration<>() {\n-\n-            String name;\n-\n-            \/*\n-             * Grab entries from ZIP directory but screen out\n-             * metadata.\n-             *\/\n-            public boolean hasMoreElements() {\n-                if (name != null) {\n-                    return true;\n-                }\n-                while (entries.hasMoreElements()) {\n-                    String value;\n-                    ZipEntry e = entries.nextElement();\n-                    value = e.getName();\n-                    if (e.isDirectory() || isSigningRelated(value)) {\n-                        continue;\n-                    }\n-                    if (map.get(value) == null) {\n-                        name = value;\n-                        return true;\n-                    }\n-                }\n-                return false;\n-            }\n-\n-            public String nextElement() {\n-                if (hasMoreElements()) {\n-                    String value = name;\n-                    name = null;\n-                    return value;\n-                }\n-                throw new NoSuchElementException();\n-            }\n-        };\n-    }\n-    private List<CodeSigner[]> jarCodeSigners;\n-\n-    private synchronized List<CodeSigner[]> getJarCodeSigners() {\n-        if (jarCodeSigners == null) {\n-            HashSet<CodeSigner[]> set = new HashSet<>();\n-            set.addAll(signerMap().values());\n-            jarCodeSigners = new ArrayList<>();\n-            jarCodeSigners.addAll(set);\n-        }\n-        return jarCodeSigners;\n-    }\n-\n-    public synchronized List<Object> getManifestDigests() {\n-        return Collections.unmodifiableList(manifestDigests);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"modified"}]}