{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.net.URL;\n@@ -32,1 +31,0 @@\n-import java.security.CodeSource;\n@@ -93,3 +91,0 @@\n-    \/** makes code source singleton instances unique to us *\/\n-    private Object csdomain = new Object();\n-\n@@ -485,85 +480,0 @@\n-    \/\/ Extended JavaUtilJarAccess CodeSource API Support\n-    \/*\n-     * Instances of this class hold uncopied references to internal\n-     * signing data that can be compared by object reference identity.\n-     *\/\n-    private static class VerifierCodeSource extends CodeSource {\n-        @java.io.Serial\n-        private static final long serialVersionUID = -9047366145967768825L;\n-\n-        URL vlocation;\n-        CodeSigner[] vsigners;\n-        Certificate[] vcerts;\n-        @SuppressWarnings(\"serial\") \/\/ Not statically typed as Serializable\n-        Object csdomain;\n-\n-        VerifierCodeSource(Object csdomain, URL location, CodeSigner[] signers) {\n-            super(location, signers);\n-            this.csdomain = csdomain;\n-            vlocation = location;\n-            vsigners = signers; \/\/ from signerCache\n-        }\n-\n-        VerifierCodeSource(Object csdomain, URL location, Certificate[] certs) {\n-            super(location, certs);\n-            this.csdomain = csdomain;\n-            vlocation = location;\n-            vcerts = certs; \/\/ from signerCache\n-        }\n-\n-        \/*\n-         * All VerifierCodeSource instances are constructed based on\n-         * singleton signerCache or signerCacheCert entries for each unique signer.\n-         * No CodeSigner<->Certificate[] conversion is required.\n-         * We use these assumptions to optimize equality comparisons.\n-         *\/\n-        public boolean equals(Object obj) {\n-            if (obj == this) {\n-                return true;\n-            }\n-            if (obj instanceof VerifierCodeSource that) {\n-\n-                \/*\n-                 * Only compare against other per-signer singletons constructed\n-                 * on behalf of the same JarFile instance. Otherwise, compare\n-                 * things the slower way.\n-                 *\/\n-                if (isSameDomain(that.csdomain)) {\n-                    if (that.vsigners != this.vsigners\n-                            || that.vcerts != this.vcerts) {\n-                        return false;\n-                    }\n-                    if (that.vlocation != null) {\n-                        return that.vlocation.equals(this.vlocation);\n-                    } else if (this.vlocation != null) {\n-                        return this.vlocation.equals(that.vlocation);\n-                    } else { \/\/ both null\n-                        return true;\n-                    }\n-                }\n-            }\n-            return super.equals(obj);\n-        }\n-\n-        boolean isSameDomain(Object csdomain) {\n-            return this.csdomain == csdomain;\n-        }\n-\n-        private CodeSigner[] getPrivateSigners() {\n-            return vsigners;\n-        }\n-\n-        private Certificate[] getPrivateCertificates() {\n-            return vcerts;\n-        }\n-    }\n-\n-    \/\/ true if file is part of the signature mechanism itself\n-    static boolean isSigningRelated(String name) {\n-        return SignatureFileVerifier.isSigningRelated(name);\n-    }\n-\n-    static CodeSource getUnsignedCS(URL url) {\n-        return new VerifierCodeSource(null, url, (Certificate[]) null);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JavaUtilJarAccessImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaUtilJarAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}