{"files":[{"patch":"@@ -101,1 +101,0 @@\n-import jdk.internal.vm.annotation.Stable;\n@@ -139,3 +138,0 @@\n-    @Stable\n-    static final int[] DIGITS_K = new int[1000];\n-\n@@ -172,8 +168,0 @@\n-\n-        for (int i = 0; i < 1000; i++) {\n-            int c0 = i < 10 ? 2 : i < 100 ? 1 : 0;\n-            int c1 = (i \/ 100) + '0';\n-            int c2 = ((i \/ 10) % 10) + '0';\n-            int c3 = i % 10 + '0';\n-            DIGITS_K[i] = c0 + (c1 << 8) + (c2 << 16) + (c3 << 24);\n-        }\n@@ -1707,1 +1695,5 @@\n-        ByteArrayLittleEndian.setInt(\n+\n+        int div2_k = div2 \/ 100;\n+        buf[off] = '.';\n+        buf[off + 1] = (byte) ('0' + div2_k);\n+        ByteArrayLittleEndian.setShort(\n@@ -1709,2 +1701,2 @@\n-                off,\n-                DIGITS_K[div2] & 0xffffff00 | '.'\n+                off + 2,\n+                DecimalDigits.digitPair(div2 - div2_k * 100)\n@@ -1715,1 +1707,1 @@\n-        int v;\n+        int rem2;\n@@ -1717,1 +1709,1 @@\n-            int rem2 = div - div2 * 1000;\n+            rem2 = div - div2 * 1000;\n@@ -1721,2 +1713,0 @@\n-\n-            v = DIGITS_K[rem2];\n@@ -1724,1 +1714,1 @@\n-            v = DIGITS_K[div - div2 * 1000];\n+            rem2 = div - div2 * 1000;\n@@ -1727,0 +1717,2 @@\n+        int rem2_k = rem2 \/ 100;\n+        buf[off] = (byte) ('0' + rem2_k);\n@@ -1729,2 +1721,2 @@\n-                off,\n-                (short) (v >> 8)\n+                off + 1,\n+                DecimalDigits.digitPair(rem2 - rem2_k * 100)\n@@ -1732,1 +1724,1 @@\n-        off += 2;\n+        off += 3;\n@@ -1734,4 +1726,4 @@\n-        if (rem1 == 0) {\n-            buf[off] = (byte) (v >> 24);\n-        } else {\n-            ByteArrayLittleEndian.setInt(\n+        if (rem1 != 0) {\n+            int rem1_k = rem1 \/ 100;\n+            buf[off] = (byte) ('0' + rem1_k);\n+            ByteArrayLittleEndian.setShort(\n@@ -1739,2 +1731,2 @@\n-                    off,\n-                    DIGITS_K[rem1] & 0xffffff00 | (v >> 24)\n+                    off + 1,\n+                    DecimalDigits.digitPair(rem1 - rem1_k * 100)\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":21,"deletions":29,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -73,15 +73,0 @@\n-    @Stable\n-    private static final int[] DIGITS_K;\n-\n-    static {\n-        int[] digits_k = new int[1000];\n-        for (int i = 0; i < 1000; i++) {\n-            int c0 = i < 10 ? 2 : i < 100 ? 1 : 0;\n-            int c1 = (i \/ 100) + '0';\n-            int c2 = ((i \/ 10) % 10) + '0';\n-            int c3 = i % 10 + '0';\n-            digits_k[i] = c0 + (c1 << 8) + (c2 << 16) + (c3 << 24);\n-        }\n-        DIGITS_K = digits_k;\n-    }\n-\n@@ -176,9 +161,0 @@\n-    \/**\n-     * For values from 0 to 999 return a short encoding a triple of ASCII-encoded digit characters in little-endian\n-     * @param i value to convert\n-     * @return a short encoding a triple of ASCII-encoded digit characters\n-     *\/\n-    public static int digitTriple(int i) {\n-        return DIGITS_K[i];\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/DecimalDigits.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"}]}