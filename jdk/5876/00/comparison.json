{"files":[{"patch":"@@ -108,1 +108,2 @@\n-    if (cfs == NULL || strncmp(cfs->source(), \"file:\", 5) != 0) {\n+    if (cfs == NULL || (strncmp(cfs->source(), \"file:\", 5) != 0 &&\n+                        strncmp(cfs->source(), \"jar:\", 4) != 0)) {\n@@ -158,0 +159,1 @@\n+    if (strncmp(cfs->source(), \"file:\", 5) == 0) {\n@@ -159,2 +161,2 @@\n-    \/\/ \"file:\/C:\/dir\/foo.jar\" -> \"C:\/dir\/foo.jar\"\n-    stream->print(\" source: %s\", cfs->source() + 6);\n+      \/\/ \"file:\/C:\/dir\/foo.jar\" -> \"C:\/dir\/foo.jar\"\n+      stream->print(\" source: %s\", cfs->source() + 6);\n@@ -162,2 +164,2 @@\n-    \/\/ \"file:\/dir\/foo.jar\" -> \"\/dir\/foo.jar\"\n-    stream->print(\" source: %s\", cfs->source() + 5);\n+      \/\/ \"file:\/dir\/foo.jar\" -> \"\/dir\/foo.jar\"\n+      stream->print(\" source: %s\", cfs->source() + 5);\n@@ -165,0 +167,3 @@\n+    } else {\n+      stream->print(\" source: %s\", cfs->source());\n+    }\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-#include \"classfile\/classFileStream.hpp\"\n-#include \"classfile\/classLoader.inline.hpp\"\n-#include \"classfile\/classLoaderExt.hpp\"\n@@ -35,1 +32,0 @@\n-#include \"memory\/resourceArea.hpp\"\n@@ -37,1 +33,0 @@\n-#include \"runtime\/handles.hpp\"\n@@ -54,2 +49,7 @@\n-  Symbol* path_symbol = SymbolTable::new_symbol(path);\n-  Handle url_classloader = get_url_classloader(path_symbol, CHECK_NULL);\n+  Symbol* jar_util_name  = vmSymbols::jdk_internal_misc_UberJarUtils();\n+  Klass*  jar_util_klass = SystemDictionary::resolve_or_null(jar_util_name, THREAD);\n+  guarantee(jar_util_klass != NULL, \"jdk\/internal\/misc\/UberJarUtils must exist!\");\n+\n+  Symbol* method = vmSymbols::loadClass_name();\n+  Symbol* signature = vmSymbols::string_string_class_signature();\n+  Handle path_string = java_lang_String::create_from_str(path, CHECK_NULL);\n@@ -60,1 +60,1 @@\n-  args.set_receiver(url_classloader);\n+  args.push_oop(path_string);\n@@ -62,7 +62,2 @@\n-  args.push_int(JNI_FALSE);\n-  JavaCalls::call_virtual(&result,\n-                          vmClasses::URLClassLoader_klass(),\n-                          vmSymbols::loadClass_name(),\n-                          vmSymbols::string_boolean_class_signature(),\n-                          &args,\n-                          CHECK_NULL);\n+  JavaCalls::call_static(&result, jar_util_klass, method, signature, &args, CHECK_NULL);\n+\n@@ -73,43 +68,0 @@\n-\n-class URLClassLoaderTable : public ResourceHashtable<\n-  Symbol*, Handle,\n-  137, \/\/ prime number\n-  ResourceObj::C_HEAP> {};\n-\n-static URLClassLoaderTable* _url_classloader_table = NULL;\n-\n-Handle UnregisteredClasses::create_url_classloader(Symbol* path, TRAPS) {\n-  ResourceMark rm(THREAD);\n-  JavaValue result(T_OBJECT);\n-  Handle path_string = java_lang_String::create_from_str(path->as_C_string(), CHECK_NH);\n-  JavaCalls::call_static(&result,\n-                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n-                         vmSymbols::toFileURL_name(),\n-                         vmSymbols::toFileURL_signature(),\n-                         path_string, CHECK_NH);\n-  assert(result.get_type() == T_OBJECT, \"just checking\");\n-  oop url_h = result.get_oop();\n-  objArrayHandle urls = oopFactory::new_objArray_handle(vmClasses::URL_klass(), 1, CHECK_NH);\n-  urls->obj_at_put(0, url_h);\n-\n-  Handle url_classloader = JavaCalls::construct_new_instance(\n-                             vmClasses::URLClassLoader_klass(),\n-                             vmSymbols::url_array_classloader_void_signature(),\n-                             urls, Handle(), CHECK_NH);\n-  return url_classloader;\n-}\n-\n-Handle UnregisteredClasses::get_url_classloader(Symbol* path, TRAPS) {\n-  if (_url_classloader_table == NULL) {\n-    _url_classloader_table = new (ResourceObj::C_HEAP, mtClass)URLClassLoaderTable();\n-  }\n-  Handle* url_classloader_ptr = _url_classloader_table->get(path);\n-  if (url_classloader_ptr != NULL) {\n-    return *url_classloader_ptr;\n-  } else {\n-    Handle url_classloader = create_url_classloader(path, CHECK_NH);\n-    _url_classloader_table->put(path, url_classloader);\n-    path->increment_refcount();\n-    return url_classloader;\n-  }\n-}\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":10,"deletions":58,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/handles.hpp\"\n+#include \"oops\/instanceKlass.hpp\"\n@@ -32,5 +32,1 @@\n-  static InstanceKlass* load_class(Symbol* h_name, const char* path, TRAPS);\n-\n-private:\n-  static Handle create_url_classloader(Symbol* path, TRAPS);\n-  static Handle get_url_classloader(Symbol* path, TRAPS);\n+  static InstanceKlass* load_class(Symbol* name, const char* path, TRAPS);\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-  do_klass(URLClassLoader_klass,                        java_net_URLClassLoader                               ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -556,0 +556,1 @@\n+  template(string_string_class_signature,             \"(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/Class;\")  \\\n@@ -709,0 +710,1 @@\n+  template(jdk_internal_misc_UberJarUtils,                  \"jdk\/internal\/misc\/UberJarUtils\")                     \\\n@@ -714,1 +716,0 @@\n-  template(url_array_classloader_void_signature,            \"([Ljava\/net\/URL;Ljava\/lang\/ClassLoader;)V\")          \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -227,2 +227,1 @@\n-    @Deprecated\n-    private static URL toFileURL(String s) {\n+    public static URL toFileURL(String s) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package jdk.internal.misc;\n+\n+import java.io.IOException;\n+import java.security.ProtectionDomain;\n+\n+\/**\n+ * This abstract class is a super class of EmbeddedJarReader and SimpleJarReader.\n+ *\/\n+abstract class AbstractJarReader extends ClassLoader {\n+    Class<?> loadClass(String name, ProtectionDomain pd) throws ClassNotFoundException {\n+        Class<?> clazz = findLoadedClass(name);\n+        if (clazz == null) {\n+            try {\n+                String entryName = name.replace('.', '\/') + \".class\";\n+                byte[] bytes = getEntry(entryName);\n+                clazz = super.defineClass(name, bytes, 0, bytes.length, pd);\n+            } catch (Exception e) {\n+                clazz = super.loadClass(name, false);\n+            }\n+        }\n+        return clazz;\n+    }\n+\n+    abstract byte[] getEntry(String name) throws IOException, ClassNotFoundException;\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/AbstractJarReader.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.misc;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import java.security.CodeSigner;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+\/**\n+ * This class is for retrieving the class bytes from the bytes of a jar file.\n+ * It delegates to AbstractJarReader to load the class using the class bytes.\n+ *\/\n+class EmbeddedJarReader extends AbstractJarReader {\n+    final static int BUFFER_SIZE = 4096;\n+    String jarPath;\n+    ZipInputStream zins;\n+    HashMap<String, byte[]> entryCache;\n+\n+    protected EmbeddedJarReader(String jarPath, byte[] jarBytes) {\n+        this.jarPath = jarPath;\n+        this.zins = new ZipInputStream(new ByteArrayInputStream(jarBytes));\n+        this.entryCache =  new HashMap<String, byte[]>();\n+    }\n+\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        ProtectionDomain pd = null;\n+        try {\n+            URL u = new URL(\"file:\" + jarPath);\n+            CodeSource cs = new CodeSource(u, (CodeSigner[])null);\n+            pd = new ProtectionDomain(cs, null);\n+        } catch (MalformedURLException mue) {\n+            \/\/ ignore MalformedURLException. The class can be loaded with null pd.\n+            \/\/ The pd is for showing the \"source:\" in the class loading trace.\n+        }\n+        return super.loadClass(name, pd);\n+    }\n+\n+    @Override\n+    byte[] getEntry(String name) throws IOException, ClassNotFoundException {\n+        boolean found = false;\n+        byte[] bytes = entryCache.get(name);\n+        if (bytes != null) {\n+            return bytes;\n+        } else {\n+            ZipEntry ze = null;\n+            while ((ze = zins.getNextEntry()) != null) {\n+                if (!ze.isDirectory()) {\n+                    bytes = readEntry(zins, ze);\n+                    String entryName = ze.getName();\n+                    entryCache.put(entryName, bytes);\n+                    if (entryName.equals(name)) {\n+                        found = true;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (found) {\n+            return bytes;\n+        } else {\n+            throw new ClassNotFoundException(name);\n+        }\n+    }\n+\n+    private static byte[] readEntry(InputStream in, ZipEntry entry) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        long size = entry.getSize();\n+        int nRead;\n+        byte[] data = new byte[BUFFER_SIZE];\n+        while ((nRead = in.read(data, 0, data.length)) != -1) {\n+            baos.write(data, 0, nRead);\n+        }\n+        baos.close();\n+        return baos.toByteArray();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/EmbeddedJarReader.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.misc;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.HashMap;\n+import java.security.CodeSigner;\n+import java.security.CodeSource;\n+import java.security.ProtectionDomain;\n+\n+\/**\n+ * This class makes use of the URLClassLoader to retrieve the bytes of a\n+ * class or jar file.\n+ * It delegates to AbstractJarReader to load the class using the class bytes.\n+ *\/\n+class SimpleJarReader extends AbstractJarReader {\n+    URLClassLoader loader;\n+    URL url;\n+\n+    protected SimpleJarReader(URL url) throws MalformedURLException {\n+        loader = new URLClassLoader(new URL[]{url});\n+        this.url = url;\n+    }\n+\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        CodeSource cs = new CodeSource(url, (CodeSigner[])null);\n+        ProtectionDomain pd = new ProtectionDomain(cs, null);\n+        return super.loadClass(name, pd);\n+    }\n+\n+    @Override\n+    byte[] getEntry(String name) throws IOException {\n+        byte[] bytes = null;\n+        if (loader.findResource(name) != null) {\n+            InputStream is = loader.getResourceAsStream(name);\n+            bytes = new byte[is.available()];\n+            is.read(bytes);\n+            return bytes;\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/SimpleJarReader.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package jdk.internal.misc;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.IllegalArgumentException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.util.WeakHashMap;\n+import jdk.internal.loader.ClassLoaders;\n+\n+\/**\n+ * This class is being used by VM during CDS static dump time for loading classes\n+ * by custom loaders.\n+ * It supports loading classes from source in the following format:\n+ * 1. directory path, e.g. \/some\/dir\n+ * 2. jar file, e.g. \/some\/file.jar\n+ * 3. jar file with jar protocol, e.g. jar:file:\/some\/file.jar!\/\n+ * 4. jar protocol with embedded jar, e.g. jar:file:\/some\/file.jar!\/another\/file2.jar!\/\n+ * 5. jar protocol with embedded directory, e.g. jar:file:\/some\/file.jar!\/another\/dir!\/\n+ *\/\n+public class UberJarUtils {\n+    final static String JAR_NAME_SEPARATOR = \"!\/\";\n+    final static String JAR_SUFFIX = \".jar\";\n+    final static String CLASS_SUFFIX = \".class\";\n+    final static String JAR_PROTOCOL = \"jar:file:\";\n+\n+    \/**\n+     * Load a class based on the source and class name.\n+     * This is being called from VM during CDS static dump time.\n+     *\/\n+    public static Class<?> loadClass(String source, String className)\n+        throws IOException, ClassNotFoundException {\n+        return getReader(source).loadClass(className);\n+    }\n+\n+    \/**\n+     * Check if the source contains an embedded jar file name,\n+     * e.g. jar:file:\/some\/file.jar!\/another\/file2.jar!\/\n+     *\/\n+    static boolean isEmbeddedJar(String source) {\n+        if (source.indexOf(JAR_PROTOCOL) < 0) {\n+            return false;\n+        }\n+        if (source.indexOf(JAR_NAME_SEPARATOR) < 0) {\n+            return false;\n+        }\n+        if (source.endsWith(CLASS_SUFFIX + JAR_NAME_SEPARATOR)) {\n+            return false;\n+        }\n+        if (source.length() - JAR_NAME_SEPARATOR.length() != source.lastIndexOf(JAR_NAME_SEPARATOR)) {\n+            return false;\n+        }\n+        if (isSimpleJarURL(source) || isJarProtocolWithDirectory(source)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    static WeakHashMap<String, AbstractJarReader> readerCache =\n+        new WeakHashMap<String, AbstractJarReader>();\n+\n+    \/**\n+      * Create an appropriate jar reader based on the source.\n+      * The jar reader could be an EmbeddedJarReader or a SimpleJarReader.\n+      *\/\n+    static AbstractJarReader getReader(String source)\n+        throws IOException, ClassNotFoundException, IllegalArgumentException, MalformedURLException {\n+        AbstractJarReader r = readerCache.get(source);\n+        if (r != null) {\n+            \/\/ this means the source has already been checked, no need to check it again\n+            return r;\n+        }\n+        if (isEmbeddedJar(source)) {\n+            \/\/ assume source = \"jar:file:\/some\/path\/outer.jar!\/dir\/inner.jar!\/\"\n+            \/\/ String parentPath = \"jar:file:\/some\/path\/outer.jar!\/\";\n+            \/\/ String subPath = \"dir\/inner.jar\";\n+            String[] urls = source.split(\"!\");\n+            int endIndex = source.indexOf(urls[urls.length - 2]);\n+            String parentPath = source.substring(0, endIndex + 1);\n+            String subPath = urls[urls.length - 2].substring(1);\n+            AbstractJarReader parentReader = getReader(parentPath);\n+            byte[] jarBytes = parentReader.getEntry(subPath);\n+\n+            r = new EmbeddedJarReader(subPath, jarBytes);\n+        } else {\n+            String u = source;\n+            URL url;\n+            if (isJarProtocolWithDirectory(source)) {\n+                \/\/ Remove the last '!' and end the url with '\/'.\n+                \/\/ e.g source = \"jar:file:test.jar!\/a\/dir!\/\n+                \/\/     url = \"jar:file:test.jar!\/a\/dir\/\n+                u = source.substring(0, source.lastIndexOf('!')) + \"\/\";\n+                url = new URL(u);\n+            } else if (isSimpleJarURL(source)) {\n+                url = new URL(u);\n+            } else {\n+                File f = new File(source);\n+                if (f.exists()) {\n+                    \/\/ The source of CDS unregister classes can be either a dir or a jar file.\n+                    url = ClassLoaders.toFileURL(source);\n+                } else {\n+                    throw new IllegalArgumentException(\"unsupported source: \" + source);\n+                }\n+            }\n+            r = new SimpleJarReader(url);\n+        }\n+        readerCache.put(source, r);\n+        return r;\n+    }\n+\n+    \/**\n+      * Check if the source is a simple jar URL.\n+      * e.g. jar:file:\/some\/file.jar!\/\n+      *\/\n+    static boolean isSimpleJarURL(final String source) {\n+        if (!source.endsWith(JAR_SUFFIX + JAR_NAME_SEPARATOR)) {\n+            return false;\n+        }\n+        int firstIndex = source.indexOf(JAR_NAME_SEPARATOR);\n+        return firstIndex >= 0 && firstIndex == source.lastIndexOf(JAR_NAME_SEPARATOR);\n+    }\n+\n+    \/**\n+      * Check if the source is a directory within a jar protocol.\n+      * e.g. jar:file:\/some\/file.jar!\/another\/dir!\/\n+      *\/\n+    static boolean isJarProtocolWithDirectory(final String source) {\n+        return source.startsWith(JAR_PROTOCOL) &&\n+               source.endsWith(JAR_NAME_SEPARATOR) &&\n+               !source.endsWith(JAR_SUFFIX + JAR_NAME_SEPARATOR) &&\n+               !source.endsWith(CLASS_SUFFIX + JAR_NAME_SEPARATOR);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/UberJarUtils.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -102,1 +102,0 @@\n-\n@@ -105,0 +104,5 @@\n+        return buildWithManifest(jarName, manifest, null, jarClassesDir, classNames);\n+    }\n+\n+    public static String buildWithManifest(String jarName, String manifest,\n+        String embeddedJar, String jarClassesDir, String ...classNames) throws Exception {\n@@ -111,0 +115,3 @@\n+        if (embeddedJar != null) {\n+            args.add(embeddedJar);\n+        }\n@@ -117,1 +124,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary Test handling of uber jar.\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/C2.java\n+ * @run driver UberJarTest\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class UberJarTest {\n+    static String subDir = null; \/\/ set in buildUberJar\n+    static final String subDirName = \"subDir\";\n+    static final String embeddedJarName = \"x2.jar\";\n+\n+    public static void main(String[] args) throws Exception {\n+        JarBuilder.build(\"x2\", \"C2\");\n+        String embeddedJar = TestCommon.getTestJar(embeddedJarName);\n+        buildUberJar(\"uber_jar_test\", \"MainClass.mf\", embeddedJarName, \"C1\", \"SimpleHello\");\n+        String uberJar = ClassFileInstaller.getJarPath(\"uber_jar_test.jar\");\n+\n+        \/\/ test various source format with jar protocol\n+        String[] classlist = new String[] {\n+            \"java\/lang\/Object id: 1\",\n+            \"C1 id: 2 super: 1 source: jar:file:\" + uberJar + \"!\/\",\n+            \"C2 id: 3 super: 1 source: jar:file:\" + uberJar + \"!\/\" + embeddedJarName + \"!\/\",\n+            \"SimpleHello id: 4 super: 1 source: jar:file:\" + uberJar + \"!\/\" + subDirName + \"!\/\"\n+        };\n+\n+        testPositive(uberJar, classlist);\n+\n+        \/\/ test directory path in \"source:\"\n+        classlist[3] = \"SimpleHello id: 4 super: 1 source: \" + subDir;\n+\n+        testPositive(uberJar, classlist);\n+\n+        \/\/ test various unsupported source format\n+        String[] badSource = new String[] {\n+            \"C1 id: 2 super: 1 source: file:\" + uberJar,\n+            \"C1 id: 2 super: 1 source: jar:file:\" + uberJar,\n+            \"C1 id: 2 super: 1 source: jar:file:\" + uberJar + \"\/\",\n+            \"C1 id: 2 super: 1 source: jar:file:\" + uberJar + \"!\/\" + subDirName + \"\/\",\n+            \"C1 id: 2 super: 1 source: jar:file:\" + uberJar + \"!\/C1.class\/\"\n+        };\n+\n+        testNegative(uberJar, classlist, badSource);\n+    }\n+\n+    private static void testPositive(String uberJar, String[] classlist) throws Exception {\n+\n+        String addExports = \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\";\n+\n+        OutputAnalyzer output;\n+        output = TestCommon.testDump(null, classlist, \"-Xlog:class+load\", \"-jar\", uberJar);\n+\n+        output = TestCommon.exec(null, \"-Xlog:class+load\", addExports, \"-jar\", uberJar, uberJar);\n+        TestCommon.checkExecReturn(output, 0, true \/* should contain *\/,\n+                                   \"C2 source: shared objects file\",\n+                                   \"C2: here I am\",\n+                                   \"SimpleHello source: shared objects file\");\n+    }\n+\n+    private static void testNegative(String uberJar, String[] classlist, String[] badSource) throws Exception {\n+        for (String entry : badSource) {\n+            classlist[1] = entry;\n+            OutputAnalyzer output = TestCommon.testDump(null, classlist, \"-Xlog:class+load\", \"-jar\", uberJar);\n+            String source = entry.substring(entry.indexOf(\"source:\") + 8);\n+            TestCommon.checkExecReturn(output, 0, true \/* should contain *\/,\n+                                       \"java.lang.IllegalArgumentException: unsupported source: \" + source,\n+                                       \"Preload Warning: Cannot find C1\");\n+        }\n+    }\n+\n+    private static void buildUberJar(String jarName, String manifest, String embeddedJar,\n+                                     String mainClassName, String className) throws Exception {\n+        String jarClassesDir = CDSTestUtils.getOutputDir() + File.separator + jarName + \"_classes\";\n+        try { Files.createDirectory(Paths.get(jarClassesDir)); } catch (FileAlreadyExistsException e) { }\n+\n+        JarBuilder.compile(jarClassesDir, System.getProperty(\"test.src\") + File.separator +\n+        \"test-classes\" + File.separator + mainClassName + \".java\");\n+\n+        String dirName = subDirName;\n+        subDir = jarClassesDir + File.separator + dirName;\n+        try { Files.createDirectory(Paths.get(subDir)); } catch (FileAlreadyExistsException e) { }\n+\n+        JarBuilder.compile(subDir, System.getProperty(\"test.src\") + File.separator +\n+        \"test-classes\" + File.separator + className + \".java\");\n+\n+        String[] testClassNames = {mainClassName, dirName + File.separator + className};\n+\n+        JarBuilder.buildWithManifest(jarName, manifest, embeddedJar, jarClassesDir, testClassNames);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/UberJarTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+import java.lang.reflect.*;\n+\n+\/**\n+ * Helper class used by the UberJarTest for loading various classes using\n+ * the UberJarUtils.\n+ *\/\n+public class C1 {\n+    public static void main(String args[]) throws Throwable {\n+        String source = \"none\";\n+        if (args.length == 1) {\n+            source = args[0];\n+        }\n+\n+        \/\/ Find the UberJarUtils class and its loadClass method.\n+        Class utilCls = Class.forName(\"jdk.internal.misc.UberJarUtils\");\n+        Method utilMth = utilCls.getMethod(\"loadClass\", String.class, String.class);\n+\n+        \/\/ Call UberJarUtils.loadClass reflectively to load C2.\n+        System.out.println(\"C1: getting C2\");\n+        String[] inputArgs = {\"jar:file:\" + source + \"!\/x2.jar!\/\", \"C2\"};\n+        Object o = utilMth.invoke(null, inputArgs);\n+        Class cls = (Class)o;\n+\n+        \/\/ Invoke C2's main reflectively.\n+        System.out.println(\"C1: invoking C2\");\n+        Method mth = cls.getMethod(\"main\",new Class[]{String[].class});\n+        mth.invoke(null,new Object[]{args});\n+\n+        \/\/ Call UberJarUtils.loadClass reflectively to load SimpleHello.\n+        System.out.println(\"C1: getting SimpleHello\");\n+        String[] inputArgs2 = {\"jar:file:\" + source + \"!\/subDir!\/\", \"SimpleHello\"};\n+        o = utilMth.invoke(null, inputArgs2);\n+        cls = (Class)o;\n+\n+        \/\/ Invoke SimpleHello's main reflectively.\n+        System.out.println(\"C1: invoking SimpleHello\");\n+        mth = cls.getMethod(\"main\",new Class[]{String[].class});\n+        mth.invoke(null,new Object[]{args});\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/C1.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class C2 {\n+    public static void main(String args[]) throws Throwable {\n+        System.out.println(\"C2: here I am\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/C2.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+Main-Class: C1\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/MainClass.mf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"}]}