{"files":[{"patch":"@@ -57,1 +57,3 @@\n-            throw new RuntimeException(\"Catched ThreadDeath in run() instead of internalRun2() or internalRun1(). receivedThreadDeathinInternal1=\" + receivedThreadDeathinInternal1 + \"; receivedThreadDeathinInternal2=\" + receivedThreadDeathinInternal2);\n+            throw new RuntimeException(\"Catched ThreadDeath in run() instead of internalRun2() or internalRun1().\\n\"\n+                    + \"receivedThreadDeathinInternal1=\" + receivedThreadDeathinInternal1\n+                    + \"; receivedThreadDeathinInternal2=\" + receivedThreadDeathinInternal2);\n@@ -63,1 +65,3 @@\n-            throw new RuntimeException(\"Didn't catched ThreadDeath in internalRun2() nor in internalRun1(). receivedThreadDeathinInternal1=\" + receivedThreadDeathinInternal1 + \"; receivedThreadDeathinInternal2=\" + receivedThreadDeathinInternal2);\n+            throw new RuntimeException(\"Didn't catched ThreadDeath in internalRun2() nor in internalRun1().\\n\"\n+                    + \"receivedThreadDeathinInternal1=\" + receivedThreadDeathinInternal1\n+                    + \"; receivedThreadDeathinInternal2=\" + receivedThreadDeathinInternal2);\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        while (timer.isAlive())\n+        while (timer.isAlive()) {\n@@ -84,2 +84,1 @@\n-        \/\/      if (tester.isAlive())\n-\/\/          return 2;\n+        }\n@@ -112,4 +111,0 @@\n-\/\/          } catch (StackOverflowError e) {\n-\/\/\n-\/\/ OutOfMemoryError is also eligible to indicate stack overflow:\n-\/\/\n@@ -120,9 +115,0 @@\n-\n-\/***\n- *** Originally, I supposed that VM crashes because of unexpected\n- *** native stack overflow (println() invokes native method).\n- *** However, I found that HS 1.3 and HS 2.0 crash even on\n- *** invocation of Java (not native) method.\n- ***\n- out.println(\"StackOverflowError, depth=\" + depth);\n- ***\/\n@@ -144,11 +130,8 @@\n-            while (System.currentTimeMillis() - started < timeout)\n-                ; \/***\n-             *** The test hangs on JDK 1.2.2 Classic VM if sleep() is invoked.\n-             ***\n-             try {\n-             this.sleep(1000);\n-             } catch (InterruptedException e) {\n-             e.printStackTrace(tester.out);\n-             return;\n-             };\n-             ***\/\n+            while (System.currentTimeMillis() - started < timeout) {\n+                try {\n+                    this.sleep(1000);\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace(tester.out);\n+                    return;\n+                };\n+            }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack002.java","additions":10,"deletions":27,"binary":false,"changes":37,"status":"modified"}]}