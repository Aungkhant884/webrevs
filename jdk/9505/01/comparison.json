{"files":[{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm AsyncExceptionOnMonitorEnter 0\n+ * @run main\/othervm\/native AsyncExceptionOnMonitorEnter 0\n@@ -33,0 +33,2 @@\n+import jvmti.JVMTIUtils;\n+\n@@ -40,0 +42,1 @@\n+    public static native int stopThread(Thread thread);\n@@ -145,1 +148,1 @@\n-                    worker2.stop();\n+                    JVMTIUtils.stopThread(worker2);\n@@ -149,1 +152,1 @@\n-                        worker1.stop();\n+                        JVMTIUtils.stopThread(worker1);\n@@ -200,1 +203,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionOnMonitorEnter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\n+ * @library \/test\/lib \/test\/hotspot\/jtreg \/test\/hotspot\/jtreg\/testlibrary\n@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -Xcomp\n+ * @run main\/othervm -Xcomp\n@@ -38,0 +38,2 @@\n+import jvmti.JVMTIUtils;\n+\n@@ -58,1 +60,1 @@\n-            \/\/ ignore because we're testing Thread.stop() which can cause it\n+            \/\/ ignore because we're testing StopThread() which can cause it\n@@ -123,1 +125,1 @@\n-                    thread.stop();\n+                    JVMTIUtils.stopThread(thread);\n@@ -136,1 +138,1 @@\n-                \/\/ Ignore because we're testing Thread.stop() which can\n+                \/\/ Ignore because we're testing StopThread which can\n@@ -168,1 +170,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/libAsyncExceptionOnMonitorEnter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,2 +78,0 @@\n-        System.out.println(\"Calling stop ...\");\n-        t.stop();\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/terminatedThread\/TestTerminatedThread.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,2 +116,0 @@\n-                        tArray[1].stop(); \/\/ Once javaHeapEater is finished, stop the\n-                        \/\/ the cHeapEater thread.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC2\/mallocWithGC2.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,1 @@\n+        public volatile boolean stop;\n@@ -97,0 +98,1 @@\n+            stop = false;\n@@ -106,0 +108,3 @@\n+                if (stop) {\n+                    return;\n+                }\n@@ -150,1 +155,1 @@\n-            tester.stop();\n+            tester.stop = true;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack002.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}