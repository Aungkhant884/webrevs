{"files":[{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm\/native -agentlib:AsyncExceptionOnMonitorEnter AsyncExceptionOnMonitorEnter 0\n+ * @run main\/othervm\/native AsyncExceptionOnMonitorEnter 0\n@@ -33,0 +33,2 @@\n+import jvmti.JVMTIUtils;\n+\n@@ -146,1 +148,1 @@\n-                    stopThread(worker2);\n+                    JVMTIUtils.stopThread(worker2);\n@@ -150,1 +152,1 @@\n-                        stopThread(worker1);\n+                        JVMTIUtils.stopThread(worker1);\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionOnMonitorEnter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/test\/hotspot\/jtreg\n+ * @library \/test\/lib \/test\/hotspot\/jtreg \/test\/hotspot\/jtreg\/testlibrary\n@@ -31,1 +31,1 @@\n- * @run main\/othervm\/native -agentlib:AsyncException -Xcomp\n+ * @run main\/othervm -Xcomp\n@@ -38,0 +38,2 @@\n+import jvmti.JVMTIUtils;\n+\n@@ -51,2 +53,0 @@\n-    public static native int stopThread(Thread thread);\n-\n@@ -125,1 +125,1 @@\n-                    stopThread(thread);\n+                    JVMTIUtils.stopThread(thread);\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/AsyncExceptionTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <string.h>\n-#include \"jvmti.h\"\n-#include \"jvmti_common.h\"\n-\n-extern \"C\" {\n-\n-static jvmtiEnv* jvmti = NULL;\n-\n-JNIEXPORT void JNICALL\n-Java_AsyncExceptionTest_stopThread(JNIEnv *jni, jclass cls, jthread thread) {\n-  stop_thread(jvmti, jni, thread);\n-}\n-\n-JNIEXPORT jint JNICALL\n-Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n-  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n-    return JNI_ERR;\n-  }\n-  jvmtiCapabilities caps;\n-  memset(&caps, 0, sizeof (caps));\n-  caps.can_signal_thread = 1;\n-  jvmtiError err = jvmti->AddCapabilities(&caps);\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n-    return JNI_ERR;\n-  }\n-  return JNI_OK;\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/libAsyncException.cpp","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"jvmti_common.h\"\n@@ -33,6 +32,0 @@\n-JNIEXPORT void JNICALL\n-Java_AsyncExceptionOnMonitorEnter_stopThread(JNIEnv *jni, jclass cls, jthread thread) {\n-  stop_thread(jvmti, jni, thread);\n-}\n-\n-\n@@ -89,8 +82,0 @@\n-  jvmtiCapabilities caps;\n-  memset(&caps, 0, sizeof (caps));\n-  caps.can_signal_thread = 1;\n-  jvmtiError err = jvmti->AddCapabilities(&caps);\n-  if (err != JVMTI_ERROR_NONE) {\n-    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n-    return JNI_ERR;\n-  }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/libAsyncExceptionOnMonitorEnter.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -95,7 +95,0 @@\n-static void\n-assert_not_null(JNIEnv* jni, void* obj, const char* msg) {\n-  if (obj == NULL) {\n-    jni->FatalError(msg);\n-  }\n-}\n-\n@@ -836,1 +829,1 @@\n-static int\n+int\n@@ -844,21 +837,0 @@\n-static const char* THREAD_DEATH_CLASS_NAME = \"java\/lang\/ThreadDeath\";\n-static const char* THREAD_DEATH_CTOR_NAME = \"<init>\";\n-static const char* THREAD_DEATH_CTOR_SIGNATURE = \"()V\";\n-\n-static void\n-stop_thread(jvmtiEnv* jvmti, JNIEnv *jni, jthread thread) {\n-  jclass clz = jni->FindClass(THREAD_DEATH_CLASS_NAME);\n-  assert_not_null(jni, clz, \"stop_thread: FindClass returned NULL\");\n-  jmethodID ctor = jni->GetMethodID(clz, THREAD_DEATH_CTOR_NAME, THREAD_DEATH_CTOR_SIGNATURE);\n-  assert_not_null(jni, ctor, \"stop_thread: GetMethodID returned NULL\");\n-  jobject thread_death = jni->NewObject(clz, ctor);\n-  assert_not_null(jni, thread_death, \"stop_thread: NewObject returned NULL\");\n-\n-  jvmtiError err =  jvmti->StopThread(thread, thread_death);\n-  if (err == JVMTI_ERROR_THREAD_NOT_ALIVE) {\n-    LOG(\"JVMTI_ERROR_THREAD_NOT_ALIVE happened\");\n-    return;\n-  }\n-  check_jvmti_status(jni, err, \"Error during StopThread()\");\n-}\n-\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.h","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"}]}