{"files":[{"patch":"@@ -3314,1 +3314,7 @@\n-        return null_assert(obj);\n+        if (!objtp->maybe_null()) {\n+          builtin_throw(Deoptimization::Reason_class_check, makecon(TypeKlassPtr::make(objtp->klass())));\n+          return top();\n+        } else if (!too_many_traps_or_recompiles(Deoptimization::Reason_null_assert)) {\n+          return null_assert(obj);\n+        }\n+        break; \/\/ Fall through to full check\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,0 +86,3 @@\n+    if (stopped()) {\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,4 @@\n-  Node *res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass)) );\n+  Node* res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass)));\n+  if (stopped()) {\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257594\n+ * @summary Test that failing checkcast does not trigger repeated recompilation until cutoff is hit.\n+ * @requires vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:CompileCommand=dontinline,compiler.uncommontrap.TestNullAssertAtCheckCast::test*\n+ *                   -XX:CompileCommand=inline,compiler.uncommontrap.TestNullAssertAtCheckCast::cast\n+ *                   -XX:CompileCommand=inline,compiler.uncommontrap.TestNullAssertAtCheckCast::store\n+ *                   compiler.uncommontrap.TestNullAssertAtCheckCast\n+ *\/\n+\n+package compiler.uncommontrap;\n+\n+import sun.hotspot.WhiteBox;\n+\n+import java.lang.reflect.Method;\n+\n+public class TestNullAssertAtCheckCast {\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+    private static final int COMP_LEVEL_FULL_OPTIMIZATION = 4;\n+\n+    static Long cast(Object val) {\n+        return (Long)val;\n+    }\n+\n+    static void test1() {\n+        try {\n+            \/\/ Always fails\n+            cast(new Integer(42));\n+        } catch (ClassCastException cce) {\n+            \/\/ Ignored\n+        }\n+    }\n+\n+    static void test2(Integer val) {\n+        try {\n+            \/\/ Always fails\n+            cast(val);\n+        } catch (ClassCastException cce) {\n+            \/\/ Ignored\n+        }\n+    }\n+\n+    static void store(Object[] array, Object val) {\n+        array[0] = val;\n+    }\n+\n+    static void test3() {\n+        try {\n+            \/\/ Always fails\n+            store(new Long[1], new Integer(42));\n+        } catch (ArrayStoreException cce) {\n+            \/\/ Ignored\n+        }\n+    }\n+\n+    static void test4(Integer val) {\n+        try {\n+            \/\/ Always fails\n+            store(new Long[1], val);\n+        } catch (ArrayStoreException cce) {\n+            \/\/ Ignored\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < 1_000_000; ++i) {\n+            test1();\n+            test2((i % 2 == 0) ? null : 42);\n+            test3();\n+            test4((i % 2 == 0) ? null : 42);\n+        }\n+        Method method = TestNullAssertAtCheckCast.class.getDeclaredMethod(\"test1\");\n+        if (!WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false)) {\n+            throw new RuntimeException(\"TestNullAssertAtCheckCast::test1 not compilable\");\n+        }\n+        method = TestNullAssertAtCheckCast.class.getDeclaredMethod(\"test2\", Integer.class);\n+        if (!WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false)) {\n+            throw new RuntimeException(\"TestNullAssertAtCheckCast::test2 not compilable\");\n+        }\n+        method = TestNullAssertAtCheckCast.class.getDeclaredMethod(\"test3\");\n+        if (!WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false)) {\n+            throw new RuntimeException(\"TestNullAssertAtCheckCast::test3 not compilable\");\n+        }\n+        method = TestNullAssertAtCheckCast.class.getDeclaredMethod(\"test4\", Integer.class);\n+        if (!WB.isMethodCompilable(method, COMP_LEVEL_FULL_OPTIMIZATION, false)) {\n+            throw new RuntimeException(\"TestNullAssertAtCheckCast::test4 not compilable\");\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestNullAssertAtCheckCast.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}