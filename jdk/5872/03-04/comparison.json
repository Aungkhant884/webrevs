{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -29,0 +32,2 @@\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n@@ -53,32 +58,2 @@\n-    public long testSkip0(Data data) throws IOException {\n-        TestBaseInputStream0 testBaseInputStream = new TestBaseInputStream0(data.inputStreamSize);\n-        long res;\n-        do {\n-            res = testBaseInputStream.skip(data.skipLength);\n-        } while (res != 0);\n-        return res;\n-    }\n-\n-    @Benchmark\n-    public long testSkip1(Data data) throws IOException {\n-        TestBaseInputStream1 testBaseInputStream = new TestBaseInputStream1(data.inputStreamSize);\n-        long res;\n-        do {\n-            res = testBaseInputStream.skip(data.skipLength);\n-        } while (res != 0);\n-        return res;\n-    }\n-\n-    @Benchmark\n-    public long testSkip2(Data data) throws IOException {\n-        TestBaseInputStream2 testBaseInputStream = new TestBaseInputStream2(data.inputStreamSize);\n-        long res;\n-        do {\n-            res = testBaseInputStream.skip(data.skipLength);\n-        } while (res != 0);\n-        return res;\n-    }\n-\n-    @Benchmark\n-    public long testSkip3(Data data) throws IOException {\n-        TestBaseInputStream3 testBaseInputStream = new TestBaseInputStream3(data.inputStreamSize);\n+    public long testSkip(Data data) throws IOException {\n+        InputStream testBaseInputStream = data.inputStreamProvider.apply(data.inputStreamSize);\n@@ -101,0 +76,5 @@\n+        @Param({\"LOCAL_VARIABLE\", \"FIELD\", \"FIELD_ONLY_MIN_MAX\", \"SOFT_REFERENCE\"})\n+        private String inputStreamType;\n+\n+        private Function<Integer, ? extends InputStream> inputStreamProvider;\n+\n@@ -103,1 +83,20 @@\n-\n+            switch (inputStreamType) {\n+                case \"LOCAL_VARIABLE\": {\n+                    this.inputStreamProvider = TestBaseInputStream0::new;\n+                    break;\n+                }\n+                case \"FIELD\": {\n+                    this.inputStreamProvider = TestBaseInputStream1::new;\n+                    break;\n+                }\n+                case \"FIELD_ONLY_MIN_MAX\": {\n+                    this.inputStreamProvider = TestBaseInputStream2::new;\n+                    break;\n+                }\n+                case \"SOFT_REFERENCE\": {\n+                    this.inputStreamProvider = TestBaseInputStream3::new;\n+                    break;\n+                }\n+                default:\n+                    \/\/ never\n+            }\n@@ -128,8 +127,1 @@\n-            if (length > len) {\n-                length -= len;\n-                return len;\n-            } else if (length > 0) {\n-                len = length;\n-                length = 0;\n-                return len;\n-            } else {\n+            if (length <= 0) {\n@@ -138,0 +130,6 @@\n+            if (length < len) {\n+                len = length;\n+            }\n+            Arrays.fill(b, off, off + len, (byte) ThreadLocalRandom.current().nextInt());\n+            length -= len;\n+            return len;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/InputStreamSkipBenchmark.java","additions":39,"deletions":41,"binary":false,"changes":80,"status":"modified"}]}