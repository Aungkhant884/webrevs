{"files":[{"patch":"@@ -57,1 +57,0 @@\n-        PATTERN_MATCHING_IN_INSTANCEOF,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/PreviewFeature.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -143,11 +143,2 @@\n-     * {@preview Associated with pattern matching for {@code\n-     * instanceof}, a preview feature of the Java language.\n-     *\n-     *           This enum constant is associated with <i>pattern\n-     *           matching for {@code instanceof}<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n-     * A binding variable in a pattern .\n-     * @since 14\n+     * A binding variable in a pattern.\n+     * @since 16\n@@ -155,2 +146,0 @@\n-    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.PATTERN_MATCHING_IN_INSTANCEOF,\n-                                 essentialAPI=false)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/ElementKind.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,8 +31,0 @@\n- * {@preview Associated with pattern matching for instanceof, a preview feature of\n- *           the Java language.\n- *\n- *           This interface is associated with <i>pattern matching for instanceof<\/i>, a preview\n- *           feature of the Java language. Preview features\n- *           may be removed in a future release, or upgraded to permanent\n- *           features of the Java language.}\n- *\n@@ -41,1 +33,1 @@\n- * @since 14\n+ * @since 16\n@@ -45,0 +37,6 @@\n+    \/**\n+     * Returns the binding variable.\n+     * @return the binding variable\n+     *\/\n+    VariableTree getVariable();\n+\n@@ -48,0 +46,1 @@\n+     * @deprecated Use getVariable().getType()\n@@ -49,1 +48,4 @@\n-    Tree getType();\n+    @Deprecated(since=\"16\")\n+    default Tree getType() {\n+        return getVariable().getType();\n+    }\n@@ -54,0 +56,1 @@\n+     * @deprecated Use getVariable().getName()\n@@ -55,1 +58,4 @@\n-    Name getBinding();\n+    @Deprecated(since=\"16\")\n+    default Name getBinding() {\n+        return getVariable().getName();\n+    }\n@@ -58,1 +64,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/BindingPatternTree.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+     * @see #getPattern()\n@@ -56,8 +57,0 @@\n-     * {@preview Associated with pattern matching for instanceof, a preview feature of\n-     *           the Java language.\n-     *\n-     *           This method is associated with <i>pattern matching for instanceof<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -80,1 +73,1 @@\n-     * @since 14\n+     * @since 16\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/InstanceOfTree.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,8 +29,0 @@\n- * {@preview Associated with pattern matching for instanceof, a preview feature of\n- *           the Java language.\n- *\n- *           This interface is associated with <i>pattern matching for instanceof<\/i>, a preview\n- *           feature of the Java language. Preview features\n- *           may be removed in a future release, or upgraded to permanent\n- *           features of the Java language.}\n- *\n@@ -38,1 +30,1 @@\n- * statements.\n+ * patterns.\n@@ -40,1 +32,1 @@\n- * @since 14\n+ * @since 16\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/PatternTree.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -223,8 +223,0 @@\n-         * {@preview Associated with pattern matching for instanceof, a preview feature of\n-         *           the Java language.\n-         *\n-         *           This enum constant is associated with <i>pattern matching for instanceof<\/i>, a preview\n-         *           feature of the Java language. Preview features\n-         *           may be removed in a future release, or upgraded to permanent\n-         *           features of the Java language.}\n-         *\n@@ -233,1 +225,1 @@\n-         * @since 14\n+         * @since 16\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -261,8 +261,0 @@\n-     * {@preview Associated with pattern matching for instanceof, a preview feature of\n-     *           the Java language.\n-     *\n-     *           This method is associated with <i>pattern matching for instanceof<\/i>, a preview\n-     *           feature of the Java language. Preview features\n-     *           may be removed in a future release, or upgraded to permanent\n-     *           features of the Java language.}\n-     *\n@@ -273,1 +265,1 @@\n-     * @since 14\n+     * @since 16\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/TreeVisitor.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -694,1 +694,1 @@\n-        return scan(node.getType(), p);\n+        return scan(node.getVariable(), p);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreeScanner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,3 +168,1 @@\n-        if (feature == Feature.PATTERN_MATCHING_IN_INSTANCEOF ||\n-            feature == Feature.REIFIABLE_TYPES_INSTANCEOF ||\n-            feature == Feature.RECORDS ||\n+        if (feature == Feature.RECORDS ||\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1850,1 +1850,1 @@\n-            super(Flags.FINAL | Flags.HASINIT | Flags.MATCH_BINDING, name, type, owner);\n+            super(Flags.HASINIT | Flags.MATCH_BINDING, name, type, owner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -954,1 +954,0 @@\n-                case BINDING_PATTERN:\n@@ -956,1 +955,1 @@\n-                    VarSymbol v = frame.hasTag(Tag.BINDINGPATTERN) ? ((JCBindingPattern) frame).symbol : ((JCVariableDecl) frame).sym;\n+                    VarSymbol v = ((JCVariableDecl) frame).sym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -311,2 +311,0 @@\n-            } else if ((v.flags() & MATCH_BINDING) != 0) {\n-                log.error(pos, Errors.PatternBindingMayNotBeAssigned(v));\n@@ -3913,0 +3911,4 @@\n+            if (types.isSubtype(exprtype, clazztype) &&\n+                !exprtype.isErroneous() && !clazztype.isErroneous()) {\n+                log.error(tree.pos(), Errors.InstanceofPatternNoSubtype(clazztype, exprtype));\n+            }\n@@ -3914,1 +3916,1 @@\n-            typeTree = pattern.vartype;\n+            typeTree = pattern.var.vartype;\n@@ -3916,1 +3918,1 @@\n-                clazztype = chk.checkClassOrArrayType(pattern.vartype.pos(), clazztype);\n+                clazztype = chk.checkClassOrArrayType(pattern.var.vartype.pos(), clazztype);\n@@ -3942,1 +3944,3 @@\n-                log.error(typeTree.pos(), Errors.IllegalGenericTypeForInstof);\n+                log.error(DiagnosticFlag.SOURCE_LEVEL, tree.pos(),\n+                          Feature.REIFIABLE_TYPES_INSTANCEOF.error(this.sourceName));\n+                allowReifiableTypesInInstanceof = true;\n@@ -3955,6 +3959,8 @@\n-        tree.type = attribTree(tree.vartype, env, varInfo);\n-        VarSymbol v = tree.symbol = new BindingSymbol(tree.name, tree.vartype.type, env.info.scope.owner);\n-        if (chk.checkUnique(tree.pos(), v, env.info.scope)) {\n-            chk.checkTransparentVar(tree.pos(), v, env.info.scope);\n-        }\n-        annotate.queueScanTreeAndTypeAnnotate(tree.vartype, env, v, tree.pos());\n+        tree.type = tree.var.type = attribTree(tree.var.vartype, env, varInfo);\n+        BindingSymbol v = new BindingSymbol(tree.var.name, tree.var.vartype.type, env.info.scope.owner);\n+        v.pos = tree.pos;\n+        tree.var.sym = v;\n+        if (chk.checkUnique(tree.var.pos(), v, env.info.scope)) {\n+            chk.checkTransparentVar(tree.var.pos(), v, env.info.scope);\n+        }\n+        annotate.queueScanTreeAndTypeAnnotate(tree.var.vartype, env, v, tree.var.pos());\n@@ -3963,1 +3969,1 @@\n-        matchBindings = new MatchBindings(List.of(tree.symbol), List.nil());\n+        matchBindings = new MatchBindings(List.of(v), List.nil());\n@@ -5713,3 +5719,3 @@\n-            if (that.symbol == null) {\n-                that.symbol = new BindingSymbol(that.name, that.type, syms.noSymbol);\n-                that.symbol.adr = 0;\n+            if (that.var.sym == null) {\n+                that.var.sym = new BindingSymbol(that.var.name, that.var.type, syms.noSymbol);\n+                that.var.sym.adr = 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1878,1 +1878,2 @@\n-                !inits.isMember(sym.adr)) {\n+                !inits.isMember(sym.adr) &&\n+                (sym.flags_field & CLASH) == 0) {\n@@ -2761,0 +2762,6 @@\n+        @Override\n+        public void visitBindingPattern(JCBindingPattern tree) {\n+            super.visitBindingPattern(tree);\n+            initParam(tree.var);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+                    v2.flags_field |= CLASH;\n@@ -169,0 +170,1 @@\n+                        v.flags_field |= CLASH;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MatchBindingsComputer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-            VarSymbol pattSym = patt.symbol;\n+            VarSymbol pattSym = patt.var.sym;\n@@ -163,1 +163,1 @@\n-                    patt.symbol.owner);\n+                    patt.var.sym.owner);\n@@ -169,1 +169,1 @@\n-            VarSymbol bindingVar = bindingContext.bindingDeclared(patt.symbol);\n+            VarSymbol bindingVar = bindingContext.bindingDeclared((BindingSymbol) patt.var.sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -571,3 +571,1 @@\n-        if (tree.vartype != null) {\n-            tree.vartype = translate(tree.vartype, null);\n-        }\n+        tree.var = translate(tree.var, null);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -260,3 +260,1 @@\n-        result =\n-                scan(tree.vartype, that.vartype)\n-                        && tree.name == that.name;\n+        result = scan(tree.var, that.var);\n@@ -266,1 +264,0 @@\n-        equiv.put(tree.symbol, that.symbol);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeDiffer.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,6 +109,0 @@\n-    @Override\n-    public void visitBindingPattern(JCTree.JCBindingPattern tree) {\n-        symbolHashes.computeIfAbsent(tree.symbol, k -> symbolHashes.size());\n-        super.visitBindingPattern(tree);\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TreeHasher.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -936,1 +936,3 @@\n-                JCTree pattern = parseType();\n+                int typePos = token.pos;\n+                JCExpression type = parseType();\n+                JCTree pattern;\n@@ -939,1 +941,7 @@\n-                    pattern = toP(F.at(token.pos).BindingPattern(ident(), pattern));\n+                    JCModifiers mods = F.at(Position.NOPOS).Modifiers(0);\n+                    JCVariableDecl var = toP(F.at(token.pos).VarDef(mods, ident(), type, null));\n+                    TreeInfo.getStartPos(var);\n+                    pattern = toP(F.at(typePos).BindingPattern(var));\n+                    TreeInfo.getStartPos(pattern);\n+                } else {\n+                    pattern = type;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -548,4 +548,0 @@\n-# 0: symbol\n-compiler.err.pattern.binding.may.not.be.assigned=\\\n-    pattern binding {0} may not be assigned\n-\n@@ -623,3 +619,0 @@\n-compiler.err.illegal.generic.type.for.instof=\\\n-    illegal generic type for instanceof\n-\n@@ -1421,0 +1414,4 @@\n+# 0: type, 1: type\n+compiler.err.instanceof.pattern.no.subtype=\\\n+    pattern type {0} is a subtype of expression type {1}\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2167,1 +2167,1 @@\n-        public JCTree getType() { return pattern instanceof JCPattern ? pattern.hasTag(BINDINGPATTERN) ? ((JCBindingPattern) pattern).vartype : null : pattern; }\n+        public JCTree getType() { return pattern instanceof JCPattern ? pattern.hasTag(BINDINGPATTERN) ? ((JCBindingPattern) pattern).var.vartype : null : pattern; }\n@@ -2191,3 +2191,0 @@\n-        public JCExpression constExpression() {\n-            return null;\n-        }\n@@ -2198,9 +2195,1 @@\n-        public Name name;\n-        public BindingSymbol symbol;\n-        public JCTree vartype;\n-\n-        protected JCBindingPattern(Name name, BindingSymbol symbol, JCTree vartype) {\n-            this.name = name;\n-            this.symbol = symbol;\n-            this.vartype = vartype;\n-        }\n+        public JCVariableDecl var;\n@@ -2208,3 +2197,2 @@\n-        @DefinedBy(Api.COMPILER_TREE)\n-        public Name getBinding() {\n-            return name;\n+        protected JCBindingPattern(JCVariableDecl var) {\n+            this.var = var;\n@@ -2214,2 +2202,2 @@\n-        public Tree getType() {\n-            return vartype;\n+        public VariableTree getVariable() {\n+            return var;\n@@ -3214,1 +3202,1 @@\n-        JCBindingPattern BindingPattern(Name name, JCTree vartype);\n+        JCBindingPattern BindingPattern(JCVariableDecl var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":7,"deletions":19,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -898,3 +898,1 @@\n-            printExpr(patt.vartype);\n-            print(\" \");\n-            print(patt.name);\n+            printExpr(patt.var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -496,2 +496,2 @@\n-        JCTree vartype = copy(t.vartype, p);\n-        return M.at(t.pos).BindingPattern(t.name, vartype);\n+        JCVariableDecl var = copy(t.var, p);\n+        return M.at(t.pos).BindingPattern(var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import com.sun.tools.javac.code.Symbol.VarSymbol;\n@@ -538,1 +539,1 @@\n-                return getStartPos(node.vartype);\n+                return getStartPos(node.var);\n@@ -929,2 +930,0 @@\n-        case BINDINGPATTERN:\n-            return ((JCBindingPattern) node).symbol;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -479,2 +479,2 @@\n-    public JCBindingPattern BindingPattern(Name name, JCTree vartype) {\n-        JCBindingPattern tree = new JCBindingPattern(name, null, vartype);\n+    public JCBindingPattern BindingPattern(JCVariableDecl var) {\n+        JCBindingPattern tree = new JCBindingPattern(var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -307,2 +307,1 @@\n-        if (tree.vartype != null)\n-            scan(tree.vartype);\n+        scan(tree.var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeScanner.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -362,1 +362,1 @@\n-        tree.vartype = translate(tree.vartype);\n+        tree.var = translate(tree.var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeTranslator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"test\/langtools\/tools\/javac\/T4881267-old.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -1,1 +1,1 @@\n-T4881267.java:10:34: compiler.err.illegal.generic.type.for.instof\n+T4881267.java:10:21: compiler.err.instanceof.reifiable.not.safe: java.lang.Object, T\n","filename":"test\/langtools\/tools\/javac\/T4881267.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-                     *       String data = \"test\";\n+                     *       Object data = \"test\";\n@@ -409,1 +409,1 @@\n-                    \"    String data = \\\"test\\\";\\n\" +\n+                    \"    Object data = \\\"test\\\";\\n\" +\n@@ -458,1 +458,1 @@\n-                    \"    String data = \\\"test\\\";\\n\" +\n+                    \"    Object data = \\\"test\\\";\\n\" +\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/CombinationsTargetTest2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -164,1 +164,0 @@\n-compiler.err.feature.not.supported.in.source                  # Generated for using diamond before source 7\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ key: compiler.misc.feature.reifiable.types.instanceof\n+\/\/ options: -source 15 -Xlint:-options\n+\n+import java.util.*;\n+\n+class FeatureReifiableTypesInstanceof {\n+    List o;\n+    boolean b = (o instanceof List<String>);\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/FeatureReifiableTypesInstanceof.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.instanceof.pattern.no.subtype\n+\n+class InstanceofPatternNoSubtype {\n+    boolean test(Object o) {\n+        return o instanceof Object obj;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceofPatternNoSubtype.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InstanceofReifiableNotSafe.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.illegal.generic.type.for.instof\n-\n-import java.util.*;\n-\n-class IllegalInstanceof {\n-    List o;\n-    boolean b = (o instanceof List<String>);\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/InvalidInstanceof.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/MatchBindingExists.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.pattern.binding.may.not.be.assigned\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n-\n-class ResourceMayNotBeAssigned {\n-    void m(Object o) {\n-        if (o instanceof String s) {\n-            s = \"\";\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PatternBindingMayNotBeAssigned.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n-\/\/ key: compiler.warn.preview.feature.use\n-\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n+\/\/ key: compiler.err.feature.not.supported.in.source\n+\/\/ options: -source 15 -Xlint:-options\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PatternMatchingInstanceof.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.misc.feature.reifiable.types.instanceof\n-\/\/ key: compiler.warn.preview.feature.use.plural\n-\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n-\n-class PatternMatchingInstanceof {\n-    boolean m(I<String> i) {\n-        return i instanceof C<String>;\n-    }\n-    interface I<T> {}\n-    class C<T> implements I<T> {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ReifiableTypesInstanceof.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-InstanceOf2.java:12:48: compiler.err.illegal.generic.type.for.instof\n+InstanceOf2.java:12:29: compiler.err.instanceof.reifiable.not.safe: java.lang.Class<compiler.misc.type.captureof: 1, ? extends InstanceOf2>, java.lang.Class<InstanceOf2>\n","filename":"test\/langtools\/tools\/javac\/generics\/InstanceOf2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n- * @compile\/fail\/ref=InstanceOf3.out -XDrawDiagnostics  InstanceOf3.java\n+ * @compile\/fail\/ref=InstanceOf3.out -XDrawDiagnostics -source 15 -Xlint:-options InstanceOf3.java\n","filename":"test\/langtools\/tools\/javac\/generics\/InstanceOf3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-InstanceOf3.java:12:48: compiler.err.illegal.generic.type.for.instof\n+InstanceOf3.java:12:32: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.reifiable.types.instanceof), 15, 16\n","filename":"test\/langtools\/tools\/javac\/generics\/InstanceOf3.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,5 @@\n+BadTest.java:19:50: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n+BadTest.java:23:48: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<java.lang.String>)\n+BadTest.java:24:54: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n+BadTest.java:26:38: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.reifiable.types.instanceof), 15, 16\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/generics\/odersky\/BadTest-old.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -6,0 +6,1 @@\n+ * @compile\/fail\/ref=BadTest-old.out -XDrawDiagnostics -source 15 -Xlint:-options BadTest.java\n","filename":"test\/langtools\/tools\/javac\/generics\/odersky\/BadTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,4 +1,4 @@\n-BadTest.java:18:50: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n-BadTest.java:22:48: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<java.lang.String>)\n-BadTest.java:23:54: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n-BadTest.java:25:53: compiler.err.illegal.generic.type.for.instof\n+BadTest.java:19:50: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n+BadTest.java:23:48: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<java.lang.String>)\n+BadTest.java:24:54: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<Cell<java.lang.String>>)\n+BadTest.java:26:35: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: List<java.lang.Object>, List<java.lang.String>)\n","filename":"test\/langtools\/tools\/javac\/generics\/odersky\/BadTest.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=BindingsExistTest.out -XDrawDiagnostics --enable-preview -source ${jdk.version} BindingsExistTest.java\n+ * @compile\/fail\/ref=BindingsExistTest.out -XDrawDiagnostics BindingsExistTest.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsExistTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,2 +7,0 @@\n-- compiler.note.preview.filename: BindingsExistTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsExistTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} BindingsTest1.java\n- * @run main\/othervm --enable-preview BindingsTest1\n+ * @compile BindingsTest1.java\n+ * @run main BindingsTest1\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=BindingsTest1Merging.out -XDrawDiagnostics --enable-preview -source ${jdk.version} BindingsTest1Merging.java\n+ * @compile\/fail\/ref=BindingsTest1Merging.out -XDrawDiagnostics BindingsTest1Merging.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest1Merging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,2 +10,0 @@\n-- compiler.note.preview.filename: BindingsTest1Merging.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest1Merging.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=BindingsTest2.out -XDrawDiagnostics -XDshould-stop.at=FLOW --enable-preview -source ${jdk.version} BindingsTest2.java\n+ * @compile\/fail\/ref=BindingsTest2.out -XDrawDiagnostics -XDshould-stop.at=FLOW BindingsTest2.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,2 +52,0 @@\n-- compiler.note.preview.filename: BindingsTest2.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/BindingsTest2.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,4 +98,1 @@\n-                    })\n-                .withOption(\"--enable-preview\")\n-                .withOption(\"-source\")\n-                .withOption(String.valueOf(Runtime.version().feature()));\n+                    });\n","filename":"test\/langtools\/tools\/javac\/patterns\/BreakAndLoops.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=CastConversionMatch.out -XDrawDiagnostics --enable-preview -source ${jdk.version} CastConversionMatch.java\n+ * @compile\/fail\/ref=CastConversionMatch.out -XDrawDiagnostics CastConversionMatch.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/CastConversionMatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,0 @@\n-- compiler.note.preview.filename: CastConversionMatch.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/CastConversionMatch.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,4 +88,1 @@\n-                    })\n-                .withOption(\"--enable-preview\")\n-                .withOption(\"-source\")\n-                .withOption(String.valueOf(Runtime.version().feature()));\n+                    });\n","filename":"test\/langtools\/tools\/javac\/patterns\/ConditionalTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=DuplicateBindingTest.out -XDrawDiagnostics --enable-preview -source ${jdk.version} DuplicateBindingTest.java\n+ * @compile\/fail\/ref=DuplicateBindingTest.out -XDrawDiagnostics DuplicateBindingTest.java\n@@ -13,0 +13,2 @@\n+        Object o1 = \"\";\n+        Object o2 = \"\";\n@@ -16,1 +18,1 @@\n-            if (args[0] instanceof String s) { \/\/ NOT OK. Redef same scope.\n+            if (o1 instanceof String s) { \/\/ NOT OK. Redef same scope.\n@@ -18,1 +20,1 @@\n-            if (args[0] instanceof String f) { \/\/ OK to redef field.\n+            if (o1 instanceof String f) { \/\/ OK to redef field.\n@@ -22,2 +24,0 @@\n-        Object o1 = \"\";\n-        Object o2 = \"\";\n","filename":"test\/langtools\/tools\/javac\/patterns\/DuplicateBindingTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-DuplicateBindingTest.java:16:43: compiler.err.already.defined: kindname.variable, s, kindname.method, main(java.lang.String[])\n+DuplicateBindingTest.java:18:38: compiler.err.already.defined: kindname.variable, s, kindname.method, main(java.lang.String[])\n@@ -25,2 +25,0 @@\n-- compiler.note.preview.filename: DuplicateBindingTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/DuplicateBindingTest.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=EnsureTypesOrderTest.out -XDrawDiagnostics --enable-preview -source ${jdk.version} EnsureTypesOrderTest.java\n+ * @compile\/fail\/ref=EnsureTypesOrderTest.out -XDrawDiagnostics EnsureTypesOrderTest.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnsureTypesOrderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,0 @@\n-- compiler.note.preview.filename: EnsureTypesOrderTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/EnsureTypesOrderTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} ExamplesFromProposal.java\n- * @run main\/othervm --enable-preview ExamplesFromProposal\n+ * @compile ExamplesFromProposal.java\n+ * @run main ExamplesFromProposal\n","filename":"test\/langtools\/tools\/javac\/patterns\/ExamplesFromProposal.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=ImpossibleTypeTest.out -XDrawDiagnostics --enable-preview -source ${jdk.version} ImpossibleTypeTest.java\n+ * @compile\/fail\/ref=ImpossibleTypeTest.out -XDrawDiagnostics ImpossibleTypeTest.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/ImpossibleTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,2 +3,0 @@\n-- compiler.note.preview.filename: ImpossibleTypeTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/ImpossibleTypeTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @compile -g --enable-preview -source ${jdk.version} LocalVariableTable.java\n- * @run main\/othervm --enable-preview LocalVariableTable\n+ * @compile -g LocalVariableTable.java\n+ * @run main LocalVariableTable\n","filename":"test\/langtools\/tools\/javac\/patterns\/LocalVariableTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=MatchBindingScopeTest.out -XDrawDiagnostics --enable-preview -source ${jdk.version} MatchBindingScopeTest.java\n+ * @compile\/fail\/ref=MatchBindingScopeTest.out -XDrawDiagnostics MatchBindingScopeTest.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchBindingScopeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,2 +14,0 @@\n-- compiler.note.preview.filename: MatchBindingScopeTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/MatchBindingScopeTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8250625\n+ * @summary Verify pattern matching test which is always true produces an error\n+ * @compile\/fail\/ref=NoSubtypeCheck.out -XDrawDiagnostics NoSubtypeCheck.java\n+ *\/\n+public class NoSubtypeCheck {\n+\n+    public static void main(Object o, String s, List<String> l) {\n+        boolean b1 = o instanceof Object v1;\n+        boolean b2 = o instanceof String v2;\n+        boolean b3 = s instanceof Object v3;\n+        boolean b4 = s instanceof String v4;\n+        boolean b5 = l instanceof List<String> v5;\n+        boolean b6 = l instanceof List2<String> v6;\n+        boolean b7 = undef instanceof String v7;\n+        boolean b8 = o instanceof Undef v7;\n+    }\n+\n+    public interface List<T> {}\n+    public interface List2<T> extends List<T> {}\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoSubtypeCheck.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+NoSubtypeCheck.java:10:24: compiler.err.instanceof.pattern.no.subtype: java.lang.Object, java.lang.Object\n+NoSubtypeCheck.java:12:24: compiler.err.instanceof.pattern.no.subtype: java.lang.Object, java.lang.String\n+NoSubtypeCheck.java:13:24: compiler.err.instanceof.pattern.no.subtype: java.lang.String, java.lang.String\n+NoSubtypeCheck.java:14:24: compiler.err.instanceof.pattern.no.subtype: NoSubtypeCheck.List<java.lang.String>, NoSubtypeCheck.List<java.lang.String>\n+NoSubtypeCheck.java:16:22: compiler.err.cant.resolve.location: kindname.variable, undef, , , (compiler.misc.location: kindname.class, NoSubtypeCheck, null)\n+NoSubtypeCheck.java:17:35: compiler.err.cant.resolve.location: kindname.class, Undef, , , (compiler.misc.location: kindname.class, NoSubtypeCheck, null)\n+6 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoSubtypeCheck.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -30,2 +30,2 @@\n- * @compile --enable-preview -source ${jdk.version} NoUnnecessaryCast.java\n- * @run main\/othervm --enable-preview NoUnnecessaryCast\n+ * @compile NoUnnecessaryCast.java\n+ * @run main NoUnnecessaryCast\n","filename":"test\/langtools\/tools\/javac\/patterns\/NoUnnecessaryCast.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @compile --enable-preview -source ${jdk.version} NullsInPatterns.java\n- * @run main\/othervm --enable-preview NullsInPatterns\n+ * @compile\/fail\/ref=NullsInPatterns.out -XDrawDiagnostics NullsInPatterns.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInPatterns.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,3 @@\n+NullsInPatterns.java:35:18: compiler.err.instanceof.pattern.no.subtype: java.util.List, compiler.misc.type.null\n+NullsInPatterns.java:46:18: compiler.err.instanceof.pattern.no.subtype: java.util.List<?>, compiler.misc.type.null\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInPatterns.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile\/ref=PatternMatchPosTest.out -processor PatternMatchPosTest -Xlint:unchecked -XDrawDiagnostics --enable-preview -source ${jdk.version} PatternMatchPosTestData.java\n+ * @compile\/ref=PatternMatchPosTest.out -processor PatternMatchPosTest -Xlint:unchecked -XDrawDiagnostics PatternMatchPosTestData.java\n@@ -88,2 +88,4 @@\n-                        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\n-                                                                 text.substring(start, end));\n+                        if (start != (-1) || end != (-1)) {\n+                            processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\n+                                                                     text.substring(start, end));\n+                        }\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternMatchPosTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+- compiler.note.proc.messager: String s\n@@ -10,0 +11,1 @@\n+- compiler.note.proc.messager: java.lang.String s\n@@ -12,3 +14,1 @@\n-- compiler.note.proc.messager: java\n-- compiler.note.preview.filename: PatternMatchPosTestData.java\n-- compiler.note.preview.recompile\n+- compiler.note.proc.messager: java\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternMatchPosTest.out","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} PatternTypeTest2.java\n- * @run main\/othervm --enable-preview PatternTypeTest2\n+ * @compile PatternTypeTest2.java\n+ * @run main PatternTypeTest2\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternTypeTest2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,16 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8231827\n- * @summary Ensure that in type test patterns, the predicate is not trivially provable false.\n- * @compile\/fail\/ref=PatternVariablesAreFinal.out -XDrawDiagnostics --enable-preview -source ${jdk.version} PatternVariablesAreFinal.java\n- *\/\n-public class PatternVariablesAreFinal {\n-    public static void main(String[] args) {\n-        Object o = 32;\n-        if (o instanceof String s) {\n-            s = \"hello again\";\n-            System.out.println(s);\n-        }\n-        System.out.println(\"test complete\");\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreFinal.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-PatternVariablesAreFinal.java:11:13: compiler.err.pattern.binding.may.not.be.assigned: s\n-- compiler.note.preview.filename: PatternVariablesAreFinal.java\n-- compiler.note.preview.recompile\n-1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreFinal.out","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8231827\n- * @summary Pattern variables are final so should be allowed to be referenced in an inner class\n- * @compile --enable-preview -source ${jdk.version} PatternVariablesAreFinal2.java\n- * @run main\/othervm --enable-preview PatternVariablesAreFinal2\n- *\/\n-public class PatternVariablesAreFinal2 {\n-    public static void main(String[] args) {\n-        Object o = \"42\";\n-        if (o instanceof String s) {\n-            new Object() {\n-                void run() { System.err.println(s); }\n-            }.run();\n-        }\n-    }\n-}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreFinal2.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8231827\n+ * @summary Pattern variables are non-final.\n+ * @compile\/fail\/ref=PatternVariablesAreNonFinal.out -XDrawDiagnostics PatternVariablesAreNonFinal.java\n+ *\/\n+public class PatternVariablesAreNonFinal {\n+    public static void main(String[] args) {\n+        Object o = 32;\n+        if (o instanceof String s) {\n+            s = \"hello again\";\n+            new Runnable() {\n+                @Override\n+                public void run() {\n+                    System.err.println(s);\n+                }\n+            };\n+        }\n+        System.out.println(\"test complete\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreNonFinal.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+PatternVariablesAreNonFinal.java:38:40: compiler.err.cant.ref.non.effectively.final.var: s, (compiler.misc.inner.cls)\n+1 error\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreNonFinal.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8231827\n+ * @summary Pattern variables can be effectivelly final so should be allowed to be referenced in an inner class\n+ * @compile PatternVariablesAreNonFinal2.java\n+ * @run main PatternVariablesAreNonFinal2\n+ *\/\n+public class PatternVariablesAreNonFinal2 {\n+    public static void main(String[] args) {\n+        Object o = \"42\";\n+        if (o instanceof String s) {\n+            new Object() {\n+                void run() { System.err.println(s); }\n+            }.run();\n+        }\n+        if (o instanceof String s) {\n+            s = \"hello again\";\n+            System.out.println(s);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternVariablesAreNonFinal2.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -108,1 +108,1 @@\n-            List.of(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature())), null,\n+            null, null,\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternsSimpleVisitorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=Reifiable.out --enable-preview -source ${jdk.version} -XDrawDiagnostics Reifiable.java\n+ * @compile\/fail\/ref=Reifiable.out -XDrawDiagnostics Reifiable.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/Reifiable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,2 +5,0 @@\n-- compiler.note.preview.filename: Reifiable.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/Reifiable.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,7 +1,5 @@\n-ReifiableOld.java:12:37: compiler.err.illegal.generic.type.for.instof\n-ReifiableOld.java:13:38: compiler.err.illegal.generic.type.for.instof\n-ReifiableOld.java:14:38: compiler.err.illegal.generic.type.for.instof\n-ReifiableOld.java:15:38: compiler.err.illegal.generic.type.for.instof\n-ReifiableOld.java:15:39: compiler.err.not.within.bounds: java.lang.String, T\n-ReifiableOld.java:16:39: compiler.err.illegal.generic.type.for.instof\n-6 errors\n+ReifiableOld.java:11:18: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.reifiable.types.instanceof), 15, 16\n+ReifiableOld.java:13:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<java.lang.String>, ReifiableOld.ListImpl<ReifiableOld>)\n+ReifiableOld.java:14:39: compiler.err.not.within.bounds: java.lang.String, T\n+ReifiableOld.java:15:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<ReifiableOld>, ReifiableOld.Unrelated<ReifiableOld>)\n+4 errors\n","filename":"test\/langtools\/tools\/javac\/patterns\/ReifiableOld-old.out","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,3 +5,2 @@\n- * @compile\/fail\/ref=ReifiableOld-old.out -source 13 -Xlint:-options -XDrawDiagnostics ReifiableOld.java\n- * @compile\/fail\/ref=ReifiableOld-old.out -source ${jdk.version} -XDrawDiagnostics ReifiableOld.java\n- * @compile\/fail\/ref=ReifiableOld.out --enable-preview -source ${jdk.version} -XDrawDiagnostics ReifiableOld.java\n+ * @compile\/fail\/ref=ReifiableOld-old.out -source 15 -Xlint:-options -XDrawDiagnostics ReifiableOld.java\n+ * @compile\/fail\/ref=ReifiableOld.out -XDrawDiagnostics ReifiableOld.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/ReifiableOld.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,6 +1,4 @@\n-ReifiableOld.java:12:16: compiler.err.instanceof.reifiable.not.safe: java.lang.Object, ReifiableOld.ListImpl<ReifiableOld>\n-ReifiableOld.java:14:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<java.lang.String>, ReifiableOld.ListImpl<ReifiableOld>)\n-ReifiableOld.java:15:39: compiler.err.not.within.bounds: java.lang.String, T\n-ReifiableOld.java:16:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<ReifiableOld>, ReifiableOld.Unrelated<ReifiableOld>)\n-- compiler.note.preview.filename: ReifiableOld.java\n-- compiler.note.preview.recompile\n+ReifiableOld.java:11:16: compiler.err.instanceof.reifiable.not.safe: java.lang.Object, ReifiableOld.ListImpl<ReifiableOld>\n+ReifiableOld.java:13:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<java.lang.String>, ReifiableOld.ListImpl<ReifiableOld>)\n+ReifiableOld.java:14:39: compiler.err.not.within.bounds: java.lang.String, T\n+ReifiableOld.java:15:16: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: ReifiableOld.List<ReifiableOld>, ReifiableOld.Unrelated<ReifiableOld>)\n","filename":"test\/langtools\/tools\/javac\/patterns\/ReifiableOld.out","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n- * @compile\/fail\/ref=UncheckedWarningOnMatchesTest.out -Xlint:unchecked -Werror -XDrawDiagnostics --enable-preview -source ${jdk.version} UncheckedWarningOnMatchesTest.java\n+ * @compile\/fail\/ref=UncheckedWarningOnMatchesTest.out -Xlint:unchecked -Werror -XDrawDiagnostics UncheckedWarningOnMatchesTest.java\n","filename":"test\/langtools\/tools\/javac\/patterns\/UncheckedWarningOnMatchesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,0 @@\n-- compiler.note.preview.filename: UncheckedWarningOnMatchesTest.java\n-- compiler.note.preview.recompile\n","filename":"test\/langtools\/tools\/javac\/patterns\/UncheckedWarningOnMatchesTest.out","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,2 +101,0 @@\n-        String sourceVersion = Integer.toString(Runtime.version().feature());\n-\n@@ -104,1 +102,0 @@\n-        addCompileOptions(\"--enable-preview\", \"-source\", sourceVersion);\n@@ -116,2 +113,0 @@\n-        String sourceVersion = Integer.toString(Runtime.version().feature());\n-\n@@ -119,1 +114,0 @@\n-        addCompileOptions(\"--enable-preview\", \"-source\", sourceVersion);\n","filename":"test\/langtools\/tools\/javac\/patterns\/scope\/ScopeTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-            handleCurrentTreeAsBindingVar();\n+            handleTreeAsBindingVar(new TreePath(getCurrentPath(), node.getVariable()));\n@@ -115,1 +115,1 @@\n-                handleCurrentTreeAsBindingVar();\n+                handleTreeAsBindingVar(getCurrentPath());\n@@ -120,2 +120,2 @@\n-        private void handleCurrentTreeAsBindingVar() {\n-           Element element = trees.getElement(getCurrentPath());\n+        private void handleTreeAsBindingVar(TreePath tp) {\n+           Element element = trees.getElement(tp);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestBindingVariable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}