{"files":[{"patch":"@@ -91,1 +91,1 @@\n-        \/** JEP title *\/\n+        \/** JEP title in plain text *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -163,0 +163,1 @@\n+        \/\/ The \"contents-\" + id value is used in JavaScript code to toggle visiblity of the link.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-doclet.Preview_JEP_URL=https:\/\/openjdk.java.net\/jeps\/{0}\n+doclet.Preview_JEP_URL=https:\/\/openjdk.org\/jeps\/{0}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javax.lang.model.element.AnnotationValue;\n@@ -530,0 +531,24 @@\n+    \/**\n+     * Returns a map containing {@code jdk.internal.javac.PreviewFeature.JEP} element values associated with the\n+     * {@code jdk.internal.javac.PreviewFeature.Feature} enum constant identified by {@code feature}.\n+     *\n+     * This method uses internal javac features (although only reflectively).\n+     *\n+     * @param feature the name of the PreviewFeature.Feature enum value\n+     * @return the map of PreviewFeature.JEP annotation element values, or an empty map\n+     *\/\n+    public Map<? extends ExecutableElement, ? extends AnnotationValue> getJepInfo(String feature) {\n+        TypeElement featureType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.Feature\");\n+        TypeElement jepType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.JEP\");\n+        var featureVar = featureType.getEnclosedElements().stream()\n+                .filter(e -> feature.equals(e.getSimpleName().toString())).findFirst();\n+        if (featureVar.isPresent()) {\n+            for (AnnotationMirror anno : featureVar.get().getAnnotationMirrors()) {\n+                if (anno.getAnnotationType().asElement().equals(jepType)) {\n+                    return anno.getElementValues();\n+                }\n+            }\n+        }\n+        return Map.of();\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/WorkArounds.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-            Map<? extends ExecutableElement, ? extends AnnotationValue> anno = utils.getJepInfo(featureName);\n+            Map<? extends ExecutableElement, ? extends AnnotationValue> anno = configuration.workArounds.getJepInfo(featureName);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/PreviewAPIListBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private final BaseConfiguration configuration;\n+    protected final BaseConfiguration configuration;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/SummaryAPIListBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1313,22 +1313,0 @@\n-    \/**\n-     * Returns a map containing {@code jdk.internal.javac.PreviewFeature.JEP} element values associated with the\n-     * {@code jdk.internal.javac.PreviewFeature.Feature} enum constant identified by {@code feature}.\n-     *\n-     * @param feature the name of the PreviewFeature.Feature enum value\n-     * @return the map of PreviewFeature.JEP annotation element values, or an empty map\n-     *\/\n-    public Map<? extends ExecutableElement, ? extends AnnotationValue> getJepInfo(String feature) {\n-        TypeElement featureType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.Feature\");\n-        TypeElement jepType = elementUtils.getTypeElement(\"jdk.internal.javac.PreviewFeature.JEP\");\n-        var featureVar = featureType.getEnclosedElements().stream()\n-                .filter(e -> feature.equals(e.getSimpleName().toString())).findFirst();\n-        if (featureVar.isPresent()) {\n-            for (AnnotationMirror anno : featureVar.get().getAnnotationMirrors()) {\n-                if (anno.getAnnotationType().asElement().equals(jepType)) {\n-                    return anno.getElementValues();\n-                }\n-            }\n-        }\n-        return Map.of();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}