{"files":[{"patch":"@@ -375,0 +375,23 @@\n+\n+void unlock_locks_owned_by(Thread* thread) {\n+  assert(thread != NULL, \"can't be owned by NULL\");\n+  if (thread->is_Watcher_thread()) {\n+    \/\/ need WatcherThread as a safeguard against potential deadlocks\n+    return;\n+  }\n+\n+#ifdef ASSERT\n+  Mutex* owned_lock = thread->owned_locks();\n+  while (owned_lock != NULL) {\n+    Mutex* next = owned_lock->next();\n+    owned_lock->unlock();\n+    owned_lock = next;\n+  }\n+#endif \/\/ ASSERT\n+\n+  for (int i = 0; i < _num_mutex; i++) {\n+     if (_mutex_array[i]->owner() == thread) {\n+       _mutex_array[i]->unlock();\n+     }\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-\n+void unlock_locks_owned_by(Thread* t);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1316,1 +1316,1 @@\n-\/\/ Attempt to set the state to Native in VMError.\n+\/\/ Attempt to set the current thread to Native state in VMError.\n@@ -1318,1 +1318,1 @@\n-\/\/ Otherwise, it may end up with a deadlock when cmd tries to synchronize all Java threads\n+\/\/ Otherwise, it may end up with a deadlock when dcmds try to synchronize all Java threads\n@@ -1320,12 +1320,2 @@\n-class VMErrorThreadToNativeFromVM : public StackObj {\n- private:\n-   JavaThread* _thread;\n-\n- public:\n-  VMErrorThreadToNativeFromVM(Thread* t) : _thread(nullptr) {\n-    if (t != nullptr && t->is_Java_thread() &&\n-        !Threads_lock->owned_by_self()) { \/\/ VMError::controlled_crash() grabs Threads_lock.\n-      _thread = JavaThread::cast(t);\n-      assert(_thread == Thread::current(), \"must be current thread\");\n-      assert(_thread->thread_state() == _thread_in_vm, \"must be in VM\");\n-    }\n+bool transition_into_native() {\n+  Thread* t = Thread::current_or_null();\n@@ -1333,5 +1323,2 @@\n-    if (_thread != nullptr) {\n-      assert(!_thread->owns_locks(), \"must release all locks when leaving VM\");\n-      ThreadStateTransition::transition_from_vm(_thread, _thread_in_native);\n-    }\n-  }\n+  if (t != nullptr && t->is_Java_thread()) {\n+    JavaThread* jt = JavaThread::cast(t);\n@@ -1339,5 +1326,4 @@\n-  ~VMErrorThreadToNativeFromVM() {\n-    if (_thread != nullptr) {\n-      ThreadStateTransition::transition_from_native(_thread, _thread_in_vm);\n-      assert(!_thread->is_pending_jni_exception_check(), \"Pending JNI Exception Check\");\n-      \/\/ We don't need to clear_walkable because it will happen automagically when we return to java\n+    if (jt->thread_state() == _thread_in_vm) {\n+      unlock_locks_owned_by(t);\n+      ThreadStateTransition::transition_from_vm(jt, _thread_in_native);\n+      return true;\n@@ -1346,1 +1332,3 @@\n-};\n+\n+  return false;\n+}\n@@ -1652,0 +1640,2 @@\n+\n+    transition_into_native();\n@@ -1663,1 +1653,0 @@\n-      VMErrorThreadToNativeFromVM ttnfv(JavaThread::current_or_null());\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":15,"deletions":26,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestOutOfMemoryErrorFromNIO\n+ * @summary Test OutOfMemoryError thrown from NIO. OnError will react to OOME.\n+ *     After we transition the current thread into Native, OnError allows jcmd to itself.\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run main\/othervm TestOutOfMemoryErrorFromNIO\n+ * @bug 8155004 8273608\n+ *\/\n+import java.nio.ByteBuffer;\n+import java.util.LinkedList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class TestOutOfMemoryErrorFromNIO {\n+    private static final int  BUFF_SIZE = 10 * 1024 * 1024; \/\/ 10MB\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            LinkedList<Object> list = new LinkedList<Object>();\n+            while (true) {\n+                Object item = ByteBuffer.allocateDirect(BUFF_SIZE);\n+                list.add(item);\n+            }\n+        }\n+\n+        \/\/ Both Thread.print and GC.thread_dump require safepoint synchronization.\n+        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n+        StringBuilder before = new StringBuilder(jcmd);\n+        before.append(\" %p\");\n+        before.append(\" Thread.print\");\n+        StringBuilder after = new StringBuilder(jcmd);\n+        after.append(\" %p\");\n+        after.append(\" GC.heap_dump a.hprof\");\n+\n+        String msg = \"Test Succeeded\";\n+        String cmds = before.toString() + \";echo \" + msg + \";\"\n+                    + after.toString();\n+\n+        \/\/ else this is the main test\n+        ProcessBuilder pb_single = ProcessTools.createJavaProcessBuilder(\n+           \"-XX:MaxDirectMemorySize=100M\",\n+           \"-XX:+UnlockDiagnosticVMOptions\",\n+           \"-XX:AbortVMOnException=java.lang.OutOfMemoryError\",\n+           \"-XX:OnError=\" + cmds,\n+           TestOutOfMemoryErrorFromNIO.class.getName(),\n+           \"throwOOME\");\n+\n+        OutputAnalyzer output_single = new OutputAnalyzer(pb_single.start());\n+\n+        \/* Actual output should look like this:\n+           #\n+           # A fatal error has been detected by the Java Runtime Environment:\n+           #\n+           #  Internal Error (\/home\/xxinliu\/Devel\/jdk\/src\/hotspot\/share\/utilities\/exceptions.cpp:541), pid=36786, tid=36787\n+           #  fatal error: Saw java.lang.OutOfMemoryError, aborting\n+           ...\n+           # -XX:OnError=\"echo Test1 Succeeded\"\n+           #   Executing \/bin\/sh -c \"echo Test1 Succeeded\" ...\n+        *\/\n+        output_single.shouldContain(\"Saw java.lang.OutOfMemoryError, aborting\");\n+        output_single.stdoutShouldMatch(\"^\" + msg); \/\/ match start of line only\n+\n+        System.out.println(\"PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOutOfMemoryErrorFromNIO.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}