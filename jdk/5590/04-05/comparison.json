{"files":[{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -498,30 +499,0 @@\n-class JavaThreadInVMAndNative : public StackObj {\n- private:\n-  JavaThread* const _jt;\n-  JavaThreadState _original_state;\n- public:\n-\n-  JavaThreadInVMAndNative(Thread* t) : _jt(t->is_Java_thread() ? JavaThread::cast(t) : NULL),\n-                                       _original_state(_thread_max_state) {\n-    if (_jt != NULL) {\n-      _original_state = _jt->thread_state();\n-      if (_original_state != _thread_in_vm) {\n-        _jt->set_thread_state(_thread_in_vm);\n-      }\n-    }\n-  }\n-\n-  ~JavaThreadInVMAndNative() {\n-    if (_original_state != _thread_max_state) {\n-      _jt->set_thread_state(_original_state);\n-    }\n-  }\n-\n-  void transition_to_native() {\n-    if (_jt != NULL) {\n-      assert(_jt->thread_state() == _thread_in_vm, \"invariant\");\n-      _jt->set_thread_state(_thread_in_native);\n-    }\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -215,0 +215,30 @@\n+class JavaThreadInVMAndNative : public StackObj {\n+ private:\n+  JavaThread* const _jt;\n+  JavaThreadState _original_state;\n+ public:\n+\n+  JavaThreadInVMAndNative(Thread* t) : _jt(t != NULL && t->is_Java_thread() ? JavaThread::cast(t) : NULL),\n+                                       _original_state(_thread_max_state) {\n+    if (_jt != NULL) {\n+      _original_state = _jt->thread_state();\n+      if (_original_state != _thread_in_vm) {\n+        _jt->set_thread_state(_thread_in_vm);\n+      }\n+    }\n+  }\n+\n+  ~JavaThreadInVMAndNative() {\n+    if (_original_state != _thread_max_state) {\n+      _jt->set_thread_state(_original_state);\n+    }\n+  }\n+\n+  void transition_to_native() {\n+    if (_jt != NULL && _jt->thread_state() != _thread_in_native) {\n+      assert(_jt->thread_state() == _thread_in_vm, \"invariant\");\n+      _jt->set_thread_state(_thread_in_native);\n+    }\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -375,21 +375,0 @@\n-\n-void unlock_locks_on_error(Thread* thread) {\n-  assert(thread != NULL, \"can't be owned by NULL\");\n-\n-#ifdef ASSERT\n-  \/\/ The debug code tracks all owned mutex\/monitors.\n-  Mutex* owned_lock = thread->owned_locks();\n-  while (owned_lock != NULL) {\n-    Mutex* next = owned_lock->next();\n-    owned_lock->unlock();\n-    owned_lock = next;\n-  }\n-#else\n-  \/\/ The _mutex_array is only a subset of mutex\/monitors that may exist.\n-  for (int i = 0; i < _num_mutex; i++) {\n-     if (_mutex_array[i]->owner() == thread) {\n-       _mutex_array[i]->unlock();\n-     }\n-  }\n-#endif \/\/ ASSERT\n-}\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -175,2 +175,1 @@\n-\/\/ Unlock all Mutex\/Monitors currently owned by the thread.\n-void unlock_locks_on_error(Thread* thread);\n+\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1316,21 +1316,0 @@\n-\/\/ Attempt to set the current thread to Native state in VMError.\n-\/\/ By setting it to Native, it allows os::fork_and_exec to execute cmd such as jcmd %p.\n-\/\/ Otherwise, it may end up with a deadlock when dcmds try to synchronize all Java threads\n-\/\/ at safepoints.\n-static bool java_current_transition_into_native() {\n-  Thread* t = Thread::current_or_null();\n-\n-  if (t != nullptr && t->is_Java_thread()) {\n-    JavaThread* jt = JavaThread::cast(t);\n-\n-    if (jt->thread_state() == _thread_in_vm) {\n-      unlock_locks_on_error(t);\n-\n-      ThreadStateTransition::transition_from_vm(jt, _thread_in_native);\n-      return true;\n-    }\n-  }\n-\n-  return false;\n-}\n-\n@@ -1641,0 +1620,1 @@\n+    JavaThreadInVMAndNative jtivm(Thread::current_or_null());\n@@ -1642,1 +1622,0 @@\n-    java_current_transition_into_native();\n@@ -1654,0 +1633,5 @@\n+      \/\/ 8273608: Attempt to set the current thread to Native state.\n+      \/\/ it allows os::fork_and_exec to execute cmd such as jcmd %p.\n+      \/\/ Otherwise, it may end up with a deadlock when dcmds try to synchronize all Java threads\n+      \/\/ at safepoints.\n+      jtivm.transition_to_native();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"}]}