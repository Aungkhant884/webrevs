{"files":[{"patch":"@@ -215,0 +215,30 @@\n+class JavaThreadInVMAndNative : public StackObj {\n+ private:\n+  JavaThread* const _jt;\n+  JavaThreadState _original_state;\n+ public:\n+\n+  JavaThreadInVMAndNative(Thread* t) : _jt(t != NULL && t->is_Java_thread() ? JavaThread::cast(t) : NULL),\n+                                       _original_state(_thread_max_state) {\n+    if (_jt != NULL) {\n+      _original_state = _jt->thread_state();\n+      if (_original_state != _thread_in_vm) {\n+        _jt->set_thread_state(_thread_in_vm);\n+      }\n+    }\n+  }\n+\n+  ~JavaThreadInVMAndNative() {\n+    if (_original_state != _thread_max_state) {\n+      _jt->set_thread_state(_original_state);\n+    }\n+  }\n+\n+  void transition_to_native() {\n+    if (_jt != NULL && _jt->thread_state() != _thread_in_native) {\n+      assert(_jt->thread_state() == _thread_in_vm, \"invariant\");\n+      _jt->set_thread_state(_thread_in_native);\n+    }\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -1340,0 +1341,21 @@\n+\n+class VMErrorForceInNative : public StackObj {\n+ private:\n+  JavaThread* _jt;\n+\n+ public:\n+  VMErrorForceInNative(Thread* t): _jt(t != NULL && t->is_Java_thread() ? JavaThread::cast(t) : NULL) {\n+    if (_jt != NULL && _jt->thread_state() == _thread_in_vm) {\n+      _jt->set_thread_state(_thread_in_native);\n+    } else if (_jt != NULL) {\n+      _jt = NULL;\n+    }\n+  }\n+\n+  ~VMErrorForceInNative() {\n+    if (_jt != NULL) {\n+      _jt->set_thread_state(_thread_in_vm);\n+    }\n+  }\n+};\n+\n@@ -1619,0 +1641,1 @@\n+\n@@ -1630,0 +1653,5 @@\n+      \/\/ 8273608: Attempt to set the current thread to Native state.\n+      \/\/ It allows os::fork_and_exec to execute cmd such as jcmd %p.\n+      \/\/ Otherwise, it may end up with a deadlock when dcmds try to synchronize all Java threads\n+      \/\/ at safepoints.\n+      VMErrorForceInNative fn(Thread::current_or_null());\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestOnErrorWithSelfAttachingJCmd\n+ * @bug 8273608\n+ * @summary Test OnError commands can utilize jcmd %p to attach to itself.\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run main\/othervm TestOnErrorWithSelfAttachingJCmd\n+ *\/\n+import java.nio.ByteBuffer;\n+import java.util.LinkedList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class TestOnErrorWithSelfAttachingJCmd {\n+    private static final int  BUFF_SIZE = 1024 * 1024; \/\/ 1MB\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            LinkedList<Object> list = new LinkedList<Object>();\n+            while (true) {\n+                Object item = ByteBuffer.allocateDirect(BUFF_SIZE);\n+                list.add(item);\n+            }\n+        }\n+\n+        \/\/ Both Thread.print and GC.thread_dump require safepoint synchronization.\n+        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n+        String before = jcmd + \" %p Thread.print\";\n+        String after = jcmd + \" %p GC.heap_dump a.hprof\";\n+\n+        String msg = \"Test Succeeded\";\n+        String cmds = before + \";echo \" + msg + \";\" + after;\n+\n+        ProcessBuilder pb_single = ProcessTools.createJavaProcessBuilder(\n+           \"-XX:MaxDirectMemorySize=10M\",\n+           \"-Xmx10M\",\n+           \"-XX:+UnlockDiagnosticVMOptions\",\n+           \"-XX:AbortVMOnException=java.lang.OutOfMemoryError\",\n+           \"-XX:OnError=\" + cmds,\n+           TestOnErrorWithSelfAttachingJCmd.class.getName(),\n+           \"throwOOME\");\n+\n+        OutputAnalyzer output_single = new OutputAnalyzer(pb_single.start());\n+\n+        \/\/ Actual output should look like this:\n+        \/\/   #\n+        \/\/   # A fatal error has been detected by the Java Runtime Environment:\n+        \/\/   #\n+        \/\/   #  Internal Error (\/home\/xxinliu\/Devel\/jdk\/src\/hotspot\/share\/utilities\/exceptions.cpp:541), pid=36786, tid=36787\n+        \/\/   #  fatal error: Saw java.lang.OutOfMemoryError, aborting\n+        \/\/   ...\n+        \/\/   # -XX:OnError=\"echo Test1 Succeeded\"\n+        \/\/   #   Executing \/bin\/sh -c \"echo Test1 Succeeded\" ...\n+        output_single.shouldContain(\"Saw java.lang.OutOfMemoryError, aborting\");\n+        \/\/ before\n+        output_single.stdoutShouldMatch(\"^Full thread dump\");\n+        \/\/ echo $msg\n+        output_single.stdoutShouldMatch(\"^\" + msg); \/\/ match start of line only\n+        \/\/ after\n+        output_single.stdoutShouldContain(\"Heap dump file created\");\n+\n+        System.out.println(\"PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnErrorWithSelfAttachingJCmd.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}