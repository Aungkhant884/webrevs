{"files":[{"patch":"@@ -376,1 +376,1 @@\n-void unlock_locks_on_error(JavaThread* thread) {\n+void unlock_locks_on_error(Thread* thread) {\n@@ -380,0 +380,1 @@\n+  \/\/ The debug code tracks all owned mutex\/monitors.\n@@ -387,0 +388,1 @@\n+  \/\/ The _mutex_array is only a subset of mutex\/monitors that may exist.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,2 +175,2 @@\n-\/\/ Unlock all Mutex\/Monitors currently owned by a JavaThread.\n-void unlock_locks_on_error(JavaThread* t);\n+\/\/ Unlock all Mutex\/Monitors currently owned by the thread.\n+void unlock_locks_on_error(Thread* thread);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1320,1 +1320,1 @@\n-bool transition_into_native() {\n+static bool java_current_transition_into_native() {\n@@ -1327,1 +1327,1 @@\n-      unlock_locks_on_error(jt);\n+      unlock_locks_on_error(t);\n@@ -1642,1 +1642,1 @@\n-    transition_into_native();\n+    java_current_transition_into_native();\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestOnErrorWithSelfAttachingJCmd\n+ * @bug 8273608\n+ * @summary Test OnError commands can utilize jcmd %p to attach to itself.\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @run main\/othervm TestOnErrorWithSelfAttachingJCmd\n+ *\/\n+import java.nio.ByteBuffer;\n+import java.util.LinkedList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class TestOnErrorWithSelfAttachingJCmd {\n+    private static final int  BUFF_SIZE = 1024 * 1024; \/\/ 1MB\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 1) {\n+            LinkedList<Object> list = new LinkedList<Object>();\n+            while (true) {\n+                Object item = ByteBuffer.allocateDirect(BUFF_SIZE);\n+                list.add(item);\n+            }\n+        }\n+\n+        \/\/ Both Thread.print and GC.thread_dump require safepoint synchronization.\n+        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n+        String before = jcmd + \" %p Thread.print\";\n+        String after = jcmd + \" %p GC.heap_dump a.hprof\";\n+\n+        String msg = \"Test Succeeded\";\n+        String cmds = before + \";echo \" + msg + \";\" + after;\n+\n+        ProcessBuilder pb_single = ProcessTools.createJavaProcessBuilder(\n+           \"-XX:MaxDirectMemorySize=10M\",\n+           \"-Xmx10M\",\n+           \"-XX:+UnlockDiagnosticVMOptions\",\n+           \"-XX:AbortVMOnException=java.lang.OutOfMemoryError\",\n+           \"-XX:OnError=\" + cmds,\n+           TestOnErrorWithSelfAttachingJCmd.class.getName(),\n+           \"throwOOME\");\n+\n+        OutputAnalyzer output_single = new OutputAnalyzer(pb_single.start());\n+\n+        \/\/ Actual output should look like this:\n+        \/\/   #\n+        \/\/   # A fatal error has been detected by the Java Runtime Environment:\n+        \/\/   #\n+        \/\/   #  Internal Error (\/home\/xxinliu\/Devel\/jdk\/src\/hotspot\/share\/utilities\/exceptions.cpp:541), pid=36786, tid=36787\n+        \/\/   #  fatal error: Saw java.lang.OutOfMemoryError, aborting\n+        \/\/   ...\n+        \/\/   # -XX:OnError=\"echo Test1 Succeeded\"\n+        \/\/   #   Executing \/bin\/sh -c \"echo Test1 Succeeded\" ...\n+        output_single.shouldContain(\"Saw java.lang.OutOfMemoryError, aborting\");\n+        \/\/ before\n+        output_single.stdoutShouldMatch(\"^Full thread dump\");\n+        \/\/ echo $msg\n+        output_single.stdoutShouldMatch(\"^\" + msg); \/\/ match start of line only\n+        \/\/ after\n+        output_single.stdoutShouldContain(\"Heap dump file created\");\n+\n+        System.out.println(\"PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnErrorWithSelfAttachingJCmd.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test TestOutOfMemoryErrorFromNIO\n- * @bug 8155004 8273608\n- * @summary Test OutOfMemoryError thrown from NIO. OnError will react to OOME.\n- *     After we transition the current thread into Native, OnError allows jcmd to itself.\n- *\n- * @modules java.base\/jdk.internal.misc\n- * @library \/test\/lib\n- * @run main\/othervm TestOutOfMemoryErrorFromNIO\n- *\/\n-import java.nio.ByteBuffer;\n-import java.util.LinkedList;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.JDKToolFinder;\n-\n-public class TestOutOfMemoryErrorFromNIO {\n-    private static final int  BUFF_SIZE = 10 * 1024 * 1024; \/\/ 10MB\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length == 1) {\n-            LinkedList<Object> list = new LinkedList<Object>();\n-            while (true) {\n-                Object item = ByteBuffer.allocateDirect(BUFF_SIZE);\n-                list.add(item);\n-            }\n-        }\n-\n-        \/\/ Both Thread.print and GC.thread_dump require safepoint synchronization.\n-        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n-        StringBuilder before = new StringBuilder(jcmd);\n-        before.append(\" %p\");\n-        before.append(\" Thread.print\");\n-        StringBuilder after = new StringBuilder(jcmd);\n-        after.append(\" %p\");\n-        after.append(\" GC.heap_dump a.hprof\");\n-\n-        String msg = \"Test Succeeded\";\n-        String cmds = before.toString() + \";echo \" + msg + \";\"\n-                    + after.toString();\n-\n-        ProcessBuilder pb_single = ProcessTools.createJavaProcessBuilder(\n-           \"-XX:MaxDirectMemorySize=100M\",\n-           \"-XX:+UnlockDiagnosticVMOptions\",\n-           \"-XX:AbortVMOnException=java.lang.OutOfMemoryError\",\n-           \"-XX:OnError=\" + cmds,\n-           TestOutOfMemoryErrorFromNIO.class.getName(),\n-           \"throwOOME\");\n-\n-        OutputAnalyzer output_single = new OutputAnalyzer(pb_single.start());\n-\n-        \/* Actual output should look like this:\n-           #\n-           # A fatal error has been detected by the Java Runtime Environment:\n-           #\n-           #  Internal Error (\/home\/xxinliu\/Devel\/jdk\/src\/hotspot\/share\/utilities\/exceptions.cpp:541), pid=36786, tid=36787\n-           #  fatal error: Saw java.lang.OutOfMemoryError, aborting\n-           ...\n-           # -XX:OnError=\"echo Test1 Succeeded\"\n-           #   Executing \/bin\/sh -c \"echo Test1 Succeeded\" ...\n-        *\/\n-        output_single.shouldContain(\"Saw java.lang.OutOfMemoryError, aborting\");\n-        \/\/ before\n-        output_single.stdoutShouldMatch(\"^Full thread dump\");\n-        \/\/ echo $msg\n-        output_single.stdoutShouldMatch(\"^\" + msg); \/\/ match start of line only\n-        \/\/ after\n-        output_single.stdoutShouldContain(\"Heap dump file created\");\n-\n-        System.out.println(\"PASSED\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOutOfMemoryErrorFromNIO.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"}]}