{"files":[{"patch":"@@ -541,8 +541,0 @@\n-                if (!maxProtocolVersion.equals(sessionVersion)) {\n-                    maxProtocolVersion = sessionVersion;\n-\n-                    \/\/ Update protocol version number in underlying socket and\n-                    \/\/ handshake output stream, so that the output records\n-                    \/\/ (at the record layer) have the correct version\n-                    chc.setVersion(sessionVersion);\n-                }\n@@ -655,4 +647,0 @@\n-            if (session != null) {\n-                chc.handshakeSession = session;\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ClientHello.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-     * 4 test iterations\n+     * 3 test iterations\n@@ -83,1 +83,1 @@\n-     * - Session resumption should fail (Attempted to resume with TLSv1)\n+     * - Connection should succeed but with a new session due to TLS protocol version change\n@@ -85,0 +85,1 @@\n+     * - Session \"B\" is created\n@@ -86,5 +87,1 @@\n-     * - Session \"A\" should now be invalidated and no longer attempted\n-     * - Handshake should succeed\n-     * = Session \"B\" established\n-     * 4) 4th iteration, same server\/client config\n-     * - Session \"B\" should resume without issue\n+     * - Session \"B\" should continue to be in use\n@@ -93,1 +90,1 @@\n-        for (int i = 1; i <= 4; i++) {\n+        for (int i = 1; i <= 3; i++) {\n@@ -105,0 +102,1 @@\n+        sslSocket.startHandshake();\n@@ -106,9 +104,2 @@\n-        try {\n-            sslSocket.startHandshake();\n-        } catch (Exception e) {\n-\n-            if (testIterationCount != 2) {\n-                \/\/ only the 2nd handshake should fail (in which case we continue)\n-                throw new RuntimeException(\"Unexpected exception\", e);\n-            }\n-            return;\n+        if (testIterationCount == 2 && Objects.equals(cacheSession, sslSocket.getSession())) {\n+            throw new RuntimeException(\"Same session should not have resumed\");\n@@ -116,10 +107,2 @@\n-        if (testIterationCount == 1) {\n-            \/\/ capture the session ID\n-            cacheSession = sslSocket.getSession();\n-        } else {\n-            \/\/ should be on 3rd or 4th iteration\n-            \/\/ new session ID should be in use (check in 4th iteration)\n-            if (Objects.equals(cacheSession, sslSocket.getSession()) && testIterationCount != 4) {\n-                throw new RuntimeException(\"Same session should not be resumed\");\n-            }\n-            cacheSession = sslSocket.getSession();\n+        if (testIterationCount == 3 && !Objects.equals(cacheSession, sslSocket.getSession())) {\n+            throw new RuntimeException(\"Same session should have resumed\");\n@@ -127,0 +110,2 @@\n+        \n+        cacheSession = sslSocket.getSession();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/InvalidateSession.java","additions":12,"deletions":27,"binary":false,"changes":39,"status":"modified"}]}