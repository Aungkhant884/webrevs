{"files":[{"patch":"@@ -537,9 +537,0 @@\n-    \/**\n-     * Set the active protocol version and propagate it to the SSLSocket\n-     * and our handshake streams. Called from ClientHandshaker\n-     * and ServerHandshaker with the negotiated protocol version.\n-     *\/\n-    void setVersion(ProtocolVersion protocolVersion) {\n-        this.conContext.protocolVersion = protocolVersion;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/TransportContext.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates\n@@ -40,5 +40,5 @@\n-public class InvalidateSession {\n-    static String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n-    static String keyStoreFile = \"keystore\";\n-    static String trustStoreFile = \"truststore\";\n-    static String passwd = \"passphrase\";\n+public class InvalidateSession implements SSLContextTemplate {\n+\n+    static ServerSocketFactory serverSsf = null;\n+    static SSLSocketFactory clientSsf = null;\n+\n@@ -50,12 +50,0 @@\n-        String keyFilename =\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + keyStoreFile;\n-        String trustFilename =\n-                System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                        \"\/\" + trustStoreFile;\n-\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n@@ -65,1 +53,0 @@\n-\n@@ -67,4 +54,0 @@\n-        server = startServer();\n-        while (!server.started) {\n-            Thread.yield();\n-        }\n@@ -73,1 +56,1 @@\n-        test.clientTest();\n+        test.sessionTest();\n@@ -89,1 +72,8 @@\n-    private void clientTest() throws Exception {\n+    private void sessionTest() throws Exception {\n+        serverSsf = createServerSSLContext().getServerSocketFactory();\n+        clientSsf = createClientSSLContext().getSocketFactory();\n+        server = startServer();\n+        while (!server.started) {\n+            Thread.yield();\n+        }\n+\n@@ -99,2 +89,1 @@\n-        SSLSocketFactory ssf = (SSLSocketFactory) SSLSocketFactory.getDefault();\n-        SSLSocket sslSocket = (SSLSocket) ssf.createSocket(\"localhost\", server.port);\n+        SSLSocket sslSocket = (SSLSocket) clientSsf.createSocket(\"localhost\", server.port);\n@@ -104,0 +93,2 @@\n+        System.out.println(\"Got session: \" + sslSocket.getSession());\n+\n@@ -113,1 +104,0 @@\n-        System.out.println(\"Got session: \" + sslSocket.getSession());\n@@ -141,2 +131,0 @@\n-                SSLContext sc = SSLContext.getDefault();\n-                ServerSocketFactory fac = sc.getServerSocketFactory();\n@@ -144,1 +132,1 @@\n-                        fac.createServerSocket(0);\n+                        serverSsf.createServerSocket(0);\n@@ -173,1 +161,2 @@\n-}\n\\ No newline at end of file\n+}\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/InvalidateSession.java","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"}]}