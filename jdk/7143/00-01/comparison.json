{"files":[{"patch":"@@ -75,2 +75,9 @@\n-  inline void record_steal_attempt(uint kind) { ++_stats[steal_attempt]; ++_stats[steal_empty + kind]; }\n-  inline void record_contended_in_a_row(uint in_a_row) { if (_stats[steal_max_contended_in_a_row] < in_a_row) _stats[steal_max_contended_in_a_row] = in_a_row; }\n+  inline void record_steal_attempt(uint kind) {\n+    ++_stats[steal_attempt];\n+    ++_stats[steal_empty + kind];\n+  }\n+  inline void record_contended_in_a_row(uint in_a_row) {\n+    if (_stats[steal_max_contended_in_a_row] < in_a_row) {\n+      _stats[steal_max_contended_in_a_row] = in_a_row;\n+    }\n+  }\n@@ -276,0 +283,10 @@\n+  \/\/ The result of a pop_global operation. The value order of this must correspond\n+  \/\/ to the order in the corresponding TaskQueueStats StatId.\n+  enum class PopResult : uint {\n+    Empty     = 0, \/\/ Queue has been empty. t is undefined.\n+    Contended = 1, \/\/ Contention prevented successful retrieval, queue most likely contains elements. t is undefined.\n+    Success   = 2  \/\/ Successfully retrieved an element, t contains it.\n+  };\n+\n+  TASKQUEUE_STATS_ONLY(void record_steal_attempt(PopResult kind) { stats.record_steal_attempt((uint)kind); })\n+\n@@ -336,0 +353,2 @@\n+  typedef typename TaskQueueSuper<N, F>::PopResult PopResult;\n+\n@@ -365,6 +384,0 @@\n-  \/\/ The result value order of this correspond to the order in the corresponding StatId.\n-  enum PopResult {\n-    Empty     = 0, \/\/ Queue has been empty. t is undefined.\n-    Contended = 1, \/\/ Contention prevented successful retrieval, queue most likely contains elements. t is undefined.\n-    Success   = 2  \/\/ Successfully retrieved an element, t contains it.\n-  };\n@@ -464,0 +477,1 @@\n+  typedef typename T::PopResult PopResult;\n@@ -472,1 +486,1 @@\n-  typename T::PopResult steal_best_of_2(uint queue_num, E& t);\n+  PopResult steal_best_of_2(uint queue_num, E& t);\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -271,3 +271,2 @@\n-typename T::PopResult GenericTaskQueueSet<T, F>::steal_best_of_2(uint queue_num, E& t) {\n-  typedef typename T::PopResult PopResult;\n-\n+typename GenericTaskQueueSet<T, F>::PopResult GenericTaskQueueSet<T, F>::steal_best_of_2(uint queue_num, E& t) {\n+  T* const local_queue = queue(queue_num);\n@@ -275,1 +274,0 @@\n-    T* const local_queue = _queues[queue_num];\n@@ -292,2 +290,2 @@\n-    uint sz1 = _queues[k1]->size();\n-    uint sz2 = _queues[k2]->size();\n+    uint sz1 = queue(k1)->size();\n+    uint sz2 = queue(k2)->size();\n@@ -296,1 +294,1 @@\n-    PopResult suc = T::Empty;\n+    PopResult suc = PopResult::Empty;\n@@ -300,2 +298,2 @@\n-      suc = _queues[k2]->pop_global(t);\n-      TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal_attempt((uint)suc);)\n+      suc = queue(k2)->pop_global(t);\n+      TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(suc);)\n@@ -304,2 +302,2 @@\n-      suc = _queues[k1]->pop_global(t);\n-      TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal_attempt((uint)suc);)\n+      suc = queue(k1)->pop_global(t);\n+      TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(suc);)\n@@ -308,1 +306,1 @@\n-    if (suc == T::Success) {\n+    if (suc == PopResult::Success) {\n@@ -318,2 +316,2 @@\n-    PopResult res = _queues[k]->pop_global(t);\n-    TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal_attempt((uint)res);)\n+    PopResult res = queue(k)->pop_global(t);\n+    TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(res);)\n@@ -323,2 +321,2 @@\n-    TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal_attempt((uint)T::Empty);)\n-    return T::Empty;\n+    TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(PopResult::Empty);)\n+    return PopResult::Empty;\n@@ -334,2 +332,2 @@\n-    typename T::PopResult sr = steal_best_of_2(queue_num, t);\n-    if (sr == T::Success) {\n+    PopResult sr = steal_best_of_2(queue_num, t);\n+    if (sr == PopResult::Success) {\n@@ -337,1 +335,1 @@\n-    } else if (sr == T::Contended) {\n+    } else if (sr == PopResult::Contended) {\n@@ -343,1 +341,1 @@\n-      assert(sr == T::Empty, \"must be\");\n+      assert(sr == PopResult::Empty, \"must be\");\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"}]}