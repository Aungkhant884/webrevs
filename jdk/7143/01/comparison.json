{"files":[{"patch":"@@ -37,1 +37,3 @@\n-  \"qpush\", \"qpop\", \"qpop-s\", \"qattempt\", \"qsteal\", \"opush\", \"omax\"\n+  \"push\", \"pop\", \"pop-slow\",\n+  \"st-attempt\", \"st-empty\", \"st-ctdd\", \"st-success\", \"st-ctdd-max\", \"st-biasdrop\",\n+  \"ovflw-push\", \"ovflw-max\"\n@@ -89,3 +91,3 @@\n-  assert(get(push) == get(pop) + get(steal),\n-         \"push=\" SIZE_FORMAT \" pop=\" SIZE_FORMAT \" steal=\" SIZE_FORMAT,\n-         get(push), get(pop), get(steal));\n+  assert(get(push) == get(pop) + get(steal_success),\n+         \"push=%zu pop=%zu steal=%zu\",\n+         get(push), get(pop), get(steal_success));\n@@ -93,1 +95,1 @@\n-         \"pop_slow=\" SIZE_FORMAT \" pop=\" SIZE_FORMAT,\n+         \"pop_slow=%zu pop=%zu\",\n@@ -95,3 +97,12 @@\n-  assert(get(steal) <= get(steal_attempt),\n-         \"steal=\" SIZE_FORMAT \" steal_attempt=\" SIZE_FORMAT,\n-         get(steal), get(steal_attempt));\n+  assert(get(steal_empty) <= get(steal_attempt),\n+         \"steal_empty=%zu steal_attempt=%zu\",\n+         get(steal_empty), get(steal_attempt));\n+  assert(get(steal_contended) <= get(steal_attempt),\n+         \"steal_contended=%zu steal_attempt=%zu\",\n+         get(steal_contended), get(steal_attempt));\n+  assert(get(steal_success) <= get(steal_attempt),\n+         \"steal_success=%zu steal_attempt=%zu\",\n+         get(steal_success), get(steal_attempt));\n+  assert(get(steal_empty) + get(steal_contended) + get(steal_success) == get(steal_attempt),\n+         \"steal_empty=%zu steal_contended=%zu steal_success=%zu steal_attempt=%zu\",\n+         get(steal_empty), get(steal_contended), get(steal_success), get(steal_attempt));\n@@ -99,1 +110,1 @@\n-         \"overflow=\" SIZE_FORMAT \" push=\" SIZE_FORMAT,\n+         \"overflow=%zu push=%zu\",\n@@ -102,1 +113,1 @@\n-         \"overflow_max_len=\" SIZE_FORMAT \" overflow=\" SIZE_FORMAT,\n+         \"overflow_max_len=%zu overflow=%zu\",\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -59,1 +59,5 @@\n-    steal,            \/\/ number of taskqueue steals\n+    steal_empty,      \/\/ number of empty taskqueues\n+    steal_contended,  \/\/ number of contended steals\n+    steal_success,    \/\/ number of successful steals\n+    steal_max_contended_in_a_row, \/\/ maximum number of contended steals in a row\n+    steal_bias_drop,  \/\/ number of times the bias has been dropped\n@@ -71,2 +75,10 @@\n-  inline void record_steal_attempt() { ++_stats[steal_attempt]; }\n-  inline void record_steal()         { ++_stats[steal]; }\n+  inline void record_steal_attempt(uint kind) {\n+    ++_stats[steal_attempt];\n+    ++_stats[steal_empty + kind];\n+  }\n+  inline void record_contended_in_a_row(uint in_a_row) {\n+    if (_stats[steal_max_contended_in_a_row] < in_a_row) {\n+      _stats[steal_max_contended_in_a_row] = in_a_row;\n+    }\n+  }\n+  inline void record_bias_drop() { ++_stats[steal_bias_drop]; }\n@@ -84,1 +96,1 @@\n-                           unsigned int width = 10);\n+                           unsigned int width = 11);\n@@ -86,1 +98,1 @@\n-  void print(outputStream* const stream = tty, unsigned int width = 10) const;\n+  void print(outputStream* const stream = tty, unsigned int width = 11) const;\n@@ -271,0 +283,10 @@\n+  \/\/ The result of a pop_global operation. The value order of this must correspond\n+  \/\/ to the order in the corresponding TaskQueueStats StatId.\n+  enum class PopResult : uint {\n+    Empty     = 0, \/\/ Queue has been empty. t is undefined.\n+    Contended = 1, \/\/ Contention prevented successful retrieval, queue most likely contains elements. t is undefined.\n+    Success   = 2  \/\/ Successfully retrieved an element, t contains it.\n+  };\n+\n+  TASKQUEUE_STATS_ONLY(void record_steal_attempt(PopResult kind) { stats.record_steal_attempt((uint)kind); })\n+\n@@ -331,0 +353,2 @@\n+  typedef typename TaskQueueSuper<N, F>::PopResult PopResult;\n+\n@@ -360,1 +384,1 @@\n-  bool pop_global(E& t);\n+  PopResult pop_global(E& t);\n@@ -390,1 +414,4 @@\n-  void invalidate_last_stolen_queue_id()     { _last_stolen_queue_id = InvalidQueueId; }\n+  void invalidate_last_stolen_queue_id()     {\n+    TASKQUEUE_STATS_ONLY(stats.record_bias_drop();)\n+    _last_stolen_queue_id = InvalidQueueId;\n+  }\n@@ -450,0 +477,1 @@\n+  typedef typename T::PopResult PopResult;\n@@ -455,1 +483,4 @@\n-  bool steal_best_of_2(uint queue_num, E& t);\n+  \/\/ Attempts to steal an element from a foreign queue (!= queue_num), setting\n+  \/\/ the result in t. Validity of this value and the return value is the same\n+  \/\/ as for the last pop_global() operation.\n+  PopResult steal_best_of_2(uint queue_num, E& t);\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":39,"deletions":8,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-bool GenericTaskQueue<E, F, N>::pop_global(E& t) {\n+typename GenericTaskQueue<E, F, N>::PopResult GenericTaskQueue<E, F, N>::pop_global(E& t) {\n@@ -229,1 +229,1 @@\n-    return false;\n+    return PopResult::Empty;\n@@ -243,1 +243,1 @@\n-  return resAge == oldAge;\n+  return resAge == oldAge ? PopResult::Success : PopResult::Contended;\n@@ -270,2 +270,3 @@\n-template<class T, MEMFLAGS F> bool\n-GenericTaskQueueSet<T, F>::steal_best_of_2(uint queue_num, E& t) {\n+template<class T, MEMFLAGS F>\n+typename GenericTaskQueueSet<T, F>::PopResult GenericTaskQueueSet<T, F>::steal_best_of_2(uint queue_num, E& t) {\n+  T* const local_queue = queue(queue_num);\n@@ -273,1 +274,0 @@\n-    T* const local_queue = _queues[queue_num];\n@@ -290,2 +290,2 @@\n-    uint sz1 = _queues[k1]->size();\n-    uint sz2 = _queues[k2]->size();\n+    uint sz1 = queue(k1)->size();\n+    uint sz2 = queue(k2)->size();\n@@ -294,1 +294,1 @@\n-    bool suc = false;\n+    PopResult suc = PopResult::Empty;\n@@ -298,1 +298,2 @@\n-      suc = _queues[k2]->pop_global(t);\n+      suc = queue(k2)->pop_global(t);\n+      TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(suc);)\n@@ -301,1 +302,2 @@\n-      suc = _queues[k1]->pop_global(t);\n+      suc = queue(k1)->pop_global(t);\n+      TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(suc);)\n@@ -304,1 +306,1 @@\n-    if (suc) {\n+    if (suc == PopResult::Success) {\n@@ -314,1 +316,3 @@\n-    return _queues[k]->pop_global(t);\n+    PopResult res = queue(k)->pop_global(t);\n+    TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(res);)\n+    return res;\n@@ -317,1 +321,2 @@\n-    return false;\n+    TASKQUEUE_STATS_ONLY(local_queue->record_steal_attempt(PopResult::Empty);)\n+    return PopResult::Empty;\n@@ -321,7 +326,8 @@\n-template<class T, MEMFLAGS F> bool\n-GenericTaskQueueSet<T, F>::steal(uint queue_num, E& t) {\n-  assert(queue_num < _n, \"index out of range.\");\n-  for (uint i = 0; i < 2 * _n; i++) {\n-    TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal_attempt());\n-    if (steal_best_of_2(queue_num, t)) {\n-      TASKQUEUE_STATS_ONLY(queue(queue_num)->stats.record_steal());\n+template<class T, MEMFLAGS F>\n+bool GenericTaskQueueSet<T, F>::steal(uint queue_num, E& t) {\n+  uint const num_retries = 2 * _n;\n+\n+  TASKQUEUE_STATS_ONLY(uint contended_in_a_row = 0;)\n+  for (uint i = 0; i < num_retries; i++) {\n+    PopResult sr = steal_best_of_2(queue_num, t);\n+    if (sr == PopResult::Success) {\n@@ -329,0 +335,8 @@\n+    } else if (sr == PopResult::Contended) {\n+      TASKQUEUE_STATS_ONLY(\n+        contended_in_a_row++;\n+        queue(queue_num)->stats.record_contended_in_a_row(contended_in_a_row);\n+      )\n+    } else {\n+      assert(sr == PopResult::Empty, \"must be\");\n+      TASKQUEUE_STATS_ONLY(contended_in_a_row = 0;)\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":35,"deletions":21,"binary":false,"changes":56,"status":"modified"}]}