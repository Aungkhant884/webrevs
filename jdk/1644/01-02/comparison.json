{"files":[{"patch":"@@ -210,1 +210,1 @@\n-        return nonce.clone();\n+        return (nonce != null) ? nonce.clone() : null;\n@@ -232,1 +232,2 @@\n-            byte[] nonceData = initialized ? nonce : createRandomNonce(null);\n+            byte[] nonceData = (initialized || nonce != null) ? nonce :\n+                    createRandomNonce(null);\n@@ -511,1 +512,1 @@\n-    private byte[] createRandomNonce(SecureRandom random) {\n+    private static byte[] createRandomNonce(SecureRandom random) {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ChaCha20Cipher.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8153029\n+ * @bug 8153029 8257769\n@@ -316,0 +316,30 @@\n+        \/\/ Reinit test: instantiate, init(no param), getParam, encrypt,\n+        \/\/ then init(no param).  Should work and the parameters should be\n+        \/\/ different after each init.\n+        cc20p1305 = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+        cc20p1305.init(Cipher.ENCRYPT_MODE, DEF_KEY);\n+        byte[] paramInitOne = getNonceFromParams(cc20p1305.getParameters());\n+        \/\/ Perform a simple encryption operation\n+        cc20p1305.doFinal(aeadTestList.get(0).input);\n+        \/\/ reinit (no params)\n+        cc20p1305.init(Cipher.ENCRYPT_MODE, DEF_KEY);\n+        byte[] paramInitTwo = getNonceFromParams(cc20p1305.getParameters());\n+        if (MessageDigest.isEqual(paramInitOne, paramInitTwo)) {\n+            throw new RuntimeException(\"Unexpected nonce match between \" +\n+                    \"pre and post-init getParameters() calls\");\n+        }\n+        System.out.println(\"Test Passed\");\n+\n+        \/\/ Reinit test: instantiate, init(no param), doFinal, then doFinal\n+        \/\/ again without intervening init.  Should fail due to no-reuse\n+        \/\/ protections.\n+        try {\n+            cc20p1305 = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+            cc20p1305.init(Cipher.ENCRYPT_MODE, DEF_KEY);\n+            cc20p1305.doFinal(aeadTestList.get(0).input);\n+            cc20p1305.doFinal(aeadTestList.get(0).input);\n+            throw new RuntimeException(\"Illegal key\/nonce reuse\");\n+        } catch (IllegalStateException ise) {\n+            System.out.println(\"Caught expected exception: \" + ise);\n+        }\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/ChaCha20Poly1305ParamTest.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}