{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -33,0 +34,1 @@\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -34,5 +36,0 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n@@ -618,26 +615,0 @@\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -283,24 +283,0 @@\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return super.makeIntsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return super.makeLongsSpliterator(index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return super.makeDoublesSpliterator(index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/SplittableRandom.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,5 +54,1 @@\n-import jdk.internal.util.random.RandomSupport.AbstractSpliteratorGenerator;\n-import jdk.internal.util.random.RandomSupport.RandomIntsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomLongsSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomDoublesSpliterator;\n-import jdk.internal.util.random.RandomSupport.RandomGeneratorProperties;\n+import jdk.internal.util.random.RandomSupport.*;\n@@ -399,42 +395,0 @@\n-    private static final class ThreadLocalRandomProxy extends Random {\n-        @java.io.Serial\n-        static final long serialVersionUID = 0L;\n-\n-\n-        static final AbstractSpliteratorGenerator proxy = new ThreadLocalRandomProxy();\n-\n-\n-        public int nextInt() {\n-            return ThreadLocalRandom.current().nextInt();\n-        }\n-\n-        public long nextLong() {\n-            return ThreadLocalRandom.current().nextLong();\n-        }\n-    }\n-\n-    \/\/ Methods required by class AbstractSpliteratorGenerator\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-        return new RandomIntsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-        return new RandomLongsSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n-    \/**\n-     * @hidden\n-     *\/\n-    @Override\n-    public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-        return new RandomDoublesSpliterator(ThreadLocalRandomProxy.proxy, index, fence, origin, bound);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadLocalRandom.java","additions":1,"deletions":47,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -374,25 +374,0 @@\n-     * Returns a stream of matching Providers.\n-     *\n-     * @param category  {@link RandomGenerator} sub-interface class to filter\n-     * @param <T>       {@link RandomGenerator} sub-interface return type\n-     *\n-     * RandomGenerators that are marked as deprecated or are not properly configured are not included in the result.\n-     *\n-     * @implSpec Availability is determined by RandomGeneratorFactory using the service provider API\n-     * to locate implementations of the RandomGenerator interface.\n-     *\n-     * @return Stream of matching {@link RandomGeneratorFactory RandomGeneratorFactory(s)}.\n-     *\n-     * @hidden\n-     *\/\n-    public static <T extends RandomGenerator> Stream<RandomGeneratorFactory<T>> all(Class<T> category) {\n-        Map<String, Provider<? extends RandomGenerator>> fm = getFactoryMap();\n-        return fm.values()\n-                 .stream()\n-                 .filter(p -> isSubclass(category, p) &&\n-                              !p.type().isAnnotationPresent(Deprecated.class) &&\n-                              p.type().isAnnotationPresent(RandomGeneratorProperties.class))\n-                 .map(RandomGeneratorFactory::new);\n-    }\n-\n-    \/**\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGeneratorFactory.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -1408,4 +1410,0 @@\n-     * {@link AbstractSpliteratorGenerator#makeIntsSpliterator(long, long, int, int) makeIntsSpliterator}(index, fence, origin, bound),\n-     * {@link AbstractSpliteratorGenerator#makeLongsSpliterator(long, long, long, long) makeLongsSpliterator}(index, fence, origin, bound),\n-     * and\n-     * {@link AbstractSpliteratorGenerator#makeDoublesSpliterator(long, long, double, double) makeDoublesSpliterator}(index, fence, origin, bound).\n@@ -1428,2 +1426,1 @@\n-         * that take no arguments) and makeIntsSpliterator,\n-         * makeLongsSpliterator, and makeDoublesSpliterator.\n+         * that take no arguments).\n@@ -1441,17 +1438,6 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfInt} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code int} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfInt}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound);\n+        \/\/ Bug 8265221\n+        \/\/ To prevent leaking private interfaces.\n+        \/\/\n+        private static final class ThreadLocalRandomProxy extends Random {\n+            @java.io.Serial\n+            static final long serialVersionUID = 0L;\n@@ -1459,17 +1445,1 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfLong} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code long} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfLong}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound);\n+            static final AbstractSpliteratorGenerator PROXY = new ThreadLocalRandomProxy();\n@@ -1477,17 +1447,32 @@\n-        \/**\n-         * Create an instance of {@link Spliterator.OfDouble} that for each\n-         * traversal position between the specified index (inclusive) and the\n-         * specified fence (exclusive) generates a pseudorandomly chosen\n-         * {@code double} value between the specified origin (inclusive) and the\n-         * specified bound (exclusive).\n-         *\n-         * @param index the (inclusive) lower bound on traversal positions\n-         * @param fence the (exclusive) upper bound on traversal positions\n-         * @param origin the (inclusive) lower bound on the pseudorandom values to be generated\n-         * @param bound the (exclusive) upper bound on the pseudorandom values to be generated\n-         *\n-         * @return an instance of {@link Spliterator.OfDouble}\n-         *\n-         * @hidden\n-         *\/\n-        public abstract Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound);\n+            public int nextInt() {\n+                return ThreadLocalRandom.current().nextInt();\n+            }\n+\n+            public long nextLong() {\n+                return ThreadLocalRandom.current().nextLong();\n+            }\n+        }\n+\n+        private Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomIntsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomIntsSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n+\n+        private Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomLongsSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomLongsSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n+\n+        private Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n+            if (this instanceof ThreadLocalRandom) {\n+                return new RandomDoublesSpliterator(ThreadLocalRandomProxy.PROXY, index, fence, origin, bound);\n+            } else {\n+                return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n+            }\n+        }\n@@ -1664,14 +1649,0 @@\n-        \/\/ Methods required by class AbstractSpliteratorGenerator\n-\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-        }\n-\n@@ -2106,12 +2077,0 @@\n-        public Spliterator.OfInt makeIntsSpliterator(long index, long fence, int origin, int bound) {\n-            return new RandomIntsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfLong makeLongsSpliterator(long index, long fence, long origin, long bound) {\n-            return new RandomLongsSpliterator(this, index, fence, origin, bound);\n-        }\n-\n-        public Spliterator.OfDouble makeDoublesSpliterator(long index, long fence, double origin, double bound) {\n-            return new RandomDoublesSpliterator(this, index, fence, origin, bound);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":42,"deletions":83,"binary":false,"changes":125,"status":"modified"}]}