{"files":[{"patch":"@@ -4908,1 +4908,1 @@\n-  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n@@ -4923,1 +4923,1 @@\n-  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -770,7 +770,7 @@\n-     Node* lshift = in(1)->in(2);\n-     Node* rshift = in(2)->in(2);\n-     Node* shift = rotate_shift(phase, lshift, rshift, 0x1F);\n-     if (shift != NULL) {\n-       return new RotateLeftNode(in(1)->in(1), shift, TypeInt::INT);\n-     }\n-     return NULL;\n+    Node* lshift = in(1)->in(2);\n+    Node* rshift = in(2)->in(2);\n+    Node* shift = rotate_shift(phase, lshift, rshift, 0x1F);\n+    if (shift != NULL) {\n+      return new RotateLeftNode(in(1)->in(1), shift, TypeInt::INT);\n+    }\n+    return NULL;\n@@ -780,6 +780,6 @@\n-     Node *rshift = in(1)->in(2);\n-     Node *lshift = in(2)->in(2);\n-     Node* shift = rotate_shift(phase, rshift, lshift, 0x1F);\n-     if (shift != NULL) {\n-       return new RotateRightNode(in(1)->in(1), shift, TypeInt::INT);\n-     }\n+    Node* rshift = in(1)->in(2);\n+    Node* lshift = in(2)->in(2);\n+    Node* shift = rotate_shift(phase, rshift, lshift, 0x1F);\n+    if (shift != NULL) {\n+      return new RotateRightNode(in(1)->in(1), shift, TypeInt::INT);\n+    }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1444,0 +1444,13 @@\n+Node* RotateLeftNode::Identity(PhaseGVN* phase) {\n+  const Type* t1 = phase->type(in(1));\n+  if (t1 == Type::TOP) {\n+    return this;\n+  }\n+  \/\/ Rotate by a multiple of 32\/64 does nothing\n+  int mask = (t1->isa_int() ? BitsPerJavaInteger : BitsPerJavaLong) - 1;\n+  if ((getShiftCon(phase, this, -1) & mask) == 0) {\n+    return in(1);\n+  }\n+  return this;\n+}\n+\n@@ -1460,1 +1473,1 @@\n-    \/\/ Shift by zero does nothing\n+    \/\/ Rotate by zero does nothing\n@@ -1464,1 +1477,0 @@\n-\n@@ -1479,1 +1491,1 @@\n-    \/\/ Shift by zero does nothing\n+    \/\/ Rotate by zero does nothing\n@@ -1483,1 +1495,0 @@\n-\n@@ -1508,0 +1519,13 @@\n+Node* RotateRightNode::Identity(PhaseGVN* phase) {\n+  const Type* t1 = phase->type(in(1));\n+  if (t1 == Type::TOP) {\n+    return this;\n+  }\n+  \/\/ Rotate by a multiple of 32\/64 does nothing\n+  int mask = (t1->isa_int() ? BitsPerJavaInteger : BitsPerJavaLong) - 1;\n+  if ((getShiftCon(phase, this, -1) & mask) == 0) {\n+    return in(1);\n+  }\n+  return this;\n+}\n+\n@@ -1524,1 +1548,1 @@\n-    \/\/ Shift by zero does nothing\n+    \/\/ Rotate by zero does nothing\n@@ -1533,1 +1557,0 @@\n-\n@@ -1542,1 +1565,1 @@\n-    \/\/ Shift by zero does nothing\n+    \/\/ Rotate by zero does nothing\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -223,0 +223,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n@@ -235,0 +236,1 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8248830\n+ * @bug 8248830 8256823\n@@ -283,0 +283,56 @@\n+    public static void test_rol_int_zero(int val) {\n+        \/\/ Count is known to be zero only after loop opts\n+        int count = 42;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                count = 0;\n+            }\n+        }\n+        int res = Integer.rotateLeft(val, count);\n+        if (res != val) {\n+            throw new RuntimeException(\"test_rol_int_zero failed: \" + res + \" != \" + val);\n+        }\n+    }\n+\n+    public static void test_rol_long_zero(long val) {\n+        \/\/ Count is known to be zero only after loop opts\n+        int count = 42;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                count = 0;\n+            }\n+        }\n+        long res = Long.rotateLeft(val, count);\n+        if (res != val) {\n+            throw new RuntimeException(\"test_rol_long_zero failed: \" + res + \" != \" + val);\n+        }\n+    }\n+\n+    public static void test_ror_int_zero(int val) {\n+        \/\/ Count is known to be zero only after loop opts\n+        int count = 42;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                count = 0;\n+            }\n+        }\n+        int res = Integer.rotateRight(val, count);\n+        if (res != val) {\n+            throw new RuntimeException(\"test_ror_int_zero failed: \" + res + \" != \" + val);\n+        }\n+    }\n+\n+    public static void test_ror_long_zero(long val) {\n+        \/\/ Count is known to be zero only after loop opts\n+        int count = 42;\n+        for (int i = 0; i < 4; i++) {\n+            if ((i % 2) == 0) {\n+                count = 0;\n+            }\n+        }\n+        long res = Long.rotateRight(val, count);\n+        if (res != val) {\n+            throw new RuntimeException(\"test_ror_long_zero failed: \" + res + \" != \" + val);\n+        }\n+    }\n+\n@@ -303,0 +359,4 @@\n+          test_rol_int_zero(i);\n+          test_rol_long_zero(i);\n+          test_ror_int_zero(i);\n+          test_ror_long_zero(i);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestRotate.java","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"}]}