{"files":[{"patch":"@@ -640,7 +640,7 @@\n-static int getShiftCon(PhaseGVN *phase, Node *shiftNode, int retVal) {\n-  const Type *t = phase->type(shiftNode->in(2));\n-  if (t == Type::TOP) return retVal;       \/\/ Right input is dead.\n-  const TypeInt *t2 = t->isa_int();\n-  if (!t2 || !t2->is_con()) return retVal; \/\/ Right input is a constant.\n-\n-  return t2->get_con();\n+static bool const_shift_count(PhaseGVN* phase, Node* shiftNode, int* count) {\n+  const TypeInt* tcount = phase->type(shiftNode->in(2))->isa_int();\n+  if (tcount != NULL && tcount->is_con()) {\n+    *count = tcount->get_con();\n+    return true;\n+  }\n+  return false;\n@@ -649,5 +649,8 @@\n-static int maskShiftAmount(PhaseGVN *phase, Node *shiftNode, int nBits) {\n-  int       shift = getShiftCon(phase, shiftNode, 0);\n-  int maskedShift = shift & (nBits - 1);\n-\n-  if (maskedShift == 0) return 0;         \/\/ Let Identity() handle 0 shift count.\n+static int maskShiftAmount(PhaseGVN* phase, Node* shiftNode, int nBits) {\n+  int count = 0;\n+  if (const_shift_count(phase, shiftNode, &count)) {\n+    int maskedShift = count & (nBits - 1);\n+    if (maskedShift == 0) {\n+      \/\/ Let Identity() handle 0 shift count.\n+      return 0;\n+    }\n@@ -655,3 +658,5 @@\n-  if (shift != maskedShift) {\n-    shiftNode->set_req(2, phase->intcon(maskedShift)); \/\/ Replace shift count with masked value.\n-    phase->igvn_rehash_node_delayed(shiftNode);\n+    if (count != maskedShift) {\n+      shiftNode->set_req(2, phase->intcon(maskedShift)); \/\/ Replace shift count with masked value.\n+      phase->igvn_rehash_node_delayed(shiftNode);\n+    }\n+    return maskedShift;\n@@ -659,2 +664,1 @@\n-\n-  return maskedShift;\n+  return 0;\n@@ -665,1 +669,6 @@\n-  return ((getShiftCon(phase, this, -1) & (BitsPerJavaInteger - 1)) == 0) ? in(1) : this;\n+  int count = 0;\n+  if (const_shift_count(phase, this, &count) && (count & (BitsPerJavaInteger - 1)) == 0) {\n+    \/\/ Shift by a multiple of 32 does nothing\n+    return in(1);\n+  }\n+  return this;\n@@ -773,1 +782,6 @@\n-  return ((getShiftCon(phase, this, -1) & (BitsPerJavaLong - 1)) == 0) ? in(1) : this;\n+  int count = 0;\n+  if (const_shift_count(phase, this, &count) && (count & (BitsPerJavaLong - 1)) == 0) {\n+    \/\/ Shift by a multiple of 64 does nothing\n+    return in(1);\n+  }\n+  return this;\n@@ -878,17 +892,20 @@\n-  int shift = getShiftCon(phase, this, -1);\n-  if (shift == -1) return this;\n-  if ((shift & (BitsPerJavaInteger - 1)) == 0) return in(1);\n-\n-  \/\/ Check for useless sign-masking\n-  if (in(1)->Opcode() == Op_LShiftI &&\n-      in(1)->req() == 3 &&\n-      in(1)->in(2) == in(2)) {\n-    shift &= BitsPerJavaInteger-1; \/\/ semantics of Java shifts\n-    \/\/ Compute masks for which this shifting doesn't change\n-    int lo = (-1 << (BitsPerJavaInteger - ((uint)shift)-1)); \/\/ FFFF8000\n-    int hi = ~lo;               \/\/ 00007FFF\n-    const TypeInt *t11 = phase->type(in(1)->in(1))->isa_int();\n-    if (!t11) return this;\n-    \/\/ Does actual value fit inside of mask?\n-    if (lo <= t11->_lo && t11->_hi <= hi) {\n-      return in(1)->in(1);      \/\/ Then shifting is a nop\n+  int count = 0;\n+  if (const_shift_count(phase, this, &count)) {\n+    if ((count & (BitsPerJavaInteger - 1)) == 0) {\n+      \/\/ Shift by a multiple of 32 does nothing\n+      return in(1);\n+    }\n+    \/\/ Check for useless sign-masking\n+    if (in(1)->Opcode() == Op_LShiftI &&\n+        in(1)->req() == 3 &&\n+        in(1)->in(2) == in(2)) {\n+      count &= BitsPerJavaInteger-1; \/\/ semantics of Java shifts\n+      \/\/ Compute masks for which this shifting doesn't change\n+      int lo = (-1 << (BitsPerJavaInteger - ((uint)count)-1)); \/\/ FFFF8000\n+      int hi = ~lo;               \/\/ 00007FFF\n+      const TypeInt *t11 = phase->type(in(1)->in(1))->isa_int();\n+      if (!t11) return this;\n+      \/\/ Does actual value fit inside of mask?\n+      if (lo <= t11->_lo && t11->_hi <= hi) {\n+        return in(1)->in(1);      \/\/ Then shifting is a nop\n+      }\n@@ -897,1 +914,0 @@\n-\n@@ -1082,2 +1098,5 @@\n-  int shift = getShiftCon(phase, this, -1);\n-  if ((shift & (BitsPerJavaInteger - 1)) == 0) return in(1);\n+  int count = 0;\n+  if (const_shift_count(phase, this, &count) && (count & (BitsPerJavaInteger - 1)) == 0) {\n+    \/\/ Shift by a multiple of 32 does nothing\n+    return in(1);\n+  }\n@@ -1266,1 +1285,6 @@\n-  return ((getShiftCon(phase, this, -1) & (BitsPerJavaLong - 1)) == 0) ? in(1) : this;\n+  int count = 0;\n+  if (const_shift_count(phase, this, &count) && (count & (BitsPerJavaLong - 1)) == 0) {\n+    \/\/ Shift by a multiple of 64 does nothing\n+    return in(1);\n+  }\n+  return this;\n@@ -1449,1 +1473,2 @@\n-  \/\/ Rotate by a multiple of 32\/64 does nothing\n+  int count = 0;\n+  assert(t1->isa_int() || t1->isa_long(), \"Unexpected type\");\n@@ -1451,1 +1476,2 @@\n-  if ((getShiftCon(phase, this, -1) & mask) == 0) {\n+  if (const_shift_count(phase, this, &count) && (count & mask) == 0) {\n+    \/\/ Rotate by a multiple of 32\/64 does nothing\n@@ -1524,1 +1550,2 @@\n-  \/\/ Rotate by a multiple of 32\/64 does nothing\n+  int count = 0;\n+  assert(t1->isa_int() || t1->isa_long(), \"Unexpected type\");\n@@ -1526,1 +1553,2 @@\n-  if ((getShiftCon(phase, this, -1) & mask) == 0) {\n+  if (const_shift_count(phase, this, &count) && (count & mask) == 0) {\n+    \/\/ Rotate by a multiple of 32\/64 does nothing\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":72,"deletions":44,"binary":false,"changes":116,"status":"modified"}]}