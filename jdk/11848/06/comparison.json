{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    private static int DEFAULT_BUFFER_SIZE = 8192;\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n@@ -65,1 +65,1 @@\n-    private static final Unsafe U = Unsafe.getUnsafe();\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -68,1 +68,1 @@\n-            = U.objectFieldOffset(BufferedInputStream.class, \"buf\");\n+            = UNSAFE.objectFieldOffset(BufferedInputStream.class, \"buf\");\n@@ -246,1 +246,1 @@\n-                if (!U.compareAndSetReference(this, BUF_OFFSET, buffer, nbuf)) {\n+                if (!UNSAFE.compareAndSetReference(this, BUF_OFFSET, buffer, nbuf)) {\n@@ -345,1 +345,1 @@\n-     * {@code -1}.  Otherwise this method returns the number of bytes\n+     * {@code -1}.  Otherwise, this method returns the number of bytes\n@@ -580,1 +580,1 @@\n-            if (U.compareAndSetReference(this, BUF_OFFSET, buffer, null)) {\n+            if (UNSAFE.compareAndSetReference(this, BUF_OFFSET, buffer, null)) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    protected byte buf[];\n+    protected byte[] buf;\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedOutputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,2 +88,2 @@\n-    private static int defaultCharBufferSize = 8192;\n-    private static int defaultExpectedLineLength = 80;\n+    private static final int DEFAULT_CHAR_BUFFER_SIZE = 8192;\n+    private static final int DEFAULT_EXPECTED_LINE_LENGTH = 80;\n@@ -116,1 +116,1 @@\n-        this(in, defaultCharBufferSize);\n+        this(in, DEFAULT_CHAR_BUFFER_SIZE);\n@@ -280,1 +280,1 @@\n-     * Thus redundant {@code BufferedReader}s will not copy data\n+     * Thus, redundant {@code BufferedReader}s will not copy data\n@@ -417,1 +417,1 @@\n-                s = new StringBuilder(defaultExpectedLineLength);\n+                s = new StringBuilder(DEFAULT_EXPECTED_LINE_LENGTH);\n@@ -554,1 +554,1 @@\n-     *                         Therefore large values should be used with care.\n+     *                         Therefore, large values should be used with care.\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +76,3 @@\n-    private char cb[];\n-    private int nChars, nextChar;\n+    private char[] cb;\n+    private int nChars;\n+    private int nextChar;\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    protected byte buf[];\n+    protected byte[] buf;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-    protected byte buf[];\n+    protected byte[] buf;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayOutputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    protected char buf[];\n+    protected char[] buf;\n","filename":"src\/java.base\/share\/classes\/java\/io\/CharArrayWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-        \/\/ delete on exit list and cause the DeleteOnExitHook to be\n+        \/\/ delete-on-exit list and cause the DeleteOnExitHook to be\n","filename":"src\/java.base\/share\/classes\/java\/io\/DeleteOnExitHook.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,3 @@\n-class ExpiringCache {\n-    private long millisUntilExpiration;\n-    private Map<String,Entry> map;\n+final class ExpiringCache {\n+    private final long millisUntilExpiration;\n+    private final Map<String,Entry> map;\n@@ -41,2 +41,2 @@\n-    private int queryOverflow = 300;\n-    private int MAX_ENTRIES = 200;\n+    private final int queryOverflow = 300;\n+    private static final int MAX_ENTRIES = 200;\n@@ -44,1 +44,1 @@\n-    static class Entry {\n+    static final class Entry {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ExpiringCache.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -155,1 +155,1 @@\n-    private static final FileSystem fs = DefaultFileSystem.getFileSystem();\n+    private static final FileSystem FS = DefaultFileSystem.getFileSystem();\n@@ -169,1 +169,1 @@\n-    private static enum PathStatus { INVALID, CHECKED };\n+    private enum PathStatus { INVALID, CHECKED };\n@@ -188,1 +188,1 @@\n-            s = fs.isInvalid(this) ? PathStatus.INVALID : PathStatus.CHECKED;\n+            s = FS.isInvalid(this) ? PathStatus.INVALID : PathStatus.CHECKED;\n@@ -216,1 +216,1 @@\n-    public static final char separatorChar = fs.getSeparator();\n+    public static final char separatorChar = FS.getSeparator();\n@@ -235,1 +235,1 @@\n-    public static final char pathSeparatorChar = fs.getPathSeparator();\n+    public static final char pathSeparatorChar = FS.getPathSeparator();\n@@ -263,1 +263,1 @@\n-        this.path = fs.resolve(parent.path, child);\n+        this.path = FS.resolve(parent.path, child);\n@@ -280,2 +280,2 @@\n-        this.path = fs.normalize(pathname);\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.path = FS.normalize(pathname);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -322,2 +322,2 @@\n-                this.path = fs.resolve(fs.getDefaultParent(),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.getDefaultParent(),\n+                                       FS.normalize(child));\n@@ -325,2 +325,2 @@\n-                this.path = fs.resolve(fs.normalize(parent),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.normalize(parent),\n+                                       FS.normalize(child));\n@@ -329,1 +329,1 @@\n-            this.path = fs.normalize(child);\n+            this.path = FS.normalize(child);\n@@ -331,1 +331,1 @@\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -365,2 +365,2 @@\n-                this.path = fs.resolve(fs.getDefaultParent(),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.getDefaultParent(),\n+                                       FS.normalize(child));\n@@ -368,2 +368,2 @@\n-                this.path = fs.resolve(parent.path,\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(parent.path,\n+                                       FS.normalize(child));\n@@ -372,1 +372,1 @@\n-            this.path = fs.normalize(child);\n+            this.path = FS.normalize(child);\n@@ -374,1 +374,1 @@\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -435,1 +435,1 @@\n-        p = fs.fromURIPath(p);\n+        p = FS.fromURIPath(p);\n@@ -438,2 +438,2 @@\n-        this.path = fs.normalize(p);\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.path = FS.normalize(p);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -504,1 +504,1 @@\n-            p = fs.normalize(p);\n+            p = FS.normalize(p);\n@@ -534,1 +534,1 @@\n-        return fs.isAbsolute(this);\n+        return FS.isAbsolute(this);\n@@ -561,1 +561,1 @@\n-        return fs.resolve(this);\n+        return FS.resolve(this);\n@@ -579,1 +579,1 @@\n-            absPath = fs.normalize(absPath);\n+            absPath = FS.normalize(absPath);\n@@ -581,1 +581,1 @@\n-        return new File(absPath, fs.prefixLength(absPath));\n+        return new File(absPath, FS.prefixLength(absPath));\n@@ -626,1 +626,1 @@\n-        return fs.canonicalize(fs.resolve(this));\n+        return FS.canonicalize(FS.resolve(this));\n@@ -653,1 +653,1 @@\n-            canonPath = fs.normalize(canonPath);\n+            canonPath = FS.normalize(canonPath);\n@@ -655,1 +655,1 @@\n-        return new File(canonPath, fs.prefixLength(canonPath));\n+        return new File(canonPath, FS.prefixLength(canonPath));\n@@ -783,1 +783,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_READ);\n+        return FS.checkAccess(this, FileSystem.ACCESS_READ);\n@@ -812,1 +812,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_WRITE);\n+        return FS.checkAccess(this, FileSystem.ACCESS_WRITE);\n@@ -836,1 +836,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_EXISTS);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_EXISTS);\n@@ -867,1 +867,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_DIRECTORY);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_DIRECTORY);\n@@ -900,1 +900,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_REGULAR);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_REGULAR);\n@@ -930,1 +930,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_HIDDEN);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_HIDDEN);\n@@ -974,1 +974,1 @@\n-        return fs.getLastModifiedTime(this);\n+        return FS.getLastModifiedTime(this);\n@@ -1006,1 +1006,1 @@\n-        return fs.getLength(this);\n+        return FS.getLength(this);\n@@ -1045,1 +1045,1 @@\n-        return fs.createFileExclusively(path);\n+        return FS.createFileExclusively(path);\n@@ -1075,1 +1075,1 @@\n-        return fs.delete(this);\n+        return FS.delete(this);\n@@ -1178,1 +1178,1 @@\n-        String[] s = fs.list(this);\n+        String[] s = FS.list(this);\n@@ -1182,1 +1182,1 @@\n-                normalized[i] = fs.normalize(s[i]);\n+                normalized[i] = FS.normalize(s[i]);\n@@ -1219,1 +1219,1 @@\n-        String names[] = normalizedList();\n+        String[] names = normalizedList();\n@@ -1312,1 +1312,1 @@\n-        String ss[] = normalizedList();\n+        String[] ss = normalizedList();\n@@ -1350,1 +1350,1 @@\n-        String ss[] = normalizedList();\n+        String[] ss = normalizedList();\n@@ -1381,1 +1381,1 @@\n-        return fs.createDirectory(this);\n+        return FS.createDirectory(this);\n@@ -1465,1 +1465,1 @@\n-        return fs.rename(this, dest);\n+        return FS.rename(this, dest);\n@@ -1504,1 +1504,1 @@\n-        return fs.setLastModifiedTime(this, time);\n+        return FS.setLastModifiedTime(this, time);\n@@ -1535,1 +1535,1 @@\n-        return fs.setReadOnly(this);\n+        return FS.setReadOnly(this);\n@@ -1579,1 +1579,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_WRITE, writable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_WRITE, writable, ownerOnly);\n@@ -1658,1 +1658,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_READ, readable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_READ, readable, ownerOnly);\n@@ -1740,1 +1740,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_EXECUTE, executable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_EXECUTE, executable, ownerOnly);\n@@ -1782,1 +1782,1 @@\n-     * files that are not marked executable. Consequently this method may return\n+     * files that are not marked executable. Consequently, this method may return\n@@ -1804,1 +1804,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_EXECUTE);\n+        return FS.checkAccess(this, FileSystem.ACCESS_EXECUTE);\n@@ -1853,1 +1853,1 @@\n-        return fs.listRoots();\n+        return FS.listRoots();\n@@ -1888,1 +1888,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_TOTAL);\n+        long space = FS.getSpace(this, FileSystem.SPACE_TOTAL);\n@@ -1932,1 +1932,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_FREE);\n+        long space = FS.getSpace(this, FileSystem.SPACE_FREE);\n@@ -1979,1 +1979,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_USABLE);\n+        long space = FS.getSpace(this, FileSystem.SPACE_USABLE);\n@@ -1985,1 +1985,1 @@\n-    private static class TempDirectory {\n+    private static final class TempDirectory {\n@@ -1989,1 +1989,1 @@\n-        private static final File tmpdir = new File(StaticProperty.javaIoTmpDir());\n+        private static final File TMP_DIR = new File(StaticProperty.javaIoTmpDir());\n@@ -1992,1 +1992,1 @@\n-            return tmpdir;\n+            return TMP_DIR;\n@@ -2020,1 +2020,1 @@\n-            int nameMax = fs.getNameMax(dir.getPath());\n+            int nameMax = FS.getNameMax(dir.getPath());\n@@ -2058,1 +2058,1 @@\n-            name = fs.normalize(name);\n+            name = FS.normalize(name);\n@@ -2179,1 +2179,1 @@\n-        } while (fs.hasBooleanAttributes(f, FileSystem.BA_EXISTS));\n+        } while (FS.hasBooleanAttributes(f, FileSystem.BA_EXISTS));\n@@ -2181,1 +2181,1 @@\n-        if (!fs.createFileExclusively(f.getPath()))\n+        if (!FS.createFileExclusively(f.getPath()))\n@@ -2250,1 +2250,1 @@\n-        return fs.compare(this, pathname);\n+        return FS.compare(this, pathname);\n@@ -2296,1 +2296,1 @@\n-        return fs.hashCode(this);\n+        return FS.hashCode(this);\n@@ -2330,1 +2330,1 @@\n-     * than the separator character on this system, then the old separator\n+     * from the separator character on this system, then the old separator\n@@ -2346,1 +2346,1 @@\n-        String path = fs.normalize(pathField);\n+        String path = FS.normalize(pathField);\n@@ -2348,1 +2348,1 @@\n-        UNSAFE.putIntVolatile(this, PREFIX_LENGTH_OFFSET, fs.prefixLength(path));\n+        UNSAFE.putIntVolatile(this, PREFIX_LENGTH_OFFSET, FS.prefixLength(path));\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":72,"deletions":72,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-    private static final JavaIOFileDescriptorAccess fdAccess =\n+    private static final JavaIOFileDescriptorAccess FD_ACCESS =\n@@ -319,1 +319,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n@@ -349,1 +349,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n@@ -370,1 +370,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,1 @@\n-    private char skipBuffer[] = null;\n+    private char[] skipBuffer = null;\n","filename":"src\/java.base\/share\/classes\/java\/io\/LineNumberReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1096,1 +1096,1 @@\n-     * Reads an 8 bit byte.\n+     * Reads an 8-bit byte.\n@@ -1098,1 +1098,1 @@\n-     * @return  the 8 bit byte read.\n+     * @return  the 8-bit byte read.\n@@ -1107,1 +1107,1 @@\n-     * Reads an unsigned 8 bit byte.\n+     * Reads an unsigned 8-bit byte.\n@@ -1109,1 +1109,1 @@\n-     * @return  the 8 bit byte read.\n+     * @return  the 8-bit byte read.\n@@ -1118,1 +1118,1 @@\n-     * Reads a 16 bit char.\n+     * Reads a 16-bit char.\n@@ -1120,1 +1120,1 @@\n-     * @return  the 16 bit char read.\n+     * @return  the 16-bit char read.\n@@ -1129,1 +1129,1 @@\n-     * Reads a 16 bit short.\n+     * Reads a 16-bit short.\n@@ -1131,1 +1131,1 @@\n-     * @return  the 16 bit short read.\n+     * @return  the 16-bit short read.\n@@ -1140,1 +1140,1 @@\n-     * Reads an unsigned 16 bit short.\n+     * Reads an unsigned 16-bit short.\n@@ -1142,1 +1142,1 @@\n-     * @return  the 16 bit short read.\n+     * @return  the 16-bit short read.\n@@ -1151,1 +1151,1 @@\n-     * Reads a 32 bit int.\n+     * Reads a 32-bit int.\n@@ -1153,1 +1153,1 @@\n-     * @return  the 32 bit integer read.\n+     * @return  the 32-bit integer read.\n@@ -1162,1 +1162,1 @@\n-     * Reads a 64 bit long.\n+     * Reads a 64-bit long.\n@@ -1164,1 +1164,1 @@\n-     * @return  the read 64 bit long.\n+     * @return  the read 64-bit long.\n@@ -1173,1 +1173,1 @@\n-     * Reads a 32 bit float.\n+     * Reads a 32-bit float.\n@@ -1175,1 +1175,1 @@\n-     * @return  the 32 bit float read.\n+     * @return  the 32-bit float read.\n@@ -1184,1 +1184,1 @@\n-     * Reads a 64 bit double.\n+     * Reads a 64-bit double.\n@@ -1186,1 +1186,1 @@\n-     * @return  the 64 bit double read.\n+     * @return  the 64-bit double read.\n@@ -1866,1 +1866,1 @@\n-        passHandle = bin.readInt() - baseWireHandle;\n+        passHandle = bin.readInt() - BASE_WIRE_HANDLE;\n@@ -1870,1 +1870,1 @@\n-                baseWireHandle));\n+                        BASE_WIRE_HANDLE));\n@@ -3865,1 +3865,1 @@\n-    private static class HandleTable {\n+    private static final class HandleTable {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    public void writeObject(Object obj)\n+    void writeObject(Object obj)\n@@ -56,1 +56,1 @@\n-    public void write(int b) throws IOException;\n+    void write(int b) throws IOException;\n@@ -64,1 +64,1 @@\n-    public void write(byte[] b) throws IOException;\n+    void write(byte[] b) throws IOException;\n@@ -74,1 +74,1 @@\n-    public void write(byte[] b, int off, int len) throws IOException;\n+    void write(byte[] b, int off, int len) throws IOException;\n@@ -81,1 +81,1 @@\n-    public void flush() throws IOException;\n+    void flush() throws IOException;\n@@ -89,1 +89,1 @@\n-    public void close() throws IOException;\n+    void close() throws IOException;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutput.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -771,1 +771,1 @@\n-     * Writes an 8 bit byte.\n+     * Writes an 8-bit byte.\n@@ -782,1 +782,1 @@\n-     * Writes a 16 bit short.\n+     * Writes a 16-bit short.\n@@ -793,1 +793,1 @@\n-     * Writes a 16 bit char.\n+     * Writes a 16-bit char.\n@@ -804,1 +804,1 @@\n-     * Writes a 32 bit int.\n+     * Writes a 32-bit int.\n@@ -815,1 +815,1 @@\n-     * Writes a 64 bit long.\n+     * Writes a 64-bit long.\n@@ -826,1 +826,1 @@\n-     * Writes a 32 bit float.\n+     * Writes a 32-bit float.\n@@ -837,1 +837,1 @@\n-     * Writes a 64 bit double.\n+     * Writes a 64-bit double.\n@@ -1174,1 +1174,1 @@\n-                    writeClass((Class) obj, unshared);\n+                    writeClass((Class<?>) obj, unshared);\n@@ -1217,1 +1217,1 @@\n-        bout.writeInt(baseWireHandle + handle);\n+        bout.writeInt(BASE_WIRE_HANDLE + handle);\n@@ -1757,1 +1757,1 @@\n-    private static class BlockDataOutputStream\n+    private static final class BlockDataOutputStream\n@@ -2263,1 +2263,1 @@\n-    private static class HandleTable {\n+    private static final class HandleTable {\n@@ -2388,1 +2388,1 @@\n-    private static class ReplaceTable {\n+    private static final class ReplaceTable {\n@@ -2452,1 +2452,1 @@\n-    private static class DebugTraceInfoStack {\n+    private static final class DebugTraceInfoStack {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -294,1 +294,1 @@\n-        return suid.longValue();\n+        return suid;\n@@ -691,1 +691,1 @@\n-        if (isEnum && suid.longValue() != 0L) {\n+        if (isEnum && suid != 0L) {\n@@ -1070,1 +1070,1 @@\n-                writeObjectMethod.invoke(obj, new Object[]{ out });\n+                writeObjectMethod.invoke(obj, out);\n@@ -1100,1 +1100,1 @@\n-                readObjectMethod.invoke(obj, new Object[]{ in });\n+                readObjectMethod.invoke(obj, in);\n@@ -1131,1 +1131,1 @@\n-                readObjectNoDataMethod.invoke(obj, (Object[]) null);\n+                readObjectNoDataMethod.invoke(obj);\n@@ -1874,1 +1874,1 @@\n-    private static class MemberSignature {\n+    private static final class MemberSignature {\n@@ -1905,1 +1905,1 @@\n-    private static class FieldReflector {\n+    private static final class FieldReflector {\n@@ -1908,1 +1908,1 @@\n-        private static final Unsafe unsafe = Unsafe.getUnsafe();\n+        private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -1947,1 +1947,1 @@\n-                    unsafe.objectFieldOffset(rf) : Unsafe.INVALID_FIELD_OFFSET;\n+                    UNSAFE.objectFieldOffset(rf) : Unsafe.INVALID_FIELD_OFFSET;\n@@ -1989,8 +1989,8 @@\n-                    case 'Z' -> Bits.putBoolean(buf, off, unsafe.getBoolean(obj, key));\n-                    case 'B' -> buf[off] = unsafe.getByte(obj, key);\n-                    case 'C' -> Bits.putChar(buf, off, unsafe.getChar(obj, key));\n-                    case 'S' -> Bits.putShort(buf, off, unsafe.getShort(obj, key));\n-                    case 'I' -> Bits.putInt(buf, off, unsafe.getInt(obj, key));\n-                    case 'F' -> Bits.putFloat(buf, off, unsafe.getFloat(obj, key));\n-                    case 'J' -> Bits.putLong(buf, off, unsafe.getLong(obj, key));\n-                    case 'D' -> Bits.putDouble(buf, off, unsafe.getDouble(obj, key));\n+                    case 'Z' -> Bits.putBoolean(buf, off, UNSAFE.getBoolean(obj, key));\n+                    case 'B' -> buf[off] = UNSAFE.getByte(obj, key);\n+                    case 'C' -> Bits.putChar(buf, off, UNSAFE.getChar(obj, key));\n+                    case 'S' -> Bits.putShort(buf, off, UNSAFE.getShort(obj, key));\n+                    case 'I' -> Bits.putInt(buf, off, UNSAFE.getInt(obj, key));\n+                    case 'F' -> Bits.putFloat(buf, off, UNSAFE.getFloat(obj, key));\n+                    case 'J' -> Bits.putLong(buf, off, UNSAFE.getLong(obj, key));\n+                    case 'D' -> Bits.putDouble(buf, off, UNSAFE.getDouble(obj, key));\n@@ -2018,8 +2018,8 @@\n-                    case 'Z' -> unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));\n-                    case 'B' -> unsafe.putByte(obj, key, buf[off]);\n-                    case 'C' -> unsafe.putChar(obj, key, Bits.getChar(buf, off));\n-                    case 'S' -> unsafe.putShort(obj, key, Bits.getShort(buf, off));\n-                    case 'I' -> unsafe.putInt(obj, key, Bits.getInt(buf, off));\n-                    case 'F' -> unsafe.putFloat(obj, key, Bits.getFloat(buf, off));\n-                    case 'J' -> unsafe.putLong(obj, key, Bits.getLong(buf, off));\n-                    case 'D' -> unsafe.putDouble(obj, key, Bits.getDouble(buf, off));\n+                    case 'Z' -> UNSAFE.putBoolean(obj, key, Bits.getBoolean(buf, off));\n+                    case 'B' -> UNSAFE.putByte(obj, key, buf[off]);\n+                    case 'C' -> UNSAFE.putChar(obj, key, Bits.getChar(buf, off));\n+                    case 'S' -> UNSAFE.putShort(obj, key, Bits.getShort(buf, off));\n+                    case 'I' -> UNSAFE.putInt(obj, key, Bits.getInt(buf, off));\n+                    case 'F' -> UNSAFE.putFloat(obj, key, Bits.getFloat(buf, off));\n+                    case 'J' -> UNSAFE.putLong(obj, key, Bits.getLong(buf, off));\n+                    case 'D' -> UNSAFE.putDouble(obj, key, Bits.getDouble(buf, off));\n@@ -2046,1 +2046,1 @@\n-                    case 'L', '[' -> unsafe.getReference(obj, readKeys[i]);\n+                    case 'L', '[' -> UNSAFE.getReference(obj, readKeys[i]);\n@@ -2097,1 +2097,1 @@\n-                            unsafe.putReference(obj, key, val);\n+                            UNSAFE.putReference(obj, key, val);\n@@ -2139,1 +2139,1 @@\n-    private static class FieldReflectorKey {\n+    private static final class FieldReflectorKey {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    static final short STREAM_MAGIC = (short)0xaced;\n+    static short STREAM_MAGIC = (short)0xaced;\n@@ -43,1 +43,1 @@\n-    static final short STREAM_VERSION = 5;\n+    static short STREAM_VERSION = 5;\n@@ -51,1 +51,1 @@\n-    static final byte TC_BASE = 0x70;\n+    static byte TC_BASE = 0x70;\n@@ -56,1 +56,1 @@\n-    static final byte TC_NULL =         (byte)0x70;\n+    static byte TC_NULL = 0x70;\n@@ -61,1 +61,1 @@\n-    static final byte TC_REFERENCE =    (byte)0x71;\n+    static byte TC_REFERENCE = 0x71;\n@@ -66,1 +66,1 @@\n-    static final byte TC_CLASSDESC =    (byte)0x72;\n+    static byte TC_CLASSDESC = 0x72;\n@@ -71,1 +71,1 @@\n-    static final byte TC_OBJECT =       (byte)0x73;\n+    static byte TC_OBJECT = 0x73;\n@@ -76,1 +76,1 @@\n-    static final byte TC_STRING =       (byte)0x74;\n+    static byte TC_STRING = 0x74;\n@@ -81,1 +81,1 @@\n-    static final byte TC_ARRAY =        (byte)0x75;\n+    static byte TC_ARRAY = 0x75;\n@@ -86,1 +86,1 @@\n-    static final byte TC_CLASS =        (byte)0x76;\n+    static byte TC_CLASS = 0x76;\n@@ -92,1 +92,1 @@\n-    static final byte TC_BLOCKDATA =    (byte)0x77;\n+    static byte TC_BLOCKDATA = 0x77;\n@@ -97,1 +97,1 @@\n-    static final byte TC_ENDBLOCKDATA = (byte)0x78;\n+    static byte TC_ENDBLOCKDATA = 0x78;\n@@ -102,1 +102,1 @@\n-    static final byte TC_RESET =        (byte)0x79;\n+    static byte TC_RESET = 0x79;\n@@ -108,1 +108,1 @@\n-    static final byte TC_BLOCKDATALONG= (byte)0x7A;\n+    static byte TC_BLOCKDATALONG = 0x7A;\n@@ -113,1 +113,1 @@\n-    static final byte TC_EXCEPTION =    (byte)0x7B;\n+    static byte TC_EXCEPTION = 0x7B;\n@@ -118,1 +118,1 @@\n-    static final byte TC_LONGSTRING =   (byte)0x7C;\n+    static byte TC_LONGSTRING = 0x7C;\n@@ -123,1 +123,1 @@\n-    static final byte TC_PROXYCLASSDESC =       (byte)0x7D;\n+    static byte TC_PROXYCLASSDESC = 0x7D;\n@@ -129,1 +129,1 @@\n-    static final byte TC_ENUM =         (byte)0x7E;\n+    static byte TC_ENUM = 0x7E;\n@@ -134,1 +134,1 @@\n-    static final byte TC_MAX =          (byte)0x7E;\n+    static byte TC_MAX = 0x7E;\n@@ -139,1 +139,1 @@\n-    static final int baseWireHandle = 0x7e0000;\n+    static int BASE_WIRE_HANDLE = 0x7e0000;\n@@ -142,2 +142,2 @@\n-    \/******************************************************\/\n-    \/* Bit masks for ObjectStreamClass flag.*\/\n+    \/* *******************************************************************\/\n+    \/* Bit masks for ObjectStreamClass flag. *\/\n@@ -149,1 +149,1 @@\n-    static final byte SC_WRITE_METHOD = 0x01;\n+    static byte SC_WRITE_METHOD = 0x01;\n@@ -159,1 +159,1 @@\n-    static final byte SC_BLOCK_DATA = 0x08;\n+    static byte SC_BLOCK_DATA = 0x08;\n@@ -164,1 +164,1 @@\n-    static final byte SC_SERIALIZABLE = 0x02;\n+    static byte SC_SERIALIZABLE = 0x02;\n@@ -169,1 +169,1 @@\n-    static final byte SC_EXTERNALIZABLE = 0x04;\n+    static byte SC_EXTERNALIZABLE = 0x04;\n@@ -175,1 +175,1 @@\n-    static final byte SC_ENUM = 0x10;\n+    static byte SC_ENUM = 0x10;\n@@ -189,1 +189,1 @@\n-    static final SerializablePermission SUBSTITUTION_PERMISSION =\n+    static SerializablePermission SUBSTITUTION_PERMISSION =\n@@ -199,1 +199,1 @@\n-    static final SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION =\n+    static SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION =\n@@ -208,1 +208,1 @@\n-    static final SerializablePermission SERIAL_FILTER_PERMISSION =\n+    static SerializablePermission SERIAL_FILTER_PERMISSION =\n@@ -222,1 +222,1 @@\n-    public static final int PROTOCOL_VERSION_1 = 1;\n+    static int PROTOCOL_VERSION_1 = 1;\n@@ -229,1 +229,1 @@\n-    *\n+    * <p>\n@@ -234,1 +234,1 @@\n-    *\n+    * <p>\n@@ -243,1 +243,1 @@\n-    public static final int PROTOCOL_VERSION_2 = 2;\n+    static int PROTOCOL_VERSION_2 = 2;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamConstants.java","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,2 +249,2 @@\n-        if (csq instanceof CharBuffer) {\n-            se.write((CharBuffer) csq);\n+        if (csq instanceof CharBuffer cb) {\n+            se.write(cb);\n","filename":"src\/java.base\/share\/classes\/java\/io\/OutputStreamWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    char buffer[];\n+    char[] buffer;\n@@ -344,5 +344,1 @@\n-        if (in < 0) {\n-            return false;\n-        } else {\n-            return true;\n-        }\n+        return in >= 0;\n","filename":"src\/java.base\/share\/classes\/java\/io\/PipedReader.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,1 @@\n-    private static class WrappingReader extends Reader {\n+    private static final class WrappingReader extends Reader {\n@@ -171,1 +171,1 @@\n-    private static class WrappingWriter extends PrintWriter {\n+    private static final class WrappingWriter extends PrintWriter {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    public SerialCallbackContext(Object obj, ObjectStreamClass desc) {\n+    SerialCallbackContext(Object obj, ObjectStreamClass desc) {\n@@ -54,1 +54,1 @@\n-    public Object getObj() throws NotActiveException {\n+    Object getObj() throws NotActiveException {\n@@ -59,1 +59,1 @@\n-    public ObjectStreamClass getDesc() {\n+    ObjectStreamClass getDesc() {\n@@ -63,1 +63,1 @@\n-    public void check() throws NotActiveException {\n+    void check() throws NotActiveException {\n@@ -70,1 +70,1 @@\n-    public void checkAndSetUsed() throws NotActiveException {\n+    void checkAndSetUsed() throws NotActiveException {\n@@ -78,1 +78,1 @@\n-    public void setUsed() {\n+    void setUsed() {\n","filename":"src\/java.base\/share\/classes\/java\/io\/SerialCallbackContext.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    private char buf[] = new char[20];\n+    private char[] buf = new char[20];\n@@ -94,1 +94,1 @@\n-    private byte ctype[] = new byte[256];\n+    private final byte[] ctype = new byte[256];\n@@ -530,1 +530,1 @@\n-        byte ct[] = ctype;\n+        byte[] ct = ctype;\n@@ -797,1 +797,1 @@\n-                char s[] = new char[3];\n+                char[] s = new char[3];\n","filename":"src\/java.base\/share\/classes\/java\/io\/StreamTokenizer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-    private int length;\n+    private final int length;\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-    private StringBuffer buf;\n+    private final StringBuffer buf;\n@@ -67,1 +67,1 @@\n-            throw new IllegalArgumentException(\"Negative buffer size\");\n+            throw new IllegalArgumentException(\"Negative buffer size: \" + initialSize);\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}