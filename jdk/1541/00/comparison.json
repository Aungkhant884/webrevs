{"files":[{"patch":"@@ -1720,1 +1720,1 @@\n-        str.getBytes(value, off, index, coder, end);\n+        str.getBytes(value, off, index, coder, end - off);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,4 @@\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n@@ -26,2 +30,3 @@\n- * @bug 4914802\n- * @summary Test Insert method for infinite loop\n+ * @run testng Insert\n+ * @bug 4914802 8257511\n+ * @summary Test StringBuilder.insert sanity tests\n@@ -29,1 +34,1 @@\n-\n+@Test\n@@ -31,4 +36,15 @@\n-   public static void main (String argv[]) throws Exception {\n-       StringBuilder sb = new StringBuilder();\n-       sb.insert(0, false);\n-   }\n+\n+    public void insertFalse() {\n+        \/\/ Caused an infinite loop before 4914802\n+        StringBuilder sb = new StringBuilder();\n+        assertEquals(\"false\", sb.insert(0, false).toString());\n+    }\n+\n+    public void insertOffset() {\n+        \/\/ 8254082 made the String variant cause an AIOOBE, fixed in 8257511\n+        assertEquals(\"efabc\", new StringBuilder(\"abc\").insert(0, \"def\",                      1, 3).toString());\n+        assertEquals(\"efabc\", new StringBuilder(\"abc\").insert(0, new StringBuilder(\"def\"),   1, 3).toString());\n+        \/\/ insert(I[CII) and insert(ILjava\/lang\/CharSequence;II) are inconsistently specified\n+        assertEquals(\"efabc\", new StringBuilder(\"abc\").insert(0, new char[] {'d', 'e', 'f'}, 1, 2).toString());\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/Insert.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"}]}