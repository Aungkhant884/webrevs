{"files":[{"patch":"@@ -81,2 +81,1 @@\n-\/\/ Not implemented yet\n-define_pd_global(uint, SecondarySuperMissBackoff, 0);\n+define_pd_global(uint, SecondarySuperMissBackoff, 1000);\n","filename":"src\/hotspot\/cpu\/s390\/globals_s390.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3030,1 +3030,2 @@\n-  assert_different_registers(Z_R1, Rsubklass, Rsuperklass, Rarray_ptr, Rlength);\n+  const Register temp = Z_R1_scratch;\n+  assert_different_registers(temp, Rsubklass, Rsuperklass, Rarray_ptr, Rlength);\n@@ -3039,0 +3040,1 @@\n+  const int sm_offset = in_bytes(JavaThread::backoff_secondary_super_miss_offset());\n@@ -3063,1 +3065,1 @@\n-  z_llill(Z_R1, BytesPerWord);               \/\/ Set increment\/end index.\n+  z_llill(temp, BytesPerWord);               \/\/ Set increment\/end index.\n@@ -3072,1 +3074,1 @@\n-  z_brxlg(Rlength, Z_R1, loop_iterate);\n+  z_brxlg(Rlength, temp, loop_iterate);\n@@ -3082,1 +3084,16 @@\n-  z_stg(Rsuperklass, sc_offset, Rsubklass); \/\/ Save result to cache.\n+  \/\/ Success. Try to cache the super we found and proceed in triumph.\n+  uint32_t super_cache_backoff = checked_cast<uint32_t>(SecondarySuperMissBackoff);\n+  if (super_cache_backoff > 0 && VM_Version::has_MemWithImmALUOps()) {\n+    NearLabel L_skip;\n+    z_asi(Address(Z_thread, sm_offset), -1);\n+    branch_optimized(Assembler::bcondNotLow, L_skip);\n+\n+    load_const_optimized(temp, super_cache_backoff);\n+    z_st(temp, sm_offset, Z_thread);\n+\n+    z_stg(Rsuperklass, sc_offset, Rsubklass); \/\/ Save result to cache.\n+\n+    bind(L_skip);\n+  } else {\n+    z_stg(Rsuperklass, sc_offset, Rsubklass); \/\/ Save result to cache.\n+  }\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}