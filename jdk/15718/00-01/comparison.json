{"files":[{"patch":"@@ -2024,1 +2024,22 @@\n-  std(super_klass, target_offset, sub_klass); \/\/ save result to cache\n+  \/\/ Success. Try to cache the super we found and proceed in triumph.\n+  uint32_t super_cache_backoff = checked_cast<uint32_t>(SecondarySuperMissBackoff);\n+  if (super_cache_backoff > 0) {\n+    Label L_skip;\n+\n+    lwz(temp, in_bytes(JavaThread::backoff_secondary_super_miss_offset()), R16_thread);\n+    addic_(temp, temp, -1);\n+    stw(temp, in_bytes(JavaThread::backoff_secondary_super_miss_offset()), R16_thread);\n+    bgt(CCR0, L_skip);\n+\n+    load_const_optimized(temp, super_cache_backoff);\n+    stw(temp, in_bytes(JavaThread::backoff_secondary_super_miss_offset()), R16_thread);\n+\n+    std(super_klass, target_offset, sub_klass); \/\/ save result to cache\n+\n+    bind(L_skip);\n+    if (L_success == nullptr && result_reg == noreg) {\n+      crorc(CCR0, Assembler::equal, CCR0, Assembler::equal); \/\/ Restore CCR0 EQ\n+    }\n+  } else {\n+    std(super_klass, target_offset, sub_klass); \/\/ save result to cache\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}