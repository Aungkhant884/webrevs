{"files":[{"patch":"@@ -32,3 +32,1 @@\n-import javax.swing.JDialog;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n+import javax.swing.JToolTip;\n@@ -38,9 +36,3 @@\n-import javax.swing.WindowConstants;\n-import javax.swing.plaf.metal.MetalLookAndFeel;\n-import java.awt.AWTException;\n-import java.awt.Color;\n-import java.awt.Insets;\n-import java.awt.Point;\n-import java.awt.Rectangle;\n-import java.awt.Robot;\n-import java.awt.Window;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n@@ -49,2 +41,4 @@\n-    public static void main(String[] args) throws Exception {\n-        SwingUtilities.invokeLater(() -> {\n+    static Dimension oneByOneSize = new Dimension(1, 1);\n+\n+    public static void main(String[] args) {\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n@@ -52,3 +46,5 @@\n-                UIManager.setLookAndFeel(new MetalLookAndFeel());\n-            } catch (UnsupportedLookAndFeelException e) {\n-                throw new RuntimeException(e);\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                SwingUtilities.invokeAndWait(FastTooltipSwitchIAE::doTest);\n+                System.out.println(\"Test passed for LookAndFeel \" + laf.getClassName());\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Test failed for \" + laf.getClassName(), e);\n@@ -56,26 +52,1 @@\n-        });\n-\n-        FastTooltipSwitchIAE fastTooltipSwitchIAE = new FastTooltipSwitchIAE();\n-        fastTooltipSwitchIAE.doTest();\n-    }\n-\n-    Robot robot = new Robot();\n-    JFrame frame;\n-    JDialog dialog;\n-\n-    public FastTooltipSwitchIAE() throws AWTException {\n-        SwingUtilities.invokeLater(() -> {\n-            frame = new JFrame(\"Frame\");\n-            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n-            frame.setSize(250, 250);\n-            frame.setLocation(100, 100);\n-\n-            frame.add(createLabel(\"Frame label\", Color.RED, \"frame tooltip\"));\n-            frame.setVisible(true);\n-\n-            dialog = new JDialog(frame, \"Dialog\");\n-            dialog.add(createLabel(\"Dialog label\", Color.YELLOW, \"dialog tooltip\"));\n-            dialog.pack();\n-            dialog.setLocation(350, 100);\n-            dialog.setVisible(true);\n-        });\n+        }\n@@ -84,10 +55,8 @@\n-    private Point getCenter(Window window) {\n-        Rectangle bounds = window.getBounds();\n-        Insets insets = window.getInsets();\n-        int width = bounds.width - insets.right - insets.left;\n-        int height = bounds.height - insets.top - insets.bottom;\n-\n-        return new Point(\n-                bounds.x + insets.left + width \/ 2,\n-                bounds.y + insets.top + height \/ 2\n-        );\n+    private static void setLookAndFeel(final UIManager.LookAndFeelInfo laf) {\n+        try {\n+            System.out.println(\"LookAndFeel: \" + laf.getClassName());\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                UnsupportedLookAndFeelException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -96,4 +65,7 @@\n-    private volatile Throwable unexpectedThrowable = null;\n-\n-    private void doTest() throws InterruptedException {\n-        robot.waitForIdle();\n+    private static void doTest() {\n+        JToolTip toolTip = new JToolTip();\n+        toolTip.setTipText(\"<html><h1>Hello world<\/h1><\/html>\");\n+        toolTip.setMinimumSize(oneByOneSize);\n+        toolTip.setMaximumSize(oneByOneSize);\n+        toolTip.setPreferredSize(oneByOneSize);\n+        toolTip.setBounds(100, 100, 1, 1);\n@@ -101,2 +73,2 @@\n-        Point frameCenter = getCenter(frame);\n-        Point dialogCenter = getCenter(dialog);\n+        BufferedImage img = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n+        Graphics2D g2d = img.createGraphics();\n@@ -104,0 +76,1 @@\n+        toolTip.paint(g2d);\n@@ -105,46 +78,1 @@\n-        robot.mouseMove(frameCenter.x, frameCenter.y);\n-\n-        \/\/ waiting for tooltip to show up\n-        Thread.sleep(3000);\n-\n-        Thread.setDefaultUncaughtExceptionHandler((t, e) -> {\n-            \/\/ Let's catch all exceptions, not only IllegalArgumentException\n-            unexpectedThrowable = e;\n-            e.printStackTrace();\n-        });\n-\n-        boolean moveToDialog = true;\n-\n-        int timeoutMs = 40_000;\n-        long endTime = System.currentTimeMillis() + timeoutMs;\n-\n-        while (\n-                unexpectedThrowable == null\n-                        && System.currentTimeMillis() <= endTime\n-        ) {\n-            if (moveToDialog) {\n-                robot.mouseMove(dialogCenter.x, dialogCenter.y);\n-            } else {\n-                robot.mouseMove(frameCenter.x, frameCenter.y);\n-            }\n-            robot.waitForIdle();\n-            moveToDialog = !moveToDialog;\n-        }\n-        frame.dispose();\n-        if (unexpectedThrowable == null) {\n-            System.out.println(\"Test passed, no exception thrown in \" + timeoutMs + \"ms\");\n-        } else {\n-            throw new RuntimeException(\"Test failed due to exception thrown:\", unexpectedThrowable);\n-        }\n-    }\n-\n-    private static JLabel createLabel(\n-            final String labelText,\n-            final Color bgColor,\n-            final String tooltipContent\n-    ) {\n-        final JLabel label = new JLabel(labelText);\n-        label.setOpaque(true);\n-        label.setBackground(bgColor);\n-        label.setToolTipText(\"<html><h1>\" + tooltipContent + \"<\/h1><\/html>\");\n-        return label;\n+        g2d.dispose();\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/FastTooltipSwitchIAE.java","additions":33,"deletions":105,"binary":false,"changes":138,"status":"modified"}]}