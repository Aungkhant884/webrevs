{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import javax.swing.BorderFactory;\n-import javax.swing.border.Border;\n@@ -123,0 +121,5 @@\n+\n+        if (paintTextR.width <= 0 || paintTextR.height <= 0) {\n+            return;\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalToolTipUI.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8262085\n+ * @summary Tests tooltip for not throwing IllegalArgumentException on fast switching between frames.\n+ * @run main FastTooltipSwitchIAE\n+ *\/\n+\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.WindowConstants;\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Window;\n+\n+public class FastTooltipSwitchIAE {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                UIManager.setLookAndFeel(new MetalLookAndFeel());\n+            } catch (UnsupportedLookAndFeelException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        FastTooltipSwitchIAE fastTooltipSwitchIAE = new FastTooltipSwitchIAE();\n+        fastTooltipSwitchIAE.doTest();\n+    }\n+\n+    Robot robot = new Robot();\n+    JFrame frame;\n+    JDialog dialog;\n+\n+    public FastTooltipSwitchIAE() throws AWTException {\n+        SwingUtilities.invokeLater(() -> {\n+            frame = new JFrame(\"Frame\");\n+            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+            frame.setSize(250, 250);\n+            frame.setLocation(100, 100);\n+\n+            frame.add(createLabel(\"Frame label\", Color.RED, \"frame tooltip\"));\n+            frame.setVisible(true);\n+\n+            dialog = new JDialog(frame, \"Dialog\");\n+            dialog.add(createLabel(\"Dialog label\", Color.YELLOW, \"dialog tooltip\"));\n+            dialog.pack();\n+            dialog.setLocation(350, 100);\n+            dialog.setVisible(true);\n+        });\n+    }\n+\n+    private Point getCenter(Window window) {\n+        Rectangle bounds = window.getBounds();\n+        Insets insets = window.getInsets();\n+        int width = bounds.width - insets.right - insets.left;\n+        int height = bounds.height - insets.top - insets.bottom;\n+\n+        return new Point(\n+                bounds.x + insets.left + width \/ 2,\n+                bounds.y + insets.top + height \/ 2\n+        );\n+    }\n+\n+    private volatile Throwable unexpectedThrowable = null;\n+\n+    private void doTest() throws InterruptedException {\n+        robot.waitForIdle();\n+\n+        Point frameCenter = getCenter(frame);\n+        Point dialogCenter = getCenter(dialog);\n+\n+\n+        robot.mouseMove(frameCenter.x, frameCenter.y);\n+\n+        \/\/ waiting for tooltip to show up\n+        Thread.sleep(3000);\n+\n+        Thread.setDefaultUncaughtExceptionHandler((t, e) -> {\n+            \/\/ Let's catch all exceptions, not only IllegalArgumentException\n+            unexpectedThrowable = e;\n+            e.printStackTrace();\n+        });\n+\n+        boolean moveToDialog = true;\n+\n+        int timeoutMs = 40_000;\n+        long endTime = System.currentTimeMillis() + timeoutMs;\n+\n+        while (\n+                unexpectedThrowable == null\n+                        && System.currentTimeMillis() <= endTime\n+        ) {\n+            if (moveToDialog) {\n+                robot.mouseMove(dialogCenter.x, dialogCenter.y);\n+            } else {\n+                robot.mouseMove(frameCenter.x, frameCenter.y);\n+            }\n+            robot.waitForIdle();\n+            moveToDialog = !moveToDialog;\n+        }\n+        frame.dispose();\n+        if (unexpectedThrowable == null) {\n+            System.out.println(\"Test passed, no exception thrown in \" + timeoutMs + \"ms\");\n+        } else {\n+            throw new RuntimeException(\"Test failed due to exception thrown:\", unexpectedThrowable);\n+        }\n+    }\n+\n+    private static JLabel createLabel(\n+            final String labelText,\n+            final Color bgColor,\n+            final String tooltipContent\n+    ) {\n+        final JLabel label = new JLabel(labelText);\n+        label.setOpaque(true);\n+        label.setBackground(bgColor);\n+        label.setToolTipText(\"<html><h1>\" + tooltipContent + \"<\/h1><\/html>\");\n+        return label;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/FastTooltipSwitchIAE.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}