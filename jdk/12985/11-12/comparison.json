{"files":[{"patch":"@@ -31,7 +31,0 @@\n- * <h2 id=\"PropPrec\">Property Precedence<\/h2>\n- * Properties such as the external access properties (ACCESS_EXTERNAL_*) and\n- * USE_CATALOG, can be specified through multiple configuration sources. Their\n- * precedence is described in the section\n- * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PP\">Property Precedence<\/a>\n- * of the module summary.\n- *\n@@ -79,0 +72,6 @@\n+ * <h2 id=\"PropPrec\">Property Precedence<\/h2>\n+ * Properties, including the <a href=\"#EAP\">External Access Properties<\/a> and\n+ * {@link #USE_CATALOG}, can be specified through multiple configuration sources.\n+ * They follow the configuration process as defined in the\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#Conf\">Configuration<\/a> section\n+ * of the module summary.\n@@ -236,0 +235,4 @@\n+         *\n+         * @implNote\n+         * when the Java Security Manager is present, the JDK sets the value of\n+         * this feature to true and does not allow it to be turned off.\n@@ -250,1 +253,1 @@\n-         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAP\">the class description<\/a>.\n@@ -275,1 +278,1 @@\n-         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAP\">the class description<\/a>.\n@@ -302,1 +305,1 @@\n-         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAP\">the class description<\/a>.\n@@ -326,1 +329,1 @@\n-         * <pre>{@code\n+         * {@snippet :\n@@ -331,1 +334,1 @@\n-         * }<\/pre>\n+         * }\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n- * <th scope=\"col\" rowspan=\"2\"><a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a> [2]<\/th>\n- * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [3]<\/th>\n+ * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [2]<\/th>\n@@ -62,1 +61,0 @@\n- * <td>Yes<\/td>\n@@ -74,1 +72,1 @@\n- * identifiers. The default value is public [4].<\/td>\n+ * identifiers. The default value is public [3].<\/td>\n@@ -77,1 +75,0 @@\n- * <td rowspan=\"2\">No<\/td>\n@@ -96,1 +93,1 @@\n- * <td rowspan=\"2\">javax.xml.catalog.defer [5]<\/td>\n+ * <td rowspan=\"2\">javax.xml.catalog.defer [4]<\/td>\n@@ -98,1 +95,0 @@\n- * <td rowspan=\"2\">Yes<\/td>\n@@ -108,1 +104,1 @@\n- * Loads all catalogs[6]. <\/td>\n+ * Loads all catalogs[5]. <\/td>\n@@ -117,1 +113,0 @@\n- * <td rowspan=\"3\">Yes<\/td>\n@@ -142,4 +137,1 @@\n- * <b>[2]<\/b> The value \"yes\" indicates that the system property can be placed in\n- * the configuration file, \"no\" otherwise.\n- * <p>\n- * <b>[3]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n+ * <b>[2]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n@@ -148,1 +140,1 @@\n- * <b>[4]<\/b> The Catalog specification defined complex rules on\n+ * <b>[3]<\/b> The Catalog specification defined complex rules on\n@@ -157,1 +149,1 @@\n- * <b>[5]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n+ * <b>[4]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n@@ -163,1 +155,1 @@\n- * <b>[6]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n+ * <b>[5]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n@@ -171,6 +163,7 @@\n- * their values are retrieved from the various configuration sources such as\n- * the JAXP configuration file, system and API properties. In addition to the\n- * general configuration sources, the Catalog Features are further supported in\n- * the catalog file itself where they can be specified as attributes of the catalog\n- * and group entries. When the attributes are specified, they shall take preference\n- * over any of the other configuration sources.\n+ * their values are retrieved from the various configuration sources such as the\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#Conf_CF\">JAXP configuration file<\/a>,\n+ * system and API properties. In addition to the general configuration sources,\n+ * the Catalog Features are further supported in the catalog file itself where\n+ * they can be specified as attributes of the catalog and group entries. When the\n+ * attributes are specified, they shall take preference over any of the other\n+ * configuration sources.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -27,33 +27,1 @@\n- * Defines the Java API for XML Processing (JAXP) that constitutes the java.xml\n- * XML library. Factories and processors in this module are generally referred\n- * to as XML factories and processors.\n- *\n- * <h2 id=\"PropertiesAndSP\">Properties and System Properties<\/h2>\n- * Properties, defining the behavior and features of XML factories and processors\n- * on which they are set, may have defined corresponding System Properties. When\n- * they do, the system properties allow them to be set through the System API,\n- * on the command line and\/or in the\n- * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>,\n- * without changing code in the later two options.\n- * <p>\n- * The {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n- * property for example has defined a corresponding System Property\n- * {@code javax.xml.catalog.resolve} as listed in the table\n- * {@link javax.xml.catalog.CatalogFeatures Catalog Features} that gives it the\n- * flexibility to be set through the System API, or without making code changes,\n- * be initialized on the command line, or in the XML Library (java.xml)\n- * Configuration File as illustrated in the <a href=\"#PP\">Property Precedence<\/a>\n- * section.\n- *\n- * <h2 id=\"ConfigurationFile\">XML Library (java.xml) Configuration File<\/h2>\n- * JAXP supports the use of a configuration file for the\n- * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a> and\n- * setting properties that have defined corresponding system properties.\n- *\n- * <h3>Format<\/h3>\n- * The configuration file must be in standard {@link java.util.Properties} format.\n- * <p>\n- * The keys are the names of the system properties, for example, those listed in\n- * column {@code System Property Name} of the table <a href=\"#Factories\">JAXP Factories<\/a>,\n- * or {@code System Property} in the table {@code Catalog Features}\n- * of class {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n+ * Defines the Java APIs for XML Processing (JAXP).\n@@ -61,13 +29,23 @@\n- * <p>\n- * The values are those defined in the specific API or process, for example, the\n- * fully qualified name of the implementation class for the\n- * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a>, or {@code value} in\n- * table {@code Catalog Features} of class\n- * {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n- *\n- * <p>\n- * Below are examples on what can be placed in the configuration file:\n- * <pre>\n- *     {@code javax.xml.parsers.DocumentBuilderFactory=packagename.DocumentBuilderFactoryImpl}\n- *     {@code javax.xml.catalog.resolve=strict}\n- * <\/pre>\n+ * <ul>\n+ * <li><a href=\"#JAXP\">The JAXP APIs<\/a><\/li>\n+ * <li><a href=\"#FacPro\">Factories and Processors<\/a><\/li>\n+ * <li><a href=\"#Conf\">Configuration<\/a>\n+ *     <ul>\n+ *     <li><a href=\"#Conf_Properties\">JAXP Properties<\/a><\/li>\n+ *     <li><a href=\"#Conf_SystemProperties\">System Properties<\/a><\/li>\n+ *     <li><a href=\"#Conf_CF\">Configuration File<\/a>\n+ *         <ul>\n+ *         <li><a href=\"#Conf_CF_Default\">{@code jaxp.properties} File<\/a><\/li>\n+ *         <li><a href=\"#Conf_CF_SP\">User-defined Configuration File<\/a><\/li>\n+ *         <\/ul>\n+ *     <\/li>\n+ *     <li><a href=\"#PP\">Property Precedence<\/a><\/li>\n+ *     <\/ul>\n+ * <\/li>\n+ * <li><a href=\"#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+ *      <ul>\n+ *      <li><a href=\"#LookupProcedure\">Lookup Procedure<\/a><\/li>\n+ *      <\/ul>\n+ * <\/li>\n+ * <li><a href=\"#implNote\">Implementation Note<\/a><\/li>\n+ * <\/ul>\n@@ -75,0 +53,3 @@\n+ * <h2 id=\"JAXP\">The JAXP APIs<\/h2>\n+ * JAXP comprises a set of APIs built upon a number of XML technologies and\n+ * standards that are essential for XML processing. These include APIs for:\n@@ -76,5 +57,17 @@\n- * <h3 id=\"CF_Default\">{@code jaxp.properties}<\/h3>\n- * By default, the <a href=\"#Factories\">JAXP Factories<\/a> will look for a\n- * configuration file called {@code jaxp.properties} in the ${java.home}\/conf\n- * directory and use the entries if any to customize the behavior of the XML\n- * factories and processors.\n+ * <ul>\n+ * <li>Parsing: the {@link javax.xml.parsers JAXP Parsing API} based on\n+ * {@link org.w3c.dom Document Object Model (DOM)} and\n+ * {@link org.xml.sax Simple API for XML Parsing (SAX)}, and\n+ * {@link javax.xml.stream Streaming API for XML (StAX)};\n+ * <\/li>\n+ * <li>Serializing: StAX and\n+ * {@link javax.xml.transform Extensible Stylesheet Language Transformations (XSLT)};\n+ * <\/li>\n+ * <li>Validation: the {@link javax.xml.validation JAXP Validation API}\n+ * based on the XML Schema Definition Language;<\/li>\n+ * <li>Transformation: the {@link javax.xml.transform JAXP Transformation API}\n+ * or XSLT (Extensible Stylesheet Language Transformations);<\/li>\n+ * <li>Querying and traversing XML documents: the\n+ * {@link javax.xml.xpath XML XPath Language API (XPath)};<\/li>\n+ * <li>Resolving external resources: the {@link javax.xml.catalog XML Catalog API};<\/li>\n+ * <\/ul>\n@@ -82,0 +75,7 @@\n+ * <h2 id=\"FacPro\">Factories and Processors<\/h2>\n+ * Factories are the entry points of each API, providing methods to allow applications\n+ * to set <a href=\"#Conf_Properties\">JAXP Properties<\/a> programmatically, before\n+ * creating processors. The <a href=\"#Conf\">Configuration<\/a> section provides more\n+ * details on this. Factories also support the\n+ * <a href=\"#LookupMechanism\">JAXP Lookup Mechanism<\/a>, in which applications can be\n+ * deployed with third party implementations to use instead of JDK implementations\n@@ -83,5 +83,0 @@\n- * {@code jaxp.properties} will be read only once during the initialization of\n- * the JAXP implementation and cached in memory. If the file does not exist when\n- * the first attempt is made to read from it, no further attempts are made to check\n- * for its existence. It is not possible to change the value of any property after\n- * it has been read for the first time.\n@@ -89,0 +84,66 @@\n+ * Processors are aggregates of parsers (or readers), serializers (or writers),\n+ * validators, and transformers that control and perform the processing in their\n+ * respective areas. They are defined in their relevant packages.\n+ * In the {@link javax.xml.parsers parsers} package for example,\n+ * are the {@link javax.xml.parsers.DocumentBuilder DocumentBuilder} and\n+ * {@link javax.xml.parsers.SAXParser SAXParser}, that represent the DOM and\n+ * SAX processors.\n+ * <p>\n+ * The processors are configured and instantiated through their corresponding factories.\n+ * The DocumentBuilder and SAXParser for example are constructed with the\n+ * {@link javax.xml.parsers.DocumentBuilderFactory DocumentBuilderFactory}\n+ * and {@link javax.xml.parsers.SAXParserFactory SAXParserFactory} respectively.\n+ *\n+ * <h2 id=\"Conf\">Configuration<\/h2>\n+ * When a JAXP factory is invoked for the first time, it performs a configuration\n+ * process to determine the implementation to be used and its subsequent behaviors.\n+ * During configuration, the factory examines configuration sources such as the\n+ * <a href=\"#Conf_Properties\">JAXP Properties<\/a>,\n+ * <a href=\"#Conf_SystemProperties\">System Properties<\/a>,\n+ * and the <a href=\"#Conf_CF\">JAXP Configuration File<\/a>, and sets the values\n+ * following the <a href=\"#PP\">Property Precedence<\/a>. The terminologies and\n+ * process are defined below.\n+ *\n+ * <h3 id=\"Conf_Properties\">JAXP Properties<\/h3>\n+ * JAXP properties are configuration settings that are applied to XML processors.\n+ * They can be used to control and customize the behavior of a processor.\n+ * Depending on the JAXP API that is being used, JAXP properties may be referred\n+ * to as <em>Attributes, Properties<\/em>, or <em>Features<\/em>.\n+ *\n+ * <h3 id=\"Conf_SystemProperties\">System Properties<\/h3>\n+ * Select JAXP properties have corresponding System Properties allowing the properties\n+ * to be set at runtime, on the command line, or within the\n+ * <a href=\"#Conf_CF\">JAXP Configuration File<\/a>.\n+ * For example, the System Property {@code javax.xml.catalog.resolve} may be used\n+ * to set the {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n+ * property.\n+ * <p>\n+ * The exact time at which system properties are read is unspecified. In order to\n+ * ensure that the desired values are properly applied, applications should ensure\n+ * that system properties are set appropriately prior to the creation of the first\n+ * JAXP factory and are not modified thereafter.\n+ *\n+ * <h3 id=\"Conf_CF\">Configuration File<\/h3>\n+ * JAXP supports the use of configuration files for\n+ * <a href=\"#LookupMechanism\">specifying the implementation class to load for the JAXP factories<\/a>\n+ * as well as for setting JAXP properties.\n+ * <p>\n+ * Configuration files are Java {@link java.util.Properties} files that consist\n+ * of mappings between system properties and their values defined by various APIs\n+ * or processes. The following demonstrates setting the\n+ * {@code javax.xml.parsers.DocumentBuilderFactory}\n+ * and {@code CatalogFeatures.RESOLVE} properties:\n+ *\n+ * {@snippet :\n+ *    javax.xml.parsers.DocumentBuilderFactory=packagename.DocumentBuilderFactoryImpl\n+ *    javax.xml.catalog.resolve=strict\n+ * }\n+ *\n+ * <h4 id=\"Conf_CF_Default\">{@code jaxp.properties} File<\/h4>\n+ * By default, JAXP looks for the configuration file {@code jaxp.properties},\n+ * located in the ${java.home}\/conf directory; and if the file exists, loads the\n+ * specified properties to customize the behavior of the XML factories and processors.\n+ * <p>\n+ * The {@code jaxp.properties} file will be read only once during the initialization\n+ * of the JAXP implementation and cached in memory. If there is an error accessing\n+ * or reading the file, the configuration process proceeds as if the file does not exist.\n@@ -90,4 +151,5 @@\n- * <h3 id=\"CF_SP\">User-defined Configuration File<\/h3>\n- * A system property {@systemProperty java.xml.config.file} can be set on the\n- * command line or through the System API (e.g. System.setProperty method) to\n- * specify the location of a configuration file on the file system.\n+ * <h4 id=\"Conf_CF_SP\">User-defined Configuration File<\/h4>\n+ * The system property {@systemProperty java.xml.config.file} can be set on the\n+ * command line or at run-time to specify the location of a configuration file.\n+ * If the {@code java.xml.config.file} property is included within a configuration\n+ * file, it will be ignored.\n@@ -96,9 +158,5 @@\n- * When the system property is specified, the configuration file it points to\n- * will be read and the property entries in it used to override those in\n- * {@code jaxp.properties}. If the system property does not exist when the JAXP\n- * implementation is initialized, no further attempt will be made to check for\n- * its existence.\n- * <p>\n- * The value of the property shall be a valid file path to a configuration file.\n- * If the file path is not absolute, it will be considered relative to the working\n- * directory.\n+ * When the {@code java.xml.config.file} is specified, the configuration file will be\n+ * read and the included properties will override the same properties that were\n+ * defined in the {@code jaxp.properties} file. If the {@code java.xml.config.file}\n+ * has not been set when the JAXP implementation is initialized, no further attempt\n+ * will be made to check for its existence.\n@@ -106,2 +164,73 @@\n- * Unlike other system properties, this property can not be placed in a configuration\n- * file.\n+ * The {@code java.xml.config.file} value must contain a valid pathname\n+ * to a configuration file. If the pathname is not absolute, it will be considered\n+ * relative to the working directory of the JVM.\n+ * If there is an error reading the configuration file, the configuration process\n+ * proceeds as if the {@code java.xml.config.file} property was not set.\n+ * Implementations may optionally issue a warning message.\n+ *\n+ * <h3 id=\"PP\">Property Precedence<\/h3>\n+ * JAXP properties can be set in multiple ways, including by API methods, system\n+ * properties, and the <a href=\"#Conf_CF\">JAXP Configuration File<\/a>. When not\n+ * explicitly set, they will be initialized with default values or more restrictive\n+ * values when\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n+ * (FSP) is enabled. The configuration order of precedence for properties is as\n+ * follows, from highest to lowest:\n+ *\n+ * <ul>\n+ * <li><p>\n+ *      Through the APIs for factories or processors\n+ * <\/li>\n+ * <li><p>\n+ *      System Property\n+ * <\/li>\n+ * <li><p>\n+ *      User-defined <a href=\"#Conf_CF\">Configuration File<\/a>\n+ * <\/li>\n+ * <li><p>\n+ *      The default JAXP Configuration File <a href=\"#Conf_CF_Default\">{@code jaxp.properties}<\/a>\n+ * <\/li>\n+ * <li><p>\n+ *      The default values for JAXP Properties. If the\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true,\n+ * the default values will be set to process XML securely.\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ * Using the {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n+ * property as an example, the following illustrates how these rules are applied:\n+ * <ul>\n+ * <li><p>\n+ *      Properties specified through factory or processor APIs have the highest\n+ * precedence. The following code effectively sets the RESOLVE property to\n+ * {@code strict}, regardless of settings in any other configuration sources.\n+ *\n+ * {@snippet :\n+ *    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *    dbf.setAttribute(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"strict\");\n+ * }\n+ *\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory as in the above code, a\n+ * system property setting will be in effect.\n+ * {@snippet :\n+ *     \/\/ in the following example, the RESOLVE property is set to 'continue'\n+ *     \/\/ for the entire application\n+ *     java -Djavax.xml.catalog.resolve=continue myApp\n+ * }\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory, or through its system property,\n+ * the setting in a configuration file will take effect. The following entry\n+ * sets the property to '{@code continue}'.\n+ * {@snippet :\n+ *     javax.xml.catalog.resolve=continue\n+ * }\n+ *\n+ * <\/li>\n+ * <li><p>\n+ *     If the property is not set anywhere, it will be resolved to its\n+ * default value that is '{@code strict}'.\n+ * <\/li>\n+ * <\/ul>\n@@ -112,1 +241,1 @@\n- * in the table below along with the method, System Property name, and System\n+ * in the table below along with the method, System Property, and System\n@@ -121,1 +250,1 @@\n- * <th scope=\"col\">System Property Name<\/th>\n+ * <th scope=\"col\">System Property<\/th>\n@@ -211,3 +340,2 @@\n- * The <a href=\"#Factories\">JAXP Factories<\/a> follow the procedure described\n- * below in order to locate and load the implementation class:\n- *\n+ * The order of precedence for locating the implementation class of a\n+ * <a href=\"#Factories\">JAXP Factory<\/a> is as follows, from highest to lowest:\n@@ -216,2 +344,2 @@\n- * Use the system property as described in column System Property of the table\n- * <a href=\"#Factories\">JAXP Factories<\/a> above;\n+ * The system property as listed in the column System Property of the table\n+ * <a href=\"#Factories\">JAXP Factories<\/a> above\n@@ -221,1 +349,1 @@\n- * Use the <a href=\"#ConfigurationFile\">Configuration File<\/a>;\n+ * The <a href=\"#Conf_CF\">Configuration File<\/a>\n@@ -225,1 +353,1 @@\n- * Use the service-provider loading facility, defined by the\n+ * The service-provider loading facility, defined by the\n@@ -272,10 +400,0 @@\n- * <h2 id=\"PP\">Property Precedence<\/h2>\n- * Properties in this module can be set in multiple ways, including via the APIs,\n- * system properties (on the command line or through the System API), and the\n- * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>.\n- * When not explicitly set, they will be initialized with the default values or\n- * the restrictive values specified by the\n- * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n- * (hereafter referred to FSP) if it is true.\n- * The order of precedence for the configuration sources is defined as follows,\n- * with earlier ones overriding the later:\n@@ -283,22 +401,2 @@\n- * <ul>\n- * <li><p>\n- *      Properties specified through factories or processors API;\n- * <\/li>\n- * <li><p>\n- *      Properties set via the corresponding System properties on the command line\n- * with -Dkey=value or by using the System API (e.g. System.setProperty(key, value));\n- * <\/li>\n- * <li><p>\n- *      Properties set in a user-defined <a href=\"#ConfigurationFile\">Configuration File<\/a>\n- * pointed to by the system property {@code java.xml.config.file};\n- * <\/li>\n- * <li><p>\n- *      Properties set in the default XML Library (java.xml) Configuration File\n- * <a href=\"#CF_Default\">{@code jaxp.properties}<\/a>;\n- * <\/li>\n- * <li><p>\n- *      Properties' default values initialized during factory or processor creation.\n- * Security-related properties will be on their restrictive values when the\n- * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature is true.\n- * <\/li>\n- * <\/ul>\n+ * <div id=\"implNote\"><\/div>\n+ * @implNote\n@@ -306,2 +404,0 @@\n- * Using the {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n- * property as an example, the followings illustrate how these rules are applied.\n@@ -309,43 +405,6 @@\n- * <li><p>\n- *      Properties specified through factories or processors API have the highest\n- * precedence. The following code therefore effectively set the RESOLVE property\n- * to {@code strict}, regardless of settings in any other configuration sources.\n- * <pre>\n- *     {@code\n- *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n- *     dbf.setAttribute(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"strict\");\n- *     }\n- * <\/pre>\n- *\n- * <\/li>\n- * <li><p>\n- *      If the property is not set on the factory such as in the above code, a\n- * system property setting will be in effect.\n- * <pre>\n- *     {@code\n- *     \/\/ in the following example, the RESOLVE property is set to 'continue'\n- *     \/\/ for the entire application\n- *     java -Djavax.xml.catalog.resolve=continue myApp\n- *\n- *     \/\/ in the following code snipet, the property is set to 'ignore' for the\n- *     \/\/ factory that follows\n- *     System.setProperty(\"javax.xml.catalog.resolve\", \"ignore\");\n- *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n- *     ...\n- *     System.clearProperty(\"javax.xml.catalog.resolve\");\n- *     }\n- * <\/pre>\n- * <\/li>\n- * <li><p>\n- *      If the property is not set on the factory, nor through its system property,\n- * the setting in a configuration file will take effect. The following entry\n- * sets the property to '{@code continue}'.\n- * <pre>\n- *     {@code\n- *     javax.xml.catalog.resolve=continue\n- *     }\n- * <\/pre>\n- * <\/li>\n- * <li><p>\n- *     If the property is not set anywhere, it will be resolved to its\n- * default value that is '{@code strict}'.\n+ * <li><a href=\"#IN_ISFP\">Implementation Specific Properties<\/a>\n+ *      <ul>\n+ *      <li><a href=\"#Processor\">Processor Support<\/a><\/li>\n+ *      <li><a href=\"#IN_ISFPtable\">List of Implementation Specific Properties<\/a><\/li>\n+ *      <li><a href=\"#IN_Legacy\">Legacy Property Names (deprecated)<\/a><\/li>\n+ *      <\/ul>\n@@ -355,70 +414,5 @@\n- * @implNote\n- * <h2>Implementation Specific Features and Properties<\/h2>\n- *\n- * In addition to the standard features and properties described within the public\n- * APIs of this module, the JDK implementation supports a further number of\n- * implementation specific features and properties. This section describes the\n- * naming convention, System Properties, precedence order, and processors for which\n- * a property is applies.\n- * <p>\n- * Properties and features currently supported by the JDK implementation are listed\n- * in the table <a href=\"#Properties\">Implementation Specific Properties<\/a>\n- * and <a href=\"#Features\">Features<\/a>.\n- *\n- * <h3 id=\"NamingConvention\">Naming Convention<\/h3>\n- * The names of the features and properties are fully qualified, composed of a\n- * prefix and name.\n- *\n- * <h4>Prefix<\/h4>\n- * The prefix for JDK features and properties, as well as their corresponding\n- * System Properties if any, is defined as:\n- * <pre>\n- *     {@code jdk.xml.}\n- * <\/pre>\n- *\n- * <h4>Name<\/h4>\n- * A name may consist of one or multiple words that are case-sensitive.\n- * All letters of the first word are in lowercase, while the first letter of\n- * each subsequent word is capitalized.\n- * <p>\n- * An example of a property that indicates whether an XML document is standalone\n- * would thus have a format:\n- * <pre>\n- *     {@code jdk.xml.isStandalone}\n- * <\/pre>\n- * and a corresponding System Property:\n- * <pre>\n- *     {@systemProperty jdk.xml.isStandalone}\n- * <\/pre>\n- *\n- * <h3>System Properties<\/h3>\n- * A property may have a corresponding System Property with the same name as\n- * shown in the table <a href=\"#Properties\">Implementation Specific Properties<\/a>\n- * and <a href=\"#Features\">Features<\/a>.\n- * As described in the <a href=\"#PropertiesAndSP\">Properties and System Properties<\/a>\n- * section, a System Property can be set through the System API, on the command line\n- * and\/or in the configuration file.\n- *\n- * <h3>Configuration File<\/h3>\n- * A system property can be specified in the\n- * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>\n- * to customize the behavior of the XML factories and processors. The format is\n- * {@code key=value}, where the key is the system property name as listed in the\n- * column {@code Full Name} and value in the column {@code Value} in the table\n- * <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n- * <a href=\"#Features\">Features<\/a>. For example:\n- * <pre>\n- *     {@code jdk.xml.entityExpansionLimit=2000}\n- *     {@code jdk.xml.isStandalone=true}\n- * <\/pre>\n- *\n- * <h3 id=\"PropPrec\">Property Precedence<\/h3>\n- * The JDK implementation specific features and properties follow the same procedure\n- * as described in section <a href=\"#PP\">Property Precedence<\/a> in retrieving\n- * property values.\n- * Specific to the initialized values, the restrictive values that are set when\n- * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true are shown\n- * in {@code \"Value\"}'s subcolumn {@code \"Enforced\"} in the table\n- * <a href=\"#Features\">Implementation Specific Features<\/a> and\n- * <a href=\"#Properties\">Properties<\/a>.\n- *\n+ * <h2 id=\"IN_ISFP\">Implementation Specific Properties<\/h2>\n+ * In addition to the standard <a href=\"#Conf_Properties\">JAXP Properties<\/a>,\n+ * the JDK implementation supports a number of implementation specific properties\n+ * whose name is prefixed by \"{@code jdk.xml.}\". These properties also follow the\n+ * configuration process as defined in the <a href=\"#Conf\">Configuration<\/a> section.\n@@ -426,4 +420,2 @@\n- * Furthermore, when the Java Security Manager is present, the JDK sets\n- * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} to true and does\n- * not allow it to be turned off. The security related properties are therefore\n- * set to the {@code \"Enforced\"} values.\n+ * Refer to the <a href=\"#Properties\">Implementation Specific Properties<\/a> table\n+ * for the list of properties supported by the JDK implementation.\n@@ -432,2 +424,4 @@\n- * Features and properties may be supported by one or more processors. The\n- * following table lists the processors by IDs that can be used for reference.\n+ * The properties may be supported by one or more processors as listed in the table\n+ * below. Depending on the type of the property, they may be set via\n+ * Method 1: setAttribute\/Parameter\/Property or 2: setFeature as illustrated\n+ * in the relevant columns.\n@@ -441,2 +435,2 @@\n- * <th scope=\"col\">How to set the property<\/th>\n- * <th scope=\"col\">How to set the feature<\/th>\n+ * <th scope=\"col\">Method 1: setAttribute\/Parameter\/Property<\/th>\n+ * <th scope=\"col\">Method 2: setFeature<\/th>\n@@ -543,8 +537,1 @@\n- * <h3>List of Implementation Specific Features and Properties<\/h3>\n- * The Implementation Specific Features and Properties reflect JDK's choice to\n- * manage the limitations on resources while complying with the API specification,\n- * or allow applications to alter behaviors beyond those required by the standards.\n- * <p>\n- * The table below lists the Implementation Specific Properties currently supported\n- * by the JDK. More properties may be added in the future if necessary.\n- *\n+ * <div id=\"IN_ISFPtable\"><\/div>\n@@ -555,1 +542,1 @@\n- * <th scope=\"col\" rowspan=\"2\">Full Name (<a href=\"#NamingConvention\">prefix + name<\/a>)\n+ * <th scope=\"col\" rowspan=\"2\">Full Name (prefix {@code jdk.xml.})\n@@ -558,7 +545,5 @@\n- * <th scope=\"col\" rowspan=\"2\">API Property <a href=\"#Note2\">[2]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">System Property <a href=\"#Note3\">[3]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n- * <th scope=\"col\" colspan=\"4\" style=\"text-align:center\">Value <a href=\"#Note4\">[4]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Security <a href=\"#Note5\">[5]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Supported Processor <a href=\"#Note6\">[6]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Since <a href=\"#Note7\">[7]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">System Property <a href=\"#Note2\">[2]<\/a><\/th>\n+ * <th scope=\"col\" colspan=\"4\" style=\"text-align:center\">Value <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Security <a href=\"#Note4\">[4]<\/a><\/th>\n+ * <th scope=\"col\" colspan=\"2\">Supported Processor <a href=\"#Note5\">[5]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Since <a href=\"#Note6\">[6]<\/a><\/th>\n@@ -571,0 +556,2 @@\n+ * <th scope=\"col\">ID<\/th>\n+ * <th scope=\"col\">Set Method<\/th>\n@@ -580,3 +567,1 @@\n- * <td style=\"text-align:center\" rowspan=\"9\">yes<\/td>\n- * <td style=\"text-align:center\" rowspan=\"9\">yes<\/td>\n- * <td style=\"text-align:center\" rowspan=\"9\">yes<\/td>\n+ * <td style=\"text-align:center\" rowspan=\"11\">yes<\/td>\n@@ -598,0 +583,1 @@\n+ * <td style=\"text-align:center\" rowspan=\"16\"><a href=\"#Processor\">Method 1<\/a><\/td>\n@@ -670,3 +656,0 @@\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">yes<\/td>\n@@ -694,3 +677,0 @@\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">yes<\/td>\n@@ -713,2 +693,0 @@\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">yes<\/td>\n@@ -730,2 +708,0 @@\n- * <td style=\"text-align:center\">yes<\/td>\n- * <td style=\"text-align:center\">no<\/td>\n@@ -745,5 +721,0 @@\n- * <td style=\"text-align:center\" rowspan=\"2\">\n- *     <a href=\"#Transform\">Transform<\/a>:yes<br>\n- *     <a href=\"#XPATH\">XPath<\/a>:no\n- * <\/td>\n- * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n@@ -774,1 +745,0 @@\n- * <td style=\"text-align:center\">yes<\/td>\n@@ -781,29 +751,0 @@\n- * <\/tbody>\n- * <\/table>\n- * <p>\n- * The table below lists the Implementation Specific Features currently supported\n- * by the JDK. More features may be added in the future if necessary.\n- *\n- * <table class=\"striped\" id=\"Features\">\n- * <caption>Implementation Specific Features<\/caption>\n- * <thead>\n- * <tr>\n- * <th scope=\"col\" rowspan=\"2\">Full Name (<a href=\"#NamingConvention\">prefix + name<\/a>)\n- * <a href=\"#Note1\">[1]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Description<\/th>\n- * <th scope=\"col\" rowspan=\"2\">API Property <a href=\"#Note2\">[2]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">System Property <a href=\"#Note3\">[3]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n- * <th scope=\"col\" colspan=\"4\" style=\"text-align:center\">Value <a href=\"#Note4\">[4]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Security <a href=\"#Note5\">[5]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Supported Processor <a href=\"#Note6\">[6]<\/a><\/th>\n- * <th scope=\"col\" rowspan=\"2\">Since <a href=\"#Note7\">[7]<\/a><\/th>\n- * <\/tr>\n- * <tr>\n- * <th scope=\"col\">Type<\/th>\n- * <th scope=\"col\">Value<\/th>\n- * <th scope=\"col\">Default<\/th>\n- * <th scope=\"col\">Enforced<\/th>\n- * <\/tr>\n- * <\/thead>\n- * <tbody>\n@@ -815,2 +756,0 @@\n- * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n- * <td style=\"text-align:center\" rowspan=\"3\">yes<\/td>\n@@ -828,0 +767,1 @@\n+ * <td style=\"text-align:center\"><a href=\"#Processor\">Method 2<\/a><\/td>\n@@ -849,0 +789,1 @@\n+ * <td style=\"text-align:center\"><a href=\"#Processor\">Method 2<\/a><\/td>\n@@ -867,0 +808,1 @@\n+ * <td style=\"text-align:center\"><a href=\"#Processor\">Method 2<\/a><\/td>\n@@ -874,5 +816,3 @@\n- * <b>[2]<\/b> A value \"yes\" indicates that the property can be set through the\n- * processor or its factory, \"no\" otherwise.\n- * <p id=\"Note3\">\n- * <b>[3]<\/b> A value \"yes\" indicates there is a corresponding System Property\n- * for the property, \"no\" otherwise.\n+ * <b>[2]<\/b> A value \"yes\" indicates there is a corresponding System Property\n+ * for the property, \"no\" otherwise. The name of the System Property is the same\n+ * as that of the property.\n@@ -880,2 +820,2 @@\n- * <p id=\"Note4\">\n- * <b>[4]<\/b> The value must be exactly as listed in this table, case-sensitive.\n+ * <p id=\"Note3\">\n+ * <b>[3]<\/b> The value must be exactly as listed in this table, case-sensitive.\n@@ -890,3 +830,3 @@\n- * <p id=\"Note5\">\n- * <b>[5]<\/b> A value \"yes\" indicates the property is a Security Property. As indicated\n- * in the <a href=\"#PropPrec\">Property Precedence<\/a>, the values listed in the column\n+ * <p id=\"Note4\">\n+ * <b>[4]<\/b> A value \"yes\" indicates the property is a Security Property. As indicated\n+ * in the <a href=\"#PP\">Property Precedence<\/a>, the values listed in the column\n@@ -896,0 +836,3 @@\n+ * <p id=\"Note5\">\n+ * <b>[5]<\/b> One or more processors that support the property. The IDs and Set Method\n+ * are as shown in the table <a href=\"#Processor\">Processors<\/a>.\n@@ -897,4 +840,1 @@\n- * <b>[6]<\/b> One or more processors that support the property. The values of the\n- * field are IDs described in the table <a href=\"#Processor\">Processors<\/a>.\n- * <p id=\"Note7\">\n- * <b>[7]<\/b> Indicates the initial release the property is introduced.\n+ * <b>[6]<\/b> Indicates the initial release the property is introduced.\n@@ -902,1 +842,1 @@\n- * <h3>Legacy Property Names (deprecated)<\/h3>\n+ * <h3 id=\"IN_Legacy\">Legacy Property Names (deprecated)<\/h3>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":256,"deletions":316,"binary":false,"changes":572,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#           XML Library (java.xml) Configuration File\n+#           JAXP Configuration File\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.SP_CONFIG;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.PathTest\n+ * @summary verifies that the system property \"java.xml.config.file\" may be set\n+ * with a relative path.\n+ *\/\n+public class PathTest extends ConfigurationTest {\n+    private static final String FILE_DIR = \"files\";\n+    private static final String CUSTOM_CONFIG = \"customJaxp.properties\";\n+\n+    \/*\n+     * Sets up the test environment by copying the customJaxp.properties file\n+     * to a directory under the current working directory of the JVM.\n+    *\/\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        Path userDir = Paths.get(System.getProperty(\"user.dir\", \".\"));\n+        Path fileDir = Paths.get(userDir.toString(), FILE_DIR);\n+\n+        if (Files.notExists(fileDir)) {\n+            Files.createDirectory(fileDir);\n+        }\n+\n+        Path source = Paths.get(TEST_SOURCE_DIR, CUSTOM_CONFIG);\n+        Path dest = Paths.get(fileDir.toString(), CUSTOM_CONFIG);\n+        Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING);\n+    }\n+\n+    \/*\n+     * Verifies a user-defined configuration file can be set with a relative path.\n+     * This test is the same as other Property tests, except the java.xml.config.file\n+     * system property is set with a relative path.\n+    *\/\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            \/\/ set with a relative path instead of the absolute path from getPath\n+            System.setProperty(SP_CONFIG, FILE_DIR + \"\/\" + config);\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        Assert.assertEquals(dbf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/PathTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#           XML Library (java.xml) Configuration File\n+#           JAXP Configuration File\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}