{"files":[{"patch":"@@ -0,0 +1,37 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+include CopyCommon.gmk\n+\n+################################################################################\n+\n+XML_LIB_SRC := $(TOPDIR)\/src\/java.xml\/share\/conf\n+\n+$(CONF_DST_DIR)\/jaxp.properties: $(XML_LIB_SRC)\/jaxp.properties\n+\t$(call install-file)\n+\n+TARGETS := $(CONF_DST_DIR)\/jaxp.properties\n+\n+################################################################################\n","filename":"make\/modules\/java.xml\/Copy.gmk","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -515,1 +515,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Read system properties, or the configuration file\n@@ -518,1 +518,0 @@\n-\n@@ -520,8 +519,5 @@\n-            if (!getSystemProperty(limit, limit.systemProperty())) {\n-                \/\/if system property is not found, try the older form if any\n-                for (NameMap nameMap : NameMap.values()) {\n-                    String oldName = nameMap.getOldName(limit.systemProperty());\n-                    if (oldName != null) {\n-                        getSystemProperty(limit, oldName);\n-                    }\n-                }\n+            \/\/ attempts to read both the current and old system propery\n+            if (!getSystemProperty(limit, limit.systemProperty())\n+                    && (!getOldSystemProperty(limit))) {\n+                \/\/if system property is not found, try the config file\n+                getPropertyConfig(limit, limit.systemProperty());\n@@ -530,1 +526,0 @@\n-\n@@ -551,1 +546,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Reads a system property, sets value and state if found.\n@@ -553,1 +548,1 @@\n-     * @param property the type of the property\n+     * @param limit the limit property\n@@ -564,0 +559,6 @@\n+        } catch (NumberFormatException e) {\n+            \/\/invalid setting\n+            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n+        }\n+        return false;\n+    }\n@@ -565,1 +566,29 @@\n-            value = SecuritySupport.readConfig(sysPropertyName);\n+    \/**\n+     * Reads the legacy system property.\n+     * @param limit a limit object\n+     * @return true if found, false otherwise\n+     *\/\n+    private boolean getOldSystemProperty(Limit limit) {\n+        boolean found = false;\n+        for (NameMap nameMap : NameMap.values()) {\n+            String oldName = nameMap.getOldName(limit.systemProperty());\n+            if (oldName != null) {\n+                if (getSystemProperty(limit, oldName)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+\n+    \/**\n+     * Reads a property from a configuration file, if any.\n+     *\n+     * @param limit the limit property\n+     * @param sysPropertyName the name of system property\n+     * @return\n+     *\/\n+    private boolean getPropertyConfig(Limit limit, String sysPropertyName) {\n+        try {\n+            String value = SecuritySupport.readConfig(sysPropertyName);\n@@ -578,1 +607,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityManager.java","additions":43,"deletions":15,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * <h2 id=\"ScopeAndOrder\">Scope and Order<\/h2>\n+ * <h2 id=\"PropPrec\">Property Precedence<\/h2>\n@@ -35,3 +35,2 @@\n- * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PSO\">Property Scope and Order<\/a>\n- * defined in the module summary for the effectiveness of their scope and order\n- * of preference.\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PP\">Property Precedence<\/a>\n+ * defined in the module summary for the property settings.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n- * <h2>Scope and Order<\/h2>\n+ * <h2>Property Precedence<\/h2>\n@@ -169,1 +169,1 @@\n- * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PSO\">Property Scope and Order<\/a>\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PP\">Property Precedence<\/a>\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,0 +61,5 @@\n+    \/**\n+     * Flag indicating whether a custom config has been read\n+     *\/\n+    static volatile boolean firstTimeCustom = true;\n+\n@@ -184,3 +189,5 @@\n-     * The method reads the System Property \"java.xml.config.file\" for a custom\n-     * configuration file, if doesn't exist, falls back to the JDK default that\n-     * is typically located at $java.home\/conf\/jaxp.properties.\n+     * The method reads the JDK default configuration that is typically located\n+     * at $java.home\/conf\/jaxp.properties. On top of the default, if the System\n+     * Property \"java.xml.config.file\" exists, the configuration file it points\n+     * to will also be read. Any settings in it will then override those in the\n+     * default.\n@@ -194,7 +201,1 @@\n-        \/\/ use the System Property if specified\n-        String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE);\n-        if (configFile != null && loadProperties(configFile)) {\n-            return cacheProps.getProperty(propName);\n-        }\n-\n-        \/\/ fall back to the default configuration file\n+        \/\/ always load the default configuration file\n@@ -224,0 +225,13 @@\n+        \/\/ load the custom configure on top of the default if any\n+        if (firstTimeCustom) {\n+            synchronized (cacheProps) {\n+                if (firstTimeCustom) {\n+                    String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE);\n+                    if (configFile != null) {\n+                        loadProperties(configFile);\n+                    }\n+                    firstTimeCustom = false;\n+                }\n+            }\n+        }\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -538,1 +538,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Read system properties, or the configuration file\n@@ -541,1 +541,0 @@\n-\n@@ -543,8 +542,5 @@\n-            if (!getSystemProperty(limit, limit.systemProperty())) {\n-                \/\/if system property is not found, try the older form if any\n-                for (NameMap nameMap : NameMap.values()) {\n-                    String oldName = nameMap.getOldName(limit.systemProperty());\n-                    if (oldName != null) {\n-                        getSystemProperty(limit, oldName);\n-                    }\n-                }\n+            \/\/ attempts to read both the current and old system propery\n+            if (!getSystemProperty(limit, limit.systemProperty())\n+                    && (!getOldSystemProperty(limit))) {\n+                \/\/if system property is not found, try the config file\n+                getPropertyConfig(limit, limit.systemProperty());\n@@ -553,1 +549,0 @@\n-\n@@ -574,1 +569,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Reads a system property, sets value and state if found.\n@@ -576,1 +571,1 @@\n-     * @param property the type of the property\n+     * @param limit the limit property\n@@ -587,0 +582,6 @@\n+        } catch (NumberFormatException e) {\n+            \/\/invalid setting\n+            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n+        }\n+        return false;\n+    }\n@@ -588,1 +589,29 @@\n-            value = SecuritySupport.readConfig(sysPropertyName);\n+    \/**\n+     * Reads the legacy system property.\n+     * @param limit a limit object\n+     * @return true if found, false otherwise\n+     *\/\n+    private boolean getOldSystemProperty(Limit limit) {\n+        boolean found = false;\n+        for (NameMap nameMap : NameMap.values()) {\n+            String oldName = nameMap.getOldName(limit.systemProperty());\n+            if (oldName != null) {\n+                if (getSystemProperty(limit, oldName)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+\n+    \/**\n+     * Reads a property from a configuration file, if any.\n+     *\n+     * @param limit the limit property\n+     * @param sysPropertyName the name of system property\n+     * @return\n+     *\/\n+    private boolean getPropertyConfig(Limit limit, String sysPropertyName) {\n+        try {\n+            String value = SecuritySupport.readConfig(sysPropertyName);\n@@ -601,1 +630,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":43,"deletions":15,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -60,3 +60,2 @@\n- * of the Java installation if the\n- * <a href=\"#CF_SP\">system property {@code java.xml.config.file}<\/a>\n- * is not specified.\n+ * of the Java installation and use the settings if any for configuring the\n+ * factories.\n@@ -74,2 +73,2 @@\n- * configuration file outside of the JDK to override the default configuration\n- * file (jaxp.properties).\n+ * configuration file outside of the JDK to override any or all of the settings\n+ * in the default configuration file (jaxp.properties).\n@@ -78,4 +77,3 @@\n- * will override the default file in its entirety, that means no setting in the\n- * latter will be used by the factories. If the system property does not exist\n- * when a factory is instantiated, no further attempt will be made to locate it\n- * while the factory is alive.\n+ * will be read and the property settings in it used to override those in the\n+ * default file. If the system property does not exist when a factory is instantiated,\n+ * no further attempt will be made to locate it while the factory is alive.\n@@ -93,2 +91,2 @@\n- * in the table below along with the method, System Property name, Configuration\n- * File, and System Default method to be used in the procedure.\n+ * in the table below along with the method, System Property name, and System\n+ * Default method to be used in the procedure.\n@@ -103,1 +101,0 @@\n- * <th scope=\"col\">Configuration File<\/th>\n@@ -115,1 +112,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -124,1 +120,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -133,1 +128,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -142,4 +136,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n- *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n- * <\/td>\n@@ -154,4 +144,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n- *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n- * <\/td>\n@@ -166,4 +152,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#ConfigurationFile\">Configuration File<\/a>,\n- *     <a href=\"#CF_Default\">jaxp.properties<\/a> by default\n- * <\/td>\n@@ -178,1 +160,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -187,1 +168,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -196,1 +176,0 @@\n- * <td style=\"text-align:center\"><a href=\"#ConfigurationFile\">Configuration File<\/a>, <a href=\"#CF_Default\">jaxp.properties<\/a> by default<\/td>\n@@ -272,1 +251,1 @@\n- * <h2 id=\"PSO\">Property Scope and Order<\/h2>\n+ * <h2 id=\"PP\">Property Precedence<\/h2>\n@@ -276,5 +255,2 @@\n- * system properties, the API properties. These settings will be in effect in\n- * different scopes and follow an overriding order. In general, a setting in a\n- * more specific or narrower scope overrides the one in general or wider scope.\n- * The followings describe the scope of the settings and the overriding order that\n- * is in descending order, with the later overriding the former:\n+ * system properties, the API properties. These settings have a precedence order\n+ * as follows, with earlier ones override the later:\n@@ -283,3 +259,0 @@\n- * <li>\n- *      In a factory scope, properties are initialized with default values;\n- * <\/li>\n@@ -287,4 +260,7 @@\n- *      In a factory scope, the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING}\n- * feature (hereafter referred to FSP) may set a more restrictive value to override\n- * the default. This process applies only to security-related properties that\n- * have defined a restrictive value on top of the default one.\n+ *      Properties specified through factories or processors API. For example,\n+ *      <pre>\n+ *      {@code\n+ *      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *      dbf.setAttribute(property, value);\n+ *      }\n+ *      <\/pre>\n@@ -293,2 +269,1 @@\n- *      In a scope of all invocations of the JDK, properties that have corresponding\n- * system properties defined may be set in the <a href=\"#ConfigurationFile\">configuration file<\/a>;\n+ *      Properties set using the corresponding System properties;\n@@ -297,2 +272,2 @@\n- *      In a scope of a JDK instance, system properties, if any, may be set on\n- * the commandline;\n+ *      Properties set in a <a href=\"#ConfigurationFile\">configuration file<\/a>\n+ * pointed to by the system property {@code java.xml.config.file};\n@@ -301,2 +276,2 @@\n- *      System properties may be set through the System Property API to have effect\n- * on the procedure where they are set;\n+ *      Properties set in the default configuration file\n+ * <a href=\"#CF_Default\">{@code jaxp.properties}<\/a>;\n@@ -305,2 +280,3 @@\n- *      And last, in a scope of a factory or processor, properties specified\n- * through factories or processors API.\n+ *      Properties' default values initialized during factory or processor creation.\n+ * Security-related properties will be on their restrictive values when the\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature is true.\n@@ -315,4 +291,2 @@\n- * and features. For that purpose, the JDK may be distributed with the\n- * <a href=\"#CF_Default\">default file {@code jaxp.properties}<\/a> that may contain\n- * any of the properties listed in table\n- * <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n+ * and features. A configuration file may contain any of the properties listed in\n+ * table <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n@@ -320,1 +294,1 @@\n- * <a href=\"#PSO\">Property Scope and Order<\/a> for the use of the configuration\n+ * <a href=\"#PP\">Property Precedence<\/a> for the use of the configuration\n@@ -329,1 +303,1 @@\n- * naming convention, System Properties, scope and order, and processors to which\n+ * naming convention, System Properties, precedence order, and processors to which\n@@ -377,1 +351,1 @@\n- * <h3 id=\"ScopeAndOrder\">Scope and Order<\/h3>\n+ * <h3 id=\"PropPrec\">Property Precedence<\/h3>\n@@ -379,4 +353,4 @@\n- * as described in section <a href=\"#PSO\">Property Scope and Order<\/a>. Specific\n- * to the 2nd step in the procedure, that is, settings by\n- * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP}, security related\n- * features and properties are flagged as {@code \"security: yes\"} in table\n+ * as described in section <a href=\"#PP\">Property Precedence<\/a> in setting properties.\n+ * Specific to the initialized values, the restrictive values that are set when\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true are shown\n+ * in {@code \"Value\"}'s subcolumn {@code \"Enforced\"} in table\n@@ -384,2 +358,1 @@\n- * <a href=\"#Properties\">Properties<\/a>. Their values are shown in {@code \"Value\"}'s\n- * subcolumn {@code \"Enforced\"} in the tables.\n+ * <a href=\"#Properties\">Properties<\/a>.\n@@ -390,1 +363,2 @@\n- * not allow it to be turned off. The security properties are therefore enforced.\n+ * not allow it to be turned off. The security related properties are therefore\n+ * set to the {@code \"Enforced\"} values.\n@@ -725,1 +699,1 @@\n- * <td id=\"xpathExprGrpLimit\">jdk.xml.xpathExprGrpLimit<\/td>\n+ * <td id=\"xpathExprOpLimit\">jdk.xml.xpathExprOpLimit<\/td>\n@@ -853,1 +827,1 @@\n- * to the <a href=\"#ScopeAndOrder\">Scope and Order<\/a> on how secure processing\n+ * to the <a href=\"#PropPrec\">Property Precedence<\/a> on how secure processing\n@@ -866,2 +840,1 @@\n- * as defined in <a href=\"#ScopeAndOrder\">Scope and Order<\/a> thus becomes, in\n- * descending order:\n+ * as defined in <a href=\"#PropPrec\">Property Precedence<\/a> thus becomes:\n@@ -870,5 +843,0 @@\n- * <li>The default value;<\/li>\n- * <li>Value set by FEATURE_SECURE_PROCESSING;<\/li>\n- * <li>Value set in the configuration file;<\/li>\n- * <li>Value set as System Property;<\/li>\n- * <li>Value set on factories or processors using <b>legacy property names<\/b>;<\/li>\n@@ -876,0 +844,5 @@\n+ * <li>Value set on factories or processors using <b>legacy property names<\/b>;<\/li>\n+ * <li>Value set as System Property;<\/li>\n+ * <li>Value set in the configuration file;<\/li>\n+ * <li>Value set by FEATURE_SECURE_PROCESSING;<\/li>\n+ * <li>The default value;<\/li>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":47,"deletions":74,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the java.xml.config.file\n+# system property. For example java -Djava.xml.config.file=myConfigurationFile\n+################################################################################\n+\n+# ---- JDK Sample Configuration ----\n+#\n+# This sample demonstrates what can be set in the configuration file. Throughout\n+# the sample file, some exmple settings are commented out so as to not cause\n+# behavior change. The ones that are not are generally set to values the same as\n+# the default to be used by tests.\n+#\n+#\n+# JAXP Lookup Mechanism:\n+# The configuration file is one of the ways for the factories to locate and load\n+# the implementation class. To specify an implementation class, write a key\/value\n+# pair with the factory ID and fully qualified name of the implementation class,\n+# for example, the following specify the implementation class for DOM:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=common.config.DocumentBuilderFactoryImpl\n+#\n+#\n+# Java SE and JDK Implementation Specific Properties:\n+#\n+# Properties with corresponding System Properties defined in Java SE or supported\n+# by the JDK Implementation can be placed in the configuration file to override\n+# the default property values. The format is:\n+#     system-property-name=value\n+#\n+#\n+# Extension Functions:\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The following example disallows extension functions\n+#jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+# The JDK provides default parser implementation, but also allows third party\n+# implementation to override it. If it is necessary, users may set the property\n+# to true. By default, it is set to disallow overriding the default parser as\n+# done below.\n+jdk.xml.overrideDefaultParser=false\n+#\n+#\n+# External Access Properties:\n+#\n+# The External Access Properties are defined in javax.xml.XMLConstants. Their\n+# system properties are javax.xml.accessExternalDTD, javax.xml.accessExternalSchema,\n+# and javax.xml.accessExternalStylesheet. The values are a list of protocols separated\n+# by comma. The followings are example of external access settings:\n+#\n+# allow local (file) external DTD\n+# allow local (file) and remote (http) external DTD\n+# javax.xml.accessExternalDTD=file\n+#\n+# allow local (file) and remote (http) external schema\n+# javax.xml.accessExternalSchema=file, http\n+#\n+# reject external stylesheet\n+# javax.xml.accessExternalStylesheet=\"\"\n+#\n+# allow all external stylesheet\n+# javax.xml.accessExternalStylesheet=\"all\"\n+#\n+#\n+# Catalog Properties:\n+# The Catalog API defines four features: FILES, PREFER, DEFER and RESOLVE.\n+# Except PREFER, all other properties with system properties can be placed in\n+# the configuration file. Examples are as follows.\n+#\n+# specify a custom catalog file with its URI\n+# javax.xml.catalog.files = file:\/\/\/users\/auser\/catalog\/catalog.xml\n+#\n+# instructs the CatalogResolver to load alternative catalogs as needed\n+# javax.xml.catalog.defer=true\n+#\n+# the value of the resolve property is defined to be strict\/continue\/ignore\n+# to be strict, that is, to report an error if an External resource can not be\n+# resolved through a catalog, set the property to be strict as follows\n+# javax.xml.catalog.resolve=strict\n+#\n+#\n+# Catalog is enabled for JAXP processors:\n+# javax.xml.useCatalog=true\n+#\n+# Implementation specific limits:\n+#\n+# DTD related limits\n+#jdk.xml.entityExpansionLimit=64000\n+#jdk.xml.totalEntitySizeLimit=5E7\n+#jdk.xml.maxGeneralEntitySizeLimit=0\n+#jdk.xml.maxParameterEntitySizeLimit=1E6\n+#jdk.xml.entityReplacementLimit=3E6\n+#\n+# General XML limits\n+#jdk.xml.elementAttributeLimit=10000\n+#jdk.xml.maxOccurLimit=5000\n+#jdk.xml.maxElementDepth=0\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+# XPath Limits\n+jdk.xml.xpathExprGrpLimit=10\n+jdk.xml.xpathExprOpLimit=100\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -28,1 +28,4 @@\n- * Configuration Test\n+ * Verifies the configuration file and precedence:\n+ *     settings in the configuration file are used as the default values of properties;\n+ *     any settings in a custom configuration file override those in the default\n+ * configuration.\n@@ -31,0 +34,1 @@\n+    \/\/ system property for custom configuration file\n@@ -32,1 +36,16 @@\n-    static final String SP_ENTITY_EXPANSION = \"jdk.xml.entityExpansionLimit\";\n+    \/\/ Impl-Specific Property: entity expansion\n+    static final String ISP_ENTITY_EXPANSION = \"jdk.xml.entityExpansionLimit\";\n+    \/\/ Impl-Specific Property: parameter entity limit\n+    static final String ISP_PARAMETER_ENTITY = \"jdk.xml.maxParameterEntitySizeLimit\";\n+    \/\/ Impl-Specific Property: element attribute limit\n+    static final String ISP_ELEMENT_ATTRIBUTE = \"jdk.xml.elementAttributeLimit\";\n+    \/\/ Impl-Specific Property: XML name limit\n+    static final String ISP_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n+\n+    \/\/ Impl-Specific Feature: extension functions\n+    static final String ISF_EXTENSION_FUNCTIONS = \"jdk.xml.enableExtensionFunctions\";\n+    \/\/ Catalog feature: resolve\n+    static final String CATALOG_RESOLVE = \"javax.xml.catalog.resolve\";\n+    \/\/ The USE_CATALOG property indicates whether Catalog is enabled for a processor\n+    static final String USE_CATALOG = \"http:\/\/javax.xml.XMLConstants\/feature\/useCatalog\";\n+    static final String SP_USE_CATALOG = \"javax.xml.useCatalog\";\n@@ -47,0 +66,2 @@\n+    static enum PropertyType { FEATURE, PROPERTY };\n+\n@@ -51,1 +72,1 @@\n-     *     configuration file, property name, property value\n+     *     configuration file, property name, property type, property value\n@@ -55,0 +76,16 @@\n+        \/**\n+         * Test cases for verifying the configuration file\n+         *\/\n+        return new Object[][]{\n+            \/\/ default value is expected for property (PARAMETER_ENTITY) not\n+            \/\/ set in the default and custom configuration files\n+            {null, ISP_PARAMETER_ENTITY, \"1000000\"},\n+            \/\/ this property is set in the default (jaxp.properties),\n+            \/\/ but not the custom configuration file. Expects readings from the\n+            \/\/ default config\n+            {null, ISP_NAME_LIMIT, \"1000\"},\n+            \/\/ the property in the default configuration file (jaxp.properties)\n+            \/\/ will be read and used as the default value of the property\n+            {null, ISP_ENTITY_EXPANSION, \"64000\"},\n+        };\n+    }\n@@ -56,0 +93,7 @@\n+    @DataProvider(name = \"getProperty0\")\n+    public Object[][] getProperty0() {\n+        \/**\n+         * Duplicate of getProperty to include the case that uses the system\n+         * property to set up a custom configuration file. This is to avoid\n+         * interfering with other test cases.\n+         *\/\n@@ -57,2 +101,3 @@\n-            {null, SP_ENTITY_EXPANSION, \"64000\"},\n-            {\"jaxp.properties\", SP_ENTITY_EXPANSION, \"1000\"},\n+            \/\/ the setting in the custom configuration file will override that\n+            \/\/ in the default one\n+            {\"customJaxp.properties\", ISP_ENTITY_EXPANSION, \"1000\"},\n@@ -62,0 +107,1 @@\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigurationTest.java","additions":51,"deletions":5,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-            {null, \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"},\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMImplTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.SP_CONFIG;\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMImplTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class DOMImplTest0 {\n+    \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, factory implementation class\n+     *\/\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testDOMImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        System.clearProperty(SP_CONFIG);\n+        Assert.assertEquals(dbf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMImplTest0.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of DOMPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class DOMPropertyTest0 extends ConfigurationTest {\n+\n+   @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        Assert.assertEquals(dbf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -60,1 +60,0 @@\n-            {null, \"com.sun.xml.internal.stream.events.XMLEventFactoryImpl\"},\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/EventFactoryTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLEventFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.EventFactoryTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class EventFactoryTest0 {\n+   @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.events.XMLEventFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testEventFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLEventFactory ef = XMLEventFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(ef.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/EventFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -55,1 +55,0 @@\n-            {null, \"com.sun.xml.internal.stream.XMLInputFactoryImpl\"},\n@@ -57,1 +56,0 @@\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/InputFactoryTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.InputFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class InputFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLInputFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testInputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/InputFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -50,2 +50,2 @@\n-            {null, \"com.sun.xml.internal.stream.XMLOutputFactoryImpl\"},\n-            {\"jaxpImpls.properties\", \"common.config.OutputFactoryTest\"},};\n+            {\"jaxpImpls.properties\", \"common.config.OutputFactoryTest\"},\n+        };\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/OutputFactoryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLOutputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.OutputFactoryTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class OutputFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLOutputFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testOutputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLOutputFactory xof = XMLOutputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xof.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/OutputFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -49,2 +49,2 @@\n-            {null, \"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl\"},\n-            {\"jaxpImpls.properties\", \"common.config.SAXImplTest\"},};\n+            {\"jaxpImpls.properties\", \"common.config.SAXImplTest\"},\n+        };\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXImplTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXImplTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXImplTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testSAXImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(spf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXImplTest0.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.xml.sax.XMLReader;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of SAXPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class SAXPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        SAXParser sp = spf.newSAXParser();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sp.getProperty(property), expected);\n+        XMLReader reader = sp.getXMLReader();\n+        Assert.assertEquals(reader.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXPropertyTest0.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -50,1 +50,0 @@\n-            {null, \"com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory\"},\n@@ -52,1 +51,0 @@\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaFactoryTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaFactoryTest0.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of SchemaPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class SchemaPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaPropertyTest0.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.StAXPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of DOMPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class StAXPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/StAXPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -51,2 +51,0 @@\n-            {\"jaxpImpls.properties\", \"common.config.TransformerFactoryTest\"},\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerFactoryTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of TransformerPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class TransformerPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -48,1 +48,0 @@\n-            {null, \"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl\"},\n@@ -50,1 +49,0 @@\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathFactoryTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -50,1 +50,0 @@\n-            {\"jaxp.properties\", \"jdk.xml.xpathExprOpLimit\", \"200\"},\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathPropertyTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of XPathPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class XPathPropertyTest0 extends ConfigurationTest {\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+\n+        return new Object[][]{\n+            {\"customJaxp.properties\", \"jdk.xml.xpathExprOpLimit\", \"200\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathPropertyTest0.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the jdk.xml.config.file \n+# system property. For example java -Djava.xml.config.file=myfile \n+################################################################################\n+\n+# ---- Custom Configuration File ----\n+# Sets more restrictive values for: extension functions, overriding default\n+# parsers, and DTD related limits.\n+#\n+# Disable Extension Functions\n+jdk.xml.enableExtensionFunctions=false\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+jdk.xml.entityExpansionLimit=1000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=1024\n+jdk.xml.maxParameterEntitySizeLimit=1024\n+jdk.xml.entityReplacementLimit=10000\n+#\n+# XPath limits\n+jdk.xml.xpathExprOpLimit=200\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/customJaxp.properties","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -9,2 +9,2 @@\n-# This file can be replaced by specifying a filename with the jdk.xml.config.file \n-# system property. For example java -Djava.xml.config.file=myfile\n+# This file can be replaced by specifying a filename with the java.xml.config.file\n+# system property. For example java -Djava.xml.config.file=myConfigurationFile\n@@ -13,1 +13,1 @@\n-# ---- Configuration for test ----\n+# ---- JDK Sample Configuration ----\n@@ -15,3 +15,34 @@\n-# Disable Extension Functions\n-jdk.xml.enableExtensionFunctions=false\n-# Disallow overriding the default parser\n+# This sample demonstrates what can be set in the configuration file. Throughout\n+# the sample file, some exmple settings are commented out so as to not cause\n+# behavior change. The ones that are not are generally set to values the same as\n+# the default to be used by tests.\n+#\n+#\n+# JAXP Lookup Mechanism:\n+# The configuration file is one of the ways for the factories to locate and load\n+# the implementation class. To specify an implementation class, write a key\/value\n+# pair with the factory ID and fully qualified name of the implementation class,\n+# for example, the following specify the implementation class for DOM:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=common.config.DocumentBuilderFactoryImpl\n+#\n+#\n+# Java SE and JDK Implementation Specific Properties:\n+#\n+# Properties with corresponding System Properties defined in Java SE or supported\n+# by the JDK Implementation can be placed in the configuration file to override\n+# the default property values. The format is:\n+#     system-property-name=value\n+#\n+#\n+# Extension Functions:\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The following example disallows extension functions\n+#jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+# The JDK provides default parser implementation, but also allows third party\n+# implementation to override it. If it is necessary, users may set the property\n+# to true. By default, it is set to disallow overriding the default parser as\n+# done below.\n@@ -20,0 +51,42 @@\n+#\n+# External Access Properties:\n+#\n+# The External Access Properties are defined in javax.xml.XMLConstants. Their\n+# system properties are javax.xml.accessExternalDTD, javax.xml.accessExternalSchema,\n+# and javax.xml.accessExternalStylesheet. The values are a list of protocols separated\n+# by comma. The followings are example of external access settings:\n+#\n+# allow local (file) external DTD\n+# allow local (file) and remote (http) external DTD\n+# javax.xml.accessExternalDTD=file\n+#\n+# allow local (file) and remote (http) external schema\n+# javax.xml.accessExternalSchema=file, http\n+#\n+# reject external stylesheet\n+# javax.xml.accessExternalStylesheet=\"\"\n+#\n+# allow all external stylesheet\n+# javax.xml.accessExternalStylesheet=\"all\"\n+#\n+#\n+# Catalog Properties:\n+# The Catalog API defines four features: FILES, PREFER, DEFER and RESOLVE.\n+# Except PREFER, all other properties with system properties can be placed in\n+# the configuration file. Examples are as follows.\n+#\n+# specify a custom catalog file with its URI\n+# javax.xml.catalog.files = file:\/\/\/users\/auser\/catalog\/catalog.xml\n+#\n+# instructs the CatalogResolver to load alternative catalogs as needed\n+# javax.xml.catalog.defer=true\n+#\n+# the value of the resolve property is defined to be strict\/continue\/ignore\n+# to be strict, that is, to report an error if an External resource can not be\n+# resolved through a catalog, set the property to be strict as follows\n+# javax.xml.catalog.resolve=strict\n+#\n+#\n+# Catalog is enabled for JAXP processors:\n+# javax.xml.useCatalog=true\n+#\n@@ -21,5 +94,7 @@\n-jdk.xml.entityExpansionLimit=1000\n-jdk.xml.totalEntitySizeLimit=100000\n-jdk.xml.maxGeneralEntitySizeLimit=1024\n-jdk.xml.maxParameterEntitySizeLimit=1024\n-jdk.xml.entityReplacementLimit=10000\n+#\n+# DTD related limits\n+#jdk.xml.entityExpansionLimit=64000\n+#jdk.xml.totalEntitySizeLimit=5E7\n+#jdk.xml.maxGeneralEntitySizeLimit=0\n+#jdk.xml.maxParameterEntitySizeLimit=1E6\n+#jdk.xml.entityReplacementLimit=3E6\n@@ -28,3 +103,3 @@\n-jdk.xml.elementAttributeLimit=100\n-jdk.xml.maxOccurLimit=5000\n-jdk.xml.maxElementDepth=0\n+#jdk.xml.elementAttributeLimit=10000\n+#jdk.xml.maxOccurLimit=5000\n+#jdk.xml.maxElementDepth=0\n@@ -35,1 +110,1 @@\n-jdk.xml.xpathExprOpLimit=200\n+jdk.xml.xpathExprOpLimit=100\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":90,"deletions":15,"binary":false,"changes":105,"status":"modified"}]}