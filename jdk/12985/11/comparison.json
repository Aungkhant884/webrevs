{"files":[{"patch":"@@ -0,0 +1,37 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+include CopyCommon.gmk\n+\n+################################################################################\n+\n+XML_LIB_SRC := $(TOPDIR)\/src\/java.xml\/share\/conf\n+\n+$(CONF_DST_DIR)\/jaxp.properties: $(XML_LIB_SRC)\/jaxp.properties\n+\t$(call install-file)\n+\n+TARGETS := $(CONF_DST_DIR)\/jaxp.properties\n+\n+################################################################################\n","filename":"make\/modules\/java.xml\/Copy.gmk","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Mar 2023\n@@ -208,1 +208,1 @@\n-            value = SecuritySupport.readJAXPProperty(systemProperty);\n+            value = SecuritySupport.readConfig(systemProperty);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xalan\/internal\/utils\/FeaturePropertyBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Mar 2023\n@@ -151,1 +151,1 @@\n-            return attributes.get(pName);\n+            return fSecurityManager.getLimitAsString(pName);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/jaxp\/DocumentBuilderFactoryImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -515,1 +515,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Read system properties, or the configuration file\n@@ -518,1 +518,0 @@\n-\n@@ -520,8 +519,5 @@\n-            if (!getSystemProperty(limit, limit.systemProperty())) {\n-                \/\/if system property is not found, try the older form if any\n-                for (NameMap nameMap : NameMap.values()) {\n-                    String oldName = nameMap.getOldName(limit.systemProperty());\n-                    if (oldName != null) {\n-                        getSystemProperty(limit, oldName);\n-                    }\n-                }\n+            \/\/ attempts to read both the current and old system propery\n+            if (!getSystemProperty(limit, limit.systemProperty())\n+                    && (!getOldSystemProperty(limit))) {\n+                \/\/if system property is not found, try the config file\n+                getPropertyConfig(limit, limit.systemProperty());\n@@ -530,1 +526,0 @@\n-\n@@ -551,1 +546,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Reads a system property, sets value and state if found.\n@@ -553,1 +548,1 @@\n-     * @param property the type of the property\n+     * @param limit the limit property\n@@ -564,0 +559,6 @@\n+        } catch (NumberFormatException e) {\n+            \/\/invalid setting\n+            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n+        }\n+        return false;\n+    }\n@@ -565,1 +566,29 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+    \/**\n+     * Reads the legacy system property.\n+     * @param limit a limit object\n+     * @return true if found, false otherwise\n+     *\/\n+    private boolean getOldSystemProperty(Limit limit) {\n+        boolean found = false;\n+        for (NameMap nameMap : NameMap.values()) {\n+            String oldName = nameMap.getOldName(limit.systemProperty());\n+            if (oldName != null) {\n+                if (getSystemProperty(limit, oldName)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+\n+    \/**\n+     * Reads a property from a configuration file, if any.\n+     *\n+     * @param limit the limit property\n+     * @param sysPropertyName the name of system property\n+     * @return\n+     *\/\n+    private boolean getPropertyConfig(Limit limit, String sysPropertyName) {\n+        try {\n+            String value = SecuritySupport.readConfig(sysPropertyName);\n@@ -578,1 +607,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityManager.java","additions":44,"deletions":16,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,1 +234,1 @@\n-            value = SecuritySupport.readJAXPProperty(systemProperty);\n+            value = SecuritySupport.readConfig(systemProperty);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/utils\/XMLSecurityPropertyManager.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,50 @@\n- * <p>Utility class to contain basic XML values as constants.\n+ * Defines constants for XML Processing APIs.\n+ *\n+ * <h2 id=\"PropPrec\">Property Precedence<\/h2>\n+ * Properties such as the external access properties (ACCESS_EXTERNAL_*) and\n+ * USE_CATALOG, can be specified through multiple configuration sources. Their\n+ * precedence is described in the section\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PP\">Property Precedence<\/a>\n+ * of the module summary.\n+ *\n+ * <h2 id=\"EAP\">External Access Properties<\/h2>\n+ * The value of the external access properties, including {@link #ACCESS_EXTERNAL_DTD},\n+ * {@link #ACCESS_EXTERNAL_SCHEMA}, and {@link #ACCESS_EXTERNAL_STYLESHEET},\n+ * is defined as follows.\n+ *\n+ * <h3 id=\"EAPValue\">Value:<\/h3>\n+ * A list of protocols separated by comma. A protocol is the scheme portion of a\n+ * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme\n+ * portion separated by colon. A scheme is defined as:\n+ *\n+ * <blockquote>\n+ * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n+ * where alpha = a-z and A-Z.<br><br>\n+ *\n+ * And the JAR protocol:<br>\n+ *\n+ * jar[:scheme]<br><br>\n+ *\n+ * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n+ * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n+ * Examples of protocols are file, http, jar:file.\n+ *\n+ * <\/blockquote>\n+ *\n+ * <h3>Default value:<\/h3>\n+ * The default value is implementation specific and therefore not specified.\n+ * The following options are provided for consideration:\n+ * <blockquote>\n+ * <UL>\n+ *     <LI>an empty string to deny all access to external references;<\/LI>\n+ *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n+ *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n+ * <\/UL><br>\n+ *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n+ *      restrict external connections by default, though this may cause problems for applications\n+ *      that process XML\/XSD\/XSL with external references.\n+ * <\/blockquote>\n+ *\n+ * <h3>Granting all access:<\/h3>\n+ * The keyword \"all\" grants permission to all protocols.\n+ *\n@@ -201,35 +250,1 @@\n-         * <b>Value: <\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         *<p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -238,3 +253,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalDTD}.\n-         *\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalDTD}.\n@@ -243,6 +256,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n-         *\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n@@ -265,35 +275,1 @@\n-         * <b>Value:<\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -302,2 +278,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalSchema}\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalSchema}\n@@ -306,6 +281,4 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n-         *\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n+        *\n@@ -329,35 +302,1 @@\n-         * <b>Value:<\/b> a list of protocols separated by comma. A protocol is the scheme portion of a\n-         * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n-         * separated by colon.\n-         * A scheme is defined as:\n-         *\n-         * <blockquote>\n-         * scheme = alpha *( alpha | digit | \"+\" | \"-\" | \".\" )<br>\n-         * where alpha = a-z and A-Z.<br><br>\n-         *\n-         * And the JAR protocol:<br>\n-         *\n-         * jar[:scheme]<br><br>\n-         *\n-         * Protocols including the keyword \"jar\" are case-insensitive. Any whitespaces as defined by\n-         * {@link java.lang.Character#isSpaceChar } in the value will be ignored.\n-         * Examples of protocols are file, http, jar:file.\n-         *\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n-         * The following options are provided for consideration:\n-         * <blockquote>\n-         * <UL>\n-         *     <LI>an empty string to deny all access to external references;<\/LI>\n-         *     <LI>a specific protocol, such as file, to give permission to only the protocol;<\/LI>\n-         *     <LI>the keyword \"all\" to grant  permission to all protocols.<\/LI>\n-         * <\/UL><br>\n-         *      When FEATURE_SECURE_PROCESSING is enabled,  it is recommended that implementations\n-         *      restrict external connections by default, though this may cause problems for applications\n-         *      that process XML\/XSD\/XSL with external references.\n-         * <\/blockquote>\n-         *\n-         * <p>\n-         * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+         * <b>Value: <\/b> as defined in <a href=\"#EAPValue\">the class description<\/a>.\n@@ -366,2 +305,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.accessExternalStylesheet}\n+         * <b>System Property:<\/b> {@code javax.xml.accessExternalStylesheet}\n@@ -370,5 +308,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * of the property.\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n@@ -387,1 +323,1 @@\n-         * jaxp.properties by using the {@code javax.xml.catalog.files} property\n+         * configuration file by using the {@code javax.xml.catalog.files} property\n@@ -404,2 +340,1 @@\n-         * <b>System Property:<\/b> The value of this property can be set or overridden by\n-         * system property {@code javax.xml.useCatalog}\n+         * <b>System Property:<\/b> {@code javax.xml.useCatalog}\n@@ -408,5 +343,3 @@\n-         * <b>jaxp.properties:<\/b> This configuration file is in standard\n-         * {@link java.util.Properties} format and typically located in the {@code conf}\n-         * directory of the Java installation. If the file exists and the system\n-         * property is specified, its value will be used to override the default\n-         * value of the property.\n+         * <b>Configuration File:<\/b>\n+         * Yes. The property can be set in the\n+         * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":72,"deletions":139,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n@@ -45,2 +43,2 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties [1]<\/th>\n- * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [2]<\/th>\n+ * <th scope=\"col\" rowspan=\"2\"><a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a> [2]<\/th>\n+ * <th scope=\"col\" colspan=\"2\" style=\"text-align:center\">Value [3]<\/th>\n@@ -64,1 +62,1 @@\n- * <td>javax.xml.catalog.files<\/td>\n+ * <td>Yes<\/td>\n@@ -76,1 +74,1 @@\n- * identifiers. The default value is public [3].<\/td>\n+ * identifiers. The default value is public [4].<\/td>\n@@ -79,1 +77,1 @@\n- * <td rowspan=\"2\">N\/A<\/td>\n+ * <td rowspan=\"2\">No<\/td>\n@@ -98,2 +96,1 @@\n- * <td rowspan=\"2\">javax.xml.catalog.defer [4]<\/td>\n- * <td rowspan=\"2\">javax.xml.catalog.defer<\/td>\n+ * <td rowspan=\"2\">javax.xml.catalog.defer [5]<\/td>\n@@ -101,0 +98,1 @@\n+ * <td rowspan=\"2\">Yes<\/td>\n@@ -110,1 +108,1 @@\n- * Loads all catalogs[5]. <\/td>\n+ * Loads all catalogs[6]. <\/td>\n@@ -119,1 +117,1 @@\n- * <td rowspan=\"3\">javax.xml.catalog.resolve<\/td>\n+ * <td rowspan=\"3\">Yes<\/td>\n@@ -143,1 +141,0 @@\n- *\n@@ -145,1 +142,4 @@\n- * <b>[2]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n+ * <b>[2]<\/b> The value \"yes\" indicates that the system property can be placed in\n+ * the configuration file, \"no\" otherwise.\n+ * <p>\n+ * <b>[3]<\/b> The value shall be exactly as listed in this table, case-sensitive.\n@@ -148,1 +148,1 @@\n- * <b>[3]<\/b> The Catalog specification defined complex rules on\n+ * <b>[4]<\/b> The Catalog specification defined complex rules on\n@@ -157,1 +157,1 @@\n- * <b>[4]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n+ * <b>[5]<\/b> Although non-standard attributes in the OASIS Catalog specification,\n@@ -163,1 +163,1 @@\n- * <b>[5]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n+ * <b>[6]<\/b> If the intention is to share an entire catalog store, it may be desirable to\n@@ -167,6 +167,10 @@\n- * <h2>Scope and Order<\/h2>\n- * Features and properties can be set through the catalog file, the Catalog API,\n- * system properties, and {@code jaxp.properties}, with a preference in the same order.\n- * <p>\n- * Properties that are specified as attributes in the catalog file for the\n- * catalog and group entries shall take preference over any of the other settings.\n+ * <h2>Property Precedence<\/h2>\n+ * The Catalog Features follow the\n+ * <a href=\"{@docRoot}\/java.xml\/module-summary.html#PP\">Property Precedence<\/a>\n+ * as described in the module summary with regards to the priority with which\n+ * their values are retrieved from the various configuration sources such as\n+ * the JAXP configuration file, system and API properties. In addition to the\n+ * general configuration sources, the Catalog Features are further supported in\n+ * the catalog file itself where they can be specified as attributes of the catalog\n+ * and group entries. When the attributes are specified, they shall take preference\n+ * over any of the other configuration sources.\n@@ -176,7 +180,0 @@\n- * <p>\n- * Properties set through the Catalog API override those that may have been set\n- * by system properties and\/or in {@code jaxp.properties}. In case of multiple\n- * interfaces, the latest in a procedure shall take preference. For\n- * {@link Feature#FILES}, this means that the URI(s) specified through the methods\n- * of the {@link CatalogManager} will override any that may have been entered\n- * through the {@link Builder}.\n@@ -185,9 +182,0 @@\n- * System properties when set shall override those in {@code jaxp.properties}.\n- * <p>\n- * The {@code jaxp.properties} file is typically in the conf directory of the Java\n- * installation. The file is read only once by the JAXP implementation and\n- * its values are then cached for future use. If the file does not exist\n- * when the first attempt is made to read from it, no further attempts are\n- * made to check for its existence. It is not possible to change the value\n- * of any properties in {@code jaxp.properties} after it has been read.\n- * <p>\n@@ -492,1 +480,1 @@\n-     * jaxp.properties file, jaxp system properties, and jaxp api properties\n+     * configuration file, jaxp system properties, and jaxp api properties\n@@ -625,1 +613,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":29,"deletions":41,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * or system property or the jaxp.properties file to take advantage of the feature.\n+ * or system property or the configuration file to take advantage of the feature.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -54,11 +52,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private final static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    private static volatile boolean firstTime = true;\n-\n@@ -236,25 +223,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/datatype\/FactoryFinder.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -53,11 +51,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private static final Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    static volatile boolean firstTime = true;\n-\n@@ -234,25 +221,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/parsers\/FactoryFinder.java","additions":5,"deletions":39,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -32,1 +31,0 @@\n-import java.util.Properties;\n@@ -55,11 +53,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    final private static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    private static volatile boolean firstTime = true;\n-\n@@ -269,37 +256,4 @@\n-        \/\/ Try read $java.home\/conf\/stax.properties followed by\n-        \/\/ $java.home\/conf\/jaxp.properties if former not present\n-        String configFile = null;\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"stax.properties\";\n-                        final File fStax = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(fStax)) {\n-                            dPrint(()->\"Read properties file \"+fStax);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(fStax));\n-                        }\n-                        else {\n-                            configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                                \"conf\" + File.separator + \"jaxp.properties\";\n-                            final File fJaxp = new File(configFile);\n-                            if (SecuritySupport.doesFileExist(fJaxp)) {\n-                                dPrint(()->\"Read properties file \"+fJaxp);\n-                                cacheProps.load(SecuritySupport.getFileInputStream(fJaxp));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                final String foundIn = configFile;\n-                dPrint(()->\"found in \" + foundIn + \" value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, cl, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId, true);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, cl, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/FactoryFinder.java","additions":5,"deletions":51,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +85,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -137,17 +137,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   conf directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLEventFactory.java","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -224,17 +224,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLInputFactory.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-   * <a href=\"..\/..\/..\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#LookupMechanism\">JAXP Lookup Mechanism<\/a>\n@@ -199,17 +199,4 @@\n-   *   Use the configuration file \"stax.properties\". The file is in standard\n-   *   {@link java.util.Properties} format and typically located in the\n-   *   {@code conf} directory of the Java installation. It contains the fully qualified\n-   *   name of the implementation class with the key being the system property\n-   *   defined above.\n-   *\n-   *   <p>\n-   *   The stax.properties file is read only once by the implementation\n-   *   and its values are then cached for future use.  If the file does not exist\n-   *   when the first attempt is made to read from it, no further attempts are\n-   *   made to check for its existence.  It is not possible to change the value\n-   *   of any property in stax.properties after it has been read for the first time.\n-   *\n-   *   <p>\n-   *   Use the jaxp configuration file \"jaxp.properties\". The file is in the same\n-   *   format as stax.properties and will only be read if stax.properties does\n-   *   not exist.\n+   *   Use the value of the property {@code factoryId} set in the\n+   * <a href=\"{@docRoot}\/java.xml\/module-summary.html#ConfigurationFile\">configuration file<\/a>,\n+   * jaxp.properties by default. If the file exists and the property {@code factoryId}\n+   * is specified in the file, its value will be used as the implementation class.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/stream\/XMLOutputFactory.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.io.File;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n@@ -34,1 +31,0 @@\n-import java.util.Properties;\n@@ -56,11 +52,0 @@\n-    \/**\n-     * Cache for properties in java.home\/conf\/jaxp.properties\n-     *\/\n-    private final static Properties cacheProps = new Properties();\n-\n-    \/**\n-     * Flag indicating if properties from java.home\/conf\/jaxp.properties\n-     * have been cached.\n-     *\/\n-    static volatile boolean firstTime = true;\n-\n@@ -220,25 +205,4 @@\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = SecuritySupport.getSystemProperty(\"java.home\") + File.separator +\n-                            \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        firstTime = false;\n-                        if (SecuritySupport.doesFileExist(f)) {\n-                            dPrint(()->\"Read properties file \"+f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(factoryId);\n-\n-            if (factoryClassName != null) {\n-                dPrint(()->\"found in ${java.home}\/conf\/jaxp.properties, value=\" + factoryClassName);\n-                return newInstance(type, factoryClassName, null, true);\n-            }\n-        }\n-        catch (Exception ex) {\n-            if (debug) ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(factoryId);\n+        if (factoryClassName != null) {\n+            return newInstance(type, factoryClassName, null, true);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/transform\/FactoryFinder.java","additions":5,"deletions":41,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.io.File;\n@@ -31,2 +30,0 @@\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n@@ -36,1 +33,0 @@\n-import java.util.Properties;\n@@ -54,9 +50,0 @@\n-    \/**\n-     * <p>Cache properties for performance.<\/p>\n-     *\/\n-    private static final Properties cacheProps = new Properties();\n-\n-    \/**\n-     * <p>First time requires initialization overhead.<\/p>\n-     *\/\n-    private static volatile boolean firstTime = true;\n@@ -182,31 +169,6 @@\n-        String javah = SecuritySupport.getSystemProperty( \"java.home\" );\n-        String configFile = javah + File.separator +\n-        \"conf\" + File.separator + \"jaxp.properties\";\n-\n-\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if(firstTime){\n-                synchronized(cacheProps){\n-                    if(firstTime){\n-                        File f=new File( configFile );\n-                        firstTime = false;\n-                        if(SecuritySupport.doesFileExist(f)){\n-                            debugPrintln(()->\"Read properties file \" + f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(propertyName);\n-            debugPrintln(()->\"found \" + factoryClassName + \" in $java.home\/conf\/jaxp.properties\");\n-\n-            if (factoryClassName != null) {\n-                sf = createInstance(factoryClassName);\n-                if(sf != null){\n-                    return sf;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            if (debug) {\n-                ex.printStackTrace();\n+        \/\/ try to read from the configuration file\n+        String factoryClassName = SecuritySupport.readConfig(propertyName);\n+        if (factoryClassName != null) {\n+            sf = createInstance(factoryClassName);\n+            if(sf != null){\n+                return sf;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/validation\/SchemaFactoryFinder.java","additions":7,"deletions":45,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.io.File;\n@@ -177,30 +176,5 @@\n-        String javah = SecuritySupport.getSystemProperty( \"java.home\" );\n-        String configFile = javah + File.separator +\n-        \"conf\" + File.separator + \"jaxp.properties\";\n-\n-        \/\/ try to read from $java.home\/conf\/jaxp.properties\n-        try {\n-            if(firstTime){\n-                synchronized(cacheProps){\n-                    if(firstTime){\n-                        File f=new File( configFile );\n-                        firstTime = false;\n-                        if(SecuritySupport.doesFileExist(f)){\n-                            debugPrintln(()->\"Read properties file \" + f);\n-                            cacheProps.load(SecuritySupport.getFileInputStream(f));\n-                        }\n-                    }\n-                }\n-            }\n-            final String factoryClassName = cacheProps.getProperty(propertyName);\n-            debugPrintln(()->\"found \" + factoryClassName + \" in $java.home\/conf\/jaxp.properties\");\n-\n-            if (factoryClassName != null) {\n-                xpathFactory = createInstance(factoryClassName);\n-                if(xpathFactory != null){\n-                    return xpathFactory;\n-                }\n-            }\n-        } catch (Exception ex) {\n-            if (debug) {\n-                ex.printStackTrace();\n+        String factoryClassName = SecuritySupport.readConfig(propertyName);\n+        if (factoryClassName != null) {\n+            xpathFactory = createInstance(factoryClassName);\n+            if(xpathFactory != null){\n+                return xpathFactory;\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/xpath\/XPathFactoryFinder.java","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -286,0 +286,6 @@\n+    \/**\n+     * System Property for the Configuration File\n+     * @since 21\n+     *\/\n+    public static final String CONFIG_FILE = \"java.xml.config.file\";\n+\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkConstants.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -410,1 +410,1 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+            value = SecuritySupport.readConfig(sysPropertyName);\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/JdkXmlFeatures.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.nio.file.Paths;\n@@ -162,1 +163,1 @@\n-            value = readJAXPProperty(propName);\n+            value = readConfig(propName);\n@@ -168,1 +169,4 @@\n-     * Reads the specified property from $java.home\/conf\/jaxp.properties\n+     * Returns the value of the specified property from the Configuration file.\n+     * The method reads the System Property \"java.xml.config.file\" for a custom\n+     * configuration file, if doesn't exist, falls back to the JDK default that\n+     * is typically located at $java.home\/conf\/jaxp.properties.\n@@ -170,2 +174,3 @@\n-     * @param propName the name of the property\n-     * @return the value of the property\n+     * @param propName the specified property\n+     * @return the value of the specified property, null if the property is not\n+     * found\n@@ -173,15 +178,40 @@\n-    public static String readJAXPProperty(String propName) {\n-        String value = null;\n-        InputStream is = null;\n-        try {\n-            if (firstTime) {\n-                synchronized (cacheProps) {\n-                    if (firstTime) {\n-                        String configFile = getSystemProperty(\"java.home\") + File.separator\n-                                + \"conf\" + File.separator + \"jaxp.properties\";\n-                        File f = new File(configFile);\n-                        if (isFileExists(f)) {\n-                            is = getFileInputStream(f);\n-                            cacheProps.load(is);\n-                        }\n-                        firstTime = false;\n+    public static String readConfig(String propName) {\n+        return readConfig(propName, false);\n+    }\n+\n+    \/**\n+     * Returns the value of the specified property from the Configuration file.\n+     * The method reads the JDK default configuration that is typically located\n+     * at $java.home\/conf\/jaxp.properties. On top of the default, if the System\n+     * Property \"java.xml.config.file\" exists, the configuration file it points\n+     * to will also be read. Any settings in it will then override those in the\n+     * default.\n+     *\n+     * @param propName the specified property\n+     * @param stax a flag indicating whether to read stax.properties\n+     * @return the value of the specified property, null if the property is not\n+     * found\n+     *\/\n+    public static String readConfig(String propName, boolean stax) {\n+        \/\/ always load the default configuration file\n+        if (firstTime) {\n+            synchronized (cacheProps) {\n+                if (firstTime) {\n+                    boolean found = loadProperties(\n+                            Paths.get(SecuritySupport.getSystemProperty(\"java.home\"),\n+                                \"conf\", \"jaxp.properties\")\n+                                .toAbsolutePath().normalize().toString());\n+\n+                    \/\/ attempts to find stax.properties only if jaxp.properties is not available\n+                    if (stax && !found) {\n+                        found = loadProperties(\n+                            Paths.get(SecuritySupport.getSystemProperty(\"java.home\"),\n+                                    \"conf\", \"stax.properties\")\n+                                    .toAbsolutePath().normalize().toString()\n+                        );\n+                    }\n+\n+                    \/\/ load the custom configure on top of the default if any\n+                    String configFile = SecuritySupport.getSystemProperty(JdkConstants.CONFIG_FILE);\n+                    if (configFile != null) {\n+                        loadProperties(configFile);\n@@ -189,0 +219,2 @@\n+\n+                    firstTime = false;\n@@ -191,9 +223,0 @@\n-            value = cacheProps.getProperty(propName);\n-\n-        } catch (IOException ex) {\n-        } finally {\n-            if (is != null) {\n-                try {\n-                    is.close();\n-                } catch (IOException ex) {}\n-            }\n@@ -202,1 +225,19 @@\n-        return value;\n+        return cacheProps.getProperty(propName);\n+    }\n+\n+    \/**\n+     * Loads the properties from the specified file into the cache.\n+     * @param file the specified file\n+     * @return true if success, false otherwise\n+     *\/\n+    private static boolean loadProperties(String file) {\n+        File f = new File(file);\n+        if (SecuritySupport.doesFileExist(f)) {\n+            try (final InputStream in = SecuritySupport.getFileInputStream(f)) {\n+                cacheProps.load(in);\n+                return true;\n+            } catch (IOException e) {\n+                \/\/ shouldn't happen, but required by method getFileInputStream\n+            }\n+        }\n+        return false;\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/SecuritySupport.java","additions":71,"deletions":30,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -538,1 +538,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Read system properties, or the configuration file\n@@ -541,1 +541,0 @@\n-\n@@ -543,8 +542,5 @@\n-            if (!getSystemProperty(limit, limit.systemProperty())) {\n-                \/\/if system property is not found, try the older form if any\n-                for (NameMap nameMap : NameMap.values()) {\n-                    String oldName = nameMap.getOldName(limit.systemProperty());\n-                    if (oldName != null) {\n-                        getSystemProperty(limit, oldName);\n-                    }\n-                }\n+            \/\/ attempts to read both the current and old system propery\n+            if (!getSystemProperty(limit, limit.systemProperty())\n+                    && (!getOldSystemProperty(limit))) {\n+                \/\/if system property is not found, try the config file\n+                getPropertyConfig(limit, limit.systemProperty());\n@@ -553,1 +549,0 @@\n-\n@@ -574,1 +569,1 @@\n-     * Read from system properties, or those in jaxp.properties\n+     * Reads a system property, sets value and state if found.\n@@ -576,1 +571,1 @@\n-     * @param property the type of the property\n+     * @param limit the limit property\n@@ -587,0 +582,6 @@\n+        } catch (NumberFormatException e) {\n+            \/\/invalid setting\n+            throw new NumberFormatException(\"Invalid setting for system property: \" + limit.systemProperty());\n+        }\n+        return false;\n+    }\n@@ -588,1 +589,29 @@\n-            value = SecuritySupport.readJAXPProperty(sysPropertyName);\n+    \/**\n+     * Reads the legacy system property.\n+     * @param limit a limit object\n+     * @return true if found, false otherwise\n+     *\/\n+    private boolean getOldSystemProperty(Limit limit) {\n+        boolean found = false;\n+        for (NameMap nameMap : NameMap.values()) {\n+            String oldName = nameMap.getOldName(limit.systemProperty());\n+            if (oldName != null) {\n+                if (getSystemProperty(limit, oldName)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+\n+    \/**\n+     * Reads a property from a configuration file, if any.\n+     *\n+     * @param limit the limit property\n+     * @param sysPropertyName the name of system property\n+     * @return\n+     *\/\n+    private boolean getPropertyConfig(Limit limit, String sysPropertyName) {\n+        try {\n+            String value = SecuritySupport.readConfig(sysPropertyName);\n@@ -601,1 +630,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/XMLSecurityManager.java","additions":44,"deletions":16,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,81 @@\n- * Defines the Java API for XML Processing (JAXP), the Streaming API for XML (StAX),\n- * the Simple API for XML (SAX), and the W3C Document Object Model (DOM) API.\n+ * Defines the Java API for XML Processing (JAXP) that constitutes the java.xml\n+ * XML library. Factories and processors in this module are generally referred\n+ * to as XML factories and processors.\n+ *\n+ * <h2 id=\"PropertiesAndSP\">Properties and System Properties<\/h2>\n+ * Properties, defining the behavior and features of XML factories and processors\n+ * on which they are set, may have defined corresponding System Properties. When\n+ * they do, the system properties allow them to be set through the System API,\n+ * on the command line and\/or in the\n+ * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>,\n+ * without changing code in the later two options.\n+ * <p>\n+ * The {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n+ * property for example has defined a corresponding System Property\n+ * {@code javax.xml.catalog.resolve} as listed in the table\n+ * {@link javax.xml.catalog.CatalogFeatures Catalog Features} that gives it the\n+ * flexibility to be set through the System API, or without making code changes,\n+ * be initialized on the command line, or in the XML Library (java.xml)\n+ * Configuration File as illustrated in the <a href=\"#PP\">Property Precedence<\/a>\n+ * section.\n+ *\n+ * <h2 id=\"ConfigurationFile\">XML Library (java.xml) Configuration File<\/h2>\n+ * JAXP supports the use of a configuration file for the\n+ * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a> and\n+ * setting properties that have defined corresponding system properties.\n+ *\n+ * <h3>Format<\/h3>\n+ * The configuration file must be in standard {@link java.util.Properties} format.\n+ * <p>\n+ * The keys are the names of the system properties, for example, those listed in\n+ * column {@code System Property Name} of the table <a href=\"#Factories\">JAXP Factories<\/a>,\n+ * or {@code System Property} in the table {@code Catalog Features}\n+ * of class {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n+ *\n+ * <p>\n+ * The values are those defined in the specific API or process, for example, the\n+ * fully qualified name of the implementation class for the\n+ * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a>, or {@code value} in\n+ * table {@code Catalog Features} of class\n+ * {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}.\n+ *\n+ * <p>\n+ * Below are examples on what can be placed in the configuration file:\n+ * <pre>\n+ *     {@code javax.xml.parsers.DocumentBuilderFactory=packagename.DocumentBuilderFactoryImpl}\n+ *     {@code javax.xml.catalog.resolve=strict}\n+ * <\/pre>\n+ *\n+ *\n+ * <h3 id=\"CF_Default\">{@code jaxp.properties}<\/h3>\n+ * By default, the <a href=\"#Factories\">JAXP Factories<\/a> will look for a\n+ * configuration file called {@code jaxp.properties} in the ${java.home}\/conf\n+ * directory and use the entries if any to customize the behavior of the XML\n+ * factories and processors.\n+ *\n+ * <p>\n+ * {@code jaxp.properties} will be read only once during the initialization of\n+ * the JAXP implementation and cached in memory. If the file does not exist when\n+ * the first attempt is made to read from it, no further attempts are made to check\n+ * for its existence. It is not possible to change the value of any property after\n+ * it has been read for the first time.\n+ *\n+ *\n+ * <h3 id=\"CF_SP\">User-defined Configuration File<\/h3>\n+ * A system property {@systemProperty java.xml.config.file} can be set on the\n+ * command line or through the System API (e.g. System.setProperty method) to\n+ * specify the location of a configuration file on the file system.\n+ *\n+ * <p>\n+ * When the system property is specified, the configuration file it points to\n+ * will be read and the property entries in it used to override those in\n+ * {@code jaxp.properties}. If the system property does not exist when the JAXP\n+ * implementation is initialized, no further attempt will be made to check for\n+ * its existence.\n+ * <p>\n+ * The value of the property shall be a valid file path to a configuration file.\n+ * If the file path is not absolute, it will be considered relative to the working\n+ * directory.\n+ * <p>\n+ * Unlike other system properties, this property can not be placed in a configuration\n+ * file.\n@@ -33,2 +112,2 @@\n- * in the table below along with the method, System Property name, Configuration\n- * File, and System Default method to be used in the procedure.\n+ * in the table below along with the method, System Property name, and System\n+ * Default method to be used in the procedure.\n@@ -43,1 +122,0 @@\n- * <th scope=\"col\">Configuration File<\/th>\n@@ -55,1 +133,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -64,1 +141,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -73,1 +149,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -82,4 +157,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n- * <\/td>\n@@ -94,4 +165,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n- * <\/td>\n@@ -106,4 +173,0 @@\n- * <td style=\"text-align:center\">\n- *     <a href=\"#StAXProperties\">stax.properties<\/a> and then\n- *     <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n- * <\/td>\n@@ -118,1 +181,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -127,1 +189,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -136,1 +197,0 @@\n- * <td style=\"text-align:center\"><a href=\"#JaxpProperties\">jaxp.properties<\/a><\/td>\n@@ -150,17 +210,0 @@\n- * <h3 id=\"JaxpProperties\">jaxp.properties<\/h3>\n- * {@code jaxp.properties} is a configuration file in standard\n- * {@link java.util.Properties} format and typically located in the {@code conf}\n- * directory of the Java installation. It contains the fully qualified\n- * name of the implementation class with the key being the system property name\n- * defined in <a href=\"#Factories\">the table<\/a> above.\n- * <p>\n- * The {@code jaxp.properties} file is read only once by the implementation and\n- * the values are then cached for future use.  If the file does not exist when\n- * the first attempt is made to read from it, no further attempts\n- * are made to check for its existence. It is not possible to change the value\n- * of any property after it has been read for the first time.\n- *\n- * <h3 id=\"StAXProperties\">stax.properties<\/h3>\n- * {@code stax.properties} is a configuration file that functions the same as\n- * {@code jaxp.properties} except that it is only used by StAX factory lookup.\n- *\n@@ -174,1 +217,1 @@\n- * <a href=\"#Factories\">JAXP Factories<\/a> above.\n+ * <a href=\"#Factories\">JAXP Factories<\/a> above;\n@@ -178,4 +221,1 @@\n- * Use the configuration file <a href=\"#JaxpProperties\">jaxp.properties<\/a> as\n- * indicated in the table <a href=\"#Factories\">JAXP Factories<\/a>. For StAX,\n- * if <a href=\"#StAXProperties\">stax.properties<\/a> exists, the factories will\n- * first attempt to read from it instead of <a href=\"#JaxpProperties\">jaxp.properties<\/a>.\n+ * Use the <a href=\"#ConfigurationFile\">Configuration File<\/a>;\n@@ -232,0 +272,83 @@\n+ * <h2 id=\"PP\">Property Precedence<\/h2>\n+ * Properties in this module can be set in multiple ways, including via the APIs,\n+ * system properties (on the command line or through the System API), and the\n+ * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>.\n+ * When not explicitly set, they will be initialized with the default values or\n+ * the restrictive values specified by the\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n+ * (hereafter referred to FSP) if it is true.\n+ * The order of precedence for the configuration sources is defined as follows,\n+ * with earlier ones overriding the later:\n+ *\n+ * <ul>\n+ * <li><p>\n+ *      Properties specified through factories or processors API;\n+ * <\/li>\n+ * <li><p>\n+ *      Properties set via the corresponding System properties on the command line\n+ * with -Dkey=value or by using the System API (e.g. System.setProperty(key, value));\n+ * <\/li>\n+ * <li><p>\n+ *      Properties set in a user-defined <a href=\"#ConfigurationFile\">Configuration File<\/a>\n+ * pointed to by the system property {@code java.xml.config.file};\n+ * <\/li>\n+ * <li><p>\n+ *      Properties set in the default XML Library (java.xml) Configuration File\n+ * <a href=\"#CF_Default\">{@code jaxp.properties}<\/a>;\n+ * <\/li>\n+ * <li><p>\n+ *      Properties' default values initialized during factory or processor creation.\n+ * Security-related properties will be on their restrictive values when the\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature is true.\n+ * <\/li>\n+ * <\/ul>\n+ *\n+ * Using the {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n+ * property as an example, the followings illustrate how these rules are applied.\n+ * <ul>\n+ * <li><p>\n+ *      Properties specified through factories or processors API have the highest\n+ * precedence. The following code therefore effectively set the RESOLVE property\n+ * to {@code strict}, regardless of settings in any other configuration sources.\n+ * <pre>\n+ *     {@code\n+ *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *     dbf.setAttribute(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"strict\");\n+ *     }\n+ * <\/pre>\n+ *\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory such as in the above code, a\n+ * system property setting will be in effect.\n+ * <pre>\n+ *     {@code\n+ *     \/\/ in the following example, the RESOLVE property is set to 'continue'\n+ *     \/\/ for the entire application\n+ *     java -Djavax.xml.catalog.resolve=continue myApp\n+ *\n+ *     \/\/ in the following code snipet, the property is set to 'ignore' for the\n+ *     \/\/ factory that follows\n+ *     System.setProperty(\"javax.xml.catalog.resolve\", \"ignore\");\n+ *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *     ...\n+ *     System.clearProperty(\"javax.xml.catalog.resolve\");\n+ *     }\n+ * <\/pre>\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory, nor through its system property,\n+ * the setting in a configuration file will take effect. The following entry\n+ * sets the property to '{@code continue}'.\n+ * <pre>\n+ *     {@code\n+ *     javax.xml.catalog.resolve=continue\n+ *     }\n+ * <\/pre>\n+ * <\/li>\n+ * <li><p>\n+ *     If the property is not set anywhere, it will be resolved to its\n+ * default value that is '{@code strict}'.\n+ * <\/li>\n+ * <\/ul>\n+ *\n@@ -238,4 +361,6 @@\n- * naming convention, System Properties, jaxp.properties, scope and order,\n- * and processors to which a property applies. A table listing the implementation\n- * specific features and properties which the implementation currently supports\n- * can be found at the end of this note.\n+ * naming convention, System Properties, precedence order, and processors for which\n+ * a property is applies.\n+ * <p>\n+ * Properties and features currently supported by the JDK implementation are listed\n+ * in the table <a href=\"#Properties\">Implementation Specific Properties<\/a>\n+ * and <a href=\"#Features\">Features<\/a>.\n@@ -270,8 +395,15 @@\n- * A property may have a corresponding System Property with the same name.\n- * A System Property should be set prior to the creation of a processor and\n- * may be cleared afterwards.\n- *\n- * <h3>jaxp.properties<\/h3>\n- * A system property can be specified in the <a href=\"#JaxpProperties\">jaxp.properties<\/a>\n- * file to set the behavior for all invocations of the JDK. The format is\n- * {@code system-property-name=value}. For example:\n+ * A property may have a corresponding System Property with the same name as\n+ * shown in the table <a href=\"#Properties\">Implementation Specific Properties<\/a>\n+ * and <a href=\"#Features\">Features<\/a>.\n+ * As described in the <a href=\"#PropertiesAndSP\">Properties and System Properties<\/a>\n+ * section, a System Property can be set through the System API, on the command line\n+ * and\/or in the configuration file.\n+ *\n+ * <h3>Configuration File<\/h3>\n+ * A system property can be specified in the\n+ * <a href=\"#ConfigurationFile\">XML Library (java.xml) Configuration File<\/a>\n+ * to customize the behavior of the XML factories and processors. The format is\n+ * {@code key=value}, where the key is the system property name as listed in the\n+ * column {@code Full Name} and value in the column {@code Value} in the table\n+ * <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n+ * <a href=\"#Features\">Features<\/a>. For example:\n@@ -279,0 +411,1 @@\n+ *     {@code jdk.xml.entityExpansionLimit=2000}\n@@ -282,23 +415,10 @@\n- * <h3 id=\"ScopeAndOrder\">Scope and Order<\/h3>\n- * The {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING} feature\n- * (hereafter referred to as secure processing) is required for XML processors\n- * including DOM, SAX, Schema Validation, XSLT, and XPath. When secure processing\n- * is set to true, security related features and properties, such as those flagged\n- * as {@code \"security: yes\"} (hereafter referred to as security properties) in\n- * table <a href=\"#Features\">Implementation Specific Features<\/a> and\n- * <a href=\"#Properties\">Properties<\/a>,\n- * are enforced. Such enforcement includes setting security properties and features\n- * to more restrictive values and limits as shown in {@code \"Value\"}'s\n- * subcolumn {@code \"Enforced\"} in the tables. When secure processing\n- * is set to false, however, the property values will not be affected.\n- * <p>\n- * When the Java Security Manager is present, secure processing is set to true\n- * and can not be turned off. The security properties are therefore enforced.\n- * <p>\n- * Properties specified in the jaxp.properties file affect all invocations of\n- * the JDK, and will override their default values, or those that may have been\n- * set by secure processing.\n- * <p>\n- * System properties, when set, affect the invocation of the JDK and override\n- * the default settings or those that may have been set in jaxp.properties or\n- * by secure processing.\n+ * <h3 id=\"PropPrec\">Property Precedence<\/h3>\n+ * The JDK implementation specific features and properties follow the same procedure\n+ * as described in section <a href=\"#PP\">Property Precedence<\/a> in retrieving\n+ * property values.\n+ * Specific to the initialized values, the restrictive values that are set when\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true are shown\n+ * in {@code \"Value\"}'s subcolumn {@code \"Enforced\"} in the table\n+ * <a href=\"#Features\">Implementation Specific Features<\/a> and\n+ * <a href=\"#Properties\">Properties<\/a>.\n+ *\n@@ -306,3 +426,4 @@\n- * JAXP properties specified through JAXP factories or processors (e.g. SAXParser)\n- * take preference over system properties, the jaxp.properties file, as well as\n- * secure processing.\n+ * Furthermore, when the Java Security Manager is present, the JDK sets\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} to true and does\n+ * not allow it to be turned off. The security related properties are therefore\n+ * set to the {@code \"Enforced\"} values.\n@@ -422,1 +543,1 @@\n- * <h3>Implementation Specific Features and Properties<\/h3>\n+ * <h3>List of Implementation Specific Features and Properties<\/h3>\n@@ -439,1 +560,1 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n@@ -643,1 +764,1 @@\n- * <td id=\"xpathExprGrpLimit\">jdk.xml.xpathExprGrpLimit<\/td>\n+ * <td id=\"xpathExprOpLimit\">jdk.xml.xpathExprOpLimit<\/td>\n@@ -675,1 +796,1 @@\n- * <th scope=\"col\" rowspan=\"2\">jaxp.properties <a href=\"#Note3\">[3]<\/a><\/th>\n+ * <th scope=\"col\" rowspan=\"2\">Configuration File <a href=\"#Note3\">[3]<\/a><\/th>\n@@ -770,3 +891,5 @@\n- * <b>[5]<\/b> A value \"yes\" indicates the property is a Security Property. Refer\n- * to the <a href=\"#ScopeAndOrder\">Scope and Order<\/a> on how secure processing\n- * may affect the value of a Security Property.\n+ * <b>[5]<\/b> A value \"yes\" indicates the property is a Security Property. As indicated\n+ * in the <a href=\"#PropPrec\">Property Precedence<\/a>, the values listed in the column\n+ * {@code enforced} will be used to initialize these properties when\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true.\n+ *\n@@ -775,1 +898,1 @@\n- * field are IDs described in table <a href=\"#Processor\">Processors<\/a>.\n+ * field are IDs described in the table <a href=\"#Processor\">Processors<\/a>.\n@@ -784,2 +907,1 @@\n- * as defined in <a href=\"#ScopeAndOrder\">Scope and Order<\/a> thus becomes, in\n- * descending order:\n+ * as defined in <a href=\"#PropPrec\">Property Precedence<\/a> thus becomes:\n@@ -788,5 +910,0 @@\n- * <li>The default value;<\/li>\n- * <li>Value set by FEATURE_SECURE_PROCESSING;<\/li>\n- * <li>Value set in jaxp.properties;<\/li>\n- * <li>Value set as System Property;<\/li>\n- * <li>Value set on factories or processors using <b>legacy property names<\/b>;<\/li>\n@@ -794,0 +911,5 @@\n+ * <li>Value set on factories or processors using <b>legacy property names<\/b>;<\/li>\n+ * <li>Value set as System Property;<\/li>\n+ * <li>Value set in the configuration file;<\/li>\n+ * <li>Value set by FEATURE_SECURE_PROCESSING;<\/li>\n+ * <li>The default value;<\/li>\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":221,"deletions":99,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -0,0 +1,180 @@\n+################################################################################\n+#           XML Library (java.xml) Configuration File\n+#\n+# jaxp.properties (this file) is the default configuration file for JAXP, the API\n+# defined in the java.xml module. It is in java.util.Properties format and typically\n+# located in the {java.home}\/conf directory. It may contain key\/value pairs for\n+# specifying the implementation classes of JAXP factories and\/or properties\n+# that have corresponding system properties.\n+#\n+# A user-specified configuration file can be set up using the system property\n+# java.xml.config.file to override any or all of the entries in jaxp.properties.\n+# The following statement provides myConfigurationFile as a custom configuration\n+# file:\n+#     java -Djava.xml.config.file=myConfigurationFile\n+################################################################################\n+\n+# ---- JAXP Default Configuration ----\n+#\n+# The JAXP default configuration (jaxp.properties) contains entries for the\n+# Factory Lookup Mechanism and properties with corresponding system properties.\n+# The values are generally set to the default values of the properties.\n+#\n+#\n+# JAXP Lookup Mechanism:\n+#\n+# The JAXP configuration file ranks 2nd to the System Property in the precedent\n+# order of the JAXP Lookup Mechanism. When the System Property is not specified,\n+# a JAXP factory reads the configuration file in order to locate an implementation\n+# class. If found, the class specified will be used as the factory implementation\n+# class.\n+#\n+# The format of an entry is key=value where the key is the fully qualified name\n+# of the factory and value that of the implementation class. The following entry\n+# set a DocumentBuilderFactory implementation class:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n+#\n+#\n+# Java SE and JDK Implementation Specific Properties:\n+#\n+# The JAXP configuration file ranks above the default settings in the Property\n+# Precedence in that its entries will override the default values of the corresponding\n+# properties.\n+#\n+# All properties that have System Properties defined in Java SE or supported\n+# by the JDK Implementation can be placed in the configuration file to override\n+# the default property values. The format is:\n+#     system-property-name=value\n+#\n+# For example, the FILES property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.files. An entry for the FILES property in the\n+# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# is:\n+#     javax.xml.catalog.files=strict\n+#\n+#\n+# Extension Functions:\n+#\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+# jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n+jdk.xml.overrideDefaultParser=false\n+#\n+#\n+# External Access Properties:\n+#\n+# The External Access Properties are defined in javax.xml.XMLConstants. Their\n+# system properties are javax.xml.accessExternalDTD, javax.xml.accessExternalSchema,\n+# and javax.xml.accessExternalStylesheet. The values are a list of protocols separated\n+# by comma, plus empty string (\"\") to represent no protocol allowed and the key\n+# word \"all\" for all access. The default is \"all\", allowing all external resources\n+# to be fetched. The followings are example of external access settings:\n+#\n+# allow local (file) DTDs to be retrieved\n+# javax.xml.accessExternalDTD=file\n+#\n+# allow local (file) and remote (http) external schemas\n+# javax.xml.accessExternalSchema=file, http\n+#\n+# reject any external stylesheets\n+# javax.xml.accessExternalStylesheet=\"\"\n+#\n+# allow all external stylesheets\n+# javax.xml.accessExternalStylesheet=\"all\"\n+#\n+#\n+# Catalog Properties:\n+#\n+# The Catalog API defines four features: FILES, PREFER, DEFER and RESOLVE.\n+# Except PREFER, all other properties can be placed in the configuration file\n+# using the system properties defined for them.\n+#\n+# FILES: A semicolon-delimited list of URIs to locate the catalog files. The URIs\n+# must be absolute and have a URL protocol handler for the URI scheme. The following\n+# is an example of setting up a catalog file:\n+#\n+# javax.xml.catalog.files = file:\/\/\/users\/auser\/catalog\/catalog.xml\n+#\n+# DEFER: Indicates that the alternative catalogs including those specified in\n+# delegate entries or nextCatalog are not read until they are needed. The value\n+# is a boolean and the default value is true.\n+#\n+# javax.xml.catalog.defer=true\n+#\n+# RESOLVE: Determines the action if there is no matching entry found after all of\n+# the specified catalogs are exhausted. The values are key words: strict, continue,\n+# and ignore. The default is strict. The following setting reflects the default\n+# setting.\n+#\n+# javax.xml.catalog.resolve=strict\n+#\n+#\n+# useCatalog:\n+# This property instructs XML processors to use XML Catalogs to resolve entity\n+# references. The value is a boolean and the default value is true.\n+#\n+# javax.xml.useCatalog=true\n+#\n+#\n+# Implementation Specific Properties - Limits\n+#\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions. The default value is 64000\n+# jdk.xml.entityExpansionLimit=64000\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities. The default value is 5x10^7.\n+# jdk.xml.totalEntitySizeLimit=5E7\n+#\n+# Limits the maximum size of any general entities. The default value is 0.\n+# jdk.xml.maxGeneralEntitySizeLimit=0\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities. The default value is 10^6.\n+# jdk.xml.maxParameterEntitySizeLimit=1E6\n+#\n+# Limits the total number of nodes in all entity references. The default value is 3x10^6.\n+# jdk.xml.entityReplacementLimit=3E6\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+# jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+# jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+# jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+#\n+# XPath Limits\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n+jdk.xml.xpathExprGrpLimit=10\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n+jdk.xml.xpathExprOpLimit=100\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import org.testng.annotations.DataProvider;\n+\n+\/**\n+ * Verifies the configuration file and precedence:\n+ *     settings in the configuration file are used as the default values of properties;\n+ *     any settings in a custom configuration file override those in the default\n+ * configuration.\n+ *\/\n+public class ConfigurationTest {\n+    \/\/ system property for custom configuration file\n+    static final String SP_CONFIG = \"java.xml.config.file\";\n+    \/\/ Impl-Specific Property: entity expansion\n+    static final String ISP_ENTITY_EXPANSION = \"jdk.xml.entityExpansionLimit\";\n+    \/\/ Impl-Specific Property: parameter entity limit\n+    static final String ISP_PARAMETER_ENTITY = \"jdk.xml.maxParameterEntitySizeLimit\";\n+    \/\/ Impl-Specific Property: element attribute limit\n+    static final String ISP_ELEMENT_ATTRIBUTE = \"jdk.xml.elementAttributeLimit\";\n+    \/\/ Impl-Specific Property: XML name limit\n+    static final String ISP_NAME_LIMIT = \"jdk.xml.maxXMLNameLimit\";\n+\n+    \/\/ Impl-Specific Feature: extension functions\n+    static final String ISF_EXTENSION_FUNCTIONS = \"jdk.xml.enableExtensionFunctions\";\n+    \/\/ Catalog feature: resolve\n+    static final String CATALOG_RESOLVE = \"javax.xml.catalog.resolve\";\n+    \/\/ The USE_CATALOG property indicates whether Catalog is enabled for a processor\n+    static final String USE_CATALOG = \"http:\/\/javax.xml.XMLConstants\/feature\/useCatalog\";\n+    static final String SP_USE_CATALOG = \"javax.xml.useCatalog\";\n+\n+\n+    static final boolean IS_WINDOWS = System.getProperty(\"os.name\").contains(\"Windows\");\n+    static final String SRC_DIR;\n+    static final String TEST_SOURCE_DIR;\n+    static {\n+        String srcDir = System.getProperty(\"test.src\", \".\");\n+        if (IS_WINDOWS) {\n+            srcDir = srcDir.replace('\\\\', '\/');\n+        }\n+        SRC_DIR = srcDir;\n+        TEST_SOURCE_DIR = srcDir + \"\/files\/\";\n+    }\n+\n+    static enum PropertyType { FEATURE, PROPERTY };\n+\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property type, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+        \/**\n+         * Test cases for verifying the configuration file\n+         *\/\n+        return new Object[][]{\n+            \/\/ default value is expected for property (PARAMETER_ENTITY) not\n+            \/\/ set in the default and custom configuration files\n+            {null, ISP_PARAMETER_ENTITY, \"1000000\"},\n+            \/\/ this property is set in the default (jaxp.properties),\n+            \/\/ but not the custom configuration file. Expects readings from the\n+            \/\/ default config\n+            {null, ISP_NAME_LIMIT, \"1000\"},\n+            \/\/ the property in the default configuration file (jaxp.properties)\n+            \/\/ will be read and used as the default value of the property\n+            {null, ISP_ENTITY_EXPANSION, \"64000\"},\n+        };\n+    }\n+\n+    @DataProvider(name = \"getProperty0\")\n+    public Object[][] getProperty0() {\n+        \/**\n+         * Duplicate of getProperty to include the case that uses the system\n+         * property to set up a custom configuration file. This is to avoid\n+         * interfering with other test cases.\n+         *\/\n+        return new Object[][]{\n+            \/\/ the setting in the custom configuration file will override that\n+            \/\/ in the default one\n+            {\"customJaxp.properties\", ISP_ENTITY_EXPANSION, \"1000\"},\n+        };\n+    }\n+\n+\n+    static String getPath(String file) {\n+        String temp = TEST_SOURCE_DIR + file;\n+        if (IS_WINDOWS) {\n+            temp = \"\/\" + temp;\n+        }\n+        return temp;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/ConfigurationTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.SP_CONFIG;\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMImplTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class DOMImplTest extends DocumentBuilderFactory {\n+    \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, factory implementation class\n+     *\/\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.DOMImplTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testDOMImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        System.clearProperty(SP_CONFIG);\n+        Assert.assertEquals(dbf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setAttribute(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getAttribute(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws ParserConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) throws ParserConfigurationException {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMImplTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.SP_CONFIG;\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMImplTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class DOMImplTest0 {\n+    \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, factory implementation class\n+     *\/\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testDOMImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        System.clearProperty(SP_CONFIG);\n+        Assert.assertEquals(dbf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMImplTest0.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class DOMPropertyTest extends ConfigurationTest {\n+\n+   @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        Assert.assertEquals(dbf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.DOMPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of DOMPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class DOMPropertyTest0 extends ConfigurationTest {\n+\n+   @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(SP_CONFIG, getPath(config));\n+        }\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        Assert.assertEquals(dbf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/DOMPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.util.Iterator;\n+import javax.xml.namespace.NamespaceContext;\n+import javax.xml.namespace.QName;\n+import javax.xml.stream.Location;\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.events.Attribute;\n+import javax.xml.stream.events.Characters;\n+import javax.xml.stream.events.Comment;\n+import javax.xml.stream.events.DTD;\n+import javax.xml.stream.events.EndDocument;\n+import javax.xml.stream.events.EndElement;\n+import javax.xml.stream.events.EntityDeclaration;\n+import javax.xml.stream.events.EntityReference;\n+import javax.xml.stream.events.Namespace;\n+import javax.xml.stream.events.ProcessingInstruction;\n+import javax.xml.stream.events.StartDocument;\n+import javax.xml.stream.events.StartElement;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.EventFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class EventFactoryTest extends XMLEventFactory {\n+   @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.EventFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testEventFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLEventFactory ef = XMLEventFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(ef.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public void setLocation(Location location) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(String prefix, String namespaceURI, String localName, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(String localName, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Attribute createAttribute(QName name, String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Namespace createNamespace(String namespaceURI) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Namespace createNamespace(String prefix, String namespaceUri) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(QName name, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartElement createStartElement(String prefix, String namespaceUri, String localName, Iterator<? extends Attribute> attributes, Iterator<? extends Namespace> namespaces, NamespaceContext context) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(QName name, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(String prefix, String namespaceUri, String localName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndElement createEndElement(String prefix, String namespaceUri, String localName, Iterator<? extends Namespace> namespaces) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createCharacters(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createCData(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createSpace(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Characters createIgnorableSpace(String content) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument() {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding, String version, boolean standalone) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding, String version) {\n+        return null;\n+    }\n+\n+    @Override\n+    public StartDocument createStartDocument(String encoding) {\n+        return null;\n+    }\n+\n+    @Override\n+    public EndDocument createEndDocument() {\n+        return null;\n+    }\n+\n+    @Override\n+    public EntityReference createEntityReference(String name, EntityDeclaration declaration) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Comment createComment(String text) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ProcessingInstruction createProcessingInstruction(String target, String data) {\n+        return null;\n+    }\n+\n+    @Override\n+    public DTD createDTD(String dtd) {\n+        return null;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/EventFactoryTest.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLEventFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.EventFactoryTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class EventFactoryTest0 {\n+   @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.events.XMLEventFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testEventFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLEventFactory ef = XMLEventFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(ef.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/EventFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import javax.xml.stream.EventFilter;\n+import javax.xml.stream.StreamFilter;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLReporter;\n+import javax.xml.stream.XMLResolver;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.stream.util.XMLEventAllocator;\n+import javax.xml.transform.Source;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.InputFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class InputFactoryTest extends XMLInputFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.InputFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testInputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(Source source) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(InputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(String systemId, InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createXMLStreamReader(String systemId, Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(String systemId, Reader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(Source source) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(InputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createXMLEventReader(String systemId, InputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamReader createFilteredReader(XMLStreamReader reader, StreamFilter filter) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventReader createFilteredReader(XMLEventReader reader, EventFilter filter) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLResolver getXMLResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setXMLResolver(XMLResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XMLReporter getXMLReporter() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setXMLReporter(XMLReporter reporter) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public void setProperty(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getProperty(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isPropertySupported(String name) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setEventAllocator(XMLEventAllocator allocator) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XMLEventAllocator getEventAllocator() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/InputFactoryTest.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.InputFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class InputFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLInputFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testInputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/InputFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import javax.xml.stream.XMLEventWriter;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.Result;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.OutputFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class OutputFactoryTest extends XMLOutputFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.OutputFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testOutputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLOutputFactory xof = XMLOutputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xof.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(Writer stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(OutputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(OutputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(OutputStream stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(OutputStream stream, String encoding) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public XMLEventWriter createXMLEventWriter(Writer stream) throws XMLStreamException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setProperty(String name, Object value) throws IllegalArgumentException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getProperty(String name) throws IllegalArgumentException {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isPropertySupported(String name) {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/OutputFactoryTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.stream.XMLOutputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.OutputFactoryTest0\n+ * @summary the tests with the default and custom configurations files have to be\n+ * separate because they both are loaded once.\n+ *\/\n+public class OutputFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.xml.internal.stream.XMLOutputFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testOutputFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XMLOutputFactory xof = XMLOutputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xof.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/OutputFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXNotRecognizedException;\n+import org.xml.sax.SAXNotSupportedException;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXImplTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXImplTest extends SAXParserFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.SAXImplTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testSAXImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(spf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public SAXParser newSAXParser() throws ParserConfigurationException, SAXException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value)\n+            throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {\n+        \/\/\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name)\n+            throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {\n+        return false;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXImplTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXImplTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXImplTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testSAXImpl(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(spf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXImplTest0.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.xml.sax.XMLReader;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SAXPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        SAXParser sp = spf.newSAXParser();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sp.getProperty(property), expected);\n+        XMLReader reader = sp.getXMLReader();\n+        Assert.assertEquals(reader.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXPropertyTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.xml.sax.XMLReader;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SAXPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of SAXPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class SAXPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        SAXParser sp = spf.newSAXParser();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sp.getProperty(property), expected);\n+        XMLReader reader = sp.getXMLReader();\n+        Assert.assertEquals(reader.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SAXPropertyTest0.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.ls.LSResourceResolver;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaFactoryTest extends SchemaFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.SchemaFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public boolean isSchemaLanguageSupported(String schemaLanguage) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setErrorHandler(ErrorHandler errorHandler) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public ErrorHandler getErrorHandler() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setResourceResolver(LSResourceResolver resourceResolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public LSResourceResolver getResourceResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Schema newSchema(Source[] schemas) throws SAXException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Schema newSchema() throws SAXException {\n+        return null;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaFactoryTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaFactoryTest0.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class SchemaPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaPropertyTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.validation.SchemaFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.SchemaPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of SchemaPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class SchemaPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(sf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/SchemaPropertyTest0.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.StAXPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class StAXPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/StAXPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.StAXPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of DOMPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class StAXPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XMLInputFactory xif = XMLInputFactory.newFactory();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xif.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/StAXPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.transform.ErrorListener;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Templates;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.URIResolver;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerFactoryTest extends TransformerFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public Transformer newTransformer(Source source) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Transformer newTransformer() throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Templates newTemplates(Source source) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Source getAssociatedStylesheet(Source source, String media, String title, String charset) throws TransformerConfigurationException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setURIResolver(URIResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public URIResolver getURIResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws TransformerConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setAttribute(String name, Object value) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public Object getAttribute(String name) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setErrorListener(ErrorListener listener) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public ErrorListener getErrorListener() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerFactoryTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class TransformerPropertyTest extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerPropertyTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.transform.TransformerFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.TransformerPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of TransformerPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class TransformerPropertyTest0 extends ConfigurationTest {\n+    @Test(dataProvider = \"getProperty0\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        TransformerFactory tf = TransformerFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(tf.getAttribute(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/TransformerPropertyTest0.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathFactory;\n+import javax.xml.xpath.XPathFactoryConfigurationException;\n+import javax.xml.xpath.XPathFunctionResolver;\n+import javax.xml.xpath.XPathVariableResolver;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathFactoryTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathFactoryTest extends XPathFactory {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {\"jaxpImpls.properties\", \"common.config.XPathFactoryTest\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getClass().getName(), expected);\n+    }\n+\n+    @Override\n+    public boolean isObjectModelSupported(String objectModel) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public boolean getFeature(String name) throws XPathFactoryConfigurationException {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setXPathVariableResolver(XPathVariableResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public void setXPathFunctionResolver(XPathFunctionResolver resolver) {\n+        \/\/ do nothing\n+    }\n+\n+    @Override\n+    public XPath newXPath() {\n+        return null;\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathFactoryTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import static common.config.ConfigurationTest.getPath;\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathFactoryTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathFactoryTest0 {\n+    @DataProvider(name = \"getImpl\")\n+    public Object[][] getImpl() {\n+\n+        return new Object[][]{\n+            {null, \"com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getImpl\")\n+    public void testFactory(String config, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getClass().getName(), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathFactoryTest0.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathPropertyTest\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ *\/\n+public class XPathPropertyTest extends ConfigurationTest {\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+\n+        return new Object[][]{\n+            {null, \"jdk.xml.xpathExprOpLimit\", \"100\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathPropertyTest.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package common.config;\n+\n+import javax.xml.xpath.XPathFactory;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test @bug 8303530\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @modules java.xml\/jdk.xml.internal\n+ * @run testng\/othervm common.config.XPathPropertyTest0\n+ * @summary verifies that JAXP configuration file is customizable with a system\n+ * property \"java.xml.config.file\".\n+ * Note: this test is a duplicate of XPathPropertyTest. This test runs the\n+ * case with a custom configuration file only to avoid interfering with other\n+ * test cases.\n+ *\/\n+public class XPathPropertyTest0 extends ConfigurationTest {\n+   \/*\n+     * DataProvider for testing the configuration file and system property.\n+     *\n+     * Fields:\n+     *     configuration file, property name, property value\n+     *\/\n+    @DataProvider(name = \"getProperty\")\n+    public Object[][] getProperty() {\n+\n+        return new Object[][]{\n+            {\"customJaxp.properties\", \"jdk.xml.xpathExprOpLimit\", \"200\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"getProperty\")\n+    public void testProperty(String config, String property, String expected) throws Exception {\n+        if (config != null) {\n+            System.setProperty(ConfigurationTest.SP_CONFIG, getPath(config));\n+        }\n+        XPathFactory xf = XPathFactory.newInstance();\n+        System.clearProperty(ConfigurationTest.SP_CONFIG);\n+        Assert.assertEquals(xf.getProperty(property), expected);\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/XPathPropertyTest0.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the jdk.xml.config.file \n+# system property. For example java -Djava.xml.config.file=myfile \n+################################################################################\n+\n+# ---- Custom Configuration File ----\n+# Sets more restrictive values for: extension functions, overriding default\n+# parsers, and DTD related limits.\n+#\n+# Disable Extension Functions\n+jdk.xml.enableExtensionFunctions=false\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+jdk.xml.entityExpansionLimit=1000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=1024\n+jdk.xml.maxParameterEntitySizeLimit=1024\n+jdk.xml.entityReplacementLimit=10000\n+#\n+# XPath limits\n+jdk.xml.xpathExprOpLimit=200\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/customJaxp.properties","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,180 @@\n+################################################################################\n+#           XML Library (java.xml) Configuration File\n+#\n+# jaxp.properties (this file) is the default configuration file for JAXP, the API\n+# defined in the java.xml module. It is in java.util.Properties format and typically\n+# located in the {java.home}\/conf directory. It may contain key\/value pairs for\n+# specifying the implementation classes of JAXP factories and\/or properties\n+# that have corresponding system properties.\n+#\n+# A user-specified configuration file can be set up using the system property\n+# java.xml.config.file to override any or all of the entries in jaxp.properties.\n+# The following statement provides myConfigurationFile as a custom configuration\n+# file:\n+#     java -Djava.xml.config.file=myConfigurationFile\n+################################################################################\n+\n+# ---- JAXP Default Configuration ----\n+#\n+# The JAXP default configuration (jaxp.properties) contains entries for the\n+# Factory Lookup Mechanism and properties with corresponding system properties.\n+# The values are generally set to the default values of the properties.\n+#\n+#\n+# JAXP Lookup Mechanism:\n+#\n+# The JAXP configuration file ranks 2nd to the System Property in the precedent\n+# order of the JAXP Lookup Mechanism. When the System Property is not specified,\n+# a JAXP factory reads the configuration file in order to locate an implementation\n+# class. If found, the class specified will be used as the factory implementation\n+# class.\n+#\n+# The format of an entry is key=value where the key is the fully qualified name\n+# of the factory and value that of the implementation class. The following entry\n+# set a DocumentBuilderFactory implementation class:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n+#\n+#\n+# Java SE and JDK Implementation Specific Properties:\n+#\n+# The JAXP configuration file ranks above the default settings in the Property\n+# Precedence in that its entries will override the default values of the corresponding\n+# properties.\n+#\n+# All properties that have System Properties defined in Java SE or supported\n+# by the JDK Implementation can be placed in the configuration file to override\n+# the default property values. The format is:\n+#     system-property-name=value\n+#\n+# For example, the FILES property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.files. An entry for the FILES property in the\n+# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# is:\n+#     javax.xml.catalog.files=strict\n+#\n+#\n+# Extension Functions:\n+#\n+# This property determines whether XSLT and XPath extension functions are allowed.\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+# jdk.xml.enableExtensionFunctions=false\n+#\n+#\n+# Overriding the default parser:\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n+jdk.xml.overrideDefaultParser=false\n+#\n+#\n+# External Access Properties:\n+#\n+# The External Access Properties are defined in javax.xml.XMLConstants. Their\n+# system properties are javax.xml.accessExternalDTD, javax.xml.accessExternalSchema,\n+# and javax.xml.accessExternalStylesheet. The values are a list of protocols separated\n+# by comma, plus empty string (\"\") to represent no protocol allowed and the key\n+# word \"all\" for all access. The default is \"all\", allowing all external resources\n+# to be fetched. The followings are example of external access settings:\n+#\n+# allow local (file) DTDs to be retrieved\n+# javax.xml.accessExternalDTD=file\n+#\n+# allow local (file) and remote (http) external schemas\n+# javax.xml.accessExternalSchema=file, http\n+#\n+# reject any external stylesheets\n+# javax.xml.accessExternalStylesheet=\"\"\n+#\n+# allow all external stylesheets\n+# javax.xml.accessExternalStylesheet=\"all\"\n+#\n+#\n+# Catalog Properties:\n+#\n+# The Catalog API defines four features: FILES, PREFER, DEFER and RESOLVE.\n+# Except PREFER, all other properties can be placed in the configuration file\n+# using the system properties defined for them.\n+#\n+# FILES: A semicolon-delimited list of URIs to locate the catalog files. The URIs\n+# must be absolute and have a URL protocol handler for the URI scheme. The following\n+# is an example of setting up a catalog file:\n+#\n+# javax.xml.catalog.files = file:\/\/\/users\/auser\/catalog\/catalog.xml\n+#\n+# DEFER: Indicates that the alternative catalogs including those specified in\n+# delegate entries or nextCatalog are not read until they are needed. The value\n+# is a boolean and the default value is true.\n+#\n+# javax.xml.catalog.defer=true\n+#\n+# RESOLVE: Determines the action if there is no matching entry found after all of\n+# the specified catalogs are exhausted. The values are key words: strict, continue,\n+# and ignore. The default is strict. The following setting reflects the default\n+# setting.\n+#\n+# javax.xml.catalog.resolve=strict\n+#\n+#\n+# useCatalog:\n+# This property instructs XML processors to use XML Catalogs to resolve entity\n+# references. The value is a boolean and the default value is true.\n+#\n+# javax.xml.useCatalog=true\n+#\n+#\n+# Implementation Specific Properties - Limits\n+#\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions. The default value is 64000\n+# jdk.xml.entityExpansionLimit=64000\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities. The default value is 5x10^7.\n+# jdk.xml.totalEntitySizeLimit=5E7\n+#\n+# Limits the maximum size of any general entities. The default value is 0.\n+# jdk.xml.maxGeneralEntitySizeLimit=0\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities. The default value is 10^6.\n+# jdk.xml.maxParameterEntitySizeLimit=1E6\n+#\n+# Limits the total number of nodes in all entity references. The default value is 3x10^6.\n+# jdk.xml.entityReplacementLimit=3E6\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+# jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+# jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+# jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+#\n+# XPath Limits\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n+jdk.xml.xpathExprGrpLimit=10\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n+jdk.xml.xpathExprOpLimit=100\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+################################################################################\n+#       XML Library (java.xml) Configuration File\n+#\n+# This file is in java.util.Properties format and typically located in the conf \n+# directory of the Java installation. It may contain key\/value pairs for specifying\n+# the implementation class of a factory and\/or properties that have corresponding\n+# system properties. \n+#\n+# This file can be replaced by specifying a filename with the jdk.xml.config.file \n+# system property. For example java -Djava.xml.config.file=myfile\n+################################################################################\n+\n+# ---- Configuration for test ----\n+# \n+# Factory implementation class\n+javax.xml.parsers.DocumentBuilderFactory=common.config.DOMImplTest\n+javax.xml.parsers.SAXParserFactory=common.config.SAXImplTest\n+javax.xml.stream.XMLEventFactory=common.config.EventFactoryTest\n+javax.xml.stream.XMLInputFactory=common.config.InputFactoryTest\n+javax.xml.stream.XMLOutputFactory=common.config.OutputFactoryTest\n+javax.xml.transform.TransformerFactory=common.config.TransformerFactoryTest\n+javax.xml.validation.SchemaFactory\\:http\\:\/\/www.w3.org\/2001\/XMLSchema=common.config.SchemaFactoryTest\n+javax.xml.xpath.XPathFactory\\:http\\:\/\/java.sun.com\/jaxp\/xpath\/dom=common.config.XPathFactoryTest\n+#\n+# Disable Extension Functions\n+jdk.xml.enableExtensionFunctions=false\n+# Disallow overriding the default parser\n+jdk.xml.overrideDefaultParser=false\n+#\n+# Implementation specific limits:\n+#\n+jdk.xml.entityExpansionLimit=1000\n+jdk.xml.totalEntitySizeLimit=100000\n+jdk.xml.maxGeneralEntitySizeLimit=1024\n+jdk.xml.maxParameterEntitySizeLimit=1024\n+jdk.xml.entityReplacementLimit=10000\n+#\n+# General XML limits\n+jdk.xml.elementAttributeLimit=100\n+jdk.xml.maxOccurLimit=5000\n+jdk.xml.maxElementDepth=0\n+jdk.xml.maxXMLNameLimit=1000\n+#\n+# XPath Limits\n+jdk.xml.xpathExprGrpLimit=10\n+jdk.xml.xpathExprOpLimit=100\n+jdk.xml.xpathTotalOpLimit=10000\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxpImpls.properties","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}