{"files":[{"patch":"@@ -32,3 +32,3 @@\n- * Some of the properties defined in this class, for example, the external access\n- * properties (ACCESS_EXTERNAL_*) and USE_CATALOG, support multiple ways to set\n- * their values. These properties follow the\n+ * Properties such as the external access properties (ACCESS_EXTERNAL_*) and\n+ * USE_CATALOG, can be specified through multiple configuration sources. Their\n+ * precedence is described in the section\n@@ -36,1 +36,1 @@\n- * defined in the module summary for the property settings.\n+ * of the module summary.\n@@ -39,3 +39,3 @@\n- * The format of the value for the external access properties\n- * {@link #ACCESS_EXTERNAL_DTD}, {@link #ACCESS_EXTERNAL_SCHEMA}\n- * and {@link #ACCESS_EXTERNAL_STYLESHEET} is defined as follows.\n+ * The value of the external access properties, including {@link #ACCESS_EXTERNAL_DTD},\n+ * {@link #ACCESS_EXTERNAL_SCHEMA}, and {@link #ACCESS_EXTERNAL_STYLESHEET},\n+ * is defined as follows.\n@@ -43,4 +43,4 @@\n- * <h3 id=\"EAPValue\">Value:<\/h3> a list of protocols separated by comma. A protocol is the scheme portion of a\n- * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme portion\n- * separated by colon.\n- * A scheme is defined as:\n+ * <h3 id=\"EAPValue\">Value:<\/h3>\n+ * A list of protocols separated by comma. A protocol is the scheme portion of a\n+ * {@link java.net.URI}, or in the case of the JAR protocol, \"jar\" plus the scheme\n+ * portion separated by colon. A scheme is defined as:\n@@ -62,2 +62,2 @@\n- * <p>\n- * <b>Default value:<\/b> The default value is implementation specific and therefore not specified.\n+ * <h3>Default value:<\/h3>\n+ * The default value is implementation specific and therefore not specified.\n@@ -76,2 +76,2 @@\n- * <p>\n- * <b>Granting all access:<\/b>  the keyword \"all\" grants permission to all protocols.\n+ * <h3>Granting all access:<\/h3>\n+ * The keyword \"all\" grants permission to all protocols.\n@@ -282,1 +282,0 @@\n-          * <b>Configuration File:<\/b>\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/XMLConstants.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -170,6 +170,7 @@\n- * as described in the module summary with regards to settings with the configuration\n- * file, system and API properties. In addition to the general procedure,\n- * the Catalog Features are further supported in the catalog file itself where\n- * they can be specified as attributes for the catalog and group entries. When\n- * the attributes are specified, they shall take preference over any of\n- * the other settings.\n+ * as described in the module summary with regards to the priority with which\n+ * their values are retrieved from the various configuration sources such as\n+ * the JAXP configuration file, system and API properties. In addition to the\n+ * general configuration sources, the Catalog Features are further supported in\n+ * the catalog file itself where they can be specified as attributes of the catalog\n+ * and group entries. When the attributes are specified, they shall take preference\n+ * over any of the other configuration sources.\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogFeatures.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,2 +30,3 @@\n- * <h2 id=\"ConfigurationFile\">Configuration File<\/h2>\n- * The XML processing APIs in this module support the use of a configuration file for\n+ * <h2 id=\"ConfigurationFile\">JAXP Configuration File<\/h2>\n+ * JAXP supports the use of a configuration file for the\n+ * <a href=\"#LookupMechanism\">Factory Lookup Mechanism<\/a> and\n@@ -39,1 +40,1 @@\n- * or {@code System Property} in table {@code Catalog Features}\n+ * or {@code System Property} in the table {@code Catalog Features}\n@@ -57,1 +58,1 @@\n- * <h3 id=\"CF_Default\">Default<\/h3>\n+ * <h3 id=\"CF_Default\">{@code jaxp.properties}<\/h3>\n@@ -60,2 +61,2 @@\n- * of the Java installation and use the settings if any for configuring the\n- * factories.\n+ * of the Java installation and use the entries if any to customize the behavior\n+ * of the factories.\n@@ -64,2 +65,2 @@\n- * The default file will be read only once during a factory initialization and\n- * the values are used while the factory is alive.  If the file does not exist when\n+ * {@code jaxp.properties} will be read only once during the initialization of\n+ * the JAXP implementation and cached in memory. If the file does not exist when\n@@ -71,4 +72,4 @@\n- * <h3 id=\"CF_SP\">System Property<\/h3>\n- * The system property {@code java.xml.config.file} can be used to set up a\n- * configuration file outside of the JDK to override any or all of the settings\n- * in the default configuration file (jaxp.properties).\n+ * <h3 id=\"CF_SP\">User-defined Configuration File<\/h3>\n+ * A user-defined configuration file can be set outside of the JDK by using the\n+ * system property {@code java.xml.config.file}.\n+ *\n@@ -77,3 +78,3 @@\n- * will be read and the property settings in it used to override those in the\n- * default file. If the system property does not exist when a factory is instantiated,\n- * no further attempt will be made to locate it while the factory is alive.\n+ * will be read and the property entries in it used to override those in\n+ * {@code jaxp.properties}. If the system property does not exist when a factory\n+ * is instantiated, no further attempt will be made to check for its existence.\n@@ -252,5 +253,5 @@\n- * Properties in this module may be set in several different ways, including\n- * initialization, the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n- * (hereafter referred to FSP), <a href=\"#ConfigurationFile\">configuration file<\/a>,\n- * system properties, the API properties. These settings have a precedence order\n- * as follows, with earlier ones override the later:\n+ * Properties in this module can be set in multiple ways, including using\n+ * the API properties, system properties, <a href=\"#ConfigurationFile\">JAXP Configuration File<\/a>,\n+ * the {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FEATURE_SECURE_PROCESSING}\n+ * (hereafter referred to FSP), and the default values. The order of precedence\n+ * for the configuration sources is defined as follows, with earlier ones overriding the later:\n@@ -260,7 +261,1 @@\n- *      Properties specified through factories or processors API. For example,\n- *      <pre>\n- *      {@code\n- *      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n- *      dbf.setAttribute(property, value);\n- *      }\n- *      <\/pre>\n+ *      Properties specified through factories or processors API;\n@@ -272,1 +267,1 @@\n- *      Properties set in a <a href=\"#ConfigurationFile\">configuration file<\/a>\n+ *      Properties set in a user-defined <a href=\"#ConfigurationFile\">Configuration File<\/a>\n@@ -276,1 +271,1 @@\n- *      Properties set in the default configuration file\n+ *      Properties set in the default JAXP Configuration File\n@@ -286,0 +281,49 @@\n+ * Using the {@link javax.xml.catalog.CatalogFeatures CatalogFeatures}' RESOLVE\n+ * property as an example, the followings illustrate how these rules are applied.\n+ * <ul>\n+ * <li><p>\n+ *      Properties specified through factories or processors API have the highest\n+ * precedence. The following code therefore effectively set the RESOLVE property\n+ * to {@code strict}, regardless of settings in any other configuration sources.\n+ * <pre>\n+ *     {@code\n+ *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *     dbf.setAttribute(CatalogFeatures.Feature.RESOLVE.getPropertyName(), \"strict\");\n+ *     }\n+ * <\/pre>\n+ *\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory such as in the above code, a\n+ * system property setting will be in effect.\n+ * <pre>\n+ *     {@code\n+ *     \/\/ in the following example, the RESOLVE property is set to 'continue'\n+ *     \/\/ for the entire application\n+ *     java -Djavax.xml.catalog.resolve=continue myApp\n+ *\n+ *     \/\/ in the following code snipet, the property is set to 'ignore' for the\n+ *     \/\/ factory that follows\n+ *     System.setProperty(\"javax.xml.catalog.resolve\", \"ignore\");\n+ *     DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+ *     ...\n+ *     System.clearProperty(\"javax.xml.catalog.resolve\");\n+ *     }\n+ * <\/pre>\n+ * <\/li>\n+ * <li><p>\n+ *      If the property is not set on the factory, nor through its system property,\n+ * the setting in a configuration file will take effect. The following entry\n+ * sets the property to '{@code continue}'.\n+ * <pre>\n+ *     {@code\n+ *     javax.xml.catalog.resolve=continue\n+ *     }\n+ * <\/pre>\n+ * <\/li>\n+ * <li><p>\n+ *     If the property is not set anywhere, it will be resolved to its\n+ * default value that is '{@code strict}'.\n+ * <\/li>\n+ * <\/ul>\n+ *\n@@ -288,2 +332,2 @@\n- * <h2 id=\"ConfigurationFile\">Configuration File<\/h2>\n- * The <a href=\"#ConfigurationFile\">configuration file<\/a> defined by the XML\n+ * <h2 id=\"ConfigurationFile\">JAXP Configuration File<\/h2>\n+ * The <a href=\"#ConfigurationFile\">JAXP Configuration File<\/a> defined by the XML\n@@ -292,1 +336,1 @@\n- * table <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n+ * the table <a href=\"#Properties\">Implementation Specific Properties<\/a> and\n@@ -340,4 +384,4 @@\n- * A system property can be specified in the <a href=\"#ConfigurationFile\">Configuration File<\/a>\n- * to set the behavior for all invocations of the JDK. The format is\n- * {@code key=value}, where the key is the property name as listed in column\n- * {@code Full Name} and value in column {@code Value} in table\n+ * A system property can be specified in the <a href=\"#ConfigurationFile\">JAXP Configuration File<\/a>\n+ * to set the behavior for the JAXP factories. The format is\n+ * {@code key=value}, where the key is the property name as listed in the column\n+ * {@code Full Name} and value in the column {@code Value} in the table\n@@ -353,1 +397,2 @@\n- * as described in section <a href=\"#PP\">Property Precedence<\/a> in setting properties.\n+ * as described in section <a href=\"#PP\">Property Precedence<\/a> in retrieving\n+ * property values.\n@@ -356,1 +401,1 @@\n- * in {@code \"Value\"}'s subcolumn {@code \"Enforced\"} in table\n+ * in {@code \"Value\"}'s subcolumn {@code \"Enforced\"} in the table\n@@ -826,3 +871,5 @@\n- * <b>[5]<\/b> A value \"yes\" indicates the property is a Security Property. Refer\n- * to the <a href=\"#PropPrec\">Property Precedence<\/a> on how secure processing\n- * may affect the value of a Security Property.\n+ * <b>[5]<\/b> A value \"yes\" indicates the property is a Security Property. As indicated\n+ * in the <a href=\"#PropPrec\">Property Precedence<\/a>, the values listed in the column\n+ * {@code enforced} will be used to initialize these properties when\n+ * {@link javax.xml.XMLConstants#FEATURE_SECURE_PROCESSING FSP} is true.\n+ *\n@@ -831,1 +878,1 @@\n- * field are IDs described in table <a href=\"#Processor\">Processors<\/a>.\n+ * field are IDs described in the table <a href=\"#Processor\">Processors<\/a>.\n","filename":"src\/java.xml\/share\/classes\/module-info.java","additions":89,"deletions":42,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -4,7 +4,11 @@\n-# This file is in java.util.Properties format and typically located in the conf \n-# directory of the Java installation. It may contain key\/value pairs for specifying\n-# the implementation class of a factory and\/or properties that have corresponding\n-# system properties. \n-#\n-# This file can be replaced by specifying a filename with the java.xml.config.file\n-# system property. For example java -Djava.xml.config.file=myConfigurationFile\n+# jaxp.properties (this file) is the default configuration file for JAXP, the API\n+# defined in the java.xml module. It is in java.util.Properties format and typically\n+# located in the conf directory of the Java installation. It may contain key\/value\n+# pairs for specifying the implementation classes of JAXP factories and\/or properties\n+# that have corresponding system properties.\n+#\n+# A user-specified configuration file can be set up using the system property\n+# java.xml.config.file to override any or all of the entries in jaxp.properties.\n+# The following statement provides myConfigurationFile as a custom configuration\n+# file:\n+#     java -Djava.xml.config.file=myConfigurationFile\n@@ -13,1 +17,1 @@\n-# ---- JDK Sample Configuration ----\n+# ---- JAXP Default Configuration ----\n@@ -15,4 +19,3 @@\n-# This sample demonstrates what can be set in the configuration file. Throughout\n-# the sample file, some exmple settings are commented out so as to not cause\n-# behavior change. The ones that are not are generally set to values the same as\n-# the default to be used by tests.\n+# The JAXP default configuration (jaxp.properties) contains entries for the\n+# Factory Lookup Mechanism and properties with corresponding system properties.\n+# The values are generally set to the default values of the properties.\n@@ -22,4 +25,0 @@\n-# The configuration file is one of the ways for the factories to locate and load\n-# the implementation class. To specify an implementation class, write a key\/value\n-# pair with the factory ID and fully qualified name of the implementation class,\n-# for example, the following specify the implementation class for DOM:\n@@ -27,1 +26,11 @@\n-# javax.xml.parsers.DocumentBuilderFactory=common.config.DocumentBuilderFactoryImpl\n+# The JAXP configuration file ranks 2nd to the System Property in the precedent\n+# order of the JAXP Lookup Mechanism. When the System Property is not specified,\n+# a JAXP factory reads the configuration file in order to locate an implementation\n+# class. If found, the class specified will be used as the factory implementation\n+# class.\n+#\n+# The format of an entry is key=value where the key is the fully qualified name\n+# of the factory and value that of the implementation class. The following entry\n+# set a DocumentBuilderFactory implementation class:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n@@ -32,1 +41,5 @@\n-# Properties with corresponding System Properties defined in Java SE or supported\n+# The JAXP configuration file ranks above the default settings in the Property\n+# Precedence in that its entries will override the default values of the corresponding\n+# properties.\n+#\n+# All properties that have System Properties defined in Java SE or supported\n@@ -37,0 +50,6 @@\n+# For example, the FILES property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.files. An entry for the FILES property in the\n+# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# is:\n+#     javax.xml.catalog.files=strict\n+#\n@@ -39,0 +58,1 @@\n+#\n@@ -40,2 +60,5 @@\n-# The following example disallows extension functions\n-#jdk.xml.enableExtensionFunctions=false\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+# jdk.xml.enableExtensionFunctions=false\n@@ -45,4 +68,6 @@\n-# The JDK provides default parser implementation, but also allows third party\n-# implementation to override it. If it is necessary, users may set the property\n-# to true. By default, it is set to disallow overriding the default parser as\n-# done below.\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n@@ -57,1 +82,3 @@\n-# by comma. The followings are example of external access settings:\n+# by comma, plus empty string (\"\") to represent no protocol allowed and the key\n+# word \"all\" for all access. The default is \"all\", allowing all external resources\n+# to be fetched. The followings are example of external access settings:\n@@ -59,2 +86,1 @@\n-# allow local (file) external DTD\n-# allow local (file) and remote (http) external DTD\n+# allow local (file) DTDs to be retrieved\n@@ -63,1 +89,1 @@\n-# allow local (file) and remote (http) external schema\n+# allow local (file) and remote (http) external schemas\n@@ -66,1 +92,1 @@\n-# reject external stylesheet\n+# reject any external stylesheets\n@@ -69,1 +95,1 @@\n-# allow all external stylesheet\n+# allow all external stylesheets\n@@ -74,0 +100,1 @@\n+#\n@@ -75,2 +102,6 @@\n-# Except PREFER, all other properties with system properties can be placed in\n-# the configuration file. Examples are as follows.\n+# Except PREFER, all other properties can be placed in the configuration file\n+# using the system properties defined for them.\n+#\n+# FILES: A semicolon-delimited list of URIs to locate the catalog files. The URIs\n+# must be absolute and have a URL protocol handler for the URI scheme. The following\n+# is an example of setting up a catalog file:\n@@ -78,1 +109,0 @@\n-# specify a custom catalog file with its URI\n@@ -81,1 +111,4 @@\n-# instructs the CatalogResolver to load alternative catalogs as needed\n+# DEFER: Indicates that the alternative catalogs including those specified in\n+# delegate entries or nextCatalog are not read until they are needed. The value\n+# is a boolean and the default value is true.\n+#\n@@ -84,3 +117,5 @@\n-# the value of the resolve property is defined to be strict\/continue\/ignore\n-# to be strict, that is, to report an error if an External resource can not be\n-# resolved through a catalog, set the property to be strict as follows\n+# RESOLVE: Determines the action if there is no matching entry found after all of\n+# the specified catalogs are exhausted. The values are key words: strict, continue,\n+# and ignore. The default is strict. The following setting reflects the default\n+# setting.\n+#\n@@ -90,1 +125,4 @@\n-# Catalog is enabled for JAXP processors:\n+# useCatalog:\n+# This property instructs XML processors to use XML Catalogs to resolve entity\n+# references. The value is a boolean and the default value is true.\n+#\n@@ -93,1 +131,0 @@\n-# Implementation specific limits:\n@@ -95,6 +132,1 @@\n-# DTD related limits\n-#jdk.xml.entityExpansionLimit=64000\n-#jdk.xml.totalEntitySizeLimit=5E7\n-#jdk.xml.maxGeneralEntitySizeLimit=0\n-#jdk.xml.maxParameterEntitySizeLimit=1E6\n-#jdk.xml.entityReplacementLimit=3E6\n+# Implementation Specific Properties - Limits\n@@ -102,4 +134,33 @@\n-# General XML limits\n-#jdk.xml.elementAttributeLimit=10000\n-#jdk.xml.maxOccurLimit=5000\n-#jdk.xml.maxElementDepth=0\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions. The default value is 64000\n+# jdk.xml.entityExpansionLimit=64000\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities. The default value is 5x10^7.\n+# jdk.xml.totalEntitySizeLimit=5E7\n+#\n+# Limits the maximum size of any general entities. The default value is 0.\n+# jdk.xml.maxGeneralEntitySizeLimit=0\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities. The default value is 10^6.\n+# jdk.xml.maxParameterEntitySizeLimit=1E6\n+#\n+# Limits the total number of nodes in all entity references. The default value is 3x10^6.\n+# jdk.xml.entityReplacementLimit=3E6\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+# jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+# jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+# jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n@@ -108,0 +169,1 @@\n+#\n@@ -109,0 +171,2 @@\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n@@ -110,0 +174,2 @@\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n@@ -111,0 +177,2 @@\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n","filename":"src\/java.xml\/share\/conf\/jaxp.properties","additions":117,"deletions":49,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -4,7 +4,11 @@\n-# This file is in java.util.Properties format and typically located in the conf \n-# directory of the Java installation. It may contain key\/value pairs for specifying\n-# the implementation class of a factory and\/or properties that have corresponding\n-# system properties. \n-#\n-# This file can be replaced by specifying a filename with the java.xml.config.file\n-# system property. For example java -Djava.xml.config.file=myConfigurationFile\n+# jaxp.properties (this file) is the default configuration file for JAXP, the API\n+# defined in the java.xml module. It is in java.util.Properties format and typically\n+# located in the conf directory of the Java installation. It may contain key\/value\n+# pairs for specifying the implementation classes of JAXP factories and\/or properties\n+# that have corresponding system properties.\n+#\n+# A user-specified configuration file can be set up using the system property\n+# java.xml.config.file to override any or all of the entries in jaxp.properties.\n+# The following statement provides myConfigurationFile as a custom configuration\n+# file:\n+#     java -Djava.xml.config.file=myConfigurationFile\n@@ -13,1 +17,1 @@\n-# ---- JDK Sample Configuration ----\n+# ---- JAXP Default Configuration ----\n@@ -15,4 +19,3 @@\n-# This sample demonstrates what can be set in the configuration file. Throughout\n-# the sample file, some exmple settings are commented out so as to not cause\n-# behavior change. The ones that are not are generally set to values the same as\n-# the default to be used by tests.\n+# The JAXP default configuration (jaxp.properties) contains entries for the\n+# Factory Lookup Mechanism and properties with corresponding system properties.\n+# The values are generally set to the default values of the properties.\n@@ -22,4 +25,0 @@\n-# The configuration file is one of the ways for the factories to locate and load\n-# the implementation class. To specify an implementation class, write a key\/value\n-# pair with the factory ID and fully qualified name of the implementation class,\n-# for example, the following specify the implementation class for DOM:\n@@ -27,1 +26,11 @@\n-# javax.xml.parsers.DocumentBuilderFactory=common.config.DocumentBuilderFactoryImpl\n+# The JAXP configuration file ranks 2nd to the System Property in the precedent\n+# order of the JAXP Lookup Mechanism. When the System Property is not specified,\n+# a JAXP factory reads the configuration file in order to locate an implementation\n+# class. If found, the class specified will be used as the factory implementation\n+# class.\n+#\n+# The format of an entry is key=value where the key is the fully qualified name\n+# of the factory and value that of the implementation class. The following entry\n+# set a DocumentBuilderFactory implementation class:\n+#\n+# javax.xml.parsers.DocumentBuilderFactory=com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\n@@ -32,1 +41,5 @@\n-# Properties with corresponding System Properties defined in Java SE or supported\n+# The JAXP configuration file ranks above the default settings in the Property\n+# Precedence in that its entries will override the default values of the corresponding\n+# properties.\n+#\n+# All properties that have System Properties defined in Java SE or supported\n@@ -37,0 +50,6 @@\n+# For example, the FILES property in CatalogFeatures has an associated system\n+# property called javax.xml.catalog.files. An entry for the FILES property in the\n+# configuration file would therefore use javax.xml.catalog.files as the key, that\n+# is:\n+#     javax.xml.catalog.files=strict\n+#\n@@ -39,0 +58,1 @@\n+#\n@@ -40,2 +60,5 @@\n-# The following example disallows extension functions\n-#jdk.xml.enableExtensionFunctions=false\n+# The value type is boolean and the default value is true (allowing\n+# extension functions). The following entry would override the default value and\n+# disallow extension functions:\n+#\n+# jdk.xml.enableExtensionFunctions=false\n@@ -45,4 +68,6 @@\n-# The JDK provides default parser implementation, but also allows third party\n-# implementation to override it. If it is necessary, users may set the property\n-# to true. By default, it is set to disallow overriding the default parser as\n-# done below.\n+#\n+# This property allows using a third party implementation to override the default\n+# parser provided by the JDK. The value type is boolean and the default value is\n+# false, disallowing overriding the default parser. The setting below reflects\n+# the default property setting:\n+#\n@@ -57,1 +82,3 @@\n-# by comma. The followings are example of external access settings:\n+# by comma, plus empty string (\"\") to represent no protocol allowed and the key\n+# word \"all\" for all access. The default is \"all\", allowing all external resources\n+# to be fetched. The followings are example of external access settings:\n@@ -59,2 +86,1 @@\n-# allow local (file) external DTD\n-# allow local (file) and remote (http) external DTD\n+# allow local (file) DTDs to be retrieved\n@@ -63,1 +89,1 @@\n-# allow local (file) and remote (http) external schema\n+# allow local (file) and remote (http) external schemas\n@@ -66,1 +92,1 @@\n-# reject external stylesheet\n+# reject any external stylesheets\n@@ -69,1 +95,1 @@\n-# allow all external stylesheet\n+# allow all external stylesheets\n@@ -74,0 +100,1 @@\n+#\n@@ -75,2 +102,6 @@\n-# Except PREFER, all other properties with system properties can be placed in\n-# the configuration file. Examples are as follows.\n+# Except PREFER, all other properties can be placed in the configuration file\n+# using the system properties defined for them.\n+#\n+# FILES: A semicolon-delimited list of URIs to locate the catalog files. The URIs\n+# must be absolute and have a URL protocol handler for the URI scheme. The following\n+# is an example of setting up a catalog file:\n@@ -78,1 +109,0 @@\n-# specify a custom catalog file with its URI\n@@ -81,1 +111,4 @@\n-# instructs the CatalogResolver to load alternative catalogs as needed\n+# DEFER: Indicates that the alternative catalogs including those specified in\n+# delegate entries or nextCatalog are not read until they are needed. The value\n+# is a boolean and the default value is true.\n+#\n@@ -84,3 +117,5 @@\n-# the value of the resolve property is defined to be strict\/continue\/ignore\n-# to be strict, that is, to report an error if an External resource can not be\n-# resolved through a catalog, set the property to be strict as follows\n+# RESOLVE: Determines the action if there is no matching entry found after all of\n+# the specified catalogs are exhausted. The values are key words: strict, continue,\n+# and ignore. The default is strict. The following setting reflects the default\n+# setting.\n+#\n@@ -90,1 +125,4 @@\n-# Catalog is enabled for JAXP processors:\n+# useCatalog:\n+# This property instructs XML processors to use XML Catalogs to resolve entity\n+# references. The value is a boolean and the default value is true.\n+#\n@@ -93,1 +131,0 @@\n-# Implementation specific limits:\n@@ -95,6 +132,1 @@\n-# DTD related limits\n-#jdk.xml.entityExpansionLimit=64000\n-#jdk.xml.totalEntitySizeLimit=5E7\n-#jdk.xml.maxGeneralEntitySizeLimit=0\n-#jdk.xml.maxParameterEntitySizeLimit=1E6\n-#jdk.xml.entityReplacementLimit=3E6\n+# Implementation Specific Properties - Limits\n@@ -102,4 +134,33 @@\n-# General XML limits\n-#jdk.xml.elementAttributeLimit=10000\n-#jdk.xml.maxOccurLimit=5000\n-#jdk.xml.maxElementDepth=0\n+# Limits have a value type Integer. The values must be positive integers. Zero\n+# means no limit.\n+#\n+# Limits the number of entity expansions. The default value is 64000\n+# jdk.xml.entityExpansionLimit=64000\n+#\n+# Limits the total size of all entities that include general and parameter entities.\n+# The size is calculated as an aggregation of all entities. The default value is 5x10^7.\n+# jdk.xml.totalEntitySizeLimit=5E7\n+#\n+# Limits the maximum size of any general entities. The default value is 0.\n+# jdk.xml.maxGeneralEntitySizeLimit=0\n+#\n+# Limits the maximum size of any parameter entities, including the result of\n+# nesting multiple parameter entities. The default value is 10^6.\n+# jdk.xml.maxParameterEntitySizeLimit=1E6\n+#\n+# Limits the total number of nodes in all entity references. The default value is 3x10^6.\n+# jdk.xml.entityReplacementLimit=3E6\n+#\n+# Limits the number of attributes an element can have. The default value is 10000.\n+# jdk.xml.elementAttributeLimit=10000\n+#\n+# Limits the number of content model nodes that may be created when building a\n+# grammar for a W3C XML Schema that contains maxOccurs attributes with values\n+# other than \"unbounded\". The default value is 5000.\n+# jdk.xml.maxOccurLimit=5000\n+#\n+# Limits the maximum element depth. The default value is 0.\n+# jdk.xml.maxElementDepth=0\n+#\n+# Limits the maximum size of XML names, including element name, attribute name\n+# and namespace prefix and URI. The default value is 1000.\n@@ -108,0 +169,1 @@\n+#\n@@ -109,0 +171,2 @@\n+#\n+# Limits the number of groups an XPath expression can contain. The default value is 10.\n@@ -110,0 +174,2 @@\n+#\n+# Limits the number of operators an XPath expression can contain. The default value is 100.\n@@ -111,0 +177,2 @@\n+#\n+# Limits the total number of XPath operators in an XSL Stylesheet. The default value is 10000.\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/config\/files\/jaxp.properties","additions":117,"deletions":49,"binary":false,"changes":166,"status":"modified"}]}