{"files":[{"patch":"@@ -286,1 +286,4 @@\n-     * ignoring white space.  Therefore, a documentation comment\n+     * ignoring white space, annotations, end-of-line-comments ({@code\n+     * \"\/\/\"} comments), and intermediate traditional comments\n+     * (<code>\"\/* ... *&#47;\"<\/code> comments) that are not doc comments.\n+     * Therefore, a documentation comment\n@@ -289,4 +292,11 @@\n-     * the comment as it appears in source code.  The leading \"{@code \/**}\"\n-     * and trailing \"<code>*&#47;<\/code>\" are removed.  For lines\n-     * of the comment starting after the initial \"{@code \/**}\",\n-     * leading white space characters are discarded as are any\n+     * the comment as it appears in source code:\n+     * <ul>\n+     * <li>The leading \"{@code \/**}\" is removed, as are any\n+     * immediately following space characters on that line. If all the\n+     * characters of the line are removed, it makes no contribution to\n+     * the returned comment.\n+     * <li>For subsequent lines\n+     * of the doc comment starting after the initial \"{@code \/**}\",\n+     * if the lines start with <em>zero<\/em> or more white space characters followed by\n+     * <em>one<\/em> or more \"{@code *}\" characters,\n+     * those leading white space characters are discarded as are any\n@@ -294,1 +304,10 @@\n-     * space or starting the line.  The processed lines are then\n+     * space or starting the line.\n+     * Otherwise, if a line does not have a prefix of the described\n+     * form, the entire line is retained.\n+     * <li> The trailing \"<code>*&#47;<\/code>\" is removed. The line\n+     * with the trailing\" <code>*&#47;<\/code>\" also undergoes leading\n+     * space and \"{@code *}\" character removal as described above. If all the characters\n+     * of the line are removed, it makes no contribution to the\n+     * returned comment.\n+     * <\/ul>\n+     * The processed lines are then\n@@ -302,0 +321,1 @@\n+     * @jls 3.7 Comments\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":26,"deletions":6,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8307184\n+ * @summary Test basic operation of Elements.getDocComments\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestGetDocComments\n+ * @compile -processor TestGetDocComments -proc:only TestGetDocComments.java\n+ *\/\n+\n+import java.io.Writer;\n+import java.util.*;\n+import java.util.function.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+\n+\/**\n+ * Test basic workings of Elements.getDocComments\n+ *\/\n+public class TestGetDocComments extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            boolean elementSeen = false;\n+\n+            for (TypeElement typeRoot : ElementFilter.typesIn(roundEnv.getRootElements()) ) {\n+                for (Element element : typeRoot.getEnclosedElements()) {\n+                    ExpectedComment expectedComment = element.getAnnotation(ExpectedComment.class);\n+                    if (expectedComment != null ) {\n+                        elementSeen = true;\n+                        String expectedCommentStr = expectedComment.value();\n+                        String actualComment = elements.getDocComment(element);\n+\n+                        if (!expectedCommentStr.equals(actualComment)) {\n+                            messager.printError(\"Unexpected doc comment found\", element);\n+                            System.out.println(\"Actual\");\n+                            System.out.println(actualComment);\n+                            System.out.println(\"Expected\");\n+                            System.out.println(expectedCommentStr);\n+                            stringDiffer(actualComment, expectedCommentStr);\n+                        }\n+                    }\n+                }\n+\n+                if (!elementSeen) {\n+                    throw new RuntimeException(\"No elements seen.\");\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void stringDiffer(String actual, String expected) {\n+        if (actual.length() != expected.length()) {\n+            System.out.println(\"Strings have different lengths\");\n+        }\n+    }\n+\n+    @interface ExpectedComment {\n+        String value();\n+    }\n+\n+    \/\/ Basic processing of interior lines\n+    \/**\n+     *Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+     *eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+     *enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+     *nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+     *in reprehenderit in voluptate velit esse cillum dolore eu\n+     *fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+     *proident, sunt in culpa qui officia deserunt mollit anim id est\n+     *laborum.\n+     *\/\n+    @ExpectedComment(\"\"\"\n+     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+     eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+     enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+     nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor\n+     in reprehenderit in voluptate velit esse cillum dolore eu\n+     fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n+     proident, sunt in culpa qui officia deserunt mollit anim id est\n+     laborum.\n+      \"\"\")\n+    \/\/ End-of-line-style comment\n+    @SuppressWarnings(\"\") \/\/ A second preceding annotation\n+    \/* Traditional comment *\/\n+    private void foo() {return ;}\n+\n+\n+    \/\/ Check removal of various *'s and space characters;\n+    \/\/ use Unicode escape to test tab removal\n+    \/**\n+*Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+**eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+***enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+*****nisi ut aliquip ex ea commodo consequat.\n+ \\u0009*Duis aute irure dolor in reprehenderit in voluptate velit esse\n+ **cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n+  ***cupidatat non proident, sunt in culpa qui officia deserunt mollit\n+                                            *anim id est laborum.\n+     *\/\n+    @ExpectedComment(\"\"\"\n+       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+       eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n+       enim ad minim veniam, quis nostrud exercitation ullamco laboris\n+       nisi ut aliquip ex ea commodo consequat.\n+       Duis aute irure dolor in reprehenderit in voluptate velit esse\n+       cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n+       cupidatat non proident, sunt in culpa qui officia deserunt mollit\n+       anim id est laborum.\n+       \"\"\")\n+    @SuppressWarnings(\"\") \/\/ A second preceding annotation\n+    \/\/ End-of-line-style comment\n+    \/*\n+     * Traditional comment over multiple lines.\n+     *\/\n+    private void bar() {return ;}\n+\n+    \/\/ Spaces _after_ the space-asterisk prefix are _not_ deleted.\n+    \/**\n+     * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n+     * eiusmod tempor incididunt ut labore et dolore magna aliqua.\n+     *\/\n+    @ExpectedComment( \/\/ Cannot used a text block here since leading spaces are removed\n+     \" Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\\n\" +\n+     \" eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\")\n+    private void baz() {return ;}\n+\n+    \/\/ Space after ** is removed, but not space before \"*\/\"\n+    \/**   Totality *\/\n+    @ExpectedComment(\"Totality \") \/\/ No newline\n+    private void quux() {return ;}\n+\n+    \/\/ Space after \"**\" is removed, but not trailing space later on the line\n+    \/** Totality\\u0020\n+     *\/\n+    @ExpectedComment(\"Totality \\n\")\n+    private void corge() {return ;}\n+\n+    \/**\n+     * Totality *\/\n+    @ExpectedComment(\" Totality \") \/\/ No newline\n+    private void grault() {return ;}\n+\n+    \/\/ Trailing space characters on first line\n+    \/** \\u0009\\u0020\n+     * Totality\n+     *\/\n+    @ExpectedComment(\" Totality\\n\") \/\/ No newline\n+    private void wombat() {return ;}\n+\n+    \/**\n+     *\/\n+    @ExpectedComment(\"\") \/\/ No newline\n+    private void empty() {return ;}\n+\n+    \/**\n+     * tail *\/\n+    @ExpectedComment(\" tail \") \/\/ No newline\n+    private void tail() {return ;}\n+\n+    \/**\n+   ****\/\n+    @ExpectedComment(\"\") \/\/ No newline\n+    private void tail2() {return ;}\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestGetDocComments.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}