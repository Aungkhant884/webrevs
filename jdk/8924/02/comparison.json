{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -63,1 +63,1 @@\n-  \/\/ Heal oops and disarm\n+  \/\/ Heal oops\n@@ -65,0 +65,5 @@\n+\n+  \/\/ CodeCache sweeper support\n+  nm->mark_as_maybe_on_continuation();\n+\n+  \/\/ Disarm\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetNMethod.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"code\/nmethod.hpp\"\n@@ -74,1 +75,6 @@\n-class ShenandoahUpdateRefsClosure: public OopClosure {\n+class ShenandoahOopClosureBase : public MetadataVisitingOopIterateClosure {\n+public:\n+  inline void do_nmethod(nmethod* nm);\n+};\n+\n+class ShenandoahUpdateRefsClosure: public ShenandoahOopClosureBase {\n@@ -87,1 +93,1 @@\n-class ShenandoahEvacuateUpdateMetadataClosure: public BasicOopIterateClosure {\n+class ShenandoahEvacuateUpdateMetadataClosure: public ShenandoahOopClosureBase {\n@@ -102,1 +108,1 @@\n-class ShenandoahEvacuateUpdateRootsClosure : public BasicOopIterateClosure {\n+class ShenandoahEvacuateUpdateRootsClosure : public ShenandoahOopClosureBase {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/shenandoah\/shenandoahMarkingContext.inline.hpp\"\n@@ -70,0 +71,4 @@\n+void ShenandoahOopClosureBase::do_nmethod(nmethod* nm) {\n+  nm->run_nmethod_entry_barrier();\n+}\n+\n@@ -71,1 +76,1 @@\n-  _bs(static_cast<ShenandoahBarrierSet*>(BarrierSet::barrier_set())) {\n+  _bs(ShenandoahBarrierSet::barrier_set()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2022, Red Hat, Inc. All rights reserved.\n@@ -247,1 +247,7 @@\n-      _bs->disarm(nm);\n+      if (Continuations::enabled()) {\n+        \/\/ Loom needs to know about visited nmethods. Arm the nmethods to get\n+        \/\/ mark_as_maybe_on_continuation() callbacks when they are used again.\n+        _bs->arm(nm, 0);\n+      } else {\n+        _bs->disarm(nm);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n@@ -509,0 +510,4 @@\n+void ShenandoahConcurrentGC::start_mark() {\n+  _mark.start_mark();\n+}\n+\n@@ -528,0 +533,2 @@\n+  start_mark();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+  void start_mark();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/continuation.hpp\"\n@@ -241,0 +242,2 @@\n+\n+  end_mark();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2022, Red Hat, Inc. All rights reserved.\n@@ -2315,2 +2315,3 @@\n-  if (is_concurrent_mark_in_progress() && marking_context()->allocated_after_mark_start(obj)) {\n-    return false;\n+  if (is_concurrent_mark_in_progress() &&\n+     !marking_context()->allocated_after_mark_start(obj)) {\n+    return true;\n@@ -2319,5 +2320,3 @@\n-  \/\/ Objects allocated after evacuation start are guaranteed in to-space, don't need any barriers\n-  \/\/ during evacuation\/update references phases.\n-  if (has_forwarded_objects() &&\n-      cast_from_oop<HeapWord*>(obj) >= heap_region_containing(obj)->get_update_watermark()) {\n-    return false;\n+  \/\/ Can not guarantee obj is deeply good.\n+  if (has_forwarded_objects()) {\n+    return true;\n@@ -2326,1 +2325,1 @@\n-  return true;\n+  return false;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n@@ -36,0 +36,1 @@\n+#include \"runtime\/continuation.hpp\"\n@@ -48,0 +49,14 @@\n+void ShenandoahMark::start_mark() {\n+  \/\/ Tell the sweeper that we start a marking cycle.\n+  if (!Continuations::is_gc_marking_cycle_active()) {\n+    Continuations::on_gc_marking_cycle_start();\n+  }\n+}\n+\n+void ShenandoahMark::end_mark() {\n+  \/\/ Tell the sweeper that we finished a marking cycle.\n+  \/\/ Unlike other GCs, we do not arm the nmethods\n+  \/\/ when marking terminates.\n+  Continuations::on_gc_marking_cycle_finish();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n@@ -53,0 +53,4 @@\n+  \/\/ Loom support\n+  void start_mark();\n+  void end_mark();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2022, Red Hat, Inc. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n@@ -72,0 +73,6 @@\n+      if (ContinuationGCSupport::relativize_stack_chunk(obj)) {\n+          \/\/ Loom doesn't support mixing of weak marking and strong marking of\n+          \/\/ stack chunks.\n+          cl->set_weak(false);\n+      }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahOopClosures.inline.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"runtime\/continuation.hpp\"\n@@ -162,1 +164,1 @@\n-             heap->is_concurrent_strong_root_in_progress()) {\n+             heap->is_concurrent_strong_root_in_progress() ) {\n@@ -169,1 +171,1 @@\n-    assert(heap->cancelled_gc(), \"What else?\");\n+    assert(heap->cancelled_gc() || Continuations::enabled(), \"What else?\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2022, Red Hat, Inc. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"gc\/shenandoah\/shenandoahClosures.inline.hpp\"\n@@ -61,0 +62,5 @@\n+\n+  virtual void do_nmethod(nmethod* nm) {\n+    assert(!is_weak(), \"Can't handle weak marking of nmethods\");\n+    nm->run_nmethod_entry_barrier();\n+  }\n@@ -89,1 +95,0 @@\n-  virtual bool do_metadata()        { return false; }\n@@ -103,1 +108,0 @@\n-  virtual bool do_metadata()        { return true; }\n@@ -118,1 +122,0 @@\n-  virtual bool do_metadata()        { return false; }\n@@ -133,1 +136,0 @@\n-  virtual bool do_metadata()        { return true; }\n@@ -136,1 +138,1 @@\n-class ShenandoahUpdateRefsSuperClosure : public BasicOopIterateClosure {\n+class ShenandoahUpdateRefsSuperClosure : public ShenandoahOopClosureBase {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, Red Hat, Inc. All rights reserved.\n@@ -104,0 +104,2 @@\n+  start_mark();\n+\n@@ -119,0 +121,1 @@\n+  end_mark();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1202,1 +1202,0 @@\n-    assert(!UseShenandoahGC, \"Shenandoah can not deal with allocating chunks visible to marking\");\n@@ -1285,0 +1284,5 @@\n+  \/\/ Shenandoah: even continuation is good, it does not mean it is deeply good.\n+  if (UseShenandoahGC && chunk->requires_barriers()) {\n+    fast_oop = nullptr;\n+  }\n+\n@@ -1288,2 +1292,2 @@\n-    assert(!UseZGC || !UseShenandoahGC || !chunk->requires_barriers(), \"Allocated ZGC\/ShenandoahGC object requires barriers\");\n-    _barriers = !UseZGC && !UseShenandoahGC && chunk->requires_barriers();\n+    assert(!UseZGC || !chunk->requires_barriers(), \"Allocated ZGC object requires barriers\");\n+    _barriers = !UseZGC && chunk->requires_barriers();\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}