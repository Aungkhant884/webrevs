{"files":[{"patch":"@@ -721,1 +721,3 @@\n-    if (phi == NULL)  break;\n+    if (phi == NULL || _igvn.type(phi) == Type::TOP) {\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8265938\n+ * @summary Test conditional move optimization with a TOP PhiNode.\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:CompileCommand=compileonly,compiler.loopopts.TestCMoveWithDeadPhi::test\n+ *                   compiler.loopopts.TestCMoveWithDeadPhi\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestCMoveWithDeadPhi {\n+\n+    static void test(boolean b) {\n+        if (b) {\n+            long l = 42;\n+            for (int i = 0; i < 100; i++) {\n+                if (i < 10) {\n+                    l++;\n+                    if (i == 5) {\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            \/\/ Infinite loop\n+            for (int j = 0; j < 100; j++) {\n+                j--;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Execute test in own thread because it contains an infinite loop\n+        Thread thread = new Thread() {\n+            public void run() {\n+                for (int i = 0; i < 50_000; ++i) {\n+                    test((i % 2) == 0);\n+                }\n+            }\n+        };\n+        \/\/ Give thread some time to trigger compilation\n+        thread.setDaemon(true);\n+        thread.start();\n+        Thread.sleep(Utils.adjustTimeout(4000));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCMoveWithDeadPhi.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,0 @@\n- *\n@@ -29,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +36,2 @@\n+import jdk.test.lib.Utils;\n+\n@@ -45,0 +47,1 @@\n+        thread.setDaemon(true);\n@@ -47,1 +50,1 @@\n-        Thread.sleep(4000);\n+        Thread.sleep(Utils.adjustTimeout(4000));\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestStrangeControl.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}