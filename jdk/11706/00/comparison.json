{"files":[{"patch":"@@ -3634,0 +3634,11 @@\n+            if (_head == nlpt->_head) {\n+              \/\/ this and nlpt (inner loop) have the same loop head. This should not happen because\n+              \/\/ during beautify_loops we call merge_many_backedges. However, infinite loops may not\n+              \/\/ have been attached to the loop-tree during build_loop_tree before beautify_loops,\n+              \/\/ but then attached in the build_loop_tree afterwards, and so still have unmerged\n+              \/\/ backedges. Check if we are indeed in an infinite subgraph, and terminate the scan,\n+              \/\/ since we have reached the loop head of this.\n+              assert(_head->as_Region()->is_in_infinite_subgraph(),\n+                     \"only expect unmerged backedges in infinite loops\");\n+              break;\n+            }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+super public class TestInfiniteLoopWithUnmergedBackedges\n+{\n+    public Method \"<init>\":\"()V\"\n+    stack 2 locals 1\n+    {\n+        aload_0;\n+        invokespecial  Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+    static Method test_001:\"(IIIII)V\"\n+    stack 5 locals 10\n+    {\n+        iload_0;\n+        ifgt LOOP;\n+        \/\/ below is dominated by the one above\n+        iload_0;\n+        ifle BACK;\n+        goto HEAD;\n+    HEAD:\n+        iload_3;\n+        ifeq BACK;\n+    BACK:\n+        goto HEAD;\n+    LOOP:\n+        iload_1;\n+        iflt LOOP;\n+        iload_2;\n+        iflt LOOP;\n+        return;\n+    }\n+    static Method test_002:\"(IIIII)V\"\n+    stack 5 locals 30\n+    {\n+        iload_0;\n+        ifgt LOOP;\n+\n+        iconst_0;\n+        istore 9;\n+\n+        goto HEAD;\n+    TAIL:\n+        iload_3;\n+        iload 9;\n+        if_icmpeq HEAD;\n+        iinc 9, 1;\n+    HEAD:\n+        goto TAIL;\n+    LOOP:\n+        iload_1;\n+        iflt LOOP;\n+        iload_2;\n+        iflt LOOP;\n+        return;\n+    }\n+    static Method test_003:\"(IIIII)I\"\n+    stack 5 locals 30\n+    {\n+        iload_0;\n+        ifgt SKIP;\n+\n+        iconst_0;\n+        istore 9;\n+\n+        goto HEAD;\n+    TAIL:\n+        iload_3;\n+        iload 9;\n+        if_icmpeq HEAD;\n+        iinc 9, 1;\n+        \/\/ Two paths lead to HEAD, so we have an inner and outer loop\n+        \/\/ But no SafePoint is placed here, because we go forward in bci\n+    HEAD:\n+        \/\/ SafePoint is placed here, because we go from here back in bci\n+        goto TAIL;\n+\n+    SKIP:\n+        iconst_0;\n+        istore 8;\n+        iconst_0;\n+        istore 9;\n+        \/\/ loop with two backedges, which calls\n+        \/\/ merge_many_backedges and then recomputes\n+        \/\/ build_loop_tree\n+    LOOP:\n+        iinc 9, 1;\n+        iinc 8, -1;\n+        iload 9;\n+        ldc 7;\n+        irem;\n+        ifeq LOOP;\n+        iload 9;\n+        ldc 10001;\n+        if_icmple LOOP;\n+        iload 8;\n+        ireturn;\n+    }\n+    static Method test_004:\"(IIIII)I\"\n+    stack 5 locals 30\n+    {\n+        iload_0;\n+        ifgt SKIP;\n+\n+        iconst_0;\n+        istore 9;\n+\n+        goto HEAD;\n+    TAIL:\n+        iload_3;\n+        iload 9;\n+        if_icmpeq HEAD;\n+        iinc 9, 1;\n+        iload 9;\n+        ldc 10001;\n+        if_icmpeq HEAD; \/\/ a second one\n+        iinc 9, 1;\n+    HEAD:\n+        goto TAIL;\n+\n+    SKIP:\n+        iconst_0;\n+        istore 8;\n+        iconst_0;\n+        istore 9;\n+    LOOP:\n+        iinc 9, 1;\n+        iinc 8, -1;\n+        iload 9;\n+        ldc 7;\n+        irem;\n+        ifeq LOOP;\n+        iload 9;\n+        ldc 10001;\n+        if_icmple LOOP;\n+        iload 8;\n+        ireturn;\n+    }\n+    static Method test_005:\"(IIIII)I\"\n+    stack 5 locals 30\n+    {\n+        iload_0;\n+        ifgt SKIP;\n+\n+        iconst_0;\n+        istore 9;\n+\n+        goto HEAD;\n+    TAIL:\n+        iload_3;\n+        iload 9;\n+        if_icmpeq HEAD;\n+        iinc 9, 1;\n+        iload 9;\n+        ldc 10001;\n+        if_icmpeq HEAD; \/\/ a second one\n+        iinc 9, 1;\n+    HEAD:\n+        goto TAIL;\n+\n+    SKIP:\n+        iconst_0;\n+        istore 8;\n+        iconst_0;\n+        istore 9;\n+    LOOP:\n+        iinc 9, 1;\n+        iinc 8, -1;\n+        iload 9;\n+        ldc 7;\n+        irem;\n+        ifeq LOOP;\n+        iload 9;\n+        ldc 10001;\n+        if_icmple LOOP;\n+        iload 8;\n+        ireturn;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestInfiniteLoopWithUnmergedBackedges.jasm","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296412\n+ * @compile TestInfiniteLoopWithUnmergedBackedges.jasm\n+ * @summary Infinite loops may not have the backedges merged, before we call IdealLoopTree::check_safepts\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:-LoopUnswitching\n+ *      -XX:CompileCommand=compileonly,TestInfiniteLoopWithUnmergedBackedges::test*\n+ *      TestInfiniteLoopWithUnmergedBackedgesMain\n+ *\/\n+\n+public class TestInfiniteLoopWithUnmergedBackedgesMain {\n+    public static void main (String[] args) {\n+        TestInfiniteLoopWithUnmergedBackedges.test_001(1, 0, 0, 0, 0);\n+        TestInfiniteLoopWithUnmergedBackedges.test_002(1, 0, 0, 0, 0);\n+        TestInfiniteLoopWithUnmergedBackedges.test_003(1, 0, 0, 0, 0);\n+        TestInfiniteLoopWithUnmergedBackedges.test_004(1, 0, 0, 0, 0);\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestInfiniteLoopWithUnmergedBackedgesMain.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}