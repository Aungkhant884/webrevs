{"files":[{"patch":"@@ -1083,1 +1083,1 @@\n-    _total_closed_heap_region_size = mapinfo->write_archive_heap_regions(\n+    _total_closed_heap_region_size = mapinfo->write_heap_regions(\n@@ -1086,3 +1086,3 @@\n-                                        MetaspaceShared::first_closed_archive_heap_region,\n-                                        MetaspaceShared::max_closed_archive_heap_region);\n-    _total_open_heap_region_size = mapinfo->write_archive_heap_regions(\n+                                        MetaspaceShared::first_closed_heap_region,\n+                                        MetaspaceShared::max_closed_heap_region);\n+    _total_open_heap_region_size = mapinfo->write_heap_regions(\n@@ -1091,2 +1091,2 @@\n-                                        MetaspaceShared::first_open_archive_heap_region,\n-                                        MetaspaceShared::max_open_archive_heap_region);\n+                                        MetaspaceShared::first_open_heap_region,\n+                                        MetaspaceShared::max_open_heap_region);\n@@ -1158,1 +1158,1 @@\n-void ArchiveBuilder::print_heap_region_stats(GrowableArray<MemRegion> *heap_mem,\n+void ArchiveBuilder::print_heap_region_stats(GrowableArray<MemRegion>* regions,\n@@ -1160,1 +1160,1 @@\n-  int arr_len = heap_mem == NULL ? 0 : heap_mem->length();\n+  int arr_len = regions == NULL ? 0 : regions->length();\n@@ -1162,2 +1162,2 @@\n-      char* start = (char*)heap_mem->at(i).start();\n-      size_t size = heap_mem->at(i).byte_size();\n+      char* start = (char*)regions->at(i).start();\n+      size_t size = regions->at(i).byte_size();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-  void print_heap_region_stats(GrowableArray<MemRegion> *heap_mem,\n+  void print_heap_region_stats(GrowableArray<MemRegion>* regions,\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-  if (CompressedOops::is_null(o) || !HeapShared::open_archive_heap_region_mapped()) {\n+  if (CompressedOops::is_null(o) || !HeapShared::open_regions_mapped()) {\n@@ -315,1 +315,1 @@\n-    assert(HeapShared::open_archive_heap_region_mapped(),\n+    assert(HeapShared::open_regions_mapped(),\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1409,1 +1409,1 @@\n-\/\/ produces the 'heap_mem' array.\n+\/\/ produces the 'regions' array.\n@@ -1415,1 +1415,1 @@\n-\/\/ the 'heap_mem' array may contain more than one consolidated MemRegions. When\n+\/\/ the 'regions' array may contain more than one consolidated MemRegions. When\n@@ -1438,3 +1438,3 @@\n-size_t FileMapInfo::write_archive_heap_regions(GrowableArray<MemRegion> *heap_mem,\n-                                               GrowableArray<ArchiveHeapOopmapInfo> *oopmaps,\n-                                               int first_region_id, int max_num_regions) {\n+size_t FileMapInfo::write_heap_regions(GrowableArray<MemRegion>* regions,\n+                                       GrowableArray<ArchiveHeapOopmapInfo>* oopmaps,\n+                                       int first_region_id, int max_num_regions) {\n@@ -1443,2 +1443,2 @@\n-  int arr_len = heap_mem == NULL ? 0 : heap_mem->length();\n-  if(arr_len > max_num_regions) {\n+  int arr_len = regions == NULL ? 0 : regions->length();\n+  if (arr_len > max_num_regions) {\n@@ -1457,2 +1457,2 @@\n-      start = (char*)heap_mem->at(i).start();\n-      size = heap_mem->at(i).byte_size();\n+      start = (char*)regions->at(i).start();\n+      size = regions->at(i).byte_size();\n@@ -1769,4 +1769,4 @@\n-static MemRegion *closed_archive_heap_ranges = NULL;\n-static MemRegion *open_archive_heap_ranges = NULL;\n-static int num_closed_archive_heap_ranges = 0;\n-static int num_open_archive_heap_ranges = 0;\n+static MemRegion *closed_heap_regions = NULL;\n+static MemRegion *open_heap_regions = NULL;\n+static int num_closed_heap_regions = 0;\n+static int num_open_heap_regions = 0;\n@@ -1776,1 +1776,1 @@\n-  return (space_at(MetaspaceShared::first_closed_archive_heap_region)->used() > 0);\n+  return (space_at(MetaspaceShared::first_closed_heap_region)->used() > 0);\n@@ -1787,1 +1787,1 @@\n-  for (int i = MetaspaceShared::first_closed_archive_heap_region;\n+  for (int i = MetaspaceShared::first_closed_heap_region;\n@@ -1902,1 +1902,1 @@\n-  FileMapRegion* si = space_at(MetaspaceShared::first_closed_archive_heap_region);\n+  FileMapRegion* si = space_at(MetaspaceShared::first_closed_heap_region);\n@@ -1921,6 +1921,6 @@\n-  \/\/ Map the closed_archive_heap regions, GC does not write into the regions.\n-  if (map_heap_data(&closed_archive_heap_ranges,\n-                    MetaspaceShared::first_closed_archive_heap_region,\n-                    MetaspaceShared::max_closed_archive_heap_region,\n-                    &num_closed_archive_heap_ranges)) {\n-    HeapShared::set_closed_archive_heap_region_mapped();\n+  \/\/ Map the closed_heap regions, GC does not write into the regions.\n+  if (map_heap_regions(&closed_heap_regions,\n+                       MetaspaceShared::first_closed_heap_region,\n+                       MetaspaceShared::max_closed_heap_region,\n+                       &num_closed_heap_regions)) {\n+    HeapShared::set_closed_regions_mapped();\n@@ -1929,6 +1929,6 @@\n-    if (map_heap_data(&open_archive_heap_ranges,\n-                      MetaspaceShared::first_open_archive_heap_region,\n-                      MetaspaceShared::max_open_archive_heap_region,\n-                      &num_open_archive_heap_ranges,\n-                      true \/* open *\/)) {\n-      HeapShared::set_open_archive_heap_region_mapped();\n+    if (map_heap_regions(&open_heap_regions,\n+                         MetaspaceShared::first_open_heap_region,\n+                         MetaspaceShared::max_open_heap_region,\n+                         &num_open_heap_regions,\n+                         true \/* open *\/)) {\n+      HeapShared::set_open_regions_mapped();\n@@ -1945,3 +1945,3 @@\n-  if (!HeapShared::closed_archive_heap_region_mapped()) {\n-    assert(closed_archive_heap_ranges == NULL &&\n-           num_closed_archive_heap_ranges == 0, \"sanity\");\n+  if (!HeapShared::closed_regions_mapped()) {\n+    assert(closed_heap_regions == NULL &&\n+           num_closed_heap_regions == 0, \"sanity\");\n@@ -1950,2 +1950,2 @@\n-  if (!HeapShared::open_archive_heap_region_mapped()) {\n-    assert(open_archive_heap_ranges == NULL && num_open_archive_heap_ranges == 0, \"sanity\");\n+  if (!HeapShared::open_regions_mapped()) {\n+    assert(open_heap_regions == NULL && num_open_heap_regions == 0, \"sanity\");\n@@ -1956,2 +1956,2 @@\n-bool FileMapInfo::map_heap_data(MemRegion **heap_mem, int first,\n-                                int max, int* num, bool is_open_archive) {\n+bool FileMapInfo::map_heap_regions(MemRegion** regions_ret, int first,\n+                                   int max, int* num_ret, bool is_open_archive) {\n@@ -1988,1 +1988,1 @@\n-  \/\/ Check that ranges are within the java heap\n+  \/\/ Check that regions are within the java heap\n@@ -2012,1 +2012,1 @@\n-      dealloc_archive_heap_regions(regions, region_num);\n+      dealloc_heap_regions(regions, region_num);\n@@ -2021,1 +2021,1 @@\n-      dealloc_archive_heap_regions(regions, region_num);\n+      dealloc_heap_regions(regions, region_num);\n@@ -2029,2 +2029,2 @@\n-  *heap_mem = regions;\n-  *num = region_num;\n+  *regions_ret = regions;\n+  *num_ret = region_num;\n@@ -2034,1 +2034,1 @@\n-void FileMapInfo::patch_archived_heap_embedded_pointers() {\n+void FileMapInfo::patch_heap_embedded_pointers() {\n@@ -2040,3 +2040,3 @@\n-  patch_archived_heap_embedded_pointers(closed_archive_heap_ranges,\n-                                        num_closed_archive_heap_ranges,\n-                                        MetaspaceShared::first_closed_archive_heap_region);\n+  patch_heap_embedded_pointers(closed_heap_regions,\n+                               num_closed_heap_regions,\n+                               MetaspaceShared::first_closed_heap_region);\n@@ -2044,3 +2044,3 @@\n-  patch_archived_heap_embedded_pointers(open_archive_heap_ranges,\n-                                        num_open_archive_heap_ranges,\n-                                        MetaspaceShared::first_open_archive_heap_region);\n+  patch_heap_embedded_pointers(open_heap_regions,\n+                               num_open_heap_regions,\n+                               MetaspaceShared::first_open_heap_region);\n@@ -2049,2 +2049,2 @@\n-void FileMapInfo::patch_archived_heap_embedded_pointers(MemRegion* ranges, int num_ranges,\n-                                                        int first_region_idx) {\n+void FileMapInfo::patch_heap_embedded_pointers(MemRegion* regions, int num_regions,\n+                                               int first_region_idx) {\n@@ -2055,1 +2055,1 @@\n-  for (int i=0; i<num_ranges; i++) {\n+  for (int i=0; i<num_regions; i++) {\n@@ -2057,2 +2057,2 @@\n-    HeapShared::patch_archived_heap_embedded_pointers(\n-      ranges[i],\n+    HeapShared::patch_embedded_pointers(\n+      regions[i],\n@@ -2069,6 +2069,6 @@\n-  \/\/ Note that closed_archive_heap_ranges may be non-NULL even if no ranges were found.\n-  if (num_closed_archive_heap_ranges != 0) {\n-    assert(closed_archive_heap_ranges != NULL,\n-           \"Null closed_archive_heap_ranges array with non-zero count\");\n-    G1CollectedHeap::heap()->fill_archive_regions(closed_archive_heap_ranges,\n-                                                  num_closed_archive_heap_ranges);\n+  \/\/ Note that closed_heap_regions may be non-NULL even if no regions were found.\n+  if (num_closed_heap_regions != 0) {\n+    assert(closed_heap_regions != NULL,\n+           \"Null closed_heap_regions array with non-zero count\");\n+    G1CollectedHeap::heap()->fill_archive_regions(closed_heap_regions,\n+                                                  num_closed_heap_regions);\n@@ -2078,4 +2078,4 @@\n-  if (num_open_archive_heap_ranges != 0) {\n-    assert(open_archive_heap_ranges != NULL, \"NULL open_archive_heap_ranges array with non-zero count\");\n-    G1CollectedHeap::heap()->fill_archive_regions(open_archive_heap_ranges,\n-                                                  num_open_archive_heap_ranges);\n+  if (num_open_heap_regions != 0) {\n+    assert(open_heap_regions != NULL, \"NULL open_heap_regions array with non-zero count\");\n+    G1CollectedHeap::heap()->fill_archive_regions(open_heap_regions,\n+                                                  num_open_heap_regions);\n@@ -2092,2 +2092,2 @@\n-    G1CollectedHeap::heap()->populate_archive_regions_bot_part(open_archive_heap_ranges,\n-                                                               num_open_archive_heap_ranges);\n+    G1CollectedHeap::heap()->populate_archive_regions_bot_part(open_heap_regions,\n+                                                               num_open_heap_regions);\n@@ -2098,1 +2098,1 @@\n-void FileMapInfo::dealloc_archive_heap_regions(MemRegion* regions, int num) {\n+void FileMapInfo::dealloc_heap_regions(MemRegion* regions, int num) {\n@@ -2100,1 +2100,1 @@\n-    assert(regions != NULL, \"Null archive ranges array with non-zero count\");\n+    assert(regions != NULL, \"Null archive regions array with non-zero count\");\n@@ -2364,4 +2364,4 @@\n-    map_info->dealloc_archive_heap_regions(open_archive_heap_ranges,\n-                                           num_open_archive_heap_ranges);\n-    map_info->dealloc_archive_heap_regions(closed_archive_heap_ranges,\n-                                           num_closed_archive_heap_ranges);\n+    map_info->dealloc_heap_regions(open_heap_regions,\n+                                   num_open_heap_regions);\n+    map_info->dealloc_heap_regions(closed_heap_regions,\n+                                   num_closed_heap_regions);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":70,"deletions":70,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -463,3 +463,3 @@\n-  size_t write_archive_heap_regions(GrowableArray<MemRegion> *heap_mem,\n-                                    GrowableArray<ArchiveHeapOopmapInfo> *oopmaps,\n-                                    int first_region_id, int max_num_regions);\n+  size_t write_heap_regions(GrowableArray<MemRegion>* regions,\n+                            GrowableArray<ArchiveHeapOopmapInfo>* oopmaps,\n+                            int first_region_id, int max_num_regions);\n@@ -473,3 +473,3 @@\n-  void  patch_archived_heap_embedded_pointers() NOT_CDS_JAVA_HEAP_RETURN;\n-  void  patch_archived_heap_embedded_pointers(MemRegion* ranges, int num_ranges,\n-                                              int first_region_idx) NOT_CDS_JAVA_HEAP_RETURN;\n+  void  patch_heap_embedded_pointers() NOT_CDS_JAVA_HEAP_RETURN;\n+  void  patch_heap_embedded_pointers(MemRegion* regions, int num_regions,\n+                                     int first_region_idx) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -573,2 +573,2 @@\n-  bool  map_heap_data(MemRegion **heap_mem, int first, int max, int* num,\n-                      bool is_open = false) NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  bool  map_heap_regions(MemRegion** heap_regions, int first, int max, int* num,\n+                         bool is_open = false) NOT_CDS_JAVA_HEAP_RETURN_(false);\n@@ -576,1 +576,1 @@\n-  void  dealloc_archive_heap_regions(MemRegion* regions, int num) NOT_CDS_JAVA_HEAP_RETURN;\n+  void  dealloc_heap_regions(MemRegion* regions, int num) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -70,3 +70,2 @@\n-bool HeapShared::_closed_archive_heap_region_mapped = false;\n-bool HeapShared::_open_archive_heap_region_mapped = false;\n-bool HeapShared::_archive_heap_region_fixed = false;\n+bool HeapShared::_closed_regions_mapped = false;\n+bool HeapShared::_open_regions_mapped = false;\n@@ -125,1 +124,1 @@\n-void HeapShared::fixup_mapped_heap_regions() {\n+void HeapShared::fixup_mapped_regions() {\n@@ -128,1 +127,0 @@\n-  set_archive_heap_region_fixed();\n@@ -216,1 +214,1 @@\n-  assert(open_archive_heap_region_mapped(), \"must be\");\n+  assert(open_regions_mapped(), \"must be\");\n@@ -241,1 +239,1 @@\n-  if (open_archive_heap_region_mapped()) {\n+  if (open_regions_mapped()) {\n@@ -250,1 +248,1 @@\n-oop HeapShared::archive_heap_object(oop obj) {\n+oop HeapShared::archive_object(oop obj) {\n@@ -336,2 +334,2 @@\n-void HeapShared::archive_java_heap_objects(GrowableArray<MemRegion>* closed,\n-                                           GrowableArray<MemRegion>* open) {\n+void HeapShared::archive_objects(GrowableArray<MemRegion>* closed_regions,\n+                                 GrowableArray<MemRegion>* open_regions) {\n@@ -350,1 +348,1 @@\n-    copy_closed_archive_heap_objects(closed);\n+    copy_closed_objects(closed_regions);\n@@ -353,1 +351,1 @@\n-    copy_open_archive_heap_objects(open);\n+    copy_open_objects(open_regions);\n@@ -361,2 +359,1 @@\n-void HeapShared::copy_closed_archive_heap_objects(\n-                                    GrowableArray<MemRegion> * closed_archive) {\n+void HeapShared::copy_closed_objects(GrowableArray<MemRegion>* closed_regions) {\n@@ -375,1 +372,1 @@\n-  G1CollectedHeap::heap()->end_archive_alloc_range(closed_archive,\n+  G1CollectedHeap::heap()->end_archive_alloc_range(closed_regions,\n@@ -379,2 +376,1 @@\n-void HeapShared::copy_open_archive_heap_objects(\n-                                    GrowableArray<MemRegion> * open_archive) {\n+void HeapShared::copy_open_objects(GrowableArray<MemRegion>* open_regions) {\n@@ -403,1 +399,1 @@\n-  G1CollectedHeap::heap()->end_archive_alloc_range(open_archive,\n+  G1CollectedHeap::heap()->end_archive_alloc_range(open_regions,\n@@ -911,1 +907,1 @@\n-void HeapShared::check_closed_archive_heap_region_object(InstanceKlass* k) {\n+void HeapShared::check_closed_region_object(InstanceKlass* k) {\n@@ -993,1 +989,1 @@\n-    archived_obj = archive_heap_object(orig_obj);\n+    archived_obj = archive_object(orig_obj);\n@@ -1034,1 +1030,1 @@\n-    check_closed_archive_heap_region_object(InstanceKlass::cast(orig_k));\n+    check_closed_region_object(InstanceKlass::cast(orig_k));\n@@ -1436,2 +1432,4 @@\n-void HeapShared::patch_archived_heap_embedded_pointers(MemRegion region, address oopmap,\n-                                                       size_t oopmap_size_in_bits) {\n+\/\/ Patch all the non-null pointers that are embedded in the archived heap objects\n+\/\/ in this region\n+void HeapShared::patch_embedded_pointers(MemRegion region, address oopmap,\n+                                         size_t oopmap_size_in_bits) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -146,3 +146,2 @@\n-  static bool _closed_archive_heap_region_mapped;\n-  static bool _open_archive_heap_region_mapped;\n-  static bool _archive_heap_region_fixed;\n+  static bool _closed_regions_mapped;\n+  static bool _open_regions_mapped;\n@@ -203,1 +202,1 @@\n-  static void check_closed_archive_heap_region_object(InstanceKlass* k);\n+  static void check_closed_region_object(InstanceKlass* k);\n@@ -300,1 +299,1 @@\n-  static oop archive_heap_object(oop obj);\n+  static oop archive_object(oop obj);\n@@ -304,11 +303,4 @@\n-  static void set_archive_heap_region_fixed() {\n-    _archive_heap_region_fixed = true;\n-  }\n-  static bool archive_heap_region_fixed() {\n-    return _archive_heap_region_fixed;\n-  }\n-\n-  static void archive_java_heap_objects(GrowableArray<MemRegion> *closed,\n-                                        GrowableArray<MemRegion> *open);\n-  static void copy_closed_archive_heap_objects(GrowableArray<MemRegion> * closed_archive);\n-  static void copy_open_archive_heap_objects(GrowableArray<MemRegion> * open_archive);\n+  static void archive_objects(GrowableArray<MemRegion>* closed_regions,\n+                              GrowableArray<MemRegion>* open_regions);\n+  static void copy_closed_objects(GrowableArray<MemRegion>* closed_regions);\n+  static void copy_open_objects(GrowableArray<MemRegion>* open_regions);\n@@ -360,2 +352,2 @@\n-    CDS_JAVA_HEAP_ONLY(return (idx >= MetaspaceShared::first_closed_archive_heap_region &&\n-                               idx <= MetaspaceShared::last_open_archive_heap_region);)\n+    CDS_JAVA_HEAP_ONLY(return (idx >= MetaspaceShared::first_closed_heap_region &&\n+                               idx <= MetaspaceShared::last_open_heap_region);)\n@@ -365,2 +357,2 @@\n-  static void set_closed_archive_heap_region_mapped() {\n-    CDS_JAVA_HEAP_ONLY(_closed_archive_heap_region_mapped = true;)\n+  static void set_closed_regions_mapped() {\n+    CDS_JAVA_HEAP_ONLY(_closed_regions_mapped = true;)\n@@ -369,2 +361,2 @@\n-  static bool closed_archive_heap_region_mapped() {\n-    CDS_JAVA_HEAP_ONLY(return _closed_archive_heap_region_mapped;)\n+  static bool closed_regions_mapped() {\n+    CDS_JAVA_HEAP_ONLY(return _closed_regions_mapped;)\n@@ -373,2 +365,2 @@\n-  static void set_open_archive_heap_region_mapped() {\n-    CDS_JAVA_HEAP_ONLY(_open_archive_heap_region_mapped = true;)\n+  static void set_open_regions_mapped() {\n+    CDS_JAVA_HEAP_ONLY(_open_regions_mapped = true;)\n@@ -377,2 +369,2 @@\n-  static bool open_archive_heap_region_mapped() {\n-    CDS_JAVA_HEAP_ONLY(return _open_archive_heap_region_mapped;)\n+  static bool open_regions_mapped() {\n+    CDS_JAVA_HEAP_ONLY(return _open_regions_mapped;)\n@@ -382,1 +374,1 @@\n-    return closed_archive_heap_region_mapped() && open_archive_heap_region_mapped();\n+    return closed_regions_mapped() && open_regions_mapped();\n@@ -385,1 +377,1 @@\n-  static void fixup_mapped_heap_regions() NOT_CDS_JAVA_HEAP_RETURN;\n+  static void fixup_mapped_regions() NOT_CDS_JAVA_HEAP_RETURN;\n@@ -400,2 +392,2 @@\n-  static void patch_archived_heap_embedded_pointers(MemRegion mem, address  oopmap,\n-                                                    size_t oopmap_in_bits) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void patch_embedded_pointers(MemRegion region, address oopmap,\n+                                      size_t oopmap_in_bits) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":22,"deletions":30,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-\/\/ The ca0\/ca1 and oa0\/oa1 regions are populated inside HeapShared::archive_java_heap_objects.\n+\/\/ The ca0\/ca1 and oa0\/oa1 regions are populated inside HeapShared::archive_objects.\n@@ -406,2 +406,2 @@\n-  GrowableArray<MemRegion> *_closed_archive_heap_regions;\n-  GrowableArray<MemRegion> *_open_archive_heap_regions;\n+  GrowableArray<MemRegion> *_closed_heap_regions;\n+  GrowableArray<MemRegion> *_open_heap_regions;\n@@ -409,2 +409,2 @@\n-  GrowableArray<ArchiveHeapOopmapInfo> *_closed_archive_heap_oopmaps;\n-  GrowableArray<ArchiveHeapOopmapInfo> *_open_archive_heap_oopmaps;\n+  GrowableArray<ArchiveHeapOopmapInfo> *_closed_heap_oopmaps;\n+  GrowableArray<ArchiveHeapOopmapInfo> *_open_heap_oopmaps;\n@@ -413,2 +413,2 @@\n-  void dump_archive_heap_oopmaps() NOT_CDS_JAVA_HEAP_RETURN;\n-  void dump_archive_heap_oopmaps(GrowableArray<MemRegion>* regions,\n+  void dump_heap_oopmaps() NOT_CDS_JAVA_HEAP_RETURN;\n+  void dump_heap_oopmaps(GrowableArray<MemRegion>* regions,\n@@ -426,4 +426,4 @@\n-    _closed_archive_heap_regions(NULL),\n-    _open_archive_heap_regions(NULL),\n-    _closed_archive_heap_oopmaps(NULL),\n-    _open_archive_heap_oopmaps(NULL) {}\n+    _closed_heap_regions(NULL),\n+    _open_heap_regions(NULL),\n+    _closed_heap_oopmaps(NULL),\n+    _open_heap_oopmaps(NULL) {}\n@@ -475,1 +475,1 @@\n-  dump_archive_heap_oopmaps();\n+  dump_heap_oopmaps();\n@@ -533,4 +533,4 @@\n-                        _closed_archive_heap_regions,\n-                        _open_archive_heap_regions,\n-                        _closed_archive_heap_oopmaps,\n-                        _open_archive_heap_oopmaps);\n+                        _closed_heap_regions,\n+                        _open_heap_regions,\n+                        _closed_heap_oopmaps,\n+                        _open_heap_oopmaps);\n@@ -828,5 +828,4 @@\n-  \/\/ See FileMapInfo::write_archive_heap_regions() for details.\n-  _closed_archive_heap_regions = new GrowableArray<MemRegion>(2);\n-  _open_archive_heap_regions = new GrowableArray<MemRegion>(2);\n-  HeapShared::archive_java_heap_objects(_closed_archive_heap_regions,\n-                                        _open_archive_heap_regions);\n+  \/\/ See FileMapInfo::write_heap_regions() for details.\n+  _closed_heap_regions = new GrowableArray<MemRegion>(2);\n+  _open_heap_regions = new GrowableArray<MemRegion>(2);\n+  HeapShared::archive_objects(_closed_heap_regions, _open_heap_regions);\n@@ -837,1 +836,1 @@\n-void VM_PopulateDumpSharedSpace::dump_archive_heap_oopmaps() {\n+void VM_PopulateDumpSharedSpace::dump_heap_oopmaps() {\n@@ -839,2 +838,2 @@\n-    _closed_archive_heap_oopmaps = new GrowableArray<ArchiveHeapOopmapInfo>(2);\n-    dump_archive_heap_oopmaps(_closed_archive_heap_regions, _closed_archive_heap_oopmaps);\n+    _closed_heap_oopmaps = new GrowableArray<ArchiveHeapOopmapInfo>(2);\n+    dump_heap_oopmaps(_closed_heap_regions, _closed_heap_oopmaps);\n@@ -842,2 +841,2 @@\n-    _open_archive_heap_oopmaps = new GrowableArray<ArchiveHeapOopmapInfo>(2);\n-    dump_archive_heap_oopmaps(_open_archive_heap_regions, _open_archive_heap_oopmaps);\n+    _open_heap_oopmaps = new GrowableArray<ArchiveHeapOopmapInfo>(2);\n+    dump_heap_oopmaps(_open_heap_regions, _open_heap_oopmaps);\n@@ -847,2 +846,2 @@\n-void VM_PopulateDumpSharedSpace::dump_archive_heap_oopmaps(GrowableArray<MemRegion>* regions,\n-                                                           GrowableArray<ArchiveHeapOopmapInfo>* oopmaps) {\n+void VM_PopulateDumpSharedSpace::dump_heap_oopmaps(GrowableArray<MemRegion>* regions,\n+                                                   GrowableArray<ArchiveHeapOopmapInfo>* oopmaps) {\n@@ -1403,1 +1402,1 @@\n-  static_mapinfo->patch_archived_heap_embedded_pointers();\n+  static_mapinfo->patch_heap_embedded_pointers();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    rw = 0,  \/\/ read-write shared space in the heap\n-    ro = 1,  \/\/ read-only shared space in the heap\n+    rw = 0,  \/\/ read-write shared space\n+    ro = 1,  \/\/ read-only shared space\n@@ -68,8 +68,8 @@\n-    first_closed_archive_heap_region = bm + 1,\n-    max_closed_archive_heap_region = 2,\n-    last_closed_archive_heap_region = first_closed_archive_heap_region + max_closed_archive_heap_region - 1,\n-    first_open_archive_heap_region = last_closed_archive_heap_region + 1,\n-    max_open_archive_heap_region = 2,\n-    last_open_archive_heap_region = first_open_archive_heap_region + max_open_archive_heap_region - 1,\n-\n-    last_valid_region = last_open_archive_heap_region,\n+    first_closed_heap_region = bm + 1,\n+    max_closed_heap_region = 2,\n+    last_closed_heap_region = first_closed_heap_region + max_closed_heap_region - 1,\n+    first_open_heap_region = last_closed_heap_region + 1,\n+    max_open_heap_region = 2,\n+    last_open_heap_region = first_open_heap_region + max_open_heap_region - 1,\n+\n+    last_valid_region = last_open_heap_region,\n@@ -107,1 +107,1 @@\n-  \/\/ mapped shared heap regions.)\n+  \/\/ mapped heap regions.)\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -908,1 +908,1 @@\n-    if (HeapShared::open_archive_heap_region_mapped()) {\n+    if (HeapShared::open_regions_mapped()) {\n@@ -1159,1 +1159,1 @@\n-      oop archived_m = HeapShared::archive_heap_object(m);\n+      oop archived_m = HeapShared::archive_object(m);\n@@ -1218,1 +1218,1 @@\n-  oop archived_mirror = HeapShared::archive_heap_object(mirror);\n+  oop archived_mirror = HeapShared::archive_object(mirror);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_heap_object(v);\n+  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_object(v);\n@@ -731,1 +731,1 @@\n-  new_s = HeapShared::archive_heap_object(s);\n+  new_s = HeapShared::archive_object(s);\n@@ -782,1 +782,1 @@\n-  } else if (!HeapShared::closed_archive_heap_region_mapped()) {\n+  } else if (!HeapShared::closed_regions_mapped()) {\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1657,1 +1657,1 @@\n-  if (!HeapShared::open_archive_heap_region_mapped()) {\n+  if (!HeapShared::open_regions_mapped()) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-    \/\/ HeapShared::fixup_mapped_heap_regions() fills the empty\n+    \/\/ HeapShared::fixup_mapped_regions() fills the empty\n@@ -142,1 +142,1 @@\n-    HeapShared::fixup_mapped_heap_regions();\n+    HeapShared::fixup_mapped_regions();\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-        HeapShared::open_archive_heap_region_mapped() &&\n+        HeapShared::open_regions_mapped() &&\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-    oop archived = HeapShared::archive_heap_object(rr);\n+    oop archived = HeapShared::archive_object(rr);\n@@ -293,1 +293,1 @@\n-    \/\/ the return value of archive_heap_object here. At runtime, the\n+    \/\/ the return value of archive_object() here. At runtime, the\n@@ -350,1 +350,1 @@\n-    if (HeapShared::open_archive_heap_region_mapped() &&\n+    if (HeapShared::open_regions_mapped() &&\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-    if (HeapShared::open_archive_heap_region_mapped()) {\n+    if (HeapShared::open_regions_mapped()) {\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1944,1 +1944,1 @@\n-  return !HeapShared::closed_archive_heap_region_mapped();\n+  return !HeapShared::closed_regions_mapped();\n@@ -1969,1 +1969,1 @@\n-  return HeapShared::open_archive_heap_region_mapped();\n+  return HeapShared::open_regions_mapped();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}