{"files":[{"patch":"@@ -1921,3 +1921,2 @@\n-  \/\/ Map the closed_heap regions, GC does not write into the regions.\n-  if (map_heap_regions(&closed_heap_regions,\n-                       MetaspaceShared::first_closed_heap_region,\n+  \/\/ Map the closed heap regions: GC does not write into these regions.\n+  if (map_heap_regions(MetaspaceShared::first_closed_heap_region,\n@@ -1925,1 +1924,2 @@\n-                       &num_closed_heap_regions)) {\n+                       \/*is_open_archive=*\/ false,\n+                       &closed_heap_regions, &num_closed_heap_regions)) {\n@@ -1928,3 +1928,2 @@\n-    \/\/ Now, map open_archive heap regions, GC can write into the regions.\n-    if (map_heap_regions(&open_heap_regions,\n-                         MetaspaceShared::first_open_heap_region,\n+    \/\/ Now, map the open heap regions: GC can write into these regions.\n+    if (map_heap_regions(MetaspaceShared::first_open_heap_region,\n@@ -1932,2 +1931,2 @@\n-                         &num_open_heap_regions,\n-                         true \/* open *\/)) {\n+                         \/*is_open_archive=*\/ true,\n+                         &open_heap_regions, &num_open_heap_regions)) {\n@@ -1956,2 +1955,2 @@\n-bool FileMapInfo::map_heap_regions(MemRegion** regions_ret, int first,\n-                                   int max, int* num_ret, bool is_open_archive) {\n+bool FileMapInfo::map_heap_regions(int first, int max,  bool is_open_archive,\n+                                   MemRegion** regions_ret, int* num_regions_ret) {\n@@ -1969,1 +1968,1 @@\n-  int region_num = 0;\n+  int num_regions = 0;\n@@ -1977,2 +1976,2 @@\n-      regions[region_num] = MemRegion(start, size \/ HeapWordSize);\n-      region_num ++;\n+      regions[num_regions] = MemRegion(start, size \/ HeapWordSize);\n+      num_regions ++;\n@@ -1984,1 +1983,1 @@\n-  if (region_num == 0) {\n+  if (num_regions == 0) {\n@@ -1989,1 +1988,1 @@\n-  if (!G1CollectedHeap::heap()->check_archive_addresses(regions, region_num)) {\n+  if (!G1CollectedHeap::heap()->check_archive_addresses(regions, num_regions)) {\n@@ -1996,1 +1995,1 @@\n-             regions, region_num, is_open_archive)) {\n+             regions, num_regions, is_open_archive)) {\n@@ -2004,1 +2003,1 @@\n-  for (int i = 0; i < region_num; i++) {\n+  for (int i = 0; i < num_regions; i++) {\n@@ -2012,1 +2011,1 @@\n-      dealloc_heap_regions(regions, region_num);\n+      dealloc_heap_regions(regions, num_regions);\n@@ -2021,1 +2020,1 @@\n-      dealloc_heap_regions(regions, region_num);\n+      dealloc_heap_regions(regions, num_regions);\n@@ -2030,1 +2029,1 @@\n-  *num_ret = region_num;\n+  *num_regions_ret = num_regions;\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -573,2 +573,2 @@\n-  bool  map_heap_regions(MemRegion** heap_regions, int first, int max, int* num,\n-                         bool is_open = false) NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  bool  map_heap_regions(int first, int max, bool is_open_archive,\n+                         MemRegion** regions_ret, int* num_regions_ret) NOT_CDS_JAVA_HEAP_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}