{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,7 +159,0 @@\n-    String getJavaID() {\n-        \/\/ Tweak ISO compatibility for bundle generation\n-        return id.replaceFirst(\"^he\", \"iw\")\n-            .replaceFirst(\"^id\", \"in\")\n-            .replaceFirst(\"^yi\", \"ji\");\n-    }\n-\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/Bundle.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -539,1 +539,0 @@\n-            var javaId = bundle.getJavaID();\n@@ -551,1 +550,1 @@\n-                    bundleGenerator.generateBundle(\"util\", \"LocaleNames\", javaId, true, localeNamesMap, BundleType.OPEN);\n+                    bundleGenerator.generateBundle(\"util\", \"LocaleNames\", id, true, localeNamesMap, BundleType.OPEN);\n@@ -557,1 +556,1 @@\n-                    bundleGenerator.generateBundle(\"util\", \"CurrencyNames\", javaId, true, currencyNamesMap, BundleType.OPEN);\n+                    bundleGenerator.generateBundle(\"util\", \"CurrencyNames\", id, true, currencyNamesMap, BundleType.OPEN);\n@@ -563,1 +562,1 @@\n-                    bundleGenerator.generateBundle(\"util\", \"TimeZoneNames\", javaId, true, zoneNamesMap, BundleType.TIMEZONE);\n+                    bundleGenerator.generateBundle(\"util\", \"TimeZoneNames\", id, true, zoneNamesMap, BundleType.TIMEZONE);\n@@ -569,1 +568,1 @@\n-                    bundleGenerator.generateBundle(\"util\", \"CalendarData\", javaId, true, calendarDataMap, BundleType.PLAIN);\n+                    bundleGenerator.generateBundle(\"util\", \"CalendarData\", id, true, calendarDataMap, BundleType.PLAIN);\n@@ -575,1 +574,1 @@\n-                    bundleGenerator.generateBundle(\"text\", \"FormatData\", javaId, true, formatDataMap, BundleType.PLAIN);\n+                    bundleGenerator.generateBundle(\"text\", \"FormatData\", id, true, formatDataMap, BundleType.PLAIN);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -447,1 +447,1 @@\n- * <h4>Legacy language codes<\/h4>\n+ * <h4><a id=\"legacy_language_codes\">Legacy language codes<\/a><\/h4>\n@@ -452,2 +452,9 @@\n- * {@code in}.  This continues to be the case, in order to not break\n- * backwards compatibility.\n+ * {@code in}. Since Java SE 17, this is no longer the case. Each\n+ * language maps to its new form; {@code iw} maps to {@code he}, {@code ji}\n+ * maps to {@code yi}, and {@code in} maps to {@code id}.\n+ *\n+ * <p>For the backward compatible behavior, the system property\n+ * {@systemProperty java.locale.useOldISOCodes} reverts the behavior\n+ * back to prior to Java SE 17 one. If the system property is set\n+ * to {@code true}, those three current language codes are mapped to their\n+ * backward compatible forms.\n@@ -456,3 +463,4 @@\n- * maintaining the old codes internal to Locale (so that\n- * {@code getLanguage} and {@code toString} reflect the old\n- * code), but using the new codes in the BCP 47 language tag APIs (so\n+ * maintaining the mapped codes internal to Locale (so that\n+ * {@code getLanguage} and {@code toString} reflect the mapped\n+ * code, which depends on the {@code java.locale.useOldISOCodes} system\n+ * property), but using the new codes in the BCP 47 language tag APIs (so\n@@ -723,2 +731,1 @@\n-     * <p>\n-     * <b>Note:<\/b>\n+     * @implNote\n@@ -726,4 +733,3 @@\n-     * <li>ISO 639 is not a stable standard; some of the language codes it defines\n-     * (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n-     * old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n-     * API on Locale will return only the OLD codes.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n@@ -757,2 +763,1 @@\n-     * <p>\n-     * <b>Note:<\/b>\n+     * @implNote\n@@ -760,4 +765,3 @@\n-     * <li>ISO 639 is not a stable standard; some of the language codes it defines\n-     * (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n-     * old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n-     * API on Locale will return only the OLD codes.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n@@ -782,2 +786,1 @@\n-     * <p>\n-     * <b>Note:<\/b>\n+     * @implNote\n@@ -785,4 +788,3 @@\n-     * <li>ISO 639 is not a stable standard; some of the language codes it defines\n-     * (specifically \"iw\", \"ji\", and \"in\") have changed.  This constructor accepts both the\n-     * old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other\n-     * API on Locale will return only the OLD codes.\n+     * <li>Obsolete ISO 639 codes (\"iw\", \"ji\", and \"in\") are mapped to\n+     * their current forms. See <a href=\"#legacy_language_codes\">Legacy language\n+     * codes<\/a> for more information.\n@@ -1211,13 +1213,4 @@\n-     * <p><b>Note:<\/b> ISO 639 is not a stable standard&mdash; some languages' codes have changed.\n-     * Locale's constructor recognizes both the new and the old codes for the languages\n-     * whose codes have changed, but this function always returns the old code.  If you\n-     * want to check for a specific language whose code has changed, don't do\n-     * <pre>\n-     * if (locale.getLanguage().equals(\"he\")) \/\/ BAD!\n-     *    ...\n-     * <\/pre>\n-     * Instead, do\n-     * <pre>\n-     * if (locale.getLanguage().equals(new Locale(\"he\").getLanguage()))\n-     *    ...\n-     * <\/pre>\n+     * @implNote This method returns the new forms for the obsolete ISO 639\n+     * codes (\"iw\", \"ji\", and \"in\"). See <a href=\"#legacy_language_codes\">\n+     * Legacy language codes<\/a> for more information.\n+     *\n@@ -1611,3 +1604,5 @@\n-     * <li>The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\",\n-     * \"ji\", and \"in\" respectively. (This is the same canonicalization\n-     * that's done in Locale's constructors.)\n+     * <li>The language codes \"iw\", \"ji\", and \"in\" are mapped to \"he\",\n+     * \"yi\", and \"id\" respectively. (This is the same canonicalization\n+     * that's done in Locale's constructors.) See\n+     * <a href=\"#legacy_language_codes\">Legacy language codes<\/a>\n+     * for more information.\n@@ -2400,11 +2395,3 @@\n-        \/\/ codes have changed, but we always store the OLD code, for backward compatibility\n-        language = LocaleUtils.toLowerString(language).intern();\n-        if (language == \"he\") {\n-            return \"iw\";\n-        } else if (language == \"yi\") {\n-            return \"ji\";\n-        } else if (language == \"id\") {\n-            return \"in\";\n-        } else {\n-            return language;\n-        }\n+        \/\/ codes have changed, but we always store the NEW code, unless the property\n+        \/\/ java.locale.useOldISOCodes is set to \"true\"\n+        return BaseLocale.convertOldISOCodes(LocaleUtils.toLowerString(language).intern());\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":39,"deletions":52,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+import sun.util.resources.Bundles;\n+\n@@ -3101,0 +3103,6 @@\n+         * <li>If the {@code locale}'s language is one of the\n+         * <a href=\".\/Locale.html#legacy_language_codes\">Legacy language\n+         * codes<\/a>, either old or new, then repeat the loading process\n+         * if needed, with the bundle name with the other language.\n+         * For example, \"iw\" for \"he\" and vice versa.\n+         *\n@@ -3155,0 +3163,15 @@\n+            var bundle = newBundle0(bundleName, format, loader, reload);\n+            if (bundle == null) {\n+                \/\/ Try loading legacy ISO language's other bundles\n+                var otherBundleName = Bundles.toOtherBundleName(baseName, bundleName, locale);\n+                if (!bundleName.equals(otherBundleName)) {\n+                    bundle = newBundle0(otherBundleName, format, loader, reload);\n+                }\n+            }\n+\n+            return bundle;\n+        }\n+\n+        private ResourceBundle newBundle0(String bundleName, String format,\n+                    ClassLoader loader, boolean reload)\n+                    throws IllegalAccessException, InstantiationException, IOException {\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import sun.util.resources.Bundles;\n@@ -190,0 +191,11 @@\n+        var bundle = getBundle0(module, bundleName);\n+        if (bundle == null) {\n+            var otherBundleName = Bundles.toOtherBundleName(baseName, bundleName, locale);\n+            if (!bundleName.equals(otherBundleName)) {\n+                bundle = getBundle0(module, Bundles.toOtherBundleName(baseName, bundleName, locale));\n+            }\n+        }\n+        return bundle;\n+    }\n+\n+    private ResourceBundle getBundle0(Module module, String bundleName) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/spi\/AbstractResourceBundleProvider.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import sun.security.action.GetPropertyAction;\n@@ -101,0 +102,7 @@\n+    \/**\n+     * Boolean for the old ISO language code compatibility.\n+     *\/\n+    private static final boolean OLD_ISO_CODES = GetPropertyAction.privilegedGetProperties()\n+            .getProperty(\"java.locale.useOldISOCodes\", \"false\")\n+            .equalsIgnoreCase(\"true\");\n+\n@@ -156,7 +164,1 @@\n-            if (language.equals(\"he\")) {\n-                language = \"iw\";\n-            } else if (language.equals(\"yi\")) {\n-                language = \"ji\";\n-            } else if (language.equals(\"id\")) {\n-                language = \"in\";\n-            }\n+            language = convertOldISOCodes(language);\n@@ -169,0 +171,9 @@\n+    public static String convertOldISOCodes(String language) {\n+        return switch (language) {\n+            case \"he\", \"iw\" -> OLD_ISO_CODES ? \"iw\" : \"he\";\n+            case \"id\", \"in\" -> OLD_ISO_CODES ? \"in\" : \"id\";\n+            case \"yi\", \"ji\" -> OLD_ISO_CODES ? \"ji\" : \"yi\";\n+            default -> language;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,0 +211,11 @@\n+                    if (bundle == null) {\n+                        var otherBundleName = toOtherBundleName(baseName, bundleName, targetLocale);\n+                        if (!bundleName.equals(otherBundleName)) {\n+                            c = Class.forName(Bundles.class.getModule(), otherBundleName);\n+                            if (c != null && ResourceBundle.class.isAssignableFrom(c)) {\n+                                @SuppressWarnings(\"unchecked\")\n+                                Class<ResourceBundle> bundleClass = (Class<ResourceBundle>) c;\n+                                bundle = bundleAccess.newResourceBundle(bundleClass);\n+                            }\n+                        }\n+                    }\n@@ -348,0 +359,28 @@\n+    \/**\n+     * Generates the other bundle name for languages that have changed,\n+     * i.e. \"he\", \"id\", and \"yi\"\n+     *\n+     * @param baseName ResourceBundle base name\n+     * @param bundleName ResourceBundle bundle name\n+     * @param locale locale\n+     * @return the other bundle name, or the same name for non-legacy ISO languages\n+     *\/\n+    public static String toOtherBundleName(String baseName, String bundleName, Locale locale) {\n+        var simpleName= baseName.substring(baseName.lastIndexOf('.') + 1);\n+        var suffix = bundleName.substring(bundleName.lastIndexOf(simpleName) + simpleName.length());\n+        var otherSuffix = switch(locale.getLanguage()) {\n+            case \"he\" -> suffix.replaceFirst(\"^_he(_.*)?$\", \"_iw$1\");\n+            case \"id\" -> suffix.replaceFirst(\"^_id(_.*)?$\", \"_in$1\");\n+            case \"yi\" -> suffix.replaceFirst(\"^_yi(_.*)?$\", \"_ji$1\");\n+            case \"iw\" -> suffix.replaceFirst(\"^_iw(_.*)?$\", \"_he$1\");\n+            case \"in\" -> suffix.replaceFirst(\"^_in(_.*)?$\", \"_id$1\");\n+            case \"ji\" -> suffix.replaceFirst(\"^_ji(_.*)?$\", \"_yi$1\");\n+            default -> suffix;\n+        };\n+\n+        if (suffix.equals(otherSuffix)) {\n+            return bundleName;\n+        } else {\n+            return bundleName.substring(0, bundleName.lastIndexOf(suffix)) + otherSuffix;\n+        }\n+    }\n@@ -353,1 +392,1 @@\n-    public static interface Strategy {\n+    public interface Strategy {\n@@ -357,1 +396,1 @@\n-        public List<Locale> getCandidateLocales(String baseName, Locale locale);\n+        List<Locale> getCandidateLocales(String baseName, Locale locale);\n@@ -362,1 +401,1 @@\n-        public String toBundleName(String baseName, Locale locale);\n+        String toBundleName(String baseName, Locale locale);\n@@ -368,1 +407,1 @@\n-        public Class<? extends ResourceBundleProvider> getResourceBundleProviderType(String baseName,\n+        Class<? extends ResourceBundleProvider> getResourceBundleProviderType(String baseName,\n@@ -377,1 +416,1 @@\n-        public CacheKey getCacheKey();\n+        CacheKey getCacheKey();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/Bundles.java","additions":45,"deletions":6,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -219,0 +219,7 @@\n+\n+        \/**\n+         * Retrieves the other bundle name for legacy ISO 639 languages.\n+         *\/\n+        protected String toOtherBundleName(String baseName, String bundleName, Locale locale) {\n+            return Bundles.toOtherBundleName(baseName, bundleName, locale);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/LocaleData.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -161,8 +161,4 @@\n-        String lang = locale.getLanguage();\n-        if( \"iw\".equals(lang) || \"ar\".equals(lang)\n-            || \"fa\".equals(lang) || \"ur\".equals(lang) )\n-        {\n-            return RIGHT_TO_LEFT;\n-        } else {\n-            return LEFT_TO_RIGHT;\n-        }\n+        return switch (locale.getLanguage()) {\n+            case \"ar\", \"fa\", \"he\", \"iw\", \"ji\", \"ur\", \"yi\" -> RIGHT_TO_LEFT;\n+            default -> LEFT_TO_RIGHT;\n+        };\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/ComponentOrientation.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-public class CollationData_iw extends ListResourceBundle {\n+public class CollationData_he extends ListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/CollationData_he.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/CollationData_iw.java","status":"renamed"},{"patch":"@@ -81,1 +81,1 @@\n-public class FormatData_iw extends ParallelListResourceBundle {\n+public class FormatData_he extends ParallelListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_he.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_iw.java","status":"renamed"},{"patch":"@@ -45,1 +45,1 @@\n-public class FormatData_iw_IL extends ParallelListResourceBundle {\n+public class FormatData_he_IL extends ParallelListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_he_IL.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_iw_IL.java","status":"renamed"},{"patch":"@@ -66,1 +66,1 @@\n-public class FormatData_in extends ParallelListResourceBundle {\n+public class FormatData_id extends ParallelListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_id.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_in.java","status":"renamed"},{"patch":"@@ -66,1 +66,1 @@\n-public class FormatData_in_ID extends ParallelListResourceBundle {\n+public class FormatData_id_ID extends ParallelListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_id_ID.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/FormatData_in_ID.java","status":"renamed"},{"patch":"@@ -72,1 +72,1 @@\n-public class JavaTimeSupplementary_iw extends OpenListResourceBundle {\n+public class JavaTimeSupplementary_he extends OpenListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/JavaTimeSupplementary_he.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/JavaTimeSupplementary_iw.java","status":"renamed"},{"patch":"@@ -72,1 +72,1 @@\n-public class JavaTimeSupplementary_in extends OpenListResourceBundle {\n+public class JavaTimeSupplementary_id extends OpenListResourceBundle {\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/JavaTimeSupplementary_id.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/text\/resources\/ext\/JavaTimeSupplementary_in.java","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CalendarData_he.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CalendarData_iw.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CalendarData_id_ID.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CalendarData_in_ID.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CurrencyNames_he_IL.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CurrencyNames_iw_IL.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CurrencyNames_id_ID.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/CurrencyNames_in_ID.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/LocaleNames_he.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/LocaleNames_iw.properties","status":"renamed"},{"patch":"","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/LocaleNames_id.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/ext\/LocaleNames_in.properties","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,9 @@\n-        return loadResourceBundle(toBundleName(baseName, locale));\n+        var bundleName = toBundleName(baseName, locale);\n+        var rb = loadResourceBundle(bundleName);\n+        if (rb == null) {\n+            var otherBundleName = toOtherBundleName(baseName, bundleName, locale);\n+            if (!bundleName.equals(otherBundleName)) {\n+                rb = loadResourceBundle(otherBundleName);\n+            }\n+        }\n+        return rb;\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/provider\/LocaleDataProvider.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,9 @@\n-        return LocaleDataProvider.loadResourceBundle(toBundleName(baseName, locale));\n+        var bundleName = toBundleName(baseName, locale);\n+        var rb = LocaleDataProvider.loadResourceBundle(bundleName);\n+        if (rb == null) {\n+            var otherBundleName = toOtherBundleName(baseName, bundleName, locale);\n+            if (!bundleName.equals(otherBundleName)) {\n+                rb = LocaleDataProvider.loadResourceBundle(otherBundleName);\n+            }\n+        }\n+        return rb;\n","filename":"src\/jdk.localedata\/share\/classes\/sun\/util\/resources\/provider\/SupplementaryLocaleDataProvider.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug     4108453 4778440 6304780 6396378\n+ * @bug     4108453 4778440 6304780 6396378 8263202\n@@ -103,0 +103,6 @@\n+        orient = ComponentOrientation.getOrientation(new Locale(\"he\", \"\"));\n+        Assert(orient == ComponentOrientation.RIGHT_TO_LEFT, \"he == RIGHT_TO_LEFT\");\n+\n+        orient = ComponentOrientation.getOrientation(new Locale(\"yi\", \"\"));\n+        Assert(orient == ComponentOrientation.RIGHT_TO_LEFT, \"yi == RIGHT_TO_LEFT\");\n+\n@@ -133,0 +139,4 @@\n+        \/\/ Test with \"he\" locale. This should load TestBundle_iw and fetch the orientation from there\n+        rb = ResourceBundle.getBundle(\"TestBundle\", new Locale(\"he\", \"IL\"));\n+        assertEquals(rb, ComponentOrientation.RIGHT_TO_LEFT, \"he == RIGHT_TO_LEFT\" );\n+\n","filename":"test\/jdk\/java\/awt\/ComponentOrientation\/BasicTest.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n- *    7044019 8008577 8176853 8255086\n+ *    7044019 8008577 8176853 8255086 8263202\n@@ -295,6 +295,6 @@\n-            { \"he\", \"IW\", \"\", \"iw\" },\n-            { \"iw\", \"IW\", \"\", \"iw\" },\n-            { \"yi\", \"DE\", \"\", \"ji\" },\n-            { \"ji\", \"DE\", \"\", \"ji\" },\n-            { \"id\", \"ID\", \"\", \"in\" },\n-            { \"in\", \"ID\", \"\", \"in\" },\n+            { \"he\", \"IL\", \"\", \"he\" },\n+            { \"iw\", \"IL\", \"\", \"he\" },\n+            { \"yi\", \"DE\", \"\", \"yi\" },\n+            { \"ji\", \"DE\", \"\", \"yi\" },\n+            { \"id\", \"ID\", \"\", \"id\" },\n+            { \"in\", \"ID\", \"\", \"id\" },\n@@ -470,2 +470,2 @@\n-            { \"he\", \"IW\", \"\", \"he-IW\" },\n-            { \"iw\", \"IW\", \"\", \"he-IW\" },\n+            { \"he\", \"IL\", \"\", \"he-IL\" },\n+            { \"iw\", \"IL\", \"\", \"he-IL\" },\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleEnhanceTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * 6786276 7066203 7085757 8008577 8030696 8170840 8255086\n+ * 6786276 7066203 7085757 8008577 8030696 8170840 8255086 8263202\n@@ -32,1 +32,2 @@\n- * @run main\/othervm -Djava.locale.providers=JRE,SPI LocaleTest\n+ * @run main\/othervm -Djava.locale.providers=COMPAT,SPI LocaleTest\n+ * @run main\/othervm -Djava.locale.providers=COMPAT,SPI -Djava.locale.useOldISOCodes=true LocaleTest\n@@ -680,1 +681,1 @@\n-     * @bug 4052404 4778440\n+     * @bug 4052404 4778440 8263202\n@@ -690,11 +691,26 @@\n-        if (!hebrewNew.getLanguage().equals(\"iw\")) {\n-            errln(\"Got back wrong language code for Hebrew: expected \\\"iw\\\", got \\\"\"\n-                    + hebrewNew.getLanguage() + \"\\\"\");\n-        }\n-        if (!yiddishNew.getLanguage().equals(\"ji\")) {\n-            errln(\"Got back wrong language code for Yiddish: expected \\\"ji\\\", got \\\"\"\n-                    + yiddishNew.getLanguage() + \"\\\"\");\n-        }\n-        if (!indonesianNew.getLanguage().equals(\"in\")) {\n-            errln(\"Got back wrong language code for Indonesian: expected \\\"in\\\", got \\\"\"\n-                    + indonesianNew.getLanguage() + \"\\\"\");\n+        if (\"true\".equalsIgnoreCase(System.getProperty(\"java.locale.useOldISOCodes\"))) {\n+            if (!hebrewNew.getLanguage().equals(\"iw\")) {\n+                errln(\"Got back wrong language code for new Hebrew: expected \\\"iw\\\", got \\\"\"\n+                        + hebrewNew.getLanguage() + \"\\\"\");\n+            }\n+            if (!yiddishNew.getLanguage().equals(\"ji\")) {\n+                errln(\"Got back wrong language code for new Yiddish: expected \\\"ji\\\", got \\\"\"\n+                        + yiddishNew.getLanguage() + \"\\\"\");\n+            }\n+            if (!indonesianNew.getLanguage().equals(\"in\")) {\n+                errln(\"Got back wrong language code for new Indonesian: expected \\\"in\\\", got \\\"\"\n+                        + indonesianNew.getLanguage() + \"\\\"\");\n+            }\n+        } else {\n+            if (!hebrewOld.getLanguage().equals(\"he\")) {\n+                errln(\"Got back wrong language code for old Hebrew: expected \\\"he\\\", got \\\"\"\n+                        + hebrewNew.getLanguage() + \"\\\"\");\n+            }\n+            if (!yiddishOld.getLanguage().equals(\"yi\")) {\n+                errln(\"Got back wrong language code for old Yiddish: expected \\\"yi\\\", got \\\"\"\n+                        + yiddishNew.getLanguage() + \"\\\"\");\n+            }\n+            if (!indonesianOld.getLanguage().equals(\"id\")) {\n+                errln(\"Got back wrong language code for old Indonesian: expected \\\"id\\\", got \\\"\"\n+                        + indonesianNew.getLanguage() + \"\\\"\");\n+            }\n@@ -702,0 +718,1 @@\n+\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleTest.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,0 +191,27 @@\n+\n+    \/**\n+     * Run the module test with \"useOldISOCodes=true\".\n+     *\n+     * @param mp module path\n+     * @param mn module name\n+     * @param localeList locale list\n+     *\/\n+    public static void runModuleWithLegacyCode(String mp, String mn, List<String> localeList)\n+            throws Throwable {\n+        JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK(\"java\");\n+        launcher.addToolArg(\"-ea\")\n+                .addToolArg(\"-esa\")\n+                .addToolArg(\"-Djava.locale.useOldISOCodes=true\")\n+                .addToolArg(\"-p\")\n+                .addToolArg(mp)\n+                .addToolArg(\"-m\")\n+                .addToolArg(mn);\n+        localeList.forEach(launcher::addToolArg);\n+\n+        int exitCode = ProcessTools.executeCommand(launcher.getCommand())\n+                .getExitValue();\n+        if (exitCode != 0) {\n+            throw new RuntimeException(\"Execution of the test failed. \"\n+                    + \"Unexpected exit code: \" + exitCode);\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/ModuleTestUtil.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8044767 8139067 8210408\n+ * @bug 8044767 8139067 8210408 8263202\n@@ -85,1 +85,1 @@\n-            \"ja\", \"ja-jp\", \"zh-tw\", \"en\", \"de\", \"ja-jp\");\n+            \"ja\", \"ja-jp\", \"zh-tw\", \"en\", \"de\", \"ja-jp\", \"in\", \"yi\");\n@@ -133,0 +133,1 @@\n+        ModuleTestUtil.runModuleWithLegacyCode(modPath.toString(), MAIN, localeList);\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/BasicTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-              new Locale(\"vi\"));\n+              new Locale(\"vi\"), new Locale(\"in\"));\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/srcBasic\/asiabundles\/jdk\/test\/resources\/asia\/MyResourcesAsia.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+key=id: message\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/srcBasic\/asiabundles\/jdk\/test\/resources\/asia\/MyResources_id.properties","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-              Locale.GERMAN, Locale.FRENCH, new Locale(\"es\"));\n+              Locale.GERMAN, Locale.FRENCH, new Locale(\"es\"), new Locale(\"yi\"));\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/srcBasic\/eubundles\/jdk\/test\/resources\/eu\/MyResourcesEU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.resources.eu;\n+\n+import java.util.ListResourceBundle;\n+\n+public class MyResources_ji extends ListResourceBundle {\n+    @Override\n+    public Object[][] getContents() {\n+        return new Object[][] {\n+            \/\/ returned value is compared with Locale.toLanguageTag()\n+            \/\/ which always returns NEW code\n+            { \"key\", \"yi: message\" }\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/srcBasic\/eubundles\/jdk\/test\/resources\/eu\/MyResources_ji.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-            System.out.println(\"locale = \" + tag + \", value = \" + value);\n+            System.out.println(\"locale = \" + locale + \", value = \" + value);\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/basic\/srcBasic\/test\/jdk\/test\/Main.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -380,7 +380,7 @@\n-                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_in.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_in_ID.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_iw.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_iw_IL.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_in.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_iw.class\",\n-                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_ji.class\"),\n+                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_he.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_he_IL.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_id.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/ext\/FormatData_id_ID.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_he.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_id.class\",\n+                \"\/jdk.localedata\/sun\/text\/resources\/cldr\/ext\/FormatData_yi.class\"),\n@@ -399,2 +399,2 @@\n-                \"(root)\", \"en\", \"en_US\", \"en_US_#Latn\", \"en_US_POSIX\", \"in\", \"in_ID\",\n-                \"in_ID_#Latn\", \"iw\", \"iw_IL\", \"iw_IL_#Hebr\", \"ji\", \"ji_001\", \"ji_001_#Hebr\"),\n+                \"(root)\", \"en\", \"en_US\", \"en_US_#Latn\", \"en_US_POSIX\", \"id\", \"id_ID\",\n+                \"id_ID_#Latn\", \"he\", \"he_IL\", \"he_IL_#Hebr\", \"yi\", \"yi_001\", \"yi_001_#Hebr\"),\n","filename":"test\/jdk\/tools\/jlink\/plugins\/IncludeLocalesPluginTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}