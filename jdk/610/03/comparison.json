{"files":[{"patch":"@@ -28,6 +28,1 @@\n-import java.io.*;\n-import java.nio.*;\n-import java.nio.channels.*;\n-import java.net.*;\n-import javax.net.ssl.*;\n-import java.util.*;\n+import javax.net.ssl.SSLSession;\n@@ -36,3 +31,4 @@\n- * This class encapsulates a HTTPS request received and a\n- * response to be generated in one exchange and defines\n- * the extensions to HttpExchange that are specific to the HTTPS protocol.\n+ * This class encapsulates a HTTPS request received and a response to be\n+ * generated in one exchange and defines the extensions to {@link HttpExchange}\n+ * that are specific to the HTTPS protocol.\n+ *\n@@ -44,2 +40,4 @@\n-    protected HttpsExchange () {\n-    }\n+    \/**\n+     * Constructor for subclasses to call.\n+     *\/\n+    protected HttpsExchange() {}\n@@ -48,2 +46,3 @@\n-     * Get the SSLSession for this exchange.\n-     * @return the SSLSession\n+     * Get the {@link SSLSession} for this exchange.\n+     *\n+     * @return the {@code SSLSession}\n@@ -51,1 +50,1 @@\n-    public abstract SSLSession getSSLSession ();\n+    public abstract SSLSession getSSLSession();\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpsExchange.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -35,17 +35,14 @@\n- * Represents the set of parameters for each https\n- * connection negotiated with clients. One of these\n- * is created and passed to\n- * {@link HttpsConfigurator#configure(HttpsParameters)}\n- * for every incoming https connection,\n- * in order to determine the parameters to use.\n- * <p>\n- * The underlying SSL parameters may be established either\n- * via the set\/get methods of this class, or else via\n- * a {@link javax.net.ssl.SSLParameters} object. SSLParameters\n- * is the preferred method, because in the future,\n- * additional configuration capabilities may be added to that class, and\n- * it is easier to determine the set of supported parameters and their\n- * default values with SSLParameters. Also, if an SSLParameters object is\n- * provided via\n- * {@link #setSSLParameters(SSLParameters)} then those parameter settings\n- * are used, and any settings made in this object are ignored.\n+ * Represents the set of parameters for each https connection negotiated with\n+ * clients. One of these is created and passed to\n+ * {@link HttpsConfigurator#configure(HttpsParameters)} for every incoming https\n+ * connection,in order to determine the parameters to use.\n+ *\n+ * <p> The underlying SSL parameters may be established either via the set\/get\n+ * methods of this class, or else via a {@link javax.net.ssl.SSLParameters}\n+ * object. {@code SSLParameters} is the preferred method, because in the future,\n+ * additional configuration capabilities may be added to that class, and it is\n+ * easier to determine the set of supported parameters and their default values\n+ * with SSLParameters. Also, if an {@code SSLParameters} object is provided via\n+ * {@link #setSSLParameters(SSLParameters)} then those parameter settings are\n+ * used, and any settings made in this object are ignored.\n+ *\n@@ -67,1 +64,1 @@\n-     * Returns the HttpsConfigurator for this HttpsParameters.\n+     * Returns the {@link HttpsConfigurator} for this {@code HttpsParameters}.\n@@ -69,1 +66,1 @@\n-     * @return HttpsConfigurator for this instance of HttpsParameters\n+     * @return {@code HttpsConfigurator} for this instance of {@code HttpsParameters}\n@@ -74,2 +71,1 @@\n-     * Returns the address of the remote client initiating the\n-     * connection.\n+     * Returns the address of the remote client initiating the connection.\n@@ -77,1 +73,1 @@\n-     * @return Address of the remote client initiating the connection\n+     * @return address of the remote client initiating the connection\n@@ -83,3 +79,3 @@\n-     * Sets the SSLParameters to use for this HttpsParameters.\n-     * The parameters must be supported by the SSLContext contained\n-     * by the HttpsConfigurator associated with this HttpsParameters.\n+     * Sets the {@link SSLParameters} to use for this {@code HttpsParameters}.\n+     * The parameters must be supported by the {@link SSLContext} contained\n+     * by the {@link HttpsConfigurator} associated with this {@code HttpsParameters}.\n@@ -87,5 +83,6 @@\n-     * the default parameters from the associated SSLContext.\n-     * @param params the SSLParameters to set. If <code>null<\/code>\n-     * then the existing parameters (if any) remain unchanged.\n-     * @throws IllegalArgumentException if any of the parameters are\n-     *   invalid or unsupported.\n+     * the default parameters from the associated {@link SSLContext}.\n+     *\n+     * @param params the {@code SSLParameters} to set. If {@code null} then the\n+     *               existing parameters (if any) remain unchanged\n+     * @throws IllegalArgumentException if any of the parameters are invalid or\n+     * unsupported\n@@ -93,1 +90,1 @@\n-    public abstract void setSSLParameters (SSLParameters params);\n+    public abstract void setSSLParameters(SSLParameters params);\n@@ -97,1 +94,1 @@\n-     * Returns a copy of the array of ciphersuites or null if none\n+     * Returns a copy of the array of ciphersuites or {@code null} if none\n@@ -100,2 +97,2 @@\n-     * @return a copy of the array of ciphersuites or null if none\n-     * have been set.\n+     * @return a copy of the array of ciphersuites or {@code null} if none have\n+     * been set\n@@ -110,1 +107,1 @@\n-     * @param cipherSuites the array of ciphersuites (or null)\n+     * @param cipherSuites the array of ciphersuites (or {@code null})\n@@ -117,2 +114,2 @@\n-     * Returns a copy of the array of protocols or null if none\n-     * have been set.\n+     * Returns a copy of the array of protocols or {@code null} if none have been\n+     * set.\n@@ -120,2 +117,2 @@\n-     * @return a copy of the array of protocols or null if none\n-     * have been set.\n+     * @return a copy of the array of protocols or {@code null} if none have been\n+     * set\n@@ -130,1 +127,1 @@\n-     * @param protocols the array of protocols (or null)\n+     * @param protocols the array of protocols (or {@code null})\n@@ -139,1 +136,1 @@\n-     * @return whether client authentication should be requested.\n+     * @return whether client authentication should be requested\n@@ -146,2 +143,2 @@\n-     * Sets whether client authentication should be requested. Calling\n-     * this method clears the <code>needClientAuth<\/code> flag.\n+     * Sets whether client authentication should be requested. Calling this\n+     * method clears the {@code needClientAuth} flag.\n@@ -158,1 +155,1 @@\n-     * @return whether client authentication should be required.\n+     * @return whether client authentication should be required\n@@ -165,2 +162,2 @@\n-     * Sets whether client authentication should be required. Calling\n-     * this method clears the <code>wantClientAuth<\/code> flag.\n+     * Sets whether client authentication should be required. Calling this method\n+     * clears the {@code wantClientAuth} flag.\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpsParameters.java","additions":43,"deletions":46,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -28,9 +28,4 @@\n-import java.net.*;\n-import java.io.*;\n-import java.nio.*;\n-import java.security.*;\n-import java.nio.channels.*;\n-import java.util.*;\n-import java.util.concurrent.*;\n-import javax.net.ssl.*;\n-import com.sun.net.httpserver.spi.*;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.net.InetSocketAddress;\n+import com.sun.net.httpserver.spi.HttpServerProvider;\n@@ -39,3 +34,4 @@\n- * This class is an extension of {@link HttpServer} which provides\n- * support for HTTPS. <p>\n- * A HttpsServer must have an associated {@link HttpsConfigurator} object\n+ * This class is an extension of {@link HttpServer} which provides support for\n+ * HTTPS.\n+ *\n+ * <p>A {@code HttpsServer} must have an associated {@link HttpsConfigurator} object\n@@ -43,2 +39,3 @@\n- * <p>\n- * All other configuration is the same as for HttpServer.\n+ *\n+ * <p>All other configuration is the same as for {@code HttpServer}.\n+ *\n@@ -51,0 +48,1 @@\n+     * Constructor for subclasses to call.\n@@ -52,1 +50,1 @@\n-    protected HttpsServer () {\n+    protected HttpsServer() {\n@@ -56,5 +54,8 @@\n-     * creates a HttpsServer instance which is initially not bound to any local address\/port.\n-     * The HttpsServer is acquired from the currently installed {@link HttpServerProvider}\n-     * The server must be bound using {@link #bind(InetSocketAddress,int)} before it can be used.\n-     * The server must also have a HttpsConfigurator established with {@link #setHttpsConfigurator(HttpsConfigurator)}\n-     * @throws IOException\n+     * Creates a {@code HttpsServer} instance which is initially not bound to any\n+     * local address\/port. The {@code HttpsServer} is acquired from the currently\n+     * installed {@link HttpServerProvider}. The server must be bound using\n+     * {@link #bind(InetSocketAddress,int)} before it can be used. The server\n+     * must also have a {@code HttpsConfigurator} established with\n+     * {@link #setHttpsConfigurator(HttpsConfigurator)}.\n+     *\n+     * @throws IOException if an I\/O error occurs\n@@ -62,2 +63,2 @@\n-    public static HttpsServer create () throws IOException {\n-        return create (null, 0);\n+    public static HttpsServer create() throws IOException {\n+        return create(null, 0);\n@@ -67,2 +68,2 @@\n-     * Create a <code>HttpsServer<\/code> instance which will bind to the\n-     * specified {@link java.net.InetSocketAddress} (IP address and port number)\n+     * Create a {@code HttpsServer} instance which will bind to the specified\n+     * {@link java.net.InetSocketAddress} (IP address and port number).\n@@ -71,4 +72,5 @@\n-     * queued incoming connections to allow on the listening socket.\n-     * Queued TCP connections exceeding this limit may be rejected by the TCP implementation.\n-     * The HttpsServer is acquired from the currently installed {@link HttpServerProvider}\n-     * The server must have a HttpsConfigurator established with {@link #setHttpsConfigurator(HttpsConfigurator)}\n+     * queued incoming connections to allow on the listening socket. Queued TCP\n+     * connections exceeding this limit may be rejected by the TCP implementation.\n+     * The {@code HttpsServer} is acquired from the currently installed\n+     * {@link HttpServerProvider}. The server must have a {@code HttpsConfigurator}\n+     * established with {@link #setHttpsConfigurator(HttpsConfigurator)}.\n@@ -76,4 +78,5 @@\n-     * @param addr the address to listen on, if <code>null<\/code> then bind() must be called\n-     *  to set the address\n-     * @param backlog the socket backlog. If this value is less than or equal to zero,\n-     *          then a system default value is used.\n+     * @param addr the address to listen on, if {@code null} then\n+     *             {@link #bind(InetSocketAddress,int)} must be called to set\n+     *             the address\n+     * @param backlog the socket backlog. If this value is less than or equal to\n+     *               zero, then a system default value is used.\n@@ -81,2 +84,2 @@\n-     *          or if the server is already bound.\n-     * @throws IOException\n+     *          or if the server is already bound\n+     * @throws IOException if an I\/O error occurs\n@@ -85,3 +88,1 @@\n-    public static HttpsServer create (\n-        InetSocketAddress addr, int backlog\n-    ) throws IOException {\n+    public static HttpsServer create(InetSocketAddress addr, int backlog) throws IOException {\n@@ -89,1 +90,1 @@\n-        return provider.createHttpsServer (addr, backlog);\n+        return provider.createHttpsServer(addr, backlog);\n@@ -94,2 +95,3 @@\n-     * @param config the HttpsConfigurator to set\n-     * @throws NullPointerException if config is null.\n+     *\n+     * @param config the {@code HttpsConfigurator} to set\n+     * @throws NullPointerException if config is {@code null}\n@@ -97,1 +99,1 @@\n-    public abstract void setHttpsConfigurator (HttpsConfigurator config) ;\n+    public abstract void setHttpsConfigurator(HttpsConfigurator config);\n@@ -101,1 +103,3 @@\n-     * @return the HttpsConfigurator for this server, or <code>null<\/code> if not set.\n+     *\n+     * @return the {@code HttpsConfigurator} for this server, or {@code null} if\n+     * not set\n@@ -103,1 +107,1 @@\n-    public abstract HttpsConfigurator getHttpsConfigurator ();\n+    public abstract HttpsConfigurator getHttpsConfigurator();\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpsServer.java","additions":47,"deletions":43,"binary":false,"changes":90,"status":"modified"}]}