{"files":[{"patch":"@@ -1951,30 +1951,0 @@\n-static void mark_from_roots_work(ParallelRootType::Value root_type, uint worker_id) {\n-  assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n-\n-  ParCompactionManager* cm =\n-    ParCompactionManager::gc_thread_compaction_manager(worker_id);\n-  PCMarkAndPushClosure mark_and_push_closure(cm);\n-\n-  switch (root_type) {\n-    case ParallelRootType::class_loader_data:\n-      {\n-        CLDToOopClosure cld_closure(&mark_and_push_closure, ClassLoaderData::_claim_strong);\n-        ClassLoaderDataGraph::always_strong_cld_do(&cld_closure);\n-      }\n-      break;\n-\n-    case ParallelRootType::code_cache:\n-      \/\/ Do not treat nmethods as strong roots for mark\/sweep, since we can unload them.\n-      \/\/ScavengableNMethods::scavengable_nmethods_do(CodeBlobToOopClosure(&mark_and_push_closure));\n-      break;\n-\n-    case ParallelRootType::sentinel:\n-    DEBUG_ONLY(default:) \/\/ DEBUG_ONLY hack will create compile error on release builds (-Wswitch) and runtime check on debug builds\n-      fatal(\"Bad enumeration value: %u\", root_type);\n-      break;\n-  }\n-\n-  \/\/ Do the real work\n-  cm->follow_marking_stacks();\n-}\n-\n@@ -2004,1 +1974,0 @@\n-  SequentialSubTasksDone _subtasks;\n@@ -2012,1 +1981,0 @@\n-      _subtasks(ParallelRootType::sentinel),\n@@ -2014,2 +1982,1 @@\n-      _active_workers(active_workers) {\n-  }\n+      _active_workers(active_workers) {}\n@@ -2018,2 +1985,9 @@\n-    for (uint task = 0; _subtasks.try_claim_task(task); \/*empty*\/ ) {\n-      mark_from_roots_work(static_cast<ParallelRootType::Value>(task), worker_id);\n+    ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(worker_id);\n+    PCMarkAndPushClosure mark_and_push_closure(cm);\n+\n+    {\n+      CLDToOopClosure cld_closure(&mark_and_push_closure, ClassLoaderData::_claim_strong);\n+      ClassLoaderDataGraph::always_strong_cld_do(&cld_closure);\n+\n+      \/\/ Do the real work\n+      cm->follow_marking_stacks();\n@@ -2027,3 +2001,1 @@\n-      ParCompactionManager* cm = ParCompactionManager::gc_thread_compaction_manager(worker_id);\n-      PCMarkAndPushClosure closure(cm);\n-      _oop_storage_set_par_state.oops_do(&closure);\n+      _oop_storage_set_par_state.oops_do(&mark_and_push_closure);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":11,"deletions":39,"binary":false,"changes":50,"status":"modified"}]}