{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/init.hpp\"\n@@ -76,2 +77,1 @@\n-  _covered(MemRegion::create_array(_max_covered_regions, mtGC)),\n-  _committed(MemRegion::create_array(_max_covered_regions, mtGC)),\n+  _covered(MemRegion::create_array(max_covered_regions, mtGC)),\n@@ -85,2 +85,1 @@\n-  MemRegion::destroy_array(_covered, _max_covered_regions);\n-  MemRegion::destroy_array(_committed, _max_covered_regions);\n+  MemRegion::destroy_array(_covered, max_covered_regions);\n@@ -129,1 +128,1 @@\n-                  p2i(&_byte_map[0]), p2i(&_byte_map[last_valid_index()]));\n+                         p2i(&_byte_map[0]), p2i(&_byte_map[last_valid_index()]));\n@@ -133,0 +132,14 @@\n+MemRegion CardTable::committed_for(const MemRegion mr) const {\n+  HeapWord* addr_l = (HeapWord*)align_down(byte_for(mr.start()), _page_size);\n+  HeapWord* addr_r = mr.is_empty()\n+                       ? addr_l\n+                       : (HeapWord*)align_up(byte_after(mr.last()), _page_size);\n+\n+  if (mr.start() == _covered[0].start()) {\n+    \/\/ In case the card for gen-boundary is not page-size aligned, the crossing page belongs to _covered[1]\n+    addr_r = MIN2(addr_r, (HeapWord*)align_down(byte_for(_covered[1].start()), _page_size));\n+  }\n+\n+  return MemRegion(addr_l, addr_r);\n+}\n+\n@@ -138,2 +151,0 @@\n-  assert(_committed[0].start() == nullptr, \"precondition\");\n-\n@@ -141,1 +152,0 @@\n-  assert(_committed[1].start() == nullptr, \"precondition\");\n@@ -144,2 +154,0 @@\n-  _committed[0] = MemRegion((HeapWord*)align_down(byte_for(region0_start), _page_size), (size_t)0);\n-\n@@ -147,1 +155,0 @@\n-  _committed[1] = MemRegion((HeapWord*)align_down(byte_for(region1_start), _page_size), (size_t)0);\n@@ -153,2 +160,3 @@\n-           \"attempt to cover area not in reserved area\");\n-  int idx = new_region.start() == _whole_heap.start() ? 0 : 1;\n+         \"attempt to cover area not in reserved area\");\n+  assert(_covered[0].start() != nullptr, \"precondition\");\n+  assert(_covered[1].start() != nullptr, \"precondition\");\n@@ -156,2 +164,1 @@\n-  assert(_covered[idx].start() != nullptr, \"precondition\");\n-  assert(_committed[idx].start() != nullptr, \"precondition\");\n+  int idx = new_region.start() == _whole_heap.start() ? 0 : 1;\n@@ -159,1 +166,1 @@\n-  \/\/ We don't change the start of a region, only the end.\n+  \/\/ We don't allow changes to the start of a region, only the end.\n@@ -161,3 +168,0 @@\n-  assert(_committed[idx].start() == (HeapWord*)align_down(byte_for(new_region.start()), _page_size), \"inv\");\n-\n-  _covered[idx] = new_region;\n@@ -165,2 +169,1 @@\n-  HeapWord* addr_l = (HeapWord*)align_down(byte_for(new_region.start()), _page_size);\n-  HeapWord* addr_r = (HeapWord*)align_up(byte_after(new_region.last()), _page_size);\n+  MemRegion old_committed = committed_for(_covered[idx]);\n@@ -168,4 +171,1 @@\n-  if (idx == 0) {\n-    \/\/ in case the card for gen-boundary is not page-size aligned\n-    addr_r = MIN2(addr_r, _committed[1].start());\n-  }\n+  _covered[idx] = new_region;\n@@ -173,1 +173,1 @@\n-  MemRegion new_committed = MemRegion(addr_l, addr_r);\n+  MemRegion new_committed = committed_for(new_region);\n@@ -175,1 +175,1 @@\n-  if (new_committed.word_size() == _committed[idx].word_size()) {\n+  if (new_committed.word_size() == old_committed.word_size()) {\n@@ -179,4 +179,4 @@\n-  if (new_committed.word_size() > _committed[idx].word_size()) {\n-    \/\/ expand\n-    MemRegion delta = MemRegion(_committed[idx].end(),\n-                                new_committed.word_size() - _committed[idx].word_size());\n+  if (new_committed.word_size() > old_committed.word_size()) {\n+    \/\/ Expand.\n+    MemRegion delta = MemRegion(old_committed.end(),\n+                                new_committed.word_size() - old_committed.word_size());\n@@ -192,1 +192,1 @@\n-    \/\/ shrink\n+    \/\/ Shrink.\n@@ -194,1 +194,1 @@\n-                                _committed[idx].word_size() - new_committed.word_size());\n+                                old_committed.word_size() - new_committed.word_size());\n@@ -200,2 +200,0 @@\n-  _committed[idx] = new_committed;\n-\n@@ -205,2 +203,2 @@\n-  log_trace(gc, barrier)(\"    _committed[%d].start(): \" PTR_FORMAT \"  _committed[%d].last(): \" PTR_FORMAT,\n-                         idx, p2i(_committed[idx].start()), idx, p2i(_committed[idx].last()));\n+  log_trace(gc, barrier)(\"    committed_start: \" PTR_FORMAT \"  committed_last: \" PTR_FORMAT,\n+                         p2i(new_committed.start()), p2i(new_committed.last()));\n@@ -210,1 +208,1 @@\n-                         p2i(addr_for((CardValue*) _committed[idx].start())),  p2i(addr_for((CardValue*) _committed[idx].last())));\n+                         p2i(addr_for((CardValue*) new_committed.start())),  p2i(addr_for((CardValue*) new_committed.last())));\n@@ -212,0 +210,1 @@\n+#ifdef ASSERT\n@@ -214,1 +213,4 @@\n-  debug_only((void) (*byte_for(_covered[idx].last()));)\n+  if (is_init_completed()) {\n+    (void) (*(volatile CardValue*)byte_for(_covered[idx].last()));\n+  }\n+#endif\n@@ -252,1 +254,1 @@\n-  for (int i = 0; i < _max_covered_regions; i++) {\n+  for (int i = 0; i < max_covered_regions; i++) {\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.cpp","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  static constexpr int _max_covered_regions = 2;\n+  static constexpr int max_covered_regions = 2;\n@@ -61,7 +61,0 @@\n-  \/\/ The committed regions correspond one-to-one to the covered regions.\n-  \/\/ They represent the card-table memory that has been committed to service\n-  \/\/ the corresponding covered region.  It may be that committed region for\n-  \/\/ one covered region corresponds to a larger region because of page-size\n-  \/\/ roundings.  Thus, a committed region for one covered region may\n-  \/\/ actually extend onto the card-table space for the next covered region.\n-  MemRegion* _committed;\n@@ -95,0 +88,1 @@\n+  MemRegion committed_for(const MemRegion mr) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTable.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-  nonstatic_field(CardTable,                   _committed,                                    MemRegion*)                            \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}