{"files":[{"patch":"@@ -329,7 +329,19 @@\n-                else if (buf.getMajorVersion() >= Classfile.JAVA_7_VERSION) {\n-                    \/\/new instance of generator immediately calculates maxStack, maxLocals, all frames,\n-                    \/\/ patches dead bytecode blocks and removes them from exception table\n-                    StackMapGenerator gen = StackMapGenerator.of(DirectCodeBuilder.this, buf);\n-                    maxStack = gen.maxStack();\n-                    maxLocals = gen.maxLocals();\n-                    stackMapAttr = gen.stackMapTableAttribute();\n+                else if (buf.getMajorVersion() >= Classfile.JAVA_6_VERSION) {\n+                    try {\n+                        \/\/new instance of generator immediately calculates maxStack, maxLocals, all frames,\n+                        \/\/ patches dead bytecode blocks and removes them from exception table\n+                        StackMapGenerator gen = StackMapGenerator.of(DirectCodeBuilder.this, buf);\n+                        maxStack = gen.maxStack();\n+                        maxLocals = gen.maxLocals();\n+                        stackMapAttr = gen.stackMapTableAttribute();\n+                    } catch (Exception e) {\n+                        if (buf.getMajorVersion() == Classfile.JAVA_6_VERSION) {\n+                            \/\/failover following JVMS-4.10\n+                            StackCounter cntr = StackCounter.of(DirectCodeBuilder.this, buf);\n+                            maxStack = cntr.maxStack();\n+                            maxLocals = cntr.maxLocals();\n+                            stackMapAttr = null;\n+                        } else {\n+                            throw e;\n+                        }\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -119,0 +119,12 @@\n+    \/\/clone constructor for internal purposes\n+    SplitConstantPool(SplitConstantPool cloneFrom, Options options) {\n+        this.options = options;\n+        this.parent = cloneFrom.parent;\n+        this.parentSize = cloneFrom.parentSize;\n+        this.parentBsmSize = cloneFrom.parentBsmSize;\n+        this.size = cloneFrom.size;\n+        this.bsmSize = cloneFrom.bsmSize;\n+        this.myEntries = Arrays.copyOf(cloneFrom.myEntries, cloneFrom.myEntries.length);\n+        this.myBsmEntries = Arrays.copyOf(cloneFrom.myBsmEntries, cloneFrom.myBsmEntries.length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -143,11 +143,0 @@\n- * <p>\n- * In case of an exception during the Generator loop there is just minimal information available in the exception message.\n- * <p>\n- * To determine root cause of the exception it is recommended to enable debug logging of the Generator in one of the two modes\n- * using following <code>java.lang.System<\/code> properties:<dl>\n- * <dt><code>-Djdk.internal.classfile.impl.StackMapGenerator.DEBUG=true<\/code>\n- *      <dd>Activates debug logging with basic information + generated stack map frames in case of success.\n- *          It also re-runs with enabled full trace logging in case of an error or exception.\n- * <dt><code>-Djdk.internal.classfile.impl.StackMapGenerator.TRACE=true<\/code>\n- *      <dd>Activates full detailed tracing of the generator process for all invocations.\n- * <\/dl>\n@@ -862,2 +851,3 @@\n-            cp.options.generateStackmaps = false;\n-            var clb = new DirectClassBuilder(cp, cp.classEntry(ClassDesc.of(\"FakeClass\")));\n+            \/\/clone SplitConstantPool with alternate Options\n+            var newCp = new SplitConstantPool(cp, new Options(List.of(Classfile.Option.generateStackmap(false))));\n+            var clb = new DirectClassBuilder(newCp, newCp.classEntry(ClassDesc.of(\"FakeClass\")));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -86,1 +86,7 @@\n-        var exception = assertThrows(IllegalStateException.class, () ->\n+\n+        \/\/test failover stack map generation\n+        clm.transform(ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n+                   .andThen(ClassTransform.endHandler(clb -> clb.withVersion(JAVA_6_VERSION, 0))));\n+\n+        \/\/test failure of stack map generation\n+        assertThrows(IllegalStateException.class, () ->\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-        \/\/test transformation to class version 51 with re-generation of StackMapTable attributes\n+        \/\/test transformation to class version 50 with re-generation of StackMapTable attributes\n@@ -231,1 +231,1 @@\n-                .andThen(ClassTransform.endHandler(clb -> clb.withVersion(51, 0))))).verify(null));\n+                .andThen(ClassTransform.endHandler(clb -> clb.withVersion(50, 0))))).verify(null));\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}