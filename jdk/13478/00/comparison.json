{"files":[{"patch":"@@ -44,0 +44,1 @@\n+    private int majorVersion;\n@@ -81,0 +82,8 @@\n+    public int getMajorVersion() {\n+        return majorVersion;\n+    }\n+\n+    public void setMajorVersion(int majorVersion) {\n+        this.majorVersion = majorVersion;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -245,1 +245,9 @@\n-        if (a.isEmpty())\n+        if (a.isEmpty()) {\n+            if (classReader.readU2(6) <= Classfile.JAVA_6_VERSION) {\n+                \/\/fallback to jump targets inflation without StackMapTableAttribute\n+                for (int pos=codeStart; pos<codeEnd; ) {\n+                    var i = bcToInstruction(classReader.readU1(pos), pos);\n+                    if (i instanceof BranchInstruction br) br.target();\n+                    pos += i.sizeInBytes();\n+                }\n+            }\n@@ -247,0 +255,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+        tail.setMajorVersion(majorVersion);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -338,1 +338,5 @@\n-                    stackMapAttr = gen.stackMapTableAttribute();\n+                    if (buf.getMajorVersion() >= Classfile.JAVA_6_VERSION) {\n+                        stackMapAttr = gen.stackMapTableAttribute();\n+                    } else {\n+                        stackMapAttr = null;\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @bug 8305990\n@@ -33,1 +34,2 @@\n-import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.*;\n+import jdk.internal.classfile.components.ClassPrinter;\n@@ -218,0 +220,14 @@\n+    @Test\n+    void testClassVersions() throws Exception {\n+        var actualVersion = Classfile.parse(StackMapsTest.class.getResourceAsStream(\"\/testdata\/Pattern1.class\").readAllBytes());\n+\n+        \/\/test transformation to class version 49 with removal of StackMapTable attributes\n+        var version49 = Classfile.parse(actualVersion.transform(ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n+                .andThen(ClassTransform.endHandler(clb -> clb.withVersion(49, 0)))));\n+        assertFalse(ClassPrinter.toTree(version49, ClassPrinter.Verbosity.CRITICAL_ATTRIBUTES).walk().anyMatch(n -> n.name().equals(\"stack map frames\")));\n+\n+        \/\/test transformation to class version 50 with re-generation of StackMapTable attributes\n+         assertEmpty(Classfile.parse(version49.transform(ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL)\n+                .andThen(ClassTransform.endHandler(clb -> clb.withVersion(50, 0))))).verify(null));\n+    }\n+\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}