{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import jdk.internal.vm.annotation.Stable;\n+\n@@ -169,0 +171,12 @@\n+    \/*\n+     * The hash code of this enumeration constant.\n+     *\n+     * Once initialized, the field value does not change.\n+     * HotSpot's identity hash code generation also never returns zero\n+     * as the identity hash code. This makes zero a convenient marker\n+     * for the un-initialized value for both Stable and the lazy\n+     * initialization code.\n+     *\/\n+    @Stable\n+    private int hash;\n+\n@@ -175,1 +189,5 @@\n-        return super.hashCode();\n+        int hc = hash;\n+        if (hc == 0) {\n+            hc = hash = System.identityHashCode(this);\n+        }\n+        return hc;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Enum.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class EnumHashCode {\n+\n+    enum E {\n+        A, B, C;\n+    }\n+\n+    Enum e = E.A;\n+\n+    @Benchmark\n+    public int constant() {\n+        \/\/ Tests that hash code is constant-foldable\n+        return E.A.hashCode();\n+    }\n+\n+    @Benchmark\n+    public int field() {\n+        \/\/ Tests that hash code is efficient\n+        return e.hashCode();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/EnumHashCode.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}