{"files":[{"patch":"@@ -319,1 +319,1 @@\n-        ObjectIdentifier algOid;\n+        AlgorithmId aid;\n@@ -330,2 +330,2 @@\n-            algOid = in.getOID();\n-            algParams = parseAlgParameters(algOid, in);\n+            aid = AlgorithmId.parse(val);\n+            algParams = aid.getParameters();\n@@ -363,2 +363,1 @@\n-                Cipher cipher = Cipher.getInstance(\n-                        mapPBEParamsToAlgorithm(algOid, algParams));\n+                Cipher cipher = Cipher.getInstance(aid.getName());\n@@ -397,1 +396,1 @@\n-                                        mapPBEParamsToAlgorithm(algOid, algParams) +\n+                                        aid.getName() +\n@@ -436,1 +435,1 @@\n-                                        mapPBEParamsToAlgorithm(algOid, algParams) +\n+                                        aid.getName() +\n@@ -980,12 +979,0 @@\n-    \/*\n-     * Map a PBE algorithm parameters onto its algorithm name\n-     *\/\n-    private static String mapPBEParamsToAlgorithm(ObjectIdentifier algorithm,\n-        AlgorithmParameters algParams) throws NoSuchAlgorithmException {\n-        \/\/ Check for PBES2 algorithms\n-        if (algorithm.equals(pbes2_OID) && algParams != null) {\n-            return algParams.toString();\n-        }\n-        return new AlgorithmId(algorithm).getName();\n-    }\n-\n@@ -2113,3 +2100,2 @@\n-                DerInputStream in = seq[1].toDerInputStream();\n-                ObjectIdentifier algOid = in.getOID();\n-                AlgorithmParameters algParams = parseAlgParameters(algOid, in);\n+                AlgorithmId aid = AlgorithmId.parse(seq[1]);\n+                AlgorithmParameters algParams = aid.getParameters();\n@@ -2134,2 +2120,1 @@\n-                    certProtectionAlgorithm\n-                            = mapPBEParamsToAlgorithm(algOid, algParams);\n+                    certProtectionAlgorithm = aid.getName();\n@@ -2142,1 +2127,1 @@\n-                        \"(\" + mapPBEParamsToAlgorithm(algOid, algParams) +\n+                        \"(\" + certProtectionAlgorithm +\n@@ -2149,2 +2134,1 @@\n-                        Cipher cipher = Cipher.getInstance(\n-                                mapPBEParamsToAlgorithm(algOid, algParams));\n+                        Cipher cipher = Cipher.getInstance(certProtectionAlgorithm);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":11,"deletions":27,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -259,1 +259,2 @@\n-     * Returns a name for the algorithm which may be more intelligible\n+     * Returns a name for the algorithm which can be used by getInstance()\n+     * call of a crypto primitive. The name is usually more intelligible\n@@ -263,2 +264,4 @@\n-     * some systems.  It also returns names like \"OID.1.2.3.4\", when\n-     * no particular name for the algorithm is known.\n+     * some systems.  It also returns OID names like \"1.2.3.4\", when\n+     * no particular name for the algorithm is known. The OID may also be\n+     * recognized by getInstance() calls since an OID is usually defined\n+     * as an alias for an algorithm by the security provider.\n@@ -266,1 +269,5 @@\n-     * Note: for ecdsa-with-SHA2 plus hash algorithm (Ex: SHA-256), this method\n+     * In some special cases where the OID does not include enough info\n+     * to return a Java standard algorithm name, an algorithm name\n+     * that includes info on the params is returned:\n+     *\n+     * 1. For ecdsa-with-SHA2 plus hash algorithm (Ex: SHA-256), this method\n@@ -268,0 +275,3 @@\n+     *\n+     * 2. For PBES2, this method returns the \"full\" cipher name containing the\n+     * KDF and Enc algorithms (Ex: PBEWithHmacSHA256AndAES_256) directly.\n@@ -284,0 +294,8 @@\n+        } else if (o == KnownOIDs.PBES2) {\n+            if (algParams != null) {\n+                return algParams.toString();\n+            } else {\n+                \/\/ when getName() is called in decodeParams(), algParams is\n+                \/\/ null, where AlgorithmParameters.getInstance(\"PBES2\") will\n+                \/\/ be used to initialize it.\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8286428\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util\n+ *          java.base\/sun.security.x509\n+ * @summary AlgorithmId should understand PBES2\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.DerUtils;\n+import sun.security.x509.AlgorithmId;\n+\n+import javax.crypto.EncryptedPrivateKeyInfo;\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.security.KeyStore;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class PBES2 {\n+    public static void main(String[] args) throws Exception {\n+\n+        var pass = \"changeit\".toCharArray();\n+\n+        var ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n+\n+        var bytes = new byte[16];\n+        new Random().nextBytes(bytes);\n+        var key = new SecretKeySpec(bytes, \"AES\");\n+\n+        var algos = Map.of(\n+                \"p1\", \"PBEWithMD5AndDES\",\n+                \"p2\", \"PBEWithHmacSHA384AndAES_128\",\n+                \"p3\", \"PBEWithHmacSHA256AndAES_256\");\n+\n+        \/\/ Write 3 SecretKeyEntry objects inside the keystore\n+        \/\/ PBES1\n+        ks.setEntry(\"p1\", new KeyStore.SecretKeyEntry(key), new KeyStore.PasswordProtection(pass, algos.get(\"p1\"), null));\n+        \/\/ PBES2\n+        ks.setEntry(\"p2\", new KeyStore.SecretKeyEntry(key), new KeyStore.PasswordProtection(pass, algos.get(\"p2\"), null));\n+        \/\/ default\n+        ks.setKeyEntry(\"p3\", key, pass, null);\n+\n+        var bout = new ByteArrayOutputStream();\n+        ks.store(bout, pass);\n+        var p12 = bout.toByteArray();\n+\n+        var decryptKey = SecretKeyFactory.getInstance(\"PBE\").generateSecret(new PBEKeySpec(pass));\n+        ks.load(new ByteArrayInputStream(p12), pass);\n+        for (int i = 0; i < 3; i++) {\n+            var name = DerUtils.innerDerValue(p12, \"110c010c\" + i + \"2010\").getAsString();\n+\n+            \/\/ AlgorithmId\n+            var aid = AlgorithmId.parse(DerUtils.innerDerValue(p12, \"110c010c\" + i + \"1010c0\"));\n+            Asserts.assertEQ(aid.getName(), algos.get(name), name);\n+\n+            \/\/ EncryptedPrivateKeyInfo\n+            var encrypted = DerUtils.innerDerValue(p12, \"110c010c\" + i + \"1010c\");\n+            var epi = new EncryptedPrivateKeyInfo(encrypted.toByteArray());\n+            Asserts.assertEQ(epi.getAlgName(), algos.get(name));\n+            var spec = epi.getKeySpec(decryptKey);\n+            var specEncoded = spec.getEncoded();\n+            Asserts.assertEQ(spec.getAlgorithm(), \"AES\", name);\n+            Asserts.assertTrue(Arrays.equals(bytes, 0, 16, specEncoded, specEncoded.length - 16, specEncoded.length), name);\n+\n+            \/\/ KeyStore API\n+            var k = ks.getKey(name, pass);\n+            Asserts.assertEQ(k.getAlgorithm(), \"AES\", name);\n+            Asserts.assertTrue(Arrays.equals(bytes, k.getEncoded()), name);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/PBES2.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}