{"files":[{"patch":"@@ -733,1 +733,1 @@\n-JvmtiEnvBase::get_thread_state(oop thread_oop, JavaThread* jt) {\n+JvmtiEnvBase::get_thread_state_base(oop thread_oop, JavaThread* jt) {\n@@ -759,0 +759,13 @@\n+jint\n+JvmtiEnvBase::get_thread_state(oop thread_oop, JavaThread* jt) {\n+  jint state;\n+\n+  if (is_passive_carrier_thread(jt, thread_oop)) {\n+    state = JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_WAITING |\n+            JVMTI_THREAD_STATE_WAITING_INDEFINITELY;\n+  } else {\n+    state = get_thread_state_base(thread_oop, jt);\n+  }\n+  return state;\n+}\n+\n@@ -773,1 +786,1 @@\n-    state = get_thread_state(ct_oop, java_thread) & ~filtered_bits;\n+    state = get_thread_state_base(ct_oop, java_thread) & ~filtered_bits;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -387,1 +387,2 @@\n-  \/\/ get ordinary thread thread state\n+  \/\/ get platform thread state\n+  static jint get_thread_state_base(oop thread_oop, JavaThread* jt);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    private static native void testGetThreadState(Thread thread);\n+    private static native void testGetThreadListStackTraces(Thread thread);\n@@ -47,0 +49,2 @@\n+        testGetThreadState(Thread.currentThread());\n+        testGetThreadListStackTraces(Thread.currentThread());\n@@ -62,1 +66,3 @@\n-                virtualThreads.add(factory.newThread(FOO));\n+                Thread vt = factory.newThread(FOO);\n+                vt.setName(\"VT-\" + i);\n+                virtualThreads.add(vt);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/ThreadStateTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+static const jint EXP_VT_STATE = JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_RUNNABLE;\n+static const jint EXP_CT_STATE = JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_WAITING |\n+                                 JVMTI_THREAD_STATE_WAITING_INDEFINITELY;\n+static const jint MAX_FRAME_COUNT = 32;\n@@ -41,1 +45,1 @@\n-MonitorContended(jvmtiEnv* jvmti, JNIEnv* jni_env, jthread thread,\n+MonitorContended(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread,\n@@ -45,0 +49,13 @@\n+static void JNICALL\n+check_thread_state(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jint state, jint exp_state, const char* msg) {\n+  if (state != exp_state) {\n+    const char* tname = get_thread_name(jvmti, jni, thread);\n+\n+    LOG(\"FAILED: %p: %s: thread state: %x expected state: %x\\n\",\n+        (void*)thread, tname, state, exp_state);\n+\n+    deallocate(jvmti, jni, (void*)tname);\n+    jni->FatalError(msg);\n+  }\n+}\n+\n@@ -48,1 +65,1 @@\n-  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_SINGLE_STEP\");\n+  check_jvmti_status(jni, err, \"setSingleSteppingMode: error in JVMTI SetEventNotificationMode for JVMTI_EVENT_SINGLE_STEP\");\n@@ -54,1 +71,28 @@\n-  check_jvmti_status(jni, err, \"event handler: error in JVMTI SetEventNotificationMode for event JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n+  check_jvmti_status(jni, err, \"setMonitorContendedMode: error in JVMTI SetEventNotificationMode for JVMTI_EVENT_MONITOR_CONTENDED_ENTER\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_testGetThreadState(JNIEnv* jni, jclass klass, jthread vthread) {\n+  jthread cthread = get_carrier_thread(jvmti, jni, vthread);\n+  jint ct_state = get_thread_state(jvmti, jni, cthread);\n+  jint vt_state = get_thread_state(jvmti, jni, vthread);\n+\n+  check_thread_state(jvmti, jni, cthread, ct_state, EXP_CT_STATE,\n+                     \"Failed: unexpected carrier thread state from JVMTI GetThreadState\");\n+  check_thread_state(jvmti, jni, vthread, vt_state, EXP_VT_STATE,\n+                     \"Failed: unexpected virtual thread state from JVMTI GetThreadState\");\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ThreadStateTest_testGetThreadListStackTraces(JNIEnv* jni, jclass klass, jthread vthread) {\n+  jthread cthread = get_carrier_thread(jvmti, jni, vthread);\n+  jthread threads[2] = { cthread, vthread };\n+  jvmtiStackInfo* stackInfo = NULL;\n+\n+  jvmtiError err = jvmti->GetThreadListStackTraces(2, threads, MAX_FRAME_COUNT, &stackInfo);\n+  check_jvmti_status(jni, err, \"testGetThreadState: error in JVMTI GetThreadListStackTraces\");\n+\n+  check_thread_state(jvmti, jni, cthread, stackInfo[0].state, EXP_CT_STATE,\n+                     \"Failed: unexpected carrier thread state from JVMTI GetThreadListStackTraces\");\n+  check_thread_state(jvmti, jni, vthread, stackInfo[1].state, EXP_VT_STATE,\n+                     \"Failed: unexpected virtual thread state from JVMTI GetThreadListStackTraces\");\n@@ -62,1 +106,1 @@\n-  printf(\"Agent_OnLoad started\\n\");\n+  printf(\"Agent_OnLoad: started\\n\");\n@@ -64,1 +108,1 @@\n-    LOG(\"error in GetEnv\");\n+    LOG(\"Agent_OnLoad: error in GetEnv\");\n@@ -75,1 +119,1 @@\n-    LOG(\"error in JVMTI AddCapabilities: %d\\n\", err);\n+    LOG(\"Agent_OnLoad: error in JVMTI AddCapabilities: %d\\n\", err);\n@@ -85,0 +129,1 @@\n+  printf(\"Agent_OnLoad: finished\\n\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/ThreadStateTest\/libThreadStateTest.cpp","additions":51,"deletions":6,"binary":false,"changes":57,"status":"modified"}]}