{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6414899 8242332\n+ * @bug 6414899 8242332 8312428\n@@ -61,1 +61,1 @@\n-            System.out.println(\"Testing \" + alg);\n+            System.out.println(\"Digest algo: \" + alg);\n@@ -63,1 +63,8 @@\n-            md = testCloning(md, p);\n+            try {\n+                md = testCloning(md, p);;\n+            } catch (CloneNotSupportedException cnse) {\n+                \/\/ skip test if clone isn't supported\n+                System.out.println(\"=> Clone not supported; skip!\");\n+                continue;\n+            }\n+\n@@ -128,1 +135,0 @@\n-\n","filename":"test\/jdk\/sun\/security\/pkcs11\/MessageDigest\/TestCloning.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.security.*;\n+import java.security.interfaces.*;\n+import java.security.spec.*;\n+\n+public class PSSUtil {\n+\n+    \/**\n+     * ALGORITHM name, fixed as RSA for PKCS11\n+     *\/\n+    private static final String KEYALG = \"RSA\";\n+    private static final String SIGALG = \"RSASSA-PSS\";\n+    private static final String[] DIGESTS = {\n+           \"SHA-224\", \"SHA-256\", \"SHA-384\" , \"SHA-512\",\n+           \"SHA3-224\", \"SHA3-256\", \"SHA3-384\" , \"SHA3-512\",\n+    };\n+\n+    public static enum AlgoSupport {\n+        NO, MAYBE, YES\n+    };\n+\n+    public static boolean isSignatureSupported(Provider p) {\n+        try {\n+            Signature.getInstance(SIGALG, p);\n+            return true;\n+        } catch (NoSuchAlgorithmException e) {\n+            System.out.println(\"Skip testing \" + SIGALG +\n+                \" due to no support\");\n+            return false;\n+        }\n+    }\n+\n+    public static AlgoSupport isHashSupported(Provider p, String... hashAlgs) {\n+\n+        AlgoSupport status = AlgoSupport.YES;\n+        for (String h : hashAlgs) {\n+            String sigAlg = (h.startsWith(\"SHA3-\")?\n+                    h : h.replace(\"-\",\"\")) + \"with\" + SIGALG;\n+            try {\n+                Signature.getInstance(sigAlg, p);\n+                \/\/ Yes, proceed to check next hash algorithm\n+                continue;\n+            } catch (NoSuchAlgorithmException e) {\n+                \/\/ continue trying other checks\n+            }\n+            try {\n+                MessageDigest.getInstance(h, p);\n+                status = AlgoSupport.MAYBE;\n+            } catch (NoSuchAlgorithmException e) {\n+                \/\/ if not supported as a standalone digest algo, chance of it\n+                \/\/ being supported by PSS is very very low\n+                return AlgoSupport.NO;\n+            }\n+        }\n+        return status;\n+    }\n+\n+    public static KeyPair generateKeys(Provider p, int size)\n+            throws NoSuchAlgorithmException {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(KEYALG, p);\n+        kpg.initialize(size);\n+        return kpg.generateKeyPair();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PSSUtil.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @bug 8080462 8226651 8242332\n+ * @bug 8080462 8226651 8242332 8312428\n@@ -38,4 +38,0 @@\n-    \/**\n-     * ALGORITHM name, fixed as RSA for PKCS11\n-     *\/\n-    private static final String KEYALG = \"RSA\";\n@@ -50,4 +46,1 @@\n-        Signature sig;\n-        try {\n-            sig = Signature.getInstance(SIGALG, p);\n-        } catch (NoSuchAlgorithmException e) {\n+        if (!PSSUtil.isSignatureSupported(p)) {\n@@ -81,1 +74,1 @@\n-    private void runTest(Provider p, int keySize, String hashAlg,\n+    private static void runTest(Provider p, int keySize, String hashAlg,\n@@ -84,7 +77,4 @@\n-        \/\/ skip further test if this provider does not support hashAlg or\n-        \/\/ mgfHashAlg\n-        try {\n-            MessageDigest.getInstance(hashAlg, p);\n-            MessageDigest.getInstance(mgfHashAlg, p);\n-        } catch (NoSuchAlgorithmException nsae) {\n-            System.out.println(\"No support for \" + hashAlg + \", skip\");\n+        System.out.println(\"Testing \" + hashAlg + \" and MGF1\" + mgfHashAlg);\n+        PSSUtil.AlgoSupport s = PSSUtil.isHashSupported(p, hashAlg, mgfHashAlg);\n+        if (s == PSSUtil.AlgoSupport.NO) {\n+            System.out.println(\"=> Skip; no support\");\n@@ -94,1 +84,1 @@\n-        System.out.println(\"Testing [\" + keySize + \" \" + hashAlg + \"]\");\n+        Signature sig = Signature.getInstance(SIGALG, p);\n@@ -97,3 +87,1 @@\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(KEYALG, p);\n-        kpg.initialize(keySize);\n-        KeyPair kp = kpg.generateKeyPair();\n+        KeyPair kp = PSSUtil.generateKeys(p, keySize);\n@@ -111,2 +99,1 @@\n-        Signature sig = Signature.getInstance(\"RSASSA-PSS\", p);\n-        sig.setParameter(paramsBad);\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -114,0 +101,14 @@\n+            sig.setParameter(paramsGood);\n+            sig.initSign(priv);\n+            System.out.println(\"test#1: good params pass\");\n+        } catch (Exception ex) {\n+            if (s == PSSUtil.AlgoSupport.MAYBE) {\n+                \/\/ confirmed to be unsupported; skip the rest of the test\n+                System.out.println(\"=> Skip; no PSS support\");\n+                return;\n+            }\n+        }\n+\n+        sig = Signature.getInstance(SIGALG, p);\n+        try {\n+            sig.setParameter(paramsBad);\n@@ -120,0 +121,2 @@\n+        \/\/ test#2 - setParameter then initVerify\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -121,2 +124,2 @@\n-        sig.initSign(priv);\n-        System.out.println(\"test#1: pass\");\n+        sig.initVerify(pub);\n+        System.out.println(\"test#2: good params pass\");\n@@ -124,3 +127,1 @@\n-        \/\/ test#2 - setParameter then initVerify\n-        sig = Signature.getInstance(\"RSASSA-PSS\", p);\n-        sig.setParameter(paramsBad);\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -128,0 +129,1 @@\n+            sig.setParameter(paramsBad);\n@@ -134,5 +136,0 @@\n-        sig.setParameter(paramsGood);\n-        sig.initVerify(pub);\n-\n-        System.out.println(\"test#2: pass\");\n-\n@@ -140,1 +137,1 @@\n-        sig = Signature.getInstance(\"RSASSA-PSS\", p);\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -142,0 +139,4 @@\n+        sig.setParameter(paramsGood);\n+        System.out.println(\"test#3: good params pass\");\n+\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -143,0 +144,1 @@\n+            sig.initSign(priv);\n@@ -149,3 +151,0 @@\n-        sig.setParameter(paramsGood);\n-        System.out.println(\"test#3: pass\");\n-\n@@ -153,1 +152,2 @@\n-        sig = Signature.getInstance(\"RSASSA-PSS\", p);\n+        sig = Signature.getInstance(SIGALG, p);\n+        sig.setParameter(paramsGood);\n@@ -155,0 +155,3 @@\n+        System.out.println(\"test#4: good params pass\");\n+\n+        sig = Signature.getInstance(SIGALG, p);\n@@ -156,0 +159,1 @@\n+            sig.initVerify(pub);\n@@ -161,3 +165,0 @@\n-\n-        sig.setParameter(paramsGood);\n-        System.out.println(\"test#4: pass\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/KeyAndParamCheckForPSS.java","additions":43,"deletions":42,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @bug 8080462 8226651 8242332\n+ * @bug 8080462 8226651 8242332 8312428\n@@ -38,2 +38,0 @@\n-    \/\/ PKCS11 does not support RSASSA-PSS keys yet\n-    private static final String KEYALG = \"RSA\";\n@@ -47,1 +45,1 @@\n-    private Provider prov;\n+    private static final byte[] DATA = generateData(100);\n@@ -65,6 +63,2 @@\n-        Signature sig;\n-        try {\n-            sig = Signature.getInstance(SIGALG, p);\n-        } catch (NoSuchAlgorithmException e) {\n-            System.out.println(\"Skip testing RSASSA-PSS\" +\n-                \" due to no support\");\n+        if (!PSSUtil.isSignatureSupported(p)) {\n+            System.out.println(\"Skip testing \" + SIGALG + \" due to no support\");\n@@ -73,12 +67,0 @@\n-        this.prov = p;\n-        for (int i : KEYSIZES) {\n-            runTest(i);\n-        }\n-    }\n-\n-    private void runTest(int keySize) throws Exception {\n-        byte[] data = new byte[100];\n-        IntStream.range(0, data.length).forEach(j -> {\n-            data[j] = (byte) j;\n-        });\n-        System.out.println(\"[KEYSIZE = \" + keySize + \"]\");\n@@ -86,17 +68,16 @@\n-        \/\/ create a key pair\n-        KeyPair kpair = generateKeys(KEYALG, keySize);\n-        test(DIGESTS, kpair.getPrivate(), kpair.getPublic(), data);\n-    }\n-\n-    private void test(String[] digestAlgs, PrivateKey privKey,\n-            PublicKey pubKey, byte[] data) throws RuntimeException {\n-        \/\/ For signature algorithm, create and verify a signature\n-        for (String hash : digestAlgs) {\n-            for (String mgfHash : digestAlgs) {\n-                try {\n-                    checkSignature(data, pubKey, privKey, hash, mgfHash);\n-                } catch (NoSuchAlgorithmException | InvalidKeyException |\n-                         SignatureException | NoSuchProviderException ex) {\n-                    throw new RuntimeException(ex);\n-                } catch (InvalidAlgorithmParameterException ex2) {\n-                    System.out.println(\"Skip test due to \" + ex2);\n+        for (int kSize : KEYSIZES) {\n+            System.out.println(\"[KEYSIZE = \" + kSize + \"]\");\n+            KeyPair kp = PSSUtil.generateKeys(p, kSize);\n+            PrivateKey privKey = kp.getPrivate();\n+            PublicKey pubKey = kp.getPublic();\n+            for (String hash : DIGESTS) {\n+                for (String mgfHash : DIGESTS) {\n+                    System.out.println(\"    [Hash  = \" + hash +\n+                            \", MGF1 Hash = \" + mgfHash + \"]\");\n+                    PSSUtil.AlgoSupport s =\n+                            PSSUtil.isHashSupported(p, hash, mgfHash);\n+                    if (s == PSSUtil.AlgoSupport.NO) {\n+                        System.out.println(\"    => Skip; no support\");\n+                        continue;\n+                    }\n+                    checkSignature(p, DATA, pubKey, privKey, hash, mgfHash, s);\n@@ -104,9 +85,2 @@\n-            }\n-        };\n-    }\n-\n-    private KeyPair generateKeys(String keyalg, int size)\n-            throws NoSuchAlgorithmException {\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(keyalg, prov);\n-        kpg.initialize(size);\n-        return kpg.generateKeyPair();\n+            };\n+        }\n@@ -115,2 +89,2 @@\n-    private void checkSignature(byte[] data, PublicKey pub,\n-            PrivateKey priv, String hash, String mgfHash)\n+    private static void checkSignature(Provider p, byte[] data, PublicKey pub,\n+            PrivateKey priv, String hash, String mgfHash, PSSUtil.AlgoSupport s)\n@@ -121,1 +95,0 @@\n-        String testName = hash + \" and MGF1_\" + mgfHash;\n@@ -125,0 +98,5 @@\n+        Signature sig = Signature.getInstance(SIGALG, p);\n+        AlgorithmParameterSpec params = new PSSParameterSpec(\n+                hash, \"MGF1\", new MGF1ParameterSpec(mgfHash), 0, 1);\n+        sig.initSign(priv);\n+\n@@ -126,3 +104,6 @@\n-            MessageDigest md = MessageDigest.getInstance(hash, prov);\n-            if (!hash.equalsIgnoreCase(mgfHash)) {\n-                md = MessageDigest.getInstance(mgfHash, prov);\n+            sig.setParameter(params);\n+        } catch (InvalidAlgorithmParameterException iape) {\n+            if (s == PSSUtil.AlgoSupport.MAYBE) {\n+                \/\/ confirmed to be unsupported; skip the rest of the test\n+                System.out.println(\"    => Skip; no PSS support\");\n+                return;\n@@ -130,3 +111,0 @@\n-        } catch (NoSuchAlgorithmException nsae) {\n-            System.out.println(\"Skip testing \" + hash + \"\/\" + mgfHash);\n-            return;\n@@ -135,6 +113,0 @@\n-        System.out.println(\"Testing against \" + testName);\n-        Signature sig = Signature.getInstance(SIGALG, prov);\n-        AlgorithmParameterSpec params = new PSSParameterSpec(\n-            hash, \"MGF1\", new MGF1ParameterSpec(mgfHash), 0, 1);\n-        sig.setParameter(params);\n-        sig.initSign(priv);\n@@ -166,0 +138,1 @@\n+        System.out.println(\"    => Passed\");\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/SignatureTestPSS.java","additions":37,"deletions":64,"binary":false,"changes":101,"status":"modified"}]}