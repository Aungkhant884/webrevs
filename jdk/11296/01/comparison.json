{"files":[{"patch":"@@ -279,1 +279,0 @@\n-  _object.release(_oop_storage);\n@@ -598,0 +597,3 @@\n+  \/\/ Release object's oop storage since the ObjectMonitor has been deflated:\n+  release_object();\n+\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -352,0 +352,1 @@\n+  void      release_object() { _object.release(_oop_storage); }\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1265,0 +1265,2 @@\n+        \/\/ Release object's oop storage since we don't need this ObjectMonitor:\n+        m->release_object();\n@@ -1357,0 +1359,2 @@\n+      \/\/ Release object's oop storage since we don't need this ObjectMonitor:\n+      m->release_object();\n@@ -1471,0 +1475,9 @@\n+static size_t delete_monitors(GrowableArray<ObjectMonitor*>* delete_list) {\n+  size_t count = 0;\n+  for (ObjectMonitor* monitor: *delete_list) {\n+    delete monitor;\n+    count++;\n+  }\n+  return count;\n+}\n+\n@@ -1536,9 +1549,18 @@\n-    \/\/ deflated in this cycle.\n-    for (ObjectMonitor* monitor: delete_list) {\n-      delete monitor;\n-      deleted_count++;\n-\n-      if (current->is_Java_thread()) {\n-        \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n-        chk_for_block_req(JavaThread::cast(current), \"deletion\", \"deleted_count\",\n-                          deleted_count, ls, &timer);\n+    \/\/ deflated and unlinked in this cycle.\n+    if (current->is_Java_thread()) {\n+      if (ls != NULL) {\n+        timer.stop();\n+        ls->print_cr(\"before setting blocked: unlinked_count=\" SIZE_FORMAT\n+                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n+                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                     unlinked_count, in_use_list_ceiling(),\n+                     _in_use_list.count(), _in_use_list.max());\n+      }\n+      \/\/ Mark the calling JavaThread blocked (safepoint safe) while we free\n+      \/\/ the ObjectMonitors so we don't delay safepoints whilst doing that.\n+      ThreadBlockInVM tbivm(JavaThread::cast(current));\n+      if (ls != NULL) {\n+        ls->print_cr(\"after setting blocked: in_use_list stats: ceiling=\"\n+                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                     in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n+        timer.start();\n@@ -1546,0 +1568,5 @@\n+      deleted_count = delete_monitors(&delete_list);\n+      \/\/ ThreadBlockInVM is destroyed here\n+    } else {\n+      \/\/ A non-JavaThread can just free the ObjectMonitors:\n+      deleted_count = delete_monitors(&delete_list);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":36,"deletions":9,"binary":false,"changes":45,"status":"modified"}]}