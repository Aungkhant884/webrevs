{"files":[{"patch":"@@ -531,4 +531,23 @@\n-# define BEGIN if (_current_step == 0) { _current_step = __LINE__;\n-# define STEP(s) } if (_current_step < __LINE__) { _current_step = __LINE__; _current_step_info = s; \\\n-  record_step_start_time(); _step_did_timeout = false;\n-# define END clear_step_start_time(); }\n+# define BEGIN                                             \\\n+  if (_current_step == 0) {                                \\\n+    _current_step = __LINE__;                              \\\n+    {\n+      \/\/ [Begin logic]\n+\n+# define STEP_IF(s,cond)                                   \\\n+    }                                                      \\\n+  }                                                        \\\n+  if (_current_step < __LINE__) {                          \\\n+    _current_step = __LINE__;                              \\\n+    _current_step_info = s;                                \\\n+    record_step_start_time();                              \\\n+    _step_did_timeout = false;                             \\\n+    if ((cond)) {\n+      \/\/ [Step logic]\n+\n+# define STEP(s) STEP_IF(s, true)\n+\n+# define END                                               \\\n+    }                                                      \\\n+    clear_step_start_time();                               \\\n+  }\n@@ -544,1 +563,0 @@\n-\n@@ -561,20 +579,15 @@\n-  STEP(\"test secondary crash 1\")\n-    if (_verbose && TestCrashInErrorHandler == TEST_SECONDARY_CRASH) {\n-      st->print_cr(\"Will crash now (TestCrashInErrorHandler=%u)...\",\n-        TestCrashInErrorHandler);\n-      controlled_crash(TestCrashInErrorHandler);\n-    }\n-\n-  STEP(\"test secondary crash 2\")\n-    if (_verbose && TestCrashInErrorHandler == TEST_SECONDARY_CRASH) {\n-      st->print_cr(\"Will crash now (TestCrashInErrorHandler=%u)...\",\n-        TestCrashInErrorHandler);\n-      controlled_crash(TestCrashInErrorHandler);\n-    }\n-\n-  STEP(\"test missing ResourceMark does not crash\")\n-    if (_verbose && TestCrashInErrorHandler == TEST_RESOURCE_MARK_CRASH) {\n-      stringStream message;\n-      message.print(\"This is a message with no ResourceMark\");\n-      tty->print_cr(\"%s\", message.as_string());\n-    }\n+  STEP_IF(\"test secondary crash 1\", _verbose && TestCrashInErrorHandler == TEST_SECONDARY_CRASH)\n+    st->print_cr(\"Will crash now (TestCrashInErrorHandler=%u)...\",\n+      TestCrashInErrorHandler);\n+    controlled_crash(TestCrashInErrorHandler);\n+\n+  STEP_IF(\"test secondary crash 2\", _verbose && TestCrashInErrorHandler == TEST_SECONDARY_CRASH)\n+    st->print_cr(\"Will crash now (TestCrashInErrorHandler=%u)...\",\n+      TestCrashInErrorHandler);\n+    controlled_crash(TestCrashInErrorHandler);\n+\n+  STEP_IF(\"test missing ResourceMark does not crash\",\n+      _verbose && TestCrashInErrorHandler == TEST_RESOURCE_MARK_CRASH)\n+    stringStream message;\n+    message.print(\"This is a message with no ResourceMark\");\n+    tty->print_cr(\"%s\", message.as_string());\n@@ -586,11 +599,11 @@\n-  STEP(\"setup for test unresponsive error reporting step\")\n-    if (_verbose && TestUnresponsiveErrorHandler) {\n-      \/\/ We record reporting_start_time for this test here because we\n-      \/\/ care about the time spent executing TIMEOUT_TEST_STEP and not\n-      \/\/ about the time it took us to get here.\n-      tty->print_cr(\"Recording reporting_start_time for TestUnresponsiveErrorHandler.\");\n-      record_reporting_start_time();\n-    }\n-\n-  #define TIMEOUT_TEST_STEP STEP(\"test unresponsive error reporting step\") \\\n-    if (_verbose && TestUnresponsiveErrorHandler) { os::infinite_sleep(); }\n+  STEP_IF(\"setup for test unresponsive error reporting step\",\n+      _verbose && TestUnresponsiveErrorHandler)\n+    \/\/ We record reporting_start_time for this test here because we\n+    \/\/ care about the time spent executing TIMEOUT_TEST_STEP and not\n+    \/\/ about the time it took us to get here.\n+    tty->print_cr(\"Recording reporting_start_time for TestUnresponsiveErrorHandler.\");\n+    record_reporting_start_time();\n+\n+  #define TIMEOUT_TEST_STEP STEP_IF(\"test unresponsive error reporting step\", \\\n+      _verbose && TestUnresponsiveErrorHandler) \\\n+    os::infinite_sleep();\n@@ -603,1 +616,1 @@\n-  STEP(\"test safefetch in error handler\")\n+  STEP_IF(\"test safefetch in error handler\", _verbose && TestSafeFetchInErrorHandler)\n@@ -606,11 +619,9 @@\n-    if (_verbose && TestSafeFetchInErrorHandler) {\n-      st->print_cr(\"Will test SafeFetch...\");\n-      int* const invalid_pointer = (int*)segfault_address;\n-      const int x = 0x76543210;\n-      int i1 = SafeFetch32(invalid_pointer, x);\n-      int i2 = SafeFetch32(invalid_pointer, x);\n-      if (i1 == x && i2 == x) {\n-        st->print_cr(\"SafeFetch OK.\"); \/\/ Correctly deflected and returned default pattern\n-      } else {\n-        st->print_cr(\"??\");\n-      }\n+    st->print_cr(\"Will test SafeFetch...\");\n+    int* const invalid_pointer = (int*)segfault_address;\n+    const int x = 0x76543210;\n+    int i1 = SafeFetch32(invalid_pointer, x);\n+    int i2 = SafeFetch32(invalid_pointer, x);\n+    if (i1 == x && i2 == x) {\n+      st->print_cr(\"SafeFetch OK.\"); \/\/ Correctly deflected and returned default pattern\n+    } else {\n+      st->print_cr(\"??\");\n@@ -621,35 +632,34 @@\n-\n-     switch(static_cast<unsigned int>(_id)) {\n-       case OOM_MALLOC_ERROR:\n-       case OOM_MMAP_ERROR:\n-       case OOM_MPROTECT_ERROR:\n-         if (_size) {\n-           st->print(\"# Native memory allocation \");\n-           st->print((_id == (int)OOM_MALLOC_ERROR) ? \"(malloc) failed to allocate \" :\n-                     (_id == (int)OOM_MMAP_ERROR)   ? \"(mmap) failed to map \" :\n-                                                      \"(mprotect) failed to protect \");\n-           jio_snprintf(buf, sizeof(buf), SIZE_FORMAT, _size);\n-           st->print(\"%s\", buf);\n-           st->print(\" bytes\");\n-           if (strlen(_detail_msg) > 0) {\n-             st->print(\" for \");\n-             st->print(\"%s\", _detail_msg);\n-           }\n-           st->cr();\n-         } else {\n-           if (strlen(_detail_msg) > 0) {\n-             st->print(\"# \");\n-             st->print_cr(\"%s\", _detail_msg);\n-           }\n-         }\n-         \/\/ In error file give some solutions\n-         if (_verbose) {\n-           print_oom_reasons(st);\n-         } else {\n-           return;  \/\/ that's enough for the screen\n-         }\n-         break;\n-       case INTERNAL_ERROR:\n-       default:\n-         break;\n-     }\n+    switch(static_cast<unsigned int>(_id)) {\n+      case OOM_MALLOC_ERROR:\n+      case OOM_MMAP_ERROR:\n+      case OOM_MPROTECT_ERROR:\n+        if (_size) {\n+          st->print(\"# Native memory allocation \");\n+          st->print((_id == (int)OOM_MALLOC_ERROR) ? \"(malloc) failed to allocate \" :\n+                    (_id == (int)OOM_MMAP_ERROR)   ? \"(mmap) failed to map \" :\n+                                                    \"(mprotect) failed to protect \");\n+          jio_snprintf(buf, sizeof(buf), SIZE_FORMAT, _size);\n+          st->print(\"%s\", buf);\n+          st->print(\" bytes\");\n+          if (strlen(_detail_msg) > 0) {\n+            st->print(\" for \");\n+            st->print(\"%s\", _detail_msg);\n+          }\n+          st->cr();\n+        } else {\n+          if (strlen(_detail_msg) > 0) {\n+            st->print(\"# \");\n+            st->print_cr(\"%s\", _detail_msg);\n+          }\n+        }\n+        \/\/ In error file give some solutions\n+        if (_verbose) {\n+          print_oom_reasons(st);\n+        } else {\n+          return;  \/\/ that's enough for the screen\n+        }\n+        break;\n+      case INTERNAL_ERROR:\n+      default:\n+        break;\n+    }\n@@ -658,18 +668,17 @@\n-\n-     st->print_cr(\"#\");\n-     st->print(\"#  \");\n-     \/\/ Is it an OS exception\/signal?\n-     if (os::exception_name(_id, buf, sizeof(buf))) {\n-       st->print(\"%s\", buf);\n-       st->print(\" (0x%x)\", _id);                \/\/ signal number\n-       st->print(\" at pc=\" PTR_FORMAT, p2i(_pc));\n-       if (_siginfo != NULL && os::signal_sent_by_kill(_siginfo)) {\n-         st->print(\" (sent by kill)\");\n-       }\n-     } else {\n-       if (should_report_bug(_id)) {\n-         st->print(\"Internal Error\");\n-       } else {\n-         st->print(\"Out of Memory Error\");\n-       }\n-       if (_filename != NULL && _lineno > 0) {\n+    st->print_cr(\"#\");\n+    st->print(\"#  \");\n+    \/\/ Is it an OS exception\/signal?\n+    if (os::exception_name(_id, buf, sizeof(buf))) {\n+      st->print(\"%s\", buf);\n+      st->print(\" (0x%x)\", _id);                \/\/ signal number\n+      st->print(\" at pc=\" PTR_FORMAT, p2i(_pc));\n+      if (_siginfo != NULL && os::signal_sent_by_kill(_siginfo)) {\n+        st->print(\" (sent by kill)\");\n+      }\n+    } else {\n+      if (should_report_bug(_id)) {\n+        st->print(\"Internal Error\");\n+      } else {\n+        st->print(\"Out of Memory Error\");\n+      }\n+      if (_filename != NULL && _lineno > 0) {\n@@ -677,2 +686,2 @@\n-         \/\/ In product mode chop off pathname\n-         const char *file = get_filename_only();\n+        \/\/ In product mode chop off pathname\n+        const char *file = get_filename_only();\n@@ -680,1 +689,1 @@\n-         const char *file = _filename;\n+        const char *file = _filename;\n@@ -682,5 +691,5 @@\n-         st->print(\" (%s:%d)\", file, _lineno);\n-       } else {\n-         st->print(\" (0x%x)\", _id);\n-       }\n-     }\n+        st->print(\" (%s:%d)\", file, _lineno);\n+      } else {\n+        st->print(\" (0x%x)\", _id);\n+      }\n+    }\n@@ -689,0 +698,4 @@\n+    \/\/ process id, thread id\n+    st->print(\", pid=%d\", os::current_process_id());\n+    st->print(\", tid=\" UINTX_FORMAT, os::current_thread_id());\n+    st->cr();\n@@ -690,15 +703,7 @@\n-     \/\/ process id, thread id\n-     st->print(\", pid=%d\", os::current_process_id());\n-     st->print(\", tid=\" UINTX_FORMAT, os::current_thread_id());\n-     st->cr();\n-\n-  STEP(\"printing error message\")\n-\n-     if (should_report_bug(_id)) {  \/\/ already printed the message.\n-       \/\/ error message\n-       if (strlen(_detail_msg) > 0) {\n-         st->print_cr(\"#  %s: %s\", _message ? _message : \"Error\", _detail_msg);\n-       } else if (_message) {\n-         st->print_cr(\"#  Error: %s\", _message);\n-       }\n-     }\n+  STEP_IF(\"printing error message\", should_report_bug(_id)) \/\/ already printed the message.\n+    \/\/ error message\n+    if (strlen(_detail_msg) > 0) {\n+      st->print_cr(\"#  %s: %s\", _message ? _message : \"Error\", _detail_msg);\n+    } else if (_message) {\n+      st->print_cr(\"#  Error: %s\", _message);\n+    }\n@@ -707,0 +712,1 @@\n+    report_vm_version(st, buf, sizeof(buf));\n@@ -708,13 +714,8 @@\n-     report_vm_version(st, buf, sizeof(buf));\n-\n-  STEP(\"printing problematic frame\")\n-\n-     \/\/ Print current frame if we have a context (i.e. it's a crash)\n-     if (_context) {\n-       st->print_cr(\"# Problematic frame:\");\n-       st->print(\"# \");\n-       frame fr = os::fetch_frame_from_context(_context);\n-       fr.print_on_error(st, buf, sizeof(buf));\n-       st->cr();\n-       st->print_cr(\"#\");\n-     }\n+  STEP_IF(\"printing problematic frame\", _context != nullptr)\n+    \/\/ Print current frame if we have a context (i.e. it's a crash)\n+    st->print_cr(\"# Problematic frame:\");\n+    st->print(\"# \");\n+    frame fr = os::fetch_frame_from_context(_context);\n+    fr.print_on_error(st, buf, sizeof(buf));\n+    st->cr();\n+    st->print_cr(\"#\");\n@@ -739,23 +740,2 @@\n-  STEP(\"printing bug submit message\")\n-\n-     if (should_submit_bug_report(_id) && _verbose) {\n-       print_bug_submit_message(st, _thread);\n-     }\n-\n-  STEP(\"printing summary\")\n-\n-     if (_verbose) {\n-       st->cr();\n-       st->print_cr(\"---------------  S U M M A R Y ------------\");\n-       st->cr();\n-     }\n-\n-  STEP(\"printing VM option summary\")\n-\n-     if (_verbose) {\n-       \/\/ VM options\n-       Arguments::print_summary_on(st);\n-       st->cr();\n-     }\n-\n-  STEP(\"printing summary machine and OS info\")\n+  STEP_IF(\"printing bug submit message\", should_submit_bug_report(_id) && _verbose)\n+    print_bug_submit_message(st, _thread);\n@@ -763,31 +743,4 @@\n-     if (_verbose) {\n-       os::print_summary_info(st, buf, sizeof(buf));\n-     }\n-\n-  STEP(\"printing date and time\")\n-\n-     if (_verbose) {\n-       os::print_date_and_time(st, buf, sizeof(buf));\n-     }\n-\n-  STEP(\"printing thread\")\n-\n-     if (_verbose) {\n-       st->cr();\n-       st->print_cr(\"---------------  T H R E A D  ---------------\");\n-       st->cr();\n-     }\n-\n-  STEP(\"printing current thread\")\n-\n-     \/\/ current thread\n-     if (_verbose) {\n-       if (_thread) {\n-         st->print(\"Current thread (\" PTR_FORMAT \"):  \", p2i(_thread));\n-         _thread->print_on_error(st, buf, sizeof(buf));\n-         st->cr();\n-       } else {\n-         st->print_cr(\"Current thread is native thread\");\n-       }\n-       st->cr();\n-     }\n+  STEP_IF(\"printing summary\", _verbose)\n+    st->cr();\n+    st->print_cr(\"---------------  S U M M A R Y ------------\");\n+    st->cr();\n@@ -795,1 +748,4 @@\n-  STEP(\"printing current compile task\")\n+  STEP_IF(\"printing VM option summary\", _verbose)\n+    \/\/ VM options\n+    Arguments::print_summary_on(st);\n+    st->cr();\n@@ -797,118 +753,2 @@\n-     if (_verbose && _thread && _thread->is_Compiler_thread()) {\n-        CompilerThread* t = (CompilerThread*)_thread;\n-        if (t->task()) {\n-           st->cr();\n-           st->print_cr(\"Current CompileTask:\");\n-           t->task()->print_line_on_error(st, buf, sizeof(buf));\n-           st->cr();\n-        }\n-     }\n-\n-  STEP(\"printing stack bounds\")\n-\n-     if (_verbose) {\n-       st->print(\"Stack: \");\n-\n-       address stack_top;\n-       size_t stack_size;\n-\n-       if (_thread) {\n-          stack_top = _thread->stack_base();\n-          stack_size = _thread->stack_size();\n-       } else {\n-          stack_top = os::current_stack_base();\n-          stack_size = os::current_stack_size();\n-       }\n-\n-       address stack_bottom = stack_top - stack_size;\n-       st->print(\"[\" PTR_FORMAT \",\" PTR_FORMAT \"]\", p2i(stack_bottom), p2i(stack_top));\n-\n-       frame fr = _context ? os::fetch_frame_from_context(_context)\n-                           : os::current_frame();\n-\n-       if (fr.sp()) {\n-         st->print(\",  sp=\" PTR_FORMAT, p2i(fr.sp()));\n-         size_t free_stack_size = pointer_delta(fr.sp(), stack_bottom, 1024);\n-         st->print(\",  free space=\" SIZE_FORMAT \"k\", free_stack_size);\n-       }\n-\n-       st->cr();\n-     }\n-\n-  STEP(\"printing native stack (with source info)\")\n-\n-   if (_verbose) {\n-     if (os::platform_print_native_stack(st, _context, buf, sizeof(buf))) {\n-       \/\/ We have printed the native stack in platform-specific code\n-       \/\/ Windows\/x64 needs special handling.\n-     } else {\n-       frame fr = _context ? os::fetch_frame_from_context(_context)\n-                           : os::current_frame();\n-\n-       print_native_stack(st, fr, _thread, true, buf, sizeof(buf));\n-       _print_native_stack_used = true;\n-     }\n-     print_native_stack_succeeded = true;\n-   }\n-\n-  STEP(\"retry printing native stack (no source info)\")\n-\n-   if (_verbose && !print_native_stack_succeeded) {\n-     st->cr();\n-     st->print_cr(\"Retrying call stack printing without source information...\");\n-     frame fr = _context ? os::fetch_frame_from_context(_context) : os::current_frame();\n-     print_native_stack(st, fr, _thread, false, buf, sizeof(buf));\n-     _print_native_stack_used = true;\n-   }\n-\n-  STEP(\"printing Java stack\")\n-\n-     if (_verbose && _thread && _thread->is_Java_thread()) {\n-       print_stack_trace(st, JavaThread::cast(_thread), buf, sizeof(buf));\n-     }\n-\n-  STEP(\"printing target Java thread stack\")\n-\n-     \/\/ printing Java thread stack trace if it is involved in GC crash\n-     if (_verbose && _thread && (_thread->is_Named_thread())) {\n-       Thread* thread = ((NamedThread *)_thread)->processed_thread();\n-       if (thread != NULL && thread->is_Java_thread()) {\n-         JavaThread* jt = JavaThread::cast(thread);\n-         st->print_cr(\"JavaThread \" PTR_FORMAT \" (nid = %d) was being processed\", p2i(jt), jt->osthread()->thread_id());\n-         print_stack_trace(st, jt, buf, sizeof(buf), true);\n-       }\n-     }\n-\n-  STEP(\"printing siginfo\")\n-\n-     \/\/ signal no, signal code, address that caused the fault\n-     if (_verbose && _siginfo) {\n-       st->cr();\n-       os::print_siginfo(st, _siginfo);\n-       st->cr();\n-     }\n-\n-  STEP(\"CDS archive access warning\")\n-\n-     \/\/ Print an explicit hint if we crashed on access to the CDS archive.\n-     if (_verbose && _siginfo) {\n-       check_failing_cds_access(st, _siginfo);\n-       st->cr();\n-     }\n-\n-  STEP(\"printing registers\")\n-\n-     \/\/ printing registers\n-     if (_verbose && _context) {\n-       os::print_context(st, _context);\n-       st->cr();\n-     }\n-\n-  STEP(\"printing register info\")\n-\n-     \/\/ decode register contents if possible\n-     if (_verbose && _context && _thread && Universe::is_fully_initialized()) {\n-       ResourceMark rm(_thread);\n-       os::print_register_info(st, _context);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing summary machine and OS info\", _verbose)\n+    os::print_summary_info(st, buf, sizeof(buf));\n@@ -916,1 +756,2 @@\n-  STEP(\"printing top of stack, instructions near pc\")\n+  STEP_IF(\"printing date and time\", _verbose)\n+    os::print_date_and_time(st, buf, sizeof(buf));\n@@ -918,24 +759,4 @@\n-     \/\/ printing top of stack, instructions near pc\n-     if (_verbose && _context) {\n-       os::print_tos_pc(st, _context);\n-       st->cr();\n-     }\n-\n-  STEP(\"inspecting top of stack\")\n-\n-     \/\/ decode stack contents if possible\n-     if (_verbose && _context && _thread && Universe::is_fully_initialized()) {\n-       frame fr = os::fetch_frame_from_context(_context);\n-       const int slots = 8;\n-       const intptr_t *start = fr.sp();\n-       const intptr_t *end = start + slots;\n-       if (is_aligned(start, sizeof(intptr_t)) && os::is_readable_range(start, end)) {\n-         st->print_cr(\"Stack slot to memory mapping:\");\n-         for (int i = 0; i < slots; ++i) {\n-           st->print(\"stack at sp + %d slots: \", i);\n-           ResourceMark rm(_thread);\n-           os::print_location(st, *(start + i));\n-         }\n-       }\n-       st->cr();\n-     }\n+  STEP_IF(\"printing thread\", _verbose)\n+    st->cr();\n+    st->print_cr(\"---------------  T H R E A D  ---------------\");\n+    st->cr();\n@@ -943,1 +764,10 @@\n-  STEP(\"printing code blobs if possible\")\n+  STEP_IF(\"printing current thread\", _verbose)\n+    \/\/ current thread\n+    if (_thread) {\n+      st->print(\"Current thread (\" PTR_FORMAT \"):  \", p2i(_thread));\n+      _thread->print_on_error(st, buf, sizeof(buf));\n+      st->cr();\n+    } else {\n+      st->print_cr(\"Current thread is native thread\");\n+    }\n+    st->cr();\n@@ -945,55 +775,9 @@\n-     if (_verbose) {\n-       const int printed_capacity = max_error_log_print_code;\n-       address printed[printed_capacity];\n-       printed[0] = nullptr;\n-       int printed_len = 0;\n-       \/\/ Even though ErrorLogPrintCodeLimit is ranged checked\n-       \/\/ during argument parsing, there's no way to prevent it\n-       \/\/ subsequently (i.e., after parsing) being set to a\n-       \/\/ value outside the range.\n-       int limit = MIN2(ErrorLogPrintCodeLimit, printed_capacity);\n-       if (limit > 0) {\n-         \/\/ Scan the native stack\n-         if (!_print_native_stack_used) {\n-           \/\/ Only try to print code of the crashing frame since\n-           \/\/ the native stack cannot be walked with next_frame.\n-           if (print_code(st, _thread, _pc, true, printed, printed_capacity)) {\n-             printed_len++;\n-           }\n-         } else {\n-           frame fr = _context ? os::fetch_frame_from_context(_context)\n-                               : os::current_frame();\n-           while (printed_len < limit && fr.pc() != nullptr) {\n-             if (print_code(st, _thread, fr.pc(), fr.pc() == _pc, printed, printed_capacity)) {\n-               printed_len++;\n-             }\n-             fr = next_frame(fr, _thread);\n-           }\n-         }\n-\n-         \/\/ Scan the Java stack\n-         if (_thread != nullptr && _thread->is_Java_thread()) {\n-           JavaThread* jt = JavaThread::cast(_thread);\n-           if (jt->has_last_Java_frame()) {\n-             for (StackFrameStream sfs(jt, true \/* update *\/, true \/* process_frames *\/); printed_len < limit && !sfs.is_done(); sfs.next()) {\n-               address pc = sfs.current()->pc();\n-               if (print_code(st, _thread, pc, pc == _pc, printed, printed_capacity)) {\n-                 printed_len++;\n-               }\n-             }\n-           }\n-         }\n-       }\n-     }\n-\n-  STEP(\"printing VM operation\")\n-\n-     if (_verbose && _thread && _thread->is_VM_thread()) {\n-        VMThread* t = (VMThread*)_thread;\n-        VM_Operation* op = t->vm_operation();\n-        if (op) {\n-          op->print_on_error(st);\n-          st->cr();\n-          st->cr();\n-        }\n-     }\n+  STEP_IF(\"printing current compile task\",\n+      _verbose && _thread != nullptr && _thread->is_Compiler_thread())\n+    CompilerThread* t = (CompilerThread*)_thread;\n+    if (t->task()) {\n+        st->cr();\n+        st->print_cr(\"Current CompileTask:\");\n+        t->task()->print_line_on_error(st, buf, sizeof(buf));\n+        st->cr();\n+    }\n@@ -1001,1 +785,2 @@\n-  STEP(\"printing process\")\n+  STEP_IF(\"printing stack bounds\", _verbose)\n+    st->print(\"Stack: \");\n@@ -1003,5 +788,2 @@\n-     if (_verbose) {\n-       st->cr();\n-       st->print_cr(\"---------------  P R O C E S S  ---------------\");\n-       st->cr();\n-     }\n+    address stack_top;\n+    size_t stack_size;\n@@ -1009,1 +791,7 @@\n-  STEP(\"printing user info\")\n+    if (_thread) {\n+      stack_top = _thread->stack_base();\n+      stack_size = _thread->stack_size();\n+    } else {\n+      stack_top = os::current_stack_base();\n+      stack_size = os::current_stack_size();\n+    }\n@@ -1011,3 +799,2 @@\n-     if (ExtensiveErrorReports && _verbose) {\n-       os::print_user_info(st);\n-     }\n+    address stack_bottom = stack_top - stack_size;\n+    st->print(\"[\" PTR_FORMAT \",\" PTR_FORMAT \"]\", p2i(stack_bottom), p2i(stack_top));\n@@ -1015,1 +802,2 @@\n-  STEP(\"printing all threads\")\n+    frame fr = _context ? os::fetch_frame_from_context(_context)\n+                        : os::current_frame();\n@@ -1017,5 +805,5 @@\n-     \/\/ all threads\n-     if (_verbose && _thread) {\n-       Threads::print_on_error(st, _thread, buf, sizeof(buf));\n-       st->cr();\n-     }\n+    if (fr.sp()) {\n+      st->print(\",  sp=\" PTR_FORMAT, p2i(fr.sp()));\n+      size_t free_stack_size = pointer_delta(fr.sp(), stack_bottom, 1024);\n+      st->print(\",  free space=\" SIZE_FORMAT \"k\", free_stack_size);\n+    }\n@@ -1023,1 +811,1 @@\n-  STEP(\"printing VM state\")\n+    st->cr();\n@@ -1025,3 +813,7 @@\n-     if (_verbose) {\n-       \/\/ Safepoint state\n-       st->print(\"VM state: \");\n+  STEP_IF(\"printing native stack (with source info)\", _verbose)\n+    if (os::platform_print_native_stack(st, _context, buf, sizeof(buf))) {\n+      \/\/ We have printed the native stack in platform-specific code\n+      \/\/ Windows\/x64 needs special handling.\n+    } else {\n+      frame fr = _context ? os::fetch_frame_from_context(_context)\n+                          : os::current_frame();\n@@ -1029,3 +821,4 @@\n-       if (SafepointSynchronize::is_synchronizing()) st->print(\"synchronizing\");\n-       else if (SafepointSynchronize::is_at_safepoint()) st->print(\"at safepoint\");\n-       else st->print(\"not at safepoint\");\n+      print_native_stack(st, fr, _thread, true, buf, sizeof(buf));\n+      _print_native_stack_used = true;\n+    }\n+    print_native_stack_succeeded = true;\n@@ -1033,11 +826,11 @@\n-       \/\/ Also see if error occurred during initialization or shutdown\n-       if (!Universe::is_fully_initialized()) {\n-         st->print(\" (not fully initialized)\");\n-       } else if (VM_Exit::vm_exited()) {\n-         st->print(\" (shutting down)\");\n-       } else {\n-         st->print(\" (normal execution)\");\n-       }\n-       st->cr();\n-       st->cr();\n-     }\n+  STEP_IF(\"retry printing native stack (no source info)\", _verbose && !print_native_stack_succeeded)\n+    st->cr();\n+    st->print_cr(\"Retrying call stack printing without source information...\");\n+    frame fr = _context ? os::fetch_frame_from_context(_context) : os::current_frame();\n+    print_native_stack(st, fr, _thread, false, buf, sizeof(buf));\n+    _print_native_stack_used = true;\n+\n+  STEP_IF(\"printing Java stack\", _verbose && _thread && _thread->is_Java_thread())\n+    if (_verbose && _thread && _thread->is_Java_thread()) {\n+      print_stack_trace(st, JavaThread::cast(_thread), buf, sizeof(buf));\n+    }\n@@ -1045,1 +838,9 @@\n-  STEP(\"printing owned locks on error\")\n+  STEP_IF(\"printing target Java thread stack\",\n+      _verbose && _thread != nullptr && (_thread->is_Named_thread()))\n+    \/\/ printing Java thread stack trace if it is involved in GC crash\n+    Thread* thread = ((NamedThread *)_thread)->processed_thread();\n+    if (thread != NULL && thread->is_Java_thread()) {\n+      JavaThread* jt = JavaThread::cast(thread);\n+      st->print_cr(\"JavaThread \" PTR_FORMAT \" (nid = %d) was being processed\", p2i(jt), jt->osthread()->thread_id());\n+      print_stack_trace(st, jt, buf, sizeof(buf), true);\n+    }\n@@ -1047,5 +848,5 @@\n-     \/\/ mutexes\/monitors that currently have an owner\n-     if (_verbose) {\n-       print_owned_locks_on_error(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing siginfo\", _verbose && _siginfo != nullptr)\n+    \/\/ signal no, signal code, address that caused the fault\n+    st->cr();\n+    os::print_siginfo(st, _siginfo);\n+    st->cr();\n@@ -1053,1 +854,4 @@\n-  STEP(\"printing number of OutOfMemoryError and StackOverflow exceptions\")\n+  STEP_IF(\"CDS archive access warning\", _verbose && _siginfo != nullptr)\n+    \/\/ Print an explicit hint if we crashed on access to the CDS archive.\n+    check_failing_cds_access(st, _siginfo);\n+    st->cr();\n@@ -1055,5 +859,4 @@\n-     if (_verbose && Exceptions::has_exception_counts()) {\n-       st->print_cr(\"OutOfMemory and StackOverflow Exception counts:\");\n-       Exceptions::print_exception_counts_on_error(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing registers\", _verbose && _context != nullptr)\n+    \/\/ printing registers\n+    os::print_context(st, _context);\n+    st->cr();\n@@ -1061,2 +864,6 @@\n-#ifdef _LP64\n-  STEP(\"printing compressed oops mode\")\n+  STEP_IF(\"printing register info\",\n+      _verbose && _context != nullptr && _thread != nullptr && Universe::is_fully_initialized())\n+    \/\/ decode register contents if possible\n+    ResourceMark rm(_thread);\n+    os::print_register_info(st, _context);\n+    st->cr();\n@@ -1064,4 +871,0 @@\n-     if (_verbose && UseCompressedOops) {\n-       CompressedOops::print_mode(st);\n-       st->cr();\n-     }\n@@ -1069,1 +872,1 @@\n-  STEP(\"printing compressed klass pointers mode\")\n+  STEP(\"printing top of stack, instructions near pc\")\n@@ -1071,7 +874,4 @@\n-     if (_verbose && UseCompressedClassPointers) {\n-       CDS_ONLY(MetaspaceShared::print_on(st);)\n-       Metaspace::print_compressed_class_space(st);\n-       CompressedKlassPointers::print_mode(st);\n-       st->cr();\n-     }\n-#endif\n+  STEP_IF(\"printing top of stack, instructions near pc\", _verbose && _context)\n+    \/\/ printing top of stack, instructions near pc\n+    os::print_tos_pc(st, _context);\n+    st->cr();\n@@ -1079,1 +879,16 @@\n-  STEP(\"printing heap information\")\n+  STEP_IF(\"inspecting top of stack\",\n+      _verbose && _context != nullptr && _thread != nullptr && Universe::is_fully_initialized())\n+    \/\/ decode stack contents if possible\n+    frame fr = os::fetch_frame_from_context(_context);\n+    const int slots = 8;\n+    const intptr_t *start = fr.sp();\n+    const intptr_t *end = start + slots;\n+    if (is_aligned(start, sizeof(intptr_t)) && os::is_readable_range(start, end)) {\n+      st->print_cr(\"Stack slot to memory mapping:\");\n+      for (int i = 0; i < slots; ++i) {\n+        st->print(\"stack at sp + %d slots: \", i);\n+        ResourceMark rm(_thread);\n+        os::print_location(st, *(start + i));\n+      }\n+    }\n+    st->cr();\n@@ -1081,2 +896,1 @@\n-     if (_verbose) {\n-       GCLogPrecious::print_on_error(st);\n+  STEP(\"printing code blobs if possible\")\n@@ -1084,4 +898,28 @@\n-       if (Universe::heap() != NULL) {\n-         Universe::heap()->print_on_error(st);\n-         st->cr();\n-       }\n+  STEP_IF(\"printing code blobs if possible\", _verbose)\n+    const int printed_capacity = max_error_log_print_code;\n+    address printed[printed_capacity];\n+    printed[0] = nullptr;\n+    int printed_len = 0;\n+    \/\/ Even though ErrorLogPrintCodeLimit is ranged checked\n+    \/\/ during argument parsing, there's no way to prevent it\n+    \/\/ subsequently (i.e., after parsing) being set to a\n+    \/\/ value outside the range.\n+    int limit = MIN2(ErrorLogPrintCodeLimit, printed_capacity);\n+    if (limit > 0) {\n+      \/\/ Scan the native stack\n+      if (!_print_native_stack_used) {\n+        \/\/ Only try to print code of the crashing frame since\n+        \/\/ the native stack cannot be walked with next_frame.\n+        if (print_code(st, _thread, _pc, true, printed, printed_capacity)) {\n+          printed_len++;\n+        }\n+      } else {\n+        frame fr = _context ? os::fetch_frame_from_context(_context)\n+                            : os::current_frame();\n+        while (printed_len < limit && fr.pc() != nullptr) {\n+          if (print_code(st, _thread, fr.pc(), fr.pc() == _pc, printed, printed_capacity)) {\n+            printed_len++;\n+          }\n+          fr = next_frame(fr, _thread);\n+        }\n+      }\n@@ -1089,5 +927,13 @@\n-       if (Universe::is_fully_initialized()) {\n-         st->print_cr(\"Polling page: \" PTR_FORMAT, p2i(SafepointMechanism::get_polling_page()));\n-         st->cr();\n-       }\n-     }\n+      \/\/ Scan the Java stack\n+      if (_thread != nullptr && _thread->is_Java_thread()) {\n+        JavaThread* jt = JavaThread::cast(_thread);\n+        if (jt->has_last_Java_frame()) {\n+          for (StackFrameStream sfs(jt, true \/* update *\/, true \/* process_frames *\/); printed_len < limit && !sfs.is_done(); sfs.next()) {\n+            address pc = sfs.current()->pc();\n+            if (print_code(st, _thread, pc, pc == _pc, printed, printed_capacity)) {\n+              printed_len++;\n+            }\n+          }\n+        }\n+      }\n+    }\n@@ -1095,1 +941,8 @@\n-  STEP(\"printing metaspace information\")\n+  STEP_IF(\"printing VM operation\", _verbose && _thread != nullptr && _thread->is_VM_thread())\n+    VMThread* t = (VMThread*)_thread;\n+    VM_Operation* op = t->vm_operation();\n+    if (op) {\n+      op->print_on_error(st);\n+      st->cr();\n+      st->cr();\n+    }\n@@ -1097,4 +950,1 @@\n-     if (_verbose && Universe::is_fully_initialized()) {\n-       st->print_cr(\"Metaspace:\");\n-       MetaspaceUtils::print_basic_report(st, 0);\n-     }\n+  STEP(\"printing process\")\n@@ -1102,1 +952,4 @@\n-  STEP(\"printing code cache information\")\n+  STEP_IF(\"printing process\", _verbose)\n+    st->cr();\n+    st->print_cr(\"---------------  P R O C E S S  ---------------\");\n+    st->cr();\n@@ -1104,5 +957,2 @@\n-     if (_verbose && Universe::is_fully_initialized()) {\n-       \/\/ print code cache information before vm abort\n-       CodeCache::print_summary(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing user info\", ExtensiveErrorReports && _verbose)\n+    os::print_user_info(st);\n@@ -1110,1 +960,4 @@\n-  STEP(\"printing ring buffers\")\n+  STEP_IF(\"printing all threads\", _verbose && _thread)\n+    \/\/ all threads\n+    Threads::print_on_error(st, _thread, buf, sizeof(buf));\n+    st->cr();\n@@ -1112,4 +965,3 @@\n-     if (_verbose) {\n-       Events::print_all(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing VM state\", _verbose)\n+    \/\/ Safepoint state\n+    st->print(\"VM state: \");\n@@ -1117,1 +969,3 @@\n-  STEP(\"printing dynamic libraries\")\n+    if (SafepointSynchronize::is_synchronizing()) st->print(\"synchronizing\");\n+    else if (SafepointSynchronize::is_at_safepoint()) st->print(\"at safepoint\");\n+    else st->print(\"not at safepoint\");\n@@ -1119,5 +973,10 @@\n-     if (_verbose) {\n-       \/\/ dynamic libraries, or memory map\n-       os::print_dll_info(st);\n-       st->cr();\n-     }\n+    \/\/ Also see if error occurred during initialization or shutdown\n+    if (!Universe::is_fully_initialized()) {\n+      st->print(\" (not fully initialized)\");\n+    } else if (VM_Exit::vm_exited()) {\n+      st->print(\" (shutting down)\");\n+    } else {\n+      st->print(\" (normal execution)\");\n+    }\n+    st->cr();\n+    st->cr();\n@@ -1125,1 +984,4 @@\n-  STEP(\"printing native decoder state\")\n+  STEP_IF(\"printing owned locks on error\", _verbose)\n+    \/\/ mutexes\/monitors that currently have an owner\n+    print_owned_locks_on_error(st);\n+    st->cr();\n@@ -1127,4 +989,5 @@\n-     if (_verbose) {\n-       Decoder::print_state_on(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing number of OutOfMemoryError and StackOverflow exceptions\",\n+      _verbose && Exceptions::has_exception_counts())\n+    st->print_cr(\"OutOfMemory and StackOverflow Exception counts:\");\n+    Exceptions::print_exception_counts_on_error(st);\n+    st->cr();\n@@ -1132,1 +995,4 @@\n-  STEP(\"printing VM options\")\n+#ifdef _LP64\n+  STEP_IF(\"printing compressed oops mode\", _verbose && UseCompressedOops)\n+    CompressedOops::print_mode(st);\n+    st->cr();\n@@ -1134,5 +1000,6 @@\n-     if (_verbose) {\n-       \/\/ VM options\n-       Arguments::print_on(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing compressed klass pointers mode\", _verbose && UseCompressedClassPointers)\n+    CDS_ONLY(MetaspaceShared::print_on(st);)\n+    Metaspace::print_compressed_class_space(st);\n+    CompressedKlassPointers::print_mode(st);\n+    st->cr();\n+#endif\n@@ -1140,1 +1007,2 @@\n-  STEP(\"printing flags\")\n+  STEP_IF(\"printing heap information\", _verbose)\n+    GCLogPrecious::print_on_error(st);\n@@ -1142,6 +1010,2 @@\n-    if (_verbose) {\n-      JVMFlag::printFlags(\n-        st,\n-        true, \/\/ with comments\n-        false, \/\/ no ranges\n-        true); \/\/ skip defaults\n+    if (Universe::heap() != NULL) {\n+      Universe::heap()->print_on_error(st);\n@@ -1151,11 +1015,2 @@\n-  STEP(\"printing warning if internal testing API used\")\n-\n-     if (WhiteBox::used()) {\n-       st->print_cr(\"Unsupported internal testing APIs have been used.\");\n-       st->cr();\n-     }\n-\n-  STEP(\"printing log configuration\")\n-    if (_verbose){\n-      st->print_cr(\"Logging:\");\n-      LogConfiguration::describe_current_configuration(st);\n+    if (Universe::is_fully_initialized()) {\n+      st->print_cr(\"Polling page: \" PTR_FORMAT, p2i(SafepointMechanism::get_polling_page()));\n@@ -1165,1 +1020,12 @@\n-  STEP(\"printing all environment variables\")\n+  STEP_IF(\"printing metaspace information\", _verbose && Universe::is_fully_initialized())\n+    st->print_cr(\"Metaspace:\");\n+    MetaspaceUtils::print_basic_report(st, 0);\n+\n+  STEP_IF(\"printing code cache information\", _verbose && Universe::is_fully_initialized())\n+    \/\/ print code cache information before vm abort\n+    CodeCache::print_summary(st);\n+    st->cr();\n+\n+  STEP_IF(\"printing ring buffers\", _verbose)\n+    Events::print_all(st);\n+    st->cr();\n@@ -1167,4 +1033,4 @@\n-     if (_verbose) {\n-       os::print_environment_variables(st, env_list);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing dynamic libraries\", _verbose)\n+    \/\/ dynamic libraries, or memory map\n+    os::print_dll_info(st);\n+    st->cr();\n@@ -1172,1 +1038,3 @@\n-  STEP(\"printing locale settings\")\n+  STEP_IF(\"printing native decoder state\", _verbose)\n+    Decoder::print_state_on(st);\n+    st->cr();\n@@ -1174,4 +1042,4 @@\n-     if (_verbose) {\n-       os::print_active_locale(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing VM options\", _verbose)\n+    \/\/ VM options\n+    Arguments::print_on(st);\n+    st->cr();\n@@ -1179,1 +1047,7 @@\n-  STEP(\"printing signal handlers\")\n+  STEP_IF(\"printing flags\", _verbose)\n+    JVMFlag::printFlags(\n+      st,\n+      true, \/\/ with comments\n+      false, \/\/ no ranges\n+      true); \/\/ skip defaults\n+    st->cr();\n@@ -1181,4 +1055,3 @@\n-     if (_verbose) {\n-       os::print_signal_handlers(st, buf, sizeof(buf));\n-       st->cr();\n-     }\n+  STEP_IF(\"printing warning if internal testing API used\", WhiteBox::used())\n+    st->print_cr(\"Unsupported internal testing APIs have been used.\");\n+    st->cr();\n@@ -1186,4 +1059,4 @@\n-  STEP(\"Native Memory Tracking\")\n-     if (_verbose) {\n-       MemTracker::error_report(st);\n-     }\n+  STEP_IF(\"printing log configuration\", _verbose)\n+    st->print_cr(\"Logging:\");\n+    LogConfiguration::describe_current_configuration(st);\n+    st->cr();\n@@ -1191,1 +1064,3 @@\n-  STEP(\"printing system\")\n+  STEP_IF(\"printing all environment variables\", _verbose)\n+    os::print_environment_variables(st, env_list);\n+    st->cr();\n@@ -1193,5 +1068,3 @@\n-     if (_verbose) {\n-       st->cr();\n-       st->print_cr(\"---------------  S Y S T E M  ---------------\");\n-       st->cr();\n-     }\n+  STEP_IF(\"printing locale settings\", _verbose)\n+    os::print_active_locale(st);\n+    st->cr();\n@@ -1199,1 +1072,3 @@\n-  STEP(\"printing OS information\")\n+  STEP_IF(\"printing signal handlers\", _verbose)\n+    os::print_signal_handlers(st, buf, sizeof(buf));\n+    st->cr();\n@@ -1201,4 +1076,2 @@\n-     if (_verbose) {\n-       os::print_os_info(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"Native Memory Tracking\", _verbose)\n+    MemTracker::error_report(st);\n@@ -1206,5 +1079,4 @@\n-  STEP(\"printing CPU info\")\n-     if (_verbose) {\n-       os::print_cpu_info(st, buf, sizeof(buf));\n-       st->cr();\n-     }\n+  STEP_IF(\"printing system\", _verbose)\n+    st->cr();\n+    st->print_cr(\"---------------  S Y S T E M  ---------------\");\n+    st->cr();\n@@ -1212,1 +1084,3 @@\n-  STEP(\"printing memory info\")\n+  STEP_IF(\"printing OS information\", _verbose)\n+    os::print_os_info(st);\n+    st->cr();\n@@ -1214,4 +1088,3 @@\n-     if (_verbose) {\n-       os::print_memory_info(st);\n-       st->cr();\n-     }\n+  STEP_IF(\"printing CPU info\", _verbose)\n+    os::print_cpu_info(st, buf, sizeof(buf));\n+    st->cr();\n@@ -1219,1 +1092,3 @@\n-  STEP(\"printing internal vm info\")\n+  STEP_IF(\"printing memory info\", _verbose)\n+    os::print_memory_info(st);\n+    st->cr();\n@@ -1221,4 +1096,3 @@\n-     if (_verbose) {\n-       st->print_cr(\"vm_info: %s\", VM_Version::internal_vm_info_string());\n-       st->cr();\n-     }\n+  STEP_IF(\"printing internal vm info\", _verbose)\n+    st->print_cr(\"vm_info: %s\", VM_Version::internal_vm_info_string());\n+    st->cr();\n@@ -1227,5 +1101,2 @@\n-  STEP(\"printing end marker\")\n-\n-     if (_verbose) {\n-       st->print_cr(\"END.\");\n-     }\n+  STEP_IF(\"printing end marker\", _verbose)\n+    st->print_cr(\"END.\");\n@@ -1236,0 +1107,1 @@\n+# undef STEP_IF\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":436,"deletions":564,"binary":false,"changes":1000,"status":"modified"}]}