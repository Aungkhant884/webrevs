{"files":[{"patch":"@@ -2853,0 +2853,4 @@\n+     * @implSpec\n+     * This method is equivalent to {@link #externalSubmit(ForkJoinTask)}\n+     * when called from a thread that is not in this pool.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -142,1 +142,2 @@\n-     * {@return the approximate number of tasks in the thread's queue}\n+     * {@return a (non-negative) estimate of the number of tasks in the\n+     * thread's queue}\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinWorkerThread.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -125,0 +125,27 @@\n+    \/**\n+     * Test that tasks submitted with submit(ForkJoinTask) are pushed to a\n+     * submission queue.\n+     *\/\n+    public void testSubmit() throws Exception {\n+        try (var pool = new ForkJoinPool(1)) {\n+            ForkJoinWorkerThread worker = submitBusyTask(pool);\n+            try {\n+                assertTrue(worker.getQueuedTaskCount() == 0);\n+                assertTrue(pool.getQueuedTaskCount() == 0);\n+                assertTrue(pool.getQueuedSubmissionCount() == 0);\n+\n+                for (int count = 1; count <= 3; count++) {\n+                    var task = ForkJoinTask.adapt(() -> { });\n+                    pool.submit(task);\n+\n+                    \/\/ task should be in submission queue\n+                    assertTrue(worker.getQueuedTaskCount() == 0);\n+                    assertTrue(pool.getQueuedTaskCount() == 0);\n+                    assertTrue(pool.getQueuedSubmissionCount() == count);\n+                }\n+            } finally {\n+                LockSupport.unpark(worker);\n+            }\n+        }\n+    }\n+\n@@ -139,1 +166,1 @@\n-                    \/\/ task should be pushed to this thread's task queue\n+                    \/\/ task should be in this thread's task queue\n@@ -155,12 +182,2 @@\n-            \/\/ submit task to keep one worker thread active\n-            var ref = new AtomicReference<ForkJoinWorkerThread>();\n-            pool.submit(() -> {\n-                ref.set((ForkJoinWorkerThread) Thread.currentThread());\n-                LockSupport.park();\n-            });\n-            ForkJoinWorkerThread t;\n-            while ((t = ref.get()) == null) {\n-                Thread.sleep(20);\n-            }\n-            ForkJoinWorkerThread worker1 = t;\n-\n+            \/\/ keep one worker thread active\n+            ForkJoinWorkerThread worker1 = submitBusyTask(pool);\n@@ -173,1 +190,1 @@\n-                        \/\/ task should be pushed to this thread's task queue\n+                        \/\/ task should be in this thread's task queue\n@@ -185,0 +202,17 @@\n+\n+    \/**\n+     * Submits a task to the pool, returning the worker thread that runs the\n+     * task. The task runs until the thread is unparked.\n+     *\/\n+    static ForkJoinWorkerThread submitBusyTask(ForkJoinPool pool) throws Exception {\n+        var ref = new AtomicReference<ForkJoinWorkerThread>();\n+        pool.submit(() -> {\n+            ref.set((ForkJoinWorkerThread) Thread.currentThread());\n+            LockSupport.park();\n+        });\n+        ForkJoinWorkerThread worker;\n+        while ((worker = ref.get()) == null) {\n+            Thread.sleep(20);\n+        }\n+        return worker;\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPool20Test.java","additions":48,"deletions":14,"binary":false,"changes":62,"status":"modified"}]}