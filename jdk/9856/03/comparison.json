{"files":[{"patch":"@@ -511,1 +511,0 @@\n-java\/io\/File\/GetXSpace.java                                     8291911 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    private static final Pattern DF_PATTERN = Pattern.compile(\"([^\\\\s]+)\\\\s+(\\\\d+)\\\\s+\\\\d+\\\\s+(\\\\d+)\\\\s+\\\\d+%\\\\s+([^\\\\s].*)\\n\");\n+    private static final Pattern DF_PATTERN = Pattern.compile(\"([^\\\\s]+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+\\\\d+%\\\\s+([^\\\\s].*)\\n\");\n@@ -106,1 +106,2 @@\n-        private final long free;\n+        private final long used;\n+        private final long available;\n@@ -108,1 +109,2 @@\n-        Space(String total, String free, String name) {\n+        Space(String name, String total, String used, String available) {\n+            this.name = name;\n@@ -111,1 +113,2 @@\n-                this.free = Long.parseLong(free) * KSIZE;\n+                this.used = Long.parseLong(used) * KSIZE;\n+                this.available = Long.parseLong(available) * KSIZE;\n@@ -115,1 +118,0 @@\n-            this.name = name;\n@@ -120,1 +122,3 @@\n-        long free() { return free; }\n+        long used() { return used; }\n+        long available() { return available; }\n+        long free() { return total - used; }\n@@ -122,1 +126,2 @@\n-            return ((freeSpace >= (free \/ 10)) && (freeSpace <= (free * 10)));\n+            return ((freeSpace >= (available \/ 10)) &&\n+                    (freeSpace <= (available * 10)));\n@@ -125,1 +130,1 @@\n-            return String.format(\"%s (%d\/%d)\", name, free, total);\n+            return String.format(\"%s (%d\/%d\/%d)\", name, total, used, available);\n@@ -129,0 +134,18 @@\n+    private static void diskFree() throws IOException {\n+        ArrayList<Space> al = new ArrayList<>();\n+\n+        String cmd = \"fsutil volume diskFree C:\\\\\";\n+        StringBuilder sb = new StringBuilder();\n+        Process p = Runtime.getRuntime().exec(cmd);\n+        try (BufferedReader in = p.inputReader()) {\n+            String s;\n+            int i = 0;\n+            while ((s = in.readLine()) != null) {\n+                \/\/ skip header\n+                if (i++ == 0) continue;\n+                sb.append(s).append(\"\\n\");\n+            }\n+        }\n+        out.println(sb);\n+    }\n+\n@@ -155,1 +178,1 @@\n-                        name = Platform.isWindows() ? m.group(1) : m.group(4);\n+                        name = Platform.isWindows() ? m.group(1) : m.group(5);\n@@ -157,1 +180,1 @@\n-                    al.add(new Space(m.group(2), m.group(3), name));\n+                    al.add(new Space(name, m.group(2), m.group(3), m.group(4)));\n@@ -170,1 +193,1 @@\n-            al.add(new Space(\"0\", \"0\", name));\n+            al.add(new Space(name, \"0\", \"0\", \"0\"));\n@@ -212,2 +235,2 @@\n-        String fmt = \"  %-4s total= %12d free = %12d usable = %12d%n\";\n-        out.format(fmt, \"df\", s.total(), 0, s.free());\n+        String fmt = \"  %-4s total = %12d free = %12d usable = %12d%n\";\n+        out.format(fmt, \"df\", s.total(), s.free(), s.available());\n@@ -239,3 +262,16 @@\n-            if (!Platform.isOSX() || blockSize != 512 || numBlocks % 2 == 0\n-                || ts - s.total() != 512) {\n-                fail(s.name(), s.total(), \"!=\", ts);\n+            if (!Platform.isOSX() || blockSize != 512 || numBlocks % 2 == 0 ||\n+                ts - s.total() != 512) {\n+                if (Platform.isWindows()) {\n+                    \/\/\n+                    \/\/ In Cygwin, 'df' has been observed to account for quotas\n+                    \/\/ when reporting the total disk size, but the total size\n+                    \/\/ reported by GetDiskFreeSpaceExW() has been observed not\n+                    \/\/ to account for the quota in which case the latter value\n+                    \/\/ should be larger.\n+                    \/\/\n+                    if (s.total() > ts) {\n+                        fail(s.name() + \" total space\", s.total(), \">\", ts);\n+                    }\n+                } else {\n+                    fail(s.name() + \" total space\", s.total(), \"!=\", ts);\n+                }\n@@ -250,1 +286,1 @@\n-            fail(s.name(), s.free(), \"??\", tsp);\n+            fail(s.name(), s.available(), \"??\", tsp);\n@@ -383,0 +419,3 @@\n+            if (Platform.isWindows()) {\n+                diskFree();\n+            }\n","filename":"test\/jdk\/java\/io\/File\/GetXSpace.java","additions":56,"deletions":17,"binary":false,"changes":73,"status":"modified"}]}