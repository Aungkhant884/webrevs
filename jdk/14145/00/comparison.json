{"files":[{"patch":"@@ -2190,1 +2190,2 @@\n-  if (!G1CollectedHeap::heap()->alloc_archive_regions(_mapped_heap_memregion)) {\n+  uint regions_committed;\n+  if (!G1CollectedHeap::heap()->alloc_archive_regions(_mapped_heap_memregion, regions_committed)) {\n@@ -2202,1 +2203,1 @@\n-    dealloc_heap_region();\n+    dealloc_heap_region(regions_committed);\n@@ -2211,1 +2212,1 @@\n-    dealloc_heap_region();\n+    dealloc_heap_region(regions_committed);\n@@ -2254,2 +2255,2 @@\n-void FileMapInfo::dealloc_heap_region() {\n-  G1CollectedHeap::heap()->dealloc_archive_regions(_mapped_heap_memregion);\n+void FileMapInfo::dealloc_heap_region(uint regions_committed) {\n+  G1CollectedHeap::heap()->dealloc_archive_regions(_mapped_heap_memregion, regions_committed);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-  void  dealloc_heap_region() NOT_CDS_JAVA_HEAP_RETURN;\n+  void  dealloc_heap_region(uint regions_committed) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -535,1 +535,1 @@\n-bool G1CollectedHeap::alloc_archive_regions(MemRegion range) {\n+bool G1CollectedHeap::alloc_archive_regions(MemRegion range, uint& regions_committed) {\n@@ -550,1 +550,0 @@\n-  size_t commits = 0;\n@@ -558,1 +557,3 @@\n-  if (!_hrm.allocate_containing_regions(range, &commits, workers())) {\n+  regions_committed = 0;\n+  uint regions_allocated = 0;\n+  if (!_hrm.allocate_containing_regions(range, &regions_committed, &regions_allocated, workers())) {\n@@ -562,3 +563,0 @@\n-  if (commits != 0) {\n-    log_debug(gc, ergo, heap)(\"Attempt heap expansion (allocate archive regions). Total size: \" SIZE_FORMAT \"B\",\n-                              HeapRegion::GrainWords * HeapWordSize * commits);\n@@ -566,1 +564,3 @@\n-  }\n+  log_debug(gc, ergo, heap)(\"Allocate CDS archive regions. Allocated %u Committed %u\",\n+                            regions_allocated, regions_committed);\n+\n@@ -594,1 +594,1 @@\n-void G1CollectedHeap::dealloc_archive_regions(MemRegion range) {\n+void G1CollectedHeap::dealloc_archive_regions(MemRegion range, uint regions_committed) {\n@@ -598,1 +598,1 @@\n-  uint shrink_count = 0;\n+  uint regions_freed = 0;\n@@ -610,1 +610,2 @@\n-  \/\/ Free, empty and uncommit regions with CDS archive content.\n+  \/\/ Free, empty and optionally uncommit regions with CDS archive content.\n+  uint shrink_count = 0;\n@@ -614,4 +615,9 @@\n-    r->set_free();\n-    r->set_top(r->bottom());\n-    _hrm.shrink_at(r->hrm_index(), 1);\n-    shrink_count++;\n+    free_region(r, nullptr);\n+    regions_freed++;\n+    if (regions_committed > shrink_count) {\n+      _hrm.shrink_at(r->hrm_index(), 1);\n+      shrink_count++;\n+    } else {\n+      _hrm.insert_into_free_list(r);\n+      hr_printer()->cleanup(r);\n+    }\n@@ -622,3 +628,3 @@\n-  if (shrink_count != 0) {\n-    log_debug(gc, ergo, heap)(\"Attempt heap shrinking (CDS archive regions). Total size: \" SIZE_FORMAT \"B\",\n-                              HeapRegion::GrainWords * HeapWordSize * shrink_count);\n+  log_debug(gc, ergo, heap)(\"Deallocate CDS archive regions. Freed %u Uncommitted %u regions.\",\n+                            regions_freed, regions_committed);\n+  if (regions_committed != 0) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -717,1 +717,1 @@\n-  bool alloc_archive_regions(MemRegion range);\n+  bool alloc_archive_regions(MemRegion range, uint& regions_committed);\n@@ -727,1 +727,1 @@\n-  void dealloc_archive_regions(MemRegion range);\n+  void dealloc_archive_regions(MemRegion range, uint regions_committed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -554,2 +554,3 @@\n-bool HeapRegionManager::allocate_containing_regions(MemRegion range, size_t* commit_count, WorkerThreads* pretouch_workers) {\n-  size_t commits = 0;\n+bool HeapRegionManager::allocate_containing_regions(MemRegion range, uint* commit_count, uint* allocate_count, WorkerThreads* pretouch_workers) {\n+  uint commits = 0;\n+  uint allocated = 0;\n@@ -570,0 +571,1 @@\n+    allocated++;\n@@ -574,0 +576,1 @@\n+  *allocate_count = allocated;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -266,2 +266,3 @@\n-  \/\/ and not free, and return the number of regions newly committed in commit_count.\n-  bool allocate_containing_regions(MemRegion range, size_t* commit_count, WorkerThreads* pretouch_workers);\n+  \/\/ and not free, and return the number of regions newly committed in commit_count,\n+  \/\/ allocated in allocate_count.\n+  bool allocate_containing_regions(MemRegion range, uint* commit_count, uint* allocate_count, WorkerThreads* pretouch_workers);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}