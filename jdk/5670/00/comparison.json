{"files":[{"patch":"@@ -280,0 +280,26 @@\n+  ZArray<ZPage*>   _relocated_pages;\n+\n+  static inline bool should_bulk_free() {\n+    return std::is_same<Allocator, ZRelocateSmallAllocator>::value;\n+  }\n+\n+  inline void append_relocated_pages(ZPage* page) {\n+    _relocated_pages.append(page);\n+  }\n+\n+  inline void bulk_free_relocated_page(int bulk) {\n+    if (_relocated_pages.length() >= bulk && _relocated_pages.is_nonempty()) {\n+      ZHeap::heap()->free_pages(&_relocated_pages, true \/* reclaimed *\/);\n+      _relocated_pages.clear();\n+    }\n+  }\n+\n+  inline ZPage* alloc_bulk_free_page() {\n+    if (_relocated_pages.length() > 0) {\n+      ZPage* result = _relocated_pages.last();\n+      _relocated_pages.pop();\n+      result->reset();\n+      return result;\n+    }\n+    return NULL;\n+  }\n@@ -320,0 +346,6 @@\n+      if (should_bulk_free()) {\n+        _target = alloc_bulk_free_page();\n+        if (_target != NULL) {\n+          continue;\n+        }\n+      }\n@@ -344,0 +376,3 @@\n+    if (should_bulk_free()) {\n+      bulk_free_relocated_page(0);\n+    }\n@@ -375,1 +410,6 @@\n-      _allocator->free_relocated_page(page);\n+      if (should_bulk_free()) {\n+        append_relocated_pages(page);\n+        bulk_free_relocated_page(32);\n+      } else {\n+        _allocator->free_relocated_page(page);\n+      }\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocate.cpp","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}