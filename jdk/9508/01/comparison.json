{"files":[{"patch":"@@ -273,0 +273,5 @@\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -277,1 +282,5 @@\n-      \/\/ Sleezy: power-of-2 - 1.  Next time be generic.\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -363,1 +372,0 @@\n-\n@@ -368,0 +376,5 @@\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -371,1 +384,0 @@\n-\n@@ -373,1 +385,5 @@\n-      \/\/ Sleezy: power-of-2 -1.  Next time be generic.\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289996\n+ * @summary Test range check hoisting for some scaled iv at array index\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.rangechecks.TestRangeCheckHoistingScaledIV\n+ *\/\n+\n+package compiler.rangechecks;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestRangeCheckHoistingScaledIV {\n+\n+    private static final int SIZE = 16000;\n+\n+    private static int[] a = new int[SIZE];\n+    private static int[] b = new int[SIZE];\n+    private static int count = 567;\n+\n+    \/\/ If the loop predication successfully hoists range checks in below\n+    \/\/ loops, there is only uncommon trap with reason='predicate' and no\n+    \/\/ uncommon trap with reason='range_check'.\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMul3() {\n+        for (int i = 0; i < count; i++) {\n+            b[3 * i] = a[3 * i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMul6() {\n+        for (int i = 0; i < count; i++) {\n+            b[6 * i] = a[6 * i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMul7() {\n+        for (int i = 0; i < count; i++) {\n+            b[7 * i] = a[7 * i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMulMinus3() {\n+        for (int i = 0; i > -count; i--) {\n+            b[-3 * i] = a[-3 * i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMulMinus6() {\n+        for (int i = 0; i > -count; i--) {\n+            b[-6 * i] = a[-6 * i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.RANGE_CHECK_TRAP})\n+    public static void ivMulMinus9() {\n+        for (int i = 0; i > -count; i--) {\n+            b[-9 * i] = a[-9 * i];\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@State(Scope.Benchmark)\n+public class RangeCheckHoisting {\n+\n+    private static final int SIZE = 65536;\n+\n+    @Param(\"6789\") private int count;\n+\n+    private static int[] a = new int[SIZE];\n+    private static int[] b = new int[SIZE];\n+\n+    @Benchmark\n+    public void ivScaled3() {\n+        for (int i = 0; i < count; i++) {\n+            b[3 * i] = a[3 * i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void ivScaled7() {\n+        for (int i = 0; i < count; i++) {\n+            b[7 * i] = a[7 * i];\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/RangeCheckHoisting.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}