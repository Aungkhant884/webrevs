{"files":[{"patch":"@@ -265,1 +265,1 @@\n-  unsigned int bit1 = abs_con & (0-abs_con);       \/\/ Extract low bit\n+  unsigned int bit1 = submultiple_power_of_2(abs_con);\n@@ -273,0 +273,5 @@\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -277,1 +282,5 @@\n-      \/\/ Sleezy: power-of-2 - 1.  Next time be generic.\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -359,1 +368,1 @@\n-  julong bit1 = abs_con & (0-abs_con);      \/\/ Extract low bit\n+  julong bit1 = submultiple_power_of_2(abs_con);\n@@ -363,1 +372,0 @@\n-\n@@ -368,0 +376,5 @@\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n@@ -371,1 +384,0 @@\n-\n@@ -373,1 +385,5 @@\n-      \/\/ Sleezy: power-of-2 -1.  Next time be generic.\n+      if (!phase->C->post_loop_opts_phase()) {\n+        \/\/ Defer this because it breaks loop range check hoisting\n+        phase->C->record_for_post_loop_opts_igvn(this);\n+        return MulNode::Ideal(phase, can_reshape);\n+      }\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,0 +122,10 @@\n+\/\/ Return the largest power of two that is a submultiple of the given value.\n+\/\/ This is the same as the numeric value of the least-significant set bit.\n+\/\/ For unsigned values, it replaces the old trick of (value & -value).\n+\/\/ precondition: value > 0.\n+template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline T submultiple_power_of_2(T value) {\n+  assert(value > 0, \"Invalid value\");\n+  return value & -value;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289996\n+ * @summary Test range check hoisting for some scaled iv at array index\n+ * @library \/test\/lib \/\n+ * @requires vm.debug & vm.compiler2.enabled\n+ * @modules jdk.incubator.vector\n+ * @compile --enable-preview -source ${jdk.version} TestRangeCheckHoistingScaledIV.java\n+ * @run main\/othervm --enable-preview compiler.rangechecks.TestRangeCheckHoistingScaledIV\n+ *\/\n+\n+package compiler.rangechecks;\n+\n+import java.lang.foreign.MemorySegment;\n+import java.nio.ByteOrder;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestRangeCheckHoistingScaledIV {\n+\n+    \/\/ Inner class for test loops\n+    class Launcher {\n+        private static final int SIZE = 16000;\n+        private static final VectorSpecies<Byte> SPECIES = ByteVector.SPECIES_64;\n+        private static final ByteOrder ORDER = ByteOrder.nativeOrder();\n+\n+        private static byte[] ta = new byte[SIZE];\n+        private static byte[] tb = new byte[SIZE];\n+\n+        private static MemorySegment sa = MemorySegment.ofArray(ta);\n+        private static MemorySegment sb = MemorySegment.ofArray(tb);\n+\n+        private static int count = 789;\n+\n+        \/\/ Normal array accesses with int range checks\n+        public static void scaledIntIV() {\n+            for (int i = 0; i < count; i += 2) {\n+                tb[7 * i] = ta[3 * i];\n+            }\n+        }\n+\n+        \/\/ Memory segment accesses with long range checks\n+        public static void scaledLongIV() {\n+            for (long l = 0; l < count; l += 64) {\n+                ByteVector v = ByteVector.fromMemorySegment(SPECIES, sa, l * 6, ORDER);\n+                v.intoMemorySegment(sb, l * 15, ORDER);\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 0; i < 20000; i++) {\n+                scaledIntIV();\n+                scaledLongIV();\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"--enable-preview\", \"--add-modules\", \"jdk.incubator.vector\",\n+                \"-Xbatch\", \"-XX:+TraceLoopPredicate\", Launcher.class.getName());\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.outputTo(System.out);\n+\n+        \/\/ Check if int range checks are hoisted\n+        analyzer.stdoutShouldContain(\"rc_predicate init * 3 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate (limit - 2) * 3 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate init * 7 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate (limit - 2) * 7 <u range\");\n+\n+        \/\/ Check if long range checks are hoisted\n+        analyzer.stdoutShouldContain(\"rc_predicate init * 6 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate (limit - 64) * 6 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate init * 15 <u range\");\n+        analyzer.stdoutShouldContain(\"rc_predicate (limit - 64) * 15 <u range\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckHoistingScaledIV.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@State(Scope.Benchmark)\n+public class RangeCheckHoisting {\n+\n+    private static final int SIZE = 65536;\n+\n+    @Param(\"6789\") private int count;\n+\n+    private static int[] a = new int[SIZE];\n+    private static int[] b = new int[SIZE];\n+\n+    @Benchmark\n+    public void ivScaled3() {\n+        for (int i = 0; i < count; i++) {\n+            b[3 * i] = a[3 * i];\n+        }\n+    }\n+\n+    @Benchmark\n+    public void ivScaled7() {\n+        for (int i = 0; i < count; i++) {\n+            b[7 * i] = a[7 * i];\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/RangeCheckHoisting.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}