{"files":[{"patch":"@@ -307,4 +307,6 @@\n-        ByteBuffer bb = ByteBuffer.wrap(this.replacement);\n-        CharBuffer cb = CharBuffer.wrap(replacementChars);\n-        CoderResult cr = checkReplacement(bb, cb);\n-        if (!cr.isUnderflow()) replacementChars[0] = '\\uFFFD';\n+        if (maxBytesPerChar > 3.0) {\n+            ByteBuffer bb = ByteBuffer.wrap(this.replacement);\n+            CharBuffer cb = CharBuffer.wrap(replacementChars);\n+            CoderResult cr = checkReplacement(bb, cb);\n+            if (!cr.isUnderflow()) replacementChars[0] = '\\uFFFD';\n+        }\n@@ -630,7 +632,17 @@\n-                CoderResult crTemp;\n-                if (replacementChars[0] == '\\uFFFD'\n-                    && !unmappableCharacterAction.equals(CodingErrorAction.REPLACE)) {\n-                    CodingErrorAction currentAction = unmappableCharacterAction;\n-                    onUnmappableCharacter(CodingErrorAction.REPLACE);\n-                    crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n-                    onUnmappableCharacter(currentAction);\n+                if (maxBytesPerChar > 3.0) {\n+                    CoderResult crTemp;\n+                    if (replacementChars[0] == '\\uFFFD'\n+                        && !unmappableCharacterAction.equals(CodingErrorAction.REPLACE)) {\n+                        CodingErrorAction currentAction = unmappableCharacterAction;\n+                        onUnmappableCharacter(CodingErrorAction.REPLACE);\n+                        crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n+                        onUnmappableCharacter(currentAction);\n+                    } else {\n+                        crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n+                    }\n+                    if (crTemp.isOverflow()) return crTemp;\n+                    if (crTemp.isError()) {\n+                        if (out.remaining() < replacement.length)\n+                            return CoderResult.OVERFLOW;\n+                        out.put(replacement);\n+                    }\n@@ -638,4 +650,0 @@\n-                    crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n-                }\n-                if (crTemp.isOverflow()) return crTemp;\n-                if (crTemp.isError()) {\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset-X-Coder.java.template","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    private static void checkEncode(Charset cs, char[] chsA, char[] chsB) {\n+    private static void checkEncode(Charset cs, char[] chsA, char[] chsB, byte[] repl) {\n@@ -78,0 +78,10 @@\n+        if (repl != null) {\n+            try {\n+                ce.replaceWith(repl);\n+            } catch (IllegalArgumentException iae) {\n+                System.err.println(cs+\":\");\n+                for (byte b: repl) System.err.printf(\"\\\\x%02X\", (int)b&0xFF);\n+                System.err.println(\":\"+iae);\n+                return;\n+            }\n+        }\n@@ -109,1 +119,0 @@\n-                    replChsB[1] = replStr.length() > 1 ? '\\uFFFD' : replStr.charAt(0);\n@@ -112,0 +121,1 @@\n+                    replChsB[1] = replStr.length() > 1 ? '\\uFFFD' : replStr.charAt(0);\n@@ -114,1 +124,9 @@\n-                    checkEncode(cs, replChsA, replChsB);\n+                    checkEncode(cs, replChsA, replChsB, null);\n+                    if (ce.canEncode('?')) {\n+                        replChsB[1] = '?';\n+                        checkEncode(cs, replChsA, replChsB, \"?\".getBytes(cs));\n+                    }\n+                    if (ce.canEncode('\\uff1f')) {\n+                        replChsB[1] = '\\uff1f';\n+                        checkEncode(cs, replChsA, replChsB, \"\\uff1f\".getBytes(cs));\n+                    }\n@@ -117,0 +135,1 @@\n+                    replChsB[1] = replStr.length() > 1 ? '\\uFFFD' : replStr.charAt(0);\n@@ -119,1 +138,9 @@\n-                    checkEncode(cs, replChsA, replChsB);\n+                    checkEncode(cs, replChsA, replChsB, null);\n+                    if (ce.canEncode('?')) {\n+                        replChsB[1] = '?';\n+                        checkEncode(cs, replChsA, replChsB, \"?\".getBytes(cs));\n+                    }\n+                    if (ce.canEncode('\\uff1f')) {\n+                        replChsB[1] = '\\uff1f';\n+                        checkEncode(cs, replChsA, replChsB, \"\\uff1f\".getBytes(cs));\n+                    }\n","filename":"test\/jdk\/sun\/nio\/cs\/StatefulEncoder.java","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"}]}