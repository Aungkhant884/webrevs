{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,0 +144,3 @@\n+#if[encoder]\n+    private char[] replacementChars = new char[] { '\\uFFFD' };\n+#end[encoder]\n@@ -303,0 +306,8 @@\n+#if[encoder]\n+        if (maxBytesPerChar > 3.0) {\n+            ByteBuffer bb = ByteBuffer.wrap(this.replacement);\n+            CharBuffer cb = CharBuffer.wrap(replacementChars);\n+            CoderResult cr = checkReplacement(bb, cb);\n+            if (!cr.isUnderflow()) replacementChars[0] = '\\uFFFD';\n+        }\n+#end[encoder]\n@@ -322,0 +333,18 @@\n+    private CoderResult checkReplacement(ByteBuffer bb, CharBuffer cb) {\n+        WeakReference<CharsetDecoder> wr = cachedDecoder;\n+        CharsetDecoder dec = null;\n+        if ((wr == null) || ((dec = wr.get()) == null)) {\n+            dec = charset().newDecoder();\n+            dec.onMalformedInput(CodingErrorAction.REPORT);\n+            dec.onUnmappableCharacter(CodingErrorAction.REPORT);\n+            cachedDecoder = new WeakReference<CharsetDecoder>(dec);\n+        } else {\n+            dec.reset();\n+        }\n+        if (cb == null) {\n+            cb = CharBuffer.allocate((int)(bb.remaining()\n+                                     * dec.maxCharsPerByte()));\n+        }\n+        return dec.decode(bb, cb, true);\n+    }\n+\n@@ -339,10 +368,0 @@\n-        WeakReference<CharsetDecoder> wr = cachedDecoder;\n-        CharsetDecoder dec = null;\n-        if ((wr == null) || ((dec = wr.get()) == null)) {\n-            dec = charset().newDecoder();\n-            dec.onMalformedInput(CodingErrorAction.REPORT);\n-            dec.onUnmappableCharacter(CodingErrorAction.REPORT);\n-            cachedDecoder = new WeakReference<CharsetDecoder>(dec);\n-        } else {\n-            dec.reset();\n-        }\n@@ -350,3 +369,1 @@\n-        CharBuffer cb = CharBuffer.allocate((int)(bb.remaining()\n-                                                  * dec.maxCharsPerByte()));\n-        CoderResult cr = dec.decode(bb, cb, true);\n+        CoderResult cr = checkReplacement(bb, null);\n@@ -614,0 +631,25 @@\n+#if[encoder]\n+                if (maxBytesPerChar > 3.0) {\n+                    CoderResult crTemp;\n+                    if (replacementChars[0] == '\\uFFFD'\n+                        && !unmappableCharacterAction.equals(CodingErrorAction.REPLACE)) {\n+                        CodingErrorAction currentAction = unmappableCharacterAction;\n+                        onUnmappableCharacter(CodingErrorAction.REPLACE);\n+                        crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n+                        onUnmappableCharacter(currentAction);\n+                    } else {\n+                        crTemp = encodeLoop(CharBuffer.wrap(replacementChars), out);\n+                    }\n+                    if (crTemp.isOverflow()) return crTemp;\n+                    if (crTemp.isError()) {\n+                        if (out.remaining() < replacement.length)\n+                            return CoderResult.OVERFLOW;\n+                        out.put(replacement);\n+                    }\n+                } else {\n+                    if (out.remaining() < replacement.length)\n+                        return CoderResult.OVERFLOW;\n+                    out.put(replacement);\n+                }\n+#end[encoder]\n+#if[decoder]\n@@ -617,0 +659,1 @@\n+#end[decoder]\n","filename":"src\/java.base\/share\/classes\/java\/nio\/charset\/Charset-X-Coder.java.template","additions":57,"deletions":14,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1007,2 +1007,11 @@\n-                    dst[dp++] = repl[0];\n-                    if (repl.length > 1)\n+                    if (repl.length == 1) {\n+                        if (currentState == DBCS) {\n+                            currentState = SBCS;\n+                            dst[dp++] = SI;\n+                        }\n+                        dst[dp++] = repl[0];\n+                    } else if (repl.length == 4) {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n@@ -1010,0 +1019,9 @@\n+                        dst[dp++] = repl[2];\n+                    } else {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n+                        dst[dp++] = repl[0];\n+                        dst[dp++] = repl[1];\n+                    }\n@@ -1044,2 +1062,19 @@\n-                    dst[dp++] = repl[0];\n-                    if (repl.length > 1)\n+                    if (repl.length == 1) {\n+                        if (currentState == DBCS) {\n+                            currentState = SBCS;\n+                            dst[dp++] = SI;\n+                        }\n+                        dst[dp++] = repl[0];\n+                    } else if (repl.length == 4) {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n+                        dst[dp++] = repl[1];\n+                        dst[dp++] = repl[2];\n+                    } else {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n+                        dst[dp++] = repl[0];\n@@ -1047,0 +1082,1 @@\n+                    }\n@@ -1083,2 +1119,19 @@\n-                    dst[dp++] = repl[0];\n-                    if (repl.length > 1)\n+                    if (repl.length == 1) {\n+                        if (currentState == DBCS) {\n+                            currentState = SBCS;\n+                            dst[dp++] = SI;\n+                        }\n+                        dst[dp++] = repl[0];\n+                    } else if (repl.length == 4) {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n+                        dst[dp++] = repl[1];\n+                        dst[dp++] = repl[2];\n+                    } else {\n+                        if (currentState == SBCS) {\n+                            currentState = DBCS;\n+                            dst[dp++] = SO;\n+                        }\n+                        dst[dp++] = repl[0];\n@@ -1086,0 +1139,1 @@\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/cs\/DoubleByte.java","additions":60,"deletions":6,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8266013\n+   @summary Checks stateful encoder's replacement logic\n+*\/\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.CodingErrorAction;\n+import java.nio.charset.CoderResult;\n+import java.util.Arrays;\n+import java.io.UnsupportedEncodingException;\n+\n+public class StatefulEncoder {\n+    static int errCnt = 0;\n+    final static String bugID = \"8266013\";\n+\n+    private static void checkGetBytes(Charset cs, char[] chsA, char[] chsB) {\n+        byte[] a = (new String(chsA)).getBytes(cs);\n+        byte[] b = (new String(chsB)).getBytes(cs);\n+        if (!Arrays.equals(a, b)) {\n+            errCnt++;\n+            System.err.print(\"getBytes: \"+cs.name()+\": \");\n+            for (byte b1 : a) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+            System.err.print(\"<->\");\n+            for (byte b1 : b) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+            System.err.println();\n+        }\n+    }\n+\n+    private static void checkGetBytes1(Charset cs, char[] chsA, char[] chsB) {\n+        String csName = cs.name();\n+        try {\n+            byte[] a = (new String(chsA)).getBytes(csName);\n+            byte[] b = (new String(chsB)).getBytes(csName);\n+            if (!Arrays.equals(a, b)) {\n+                errCnt++;\n+                System.err.print(\"getBytes1:\"+csName+\": \");\n+                for (byte b1 : a) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+                System.err.print(\"<->\");\n+                for (byte b1 : b) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+                System.err.println();\n+            }\n+        } catch (UnsupportedEncodingException uee) {\n+            new Error(uee);\n+        }\n+    }\n+\n+    private static void checkEncode(Charset cs, char[] chsA, char[] chsB, byte[] repl) {\n+        CharsetEncoder ce = cs.newEncoder()\n+                              .onMalformedInput(CodingErrorAction.REPLACE)\n+                              .onUnmappableCharacter(CodingErrorAction.REPLACE);\n+        if (repl != null) {\n+            try {\n+                ce.replaceWith(repl);\n+            } catch (IllegalArgumentException iae) {\n+                System.err.println(cs+\":\");\n+                for (byte b: repl) System.err.printf(\"\\\\x%02X\", (int)b&0xFF);\n+                System.err.println(\":\"+iae);\n+                return;\n+            }\n+        }\n+        try {\n+            ce.reset();\n+            ByteBuffer bbA = ce.encode(CharBuffer.wrap(chsA));\n+            byte[] a = Arrays.copyOf(bbA.array(), bbA.limit());\n+            ce.reset();\n+            ByteBuffer bbB = ce.encode(CharBuffer.wrap(chsB));\n+            byte[] b = Arrays.copyOf(bbB.array(), bbB.limit());\n+            if (!Arrays.equals(a, b)) {\n+                errCnt++;\n+                System.err.print(\"encode:   \"+cs.name()+\": \");\n+                for (byte b1 : a) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+                System.err.print(\"<->\");\n+                for (byte b1 : b) System.err.printf(\"\\\\x%02X\", (int)b1&0xFF);\n+                System.err.println();\n+            }\n+        } catch (CharacterCodingException cce) {\n+            errCnt++;\n+            System.err.println(cce);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (Charset cs : Charset.availableCharsets().values()) {\n+            if (cs.canEncode()) {\n+                CharsetEncoder ce = cs.newEncoder();\n+                if (ce.canEncode(' ') && ce.canEncode('\\u3000')) {\n+                    byte[] repl = ce.replacement();\n+                    String replStr = new String(repl, cs);\n+                    char[] replChsA = new char[2];\n+                    char[] replChsB = new char[2];\n+                    replChsA[1] = '\\uD800';\n+                    replChsA[0] = ' ';\n+                    replChsB[0] = ' ';\n+                    replChsB[1] = replStr.length() > 1 ? '\\uFFFD' : replStr.charAt(0);\n+                    checkGetBytes(cs, replChsA, replChsB);\n+                    checkGetBytes1(cs, replChsA, replChsB);\n+                    checkEncode(cs, replChsA, replChsB, null);\n+                    if (ce.canEncode('?')) {\n+                        replChsB[1] = '?';\n+                        checkEncode(cs, replChsA, replChsB, \"?\".getBytes(cs));\n+                    }\n+                    if (ce.canEncode('\\uff1f')) {\n+                        replChsB[1] = '\\uff1f';\n+                        checkEncode(cs, replChsA, replChsB, \"\\uff1f\".getBytes(cs));\n+                    }\n+                    replChsA[0] = '\\u3000';\n+                    replChsB[0] = '\\u3000';\n+                    replChsB[1] = replStr.length() > 1 ? '\\uFFFD' : replStr.charAt(0);\n+                    checkGetBytes(cs, replChsA, replChsB);\n+                    checkGetBytes1(cs, replChsA, replChsB);\n+                    checkEncode(cs, replChsA, replChsB, null);\n+                    if (ce.canEncode('?')) {\n+                        replChsB[1] = '?';\n+                        checkEncode(cs, replChsA, replChsB, \"?\".getBytes(cs));\n+                    }\n+                    if (ce.canEncode('\\uff1f')) {\n+                        replChsB[1] = '\\uff1f';\n+                        checkEncode(cs, replChsA, replChsB, \"\\uff1f\".getBytes(cs));\n+                    }\n+                }\n+            }\n+        }\n+        if (errCnt > 0)\n+            throw new Exception(\"failure of test for bug \" + bugID);\n+\n+    }\n+}\n","filename":"test\/jdk\/sun\/nio\/cs\/StatefulEncoder.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"}]}