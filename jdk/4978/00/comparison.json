{"files":[{"patch":"@@ -335,1 +335,1 @@\n-        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivmp(jt, eos);\n+        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivmp(jt, eos, true \/* allow_suspend *\/);\n@@ -387,1 +387,1 @@\n-        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivmp(jt, eos);\n+        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivmp(jt, eos, true \/* allow_suspend *\/);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-template <typename PRE_PROC>\n+template <typename PRE_PROC = void(JavaThread*)>\n@@ -248,1 +248,1 @@\n-  ThreadBlockInVMPreprocess(JavaThread* thread, PRE_PROC& pr, bool allow_suspend = true)\n+  ThreadBlockInVMPreprocess(JavaThread* thread, PRE_PROC& pr = emptyOp, bool allow_suspend = false)\n@@ -269,1 +269,0 @@\n-};\n@@ -271,11 +270,1 @@\n-class InFlightMutexRelease {\n- private:\n-  Mutex** _in_flight_mutex_addr;\n- public:\n-  InFlightMutexRelease(Mutex** in_flight_mutex_addr) : _in_flight_mutex_addr(in_flight_mutex_addr) {}\n-  void operator()(JavaThread* current) {\n-    if (_in_flight_mutex_addr != NULL && *_in_flight_mutex_addr != NULL) {\n-      (*_in_flight_mutex_addr)->release_for_safepoint();\n-      *_in_flight_mutex_addr = NULL;\n-    }\n-  }\n+  static void emptyOp(JavaThread* current) {}\n@@ -284,12 +273,2 @@\n-\/\/ Parameter in_flight_mutex_addr is only used by class Mutex to avoid certain deadlock\n-\/\/ scenarios while making transitions that might block for a safepoint or handshake.\n-\/\/ It's the address of a pointer to the mutex we are trying to acquire. This will be used to\n-\/\/ access and release said mutex when transitioning back from blocked to vm (destructor) in\n-\/\/ case we need to stop for a safepoint or handshake.\n-class ThreadBlockInVM {\n-  InFlightMutexRelease _ifmr;\n-  ThreadBlockInVMPreprocess<InFlightMutexRelease> _tbivmpp;\n- public:\n-  ThreadBlockInVM(JavaThread* thread, Mutex** in_flight_mutex_addr = NULL)\n-    : _ifmr(in_flight_mutex_addr), _tbivmpp(thread, _ifmr, \/* allow_suspend= *\/ false) {}\n-};\n+typedef ThreadBlockInVMPreprocess<> ThreadBlockInVM;\n+\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,0 +36,14 @@\n+class InFlightMutexRelease {\n+ private:\n+  Mutex* _in_flight_mutex;\n+ public:\n+  InFlightMutexRelease(Mutex* in_flight_mutex) : _in_flight_mutex(in_flight_mutex) {\n+    assert(in_flight_mutex != NULL, \"must be\");\n+  }\n+  void operator()(JavaThread* current) {\n+    _in_flight_mutex->release_for_safepoint();\n+    _in_flight_mutex = NULL;\n+  }\n+  bool not_released() { return _in_flight_mutex != NULL; }\n+};\n+\n@@ -75,1 +89,0 @@\n-  Mutex *in_flight_mutex = NULL;\n@@ -87,0 +100,1 @@\n+      InFlightMutexRelease ifmr(this);\n@@ -88,2 +102,2 @@\n-      { ThreadBlockInVM tbivmdc(JavaThread::cast(self), &in_flight_mutex);\n-        in_flight_mutex = this;  \/\/ save for ~ThreadBlockInVM\n+      {\n+        ThreadBlockInVMPreprocess<InFlightMutexRelease> tbivmdc(JavaThread::cast(self), ifmr);\n@@ -92,2 +106,2 @@\n-      if (in_flight_mutex != NULL) {\n-        \/\/ Not unlocked by ~ThreadBlockInVM\n+      if (ifmr.not_released()) {\n+        \/\/ Not unlocked by ~ThreadBlockInVMPreprocess\n@@ -237,1 +251,1 @@\n-  Mutex* in_flight_mutex = NULL;\n+  InFlightMutexRelease ifmr(this);\n@@ -240,1 +254,1 @@\n-    ThreadBlockInVM tbivmdc(self, &in_flight_mutex);\n+    ThreadBlockInVMPreprocess<InFlightMutexRelease> tbivmdc(self, ifmr);\n@@ -244,1 +258,0 @@\n-    in_flight_mutex = this;  \/\/ save for ~ThreadBlockInVM\n@@ -247,2 +260,2 @@\n-  if (in_flight_mutex != NULL) {\n-    \/\/ Not unlocked by ~ThreadBlockInVM\n+  if (ifmr.not_released()) {\n+    \/\/ Not unlocked by ~ThreadBlockInVMPreprocess\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivs(current, eos);\n+        ThreadBlockInVMPreprocess<ExitOnSuspend> tbivs(current, eos, true \/* allow_suspend *\/);\n@@ -978,1 +978,1 @@\n-        ThreadBlockInVMPreprocess<ClearSuccOnSuspend> tbivs(current, csos);\n+        ThreadBlockInVMPreprocess<ClearSuccOnSuspend> tbivs(current, csos, true \/* allow_suspend *\/);\n@@ -1539,1 +1539,1 @@\n-      ThreadBlockInVMPreprocess<ClearSuccOnSuspend> tbivs(current, csos);\n+      ThreadBlockInVMPreprocess<ClearSuccOnSuspend> tbivs(current, csos, true \/* allow_suspend *\/);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}