{"files":[{"patch":"@@ -82,3 +82,3 @@\n-    \/\/ We can't create hashtables at dump time because the hashcode dependes on the\n-    \/\/ address of the Symbols, which may be relocated at run time due to ASLR.\n-    \/\/ So we store the packages\/modules in a Arrays. At run time, we create\n+    \/\/ We can't create hashtables at dump time because the hashcode depends on the\n+    \/\/ address of the Symbols, which may be relocated at runtime due to ASLR.\n+    \/\/ So we store the packages\/modules in Arrays. At runtime, we create\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4830,1 +4830,1 @@\n-      \/\/ regular Java code. The implementation of java.lang.invoke uses generated anonymoys classes\n+      \/\/ regular Java code. The implementation of java.lang.invoke uses generated anonymous classes\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-  \/\/ Luckily, such classes are loaded in the JVMTI \"early\" phase, and CDS is disable if a JVMTI\n+  \/\/ Luckily, such classes are loaded in the JVMTI \"early\" phase, and CDS is disabled if a JVMTI\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,7 +76,7 @@\n-  {\"java\/lang\/Integer$IntegerCache\",              0, \"archivedCache\"},\n-  {\"java\/lang\/Long$LongCache\",                    0, \"archivedCache\"},\n-  {\"java\/lang\/Byte$ByteCache\",                    0, \"archivedCache\"},\n-  {\"java\/lang\/Short$ShortCache\",                  0, \"archivedCache\"},\n-  {\"java\/lang\/Character$CharacterCache\",          0, \"archivedCache\"},\n-  {\"java\/util\/jar\/Attributes$Name\",               0, \"KNOWN_NAMES\"},\n-  {\"sun\/util\/locale\/BaseLocale\",                  0, \"constantBaseLocales\"},\n+  {\"java\/lang\/Integer$IntegerCache\",              \"archivedCache\"},\n+  {\"java\/lang\/Long$LongCache\",                    \"archivedCache\"},\n+  {\"java\/lang\/Byte$ByteCache\",                    \"archivedCache\"},\n+  {\"java\/lang\/Short$ShortCache\",                  \"archivedCache\"},\n+  {\"java\/lang\/Character$CharacterCache\",          \"archivedCache\"},\n+  {\"java\/util\/jar\/Attributes$Name\",               \"KNOWN_NAMES\"},\n+  {\"sun\/util\/locale\/BaseLocale\",                  \"constantBaseLocales\"},\n@@ -86,7 +86,11 @@\n-  {\"jdk\/internal\/loader\/ArchivedClassLoaders\",                    1, \"archivedClassLoaders\"},\n-  {\"jdk\/internal\/module\/ArchivedBootLayer\",                       1, \"archivedBootLayer\"},\n-  {\"jdk\/internal\/module\/ArchivedModuleGraph\",                     0, \"archivedModuleGraph\"},\n-  {\"java\/util\/ImmutableCollections\",                              0, \"archivedObjects\"},\n-  {\"java\/lang\/Module$ArchivedData\",                               1, \"archivedData\"},\n-  {\"java\/lang\/module\/Configuration\",                              0, \"EMPTY_CONFIGURATION\"},\n-  {\"jdk\/internal\/math\/FDBigInteger\",                              0, \"archivedCaches\"},\n+  {\"jdk\/internal\/module\/ArchivedModuleGraph\",     \"archivedModuleGraph\"},\n+  {\"java\/util\/ImmutableCollections\",              \"archivedObjects\"},\n+  {\"java\/lang\/module\/Configuration\",              \"EMPTY_CONFIGURATION\"},\n+  {\"jdk\/internal\/math\/FDBigInteger\",              \"archivedCaches\"},\n+};\n+\n+\/\/ Entry fields for subgraphs archived in the open archive heap region (full module graph).\n+static ArchivableStaticFieldInfo fmg_open_archive_subgraph_entry_fields[] = {\n+  {\"jdk\/internal\/loader\/ArchivedClassLoaders\",    \"archivedClassLoaders\"},\n+  {\"jdk\/internal\/module\/ArchivedBootLayer\",       \"archivedBootLayer\"},\n+  {\"java\/lang\/Module$ArchivedData\",               \"archivedData\"},\n@@ -99,0 +103,2 @@\n+const static int num_fmg_open_archive_subgraph_entry_fields =\n+  sizeof(fmg_open_archive_subgraph_entry_fields) \/ sizeof(ArchivableStaticFieldInfo);\n@@ -322,0 +328,6 @@\n+  if (MetaspaceShared::use_full_module_graph()) {\n+    archive_object_subgraphs(fmg_open_archive_subgraph_entry_fields,\n+                             num_fmg_open_archive_subgraph_entry_fields,\n+                             false \/* is_closed_archive *\/,\n+                             THREAD);\n+  }\n@@ -341,0 +353,10 @@\n+KlassSubGraphInfo* HeapShared::init_subgraph_info(Klass* k, bool is_full_module_graph) {\n+  assert(DumpSharedSpaces, \"dump time only\");\n+  bool created;\n+  KlassSubGraphInfo* info =\n+    _dump_time_subgraph_info_table->put_if_absent(k, KlassSubGraphInfo(k, is_full_module_graph),\n+                                                  &created);\n+  assert(created, \"must not initialize twice\");\n+  return info;\n+}\n+\n@@ -343,7 +365,2 @@\n-  Klass* relocated_k = MetaspaceShared::get_relocated_klass(k);\n-  KlassSubGraphInfo* info = _dump_time_subgraph_info_table->get(relocated_k);\n-  if (info == NULL) {\n-    _dump_time_subgraph_info_table->put(relocated_k, KlassSubGraphInfo(relocated_k));\n-    info = _dump_time_subgraph_info_table->get(relocated_k);\n-    ++ _dump_time_subgraph_info_table->_count;\n-  }\n+  KlassSubGraphInfo* info = _dump_time_subgraph_info_table->get(k);\n+  assert(info != NULL, \"must have been initialized\");\n@@ -426,1 +443,1 @@\n-  _k = info->klass();\n+  _k = MetaspaceShared::get_relocated_klass(info->klass());\n@@ -429,0 +446,1 @@\n+  _is_full_module_graph = info->is_full_module_graph();\n@@ -476,1 +494,1 @@\n-      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary(klass);\n+      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary(MetaspaceShared::get_relocated_klass(klass));\n@@ -509,1 +527,1 @@\n-void HeapShared::initialize_from_archived_subgraph(Klass* k) {\n+void HeapShared::initialize_from_archived_subgraph(Klass* k, TRAPS) {\n@@ -515,9 +533,0 @@\n-  if (!MetaspaceShared::use_full_module_graph()) {\n-    for (int i = 0; i < num_open_archive_subgraph_entry_fields; i++) {\n-      const ArchivableStaticFieldInfo* info = &open_archive_subgraph_entry_fields[i];\n-      if (info->full_module_graph_only && k->name()->equals(info->klass_name)) {\n-        return;\n-      }\n-    }\n-  }\n-\n@@ -530,1 +539,3 @@\n-    Thread* THREAD = Thread::current();\n+    if (record->is_full_module_graph() && !MetaspaceShared::use_full_module_graph()) {\n+      return;\n+    }\n@@ -1012,1 +1023,2 @@\n-                                            int num, Thread* THREAD) {\n+                                            int num, bool is_full_module_graph,\n+                                            Thread* THREAD) {\n@@ -1032,0 +1044,1 @@\n+    init_subgraph_info(ik, is_full_module_graph);\n@@ -1040,1 +1053,1 @@\n-                             THREAD);\n+                             false, THREAD);\n@@ -1043,1 +1056,6 @@\n-                             THREAD);\n+                             false, THREAD);\n+  if (MetaspaceShared::use_full_module_graph()) {\n+    init_subgraph_entry_fields(fmg_open_archive_subgraph_entry_fields,\n+                               num_fmg_open_archive_subgraph_entry_fields,\n+                               true, THREAD);\n+  }\n@@ -1082,5 +1100,4 @@\n-      if (!info->full_module_graph_only || MetaspaceShared::use_full_module_graph()) {\n-        archive_reachable_objects_from_static_field(f->klass, f->klass_name,\n-                                                    f->offset, f->field_name,\n-                                                    is_closed_archive, CHECK);\n-      }\n+      archive_reachable_objects_from_static_field(f->klass, f->klass_name,\n+                                                  f->offset, f->field_name,\n+                                                  is_closed_archive,\n+                                                  CHECK);\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":59,"deletions":42,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-  int full_module_graph_only;\n@@ -70,0 +69,1 @@\n+  bool _is_full_module_graph;\n@@ -71,1 +71,1 @@\n-  KlassSubGraphInfo(Klass* k) :\n+  KlassSubGraphInfo(Klass* k, bool is_full_module_graph) :\n@@ -73,1 +73,2 @@\n-    _subgraph_entry_fields(NULL) {}\n+    _subgraph_entry_fields(NULL),\n+    _is_full_module_graph(is_full_module_graph) {}\n@@ -97,0 +98,1 @@\n+  bool is_full_module_graph() const { return _is_full_module_graph; }\n@@ -105,0 +107,1 @@\n+  bool _is_full_module_graph;\n@@ -119,0 +122,1 @@\n+  bool is_full_module_graph() const { return _is_full_module_graph; }\n@@ -204,0 +208,1 @@\n+  static KlassSubGraphInfo* init_subgraph_info(Klass *k, bool is_full_module_graph);\n@@ -207,1 +212,1 @@\n-                                         int num, Thread* THREAD);\n+                                         int num, bool is_full_module_graph, Thread* THREAD);\n@@ -328,1 +333,1 @@\n-  static void initialize_from_archived_subgraph(Klass* k) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void initialize_from_archived_subgraph(Klass* k, TRAPS) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/memory\/heapShared.hpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3730,1 +3730,1 @@\n-  HeapShared::initialize_from_archived_subgraph(k);\n+  HeapShared::initialize_from_archived_subgraph(k, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}