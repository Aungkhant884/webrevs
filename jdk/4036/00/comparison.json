{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -63,0 +64,1 @@\n+    private AtomicReference<Exception> lastPrintExRef = new AtomicReference<>();\n@@ -259,0 +261,8 @@\n+    private Exception setLastPrintEx(Exception newEx, boolean printOldEx) {\n+        Exception oldEx = lastPrintExRef.getAndSet(newEx);\n+        if (printOldEx && (oldEx != null)) {\n+            oldEx.printStackTrace();\n+        }\n+        return oldEx;\n+    }\n+\n@@ -325,0 +335,1 @@\n+            setLastPrintEx(null, false);\n@@ -383,0 +394,13 @@\n+\n+            Exception lastPrintEx = setLastPrintEx(null, false);\n+            if (lastPrintEx != null) {\n+                if (lastPrintEx instanceof PrinterException) {\n+                    throw (PrinterException) lastPrintEx;\n+                } else if (lastPrintEx instanceof RuntimeException) {\n+                    throw (RuntimeException) lastPrintEx;\n+                } else {\n+                    PrinterException pe = new PrinterException();\n+                    pe.initCause(lastPrintEx);\n+                    throw pe;\n+                }\n+            }\n@@ -788,5 +812,14 @@\n-        Runnable r = new Runnable() { public void run() { synchronized(ret) {\n-            try {\n-                int pageResult = printable.print(graphics, pageFormat, pageIndex);\n-                if (pageResult != Printable.NO_SUCH_PAGE) {\n-                    ret[0] = getPageFormatArea(pageFormat);\n+        Runnable r = new Runnable() {\n+            @Override\n+            public void run() {\n+                synchronized (ret) {\n+                    try {\n+                        int pageResult = printable.print(\n+                            graphics, pageFormat, pageIndex);\n+                        if (pageResult != Printable.NO_SUCH_PAGE) {\n+                            ret[0] = getPageFormatArea(pageFormat);\n+                        }\n+                    } catch (Exception e) {\n+                        \/\/ Original code bailed on any exception\n+                        setLastPrintEx(e, true);\n+                    }\n@@ -794,2 +827,2 @@\n-            } catch (Exception e) {} \/\/ Original code bailed on any exception\n-        }}};\n+            }\n+        };\n@@ -798,1 +831,5 @@\n-            try { EventQueue.invokeAndWait(r); } catch (Exception e) { e.printStackTrace(); }\n+            try {\n+                EventQueue.invokeAndWait(r);\n+            } catch (Exception e) {\n+                setLastPrintEx(e, true);\n+            }\n@@ -803,1 +840,3 @@\n-        synchronized(ret) { return ret[0]; }\n+        synchronized (ret) {\n+            return ret[0];\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":48,"deletions":9,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8262731\n+   @key headful printer\n+   @summary Verify that \"PrinterJob.print\" throws the exception, if\n+            \"Printable.print\" throws \"PrinterException\".\n+   @run main\/manual ExceptionFromPrintableIsIgnoredTest MAIN\n+   @run main\/manual ExceptionFromPrintableIsIgnoredTest EDT\n+ *\/\n+\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.SwingUtilities;\n+\n+public class ExceptionFromPrintableIsIgnoredTest {\n+    private enum TestThreadType {MAIN, EDT}\n+\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"Test thread type is not specified.\");\n+        }\n+\n+        TestThreadType threadType = TestThreadType.valueOf(args[0]);\n+        new ExceptionFromPrintableIsIgnoredTest(threadType);\n+    }\n+\n+    public ExceptionFromPrintableIsIgnoredTest(TestThreadType threadType) {\n+        System.out.println(String.format(\n+                \"Test started. threadType='%s'\", threadType));\n+\n+        if (threadType == TestThreadType.MAIN) {\n+            runTest();\n+        } else if (threadType == TestThreadType.EDT) {\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        runTest();\n+                    }\n+                });\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    private void runTest() {\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setPrintable(new Printable() {\n+            @Override\n+            public int print(Graphics graphics, PageFormat pageFormat,\n+                    int pageIndex) throws PrinterException {\n+                if (pageIndex > 1) {\n+                    return NO_SUCH_PAGE;\n+                }\n+                throw new PrinterException(\"Exception from Printable.print\");\n+            }\n+        });\n+        if (job.printDialog()) {\n+            Exception printEx = null;\n+            try {\n+                job.print();\n+            } catch (PrinterException pe) {\n+                printEx = pe;\n+            }\n+\n+            if (printEx != null) {\n+                System.out.println(\"'PrinterJob.print' threw the exception:\");\n+                printEx.printStackTrace(System.out);\n+            } else {\n+                throw new RuntimeException(\n+                    \"'PrinterJob.print' did not throw any exception.\");\n+            }\n+        } else {\n+            throw new RuntimeException(\"User canceled the print dialog.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ExceptionFromPrintableIsIgnoredTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}