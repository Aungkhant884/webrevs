{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -587,2 +587,1 @@\n-void StringTable::print_table_statistics(outputStream* st,\n-                                         const char* table_name) {\n+void StringTable::print_table_statistics(outputStream* st) {\n@@ -590,1 +589,6 @@\n-  _local_table->statistics_to(Thread::current(), sz, st, table_name);\n+  _local_table->statistics_to(Thread::current(), sz, st, \"StringTable\");\n+#if INCLUDE_CDS_JAVA_HEAP\n+  if (!_shared_table.empty()) {\n+    _shared_table.print_table_statistics(st, \"Shared String Table\");\n+  }\n+#endif\n@@ -653,0 +657,26 @@\n+static void print_string(Thread* thr, outputStream* st, oop s) {\n+  typeArrayOop value     = java_lang_String::value_no_keepalive(s);\n+  int          length    = java_lang_String::length(s);\n+  bool         is_latin1 = java_lang_String::is_latin1(s);\n+\n+  if (length <= 0) {\n+    st->print(\"%d: \", length);\n+  } else {\n+    ResourceMark rm(thr);\n+    int utf8_length = length;\n+    char* utf8_string;\n+\n+    if (!is_latin1) {\n+      jchar* chars = value->char_at_addr(0);\n+      utf8_string = UNICODE::as_utf8(chars, utf8_length);\n+    } else {\n+      jbyte* bytes = value->byte_at_addr(0);\n+      utf8_string = UNICODE::as_utf8(bytes, utf8_length);\n+    }\n+\n+    st->print(\"%d: \", utf8_length);\n+    HashtableTextDump::put_utf8(st, utf8_string, utf8_length);\n+  }\n+  st->cr();\n+}\n+\n@@ -664,18 +694,4 @@\n-    typeArrayOop value     = java_lang_String::value_no_keepalive(s);\n-    int          length    = java_lang_String::length(s);\n-    bool         is_latin1 = java_lang_String::is_latin1(s);\n-\n-    if (length <= 0) {\n-      _st->print(\"%d: \", length);\n-    } else {\n-      ResourceMark rm(_thr);\n-      int utf8_length = length;\n-      char* utf8_string;\n-\n-      if (!is_latin1) {\n-        jchar* chars = value->char_at_addr(0);\n-        utf8_string = UNICODE::as_utf8(chars, utf8_length);\n-      } else {\n-        jbyte* bytes = value->byte_at_addr(0);\n-        utf8_string = UNICODE::as_utf8(bytes, utf8_length);\n-      }\n+    print_string(_thr, _st, s);\n+    return true;\n+  };\n+};\n@@ -683,2 +699,8 @@\n-      _st->print(\"%d: \", utf8_length);\n-      HashtableTextDump::put_utf8(_st, utf8_string, utf8_length);\n+class PrintSharedString : StackObj {\n+  Thread* _thr;\n+  outputStream* _st;\n+public:\n+  PrintSharedString(Thread* thr, outputStream* st) : _thr(thr), _st(st) {}\n+  void do_value(oop s) {\n+    if (s == NULL) {\n+      return;\n@@ -686,2 +708,1 @@\n-    _st->cr();\n-    return true;\n+    print_string(_thr, _st, s);\n@@ -693,1 +714,1 @@\n-    print_table_statistics(st, \"StringTable\");\n+    print_table_statistics(st);\n@@ -702,0 +723,9 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+    if (!_shared_table.empty()) {\n+      st->print_cr(\"#----------------\");\n+      st->print_cr(\"# Shared strings:\");\n+      st->print_cr(\"#----------------\");\n+      PrintSharedString pss(thr, st);\n+      _shared_table.iterate(&pss);\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":57,"deletions":27,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-  static void print_table_statistics(outputStream* st, const char* table_name);\n+  static void print_table_statistics(outputStream* st);\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -538,2 +538,1 @@\n-void SymbolTable::print_table_statistics(outputStream* st,\n-                                         const char* table_name) {\n+void SymbolTable::print_table_statistics(outputStream* st) {\n@@ -541,1 +540,9 @@\n-  _local_table->statistics_to(Thread::current(), sz, st, table_name);\n+  _local_table->statistics_to(Thread::current(), sz, st, \"SymbolTable\");\n+\n+  if (!_shared_table.empty()) {\n+    _shared_table.print_table_statistics(st, \"Shared Symbol Table\");\n+  }\n+\n+  if (!_dynamic_shared_table.empty()) {\n+    _dynamic_shared_table.print_table_statistics(st, \"Dynamic Shared Symbol Table\");\n+  }\n@@ -565,0 +572,8 @@\n+static void print_symbol(outputStream* st, Symbol* sym) {\n+  const char* utf8_string = (const char*)sym->bytes();\n+  int utf8_length = sym->utf8_length();\n+  st->print(\"%d %d: \", utf8_length, sym->refcount());\n+  HashtableTextDump::put_utf8(st, utf8_string, utf8_length);\n+  st->cr();\n+}\n+\n@@ -574,6 +589,1 @@\n-    Symbol* sym = *value;\n-    const char* utf8_string = (const char*)sym->bytes();\n-    int utf8_length = sym->utf8_length();\n-    _st->print(\"%d %d: \", utf8_length, sym->refcount());\n-    HashtableTextDump::put_utf8(_st, utf8_string, utf8_length);\n-    _st->cr();\n+    print_symbol(_st, *value);\n@@ -584,0 +594,10 @@\n+class DumpSharedSymbol : StackObj {\n+  outputStream* _st;\n+public:\n+  DumpSharedSymbol(outputStream* st) : _st(st) {}\n+  void do_value(Symbol* value) {\n+    assert(value != NULL, \"value should point to a symbol\");\n+    print_symbol(_st, value);\n+  };\n+};\n+\n@@ -586,1 +606,1 @@\n-    print_table_statistics(st, \"SymbolTable\");\n+    print_table_statistics(st);\n@@ -595,0 +615,14 @@\n+    if (!_shared_table.empty()) {\n+      st->print_cr(\"#----------------\");\n+      st->print_cr(\"# Shared symbols:\");\n+      st->print_cr(\"#----------------\");\n+      DumpSharedSymbol dss(st);\n+      _shared_table.iterate(&dss);\n+    }\n+    if (!_dynamic_shared_table.empty()) {\n+      st->print_cr(\"#------------------------\");\n+      st->print_cr(\"# Dynamic shared symbols:\");\n+      st->print_cr(\"#------------------------\");\n+      DumpSharedSymbol dss(st);\n+      _dynamic_shared_table.iterate(&dss);\n+    }\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":45,"deletions":11,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,1 +149,1 @@\n-  static void print_table_statistics(outputStream* st, const char* table_name);\n+  static void print_table_statistics(outputStream* st);\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8059510\n+ * @bug 8059510 8213445\n@@ -29,1 +29,4 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions DumpSymbolAndStringTable\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI DumpSymbolAndStringTable\n@@ -35,0 +38,1 @@\n+import sun.hotspot.WhiteBox;\n@@ -41,0 +45,3 @@\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        boolean sharingEnabled = wb.isSharingEnabled();\n+\n@@ -44,0 +51,1 @@\n+        final String sharedSymbolsHeader = \"Shared symbols:\\n\";\n@@ -46,0 +54,4 @@\n+            if (sharingEnabled) {\n+                output.shouldContain(sharedSymbolsHeader);\n+                output.shouldContain(\"17 65535: java.lang.runtime\\n\");\n+            }\n@@ -52,0 +64,1 @@\n+        final String sharedStringsHeader = \"Shared strings:\\n\";\n@@ -54,0 +67,6 @@\n+            if (sharingEnabled && wb.canWriteJavaHeapArchive()) {\n+                output.shouldContain(sharedStringsHeader);\n+                if (!wb.isSharedInternedString(\"MILLI_OF_SECOND\")) {\n+                    throw new RuntimeException(\"'MILLI_OF_SECOND' should be a shared string\");\n+                }\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DumpSymbolAndStringTable.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 8213445\n+ * @summary Test dumping of dynamic shared symbols using jcmd\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\n+ * @build JCmdTestLingeredApp Hello jdk.test.lib.apps.LingeredApp\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar loadclass.jar JCmdTestLingeredApp\n+ *             jdk.test.lib.apps.LingeredApp jdk.test.lib.apps.LingeredApp$1\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=500 -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar DynamicSharedSymbols\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import sun.hotspot.WhiteBox;\n+\n+public class DynamicSharedSymbols extends DynamicArchiveTestBase {\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(DynamicSharedSymbols::testDefaultBase);\n+    }\n+\n+    static void testDefaultBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTest(topArchiveName);\n+    }\n+\n+    private static void doTest(String topArchiveName) throws Exception {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        if (!wb.isSharingEnabled()) {\n+            throw new SkippedException(\"Sharing is not enabled, test is skipped.\");\n+        }\n+\n+        String appJar = ClassFileInstaller.getJarPath(\"loadclass.jar\");\n+\n+        \/\/ Create a dynamic archive.\n+        String dynamicDumpArg = \"-XX:ArchiveClassesAtExit=\" + topArchiveName;\n+        JCmdTestLingeredApp theApp = new JCmdTestLingeredApp();\n+        LingeredApp.startApp(theApp, dynamicDumpArg,\n+                             \"-Xlog:cds,cds+dynamic=info\",\n+                             \"-cp\", appJar);\n+        long pid = theApp.getPid();\n+        LingeredApp.stopApp(theApp);\n+\n+        \/\/ Run with dynamic archive.\n+        String sharedArchiveArg = \"-XX:SharedArchiveFile=\" + topArchiveName;\n+        theApp = new JCmdTestLingeredApp();\n+        LingeredApp.startApp(theApp,\n+                             \"-Xshare:on\", sharedArchiveArg,\n+                             \"-Xlog:cds,class+load\",\n+                             \"-cp\", appJar);\n+        pid = theApp.getPid();\n+\n+\n+        \/\/ Use jcmd to dump the symbols of the above process running\n+        \/\/ with dynamic shared archive.\n+        ProcessBuilder pb = new ProcessBuilder();\n+        pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), Long.toString(pid), \"VM.symboltable\", \"-verbose\"});\n+        OutputAnalyzer output = CDSTestUtils.executeAndLog(pb, \"jcmd-symboltable\");\n+        output.shouldContain(\"17 2: jdk\/test\/lib\/apps\\n\");\n+        output.shouldContain(\"Dynamic shared symbols:\\n\");\n+        output.shouldContain(\"5 65535: Hello\\n\");\n+\n+        LingeredApp.stopApp(theApp);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicSharedSymbols.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+ * @compile ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @compile ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+ * @compile ..\/..\/..\/..\/..\/..\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}