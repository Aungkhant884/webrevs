{"files":[{"patch":"@@ -33,10 +33,11 @@\n- * MatchException may be thrown when an exhaustive pattern matching language construct\n- * (such as a switch expression) encounters a match target that does not match any of the provided\n- * patterns at runtime.  This can currently arise from the following case:\n- * <ul>\n- *     <li>Separate compilation anomalies, where a sealed interface has a different\n- *         set of permitted subtypes at runtime than it had at compilation time,\n- *         an enum has a different set of constants at runtime than it had at compilation time,\n- *         or the type hierarchy has changed in incompatible ways between compile time and run time.\n- *     <\/li>\n- * <\/ul>\n+ * {@code MatchException} may be thrown when an exhaustive pattern matching language construct\n+ * (such as a switch expression) encounters a value that does not match any of the provided\n+ * patterns at runtime. This can currently arise for separate compilation anomalies,\n+ * where a sealed interface has a different set of permitted subtypes at runtime than\n+ * it had at compilation time, an enum has a different set of constants at runtime than\n+ * it had at compilation time, or the type hierarchy has changed in incompatible ways between\n+ * compile time and run time.\n+ *\n+ * @jls 14.11.3 Execution of a switch Statement\n+ * @jls 14.30.2 Pattern Matching\n+ * @jls 15.28.2 Run-Time Evaluation of switch Expressions\n@@ -52,1 +53,1 @@\n-     * Constructs an {@code MatchException} with no detail  message.\n+     * Constructs an {@code MatchException} with no detail message.\n@@ -73,1 +74,1 @@\n-     *         {@link #getCause()} method).  (A {@code null} value is\n+     *         {@link #getCause()} method). (A {@code null} value is\n@@ -88,1 +89,1 @@\n-     *         {@link #getCause()} method).  (A {@code null} value is\n+     *         {@link #getCause()} method). (A {@code null} value is\n","filename":"src\/java.base\/share\/classes\/java\/lang\/MatchException.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-            case TOTAL_PATTERN_IN_INSTACEOF -> true;\n+            case UNCONDITIONAL_PATTERN_IN_INSTANCEOF -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-        TOTAL_PATTERN_IN_INSTACEOF(JDK17, Fragments.FeatureTotalPatternsInInstanceof, DiagKind.PLURAL),\n+        UNCONDITIONAL_PATTERN_IN_INSTANCEOF(JDK17, Fragments.FeatureTotalPatternsInInstanceof, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,2 +177,2 @@\n-        allowTotalPatternsInstance = (preview.isEnabled() || !preview.isPreview(Feature.TOTAL_PATTERN_IN_INSTACEOF)) &&\n-                                     Feature.TOTAL_PATTERN_IN_INSTACEOF.allowedInSource(source);\n+        allowUnconditionalPatternsInstance = (preview.isEnabled() || !preview.isPreview(Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF)) &&\n+                                     Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF.allowedInSource(source);\n@@ -225,1 +225,1 @@\n-    private final boolean allowTotalPatternsInstance;\n+    private final boolean allowUnconditionalPatternsInstance;\n@@ -1797,1 +1797,1 @@\n-                        boolean unconditional = TreeInfo.unconditionalCaseLabel(pat);\n+                        boolean unconditional = TreeInfo.unrefinedCaseLabel(pat);\n@@ -4112,1 +4112,1 @@\n-                if (!allowTotalPatternsInstance) {\n+                if (!allowUnconditionalPatternsInstance) {\n@@ -4114,2 +4114,2 @@\n-                } else if (preview.isPreview(Feature.TOTAL_PATTERN_IN_INSTACEOF)) {\n-                    preview.warnPreview(tree.pattern.pos(), Feature.TOTAL_PATTERN_IN_INSTACEOF);\n+                } else if (preview.isPreview(Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF)) {\n+                    preview.warnPreview(tree.pattern.pos(), Feature.UNCONDITIONAL_PATTERN_IN_INSTANCEOF);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-                    if (TreeInfo.unconditionalCaseLabel(pat)) {\n+                    if (TreeInfo.unrefinedCaseLabel(pat)) {\n@@ -717,1 +717,1 @@\n-                    if (TreeInfo.unconditionalCaseLabel(pat)) {\n+                    if (TreeInfo.unrefinedCaseLabel(pat)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1349,1 +1349,1 @@\n-            case BINDINGPATTERN -> new PatternPrimaryType(((JCBindingPattern) pat).type);\n+            case BINDINGPATTERN -> new PatternPrimaryType(pat.type);\n@@ -1372,1 +1372,1 @@\n-    public static boolean unconditionalCaseLabel(JCCaseLabel cse) {\n+    public static boolean unrefinedCaseLabel(JCCaseLabel cse) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}