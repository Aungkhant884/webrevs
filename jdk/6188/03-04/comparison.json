{"files":[{"patch":"@@ -3157,3 +3157,0 @@\n-        \/\/ only instantiated and used if there's ever a value outside the allowed range\n-        private FractionPrinterParser fallback;\n-\n@@ -3262,11 +3259,1 @@\n-            \/\/ While values of ChronoField.NANO_OF_SECOND should be in the range\n-            \/\/ [0-999999999], we can't assume that holds for any custom Temporal\n-            if (!field.range().isValidIntValue(value)) {\n-                var fallbackFormatter = fallback;\n-                if (fallbackFormatter == null) {\n-                    fallbackFormatter = new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint, subsequentWidth);\n-                    fallback = fallbackFormatter;\n-                }\n-                return fallbackFormatter.format(context, buf);\n-            }\n-            int val = value.intValue();\n+            int val = field.range().checkValidIntValue(value, field);\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-import java.time.format.DateTimeFormatterBuilder;\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestFractionPrinterParser.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}