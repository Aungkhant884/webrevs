{"files":[{"patch":"@@ -124,0 +124,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -2378,0 +2379,1 @@\n+        @Stable\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,3 +62,1 @@\n-import static java.time.temporal.ChronoField.MILLI_OF_SECOND;\n-import static java.time.temporal.ChronoField.NANO_OF_SECOND;\n-import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;\n+import static java.time.temporal.ChronoField.*;\n@@ -72,0 +70,1 @@\n+import java.time.temporal.ChronoField;\n@@ -80,1 +79,1 @@\n- * Test FractionPrinterParser.\n+ * Test formatters obtained with DateTimeFormatterBuilder.appendFraction (FractionPrinterParser, NanosPrinterParser)\n@@ -117,0 +116,18 @@\n+    @DataProvider(name=\"OOB_Micros\")\n+    Object[][] provider_oob_micros() {\n+        return new Object[][]{\n+                {-1},\n+                {1_000_000},\n+                {Integer.MIN_VALUE},\n+                {Integer.MAX_VALUE},\n+                {Integer.MAX_VALUE + 1L},\n+                {Long.MAX_VALUE},\n+                {Long.MIN_VALUE},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"OOB_Micros\", expectedExceptions=DateTimeException.class)\n+    public void test_print_oob_micros(long value) throws Exception {\n+        getFormatter(MICRO_OF_SECOND, 0, 9, true).formatTo(new MockFieldValue(MICRO_OF_SECOND, value), buf);\n+    }\n+\n@@ -123,0 +140,6 @@\n+    public void test_print_append_micros() throws Exception {\n+        buf.append(\"EXISTING\");\n+        getFormatter(MICRO_OF_SECOND, 0, 6, true).formatTo(LocalTime.of(12, 30, 40, 3000), buf);\n+        assertEquals(buf.toString(), \"EXISTING.000003\");\n+    }\n+\n@@ -264,0 +287,76 @@\n+    \/\/-----------------------------------------------------------------------\n+    @DataProvider(name=\"Micros\")\n+    Object[][] provider_micros() {\n+        return new Object[][] {\n+                {0, 6, 0,           \"\"},\n+                {0, 6, 2,           \".000002\"},\n+                {0, 6, 20,          \".00002\"},\n+                {0, 6, 200,         \".0002\"},\n+                {0, 6, 2000,        \".002\"},\n+                {0, 6, 20000,       \".02\"},\n+                {0, 6, 200000,      \".2\"},\n+                {0, 6, 1,           \".000001\"},\n+                {0, 6, 12,          \".000012\"},\n+                {0, 6, 123,         \".000123\"},\n+                {0, 6, 1234,        \".001234\"},\n+                {0, 6, 12345,       \".012345\"},\n+                {0, 6, 123456,      \".123456\"},\n+                {0, 6, 9,           \".000009\"},\n+                {0, 6, 99,          \".000099\"},\n+                {0, 6, 999,         \".000999\"},\n+                {0, 6, 9999,        \".009999\"},\n+                {0, 6, 99999,       \".099999\"},\n+                {0, 6, 999999,      \".999999\"},\n+                {0, 5, 9,           \".00000\"},\n+                {0, 4, 99,          \".0000\"},\n+                {0, 3, 999,         \".000\"},\n+                {0, 2, 9999,        \".00\"},\n+                {0, 1, 99999,       \".0\"},\n+                {0, 5, 1,           \".00000\"},\n+                {0, 4, 11,          \".0000\"},\n+                {0, 3, 111,         \".000\"},\n+                {0, 2, 1111,        \".00\"},\n+                {0, 1, 11111,       \".0\"},\n+\n+                {1, 6, 0,           \".0\"},\n+                {1, 6, 2,           \".000002\"},\n+                {1, 6, 20,          \".00002\"},\n+                {1, 6, 200,         \".0002\"},\n+                {1, 6, 2000,        \".002\"},\n+                {1, 6, 20000,       \".02\"},\n+                {1, 6, 200000,      \".2\"},\n+\n+                {2, 3, 0,           \".00\"},\n+                {2, 3, 2,           \".000\"},\n+                {2, 3, 20,          \".000\"},\n+                {2, 3, 200,         \".000\"},\n+                {2, 3, 2000,        \".002\"},\n+                {2, 3, 20000,       \".02\"},\n+                {2, 3, 200000,      \".20\"},\n+                {2, 3, 1,           \".000\"},\n+                {2, 3, 12,          \".000\"},\n+                {2, 3, 123,         \".000\"},\n+                {2, 3, 1234,        \".001\"},\n+                {2, 3, 12345,       \".012\"},\n+                {2, 3, 123456,      \".123\"},\n+        };\n+    }\n+\n+    @Test(dataProvider=\"Micros\")\n+    public void test_print_micros(int minWidth, int maxWidth, int value, String result) throws Exception {\n+        getFormatter(MICRO_OF_SECOND,  minWidth, maxWidth, true).formatTo(new MockFieldValue(MICRO_OF_SECOND, value), buf);\n+        if (result == null) {\n+            fail(\"Expected exception\");\n+        }\n+        assertEquals(buf.toString(), result);\n+    }\n+\n+    @Test(dataProvider=\"Micros\")\n+    public void test_print_micros_noDecimalPoint(int minWidth, int maxWidth, int value, String result) throws Exception {\n+        getFormatter(MICRO_OF_SECOND,  minWidth, maxWidth, false).formatTo(new MockFieldValue(MICRO_OF_SECOND, value), buf);\n+        if (result == null) {\n+            fail(\"Expected exception\");\n+        }\n+        assertEquals(buf.toString(), (result.startsWith(\".\") ? result.substring(1) : result));\n+    }\n+\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestFractionPrinterParser.java","additions":103,"deletions":4,"binary":false,"changes":107,"status":"modified"}]}