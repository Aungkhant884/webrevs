{"files":[{"patch":"@@ -84,1 +84,1 @@\n-  product(uintx, PowerArchitecturePPC64, 0,                                 \\\n+  product(uintx, PowerArchitecturePPC64, 0, DIAGNOSTIC,                     \\\n@@ -89,3 +89,0 @@\n-  product(bool, SuperwordUseVSX, false,                                     \\\n-          \"Use Power8 VSX instructions for superword optimization.\")        \\\n-                                                                            \\\n@@ -94,1 +91,1 @@\n-  product(bool, ReoptimizeCallSequences, true,                              \\\n+  product(bool, ReoptimizeCallSequences, true, DIAGNOSTIC,                  \\\n@@ -98,1 +95,1 @@\n-  product(uint64_t,DSCR_PPC64, (uintx)-1,                                   \\\n+  product(uint64_t, DSCR_PPC64, (uint64_t)-1,                               \\\n@@ -101,1 +98,1 @@\n-  product(uint64_t,DSCR_DPFD_PPC64, 8,                                      \\\n+  product(uint64_t, DSCR_DPFD_PPC64, 8,                                     \\\n@@ -105,1 +102,1 @@\n-  product(uint64_t,DSCR_URG_PPC64, 8,                                       \\\n+  product(uint64_t, DSCR_URG_PPC64, 8,                                      \\\n@@ -110,1 +107,1 @@\n-  product(bool, UseLoadInstructionsForStackBangingPPC64, false,             \\\n+  product(bool, UseLoadInstructionsForStackBangingPPC64, false, DIAGNOSTIC, \\\n@@ -113,0 +110,5 @@\n+  product(bool, UseStaticBranchPredictionInCompareAndSwapPPC64, true, DIAGNOSTIC,\\\n+          \"Use static branch prediction hints in CAS operations.\")          \\\n+  product(bool, UseStaticBranchPredictionForUncommonPathsPPC64, false, DIAGNOSTIC,\\\n+          \"Use static branch prediction hints for uncommon paths.\")         \\\n+                                                                            \\\n@@ -114,1 +116,4 @@\n-  product(bool, UseByteReverseInstructions, false,                          \\\n+  product(bool, SuperwordUseVSX, false,                                     \\\n+          \"Use Power8 VSX instructions for superword optimization.\")        \\\n+                                                                            \\\n+  product(bool, UseByteReverseInstructions, false, DIAGNOSTIC,              \\\n@@ -117,1 +122,1 @@\n-  product(bool, UseVectorByteReverseInstructionsPPC64, false,               \\\n+  product(bool, UseVectorByteReverseInstructionsPPC64, false, DIAGNOSTIC,   \\\n@@ -120,1 +125,1 @@\n-  product(bool, UseCountLeadingZerosInstructionsPPC64, true,                \\\n+  product(bool, UseCountLeadingZerosInstructionsPPC64, true, DIAGNOSTIC,    \\\n@@ -123,1 +128,1 @@\n-  product(bool, UseCountTrailingZerosInstructionsPPC64, false,              \\\n+  product(bool, UseCountTrailingZerosInstructionsPPC64, false, DIAGNOSTIC,  \\\n@@ -126,1 +131,1 @@\n-  product(bool, UseExtendedLoadAndReserveInstructionsPPC64, false,          \\\n+  product(bool, UseExtendedLoadAndReserveInstructionsPPC64, false, DIAGNOSTIC,\\\n@@ -129,1 +134,1 @@\n-  product(bool, UseRotateAndMaskInstructionsPPC64, true,                    \\\n+  product(bool, UseRotateAndMaskInstructionsPPC64, true, DIAGNOSTIC,        \\\n@@ -132,5 +137,0 @@\n-  product(bool, UseStaticBranchPredictionInCompareAndSwapPPC64, true,       \\\n-          \"Use static branch prediction hints in CAS operations.\")          \\\n-  product(bool, UseStaticBranchPredictionForUncommonPathsPPC64, false,      \\\n-          \"Use static branch prediction hints for uncommon paths.\")         \\\n-                                                                            \\\n@@ -144,1 +144,1 @@\n-  product(bool, TrapBasedICMissChecks, true,                                \\\n+  product(bool, TrapBasedICMissChecks, true, DIAGNOSTIC,                    \\\n@@ -146,2 +146,0 @@\n-  product(bool, TraceTraps, false, \"Trace all traps the signal handler\"     \\\n-          \"handles.\")                                                       \\\n@@ -149,2 +147,5 @@\n-  product(bool, ZapMemory, false, \"Write 0x0101... to empty memory.\"        \\\n-          \" Use this to ease debugging.\")                                   \\\n+  product(bool, TraceTraps, false, DIAGNOSTIC,                              \\\n+          \"Trace all traps the signal handler handles.\")                    \\\n+                                                                            \\\n+  develop(bool, ZapMemory, false,                                           \\\n+          \"Write 0x0101... to empty memory. Use this to ease debugging.\")   \\\n","filename":"src\/hotspot\/cpu\/ppc\/globals_ppc.hpp","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"}]}