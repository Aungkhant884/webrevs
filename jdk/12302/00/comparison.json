{"files":[{"patch":"@@ -30,1 +30,0 @@\n- * @requires os.family != \"aix\"\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/CalleeSavedRegisters\/FPRegs.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+#ifdef AIX\n+#include <pthread.h>\n+#endif \/\/AIX\n@@ -107,1 +110,9 @@\n-int main(int argc, const char** argv) {\n+typedef struct {\n+     int argc;\n+     char **argv;\n+} args_list;\n+\n+void* run(void* argp){\n+  args_list *arg = (args_list*) argp;\n+  int argc =  arg->argc;\n+  char **argv = arg->argv;\n@@ -242,0 +253,21 @@\n+int main(int argc, char *argv[]) {\n+    args_list args;\n+    args.argc = argc;\n+    args.argv = argv;\n+#ifdef AIX\n+    size_t adjusted_stack_size = 1024*1024;\n+    pthread_t id;\n+    int result;\n+    pthread_attr_t attr;\n+    pthread_attr_init(&attr);\n+    pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+    result = pthread_create(&id, &attr, run, (void *)&args);\n+    if (result != 0) {\n+      fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n+      return -1;\n+    }\n+    pthread_join(id, NULL);\n+#else\n+    run(&args);\n+#endif \/\/AIX\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/CalleeSavedRegisters\/exeFPRegs.c","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @requires os.family != \"aix\"\n","filename":"test\/jdk\/java\/lang\/reflect\/exeCallerAccessTest\/CallerAccessTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+#ifdef AIX\n+#include <pthread.h>\n+#endif \/\/AIX\n@@ -45,1 +48,1 @@\n-int main(int argc, char** args) {\n+void* run(void* argp){\n@@ -239,0 +242,19 @@\n+\n+int main(int argc, char *argv[]){\n+#ifdef AIX\n+   size_t adjusted_stack_size = 1024*1024;\n+   pthread_t id;\n+   int result;\n+   pthread_attr_t attr;\n+   pthread_attr_init(&attr);\n+   pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+   result = pthread_create(&id, &attr, run, (void *)&argv);\n+   if (result != 0)  {\n+     fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n+     return -1;\n+   }\n+   pthread_join(id, NULL);\n+#else\n+   run(&argv);\n+#endif \/\/AIX\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/exeCallerAccessTest\/exeCallerAccessTest.c","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n- * @requires os.family != \"aix\"\n","filename":"test\/jdk\/jni\/nullCaller\/NullCallerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+#ifdef AIX\n+#include <pthread.h>\n+#endif \/\/AIX\n@@ -159,1 +162,1 @@\n-int main(int argc, char** args) {\n+void* run(void *arg){\n@@ -187,0 +190,19 @@\n+int main(int argc, char *argv[]){\n+#ifdef AIX\n+   size_t adjusted_stack_size = 1024*1024;\n+   pthread_t id;\n+   int result;\n+   pthread_attr_t attr;\n+   pthread_attr_init(&attr);\n+   pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+   result = pthread_create(&id, &attr, run, (void *)argv);\n+   if (result != 0) {\n+     fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n+     return -1;\n+   }\n+   pthread_join(id, NULL);\n+#else\n+   run(&argv);\n+#endif \/\/AIX\n+}\n+\n","filename":"test\/jdk\/jni\/nullCaller\/exeNullCallerTest.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+#ifdef AIX\n+#include <pthread.h>\n+#endif \/\/AIX\n@@ -28,2 +31,2 @@\n-JNIEnv* create_vm(JavaVM **jvm)\n-{\n+void* run(void *arg){\n+    JavaVM *jvm;\n@@ -44,1 +47,1 @@\n-    int ret = JNI_CreateJavaVM(jvm, (void**)&env, &args);\n+    int ret = JNI_CreateJavaVM(&jvm, (void**)&env, &args);\n@@ -49,3 +52,2 @@\n-    return env;\n-}\n-\n+    jclass test_class;\n+    jmethodID test_method;\n@@ -53,8 +55,4 @@\n-void run(JNIEnv *env) {\n-  jclass test_class;\n-  jmethodID test_method;\n-\n-  test_class = (*env)->FindClass(env, \"TestNativeProcessBuilder$Test\");\n-  if (test_class == NULL) {\n-    exit(11);\n-  }\n+    test_class = (*env)->FindClass(env, \"TestNativeProcessBuilder$Test\");\n+    if (test_class == NULL) {\n+      exit(11);\n+    }\n@@ -62,4 +60,4 @@\n-  test_method = (*env)->GetStaticMethodID(env, test_class, \"test\", \"()V\");\n-  if (test_method == NULL) {\n-    exit(12);\n-  }\n+    test_method = (*env)->GetStaticMethodID(env, test_class, \"test\", \"()V\");\n+    if (test_method == NULL) {\n+      exit(12);\n+    }\n@@ -67,1 +65,2 @@\n-  (*env)->CallStaticVoidMethod(env, test_class, test_method);\n+    (*env)->CallStaticVoidMethod(env, test_class, test_method);\n+    return 0;\n@@ -70,9 +69,17 @@\n-\n-int main(int argc, char **argv)\n-{\n-  JavaVM *jvm;\n-  JNIEnv *env = create_vm(&jvm);\n-\n-  run(env);\n-\n-  return 0;\n+int main(int argc, char *argv[]){\n+#ifdef AIX\n+   size_t adjusted_stack_size = 1024*1024;\n+   pthread_t id;\n+   int result;\n+   pthread_attr_t attr;\n+   pthread_attr_init(&attr);\n+   pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+   result = pthread_create(&id, &attr, run, (void *)argv);\n+   if (result != 0) {\n+     fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n+     return -1;\n+   }\n+   pthread_join(id, NULL);\n+#else\n+   run(&argv);\n+#endif \/\/AIX\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/exejvm-test-launcher.c","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"}]}