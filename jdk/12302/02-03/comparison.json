{"files":[{"patch":"@@ -28,2 +28,0 @@\n- * @comment Test uses custom launcher that starts VM in primordial thread. This is\n- *          not possible on aix.\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/CalleeSavedRegisters\/FPRegs.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,2 +111,2 @@\n-     int argc;\n-     char **argv;\n+  int argc;\n+  char **argv;\n@@ -115,1 +115,1 @@\n-void* run(void* argp){\n+static void* run(void* argp) {\n@@ -254,3 +254,3 @@\n-    args_list args;\n-    args.argc = argc;\n-    args.argv = argv;\n+  args_list args;\n+  args.argc = argc;\n+  args.argv = argv;\n@@ -258,12 +258,12 @@\n-    size_t adjusted_stack_size = 1024*1024;\n-    pthread_t id;\n-    int result;\n-    pthread_attr_t attr;\n-    pthread_attr_init(&attr);\n-    pthread_attr_setstacksize(&attr, adjusted_stack_size);\n-    result = pthread_create(&id, &attr, run, (void *)&args);\n-    if (result != 0) {\n-      fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n-      return -1;\n-    }\n-    pthread_join(id, NULL);\n+  size_t adjusted_stack_size = 1024*1024;\n+  pthread_t id;\n+  int result;\n+  pthread_attr_t attr;\n+  pthread_attr_init(&attr);\n+  pthread_attr_setstacksize(&attr, adjusted_stack_size);\n+  result = pthread_create(&id, &attr, run, (void *)&args);\n+  if (result != 0) {\n+    fprintf(stderr, \"Error: pthread_create failed with error code %d \\n\", result);\n+    return -1;\n+  }\n+  pthread_join(id, NULL);\n@@ -271,1 +271,1 @@\n-    run(&args);\n+  run(&args);\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/CalleeSavedRegisters\/exeFPRegs.c","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n- * @summary Test uses custom launcher that starts VM using JNI that verifies\n- *          reflection API with null caller class\n","filename":"test\/jdk\/java\/lang\/reflect\/exeCallerAccessTest\/CallerAccessTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-void* run(void* argp){\n+static void* run(void* argp) {\n@@ -243,1 +243,1 @@\n-int main(int argc, char *argv[]){\n+int main(int argc, char *argv[]) {\n","filename":"test\/jdk\/java\/lang\/reflect\/exeCallerAccessTest\/exeCallerAccessTest.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-void* run(void *arg){\n+static void* run(void *arg) {\n@@ -190,1 +190,1 @@\n-int main(int argc, char *argv[]){\n+int main(int argc, char *argv[]) {\n","filename":"test\/jdk\/jni\/nullCaller\/exeNullCallerTest.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-void* run(void *arg){\n+static void* run(void *arg) {\n@@ -69,1 +69,1 @@\n-int main(int argc, char *argv[]){\n+int main(int argc, char *argv[]) {\n","filename":"test\/lib-test\/jdk\/test\/lib\/process\/exejvm-test-launcher.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}