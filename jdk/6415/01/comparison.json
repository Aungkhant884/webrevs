{"files":[{"patch":"@@ -205,0 +205,5 @@\n+\n+    if (FLAG_IS_DEFAULT(OnSpinWaitInst) && FLAG_IS_DEFAULT(OnSpinWaitInstCount)) {\n+      FLAG_SET_DEFAULT(OnSpinWaitInst, \"isb\");\n+      FLAG_SET_DEFAULT(OnSpinWaitInstCount, 1);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitAArch64DefaultFlags\n+ * @summary Check default values of '-XX:OnSpinWaitInst' and '-XX:OnSpinWaitInstCount' for AArch64 implementations.\n+ * @bug 8277137\n+ * @library \/test\/lib \/\n+ *\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI\n+ *                   compiler.onSpinWait.TestOnSpinWaitAArch64DefaultFlags\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import sun.hotspot.cpuinfo.CPUInfo;\n+\n+public class TestOnSpinWaitAArch64DefaultFlags {\n+    private static boolean isCPUModelNeoverseN1(String cpuModel) {\n+        return cpuModel.contains(\"0xd0c\");\n+    }\n+\n+    private static void checkFlagsDefaultsEqualTo(String expectedOnSpinWaitInstValue, String expectedOnSpinWaitInstCountValue) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-XX:+PrintFlagsFinal\", \"-version\");\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+\n+        Iterator<String> iter = analyzer.asLines().listIterator();\n+        String line = null;\n+        boolean hasExpectedOnSpinWaitInstValue = false;\n+        boolean hasExpectedOnSpinWaitInstCountValue = false;\n+        while (iter.hasNext()) {\n+            line = iter.next();\n+            if (!hasExpectedOnSpinWaitInstValue && line.contains(\"ccstr OnSpinWaitInst\")) {\n+                hasExpectedOnSpinWaitInstValue = line.contains(\"= \" + expectedOnSpinWaitInstValue);\n+            }\n+\n+            if (!hasExpectedOnSpinWaitInstCountValue && line.contains(\"uint OnSpinWaitInstCount\")) {\n+                hasExpectedOnSpinWaitInstCountValue = line.contains(\"= \" + expectedOnSpinWaitInstCountValue);\n+            }\n+        }\n+        if (!hasExpectedOnSpinWaitInstValue) {\n+            System.out.println(analyzer.getOutput());\n+            throw new RuntimeException(\"OnSpinWaitInst with the expected value '\" + expectedOnSpinWaitInstValue + \"' not found.\");\n+        }\n+        if (!hasExpectedOnSpinWaitInstCountValue) {\n+            System.out.println(analyzer.getOutput());\n+            throw new RuntimeException(\"OnSpinWaitInstCount with the expected value '\" + expectedOnSpinWaitInstCountValue + \"' not found.\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        List<String> cpuFeatures = CPUInfo.getFeatures();\n+        if (cpuFeatures.isEmpty()) {\n+            System.out.println(\"Skip because no CPU features are available.\");\n+            return;\n+        }\n+\n+        final String cpuModel = cpuFeatures.get(0);\n+\n+        if (isCPUModelNeoverseN1(cpuModel)) {\n+            checkFlagsDefaultsEqualTo(\"isb\", \"1\");\n+        } else {\n+            System.out.println(\"Skip because no defaults for CPU model: \" + cpuModel);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitAArch64DefaultFlags.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}