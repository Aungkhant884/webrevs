{"files":[{"patch":"@@ -827,2 +827,1 @@\n-    \/\/ method to be rewritten (number of arguments at a call for\n-    \/\/ instance)\n+    \/\/ method to be rewritten (number of arguments at a call for instance)\n@@ -830,11 +829,4 @@\n-    \/\/ Method::build_profiling_method_data(method, CHECK);\n-    {\n-      \/\/ Grab a lock here to prevent multiple\n-      \/\/ MethodData*s from being created.\n-      MutexLocker ml(THREAD, MethodData_lock);\n-      if (method->method_data() == NULL) {\n-        ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n-        MethodData* method_data = MethodData::allocate(loader_data, methodHandle(THREAD, method), CHECK);\n-        method->set_method_data(method_data);\n-      }\n-    }\n+    assert(method->method_data() == NULL, \"Should only be initialized once\");\n+    ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n+    MethodData* method_data = MethodData::allocate(loader_data, methodHandle(THREAD, method), CHECK);\n+    method->set_method_data(method_data);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -593,11 +593,7 @@\n-  \/\/ Grab a lock here to prevent multiple\n-  \/\/ MethodData*s from being created.\n-  MutexLocker ml(THREAD, MethodData_lock);\n-  if (method->method_data() == NULL) {\n-    ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n-    MethodData* method_data = MethodData::allocate(loader_data, method, THREAD);\n-    if (HAS_PENDING_EXCEPTION) {\n-      CompileBroker::log_metaspace_failure();\n-      ClassLoaderDataGraph::set_metaspace_oom(true);\n-      return;   \/\/ return the exception (which is cleared)\n-    }\n+  ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n+  MethodData* method_data = MethodData::allocate(loader_data, method, THREAD);\n+  if (HAS_PENDING_EXCEPTION) {\n+    CompileBroker::log_metaspace_failure();\n+    ClassLoaderDataGraph::set_metaspace_oom(true);\n+    return;   \/\/ return the exception (which is cleared)\n+  }\n@@ -605,8 +601,11 @@\n-    method->set_method_data(method_data);\n-    if (PrintMethodData && (Verbose || WizardMode)) {\n-      ResourceMark rm(THREAD);\n-      tty->print(\"build_profiling_method_data for \");\n-      method->print_name(tty);\n-      tty->cr();\n-      \/\/ At the end of the run, the MDO, full of data, will be dumped.\n-    }\n+  if (!Atomic::replace_if_null(&method->_method_data, method_data)) {\n+    MetadataFactory::free_metadata(loader_data, method_data);\n+    return;\n+  }\n+\n+  if (PrintMethodData && (Verbose || WizardMode)) {\n+    ResourceMark rm(THREAD);\n+    tty->print(\"build_profiling_method_data for \");\n+    method->print_name(tty);\n+    tty->cr();\n+    \/\/ At the end of the run, the MDO, full of data, will be dumped.\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+  assert(!THREAD->owns_locks(), \"Should not own any locks\");\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-Mutex*   MethodData_lock              = NULL;\n@@ -300,1 +299,0 @@\n-  def(MethodData_lock              , PaddedMutex  , safepoint);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-extern Mutex*   MethodData_lock;                 \/\/ a lock on installation of method data\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}