{"files":[{"patch":"@@ -827,2 +827,1 @@\n-    \/\/ method to be rewritten (number of arguments at a call for\n-    \/\/ instance)\n+    \/\/ method to be rewritten (number of arguments at a call for instance)\n@@ -830,11 +829,4 @@\n-    \/\/ Method::build_profiling_method_data(method, CHECK);\n-    {\n-      \/\/ Grab a lock here to prevent multiple\n-      \/\/ MethodData*s from being created.\n-      MutexLocker ml(THREAD, MethodData_lock);\n-      if (method->method_data() == NULL) {\n-        ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n-        MethodData* method_data = MethodData::allocate(loader_data, methodHandle(THREAD, method), CHECK);\n-        method->set_method_data(method_data);\n-      }\n-    }\n+    assert(method->method_data() == NULL, \"Should only be initialized once\");\n+    ClassLoaderData* loader_data = method->method_holder()->class_loader_data();\n+    MethodData* method_data = MethodData::allocate(loader_data, methodHandle(THREAD, method), CHECK);\n+    method->set_method_data(method_data);\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -601,4 +601,0 @@\n-  \/\/ The store into method must be released. On platforms without\n-  \/\/ total store order (TSO) the reference may become visible before\n-  \/\/ the initialization of data otherwise.\n-  OrderAccess::release();\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+  assert(!THREAD->owns_locks(), \"Should not own any locks\");\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}