{"files":[{"patch":"@@ -1808,1 +1808,1 @@\n-  intx cache_line_size = prefetch_data_size();\n+  int cache_line_size = checked_cast<int>(prefetch_data_size());\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  v[1] = seed >> 32;\n+  v[1] = (uint32_t)(seed >> 32);\n","filename":"src\/hotspot\/share\/classfile\/altHashing.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -968,1 +968,1 @@\n-    _annotations_present |= nth_bit((int)id);\n+    _annotations_present |= (int)nth_bit((int)id);\n@@ -973,1 +973,1 @@\n-    _annotations_present &= ~nth_bit((int)id);\n+    _annotations_present &= (int)~nth_bit((int)id);\n@@ -1740,2 +1740,2 @@\n-  const unsigned int size =\n-    (*localvariable_table_length) * sizeof(Classfile_LVT_Element) \/ sizeof(u2);\n+  const unsigned int size = checked_cast<unsigned>(\n+    (*localvariable_table_length) * sizeof(Classfile_LVT_Element) \/ sizeof(u2));\n@@ -2352,1 +2352,1 @@\n-      calculated_attribute_length +=\n+      calculated_attribute_length += checked_cast<unsigned int>(\n@@ -2360,1 +2360,1 @@\n-              sizeof(u2) );  \/\/ catch_type_index\n+              sizeof(u2) )); \/\/ catch_type_index\n@@ -2367,2 +2367,2 @@\n-                                       sizeof(code_attribute_name_index) +\n-                                       sizeof(code_attribute_length);\n+                                       (unsigned)sizeof(code_attribute_name_index) +\n+                                       (unsigned)sizeof(code_attribute_length);\n@@ -2482,1 +2482,1 @@\n-      const u2 real_length = (method_parameters_length * 4u) + 1u;\n+      const u4 real_length = (method_parameters_length * 4u) + 1u;\n@@ -3205,1 +3205,1 @@\n-u2 ClassFileParser::parse_classfile_record_attribute(const ClassFileStream* const cfs,\n+u4 ClassFileParser::parse_classfile_record_attribute(const ClassFileStream* const cfs,\n@@ -3407,1 +3407,1 @@\n-  const int operand_count = (attribute_byte_length - sizeof(u2)) \/ sizeof(u2);\n+  const unsigned int operand_count = (attribute_byte_length - (unsigned)sizeof(u2)) \/ (unsigned)sizeof(u2);\n@@ -4815,1 +4815,1 @@\n-          int newlen = c - (char*) signature;\n+          int newlen = pointer_delta_as_int(c, (char*) signature);\n@@ -5025,1 +5025,1 @@\n-      length -= nextp - p;\n+      length -= pointer_delta_as_int(nextp, p);\n@@ -5244,1 +5244,1 @@\n-  ik->set_initial_method_idnum(ik->methods()->length());\n+  ik->set_initial_method_idnum(checked_cast<u2>(ik->methods()->length()));\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-  u2 parse_classfile_record_attribute(const ClassFileStream* const cfs,\n+  u4 parse_classfile_record_attribute(const ClassFileStream* const cfs,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  return SymbolTable::new_symbol(name, start - base, end - base);\n+  return SymbolTable::new_symbol(name, pointer_delta_as_int(start, base), pointer_delta_as_int(end, base));\n@@ -272,0 +272,2 @@\n+        \/\/ We don't verify the length of the classfile stream fits in an int, but this is the\n+        \/\/ bootloader so we have control of this.\n@@ -274,1 +276,1 @@\n-                                   st.st_size,\n+                                   checked_cast<int>(st.st_size),\n@@ -423,1 +425,1 @@\n-                               (int)size,\n+                               checked_cast<int>(size),\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-      dir_len = dir_tail - dir_name + 1;\n+      dir_len = pointer_delta_as_int(dir_tail, dir_name) + 1;\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -368,2 +368,2 @@\n-jchar HashtableTextDump::unescape(const char* from, const char* end, int count) {\n-  jchar value = 0;\n+int HashtableTextDump::unescape(const char* from, const char* end, int count) {\n+  int value = 0;\n@@ -412,1 +412,1 @@\n-          jchar value = unescape(from, end, 2);\n+          int value = unescape(from, end, 2);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-  jchar unescape(const char* from, const char* end, int count);\n+  int unescape(const char* from, const char* end, int count);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                                                    end_ptr - ptr,\n+                                                    pointer_delta_as_int(end_ptr, ptr),\n@@ -158,1 +158,1 @@\n-                                   end_ptr - ptr,\n+                                   pointer_delta_as_int(end_ptr, ptr),\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -498,1 +498,1 @@\n-      sum += sizeof(*probe) + (probe->num_loaders() * sizeof(ClassLoaderData*));\n+      sum += (int)sizeof(*probe) + (probe->num_loaders() * (int)sizeof(ClassLoaderData*));\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-uintx hash_string(const jchar* s, int len, bool useAlt) {\n+unsigned int hash_string(const jchar* s, int len, bool useAlt) {\n@@ -891,1 +891,1 @@\n-  CompactHashtableWriter writer(_items_count, ArchiveBuilder::string_stats());\n+  CompactHashtableWriter writer((int)_items_count, ArchiveBuilder::string_stats());\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-static uintx hash_symbol(const char* s, int len, bool useAlt) {\n+static unsigned int hash_symbol(const char* s, int len, bool useAlt) {\n@@ -125,1 +125,1 @@\n-static uintx hash_shared_symbol(const char* s, int len) {\n+static unsigned int hash_shared_symbol(const char* s, int len) {\n@@ -240,1 +240,1 @@\n-  return (double)_items_count\/_current_size;\n+  return (double)_items_count\/(double)_current_size;\n@@ -926,1 +926,1 @@\n-          ((float)_symbols_removed \/ _symbols_counted) * 100);\n+          ((float)_symbols_removed \/ (float)_symbols_counted) * 100);\n@@ -933,1 +933,1 @@\n-  tty->print_cr(\"  Average symbol length    %7.2f\", ((float)hi.total_length \/ hi.total_count));\n+  tty->print_cr(\"  Average symbol length    %7.2f\", ((float)hi.total_length \/ (float)hi.total_count));\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -600,1 +600,1 @@\n-      return intx(loader_a) - intx(loader_b);\n+      return checked_cast<int>(intptr_t(loader_a) - intptr_t(loader_b));\n@@ -602,1 +602,1 @@\n-      return intx(a[0]) - intx(b[0]);\n+      return checked_cast<int>(intptr_t(a[0]) - intptr_t(b[0]));\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -809,1 +809,1 @@\n-  return vmSymbols::as_SID( (info >> shift) & mask );\n+  return vmSymbols::as_SID( checked_cast<int>((info >> shift) & mask));\n@@ -816,1 +816,1 @@\n-  return vmSymbols::as_SID( (info >> shift) & mask );\n+  return vmSymbols::as_SID( checked_cast<int>((info >> shift) & mask));\n@@ -823,1 +823,1 @@\n-  return vmSymbols::as_SID( (info >> shift) & mask );\n+  return vmSymbols::as_SID( checked_cast<int>((info >> shift) & mask));\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-  do_intx_flag(ContendedPaddingWidth)                                      \\\n+  do_int_flag(ContendedPaddingWidth)                                       \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-JVMFlag::Error ContendedPaddingWidthConstraintFunc(intx value, bool verbose) {\n+JVMFlag::Error ContendedPaddingWidthConstraintFunc(int value, bool verbose) {\n@@ -59,1 +59,1 @@\n-                        \"ContendedPaddingWidth (\" INTX_FORMAT \") must be \"\n+                        \"ContendedPaddingWidth (%u) must be \"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  f(intx,   ContendedPaddingWidthConstraintFunc)      \\\n+  f(int,    ContendedPaddingWidthConstraintFunc)      \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-  product(intx, ContendedPaddingWidth, 128,                                 \\\n+  product(int, ContendedPaddingWidth, 128,                                  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}