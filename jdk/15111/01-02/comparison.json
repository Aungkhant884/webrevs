{"files":[{"patch":"@@ -498,1 +498,1 @@\n-      sum += (int)sizeof(*probe) + (probe->num_loaders() * (int)sizeof(ClassLoaderData*));\n+      sum += (int)(sizeof(*probe) + (probe->num_loaders() * sizeof(ClassLoaderData*)));\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-static volatile size_t _items_count = 0;\n+static volatile int _items_count = 0;\n@@ -668,1 +668,1 @@\n-  VerifyCompStrings() : _table(unsigned(_items_count \/ 8) + 1, 0 \/* do not resize *\/), _errors(0) {}\n+  VerifyCompStrings() : _table((_items_count \/ 8) + 1, 0 \/* do not resize *\/), _errors(0) {}\n@@ -804,2 +804,2 @@\n-  if (_items_count > (size_t)max_jint) {\n-    fatal(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+  if (_items_count > max_jint) {\n+    fatal(\"Too many strings to be archived: %d\", _items_count);\n@@ -808,1 +808,1 @@\n-  int total = (int)_items_count;\n+  int total = _items_count;\n@@ -828,1 +828,1 @@\n-      log_error(cds)(\"Too many strings to be archived: \" SIZE_FORMAT, _items_count);\n+      log_error(cds)(\"Too many strings to be archived: %d\", _items_count);\n@@ -891,1 +891,1 @@\n-  CompactHashtableWriter writer((int)_items_count, ArchiveBuilder::string_stats());\n+  CompactHashtableWriter writer(_items_count, ArchiveBuilder::string_stats());\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-static volatile size_t _items_count = 0;\n+static volatile int    _items_count = 0;\n@@ -660,1 +660,1 @@\n-  return CompactHashtableWriter::estimate_size(int(_items_count));\n+  return CompactHashtableWriter::estimate_size(_items_count);\n@@ -664,1 +664,1 @@\n-  CompactHashtableWriter writer(int(_items_count), ArchiveBuilder::symbol_stats());\n+  CompactHashtableWriter writer(_items_count, ArchiveBuilder::symbol_stats());\n@@ -926,1 +926,1 @@\n-          ((float)_symbols_removed \/ (float)_symbols_counted) * 100);\n+          ((double)_symbols_removed \/ (double)_symbols_counted) * 100);\n@@ -933,1 +933,1 @@\n-  tty->print_cr(\"  Average symbol length    %7.2f\", ((float)hi.total_length \/ (float)hi.total_count));\n+  tty->print_cr(\"  Average symbol length    %7.2f\", ((double)hi.total_length \/ (double)hi.total_count));\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                        \"ContendedPaddingWidth (%u) must be \"\n+                        \"ContendedPaddingWidth (%d) must be \"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}