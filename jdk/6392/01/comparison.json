{"files":[{"patch":"@@ -126,1 +126,1 @@\n-    private String type;\n+    private final transient String type;\n@@ -273,1 +273,2 @@\n-     * {@code CertPathRep} object.\n+     * {@link CertPathRep CertPathRep} object containing the\n+     * {@code Certificate} type and encoded bytes of the {@code CertPath}.\n@@ -275,1 +276,2 @@\n-     * @return the {@code CertPathRep} to be serialized\n+     * @return a {@code CertPathRep} containing the {@code Certificate} type\n+     *         and encoded bytes of the {@code CertPath}\n@@ -302,1 +304,1 @@\n-        \/** The Certificate type *\/\n+        \/** The type of {@code Certificate}s in the {@code CertPath}. *\/\n@@ -304,1 +306,1 @@\n-        \/** The encoded form of the cert path *\/\n+        \/** The encoded form of the {@code CertPath}. *\/\n@@ -311,1 +313,1 @@\n-         * @param type the standard name of a {@code CertPath} type\n+         * @param type the standard name of a {@code Certificate} type\n@@ -320,1 +322,2 @@\n-         * Returns a {@code CertPath} constructed from the type and data.\n+         * Returns a {@code CertPath} constructed from the type and data of\n+         * this {@code CertPathRep}.\n@@ -324,1 +327,1 @@\n-         * @throws ObjectStreamException if a {@code CertPath} could not\n+         * @throws ObjectStreamException if a {@code CertPath} object could not\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/CertPath.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    private final String type;\n+    private final transient String type;\n@@ -72,1 +72,1 @@\n-    private int hash = -1; \/\/ Default to -1\n+    private transient int hash = -1; \/\/ Default to -1\n@@ -239,1 +239,1 @@\n-     * Alternate Certificate class for serialization.\n+     * Alternate {@code Certificate} class for serialization.\n@@ -254,2 +254,2 @@\n-         * Construct the alternate Certificate class with the Certificate\n-         * type and Certificate encoding bytes.\n+         * Construct the alternate {@code Certificate} class with the\n+         * {@code Certificate} type and {@code Certificate} encoding bytes.\n@@ -257,1 +257,1 @@\n-         * @param type the standard name of the Certificate type.\n+         * @param type the standard name of the {@code Certificate} type.\n@@ -259,1 +259,1 @@\n-         * @param data the Certificate data.\n+         * @param data the {@code Certificate} data.\n@@ -267,1 +267,2 @@\n-         * Resolve the Certificate Object.\n+         * Returns a {@code Certificate} with the type and data of this\n+         * {@code CertificateRep}.\n@@ -269,1 +270,1 @@\n-         * @return the resolved Certificate Object\n+         * @return the resolved {@code Certificate} object\n@@ -271,1 +272,1 @@\n-         * @throws java.io.ObjectStreamException if the Certificate\n+         * @throws java.io.ObjectStreamException if the {@code Certificate}\n@@ -291,1 +292,3 @@\n-     * Replace the Certificate to be serialized.\n+     * Replace the {@code Certificate} to be serialized with a\n+     * {@link CertificateRep CertificateRep} object containing the type and\n+     * encoded bytes of the {@code Certificate}.\n@@ -293,1 +296,2 @@\n-     * @return the alternate Certificate object to be serialized\n+     * @return a {@code CertificateRep} object containing the type and encoded\n+     *         bytes of the {@code Certificate}\n@@ -295,2 +299,2 @@\n-     * @throws java.io.ObjectStreamException if a new object representing\n-     * this Certificate could not be created\n+     * @throws java.io.ObjectStreamException if a {@code CertificateRep} object\n+     *         representing this {@code Certificate} could not be created\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/Certificate.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"}]}