[{"commit":{"message":"Merge two if conditions and some trivial changes"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"}],"sha":"5e3a445f21e91cf4b57d885af551bb6d91a54b2c"},{"commit":{"message":"8292675: Add identity transformation for removing redundant AndV\/OrV nodes\n\nRecently we found that the rotate left\/right benchmarks with vectorapi\nemit a redundant \"and\" instruction on both aarch64 and x86_64 machines\nwhich can be done away with.  For example - and(and(a, b), b) generates\ntwo \"and\" instructions which can be reduced to a single \"and\" operation-\nand(a, b) since \"and\" (and \"or\") operations are commutative and\nidempotent in nature.  This can help improve performance for all those\nworkloads which have multiple \"and\"\/\"or\" operations with the same value\nby reducing them to fewer \"and\"\/\"or\" operations accordingly.\n\nThis patch adds the following transformations for vector logical\noperations - AndV and OrV :\n\n(OpV (OpV a b) b) => (OpV a b)\n(OpV (OpV a b) a) => (OpV a b)\n(OpV (OpV a b m1) b m1) => (OpV a b m1)\n(OpV (OpV a b m1) a m1) => (OpV a b m1)\n(OpV a (OpV a b)) => (OpV a b)\n(OpV b (OpV a b)) => (OpV a b)\n(OpV a (OpV a b m) m) => (OpV a b m)\nwhere Op = \"And\", \"Or\"\n\nLinks for benchmarks tested are given below :-\nhttps:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java#L728\nhttps:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java#L764\nhttps:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java#L728\nhttps:\/\/github.com\/openjdk\/panama-vector\/blob\/2aade73adeabdf6a924136b17fd96ccc95c1d160\/test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java#L764\n\nBefore this patch, the disassembly for one these testcases\n(IntMaxVector.ROR) for Neon is shown below :\n  ldr   q16, [x12, #16]\n  and   v16.16b, v16.16b, v20.16b\n  and   v16.16b, v16.16b, v20.16b\n  add   x12, x16, x11\n  sub   v17.4s, v21.4s, v16.4s\n  ldr   q18, [x12, #16]\n  sshl  v17.4s, v18.4s, v17.4s\n  add   x11, x18, x11\n  neg   v19.16b, v16.16b\n  ushl  v19.4s, v18.4s, v19.4s\n  orr   v16.16b, v17.16b, v19.16b\n  str   q16, [x11, #16]\n\nAfter this patch, the disassembly for the same testcase above is shown\nbelow :\n  ldr   q16, [x12, #16]\n  and   v16.16b, v16.16b, v20.16b\n  add   x12, x16, x11\n  sub   v17.4s, v21.4s, v16.4s\n  ldr   q18, [x12, #16]\n  sshl  v17.4s, v18.4s, v17.4s\n  add   x11, x18, x11\n  neg   v19.16b, v16.16b\n  ushl  v19.4s, v18.4s, v19.4s\n  orr   v16.16b, v17.16b, v19.16b\n  str   q16, [x11, #16]\n\nThe other tests also emit an extra \"and\" instruction as shown above for\nthe vector ROR\/ROL operations.\n\nBelow are the performance results for the vectorapi rotate tests (tests\ngiven in the links above) with this patch on aarch64 and x86_64 machines\n(for int and long types) -\nBenchmark                aarch64   x86_64\nIntMaxVector.ROL         25.57%    26.09%\nIntMaxVector.ROR         23.75%    24.15%\nLongMaxVector.ROL        28.91%    28.51%\nLongMaxVector.ROR        16.51%    29.11%\n\nThe percentage indicates the percent gain\/improvement in performance\n(ops\/ms) with this patch over the master build without this patch. The\nmachine descriptions are given below -\naarch64 - 128-bit aarch64 machine\nx86_64  - 256-bit x86 machine"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java"}],"sha":"04f76be6323c817d12033da8c73b69dd2e75f9d3"}]