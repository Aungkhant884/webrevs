{"files":[{"patch":"@@ -1882,0 +1882,34 @@\n+\/\/ Optimize away redundant AndV\/OrV nodes when the operation\n+\/\/ is applied on the same input node multiple times\n+static Node* redundant_logical_identity(Node* n) {\n+  Node* n1 = n->in(1);\n+  \/\/ (OperationV (OperationV src1 src2) src1) => (OperationV src1 src2)\n+  \/\/ (OperationV (OperationV src1 src2) src2) => (OperationV src1 src2)\n+  \/\/ (OperationV (OperationV src1 src2 m1) src1 m1) => (OperationV src1 src2 m1)\n+  \/\/ (OperationV (OperationV src1 src2 m1) src2 m1) => (OperationV src1 src2 m1)\n+  if (n->Opcode() == n1->Opcode()) {\n+    if (((!n->is_predicated_vector() && !n1->is_predicated_vector()) ||\n+         ( n->is_predicated_vector() &&  n1->is_predicated_vector() && n->in(3) == n1->in(3))) &&\n+         ( n->in(2) == n1->in(1) || n->in(2) == n1->in(2))) {\n+      return n1;\n+    }\n+  }\n+\n+  Node* n2 = n->in(2);\n+  if (n->Opcode() == n2->Opcode()) {\n+    \/\/ (OperationV src1 (OperationV src1 src2)) => OperationV(src1, src2)\n+    \/\/ (OperationV src2 (OperationV src1 src2)) => OperationV(src1, src2)\n+    \/\/ (OperationV src1 (OperationV src1 src2 m1) m1) => OperationV(src1 src2 m1)\n+    \/\/ It is not possible to optimize - (OperationV src2 (OperationV src1 src2 m1) m1) as the\n+    \/\/ results of both \"OperationV\" nodes are different for unmasked lanes\n+    if ((!n->is_predicated_vector() && !n2->is_predicated_vector() &&\n+         (n->in(1) == n2->in(1) || n->in(1) == n2->in(2))) ||\n+         (n->is_predicated_vector() && n2->is_predicated_vector() && n->in(3) == n2->in(3) &&\n+         n->in(1) == n2->in(1))) {\n+      return n2;\n+    }\n+  }\n+\n+  return n;\n+}\n+\n@@ -1915,1 +1949,1 @@\n-  return this;\n+  return redundant_logical_identity(this);\n@@ -1951,1 +1985,1 @@\n-  return this;\n+  return redundant_logical_identity(this);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    private static int[] ib;\n@@ -69,0 +70,1 @@\n+    private static long[] lb;\n@@ -79,0 +81,1 @@\n+        ib = new int[LENGTH];\n@@ -81,0 +84,1 @@\n+        lb = new long[LENGTH];\n@@ -89,0 +93,1 @@\n+            ib[i] = RD.nextInt(25);\n@@ -90,0 +95,1 @@\n+            lb[i] = RD.nextLong(25);\n@@ -235,0 +241,123 @@\n+    \/\/ Transform AndV(AndV(a, b), b) ==> AndV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"})\n+    public static void testAndSameValue1() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        (av.and(bv).and(bv)).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals((int) and(and(ia[i], ib[i]), ib[i]), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Transform AndV(AndV(a, b), a) ==> AndV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"})\n+    public static void testAndSameValue2() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        (av.and(bv).and(av)).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals(and(and(la[i], lb[i]), la[i]), lr[i]);\n+        }\n+    }\n+\n+    \/\/ Transform AndV(b, AndV(a, b)) ==> AndV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"})\n+    public static void testAndSameValue3() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        (bv.and(av.and(bv))).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals((int) and(ib[i], and(ia[i], ib[i])), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Transform AndV(a, AndV(a, b)) ==> AndV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"})\n+    public static void testAndSameValue4() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        (av.and(av.and(bv))).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals(and(la[i], and(la[i], lb[i])), lr[i]);\n+        }\n+    }\n+\n+    \/\/ Transform AndV(AndV(a, b, m), b, m) ==> AndV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testAndMaskSameValue1() {\n+        VectorMask<Integer> mask = VectorMask.fromArray(I_SPECIES, m, 0);\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.lanewise(VectorOperators.AND, bv, mask)\n+        .lanewise(VectorOperators.AND, bv, mask).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals((int) and(and(ia[i], ib[i]), ib[i]), ir[i]);\n+            } else {\n+              Asserts.assertEquals(ia[i], ir[i]);\n+            }\n+        }\n+    }\n+\n+    \/\/ Transform AndV(AndV(a, b, m), a, m) ==> AndV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testAndMaskSameValue2() {\n+        VectorMask<Long> mask = VectorMask.fromArray(L_SPECIES, m, 0);\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        av.lanewise(VectorOperators.AND, bv, mask)\n+        .lanewise(VectorOperators.AND, av, mask).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals(and(and(la[i], lb[i]), la[i]), lr[i]);\n+            } else {\n+              Asserts.assertEquals(la[i], lr[i]);\n+            }\n+        }\n+    }\n+\n+    \/\/ Transform AndV(a, AndV(a, b, m), m) ==> AndV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testAndMaskSameValue3() {\n+        VectorMask<Integer> mask = VectorMask.fromArray(I_SPECIES, m, 0);\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.lanewise(VectorOperators.AND, av.lanewise(VectorOperators.AND, bv, mask), mask)\n+        .intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals((int) and(ia[i], and(ia[i], ib[i])), ir[i]);\n+            } else {\n+              Asserts.assertEquals(ia[i], ir[i]);\n+            }\n+        }\n+    }\n+\n@@ -376,0 +505,123 @@\n+    \/\/ Transform OrV(OrV(a, b), b) ==> OrV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"})\n+    public static void testOrSameValue1() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        (av.or(bv).or(bv)).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals((int) or(or(ia[i], ib[i]), ib[i]), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Transform OrV(OrV(a, b), a) ==> OrV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"})\n+    public static void testOrSameValue2() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        (av.or(bv).or(av)).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals(or(or(la[i], lb[i]), la[i]), lr[i]);\n+        }\n+    }\n+\n+    \/\/ Transform OrV(b, OrV(a, b)) ==> OrV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"})\n+    public static void testOrSameValue3() {\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        (bv.or(av.or(bv))).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            Asserts.assertEquals((int) or(ib[i], or(ia[i], ib[i])), ir[i]);\n+        }\n+    }\n+\n+    \/\/ Transform OrV(a, OrV(a, b)) ==> OrV(a, b)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"})\n+    public static void testOrSameValue4() {\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        (av.or(av.or(bv))).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            Asserts.assertEquals(or(la[i], or(la[i], lb[i])), lr[i]);\n+        }\n+    }\n+\n+    \/\/ Transform OrV(OrV(a, b, m), b, m) ==> OrV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testOrMaskSameValue1() {\n+        VectorMask<Integer> mask = VectorMask.fromArray(I_SPECIES, m, 0);\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.lanewise(VectorOperators.OR, bv, mask)\n+        .lanewise(VectorOperators.OR, bv, mask).intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals((int) or(or(ia[i], ib[i]), ib[i]), ir[i]);\n+            } else {\n+              Asserts.assertEquals(ia[i], ir[i]);\n+            }\n+        }\n+    }\n+\n+    \/\/ Transform OrV(OrV(a, b, m), a, m) ==> OrV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testOrMaskSameValue2() {\n+        VectorMask<Long> mask = VectorMask.fromArray(L_SPECIES, m, 0);\n+        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n+        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+        av.lanewise(VectorOperators.OR, bv, mask)\n+        .lanewise(VectorOperators.OR, av, mask).intoArray(lr, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < L_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals(or(or(la[i], lb[i]), la[i]), lr[i]);\n+            } else {\n+              Asserts.assertEquals(la[i], lr[i]);\n+            }\n+        }\n+    }\n+\n+    \/\/ Transform OrV(a, OrV(a, b, m), m) ==> OrV(a, b, m)\n+    @Test\n+    @Warmup(10000)\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve1\", \"true\", \"avx3\", \"true\"})\n+    public static void testOrMaskSameValue3() {\n+        VectorMask<Integer> mask = VectorMask.fromArray(I_SPECIES, m, 0);\n+        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n+        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+        av.lanewise(VectorOperators.OR, av.lanewise(VectorOperators.OR, bv, mask), mask)\n+        .intoArray(ir, 0);\n+\n+        \/\/ Verify results\n+        for (int i = 0; i < I_SPECIES.length(); i++) {\n+            if (m[i]) {\n+              Asserts.assertEquals((int) or(ia[i], or(ia[i], ib[i])), ir[i]);\n+            } else {\n+              Asserts.assertEquals(ia[i], ir[i]);\n+            }\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java","additions":252,"deletions":0,"binary":false,"changes":252,"status":"modified"}]}