{"files":[{"patch":"@@ -205,1 +205,1 @@\n-class G1SegmentedArray : public FreeListConfig  {\n+class G1SegmentedArray : public AbstractAllocator  {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,2 +67,5 @@\n-FreeListAllocator::FreeListAllocator(const char* name, FreeListConfig* config) :\n-  _config(config),\n+FreeListAllocator::FreeListAllocator(const char* name,\n+                                     AbstractAllocator* allocator,\n+                                     size_t transfer_threshold) :\n+  _transfer_threshold(transfer_threshold),\n+  _allocator(allocator),\n@@ -83,1 +86,1 @@\n-    _config->deallocate(list);\n+    _allocator->deallocate(list);\n@@ -132,1 +135,1 @@\n-    return _config->allocate();\n+    return _allocator->allocate();\n@@ -155,1 +158,1 @@\n-    if (count <= _config->transfer_threshold()) return;\n+    if (count <= transfer_threshold()) return;\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,7 +34,1 @@\n-class FreeListConfig {\n-  \/\/ Desired minimum transfer batch size.  There is relatively little\n-  \/\/ importance to the specific number.  It shouldn't be too big, else\n-  \/\/ we're wasting space when the release rate is low.  If the release\n-  \/\/ rate is high, we might accumulate more than this before being\n-  \/\/ able to start a new transfer, but that's okay.\n-  const size_t _transfer_threshold;\n+class AbstractAllocator {\n@@ -42,1 +36,1 @@\n-  ~FreeListConfig() = default;\n+  ~AbstractAllocator() = default;\n@@ -44,4 +38,0 @@\n-  explicit FreeListConfig(size_t threshold = 10) : _transfer_threshold(threshold) {}\n-\n-  size_t transfer_threshold() { return _transfer_threshold; }\n-\n@@ -50,1 +40,1 @@\n-  virtual  void deallocate(void* node) = 0;\n+  virtual void deallocate(void* node) = 0;\n@@ -57,6 +47,1 @@\n-\/\/ The allocator uses allocation options specified by an instance of\n-\/\/ FreeListConfig. The FreeListConfig includes an allocation method to use in case\n-\/\/ the free list is empty and a deallocation method used to deallocate nodes in\n-\/\/ the free list. Additionally, the FreeListConfig configures the threshold used\n-\/\/ as a minimum batch size for transferring released nodes from the pending list\n-\/\/ to the free list making them available for re-allocation.\n+\/\/ Actual allocation & deallocation of nodes are provided by AbstractAllocator.\n@@ -64,0 +49,9 @@\n+  \/\/ Desired minimum transfer batch size.  There is relatively little\n+  \/\/ importance to the specific number.  It shouldn't be too big, else\n+  \/\/ we're wasting space when the release rate is low.  If the release\n+  \/\/ rate is high, we might accumulate more than this before being\n+  \/\/ able to start a new transfer, but that's okay.\n+  const size_t _transfer_threshold;\n+\n+  size_t transfer_threshold() const { return _transfer_threshold; }\n+\n@@ -111,2 +105,2 @@\n-  FreeListConfig* _config;\n-  char _name[DEFAULT_CACHE_LINE_SIZE - sizeof(FreeListConfig*)];  \/\/ Use name as padding.\n+  AbstractAllocator* _allocator;\n+  char _name[DEFAULT_CACHE_LINE_SIZE - sizeof(AbstractAllocator*)];  \/\/ Use name as padding.\n@@ -129,1 +123,3 @@\n-  FreeListAllocator(const char* name, FreeListConfig* config);\n+  FreeListAllocator(const char* name,\n+                    AbstractAllocator* allocator,\n+                    size_t transfer_threshold = 10);\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.hpp","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -41,3 +41,1 @@\n-BufferNode::AllocatorConfig::AllocatorConfig(size_t size) : _buffer_size(size) {}\n-\n-void* BufferNode::AllocatorConfig::allocate() {\n+void* BufferNode::Allocator::MemAllocator::allocate() {\n@@ -48,1 +46,1 @@\n-void BufferNode::AllocatorConfig::deallocate(void* node) {\n+void BufferNode::Allocator::MemAllocator::deallocate(void* node) {\n@@ -54,2 +52,2 @@\n-  _config(buffer_size),\n-  _free_list(name, &_config)\n+  _mem_allocator(buffer_size),\n+  _free_list(name, &_mem_allocator)\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -160,1 +160,0 @@\n-  class AllocatorConfig;\n@@ -165,6 +164,2 @@\n-\/\/ We use BufferNode::AllocatorConfig to set the allocation options for the\n-\/\/ FreeListAllocator.\n-class BufferNode::AllocatorConfig : public FreeListConfig {\n-  const size_t _buffer_size;\n-public:\n-  explicit AllocatorConfig(size_t size);\n+class BufferNode::Allocator {\n+  friend class TestSupport;\n@@ -172,1 +167,4 @@\n-  ~AllocatorConfig() = default;\n+  class MemAllocator : public AbstractAllocator {\n+    const size_t _buffer_size;\n+  public:\n+    explicit MemAllocator(size_t buffer_size) : _buffer_size(buffer_size) {}\n@@ -174,1 +172,1 @@\n-  void* allocate() override;\n+    ~MemAllocator() = default;\n@@ -176,1 +174,1 @@\n-  void deallocate(void* node) override;\n+    void* allocate() override;\n@@ -178,5 +176,1 @@\n-  size_t buffer_size() const { return _buffer_size; }\n-};\n-\n-class BufferNode::Allocator {\n-  friend class TestSupport;\n+    void deallocate(void* node) override;\n@@ -184,1 +178,2 @@\n-  AllocatorConfig _config;\n+    size_t buffer_size() const { return _buffer_size; }\n+  } _mem_allocator;\n@@ -193,1 +188,1 @@\n-  size_t buffer_size() const { return _config.buffer_size(); }\n+  size_t buffer_size() const { return _mem_allocator.buffer_size(); }\n","filename":"src\/hotspot\/share\/gc\/shared\/ptrQueue.hpp","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"}]}