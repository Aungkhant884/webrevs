{"files":[{"patch":"@@ -118,0 +118,1 @@\n+doclet.inheritDocWithinInappropriateTag=@inheritDoc cannot be used within this tag\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,3 @@\n-                messages.warning(e, \"doclet.noInheritedDoc\", message);\n+                var path = writer.configuration().utils.getCommentHelper(e).getDocTreePath(holderTag);\n+                messages.warning(path, \"doclet.inheritDocWithinInappropriateTag\", message);\n+                return replacement;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284299\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestInheritDocWithinInappropriateTag\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestInheritDocWithinInappropriateTag extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestInheritDocWithinInappropriateTag()\n+                .runTests(m -> new Object[]{Path.of(m.getName())});\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void test(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        public class A {\n+                            \/**\n+                             * A.x().\n+                             *\/\n+                            public void x() { }\n+                        }\n+                        \"\"\",\n+                \"\"\"\n+                        public class B extends A {\n+                            \/**\n+                             * {@summary {@inheritDoc}}\n+                             *\n+                             * {@link Object#hashCode() {@inheritDoc}}\n+                             * {@linkplain Object#hashCode() {@inheritDoc}}\n+                             *\n+                             * {@index term {@inheritDoc}}\n+                             *\/\n+                            @Override\n+                            public void x() { }\n+                        }\n+                        \"\"\");\n+        javadoc(\"-Xdoclint:none\",\n+                \"-d\", base.resolve(\"out\").toString(),\n+                src.resolve(\"A.java\").toString(),\n+                src.resolve(\"B.java\").toString());\n+        checkExit(Exit.OK);\n+        new OutputChecker(Output.OUT).setExpectOrdered(false).check(\n+                \"\"\"\n+                        warning: @inheritDoc cannot be used within this tag\n+                             * {@summary {@inheritDoc}}\n+                               ^\n+                        \"\"\",\n+                \"\"\"\n+                        warning: @inheritDoc cannot be used within this tag\n+                             * {@link Object#hashCode() {@inheritDoc}}\n+                               ^\n+                        \"\"\",\n+                \"\"\"\n+                        warning: @inheritDoc cannot be used within this tag\n+                             * {@linkplain Object#hashCode() {@inheritDoc}}\n+                               ^\n+                        \"\"\",\n+                \"\"\"\n+                        warning: @inheritDoc cannot be used within this tag\n+                             * {@index term {@inheritDoc}}\n+                               ^\n+                        \"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInheritDocWithinInappropriateTag\/TestInheritDocWithinInappropriateTag.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}