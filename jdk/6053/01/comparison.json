{"files":[{"patch":"@@ -2424,0 +2424,8 @@\n+                    } catch (IOException ioe) {\n+                        if (ioe.getCause() instanceof ClassNotFoundException cnfe) {\n+                            \/\/ Work around for wrapped CNFE in GetField.get(String, Object);\n+                            \/\/ As above, mark CNFE and propagate to dependencies\n+                            handles.markException(passHandle, cnfe);\n+                        } else {\n+                            throw ioe;\n+                        }\n@@ -2648,1 +2656,1 @@\n-        public Object get(String name, Object val) {\n+        public Object get(String name, Object val) throws IOException {\n@@ -2653,2 +2661,7 @@\n-                return (handles.lookupException(objHandle) == null) ?\n-                    objValues[off] : null;\n+                ClassNotFoundException ex = handles.lookupException(objHandle);\n+                if (ex != null) {\n+                    \/\/ Wrap the exception to be caught in readSerialData when\n+                    \/\/ invokeReadObject is called.\n+                    throw new IOException(ex);\n+                }\n+                return objValues[off];\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273660\n+ * @summary Verify that ObjectInputStream ReadFields correctly reports ClassNotFoundException\n+ *    while getting the field value. The test uses Vector that calls ReadFields from its readObject.\n+ * @run main ReadFieldsCNF\n+ *\/\n+\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.HexFormat;\n+import java.util.Vector;\n+\n+public class ReadFieldsCNF {\n+\n+    public static void main(String[] args) throws IOException, ClassNotFoundException {\n+\n+        Role role = new Role();\n+        Vector<Role> vector = new Vector<>();\n+        vector.add(role);\n+\n+        \/\/ Serialize the Vector with the Role\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try {\n+            ObjectOutputStream objectOutputStream = new ObjectOutputStream(baos);\n+            objectOutputStream.writeObject(vector);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+\n+        \/\/ Modify the byte stream to change the classname to be deserialized to\n+        \/\/ XeadFieldsCNF$Role.\n+        byte[] bytes = baos.toByteArray();\n+        int off = 160;\n+        if (bytes[off] != 'R') {\n+            \/\/ Classname not where it was expected, print debug info\n+            String s = new String(bytes);\n+            off = s.indexOf(Role.class.getName()) + 1;\n+            System.out.println(\"Role offset: \" + off);\n+            System.out.println(\"dump: \" + HexFormat.of().formatHex(bytes, off, off + 16));\n+            System.out.println(\"str:  \" + new String(bytes, off, 16));\n+            throw new RuntimeException(\"class not found at index: \" + off);\n+        }\n+\n+        bytes[off] = (byte) 'X';  \/\/ replace R with X -> Class not found\n+\n+        \/\/ Deserialize the Vector expecting a ClassNotFoundException\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));\n+        try {\n+            Object obj = in.readObject();\n+            System.out.println(\"Read: \" + obj);\n+            throw new RuntimeException(\"Missing exception, should not reach here\");\n+        } catch (ClassNotFoundException cnfe) {\n+            \/\/ Expected ClassNotFoundException\n+            String expected = \"XeadFieldsCNF$Role\";\n+            if (!(expected.equals(cnfe.getMessage()))) {\n+                throw new RuntimeException(\"Expected: \" + expected + \", actual: \" + cnfe.getMessage());\n+            }\n+        }\n+        \/\/ Other exceptions cause the test to fail\n+    }\n+\n+    static class Role implements Serializable {\n+        private static final long serialVersionUID = 0L;\n+\n+        Role() {}\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/GetField\/ReadFieldsCNF.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}