{"files":[{"patch":"@@ -1671,17 +1671,5 @@\n-        if (divisor < 0L) { \/\/ signed comparison\n-            \/\/ Answer must be 0 or 1 depending on relative magnitude\n-            \/\/ of dividend and divisor.\n-            return (compareUnsigned(dividend, divisor)) < 0 ? 0L :1L;\n-        }\n-\n-        if (dividend > 0) \/\/  Both inputs non-negative\n-            return dividend\/divisor;\n-        else {\n-            \/*\n-             * For simple code, leveraging BigInteger.  Longer and faster\n-             * code written directly in terms of operations on longs is\n-             * possible; see \"Hacker's Delight\" for divide and remainder\n-             * algorithms.\n-             *\/\n-            return toUnsignedBigInteger(dividend).\n-                divide(toUnsignedBigInteger(divisor)).longValue();\n+        \/* See Hacker's Delight (2nd ed), section 9.3 *\/\n+        if (divisor >= 0) {\n+            final long q = (dividend >>> 1) \/ divisor << 1;\n+            final long r = dividend - q * divisor;\n+            return q + ((r | ~(r - divisor)) >>> (Long.SIZE - 1));\n@@ -1689,0 +1677,1 @@\n+        return (dividend & ~(dividend - divisor)) >>> (Long.SIZE - 1);\n@@ -1704,8 +1693,16 @@\n-        if (dividend > 0 && divisor > 0) { \/\/ signed comparisons\n-            return dividend % divisor;\n-        } else {\n-            if (compareUnsigned(dividend, divisor) < 0) \/\/ Avoid explicit check for 0 divisor\n-                return dividend;\n-            else\n-                return toUnsignedBigInteger(dividend).\n-                    remainder(toUnsignedBigInteger(divisor)).longValue();\n+        \/* See Hacker's Delight (2nd ed), section 9.3 *\/\n+        if (divisor >= 0) {\n+            final long q = (dividend >>> 1) \/ divisor << 1;\n+            final long r = dividend - q * divisor;\n+            \/*\n+             * Here, 0 <= r < 2 * divisor\n+             * (1) When 0 <= r < divisor, the remainder is simply r.\n+             * (2) Otherwise the remainder is r - divisor.\n+             *\n+             * In case (1), r - divisor < 0. Applying ~ produces a long with\n+             * sign bit 0, so >> produces 0. The returned value is thus r.\n+             *\n+             * In case (2), a similar reasoning shows that >> produces -1,\n+             * so the returned value is r - divisor.\n+             *\/\n+            return r - ((~(r - divisor) >> (Long.SIZE - 1)) & divisor);\n@@ -1713,0 +1710,10 @@\n+        \/*\n+         * (1) When dividend >= 0, the remainder is dividend.\n+         * (2) Otherwise\n+         *      (2.1) When dividend < divisor, the remainder is dividend.\n+         *      (2.2) Otherwise the remainder is dividend - divisor\n+         *\n+         * A reasoning similar to the above shows that the returned value\n+         * is as expected.\n+         *\/\n+        return dividend - (((dividend & ~(dividend - divisor)) >> (Long.SIZE - 1)) & divisor);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":32,"deletions":25,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -378,1 +378,6 @@\n-        long MAX_UNSIGNED_INT = Integer.toUnsignedLong(0xffff_ffff);\n+        long TWO_31 = 1L << Integer.SIZE - 1;\n+        long TWO_32 = 1L << Integer.SIZE;\n+        long TWO_33 = 1L << Integer.SIZE + 1;\n+        BigInteger NINETEEN = BigInteger.valueOf(19L);\n+        BigInteger TWO_63 = BigInteger.ONE.shiftLeft(Long.SIZE - 1);\n+        BigInteger TWO_64 = BigInteger.ONE.shiftLeft(Long.SIZE);\n@@ -381,15 +386,40 @@\n-            BigInteger.valueOf(0L),\n-            BigInteger.valueOf(1L),\n-            BigInteger.valueOf(10L),\n-            BigInteger.valueOf(2147483646L),   \/\/ Integer.MAX_VALUE - 1\n-            BigInteger.valueOf(2147483647L),   \/\/ Integer.MAX_VALUE\n-            BigInteger.valueOf(2147483648L),   \/\/ Integer.MAX_VALUE + 1\n-\n-            BigInteger.valueOf(MAX_UNSIGNED_INT - 1L),\n-            BigInteger.valueOf(MAX_UNSIGNED_INT),\n-\n-            BigInteger.valueOf(Long.MAX_VALUE - 1L),\n-            BigInteger.valueOf(Long.MAX_VALUE),\n-            BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE),\n-\n-            TWO.pow(64).subtract(BigInteger.ONE)\n+            BigInteger.ZERO,\n+            BigInteger.ONE,\n+            BigInteger.TEN,\n+            NINETEEN,\n+\n+            BigInteger.valueOf(TWO_31 - 19L),\n+            BigInteger.valueOf(TWO_31 - 10L),\n+            BigInteger.valueOf(TWO_31 - 1L),\n+            BigInteger.valueOf(TWO_31),\n+            BigInteger.valueOf(TWO_31 + 1L),\n+            BigInteger.valueOf(TWO_31 + 10L),\n+            BigInteger.valueOf(TWO_31 + 19L),\n+\n+            BigInteger.valueOf(TWO_32 - 19L),\n+            BigInteger.valueOf(TWO_32 - 10L),\n+            BigInteger.valueOf(TWO_32 - 1L),\n+            BigInteger.valueOf(TWO_32),\n+            BigInteger.valueOf(TWO_32 + 1L),\n+            BigInteger.valueOf(TWO_32 + 10L),\n+            BigInteger.valueOf(TWO_32 - 19L),\n+\n+            BigInteger.valueOf(TWO_33 - 19L),\n+            BigInteger.valueOf(TWO_33 - 10L),\n+            BigInteger.valueOf(TWO_33 - 1L),\n+            BigInteger.valueOf(TWO_33),\n+            BigInteger.valueOf(TWO_33 + 1L),\n+            BigInteger.valueOf(TWO_33 + 10L),\n+            BigInteger.valueOf(TWO_33 + 19L),\n+\n+            TWO_63.subtract(NINETEEN),\n+            TWO_63.subtract(BigInteger.TEN),\n+            TWO_63.subtract(BigInteger.ONE),\n+            TWO_63,\n+            TWO_63.add(BigInteger.ONE),\n+            TWO_63.add(BigInteger.TEN),\n+            TWO_63.add(NINETEEN),\n+\n+            TWO_64.subtract(NINETEEN),\n+            TWO_64.subtract(BigInteger.TEN),\n+            TWO_64.subtract(BigInteger.ONE),\n","filename":"test\/jdk\/java\/lang\/Long\/Unsigned.java","additions":46,"deletions":16,"binary":false,"changes":62,"status":"modified"}]}