{"files":[{"patch":"@@ -92,5 +92,4 @@\n-template <DecoratorSet MO = MO_UNORDERED>\n-class ShenandoahEvacuateUpdateMetadataClosure: public ShenandoahOopClosureBase {\n-private:\n-  ShenandoahHeap* const _heap;\n-  Thread* const         _thread;\n+template <bool atomic>\n+class ShenandoahEvacuateUpdateRootClosureBase : public ShenandoahOopClosureBase {\n+protected:\n+    ShenandoahHeap* const _heap;\n@@ -98,7 +97,6 @@\n-  inline ShenandoahEvacuateUpdateMetadataClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-\n-private:\n-  template <class T>\n-  inline void do_oop_work(T* p);\n+    inline ShenandoahEvacuateUpdateRootClosureBase();\n+    inline virtual void do_oop(oop* p);\n+    inline virtual void do_oop(narrowOop* p);\n+protected:\n+    template <class T>\n+    inline void do_oop_work(T* p, Thread* t);\n@@ -107,0 +105,2 @@\n+using ShenandoahEvacuateUpdateMetadataClosure = ShenandoahEvacuateUpdateRootClosureBase<false>;\n+\n@@ -108,3 +108,1 @@\n-class ShenandoahEvacuateUpdateRootsClosure : public ShenandoahOopClosureBase {\n-private:\n-  ShenandoahHeap* const _heap;\n+class ShenandoahEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootClosureBase<true> {\n@@ -113,5 +111,2 @@\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-protected:\n-  template <typename T>\n-  inline void do_oop_work(T* p, Thread* thr);\n+  inline virtual void do_oop(oop* p);\n+  inline virtual void do_oop(narrowOop* p);\n@@ -120,1 +115,1 @@\n-class ShenandoahContextEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootsClosure {\n+class ShenandoahContextEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootClosureBase<true> {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -111,3 +111,3 @@\n-template <DecoratorSet MO>\n-ShenandoahEvacuateUpdateMetadataClosure<MO>::ShenandoahEvacuateUpdateMetadataClosure() :\n-  _heap(ShenandoahHeap::heap()), _thread(Thread::current()) {\n+template <bool atomic>\n+ShenandoahEvacuateUpdateRootClosureBase<atomic>::ShenandoahEvacuateUpdateRootClosureBase() :\n+  _heap(ShenandoahHeap::heap()) {\n@@ -116,1 +116,1 @@\n-template <DecoratorSet MO>\n+template <bool atomic>\n@@ -118,1 +118,1 @@\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop_work(T* p) {\n+void ShenandoahEvacuateUpdateRootClosureBase<atomic>::do_oop_work(T* p, Thread* t) {\n@@ -122,1 +122,1 @@\n-  assert(_thread == Thread::current(), \"Wrong thread\");\n+  assert(t == Thread::current(), \"Wrong thread\");\n@@ -132,1 +132,6 @@\n-        resolved = _heap->evacuate_object(obj, _thread);\n+        resolved = _heap->evacuate_object(obj, t);\n+      }\n+      if (atomic) {\n+        ShenandoahHeap::atomic_update_oop(resolved, p, o);\n+      } else {\n+        RawAccess<IS_NOT_NULL | MO_UNORDERED>::oop_store(p, resolved);\n@@ -134,1 +139,0 @@\n-      RawAccess<IS_NOT_NULL | MO>::oop_store(p, resolved);\n@@ -138,3 +142,3 @@\n-template <DecoratorSet MO>\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop(oop* p) {\n-  do_oop_work(p);\n+template <bool atomic>\n+void ShenandoahEvacuateUpdateRootClosureBase<atomic>::do_oop(oop* p) {\n+  do_oop_work(p, Thread::current());\n@@ -143,3 +147,3 @@\n-template <DecoratorSet MO>\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop(narrowOop* p) {\n-  do_oop_work(p);\n+template <bool atomic>\n+void ShenandoahEvacuateUpdateRootClosureBase<atomic>::do_oop(narrowOop* p) {\n+  do_oop_work(p, Thread::current());\n@@ -149,23 +153,1 @@\n-  _heap(ShenandoahHeap::heap()) {\n-}\n-\n-template <typename T>\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop_work(T* p, Thread* t) {\n-  assert(_heap->is_concurrent_weak_root_in_progress() ||\n-         _heap->is_concurrent_strong_root_in_progress(),\n-         \"Only do this in root processing phase\");\n-  assert(t == Thread::current(), \"Wrong thread\");\n-\n-  T o = RawAccess<>::oop_load(p);\n-  if (!CompressedOops::is_null(o)) {\n-    oop obj = CompressedOops::decode_not_null(o);\n-    if (_heap->in_collection_set(obj)) {\n-      assert(_heap->is_evacuation_in_progress(), \"Only do this when evacuation is in progress\");\n-      shenandoah_assert_marked(p, obj);\n-      oop resolved = ShenandoahBarrierSet::resolve_forwarded_not_null(obj);\n-      if (resolved == obj) {\n-        resolved = _heap->evacuate_object(obj, t);\n-      }\n-      ShenandoahHeap::atomic_update_oop(resolved, p, o);\n-    }\n-  }\n+  ShenandoahEvacuateUpdateRootClosureBase<true>() {\n@@ -185,1 +167,1 @@\n-  ShenandoahEvacuateUpdateRootsClosure(),\n+  ShenandoahEvacuateUpdateRootClosureBase<true>(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":20,"deletions":38,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -837,1 +837,1 @@\n-  ShenandoahEvacuateUpdateMetadataClosure<> _cl;\n+  ShenandoahEvacuateUpdateMetadataClosure   _cl;\n@@ -896,1 +896,1 @@\n-        ShenandoahEvacuateUpdateMetadataClosure<> cl;\n+        ShenandoahEvacuateUpdateMetadataClosure cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -77,1 +77,1 @@\n-  ShenandoahEvacuateUpdateMetadataClosure<> cl;\n+  ShenandoahEvacuateUpdateMetadataClosure cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}