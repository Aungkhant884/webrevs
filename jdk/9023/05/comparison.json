{"files":[{"patch":"@@ -92,3 +92,3 @@\n-template <DecoratorSet MO = MO_UNORDERED>\n-class ShenandoahEvacuateUpdateMetadataClosure: public ShenandoahOopClosureBase {\n-private:\n+template <bool concurrent, bool stable_thread>\n+class ShenandoahEvacuateUpdateRootClosureBase : public ShenandoahOopClosureBase {\n+protected:\n@@ -96,1 +96,1 @@\n-  Thread* const         _thread;\n+  Thread* const _thread;\n@@ -98,1 +98,1 @@\n-  inline ShenandoahEvacuateUpdateMetadataClosure();\n+  inline ShenandoahEvacuateUpdateRootClosureBase();\n@@ -101,2 +101,1 @@\n-\n-private:\n+protected:\n@@ -107,21 +106,3 @@\n-\/\/ Context free version, cannot cache calling thread\n-class ShenandoahEvacuateUpdateRootsClosure : public ShenandoahOopClosureBase {\n-private:\n-  ShenandoahHeap* const _heap;\n-public:\n-  inline ShenandoahEvacuateUpdateRootsClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-protected:\n-  template <typename T>\n-  inline void do_oop_work(T* p, Thread* thr);\n-};\n-\n-class ShenandoahContextEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootsClosure {\n-private:\n-  Thread* const _thread;\n-public:\n-  inline ShenandoahContextEvacuateUpdateRootsClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-};\n+using ShenandoahEvacuateUpdateMetadataClosure = ShenandoahEvacuateUpdateRootClosureBase<false, true>;\n+using ShenandoahEvacuateUpdateRootsClosure = ShenandoahEvacuateUpdateRootClosureBase<true, false>;\n+using ShenandoahContextEvacuateUpdateRootsClosure = ShenandoahEvacuateUpdateRootClosureBase<true, true>;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -112,25 +112,12 @@\n-template <DecoratorSet MO>\n-ShenandoahEvacuateUpdateMetadataClosure<MO>::ShenandoahEvacuateUpdateMetadataClosure() :\n-  _heap(ShenandoahHeap::heap()), _thread(Thread::current()) {\n-}\n-\n-template <DecoratorSet MO>\n-template <class T>\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop_work(T* p) {\n-  assert(_heap->is_concurrent_weak_root_in_progress() ||\n-         _heap->is_concurrent_strong_root_in_progress(),\n-         \"Only do this in root processing phase\");\n-  assert(_thread == Thread::current(), \"Wrong thread\");\n-\n-  T o = RawAccess<>::oop_load(p);\n-  if (! CompressedOops::is_null(o)) {\n-    oop obj = CompressedOops::decode_not_null(o);\n-    if (_heap->in_collection_set(obj)) {\n-      assert(_heap->is_evacuation_in_progress(), \"Only do this when evacuation is in progress\");\n-      shenandoah_assert_marked(p, obj);\n-      oop resolved = ShenandoahBarrierSet::resolve_forwarded_not_null(obj);\n-      if (resolved == obj) {\n-        resolved = _heap->evacuate_object(obj, _thread);\n-      }\n-      RawAccess<IS_NOT_NULL | MO>::oop_store(p, resolved);\n-    }\n+template <bool concurrent, bool stable_thread>\n+ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::ShenandoahEvacuateUpdateRootClosureBase() :\n+  _heap(ShenandoahHeap::heap()), _thread(stable_thread ? Thread::current() : NULL) {\n+}\n+\n+template <bool concurrent, bool stable_thread>\n+void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(oop* p) {\n+  if (concurrent) {\n+    ShenandoahEvacOOMScope scope;\n+    do_oop_work(p);\n+  } else {\n+    do_oop_work(p);\n@@ -139,9 +126,0 @@\n-template <DecoratorSet MO>\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop(oop* p) {\n-  do_oop_work(p);\n-}\n-\n-template <DecoratorSet MO>\n-void ShenandoahEvacuateUpdateMetadataClosure<MO>::do_oop(narrowOop* p) {\n-  do_oop_work(p);\n-}\n@@ -149,2 +127,8 @@\n-ShenandoahEvacuateUpdateRootsClosure::ShenandoahEvacuateUpdateRootsClosure() :\n-  _heap(ShenandoahHeap::heap()) {\n+template <bool concurrent, bool stable_thread>\n+void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(narrowOop* p) {\n+  if (concurrent) {\n+    ShenandoahEvacOOMScope scope;\n+    do_oop_work(p);\n+  } else {\n+    do_oop_work(p);\n+  }\n@@ -153,2 +137,3 @@\n-template <typename T>\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop_work(T* p, Thread* t) {\n+template <bool atomic, bool stable_thread>\n+template <class T>\n+void ShenandoahEvacuateUpdateRootClosureBase<atomic, stable_thread>::do_oop_work(T* p) {\n@@ -158,1 +143,0 @@\n-  assert(t == Thread::current(), \"Wrong thread\");\n@@ -168,1 +152,9 @@\n-        resolved = _heap->evacuate_object(obj, t);\n+        Thread* thr = stable_thread ? _thread : Thread::current();\n+        assert(thr == Thread::current(), \"Wrong thread\");\n+\n+        resolved = _heap->evacuate_object(obj, thr);\n+      }\n+      if (atomic) {\n+        ShenandoahHeap::atomic_update_oop(resolved, p, o);\n+      } else {\n+        RawAccess<IS_NOT_NULL | MO_UNORDERED>::oop_store(p, resolved);\n@@ -170,1 +162,0 @@\n-      ShenandoahHeap::atomic_update_oop(resolved, p, o);\n@@ -175,25 +166,0 @@\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop(oop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, Thread::current());\n-}\n-\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop(narrowOop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, Thread::current());\n-}\n-\n-ShenandoahContextEvacuateUpdateRootsClosure::ShenandoahContextEvacuateUpdateRootsClosure() :\n-  ShenandoahEvacuateUpdateRootsClosure(),\n-  _thread(Thread::current()) {\n-}\n-\n-void ShenandoahContextEvacuateUpdateRootsClosure::do_oop(oop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, _thread);\n-}\n-\n-void ShenandoahContextEvacuateUpdateRootsClosure::do_oop(narrowOop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, _thread);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":32,"deletions":66,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -837,1 +837,1 @@\n-  ShenandoahEvacuateUpdateMetadataClosure<> _cl;\n+  ShenandoahEvacuateUpdateMetadataClosure   _cl;\n@@ -896,1 +896,1 @@\n-        ShenandoahEvacuateUpdateMetadataClosure<> cl;\n+        ShenandoahEvacuateUpdateMetadataClosure cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Red Hat, Inc. All rights reserved.\n@@ -77,1 +77,1 @@\n-  ShenandoahEvacuateUpdateMetadataClosure<> cl;\n+  ShenandoahEvacuateUpdateMetadataClosure cl;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}