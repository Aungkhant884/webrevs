{"files":[{"patch":"@@ -92,1 +92,1 @@\n-template <bool atomic>\n+template <bool concurrent, bool stable_thread>\n@@ -96,9 +96,0 @@\n-public:\n-  inline ShenandoahEvacuateUpdateRootClosureBase();\n-protected:\n-  template <class T>\n-  inline void do_oop_work(T* p, Thread* t);\n-};\n-\n-class ShenandoahEvacuateUpdateMetadataClosure : public ShenandoahEvacuateUpdateRootClosureBase<false> {\n-private:\n@@ -107,9 +98,1 @@\n-  inline ShenandoahEvacuateUpdateMetadataClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-};\n-\n-\/\/ Context free version, cannot cache calling thread\n-class ShenandoahEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootClosureBase<true> {\n-public:\n-  inline ShenandoahEvacuateUpdateRootsClosure();\n+  inline ShenandoahEvacuateUpdateRootClosureBase();\n@@ -118,0 +101,3 @@\n+protected:\n+  template <class T>\n+  inline void do_oop_work(T* p);\n@@ -120,8 +106,3 @@\n-class ShenandoahContextEvacuateUpdateRootsClosure : public ShenandoahEvacuateUpdateRootClosureBase<true> {\n-private:\n-  Thread* const _thread;\n-public:\n-  inline ShenandoahContextEvacuateUpdateRootsClosure();\n-  inline void do_oop(oop* p);\n-  inline void do_oop(narrowOop* p);\n-};\n+using ShenandoahEvacuateUpdateMetadataClosure = ShenandoahEvacuateUpdateRootClosureBase<false, true>;\n+using ShenandoahEvacuateUpdateRootsClosure = ShenandoahEvacuateUpdateRootClosureBase<true, false>;\n+using ShenandoahContextEvacuateUpdateRootsClosure = ShenandoahEvacuateUpdateRootClosureBase<true, true>;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.hpp","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -112,3 +112,23 @@\n-template <bool atomic>\n-ShenandoahEvacuateUpdateRootClosureBase<atomic>::ShenandoahEvacuateUpdateRootClosureBase() :\n-  _heap(ShenandoahHeap::heap()) {\n+template <bool concurrent, bool stable_thread>\n+ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::ShenandoahEvacuateUpdateRootClosureBase() :\n+  _heap(ShenandoahHeap::heap()), _thread(stable_thread ? Thread::current() : NULL) {\n+}\n+\n+template <bool concurrent, bool stable_thread>\n+void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(oop* p) {\n+  if (concurrent) {\n+    ShenandoahEvacOOMScope scope;\n+    do_oop_work(p);\n+  } else {\n+    do_oop_work(p);\n+  }\n+}\n+\n+template <bool concurrent, bool stable_thread>\n+void ShenandoahEvacuateUpdateRootClosureBase<concurrent, stable_thread>::do_oop(narrowOop* p) {\n+  if (concurrent) {\n+    ShenandoahEvacOOMScope scope;\n+    do_oop_work(p);\n+  } else {\n+    do_oop_work(p);\n+  }\n@@ -117,1 +137,1 @@\n-template <bool atomic>\n+template <bool atomic, bool stable_thread>\n@@ -119,1 +139,1 @@\n-void ShenandoahEvacuateUpdateRootClosureBase<atomic>::do_oop_work(T* p, Thread* t) {\n+void ShenandoahEvacuateUpdateRootClosureBase<atomic, stable_thread>::do_oop_work(T* p) {\n@@ -123,1 +143,3 @@\n-  assert(t == Thread::current(), \"Wrong thread\");\n+\n+  Thread* thr = stable_thread ? _thread : Thread::current();\n+  assert(thr == Thread::current(), \"Wrong thread\");\n@@ -133,1 +155,1 @@\n-        resolved = _heap->evacuate_object(obj, t);\n+        resolved = _heap->evacuate_object(obj, thr);\n@@ -144,41 +166,0 @@\n-ShenandoahEvacuateUpdateMetadataClosure::ShenandoahEvacuateUpdateMetadataClosure() :\n-  ShenandoahEvacuateUpdateRootClosureBase<false>(), _thread(Thread::current()) {\n-}\n-\n-void ShenandoahEvacuateUpdateMetadataClosure::do_oop(oop* p) {\n-  do_oop_work(p, _thread);\n-}\n-\n-void ShenandoahEvacuateUpdateMetadataClosure::do_oop(narrowOop* p) {\n-  do_oop_work(p, _thread);\n-}\n-\n-ShenandoahEvacuateUpdateRootsClosure::ShenandoahEvacuateUpdateRootsClosure() :\n-  ShenandoahEvacuateUpdateRootClosureBase<true>() {\n-}\n-\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop(oop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, Thread::current());\n-}\n-\n-void ShenandoahEvacuateUpdateRootsClosure::do_oop(narrowOop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, Thread::current());\n-}\n-\n-ShenandoahContextEvacuateUpdateRootsClosure::ShenandoahContextEvacuateUpdateRootsClosure() :\n-  ShenandoahEvacuateUpdateRootClosureBase<true>(),\n-  _thread(Thread::current()) {\n-}\n-\n-void ShenandoahContextEvacuateUpdateRootsClosure::do_oop(oop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, _thread);\n-}\n-\n-void ShenandoahContextEvacuateUpdateRootsClosure::do_oop(narrowOop* p) {\n-  ShenandoahEvacOOMScope scope;\n-  do_oop_work(p, _thread);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahClosures.inline.hpp","additions":29,"deletions":48,"binary":false,"changes":77,"status":"modified"}]}