{"files":[{"patch":"@@ -2250,3 +2250,0 @@\n-  __ resolve(ACCESS_READ, src);\n-  __ resolve(ACCESS_WRITE, dst);\n-\n@@ -2595,1 +2592,0 @@\n-    __ resolve(ACCESS_READ | ACCESS_WRITE, obj);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,5 +122,0 @@\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Register obj1, Register obj2) {\n-  __ cmp(obj1, obj2);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,7 +50,0 @@\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Register obj1, Register obj2);\n-\n-  virtual void resolve(MacroAssembler* masm, DecoratorSet decorators, Register obj) {\n-    \/\/ Default implementation does not need to do anything.\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3760,2 +3760,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, obj1, obj2);\n+  cmp(obj1, obj2);\n@@ -4163,9 +4162,0 @@\n-void MacroAssembler::resolve(DecoratorSet decorators, Register obj) {\n-  \/\/ Use stronger ACCESS_WRITE|ACCESS_READ by default.\n-  if ((decorators & (ACCESS_READ | ACCESS_WRITE)) == 0) {\n-    decorators |= ACCESS_READ | ACCESS_WRITE;\n-  }\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  return bs->resolve(this, decorators, obj);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -837,4 +837,0 @@\n-  \/\/ Resolves obj for access. Result is placed in the same register.\n-  \/\/ All other registers are preserved.\n-  void resolve(DecoratorSet decorators, Register obj);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1769,2 +1769,0 @@\n-    __ resolve(IS_NOT_NULL, obj_reg);\n-\n@@ -1921,2 +1919,0 @@\n-    __ resolve(IS_NOT_NULL, obj_reg);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -778,1 +778,0 @@\n-    __ resolve(IS_NOT_NULL, r0);\n@@ -1004,1 +1003,0 @@\n-      __ resolve(IS_NOT_NULL | ACCESS_READ, buf);\n@@ -1049,3 +1047,0 @@\n-    if (kind == Interpreter::java_util_zip_CRC32C_updateBytes) {\n-      __ resolve(IS_NOT_NULL | ACCESS_READ, buf);\n-    }\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3787,2 +3787,0 @@\n-  __ resolve(IS_NOT_NULL, r0);\n-\n@@ -3888,2 +3886,0 @@\n-  __ resolve(IS_NOT_NULL, r0);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2104,3 +2104,0 @@\n-  __ resolve(ACCESS_READ, src);\n-  __ resolve(ACCESS_WRITE, dst);\n-\n@@ -2446,1 +2443,0 @@\n-    __ resolve(ACCESS_READ | ACCESS_WRITE, obj);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,5 +145,0 @@\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Register obj1, Register obj2) {\n-  __ cmp(obj1, obj2);\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,3 +50,0 @@\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Register obj1, Register obj2);\n-\n@@ -71,4 +68,0 @@\n-\n-  virtual void resolve(MacroAssembler* masm, DecoratorSet decorators, Register obj) {\n-    \/\/ Default implementation does not need to do anything.\n-  }\n","filename":"src\/hotspot\/cpu\/arm\/gc\/shared\/barrierSetAssembler_arm.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -738,2 +738,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, obj1, obj2);\n+  cmp(obj1, obj2);\n@@ -1891,9 +1890,0 @@\n-void MacroAssembler::resolve(DecoratorSet decorators, Register obj) {\n-  \/\/ Use stronger ACCESS_WRITE|ACCESS_READ by default.\n-  if ((decorators & (ACCESS_READ | ACCESS_WRITE)) == 0) {\n-    decorators |= ACCESS_READ | ACCESS_WRITE;\n-  }\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  return bs->resolve(this, decorators, obj);\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -881,5 +881,0 @@\n-  \/\/ Resolves obj for access. Result is placed in the same register.\n-  \/\/ All other registers are preserved.\n-  void resolve(DecoratorSet decorators, Register obj);\n-\n-\n","filename":"src\/hotspot\/cpu\/arm\/macroAssembler_arm.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1155,2 +1155,0 @@\n-    __ resolve(IS_NOT_NULL, sync_obj);\n-\n@@ -1241,2 +1239,0 @@\n-    __ resolve(IS_NOT_NULL, sync_obj);\n-\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -486,1 +486,0 @@\n-    __ resolve(IS_NOT_NULL, R0);\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4252,2 +4252,0 @@\n-  __ resolve(IS_NOT_NULL, Robj);\n-\n@@ -4365,2 +4363,0 @@\n-  __ resolve(IS_NOT_NULL, Robj);\n-\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3097,3 +3097,0 @@\n-  __ resolve(ACCESS_READ, src);\n-  __ resolve(ACCESS_WRITE, dst);\n-\n@@ -3537,1 +3534,0 @@\n-    __ resolve(ACCESS_READ | ACCESS_WRITE, obj);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -198,21 +198,0 @@\n-#ifndef _LP64\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Address obj1, jobject obj2) {\n-  __ cmpoop_raw(obj1, obj2);\n-}\n-\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Register obj1, jobject obj2) {\n-  __ cmpoop_raw(obj1, obj2);\n-}\n-#endif\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Register obj1, Address obj2) {\n-  __ cmpptr(obj1, obj2);\n-}\n-\n-void BarrierSetAssembler::obj_equals(MacroAssembler* masm,\n-                                     Register obj1, Register obj2) {\n-  __ cmpptr(obj1, obj2);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -52,16 +52,0 @@\n-#ifndef _LP64\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Address obj1, jobject obj2);\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Register obj1, jobject obj2);\n-#endif\n-\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Register obj1, Register obj2);\n-  virtual void obj_equals(MacroAssembler* masm,\n-                          Register obj1, Address obj2);\n-\n-  virtual void resolve(MacroAssembler* masm, DecoratorSet decorators, Register obj) {\n-    \/\/ Default implementation does not need to do anything.\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.hpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -124,8 +124,0 @@\n-void MacroAssembler::cmpoop_raw(Address src1, jobject obj) {\n-  cmp_literal32(src1, (int32_t)obj, oop_Relocation::spec_for_immediate());\n-}\n-\n-void MacroAssembler::cmpoop_raw(Register src1, jobject obj) {\n-  cmp_literal32(src1, (int32_t)obj, oop_Relocation::spec_for_immediate());\n-}\n-\n@@ -133,2 +125,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, src1, obj);\n+  cmp_literal32(src1, (int32_t)obj, oop_Relocation::spec_for_immediate());\n@@ -138,2 +129,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, src1, obj);\n+  cmp_literal32(src1, (int32_t)obj, oop_Relocation::spec_for_immediate());\n@@ -1797,2 +1787,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, src1, src2);\n+  cmpptr(src1, src2);\n@@ -1802,2 +1791,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, src1, src2);\n+  cmpptr(src1, src2);\n@@ -1809,2 +1797,1 @@\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  bs->obj_equals(this, src1, rscratch1);\n+  cmpptr(src1, rscratch1);\n@@ -4564,9 +4551,0 @@\n-void MacroAssembler::resolve(DecoratorSet decorators, Register obj) {\n-  \/\/ Use stronger ACCESS_WRITE|ACCESS_READ by default.\n-  if ((decorators & (ACCESS_READ | ACCESS_WRITE)) == 0) {\n-    decorators |= ACCESS_READ | ACCESS_WRITE;\n-  }\n-  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-  return bs->resolve(this, decorators, obj);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":5,"deletions":27,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -330,4 +330,0 @@\n-  \/\/ Resolves obj access. Result is placed in the same register.\n-  \/\/ All other registers are preserved.\n-  void resolve(DecoratorSet decorators, Register obj);\n-\n@@ -716,1 +712,0 @@\n-  void cmpoop_raw(Address dst, jobject obj);\n@@ -722,1 +717,0 @@\n-  void cmpoop_raw(Register dst, jobject obj);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2264,1 +2264,0 @@\n-    __ resolve(IS_NOT_NULL, obj_reg);\n@@ -2417,1 +2416,0 @@\n-    __ resolve(IS_NOT_NULL, obj_reg);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -594,1 +594,0 @@\n-    __ resolve(IS_NOT_NULL, rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -260,1 +260,0 @@\n-      __ resolve(IS_NOT_NULL | ACCESS_READ, buf);\n@@ -316,1 +315,0 @@\n-      __ resolve(IS_NOT_NULL | ACCESS_READ, buf);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4309,2 +4309,0 @@\n-  __ resolve(IS_NOT_NULL, rax);\n-\n@@ -4408,2 +4406,0 @@\n-  __ resolve(IS_NOT_NULL, rax);\n-\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}