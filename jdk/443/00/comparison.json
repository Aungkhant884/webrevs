{"files":[{"patch":"@@ -26,1 +26,2 @@\n-import nsk.share.*;\n+import nsk.share.ArgumentParser;\n+import nsk.share.Failure;\n@@ -28,2 +29,1 @@\n-import java.io.*;\n-import java.util.*;\n+import java.util.StringTokenizer;\n@@ -40,1 +40,1 @@\n- * Currently no specific options are recognized by <code>AgrumentHandler<\/code>.\n+ * Currently no specific options are recognized by <code>ArgumentHandler<\/code>.\n@@ -46,1 +46,0 @@\n- *\n@@ -48,2 +47,1 @@\n- * @see #findOptionStringValue(String,String)\n- * @see #findOptionIntValue(String,int)\n+ * @see #findOptionIntValue(String, int)\n@@ -58,6 +56,4 @@\n-     * @param  args  Array of the raw command-line arguments.\n-     *\n-     * @throws  NullPointerException  If <code>args==null<\/code>.\n-     * @throws  IllegalArgumentException  If Binder or Log options\n-     *                                    are set incorrectly.\n-     *\n+     * @param args Array of the raw command-line arguments.\n+     * @throws NullPointerException     If <code>args==null<\/code>.\n+     * @throws IllegalArgumentException If Binder or Log options\n+     *                                  are set incorrectly.\n@@ -66,1 +62,1 @@\n-    public ArgumentHandler(String args[]) {\n+    public ArgumentHandler(String[] args) {\n@@ -79,19 +75,1 @@\n-        String value = options.getProperty(name);\n-        return value;\n-    }\n-\n-    \/**\n-     * Return string value of given option if specified; or <i>defaultValue<\/i> otherwise.\n-     *\n-     * @throws BadOption if option is specified but has empty value.\n-     *\/\n-    public String findOptionStringValue(String name, String defaultValue) {\n-        String value = options.getProperty(name);\n-        if (value == null) {\n-            return defaultValue;\n-        }\n-\n-        if (value.length() <= 0) {\n-            throw new BadOption(\"Empty value of option: \" + name + \"=\" + value);\n-        }\n-        return value;\n+        return options.getProperty(name);\n@@ -123,2 +101,2 @@\n-     * @param value string representation of value (could be an empty string);\n-     *              or null if this option has no value\n+     * @param value  string representation of value (could be an empty string);\n+     *               or null if this option has no value\n@@ -126,4 +104,2 @@\n-     *         <i>false<\/i> if otion is not admissible\n-     *\n-     * @throws <i>BadOption<\/i> if admissible option has illegal value\n-     *\n+     * <i>false<\/i> if option is not admissible\n+     * @throws BadOption if admissible option has illegal value\n@@ -150,2 +126,2 @@\n-     * @throws BadOption if known option has illegel value\n-     *                  or all options are inconsistent\n+     * @throws BadOption if known option has illegal value\n+     *                   or all options are inconsistent\n@@ -160,1 +136,1 @@\n-            int start = token.startsWith(\"-\")? 1 : 0;\n+            int start = token.startsWith(\"-\") ? 1 : 0;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/ArgumentHandler.java","additions":18,"deletions":42,"binary":false,"changes":60,"status":"modified"}]}