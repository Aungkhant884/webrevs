{"files":[{"patch":"@@ -424,0 +424,12 @@\n+\/\/ tty needs to be always accessible since there are code paths that may write to it\n+\/\/ outside of the VM lifespan.\n+\/\/ Examples for pre-VM-init accesses: Early NMT init, Early UL init\n+\/\/ Examples for post-VM-exit accesses: many, e.g. NMT C-heap bounds checker, signal handling, AGCT, ...\n+\/\/ During lifetime tty is served by an instance of defaultStream. That instance's deletion cannot\n+\/\/ be (easily) postponed or omitted since it has ties to the JVM infrastructure.\n+\/\/ The policy followed here is a compromise reached during review of JDK-8292351:\n+\/\/ - pre-init: we silently swallow all output. We won't see anything, but at least won't crash\n+\/\/ - post-exit: we write to a simple fdStream, but somewhat mimik the behavior of the real defaultStream\n+static nullStream tty_preinit_stream;\n+outputStream* tty = &tty_preinit_stream;\n+\n@@ -425,1 +437,0 @@\n-outputStream* tty;\n@@ -618,0 +629,3 @@\n+fdStream fdStream::_stdout_stream(1);\n+fdStream fdStream::_stderr_stream(2);\n+\n@@ -964,1 +978,2 @@\n-  if (tty != defaultStream::instance) {\n+  \/\/ Make sure tty works after VM exit by assigning an always-on functioning fdStream.\n+  if (tty != &tty_preinit_stream && tty != defaultStream::instance) {\n@@ -967,4 +982,2 @@\n-  if (defaultStream::instance != NULL) {\n-    delete defaultStream::instance;\n-  }\n-  tty = NULL;\n+  tty = DisplayVMOutputToStderr ? fdStream::stdout_stream() : fdStream::stderr_stream();\n+  delete defaultStream::instance;\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -251,0 +251,2 @@\n+  static fdStream _stdout_stream;\n+  static fdStream _stderr_stream;\n@@ -258,0 +260,11 @@\n+\n+  \/\/ predefined streams for unbuffered IO to stdout, stderr\n+  static fdStream* stdout_stream() { return &_stdout_stream; }\n+  static fdStream* stderr_stream() { return &_stderr_stream; }\n+};\n+\n+\/\/ A \/dev\/null equivalent stream\n+class nullStream : public outputStream {\n+public:\n+  void write(const char* c, size_t len) {}\n+  void flush() {};\n","filename":"src\/hotspot\/share\/utilities\/ostream.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}