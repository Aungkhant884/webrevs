{"files":[{"patch":"@@ -74,0 +74,1 @@\n+JVM_GetPreserveAllAnnotations\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -564,0 +564,3 @@\n+JNIEXPORT jboolean JNICALL\n+JVM_GetPreserveAllAnnotations(JNIEnv *env, jclass cls);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1505,0 +1505,3 @@\n+JVM_ENTRY(jboolean, JVM_GetPreserveAllAnnotations(JNIEnv *env, jclass cls))\n+  return PreserveAllAnnotations;\n+JVM_END\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -111,0 +111,3 @@\n+    private static native boolean preserveAllAnnotations();\n+    private static final boolean preserveAllAnnotations = preserveAllAnnotations();\n+\n@@ -116,2 +119,1 @@\n-        Map<Class<? extends Annotation>, Annotation> result =\n-            new LinkedHashMap<Class<? extends Annotation>, Annotation>();\n+        Map<Class<? extends Annotation>, Annotation> result = new LinkedHashMap<>();\n@@ -124,1 +126,2 @@\n-                if (AnnotationType.getInstance(klass).retention() == RetentionPolicy.RUNTIME &&\n+                if (\n+                    (preserveAllAnnotations || AnnotationType.getInstance(klass).retention() == RetentionPolicy.RUNTIME) &&\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationParser.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -103,0 +103,7 @@\n+JNIEXPORT jboolean JNICALL\n+Java_sun_reflect_annotation_AnnotationParser_preserveAllAnnotations(JNIEnv *env, jclass unused)\n+{\n+  jboolean t = JVM_GetPreserveAllAnnotations(env, unused);\n+  return t;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Retention;\n+\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267936\n+ * @summary Expose runtime invisible annotations via Class.getAnnotation when -XX:+PreserveAllAnnotations is on\n+ * @run main\/othervm -XX:+PreserveAllAnnotations TestAllAnnotationsPreserved\n+ *\/\n+\n+public class TestAllAnnotationsPreserved {\n+    public static void main(String... args) {\n+        new TestAllAnnotationsPreserved().test();\n+    }\n+\n+    void test() {\n+        NotAtRuntimeByDefault a = Test.class.getAnnotation(NotAtRuntimeByDefault.class);\n+        if (a == null) {\n+            throw new NullPointerException(\"Annotation NotAtRuntimeByDefault isn't available on class Test!\");\n+        }\n+        if (a.value() != 9) {\n+            throw new IllegalStateException(\"Expecting value 9 from the @NotAtRuntimeByDefault annotation\");\n+        }\n+    }\n+\n+    @Target(ElementType.TYPE)\n+    @Retention(RetentionPolicy.CLASS)\n+    static @interface NotAtRuntimeByDefault {\n+        int value();\n+    }\n+\n+    @NotAtRuntimeByDefault(9)\n+    static class Test {\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/TestAllAnnotationsPreserved.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}