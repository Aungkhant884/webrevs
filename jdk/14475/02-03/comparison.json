{"files":[{"patch":"@@ -61,0 +61,1 @@\n+    private static final MethodHandle MH_SLICE_LAYOUT;\n@@ -70,0 +71,2 @@\n+                    MethodType.methodType(MemorySegment.class, long.class, long.class));\n+            MH_SLICE_LAYOUT = lookup.findVirtual(MemorySegment.class, \"asSlice\",\n@@ -199,1 +202,4 @@\n-        VarHandle handle = Utils.makeSegmentViewVarHandle(valueLayout);\n+        \/\/ If we have an enclosing layout, drop the alignment check for the accessed element,\n+        \/\/ we check the root layout instead\n+        ValueLayout accessedLayout = enclosing != null ? valueLayout.withByteAlignment(1) : valueLayout;\n+        VarHandle handle = Utils.makeSegmentViewVarHandle(accessedLayout);\n@@ -237,2 +243,9 @@\n-        MethodHandle sliceHandle = MH_SLICE; \/\/ (MS, long, MemoryLayout) -> MS\n-        sliceHandle = MethodHandles.insertArguments(sliceHandle, 2, layout); \/\/ (MS, long) -> MS\n+        MethodHandle sliceHandle;\n+        if (enclosing != null) {\n+            \/\/ drop the alignment check for the accessed element, we check the root layout instead\n+            sliceHandle = MH_SLICE; \/\/ (MS, long, long) -> MS\n+            sliceHandle = MethodHandles.insertArguments(sliceHandle, 2, layout.byteSize()); \/\/ (MS, long) -> MS\n+        } else {\n+            sliceHandle = MH_SLICE_LAYOUT; \/\/ (MS, long, MemoryLayout) -> MS\n+            sliceHandle = MethodHandles.insertArguments(sliceHandle, 2, layout); \/\/ (MS, long) -> MS\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -152,15 +152,11 @@\n-            try {\n-                VarHandle vhX = struct.varHandle(groupElement(\"x\"));\n-                vhX.set(seg, (short) 42); \/\/ should throw\n-                fail(\"var handle didn't throw\");\n-            } catch (IllegalArgumentException e) {\n-                assertEquals(e.getMessage(), expectedMessage);\n-            }\n-\n-            try {\n-                MethodHandle sliceX = struct.sliceHandle(groupElement(\"x\"));\n-                MemorySegment slice = (MemorySegment) sliceX.invokeExact(seg); \/\/ should throw\n-                fail(\"slice handle didn't throw\");\n-            } catch (IllegalArgumentException e) {\n-                assertEquals(e.getMessage(), expectedMessage);\n-            }\n+            VarHandle vhX = struct.varHandle(groupElement(\"x\"));\n+            IllegalArgumentException iae = expectThrows(IllegalArgumentException.class, () -> {\n+                vhX.set(seg, (short) 42);\n+            });\n+            assertEquals(iae.getMessage(), expectedMessage);\n+\n+            MethodHandle sliceX = struct.sliceHandle(groupElement(\"x\"));\n+            iae = expectThrows(IllegalArgumentException.class, () -> {\n+                MemorySegment slice = (MemorySegment) sliceX.invokeExact(seg);\n+            });\n+            assertEquals(iae.getMessage(), expectedMessage);\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"}]}