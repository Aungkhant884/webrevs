{"files":[{"patch":"@@ -1369,0 +1369,1 @@\n+    event.set_codeCacheMaxCapacity(CodeCache::max_capacity());\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -561,0 +561,5 @@\n+  <Event name=\"JitRestart\" category=\"Java Virtual Machine, Compiler\" label=\"JIT Restart\" stackTrace=\"false\" startTime=\"false\" thread=\"true\">\n+    <Field type=\"int\" contentType=\"bytes\" name=\"freedMemory\" label=\"Freed Memory\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"codeCacheMaxCapacity\" label=\"Code Cache Maximum Capacity\" \/>\n+  <\/Event>\n+\n@@ -615,0 +620,1 @@\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"codeCacheMaxCapacity\" label=\"Code Cache Maximum Capacity\" \/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -414,5 +414,0 @@\n-  EventSweepCodeCache event(UNTIMED);\n-  if (event.should_commit()) {\n-    post_sweep_event(&event, sweep_start_counter, sweep_end_counter, (s4)_traversals, swept_count, flushed_count, zombified_count);\n-  }\n-\n@@ -445,0 +440,9 @@\n+    EventJitRestart event;\n+    event.set_freedMemory(freed_memory);\n+    event.set_codeCacheMaxCapacity(CodeCache::max_capacity());\n+    event.commit();\n+  }\n+\n+  EventSweepCodeCache event(UNTIMED);\n+  if (event.should_commit()) {\n+    post_sweep_event(&event, sweep_start_counter, sweep_end_counter, (s4)_traversals, swept_count, flushed_count, zombified_count);\n","filename":"src\/hotspot\/share\/runtime\/sweeper.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -554,0 +554,4 @@\n+    <event name=\"jdk.JitRestart\">\n+      <setting name=\"enabled\" control=\"compiler-enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -554,0 +554,4 @@\n+    <event name=\"jdk.JitRestart\">\n+      <setting name=\"enabled\" control=\"compiler-enabled\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,1 @@\n+        Events.assertField(event, \"codeCacheMaxCapacity\").notEqual(0L);\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeCacheFull.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            \"DataLoss\", \"IntFlag\", \"ReservedStackActivation\",\n+            \"DataLoss\", \"IntFlag\", \"ReservedStackActivation\", \"JitRestart\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,1 @@\n+    public final static String JitRestart = PREFIX + \"JitRestart\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}