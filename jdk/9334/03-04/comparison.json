{"files":[{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.compiler;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import sun.hotspot.WhiteBox;\n+import sun.hotspot.code.BlobType;\n+\n+\/**\n+ * @test TestJitRestart\n+ * @requires vm.hasJFR\n+ *\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\n+ *          jdk.management.jfr\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:.\n+ *     -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *     -XX:+SegmentedCodeCache -XX:-UseLargePages jdk.jfr.event.compiler.TestJitRestart\n+ *\/\n+public class TestJitRestart {\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean foundJitRestart = false;\n+        for (BlobType btype : BlobType.getAvailable()) {\n+            boolean jr = testWithBlobType(btype, calculateAvailableSize(btype));\n+            if (jr) {\n+                System.out.println(\"JIT restart event found for BlobType \" + btype);\n+                foundJitRestart = true;\n+            }\n+        }\n+        Asserts.assertTrue(foundJitRestart, \"No JIT restart event found\");\n+    }\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private static boolean testWithBlobType(BlobType btype, long availableSize) throws Exception {\n+        Recording r = new Recording();\n+        r.enable(EventNames.CodeCacheFull);\n+        r.enable(EventNames.JitRestart);\n+        r.start();\n+        long addr = WHITE_BOX.allocateCodeBlob(availableSize, btype.id);\n+        WHITE_BOX.freeCodeBlob(addr);\n+        \/\/ trigger sweeper thread\n+        WHITE_BOX.forceNMethodSweep();\n+        r.stop();\n+\n+        List<RecordedEvent> events = Events.fromRecording(r);\n+        System.out.println(\"# events:\" + events.size());\n+        Events.hasEvents(events);\n+\n+        for (RecordedEvent evt: events) {\n+            System.out.println(evt);\n+            if (evt.getEventType().getName().equals(\"jdk.JitRestart\")) {\n+                Events.assertField(evt, \"codeCacheMaxCapacity\").notEqual(0L);\n+                Events.assertField(evt, \"freedMemory\").notEqual(0L);\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/\/ Compute the available size for this BlobType by taking into account\n+    \/\/ that it may be stored in a different code heap in case it does not fit\n+    \/\/ into the current one.\n+    private static long calculateAvailableSize(BlobType btype) {\n+        long availableSize = btype.getSize();\n+        for (BlobType alternative : BlobType.getAvailable()) {\n+            if (btype.allowTypeWhenOverflow(alternative)) {\n+                availableSize = Math.max(availableSize, alternative.getSize());\n+            }\n+        }\n+        return availableSize;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestJitRestart.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}