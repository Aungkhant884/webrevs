{"files":[{"patch":"@@ -56,1 +56,1 @@\n-Dictionary::Dictionary(ClassLoaderData* loader_data, int table_size, bool resizable)\n+Dictionary::Dictionary(ClassLoaderData* loader_data, size_t table_size, bool resizable)\n@@ -412,1 +412,1 @@\n-  assert(JavaThread::current()->is_Java_thread(), \"only called by JavaThread\");\n+  assert(Thread::current()->is_Java_thread(), \"only called by JavaThread\");\n","filename":"src\/hotspot\/share\/classfile\/dictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    typedef DictionaryEntry* Value;\n+    using Value = DictionaryEntry*;\n@@ -66,1 +66,1 @@\n-  Dictionary(ClassLoaderData* loader_data, int table_size, bool resizable = false);\n+  Dictionary(ClassLoaderData* loader_data, size_t table_size, bool resizable = false);\n","filename":"src\/hotspot\/share\/classfile\/dictionary.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1136,7 +1136,0 @@\n-\/\/ Find log2 value greater than this input\n-inline size_t ceil_log2(size_t value) {\n-  size_t ret;\n-  for (ret = 1; ((size_t)1 << ret) < value; ++ret);\n-  return ret;\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,0 +122,8 @@\n+\/\/ Find log2 value greater than this input\n+template <typename T, ENABLE_IF(std::is_integral<T>::value)>\n+inline T ceil_log2(T value) {\n+  T ret;\n+  for (ret = 1; ((T)1 << ret) < value; ++ret);\n+  return ret;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/powerOfTwo.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}