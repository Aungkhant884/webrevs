{"files":[{"patch":"@@ -46,1 +46,3 @@\n-                 \"test17\", \"test18\", \"test19\"})\n+                 \"test17\", \"test18\", \"test19\",\n+                 \"testXPlus_PosConMinusY_\", \"testXPlus_NegConMinusY_\",\n+                 \"test_PosConMinusY_PlusX\", \"test_NegConMinusY_PlusX\"})\n@@ -85,0 +87,4 @@\n+        Asserts.assertEQ((a - b) + 210    , testXPlus_PosConMinusY_(a, b));\n+        Asserts.assertEQ((a - b) + 190    , testXPlus_NegConMinusY_(a, b));\n+        Asserts.assertEQ((a - b) + 210    , test_PosConMinusY_PlusX(a, b));\n+        Asserts.assertEQ((a - b) + 190    , test_NegConMinusY_PlusX(a, b));\n@@ -250,0 +256,40 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con > 0\n+    public int testXPlus_PosConMinusY_(int x, int y) {\n+        return x + (10 - y) + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con < 0\n+    public int testXPlus_NegConMinusY_(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con > 0\n+    public int test_PosConMinusY_PlusX(int x, int y) {\n+        return (10 - y) + x + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con < 0\n+    public int test_NegConMinusY_PlusX(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test17\", \"test18\"})\n+                 \"test17\", \"test18\",\n+                 \"testXPlus_PosConMinusY_\", \"testXPlus_NegConMinusY_\",\n+                 \"test_PosConMinusY_PlusX\", \"test_NegConMinusY_PlusX\"})\n@@ -64,20 +66,24 @@\n-        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n-        Asserts.assertEQ(0L               , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2        , test1(a));\n-        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2      , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a), test8(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)      , test9(a, b));\n-        Asserts.assertEQ((0 - b) + a      , test10(a, b));\n-        Asserts.assertEQ((a - b) + b      , test11(a, b));\n-        Asserts.assertEQ(b + (a - b)      , test12(a, b));\n-        Asserts.assertEQ(a + 0            , test13(a));\n-        Asserts.assertEQ(0 + a            , test14(a));\n-        Asserts.assertEQ(a*b + a*c        , test15(a, b, c));\n-        Asserts.assertEQ(a*b + b*c        , test16(a, b, c));\n-        Asserts.assertEQ(a*c + b*c        , test17(a, b, c));\n-        Asserts.assertEQ(a*b + c*a        , test18(a, b, c));\n+        Asserts.assertEQ(((a+a) + (a+a))             , additions(a));\n+        Asserts.assertEQ(0L                          , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2                   , test1(a));\n+        Asserts.assertEQ((a + 2021) + b              , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)              , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2                 , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)           , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)           , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)           , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)           , test8(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)                 , test9(a, b));\n+        Asserts.assertEQ((0 - b) + a                 , test10(a, b));\n+        Asserts.assertEQ((a - b) + b                 , test11(a, b));\n+        Asserts.assertEQ(b + (a - b)                 , test12(a, b));\n+        Asserts.assertEQ(a + 0                       , test13(a));\n+        Asserts.assertEQ(0 + a                       , test14(a));\n+        Asserts.assertEQ(a*b + a*c                   , test15(a, b, c));\n+        Asserts.assertEQ(a*b + b*c                   , test16(a, b, c));\n+        Asserts.assertEQ(a*c + b*c                   , test17(a, b, c));\n+        Asserts.assertEQ(a*b + c*a                   , test18(a, b, c));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L  , testXPlus_PosConMinusY_(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L , testXPlus_NegConMinusY_(a, b));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L  , test_PosConMinusY_PlusX(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L , test_NegConMinusY_PlusX(a, b));\n@@ -241,0 +247,44 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con > 0\n+    public long testXPlus_PosConMinusY_(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con < 0\n+    public long testXPlus_NegConMinusY_(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con > 0\n+    public long test_PosConMinusY_PlusX(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con < 0\n+    public long test_NegConMinusY_PlusX(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":71,"deletions":21,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -1,246 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import jdk.test.lib.Asserts;\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @summary Test that transformation from x + (con - y) or (con - y) + x\n- *          to (x - y) + con works as intended.\n- * @library \/test\/lib \/\n- * @run driver compiler.c2.irTests.TestIRAddIdealXPlus_ConMinusY_\n- *\/\n-public class TestIRAddIdealXPlus_ConMinusY_ {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.CON_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntXPlus_ZeroMinusY_StillWorks(int x, int y) {\n-        return x + (0 - y); \/\/ transformed to x - y\n-    }\n-\n-    @Run(test = \"testIntXPlus_ZeroMinusY_StillWorks\")\n-    public void checkTestIntXPlus_ZeroMinusY_StillWorks(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testIntXPlus_ZeroMinusY_StillWorks(10, 9));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.CON_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongXPlus_ZeroMinusY_StillWorks(long x, long y) {\n-        return x + (0 - y); \/\/ transformed to x - y\n-    }\n-\n-    @Run(test = \"testLongXPlus_ZeroMinusY_StillWorks\")\n-    public void checkTestLongXPlus_ZeroMinusY_StillWorks(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(100_000_000_000L, testLongXPlus_ZeroMinusY_StillWorks(123_456_789_000L, 23_456_789_000L));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_I, IRNode.CON_I})\n-    @IR(counts = {IRNode.SUB_I, \"1\"})\n-    public int testIntXPlus_ZeroMinusY_SymStillWorks(int x, int y) {\n-        return (0 - y) + x; \/\/ transformed to x - y\n-    }\n-\n-    @Run(test = \"testIntXPlus_ZeroMinusY_SymStillWorks\")\n-    public void checkTestIntXPlus_ZeroMinusY_SymStillWorks(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(1, testIntXPlus_ZeroMinusY_SymStillWorks(10, 9));\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.ADD_L, IRNode.CON_L})\n-    @IR(counts = {IRNode.SUB_L, \"1\"})\n-    public long testLongXPlus_ZeroMinusY_SymStillWorks(long x, long y) {\n-        return (0 - y) + x; \/\/ transformed to x - y\n-    }\n-\n-    @Run(test = \"testLongXPlus_ZeroMinusY_SymStillWorks\")\n-    public void checkTestLongXPlus_ZeroMinusY_SymStillWorks(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(100_000_000_000L, testLongXPlus_ZeroMinusY_SymStillWorks(123_456_789_000L, 23_456_789_000L));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_I, \"1\",\n-                  IRNode.ADD_I, \"1\",\n-                  IRNode.CON_I, \"1\"})\n-    public int testInt1(int x, int y) {\n-        return x + (10 - y) + 200; \/\/ transformed to (x - y) + 210;\n-    }\n-\n-    @Run(test = \"testInt1\")\n-    public void checkTestInt1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(211, testInt1(10, 9));\n-        Asserts.assertEquals(210, testInt1(100, 100)); \/\/ x - y == 0\n-        \/\/ con - y overflows while x - y does not\n-        Asserts.assertEquals(-2147483439, testInt1(1, -2147483646));\n-        \/\/ x - y underflows while con - y does not\n-        Asserts.assertEquals(-2147483447, testInt1(-10, 2147483647));\n-        \/\/ x - y overflows while con - y does not\n-        Asserts.assertEquals(-2147483349, testInt1(100, -2147483637));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_I, \"1\",\n-                  IRNode.ADD_I, \"1\",\n-                  IRNode.CON_I, \"1\"})\n-    public int testInt2(int x, int y) {\n-        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n-    }\n-\n-    @Run(test = \"testInt2\")\n-    public void checkTestInt2(RunInfo info) {\n-        assertC2Compiled(info);\n-        \/\/ con - y underflows while x - y does not\n-        Asserts.assertEquals(-2147483458, testInt2(-1, 2147483647));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_I, \"1\",\n-                  IRNode.ADD_I, \"1\",\n-                  IRNode.CON_I, \"1\"})\n-    public int testSymInt1(int x, int y) {\n-        return (10 - y) + x + 200; \/\/ transformed to (x - y) + 210;\n-    }\n-\n-    @Run(test = \"testSymInt1\")\n-    public void checkTestSymInt1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(211, testSymInt1(10, 9));\n-        Asserts.assertEquals(210, testSymInt1(100, 100)); \/\/ x - y == 0\n-        \/\/ con - y overflows while x - y does not\n-        Asserts.assertEquals(-2147483439, testSymInt1(1, -2147483646));\n-        \/\/ x - y underflows while con - y does not\n-        Asserts.assertEquals(-2147483447, testSymInt1(-10, 2147483647));\n-        \/\/ x - y overflows while con - y does not\n-        Asserts.assertEquals(-2147483349, testSymInt1(100, -2147483637));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_I, \"1\",\n-                  IRNode.ADD_I, \"1\",\n-                  IRNode.CON_I, \"1\"})\n-    public int testSymInt2(int x, int y) {\n-        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n-    }\n-\n-    @Run(test = \"testSymInt2\")\n-    public void checkTestSymInt2(RunInfo info) {\n-        assertC2Compiled(info);\n-        \/\/ con - y underflows while x - y does not\n-        Asserts.assertEquals(-2147483458, testSymInt2(-1, 2147483647));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_L, \"1\",\n-                  IRNode.ADD_L, \"1\",\n-                  IRNode.CON_L, \"1\"})\n-    public long testLong1(long x, long y) {\n-        return x + (123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + 123_456_789_123L;\n-    }\n-\n-    @Run(test = \"testLong1\")\n-    public void checkTestLong1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(223_456_789_123L, testLong1(123_456_789_000L, 23_456_789_000L));\n-        Asserts.assertEquals(123_456_789_123L, testLong1(123_456_789_000L, 123_456_789_000L)); \/\/ x - y == 0\n-        \/\/ con - y overflows while x - y does not\n-        Asserts.assertEquals(-9223371913397986686L, testLong1(1L, -9223372036854775806L));\n-        \/\/ x - y underflows while con - y does not\n-        Asserts.assertEquals(-9223371913397986694L, testLong1(-10, 9223372036854775807L));\n-        \/\/ x - y overflows while con - y does not\n-        Asserts.assertEquals(-9223371913397986456L, testLong1(123_456_789_230L, -9223371913397986807L));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_L, \"1\",\n-                  IRNode.ADD_L, \"1\",\n-                  IRNode.CON_L, \"1\"})\n-    public long testLong2(long x, long y) {\n-        return x + (-123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + -123_456_788_877L;\n-    }\n-\n-    @Run(test = \"testLong2\")\n-    public void checkTestLong2(RunInfo info) {\n-        assertC2Compiled(info);\n-        \/\/ con - y underflows while x - y does not\n-        Asserts.assertEquals(9223371913397986931L, testLong2(-1, 9223372036854775807L));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_L, \"1\",\n-                  IRNode.ADD_L, \"1\",\n-                  IRNode.CON_L, \"1\"})\n-    public long testSymLong1(long x, long y) {\n-        return x + (123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + 123_456_789_123L;\n-    }\n-\n-    @Run(test = \"testSymLong1\")\n-    public void checkTestSymLong1(RunInfo info) {\n-        assertC2Compiled(info);\n-        Asserts.assertEquals(223_456_789_123L, testSymLong1(123_456_789_000L, 23_456_789_000L));\n-        Asserts.assertEquals(123_456_789_123L, testSymLong1(123_456_789_000L, 123_456_789_000L)); \/\/ x - y == 0\n-        \/\/ con - y overflows while x - y does not\n-        Asserts.assertEquals(-9223371913397986686L, testSymLong1(1L, -9223372036854775806L));\n-        \/\/ x - y underflows while con - y does not\n-        Asserts.assertEquals(-9223371913397986694L, testSymLong1(-10, 9223372036854775807L));\n-        \/\/ x - y overflows while con - y does not\n-        Asserts.assertEquals(-9223371913397986456L, testSymLong1(123_456_789_230L, -9223371913397986807L));\n-    }\n-\n-    @Test\n-    @IR(counts = {IRNode.SUB_L, \"1\",\n-                  IRNode.ADD_L, \"1\",\n-                  IRNode.CON_L, \"1\"})\n-    public long testSymLong2(long x, long y) {\n-        return x + (-123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + -123_456_788_877L;\n-    }\n-\n-    @Run(test = \"testSymLong2\")\n-    public void checkTestSymLong2(RunInfo info) {\n-        assertC2Compiled(info);\n-        \/\/ con - y underflows while x - y does not\n-        Asserts.assertEquals(9223371913397986931L, testSymLong2(-1, 9223372036854775807L));\n-    }\n-\n-    private void assertC2Compiled(RunInfo info) {\n-        \/\/ Test VM allows C2 to work\n-        Asserts.assertTrue(info.isC2CompilationEnabled());\n-        if (!info.isWarmUp()) {\n-            \/\/ C2 compilation happens\n-            Asserts.assertTrue(info.isTestC2Compiled());\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealXPlus_ConMinusY_.java","additions":0,"deletions":246,"binary":false,"changes":246,"status":"deleted"}]}