{"files":[{"patch":"@@ -317,0 +317,10 @@\n+  \/\/ Convert (con - y) + x into \"(x - y) + con\"\n+  if (op1 == Op_Sub(bt) && in1->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in2, in1->in(2), bt)), in1->in(1), bt);\n+  }\n+\n+  \/\/ Convert x + (con - y) into \"(x - y) + con\"\n+  if (op2 == Op_Sub(bt) && in2->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in1, in2->in(2), bt)), in2->in(1), bt);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1860,0 +1860,8 @@\n+inline int Op_ConIL(BasicType bt) {\n+  assert(bt == T_INT || bt == T_LONG, \"only for int or longs\");\n+  if (bt == T_INT) {\n+    return Op_ConI;\n+  }\n+  return Op_ConL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @summary Test that transformation from x + (con - y) or (con - y) + x\n+ *          to (x - y) + con works as intended.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestIRAddIdealXPlus_ConMinusY_\n+ *\/\n+public class TestIRAddIdealXPlus_ConMinusY_ {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    public int testInt1(int x, int y) {\n+        return x + (10 - y) + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Run(test = \"testInt1\")\n+    public void checkTestInt1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(211, testInt1(10, 9));\n+        Asserts.assertEquals(210, testInt1(100, 100)); \/\/ x - y == 0\n+        \/\/ con - y overflows while x - y does not\n+        Asserts.assertEquals(-2147483439, testInt1(1, -2147483646));\n+        \/\/ x - y underflows while con - y does not\n+        Asserts.assertEquals(-2147483447, testInt1(-10, 2147483647));\n+        \/\/ x - y overflows while con - y does not\n+        Asserts.assertEquals(-2147483349, testInt1(100, -2147483637));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    public int testInt2(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n+\n+    @Run(test = \"testInt2\")\n+    public void checkTestInt2(RunInfo info) {\n+        assertC2Compiled(info);\n+        \/\/ con - y underflows while x - y does not\n+        Asserts.assertEquals(-2147483458, testInt2(-1, 2147483647));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    public int testSymInt1(int x, int y) {\n+        return (10 - y) + x + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Run(test = \"testSymInt1\")\n+    public void checkTestSymInt1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(211, testSymInt1(10, 9));\n+        Asserts.assertEquals(210, testSymInt1(100, 100)); \/\/ x - y == 0\n+        \/\/ con - y overflows while x - y does not\n+        Asserts.assertEquals(-2147483439, testSymInt1(1, -2147483646));\n+        \/\/ x - y underflows while con - y does not\n+        Asserts.assertEquals(-2147483447, testSymInt1(-10, 2147483647));\n+        \/\/ x - y overflows while con - y does not\n+        Asserts.assertEquals(-2147483349, testSymInt1(100, -2147483637));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    public int testSymInt2(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n+\n+    @Run(test = \"testSymInt2\")\n+    public void checkTestSymInt2(RunInfo info) {\n+        assertC2Compiled(info);\n+        \/\/ con - y underflows while x - y does not\n+        Asserts.assertEquals(-2147483458, testSymInt2(-1, 2147483647));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    public long testLong1(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Run(test = \"testLong1\")\n+    public void checkTestLong1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(223_456_789_123L, testLong1(123_456_789_000L, 23_456_789_000L));\n+        Asserts.assertEquals(123_456_789_123L, testLong1(123_456_789_000L, 123_456_789_000L)); \/\/ x - y == 0\n+        \/\/ con - y overflows while x - y does not\n+        Asserts.assertEquals(-9223371913397986686L, testLong1(1L, -9223372036854775806L));\n+        \/\/ x - y underflows while con - y does not\n+        Asserts.assertEquals(-9223371913397986694L, testLong1(-10, 9223372036854775807L));\n+        \/\/ x - y overflows while con - y does not\n+        Asserts.assertEquals(-9223371913397986456L, testLong1(123_456_789_230L, -9223371913397986807L));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    public long testLong2(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n+\n+    @Run(test = \"testLong2\")\n+    public void checkTestLong2(RunInfo info) {\n+        assertC2Compiled(info);\n+        \/\/ con - y underflows while x - y does not\n+        Asserts.assertEquals(9223371913397986931L, testLong2(-1, 9223372036854775807L));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    public long testSymLong1(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Run(test = \"testSymLong1\")\n+    public void checkTestSymLong1(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(223_456_789_123L, testSymLong1(123_456_789_000L, 23_456_789_000L));\n+        Asserts.assertEquals(123_456_789_123L, testSymLong1(123_456_789_000L, 123_456_789_000L)); \/\/ x - y == 0\n+        \/\/ con - y overflows while x - y does not\n+        Asserts.assertEquals(-9223371913397986686L, testSymLong1(1L, -9223372036854775806L));\n+        \/\/ x - y underflows while con - y does not\n+        Asserts.assertEquals(-9223371913397986694L, testSymLong1(-10, 9223372036854775807L));\n+        \/\/ x - y overflows while con - y does not\n+        Asserts.assertEquals(-9223371913397986456L, testSymLong1(123_456_789_230L, -9223371913397986807L));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    public long testSymLong2(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123; \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n+\n+    @Run(test = \"testSymLong2\")\n+    public void checkTestSymLong2(RunInfo info) {\n+        assertC2Compiled(info);\n+        \/\/ con - y underflows while x - y does not\n+        Asserts.assertEquals(9223371913397986931L, testSymLong2(-1, 9223372036854775807L));\n+    }\n+\n+    private void assertC2Compiled(RunInfo info) {\n+        \/\/ Test VM allows C2 to work\n+        Asserts.assertTrue(info.isC2CompilationEnabled());\n+        if (!info.isWarmUp()) {\n+            \/\/ C2 compilation happens\n+            Asserts.assertTrue(info.isTestC2Compiled());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealXPlus_ConMinusY_.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -176,0 +176,2 @@\n+    public static final String CON_I = START + \"ConI\" + MID + END;\n+    public static final String CON_L = START + \"ConL\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}