{"files":[{"patch":"@@ -307,3 +307,3 @@\n-  \/\/ Convert \"x+(0-y)\" into \"(x-y)\"\n-  if (op2 == Op_Sub(bt) && phase->type(in2->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in1, in2->in(2), bt);\n+  \/\/ Convert (con - y) + x into \"(x - y) + con\"\n+  if (op1 == Op_Sub(bt) && in1->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in2, in1->in(2), bt)), in1->in(1), bt);\n@@ -312,3 +312,3 @@\n-  \/\/ Convert \"(0-y)+x\" into \"(x-y)\"\n-  if (op1 == Op_Sub(bt) && phase->type(in1->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in2, in1->in(2), bt);\n+  \/\/ Convert x + (con - y) into \"(x - y) + con\"\n+  if (op2 == Op_Sub(bt) && in2->in(1)->Opcode() == Op_ConIL(bt)) {\n+    return AddNode::make(phase->transform(SubNode::make(in1, in2->in(2), bt)), in2->in(1), bt);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1860,0 +1860,8 @@\n+inline int Op_ConIL(BasicType bt) {\n+  assert(bt == T_INT || bt == T_LONG, \"only for int or longs\");\n+  if (bt == T_INT) {\n+    return Op_ConI;\n+  }\n+  return Op_ConL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-                 \"test17\", \"test18\", \"test19\"})\n+                 \"test17\", \"test18\", \"test19\",\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\"})\n@@ -85,0 +87,4 @@\n+        Asserts.assertEQ((a - b) + 210    , test20(a, b));\n+        Asserts.assertEQ((a - b) + 190    , test21(a, b));\n+        Asserts.assertEQ((a - b) + 210    , test22(a, b));\n+        Asserts.assertEQ((a - b) + 190    , test23(a, b));\n@@ -250,0 +256,40 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con > 0\n+    public int test20(int x, int y) {\n+        return x + (10 - y) + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con < 0\n+    public int test21(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con > 0\n+    public int test22(int x, int y) {\n+        return (10 - y) + x + 200; \/\/ transformed to (x - y) + 210;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_I, \"1\",\n+                  IRNode.ADD_I, \"1\",\n+                  IRNode.CON_I, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con < 0\n+    public int test23(int x, int y) {\n+        return x + (-10 - y) + 200; \/\/ transformed to (x - y) + 190;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-                 \"test17\", \"test18\"})\n+                 \"test17\", \"test18\", \"test19\",\n+                 \"test20\",\"test21\", \"test22\"})\n@@ -64,20 +65,24 @@\n-        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n-        Asserts.assertEQ(0L               , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2        , test1(a));\n-        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2      , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a), test8(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)      , test9(a, b));\n-        Asserts.assertEQ((0 - b) + a      , test10(a, b));\n-        Asserts.assertEQ((a - b) + b      , test11(a, b));\n-        Asserts.assertEQ(b + (a - b)      , test12(a, b));\n-        Asserts.assertEQ(a + 0            , test13(a));\n-        Asserts.assertEQ(0 + a            , test14(a));\n-        Asserts.assertEQ(a*b + a*c        , test15(a, b, c));\n-        Asserts.assertEQ(a*b + b*c        , test16(a, b, c));\n-        Asserts.assertEQ(a*c + b*c        , test17(a, b, c));\n-        Asserts.assertEQ(a*b + c*a        , test18(a, b, c));\n+        Asserts.assertEQ(((a+a) + (a+a))             , additions(a));\n+        Asserts.assertEQ(0L                          , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2                   , test1(a));\n+        Asserts.assertEQ((a + 2021) + b              , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)              , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2                 , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)           , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)           , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)           , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)           , test8(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)                 , test9(a, b));\n+        Asserts.assertEQ((0 - b) + a                 , test10(a, b));\n+        Asserts.assertEQ((a - b) + b                 , test11(a, b));\n+        Asserts.assertEQ(b + (a - b)                 , test12(a, b));\n+        Asserts.assertEQ(a + 0                       , test13(a));\n+        Asserts.assertEQ(0 + a                       , test14(a));\n+        Asserts.assertEQ(a*b + a*c                   , test15(a, b, c));\n+        Asserts.assertEQ(a*b + b*c                   , test16(a, b, c));\n+        Asserts.assertEQ(a*c + b*c                   , test17(a, b, c));\n+        Asserts.assertEQ(a*b + c*a                   , test18(a, b, c));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L  , test19(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L , test20(a, b));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L  , test21(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L , test22(a, b));\n@@ -241,0 +246,44 @@\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con > 0\n+    public long test19(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks x + (con - y) => (x - y) + con\n+    \/\/ where con < 0\n+    public long test20(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con > 0\n+    public long test21(long x, long y) {\n+        return x + (123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + 123_456_789_123L;\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_L, \"1\",\n+                  IRNode.ADD_L, \"1\",\n+                  IRNode.CON_L, \"1\"})\n+    \/\/ Checks (con - y) + x => (x - y) + con\n+    \/\/ where con < 0\n+    public long test22(long x, long y) {\n+        return x + (-123_456_789_000L - y) + 123;\n+        \/\/ transformed to (x - y) + -123_456_788_877L;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":70,"deletions":21,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -174,0 +174,2 @@\n+    public static final String CON_I = START + \"ConI\" + MID + END;\n+    public static final String CON_L = START + \"ConL\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}