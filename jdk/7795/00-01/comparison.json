{"files":[{"patch":"@@ -307,10 +307,0 @@\n-  \/\/ Convert \"x+(0-y)\" into \"(x-y)\"\n-  if (op2 == Op_Sub(bt) && phase->type(in2->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in1, in2->in(2), bt);\n-  }\n-\n-  \/\/ Convert \"(0-y)+x\" into \"(x-y)\"\n-  if (op1 == Op_Sub(bt) && phase->type(in1->in(1)) == TypeInteger::zero(bt)) {\n-    return SubNode::make(in2, in1->in(2), bt);\n-  }\n-\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,0 +42,52 @@\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.CON_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntXPlus_ZeroMinusY_StillWorks(int x, int y) {\n+        return x + (0 - y); \/\/ transformed to x - y\n+    }\n+\n+    @Run(test = \"testIntXPlus_ZeroMinusY_StillWorks\")\n+    public void checkTestIntXPlus_ZeroMinusY_StillWorks(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testIntXPlus_ZeroMinusY_StillWorks(10, 9));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.CON_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongXPlus_ZeroMinusY_StillWorks(long x, long y) {\n+        return x + (0 - y); \/\/ transformed to x - y\n+    }\n+\n+    @Run(test = \"testLongXPlus_ZeroMinusY_StillWorks\")\n+    public void checkTestLongXPlus_ZeroMinusY_StillWorks(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(100_000_000_000L, testLongXPlus_ZeroMinusY_StillWorks(123_456_789_000L, 23_456_789_000L));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_I, IRNode.CON_I})\n+    @IR(counts = {IRNode.SUB_I, \"1\"})\n+    public int testIntXPlus_ZeroMinusY_SymStillWorks(int x, int y) {\n+        return (0 - y) + x; \/\/ transformed to x - y\n+    }\n+\n+    @Run(test = \"testIntXPlus_ZeroMinusY_SymStillWorks\")\n+    public void checkTestIntXPlus_ZeroMinusY_SymStillWorks(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(1, testIntXPlus_ZeroMinusY_SymStillWorks(10, 9));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_L, IRNode.CON_L})\n+    @IR(counts = {IRNode.SUB_L, \"1\"})\n+    public long testLongXPlus_ZeroMinusY_SymStillWorks(long x, long y) {\n+        return (0 - y) + x; \/\/ transformed to x - y\n+    }\n+\n+    @Run(test = \"testLongXPlus_ZeroMinusY_SymStillWorks\")\n+    public void checkTestLongXPlus_ZeroMinusY_SymStillWorks(RunInfo info) {\n+        assertC2Compiled(info);\n+        Asserts.assertEquals(100_000_000_000L, testLongXPlus_ZeroMinusY_SymStillWorks(123_456_789_000L, 23_456_789_000L));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRAddIdealXPlus_ConMinusY_.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}