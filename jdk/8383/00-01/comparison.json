{"files":[{"patch":"@@ -1451,1 +1451,1 @@\n-\/\/ then constaints are considered breached.\n+\/\/ then constraints are considered breached.\n@@ -1454,6 +1454,5 @@\n-  if (has_local_method_implementation(ik, begin, void_method_sig)) return true;\n-  if (has_local_method_implementation(ik, end, void_method_sig)) return true;\n-  if (has_local_method_implementation(ik, commit, void_method_sig)) return true;\n-  if (has_local_method_implementation(ik, isEnabled, boolean_method_sig)) return true;\n-  if (has_local_method_implementation(ik, shouldCommit, boolean_method_sig)) return true;\n-  return false;\n+  return has_local_method_implementation(ik, begin, void_method_sig) ||\n+         has_local_method_implementation(ik, end, void_method_sig) ||\n+         has_local_method_implementation(ik, commit, void_method_sig) ||\n+         has_local_method_implementation(ik, isEnabled, boolean_method_sig) ||\n+         has_local_method_implementation(ik, shouldCommit, boolean_method_sig);\n@@ -1468,1 +1467,1 @@\n-    \/\/ The class is allow to load as-is, but it is classified as outside of the jfr system.\n+    \/\/ The class is allowed to load as-is, but it is classified as outside of the jfr system.\n@@ -1560,1 +1559,1 @@\n-    log_error(jfr, system)(\"Allocation using C_HEAP_ARRAY for \" SIZE_FORMAT \" bytes failed in JfrEventClassTransformer::on_klass_creation\",\n+    log_error(jfr, system)(\"Allocation using C_HEAP_ARRAY for \" SIZE_FORMAT \" bytes failed in JfrEventClassTransformer::cache_class_file_data\",\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -190,1 +190,0 @@\n-  \/\/ callbacks.ClassFileLoadHook = jfr_on_class_file_load_hook;\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void JfrResolution::on_resolution(const CallInfo & info, TRAPS) {\n+void JfrResolution::on_runtime_resolution(const CallInfo & info, TRAPS) {\n@@ -92,1 +92,1 @@\n-void JfrResolution::on_resolution(const GraphBuilder * builder, const ciKlass * holder, const ciMethod * target) {\n+void JfrResolution::on_c1_resolution(const GraphBuilder * builder, const ciKlass * holder, const ciMethod * target) {\n@@ -99,1 +99,1 @@\n-void JfrResolution::on_resolution(const Parse * parse, const ciKlass * holder, const ciMethod * target) {\n+void JfrResolution::on_c2_resolution(const Parse * parse, const ciKlass * holder, const ciMethod * target) {\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrResolution.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-  static void on_resolution(const CallInfo & info, TRAPS);\n-  static void on_resolution(const Parse * parse, const ciKlass * holder, const ciMethod * target);\n-  static void on_resolution(const GraphBuilder * builder, const ciKlass * holder, const ciMethod * target);\n+  static void on_runtime_resolution(const CallInfo & info, TRAPS);\n+  static void on_c1_resolution(const GraphBuilder * builder, const ciKlass * holder, const ciMethod * target);\n+  static void on_c2_resolution(const Parse * parse, const ciKlass * holder, const ciMethod * target);\n@@ -44,1 +44,1 @@\n-#endif \/\/ SHARE_JFR_INSTRUMENTATION_JFRRESOLUTION_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_JFR_INSTRUMENTATION_JFRRESOLUTION_HPP\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrResolution.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  JfrResolution::on_resolution(info, THREAD);\n+  JfrResolution::on_runtime_resolution(info, THREAD);\n@@ -101,2 +101,2 @@\n-void Jfr::on_resolution(const Parse* parse, const ciKlass* holder, const ciMethod* target) {\n-  JfrResolution::on_resolution(parse, holder, target);\n+void Jfr::on_resolution(const GraphBuilder* builder, const ciKlass* holder, const ciMethod* target) {\n+  JfrResolution::on_c1_resolution(builder, holder, target);\n@@ -105,2 +105,2 @@\n-void Jfr::on_resolution(const GraphBuilder* builder, const ciKlass* holder, const ciMethod* target) {\n-  JfrResolution::on_resolution(builder, holder, target);\n+void Jfr::on_resolution(const Parse* parse, const ciKlass* holder, const ciMethod* target) {\n+  JfrResolution::on_c2_resolution(parse, holder, target);\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        invokeSpecial(mv, TYPE_EVENT.getInternalName(), DEFAULT_CONSTRUCTOR);\n+        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, TYPE_EVENT.getInternalName(), DEFAULT_CONSTRUCTOR.getName(), DEFAULT_CONSTRUCTOR.getDescriptor(), false);\n@@ -109,4 +109,0 @@\n-    public static void invokeSpecial(MethodVisitor methodVisitor, String className, Method m) {\n-        methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL, className, m.getName(), m.getDescriptor(), false);\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventClassBuilder.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -173,3 +173,2 @@\n-            SettingInfo si = new SettingInfo(FIELD_SETTING_PREFIX + index, index);\n-            si.settingControl = instantiateSettingControl(settingsClass);\n-            Control c = new Control(si.settingControl, null);\n+            SettingControl settingControl = instantiateSettingControl(settingsClass);\n+            Control c = new Control(settingControl, null);\n@@ -190,1 +189,1 @@\n-                settingInfos.add(si);\n+                settingInfos.add(new SettingInfo(FIELD_SETTING_PREFIX + index, index, null, null, settingControl));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import jdk.jfr.internal.event.EventWriter;\n@@ -61,18 +62,0 @@\n-    static final class SettingInfo {\n-        private String methodName;\n-        private String internalSettingName;\n-        private String settingDescriptor;\n-        final String fieldName;\n-        final int index;\n-\n-        \/\/ The settingControl is passed to EventConfiguration where it is\n-        \/\/ used to check enablement before calling commit\n-        \/\/ Methods on settingControl must never be invoked\n-        \/\/ directly by JFR, instead use jdk.jfr.internal.Control\n-        SettingControl settingControl;\n-\n-        public SettingInfo(String fieldName, int index) {\n-            this.fieldName = fieldName;\n-            this.index = index;\n-        }\n-    }\n@@ -80,9 +63,8 @@\n-    public static final class FieldInfo {\n-        public final String fieldName;\n-        public final String fieldDescriptor;\n-        public final String internalClassName;\n-\n-        public FieldInfo(String fieldName, String fieldDescriptor, String internalClassName) {\n-            this.fieldName = fieldName;\n-            this.fieldDescriptor = fieldDescriptor;\n-            this.internalClassName = internalClassName;\n+    record SettingInfo(String fieldName, int index, Type paramType, String methodName, SettingControl settingControl) {\n+        \/**\n+         * A malicious user must never be able to run a callback in the wrong\n+         * context. Methods on SettingControl must therefore never be invoked directly\n+         * by JFR, instead use jdk.jfr.internal.Control.\n+         *\/\n+        public SettingControl settingControl() {\n+            return this.settingControl;\n@@ -90,0 +72,1 @@\n+    }\n@@ -91,3 +74,1 @@\n-        public boolean isString() {\n-            return ASMToolkit.TYPE_STRING.getDescriptor().equals(fieldDescriptor);\n-        }\n+    record FieldInfo(String fieldName, String fieldDescriptor, String internalClassName) {\n@@ -103,3 +84,3 @@\n-    private static final Type ANNOTATION_TYPE_NAME = Type.getType(Name.class);\n-    private static final Type ANNOTATION_TYPE_REGISTERED = Type.getType(Registered.class);\n-    private static final Type ANNOTATION_TYPE_ENABLED = Type.getType(Enabled.class);\n+    private static final String ANNOTATION_NAME_DESCRIPTOR = Type.getDescriptor(Name.class);\n+    private static final String ANNOTATION_REGISTERED_DESCRIPTOR = Type.getDescriptor(Registered.class);\n+    private static final String ANNOTATION_ENABLED_DESCRIPTOR = Type.getDescriptor(Enabled.class);\n@@ -107,1 +88,1 @@\n-    private static final Type TYPE_EVENT_WRITER = Type.getType(\"Ljdk\/jfr\/internal\/event\/EventWriter;\");\n+    private static final Type TYPE_EVENT_WRITER = Type.getType(EventWriter.class);\n@@ -110,1 +91,3 @@\n-    private static final Type TYPE_OBJECT = Type.getType(Object.class);\n+    private static final String TYPE_OBJECT_DESCRIPTOR = Type.getDescriptor(Object.class);\n+    private static final String TYPE_EVENT_CONFIGURATION_DESCRIPTOR = TYPE_EVENT_CONFIGURATION.getDescriptor();\n+    private static final String TYPE_SETTING_DEFINITION_DESCRIPTOR = Type.getDescriptor(SettingDefinition.class);\n@@ -131,1 +114,1 @@\n-    private boolean guardEventConfiguration;\n+    private final boolean guardEventConfiguration;\n@@ -133,1 +116,1 @@\n-    EventInstrumentation(Class<?> superClass, byte[] bytes, long id, boolean bootClass) {\n+    EventInstrumentation(Class<?> superClass, byte[] bytes, long id, boolean bootClass, boolean guardEventConfiguration) {\n@@ -139,1 +122,1 @@\n-        String n = annotationValue(classNode, ANNOTATION_TYPE_NAME.getDescriptor(), String.class);\n+        String n = annotationValue(classNode, ANNOTATION_NAME_DESCRIPTOR, String.class);\n@@ -143,0 +126,4 @@\n+        \/\/ Corner case when we are forced to generate bytecode (bytesForEagerInstrumentation)\n+        \/\/ We can't reference EventConfiguration::isEnabled() before event class has been registered,\n+        \/\/ so we add a guard against a null reference.\n+        this.guardEventConfiguration = guardEventConfiguration;\n@@ -164,1 +151,1 @@\n-                return field.desc.equals(TYPE_OBJECT.getDescriptor());\n+                return field.desc.equals(TYPE_OBJECT_DESCRIPTOR);\n@@ -182,1 +169,1 @@\n-        Boolean result = annotationValue(classNode, ANNOTATION_TYPE_REGISTERED.getDescriptor(), Boolean.class);\n+        Boolean result = annotationValue(classNode, ANNOTATION_REGISTERED_DESCRIPTOR, Boolean.class);\n@@ -196,1 +183,1 @@\n-        Boolean result = annotationValue(classNode, ANNOTATION_TYPE_ENABLED.getDescriptor(), Boolean.class);\n+        Boolean result = annotationValue(classNode, ANNOTATION_ENABLED_DESCRIPTOR, Boolean.class);\n@@ -235,2 +222,0 @@\n-        String settingDescriptor = Type.getType(SettingDefinition.class).getDescriptor();\n-        String nameDescriptor = Type.getType(Name.class).getDescriptor();\n@@ -243,1 +228,1 @@\n-                    if (settingDescriptor.equals(an.desc)) {\n+                    if (TYPE_SETTING_DEFINITION_DESCRIPTOR.equals(an.desc)) {\n@@ -246,1 +231,1 @@\n-                            if (nameDescriptor.equals(nameCandidate.desc)) {\n+                            if (ANNOTATION_NAME_DESCRIPTOR.equals(nameCandidate.desc)) {\n@@ -260,4 +245,0 @@\n-                                SettingInfo si = new SettingInfo(fieldName, index);\n-                                si.methodName = m.name;\n-                                si.settingDescriptor = paramType.getDescriptor();\n-                                si.internalSettingName = paramType.getInternalName();\n@@ -265,1 +246,1 @@\n-                                settingInfos.add(si);\n+                                settingInfos.add(new SettingInfo(fieldName, index, paramType, m.name, null));\n@@ -283,4 +264,0 @@\n-                                SettingInfo si = new SettingInfo(fieldName, index);\n-                                si.methodName = method.getName();\n-                                si.settingDescriptor = paramType.getDescriptor();\n-                                si.internalSettingName = paramType.getInternalName();\n@@ -288,1 +265,1 @@\n-                                settingInfos.add(si);\n+                                settingInfos.add(new SettingInfo(fieldName, index, paramType, method.getName(), null));\n@@ -676,1 +653,1 @@\n-                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_OBJECT.getDescriptor());\n+                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_OBJECT_DESCRIPTOR);\n@@ -678,1 +655,1 @@\n-                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, Type.getDescriptor(EventConfiguration.class));\n+                    methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_EVENT_CONFIGURATION_DESCRIPTOR);\n@@ -683,2 +660,2 @@\n-                methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, si.internalSettingName);\n-                methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, getInternalClassName(), si.methodName, \"(\" + si.settingDescriptor + \")Z\", false);\n+                methodVisitor.visitTypeInsn(Opcodes.CHECKCAST, si.paramType().getInternalName());\n+                methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL, getInternalClassName(), si.methodName, \"(\" + si.paramType().getDescriptor() + \")Z\", false);\n@@ -717,1 +694,0 @@\n-\n@@ -722,1 +698,1 @@\n-            methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_OBJECT.getDescriptor());\n+            methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_OBJECT_DESCRIPTOR);\n@@ -724,1 +700,1 @@\n-            methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, Type.getDescriptor(EventConfiguration.class));\n+            methodVisitor.visitFieldInsn(Opcodes.GETSTATIC, getInternalClassName(), FIELD_EVENT_CONFIGURATION, TYPE_EVENT_CONFIGURATION_DESCRIPTOR);\n@@ -781,4 +757,0 @@\n-\n-    public void setGuardEventConfiguration(boolean guard) {\n-        this.guardEventConfiguration = guard;\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":38,"deletions":66,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        if (v.fieldName.equals(EventInstrumentation.FIELD_EVENT_THREAD)) {\n+        if (v.fieldName().equals(EventInstrumentation.FIELD_EVENT_THREAD)) {\n@@ -76,1 +76,1 @@\n-            if (v.fieldDescriptor.equals(m.typeDescriptor)) {\n+            if (v.fieldDescriptor().equals(m.typeDescriptor)) {\n@@ -80,1 +80,1 @@\n-        throw new Error(\"Unknown type \" + v.fieldDescriptor);\n+        throw new Error(\"Unknown type \" + v.fieldDescriptor());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventWriterMethod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                EventInstrumentation ei = new EventInstrumentation(clazz.getSuperclass(), oldBytes, traceId, bootClassLoader);\n+                EventInstrumentation ei = new EventInstrumentation(clazz.getSuperclass(), oldBytes, traceId, bootClassLoader, false);\n@@ -97,1 +97,1 @@\n-            EventInstrumentation ei = new EventInstrumentation(superClass, oldBytes, traceId, bootClassLoader);\n+            EventInstrumentation ei = new EventInstrumentation(superClass, oldBytes, traceId, bootClassLoader, true);\n@@ -111,4 +111,0 @@\n-            \/\/ Corner case when we are forced to generate bytecode. We can't reference\n-            \/\/ EventConfiguration::isEnabled() before event class has been registered, so we add a\n-            \/\/ guard against a null reference.\n-            ei.setGuardEventConfiguration(true);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-            settings[index++] = settingInfo.settingControl;\n+            settings[index++] = settingInfo.settingControl();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import jdk.jfr.internal.Logger;\n-import jdk.jfr.internal.LogTag;\n-import jdk.jfr.internal.LogLevel;\n@@ -49,1 +46,1 @@\n-\/\/ 2. The EventWriter::getEventWriter(long) method can only be linked from\n+\/\/ 2. The EventWriter EventWriterFactor::getEventWriter(long) method can only be linked from\n@@ -51,0 +48,2 @@\n+\/\/    (The EventWriterFactory class is dynamically generated before the first event\n+\/\/    is instrumented. See EventWriterFactoryRecipe)\n@@ -53,2 +52,3 @@\n-\/\/    Manager, but as an add additional measure the method EventWriter::getEventWriter(long)\n-\/\/    requires the caller to provide a key that is hard to guess.\n+\/\/    Manager, but as an add additional measure the method EventWriterFactor::getEventWriter(long)\n+\/\/    requires the caller to provide a key that is hard to guess. The key is generated\n+\/\/    into the bytecode of the method invoking getEventWriter(long).\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/event\/EventWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}