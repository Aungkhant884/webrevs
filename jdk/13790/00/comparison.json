{"files":[{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8307325\n+ * @summary Verify the focus owner when non focused windows requesting focus.\n+ * @run main CrossFocusRequestTest\n+ *\/\n+public class CrossFocusRequestTest {\n+\n+    private static Frame frame1, frame2;\n+    private volatile static Button button;\n+    private volatile static TextField textField;\n+    private volatile static int waitTimeout = 1000;\n+    private static final CountDownLatch clickLatch = new CountDownLatch(1);\n+    private static final CountDownLatch focusLatch = new CountDownLatch(1);\n+    private volatile static Point compAt;\n+    private volatile static Dimension compSize;\n+\n+    public static void main(String[] args)\n+        throws InvocationTargetException, InterruptedException, AWTException {\n+\n+        try {\n+            EventQueue.invokeAndWait(CrossFocusRequestTest::initializeGUI);\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = button.getLocationOnScreen();\n+                compSize = button.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!clickLatch.await(waitTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(\n+                    \"FAIL: Button did not trigger actionPerformed when clicked.\"\n+                        + \" Test cannot proceed!\");\n+            }\n+\n+            robot.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                compAt = frame1.getLocationOnScreen();\n+                compSize = frame1.getSize();\n+            });\n+\n+            robot.mouseMove(compAt.x + compSize.width \/ 2,\n+                compAt.y + compSize.height - 20);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            if (!focusLatch.await(waitTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(\n+                    \"FAIL: TextField did not gained focus. requestFocus \"\n+                        + \"called when parent Frame is not having focus.\"\n+                        + \" Failed checking if focus request is remembered\");\n+            }\n+            System.out.println(\"Test passed!\");\n+        } finally {\n+            EventQueue.invokeAndWait(CrossFocusRequestTest::disposeFrame);\n+        }\n+    }\n+\n+    private static void initializeGUI() {\n+        frame1 = new Frame(\"Test Frame1\");\n+        frame1.setLayout(new FlowLayout());\n+        frame2 = new Frame(\"Test Frame2\");\n+        frame2.setLayout(new FlowLayout());\n+\n+        button = new Button(\"Shift focus to TextField\");\n+        button.addActionListener((event) -> {\n+            textField.requestFocus();\n+            clickLatch.countDown();\n+        });\n+        frame2.add(button);\n+\n+        textField = new TextField(15);\n+        textField.addFocusListener(new FocusListener() {\n+            public void focusGained(FocusEvent event) {\n+                focusLatch.countDown();\n+            }\n+\n+            public void focusLost(FocusEvent event) {\n+            }\n+        });\n+        frame1.add(textField);\n+        frame1.pack();\n+        frame1.setLocation(0, 0);\n+        frame1.setVisible(true);\n+        frame2.pack();\n+        frame2.setLocation(250, 0);\n+        frame2.setVisible(true);\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame1 != null) {\n+            frame1.dispose();\n+        }\n+        if (frame2 != null) {\n+            frame2.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/CrossFocusRequestTest\/CrossFocusRequestTest.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"}]}