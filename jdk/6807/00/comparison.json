{"files":[{"patch":"@@ -307,1 +307,1 @@\n-void C1_MacroAssembler::verified_entry() {\n+void C1_MacroAssembler::verified_entry(bool breakAtEntry) {\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-void C1_MacroAssembler::verified_entry() {\n-  if (C1Breakpoint) {\n+void C1_MacroAssembler::verified_entry(bool breakAtEntry) {\n+  if (breakAtEntry) {\n","filename":"src\/hotspot\/cpu\/arm\/c1_MacroAssembler_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-void C1_MacroAssembler::verified_entry() {\n-  if (C1Breakpoint) illtrap();\n+void C1_MacroAssembler::verified_entry(bool breakAtEntry) {\n+  if (breakAtEntry) illtrap();\n","filename":"src\/hotspot\/cpu\/ppc\/c1_MacroAssembler_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-void C1_MacroAssembler::verified_entry() {\n-  if (C1Breakpoint) z_illtrap(0xC1);\n+void C1_MacroAssembler::verified_entry(bool breakAtEntry) {\n+  if (breakAtEntry) z_illtrap(0xC1);\n","filename":"src\/hotspot\/cpu\/s390\/c1_MacroAssembler_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -334,2 +334,2 @@\n-void C1_MacroAssembler::verified_entry() {\n-  if (C1Breakpoint || VerifyFPU) {\n+void C1_MacroAssembler::verified_entry(bool breakAtEntry) {\n+  if (breakAtEntry || VerifyFPU) {\n@@ -339,1 +339,1 @@\n-    \/\/ C1Breakpoint and VerifyFPU have one byte first instruction.\n+    \/\/ Breakpoint and VerifyFPU have one byte first instruction.\n@@ -345,1 +345,1 @@\n-  if (C1Breakpoint)int3();\n+  if (breakAtEntry) int3();\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-      _masm->verified_entry();\n+      _masm->verified_entry(compilation()->directive()->BreakAtExecuteOption);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-  void verified_entry();\n+  void verified_entry(bool breakAtEntry);\n","filename":"src\/hotspot\/share\/c1\/c1_MacroAssembler.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -337,0 +337,10 @@\n+#ifdef COMPILER1\n+    if (C1Breakpoint) {\n+      \/\/ If the directives didn't have 'BreakAtExecute',\n+      \/\/ the command 'C1Breakpoint' would become effective.\n+      if (!_modified[BreakAtExecuteIndex]) {\n+         set.cloned()->BreakAtExecuteOption = true;\n+      }\n+    }\n+#endif\n+\n@@ -340,0 +350,2 @@\n+      \/\/ If the directives didn't have 'BreakAtCompile' or 'BreakAtExecute',\n+      \/\/ the sub-command 'Break' of the 'CompileCommand' would become effective.\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}