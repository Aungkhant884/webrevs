{"files":[{"patch":"@@ -150,0 +150,28 @@\n+    \/\/ Cache default constructors used by newInstanceUtil. This ensures proper\n+    \/\/ reuse of the Constructor objects (which are thread-safe and safe to share\n+    \/\/ as long as they're not passed to external code). This avoids copying and\n+    \/\/ access checking.\n+    private static final ClassValue<Constructor<?>> DEFAULT_CONSTRUCTORS =\n+            new ClassValue<>() {\n+                @Override\n+                protected Constructor<?> computeValue(Class<?> clazz) {\n+                    try {\n+                        return clazz.getConstructor();\n+                    } catch (NoSuchMethodException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            };\n+    private static final Object[] EMPTY = new Object[0];\n+\n+    private static Object newInstanceOf(Class<?> clazz) throws Exception {\n+        try {\n+            return DEFAULT_CONSTRUCTORS.get(clazz).newInstance(EMPTY);\n+        } catch (RuntimeException re) {\n+            if (re.getCause() instanceof NoSuchMethodException nsme) {\n+                throw nsme;\n+            }\n+            throw re;\n+        }\n+    }\n+\n@@ -154,2 +182,1 @@\n-            Constructor<?> con = clazz.getConstructor();\n-            return con.newInstance();\n+            return newInstanceOf(clazz);\n@@ -176,2 +203,1 @@\n-                        Constructor<?> con = clazz.getConstructor();\n-                        return con.newInstance();\n+                        return newInstanceOf(clazz);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+import java.security.DigestException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Micros for speed of looking up and instantiating MessageDigests.\n+ *\/\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(value = 3)\n+public class GetMessageDigest {\n+\n+    @Param({\"md5\", \"SHA-1\", \"SHA-256\"})\n+    private String digesterName;\n+\n+    @Benchmark\n+    public MessageDigest getInstance() throws NoSuchAlgorithmException {\n+        return MessageDigest.getInstance(digesterName);\n+    }\n+\n+    @Benchmark\n+    public MessageDigest getInstanceWithProvider() throws NoSuchAlgorithmException, NoSuchProviderException {\n+        return MessageDigest.getInstance(digesterName, \"SUN\");\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/GetMessageDigest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}