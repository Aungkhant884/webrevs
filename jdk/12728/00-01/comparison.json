{"files":[{"patch":"@@ -1837,1 +1837,1 @@\n-     * @throws StringIndexOutOfBoundsException  if the result overflows the buffer\n+     * @throws IndexOutOfBoundsException  if the result overflows the buffer\n@@ -1842,2 +1842,1 @@\n-        }\n-        if (count == 0) {\n+        } else if (count == 0) {\n@@ -1847,4 +1846,6 @@\n-        if (isLatin1() && StringLatin1.canEncode(c)) {\n-            int index = this.count;\n-            while (count-- != 0) {\n-                value[index++] = (byte) c;\n+        int index = this.count;\n+        int limit = index + count;\n+        boolean isLatin1 = isLatin1();\n+        if (isLatin1 && StringLatin1.canEncode(c)) {\n+            while (index < limit) {\n+                value[index++] = (byte)c;\n@@ -1852,1 +1853,0 @@\n-            this.count = index;\n@@ -1854,1 +1854,1 @@\n-            if (isLatin1()) {\n+            if (isLatin1) {\n@@ -1857,2 +1857,1 @@\n-            int index = this.count;\n-            while (count-- != 0) {\n+            while (index < limit) {\n@@ -1861,17 +1860,0 @@\n-            this.count = index;\n-        }\n-        return this;\n-    }\n-\n-    private AbstractStringBuilder repeatNull(int count) {\n-        if (count < 0) {\n-            throw new IllegalArgumentException(\"count is less than zero: \" + count);\n-        } else if (count == 0) {\n-            return this;\n-        }\n-        int offset = this.count;\n-        appendNull();\n-        int length = this.count - offset;\n-        int valueLength = length << coder;\n-        if ((Integer.MAX_VALUE - offset) \/ count < valueLength) {\n-            throw new OutOfMemoryError(\"Required length exceeds implementation limit\");\n@@ -1879,4 +1861,1 @@\n-        int limit = count * length;\n-        ensureCapacityInternal(offset + limit);\n-        String.repeatCopyRest(value, offset << coder, limit << coder, length << coder);\n-        this.count = offset + limit;\n+        this.count = limit;\n@@ -1900,1 +1879,1 @@\n-     * @throws StringIndexOutOfBoundsException  if the result overflows the buffer\n+     * @throws IndexOutOfBoundsException  if the result overflows the buffer\n@@ -1903,3 +1882,1 @@\n-        if (cs == null) {\n-            return repeatNull(count);\n-        } else if (count < 0) {\n+        if (count < 0) {\n@@ -1912,1 +1889,3 @@\n-\n+        if (cs == null) {\n+            cs = \"null\";\n+        }\n@@ -1917,2 +1896,3 @@\n-        int valueLength = length << UTF16;\n-        if ((Integer.MAX_VALUE - this.count) \/ count < valueLength) {\n+        int offset = this.count;\n+        int valueLength = length << coder;\n+        if ((Integer.MAX_VALUE - offset) \/ count < valueLength) {\n@@ -1921,3 +1901,3 @@\n-        int limit = count * length;\n-        int offset = this.count;\n-        ensureCapacityInternal(offset + limit);\n+        int total = count * length;\n+        int limit = offset + total;\n+        ensureCapacityInternal(limit);\n@@ -1931,2 +1911,2 @@\n-        String.repeatCopyRest(value, offset << coder, limit << coder, length << coder);\n-        this.count = offset + limit;\n+        String.repeatCopyRest(value, offset << coder, total << coder, length << coder);\n+        this.count = limit;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":24,"deletions":44,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -714,1 +714,1 @@\n-     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n+     * @throws IndexOutOfBoundsException {@inheritDoc}\n@@ -725,1 +725,1 @@\n-     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n+     * @throws IndexOutOfBoundsException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n+     * @throws IndexOutOfBoundsException {@inheritDoc}\n@@ -463,1 +463,1 @@\n-     * @throws StringIndexOutOfBoundsException {@inheritDoc}\n+     * @throws IndexOutOfBoundsException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        } catch (OutOfMemoryError | StringIndexOutOfBoundsException ex) {\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n@@ -126,1 +126,1 @@\n-        } catch (OutOfMemoryError | StringIndexOutOfBoundsException ex) {\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n@@ -133,1 +133,1 @@\n-        } catch (OutOfMemoryError | StringIndexOutOfBoundsException ex) {\n+        } catch (OutOfMemoryError | IndexOutOfBoundsException ex) {\n@@ -140,1 +140,1 @@\n-        } catch (IllegalArgumentException | StringIndexOutOfBoundsException ex) {\n+        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n@@ -147,1 +147,1 @@\n-        } catch (IllegalArgumentException | StringIndexOutOfBoundsException ex) {\n+        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n@@ -154,1 +154,1 @@\n-        } catch (IllegalArgumentException | StringIndexOutOfBoundsException ex) {\n+        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/Repeat.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}