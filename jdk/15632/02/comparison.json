{"files":[{"patch":"@@ -83,0 +83,1 @@\n+    _cost_per_code_root_ms_seq(TruncatedSeqLength),\n@@ -86,0 +87,1 @@\n+    _code_root_rs_length_seq(TruncatedSeqLength),\n@@ -107,0 +109,1 @@\n+  _code_root_rs_length_seq.set_initial(0);\n@@ -189,0 +192,4 @@\n+void G1Analytics::report_cost_per_code_root_scan_ms(double cost_per_code_root_ms, bool for_young_only_phase) {\n+  _cost_per_code_root_ms_seq.add(cost_per_code_root_ms, for_young_only_phase);\n+}\n+\n@@ -217,0 +224,4 @@\n+void G1Analytics::report_code_root_rs_length(double code_root_rs_length, bool for_young_only_phase) {\n+  _code_root_rs_length_seq.add(code_root_rs_length, for_young_only_phase);\n+}\n+\n@@ -245,0 +256,4 @@\n+double G1Analytics::predict_code_root_scan_time_ms(size_t code_root_num, bool for_young_only_phase) const {\n+  return code_root_num * predict_zero_bounded(&_cost_per_code_root_ms_seq, for_young_only_phase);\n+}\n+\n@@ -277,0 +292,4 @@\n+size_t G1Analytics::predict_code_root_rs_length(bool for_young_only_phase) const {\n+  return predict_size(&_code_root_rs_length_seq, for_young_only_phase);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+  \/\/ The cost to scan entries in the code root remembered set in ms.\n+  G1PhaseDependentSeq _cost_per_code_root_ms_seq;\n@@ -65,0 +67,1 @@\n+  G1PhaseDependentSeq _code_root_rs_length_seq;\n@@ -130,0 +133,1 @@\n+  void report_cost_per_code_root_scan_ms(double cost_per_code_root_ms, bool for_young_only_phase);\n@@ -138,0 +142,1 @@\n+  void report_code_root_rs_length(double code_root_rs_length, bool for_young_only_phase);\n@@ -153,0 +158,2 @@\n+  double predict_code_root_scan_time_ms(size_t code_root_num, bool for_young_only_phase) const;\n+\n@@ -166,0 +173,1 @@\n+  size_t predict_code_root_rs_length(bool for_young_only_phase) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -283,0 +283,1 @@\n+  size_t _sampled_code_root_rs_length;\n@@ -286,1 +287,1 @@\n-    _cset(cset), _sampled_rs_length(0) {}\n+    _cset(cset), _sampled_rs_length(0), _sampled_code_root_rs_length(0) {}\n@@ -289,2 +290,3 @@\n-    size_t rs_length = r->rem_set()->occupied();\n-    _sampled_rs_length += rs_length;\n+    HeapRegionRemSet* rem_set = r->rem_set();\n+    _sampled_rs_length += rem_set->occupied();\n+    _sampled_code_root_rs_length += rem_set->code_roots_list_length();\n@@ -295,0 +297,1 @@\n+  size_t sampled_code_root_rs_length() const { return _sampled_code_root_rs_length; }\n@@ -314,1 +317,1 @@\n-    _policy->revise_young_list_target_length(cl.sampled_rs_length());\n+    _policy->revise_young_list_target_length(cl.sampled_rs_length(), cl.sampled_code_root_rs_length());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -192,1 +192,2 @@\n-                             _analytics->predict_rs_length(for_young_only_phase));\n+                             _analytics->predict_rs_length(for_young_only_phase),\n+                             _analytics->predict_code_root_rs_length(for_young_only_phase));\n@@ -195,1 +196,1 @@\n-void G1Policy::update_young_length_bounds(size_t pending_cards, size_t rs_length) {\n+void G1Policy::update_young_length_bounds(size_t pending_cards, size_t rs_length, size_t code_root_rs_length) {\n@@ -198,1 +199,1 @@\n-  uint new_young_list_desired_length = calculate_young_desired_length(pending_cards, rs_length);\n+  uint new_young_list_desired_length = calculate_young_desired_length(pending_cards, rs_length, code_root_rs_length);\n@@ -237,1 +238,3 @@\n-uint G1Policy::calculate_young_desired_length(size_t pending_cards, size_t rs_length) const {\n+uint G1Policy::calculate_young_desired_length(size_t pending_cards,\n+                                              size_t rs_length,\n+                                              size_t code_root_rs_length) const {\n@@ -270,1 +273,1 @@\n-    double base_time_ms = predict_base_time_ms(pending_cards, rs_length);\n+    double base_time_ms = predict_base_time_ms(pending_cards, rs_length, code_root_rs_length);\n@@ -553,1 +556,1 @@\n-void G1Policy::revise_young_list_target_length(size_t rs_length) {\n+void G1Policy::revise_young_list_target_length(size_t rs_length, size_t code_root_rs_length) {\n@@ -559,1 +562,1 @@\n-  update_young_length_bounds(pending_cards, rs_length);\n+  update_young_length_bounds(pending_cards, rs_length, code_root_rs_length);\n@@ -893,0 +896,11 @@\n+    \/\/ Update prediction for code root scan\n+    size_t const total_code_roots_scanned = p->sum_thread_work_items(G1GCPhaseTimes::CodeRoots, G1GCPhaseTimes::CodeRootsScannedNMethods) +\n+                                            p->sum_thread_work_items(G1GCPhaseTimes::OptCodeRoots, G1GCPhaseTimes::CodeRootsScannedNMethods);\n+\n+    if (total_code_roots_scanned >= G1NumCodeRootsCostSampleThreshold) {\n+      double avg_time_code_root_scan = average_time_ms(G1GCPhaseTimes::CodeRoots) +\n+                                       average_time_ms(G1GCPhaseTimes::OptCodeRoots);\n+\n+      _analytics->report_cost_per_code_root_scan_ms(avg_time_code_root_scan \/ total_code_roots_scanned, is_young_only_pause);\n+    }\n+\n@@ -915,0 +929,1 @@\n+    _analytics->report_code_root_rs_length((double)total_code_roots_scanned, is_young_only_pause);\n@@ -1036,1 +1051,2 @@\n-                                      size_t rs_length) const {\n+                                      size_t rs_length,\n+                                      size_t code_root_rs_length) const {\n@@ -1046,0 +1062,1 @@\n+  double code_root_scan_time = _analytics->predict_code_root_scan_time_ms(code_root_rs_length, in_young_only_phase);\n@@ -1049,1 +1066,1 @@\n-  double total_time = card_merge_time + card_scan_time + constant_other_time + survivor_evac_time;\n+  double total_time = card_merge_time + card_scan_time + code_root_scan_time + constant_other_time + survivor_evac_time;\n@@ -1052,1 +1069,2 @@\n-                            \"card_merge_time %f card_scan_time %f constant_other_time %f survivor_evac_time %f\",\n+                            \"card_merge_time %f card_scan_time %f code_root_rs_length %zu code_root_scan_time %f \"\n+                            \"constant_other_time %f survivor_evac_time %f\",\n@@ -1054,1 +1072,2 @@\n-                            card_merge_time, card_scan_time, constant_other_time, survivor_evac_time);\n+                            card_merge_time, card_scan_time, code_root_rs_length, code_root_scan_time,\n+                            constant_other_time, survivor_evac_time);\n@@ -1061,1 +1080,2 @@\n-  return predict_base_time_ms(pending_cards, rs_length);\n+  size_t code_root_rs_length = _analytics->predict_code_root_rs_length(for_young_only_phase);\n+  return predict_base_time_ms(pending_cards, rs_length, code_root_rs_length);\n@@ -1103,0 +1123,7 @@\n+double G1Policy::predict_region_code_root_scan_time(HeapRegion* hr, bool for_young_only_phase) const {\n+  size_t code_root_length = hr->rem_set()->code_roots_list_length();\n+\n+  return\n+    _analytics->predict_code_root_scan_time_ms(code_root_length, for_young_only_phase);\n+}\n+\n@@ -1106,1 +1133,2 @@\n-  double region_elapsed_time_ms = predict_region_merge_scan_time(hr, for_young_only_phase);\n+  double region_elapsed_time_ms = predict_region_merge_scan_time(hr, for_young_only_phase) +\n+                                  predict_region_code_root_scan_time(hr, for_young_only_phase);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":41,"deletions":13,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  double predict_base_time_ms(size_t pending_cards, size_t rs_length) const;\n+  double predict_base_time_ms(size_t pending_cards, size_t rs_length, size_t code_root_length) const;\n@@ -149,1 +149,2 @@\n-  \/\/ Merge-scan time for a region is handling remembered sets of that region (as a single unit).\n+  \/\/ Merge-scan time for a region is handling card-based remembered sets of that region\n+  \/\/ (as a single unit).\n@@ -151,0 +152,2 @@\n+  \/\/ Code root scan time prediction for the given region.\n+  double predict_region_code_root_scan_time(HeapRegion* hr, bool for_young_only_phase) const;\n@@ -210,2 +213,2 @@\n-  \/\/ If no parameters are passed, predict pending cards and the RS length using\n-  \/\/ the prediction model.\n+  \/\/ If no parameters are passed, predict pending cards, card set remset length and\n+  \/\/ code root remset length using the prediction model.\n@@ -213,1 +216,1 @@\n-  void update_young_length_bounds(size_t pending_cards, size_t rs_length);\n+  void update_young_length_bounds(size_t pending_cards, size_t rs_length, size_t code_root_rs_length);\n@@ -241,1 +244,1 @@\n-  uint calculate_young_desired_length(size_t pending_cards, size_t rs_length) const;\n+  uint calculate_young_desired_length(size_t pending_cards, size_t rs_length, size_t code_root_rs_length) const;\n@@ -304,1 +307,1 @@\n-  void revise_young_list_target_length(size_t rs_length);\n+  void revise_young_list_target_length(size_t rs_length, size_t code_root_rs_length);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -328,3 +328,8 @@\n-          \"Threshold for the number of cards when reporting card cost \"     \\\n-          \"related prediction sample. That sample must involve the same or \"\\\n-          \"more than that number of cards to be used.\")                     \\\n+          \"Threshold for the number of cards when reporting remembered set \"\\\n+          \"card cost related prediction samples. A sample must involve \"    \\\n+          \"the same or more than that number of cards to be used.\")         \\\n+                                                                            \\\n+  product(uint, G1NumCodeRootsCostSampleThreshold, 100, DIAGNOSTIC,         \\\n+          \"Threshold for the number of code roots when reporting code root \"\\\n+          \"scan cost related prediction samples. A sample must involve \"    \\\n+          \"the same or more than this number of code roots to be used.\")    \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"}]}