{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.nio.channels.ClosedSelectorException;\n@@ -241,17 +242,3 @@\n-                        byte[] msg = null;\n-                        msg = doUdpQuery(pkt, servers[i], serverPorts[i],\n-                                            retry, xid);\n-                        \/\/\n-                        \/\/ If the matching response is not got within the\n-                        \/\/ given timeout, check if the response was enqueued\n-                        \/\/ by some other thread, if not proceed with the next\n-                        \/\/ server or retry.\n-                        \/\/\n-                        if (msg == null) {\n-                            if (resps.size() > 0) {\n-                                msg = lookupResponse(xid);\n-                            }\n-                            if (msg == null) { \/\/ try next server or retry\n-                                continue;\n-                            }\n-                        }\n+                        byte[] msg = doUdpQuery(pkt, servers[i], serverPorts[i],\n+                                                retry, xid);\n+                        assert msg != null;\n@@ -323,0 +310,7 @@\n+                    } catch (ClosedSelectorException e) {\n+                        \/\/ ClosedSelectorException is thrown by blockingReceive if\n+                        \/\/ the datagram channel selector associated with DNS client\n+                        \/\/ is unexpectedly closed\n+                        var ce = new CommunicationException(\"DNS client closed\");\n+                        ce.setRootCause(e);\n+                        throw ce;\n@@ -441,1 +435,1 @@\n-                udpChannel.send(opkt, target);\n+                udpChannel.write(opkt);\n@@ -443,1 +437,1 @@\n-                \/\/ timeout remaining after successive 'receive()'\n+                \/\/ timeout remaining after successive 'blockingReceive()'\n@@ -466,0 +460,8 @@\n+                    } else if (resps.size() > 0) {\n+                        \/\/ If the matching response is not found, check if\n+                        \/\/ the response was enqueued by some other thread,\n+                        \/\/ if not continue\n+                        byte[] cachedMsg = lookupResponse(xid);\n+                        if (cachedMsg != null) { \/\/ found in cache\n+                            return cachedMsg;\n+                        }\n@@ -469,1 +471,1 @@\n-                \/\/ no matching packet received within the timeout\n+                \/\/ no matching packets received within the timeout\n","filename":"src\/jdk.naming.dns\/share\/classes\/com\/sun\/jndi\/dns\/DnsClient.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -70,12 +70,12 @@\n-        DatagramSocket ds = new DatagramSocket(\n-                new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n-        String allQuietUrl = URIBuilder.newBuilder()\n-                .scheme(\"dns\")\n-                .loopback()\n-                .port(ds.getLocalPort())\n-                .build()\n-                .toString();\n-        env().put(Context.PROVIDER_URL, allQuietUrl);\n-        env().put(\"com.sun.jndi.dns.timeout.initial\", String.valueOf(TIMEOUT));\n-        env().put(\"com.sun.jndi.dns.timeout.retries\", String.valueOf(RETRIES));\n-        setContext(new InitialDirContext(env()));\n+        try (DatagramSocket ds = new DatagramSocket(\n+                new InetSocketAddress(InetAddress.getLoopbackAddress(), 0))) {\n+            String allQuietUrl = URIBuilder.newBuilder()\n+                    .scheme(\"dns\")\n+                    .loopback()\n+                    .port(ds.getLocalPort())\n+                    .build()\n+                    .toString();\n+            env().put(Context.PROVIDER_URL, allQuietUrl);\n+            env().put(\"com.sun.jndi.dns.timeout.initial\", String.valueOf(TIMEOUT));\n+            env().put(\"com.sun.jndi.dns.timeout.retries\", String.valueOf(RETRIES));\n+            setContext(new InitialDirContext(env()));\n@@ -83,3 +83,3 @@\n-        \/\/ Any request should fail after timeouts have expired.\n-        startTime = Instant.now();\n-        context().getAttributes(\"\");\n+            \/\/ Any request should fail after timeouts have expired.\n+            startTime = Instant.now();\n+            context().getAttributes(\"\");\n@@ -87,2 +87,3 @@\n-        throw new RuntimeException(\n-                \"Failed: getAttributes succeeded unexpectedly\");\n+            throw new RuntimeException(\n+                    \"Failed: getAttributes succeeded unexpectedly\");\n+        }\n","filename":"test\/jdk\/com\/sun\/jndi\/dns\/ConfigTests\/Timeout.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"}]}