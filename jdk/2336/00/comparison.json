{"files":[{"patch":"@@ -1653,0 +1653,1 @@\n+            boolean errorEnumSwitch = TreeInfo.isErrorEnumSwitch(selector, cases);\n@@ -1683,0 +1684,11 @@\n+                        } else if (errorEnumSwitch) {\n+                            \/\/error recovery: the selector is erroneous, and all the case labels\n+                            \/\/are identifiers. This could be an enum switch - don't report resolve\n+                            \/\/error for the case label:\n+                            var prevResolveHelper = rs.basicLogResolveHelper;\n+                            try {\n+                                rs.basicLogResolveHelper = rs.silentLogResolveHelper;\n+                                attribExpr(pat, switchEnv, seltype);\n+                            } finally {\n+                                rs.basicLogResolveHelper = prevResolveHelper;\n+                            }\n@@ -3799,1 +3811,1 @@\n-        if (sym != null && sym.kind.matches(KindSelector.TYP_PCK))\n+        if (sym != null && sym.kind.matches(KindSelector.TYP_PCK) && sym.kind != Kind.ERR)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -739,1 +739,2 @@\n-            if ((constants == null || !constants.isEmpty()) && !hasDefault) {\n+            if ((constants == null || !constants.isEmpty()) && !hasDefault &&\n+                !TreeInfo.isErrorEnumSwitch(tree.selector, tree.cases)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2632,0 +2632,9 @@\n+    LogResolveHelper silentLogResolveHelper = new LogResolveHelper() {\n+        public boolean resolveDiagnosticNeeded(Type site, List<Type> argtypes, List<Type> typeargtypes) {\n+            return false;\n+        }\n+        public List<Type> getArgumentTypes(ResolveError errSym, Symbol accessedSym, Name name, List<Type> argtypes) {\n+            return argtypes;\n+        }\n+    };\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1327,0 +1327,5 @@\n+    public static boolean isErrorEnumSwitch(JCExpression selector, List<JCCase> cases) {\n+        return selector.type.tsym.kind == Kinds.Kind.ERR &&\n+               cases.stream().flatMap(c -> c.pats.stream())\n+                             .allMatch(p -> p.hasTag(IDENT));\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8222850\n+ * @summary Check error recovery for switch over undefined variables.\n+ * @compile\/fail\/ref=SwitchUndefinedSelector.out -XDrawDiagnostics --should-stop=at=FLOW SwitchUndefinedSelector.java\n+ *\/\n+\n+public class SwitchUndefinedSelector {\n+    private static final Object D = null;\n+    public void switchTest() {\n+        switch (undefined) {\n+            case A -> {}\n+            case B, C -> {}\n+            case D -> {}\n+        }\n+        var v = switch (undefined) {\n+            case A -> 0;\n+            case B, C -> 0;\n+            case D -> 0;\n+        };\n+        switch (undefined) {\n+            case SwitchUndefinedSelector.D -> {}\n+            case SwitchUndefinedSelector.UNDEF -> {}\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/SwitchUndefinedSelector.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+SwitchUndefinedSelector.java:11:17: compiler.err.cant.resolve.location: kindname.variable, undefined, , , (compiler.misc.location: kindname.class, SwitchUndefinedSelector, null)\n+SwitchUndefinedSelector.java:16:25: compiler.err.cant.resolve.location: kindname.variable, undefined, , , (compiler.misc.location: kindname.class, SwitchUndefinedSelector, null)\n+SwitchUndefinedSelector.java:21:17: compiler.err.cant.resolve.location: kindname.variable, undefined, , , (compiler.misc.location: kindname.class, SwitchUndefinedSelector, null)\n+SwitchUndefinedSelector.java:22:41: compiler.err.string.const.req\n+SwitchUndefinedSelector.java:23:41: compiler.err.cant.resolve.location: kindname.variable, UNDEF, , , (compiler.misc.location: kindname.class, SwitchUndefinedSelector, null)\n+5 errors\n","filename":"test\/langtools\/tools\/javac\/recovery\/SwitchUndefinedSelector.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}