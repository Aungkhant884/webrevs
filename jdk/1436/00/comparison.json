{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zLock.inline.hpp\"\n@@ -27,0 +28,1 @@\n+#include \"gc\/z\/zTask.hpp\"\n@@ -29,2 +31,0 @@\n-#include \"runtime\/mutex.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -34,3 +34,3 @@\n-  const uint _nworkers;\n-  uint       _started;\n-  Monitor    _monitor;\n+  const uint     _nworkers;\n+  uint           _started;\n+  ZConditionLock _lock;\n@@ -43,4 +43,1 @@\n-      _monitor(Monitor::leaf,\n-               \"ZRuntimeWorkersInitialize\",\n-               false \/* allow_vm_block *\/,\n-               Monitor::_safepoint_check_never) {}\n+      _lock() {}\n@@ -49,3 +46,0 @@\n-    \/\/ Register as runtime worker\n-    ZThread::set_runtime_worker();\n-\n@@ -53,1 +47,1 @@\n-    MonitorLocker ml(&_monitor, Monitor::_no_safepoint_check_flag);\n+    ZLocker<ZConditionLock> locker(&_lock);\n@@ -56,1 +50,1 @@\n-      ml.notify_all();\n+      _lock.notify_all();\n@@ -59,1 +53,1 @@\n-        ml.wait();\n+        _lock.wait();\n@@ -80,3 +74,2 @@\n-  \/\/ Execute task to register threads as runtime workers. This also\n-  \/\/ helps reduce latency in early safepoints, which otherwise would\n-  \/\/ have to take on any warmup costs.\n+  \/\/ Execute task to reduce latency in early safepoints,\n+  \/\/ which otherwise would have to take on any warmup costs.\n","filename":"src\/hotspot\/share\/gc\/z\/zRuntimeWorkers.cpp","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-THREAD_LOCAL bool      ZThread::_is_runtime_worker;\n@@ -45,1 +44,0 @@\n-  _is_runtime_worker = false;\n@@ -66,5 +64,0 @@\n-void ZThread::set_runtime_worker() {\n-  ensure_initialized();\n-  _is_runtime_worker = true;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zThread.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-  static THREAD_LOCAL bool      _is_runtime_worker;\n@@ -48,1 +47,0 @@\n-  static void set_runtime_worker();\n@@ -60,1 +58,0 @@\n-  static bool is_runtime_worker();\n","filename":"src\/hotspot\/share\/gc\/z\/zThread.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,5 +56,0 @@\n-inline bool ZThread::is_runtime_worker() {\n-  ensure_initialized();\n-  return _is_runtime_worker;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zThread.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zLock.inline.hpp\"\n@@ -30,2 +31,0 @@\n-#include \"runtime\/mutex.hpp\"\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -35,3 +34,3 @@\n-  const uint _nworkers;\n-  uint       _started;\n-  Monitor    _monitor;\n+  const uint     _nworkers;\n+  uint           _started;\n+  ZConditionLock _lock;\n@@ -44,4 +43,1 @@\n-      _monitor(Monitor::leaf,\n-               \"ZWorkersInitialize\",\n-               false \/* allow_vm_block *\/,\n-               Monitor::_safepoint_check_never) {}\n+      _lock() {}\n@@ -54,1 +50,1 @@\n-    MonitorLocker ml(&_monitor, Monitor::_no_safepoint_check_flag);\n+    ZLocker<ZConditionLock> locker(&_lock);\n@@ -57,1 +53,1 @@\n-      ml.notify_all();\n+      _lock.notify_all();\n@@ -60,1 +56,1 @@\n-        ml.wait();\n+        _lock.wait();\n@@ -82,3 +78,1 @@\n-  \/\/ Execute task to register threads as workers. This also helps\n-  \/\/ reduce latency in early GC pauses, which otherwise would have\n-  \/\/ to take on any warmup costs.\n+  \/\/ Execute task to register threads as workers\n","filename":"src\/hotspot\/share\/gc\/z\/zWorkers.cpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"}]}