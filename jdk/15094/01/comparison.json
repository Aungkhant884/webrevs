{"files":[{"patch":"@@ -40,1 +40,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -42,0 +41,2 @@\n+#include \"oops\/methodCounters.hpp\"\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"oops\/methodData.hpp\"\n@@ -40,0 +39,2 @@\n+#include \"oops\/methodCounters.hpp\"\n+#include \"oops\/methodData.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/s390\/templateTable_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/methodCounters.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"interpreter\/invocationCounter.hpp\"\n@@ -33,1 +32,0 @@\n-#include \"oops\/methodCounters.hpp\"\n@@ -219,20 +217,3 @@\n-  u2   number_of_breakpoints() const {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs == nullptr) {\n-      return 0;\n-    } else {\n-      return mcs->number_of_breakpoints();\n-    }\n-  }\n-  void incr_number_of_breakpoints(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->incr_number_of_breakpoints();\n-    }\n-  }\n-  void decr_number_of_breakpoints(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->decr_number_of_breakpoints();\n-    }\n-  }\n+  inline u2 number_of_breakpoints() const;\n+  inline void incr_number_of_breakpoints(Thread* current);\n+  inline void decr_number_of_breakpoints(Thread* current);\n@@ -240,6 +221,1 @@\n-  void clear_number_of_breakpoints() {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->clear_number_of_breakpoints();\n-    }\n-  }\n+  inline void clear_number_of_breakpoints();\n@@ -283,6 +259,1 @@\n-  void interpreter_throwout_increment(Thread* current) {\n-    MethodCounters* mcs = get_method_counters(current);\n-    if (mcs != nullptr) {\n-      mcs->interpreter_throwout_increment();\n-    }\n-  }\n+  inline void interpreter_throwout_increment(Thread* current);\n@@ -291,8 +262,1 @@\n-  int  interpreter_throwout_count() const        {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs == nullptr) {\n-      return 0;\n-    } else {\n-      return mcs->interpreter_throwout_count();\n-    }\n-  }\n+  inline int interpreter_throwout_count() const;\n@@ -359,30 +323,6 @@\n-  int prev_event_count() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->prev_event_count();\n-  }\n-  void set_prev_event_count(int count) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_prev_event_count(count);\n-    }\n-  }\n-  jlong prev_time() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->prev_time();\n-  }\n-  void set_prev_time(jlong time) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_prev_time(time);\n-    }\n-  }\n-  float rate() const {\n-    MethodCounters* mcs = method_counters();\n-    return mcs == nullptr ? 0 : mcs->rate();\n-  }\n-  void set_rate(float rate) {\n-    MethodCounters* mcs = method_counters();\n-    if (mcs != nullptr) {\n-      mcs->set_rate(rate);\n-    }\n-  }\n+  inline int prev_event_count() const;\n+  inline void set_prev_event_count(int count);\n+  inline jlong prev_time() const;\n+  inline void set_prev_time(jlong time);\n+  inline float rate() const;\n+  inline void set_rate(float rate);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":12,"deletions":72,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"oops\/methodCounters.hpp\"\n@@ -110,0 +111,87 @@\n+#if INCLUDE_JVMTI\n+inline u2 Method::number_of_breakpoints() const {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs == nullptr) {\n+    return 0;\n+  } else {\n+    return mcs->number_of_breakpoints();\n+  }\n+}\n+\n+inline void Method::incr_number_of_breakpoints(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->incr_number_of_breakpoints();\n+  }\n+}\n+\n+inline void Method::decr_number_of_breakpoints(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->decr_number_of_breakpoints();\n+  }\n+}\n+\n+\/\/ Initialization only\n+inline void Method::clear_number_of_breakpoints() {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->clear_number_of_breakpoints();\n+  }\n+}\n+#endif \/\/ INCLUDE_JVMTI\n+\n+#if COMPILER2_OR_JVMCI\n+inline void Method::interpreter_throwout_increment(Thread* current) {\n+  MethodCounters* mcs = get_method_counters(current);\n+  if (mcs != nullptr) {\n+    mcs->interpreter_throwout_increment();\n+  }\n+}\n+#endif\n+\n+inline int Method::interpreter_throwout_count() const        {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs == nullptr) {\n+    return 0;\n+  } else {\n+    return mcs->interpreter_throwout_count();\n+  }\n+}\n+\n+inline int Method::prev_event_count() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->prev_event_count();\n+}\n+\n+inline void Method::set_prev_event_count(int count) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_prev_event_count(count);\n+  }\n+}\n+\n+inline jlong Method::prev_time() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->prev_time();\n+}\n+\n+inline void Method::set_prev_time(jlong time) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_prev_time(time);\n+  }\n+}\n+\n+inline float Method::rate() const {\n+  MethodCounters* mcs = method_counters();\n+  return mcs == nullptr ? 0 : mcs->rate();\n+}\n+\n+inline void Method::set_rate(float rate) {\n+  MethodCounters* mcs = method_counters();\n+  if (mcs != nullptr) {\n+    mcs->set_rate(rate);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/method.inline.hpp","additions":88,"deletions":0,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"interpreter\/invocationCounter.hpp\"\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/xmlstream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}