{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/workerThread.hpp\"\n@@ -340,1 +341,0 @@\n-  assert(worker_id != ShenandoahThreadLocalData::INVALID_WORKER_ID, \"need valid worker ID\");\n@@ -364,1 +364,1 @@\n-  uint worker_id = ShenandoahThreadLocalData::worker_id(Thread::current());\n+  uint worker_id = WorkerThread::worker_id();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-public:\n-  static const uint INVALID_WORKER_ID = uint(-1);\n-\n@@ -50,1 +47,0 @@\n-  uint  _worker_id;\n@@ -61,1 +57,0 @@\n-    _worker_id(INVALID_WORKER_ID),\n@@ -106,10 +101,0 @@\n-  static void set_worker_id(Thread* thread, uint id) {\n-    assert(thread->is_Worker_thread(), \"Must be a worker thread\");\n-    data(thread)->_worker_id = id;\n-  }\n-\n-  static uint worker_id(Thread* thread) {\n-    assert(thread->is_Worker_thread(), \"Must be a worker thread\");\n-    return data(thread)->_worker_id;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahThreadLocalData.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -149,4 +149,2 @@\n-ShenandoahWorkerSession::ShenandoahWorkerSession(uint worker_id) : _worker_id(worker_id) {\n-  Thread* thr = Thread::current();\n-  assert(ShenandoahThreadLocalData::worker_id(thr) == ShenandoahThreadLocalData::INVALID_WORKER_ID, \"Already set\");\n-  ShenandoahThreadLocalData::set_worker_id(thr, worker_id);\n+ShenandoahWorkerSession::ShenandoahWorkerSession(uint worker_id) {\n+  assert(worker_id == WorkerThread::worker_id(), \"Wrong worker id\");\n@@ -160,8 +158,1 @@\n-  _event.commit(GCId::current(), _worker_id, ShenandoahPhaseTimings::phase_name(ShenandoahGCPhase::current_phase()));\n-}\n-ShenandoahWorkerSession::~ShenandoahWorkerSession() {\n-#ifdef ASSERT\n-  Thread* thr = Thread::current();\n-  assert(ShenandoahThreadLocalData::worker_id(thr) != ShenandoahThreadLocalData::INVALID_WORKER_ID, \"Must be set\");\n-  ShenandoahThreadLocalData::set_worker_id(thr, ShenandoahThreadLocalData::INVALID_WORKER_ID);\n-#endif\n+  _event.commit(GCId::current(), WorkerThread::worker_id(), ShenandoahPhaseTimings::phase_name(ShenandoahGCPhase::current_phase()));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2017, 2021, Red Hat, Inc. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"gc\/shared\/workerThread.hpp\"\n@@ -176,2 +177,0 @@\n-  uint _worker_id;\n-\n@@ -179,1 +178,0 @@\n-  ~ShenandoahWorkerSession();\n@@ -182,4 +180,1 @@\n-    Thread* thr = Thread::current();\n-    uint id = ShenandoahThreadLocalData::worker_id(thr);\n-    assert(id != ShenandoahThreadLocalData::INVALID_WORKER_ID, \"Worker session has not been created\");\n-    return id;\n+    return WorkerThread::worker_id();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}