{"files":[{"patch":"@@ -450,6 +450,2 @@\n-        case INITIAL:\n-            p.print(\"<initialized>\");\n-            break;\n-        case IN_PROGRESS:\n-            p.print(\"<in progress>\");\n-            break;\n+            case INITIAL     -> p.print(\"<initialized>\");\n+            case IN_PROGRESS -> p.print(\"<in progress>\");\n","filename":"src\/java.base\/share\/classes\/java\/security\/MessageDigest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -950,12 +950,6 @@\n-        String initState = \"\";\n-        switch (state) {\n-        case UNINITIALIZED:\n-            initState = \"<not initialized>\";\n-            break;\n-        case VERIFY:\n-            initState = \"<initialized for verifying>\";\n-            break;\n-        case SIGN:\n-            initState = \"<initialized for signing>\";\n-            break;\n-        }\n+        String initState = switch (state) {\n+            case UNINITIALIZED -> \"<not initialized>\";\n+            case VERIFY        -> \"<initialized for verifying>\";\n+            case SIGN          -> \"<initialized for signing>\";\n+            default -> \"\";\n+        };\n@@ -1320,20 +1314,7 @@\n-            case I_PUB:\n-                spi.engineInitVerify((PublicKey)key);\n-                break;\n-            case I_PUB_PARAM:\n-                spi.engineInitVerify((PublicKey)key, params);\n-                break;\n-            case I_PRIV:\n-                spi.engineInitSign((PrivateKey)key);\n-                break;\n-            case I_PRIV_SR:\n-                spi.engineInitSign((PrivateKey)key, random);\n-                break;\n-            case I_PRIV_PARAM_SR:\n-                spi.engineInitSign((PrivateKey)key, params, random);\n-                break;\n-            case S_PARAM:\n-                spi.engineSetParameter(params);\n-                break;\n-            default:\n-                throw new AssertionError(\"Internal error: \" + type);\n+                case I_PUB           -> spi.engineInitVerify((PublicKey) key);\n+                case I_PUB_PARAM     -> spi.engineInitVerify((PublicKey) key, params);\n+                case I_PRIV          -> spi.engineInitSign((PrivateKey) key);\n+                case I_PRIV_SR       -> spi.engineInitSign((PrivateKey) key, random);\n+                case I_PRIV_PARAM_SR -> spi.engineInitSign((PrivateKey) key, params, random);\n+                case S_PARAM         -> spi.engineSetParameter(params);\n+                default -> throw new AssertionError(\"Internal error: \" + type);\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signature.java","additions":13,"deletions":32,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -892,23 +892,10 @@\n-            switch (type) {\n-            case NAME_RFC822:\n-                result = new RFC822Name(nameAsString);\n-                break;\n-            case NAME_DNS:\n-                result = new DNSName(nameAsString);\n-                break;\n-            case NAME_DIRECTORY:\n-                result = new X500Name(nameAsString);\n-                break;\n-            case NAME_URI:\n-                result = new URIName(nameAsString);\n-                break;\n-            case NAME_IP:\n-                result = new IPAddressName(nameAsString);\n-                break;\n-            case NAME_OID:\n-                result = new OIDName(nameAsString);\n-                break;\n-            default:\n-                throw new IOException(\"unable to parse String names of type \"\n-                                      + type);\n-            }\n+            result = switch (type) {\n+                case NAME_RFC822    -> new RFC822Name(nameAsString);\n+                case NAME_DNS       -> new DNSName(nameAsString);\n+                case NAME_DIRECTORY -> new X500Name(nameAsString);\n+                case NAME_URI       -> new URIName(nameAsString);\n+                case NAME_IP        -> new IPAddressName(nameAsString);\n+                case NAME_OID       -> new OIDName(nameAsString);\n+                default -> throw new IOException(\"unable to parse String names of type \"\n+                                                 + type);\n+            };\n@@ -926,32 +913,13 @@\n-            switch (type) {\n-            case NAME_ANY:\n-                result = new OtherName(val);\n-                break;\n-            case NAME_RFC822:\n-                result = new RFC822Name(val);\n-                break;\n-            case NAME_DNS:\n-                result = new DNSName(val);\n-                break;\n-            case NAME_X400:\n-                result = new X400Address(val);\n-                break;\n-            case NAME_DIRECTORY:\n-                result = new X500Name(val);\n-                break;\n-            case NAME_EDI:\n-                result = new EDIPartyName(val);\n-                break;\n-            case NAME_URI:\n-                result = new URIName(val);\n-                break;\n-            case NAME_IP:\n-                result = new IPAddressName(val);\n-                break;\n-            case NAME_OID:\n-                result = new OIDName(val);\n-                break;\n-            default:\n-                throw new IOException(\"unable to parse byte array names of \"\n-                    + \"type \" + type);\n-            }\n+            result = switch (type) {\n+                case NAME_ANY       -> new OtherName(val);\n+                case NAME_RFC822    -> new RFC822Name(val);\n+                case NAME_DNS       -> new DNSName(val);\n+                case NAME_X400      -> new X400Address(val);\n+                case NAME_DIRECTORY -> new X500Name(val);\n+                case NAME_EDI       -> new EDIPartyName(val);\n+                case NAME_URI       -> new URIName(val);\n+                case NAME_IP        -> new IPAddressName(val);\n+                case NAME_OID       -> new OIDName(val);\n+                default -> throw new IOException(\"unable to parse byte array names of \"\n+                                                 + \"type \" + type);\n+            };\n@@ -1931,14 +1899,8 @@\n-            switch (extId) {\n-                case PrivateKeyUsage:\n-                    return impl.getPrivateKeyUsageExtension();\n-                case SubjectAlternativeName:\n-                    return impl.getSubjectAlternativeNameExtension();\n-                case NameConstraints:\n-                    return impl.getNameConstraintsExtension();\n-                case CertificatePolicies:\n-                    return impl.getCertificatePoliciesExtension();\n-                case extendedKeyUsage:\n-                    return impl.getExtendedKeyUsageExtension();\n-                default:\n-                    return null;\n-            }\n+            return switch (extId) {\n+                case PrivateKeyUsage        -> impl.getPrivateKeyUsageExtension();\n+                case SubjectAlternativeName -> impl.getSubjectAlternativeNameExtension();\n+                case NameConstraints        -> impl.getNameConstraintsExtension();\n+                case CertificatePolicies    -> impl.getCertificatePoliciesExtension();\n+                case extendedKeyUsage       -> impl.getExtendedKeyUsageExtension();\n+                default -> null;\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CertSelector.java","additions":31,"deletions":69,"binary":false,"changes":100,"status":"modified"}]}