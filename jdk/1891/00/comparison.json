{"files":[{"patch":"@@ -1109,22 +1109,17 @@\n-  \/\/ Only grab the Threads_lock if we don't already own it and if we\n-  \/\/ are not reporting an error.\n-  \/\/ Note: Not grabbing the Threads_lock during error reporting is\n-  \/\/ dangerous because the data structures we want to print can be\n-  \/\/ freed concurrently. However, grabbing the Threads_lock during\n-  \/\/ error reporting can be equally dangerous since this thread might\n-  \/\/ block during error reporting or a nested error could leave the\n-  \/\/ Threads_lock held. The classic no win scenario.\n-  \/\/\n-  MutexLocker ml((Threads_lock->owned_by_self() || VMError::is_error_reported()) ? NULL : Threads_lock);\n-\n-  st->print_cr(\"Threads class SMR info:\");\n-  st->print_cr(\"_java_thread_list=\" INTPTR_FORMAT \", length=%u, \"\n-               \"elements={\", p2i(_java_thread_list),\n-               _java_thread_list->length());\n-  print_info_elements_on(st, _java_thread_list);\n-  st->print_cr(\"}\");\n-  if (_to_delete_list != NULL) {\n-    st->print_cr(\"_to_delete_list=\" INTPTR_FORMAT \", length=%u, \"\n-                 \"elements={\", p2i(_to_delete_list),\n-                 _to_delete_list->length());\n-    print_info_elements_on(st, _to_delete_list);\n+  bool has_Threads_lock = false;\n+  if (Threads_lock->try_lock()) {\n+    \/\/ We were able to grab the Threads_lock which makes things safe for\n+    \/\/ this call, but if we are error reporting, then a nested error\n+    \/\/ could happen with the Threads_lock held.\n+    has_Threads_lock = true;\n+  }\n+\n+  ThreadsList* saved_threads_list = NULL;\n+  {\n+    ThreadsListHandle tlh;  \/\/ make the current ThreadsList safe for reporting\n+    saved_threads_list = tlh.list();  \/\/ save for later comparison\n+\n+    st->print_cr(\"Threads class SMR info:\");\n+    st->print_cr(\"_java_thread_list=\" INTPTR_FORMAT \", length=%u, elements={\",\n+                 p2i(saved_threads_list), saved_threads_list->length());\n+    print_info_elements_on(st, saved_threads_list);\n@@ -1132,5 +1127,8 @@\n-    for (ThreadsList *t_list = _to_delete_list->next_list();\n-         t_list != NULL; t_list = t_list->next_list()) {\n-      st->print(\"next-> \" INTPTR_FORMAT \", length=%u, \"\n-                \"elements={\", p2i(t_list), t_list->length());\n-      print_info_elements_on(st, t_list);\n+  }\n+\n+  if (_to_delete_list != NULL) {\n+    if (has_Threads_lock) {\n+      \/\/ Only safe if we have the Threads_lock.\n+      st->print_cr(\"_to_delete_list=\" INTPTR_FORMAT \", length=%u, elements={\",\n+                   p2i(_to_delete_list), _to_delete_list->length());\n+      print_info_elements_on(st, _to_delete_list);\n@@ -1138,0 +1136,10 @@\n+      for (ThreadsList *t_list = _to_delete_list->next_list();\n+           t_list != NULL; t_list = t_list->next_list()) {\n+        st->print(\"next-> \" INTPTR_FORMAT \", length=%u, elements={\",\n+                  p2i(t_list), t_list->length());\n+        print_info_elements_on(st, t_list);\n+        st->print_cr(\"}\");\n+      }\n+    } else {\n+      st->print_cr(\"_to_delete_list=\" INTPTR_FORMAT, p2i(_to_delete_list));\n+      st->print_cr(\"Skipping _to_delete_list fields and contents for safety.\");\n@@ -1141,0 +1149,10 @@\n+    if (has_Threads_lock) {\n+      Threads_lock->unlock();\n+    } else {\n+      if (_java_thread_list != saved_threads_list) {\n+        st->print_cr(\"The _java_thread_list has changed from \" INTPTR_FORMAT\n+                     \" to \" INTPTR_FORMAT\n+                     \" so some of the above information may be stale.\",\n+                     p2i(saved_threads_list), p2i(_java_thread_list));\n+      }\n+    }\n@@ -1173,0 +1191,10 @@\n+  if (has_Threads_lock) {\n+    Threads_lock->unlock();\n+  } else {\n+    if (_java_thread_list != saved_threads_list) {\n+      st->print_cr(\"The _java_thread_list has changed from \" INTPTR_FORMAT\n+                   \" to \" INTPTR_FORMAT\n+                   \" so some of the above information may be stale.\",\n+                   p2i(saved_threads_list), p2i(_java_thread_list));\n+    }\n+  }\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":55,"deletions":27,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -96,2 +96,4 @@\n-        \/\/ We should have one nested ThreadsListHandle:\n-        Pattern.compile(\".*, _nested_thread_list_max=1\"),\n+        \/\/ We should have had a double nested ThreadsListHandle since\n+        \/\/ ThreadsSMRSupport::print_info_on() now protects itself with\n+        \/\/ a ThreadsListHandle in addition to what the test creates:\n+        Pattern.compile(\".*, _nested_thread_list_max=2\"),\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/NestedThreadsListHandleInErrorHandlingTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,0 +96,4 @@\n+        \/\/ We should have had a single nested ThreadsListHandle since\n+        \/\/ ThreadsSMRSupport::print_info_on() now protects itself with\n+        \/\/ a ThreadsListHandle:\n+        Pattern.compile(\".*, _nested_thread_list_max=1\"),\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ThreadsListHandleInErrorHandlingTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}