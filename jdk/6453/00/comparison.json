{"files":[{"patch":"@@ -1833,1 +1833,2 @@\n-                           &_is_alive_closure_cm);                         \/\/ is alive closure\n+                           &_is_alive_closure_cm,                          \/\/ is alive closure\n+                           workers());                                     \/\/ workers for processing refs\n@@ -1841,1 +1842,2 @@\n-                           &_is_alive_closure_stw);              \/\/ is alive closure\n+                           &_is_alive_closure_stw,               \/\/ is alive closure\n+                           workers());                           \/\/ workers for processing refs\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -857,1 +857,2 @@\n-      is_alive_non_header) {\n+      is_alive_non_header,\n+      &ParallelScavengeHeap::heap()->workers()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -804,1 +804,2 @@\n-                           NULL);                      \/\/ header provides liveness info\n+                           nullptr,                    \/\/ header provides liveness info\n+                           &ParallelScavengeHeap::heap()->workers());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,2 @@\n-                                       BoolObjectClosure* is_alive_non_header)  :\n+                                       BoolObjectClosure* is_alive_non_header,\n+                                       WorkerThreads* workers)  :\n@@ -96,1 +97,2 @@\n-  _is_alive_non_header(is_alive_non_header)\n+  _is_alive_non_header(is_alive_non_header),\n+  _workers(workers)\n@@ -710,3 +712,2 @@\n-    WorkerThreads* workers = Universe::heap()->safepoint_workers();\n-    assert(workers != NULL, \"can not dispatch multi threaded without workers\");\n-    assert(workers->active_workers() >= num_queues(),\n+    assert(_workers != nullptr, \"can not dispatch multi threaded without workers\");\n+    assert(_workers->active_workers() >= num_queues(),\n@@ -714,2 +715,2 @@\n-           num_queues(), workers->active_workers());\n-    workers->run_task(&proxy_task, num_queues());\n+           num_queues(), _workers->active_workers());\n+    _workers->run_task(&proxy_task, num_queues());\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -256,0 +256,3 @@\n+  \/\/ Workers to process the discovered non-strong references.\n+  WorkerThreads* _workers;\n+\n@@ -379,1 +382,2 @@\n-                     BoolObjectClosure* is_alive_non_header = NULL);\n+                     BoolObjectClosure* is_alive_non_header = nullptr,\n+                     WorkerThreads* workers = nullptr);\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}