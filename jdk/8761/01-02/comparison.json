{"files":[{"patch":"@@ -215,2 +215,2 @@\n-  \/\/ Overrides template<typename F> ResourceHashtable<>::iterate(F f)\n-  template<typename F> void iterate(F f) const;\n+  \/\/ Overrides template<typename Function> ResourceHashtable<>::iterate(Function function)\n+  template<typename Function> void iterate(Function function) const;\n@@ -218,2 +218,2 @@\n-  \/\/ Overrides template<typename F> ResourceHashtable<>::iterate_all(F f)\n-  template<typename F> void iterate_all(F f) const;\n+  \/\/ Overrides template<typename Function> ResourceHashtable<>::iterate_all(Function function)\n+  template<typename Function> void iterate_all(Function function) const;\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/\/ For safety, only iterate over a class if it loader is alive.\n+\/\/ For safety, only iterate over a class if its loader is alive.\n@@ -41,2 +41,2 @@\n-template<typename F>\n-void DumpTimeSharedClassTable::iterate(F f) const {\n+template<typename Function>\n+void DumpTimeSharedClassTable::iterate(Function function) const {\n@@ -47,1 +47,1 @@\n-      bool result = f(k, info);\n+      bool result = function(k, info);\n@@ -62,4 +62,4 @@\n-template<typename F>\n-void DumpTimeSharedClassTable::iterate_all(F f) const {\n-  auto g = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n-    f(k, v);\n+template<typename Function>\n+void DumpTimeSharedClassTable::iterate_all(Function function) const {\n+  auto wrapper = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+    function(k, v);\n@@ -68,1 +68,1 @@\n-  iterate(g);\n+  iterate(wrapper);\n@@ -73,1 +73,1 @@\n-  auto f = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+  auto function = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n@@ -76,1 +76,1 @@\n-  iterate(f);\n+  iterate(function);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.inline.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -725,1 +725,1 @@\n-  auto f = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n+  auto do_klass = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -730,2 +730,1 @@\n-\n-  _dumptime_table->iterate_all(f);\n+  _dumptime_table->iterate_all(do_klass);\n@@ -734,1 +733,1 @@\n-    auto g = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+    auto do_lambda = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n@@ -740,2 +739,1 @@\n-\n-    _dumptime_lambda_proxy_class_dictionary->iterate_all(g);\n+    _dumptime_lambda_proxy_class_dictionary->iterate_all(do_lambda);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-    auto f = [&] (K& k, V& v) {\n+    auto function = [&] (K& k, V& v) {\n@@ -209,1 +209,1 @@\n-    iterate(f);\n+    iterate(function);\n@@ -212,2 +212,2 @@\n-  template<typename F>\n-  void iterate(F f) const { \/\/ lambda enabled API\n+  template<typename Function>\n+  void iterate(Function function) const { \/\/ lambda enabled API\n@@ -219,1 +219,1 @@\n-        bool cont = f(node->_key, node->_value);\n+        bool cont = function(node->_key, node->_value);\n@@ -228,4 +228,4 @@\n-  template<typename F>\n-  void iterate_all(F f) const { \/\/ lambda enabled API\n-    auto g = [&] (K& k, V& v) {\n-      f(k, v);\n+  template<typename Function>\n+  void iterate_all(Function function) const { \/\/ lambda enabled API\n+    auto wrapper = [&] (K& k, V& v) {\n+      function(k, v);\n@@ -234,1 +234,1 @@\n-    iterate(g);\n+    iterate(wrapper);\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}