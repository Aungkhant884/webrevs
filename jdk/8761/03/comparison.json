{"files":[{"patch":"@@ -212,1 +212,1 @@\n-  \/\/ Overrides ResourceHashtable<>::iterate(ITER*)\n+  \/\/ Overrides template<class ITER> ResourceHashtable<>::iterate(ITER* iter)\n@@ -214,0 +214,7 @@\n+\n+  \/\/ Overrides template<typename Function> ResourceHashtable<>::iterate(Function function)\n+  template<typename Function> void iterate(Function function) const;\n+\n+  \/\/ Overrides template<typename Function> ResourceHashtable<>::iterate_all(Function function)\n+  template<typename Function> void iterate_all(Function function) const;\n+\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,2 @@\n-\/\/ For safety, only iterate over a class if it loader is alive.\n-\/\/ IterationHelper and DumpTimeSharedClassTable::iterate\n-\/\/ must be used only inside a safepoint, where the value of\n+\/\/ For safety, only iterate over a class if its loader is alive.\n+\/\/ This function must be called only inside a safepoint, where the value of\n@@ -42,8 +41,3 @@\n-template<class ITER>\n-class DumpTimeSharedClassTable::IterationHelper {\n-  ITER* _iter;\n-public:\n-  IterationHelper(ITER* iter) {\n-    _iter = iter;\n-  }\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n+template<typename Function>\n+void DumpTimeSharedClassTable::iterate(Function function) const {\n+  auto wrapper = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -53,1 +47,1 @@\n-      bool result = _iter->do_entry(k, info);\n+      bool result = function(k, info);\n@@ -63,2 +57,13 @@\n-  }\n-};\n+  };\n+  DumpTimeSharedClassTableBaseType::iterate(wrapper);\n+}\n+\n+\/\/ same as above, but unconditionally iterate all entries\n+template<typename Function>\n+void DumpTimeSharedClassTable::iterate_all(Function function) const {\n+  auto wrapper = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+    function(k, v);\n+    return true;\n+  };\n+  iterate(wrapper);\n+}\n@@ -68,2 +73,4 @@\n-  IterationHelper<ITER> helper(iter);\n-  DumpTimeSharedClassTableBaseType::iterate(&helper);\n+  auto function = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+    return iter->do_entry(k, v);\n+  };\n+  iterate(function);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.inline.hpp","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -656,8 +656,0 @@\n-class ExcludeDumpTimeSharedClasses : StackObj {\n-public:\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n-    SystemDictionaryShared::check_for_exclusion(k, &info);\n-    return true; \/\/ keep on iterating\n-  }\n-};\n-\n@@ -670,1 +662,1 @@\n-    \/\/ all of its subclasses will also be excluded by ExcludeDumpTimeSharedClasses\n+    \/\/ all of its subclasses will also be excluded.\n@@ -677,2 +669,4 @@\n-  ExcludeDumpTimeSharedClasses excl;\n-  _dumptime_table->iterate(&excl);\n+  auto check_for_exclusion = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n+    SystemDictionaryShared::check_for_exclusion(k, &info);\n+  };\n+  _dumptime_table->iterate_all(check_for_exclusion);\n@@ -728,4 +722,2 @@\n-class IterateDumpTimeSharedClassTable : StackObj {\n-  MetaspaceClosure *_it;\n-public:\n-  IterateDumpTimeSharedClassTable(MetaspaceClosure* it) : _it(it) {}\n+void SystemDictionaryShared::dumptime_classes_do(class MetaspaceClosure* it) {\n+  assert_lock_strong(DumpTimeTable_lock);\n@@ -733,2 +725,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n-    assert_lock_strong(DumpTimeTable_lock);\n+  auto do_klass = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -736,1 +727,1 @@\n-      info.metaspace_pointers_do(_it);\n+      info.metaspace_pointers_do(it);\n@@ -738,8 +729,2 @@\n-    return true; \/\/ keep on iterating\n-  }\n-};\n-\n-class IterateDumpTimeLambdaProxyClassDictionary : StackObj {\n-  MetaspaceClosure *_it;\n-public:\n-  IterateDumpTimeLambdaProxyClassDictionary(MetaspaceClosure* it) : _it(it) {}\n+  };\n+  _dumptime_table->iterate_all(do_klass);\n@@ -747,14 +732,0 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n-    assert_lock_strong(DumpTimeTable_lock);\n-    if (key.caller_ik()->is_loader_alive()) {\n-      info.metaspace_pointers_do(_it);\n-      key.metaspace_pointers_do(_it);\n-    }\n-    return true; \/\/ keep on iterating\n-  }\n-};\n-\n-void SystemDictionaryShared::dumptime_classes_do(class MetaspaceClosure* it) {\n-  assert_lock_strong(DumpTimeTable_lock);\n-  IterateDumpTimeSharedClassTable iter(it);\n-  _dumptime_table->iterate(&iter);\n@@ -762,2 +733,7 @@\n-    IterateDumpTimeLambdaProxyClassDictionary iter_lambda(it);\n-    _dumptime_lambda_proxy_class_dictionary->iterate(&iter_lambda);\n+    auto do_lambda = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+      if (key.caller_ik()->is_loader_alive()) {\n+        info.metaspace_pointers_do(it);\n+        key.metaspace_pointers_do(it);\n+      }\n+    };\n+    _dumptime_lambda_proxy_class_dictionary->iterate_all(do_lambda);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":18,"deletions":42,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,0 +206,8 @@\n+    auto function = [&] (K& k, V& v) {\n+      return iter->do_entry(k, v);\n+    };\n+    iterate(function);\n+  }\n+\n+  template<typename Function>\n+  void iterate(Function function) const { \/\/ lambda enabled API\n@@ -211,1 +219,1 @@\n-        bool cont = iter->do_entry(node->_key, node->_value);\n+        bool cont = function(node->_key, node->_value);\n@@ -219,0 +227,10 @@\n+  \/\/ same as above, but unconditionally iterate all entries\n+  template<typename Function>\n+  void iterate_all(Function function) const { \/\/ lambda enabled API\n+    auto wrapper = [&] (K& k, V& v) {\n+      function(k, v);\n+      return true;\n+    };\n+    iterate(wrapper);\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}