{"files":[{"patch":"@@ -212,1 +212,1 @@\n-  \/\/ Overrides ResourceHashtable<>::iterate(ITER*)\n+  \/\/ Overrides template<class ITER> ResourceHashtable<>::iterate(ITER* iter)\n@@ -214,0 +214,7 @@\n+\n+  \/\/ Overrides template<typename F> ResourceHashtable<>::iterate(F f)\n+  template<typename F> void iterate(F f) const;\n+\n+  \/\/ Overrides template<typename F> ResourceHashtable<>::iterate_all(F f)\n+  template<typename F> void iterate_all(F f) const;\n+\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,1 @@\n-\/\/ IterationHelper and DumpTimeSharedClassTable::iterate\n-\/\/ must be used only inside a safepoint, where the value of\n+\/\/ This function must be called only inside a safepoint, where the value of\n@@ -42,8 +41,3 @@\n-template<class ITER>\n-class DumpTimeSharedClassTable::IterationHelper {\n-  ITER* _iter;\n-public:\n-  IterationHelper(ITER* iter) {\n-    _iter = iter;\n-  }\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n+template<typename F>\n+void DumpTimeSharedClassTable::iterate(F f) const {\n+  auto g = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -53,1 +47,1 @@\n-      bool result = _iter->do_entry(k, info);\n+      bool result = f(k, info);\n@@ -63,2 +57,13 @@\n-  }\n-};\n+  };\n+  DumpTimeSharedClassTableBaseType::iterate(g);\n+}\n+\n+\/\/ same as above, but unconditionally iterate all entries\n+template<typename F>\n+void DumpTimeSharedClassTable::iterate_all(F f) const {\n+  auto g = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+    f(k, v);\n+    return true;\n+  };\n+  iterate(g);\n+}\n@@ -68,2 +73,4 @@\n-  IterationHelper<ITER> helper(iter);\n-  DumpTimeSharedClassTableBaseType::iterate(&helper);\n+  auto f = [&] (InstanceKlass* k, DumpTimeClassInfo& v) {\n+    return iter->do_entry(k, v);\n+  };\n+  iterate(f);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.inline.hpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -656,8 +656,0 @@\n-class ExcludeDumpTimeSharedClasses : StackObj {\n-public:\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n-    SystemDictionaryShared::check_for_exclusion(k, &info);\n-    return true; \/\/ keep on iterating\n-  }\n-};\n-\n@@ -670,1 +662,1 @@\n-    \/\/ all of its subclasses will also be excluded by ExcludeDumpTimeSharedClasses\n+    \/\/ all of its subclasses will also be excluded.\n@@ -677,2 +669,4 @@\n-  ExcludeDumpTimeSharedClasses excl;\n-  _dumptime_table->iterate(&excl);\n+  auto check_for_exclusion = [] (InstanceKlass* k, DumpTimeClassInfo& info) {\n+    SystemDictionaryShared::check_for_exclusion(k, &info);\n+  };\n+  _dumptime_table->iterate_all(check_for_exclusion);\n@@ -728,4 +722,2 @@\n-class IterateDumpTimeSharedClassTable : StackObj {\n-  MetaspaceClosure *_it;\n-public:\n-  IterateDumpTimeSharedClassTable(MetaspaceClosure* it) : _it(it) {}\n+void SystemDictionaryShared::dumptime_classes_do(class MetaspaceClosure* it) {\n+  assert_lock_strong(DumpTimeTable_lock);\n@@ -733,2 +725,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n-    assert_lock_strong(DumpTimeTable_lock);\n+  auto f = [&] (InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -736,1 +727,1 @@\n-      info.metaspace_pointers_do(_it);\n+      info.metaspace_pointers_do(it);\n@@ -738,3 +729,1 @@\n-    return true; \/\/ keep on iterating\n-  }\n-};\n+  };\n@@ -742,4 +731,1 @@\n-class IterateDumpTimeLambdaProxyClassDictionary : StackObj {\n-  MetaspaceClosure *_it;\n-public:\n-  IterateDumpTimeLambdaProxyClassDictionary(MetaspaceClosure* it) : _it(it) {}\n+  _dumptime_table->iterate_all(f);\n@@ -747,14 +733,0 @@\n-  bool do_entry(LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n-    assert_lock_strong(DumpTimeTable_lock);\n-    if (key.caller_ik()->is_loader_alive()) {\n-      info.metaspace_pointers_do(_it);\n-      key.metaspace_pointers_do(_it);\n-    }\n-    return true; \/\/ keep on iterating\n-  }\n-};\n-\n-void SystemDictionaryShared::dumptime_classes_do(class MetaspaceClosure* it) {\n-  assert_lock_strong(DumpTimeTable_lock);\n-  IterateDumpTimeSharedClassTable iter(it);\n-  _dumptime_table->iterate(&iter);\n@@ -762,2 +734,8 @@\n-    IterateDumpTimeLambdaProxyClassDictionary iter_lambda(it);\n-    _dumptime_lambda_proxy_class_dictionary->iterate(&iter_lambda);\n+    auto g = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+      if (key.caller_ik()->is_loader_alive()) {\n+        info.metaspace_pointers_do(it);\n+        key.metaspace_pointers_do(it);\n+      }\n+    };\n+\n+    _dumptime_lambda_proxy_class_dictionary->iterate_all(g);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":19,"deletions":41,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,0 +206,8 @@\n+    auto f = [&] (K& k, V& v) {\n+      return iter->do_entry(k, v);\n+    };\n+    iterate(f);\n+  }\n+\n+  template<typename F>\n+  void iterate(F f) const { \/\/ lambda enabled API\n@@ -211,1 +219,1 @@\n-        bool cont = iter->do_entry(node->_key, node->_value);\n+        bool cont = f(node->_key, node->_value);\n@@ -219,0 +227,10 @@\n+  \/\/ same as above, but unconditionally iterate all entries\n+  template<typename F>\n+  void iterate_all(F f) const { \/\/ lambda enabled API\n+    auto g = [&] (K& k, V& v) {\n+      f(k, v);\n+      return true;\n+    };\n+    iterate(g);\n+  }\n+\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}