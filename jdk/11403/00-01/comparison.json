{"files":[{"patch":"@@ -772,5 +772,2 @@\n-     * At most {@linkplain Long#MAX_VALUE} bytes may be transferred by a\n-     * single invocation of this method. If this input stream has more than\n-     * {@code Long.MAX_VALUE} bytes available to transfer, then to transfer\n-     * all bytes it should be invoked repeatedly with the same output stream\n-     * parameter until it returns zero.\n+     * If the total number of bytes transferred is greater than {@linkplain\n+     * Long#MAX_VALUE}, then {@code Long.MAX_VALUE} will be returned.\n@@ -793,1 +790,0 @@\n-        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n@@ -795,3 +791,1 @@\n-        final long threshold = Long.MAX_VALUE - DEFAULT_BUFFER_SIZE;\n-\n-        \/\/ Read to EOF or until transferred count would overflow\n+        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n@@ -801,9 +795,5 @@\n-            transferred += read;\n-            if (transferred > threshold) {\n-                \/\/ Read any remaining bytes then exit the loop\n-                int remaining = (int)(Long.MAX_VALUE - transferred);\n-                while (remaining > 0 &&\n-                    (read = this.read(buffer, 0, remaining)) >= 0) {\n-                    out.write(buffer, 0, read);\n-                    transferred += read;\n-                    remaining -= read;\n+            if (transferred < Long.MAX_VALUE) {\n+                try {\n+                    transferred = Math.addExact(transferred, read);\n+                } catch (ArithmeticException e) {\n+                    transferred = Long.MAX_VALUE;\n@@ -811,1 +801,0 @@\n-                break;\n@@ -814,1 +803,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":8,"deletions":20,"binary":false,"changes":28,"status":"modified"}]}