{"files":[{"patch":"@@ -253,0 +253,8 @@\n+  if (OptoLoopAlignment > CodeEntryAlignment) {\n+    JVMFlag::printError(verbose,\n+                        \"OptoLoopAlignment (\" INTX_FORMAT \") must be \"\n+                        \"less or equal to CodeEntryAlignment (\" INTX_FORMAT \")\\n\",\n+                        value, CodeEntryAlignment);\n+    return JVMFlag::VIOLATES_CONSTRAINT;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1531,1 +1531,1 @@\n-  develop_pd(intx, CodeEntryAlignment,                                      \\\n+  product_pd(intx, CodeEntryAlignment, EXPERIMENTAL,                        \\\n@@ -1537,1 +1537,1 @@\n-          range(1, 16)                                                      \\\n+          range(1, 128)                                                     \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib \/\n+ * @bug 8281467\n+ * @requires vm.flagless\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ *\n+ * @summary Test large CodeEntryAlignments are accepted\n+ * @run driver compiler.arguments.TestCodeEntryAlignment\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestCodeEntryAlignment {\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            driver();\n+        } else {\n+            System.out.println(\"Pass\");\n+        }\n+    }\n+\n+    private static List<String> cmdline(String[] args) {\n+        List<String> r = new ArrayList();\n+        r.addAll(Arrays.asList(args));\n+        r.add(\"compiler.arguments.TestCodeEntryAlignment\");\n+        r.add(\"run\");\n+        return r;\n+    }\n+\n+    public static void shouldPass(String... args) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(cmdline(args));\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+    }\n+\n+    public static void driver() throws IOException {\n+        for (int align = 16; align < 256; align *= 2) {\n+            shouldPass(\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \"-XX:CodeEntryAlignment=\" + align\n+            );\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCodeEntryAlignment.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib \/\n+ * @bug 8281467\n+ * @requires vm.flagless\n+ * @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+ *\n+ * @summary Test large OptoLoopAlignments are accepted\n+ * @run driver compiler.arguments.TestOptoLoopAlignment\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestOptoLoopAlignment {\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            driver();\n+        } else {\n+            System.out.println(\"Pass\");\n+        }\n+    }\n+\n+    private static final String MSG = \"must be less or equal to CodeEntryAlignment\";\n+\n+    private static List<String> cmdline(String[] args) {\n+        List<String> r = new ArrayList();\n+        r.addAll(Arrays.asList(args));\n+        r.add(\"compiler.arguments.TestOptoLoopAlignment\");\n+        r.add(\"run\");\n+        return r;\n+    }\n+\n+    public static void shouldFail(String... args) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(cmdline(args));\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldNotHaveExitValue(0);\n+        output.shouldContain(MSG);\n+    }\n+\n+    public static void shouldPass(String... args) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(cmdline(args));\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldNotContain(MSG);\n+    }\n+\n+    public static void driver() throws IOException {\n+        for (int align = 1; align < 64; align *= 2) {\n+            shouldPass(\n+                \"-XX:OptoLoopAlignment=\" + align\n+            );\n+        }\n+        for (int align = 64; align <= 128; align *= 2) {\n+            shouldFail(\n+                \"-XX:OptoLoopAlignment=\" + align\n+            );\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestOptoLoopAlignment.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}