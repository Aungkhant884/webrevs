{"files":[{"patch":"@@ -93,0 +93,2 @@\n+  } else if (strcmp(type, \"young-evac-fail\") == 0) {\n+    G1HeapVerifier::enable_verification_type(G1HeapVerifier::G1VerifyYoungEvacFail);\n@@ -101,1 +103,1 @@\n-                            \"young-normal, concurrent-start, mixed, remark, cleanup and full\", type);\n+                            \"young-normal, young-evac-fail, concurrent-start, mixed, remark, cleanup and full\", type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2845,0 +2845,3 @@\n+  if (evacuation_failed()) {\n+    type = (G1HeapVerifier::G1VerifyType)(type | G1HeapVerifier::G1VerifyYoungEvacFail);\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -470,1 +470,1 @@\n-  return (_enabled_verification_types & type) == type;\n+  return (_enabled_verification_types & type) != 0;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n-    G1VerifyRemark          =  8, \/\/ -XX:VerifyGCType=remark\n-    G1VerifyCleanup         = 16, \/\/ -XX:VerifyGCType=cleanup\n-    G1VerifyFull            = 32, \/\/ -XX:VerifyGCType=full\n+    G1VerifyYoungEvacFail   =  8, \/\/ -XX:VerifyGCType=young-evac-fail\n+    G1VerifyRemark          = 16, \/\/ -XX:VerifyGCType=remark\n+    G1VerifyCleanup         = 32, \/\/ -XX:VerifyGCType=cleanup\n+    G1VerifyFull            = 64, \/\/ -XX:VerifyGCType=full\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  ASSERT_TRUE(G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyAll));\n@@ -48,0 +47,1 @@\n+  ASSERT_TRUE(G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyYoungEvacFail));\n@@ -54,1 +54,0 @@\n-  ASSERT_FALSE(G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyAll));\n@@ -58,0 +57,1 @@\n+  ASSERT_FALSE(G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyYoungEvacFail));\n@@ -82,3 +82,0 @@\n-\n-  \/\/ Enabling all is not the same as G1VerifyAll\n-  ASSERT_FALSE(G1HeapVerifier::should_verify(G1HeapVerifier::G1VerifyAll));\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1HeapVerifier.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.test.lib.Platform;\n@@ -55,0 +56,3 @@\n+        if (Platform.isDebugBuild()) {\n+            testYoungEvacFail();\n+        }\n@@ -118,0 +122,20 @@\n+    private static void testYoungEvacFail() throws Exception {\n+        OutputAnalyzer output;\n+        output = testWithVerificationType(new String[] {\"young-evac-fail\"},\n+                                          new String[] {\"-XX:+G1EvacuationFailureALot\",\n+                                                        \"-XX:G1EvacuationFailureALotCount=100\",\n+                                                        \"-XX:G1EvacuationFailureALotInterval=1\",\n+                                                        \"-XX:+UnlockDiagnosticVMOptions\",\n+                                                        \"-XX:-G1AllowPreventiveGC\"});\n+        output.shouldHaveExitValue(0);\n+\n+        verifyCollection(\"Pause Young (Normal)\", false, false, true, output.getStdout());\n+        verifyCollection(\"Pause Young (Concurrent Start)\", false, false, true, output.getStdout());\n+        verifyCollection(\"Pause Young (Mixed)\", false, false, true, output.getStdout());\n+        verifyCollection(\"Pause Young (Prepare Mixed)\", false, false, true, output.getStdout());\n+        verifyCollection(\"Pause Remark\", false, false, false, output.getStdout());\n+        verifyCollection(\"Pause Cleanup\", false, false, false, output.getStdout());\n+        verifyCollection(\"Pause Full\", false, false, false, output.getStdout());\n+    }\n+\n+\n@@ -124,1 +148,1 @@\n-        output.shouldMatch(\"VerifyGCType: '.*' is unknown. Available types are: young-normal, concurrent-start, mixed, remark, cleanup and full\");\n+        output.shouldMatch(\"VerifyGCType: '.*' is unknown. Available types are: young-normal, young-evac-fail, concurrent-start, mixed, remark, cleanup and full\");\n@@ -134,1 +158,1 @@\n-    private static OutputAnalyzer testWithVerificationType(String[] types) throws Exception {\n+    private static OutputAnalyzer testWithVerificationType(String[] types, String... extraOpts) throws Exception {\n@@ -154,0 +178,2 @@\n+        Collections.addAll(basicOpts, extraOpts);\n+\n@@ -158,0 +184,1 @@\n+\n@@ -231,0 +258,3 @@\n+\n+        \/\/ This class triggers GCs; we need to make sure that in all of the young gcs\n+        \/\/ at least some objects survive so that evacuation failure can happen.\n@@ -244,0 +274,2 @@\n+\n+            used = alloc1M();\n@@ -245,0 +277,1 @@\n+            partialFree(used);\n@@ -252,0 +285,1 @@\n+            used = alloc1M();\n@@ -253,0 +287,3 @@\n+            partialFree(used);\n+\n+            used = alloc1M();\n@@ -254,0 +291,1 @@\n+            partialFree(used);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerifyGCType.java","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"}]}