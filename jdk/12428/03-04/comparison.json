{"files":[{"patch":"@@ -2266,1 +2266,1 @@\n-        if (!(min < max)) {\n+        if (!(min < max)) { \/\/ min greater than, equal to, or unordered with respect to max; NaN values are unordered\n@@ -2307,1 +2307,1 @@\n-        if (!(min < max)) {\n+        if (!(min < max)) { \/\/ min greater than, equal to, or unordered with respect to max; NaN values are unordered\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,16 +47,35 @@\n-        failures += checkIntClamp(0, 1, 2, 1);\n-        failures += checkIntClamp(0, 0, 2, 0);\n-        failures += checkIntClamp(1, 0, 2, 1);\n-        failures += checkIntClamp(2, 0, 2, 2);\n-        failures += checkIntClamp(3, 0, 2, 2);\n-        failures += checkIntClamp(0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0);\n-        failures += checkIntClamp(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE);\n-        failures += checkIntClamp(Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n-        failures += checkIntClamp(Long.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n-        failures += checkIntClamp(Long.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE);\n-        failures += checkIntClamp(0, 1, 1, 1);\n-        failures += checkIntClamp(Long.MAX_VALUE, 1, 1, 1);\n-        failures += checkIllegalArgumentException(\"clamp(1, 2, 0)\", () -> Math.clamp(1, 2, 0), () -> StrictMath.clamp(1, 2, 0));\n-        failures += checkIllegalArgumentException(\"clamp(1, Integer.MAX_VALUE, Integer.MIN_VALUE)\",\n-                () -> Math.clamp(1, Integer.MAX_VALUE, Integer.MIN_VALUE),\n-                () -> StrictMath.clamp(1, Integer.MAX_VALUE, Integer.MIN_VALUE));\n+        long[][] tests = {\n+                {0, 1, 2, 1},\n+                {0, 0, 2, 0},\n+                {1, 0, 2, 1},\n+                {2, 0, 2, 2},\n+                {3, 0, 2, 2},\n+                {0, Integer.MIN_VALUE, Integer.MAX_VALUE, 0},\n+                {Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE},\n+                {Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE},\n+                {Long.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE},\n+                {Long.MIN_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE},\n+                {0, 1, 1, 1},\n+                {Long.MAX_VALUE, 1, 1, 1}\n+        };\n+        long[][] exceptionTests = {\n+                {1, 2, 0},\n+                {1, Integer.MAX_VALUE, Integer.MIN_VALUE}\n+        };\n+        for (long[] test : tests) {\n+            long value = test[0];\n+            int min = Math.toIntExact(test[1]);\n+            int max = Math.toIntExact(test[2]);\n+            int expected = Math.toIntExact(test[3]);\n+            failures += checkEquals(\"(int) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected);\n+            failures += checkEquals(\"(int) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n+        }\n+        for (long[] test : exceptionTests) {\n+            long value = test[0];\n+            int min = Math.toIntExact(test[1]);\n+            int max = Math.toIntExact(test[2]);\n+            failures += checkIllegalArgumentException(\"(int) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> Math.clamp(value, min, max));\n+            failures += checkIllegalArgumentException(\"(int) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> StrictMath.clamp(value, min, max));\n+        }\n@@ -68,14 +87,33 @@\n-        failures += checkLongClamp(0L, 1L, 2L, 1L);\n-        failures += checkLongClamp(0L, 0L, 2L, 0L);\n-        failures += checkLongClamp(1L, 0L, 2L, 1L);\n-        failures += checkLongClamp(2L, 0L, 2L, 2L);\n-        failures += checkLongClamp(3L, 0L, 2L, 2L);\n-        failures += checkLongClamp(0L, Long.MIN_VALUE, Long.MAX_VALUE, 0);\n-        failures += checkLongClamp(Long.MIN_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE);\n-        failures += checkLongClamp(Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MAX_VALUE);\n-        failures += checkLongClamp(0, 1, 1, 1);\n-        failures += checkLongClamp(Long.MAX_VALUE, 1, 1, 1);\n-        failures += checkIllegalArgumentException(\"clamp(1, 2, 0)\", () -> Math.clamp(1L, 2L, 0L), () -> StrictMath.clamp(1L, 2L, 0L));\n-        failures += checkIllegalArgumentException(\"clamp(1, Long.MAX_VALUE, Long.MIN_VALUE)\",\n-                () -> Math.clamp(1, Long.MAX_VALUE, Long.MIN_VALUE),\n-                () -> StrictMath.clamp(1, Long.MAX_VALUE, Long.MIN_VALUE));\n+        long[][] tests = {\n+                {0L, 1L, 2L, 1L},\n+                {0L, 0L, 2L, 0L},\n+                {1L, 0L, 2L, 1L},\n+                {2L, 0L, 2L, 2L},\n+                {3L, 0L, 2L, 2L},\n+                {0L, Long.MIN_VALUE, Long.MAX_VALUE, 0},\n+                {Long.MIN_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE},\n+                {Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MAX_VALUE},\n+                {0, 1, 1, 1},\n+                {Long.MAX_VALUE, 1, 1, 1}\n+        };\n+        long[][] exceptionTests = {\n+                {1L, 2L, 0L},\n+                {1, Long.MAX_VALUE, Long.MIN_VALUE}\n+        };\n+        for (long[] test : tests) {\n+            long value = test[0];\n+            long min = test[1];\n+            long max = test[2];\n+            long expected = test[3];\n+            failures += checkEquals(\"(long) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected);\n+            failures += checkEquals(\"(long) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n+        }\n+        for (long[] test : exceptionTests) {\n+            long value = test[0];\n+            long min = test[1];\n+            long max = test[2];\n+            failures += checkIllegalArgumentException(\"(long) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> Math.clamp(value, min, max));\n+            failures += checkIllegalArgumentException(\"(long) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> StrictMath.clamp(value, min, max));\n+        }\n@@ -87,37 +125,54 @@\n-        failures += checkDoubleClamp(-0.1, 0.0, 0.5, 0.0);\n-        failures += checkDoubleClamp(-0.0, 0.0, 0.5, 0.0);\n-        failures += checkDoubleClamp(0.0, 0.0, 0.5, 0.0);\n-        failures += checkDoubleClamp(Double.MIN_VALUE, 0.0, 0.5, Double.MIN_VALUE);\n-        failures += checkDoubleClamp(0.2, 0.0, 0.5, 0.2);\n-        failures += checkDoubleClamp(Math.nextDown(0.5), 0.0, 0.5, Math.nextDown(0.5));\n-        failures += checkDoubleClamp(0.5, 0.0, 0.5, 0.5);\n-        failures += checkDoubleClamp(Math.nextUp(0.5), 0.0, 0.5, 0.5);\n-        failures += checkDoubleClamp(0.6, 0.0, 0.5, 0.5);\n-\n-        failures += checkDoubleClamp(Double.MAX_VALUE, 0.0, Double.POSITIVE_INFINITY, Double.MAX_VALUE);\n-        failures += checkDoubleClamp(Double.POSITIVE_INFINITY, 0.0, Double.MAX_VALUE, Double.MAX_VALUE);\n-        failures += checkDoubleClamp(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 0.0, -Double.MAX_VALUE);\n-        failures += checkDoubleClamp(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE, 0.0, -Double.MAX_VALUE);\n-\n-        failures += checkDoubleClamp(-1.0, -0.0, 0.0, -0.0);\n-        failures += checkDoubleClamp(-0.0, -0.0, 0.0, -0.0);\n-        failures += checkDoubleClamp(0.0, -0.0, 0.0, 0.0);\n-        failures += checkDoubleClamp(1.0, -0.0, 0.0, 0.0);\n-        failures += checkDoubleClamp(-1.0, 0.0, 0.0, 0.0);\n-        failures += checkDoubleClamp(-0.0, 0.0, 0.0, 0.0);\n-        failures += checkDoubleClamp(0.0, 0.0, 0.0, 0.0);\n-        failures += checkDoubleClamp(1.0, 0.0, 0.0, 0.0);\n-\n-        failures += checkDoubleClamp(Double.NaN, 0.0, 1.0, Double.NaN);\n-        failures += checkDoubleClamp(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN);\n-\n-        failures += checkIllegalArgumentException(\"clamp(0.0, NaN, NaN)\", () -> Math.clamp(0.0, Double.NaN, Double.NaN),\n-                () -> StrictMath.clamp(0.0, Double.NaN, Double.NaN));\n-        failures += checkIllegalArgumentException(\"clamp(0.0, 0.0, NaN)\", () -> Math.clamp(0.0, 0.0, Double.NaN),\n-                () -> StrictMath.clamp(0.0, 0.0, Double.NaN));\n-        failures += checkIllegalArgumentException(\"clamp(0.0, NaN, 0.0)\", () -> Math.clamp(0.0, Double.NaN, 0.0),\n-                () -> StrictMath.clamp(0.0, Double.NaN, 0.0));\n-        failures += checkIllegalArgumentException(\"clamp(NaN, 1.0, 0.0)\", () -> Math.clamp(Double.NaN, 1.0, 0.0),\n-                () -> StrictMath.clamp(Double.NaN, 1.0, 0.0));\n-        failures += checkIllegalArgumentException(\"clamp(0.0, 0.0, -0.0)\", () -> Math.clamp(0.0, 0.0, -0.0),\n-                () -> StrictMath.clamp(0.0, 0.0, -0.0));\n+        double[][] tests = {\n+                \/\/ value, min, max, expected\n+                {-0.1, 0.0, 0.5, 0.0},\n+                {-0.0, 0.0, 0.5, 0.0},\n+                {0.0, 0.0, 0.5, 0.0},\n+                {Double.MIN_VALUE, 0.0, 0.5, Double.MIN_VALUE},\n+                {0.2, 0.0, 0.5, 0.2},\n+                {Math.nextDown(0.5), 0.0, 0.5, Math.nextDown(0.5)},\n+                {0.5, 0.0, 0.5, 0.5},\n+                {Math.nextUp(0.5), 0.0, 0.5, 0.5},\n+                {0.6, 0.0, 0.5, 0.5},\n+\n+                {Double.MAX_VALUE, 0.0, Double.POSITIVE_INFINITY, Double.MAX_VALUE},\n+                {Double.POSITIVE_INFINITY, 0.0, Double.MAX_VALUE, Double.MAX_VALUE},\n+                {-Double.MAX_VALUE, Double.NEGATIVE_INFINITY, 0.0, -Double.MAX_VALUE},\n+                {Double.NEGATIVE_INFINITY, -Double.MAX_VALUE, 0.0, -Double.MAX_VALUE},\n+\n+                {-1.0, -0.0, 0.0, -0.0},\n+                {-0.0, -0.0, 0.0, -0.0},\n+                {0.0, -0.0, 0.0, 0.0},\n+                {1.0, -0.0, 0.0, 0.0},\n+                {-1.0, 0.0, 0.0, 0.0},\n+                {-0.0, 0.0, 0.0, 0.0},\n+                {0.0, 0.0, 0.0, 0.0},\n+                {1.0, 0.0, 0.0, 0.0},\n+\n+                {Double.NaN, 0.0, 1.0, Double.NaN},\n+                {Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN}\n+        };\n+        double[][] exceptionTests = {\n+                \/\/ value, min, max\n+                {0.0, Double.NaN, Double.NaN},\n+                {0.0, 0.0, Double.NaN},\n+                {0.0, Double.NaN, 0.0},\n+                {Double.NaN, 1.0, 0.0},\n+                {0.0, 0.0, -0.0}\n+        };\n+        for (double[] test : tests) {\n+            double value = test[0];\n+            double min = test[1];\n+            double max = test[2];\n+            double expected = test[3];\n+            failures += checkEquals(\"(double) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected);\n+            failures += checkEquals(\"(double) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n+        }\n+        for (double[] test : exceptionTests) {\n+            double value = test[0];\n+            double min = test[1];\n+            double max = test[2];\n+            failures += checkIllegalArgumentException(\"(double) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> Math.clamp(value, min, max));\n+            failures += checkIllegalArgumentException(\"(double) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\",\n+                    () -> StrictMath.clamp(value, min, max));\n+        }\n@@ -129,39 +184,11 @@\n-        failures += checkFloatClamp(-0.1f, 0.0f, 0.5f, 0.0f);\n-        failures += checkFloatClamp(-0.0f, 0.0f, 0.5f, 0.0f);\n-        failures += checkFloatClamp(0.0f, 0.0f, 0.5f, 0.0f);\n-        failures += checkFloatClamp(Float.MIN_VALUE, 0.0f, 0.5f, Float.MIN_VALUE);\n-        failures += checkFloatClamp(0.2f, 0.0f, 0.5f, 0.2f);\n-        failures += checkFloatClamp(Math.nextDown(0.5f), 0.0f, 0.5f, Math.nextDown(0.5f));\n-        failures += checkFloatClamp(0.5f, 0.0f, 0.5f, 0.5f);\n-        failures += checkFloatClamp(Math.nextUp(0.5f), 0.0f, 0.5f, 0.5f);\n-        failures += checkFloatClamp(0.6f, 0.0f, 0.5f, 0.5f);\n-\n-        failures += checkFloatClamp(Float.MAX_VALUE, 0.0f, Float.POSITIVE_INFINITY, Float.MAX_VALUE);\n-        failures += checkFloatClamp(Float.POSITIVE_INFINITY, 0.0f, Float.MAX_VALUE, Float.MAX_VALUE);\n-        failures += checkFloatClamp(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 0.0f, -Float.MAX_VALUE);\n-        failures += checkFloatClamp(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE, 0.0f, -Float.MAX_VALUE);\n-\n-        failures += checkFloatClamp(-1.0f, -0.0f, 0.0f, -0.0f);\n-        failures += checkFloatClamp(-0.0f, -0.0f, 0.0f, -0.0f);\n-        failures += checkFloatClamp(0.0f, -0.0f, 0.0f, 0.0f);\n-        failures += checkFloatClamp(1.0f, -0.0f, 0.0f, 0.0f);\n-        failures += checkFloatClamp(-1.0f, 0.0f, 0.0f, 0.0f);\n-        failures += checkFloatClamp(-0.0f, 0.0f, 0.0f, 0.0f);\n-        failures += checkFloatClamp(0.0f, 0.0f, 0.0f, 0.0f);\n-        failures += checkFloatClamp(1.0f, 0.0f, 0.0f, 0.0f);\n-\n-        failures += checkFloatClamp(Float.NaN, 0.0f, 1.0f, Float.NaN);\n-        failures += checkFloatClamp(Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN);\n-\n-        failures += checkIllegalArgumentException(\"clamp(0.0f, NaN, NaN)\", () -> Math.clamp(0.0f, Float.NaN, Float.NaN),\n-                () -> StrictMath.clamp(0.0f, Float.NaN, Float.NaN));\n-        failures += checkIllegalArgumentException(\"clamp(0.0f, 0.0f, NaN)\", () -> Math.clamp(0.0f, 0.0f, Float.NaN),\n-                () -> StrictMath.clamp(0.0f, 0.0f, Float.NaN));\n-        failures += checkIllegalArgumentException(\"clamp(0.0f, NaN, 0.0f)\", () -> Math.clamp(0.0f, Float.NaN, 0.0f),\n-                () -> StrictMath.clamp(0.0f, Float.NaN, 0.0f));\n-        failures += checkIllegalArgumentException(\"clamp(NaN, 1.0f, 0.0f)\", () -> Math.clamp(Float.NaN, 1.0f, 0.0f),\n-                () -> StrictMath.clamp(Float.NaN, 1.0f, 0.0f));\n-        failures += checkIllegalArgumentException(\"clamp(0.0f, 0.0f, -0.0f)\", () -> Math.clamp(0.0f, 0.0f, -0.0f),\n-                () -> StrictMath.clamp(0.0f, 0.0f, -0.0f));\n-        return failures;\n-    }\n+        float[][] tests = {\n+                \/\/ value, min, max, expected\n+                {-0.1f, 0.0f, 0.5f, 0.0f},\n+                {-0.0f, 0.0f, 0.5f, 0.0f},\n+                {0.0f, 0.0f, 0.5f, 0.0f},\n+                {Float.MIN_VALUE, 0.0f, 0.5f, Float.MIN_VALUE},\n+                {0.2f, 0.0f, 0.5f, 0.2f},\n+                {Math.nextDown(0.5f), 0.0f, 0.5f, Math.nextDown(0.5f)},\n+                {0.5f, 0.0f, 0.5f, 0.5f},\n+                {Math.nextUp(0.5f), 0.0f, 0.5f, 0.5f},\n+                {0.6f, 0.0f, 0.5f, 0.5f},\n@@ -169,4 +196,4 @@\n-    private static int checkIntClamp(long value, int min, int max, int expected) {\n-        return checkEquals(\"Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected) +\n-            checkEquals(\"StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n-    }\n+                {Float.MAX_VALUE, 0.0f, Float.POSITIVE_INFINITY, Float.MAX_VALUE},\n+                {Float.POSITIVE_INFINITY, 0.0f, Float.MAX_VALUE, Float.MAX_VALUE},\n+                {-Float.MAX_VALUE, Float.NEGATIVE_INFINITY, 0.0f, -Float.MAX_VALUE},\n+                {Float.NEGATIVE_INFINITY, -Float.MAX_VALUE, 0.0f, -Float.MAX_VALUE},\n@@ -174,4 +201,8 @@\n-    private static int checkLongClamp(long value, long min, long max, long expected) {\n-        return checkEquals(\"Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected) +\n-            checkEquals(\"StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n-    }\n+                {-1.0f, -0.0f, 0.0f, -0.0f},\n+                {-0.0f, -0.0f, 0.0f, -0.0f},\n+                {0.0f, -0.0f, 0.0f, 0.0f},\n+                {1.0f, -0.0f, 0.0f, 0.0f},\n+                {-1.0f, 0.0f, 0.0f, 0.0f},\n+                {-0.0f, 0.0f, 0.0f, 0.0f},\n+                {0.0f, 0.0f, 0.0f, 0.0f},\n+                {1.0f, 0.0f, 0.0f, 0.0f},\n@@ -179,8 +210,29 @@\n-    private static int checkFloatClamp(float value, float min, float max, float expected) {\n-        return checkEquals(\"Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected) +\n-            checkEquals(\"StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n-    }\n-\n-    private static int checkDoubleClamp(double value, double min, double max, double expected) {\n-        return checkEquals(\"Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected) +\n-            checkEquals(\"StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n+                {Float.NaN, 0.0f, 1.0f, Float.NaN},\n+                {Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN}\n+        };\n+        float[][] exceptionTests = {\n+                \/\/ value, min, max\n+                {0.0f, Float.NaN, Float.NaN},\n+                {0.0f, 0.0f, Float.NaN},\n+                {0.0f, Float.NaN, 0.0f},\n+                {Float.NaN, 1.0f, 0.0f},\n+                {0.0f, 0.0f, -0.0f}\n+        };\n+        for (float[] test : tests) {\n+            float value = test[0];\n+            float min = test[1];\n+            float max = test[2];\n+            float expected = test[3];\n+            failures += checkEquals(\"(float) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", Math.clamp(value, min, max), expected);\n+            failures += checkEquals(\"(float) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", StrictMath.clamp(value, min, max), expected);\n+        }\n+        for (float[] test : exceptionTests) {\n+            float value = test[0];\n+            float min = test[1];\n+            float max = test[2];\n+            failures += checkIllegalArgumentException(\"(float) Math.clamp(\" + value + \", \" + min + \", \" + max + \")\", \n+                    () -> Math.clamp(value, min, max));\n+            failures += checkIllegalArgumentException(\"(float) StrictMath.clamp(\" + value + \", \" + min + \", \" + max + \")\", \n+                    () -> StrictMath.clamp(value, min, max));\n+        }\n+        return failures;\n@@ -189,11 +241,3 @@\n-    private static int checkIllegalArgumentException(String what, Runnable... runnables) {\n-        int failures = 0;\n-        for (Runnable runnable : runnables) {\n-            try {\n-                runnable.run();\n-            }\n-            catch (IllegalArgumentException ex) {\n-                continue;\n-            }\n-            System.err.println(what+\": missing expected exception\");\n-            failures++;\n+    private static int checkIllegalArgumentException(String what, Runnable r) {\n+        try {\n+            r.run();\n@@ -201,1 +245,5 @@\n-        return failures;\n+        catch (IllegalArgumentException ex) {\n+            return 0;\n+        }\n+        System.err.println(what+\": missing expected exception\");\n+        return 1;\n","filename":"test\/jdk\/java\/lang\/Math\/Clamp.java","additions":182,"deletions":134,"binary":false,"changes":316,"status":"modified"}]}