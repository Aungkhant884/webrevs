{"files":[{"patch":"@@ -892,2 +892,0 @@\n-com\/sun\/jndi\/ldap\/DeadSSLLdapTimeoutTest.java                   8169942 linux-i586,macosx-all,windows-x64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,1 +34,3 @@\n-import java.util.Properties;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n@@ -39,0 +42,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -57,1 +62,7 @@\n-        ServerSocket serverSock = new ServerSocket(serverPort);\n+        \/\/ Create unbound server socket\n+        ServerSocket serverSock = new ServerSocket();\n+\n+        \/\/ And bind it to the loopback address\n+        SocketAddress sockAddr = new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0);\n+        serverSock.bind(sockAddr);\n@@ -109,1 +120,7 @@\n-        env.put(Context.PROVIDER_URL, \"ldap:\/\/localhost:\" + serverPort);\n+        \/\/ Construct the provider URL\n+        String providerURL = URIBuilder.newBuilder()\n+                .scheme(\"ldap\")\n+                .loopback()\n+                .port(serverPort)\n+                .build().toString();\n+        env.put(Context.PROVIDER_URL, providerURL);\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/BalancedParentheses.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -26,1 +26,0 @@\n- * @run main\/othervm DeadSSLLdapTimeoutTest\n@@ -29,0 +28,2 @@\n+ * @library \/test\/lib\n+ * @run main\/othervm DeadSSLLdapTimeoutTest\n@@ -31,1 +32,4 @@\n-import java.net.Socket;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -33,0 +37,1 @@\n+import java.net.SocketAddress;\n@@ -34,4 +39,3 @@\n-import java.io.*;\n-import javax.naming.*;\n-import javax.naming.directory.*;\n-import java.util.List;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n@@ -39,1 +43,0 @@\n-import java.util.ArrayList;\n@@ -41,8 +44,2 @@\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.CountDownLatch;\n+import javax.naming.directory.InitialDirContext;\n@@ -51,1 +48,2 @@\n-import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -60,1 +58,0 @@\n-    private int HANGING_TEST_TIMEOUT = 20_000;\n@@ -63,1 +60,3 @@\n-        this.server = new DeadSSLServer();\n+        SocketAddress sockAddr = new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0);\n+        this.server = new DeadSSLServer(sockAddr);\n@@ -67,3 +66,1 @@\n-    public void performOp(InitialContext ctx) throws NamingException {}\n-\n-    public void handleNamingException(NamingException e, long start, long end) {\n+    public void handleNamingException(NamingException e) {\n@@ -74,1 +71,1 @@\n-            e.printStackTrace();\n+            System.err.println(\"PASS: Observed expected SocketTimeoutException\");\n@@ -80,0 +77,1 @@\n+            System.err.println(\"PASS: Observed expected SSLHandshakeException\/EOFException\");\n@@ -95,0 +93,1 @@\n+        System.err.println(\"FAIL: Unexpected exception was observed:\" + e.getMessage());\n@@ -109,2 +108,0 @@\n-        ScheduledFuture<?> killer = null;\n-        long start = System.nanoTime();\n@@ -113,2 +110,1 @@\n-            while(!server.accepting())\n-                Thread.sleep(200); \/\/ allow the server to start up\n+            server.serverStarted.await(); \/\/ Wait for the server to start-up\n@@ -117,2 +113,7 @@\n-            env.put(Context.PROVIDER_URL, \"ldap:\/\/localhost:\" +\n-                    server.getLocalPort());\n+            env.put(Context.PROVIDER_URL,\n+                    URIBuilder.newBuilder()\n+                            .scheme(\"ldap\")\n+                            .loopback()\n+                            .port(server.getLocalPort())\n+                            .buildUnchecked().toString()\n+            );\n@@ -120,0 +121,1 @@\n+            long start = System.nanoTime();\n@@ -122,1 +124,0 @@\n-                performOp(ctx);\n@@ -128,1 +129,1 @@\n-                handleNamingException(e, start, end);\n+                handleNamingException(e);\n@@ -130,2 +131,2 @@\n-                if (killer != null && !killer.isDone())\n-                    killer.cancel(true);\n+                \/\/ Stop the server side thread\n+                server.testDone.countDown();\n@@ -144,4 +145,12 @@\n-    boolean accepting = false;\n-\n-    public DeadSSLServer() throws IOException {\n-        this.serverSock = new ServerSocket(0);\n+    \/\/ Latch to be used by client to wait for server to start\n+    CountDownLatch serverStarted = new CountDownLatch(1);\n+\n+    \/\/ Latch to be used by server thread to wait for client to finish testing\n+    CountDownLatch testDone = new CountDownLatch(1);\n+\n+    public DeadSSLServer(SocketAddress socketAddress) throws IOException {\n+        \/\/ create unbound server socket\n+        var srvSock = new ServerSocket();\n+        \/\/ bind it to the address provided\n+        srvSock.bind(socketAddress);\n+        this.serverSock = srvSock;\n@@ -152,7 +161,10 @@\n-        while(true) {\n-            try {\n-                accepting = true;\n-                Socket socket = serverSock.accept();\n-            } catch (Exception e) {\n-                break;\n-            }\n+        \/\/ Signal client to proceed with the test\n+        serverStarted.countDown();\n+        try (var socket = serverSock.accept()) {\n+            System.err.println(\"Accepted connection:\" + socket);\n+            \/\/ Give LDAP client time to fully establish the connection.\n+            \/\/ When client is done - close the accepted socket\n+            testDone.await();\n+        } catch (Exception e) {\n+            System.err.println(\"Server socket. Failure to accept connection:\");\n+            e.printStackTrace();\n@@ -166,4 +178,0 @@\n-    public boolean accepting() {\n-        return accepting;\n-    }\n-\n@@ -176,0 +184,5 @@\n+    \/\/ com.sun.jndi.ldap.connect.timeout value to set\n+    static final String CONNECT_TIMEOUT_MS = \"10\";\n+\n+    \/\/ com.sun.jndi.ldap.read.timeout value to set\n+    static final String READ_TIMEOUT_MS = \"3000\";\n@@ -180,1 +193,1 @@\n-            \"com.sun.jndi.ldap.LdapCtxFactory\");\n+                \"com.sun.jndi.ldap.LdapCtxFactory\");\n@@ -185,3 +198,0 @@\n-\n-        InitialContext ctx = null;\n-\n@@ -196,1 +206,4 @@\n-        System.out.println(\"Running connect timeout test with 10ms connect timeout, 3000ms read timeout & SSL\");\n+        System.out.printf(\"Running connect timeout test with %sms connect timeout,\" +\n+                          \" %sms read timeout & SSL%n\",\n+                          CONNECT_TIMEOUT_MS, READ_TIMEOUT_MS);\n+\n@@ -198,2 +211,2 @@\n-        sslenv.put(\"com.sun.jndi.ldap.connect.timeout\", \"10\");\n-        sslenv.put(\"com.sun.jndi.ldap.read.timeout\", \"3000\");\n+        sslenv.put(\"com.sun.jndi.ldap.connect.timeout\", CONNECT_TIMEOUT_MS);\n+        sslenv.put(\"com.sun.jndi.ldap.read.timeout\", READ_TIMEOUT_MS);\n@@ -201,2 +214,1 @@\n-        boolean testFailed =\n-            (new DeadServerTimeoutSSLTest(sslenv).call()) ? false : true;\n+        boolean testFailed = !new DeadServerTimeoutSSLTest(sslenv).call();\n@@ -207,1 +219,0 @@\n-\n@@ -209,1 +220,0 @@\n-\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/DeadSSLLdapTimeoutTest.java","additions":69,"deletions":59,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library ..\/..\/lib\/ \/javax\/naming\/module\/src\/test\/test\/\n+ * @library \/test\/lib ..\/..\/lib\/ \/javax\/naming\/module\/src\/test\/test\/\n@@ -44,0 +44,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -45,0 +47,1 @@\n+import java.net.SocketAddress;\n@@ -46,0 +49,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -50,1 +54,14 @@\n-        ServerSocket serverSocket = new ServerSocket(0);\n+        \/\/ Create unbound server socket\n+        ServerSocket serverSocket = new ServerSocket();\n+\n+        \/\/ Bind it to the loopback address\n+        SocketAddress sockAddr = new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0);\n+        serverSocket.bind(sockAddr);\n+\n+        \/\/ Construct the provider URL for LDAPTestUtils\n+        String providerURL = URIBuilder.newBuilder()\n+                .scheme(\"ldap\")\n+                .loopback()\n+                .port(serverSocket.getLocalPort())\n+                .buildUnchecked().toString();\n@@ -55,2 +72,2 @@\n-        env = LDAPTestUtils\n-                .initEnv(serverSocket, AddNewEntry.class.getName(), args, true);\n+        env = LDAPTestUtils.initEnv(serverSocket, providerURL,\n+                         AddNewEntry.class.getName(), args, true);\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/blits\/AddTests\/AddNewEntry.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-            String[] args) {\n+                                                    String[] args) {\n@@ -58,1 +58,6 @@\n-            String testname, String[] args, boolean authInfo) {\n+                                                    String testname, String[] args, boolean authInfo) {\n+        return initEnv(socket, null, testname, args, authInfo);\n+    }\n+\n+    public static Hashtable<Object, Object> initEnv(ServerSocket socket, String providerUrl,\n+                                                    String testname, String[] args, boolean authInfo) {\n@@ -106,2 +111,3 @@\n-                env.put(\"java.naming.provider.url\",\n-                        \"ldap:\/\/localhost:\" + socket.getLocalPort());\n+                String url = providerUrl != null ? providerUrl :\n+                        \"ldap:\/\/localhost:\" + socket.getLocalPort();\n+                env.put(\"java.naming.provider.url\", url);\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/lib\/LDAPTestUtils.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}