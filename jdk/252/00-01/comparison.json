{"files":[{"patch":"@@ -29,0 +29,1 @@\n+ * @build DeadSSLSocketFactory\n@@ -37,0 +38,1 @@\n+import java.net.Socket;\n@@ -45,0 +47,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -71,1 +74,1 @@\n-            System.err.println(\"PASS: Observed expected SocketTimeoutException\");\n+            System.out.println(\"PASS: Observed expected SocketTimeoutException\");\n@@ -77,1 +80,1 @@\n-            System.err.println(\"PASS: Observed expected SSLHandshakeException\/EOFException\");\n+            System.out.println(\"PASS: Observed expected SSLHandshakeException\/EOFException\");\n@@ -137,1 +140,1 @@\n-        } catch (IOException|InterruptedException e) {\n+        } catch (IOException | InterruptedException e) {\n@@ -163,8 +166,46 @@\n-        try (var socket = serverSock.accept()) {\n-            System.err.println(\"Accepted connection:\" + socket);\n-            \/\/ Give LDAP client time to fully establish the connection.\n-            \/\/ When client is done - close the accepted socket\n-            testDone.await();\n-        } catch (Exception e) {\n-            System.err.println(\"Server socket. Failure to accept connection:\");\n-            e.printStackTrace();\n+        while (true) {\n+            try (var acceptedSocket = serverSock.accept()) {\n+                System.err.println(\"Accepted connection:\" + acceptedSocket);\n+                int iteration = 0;\n+                \/\/ Wait for socket to get opened by DeadSSLSocketFactory and connected to the test server\n+                while (iteration++ < 20) {\n+                    if (DeadSSLSocketFactory.firstCreatedSocket.get() != null &&\n+                        DeadSSLSocketFactory.firstCreatedSocket.get().isConnected()) {\n+                        break;\n+                    }\n+                    try {\n+                        TimeUnit.MILLISECONDS.sleep(50);\n+                    } catch (InterruptedException ie) {\n+                    }\n+                }\n+                Socket clientSideSocket = DeadSSLSocketFactory.firstCreatedSocket.get();\n+                System.err.printf(\"Got SSLSocketFactory connection after %d iterations: %s%n\",\n+                        iteration, clientSideSocket);\n+\n+                if (clientSideSocket == null || !clientSideSocket.isConnected()) {\n+                    \/\/ If after 1000 ms client side connection is not opened - probably other local process\n+                    \/\/ tried to connect to the test server socket. Close current connection and retry accept.\n+                    continue;\n+                } else {\n+                    \/\/ Check if accepted socket is connected to the LDAP client\n+                    if (acceptedSocket.getLocalPort() == clientSideSocket.getPort() &&\n+                            acceptedSocket.getPort() == clientSideSocket.getLocalPort() &&\n+                            acceptedSocket.getInetAddress().equals(clientSideSocket.getLocalAddress())) {\n+                        System.err.println(\"Accepted connection is originated from LDAP client:\" + acceptedSocket);\n+                        try {\n+                            \/\/ Give LDAP client time to fully establish the connection.\n+                            \/\/ When client is done - the accepted socket will be closed\n+                            testDone.await();\n+                        } catch (InterruptedException e) {\n+                        }\n+                        break;\n+                    } else {\n+                        \/\/ If accepted socket is not from the LDAP client - the accepted connection will be closed and new\n+                        \/\/ one will be accepted\n+                        System.err.println(\"SSLSocketFactory connection has been established, but originated not from\" +\n+                                \" the test's LDAP client:\" + acceptedSocket);\n+                    }\n+                }\n+            } catch (Exception e) {\n+                System.err.println(\"Server socket. Failure to accept connection:\" + e.getMessage());\n+            }\n@@ -211,0 +252,1 @@\n+        \/\/ Setup connect timeout environment property\n@@ -212,0 +254,1 @@\n+        \/\/ Setup read timeout environment property\n@@ -213,0 +256,3 @@\n+        \/\/ Setup DeadSSLSocketFactory to track the client's first LDAP connection\n+        sslenv.put(\"java.naming.ldap.factory.socket\", \"DeadSSLSocketFactory\");\n+        \/\/ Use SSL protocol\n@@ -214,1 +260,0 @@\n-        boolean testFailed = !new DeadServerTimeoutSSLTest(sslenv).call();\n@@ -216,0 +261,1 @@\n+        boolean testFailed = !new DeadServerTimeoutSSLTest(sslenv).call();\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/DeadSSLLdapTimeoutTest.java","additions":58,"deletions":12,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/*\n+ * A custom socket factory used to override the default socket factory and track the LDAP client connection.\n+ * Factory can create only one SSLSocket. See the DeadServerTimeoutSSLTest test.\n+ *\/\n+public class DeadSSLSocketFactory extends SocketFactory {\n+    \/\/ Client socket that is used by LDAP connection\n+    public static AtomicReference<SSLSocket> firstCreatedSocket = new AtomicReference<>();\n+\n+    \/\/ Boolean to track if connection socket has been opened\n+    public static AtomicBoolean isConnectionOpened = new AtomicBoolean(false);\n+\n+    \/\/ Default SSLSocketFactory that will be used for SSL socket creation\n+    final SSLSocketFactory factory = (SSLSocketFactory)SSLSocketFactory.getDefault();\n+\n+    \/\/ Create unconnected socket\n+    public Socket createSocket() throws IOException {\n+        if (!isConnectionOpened.getAndSet(true)) {\n+            System.err.println(\"DeadSSLSocketFactory: Creating unconnected socket\");\n+            firstCreatedSocket.set((SSLSocket) factory.createSocket());\n+            return firstCreatedSocket.get();\n+        } else {\n+            throw new RuntimeException(\"DeadSSLSocketFactory only allows creation of one SSL socket\");\n+        }\n+    }\n+\n+    public DeadSSLSocketFactory() {\n+        System.err.println(\"DeadSSLSocketFactory: Constructor call\");\n+    }\n+\n+    public static SocketFactory getDefault() {\n+        System.err.println(\"DeadSSLSocketFactory: acquiring DeadSSLSocketFactory as default socket factory\");\n+        return new DeadSSLSocketFactory();\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port) throws IOException {\n+        \/\/ Not used by DeadSSLLdapTimeoutTest\n+        return factory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(String host, int port, InetAddress localHost,\n+                               int localPort) throws IOException {\n+        \/\/ Not used by DeadSSLLdapTimeoutTest\n+        return factory.createSocket(host, port, localHost, localPort);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress host, int port) throws IOException {\n+        \/\/ Not used by DeadSSLLdapTimeoutTest\n+        return factory.createSocket(host, port);\n+    }\n+\n+    @Override\n+    public Socket createSocket(InetAddress address, int port,\n+                               InetAddress localAddress, int localPort) throws IOException {\n+        \/\/ Not used by DeadSSLLdapTimeoutTest\n+        return factory.createSocket(address, port, localAddress, localPort);\n+    }\n+}\n+\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/DeadSSLSocketFactory.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}