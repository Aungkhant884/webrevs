[{"commit":{"message":"Use uabs() to calculate the absolute value of constant\n\nChange-Id: Ie6f37ab159fb7092e1443b9af8d620562a45ae47"},"files":[{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"}],"sha":"e254d9f7ebf5b4b10669a5969077091bca8aeb2d"},{"commit":{"message":"Add a jmh benchmark case\n\nChange-Id: I64938d543126c2e3f9fad8ffc4a50e25e4473d8f"},"files":[{"filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java"}],"sha":"2d122a2d096530962719541966f06821929b01d1"},{"commit":{"message":"Merge branch 'master' of github.com:fg1417\/jdk into fg8276673\n\nChange-Id: I71987594e9288a489a04de696e69a62f4ad19357"},"files":[],"sha":"e5b02a6ddeeb52283a2c8c20cdc3c74a429c2f89"},{"commit":{"message":"Merge branch 'master' into fg8276673\n\nChange-Id: I5e3898054b75f49653b8c3b37e4f5007675fa963"},"files":[{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/subnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/type.hpp"}],"sha":"e28d72d46c3a5e040e21654bd67db70d88ab30e0"},{"commit":{"message":"8276673: Optimize abs operations in C2 compiler\n\nThe patch aims to help optimize Math.abs() mainly from these three parts:\n1) Remove redundant instructions for abs with constant values\n2) Remove redundant instructions for abs with char type\n3) Convert some common abs operations to ideal forms\n\n1. Remove redundant instructions for abs with constant values\n\nIf we can decide the value of the input node for function Math.abs()\nat compile-time, we can substitute the Abs node with the absolute\nvalue of the constant and don't have to calculate it at runtime.\n\nFor example,\n  int[] a\n  for (int i = 0; i < SIZE; i++) {\n    a[i] = Math.abs(-38);\n  }\n\nBefore the patch, the generated code for the testcase above is:\n...\n  mov   w10, #0xffffffda\n  cmp   w10, wzr\n  cneg  w17, w10, lt\n  dup   v16.8h, w17\n...\nAfter the patch, the generated code for the testcase above is :\n...\n  movi  v16.4s, #0x26\n...\n\n2. Remove redundant instructions for abs with char type\n\nIn Java semantics, as the char type is always non-negative, we\ncould actually remove the absI node in the C2 middle end.\n\nAs for vectorization part, in current SLP, the vectorization of\nMath.abs() with char type is intentionally disabled after\nJDK-8261022 because it generates incorrect result before. After\nremoving the AbsI node in the middle end, Math.abs(char) can be\nvectorized naturally.\n\nFor example,\n\n  char[] a;\n  char[] b;\n  for (int i = 0; i < SIZE; i++) {\n    b[i] = (char) Math.abs(a[i]);\n  }\n\nBefore the patch, the generated assembly code for the testcase\nabove is:\n\nB15:\n  add   x13, x21, w20, sxtw #1\n  ldrh  w11, [x13, #16]\n  cmp   w11, wzr\n  cneg  w10, w11, lt\n  strh  w10, [x13, #16]\n  ldrh  w10, [x13, #18]\n  cmp   w10, wzr\n  cneg  w10, w10, lt\n  strh  w10, [x13, #18]\n  ...\n  add   w20, w20, #0x1\n  cmp   w20, w17\n  b.lt  B15\n\nAfter the patch, the generated assembly code is:\nB15:\n  sbfiz x18, x19, #1, #32\n  add   x0, x14, x18\n  ldr   q16, [x0, #16]\n  add   x18, x21, x18\n  str   q16, [x18, #16]\n  ldr   q16, [x0, #32]\n  str   q16, [x18, #32]\n  ...\n  add   w19, w19, #0x40\n  cmp   w19, w17\n  b.lt  B15\n\n3. Convert some common abs operations to ideal forms\n\nThe patch overrides some virtual support functions for AbsNode\nso that optimization of gvn can work on it. Here are the optimizable\nforms:\n\na) abs(0 - x) => abs(x)\n\nBefore the patch:\n  ...\n  ldr   w13, [x13, #16]\n  neg   w13, w13\n  cmp   w13, wzr\n  cneg  w14, w13, lt\n  ...\nAfter the patch:\n  ...\n  ldr   w13, [x13, #16]\n  cmp   w13, wzr\n  cneg  w13, w13, lt\n  ...\n\nb) abs(abs(x))  => abs(x)\n\nBefore the patch:\n  ...\n  ldr   w12, [x12, #16]\n  cmp   w12, wzr\n  cneg  w12, w12, lt\n  cmp   w12, wzr\n  cneg  w12, w12, lt\n  ...\nAfter the patch:\n  ...\n  ldr   w13, [x13, #16]\n  cmp   w13, wzr\n  cneg  w13, w13, lt\n  ...\n\nChange-Id: I5434c01a225796caaf07ffbb19983f4fe2e206bd"},"files":[{"filename":"src\/hotspot\/share\/opto\/subnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/subnode.hpp"},{"filename":"src\/hotspot\/share\/opto\/type.hpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestAbs.java"}],"sha":"563fbde8b9ae1d849829be3c114bbfd8ddc4eb45"}]