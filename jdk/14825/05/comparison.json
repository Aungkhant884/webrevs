{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -807,1 +807,1 @@\n-        checkIfOnNewScreen(toGlobal(new Rectangle(scaleDown(xe.get_x()),\n+        checkIfOnNewScreen(new Rectangle(scaleDown(xe.get_x()),\n@@ -810,1 +810,1 @@\n-                scaleDown(xe.get_height()))));\n+                scaleDown(xe.get_height())));\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Window;\n+\n+import javax.swing.JWindow;\n+import javax.swing.SwingUtilities;\n+\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 8280482\n+ * @key headful\n+ * @summary Test to check if window GC doesn't change within same screen.\n+ * @run main MultiScreenCheckScreenIDTest\n+ *\/\n+\n+public class MultiScreenCheckScreenIDTest extends MouseAdapter {\n+    private static final int COLS = 12;\n+    private static final int ROWS = 8;\n+    private static final Color BACKGROUND = new Color(0, 0, 255, 64);\n+    private static GraphicsDevice[] screens;\n+    static List<Window> windowList = new ArrayList<>();\n+    static Robot robot;\n+    static JWindow window;\n+\n+\n+    public static void main(final String[] args) throws Exception {\n+        try {\n+            createGUI();\n+        } finally {\n+            for (Window win : windowList) {\n+                win.dispose();\n+            }\n+        }\n+        System.out.println(\"Test Pass\");\n+    }\n+\n+    private static void createGUI() throws AWTException {\n+        new MultiScreenCheckScreenIDTest().createWindowGrid();\n+    }\n+\n+    private void createWindowGrid() throws AWTException {\n+        screens = GraphicsEnvironment\n+                .getLocalGraphicsEnvironment()\n+                .getScreenDevices();\n+\n+        if (screens.length < 2) {\n+            System.out.println(\"Testing aborted. Required min of 2 screens. \" +\n+                    \"Available : \" + screens.length);\n+            return;\n+        }\n+        robot = new Robot();\n+\n+        int screenNumber = 1;\n+        for (GraphicsDevice screen : screens) {\n+            Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();\n+\n+            for (Rectangle r : gridOfRectangles(screenBounds, COLS, ROWS)) {\n+                try {\n+                    SwingUtilities.invokeAndWait(() -> {\n+                        try {\n+                            window = createWindow(r);\n+                        } catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+                } catch (InterruptedException | InvocationTargetException e) {\n+                    e.printStackTrace();\n+                }\n+                robot.delay(50);\n+                robot.waitForIdle();\n+                if (window.getBounds().intersects(screenBounds)) {\n+                    if (!(window.getGraphicsConfiguration().getBounds().\n+                            intersects(screenBounds))) {\n+                        throw new RuntimeException(\"Graphics configuration \" +\n+                                \"changed for screen :\" + screenNumber);\n+                    }\n+                }\n+                windowList.add(window);\n+            }\n+            screenNumber++;\n+        }\n+    }\n+\n+    private JWindow createWindow(Rectangle bounds) {\n+        JWindow window = new JWindow();\n+        window.setBounds(bounds);\n+        window.setBackground(BACKGROUND);\n+        window.setAlwaysOnTop(true);\n+        window.addMouseListener(this);\n+        window.setVisible(true);\n+        return window;\n+    }\n+\n+    @Override\n+    public void mouseClicked(MouseEvent e) {\n+        ((Window) e.getSource()).dispose();\n+    }\n+\n+    private static List<Rectangle> gridOfRectangles(Rectangle r, int cols, int rows) {\n+        List<Rectangle> l = new ArrayList<>();\n+        for (int row = 0; row < rows; row++) {\n+            int y1 = r.y + (int) Math.round(r.height * (double) row \/ rows);\n+            int y2 = r.y + (int) Math.round(r.height * (double) (row + 1) \/ rows);\n+            for (int col = 0; col < cols; col++) {\n+                int x1 = r.x + (int) Math.round(r.width * (double) col \/ cols);\n+                int x2 = r.x + (int) Math.round(r.width * (double) (col + 1) \/ cols);\n+                l.add(new Rectangle(x1, y1, x2 - x1, y2 - y1));\n+            }\n+        }\n+        return l;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Multiscreen\/MultiScreenCheckScreenIDTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}