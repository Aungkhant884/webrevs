{"files":[{"patch":"@@ -100,2 +100,4 @@\n-    bool explicit_gc_requested = _gc_requested.is_set() &&  is_explicit_gc(_requested_gc_cause);\n-    bool implicit_gc_requested = _gc_requested.is_set() && !is_explicit_gc(_requested_gc_cause);\n+    bool is_gc_requested = _gc_requested.is_set();\n+    GCCause::Cause requested_gc_cause = _requested_gc_cause;\n+    bool explicit_gc_requested = is_gc_requested && is_explicit_gc(requested_gc_cause);\n+    bool implicit_gc_requested = is_gc_requested && !is_explicit_gc(requested_gc_cause);\n@@ -135,1 +137,1 @@\n-      cause = _requested_gc_cause;\n+      cause = requested_gc_cause;\n@@ -150,1 +152,1 @@\n-      cause = _requested_gc_cause;\n+      cause = requested_gc_cause;\n@@ -508,1 +510,3 @@\n-    _gc_requested.set();\n+    \/\/ Although setting gc request is under _gc_waiters_lock, but read side (run_service())\n+    \/\/ does not take the lock. We need to enforce following order, so that read side sees\n+    \/\/ latest requested gc cause when the flag is set.\n@@ -510,0 +514,1 @@\n+    _gc_requested.set();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"}]}