{"files":[{"patch":"@@ -55,1 +55,1 @@\n-      \/\/ We should not reach here exept for PPC\/AIX, as os::zero_page_read_protected()\n+      \/\/ We should not reach here except for PPC\/AIX, as os::zero_page_read_protected()\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-   * @param moreExepected Should always be true unless this is being called\n+   * @param moreExpected Should always be true unless this is being called\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/dtm\/ref\/IncrementalSAXSource_Filter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-     * This will epectedly fail with an \"IncompatibleClassChangeError\" because the objects returned\n+     * This will expectedly fail with an \"IncompatibleClassChangeError\" because the objects returned\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestMeetIncompatibleInterfaceArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-            throw new RuntimeException(\"Modifier.$VALUES.length expeced: 4, actual: \" + Modifier.values().length);\n+            throw new RuntimeException(\"Modifier.$VALUES.length expected: 4, actual: \" + Modifier.values().length);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/cacheObject\/ArchivedEnumApp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,1 +147,1 @@\n-            System.err.println(\"%## Exepcted: \" + metaspaceSize);\n+            System.err.println(\"%## Expected: \" + metaspaceSize);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/FirstGCTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-        \/\/ no OOM is exepcted.\n+        \/\/ no OOM is expected.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/HighWaterMarkTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-                System.err.println(\"Unexpeted error: \" + badThing);\n+                System.err.println(\"Unexpected error: \" + badThing);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/gc\/MetaspaceBaseGC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-            throwFault(\"Unexpeted error: \" + badThing, badThing);\n+            throwFault(\"Unexpected error: \" + badThing, badThing);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/metaspace\/shrink_grow\/ShrinkGrowTest\/ShrinkGrowTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,1 +109,1 @@\n-            TestUtils.unexpctedException(t);\n+            TestUtils.unexpectedException(t);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach001\/attach001TestRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-            TestUtils.unexpctedException(t);\n+            TestUtils.unexpectedException(t);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/AttachOnDemand\/attach036\/attach036TestRunner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-    public static void unexpctedException(Throwable exception) {\n+    public static void unexpectedException(Throwable exception) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/test\/TestUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-        \/\/ It's expeced that the focus is restored to <button1>.\n+        \/\/ It's expected that the focus is restored to <button1>.\n","filename":"test\/jdk\/java\/awt\/Focus\/ResetMostRecentFocusOwnerTest\/ResetMostRecentFocusOwnerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-            throw new RuntimeException(\"Unexepcted enum status detected.\");\n+            throw new RuntimeException(\"Unexpected enum status detected.\");\n","filename":"test\/jdk\/java\/lang\/Class\/IsEnum.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,2 +217,2 @@\n-        System.out.println(\"List:    \" + list);\n-        System.out.println(\"Expectd: \" + list);\n+        System.out.println(\"List:     \" + list);\n+        System.out.println(\"Expected: \" + expected);\n","filename":"test\/jdk\/java\/lang\/StackWalker\/StackStreamTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-     * Wait (with timeout) for datagram. The {@code datagramExepcted}\n+     * Wait (with timeout) for datagram. The {@code datagramExpected}\n@@ -87,1 +87,1 @@\n-                                boolean datagramExepcted,\n+                                boolean datagramExpected,\n@@ -106,1 +106,1 @@\n-                    if (datagramExepcted) {\n+                    if (datagramExpected) {\n@@ -129,1 +129,1 @@\n-                if (!datagramExepcted) {\n+                if (!datagramExpected) {\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Promiscuous.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-            \/\/ Expepected result\n+            \/\/ Expected result\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/ExceptionTranslation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                throw new RuntimeException(\"format: got=\"+s+\", expecetd=\"+weekDate);\n+                throw new RuntimeException(\"format: got=\"+s+\", expected=\"+weekDate);\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/WeekDateTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -383,1 +383,1 @@\n-                System.err.println(\"Epected max: \" + expSec + \"s, \"\n+                System.err.println(\"Expected max: \" + expSec + \"s, \"\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/TestClock_System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-                                        \"cp=[%x], expeced:[%s] result:[%s]%n\",\n+                                        \"cp=[%x], expected:[%s] result:[%s]%n\",\n","filename":"test\/jdk\/java\/util\/regex\/whitebox\/GraphemeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-                System.err.println(\"Epected max: \" + expSec + \"s, \"\n+                System.err.println(\"Expected max: \" + expSec + \"s, \"\n","filename":"test\/jdk\/jdk\/internal\/misc\/VM\/GetNanoTimeAdjustment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-        System.out.println(\"Recording started at \" + started + \". Delta millis=\" + millis + \", expeced about 2000\");\n+        System.out.println(\"Recording started at \" + started + \". Delta millis=\" + millis + \", expected about 2000\");\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/state\/TestStateScheduleStart.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -267,1 +267,1 @@\n-            debug(\"Unexpeced request sent to the httpserver for b.jar\");\n+            debug(\"Unexpected request sent to the httpserver for b.jar\");\n@@ -271,1 +271,1 @@\n-            debug(\"Unexpeced request sent to the httpserver for c.jar\");\n+            debug(\"Unexpected request sent to the httpserver for c.jar\");\n@@ -307,1 +307,1 @@\n-            debug(\"Unexpeced request sent to the httpserver for b.jar\");\n+            debug(\"Unexpected request sent to the httpserver for b.jar\");\n@@ -311,1 +311,1 @@\n-            debug(\"Unexpeced request sent to the httpserver for c.jar\");\n+            debug(\"Unexpected request sent to the httpserver for c.jar\");\n","filename":"test\/jdk\/sun\/misc\/JarIndex\/metaInfFilenames\/Basic.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,1 +138,1 @@\n-                fail(\"Unexpeceted message: \" + e);\n+                fail(\"Unexpected message: \" + e);\n@@ -149,1 +149,1 @@\n-                fail(\"Unexpeceted message: \" + e);\n+                fail(\"Unexpected message: \" + e);\n","filename":"test\/jdk\/sun\/security\/x509\/GeneralName\/DNSNameTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-            String errmsg = \"Error is found in collation testing in Thai\\n\" + \"exepected order is: \" + expected.toString() + \"\\n\" + \"actual order is: \" + actual.toString() + \"\\n\";\n+            String errmsg = \"Error is found in collation testing in Thai\\n\" + \"expected order is: \" + expected.toString() + \"\\n\" + \"actual order is: \" + actual.toString() + \"\\n\";\n","filename":"test\/jdk\/sun\/text\/resources\/Collator\/Bug6755060.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,1 @@\n-    public void checkVM(String vm, String[] input, String jvmcfg, String[] expectedOutput, String expectdJvmCfg) throws Exception {\n+    public void checkVM(String vm, String[] input, String jvmcfg, String[] expectedOutput, String expectedJvmCfg) throws Exception {\n@@ -163,1 +163,1 @@\n-            doCheckVM(vm, winput, jvmcfg, woutput, expectdJvmCfg);\n+            doCheckVM(vm, winput, jvmcfg, woutput, expectedJvmCfg);\n@@ -167,1 +167,1 @@\n-    private void doCheckVM(String vm, String[] input, String jvmcfg, String[] expectedOutput, String expectdJvmCfg) throws Exception {\n+    private void doCheckVM(String vm, String[] input, String jvmcfg, String[] expectedOutput, String expectedJvmCfg) throws Exception {\n@@ -197,2 +197,2 @@\n-        if (!expectdJvmCfg.equals(newContent)) {\n-            throw new Exception(\"Got content \" + newContent + \" expected \" + expectdJvmCfg);\n+        if (!expectedJvmCfg.equals(newContent)) {\n+            throw new Exception(\"Got content \" + newContent + \" expected \" + expectedJvmCfg);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeVMPluginTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-                    \"Unexpeced nested or concurrent Test.run() call\");\n+                    \"Unexpected nested or concurrent Test.run() call\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -285,1 +285,1 @@\n-                return expetedLicenseFileText();\n+                return expectedLicenseFileText();\n@@ -289,1 +289,1 @@\n-        private List<String> expetedLicenseFileText() {\n+        private List<String> expectedLicenseFileText() {\n@@ -329,1 +329,1 @@\n-                TKit.assertStringListEquals(expetedLicenseFileText(),\n+                TKit.assertStringListEquals(expectedLicenseFileText(),\n","filename":"test\/jdk\/tools\/jpackage\/share\/LicenseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-# 2 - Exepected value\n+# 2 - Expected value\n@@ -43,1 +43,1 @@\n-# On macosx, file system timestamps only have 1 second resultion so must add\n+# On macosx, file system timestamps only have 1 second resolution so must add\n","filename":"test\/make\/UtilsForTests.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}