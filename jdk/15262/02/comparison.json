{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Locale;\n@@ -55,1 +56,1 @@\n- * <a href=\"http:\/\/www.w3.org\/TR\/REC-CSS1\">CSS attributes<\/a>\n+ * <a href=\"https:\/\/www.w3.org\/TR\/REC-CSS1\">CSS attributes<\/a>\n@@ -1452,4 +1453,23 @@\n-     * Parses a String in the format <code>rgb(r, g, b)<\/code> where\n-     * each of the Color components is either an integer, or a floating number\n-     * with a % after indicating a percentage value of 255. Values are\n-     * constrained to fit with 0-255. The resulting Color is returned.\n+     * Parses a String using the grammar described in the\n+     * <a href=\"https:\/\/www.w3.org\/TR\/css-color-4\/#rgb-functions\">\n+     *     CSS-COLOR-4 5.1.The RGB functions\n+     * <\/a> specifications.\n+     * By example <code>rgb(rc gc bc)<\/code>,\n+     * <code>rgb(rc,gc,bc)<\/code>, <code>rgb(rc gc bc \/ ac)<\/code>,\n+     * <code>rgb(rc gc bc \/ ac)<\/code>, ... including <code>rgba<\/code>\n+     * notations are valid. Each of the rc, gc, bc Color components is a\n+     * number with a % after, indicating a percentage value of 255.\n+     * These values are constrained to fit with 0-255 or 0%-100%.\n+     * The ac Color component is a single number or number with a %.\n+     * This value is constrained to fit with 0-1 or 0%-100%.\n+     * See\n+     * <a href=\"https:\/\/www.w3.org\/TR\/css-values-4\/#number-value\">\n+     *     number\n+     * <\/a> and\n+     * <a href=\"https:\/\/www.w3.org\/TR\/css-values-4\/#percentage-value\">\n+     *     percentage\n+     * <\/a> in the\n+     * <a href=\"https:\/\/www.w3.org\/TR\/css-values-4\">\n+     *    CSS-VALUE-4\n+     * <\/a> specifications.\n+     * The resulting Color is returned.\n@@ -1459,8 +1479,17 @@\n-        int[] index = new int[1];\n-\n-        index[0] = 4;\n-        int red = (int)getColorComponent(string, index);\n-        int green = (int)getColorComponent(string, index);\n-        int blue = (int)getColorComponent(string, index);\n-\n-        return new Color(red, green, blue);\n+        byte[] index = new byte[2];\n+\n+        index[0] = 3;\n+        index[1] = 1;\n+        float red = getColorComponent(string, index);\n+        if (red < 0) return new Color(0f, 0f, 0f);\n+        float green = getColorComponent(string, index);\n+        if (green < 0) return new Color(0f, 0f, 0f);\n+        float blue = getColorComponent(string, index);\n+        if (blue < 0) return new Color(0f, 0f, 0f);\n+        float alpha = getColorComponent(string, index);\n+        if (alpha == -1) return new Color(0f, 0f, 0f);\n+        if (alpha < 0) {\n+            return new Color(red, green, blue);\n+        } else {\n+            return new Color(red, green, blue, alpha);\n+        }\n@@ -1471,1 +1500,1 @@\n-        int[] index = new int[1];\n+        byte[] index = new byte[2];\n@@ -1474,3 +1503,7 @@\n-        float red = getColorComponent(string, index)\/255f;\n-        float green = getColorComponent(string, index)\/255f;\n-        float blue = getColorComponent(string, index)\/255f;\n+        index[1] = 1;\n+        float red = getColorComponent(string, index);\n+        if (red < 0) return new Color(0, 0, 0);\n+        float green = getColorComponent(string, index);\n+        if (green < 0) return new Color(0, 0, 0);\n+        float blue = getColorComponent(string, index);\n+        if (blue < 0) return new Color(0, 0, 0);\n@@ -1478,2 +1511,6 @@\n-\n-        return new Color(red, green, blue, alpha);\n+        if (alpha == -1) return new Color(0, 0, 0);\n+        if (alpha < 0) {\n+            return new Color(red, green, blue);\n+        } else {\n+            return new Color(red, green, blue, alpha);\n+        }\n@@ -1482,0 +1519,1 @@\n+    private static int SIGNIFICAND_MAX = 655350000;\n@@ -1483,4 +1521,4 @@\n-     * Returns the next integer value from <code>string<\/code> starting\n-     * at <code>index[0]<\/code>. The value can either can an integer, or\n-     * a percentage (floating number ending with %), in which case it is\n-     * multiplied by 255.\n+     * Returns the next float value from <code>string<\/code> starting\n+     * at <code>index[0]<\/code>. The value can either can a number, or\n+     * a percentage (number ending with %), in which case it is\n+     * multiplied by 255 except for the alpha Color component.\n@@ -1488,1 +1526,1 @@\n-    private static float getColorComponent(String string, int[] index) {\n+    private static float getColorComponent(String string, byte[] index) {\n@@ -1490,5 +1528,64 @@\n-        char aChar;\n-\n-        \/\/ Skip non-decimal chars\n-        while(index[0] < length && (aChar = string.charAt(index[0])) != '-' &&\n-              !Character.isDigit(aChar) && aChar != '.') {\n+        char aChar = '?';\n+        boolean sep = false;\n+        \/\/ Only one separator\n+        boolean oosep = false;\n+\n+        \/\/ Principles\n+        \/\/ - the attribute value is supposed to be well-formed i.e. :\n+        \/\/   - match the sequence directly following the name of the rgb or rgba functions.\n+        \/\/   - contains correctly formed blocks () (this is ensured by the parser CSSParser.java).\n+        \/\/   - Does not contain white space at the beginning of the string and the end of the string (this is ensured by the parser CSSParser.java).\n+        \/\/   - white-spaces (according to Java) between rgb or rgba and ( are removed.\n+        \/\/   - Components are well-formed.\n+        \/\/   - The sequence of characters is predictable.\n+        \/\/ - Any deviation from the expected, generates a rejection of the component\n+\n+        \/\/ Must return :\n+        \/\/ - a positive float if succeed to parse a decimal value ou percent value.\n+        \/\/ - the value -1 if the argument format is wrong.\n+        \/\/ - the value -2 if failed to parse expected separator\n+\n+        \/\/ Alphabet :\n+        \/\/ - \"( ,.-+0123456789\/%)noe\"\n+\n+        \/\/ Keyword :\n+        \/\/ - Only one : none\n+\n+        \/\/ Grammar\n+        \/\/ - argument :== (\"rgb\" | \"rgba\") \"(\" {<decimal-number> \"%\"? (\" \"* | \",\")}3 [\"\/\" <decimal-number> \"%\"?] \")\"\n+        \/\/ - decimal-number :== [\"+\" | \"-\"] digit* [\".\" digit*]  [\"e\" [\"+\" | \"-\"] digit*]\n+        \/\/ - digit :== \"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\"\n+        \/\/ - rgbc :: 'rgb'\n+        \/\/ - delimitors :: = ( none\n+        \/\/\n+        \/\/ Skip unauthorized characters :\n+        \/\/ - Starting number alphabet\n+        \/\/   - non-number sign,\n+        \/\/   - non-decimal digit,\n+        \/\/ - Separator signs\n+        \/\/   - non-whitespace,\n+        \/\/   - non-comma,\n+        \/\/   - non-slash,\n+        \/\/ And store last word of 6 characters, may contain keyword \"none\"\n+        \/\/\n+        \/\/ Try to detect the rigth separator and reach the first character different from ' '.\n+        String seplist = index[1] == 1 ? \"( \" :\n+                         index[1] > 3 ? \" ,\/\" : \" ,\";\n+\n+        \/\/ Can continue to scan\n+        boolean notReachEnd = true;\n+        while(notReachEnd = (index[0] < length\n+              && ((aChar = string.charAt(index[0])) != ')'))) {\n+            if (seplist.indexOf(aChar) > -1\/* || Character.isSpaceChar(aChar)*\/) {\n+                sep = true;\n+                if (oosep && aChar != ' ') {\n+                    \/\/ Two consecutive non space separators.\n+                    \/\/ - Never happens with a parsed string because of CSSParser\n+                    \/\/ - But useful for StyleSheet.stringToColor\n+                    return -1;\n+                } else {\n+                    if (aChar != ' ') oosep = true;\n+                }\n+            } else {\n+                break;\n+            }\n@@ -1497,0 +1594,20 @@\n+        \/\/ End of string or no separator detected, terminate.\n+        if (!notReachEnd || !sep) return -2;\n+\n+        \/\/ From here\n+        \/\/ - current char is in +-0123456789n\n+        \/\/ - start build value\n+        \/\/   - value could be 0 if none detected\n+        \/\/   - a number or a percentage\n+\n+        \/\/ Try to detect 'none' keyword\n+        if (aChar == 'n') {\n+            String snkw = string.substring(index[0], Math.min(index[0] + 4, length));\n+            if (snkw.equals(\"none\")) {\n+                index[1]++;\n+                index[0] += 4;\n+                return 0;\n+            } else {\n+                return -1;\n+            }\n+        }\n@@ -1498,0 +1615,1 @@\n+        \/\/ From here, next expected char is only +-0123456789\n@@ -1499,2 +1617,2 @@\n-\n-        if (start < length && string.charAt(index[0]) == '-') {\n+        boolean negative = false;\n+        if (aChar == '+' || (negative = aChar == '-')) {\n@@ -1503,2 +1621,10 @@\n-        while(index[0] < length &&\n-                         Character.isDigit(string.charAt(index[0]))) {\n+\n+        \/\/ From here next expected chars are only 0123456789\n+        int significand = 0;\n+        int tenpower = 0;\n+        float fvalueIntergerPart = 0;\n+        float fvalueFractionalPart = 0;\n+\n+        while (notReachEnd = (index[0] < length\n+               && ((aChar = string.charAt(index[0])) != ')')\n+               && Character.isDigit(aChar))) {\n@@ -1506,0 +1632,8 @@\n+            if (significand < SIGNIFICAND_MAX) {\n+                significand = significand * 10 + (aChar - '0')\/* * 10000*\/;\n+            } else if (tenpower < Integer.MAX_VALUE) {\n+                tenpower++;\n+            } else {\n+                \/\/ Treatement over capacity Treat as 0, not sure ! May as infinite.\n+                return 0;\n+            }\n@@ -1508,1 +1642,1 @@\n-            \/\/ Decimal value\n+            \/\/ Fractional part\n@@ -1510,2 +1644,5 @@\n-            while(index[0] < length &&\n-                  Character.isDigit(string.charAt(index[0]))) {\n+            \/\/ From here next expected chars are only 0123456789.\n+            \/\/ Only next four digits are take in count.\n+            while(index[0] < length\n+                  && ((aChar = string.charAt(index[0])) != ')')\n+                  && Character.isDigit(aChar)) {\n@@ -1513,0 +1650,6 @@\n+                if (significand < SIGNIFICAND_MAX) {\n+                   if (tenpower > Integer.MIN_VALUE) {\n+                       significand = significand * 10 + (aChar - '0');\n+                       tenpower--;\n+                   }\n+                }\n@@ -1515,4 +1658,17 @@\n-        if (start != index[0]) {\n-            try {\n-                float value = Float.parseFloat(string.substring\n-                                               (start, index[0]));\n+        if (index[0] < length && (string.charAt(index[0]) == 'e' || string.charAt(index[0]) == 'E')) {\n+            boolean negativeExpSign = false;\n+            index[0]++;\n+            if (index[0] < length && ((aChar = string.charAt(index[0])) == '+' || (negativeExpSign = (aChar == '-')))) {\n+                index[0]++;\n+            }\n+            \/\/ Exponent value\n+            int exponent = 0;\n+            \/\/ From here next expected chars are only 0123456789\n+            while(index[0] < length\n+                  && ((aChar = string.charAt(index[0])) != ')')\n+                  && Character.isDigit(aChar)) {\n+                index[0]++;\n+                exponent = exponent * 10 + aChar - '0';\n+            }\n+            tenpower = negativeExpSign ? tenpower - exponent : tenpower + exponent;\n+        }\n@@ -1520,7 +1676,15 @@\n-                if (index[0] < length && string.charAt(index[0]) == '%') {\n-                    index[0]++;\n-                    value = value * 255f \/ 100f;\n-                }\n-                return Math.min(255f, Math.max(0, value));\n-            } catch (NumberFormatException nfe) {\n-                \/\/ Treat as 0\n+        \/\/ From here next expected char is \"% ,\/)\"\n+        if (index[0] < length\n+            && \"% ,\/)\".indexOf(aChar) < 0) return -1;\n+        if (tenpower < -10) return 0;\n+        \/\/ Not sure : over capacity should return infinite.\n+        if (tenpower > 10) return 0;\n+        if (start != index[0]) {\n+            float value = significand;\n+            if (index[0] < length && string.charAt(index[0]) == '%') {\n+                index[0]++;\n+                if (tenpower > Integer.MIN_VALUE + 2) {\n+                    tenpower -= 2;\n+                } else return 0;\n+            } else if (index[1] < 4) {\n+                value = value \/ 255f;\n@@ -1528,0 +1692,12 @@\n+            \/\/ Reject negative value;\n+            \/\/ By example -12 ou -12% must return 0 !\n+            \/\/ Not return before to be sure the value is valid.\n+            \/\/ That's why, I set it here.\n+            if (negative) return 0;\n+            if (tenpower < 0) {\n+                value = value \/ FLOAT_10_POW[-tenpower];\n+            } else {\n+                value = value * FLOAT_10_POW[tenpower];\n+            }\n+            index[1]++;\n+            return Math.min(1, value);\n@@ -1529,1 +1705,1 @@\n-        return 0;\n+        return -1;\n@@ -1532,0 +1708,6 @@\n+    private static final float[] FLOAT_10_POW = {\n+        1.0e0f,\n+        1.0e1f, 1.0e2f, 1.0e3f, 1.0e4f, 1.0e5f,\n+        1.0e6f, 1.0e7f, 1.0e8f, 1.0e9f, 1.0e10f\n+    };\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":230,"deletions":48,"binary":false,"changes":278,"status":"modified"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+\n+import javax.swing.text.html.StyleSheet;\n+\n+\/*\n+ * @test\n+ * @bug 8292276\n+ * @summary Aligns the rgb() and rgba() function behaviours in CSS.java\n+ * @run main RGBandRGBAalignmentBehaviours\n+ *\/\n+public class RGBandRGBAalignmentBehaviours {\n+\n+    \/\/ The CSS 'color' property accepts <name-color> listed in the CSS Color Module Level 4.\n+    \/\/ - Many of they keywords are not supported.\n+    \/\/\n+    \/\/ Test fails if stringToColor doesn't return the expected value.\n+    public static void main(String[] args) {\n+        StringBuilder result = new StringBuilder(\"Failed.\");\n+        boolean passed = true;\n+        StyleSheet styleSheet = new StyleSheet();\n+\n+        for(String[] rgb : listRGBandRGBA) {\n+            Object color = styleSheet.stringToColor(rgb[0]);\n+            String cols = color instanceof Color col ? \"\\n    \" + rgb[0] + \" hex =\" + Integer.toHexString(col.getRGB()) : null;\n+\n+            if (color instanceof Color col && !rgb[1].equals(Integer.toHexString(col.getRGB()))) {\n+                passed = false;\n+                result.append(\"\\n    Fails to parse : \" + rgb[0] + \" -> \" + rgb[1] + \" \" + Integer.toHexString(col.getRGB()));\n+            }\n+        }\n+\n+        if (!passed) {\n+            throw new RuntimeException(result.toString());\n+        }\n+    }\n+\n+    static String[][] listRGBandRGBA = {\n+        \/\/ RGB subset\n+        {\"rgb(12 24 200)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12 24 200%)\", \"ff0c18ff\", \"rgba(12 24 255 1.0)\"},\n+        {\"rgb(-1 24 200%)\", \"ff0018ff\", \"rgba(0 24 255 1.0)\"},\n+        {\"rgb(300 24 28)\", \"ffff181c\", \"rgba(255 24 28 1.0)\"},\n+        {\"rgb(12 24 200 \/ 82%)\", \"d10c18c8\", \"rgba(12 24 200 0.82)\"},\n+        {\"rgb(12 24 200 \/ 0.82)\", \"d10c18c8\", \"rgba(12 24 200 0.82)\"},\n+        {\"rgb(12 24 200 \/ -210)\", \"c18c8\", \"rgba(12 24 200 0.0)\"},\n+        {\"rgb(12, 24, 200)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12, 24, 200, 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12, 24, 200 , 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12 , 24 , 200 , 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(   12  ,      24 ,   200 ,             210  )\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12 ,24, 200 ,210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(12,24,200,210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(15% 60% 49%)\", \"ff26997d\", \"rgba(38 153 125 1.0)\"},\n+        {\"rgb(15% 60% 49% \/ 82%)\", \"d126997d\", \"rgba(38 153 125 0.82)\"},\n+        {\"rgb(15%, 60%, 49% \/ 82%)\", \"d126997d\", \"rgba(38 153 125 0.82)\"},\n+        {\"rgb(0.14  60% 52.3 \/ 0.98)\", \"fa009934\", \"rgba(0 153 52 0.98)\"},\n+        {\"rgb(none none none)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgb(none none none \/ none)\", \"0\", \"rgba(0 0 0 0.0)\"},\n+        {\"rgb(none none none\/none)\", \"0\", \"rgba(0 0 0 0.0)\"},\n+        {\"rgb(none none 30)\", \"ff00001e\", \"rgba(0 0 30 1.0)\"},\n+        {\"rgb(none 20 none)\", \"ff001400\", \"rgba(0 20 0 1.0)\"},\n+        {\"rgb(10 none none)\", \"ff0a0000\", \"rgba(10 0 0 1.0)\"},\n+        {\"rgb(none none none)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgb(10 50 13% \/ 50%)\", \"800a3221\", \"rgba(10 50 33 0.5)\"},\n+        {\"rgb(10 50 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgb(10 50,, 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgb(10 50 ,, 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgb(1.2e1 0.24e2 2e2)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(1200e-2 2400e-2 200000e-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(1200E-2 2400E-2 200000E-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgb(120560.64646464632469823160676064670646798706406464098706464097970906464067e-4 2400E-2 200000e-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        \/\/ RGBA subset\n+        {\"rgba(12 24 200)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12 24 200%)\", \"ff0c18ff\", \"rgba(12 24 255 1.0)\"},\n+        {\"rgba(-1 24 200%)\", \"ff0018ff\", \"rgba(0 24 255 1.0)\"},\n+        {\"rgba(300 24 28)\", \"ffff181c\", \"rgba(255 24 28 1.0)\"},\n+        {\"rgba(12 24 200 \/ 82%)\", \"d10c18c8\", \"rgba(12 24 200 0.82)\"},\n+        {\"rgba(12 24 200 \/ 0.82)\", \"d10c18c8\", \"rgba(12 24 200 0.82)\"},\n+        {\"rgba(12 24 200 \/ -210)\", \"c18c8\", \"rgba(12 24 200 0.0)\"},\n+        {\"rgba(12, 24, 200)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12, 24, 200, 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12, 24, 200 , 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12 , 24 , 200 , 210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(   12  ,      24 ,   200 ,             210  )\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12 ,24, 200 ,210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(12,24,200,210)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(15% 60% 49%)\", \"ff26997d\", \"rgba(38 153 125 1.0)\"},\n+        {\"rgba(15% 60% 49% \/ 82%)\", \"d126997d\", \"rgba(38 153 125 0.82)\"},\n+        {\"rgba(15%, 60%, 49% \/ 82%)\", \"d126997d\", \"rgba(38 153 125 0.82)\"},\n+        {\"rgba(0.14  60% 52.3 \/ 0.98)\", \"fa009934\", \"rgba(0 153 52 0.98)\"},\n+        {\"rgba(none none none)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgba(none none none \/ none)\", \"0\", \"rgba(0 0 0 0.0)\"},\n+        {\"rgba(none none none\/none)\", \"0\", \"rgba(0 0 0 0.0)\"},\n+        {\"rgba(none none 30)\", \"ff00001e\", \"rgba(0 0 30 1.0)\"},\n+        {\"rgba(none 20 none)\", \"ff001400\", \"rgba(0 20 0 1.0)\"},\n+        {\"rgba(10 none none)\", \"ff0a0000\", \"rgba(10 0 0 1.0)\"},\n+        {\"rgba(none none none)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgba(10 50 13% \/ 50%)\", \"800a3221\", \"rgba(10 50 33 0.5)\"},\n+        {\"rgba(10 50 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgba(10 50,, 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgba(10 50 ,, 13% \/\/ 50%)\", \"ff000000\", \"rgba(0 0 0 1.0)\"},\n+        {\"rgba(1.2e1 0.24e2 2e2)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(1200e-2 2400e-2 200000e-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(1200E-2 2400E-2 200000E-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"},\n+        {\"rgba(120560.64646464632469823160676064670646798706406464098706464097970906464067e-4 2400E-2 200000e-3)\", \"ff0c18c8\", \"rgba(12 24 200 1.0)\"}\n+    };\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/text\/html\/CSS\/RGBandRGBAalignmentBehaviours.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"}]}