{"files":[{"patch":"@@ -1550,10 +1550,11 @@\n-            if (!lockee->mark().has_bias_pattern()) {\n-              bool call_vm = UseHeavyMonitors;\n-              \/\/ If it isn't recursive we either must swap old header or call the runtime\n-              if (header.to_pointer() != NULL || call_vm) {\n-                markWord old_header = markWord::encode(lock);\n-                if (call_vm || lockee->cas_set_mark(header, old_header) != old_header) {\n-                  \/\/ restore object for the slow case\n-                  most_recent->set_obj(lockee);\n-                  InterpreterRuntime::monitorexit(most_recent);\n-                }\n+\n+            assert(!UseBiasedLocking, \"Not implemented\");\n+\n+            \/\/ If it isn't recursive we either must swap old header or call the runtime\n+            bool call_vm = UseHeavyMonitors;\n+            if (header.to_pointer() != NULL || call_vm) {\n+              markWord old_header = markWord::encode(lock);\n+              if (call_vm || lockee->cas_set_mark(header, old_header) != old_header) {\n+                \/\/ restore object for the slow case\n+                most_recent->set_obj(lockee);\n+                InterpreterRuntime::monitorexit(most_recent);\n@@ -2619,9 +2620,9 @@\n-          if (!lockee->mark().has_bias_pattern()) {\n-            \/\/ If it isn't recursive we either must swap old header or call the runtime\n-            if (header.to_pointer() != NULL) {\n-              markWord old_header = markWord::encode(lock);\n-              if (lockee->cas_set_mark(header, old_header) != old_header) {\n-                \/\/ restore object for the slow case\n-                end->set_obj(lockee);\n-                InterpreterRuntime::monitorexit(end);\n-              }\n+          assert(!UseBiasedLocking, \"Not implemented\");\n+\n+          \/\/ If it isn't recursive we either must swap old header or call the runtime\n+          if (header.to_pointer() != NULL) {\n+            markWord old_header = markWord::encode(lock);\n+            if (lockee->cas_set_mark(header, old_header) != old_header) {\n+              \/\/ restore object for the slow case\n+              end->set_obj(lockee);\n+              InterpreterRuntime::monitorexit(end);\n@@ -2630,0 +2631,1 @@\n+\n@@ -2686,13 +2688,12 @@\n-            if (!rcvr->mark().has_bias_pattern()) {\n-              base->set_obj(NULL);\n-              \/\/ If it isn't recursive we either must swap old header or call the runtime\n-              if (header.to_pointer() != NULL) {\n-                markWord old_header = markWord::encode(lock);\n-                if (rcvr->cas_set_mark(header, old_header) != old_header) {\n-                  \/\/ restore object for the slow case\n-                  base->set_obj(rcvr);\n-                  InterpreterRuntime::monitorexit(base);\n-                  if (THREAD->has_pending_exception()) {\n-                    if (!suppress_error) illegal_state_oop = Handle(THREAD, THREAD->pending_exception());\n-                    THREAD->clear_pending_exception();\n-                  }\n+            assert(!UseBiasedLocking, \"Not implemented\");\n+\n+            \/\/ If it isn't recursive we either must swap old header or call the runtime\n+            if (header.to_pointer() != NULL) {\n+              markWord old_header = markWord::encode(lock);\n+              if (rcvr->cas_set_mark(header, old_header) != old_header) {\n+                \/\/ restore object for the slow case\n+                base->set_obj(rcvr);\n+                InterpreterRuntime::monitorexit(base);\n+                if (THREAD->has_pending_exception()) {\n+                  if (!suppress_error) illegal_state_oop = Handle(THREAD, THREAD->pending_exception());\n+                  THREAD->clear_pending_exception();\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"}]}