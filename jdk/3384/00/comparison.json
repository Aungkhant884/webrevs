{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"runtime\/registerMap.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetNMethod_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/registerMap.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+#include \"runtime\/registerMap.hpp\"\n","filename":"src\/hotspot\/share\/aot\/aotLoader.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"code\/vmregTypes.hpp\"\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CODE_VMREGTYPES_HPP\n+#define SHARE_CODE_VMREGTYPES_HPP\n+\n+\/\/ Headers that just need a forward declaration of VMReg (e.g., frame.hpp)\n+\/\/ should include this file. Include vmreg.hpp only if you need to use\n+\/\/ the full definition of VMReg.\n+\n+class VMRegImpl;\n+typedef VMRegImpl* VMReg;\n+\n+#endif \/\/ SHARE_CODE_VMREGTYPES_HPP\n","filename":"src\/hotspot\/share\/code\/vmregTypes.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEventController.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1241,11 +1241,0 @@\n-\n-\/\/-----------------------------------------------------------------------------------\n-\/\/ StackFrameStream implementation\n-\n-StackFrameStream::StackFrameStream(JavaThread *thread, bool update, bool process_frames) : _reg_map(thread, update, process_frames) {\n-  assert(thread->has_last_Java_frame(), \"sanity check\");\n-  _fr = thread->last_frame();\n-  _is_done = false;\n-}\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"code\/vmregTypes.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"runtime\/registerMap.hpp\"\n@@ -46,0 +46,1 @@\n+class RegisterMap;\n@@ -453,35 +454,0 @@\n-\/\/\n-\/\/ StackFrameStream iterates through the frames of a thread starting from\n-\/\/ top most frame. It automatically takes care of updating the location of\n-\/\/ all (callee-saved) registers iff the update flag is set. It also\n-\/\/ automatically takes care of lazily applying deferred GC processing\n-\/\/ onto exposed frames, such that all oops are valid iff the process_frames\n-\/\/ flag is set.\n-\/\/\n-\/\/ Notice: If a thread is stopped at a safepoint, all registers are saved,\n-\/\/ not only the callee-saved ones.\n-\/\/\n-\/\/ Use:\n-\/\/\n-\/\/   for(StackFrameStream fst(thread, true \/* update *\/, true \/* process_frames *\/);\n-\/\/       !fst.is_done();\n-\/\/       fst.next()) {\n-\/\/     ...\n-\/\/   }\n-\/\/\n-class StackFrameStream : public StackObj {\n- private:\n-  frame       _fr;\n-  RegisterMap _reg_map;\n-  bool        _is_done;\n- public:\n-  StackFrameStream(JavaThread *thread, bool update, bool process_frames);\n-\n-  \/\/ Iteration\n-  inline bool is_done();\n-  void next()                     { if (!_is_done) _fr = _fr.sender(&_reg_map); }\n-\n-  \/\/ Query\n-  frame *current()                { return &_fr; }\n-  RegisterMap* register_map()     { return &_reg_map; }\n-};\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/registerMap.hpp\"\n@@ -68,4 +69,0 @@\n-inline bool StackFrameStream::is_done() {\n-  return (_is_done) ? true : (_is_done = _fr.is_first_frame(), false);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+StackFrameStream::StackFrameStream(JavaThread *thread, bool update, bool process_frames) : _reg_map(thread, update, process_frames) {\n+  assert(thread->has_last_Java_frame(), \"sanity check\");\n+  _fr = thread->last_frame();\n+  _is_done = false;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/stackFrameStream.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_STACKFRAMESTREAM_HPP\n+#define SHARE_RUNTIME_STACKFRAMESTREAM_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"runtime\/frame.hpp\"\n+#include \"runtime\/registerMap.hpp\"\n+\n+class JavaThread;\n+\n+\/\/\n+\/\/ StackFrameStream iterates through the frames of a thread starting from\n+\/\/ top most frame. It automatically takes care of updating the location of\n+\/\/ all (callee-saved) registers iff the update flag is set. It also\n+\/\/ automatically takes care of lazily applying deferred GC processing\n+\/\/ onto exposed frames, such that all oops are valid iff the process_frames\n+\/\/ flag is set.\n+\/\/\n+\/\/ Notice: If a thread is stopped at a safepoint, all registers are saved,\n+\/\/ not only the callee-saved ones.\n+\/\/\n+\/\/ Use:\n+\/\/\n+\/\/   for(StackFrameStream fst(thread, true \/* update *\/, true \/* process_frames *\/);\n+\/\/       !fst.is_done();\n+\/\/       fst.next()) {\n+\/\/     ...\n+\/\/   }\n+\/\/\n+class StackFrameStream : public StackObj {\n+ private:\n+  frame       _fr;\n+  RegisterMap _reg_map;\n+  bool        _is_done;\n+ public:\n+  StackFrameStream(JavaThread *thread, bool update, bool process_frames);\n+\n+  \/\/ Iteration\n+  inline bool is_done();\n+  void next()                     { if (!_is_done) _fr = _fr.sender(&_reg_map); }\n+\n+  \/\/ Query\n+  frame *current()                { return &_fr; }\n+  RegisterMap* register_map()     { return &_reg_map; }\n+};\n+\n+#endif \/\/ SHARE_RUNTIME_STACKFRAMESTREAM_HPP\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/stackFrameStream.hpp","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_STACKFRAMESTREAM_INLINE_HPP\n+#define SHARE_RUNTIME_STACKFRAMESTREAM_INLINE_HPP\n+\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/stackFrameStream.hpp\"\n+\n+inline bool StackFrameStream::is_done() {\n+  return (_is_done) ? true : (_is_done = _fr.is_first_frame(), false);\n+}\n+\n+#endif \/\/ SHARE_RUNTIME_STACKFRAMESTREAM_INLINE_HPP\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/stackFrameStream.inline.hpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"runtime\/registerMap.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackWatermark.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/registerMap.hpp\"\n@@ -54,0 +55,2 @@\n+class StackFrameStream;\n+\n","filename":"src\/hotspot\/share\/runtime\/vframe.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"runtime\/registerMap.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"runtime\/stackFrameStream.inline.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}