{"files":[{"patch":"@@ -1443,16 +1443,1 @@\n-  st->print_cr(\"Signal Handlers:\");\n-  PosixSignals::print_signal_handler(st, SIGSEGV, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGBUS , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGFPE , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGPIPE, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGXFSZ, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGILL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SR_signum, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN1_SIGNAL, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN2_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN3_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, BREAK_SIGNAL, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGTRAP, buf, buflen);\n-  \/\/ We also want to know if someone else adds a SIGDANGER handler because\n-  \/\/ that will interfere with OOM killling.\n-  PosixSignals::print_signal_handler(st, SIGDANGER, buf, buflen);\n+  PosixSignals::print_signal_handlers(st, buf, buflen);\n@@ -2520,3 +2505,1 @@\n-  \/\/ initialize suspend\/resume support - must do this before signal_sets_init()\n-  if (PosixSignals::SR_initialize() != 0) {\n-    perror(\"SR_initialize failed\");\n+  if (PosixSignals::init() == JNI_ERR) {\n@@ -2526,7 +2509,0 @@\n-  PosixSignals::signal_sets_init();\n-  PosixSignals::install_signal_handlers();\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n-  if (!ReduceSignalUsage) {\n-    PosixSignals::jdk_misc_signal_init();\n-  }\n-\n@@ -2603,5 +2579,1 @@\n-  if (PosixSignals::do_suspend(_thread->osthread())) {\n-    SuspendedThreadTaskContext context(_thread, _thread->osthread()->ucontext());\n-    do_task(context);\n-    PosixSignals::do_resume(_thread->osthread());\n-  }\n+  PosixSignals::do_task(_thread, this);\n@@ -3328,0 +3300,8 @@\n+\n+address os::ucontext_get_pc(const ucontext_t* ctx) {\n+  return os::Aix::ucontext_get_pc(ctx);\n+}\n+\n+void os::ucontext_set_pc(ucontext_t* ctx, address pc) {\n+  os::Aix::ucontext_set_pc(ctx, pc);\n+}\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":11,"deletions":31,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1543,12 +1543,1 @@\n-  st->print_cr(\"Signal Handlers:\");\n-  PosixSignals::print_signal_handler(st, SIGSEGV, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGBUS , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGFPE , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGPIPE, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGXFSZ, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGILL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SR_signum, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN1_SIGNAL, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN2_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN3_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, BREAK_SIGNAL, buf, buflen);\n+  PosixSignals::print_signal_handlers(st, buf, buflen);\n@@ -2141,3 +2130,1 @@\n-  \/\/ initialize suspend\/resume support - must do this before signal_sets_init()\n-  if (PosixSignals::SR_initialize() != 0) {\n-    perror(\"SR_initialize failed\");\n+  if (PosixSignals::init() == JNI_ERR) {\n@@ -2147,7 +2134,0 @@\n-  PosixSignals::signal_sets_init();\n-  PosixSignals::install_signal_handlers();\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n-  if (!ReduceSignalUsage) {\n-    PosixSignals::jdk_misc_signal_init();\n-  }\n-\n@@ -2285,5 +2265,1 @@\n-  if (PosixSignals::do_suspend(_thread->osthread())) {\n-    SuspendedThreadTaskContext context(_thread, _thread->osthread()->ucontext());\n-    do_task(context);\n-    PosixSignals::do_resume(_thread->osthread());\n-  }\n+  PosixSignals::do_task(_thread, this);\n@@ -2820,0 +2796,8 @@\n+\n+address os::ucontext_get_pc(const ucontext_t* ctx) {\n+  return os::Bsd::ucontext_get_pc(ctx);\n+}\n+\n+void os::ucontext_set_pc(ucontext_t* ctx, address pc) {\n+  os::Bsd::ucontext_set_pc(ctx, pc);\n+}\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":11,"deletions":27,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-  assert(!sigismember(&current, SR_signum), \"SR signal should not be blocked!\");\n+  assert(!sigismember(&current, PosixSignals::SR_signum), \"SR signal should not be blocked!\");\n@@ -2604,15 +2604,1 @@\n-  st->print_cr(\"Signal Handlers:\");\n-  PosixSignals::print_signal_handler(st, SIGSEGV, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGBUS , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGFPE , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGPIPE, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGXFSZ, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SIGILL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SR_signum, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN1_SIGNAL, buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN2_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, SHUTDOWN3_SIGNAL , buf, buflen);\n-  PosixSignals::print_signal_handler(st, BREAK_SIGNAL, buf, buflen);\n-#if defined(PPC64)\n-  PosixSignals::print_signal_handler(st, SIGTRAP, buf, buflen);\n-#endif\n+  PosixSignals::print_signal_handlers(st, buf, buflen);\n@@ -4457,3 +4443,1 @@\n-  \/\/ initialize suspend\/resume support - must do this before signal_sets_init()\n-  if (PosixSignals::SR_initialize() != 0) {\n-    perror(\"SR_initialize failed\");\n+  if (PosixSignals::init() == JNI_ERR) {\n@@ -4463,7 +4447,0 @@\n-  PosixSignals::signal_sets_init();\n-  PosixSignals::install_signal_handlers();\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n-  if (!ReduceSignalUsage) {\n-    PosixSignals::jdk_misc_signal_init();\n-  }\n-\n@@ -4710,5 +4687,1 @@\n-  if (PosixSignals::do_suspend(_thread->osthread())) {\n-    SuspendedThreadTaskContext context(_thread, _thread->osthread()->ucontext());\n-    do_task(context);\n-    PosixSignals::do_resume(_thread->osthread());\n-  }\n+  PosixSignals::do_task(_thread, this);\n@@ -5421,0 +5394,8 @@\n+address os::ucontext_get_pc(const ucontext_t* ctx) {\n+  return os::Linux::ucontext_get_pc(ctx);\n+}\n+\n+void os::ucontext_set_pc(ucontext_t* ctx, address pc) {\n+  os::Linux::ucontext_set_pc(ctx, pc);\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":12,"deletions":31,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+#include <signal.h>\n+\n@@ -46,10 +48,0 @@\n-\/\/ glibc on Bsd platform uses non-documented flag\n-\/\/ to indicate, that some special sort of signal\n-\/\/ trampoline is used.\n-\/\/ We will never set this flag, and we should\n-\/\/ ignore this flag in our diagnostic\n-#ifdef SIGNIFICANT_SIGNAL_MASK\n-  #undef SIGNIFICANT_SIGNAL_MASK\n-#endif\n-#define SIGNIFICANT_SIGNAL_MASK (~0x04000000)\n-\n@@ -97,0 +89,4 @@\n+\/\/ Signal number used to suspend\/resume a thread\n+\/\/ do not use any signal number less than SIGSEGV, see 4355769\n+int PosixSignals::SR_signum = SIGUSR2;\n+\n@@ -267,1 +263,1 @@\n-void PosixSignals::jdk_misc_signal_init() {\n+void jdk_misc_signal_init() {\n@@ -454,14 +450,0 @@\n-#if defined(AIX)\n-\n-\/\/ Set thread signal mask (for some reason on AIX sigthreadmask() seems\n-\/\/ to be the thing to call; documentation is not terribly clear about whether\n-\/\/ pthread_sigmask also works, and if it does, whether it does the same.\n-bool set_thread_signal_mask(int how, const sigset_t* set, sigset_t* oset) {\n-  const int rc = ::pthread_sigmask(how, set, oset);\n-  \/\/ return value semantics differ slightly for error case:\n-  \/\/ pthread_sigmask returns error number, sigthreadmask -1 and sets global errno\n-  \/\/ (so, pthread_sigmask is more theadsafe for error handling)\n-  \/\/ But success is always 0.\n-  return rc == 0 ? true : false;\n-}\n-\n@@ -471,1 +453,1 @@\n-bool unblock_program_error_signals() {\n+int unblock_program_error_signals() {\n@@ -478,1 +460,1 @@\n-  return set_thread_signal_mask(SIG_UNBLOCK, &set, NULL);\n+  return PosixSignals::unblock_thread_signal_mask(&set);\n@@ -481,2 +463,0 @@\n-#endif\n-\n@@ -487,2 +467,0 @@\n-\/\/ TODO: reconcile the differences between Linux\/BSD vs AIX here!\n-#if defined(AIX)\n@@ -493,1 +471,0 @@\n-#endif\n@@ -634,3 +611,0 @@\n-\n-  act.sa_flags &= SIGNIFICANT_SIGNAL_MASK;\n-\n@@ -660,1 +634,1 @@\n-    if (sig == SR_signum) {\n+    if (sig == PosixSignals::SR_signum) {\n@@ -766,1 +740,1 @@\n-#if defined(PPC64)\n+#if defined(PPC64) || defined(AIX)\n@@ -779,1 +753,1 @@\n-  do_signal_check(SR_signum);\n+  do_signal_check(PosixSignals::SR_signum);\n@@ -1144,1 +1118,1 @@\n-void PosixSignals::install_signal_handlers() {\n+void install_signal_handlers() {\n@@ -1249,3 +1223,0 @@\n-  \/\/ See comment for SIGNIFICANT_SIGNAL_MASK define\n-  sa.sa_flags &= SIGNIFICANT_SIGNAL_MASK;\n-\n@@ -1273,1 +1244,1 @@\n-    sa.sa_flags = VMError::get_resetted_sigflags(sig) & SIGNIFICANT_SIGNAL_MASK;\n+    sa.sa_flags = VMError::get_resetted_sigflags(sig);\n@@ -1294,0 +1265,22 @@\n+void PosixSignals::print_signal_handlers(outputStream* st, char* buf, size_t buflen) {\n+  st->print_cr(\"Signal Handlers:\");\n+  PosixSignals::print_signal_handler(st, SIGSEGV, buf, buflen);\n+  PosixSignals::print_signal_handler(st, SIGBUS , buf, buflen);\n+  PosixSignals::print_signal_handler(st, SIGFPE , buf, buflen);\n+  PosixSignals::print_signal_handler(st, SIGPIPE, buf, buflen);\n+  PosixSignals::print_signal_handler(st, SIGXFSZ, buf, buflen);\n+  PosixSignals::print_signal_handler(st, SIGILL , buf, buflen);\n+  PosixSignals::print_signal_handler(st, PosixSignals::SR_signum, buf, buflen);\n+  PosixSignals::print_signal_handler(st, SHUTDOWN1_SIGNAL, buf, buflen);\n+  PosixSignals::print_signal_handler(st, SHUTDOWN2_SIGNAL , buf, buflen);\n+  PosixSignals::print_signal_handler(st, SHUTDOWN3_SIGNAL , buf, buflen);\n+  PosixSignals::print_signal_handler(st, BREAK_SIGNAL, buf, buflen);\n+#if defined(AIX)\n+  \/\/ We also want to know if someone else adds a SIGDANGER handler because\n+  \/\/ that will interfere with OOM killling.\n+  PosixSignals::print_signal_handler(st, SIGDANGER, buf, buflen);\n+#elif defined(PPC64) || defined(AIX)\n+  PosixSignals::print_signal_handler(st, SIGTRAP, buf, buflen);\n+#endif\n+}\n+\n@@ -1306,26 +1299,10 @@\n-int PosixSignals::unblock_thread_signal_mask(const sigset_t *set) {\n-  return pthread_sigmask(SIG_UNBLOCK, set, NULL);\n-}\n-\n-address PosixSignals::ucontext_get_pc(const ucontext_t* ctx) {\n-#if defined(AIX)\n-   return os::Aix::ucontext_get_pc(ctx);\n-#elif defined(BSD)\n-   return os::Bsd::ucontext_get_pc(ctx);\n-#elif defined(LINUX)\n-   return os::Linux::ucontext_get_pc(ctx);\n-#else\n-   VMError::report_and_die(\"unimplemented ucontext_get_pc\");\n-#endif\n-}\n-\n-void PosixSignals::ucontext_set_pc(ucontext_t* ctx, address pc) {\n-#if defined(AIX)\n-   os::Aix::ucontext_set_pc(ctx, pc);\n-#elif defined(BSD)\n-   os::Bsd::ucontext_set_pc(ctx, pc);\n-#elif defined(LINUX)\n-   os::Linux::ucontext_set_pc(ctx, pc);\n-#else\n-   VMError::report_and_die(\"unimplemented ucontext_set_pc\");\n-#endif\n+\/\/ Set thread signal mask (for some reason on AIX sigthreadmask() seems\n+\/\/ to be the thing to call; documentation is not terribly clear about whether\n+\/\/ pthread_sigmask also works, and if it does, whether it does the same.\n+bool PosixSignals::unblock_thread_signal_mask(const sigset_t *set) {\n+  const int rc = pthread_sigmask(SIG_UNBLOCK, set, NULL);\n+  \/\/ return value semantics differ slightly for error case:\n+  \/\/ pthread_sigmask returns error number, sigthreadmask -1 and sets global errno\n+  \/\/ (so, pthread_sigmask is more theadsafe for error handling)\n+  \/\/ But success is always 0.\n+  return rc == 0 ? true : false;\n@@ -1334,1 +1311,1 @@\n-void PosixSignals::signal_sets_init() {\n+void signal_sets_init() {\n@@ -1360,1 +1337,1 @@\n-  sigaddset(&unblocked_sigs, SR_signum);\n+  sigaddset(&unblocked_sigs, PosixSignals::SR_signum);\n@@ -1507,1 +1484,1 @@\n-      sigdelset(&suspend_set, SR_signum);\n+      sigdelset(&suspend_set, PosixSignals::SR_signum);\n@@ -1543,1 +1520,1 @@\n-int PosixSignals::SR_initialize() {\n+int SR_initialize() {\n@@ -1551,1 +1528,1 @@\n-      SR_signum = sig;\n+      PosixSignals::SR_signum = sig;\n@@ -1554,1 +1531,1 @@\n-              sig, MAX2(SIGSEGV, SIGBUS)+1, NSIG-1, SR_signum);\n+              sig, MAX2(SIGSEGV, SIGBUS)+1, NSIG-1, PosixSignals::SR_signum);\n@@ -1558,1 +1535,1 @@\n-  assert(SR_signum > SIGSEGV && SR_signum > SIGBUS,\n+  assert(PosixSignals::SR_signum > SIGSEGV && PosixSignals::SR_signum > SIGBUS,\n@@ -1562,1 +1539,1 @@\n-  sigaddset(&SR_sigset, SR_signum);\n+  sigaddset(&SR_sigset, PosixSignals::SR_signum);\n@@ -1571,1 +1548,1 @@\n-  if (sigaction(SR_signum, &act, 0) == -1) {\n+  if (sigaction(PosixSignals::SR_signum, &act, 0) == -1) {\n@@ -1576,1 +1553,1 @@\n-  set_our_sigflags(SR_signum, act.sa_flags);\n+  set_our_sigflags(PosixSignals::SR_signum, act.sa_flags);\n@@ -1581,1 +1558,1 @@\n-  int status = pthread_kill(osthread->pthread_id(), SR_signum);\n+  int status = pthread_kill(osthread->pthread_id(), PosixSignals::SR_signum);\n@@ -1651,0 +1628,27 @@\n+\n+void PosixSignals::do_task(Thread* thread, os::SuspendedThreadTask* task) {\n+  if (PosixSignals::do_suspend(thread->osthread())) {\n+    os::SuspendedThreadTaskContext context(thread, thread->osthread()->ucontext());\n+    task->do_task(context);\n+    PosixSignals::do_resume(thread->osthread());\n+  }\n+}\n+\n+int PosixSignals::init() {\n+  \/\/ initialize suspend\/resume support - must do this before signal_sets_init()\n+  if (SR_initialize() != 0) {\n+    perror(\"SR_initialize failed\");\n+    return JNI_ERR;\n+  }\n+\n+  signal_sets_init();\n+\n+  install_signal_handlers();\n+\n+  \/\/ Initialize data for jdk.internal.misc.Signal\n+  if (!ReduceSignalUsage) {\n+    jdk_misc_signal_init();\n+  }\n+\n+  return JNI_OK;\n+}\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":84,"deletions":80,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -31,1 +30,1 @@\n-#include <signal.h>\n+\/\/ Forward declarations to be independent of the include structure.\n@@ -33,3 +32,7 @@\n-\/\/ Signal number used to suspend\/resume a thread\n-\/\/ do not use any signal number less than SIGSEGV, see 4355769\n-static int SR_signum = SIGUSR2;\n+typedef siginfo_t siginfo_t;\n+typedef sigset_t sigset_t;\n+\n+class outputStream;\n+class Thread;\n+class OSThread;\n+class SuspendedThreadTask;\n@@ -41,0 +44,5 @@\n+  \/\/ Signal number used to suspend\/resume a thread\n+  static int SR_signum;\n+\n+  static int init();\n+\n@@ -42,1 +50,0 @@\n-  static void install_signal_handlers();\n@@ -45,1 +52,0 @@\n-  static void signal_sets_init();\n@@ -48,1 +54,1 @@\n-  static int unblock_thread_signal_mask(const sigset_t *set);\n+  static bool unblock_thread_signal_mask(const sigset_t *set);\n@@ -52,4 +58,1 @@\n-\n-  static address ucontext_get_pc(const ucontext_t* ctx);\n-  \/\/ Set PC into context. Needed for continuation after signal.\n-  static void ucontext_set_pc(ucontext_t* ctx, address pc);\n+  static void print_signal_handlers(outputStream* st, char* buf, size_t buflen);\n@@ -58,1 +61,0 @@\n-  static int SR_initialize();\n@@ -61,0 +63,1 @@\n+  static void do_task(Thread* thread, os::SuspendedThreadTask* task);\n@@ -64,3 +67,0 @@\n-\n-  \/\/ sun.misc.Signal support\n-  static void jdk_misc_signal_init();\n","filename":"src\/hotspot\/os\/posix\/signals_posix.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-  address pc = (uc != NULL) ? PosixSignals::ucontext_get_pc(uc) : NULL;\n+  address pc = (uc != NULL) ? os::ucontext_get_pc(uc) : NULL;\n@@ -125,1 +125,1 @@\n-    PosixSignals::ucontext_set_pc(uc, StubRoutines::continuation_for_safefetch_fault(pc));\n+    os::ucontext_set_pc(uc, StubRoutines::continuation_for_safefetch_fault(pc));\n","filename":"src\/hotspot\/os\/posix\/vmError_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -969,0 +969,2 @@\n+  static address ucontext_get_pc(const ucontext_t* ctx);\n+  static void    ucontext_set_pc(ucontext_t* ctx, address pc);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}