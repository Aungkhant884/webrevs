{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.util.function.BiFunction;\n@@ -216,1 +217,1 @@\n-        map.putAll(t);\n+        t.forEach(this::put);\n@@ -229,1 +230,11 @@\n-    public boolean equals(Object o) {return map.equals(o);}\n+    public void replaceAll(BiFunction<? super String, ? super List<String>, ? extends List<String>> function) {\n+        var f = function.andThen(values -> {\n+            values.forEach(Headers::checkValue);\n+            return values;\n+        });\n+        Map.super.replaceAll(f);\n+    }\n+\n+    public boolean equals(Object o) {\n+        return o instanceof Headers h && map.equals(h);\n+    }\n@@ -232,0 +243,8 @@\n+\n+    public String toString() {\n+        final var sb = new StringBuilder(super.toString());\n+        sb.append(\" { \");\n+        sb.append(map.toString());\n+        sb.append(\" }\");\n+        return sb.toString();\n+    }\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Headers.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8251496\n+ * @bug 8251496 8268960\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm HeadersTest\n+ * @run testng HeadersTest\n@@ -31,0 +31,4 @@\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n@@ -32,0 +36,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -34,0 +39,3 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertThrows;\n@@ -38,0 +46,3 @@\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n+    static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n+\n@@ -39,1 +50,1 @@\n-    public void TestDefaultConstructor() {\n+    public static void testDefaultConstructor() {\n@@ -43,0 +54,83 @@\n+\n+    @Test\n+    public static void testPutAll() {\n+        final var h0 = new Headers();\n+        final var map = new HashMap<String, List<String>>();\n+        map.put(\"a\", null);\n+        assertThrows(NPE, () -> h0.putAll(map));\n+\n+        final var list = new ArrayList<String>();\n+        list.add(null);\n+        assertThrows(NPE, () -> h0.putAll(Map.of(\"a\", list)));\n+        assertThrows(IAE, () -> h0.putAll(Map.of(\"a\", List.of(\"\\n\"))));\n+\n+        final var h1 = new Headers();\n+        h1.put(\"a\", List.of(\"1\"));\n+        h1.put(\"b\", List.of(\"2\"));\n+        final var h2 = new Headers();\n+        h2.putAll(Map.of(\"a\", List.of(\"1\"), \"b\", List.of(\"2\")));\n+        assertEquals(h1, h2);\n+    }\n+\n+    @Test\n+    public static void testReplaceAll() {\n+        final var h1 = new Headers();\n+        h1.put(\"a\", List.of(\"1\"));\n+        h1.put(\"b\", List.of(\"2\"));\n+        final var list = new ArrayList<String>();\n+        list.add(null);\n+        assertThrows(NPE, () -> h1.replaceAll((k, v) -> list));\n+        assertThrows(IAE, () -> h1.replaceAll((k, v) -> List.of(\"\\n\")));\n+\n+        h1.replaceAll((k, v) -> {\n+            String s = h1.get(k).get(0);\n+            return List.of(s+s);\n+        });\n+        final var h2 = new Headers();\n+        h2.put(\"a\", List.of(\"11\"));\n+        h2.put(\"b\", List.of(\"22\"));\n+        assertEquals(h1, h2);\n+    }\n+\n+    @DataProvider\n+    public static Object[][] headerPairs() {\n+        final var h1 = new Headers();\n+        final var h2 = new Headers();\n+        final var h3 = new Headers();\n+        final var h4 = new Headers();\n+        final var h5 = new Headers();\n+        h1.put(\"Accept-Encoding\", List.of(\"gzip, deflate\"));\n+        h2.put(\"accept-encoding\", List.of(\"gzip, deflate\"));\n+        h3.put(\"AccePT-ENCoding\", List.of(\"gzip, deflate\"));\n+        h4.put(\"ACCept-EncodING\", List.of(\"gzip, deflate\"));\n+        h5.put(\"ACCEPT-ENCODING\", List.of(\"gzip, deflate\"));\n+\n+        final var headers = List.of(h1, h2, h3, h4, h5);\n+        return headers.stream()\n+                .flatMap(header1 -> headers.stream().map(header2 -> new Headers[] { header1, header2 }))\n+                .toArray(Object[][]::new);\n+    }\n+\n+    @Test(dataProvider = \"headerPairs\")\n+    public static void testEqualsAndHashCode(Headers h1, Headers h2) {\n+        \/\/ testng's asserts(Map, Map) do not call Headers.equals\n+        assertTrue(h1.equals(h2), \"Headers differ\");\n+        assertEquals(h1.hashCode(), h2.hashCode(), \"hashCode differ for \"\n+                + List.of(h1, h2));\n+    }\n+\n+    @Test\n+    public static void testEqualsMap() {\n+        final var h = new Headers();\n+        final var m = new HashMap<String, List<String>>();\n+        assertFalse(h.equals(m), \"Map instance cannot be equal to Headers\");\n+        assertTrue(m.equals(h));\n+    }\n+\n+    @Test\n+    public static void testToString() {\n+        final var h = new Headers();\n+        h.put(\"Accept-Encoding\", List.of(\"gzip, deflate\"));\n+        assertTrue(h.toString().startsWith(\"com.sun.net.httpserver.Headers\"));\n+        assertTrue(h.toString().endsWith(\" { {Accept-encoding=[gzip, deflate]} }\"));\n+    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HeadersTest.java","additions":98,"deletions":4,"binary":false,"changes":102,"status":"modified"}]}