{"files":[{"patch":"@@ -137,1 +137,1 @@\n-     *            or {@code null} is no mapping for the key exists\n+     *            or {@code null} if no mapping for the key exists\n@@ -142,1 +142,1 @@\n-        if (l == null) {  \/\/ no mapping exists\n+        if (l == null || l.size() == 0) {  \/\/ no mapping exists\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Headers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @modules jdk.httpserver\/sun.net.httpserver:+open\n+ * @modules jdk.httpserver\/com.sun.net.httpserver:+open\n@@ -45,0 +45,1 @@\n+import java.util.Arrays;\n@@ -49,0 +50,1 @@\n+import java.util.concurrent.CompletableFuture;\n@@ -151,1 +153,3 @@\n-    public Object[][] respHeadersWithNull() {\n+    public Object[][] responseHeaders() {\n+        final var listWithNull = new LinkedList<String>();\n+        listWithNull.add(null);\n@@ -153,0 +157,1 @@\n+                {null,  List.of(\"Bar\")},\n@@ -154,1 +159,1 @@\n-                {null, \"Bar\"}\n+                {\"Foo\", listWithNull}\n@@ -159,1 +164,2 @@\n-     * Confirms exchange fails if response headers contain a null key or value.\n+     * Confirms HttpExchange::sendResponseHeaders throws NPE if response headers\n+     * contain a null key or value.\n@@ -161,2 +167,2 @@\n-    @Test(dataProvider = \"respHeadersWithNull\")\n-    public void testNullResponseHeaders(String headerKey, String headerVal)\n+    @Test(dataProvider = \"responseHeaders\")\n+    public void testNullResponseHeaders(String headerKey, List<String> headerVal)\n@@ -172,0 +178,4 @@\n+            assertEquals(throwable.get().getClass(), NPE);\n+            assertTrue(Arrays.stream(throwable.get().getStackTrace())\n+                    .anyMatch(e -> e.getClassName().equals(\"sun.net.httpserver.HttpExchangeImpl\")\n+                            || e.getMethodName().equals(\"sendResponseHeaders\")));\n@@ -177,3 +187,1 @@\n-    private class Handler implements HttpHandler {\n-        private String headerKey;\n-        private String headerVal;\n+    private static CompletableFuture<Throwable> throwable = new CompletableFuture<>();\n@@ -181,4 +189,1 @@\n-        public Handler(String key, String val) {\n-            headerKey = key;\n-            headerVal = val;\n-        }\n+    private record Handler(String headerKey, List<String> headerVal) implements HttpHandler {\n@@ -192,2 +197,7 @@\n-                exchange.getResponseHeaders().set(headerKey, headerVal);\n-                exchange.sendResponseHeaders(200, resp.length);\n+                putHeaders(exchange.getResponseHeaders(), headerKey, headerVal);\n+                try {\n+                    exchange.sendResponseHeaders(200, resp.length);\n+                } catch (Throwable t) {  \/\/ expect NPE\n+                    throwable.complete(t);\n+                    throw t;\n+                }\n@@ -208,0 +218,17 @@\n+    \/**\n+     * Sets headers reflectively to be able to set a null key or value.\n+     *\/\n+    private static void putHeaders(Headers headers,\n+                                   String headerKey,\n+                                   List<String> headerVal) {\n+        try {\n+            final var map = new HashMap<String, List<String>>();\n+            map.put(headerKey, headerVal);\n+            var mapField = Headers.class.getDeclaredField(\"map\");\n+            mapField.setAccessible(true);\n+            mapField.set(headers, map);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not set headers reflectively\", e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/HeadersTest.java","additions":42,"deletions":15,"binary":false,"changes":57,"status":"modified"}]}