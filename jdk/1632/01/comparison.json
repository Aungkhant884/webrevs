{"files":[{"patch":"@@ -1,177 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jaxp.library;\n-\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpContext;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-\/**\n- * A simple HTTP Server\n- *\/\n-public class SimpleHttpServer {\n-    HttpServer _httpserver;\n-    ExecutorService _executor;\n-\n-    String _address;\n-\n-    String _context, _docroot;\n-    int _port;\n-\n-    public SimpleHttpServer(String context, String docroot) {\n-        \/\/let the system pick up an ephemeral port in a bind operation\n-        this(0, context, docroot);\n-    }\n-\n-    public SimpleHttpServer(int port, String context, String docroot) {\n-        _port = port;\n-        _context = context;\n-        _docroot = docroot;\n-    }\n-\n-    public void start() {\n-        MyHttpHandler handler = new MyHttpHandler(_docroot);\n-        InetSocketAddress addr = new InetSocketAddress(_port);\n-        try {\n-            _httpserver = HttpServer.create(addr, 0);\n-        } catch (IOException ex) {\n-            throw new RuntimeException(\"cannot create httpserver\", ex);\n-        }\n-\n-        \/\/TestHandler is mapped to \/test\n-        HttpContext ctx = _httpserver.createContext(_context, handler);\n-\n-        _executor = Executors.newCachedThreadPool();\n-        _httpserver.setExecutor(_executor);\n-        _httpserver.start();\n-\n-        _address = \"http:\/\/localhost:\" + _httpserver.getAddress().getPort();\n-    }\n-\n-    public void stop() {\n-        _httpserver.stop(2);\n-        _executor.shutdown();\n-    }\n-\n-    public String getAddress() {\n-        return _address;\n-    }\n-\n-    static class MyHttpHandler implements HttpHandler {\n-\n-        String _docroot;\n-\n-        public MyHttpHandler(String docroot) {\n-            _docroot = docroot;\n-        }\n-\n-        public void handle(HttpExchange t)\n-                throws IOException {\n-            InputStream is = t.getRequestBody();\n-            Headers map = t.getRequestHeaders();\n-            Headers rmap = t.getResponseHeaders();\n-            OutputStream os = t.getResponseBody();\n-            URI uri = t.getRequestURI();\n-            String path = uri.getPath();\n-\n-\n-            while (is.read() != -1) ;\n-            is.close();\n-\n-            File f = new File(_docroot, path);\n-            if (!f.exists()) {\n-                notfound(t, path);\n-                return;\n-            }\n-\n-            String method = t.getRequestMethod();\n-            if (method.equals(\"HEAD\")) {\n-                rmap.set(\"Content-Length\", Long.toString(f.length()));\n-                t.sendResponseHeaders(200, -1);\n-                t.close();\n-            } else if (!method.equals(\"GET\")) {\n-                t.sendResponseHeaders(405, -1);\n-                t.close();\n-                return;\n-            }\n-\n-            if (path.endsWith(\".html\") || path.endsWith(\".htm\")) {\n-                rmap.set(\"Content-Type\", \"text\/html\");\n-            } else {\n-                rmap.set(\"Content-Type\", \"text\/plain\");\n-            }\n-\n-            t.sendResponseHeaders (200, f.length());\n-\n-            FileInputStream fis = new FileInputStream(f);\n-            int count = 0;\n-            try {\n-                byte[] buf = new byte[16 * 1024];\n-                int len;\n-                while ((len = fis.read(buf)) != -1) {\n-                    os.write(buf, 0, len);\n-                    count += len;\n-                }\n-            } catch (IOException e) {\n-                e.printStackTrace();\n-            }\n-            fis.close();\n-            os.close();\n-        }\n-\n-        void moved(HttpExchange t) throws IOException {\n-            Headers req = t.getRequestHeaders();\n-            Headers map = t.getResponseHeaders();\n-            URI uri = t.getRequestURI();\n-            String host = req.getFirst(\"Host\");\n-            String location = \"http:\/\/\" + host + uri.getPath() + \"\/\";\n-            map.set(\"Content-Type\", \"text\/html\");\n-            map.set(\"Location\", location);\n-            t.sendResponseHeaders(301, -1);\n-            t.close();\n-        }\n-\n-        void notfound(HttpExchange t, String p) throws IOException {\n-            t.getResponseHeaders().set(\"Content-Type\", \"text\/html\");\n-            t.sendResponseHeaders(404, 0);\n-            OutputStream os = t.getResponseBody();\n-            String s = \"<h2>File not found<\/h2>\";\n-            s = s + p + \"<p>\";\n-            os.write(s.getBytes());\n-            os.close();\n-            t.close();\n-        }\n-    }\n-\n-}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/libs\/jaxp\/library\/SimpleHttpServer.java","additions":0,"deletions":177,"binary":false,"changes":177,"status":"deleted"},{"patch":"@@ -24,1 +24,0 @@\n-\n@@ -38,2 +37,1 @@\n-import static java.nio.file.StandardOpenOption.APPEND;\n-import static java.nio.file.StandardOpenOption.CREATE;\n+\n@@ -46,0 +44,2 @@\n+import static java.nio.file.StandardOpenOption.APPEND;\n+import static java.nio.file.StandardOpenOption.CREATE;\n@@ -47,2 +47,0 @@\n-import jaxp.library.SimpleHttpServer;\n-import jdk.test.lib.util.JarUtils;\n@@ -50,0 +48,1 @@\n+import jdk.test.lib.util.JarUtils;\n@@ -57,0 +56,1 @@\n+import jdk.test.lib.net.SimpleHttpServer;\n@@ -75,1 +75,0 @@\n-    static String USER_DIR = getSystemProperty(\"user.dir\");\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogFileInputTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/mrjar\/MultiReleaseJarAPI.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *        SimpleHttpServer\n+ *        jdk.test.lib.net.SimpleHttpServer\n@@ -54,0 +54,1 @@\n+import jdk.test.lib.net.SimpleHttpServer;\n@@ -55,2 +56,0 @@\n-\n-import org.testng.Assert;\n@@ -63,0 +62,1 @@\n+    static final String TESTCONTEXT = \"\/multi-release.jar\";  \/\/mapped to local file path\n@@ -66,1 +66,1 @@\n-        server = new SimpleHttpServer(InetAddress.getLoopbackAddress());\n+        server = new SimpleHttpServer(InetAddress.getLoopbackAddress(), TESTCONTEXT, System.getProperty(\"user.dir\", \".\"));\n@@ -75,1 +75,1 @@\n-                        .path(\"\/multi-release.jar\").toURL(),\n+                        .path(TESTCONTEXT).toURL(),\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/mrjar\/MultiReleaseJarHttpProperties.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        CreateMultiReleaseTestJars creator =  new CreateMultiReleaseTestJars();\n+        CreateMultiReleaseTestJars creator = new CreateMultiReleaseTestJars();\n@@ -102,1 +102,1 @@\n-        ((URLClassLoader)cldr).close();\n+        ((URLClassLoader) cldr).close();\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/mrjar\/MultiReleaseJarProperties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,5 +35,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -62,0 +57,4 @@\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/mrjar\/TestVersionedStream.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.security.jarsigner.JarSigner;\n+import java.io.File;\n@@ -40,1 +40,1 @@\n-import jdk.test.lib.util.JarBuilder;\n+import jdk.security.jarsigner.JarSigner;\n@@ -42,0 +42,1 @@\n+import jdk.test.lib.util.JarBuilder;\n","filename":"test\/jdk\/lib\/testlibrary\/java\/util\/jar\/CreateMultiReleaseTestJars.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import com.sun.net.httpserver.*;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-\/**\n- * Extremely simple server that only performs one task.  The server listens for\n- * requests on the ephemeral port.  If it sees a request that begins with\n- * \"\/multi-release.jar\", it consumes the request and returns a stream of bytes\n- * representing the jar file multi-release.jar found in \"userdir\".\n- *\/\n-class SimpleHttpServer {\n-    private static final String userdir = System.getProperty(\"user.dir\", \".\");\n-    private static final Path multirelease = Paths.get(userdir, \"multi-release.jar\");\n-\n-    private final HttpServer server;\n-    private final InetAddress address;\n-\n-    public SimpleHttpServer() throws IOException {\n-        this(null);\n-    }\n-\n-    public SimpleHttpServer(InetAddress addr) throws IOException {\n-        address = addr;\n-        server = HttpServer.create();\n-    }\n-\n-    public void start() throws IOException {\n-        server.bind(new InetSocketAddress(address, 0), 0);\n-        server.createContext(\"\/multi-release.jar\", t -> {\n-            try (InputStream is = t.getRequestBody()) {\n-                is.readAllBytes();  \/\/ probably not necessary to consume request\n-                byte[] bytes = Files.readAllBytes(multirelease);\n-                t.sendResponseHeaders(200, bytes.length);\n-                try (OutputStream os = t.getResponseBody()) {\n-                    os.write(bytes);\n-                }\n-            }\n-        });\n-        server.setExecutor(null); \/\/ creates a default executor\n-        server.start();\n-    }\n-\n-    public void stop() {\n-        server.stop(0);\n-    }\n-\n-    int getPort() {\n-        return server.getAddress().getPort();\n-    }\n-}\n-\n","filename":"test\/jdk\/lib\/testlibrary\/java\/util\/jar\/SimpleHttpServer.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -29,2 +29,5 @@\n-import java.io.*;\n-import java.net.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.net.URLConnection;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/B4756443.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/B5105410.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,3 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n@@ -34,1 +36,2 @@\n-import java.util.jar.*;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/JarURLConnectionUseCaches.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- *        SimpleHttpServer\n+ *        jdk.test.lib.net.SimpleHttpServer\n@@ -57,0 +57,1 @@\n+import jdk.test.lib.net.SimpleHttpServer;\n@@ -58,1 +59,0 @@\n-\n@@ -66,1 +66,1 @@\n-    String userdir = System.getProperty(\"user.dir\",\".\");\n+    String userdir = System.getProperty(\"user.dir\", \".\");\n@@ -70,0 +70,1 @@\n+    static final String TESTCONTEXT = \"\/multi-release.jar\";\n@@ -79,2 +80,1 @@\n-\n-        server = new SimpleHttpServer(InetAddress.getLoopbackAddress());\n+        server = new SimpleHttpServer(InetAddress.getLoopbackAddress(), TESTCONTEXT, System.getProperty(\"user.dir\", \".\"));\n@@ -82,1 +82,0 @@\n-\n@@ -137,1 +136,1 @@\n-        JarURLConnection juc = (JarURLConnection)rootUrl.openConnection();\n+        JarURLConnection juc = (JarURLConnection) rootUrl.openConnection();\n@@ -142,1 +141,1 @@\n-        juc = (JarURLConnection)runtimeUrl.openConnection();\n+        juc = (JarURLConnection) runtimeUrl.openConnection();\n@@ -151,1 +150,1 @@\n-        juc = (JarURLConnection)rootUrl.openConnection();\n+        juc = (JarURLConnection) rootUrl.openConnection();\n@@ -156,1 +155,1 @@\n-        juc = (JarURLConnection)runtimeUrl.openConnection();\n+        juc = (JarURLConnection) runtimeUrl.openConnection();\n@@ -254,1 +253,1 @@\n-            ((JarURLConnection)conn).getJarFile().close();\n+            ((JarURLConnection) conn).getJarFile().close();\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/MultiReleaseJarURLConnection.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,5 +42,0 @@\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.compiler.CompilerUtils;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-\n@@ -51,0 +46,1 @@\n+\n@@ -52,0 +48,4 @@\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/jarbug\/TestDriver.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import java.io.*;\n-import java.util.*;\n+import java.io.InputStream;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/jarbug\/src\/jar1\/GetResource.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,2 +26,3 @@\n-import java.io.*;\n-import java.util.*;\n+import java.io.InputStream;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/jarbug\/src\/jar1\/LoadResourceBundle.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,23 +24,24 @@\n-import java.io.*;\n-import java.net.*;\n-import java.util.jar.*;\n-\n-public abstract class JarTest\n-{\n-        static String tmpdir = System.getProperty(\"java.io.tmpdir\");\n-        static String javaCmd = System.getProperty(\"java.home\") + File.separator +\n-                                \"bin\" + File.separator + \"java\";\n-\n-        \/**\n-         * Reads an input stream into a byte array.\n-         *\/\n-        protected byte[] readFully(InputStream in) throws Exception {\n-                ByteArrayOutputStream out = new ByteArrayOutputStream();\n-                byte[] buffer = new byte[32];\n-                int count;\n-\n-                while ((count = in.read(buffer)) >= 0) {\n-                        out.write(buffer, 0, count);\n-                }\n-\n-                return out.toByteArray();\n+import java.io.BufferedOutputStream;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+\n+public abstract class JarTest {\n+    static String tmpdir = System.getProperty(\"java.io.tmpdir\");\n+    static String javaCmd = System.getProperty(\"java.home\") + File.separator +\n+            \"bin\" + File.separator + \"java\";\n+\n+    \/**\n+     * Reads an input stream into a byte array.\n+     *\/\n+    protected byte[] readFully(InputStream in) throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[32];\n+        int count;\n+\n+        while ((count = in.read(buffer)) >= 0) {\n+            out.write(buffer, 0, count);\n@@ -49,12 +50,27 @@\n-        \/**\n-         * Copies the named resource into the directory specified.\n-         *\/\n-        protected File copyResource(File dir, String resName) throws Exception {\n-                BufferedOutputStream buffOut = null;\n-                FileOutputStream fileOut;\n-                InputStream in = null;\n-                File file = null;\n-                byte[] buffer;\n-                int count;\n-\n-                file = new File(dir, resName);\n+        return out.toByteArray();\n+    }\n+\n+    \/**\n+     * Copies the named resource into the directory specified.\n+     *\/\n+    protected File copyResource(File dir, String resName) throws Exception {\n+        BufferedOutputStream buffOut = null;\n+        FileOutputStream fileOut;\n+        InputStream in = null;\n+        File file = null;\n+        byte[] buffer;\n+        int count;\n+\n+        file = new File(dir, resName);\n+        try {\n+            fileOut = new FileOutputStream(file);\n+            buffOut = new BufferedOutputStream(fileOut);\n+            in = getClass().getResourceAsStream(resName);\n+            buffer = new byte[1024];\n+\n+            while ((count = in.read(buffer)) >= 0) {\n+                buffOut.write(buffer, 0, count);\n+            }\n+            buffOut.flush();\n+        } finally {\n+            if (buffOut != null) {\n@@ -62,22 +78,2 @@\n-                    fileOut = new FileOutputStream(file);\n-                    buffOut = new BufferedOutputStream(fileOut);\n-                    in = getClass().getResourceAsStream(resName);\n-                    buffer = new byte[1024];\n-\n-                    while ((count = in.read(buffer)) >= 0) {\n-                            buffOut.write(buffer, 0, count);\n-                    }\n-                    buffOut.flush();\n-                } finally {\n-                    if (buffOut != null) {\n-                        try {\n-                            buffOut.close();\n-                        } catch (IOException e) {\n-                        }\n-                    }\n-                    if (in != null) {\n-                        try {\n-                            in.close();\n-                        }  catch (IOException e) {\n-                        }\n-                    }\n+                    buffOut.close();\n+                } catch (IOException e) {\n@@ -85,2 +81,7 @@\n-\n-                return file;\n+            }\n+            if (in != null) {\n+                try {\n+                    in.close();\n+                } catch (IOException e) {\n+                }\n+            }\n@@ -89,7 +90,2 @@\n-        \/**\n-         * Utility to create a temp dir.\n-         *\/\n-        protected File createTempDir() throws Exception {\n-                File result = new File(tmpdir  + File.separator + getClass().getName());\n-                result.delete();\n-                result.mkdirs();\n+        return file;\n+    }\n@@ -97,2 +93,7 @@\n-                return result;\n-        }\n+    \/**\n+     * Utility to create a temp dir.\n+     *\/\n+    protected File createTempDir() throws Exception {\n+        File result = new File(tmpdir + File.separator + getClass().getName());\n+        result.delete();\n+        result.mkdirs();\n@@ -100,14 +101,2 @@\n-        \/**\n-         * Utility to recursively delete a directory.\n-         *\/\n-        protected  boolean deleteRecursively(File file) {\n-                File[] children;\n-                boolean result = true;\n-\n-                children = file.listFiles();\n-                if (children != null) {\n-                        for (int i=0; i<children.length; i++) {\n-                                result = result && deleteRecursively(children[i]);\n-                        }\n-                }\n-                result = result && file.delete();\n+        return result;\n+    }\n@@ -115,1 +104,12 @@\n-                return result;\n+    \/**\n+     * Utility to recursively delete a directory.\n+     *\/\n+    protected boolean deleteRecursively(File file) {\n+        File[] children;\n+        boolean result = true;\n+\n+        children = file.listFiles();\n+        if (children != null) {\n+            for (int i = 0; i < children.length; i++) {\n+                result = result && deleteRecursively(children[i]);\n+            }\n@@ -117,0 +117,4 @@\n+        result = result && file.delete();\n+\n+        return result;\n+    }\n@@ -118,2 +122,1 @@\n-    static class Redirector implements Runnable\n-    {\n+    static class Redirector implements Runnable {\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/jarbug\/src\/test\/JarTest.java","additions":88,"deletions":85,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.test.lib.net;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+\/**\n+ * A simple HTTP Server.\n+ **\/\n+public class SimpleHttpServer {\n+    private final HttpServer httpServer;\n+    private ExecutorService executor;\n+    private String address;\n+    private final String context;\n+    private final String docRoot;\n+    private final int port;\n+    private final InetAddress inetAddress;\n+\n+    public SimpleHttpServer(final String context, final String docRoot) throws IOException {\n+        \/\/let the system pick up an ephemeral port in a bind operation\n+        this.port = 0;\n+        this.context = context;\n+        this.docRoot = docRoot;\n+        httpServer = HttpServer.create();\n+        \/\/let the server use wild card address\n+        inetAddress = null;\n+    }\n+\n+    public SimpleHttpServer(final InetAddress inetAddress, final String context, final String docRoot) throws\n+            IOException {\n+        \/\/let the system pick up an ephemeral port in a bind operation\n+        this.port = 0;\n+        this.context = context;\n+        this.docRoot = docRoot;\n+        httpServer = HttpServer.create();\n+        this.inetAddress = inetAddress;\n+    }\n+\n+    public SimpleHttpServer(final int port, final String context, final String docRoot) throws IOException {\n+        this.port = port;\n+        this.context = context;\n+        this.docRoot = docRoot;\n+        httpServer = HttpServer.create();\n+        \/\/let the server use wild card address\n+        inetAddress = null;\n+    }\n+\n+    public void start() throws IOException {\n+        MyHttpHandler handler = new MyHttpHandler(docRoot);\n+        InetSocketAddress addr = inetAddress != null ? new InetSocketAddress(inetAddress, port) : new InetSocketAddress(port);\n+        httpServer.bind(addr, 0);\n+        \/\/TestHandler is mapped to \/test\n+        httpServer.createContext(context, handler);\n+        executor = Executors.newCachedThreadPool();\n+        httpServer.setExecutor(executor);\n+        httpServer.start();\n+        address = \"http:\/\/localhost:\" + httpServer.getAddress().getPort();\n+    }\n+\n+    public void stop() {\n+        httpServer.stop(2);\n+        executor.shutdown();\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public int getPort() {\n+        return httpServer.getAddress().getPort();\n+    }\n+\n+    class MyHttpHandler implements HttpHandler {\n+\n+        private final String docRoot;\n+\n+        MyHttpHandler(final String docroot) {\n+            docRoot = docroot;\n+        }\n+\n+        public void handle(final HttpExchange t) throws IOException {\n+            try (InputStream is = t.getRequestBody()) {\n+                is.readAllBytes();\n+                Headers rMap = t.getResponseHeaders();\n+                try (OutputStream os = t.getResponseBody()) {\n+                    URI uri = t.getRequestURI();\n+                    String path = uri.getPath();\n+                    Path fPath;\n+                    try {\n+                        fPath = Paths.get(docRoot, path);\n+                    } catch (InvalidPathException ex) {\n+                        notfound(t, path);\n+                        return;\n+                    }\n+                    byte[] bytes = Files.readAllBytes(fPath);\n+                    String method = t.getRequestMethod();\n+                    if (method.equals(\"HEAD\")) {\n+                        rMap.set(\"Content-Length\", Long.toString(bytes.length));\n+                        t.sendResponseHeaders(200, -1);\n+                        t.close();\n+                    } else if (!method.equals(\"GET\")) {\n+                        t.sendResponseHeaders(405, -1);\n+                        t.close();\n+                        return;\n+                    }\n+                    if (path.endsWith(\".html\") || path.endsWith(\".htm\")) {\n+                        rMap.set(\"Content-Type\", \"text\/html\");\n+                    } else {\n+                        rMap.set(\"Content-Type\", \"text\/plain\");\n+                    }\n+                    t.sendResponseHeaders(200, bytes.length);\n+                    os.write(bytes);\n+                }\n+            }\n+        }\n+        void moved(final HttpExchange t) throws IOException {\n+            Headers req = t.getRequestHeaders();\n+            Headers map = t.getResponseHeaders();\n+            URI uri = t.getRequestURI();\n+            String host = req.getFirst(\"Host\");\n+            String location = \"http:\/\/\" + host + uri.getPath() + \"\/\";\n+            map.set(\"Content-Type\", \"text\/html\");\n+            map.set(\"Location\", location);\n+            t.sendResponseHeaders(301, -1);\n+            t.close();\n+        }\n+        void notfound(final HttpExchange t, final String p) throws IOException {\n+            t.getResponseHeaders().set(\"Content-Type\", \"text\/html\");\n+            t.sendResponseHeaders(404, 0);\n+            try (OutputStream os = t.getResponseBody()) {\n+                String s = \"<h2>File not found<\/h2>\";\n+                s = s + p + \"<p>\";\n+                os.write(s.getBytes());\n+            }\n+            t.close();\n+        }\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}