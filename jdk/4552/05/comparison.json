{"files":[{"patch":"@@ -561,7 +561,7 @@\n-        if (field instanceof ChronoField) {\n-            switch ((ChronoField) field) {\n-                case NANO_OF_SECOND: return nanos;\n-                case MICRO_OF_SECOND: return nanos \/ 1000;\n-                case MILLI_OF_SECOND: return nanos \/ 1000_000;\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        if (field instanceof ChronoField chronoField) {\n+            return switch (chronoField) {\n+                case NANO_OF_SECOND -> nanos;\n+                case MICRO_OF_SECOND -> nanos \/ 1000;\n+                case MILLI_OF_SECOND -> nanos \/ 1000_000;\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -597,8 +597,8 @@\n-        if (field instanceof ChronoField) {\n-            switch ((ChronoField) field) {\n-                case NANO_OF_SECOND: return nanos;\n-                case MICRO_OF_SECOND: return nanos \/ 1000;\n-                case MILLI_OF_SECOND: return nanos \/ 1000_000;\n-                case INSTANT_SECONDS: return seconds;\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        if (field instanceof ChronoField chronoField) {\n+            return switch (chronoField) {\n+                case NANO_OF_SECOND -> nanos;\n+                case MICRO_OF_SECOND -> nanos \/ 1000;\n+                case MILLI_OF_SECOND -> nanos \/ 1000_000;\n+                case INSTANT_SECONDS -> seconds;\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -708,2 +708,2 @@\n-            switch (chronoField) {\n-                case MILLI_OF_SECOND: {\n+            return switch (chronoField) {\n+                case MILLI_OF_SECOND -> {\n@@ -711,1 +711,1 @@\n-                    return (nval != nanos ? create(seconds, nval) : this);\n+                    yield nval != nanos ? create(seconds, nval) : this;\n@@ -713,1 +713,1 @@\n-                case MICRO_OF_SECOND: {\n+                case MICRO_OF_SECOND -> {\n@@ -715,1 +715,1 @@\n-                    return (nval != nanos ? create(seconds, nval) : this);\n+                    yield nval != nanos ? create(seconds, nval) : this;\n@@ -717,4 +717,4 @@\n-                case NANO_OF_SECOND: return (newValue != nanos ? create(seconds, (int) newValue) : this);\n-                case INSTANT_SECONDS: return (newValue != seconds ? create(newValue, nanos) : this);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+                case NANO_OF_SECOND -> newValue != nanos ? create(seconds, (int) newValue) : this;\n+                case INSTANT_SECONDS -> newValue != seconds ? create(newValue, nanos) : this;\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -851,12 +851,12 @@\n-        if (unit instanceof ChronoUnit) {\n-            switch ((ChronoUnit) unit) {\n-                case NANOS: return plusNanos(amountToAdd);\n-                case MICROS: return plus(amountToAdd \/ 1000_000, (amountToAdd % 1000_000) * 1000);\n-                case MILLIS: return plusMillis(amountToAdd);\n-                case SECONDS: return plusSeconds(amountToAdd);\n-                case MINUTES: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));\n-                case HOURS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));\n-                case HALF_DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY \/ 2));\n-                case DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+        if (unit instanceof ChronoUnit chronoUnit) {\n+            return switch (chronoUnit) {\n+                case NANOS     -> plusNanos(amountToAdd);\n+                case MICROS    -> plus(amountToAdd \/ 1000_000, (amountToAdd % 1000_000) * 1000);\n+                case MILLIS    -> plusMillis(amountToAdd);\n+                case SECONDS   -> plusSeconds(amountToAdd);\n+                case MINUTES   -> plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));\n+                case HOURS     -> plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));\n+                case HALF_DAYS -> plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY \/ 2));\n+                case DAYS      -> plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -1146,11 +1146,11 @@\n-            switch (chronoUnit) {\n-                case NANOS: return nanosUntil(end);\n-                case MICROS: return nanosUntil(end) \/ 1000;\n-                case MILLIS: return Math.subtractExact(end.toEpochMilli(), toEpochMilli());\n-                case SECONDS: return secondsUntil(end);\n-                case MINUTES: return secondsUntil(end) \/ SECONDS_PER_MINUTE;\n-                case HOURS: return secondsUntil(end) \/ SECONDS_PER_HOUR;\n-                case HALF_DAYS: return secondsUntil(end) \/ (12 * SECONDS_PER_HOUR);\n-                case DAYS: return secondsUntil(end) \/ (SECONDS_PER_DAY);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case NANOS     -> nanosUntil(end);\n+                case MICROS    -> nanosUntil(end) \/ 1000;\n+                case MILLIS    -> Math.subtractExact(end.toEpochMilli(), toEpochMilli());\n+                case SECONDS   -> secondsUntil(end);\n+                case MINUTES   -> secondsUntil(end) \/ SECONDS_PER_MINUTE;\n+                case HOURS     -> secondsUntil(end) \/ SECONDS_PER_HOUR;\n+                case HALF_DAYS -> secondsUntil(end) \/ (12 * SECONDS_PER_HOUR);\n+                case DAYS      -> secondsUntil(end) \/ (SECONDS_PER_DAY);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/Instant.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -445,12 +445,5 @@\n-            int dom = 31;\n-            switch (month) {\n-                case 2:\n-                    dom = (IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);\n-                    break;\n-                case 4:\n-                case 6:\n-                case 9:\n-                case 11:\n-                    dom = 30;\n-                    break;\n-            }\n+            int dom = switch (month) {\n+                case 2 -> (IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);\n+                case 4, 6, 9, 11 -> 30;\n+                default -> 31;\n+            };\n@@ -478,9 +471,2 @@\n-            case 2:\n-                day = Math.min(day, IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);\n-                break;\n-            case 4:\n-            case 6:\n-            case 9:\n-            case 11:\n-                day = Math.min(day, 30);\n-                break;\n+            case 2 -> day = Math.min(day, IsoChronology.INSTANCE.isLeapYear(year) ? 29 : 28);\n+            case 4, 6, 9, 11 -> day = Math.min(day, 30);\n@@ -693,16 +679,16 @@\n-        switch ((ChronoField) field) {\n-            case DAY_OF_WEEK: return getDayOfWeek().getValue();\n-            case ALIGNED_DAY_OF_WEEK_IN_MONTH: return ((day - 1) % 7) + 1;\n-            case ALIGNED_DAY_OF_WEEK_IN_YEAR: return ((getDayOfYear() - 1) % 7) + 1;\n-            case DAY_OF_MONTH: return day;\n-            case DAY_OF_YEAR: return getDayOfYear();\n-            case EPOCH_DAY: throw new UnsupportedTemporalTypeException(\"Invalid field 'EpochDay' for get() method, use getLong() instead\");\n-            case ALIGNED_WEEK_OF_MONTH: return ((day - 1) \/ 7) + 1;\n-            case ALIGNED_WEEK_OF_YEAR: return ((getDayOfYear() - 1) \/ 7) + 1;\n-            case MONTH_OF_YEAR: return month;\n-            case PROLEPTIC_MONTH: throw new UnsupportedTemporalTypeException(\"Invalid field 'ProlepticMonth' for get() method, use getLong() instead\");\n-            case YEAR_OF_ERA: return (year >= 1 ? year : 1 - year);\n-            case YEAR: return year;\n-            case ERA: return (year >= 1 ? 1 : 0);\n-        }\n-        throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        return switch ((ChronoField) field) {\n+            case DAY_OF_WEEK -> getDayOfWeek().getValue();\n+            case ALIGNED_DAY_OF_WEEK_IN_MONTH -> ((day - 1) % 7) + 1;\n+            case ALIGNED_DAY_OF_WEEK_IN_YEAR -> ((getDayOfYear() - 1) % 7) + 1;\n+            case DAY_OF_MONTH -> day;\n+            case DAY_OF_YEAR -> getDayOfYear();\n+            case EPOCH_DAY -> throw new UnsupportedTemporalTypeException(\"Invalid field 'EpochDay' for get() method, use getLong() instead\");\n+            case ALIGNED_WEEK_OF_MONTH -> ((day - 1) \/ 7) + 1;\n+            case ALIGNED_WEEK_OF_YEAR -> ((getDayOfYear() - 1) \/ 7) + 1;\n+            case MONTH_OF_YEAR -> month;\n+            case PROLEPTIC_MONTH -> throw new UnsupportedTemporalTypeException(\"Invalid field 'ProlepticMonth' for get() method, use getLong() instead\");\n+            case YEAR_OF_ERA -> (year >= 1 ? year : 1 - year);\n+            case YEAR -> year;\n+            case ERA -> (year >= 1 ? 1 : 0);\n+            default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        };\n@@ -1042,16 +1028,16 @@\n-            switch (chronoField) {\n-                case DAY_OF_WEEK: return plusDays(newValue - getDayOfWeek().getValue());\n-                case ALIGNED_DAY_OF_WEEK_IN_MONTH: return plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_MONTH));\n-                case ALIGNED_DAY_OF_WEEK_IN_YEAR: return plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_YEAR));\n-                case DAY_OF_MONTH: return withDayOfMonth((int) newValue);\n-                case DAY_OF_YEAR: return withDayOfYear((int) newValue);\n-                case EPOCH_DAY: return LocalDate.ofEpochDay(newValue);\n-                case ALIGNED_WEEK_OF_MONTH: return plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_MONTH));\n-                case ALIGNED_WEEK_OF_YEAR: return plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_YEAR));\n-                case MONTH_OF_YEAR: return withMonth((int) newValue);\n-                case PROLEPTIC_MONTH: return plusMonths(newValue - getProlepticMonth());\n-                case YEAR_OF_ERA: return withYear((int) (year >= 1 ? newValue : 1 - newValue));\n-                case YEAR: return withYear((int) newValue);\n-                case ERA: return (getLong(ERA) == newValue ? this : withYear(1 - year));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case DAY_OF_WEEK -> plusDays(newValue - getDayOfWeek().getValue());\n+                case ALIGNED_DAY_OF_WEEK_IN_MONTH -> plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_MONTH));\n+                case ALIGNED_DAY_OF_WEEK_IN_YEAR -> plusDays(newValue - getLong(ALIGNED_DAY_OF_WEEK_IN_YEAR));\n+                case DAY_OF_MONTH -> withDayOfMonth((int) newValue);\n+                case DAY_OF_YEAR -> withDayOfYear((int) newValue);\n+                case EPOCH_DAY -> LocalDate.ofEpochDay(newValue);\n+                case ALIGNED_WEEK_OF_MONTH -> plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_MONTH));\n+                case ALIGNED_WEEK_OF_YEAR -> plusWeeks(newValue - getLong(ALIGNED_WEEK_OF_YEAR));\n+                case MONTH_OF_YEAR -> withMonth((int) newValue);\n+                case PROLEPTIC_MONTH -> plusMonths(newValue - getProlepticMonth());\n+                case YEAR_OF_ERA -> withYear((int) (year >= 1 ? newValue : 1 - newValue));\n+                case YEAR -> withYear((int) newValue);\n+                case ERA -> (getLong(ERA) == newValue ? this : withYear(1 - year));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -1253,11 +1239,11 @@\n-            switch (chronoUnit) {\n-                case DAYS: return plusDays(amountToAdd);\n-                case WEEKS: return plusWeeks(amountToAdd);\n-                case MONTHS: return plusMonths(amountToAdd);\n-                case YEARS: return plusYears(amountToAdd);\n-                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n-                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n-                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n-                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case DAYS      -> plusDays(amountToAdd);\n+                case WEEKS     -> plusWeeks(amountToAdd);\n+                case MONTHS    -> plusMonths(amountToAdd);\n+                case YEARS     -> plusYears(amountToAdd);\n+                case DECADES   -> plusYears(Math.multiplyExact(amountToAdd, 10));\n+                case CENTURIES -> plusYears(Math.multiplyExact(amountToAdd, 100));\n+                case MILLENNIA -> plusYears(Math.multiplyExact(amountToAdd, 1000));\n+                case ERAS      -> with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -1635,12 +1621,12 @@\n-        if (unit instanceof ChronoUnit) {\n-            switch ((ChronoUnit) unit) {\n-                case DAYS: return daysUntil(end);\n-                case WEEKS: return daysUntil(end) \/ 7;\n-                case MONTHS: return monthsUntil(end);\n-                case YEARS: return monthsUntil(end) \/ 12;\n-                case DECADES: return monthsUntil(end) \/ 120;\n-                case CENTURIES: return monthsUntil(end) \/ 1200;\n-                case MILLENNIA: return monthsUntil(end) \/ 12000;\n-                case ERAS: return end.getLong(ERA) - getLong(ERA);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+        if (unit instanceof ChronoUnit chronoUnit) {\n+            return switch (chronoUnit) {\n+                case DAYS      -> daysUntil(end);\n+                case WEEKS     -> daysUntil(end) \/ 7;\n+                case MONTHS    -> monthsUntil(end);\n+                case YEARS     -> monthsUntil(end) \/ 12;\n+                case DECADES   -> monthsUntil(end) \/ 120;\n+                case CENTURIES -> monthsUntil(end) \/ 1200;\n+                case MILLENNIA -> monthsUntil(end) \/ 12000;\n+                case ERAS      -> end.getLong(ERA) - getLong(ERA);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalDate.java","additions":62,"deletions":76,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -686,18 +686,18 @@\n-        switch ((ChronoField) field) {\n-            case NANO_OF_SECOND: return nano;\n-            case NANO_OF_DAY: throw new UnsupportedTemporalTypeException(\"Invalid field 'NanoOfDay' for get() method, use getLong() instead\");\n-            case MICRO_OF_SECOND: return nano \/ 1000;\n-            case MICRO_OF_DAY: throw new UnsupportedTemporalTypeException(\"Invalid field 'MicroOfDay' for get() method, use getLong() instead\");\n-            case MILLI_OF_SECOND: return nano \/ 1000_000;\n-            case MILLI_OF_DAY: return (int) (toNanoOfDay() \/ 1000_000);\n-            case SECOND_OF_MINUTE: return second;\n-            case SECOND_OF_DAY: return toSecondOfDay();\n-            case MINUTE_OF_HOUR: return minute;\n-            case MINUTE_OF_DAY: return hour * 60 + minute;\n-            case HOUR_OF_AMPM: return hour % 12;\n-            case CLOCK_HOUR_OF_AMPM: int ham = hour % 12; return (ham % 12 == 0 ? 12 : ham);\n-            case HOUR_OF_DAY: return hour;\n-            case CLOCK_HOUR_OF_DAY: return (hour == 0 ? 24 : hour);\n-            case AMPM_OF_DAY: return hour \/ 12;\n-        }\n-        throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        return switch ((ChronoField) field) {\n+            case NANO_OF_SECOND -> nano;\n+            case NANO_OF_DAY -> throw new UnsupportedTemporalTypeException(\"Invalid field 'NanoOfDay' for get() method, use getLong() instead\");\n+            case MICRO_OF_SECOND -> nano \/ 1000;\n+            case MICRO_OF_DAY -> throw new UnsupportedTemporalTypeException(\"Invalid field 'MicroOfDay' for get() method, use getLong() instead\");\n+            case MILLI_OF_SECOND -> nano \/ 1000_000;\n+            case MILLI_OF_DAY -> (int) (toNanoOfDay() \/ 1000_000);\n+            case SECOND_OF_MINUTE -> second;\n+            case SECOND_OF_DAY -> toSecondOfDay();\n+            case MINUTE_OF_HOUR -> minute;\n+            case MINUTE_OF_DAY -> hour * 60 + minute;\n+            case HOUR_OF_AMPM -> hour % 12;\n+            case CLOCK_HOUR_OF_AMPM -> { int ham = hour % 12; yield ham % 12 == 0 ? 12 : ham; }\n+            case HOUR_OF_DAY -> hour;\n+            case CLOCK_HOUR_OF_DAY -> (hour == 0 ? 24 : hour);\n+            case AMPM_OF_DAY -> hour \/ 12;\n+            default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+        };\n@@ -860,18 +860,18 @@\n-            switch (chronoField) {\n-                case NANO_OF_SECOND: return withNano((int) newValue);\n-                case NANO_OF_DAY: return LocalTime.ofNanoOfDay(newValue);\n-                case MICRO_OF_SECOND: return withNano((int) newValue * 1000);\n-                case MICRO_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000);\n-                case MILLI_OF_SECOND: return withNano((int) newValue * 1000_000);\n-                case MILLI_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000_000);\n-                case SECOND_OF_MINUTE: return withSecond((int) newValue);\n-                case SECOND_OF_DAY: return plusSeconds(newValue - toSecondOfDay());\n-                case MINUTE_OF_HOUR: return withMinute((int) newValue);\n-                case MINUTE_OF_DAY: return plusMinutes(newValue - (hour * 60 + minute));\n-                case HOUR_OF_AMPM: return plusHours(newValue - (hour % 12));\n-                case CLOCK_HOUR_OF_AMPM: return plusHours((newValue == 12 ? 0 : newValue) - (hour % 12));\n-                case HOUR_OF_DAY: return withHour((int) newValue);\n-                case CLOCK_HOUR_OF_DAY: return withHour((int) (newValue == 24 ? 0 : newValue));\n-                case AMPM_OF_DAY: return plusHours((newValue - (hour \/ 12)) * 12);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case NANO_OF_SECOND     -> withNano((int) newValue);\n+                case NANO_OF_DAY        -> LocalTime.ofNanoOfDay(newValue);\n+                case MICRO_OF_SECOND    -> withNano((int) newValue * 1000);\n+                case MICRO_OF_DAY       -> LocalTime.ofNanoOfDay(newValue * 1000);\n+                case MILLI_OF_SECOND    -> withNano((int) newValue * 1000_000);\n+                case MILLI_OF_DAY       -> LocalTime.ofNanoOfDay(newValue * 1000_000);\n+                case SECOND_OF_MINUTE   -> withSecond((int) newValue);\n+                case SECOND_OF_DAY      -> plusSeconds(newValue - toSecondOfDay());\n+                case MINUTE_OF_HOUR     -> withMinute((int) newValue);\n+                case MINUTE_OF_DAY      -> plusMinutes(newValue - (hour * 60 + minute));\n+                case HOUR_OF_AMPM       -> plusHours(newValue - (hour % 12));\n+                case CLOCK_HOUR_OF_AMPM -> plusHours((newValue == 12 ? 0 : newValue) - (hour % 12));\n+                case HOUR_OF_DAY        -> withHour((int) newValue);\n+                case CLOCK_HOUR_OF_DAY  -> withHour((int) (newValue == 24 ? 0 : newValue));\n+                case AMPM_OF_DAY        -> plusHours((newValue - (hour \/ 12)) * 12);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -1069,10 +1069,10 @@\n-            switch (chronoUnit) {\n-                case NANOS: return plusNanos(amountToAdd);\n-                case MICROS: return plusNanos((amountToAdd % MICROS_PER_DAY) * 1000);\n-                case MILLIS: return plusNanos((amountToAdd % MILLIS_PER_DAY) * 1000_000);\n-                case SECONDS: return plusSeconds(amountToAdd);\n-                case MINUTES: return plusMinutes(amountToAdd);\n-                case HOURS: return plusHours(amountToAdd);\n-                case HALF_DAYS: return plusHours((amountToAdd % 2) * 12);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case NANOS     -> plusNanos(amountToAdd);\n+                case MICROS    -> plusNanos((amountToAdd % MICROS_PER_DAY) * 1000);\n+                case MILLIS    -> plusNanos((amountToAdd % MILLIS_PER_DAY) * 1000_000);\n+                case SECONDS   -> plusSeconds(amountToAdd);\n+                case MINUTES   -> plusMinutes(amountToAdd);\n+                case HOURS     -> plusHours(amountToAdd);\n+                case HALF_DAYS -> plusHours((amountToAdd % 2) * 12);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -1411,10 +1411,10 @@\n-            switch (chronoUnit) {\n-                case NANOS: return nanosUntil;\n-                case MICROS: return nanosUntil \/ 1000;\n-                case MILLIS: return nanosUntil \/ 1000_000;\n-                case SECONDS: return nanosUntil \/ NANOS_PER_SECOND;\n-                case MINUTES: return nanosUntil \/ NANOS_PER_MINUTE;\n-                case HOURS: return nanosUntil \/ NANOS_PER_HOUR;\n-                case HALF_DAYS: return nanosUntil \/ (12 * NANOS_PER_HOUR);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case NANOS     -> nanosUntil;\n+                case MICROS    -> nanosUntil \/ 1000;\n+                case MILLIS    -> nanosUntil \/ 1000_000;\n+                case SECONDS   -> nanosUntil \/ NANOS_PER_SECOND;\n+                case MINUTES   -> nanosUntil \/ NANOS_PER_MINUTE;\n+                case HOURS     -> nanosUntil \/ NANOS_PER_HOUR;\n+                case HALF_DAYS -> nanosUntil \/ (12 * NANOS_PER_HOUR);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/LocalTime.java","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-            switch (chronoField) {\n+            return switch (chronoField) {\n@@ -450,4 +450,4 @@\n-                case DAY_OF_MONTH: return day;\n-                case MONTH_OF_YEAR: return month;\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+                case DAY_OF_MONTH -> day;\n+                case MONTH_OF_YEAR -> month;\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/MonthDay.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -970,7 +970,6 @@\n-            switch (chronoField) {\n-                case INSTANT_SECONDS: return ofInstant(Instant.ofEpochSecond(newValue, getNano()), offset);\n-                case OFFSET_SECONDS: {\n-                    return with(dateTime, ZoneOffset.ofTotalSeconds(chronoField.checkValidIntValue(newValue)));\n-                }\n-            }\n-            return with(dateTime.with(field, newValue), offset);\n+            return switch (chronoField) {\n+                case INSTANT_SECONDS -> ofInstant(Instant.ofEpochSecond(newValue, getNano()), offset);\n+                case OFFSET_SECONDS ->\n+                     with(dateTime, ZoneOffset.ofTotalSeconds(chronoField.checkValidIntValue(newValue)));\n+                default -> with(dateTime.with(field, newValue), offset);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetDateTime.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1183,10 +1183,10 @@\n-            switch (chronoUnit) {\n-                case NANOS: return nanosUntil;\n-                case MICROS: return nanosUntil \/ 1000;\n-                case MILLIS: return nanosUntil \/ 1000_000;\n-                case SECONDS: return nanosUntil \/ NANOS_PER_SECOND;\n-                case MINUTES: return nanosUntil \/ NANOS_PER_MINUTE;\n-                case HOURS: return nanosUntil \/ NANOS_PER_HOUR;\n-                case HALF_DAYS: return nanosUntil \/ (12 * NANOS_PER_HOUR);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case NANOS     -> nanosUntil;\n+                case MICROS    -> nanosUntil \/ 1000;\n+                case MILLIS    -> nanosUntil \/ 1000_000;\n+                case SECONDS   -> nanosUntil \/ NANOS_PER_SECOND;\n+                case MINUTES   -> nanosUntil \/ NANOS_PER_MINUTE;\n+                case HOURS     -> nanosUntil \/ NANOS_PER_HOUR;\n+                case HALF_DAYS -> nanosUntil \/ (12 * NANOS_PER_HOUR);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/OffsetTime.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -170,44 +170,15 @@\n-            case DURATION_TYPE:\n-                ((Duration) object).writeExternal(out);\n-                break;\n-            case INSTANT_TYPE:\n-                ((Instant) object).writeExternal(out);\n-                break;\n-            case LOCAL_DATE_TYPE:\n-                ((LocalDate) object).writeExternal(out);\n-                break;\n-            case LOCAL_DATE_TIME_TYPE:\n-                ((LocalDateTime) object).writeExternal(out);\n-                break;\n-            case LOCAL_TIME_TYPE:\n-                ((LocalTime) object).writeExternal(out);\n-                break;\n-            case ZONE_REGION_TYPE:\n-                ((ZoneRegion) object).writeExternal(out);\n-                break;\n-            case ZONE_OFFSET_TYPE:\n-                ((ZoneOffset) object).writeExternal(out);\n-                break;\n-            case ZONE_DATE_TIME_TYPE:\n-                ((ZonedDateTime) object).writeExternal(out);\n-                break;\n-            case OFFSET_TIME_TYPE:\n-                ((OffsetTime) object).writeExternal(out);\n-                break;\n-            case OFFSET_DATE_TIME_TYPE:\n-                ((OffsetDateTime) object).writeExternal(out);\n-                break;\n-            case YEAR_TYPE:\n-                ((Year) object).writeExternal(out);\n-                break;\n-            case YEAR_MONTH_TYPE:\n-                ((YearMonth) object).writeExternal(out);\n-                break;\n-            case MONTH_DAY_TYPE:\n-                ((MonthDay) object).writeExternal(out);\n-                break;\n-            case PERIOD_TYPE:\n-                ((Period) object).writeExternal(out);\n-                break;\n-            default:\n-                throw new InvalidClassException(\"Unknown serialized type\");\n+            case DURATION_TYPE         -> ((Duration) object).writeExternal(out);\n+            case INSTANT_TYPE          -> ((Instant) object).writeExternal(out);\n+            case LOCAL_DATE_TYPE       -> ((LocalDate) object).writeExternal(out);\n+            case LOCAL_DATE_TIME_TYPE  -> ((LocalDateTime) object).writeExternal(out);\n+            case LOCAL_TIME_TYPE       -> ((LocalTime) object).writeExternal(out);\n+            case ZONE_REGION_TYPE      -> ((ZoneRegion) object).writeExternal(out);\n+            case ZONE_OFFSET_TYPE      -> ((ZoneOffset) object).writeExternal(out);\n+            case ZONE_DATE_TIME_TYPE   -> ((ZonedDateTime) object).writeExternal(out);\n+            case OFFSET_TIME_TYPE      -> ((OffsetTime) object).writeExternal(out);\n+            case OFFSET_DATE_TIME_TYPE -> ((OffsetDateTime) object).writeExternal(out);\n+            case YEAR_TYPE             -> ((Year) object).writeExternal(out);\n+            case YEAR_MONTH_TYPE       -> ((YearMonth) object).writeExternal(out);\n+            case MONTH_DAY_TYPE        -> ((MonthDay) object).writeExternal(out);\n+            case PERIOD_TYPE           -> ((Period) object).writeExternal(out);\n+            default -> throw new InvalidClassException(\"Unknown serialized type\");\n","filename":"src\/java.base\/share\/classes\/java\/time\/Ser.java","additions":15,"deletions":44,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -500,6 +500,6 @@\n-            switch (chronoField) {\n-                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);\n-                case YEAR: return year;\n-                case ERA: return (year < 1 ? 0 : 1);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case YEAR_OF_ERA -> year < 1 ? 1 - year : year;\n+                case YEAR -> year;\n+                case ERA -> year < 1 ? 0 : 1;\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -624,6 +624,6 @@\n-            switch (chronoField) {\n-                case YEAR_OF_ERA: return Year.of((int) (year < 1 ? 1 - newValue : newValue));\n-                case YEAR: return Year.of((int) newValue);\n-                case ERA: return (getLong(ERA) == newValue ? this : Year.of(1 - year));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case YEAR_OF_ERA -> Year.of((int) (year < 1 ? 1 - newValue : newValue));\n+                case YEAR -> Year.of((int) newValue);\n+                case ERA -> getLong(ERA) == newValue ? this : Year.of(1 - year);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -711,8 +711,8 @@\n-            switch (chronoUnit) {\n-                case YEARS: return plusYears(amountToAdd);\n-                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n-                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n-                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n-                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case YEARS     -> plusYears(amountToAdd);\n+                case DECADES   -> plusYears(Math.multiplyExact(amountToAdd, 10));\n+                case CENTURIES -> plusYears(Math.multiplyExact(amountToAdd, 100));\n+                case MILLENNIA -> plusYears(Math.multiplyExact(amountToAdd, 1000));\n+                case ERAS      -> with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -918,8 +918,8 @@\n-            switch (chronoUnit) {\n-                case YEARS: return yearsUntil;\n-                case DECADES: return yearsUntil \/ 10;\n-                case CENTURIES: return yearsUntil \/ 100;\n-                case MILLENNIA: return yearsUntil \/ 1000;\n-                case ERAS: return end.getLong(ERA) - getLong(ERA);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case YEARS     -> yearsUntil;\n+                case DECADES   -> yearsUntil \/ 10;\n+                case CENTURIES -> yearsUntil \/ 100;\n+                case MILLENNIA -> yearsUntil \/ 1000;\n+                case ERAS      -> end.getLong(ERA) - getLong(ERA);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/Year.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -489,8 +489,8 @@\n-            switch (chronoField) {\n-                case MONTH_OF_YEAR: return month;\n-                case PROLEPTIC_MONTH: return getProlepticMonth();\n-                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);\n-                case YEAR: return year;\n-                case ERA: return (year < 1 ? 0 : 1);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case MONTH_OF_YEAR   -> month;\n+                case PROLEPTIC_MONTH -> getProlepticMonth();\n+                case YEAR_OF_ERA     -> (year < 1 ? 1 - year : year);\n+                case YEAR            -> year;\n+                case ERA             -> (year < 1 ? 0 : 1);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -687,8 +687,8 @@\n-            switch (chronoField) {\n-                case MONTH_OF_YEAR: return withMonth((int) newValue);\n-                case PROLEPTIC_MONTH: return plusMonths(newValue - getProlepticMonth());\n-                case YEAR_OF_ERA: return withYear((int) (year < 1 ? 1 - newValue : newValue));\n-                case YEAR: return withYear((int) newValue);\n-                case ERA: return (getLong(ERA) == newValue ? this : withYear(1 - year));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            return switch (chronoField) {\n+                case MONTH_OF_YEAR   -> withMonth((int) newValue);\n+                case PROLEPTIC_MONTH -> plusMonths(newValue - getProlepticMonth());\n+                case YEAR_OF_ERA     -> withYear((int) (year < 1 ? 1 - newValue : newValue));\n+                case YEAR            -> withYear((int) newValue);\n+                case ERA             -> (getLong(ERA) == newValue ? this : withYear(1 - year));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n+            };\n@@ -808,9 +808,9 @@\n-            switch (chronoUnit) {\n-                case MONTHS: return plusMonths(amountToAdd);\n-                case YEARS: return plusYears(amountToAdd);\n-                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n-                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n-                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n-                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case MONTHS    -> plusMonths(amountToAdd);\n+                case YEARS     -> plusYears(amountToAdd);\n+                case DECADES   -> plusYears(Math.multiplyExact(amountToAdd, 10));\n+                case CENTURIES -> plusYears(Math.multiplyExact(amountToAdd, 100));\n+                case MILLENNIA -> plusYears(Math.multiplyExact(amountToAdd, 1000));\n+                case ERAS      -> with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -1050,9 +1050,9 @@\n-            switch (chronoUnit) {\n-                case MONTHS: return monthsUntil;\n-                case YEARS: return monthsUntil \/ 12;\n-                case DECADES: return monthsUntil \/ 120;\n-                case CENTURIES: return monthsUntil \/ 1200;\n-                case MILLENNIA: return monthsUntil \/ 12000;\n-                case ERAS: return end.getLong(ERA) - getLong(ERA);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case MONTHS    -> monthsUntil;\n+                case YEARS     -> monthsUntil \/ 12;\n+                case DECADES   -> monthsUntil \/ 120;\n+                case CENTURIES -> monthsUntil \/ 1200;\n+                case MILLENNIA -> monthsUntil \/ 12000;\n+                case ERAS      -> end.getLong(ERA) - getLong(ERA);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/YearMonth.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1303,4 +1303,3 @@\n-            switch (chronoField) {\n-                case INSTANT_SECONDS:\n-                    return create(newValue, getNano(), zone);\n-                case OFFSET_SECONDS:\n+            return switch (chronoField) {\n+                case INSTANT_SECONDS -> create(newValue, getNano(), zone);\n+                case OFFSET_SECONDS -> {\n@@ -1308,3 +1307,4 @@\n-                    return resolveOffset(offset);\n-            }\n-            return resolveLocal(dateTime.with(field, newValue));\n+                    yield resolveOffset(offset);\n+                }\n+                default -> resolveLocal(dateTime.with(field, newValue));\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -201,11 +201,11 @@\n-            switch (chronoUnit) {\n-                case DAYS: return plusDays(amountToAdd);\n-                case WEEKS: return plusDays(Math.multiplyExact(amountToAdd, 7));\n-                case MONTHS: return plusMonths(amountToAdd);\n-                case YEARS: return plusYears(amountToAdd);\n-                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));\n-                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));\n-                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));\n-                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case DAYS      -> plusDays(amountToAdd);\n+                case WEEKS     -> plusDays(Math.multiplyExact(amountToAdd, 7));\n+                case MONTHS    -> plusMonths(amountToAdd);\n+                case YEARS     -> plusYears(amountToAdd);\n+                case DECADES   -> plusYears(Math.multiplyExact(amountToAdd, 10));\n+                case CENTURIES -> plusYears(Math.multiplyExact(amountToAdd, 100));\n+                case MILLENNIA -> plusYears(Math.multiplyExact(amountToAdd, 1000));\n+                case ERAS      -> with(ERA, Math.addExact(getLong(ERA), amountToAdd));\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n@@ -380,11 +380,11 @@\n-            switch (chronoUnit) {\n-                case DAYS: return daysUntil(end);\n-                case WEEKS: return daysUntil(end) \/ 7;\n-                case MONTHS: return monthsUntil(end);\n-                case YEARS: return monthsUntil(end) \/ 12;\n-                case DECADES: return monthsUntil(end) \/ 120;\n-                case CENTURIES: return monthsUntil(end) \/ 1200;\n-                case MILLENNIA: return monthsUntil(end) \/ 12000;\n-                case ERAS: return end.getLong(ERA) - getLong(ERA);\n-            }\n-            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            return switch (chronoUnit) {\n+                case DAYS      -> daysUntil(end);\n+                case WEEKS     -> daysUntil(end) \/ 7;\n+                case MONTHS    -> monthsUntil(end);\n+                case YEARS     -> monthsUntil(end) \/ 12;\n+                case DECADES   -> monthsUntil(end) \/ 120;\n+                case CENTURIES -> monthsUntil(end) \/ 1200;\n+                case MILLENNIA -> monthsUntil(end) \/ 12000;\n+                case ERAS      -> end.getLong(ERA) - getLong(ERA);\n+                default -> throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoLocalDateImpl.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-            switch (chronoField) {\n-                case INSTANT_SECONDS:\n+            return switch (chronoField) {\n+                case INSTANT_SECONDS ->\n@@ -202,4 +202,3 @@\n-                case OFFSET_SECONDS:\n-                    return getOffset().getTotalSeconds();\n-            }\n-            return toLocalDateTime().get(field);\n+                case OFFSET_SECONDS -> getOffset().getTotalSeconds();\n+                default -> toLocalDateTime().get(field);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoZonedDateTime.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -287,3 +287,3 @@\n-            switch (chronoField) {\n-                case INSTANT_SECONDS: return plus(newValue - toEpochSecond(), SECONDS);\n-                case OFFSET_SECONDS: {\n+            return switch (chronoField) {\n+                case INSTANT_SECONDS -> plus(newValue - toEpochSecond(), SECONDS);\n+                case OFFSET_SECONDS -> {\n@@ -291,1 +291,1 @@\n-                    return create(dateTime.toInstant(offset), zone);\n+                    yield create(dateTime.toInstant(offset), zone);\n@@ -293,2 +293,2 @@\n-            }\n-            return ofBest(dateTime.with(field, newValue), zone, offset);\n+                default -> ofBest(dateTime.with(field, newValue), zone, offset);\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/ChronoZonedDateTimeImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -521,6 +521,4 @@\n-        switch (eraValue) {\n-            case 1:\n-                return HijrahEra.AH;\n-            default:\n-                throw new DateTimeException(\"invalid Hijrah era\");\n-        }\n+        return switch (eraValue) {\n+            case 1 -> HijrahEra.AH;\n+            default -> throw new DateTimeException(\"invalid Hijrah era\");\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/HijrahChronology.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -447,1 +447,1 @@\n-        if (field instanceof ChronoField) {\n+        if (field instanceof ChronoField chronoField) {\n@@ -449,5 +449,4 @@\n-                ChronoField f = (ChronoField) field;\n-                switch (f) {\n-                    case DAY_OF_MONTH: return ValueRange.of(1, lengthOfMonth());\n-                    case DAY_OF_YEAR: return ValueRange.of(1, lengthOfYear());\n-                    case YEAR_OF_ERA: {\n+                return switch (chronoField) {\n+                    case DAY_OF_MONTH -> ValueRange.of(1, lengthOfMonth());\n+                    case DAY_OF_YEAR -> ValueRange.of(1, lengthOfYear());\n+                    case YEAR_OF_ERA -> {\n@@ -457,1 +456,1 @@\n-                        return ValueRange.of(1, jcal.getActualMaximum(Calendar.YEAR));\n+                        yield ValueRange.of(1, jcal.getActualMaximum(Calendar.YEAR));\n@@ -459,2 +458,2 @@\n-                }\n-                return getChronology().range(f);\n+                    default -> getChronology().range(chronoField);\n+                };\n","filename":"src\/java.base\/share\/classes\/java\/time\/chrono\/JapaneseDate.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2560,7 +2560,7 @@\n-            switch (ordinal()) {\n-                case 0: return \"ParseCaseSensitive(true)\";\n-                case 1: return \"ParseCaseSensitive(false)\";\n-                case 2: return \"ParseStrict(true)\";\n-                case 3: return \"ParseStrict(false)\";\n-            }\n-            throw new IllegalStateException(\"Unreachable\");\n+            return switch (ordinal()) {\n+                case 0 -> \"ParseCaseSensitive(true)\";\n+                case 1 -> \"ParseCaseSensitive(false)\";\n+                case 2 -> \"ParseStrict(true)\";\n+                case 3 -> \"ParseStrict(false)\";\n+                default -> throw new IllegalStateException(\"Unreachable\");\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}