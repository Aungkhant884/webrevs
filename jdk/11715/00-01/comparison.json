{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#include \"logging\/logStream.hpp\"\n@@ -399,1 +400,1 @@\n-  archived_entry->_archived_module_index = -2;\n+  archived_entry->_archived_module_index = -1;\n@@ -410,1 +411,3 @@\n-    log_info(cds, module)(\"Archived ModuleEntry* = \" PTR_FORMAT \" for %s\", p2i(archived_entry), debug_info());\n+    LogStream ls(Log(cds, module)::info());\n+    ls.print(\"Stored in archive: \");\n+    archived_entry->print(&ls);\n@@ -489,1 +492,1 @@\n-  assert(_archived_module_index == -2, \"must be set exactly once\");\n+  assert(_archived_module_index == -1, \"must be set exactly once\");\n@@ -499,1 +502,1 @@\n-  \/\/ For validate_archived_module_entries()\n+  \/\/ For verify_archived_module_entries()\n@@ -503,19 +506,0 @@\n-char* ModuleEntry::debug_info() const {\n-  stringStream info;\n-\n-  info.print(\"ModuleEntry* \" PTR_FORMAT \" (loader = \", p2i(this));\n-\n-  assert(loader_data()->is_builtin_class_loader_data(), \"must be\");\n-\n-  if (loader_data()->is_boot_class_loader_data()) {\n-    info.print(\"boot\");\n-  } else if (SystemDictionary::is_platform_class_loader(loader_data()->class_loader())) {\n-    info.print(\"platform\");\n-  } else if (SystemDictionary::is_system_class_loader(loader_data()->class_loader())) {\n-    info.print(\"system\");\n-  }\n-\n-  info.print(\", name = %s)\", (name() == nullptr) ? \"unnamed\" : name()->as_quoted_ascii());\n-  return info.as_string();\n-}\n-\n@@ -523,1 +507,1 @@\n-void ModuleEntry::validate_archived_module_entries() {\n+void ModuleEntry::verify_archived_module_entries() {\n@@ -552,1 +536,3 @@\n-    log_info(cds, module)(\"Restored archived %s\", debug_info());\n+    LogStream ls(Log(cds, module)::info());\n+    ls.print(\"Restored from archive: \");\n+    print(&ls);\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":11,"deletions":25,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -186,2 +186,1 @@\n-  static void validate_archived_module_entries() PRODUCT_RETURN;\n-  char* debug_info() const;\n+  static void verify_archived_module_entries() PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-  if (orig_module_ent == NULL) {\n+  if (orig_module_ent == nullptr) {\n@@ -498,2 +498,2 @@\n-    log_info(cds, module)(\"Archived java.lang.Module oop with no ModuleEntry* @[\" PTR_FORMAT \"]\", p2i(orig_module_obj));\n-    assert(java_lang_Module::name(orig_module_obj) == NULL, \"must be unnamed\");\n+    log_info(cds, module)(\"Archived java.lang.Module oop \" PTR_FORMAT \" with no ModuleEntry*\", p2i(orig_module_obj));\n+    assert(java_lang_Module::name(orig_module_obj) == nullptr, \"must be unnamed\");\n@@ -505,2 +505,3 @@\n-      log_info(cds, module)(\"Archived java.lang.Module oop \" PTR_FORMAT \" for %s\", p2i(orig_module_obj),\n-                            orig_module_ent->debug_info());\n+      LogStream ls(Log(cds, module)::info());\n+      ls.print(\"Archived java.lang.Module oop \" PTR_FORMAT \" for \", p2i(orig_module_obj));\n+      orig_module_ent->print(&ls);\n@@ -551,1 +552,1 @@\n-  \/\/ ModuleEntry::validate_archived_module_entries(), called below, ensures that every archived\n+  \/\/ ModuleEntry::verify_archived_module_entries(), called below, ensures that every archived\n@@ -558,1 +559,1 @@\n-  ModuleEntry::validate_archived_module_entries();\n+  ModuleEntry::verify_archived_module_entries();\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  static bool check_module_oop(oop orig_module_obj);\n+  static bool check_module_oop(oop orig_module_obj) NOT_CDS_JAVA_HEAP_RETURN_(false);\n","filename":"src\/hotspot\/share\/classfile\/modules.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}