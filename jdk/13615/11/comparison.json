{"files":[{"patch":"@@ -78,0 +78,60 @@\n+    \/**\n+     * Validates the correctness of a binary package name.\n+     * In particular checks for the presence of invalid characters in the name.\n+     * Empty package name is allowed.\n+     *\n+     * @param name the package name\n+     * @return the package name passed if valid\n+     * @throws IllegalArgumentException if the package name is invalid\n+     * @throws NullPointerException if the package name is {@code null}\n+     *\/\n+    public static String validateBinaryPackageName(String name) {\n+        for (int i=0; i<name.length(); i++) {\n+            char ch = name.charAt(i);\n+            if (ch == ';' || ch == '[' || ch == '\/')\n+                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n+        }\n+        return name;\n+    }\n+\n+    \/**\n+     * Validates the correctness of an internal package name.\n+     * In particular checks for the presence of invalid characters in the name.\n+     * Empty package name is allowed.\n+     *\n+     * @param name the package name\n+     * @return the package name passed if valid\n+     * @throws IllegalArgumentException if the package name is invalid\n+     * @throws NullPointerException if the package name is {@code null}\n+     *\/\n+    public static String validateInternalPackageName(String name) {\n+        for (int i=0; i<name.length(); i++) {\n+            char ch = name.charAt(i);\n+            if (ch == ';' || ch == '[' || ch == '.')\n+                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n+        }\n+        return name;\n+    }\n+\n+    \/**\n+     * Validates the correctness of a module name.\n+     * In particular checks for the presence of invalid characters in the name.\n+     * Empty module name is allowed.\n+     *\n+     * {@jvms 4.2.3} Module and Package Names\n+     *\n+     * @param name the module name\n+     * @return the module name passed if valid\n+     * @throws IllegalArgumentException if the module name is invalid\n+     * @throws NullPointerException if the module name is {@code null}\n+     *\/\n+    public static String validateModuleName(String name) {\n+        for (int i=name.length() - 1; i >= 0; i--) {\n+            char ch = name.charAt(i);\n+            if ((ch >= '\\u0000' && ch <= '\\u001F')\n+            || ((ch == '\\\\' || ch == ':' || ch =='@') && (i == 0 || name.charAt(--i) != '\\\\')))\n+                throw new IllegalArgumentException(\"Invalid module name: \" + name);\n+        }\n+        return name;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A nominal descriptor for a {@code Module} constant.\n+ *\n+ * <p>\n+ * To create a {@link ModuleDesc} for a module, use the {@link #of(String)}\n+ * method.\n+ *\n+ * @jvms 4.4.11 The CONSTANT_Module_info Structure\n+ * @since 21\n+ *\/\n+public sealed interface ModuleDesc\n+        permits ModuleDescImpl {\n+\n+    \/**\n+     * Returns a {@link ModuleDesc} for a module,\n+     * given the name of the module.\n+     *\n+     * @param name the module name\n+     * @return a {@link ModuleDesc} describing the desired module\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     * @jvms 4.2.3 Module and Package Names\n+     *\/\n+    static ModuleDesc of(String name) {\n+        ConstantUtils.validateModuleName(requireNonNull(name));\n+        return new ModuleDescImpl(name);\n+    }\n+\n+    \/**\n+     * Returns the module name of this {@link ModuleDesc}.\n+     *\n+     * @return the module name\n+     *\/\n+    String moduleName();\n+\n+    \/**\n+     * Compare the specified object with this descriptor for equality.\n+     * Returns {@code true} if and only if the specified object is\n+     * also a {@link ModuleDesc} and both describe the same module.\n+     *\n+     * @param o the other object\n+     * @return whether this descriptor is equal to the other object\n+     *\/\n+    @Override\n+    boolean equals(Object o);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDesc.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+\/*\n+ * Implementation of {@code ModuleDesc}\n+ * @param moduleName must have been validated\n+ *\/\n+record ModuleDescImpl(String moduleName) implements ModuleDesc {\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ModuleDesc[%s]\", moduleName());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDescImpl.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A nominal descriptor for a {@code Package} constant.\n+ *\n+ * <p>\n+ * To create a {@link PackageDesc} for a package,\n+ * use the {@link #of(String)} or {@link #ofInternalName(String)} method.\n+ *\n+ * @jvms 4.4.12 The CONSTANT_Package_info Structure\n+ * @since 21\n+ *\/\n+public sealed interface PackageDesc\n+        permits PackageDescImpl {\n+\n+    \/**\n+     * Returns a {@link PackageDesc} for a package,\n+     * given the name of the package, such as {@code \"java.lang\"}.\n+     *\n+     * @param name the fully qualified (dot-separated) package name\n+     * @return a {@link PackageDesc} describing the desired package\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     * @jls 6.5.3 Module Names and Package Names\n+     * @see PackageDesc#ofInternalName(String)\n+     *\/\n+    static PackageDesc of(String name) {\n+        ConstantUtils.validateBinaryPackageName(requireNonNull(name));\n+        return new PackageDescImpl(ConstantUtils.binaryToInternal(name));\n+    }\n+\n+    \/**\n+     * Returns a {@link PackageDesc} for a package,\n+     * given the name of the package in internal form,\n+     * such as {@code \"java\/lang\"}.\n+     *\n+     * @param name the fully qualified package name, in internal\n+     * (slash-separated) form\n+     * @return a {@link PackageDesc} describing the desired package\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     * @jvms 4.2.1 Binary Class and Interface Names\n+     * @jvm 4.2.3 Module and Package Names\n+     * @see PackageDesc#of(String)\n+     *\/\n+    static PackageDesc ofInternalName(String name) {\n+        ConstantUtils.validateInternalPackageName(requireNonNull(name));\n+        return new PackageDescImpl(name);\n+    }\n+\n+    \/**\n+     * Returns the fully qualified (slash-separated) package name in internal form\n+     * of this {@link PackageDesc}.\n+     *\n+     * @return the package name in internal form, or the empty string for the\n+     * unnamed package\n+     * @see PackageDesc#packageName()\n+     *\/\n+    String packageInternalName();\n+\n+    \/**\n+     * Returns the fully qualified (dot-separated) package name\n+     * of this {@link PackageDesc}.\n+     *\n+     * @return the package name, or the empty string for the\n+     * unnamed package\n+     * @see PackageDesc#packageInternalName()\n+     *\/\n+    default String packageName() {\n+        return ConstantUtils.internalToBinary(packageInternalName());\n+    }\n+\n+    \/**\n+     * Compare the specified object with this descriptor for equality.\n+     * Returns {@code true} if and only if the specified object is\n+     * also a {@linkp PackageDesc} and both describe the same package.\n+     *\n+     * @param o the other object\n+     * @return whether this descriptor is equal to the other object\n+     *\/\n+    @Override\n+    boolean equals(Object o);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDesc.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+\/*\n+ * Implementation of {@code PackageDesc}\n+ * @param packageInternalName must have been validated\n+ *\/\n+record PackageDescImpl(String packageInternalName) implements PackageDesc {\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"PackageDesc[%s]\", packageName());\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDescImpl.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -92,0 +92,5 @@\n+ * <p>Other members of this package are {@link ModuleDesc}\n+ * and  {@link PackageDesc}. They represent module and package\n+ * info structures, suitable for describing modules and their content in bytecode\n+ * reading and writing APIs.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/package-info.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Testing ModuleDesc.\n+ * @run junit ModuleDescTest\n+ *\/\n+import java.lang.constant.ModuleDesc;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ModuleDescTest {\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"abc\\\\\", \"ab\\\\c\", \"\\u0000\", \"\\u0001\", \"\\u001e\", \"\\u001f\"})\n+    public void testInvalidModuleNames(String mdl) {\n+        assertThrows(IllegalArgumentException.class, () -> ModuleDesc.of(mdl));\n+    }\n+\n+    @Test\n+    public void testNullModuleName() {\n+        assertThrows(NullPointerException.class, () -> ModuleDesc.of(null));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"a\\\\\\\\b\", \"a.b\/c\", \"a\\\\@b\\\\: c\", \"\"})\n+    public void testValidModuleNames(String mdl) {\n+        assertEquals(ModuleDesc.of(mdl), ModuleDesc.of(mdl));\n+        assertEquals(ModuleDesc.of(mdl).moduleName(), mdl);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/constant\/ModuleDescTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n@@ -51,0 +51,5 @@\n+    @Test\n+    void testNullInternalPackageNames() {\n+        assertThrows(NullPointerException.class, () -> PackageDesc.ofInternalName(null));\n+    }\n+\n@@ -53,0 +58,1 @@\n+        assertEquals(PackageDesc.of(\"\"), PackageDesc.ofInternalName(\"\"));\n","filename":"test\/jdk\/java\/lang\/constant\/PackageDescTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"previous_filename":"test\/jdk\/jdk\/classfile\/PackageDescTest.java","status":"copied"}]}