{"files":[{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A nominal descriptor for a {@code Module} constant.\n+ *\n+ * <p>To create a {@linkplain ModuleDesc} for a module, use {@link #of}.\n+ *\n+ * @since 21\n+ *\/\n+public sealed interface ModuleDesc\n+        permits ModuleDescImpl {\n+\n+    \/**\n+     * Returns a {@linkplain ModuleDesc} for a module,\n+     * given the name of the module.\n+     *\n+     * <p>{@jvms 4.2.3} Module names are not encoded in \"internal form\" like\n+     * class and interface names, that is, the ASCII periods (.) that separate\n+     * the identifiers in a module name are not replaced by ASCII forward\n+     * slashes (\/).\n+     *\n+     * <p>Module names may be drawn from the entire Unicode codespace, subject\n+     * to the following constraints:\n+     * <ul>\n+     * <li>A module name must not contain any code point in the range\n+     * '&#92;u0000' to '&#92;u001F' inclusive.\n+     * <li>The ASCII backslash (\\) is reserved for use as an escape character in\n+     * module names. It must not appear in a module name unless it is followed\n+     * by an ASCII backslash, an ASCII colon (:), or an ASCII at-sign (@).\n+     * The ASCII character sequence \\\\ may be used to encode a backslash in a\n+     * module name.\n+     * <li>The ASCII colon (:) and at-sign (@) are reserved for future use in\n+     * module names.\n+     * They must not appear in module names unless they are escaped.\n+     * The ASCII character sequences \\: and \\@ may be used to encode a colon and\n+     * an at-sign in a module name.\n+     * <\/ul>\n+     * @param name module name\n+     * @return a {@linkplain ModuleDesc} describing the desired module\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     *\/\n+    static ModuleDesc of(String name) {\n+        ModuleDescImpl.validateModuleName(requireNonNull(name));\n+        return new ModuleDescImpl(name);\n+    }\n+\n+    \/**\n+     * Returns the module name of this {@linkplain ModuleDesc}.\n+     *\n+     * @return the module name\n+     *\/\n+    String moduleName();\n+\n+    \/**\n+     * Compare the specified object with this descriptor for equality.  Returns\n+     * {@code true} if and only if the specified object is also a\n+     * {@linkplain ModuleDesc} and both describe the same module.\n+     *\n+     * @param o the other object\n+     * @return whether this descriptor is equal to the other object\n+     *\/\n+    @Override\n+    boolean equals(Object o);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDesc.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+record ModuleDescImpl(String moduleName) implements ModuleDesc {\n+\n+    \/**\n+     * Validates the correctness of a module name. In particular checks for the presence of\n+     * invalid characters in the name.\n+     *\n+     * {@jvms 4.2.3} Module and Package Names\n+     *\n+     * @param name the module name\n+     * @return the module name passed if valid\n+     * @throws IllegalArgumentException if the module name is invalid\n+     *\/\n+    public static String validateModuleName(String name) {\n+        for (int i=name.length() - 1; i >= 0; i--) {\n+            char ch = name.charAt(i);\n+            if ((ch >= '\\u0000' && ch <= '\\u001F')\n+            || ((ch == '\\\\' || ch == ':' || ch =='@') && (i == 0 || name.charAt(--i) != '\\\\')))\n+                throw new IllegalArgumentException(\"Invalid module name: \" + name);\n+        }\n+        return name;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDescImpl.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.constant;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+\/**\n+ * A nominal descriptor for a {@code Package} constant.\n+ *\n+ * <p>To create a {@linkplain PackageDesc} for a package, use {@link #of} or\n+ * {@link #ofInternalName(String)}.\n+ *\n+ * @since 21\n+ *\/\n+public sealed interface PackageDesc\n+        permits PackageDescImpl {\n+\n+    \/**\n+     * Returns a {@linkplain PackageDesc} for a package,\n+     * given the name of the package, such as {@code \"java.lang\"}.\n+     * <p>\n+     * {@jls 13.1}\n+     *\n+     * @param name the fully qualified (dot-separated) binary package name\n+     * @return a {@linkplain PackageDesc} describing the desired package\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     *\/\n+    static PackageDesc of(String name) {\n+        PackageDescImpl.validateBinaryPackageName(requireNonNull(name));\n+        return new PackageDescImpl(PackageDescImpl.binaryToInternal(name));\n+    }\n+\n+    \/**\n+     * Returns a {@linkplain PackageDesc} for a package,\n+     * given the name of the package in internal form,\n+     * such as {@code \"java\/lang\"}.\n+     * <p>\n+     * {@jvms 4.2.1} In this internal form, the ASCII periods (.) that normally\n+     * separate the identifiers\n+     * which make up the binary name are replaced by ASCII forward slashes (\/).\n+     * @param name the fully qualified class name, in internal (slash-separated)\n+     * form\n+     * @return a {@linkplain PackageDesc} describing the desired package\n+     * @throws NullPointerException if the argument is {@code null}\n+     * @throws IllegalArgumentException if the name string is not in the\n+     * correct format\n+     *\/\n+    static PackageDesc ofInternalName(String name) {\n+        PackageDescImpl.validateInternalPackageName(requireNonNull(name));\n+        return new PackageDescImpl(name);\n+    }\n+\n+    \/**\n+     * Returns the fully qualified (slash-separated) internal package name\n+     * of this {@linkplain PackageDesc}.\n+     *\n+     * @return the package name, or the empty string for the\n+     * default package\n+     *\/\n+    String packageInternalName();\n+\n+    \/**\n+     * Returns the fully qualified (dot-separated) binary package name\n+     * of this {@linkplain PackageDesc}.\n+     *\n+     * @return the package name, or the empty string for the\n+     * default package\n+     *\/\n+    default String packageName() {\n+        return PackageDescImpl.internalToBinary(packageInternalName());\n+    }\n+\n+    \/**\n+     * Compare the specified object with this descriptor for equality.  Returns\n+     * {@code true} if and only if the specified object is also a\n+     * {@linkplain PackageDesc} and both describe the same package.\n+     *\n+     * @param o the other object\n+     * @return whether this descriptor is equal to the other object\n+     *\/\n+    @Override\n+    boolean equals(Object o);\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDesc.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package jdk.internal.classfile.impl;\n+package java.lang.constant;\n@@ -27,3 +27,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n-\n-public record PackageDescImpl(String packageInternalName) implements PackageDesc {\n+record PackageDescImpl(String packageInternalName) implements PackageDesc {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDescImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/PackageDescImpl.java","status":"copied"},{"patch":"@@ -92,0 +92,5 @@\n+ * <p>Another members of this package are {@link java.lang.constant.ModuleDesc}\n+ * and  {@link java.lang.constant.PackageDesc}. They represent module and package\n+ * info structures, suitable for describing modules and their content in bytecode\n+ * reading and writing APIs.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/package-info.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n","filename":"test\/jdk\/java\/lang\/constant\/ModuleDescTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/jdk\/classfile\/ModuleDescTest.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"test\/jdk\/java\/lang\/constant\/PackageDescTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/jdk\/classfile\/PackageDescTest.java","status":"copied"}]}