{"files":[{"patch":"@@ -78,0 +78,54 @@\n+    \/**\n+     * Validates the correctness of a binary package name. In particular checks for the presence of\n+     * invalid characters in the name.\n+     *\n+     * @param name the package name\n+     * @return the package name passed if valid\n+     * @throws IllegalArgumentException if the package name is invalid\n+     *\/\n+    public static String validateBinaryPackageName(String name) {\n+        for (int i=0; i<name.length(); i++) {\n+            char ch = name.charAt(i);\n+            if (ch == ';' || ch == '[' || ch == '\/')\n+                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n+        }\n+        return name;\n+    }\n+\n+    \/**\n+     * Validates the correctness of an internal package name.\n+     * In particular checks for the presence of invalid characters in the name.\n+     *\n+     * @param name the package name\n+     * @return the package name passed if valid\n+     * @throws IllegalArgumentException if the package name is invalid\n+     *\/\n+    public static String validateInternalPackageName(String name) {\n+        for (int i=0; i<name.length(); i++) {\n+            char ch = name.charAt(i);\n+            if (ch == ';' || ch == '[' || ch == '.')\n+                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n+        }\n+        return name;\n+    }\n+\n+    \/**\n+     * Validates the correctness of a module name. In particular checks for the presence of\n+     * invalid characters in the name.\n+     *\n+     * {@jvms 4.2.3} Module and Package Names\n+     *\n+     * @param name the module name\n+     * @return the module name passed if valid\n+     * @throws IllegalArgumentException if the module name is invalid\n+     *\/\n+    public static String validateModuleName(String name) {\n+        for (int i=name.length() - 1; i >= 0; i--) {\n+            char ch = name.charAt(i);\n+            if ((ch >= '\\u0000' && ch <= '\\u001F')\n+            || ((ch == '\\\\' || ch == ':' || ch =='@') && (i == 0 || name.charAt(--i) != '\\\\')))\n+                throw new IllegalArgumentException(\"Invalid module name: \" + name);\n+        }\n+        return name;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * A nominal descriptor for a {@code Module} constant.\n+ * A nominal descriptor for a {@code Module} constant {@jvms 4.4.11}.\n@@ -71,1 +71,1 @@\n-        ModuleDescImpl.validateModuleName(requireNonNull(name));\n+        ConstantUtils.validateModuleName(requireNonNull(name));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,20 +28,0 @@\n-\n-    \/**\n-     * Validates the correctness of a module name. In particular checks for the presence of\n-     * invalid characters in the name.\n-     *\n-     * {@jvms 4.2.3} Module and Package Names\n-     *\n-     * @param name the module name\n-     * @return the module name passed if valid\n-     * @throws IllegalArgumentException if the module name is invalid\n-     *\/\n-    public static String validateModuleName(String name) {\n-        for (int i=name.length() - 1; i >= 0; i--) {\n-            char ch = name.charAt(i);\n-            if ((ch >= '\\u0000' && ch <= '\\u001F')\n-            || ((ch == '\\\\' || ch == ':' || ch =='@') && (i == 0 || name.charAt(--i) != '\\\\')))\n-                throw new IllegalArgumentException(\"Invalid module name: \" + name);\n-        }\n-        return name;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ModuleDescImpl.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * A nominal descriptor for a {@code Package} constant.\n+ * A nominal descriptor for a {@code Package} constant {@jvms 4.4.12}.\n@@ -53,2 +53,2 @@\n-        PackageDescImpl.validateBinaryPackageName(requireNonNull(name));\n-        return new PackageDescImpl(PackageDescImpl.binaryToInternal(name));\n+        ConstantUtils.validateBinaryPackageName(requireNonNull(name));\n+        return new PackageDescImpl(ConstantUtils.binaryToInternal(name));\n@@ -73,1 +73,1 @@\n-        PackageDescImpl.validateInternalPackageName(requireNonNull(name));\n+        ConstantUtils.validateInternalPackageName(requireNonNull(name));\n@@ -94,1 +94,1 @@\n-        return PackageDescImpl.internalToBinary(packageInternalName());\n+        return ConstantUtils.internalToBinary(packageInternalName());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDesc.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,42 +28,0 @@\n-\n-    \/**\n-     * Validates the correctness of a binary package name. In particular checks for the presence of\n-     * invalid characters in the name.\n-     *\n-     * @param name the package name\n-     * @return the package name passed if valid\n-     * @throws IllegalArgumentException if the package name is invalid\n-     *\/\n-    public static String validateBinaryPackageName(String name) {\n-        for (int i=0; i<name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '\/')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n-    }\n-\n-    \/**\n-     * Validates the correctness of an internal package name.\n-     * In particular checks for the presence of invalid characters in the name.\n-     *\n-     * @param name the package name\n-     * @return the package name passed if valid\n-     * @throws IllegalArgumentException if the package name is invalid\n-     *\/\n-    public static String validateInternalPackageName(String name) {\n-        for (int i=0; i<name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '.')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n-    }\n-\n-    public static String internalToBinary(String name) {\n-        return name.replace('\/', '.');\n-    }\n-\n-    public static String binaryToInternal(String name) {\n-        return name.replace('.', '\/');\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDescImpl.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"modified"}]}