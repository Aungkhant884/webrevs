{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.time.Instant;\n@@ -29,0 +30,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -33,0 +35,3 @@\n+import jdk.jfr.EventType;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.consumer.MetadataEvent;\n@@ -66,0 +71,2 @@\n+        testSetStartTime();\n+        testSetEndTime();\n@@ -169,1 +176,0 @@\n-\n@@ -201,0 +207,28 @@\n+\n+    private static void testSetEndTime() throws Exception {\n+        Instant t = Instant.now().plus(Duration.ofDays(1));\n+        try (RemoteRecordingStream stream = new RemoteRecordingStream(CONNECTION)) {\n+            stream.setEndTime(t);\n+            stream.onEvent(e -> {\n+                stream.close();\n+            });\n+            stream.startAsync();\n+            TestDelegatedEvent e = new TestDelegatedEvent();\n+            e.commit();\n+            stream.awaitTermination();\n+        }\n+    }\n+\n+    private static void testSetStartTime() throws Exception {\n+        Instant t = Instant.now().minus(Duration.ofDays(1));\n+        try (RemoteRecordingStream stream = new RemoteRecordingStream(CONNECTION)) {\n+            stream.setStartTime(t);\n+            stream.onEvent(e -> {\n+                stream.close();\n+            });\n+            stream.startAsync();\n+            TestDelegatedEvent e = new TestDelegatedEvent();\n+            e.commit();\n+            stream.awaitTermination();\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestDelegated.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jmx.streaming;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.function.Function;\n+\n+import jdk.jfr.Configuration;\n+import jdk.jfr.EventType;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.consumer.MetadataEvent;\n+import jdk.management.jfr.RemoteRecordingStream;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @summary Sanity tests RemoteRecordingStream::onMetadata\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jmx.streaming.TestMetadataEvent\n+ *\/\n+public class TestMetadataEvent {\n+\n+    public static void main(String... args) throws Exception {\n+        var conn = ManagementFactory.getPlatformMBeanServer();\n+        var q = new ArrayBlockingQueue<MetadataEvent>(1);\n+        try (RemoteRecordingStream e = new RemoteRecordingStream(conn)) {\n+            e.onMetadata(q::offer);\n+            e.startAsync();\n+            MetadataEvent event = q.take();\n+            assertEventTypes(FlightRecorder.getFlightRecorder().getEventTypes(), event.getEventTypes());\n+            assertConfigurations(Configuration.getConfigurations(), event.getConfigurations());\n+        }\n+    }\n+\n+    private static void assertEventTypes(List<EventType> expected, List<EventType> eventTypes) throws Exception {\n+        assertListProperty(expected, eventTypes, EventType::getName);\n+    }\n+\n+    private static void assertConfigurations(List<Configuration> expected, List<Configuration> configurations) throws Exception {\n+        assertListProperty(expected, configurations, Configuration::getName);\n+    }\n+\n+    private static <T, R> void assertListProperty(List<T> expected, List<T> result, Function<T, R> mapper) throws Exception {\n+        var a1 = new HashSet<R>();\n+        a1.addAll(expected.stream().map(mapper).toList());\n+        var a2 = new HashSet<R>();\n+        a2.addAll(result.stream().map(mapper).toList());\n+        if (!a1.equals(a2)) {\n+            throw new Exception(\"Result not as expected!\\nexpected = \" + a1 + \"\\nresult= \" + a2);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestMetadataEvent.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}