{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -40,2 +41,1 @@\n- * A class to write {@link HtmlDocument} objects on a background thread,\n- * using an {@link ExecutorService}.\n+ * A class to write {@link HtmlDocument} objects using tasks of an {@link ExecutorService}.\n@@ -58,1 +58,1 @@\n-    private static final int BACKGROUND_THREADS = 1;\n+    private static final int DEFAULT_BACKGROUND_THREADS = 1;\n@@ -67,1 +67,58 @@\n-    private static final int QUEUED_TASKS = 0;\n+    private static final int DEFAULT_QUEUED_TASKS = DEFAULT_BACKGROUND_THREADS;\n+\n+    \/**\n+     * Options to configure the background writer.\n+     * This is an internal class, for testing only.\n+     * The default options should be sufficient for normal use.\n+     *\/\n+    static class Options {\n+        public boolean enabled = true;\n+        public boolean verbose = false;\n+        public int backgroundThreads = DEFAULT_BACKGROUND_THREADS;\n+        public int queuedTasks = DEFAULT_QUEUED_TASKS;\n+\n+        public boolean process(Messages messages, String opts) {\n+            boolean ok = true;\n+            for (String opt : opts.split(\",\")) {\n+                String value;\n+                int sep = opt.indexOf(\"=\");\n+                if (sep == -1) {\n+                    value = null;\n+                } else {\n+                    value = opt.substring(sep + 1);\n+                    opt = opt.substring(0, sep);\n+                }\n+                switch (opt) {\n+                    case \"off\" -> enabled = false;\n+                    case \"verbose\" -> verbose = true;\n+                    case \"queue\" -> {\n+                        if (value == null) {\n+                            messages.error(\"doclet.bgWriter.no_value\", opt);\n+                            ok = false;\n+                        } else if (value.matches(\"[0-9]+\")) { \/\/ 0 or more\n+                            queuedTasks = Integer.parseInt(value);\n+                        } else {\n+                            messages.error(\"doclet.bgWriter.bad_value\", opt, value);\n+                            ok = false;\n+                        }\n+                    }\n+                    case \"threads\" -> {\n+                        if (value == null) {\n+                            messages.error(\"doclet.bgWriter.no_value\", opt);\n+                            ok = false;\n+                        } else if (value.matches(\"[1-9]+\")) { \/\/ 1 or more\n+                            backgroundThreads = Integer.parseInt(value);\n+                        } else {\n+                            messages.error(\"doclet.bgWriter.bad_value\", opt, value);\n+                            ok = false;\n+                        }\n+                    }\n+                    default -> {\n+                        messages.warning(\"doclet.bgWriter.unknown_option\", opt);\n+                        ok = false;\n+                    }\n+                }\n+            }\n+            return ok;\n+        }\n+    }\n@@ -78,2 +135,1 @@\n-     * The main executor for the background tasks.\n-     * It uses a fixed thread pool of {@value #BACKGROUND_THREADS} threads.\n+     * The executor for the background tasks.\n@@ -91,0 +147,14 @@\n+    \/\/ The following members are just used to help monitor execution.\n+\n+    \/**\n+     * The options used to configure the writer.\n+     *\/\n+    private final Options options;\n+\n+    \/**\n+     * Indicates whether tasks have been submitted to the executor.\n+     * Set when the first task is scheduled, at which point {@link #start}\n+     * will be initialized.\n+     *\/\n+    private boolean started;\n+\n@@ -92,1 +162,2 @@\n-     * The time at which the writer is initialized.\n+     * The time, in nanos, at which the writer accepts the first task.\n+     * Used to help compute the utilization of the threads.\n@@ -97,1 +168,1 @@\n-     * The cumulative time spent writing documents\n+     * The cumulative time, in nanos, spent writing documents.\n@@ -99,1 +170,1 @@\n-    private double taskBusy = 0;\n+    private final AtomicLong taskBusy = new AtomicLong(0);\n@@ -103,1 +174,1 @@\n-     * background thread.\n+     * executor.\n@@ -105,1 +176,1 @@\n-    private boolean verbose;\n+    private final boolean verbose;\n@@ -112,2 +183,2 @@\n-     * {@value #BACKGROUND_THREADS} background threads, and a blocking queue of up to\n-     * {@value #QUEUED_TASKS} queued tasks.\n+     * {@link Options#backgroundThreads} background threads and a queue that is\n+     * restricted to {@link Options#queuedTasks} queued tasks.\n@@ -116,1 +187,1 @@\n-     * @param verbose  if true, writes out debugging info about the utilization of the background thread\n+     * @param options  the options to configure the writer\n@@ -118,1 +189,1 @@\n-    public BackgroundWriter(Messages messages, boolean verbose) {\n+    public BackgroundWriter(Messages messages, Options options) {\n@@ -120,4 +191,4 @@\n-        this.verbose = verbose;\n-        executor = Executors.newFixedThreadPool(BACKGROUND_THREADS);\n-        semaphore = new Semaphore(QUEUED_TASKS + BACKGROUND_THREADS);\n-        start = System.currentTimeMillis();\n+        this.verbose = options.verbose;\n+        executor = Executors.newFixedThreadPool(options.backgroundThreads);\n+        semaphore = new Semaphore(options.queuedTasks + options.backgroundThreads);\n+        this.options = options;\n@@ -135,0 +206,5 @@\n+        if (!started) {\n+            start = System.nanoTime();\n+            started = true;\n+        }\n+\n@@ -140,1 +216,1 @@\n-                        long taskStart  = System.currentTimeMillis();\n+                        long taskStart  = System.nanoTime();\n@@ -142,2 +218,2 @@\n-                        long taskEnd  = System.currentTimeMillis();\n-                        taskBusy += (taskEnd - taskStart);\n+                        long taskEnd  = System.nanoTime();\n+                        taskBusy.addAndGet(taskEnd - taskStart);\n@@ -165,5 +241,6 @@\n-            executor.awaitTermination(5, TimeUnit.MINUTES);\n-\n-            if (verbose) {\n-                double elapsed = System.currentTimeMillis() - start;\n-                messages.notice(\"doclet.bgWriter.utilization\", ((int) (taskBusy \/ elapsed * 100)) + \"%\");\n+            boolean ok = executor.awaitTermination(5, TimeUnit.MINUTES);\n+            if (ok && started && verbose) {\n+                double elapsed = System.nanoTime() - start;\n+                double utilization = ((double) taskBusy.get()) \/ options.backgroundThreads \/ elapsed * 100;\n+                messages.noticeAlways(\"doclet.bgWriter.utilization\",\n+                        options.backgroundThreads, options.queuedTasks, ((int) utilization) + \"%\");\n@@ -184,2 +261,2 @@\n-            case READ:\n-                messages.error(\"doclet.exception.read.file\",\n+            case READ ->\n+                    messages.error(\"doclet.exception.read.file\",\n@@ -187,1 +264,0 @@\n-                break;\n@@ -189,2 +265,2 @@\n-            case WRITE:\n-                messages.error(\"doclet.exception.write.file\",\n+            case WRITE ->\n+                    messages.error(\"doclet.exception.write.file\",\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/BackgroundWriter.java","additions":108,"deletions":32,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -208,4 +208,0 @@\n-\n-        if (options.isBackgroundWriterEnabled()) {\n-            backgroundWriter = new BackgroundWriter(messages, options.isBackgroundWriterVerbose());\n-        }\n@@ -277,0 +273,6 @@\n+\n+        BackgroundWriter.Options bgWriterOptions = options.getBackgroundWriterOptions();\n+        if (bgWriterOptions.enabled) {\n+            backgroundWriter = new BackgroundWriter(messages, bgWriterOptions);\n+        }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Locale;\n@@ -184,1 +183,4 @@\n-    private boolean backgroundWriterEnabled = true;\n+    \/**\n+     * Values for the hidden {@code --background-writer} option.\n+     *\/\n+    private BackgroundWriter.Options backgroundWriterOptions = new BackgroundWriter.Options();\n@@ -186,1 +188,0 @@\n-    private boolean backgroundWriterVerbose = false;\n@@ -460,12 +461,2 @@\n-                        \/\/ if we add more options, we should introduce BackgroundWriter.Options\n-                        String flags = args.get(0);\n-                        for (String f : flags.split(\",\")) {\n-                            switch (f.toLowerCase(Locale.US)) {\n-                                case \"off\" -> backgroundWriterEnabled = false;\n-                                case \"verbose\" -> backgroundWriterVerbose = true;\n-                                default -> {\n-                                    messages.warning(\"doclet.bgWriter.unknown_option\", f);\n-                                }\n-                            }\n-                        }\n-                        return true;\n+                        \/\/ delegate to BackgroundWriter\n+                        return getBackgroundWriterOptions().process(messages, args.get(0));\n@@ -705,9 +696,0 @@\n-\n-    \/**\n-     * Whether or not to use the background writer.\n-     * Set by command-lione option {@code --background-writer}.\n-     *\/\n-    public boolean isBackgroundWriterEnabled() {\n-        return backgroundWriterEnabled;\n-    }\n-\n@@ -715,2 +697,1 @@\n-     * Whether or not the background writer should be verbose.\n-     * Set by command-lione option {@code --background-writer}.\n+     * Default or parsed values for the command-line option {@code --background-writer}.\n@@ -718,2 +699,2 @@\n-    public boolean isBackgroundWriterVerbose() {\n-        return backgroundWriterVerbose;\n+    public BackgroundWriter.Options getBackgroundWriterOptions() {\n+        return backgroundWriterOptions;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlOptions.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -539,0 +539,6 @@\n+doclet.bgWriter.no_value=\\\n+    No value for ''--background-writer'' option ''{0}''\n+\n+doclet.bgWriter.bad_value=\\\n+    Bad value for ''--background-writer'' option ''{0}'': {1}\n+\n@@ -540,1 +546,1 @@\n-    Background writer utilization: {0}\n+    Background writer: threads: {0}, queue: {1}, utilization: {2}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+     * The message is suppressed if the {@code -quiet} option is set.\n@@ -151,0 +152,10 @@\n+    \/**\n+     * Reports an informational notice to the doclet's reporter.\n+     * The message is not suppressed if the {@code -quiet} option is set.\n+     *\n+     * @param key the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message.\n+     *\/\n+    public void noticeAlways(String key, Object... args) {\n+        report(NOTE, resources.getText(key, args));\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Messages.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}