{"files":[{"patch":"@@ -811,2 +811,0 @@\n-  \/\/ We do not check the EnableThreadSMRExtraValidityChecks option\n-  \/\/ for this includes() call because JVM\/TI's spec is tighter.\n@@ -854,2 +852,0 @@\n-  \/\/ We do not check the EnableThreadSMRExtraValidityChecks option\n-  \/\/ for this includes() call because JVM\/TI's spec is tighter.\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -786,8 +786,18 @@\n-    ThreadsListHandle tlh;\n-    JavaThread* thr = nullptr;\n-    oop java_thread = nullptr;\n-    (void) tlh.cv_internal_thread_to_JavaThread(jthread, &thr, &java_thread);\n-    if (java_thread != nullptr) {\n-      \/\/ This is a valid oop.\n-      if (thr != nullptr) {\n-        \/\/ The JavaThread is alive.\n+    \/\/ ThreadsListHandle.cv_internal_thread_to_JavaThread() would normally\n+    \/\/ be used for this conversion from jthread -> JavaThread*, but we've\n+    \/\/ seen performance issues with very large numbers of threads due to\n+    \/\/ the ThreadsListHandle.includes() call in the conversion function.\n+    \/\/\n+    \/\/ So we verify that java_lang_Thread::thread(thread_oop) != nullptr\n+    \/\/ before and after creating tlh below and that lets us know that thr\n+    \/\/ is protected by tlh without a tlh.includes() call.\n+    \/\/\n+    oop thread_oop = JNIHandles::resolve_non_null(jthread);\n+    if (java_lang_Thread::thread(thread_oop) != nullptr) {\n+      \/\/ Try to capture the live JavaThread in a ThreadsListHandle:\n+      ThreadsListHandle tlh;\n+      JavaThread* thr = nullptr;\n+      if ((thr = java_lang_Thread::thread(thread_oop)) != nullptr) {\n+        \/\/ The still live JavaThread is protected by the ThreadsListHandle\n+        \/\/ so it is safe to access.\n+        assert(tlh.includes(thr), \"must be\");\n@@ -798,3 +808,2 @@\n-    }\n-  } \/\/ ThreadsListHandle is destroyed here.\n-\n+    } \/\/ ThreadsListHandle is destroyed here.\n+  }\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -952,3 +952,0 @@\n-  product(bool, EnableThreadSMRExtraValidityChecks, true, DIAGNOSTIC,       \\\n-             \"Enable Thread SMR extra validity checks\")                     \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1659,1 +1659,0 @@\n-  java_lang_Thread::set_thread(thread_oop(), this);\n@@ -1675,0 +1674,3 @@\n+  \/\/ Publish the JavaThread* in java.lang.Thread after the JavaThread* is\n+  \/\/ on a ThreadsList.\n+  java_lang_Thread::set_thread(thread_oop(), this);\n@@ -2098,3 +2100,0 @@\n-\n-  java_lang_Thread::set_thread(thread_oop(), target); \/\/ isAlive == true now\n-\n@@ -2113,0 +2112,3 @@\n+  \/\/ Publish the JavaThread* in java.lang.Thread after the JavaThread* is\n+  \/\/ on a ThreadsList.\n+  java_lang_Thread::set_thread(thread_oop(), target); \/\/ isAlive == true now\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -820,2 +820,3 @@\n-    \/\/ The java.lang.Thread does not contain a JavaThread * so it has\n-    \/\/ not yet run or it has died.\n+    \/\/ The java.lang.Thread does not contain a JavaThread* so it has not\n+    \/\/ run enough to be put on a ThreadsList or it has exited enough to\n+    \/\/ make it past ensure_join() where the JavaThread* is cleared.\n@@ -827,4 +828,4 @@\n-    \/\/ jthread is not for the current JavaThread so have to verify\n-    \/\/ the JavaThread * against the ThreadsList.\n-    if (EnableThreadSMRExtraValidityChecks && !includes(java_thread)) {\n-      \/\/ Not on the JavaThreads list so it is not alive.\n+    \/\/ java_thread is not the current JavaThread so we have to verify it\n+    \/\/ against the ThreadsList:\n+    if (!includes(java_thread)) {\n+      \/\/ Not on this ThreadsList so it is not protected.\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}