{"files":[{"patch":"@@ -789,1 +789,3 @@\n-    \/\/ early life stage of the JavaThread* is protected.\n+    \/\/ early life stage of the JavaThread* is protected. We use acquire\n+    \/\/ here to ensure that if we see a non-nullptr value, then we also\n+    \/\/ see the main ThreadsList updates from the JavaThread* being added.\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -847,1 +847,1 @@\n-    _protected_java_thread = java_lang_Thread::thread_acquire(thread_oop);\n+    _protected_java_thread = java_lang_Thread::thread(thread_oop);\n@@ -851,1 +851,2 @@\n-    \/\/ we know that _tlh protects the JavaThread*.\n+    \/\/ we know that _tlh protects the JavaThread*. The underlying atomic\n+    \/\/ load is sufficient (no acquire necessary here).\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -348,1 +348,3 @@\n-  \/\/ the embedded ThreadsListHandle is constructed.\n+  \/\/ the embedded ThreadsListHandle is constructed. We use acquire there\n+  \/\/ to ensure that if we see a non-nullptr value, then we also see the\n+  \/\/ main ThreadsList updates from the JavaThread* being added.\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}