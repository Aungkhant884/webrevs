{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,1 @@\n+        --add-exports java.base\/jdk.internal.event=ALL-UNNAMED \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.event.SocketReadEvent;\n+import jdk.internal.event.SocketWriteEvent;\n@@ -42,0 +44,1 @@\n+\n@@ -1098,0 +1101,14 @@\n+            if (!SocketReadEvent.enabled()) {\n+                return implRead(b, off, len);\n+            }\n+            int nbytes = 0;\n+            long start = SocketReadEvent.timestamp();\n+            try {\n+                nbytes = implRead(b, off, len);\n+            } finally {\n+                SocketReadEvent.checkForCommit(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n+            }\n+            return nbytes;\n+        }\n+\n+        private int implRead(byte[] b, int off, int len) throws IOException {\n@@ -1111,0 +1128,10 @@\n+\n+        private int getSoTimeout() {\n+            try {\n+                return parent.getSoTimeout();\n+            } catch (Throwable t) {\n+                \/\/ ignored - avoiding exceptions in jfr event data gathering\n+            }\n+            return 0;\n+        }\n+\n@@ -1194,0 +1221,14 @@\n+            if (!SocketWriteEvent.enabled()) {\n+                implWrite(b, off, len);\n+                return;\n+            }\n+            long start = 0;\n+            try {\n+                start = SocketWriteEvent.timestamp();\n+                implWrite(b, off, len);\n+            } finally {\n+                SocketWriteEvent.checkForCommit(start, len, parent.getRemoteSocketAddress());\n+            }\n+        }\n+\n+        private void implWrite(byte[] b, int off, int len) throws IOException {\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for socket read operations.  This event is mirrored in\n+ * {@code jdk.jfr.events.SocketReadEvent } where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, long, long, boolean)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class SocketReadEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public long timeout;\n+    public long bytesRead;\n+    public boolean endOfStream;\n+\n+    \/**\n+     * Actually commit a socket read event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long, long, boolean)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the transfer\n+     * @param address   remote address of the transfer\n+     * @param port      remote port of the transfer\n+     * @param timeout   timeout setting for the read\n+     * @param bytes     number of bytes that were transferred\n+     * @param endOfStream  has the end of the stream been reached\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, long timeout, long bytes, boolean endOfStream) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if socket read events are enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Execute the standard boilerplate that proceeds a potential call to the machine generated\n+     * commit method.\n+     *\n+     * @param start  the start time\n+     * @param nbytes  how many bytes were transferred\n+     * @param remote  the address of the remote socket\n+     * @param timeout  maximum time to wait\n+     *\/\n+    public static void checkForCommit(long start, long nbytes, SocketAddress remote, long timeout) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            boolean eof = nbytes < 0 ? true : false;\n+            nbytes = nbytes < 0 ? 0 : nbytes;\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), timeout, nbytes, eof);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, timeout, nbytes, eof);\n+            }\n+        }\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnixDomainSocketAddress;\n+\n+\/**\n+ * A JFR event for socket write operations.  This event is mirrored in\n+ * {@code jdk.jfr.events.SocketWriteEvent } where the metadata for the event is\n+ * provided with annotations.  Some of the methods are replaced by generated\n+ * methods when jfr is enabled.  Note that the order of the arguments of the\n+ * {@link #commit(long, long, String, String, int, long)} method\n+ * must be the same as the order of the fields.\n+ *\/\n+public class SocketWriteEvent extends Event {\n+\n+    \/\/ THE ORDER OF THE FOLLOWING FIELDS IS IMPORTANT!\n+    \/\/ The order must match the argument order of the generated commit method.\n+    public String host;\n+    public String address;\n+    public int port;\n+    public long bytesWritten;\n+\n+    \/**\n+     * Actually commit a socket write event.  This is generated automatically.\n+     * The order of the fields must be the same as the parameters in this method.\n+     * {@code commit(..., String, String, int, long)}\n+     *\n+     * @param start     timestamp of the start of the operation\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @param host      remote host of the transfer\n+     * @param address   remote address of the transfer\n+     * @param port      remote port of the transfer\n+     * @param bytes     number of bytes that were transferred\n+     *\/\n+    public static void commit(long start, long duration, String host, String address, int port, long bytes) {\n+        \/\/ Generated by JFR\n+    }\n+\n+    \/**\n+     * Determine if an event should be emitted.  The duration of the operation\n+     * must exceed some threshold in order to commit the event.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @param duration  time in nanoseconds to complete the operation\n+     * @return  true if the event should be commited\n+     *\/\n+    public static boolean shouldCommit(long duration) {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Determine if this kind of event is enabled.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return true if socket write events are enabled, false otherwise\n+     *\/\n+    public static boolean enabled() {\n+        \/\/ Generated by JFR\n+        return false;\n+    }\n+\n+    \/**\n+     * Fetch the current timestamp in nanoseconds.  This method is used\n+     * to determine the start and end of an operation.  The implementation\n+     * of this method is generated automatically if jfr is enabled.\n+     *\n+     * @return  the current timestamp value\n+     *\/\n+    public static long timestamp() {\n+        \/\/ Generated by JFR\n+        return 0L;\n+    }\n+\n+    \/**\n+     * Execute the standard boilerplate that proceeds a potential call to the generated\n+     * commit method.\n+     *\n+     * @param start  the start time\n+     * @param bytesWritten  how many bytes were sent\n+     * @param remote  the address of the remote socket being written to\n+     *\/\n+    public static void checkForCommit(long start, long bytesWritten, SocketAddress remote) {\n+        long duration = timestamp() - start;\n+        if (shouldCommit(duration)) {\n+            long bytes = bytesWritten < 0 ? 0 : bytesWritten;\n+            if (remote instanceof InetSocketAddress isa) {\n+                commit(start, duration, isa.getHostString(), isa.getAddress().getHostAddress(), isa.getPort(), bytes);\n+            } else if (remote instanceof UnixDomainSocketAddress udsa) {\n+                String path = \"[\" + udsa.getPath().toString() + \"]\";\n+                commit(start, duration, \"Unix domain socket\", path, 0, bytes);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,2 @@\n+import jdk.internal.event.SocketReadEvent;\n+import jdk.internal.event.SocketWriteEvent;\n@@ -406,0 +408,14 @@\n+        if (!SocketReadEvent.enabled()) {\n+            return implRead(buf);\n+        }\n+        int nbytes = 0;\n+        long start = SocketReadEvent.timestamp();\n+        try {\n+            nbytes = implRead(buf);\n+        } finally {\n+            SocketReadEvent.checkForCommit(start, nbytes, remoteAddress(), 0);\n+        }\n+        return nbytes;\n+    }\n+\n+    private int implRead(ByteBuffer buf) throws IOException {\n@@ -449,0 +465,16 @@\n+    {\n+        if (!SocketReadEvent.enabled()) {\n+            return implRead(dsts, offset, length);\n+        }\n+        long nbytes = 0;\n+        long start = SocketReadEvent.timestamp();\n+        try {\n+            nbytes = implRead(dsts, offset, length);\n+        } finally {\n+            SocketReadEvent.checkForCommit(start, nbytes, remoteAddress(), 0);\n+        }\n+        return nbytes;\n+    }\n+\n+    private long implRead(ByteBuffer[] dsts, int offset, int length)\n+        throws IOException\n@@ -533,0 +565,14 @@\n+        if (!SocketWriteEvent.enabled()) {\n+            return implWrite(buf);\n+        }\n+        int nbytes = 0;\n+        long start = SocketWriteEvent.timestamp();\n+        try {\n+            nbytes = implWrite(buf);\n+        } finally {\n+            SocketWriteEvent.checkForCommit(start, nbytes, remoteAddress());\n+        }\n+        return nbytes;\n+    }\n+\n+    private int implWrite(ByteBuffer buf) throws IOException {\n@@ -563,0 +609,16 @@\n+    {\n+        if (!SocketWriteEvent.enabled()) {\n+            return implWrite(srcs, offset, length);\n+        }\n+        long nbytes = 0;\n+        long start = SocketWriteEvent.timestamp();\n+        try {\n+            nbytes = implWrite(srcs, offset, length);\n+        } finally {\n+            SocketWriteEvent.checkForCommit(start, nbytes, remoteAddress());\n+        }\n+        return nbytes;\n+    }\n+\n+    private long implWrite(ByteBuffer[] srcs, int offset, int length)\n+        throws IOException\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":63,"deletions":1,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-    public static final EventConfiguration SOCKET_READ = JVMSupport.getConfiguration(SocketReadEvent.class);\n-    public static final EventConfiguration SOCKET_WRITE = JVMSupport.getConfiguration(SocketWriteEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/EventConfigurations.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -40,0 +41,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.SocketReadEvent\")\n@@ -42,3 +44,0 @@\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ commit(..., String, String, int, long, long, boolean)\n-\n@@ -67,3 +66,0 @@\n-    public static void commit(long start, long duration, String host, String address, int port, long timeout, long byteRead, boolean endOfStream) {\n-        \/\/ Generated\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketReadEvent.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import jdk.jfr.internal.MirrorEvent;\n@@ -39,0 +40,1 @@\n+@MirrorEvent(className = \"jdk.internal.event.SocketWriteEvent\")\n@@ -41,3 +43,0 @@\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ commit(..., String, String, int, long)\n-\n@@ -58,3 +57,0 @@\n-    public static void commit(long start, long duration, String host, String address, int port, long bytes) {\n-        \/\/ Generated\n-    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SocketWriteEvent.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,2 @@\n+        SocketReadEvent.class,\n+        SocketWriteEvent.class,\n@@ -103,0 +105,2 @@\n+        jdk.internal.event.SocketReadEvent.class,\n+        jdk.internal.event.SocketWriteEvent.class,\n@@ -121,4 +125,1 @@\n-        FileChannelImplInstrumentor.class,\n-        SocketInputStreamInstrumentor.class,\n-        SocketOutputStreamInstrumentor.class,\n-        SocketChannelImplInstrumentor.class\n+        FileChannelImplInstrumentor.class\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,201 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.net.SocketAddress;\n-import java.net.UnixDomainSocketAddress;\n-import java.nio.ByteBuffer;\n-import jdk.jfr.events.EventConfigurations;\n-import jdk.jfr.events.SocketReadEvent;\n-import jdk.jfr.events.SocketWriteEvent;\n-import jdk.jfr.internal.event.EventConfiguration;\n-\n-\/**\n- * See {@link JITracer} for an explanation of this code.\n- *\/\n-@JIInstrumentationTarget(\"sun.nio.ch.SocketChannelImpl\")\n-final class SocketChannelImplInstrumentor {\n-\n-    private SocketChannelImplInstrumentor() {\n-    }\n-\n-    @JIInstrumentationMethod\n-    public int read(ByteBuffer dst) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_READ;\n-        if (!eventConfiguration.isEnabled()) {\n-            return read(dst);\n-        }\n-        int bytesRead = 0;\n-        long start  = 0;\n-        try {\n-            start = EventConfiguration.timestamp();;\n-            bytesRead = read(dst);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration))  {\n-                SocketAddress remoteAddress = getRemoteAddress();\n-                if (remoteAddress instanceof InetSocketAddress isa) {\n-                    String hostString  = isa.getAddress().toString();\n-                    int delimiterIndex = hostString.lastIndexOf('\/');\n-\n-                    String host = hostString.substring(0, delimiterIndex);\n-                    String address = hostString.substring(delimiterIndex + 1);\n-                    int port = isa.getPort();\n-                    if (bytesRead < 0) {\n-                        SocketReadEvent.commit(start, duration, host, address, port, 0, 0L, true);\n-                    } else {\n-                        SocketReadEvent.commit(start, duration, host, address, port, 0, bytesRead, false);\n-                    }\n-                } else {\n-                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n-                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n-                    if (bytesRead < 0) {\n-                        SocketReadEvent.commit(start, duration, \"Unix domain socket\", path, 0, 0, 0L, true);\n-                    } else {\n-                        SocketReadEvent.commit(start, duration, \"Unix domain socket\", path, 0, 0, bytesRead, false);\n-                    }\n-                }\n-            }\n-        }\n-        return bytesRead;\n-    }\n-\n-    @JIInstrumentationMethod\n-    public long read(ByteBuffer[] dsts, int offset, int length) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_READ;\n-        if (!eventConfiguration.isEnabled()) {\n-            return read(dsts, offset, length);\n-        }\n-        long bytesRead = 0;\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            bytesRead = read(dsts, offset, length);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                SocketAddress remoteAddress = getRemoteAddress();\n-                if (remoteAddress instanceof InetSocketAddress isa) {\n-                    String hostString  = isa.getAddress().toString();\n-                    int delimiterIndex = hostString.lastIndexOf('\/');\n-\n-                    String host = hostString.substring(0, delimiterIndex);\n-                    String address = hostString.substring(delimiterIndex + 1);\n-                    int port = isa.getPort();\n-                    if (bytesRead < 0) {\n-                        SocketReadEvent.commit(start, duration, host, address, port, 0, 0L, true);\n-                    } else {\n-                        SocketReadEvent.commit(start, duration, host, address, port, 0, bytesRead, false);\n-                    }\n-                } else {\n-                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n-                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n-                    if (bytesRead < 0) {\n-                        SocketReadEvent.commit(start, duration, \"Unix domain socket\", path, 0, 0, 0L, true);\n-                    } else {\n-                        SocketReadEvent.commit(start, duration, \"Unix domain socket\", path, 0, 0, bytesRead, false);\n-                    }\n-                }\n-            }\n-        }\n-        return bytesRead;\n-    }\n-\n-    @JIInstrumentationMethod\n-    public int write(ByteBuffer buf) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_WRITE;\n-        if (!eventConfiguration.isEnabled()) {\n-            return write(buf);\n-        }\n-        int bytesWritten = 0;\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            bytesWritten = write(buf);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                long bytes = bytesWritten < 0 ? 0 : bytesWritten;\n-                SocketAddress remoteAddress = getRemoteAddress();\n-                if (remoteAddress instanceof InetSocketAddress isa) {\n-                    String hostString  = isa.getAddress().toString();\n-                    int delimiterIndex = hostString.lastIndexOf('\/');\n-\n-                    String host = hostString.substring(0, delimiterIndex);\n-                    String address = hostString.substring(delimiterIndex + 1);\n-                    int port = isa.getPort();\n-                    SocketWriteEvent.commit(start, duration, host, address, port, bytes);\n-                } else {\n-                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n-                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n-                    SocketWriteEvent.commit(start, duration, \"Unix domain socket\", path, 0, bytes);\n-                }\n-            }\n-        }\n-        return bytesWritten;\n-    }\n-\n-    public SocketAddress getRemoteAddress() throws IOException {\n-        \/\/ gets replaced by call to instrumented class\n-        return null;\n-    }\n-\n-    @JIInstrumentationMethod\n-    public long write(ByteBuffer[] srcs, int offset, int length) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_WRITE;\n-        if (!eventConfiguration.isEnabled()) {\n-            return write(srcs, offset, length);\n-        }\n-        long bytesWritten = 0;\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            bytesWritten = write(srcs, offset, length);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                long bytes = bytesWritten < 0 ? 0 : bytesWritten;\n-                SocketAddress remoteAddress = getRemoteAddress();\n-                if (remoteAddress instanceof InetSocketAddress isa) {\n-                    String hostString  = isa.getAddress().toString();\n-                    int delimiterIndex = hostString.lastIndexOf('\/');\n-\n-                    String host = hostString.substring(0, delimiterIndex);\n-                    String address = hostString.substring(delimiterIndex + 1);\n-                    int port = isa.getPort();\n-                    SocketWriteEvent.commit(start, duration, host, address, port, bytes);\n-                } else {\n-                    UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remoteAddress;\n-                    String path = \"[\" + udsa.getPath().toString() + \"]\";\n-                    SocketWriteEvent.commit(start, duration, \"Unix domain socket\", path, 0, bytes);\n-                }\n-            }\n-        }\n-        return bytesWritten;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/SocketChannelImplInstrumentor.java","additions":0,"deletions":201,"binary":false,"changes":201,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.Socket;\n-\n-import jdk.jfr.events.EventConfigurations;\n-import jdk.jfr.events.SocketReadEvent;\n-import jdk.jfr.internal.event.EventConfiguration;\n-\n-\/**\n- * See {@link JITracer} for an explanation of this code.\n- *\/\n-@JIInstrumentationTarget(\"java.net.Socket$SocketInputStream\")\n-final class SocketInputStreamInstrumentor {\n-\n-    private SocketInputStreamInstrumentor() {\n-    }\n-\n-    @JIInstrumentationMethod\n-    public int read(byte b[], int off, int length) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_READ;\n-        if (!eventConfiguration.isEnabled()) {\n-            return read(b, off, length);\n-        }\n-        int bytesRead = 0;\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            bytesRead = read(b, off, length);\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                InetAddress remote = parent.getInetAddress();\n-                String host = remote.getHostName();\n-                String address = remote.getHostAddress();\n-                int port = parent.getPort();\n-                int timeout = parent.getSoTimeout();\n-                if (bytesRead < 0) {\n-                    SocketReadEvent.commit(start, duration, host, address, port, timeout, 0L, true);\n-                } else {\n-                    SocketReadEvent.commit(start, duration, host, address, port, timeout, bytesRead, false);\n-                }\n-            }\n-        }\n-        return bytesRead;\n-    }\n-\n-    \/\/ private field in java.net.Socket$SocketInputStream\n-    private Socket parent;\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/SocketInputStreamInstrumentor.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.Socket;\n-\n-import jdk.jfr.events.EventConfigurations;\n-import jdk.jfr.events.SocketWriteEvent;\n-import jdk.jfr.internal.event.EventConfiguration;\n-\n-\/**\n- * See {@link JITracer} for an explanation of this code.\n- *\/\n-@JIInstrumentationTarget(\"java.net.Socket$SocketOutputStream\")\n-final class SocketOutputStreamInstrumentor {\n-\n-    private SocketOutputStreamInstrumentor() {\n-    }\n-\n-    @JIInstrumentationMethod\n-    public void write(byte b[], int off, int len) throws IOException {\n-        EventConfiguration eventConfiguration = EventConfigurations.SOCKET_WRITE;\n-        if (!eventConfiguration.isEnabled()) {\n-            write(b, off, len);\n-            return;\n-        }\n-        int bytesWritten = 0;\n-        long start = 0;\n-        try {\n-            start = EventConfiguration.timestamp();\n-            write(b, off, len);\n-            bytesWritten = len;\n-        } finally {\n-            long duration = EventConfiguration.timestamp() - start;\n-            if (eventConfiguration.shouldCommit(duration)) {\n-                InetAddress remote = parent.getInetAddress();\n-                SocketWriteEvent.commit(\n-                        start,\n-                        duration,\n-                        remote.getHostName(),\n-                        remote.getHostAddress(),\n-                        parent.getPort(),\n-                        bytesWritten);\n-            }\n-        }\n-    }\n-\n-    \/\/ private field in java.net.Socket$SocketOutputStream\n-    private Socket parent;\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/SocketOutputStreamInstrumentor.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.net;\n+\n+import jdk.internal.event.SocketReadEvent;\n+import jdk.internal.event.SocketWriteEvent;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Test the overhead of the handling jfr events SocketReadEvent and\n+ * SocketWriteEvent without the latencies of the actual I\/O code.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 10, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 2, timeUnit = TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+public class SocketEventOverhead {\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\" })\n+    @Benchmark\n+    public int socketWriteJFRDisabled(SkeletonFixture fixture) {\n+        return fixture.write();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketWrite#enabled=false\"})\n+    @Benchmark\n+    public int socketWriteJFREnabledEventDisabled(SkeletonFixture fixture) {\n+        return fixture.write();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketWrite#enabled=true,jdk.SocketWrite#threshold=1s\"})\n+    @Benchmark\n+    public int socketWriteJFREnabledEventNotEmitted(SkeletonFixture fixture) {\n+        return fixture.write();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketWrite#enabled=true,jdk.SocketWrite#threshold=0ms,disk=false,jdk.SocketWrite#stackTrace=false\"})\n+    @Benchmark\n+    public int socketWriteJFREnabledEventEmitted(SkeletonFixture fixture) {\n+        return fixture.write();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\" })\n+    @Benchmark\n+    public int socketReadJFRDisabled(SkeletonFixture fixture) {\n+        return fixture.read();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketRead#enabled=false\"})\n+    @Benchmark\n+    public int socketReadJFREnabledEventDisabled(SkeletonFixture fixture) {\n+        return fixture.read();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\n+        \"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketRead#enabled=true,jdk.SocketRead#threshold=1s\"})\n+    @Benchmark\n+    public int socketReadJFREnabledEventNotEmitted(SkeletonFixture fixture) {\n+        return fixture.read();\n+    }\n+\n+    @Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\",\"java.base\/jdk.internal.event=ALL-UNNAMED\",\n+        \"-XX:StartFlightRecording:jdk.SocketRead#enabled=true,jdk.SocketRead#threshold=0ms,disk=false,jdk.SocketRead#stackTrace=false\"})\n+    @Benchmark\n+    public int socketReadJFREnabledEventEmitted(SkeletonFixture fixture) {\n+        return fixture.read();\n+    }\n+\n+    \/**\n+     * Fixture with fake read\/write operations that have only the JFR event\n+     * boilerplate code for managing jfr events.  No actual transfer is done\n+     * to eliminate the I\/O portion and measure the overhead of JFR event\n+     * handling in it's various states.\n+     *\/\n+    @State(Scope.Thread)\n+    public static class SkeletonFixture {\n+\n+        private final InetSocketAddress remote = new InetSocketAddress(\"localhost\",5000);\n+\n+        public SocketAddress getRemoteAddress() {\n+            return remote;\n+        }\n+\n+        public int write() {\n+            if (! SocketWriteEvent.enabled()) {\n+                return write0();\n+            }\n+            int nbytes = 0;\n+            long start = SocketWriteEvent.timestamp();\n+            try {\n+                nbytes = write0();\n+            } finally {\n+                SocketWriteEvent.checkForCommit(start, nbytes, getRemoteAddress());\n+            }\n+            return nbytes;\n+        }\n+\n+        private int write0() {\n+            return 1024;\n+        }\n+\n+        public int read() {\n+            if (! SocketReadEvent.enabled()) {\n+                return read0();\n+            }\n+            int nbytes = 0;\n+            long start = SocketReadEvent.timestamp();\n+            try {\n+                nbytes = read0();\n+            } finally {\n+                SocketReadEvent.checkForCommit(start, nbytes, getRemoteAddress(), 0);\n+            }\n+            return nbytes;\n+        }\n+\n+        private int read0() {\n+            return 1024;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketEventOverhead.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"}]}