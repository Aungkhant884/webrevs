{"files":[{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -1082,3 +1081,0 @@\n-     *\n-     * This class is instrumented by Java Flight Recorder (JFR) to get socket\n-     * I\/O events.\n@@ -1104,1 +1100,0 @@\n-            int nbytes = 0;\n@@ -1106,5 +1101,2 @@\n-            try {\n-                nbytes = implRead(b, off, len);\n-            } finally {\n-                SocketReadEvent.checkForCommit(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n-            }\n+            int nbytes = implRead(b, off, len);\n+            SocketReadEvent.offer(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n@@ -1203,3 +1195,0 @@\n-     *\n-     * This class is instrumented by Java Flight Recorder (JFR) to get socket\n-     * I\/O events.\n@@ -1225,7 +1214,3 @@\n-            long start = 0;\n-            try {\n-                start = SocketWriteEvent.timestamp();\n-                implWrite(b, off, len);\n-            } finally {\n-                SocketWriteEvent.checkForCommit(start, len, parent.getRemoteSocketAddress());\n-            }\n+            long start = SocketWriteEvent.timestamp();\n+            implWrite(b, off, len);\n+            SocketWriteEvent.offer(start, len, parent.getRemoteSocketAddress());\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.net.InetAddress;\n@@ -109,2 +108,6 @@\n-     * Execute the standard boilerplate that proceeds a potential call to the machine generated\n-     * commit method.\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int, long, long, boolean)}.\n@@ -117,1 +120,1 @@\n-    public static void checkForCommit(long start, long nbytes, SocketAddress remote, long timeout) {\n+    public static void offer(long start, long nbytes, SocketAddress remote, long timeout) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.net.InetAddress;\n@@ -104,2 +103,6 @@\n-     * Execute the standard boilerplate that proceeds a potential call to the generated\n-     * commit method.\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time.  If the duration is meets\n+     * or exceeds the configured value (determined by calling the generated method\n+     * {@link #shouldCommit(long)}), an event will be emitted by calling\n+     * {@link #commit(long, long, String, String, int, long)}.\n@@ -111,1 +114,1 @@\n-    public static void checkForCommit(long start, long bytesWritten, SocketAddress remote) {\n+    public static void offer(long start, long bytesWritten, SocketAddress remote) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -406,15 +406,0 @@\n-    @Override\n-    public int read(ByteBuffer buf) throws IOException {\n-        if (!SocketReadEvent.enabled()) {\n-            return implRead(buf);\n-        }\n-        int nbytes = 0;\n-        long start = SocketReadEvent.timestamp();\n-        try {\n-            nbytes = implRead(buf);\n-        } finally {\n-            SocketReadEvent.checkForCommit(start, nbytes, remoteAddress(), 0);\n-        }\n-        return nbytes;\n-    }\n-\n@@ -462,17 +447,0 @@\n-    @Override\n-    public long read(ByteBuffer[] dsts, int offset, int length)\n-        throws IOException\n-    {\n-        if (!SocketReadEvent.enabled()) {\n-            return implRead(dsts, offset, length);\n-        }\n-        long nbytes = 0;\n-        long start = SocketReadEvent.timestamp();\n-        try {\n-            nbytes = implRead(dsts, offset, length);\n-        } finally {\n-            SocketReadEvent.checkForCommit(start, nbytes, remoteAddress(), 0);\n-        }\n-        return nbytes;\n-    }\n-\n@@ -522,0 +490,25 @@\n+    @Override\n+    public int read(ByteBuffer buf) throws IOException {\n+        if (!SocketReadEvent.enabled()) {\n+            return implRead(buf);\n+        }\n+        long start = SocketReadEvent.timestamp();\n+        int nbytes = implRead(buf);\n+        SocketReadEvent.offer(start, nbytes, remoteAddress(), 0);\n+        return nbytes;\n+    }\n+\n+\n+    @Override\n+    public long read(ByteBuffer[] dsts, int offset, int length)\n+        throws IOException\n+    {\n+        if (!SocketReadEvent.enabled()) {\n+            return implRead(dsts, offset, length);\n+        }\n+        long start = SocketReadEvent.timestamp();\n+        long nbytes = implRead(dsts, offset, length);\n+        SocketReadEvent.offer(start, nbytes, remoteAddress(), 0);\n+        return nbytes;\n+    }\n+\n@@ -563,15 +556,0 @@\n-    @Override\n-    public int write(ByteBuffer buf) throws IOException {\n-        if (!SocketWriteEvent.enabled()) {\n-            return implWrite(buf);\n-        }\n-        int nbytes = 0;\n-        long start = SocketWriteEvent.timestamp();\n-        try {\n-            nbytes = implWrite(buf);\n-        } finally {\n-            SocketWriteEvent.checkForCommit(start, nbytes, remoteAddress());\n-        }\n-        return nbytes;\n-    }\n-\n@@ -606,17 +584,0 @@\n-    @Override\n-    public long write(ByteBuffer[] srcs, int offset, int length)\n-        throws IOException\n-    {\n-        if (!SocketWriteEvent.enabled()) {\n-            return implWrite(srcs, offset, length);\n-        }\n-        long nbytes = 0;\n-        long start = SocketWriteEvent.timestamp();\n-        try {\n-            nbytes = implWrite(srcs, offset, length);\n-        } finally {\n-            SocketWriteEvent.checkForCommit(start, nbytes, remoteAddress());\n-        }\n-        return nbytes;\n-    }\n-\n@@ -654,0 +615,24 @@\n+    @Override\n+    public int write(ByteBuffer buf) throws IOException {\n+        if (!SocketWriteEvent.enabled()) {\n+            return implWrite(buf);\n+        }\n+        long start = SocketWriteEvent.timestamp();\n+        int nbytes = implWrite(buf);\n+        SocketWriteEvent.offer(start, nbytes, remoteAddress());\n+        return nbytes;\n+    }\n+\n+    @Override\n+    public long write(ByteBuffer[] srcs, int offset, int length)\n+        throws IOException\n+    {\n+        if (!SocketWriteEvent.enabled()) {\n+            return implWrite(srcs, offset, length);\n+        }\n+        long start = SocketWriteEvent.timestamp();\n+        long nbytes = implWrite(srcs, offset, length);\n+        SocketWriteEvent.offer(start, nbytes, remoteAddress());\n+        return nbytes;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/SocketChannelImpl.java","additions":49,"deletions":64,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                SocketWriteEvent.checkForCommit(start, nbytes, getRemoteAddress());\n+                SocketWriteEvent.offer(start, nbytes, getRemoteAddress());\n@@ -158,1 +158,1 @@\n-                SocketReadEvent.checkForCommit(start, nbytes, getRemoteAddress(), 0);\n+                SocketReadEvent.offer(start, nbytes, getRemoteAddress(), 0);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/net\/SocketEventOverhead.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}