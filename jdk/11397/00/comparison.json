{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.foreign.Utils;\n@@ -370,1 +371,22 @@\n-        return new Cast(fromType, toType);\n+        if (fromType == int.class) {\n+            if (toType == boolean.class) {\n+                return Cast.INT_TO_BOOLEAN;\n+            } else if (toType == byte.class) {\n+                return Cast.INT_TO_BYTE;\n+            } else if (toType == short.class) {\n+                return Cast.INT_TO_SHORT;\n+            } else if (toType == char.class) {\n+                return Cast.INT_TO_CHAR;\n+            }\n+        } else if (toType == int.class) {\n+            if (fromType == boolean.class) {\n+                return Cast.BOOLEAN_TO_INT;\n+            } else if (fromType == byte.class) {\n+                return Cast.BYTE_TO_INT;\n+            } else if (fromType == short.class) {\n+                return Cast.SHORT_TO_INT;\n+            } else if (fromType == char.class) {\n+                return Cast.CHAR_TO_INT;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unknown conversion: \" + fromType + \" -> \" + toType);\n@@ -716,1 +738,34 @@\n-    record Cast(Class<?> fromType, Class<?> toType) implements Binding {\n+    enum Cast implements Binding {\n+        INT_TO_BOOLEAN(int.class, boolean.class) {\n+            @Override\n+            public void interpret(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc,\n+                                  BindingInterpreter.LoadFunc loadFunc, Context context) {\n+                \/\/ implement least significant byte non-zero test\n+                int arg = (int) stack.pop();\n+                boolean result = Utils.byteToBoolean((byte) arg);\n+                stack.push(result);\n+            }\n+        },\n+        INT_TO_BYTE(int.class, byte.class),\n+        INT_TO_CHAR(int.class, char.class),\n+        INT_TO_SHORT(int.class, short.class),\n+        BOOLEAN_TO_INT(boolean.class, int.class),\n+        BYTE_TO_INT(byte.class, int.class),\n+        CHAR_TO_INT(char.class, int.class),\n+        SHORT_TO_INT(short.class, int.class);\n+\n+        private final Class<?> fromType;\n+        private final Class<?> toType;\n+\n+        Cast(Class<?> fromType, Class<?> toType) {\n+            this.fromType = fromType;\n+            this.toType = toType;\n+        }\n+\n+        public Class<?> fromType() {\n+            return fromType;\n+        }\n+\n+        public Class<?> toType() {\n+            return toType;\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":57,"deletions":2,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -679,4 +679,3 @@\n-        if (fromType == int.class) {\n-            popType(int.class);\n-\n-            if (toType == boolean.class) {\n+        popType(fromType);\n+        switch (cast) {\n+            case INT_TO_BOOLEAN -> {\n@@ -691,7 +690,0 @@\n-            } else if (toType == byte.class) {\n-                mv.visitInsn(I2B);\n-            } else if (toType == short.class) {\n-                mv.visitInsn(I2S);\n-            } else {\n-                assert toType == char.class;\n-                mv.visitInsn(I2C);\n@@ -699,13 +691,7 @@\n-\n-            pushType(toType);\n-        } else {\n-            popType(fromType);\n-\n-            assert fromType == boolean.class\n-                    || fromType == byte.class\n-                    || fromType == short.class\n-                    || fromType == char.class;\n-            \/\/ no-op in bytecode\n-\n-            assert toType == int.class;\n-            pushType(int.class);\n+            case INT_TO_BYTE -> mv.visitInsn(I2B);\n+            case INT_TO_CHAR -> mv.visitInsn(I2C);\n+            case INT_TO_SHORT -> mv.visitInsn(I2S);\n+            case BOOLEAN_TO_INT, BYTE_TO_INT, CHAR_TO_INT, SHORT_TO_INT -> {\n+                \/\/ no-op in bytecode\n+            }\n+            default -> throw new IllegalStateException(\"Unknown cast: \" + cast);\n@@ -713,0 +699,1 @@\n+        pushType(toType);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"}]}