{"files":[{"patch":"@@ -605,1 +605,0 @@\n-        --add-exports java.base\/jdk.internal.classfile.java.lang.constant=ALL-UNNAMED \\\n","filename":"make\/RunTests.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -103,1 +103,0 @@\n-        --add-exports java.base\/jdk.internal.classfile.java.lang.constant=ALL-UNNAMED \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-        --add-exports java.base\/jdk.internal.classfile.java.lang.constant=ALL-UNNAMED \\\n","filename":"make\/test\/BuildTestLib.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -136,1 +136,1 @@\n-        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(exports.packageInternalName())),\n+        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(exports.internalName())),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleExportInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n@@ -63,1 +63,1 @@\n-        return new UnboundAttribute.UnboundModuleHashInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleDesc.moduleName())), hash);\n+        return new UnboundAttribute.UnboundModuleHashInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleDesc.name())), hash);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleHashInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -133,1 +133,1 @@\n-        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(opens.packageInternalName())),\n+        return of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(opens.internalName())),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleOpenInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n@@ -78,1 +78,1 @@\n-            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).packageInternalName()));\n+            p[i] = TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(packages.get(i).internalName()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModulePackagesAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n@@ -103,1 +103,1 @@\n-        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.moduleName())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n+        return new UnboundAttribute.UnboundModuleRequiresInfo(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(requires.name())), requiresFlags, Optional.ofNullable(requiresVersion).map(s -> TemporaryConstantPool.INSTANCE.utf8Entry(s)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/attribute\/ModuleRequireInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -188,1 +188,1 @@\n-        return packageEntry(utf8Entry(packageDesc.packageInternalName()));\n+        return packageEntry(utf8Entry(packageDesc.internalName()));\n@@ -212,1 +212,1 @@\n-        return moduleEntry(utf8Entry(moduleDesc.moduleName()));\n+        return moduleEntry(utf8Entry(moduleDesc.name()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ModuleEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/PackageEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -951,1 +951,1 @@\n-                                            leaf(\"package\", exp.exportedPackage().asSymbol().packageName()),\n+                                            leaf(\"package\", exp.exportedPackage().asSymbol().name()),\n@@ -958,1 +958,1 @@\n-                                            leaf(\"package\", opn.openedPackage().asSymbol().packageName()),\n+                                            leaf(\"package\", opn.openedPackage().asSymbol().name()),\n@@ -970,1 +970,1 @@\n-                            .map(mp -> mp.asSymbol().packageName())));\n+                            .map(mp -> mp.asSymbol().name())));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -58,1 +58,1 @@\n-        this(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleName.moduleName())));\n+        this(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleName.name())));\n@@ -70,1 +70,1 @@\n-        moduleEntry = TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleName.moduleName()));\n+        moduleEntry = TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(moduleName.name()));\n@@ -89,1 +89,1 @@\n-        return requires(ModuleRequireInfo.of(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(module.moduleName())), flags, version == null ? null : TemporaryConstantPool.INSTANCE.utf8Entry(version)));\n+        return requires(ModuleRequireInfo.of(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(module.name())), flags, version == null ? null : TemporaryConstantPool.INSTANCE.utf8Entry(version)));\n@@ -104,2 +104,2 @@\n-            exportsTo.add(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(e.moduleName())));\n-        return exports(ModuleExportInfo.of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(pkge.packageInternalName())), flags, exportsTo));\n+            exportsTo.add(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(e.name())));\n+        return exports(ModuleExportInfo.of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(pkge.internalName())), flags, exportsTo));\n@@ -120,2 +120,2 @@\n-            opensTo.add(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(e.moduleName())));\n-        return opens(ModuleOpenInfo.of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(pkge.packageInternalName())), flags, opensTo));\n+            opensTo.add(TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(e.name())));\n+        return opens(ModuleOpenInfo.of(TemporaryConstantPool.INSTANCE.packageEntry(TemporaryConstantPool.INSTANCE.utf8Entry(pkge.internalName())), flags, opensTo));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleAttributeBuilderImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.impl;\n-\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-\n-public record ModuleDescImpl(String moduleName) implements ModuleDesc {\n-\n-    \/**\n-     * Validates the correctness of a module name. In particular checks for the presence of\n-     * invalid characters in the name.\n-     *\n-     * {@jvms 4.2.3} Module and Package Names\n-     *\n-     * @param name the module name\n-     * @return the module name passed if valid\n-     * @throws IllegalArgumentException if the module name is invalid\n-     *\/\n-    public static String validateModuleName(String name) {\n-        for (int i=name.length() - 1; i >= 0; i--) {\n-            char ch = name.charAt(i);\n-            if ((ch >= '\\u0000' && ch <= '\\u001F')\n-            || ((ch == '\\\\' || ch == ':' || ch =='@') && (i == 0 || name.charAt(--i) != '\\\\')))\n-                throw new IllegalArgumentException(\"Invalid module name: \" + name);\n-        }\n-        return name;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ModuleDescImpl.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.impl;\n-\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n-\n-public record PackageDescImpl(String packageInternalName) implements PackageDesc {\n-\n-    \/**\n-     * Validates the correctness of a binary package name. In particular checks for the presence of\n-     * invalid characters in the name.\n-     *\n-     * @param name the package name\n-     * @return the package name passed if valid\n-     * @throws IllegalArgumentException if the package name is invalid\n-     *\/\n-    public static String validateBinaryPackageName(String name) {\n-        for (int i=0; i<name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '\/')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n-    }\n-\n-    \/**\n-     * Validates the correctness of an internal package name.\n-     * In particular checks for the presence of invalid characters in the name.\n-     *\n-     * @param name the package name\n-     * @return the package name passed if valid\n-     * @throws IllegalArgumentException if the package name is invalid\n-     *\/\n-    public static String validateInternalPackageName(String name) {\n-        for (int i=0; i<name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '.')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n-    }\n-\n-    public static String internalToBinary(String name) {\n-        return name.replace('\/', '.');\n-    }\n-\n-    public static String binaryToInternal(String name) {\n-        return name.replace('.', '\/');\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/PackageDescImpl.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n@@ -198,1 +198,1 @@\n-            result[i] = TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(list.get(i).moduleName()));\n+            result[i] = TemporaryConstantPool.INSTANCE.moduleEntry(TemporaryConstantPool.INSTANCE.utf8Entry(list.get(i).name()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.java.lang.constant;\n-\n-import static java.util.Objects.requireNonNull;\n-import jdk.internal.classfile.impl.ModuleDescImpl;\n-import static jdk.internal.classfile.impl.ModuleDescImpl.*;\n-\n-\/**\n- * A nominal descriptor for a {@link Module} constant.\n- *\n- * <p>To create a {@linkplain ModuleDesc} for a module, use {@link #of}.\n- *\n- *\/\n-public sealed interface ModuleDesc\n-        permits ModuleDescImpl {\n-\n-    \/**\n-     * Returns a {@linkplain ModuleDesc} for a module,\n-     * given the name of the module.\n-     * <p>\n-     * {@jvms 4.2.3} Module names are not encoded in \"internal form\" like class and interface names, that is,\n-     * the ASCII periods (.) that separate the identifiers in a module name are not replaced by ASCII forward slashes (\/).\n-     * <p>\n-     * Module names may be drawn from the entire Unicode codespace, subject to the following constraints:\n-     * <ul>\n-     * <li>A module name must not contain any code point in the range '&#92;u0000' to '&#92;u001F' inclusive.\n-     * <li>The ASCII backslash (\\) is reserved for use as an escape character in module names.\n-     * It must not appear in a module name unless it is followed by an ASCII backslash, an ASCII colon (:), or an ASCII at-sign (@).\n-     * The ASCII character sequence \\\\ may be used to encode a backslash in a module name.\n-     * <li>The ASCII colon (:) and at-sign (@) are reserved for future use in module names.\n-     * They must not appear in module names unless they are escaped.\n-     * The ASCII character sequences \\: and \\@ may be used to encode a colon and an at-sign in a module name.\n-     * <\/ul>\n-     * @param name module name\n-     * @return a {@linkplain ModuleDesc} describing the desired module\n-     * @throws NullPointerException if the argument is {@code null}\n-     * @throws IllegalArgumentException if the name string is not in the\n-     * correct format\n-     *\/\n-    static ModuleDesc of(String name) {\n-        validateModuleName(requireNonNull(name));\n-        return new ModuleDescImpl(name);\n-    }\n-\n-    \/**\n-     * Returns the module name of this {@linkplain ModuleDesc}.\n-     *\n-     * @return the module name\n-     *\/\n-    String moduleName();\n-\n-    \/**\n-     * Compare the specified object with this descriptor for equality.  Returns\n-     * {@code true} if and only if the specified object is also a\n-     * {@linkplain ModuleDesc} and both describe the same module.\n-     *\n-     * @param o the other object\n-     * @return whether this descriptor is equal to the other object\n-     *\/\n-    @Override\n-    boolean equals(Object o);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/java\/lang\/constant\/ModuleDesc.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.classfile.java.lang.constant;\n-\n-import static java.util.Objects.requireNonNull;\n-import jdk.internal.classfile.impl.PackageDescImpl;\n-import static jdk.internal.classfile.impl.PackageDescImpl.*;\n-\n-\/**\n- * A nominal descriptor for a {@link Package} constant.\n- *\n- * <p>To create a {@linkplain PackageDesc} for a package, use {@link #of} or\n- * {@link #ofInternalName(String)}.\n- *\n- *\/\n-public sealed interface PackageDesc\n-        permits PackageDescImpl {\n-\n-    \/**\n-     * Returns a {@linkplain PackageDesc} for a package,\n-     * given the name of the package, such as {@code \"java.lang\"}.\n-     * <p>\n-     * {@jls 13.1}\n-     *\n-     * @param name the fully qualified (dot-separated) binary package name\n-     * @return a {@linkplain PackageDesc} describing the desired package\n-     * @throws NullPointerException if the argument is {@code null}\n-     * @throws IllegalArgumentException if the name string is not in the\n-     * correct format\n-     *\/\n-    static PackageDesc of(String name) {\n-        validateBinaryPackageName(requireNonNull(name));\n-        return new PackageDescImpl(binaryToInternal(name));\n-    }\n-\n-    \/**\n-     * Returns a {@linkplain PackageDesc} for a package,\n-     * given the name of the package in internal form,\n-     * such as {@code \"java\/lang\"}.\n-     * <p>\n-     * {@jvms 4.2.1} In this internal form, the ASCII periods (.) that normally separate the identifiers\n-     * which make up the binary name are replaced by ASCII forward slashes (\/).\n-     * @param name the fully qualified class name, in internal (slash-separated) form\n-     * @return a {@linkplain PackageDesc} describing the desired package\n-     * @throws NullPointerException if the argument is {@code null}\n-     * @throws IllegalArgumentException if the name string is not in the\n-     * correct format\n-     *\/\n-    static PackageDesc ofInternalName(String name) {\n-        validateInternalPackageName(requireNonNull(name));\n-        return new PackageDescImpl(name);\n-    }\n-\n-    \/**\n-     * Returns the fully qualified (slash-separated) internal package name\n-     * of this {@linkplain PackageDesc}.\n-     *\n-     * @return the package name, or the empty string for the\n-     * default package\n-     *\/\n-    String packageInternalName();\n-\n-    \/**\n-     * Returns the fully qualified (dot-separated) binary package name\n-     * of this {@linkplain PackageDesc}.\n-     *\n-     * @return the package name, or the empty string for the\n-     * default package\n-     *\/\n-    default String packageName() {\n-        return internalToBinary(packageInternalName());\n-    }\n-\n-    \/**\n-     * Compare the specified object with this descriptor for equality.  Returns\n-     * {@code true} if and only if the specified object is also a\n-     * {@linkplain PackageDesc} and both describe the same package.\n-     *\n-     * @param o the other object\n-     * @return whether this descriptor is equal to the other object\n-     *\/\n-    @Override\n-    boolean equals(Object o);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/java\/lang\/constant\/PackageDesc.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -45,2 +45,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfoExtender.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/framework\/VMVersionTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-\t--add-exports java.base\/jdk.internal.classfile.java.lang.constant=ALL-UNNAMED \\\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/Makefile","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/AnnotationsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/module\/ClassFileVersionsTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/module\/ConfigurationTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n@@ -68,2 +67,2 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/module\/ModuleFinderTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/module\/ModuleNamesTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/lang\/module\/MultiReleaseJarTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/java\/security\/Provider\/SecurityProviderModularTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularClientTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/javax\/security\/auth\/login\/modules\/JaasModularDefaultHandlerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.ModuleDesc;\n","filename":"test\/jdk\/jdk\/classfile\/AdvancedTransformationsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n@@ -107,1 +107,1 @@\n-        assertEquals(attr.moduleName().name().stringValue(), modName.moduleName());\n+        assertEquals(attr.moduleName().name().stringValue(), modName.name());\n@@ -121,1 +121,1 @@\n-        assertEquals(r.requires().name().stringValue(), require1.moduleName());\n+        assertEquals(r.requires().name().stringValue(), require1.name());\n@@ -126,1 +126,1 @@\n-        assertEquals(r.requires().name().stringValue(), require2.moduleName());\n+        assertEquals(r.requires().name().stringValue(), require2.name());\n@@ -141,1 +141,1 @@\n-            assertEquals(exports.get(0).exportsTo().get(i).name().stringValue(), et1[i].moduleName());\n+            assertEquals(exports.get(0).exportsTo().get(i).name().stringValue(), et1[i].name());\n@@ -144,1 +144,1 @@\n-        assertEquals(exports.get(1).exportsTo().get(0).name().stringValue(), et2[0].moduleName());\n+        assertEquals(exports.get(1).exportsTo().get(0).name().stringValue(), et2[0].name());\n@@ -148,1 +148,1 @@\n-            assertEquals(exports.get(2).exportsTo().get(i).name().stringValue(), et3[i].moduleName());\n+            assertEquals(exports.get(2).exportsTo().get(i).name().stringValue(), et3[i].name());\n@@ -162,1 +162,1 @@\n-        assertEquals(opens.get(2).opensTo().get(1).name().stringValue(), ot3[1].moduleName());\n+        assertEquals(opens.get(2).opensTo().get(1).name().stringValue(), ot3[1].name());\n@@ -185,1 +185,1 @@\n-        assertEquals(a.packages().stream().map(pe -> pe.asSymbol().packageName()).toList(), List.of(\"foo.bar.baz\", \"quux\"));\n+        assertEquals(a.packages().stream().map(pe -> pe.asSymbol().name()).toList(), List.of(\"foo.bar.baz\", \"quux\"));\n","filename":"test\/jdk\/jdk\/classfile\/ModuleBuilderTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Testing ModuleDesc.\n- * @run junit ModuleDescTest\n- *\/\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class ModuleDescTest {\n-\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"abc\\\\\", \"ab\\\\c\", \"\\u0000\", \"\\u0001\", \"\\u001e\", \"\\u001f\"})\n-    public void testInvalidModuleNames(String mdl) {\n-        assertThrows(IllegalArgumentException.class, () -> ModuleDesc.of(mdl));\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"a\\\\\\\\b\", \"a.b\/c\", \"a\\\\@b\\\\: c\"})\n-    public void testValidModuleNames(String mdl) {\n-        assertEquals(ModuleDesc.of(mdl), ModuleDesc.of(mdl));\n-        assertEquals(ModuleDesc.of(mdl).moduleName(), mdl);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/classfile\/ModuleDescTest.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Testing PackageDesc.\n- * @run junit PackageDescTest\n- *\/\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.ValueSource;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-class PackageDescTest {\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\"})\n-    void testInvalidPackageNames(String pkg) {\n-        assertThrows(IllegalArgumentException.class, () -> PackageDesc.of(pkg));\n-    }\n-\n-    @ParameterizedTest\n-    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\"})\n-    void testInvalidInternalPackageNames(String pkg) {\n-        assertThrows(IllegalArgumentException.class, () -> PackageDesc.ofInternalName(pkg));\n-    }\n-\n-    @Test\n-    void testValidPackageNames() {\n-        assertEquals(PackageDesc.of(\"a\"), PackageDesc.ofInternalName(\"a\"));\n-        assertEquals(PackageDesc.of(\"a.b\"), PackageDesc.ofInternalName(\"a\/b\"));\n-        assertEquals(PackageDesc.of(\"a.b.c\"), PackageDesc.ofInternalName(\"a\/b\/c\"));\n-        assertEquals(PackageDesc.of(\"a\").packageName(), PackageDesc.ofInternalName(\"a\").packageName());\n-        assertEquals(PackageDesc.of(\"a.b\").packageName(), PackageDesc.ofInternalName(\"a\/b\").packageName());\n-        assertEquals(PackageDesc.of(\"a.b.c\").packageName(), PackageDesc.ofInternalName(\"a\/b\/c\").packageName());\n-        assertEquals(PackageDesc.of(\"a\").packageInternalName(), PackageDesc.ofInternalName(\"a\").packageInternalName());\n-        assertEquals(PackageDesc.of(\"a.b\").packageInternalName(), PackageDesc.ofInternalName(\"a\/b\").packageInternalName());\n-        assertEquals(PackageDesc.of(\"a.b.c\").packageInternalName(), PackageDesc.ofInternalName(\"a\/b\/c\").packageInternalName());\n-    }\n-}\n","filename":"test\/jdk\/jdk\/classfile\/PackageDescTest.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -10,1 +10,0 @@\n-    java.base\/jdk.internal.classfile.java.lang.constant \\\n","filename":"test\/jdk\/jdk\/classfile\/TEST.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n","filename":"test\/jdk\/jdk\/classfile\/examples\/ModuleExamples.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import jdk.internal.classfile.java.lang.constant.ModuleDesc;\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.ModuleDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/jdk\/modules\/incubator\/ServiceBinding.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestProcessHelper.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n- *          java.base\/jdk.internal.classfile.java.lang.constant\n","filename":"test\/jdk\/tools\/jlink\/JLinkNegativeTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.internal.classfile.java.lang.constant.PackageDesc;\n+import java.lang.constant.PackageDesc;\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ModuleInfoWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}