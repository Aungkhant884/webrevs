{"files":[{"patch":"@@ -302,1 +302,1 @@\n-  bool found_new_empty_regions = phase2a_determine_worklists();\n+  phase2a_determine_worklists();\n@@ -306,2 +306,4 @@\n-  \/\/ To avoid OOM when there is memory left.\n-  if (!found_new_empty_regions && !has_free_compaction_targets) {\n+  \/\/ Try to avoid OOM immediately after Full GC in case there are no free regions\n+  \/\/ left after determining the result locations (i.e. this phase). Prepare to\n+  \/\/ maximally compact the tail regions of the compaction queues serially.\n+  if (!has_free_compaction_targets) {\n@@ -312,1 +314,1 @@\n-bool G1FullCollector::phase2a_determine_worklists() {\n+void G1FullCollector::phase2a_determine_worklists() {\n@@ -317,2 +319,0 @@\n-\n-  return cl.found_empty_regions();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  bool phase2a_determine_worklists();\n+  void phase2a_determine_worklists();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,2 +45,1 @@\n-  _cur_worker(0),\n-  _found_empty_regions(false) { }\n+  _cur_worker(0) { }\n@@ -134,1 +133,1 @@\n-    assert(_collector->is_skip_compacting(region_idx) || hr->is_closed_archive(), \"must be\"); \/\/ FIXME: second clause\n+    assert(_collector->is_skip_compacting(region_idx) || hr->is_closed_archive(), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  bool _found_empty_regions;\n@@ -57,1 +56,1 @@\n-  inline void add_to_compaction_queue(G1FullGCCompactionPoint* cp, HeapRegion* hr);\n+  inline void add_to_compaction_queue(HeapRegion* hr);\n@@ -63,2 +62,0 @@\n-\n-  inline bool found_empty_regions() { return _found_empty_regions; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-  _found_empty_regions = true;\n@@ -45,1 +44,1 @@\n-  add_to_compaction_queue(next_compaction_point(), hr);\n+  add_to_compaction_queue(hr);\n@@ -70,1 +69,1 @@\n-inline void G1DetermineCompactionQueueClosure::add_to_compaction_queue(G1FullGCCompactionPoint* cp, HeapRegion* hr) {\n+inline void G1DetermineCompactionQueueClosure::add_to_compaction_queue(HeapRegion* hr) {\n@@ -72,0 +71,1 @@\n+  G1FullGCCompactionPoint* cp = next_compaction_point();\n@@ -82,1 +82,1 @@\n-    add_to_compaction_queue(next_compaction_point(), hr);\n+    add_to_compaction_queue(hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}