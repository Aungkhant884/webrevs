{"files":[{"patch":"@@ -135,0 +135,1 @@\n+import com.sun.tools.classfile.PermittedSubclasses_attribute;\n@@ -981,0 +982,10 @@\n+        if (header.isSealed) {\n+            int attributeString = addString(constantPool, Attribute.PermittedSubclasses);\n+            int[] subclasses = new int[header.permittedSubclasses.size()];\n+            int i = 0;\n+            for (String intf : header.permittedSubclasses) {\n+                subclasses[i++] = addClass(constantPool, intf);\n+            }\n+            attributes.put(Attribute.PermittedSubclasses,\n+                    new PermittedSubclasses_attribute(attributeString, subclasses));\n+        }\n@@ -2232,0 +2243,10 @@\n+            case Attribute.PermittedSubclasses: {\n+                assert feature instanceof ClassHeaderDescription;\n+                PermittedSubclasses_attribute permittedSubclasses = (PermittedSubclasses_attribute) attr;\n+                ClassHeaderDescription chd = (ClassHeaderDescription) feature;\n+                chd.permittedSubclasses = Arrays.stream(permittedSubclasses.subtypes)\n+                        .mapToObj(i -> getClassName(cf, i))\n+                        .collect(Collectors.toList());\n+                chd.isSealed = true;\n+                break;\n+            }\n@@ -3080,0 +3101,2 @@\n+        boolean isSealed;\n+        List<String> permittedSubclasses;\n@@ -3090,0 +3113,2 @@\n+            hash = 17 * hash + Objects.hashCode(this.isSealed);\n+            hash = 17 * hash + Objects.hashCode(this.permittedSubclasses);\n@@ -3120,0 +3145,6 @@\n+            if (this.isSealed != other.isSealed) {\n+                return false;\n+            }\n+            if (!listEquals(this.permittedSubclasses, other.permittedSubclasses)) {\n+                return false;\n+            }\n@@ -3140,0 +3171,3 @@\n+            if (isSealed) {\n+                output.append(\" sealed true\");\n+            }\n@@ -3166,0 +3200,5 @@\n+            isSealed = reader.attributes.containsKey(\"permittedSubclasses\");\n+            if (isSealed) {\n+                String subclassesList = reader.attributes.get(\"permittedSubclasses\");\n+                permittedSubclasses = deserializeList(subclassesList);\n+            }\n","filename":"make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -3659,6 +3659,0 @@\n-bool ClassFileParser::supports_sealed_types() {\n-  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&\n-         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&\n-         Arguments::enable_preview();\n-}\n-\n@@ -3921,2 +3915,2 @@\n-          } else if (tag == vmSymbols::tag_permitted_subclasses()) {\n-            if (supports_sealed_types()) {\n+          } else if (_major_version >= JAVA_17_VERSION) {\n+            if (tag == vmSymbols::tag_permitted_subclasses()) {\n@@ -3937,1 +3931,1 @@\n-          \/\/ Skip attribute_length for any attribute where major_verson >= JAVA_16_VERSION\n+          \/\/ Skip attribute_length for any attribute where major_verson >= JAVA_17_VERSION\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -344,3 +344,0 @@\n-  bool supports_sealed_types();\n-  bool supports_records();\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -609,1 +609,1 @@\n-\/* Records - since JDK 14 *\/\n+\/* Records - since JDK 16 *\/\n@@ -617,1 +617,1 @@\n-\/* Sealed types - since JDK 15 *\/\n+\/* Sealed classes - since JDK 17 *\/\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4450,1 +4450,1 @@\n-     * @since 15\n+     * @since 17\n@@ -4452,1 +4452,0 @@\n-    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES, reflective=true)\n@@ -4499,1 +4498,2 @@\n-     * @return {@code true} if and only if this {@code Class} object represents a sealed class or interface.\n+     * @return {@code true} if and only if this {@code Class} object represents\n+     * a sealed class or interface.\n@@ -4503,1 +4503,1 @@\n-     * @since 15\n+     * @since 17\n@@ -4505,2 +4505,0 @@\n-    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES, reflective=true)\n-    @SuppressWarnings(\"preview\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+        \/*\n+         * This one can only be removed after JDK 17\n+         *\/\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-     * @since 15\n+     * @since 17\n@@ -98,2 +98,0 @@\n-    @jdk.internal.javac.PreviewFeature(feature=jdk.internal.javac.PreviewFeature.Feature.SEALED_CLASSES,\n-                                       reflective=true)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/ClassTree.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -186,2 +186,0 @@\n-            case SEALED_CLASSES -> true;\n-\n@@ -227,3 +225,1 @@\n-        return ((sym.flags() & RECORD) != 0 && isPreview(Feature.RECORDS)) ||\n-               ((sym.flags() & SEALED) != 0 && isPreview(Feature.SEALED_CLASSES)) ||\n-               ((sym.flags() & NON_SEALED) != 0 && isPreview(Feature.SEALED_CLASSES));\n+        return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -164,2 +164,1 @@\n-        allowSealed = (!preview.isPreview(Feature.SEALED_CLASSES) || preview.isEnabled()) &&\n-                Feature.SEALED_CLASSES.allowedInSource(source);\n+        allowSealed = Feature.SEALED_CLASSES.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -276,2 +276,1 @@\n-        allowSealedTypes = (!preview.isPreview(Feature.SEALED_CLASSES) || preview.isEnabled()) &&\n-                Feature.SEALED_CLASSES.allowedInSource(source);\n+        allowSealedTypes = Feature.SEALED_CLASSES.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -189,2 +189,1 @@\n-        this.allowSealedTypes = (!preview.isPreview(Feature.SEALED_CLASSES) || preview.isEnabled()) &&\n-                Feature.SEALED_CLASSES.allowedInSource(source);\n+        this.allowSealedTypes = Feature.SEALED_CLASSES.allowedInSource(source);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile --enable-preview --source ${jdk.version} sealedP1\/C1.java sealedP2\/C2.java sealedP3\/C3.java\n+ * @compile sealedP1\/C1.java sealedP2\/C2.java sealedP3\/C3.java\n@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI SealedInterfaceModuleTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI SealedInterfaceModuleTest\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/SealedInterfaceModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @compile --enable-preview --source ${jdk.version} sealedP1\/C1.java sealedP2\/C2.java sealedP3\/C3.java\n+ * @compile sealedP1\/C1.java sealedP2\/C2.java sealedP3\/C3.java\n@@ -34,1 +34,1 @@\n- * @run main\/othervm -Xbootclasspath\/a:. --enable-preview -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI SealedModuleTest\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI SealedModuleTest\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/SealedModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/sealedP1\/SuperClass.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/modules\/sealedP1\/SuperInterface.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8225056\n- * @compile --enable-preview -source ${jdk.version} AbstractSealedTest.java\n- * @run main\/othervm --enable-preview AbstractSealedTest\n- *\/\n-\n-\/\/ Test that a sealed class can be abstract\n-public class AbstractSealedTest {\n-\n-    abstract sealed class AbstractShape permits Circle {\n-        abstract void draw();\n-    }\n-\n-    final class Circle extends AbstractShape {\n-        void draw() {}\n-    }\n-\n-    Circle circle = new Circle();\n-\n-    public static void main(String... args) { }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/AbstractSealedTest.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -170,1 +170,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -241,1 +241,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -387,1 +387,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -465,1 +465,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -543,1 +543,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n@@ -620,1 +620,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclasses.jcod","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n- * @compile --enable-preview -source ${jdk.version} noSubclass\/BaseC.java noSubclass\/BaseI.java noSubclass\/Impl1.java\n- * @compile --enable-preview -source ${jdk.version} noSubclass\/Impl2.java\n- * @compile --enable-preview -source ${jdk.version} GetPermittedSubclassesTest.java\n- * @run main\/othervm --enable-preview GetPermittedSubclassesTest\n+ * @compile noSubclass\/BaseC.java noSubclass\/BaseI.java noSubclass\/Impl1.java\n+ * @compile noSubclass\/Impl2.java\n+ * @run main GetPermittedSubclassesTest\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/GetPermittedSubclassesTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n- * @compile --enable-preview -source ${jdk.version} OverrideSealedTest.java\n- * @run main\/othervm --enable-preview OverrideSealedTest\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/OverrideSealedTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/Pkg\/SealedInterface.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n- * @compile --enable-preview -source ${jdk.version} RedefinePermittedSubclass.java\n- * @run main\/othervm --enable-preview RedefinePermittedSubclass buildagent\n- * @run main\/othervm\/timeout=6000 --enable-preview RedefinePermittedSubclass runtest\n+ * @compile RedefinePermittedSubclass.java\n+ * @run main\/othervm RedefinePermittedSubclass buildagent\n+ * @run main\/othervm\/timeout=6000 RedefinePermittedSubclass runtest\n@@ -127,2 +127,1 @@\n-                                   \"-javaagent:redefineagent.jar\", \"--enable-preview\",\n-                                   \"RedefinePermittedSubclass\"};\n+                                   \"-javaagent:redefineagent.jar\", \"RedefinePermittedSubclass\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/RedefinePermittedSubclass.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n- * @compile --enable-preview -source ${jdk.version} RedefineSealedClass.java\n- * @run main\/othervm --enable-preview RedefineSealedClass buildagent\n- * @run main\/othervm\/timeout=6000 --enable-preview RedefineSealedClass runtest\n+ * @compile RedefineSealedClass.java\n+ * @run main\/othervm RedefineSealedClass buildagent\n+ * @run main\/othervm\/timeout=6000 RedefineSealedClass runtest\n@@ -109,2 +109,1 @@\n-                                   \"-javaagent:redefineagent.jar\", \"--enable-preview\",\n-                                   \"RedefineSealedClass\"};\n+                                   \"-javaagent:redefineagent.jar\", \"RedefineSealedClass\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/RedefineSealedClass.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8225056\n- * @compile --enable-preview -source ${jdk.version} SealedTest.java\n- * @run main\/othervm --enable-preview SealedTest\n- *\/\n-\n-public class SealedTest {\n-\n-    sealed class Sealed1 permits Sub1 {}\n-\n-    final class Sub1 extends Sealed1 {}\n-\n-    sealed interface SealedI1 permits Sub2 {}\n-\n-    final class Sub2 extends Sealed2 implements SealedI1 {}\n-\n-    sealed class Sealed2 permits Sub2 {}\n-\n-    Sub1 sub1 = new Sub1();\n-    Sub2 sub2 = new Sub2();\n-\n-    public static void main(String... args) {\n-        System.out.println(\"Basic testing of sealed types\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedTest.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} Pkg\/Permitted.java otherPkg\/WrongPackage.java otherPkg\/WrongPackageNotPublic.java\n- * @run main\/othervm --enable-preview SealedUnnamedModuleIntfTest\n+ * @compile Pkg\/Permitted.java otherPkg\/WrongPackage.java otherPkg\/WrongPackageNotPublic.java\n+ * @run main SealedUnnamedModuleIntfTest\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedUnnamedModuleIntfTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @compile --enable-preview -source ${jdk.version} planets\/Neptune.java asteroids\/Pluto.java asteroids\/Charon.java\n- * @run main\/othervm --enable-preview SealedUnnamedModuleTest\n+ * @compile planets\/Neptune.java asteroids\/Pluto.java asteroids\/Charon.java\n+ * @run main SealedUnnamedModuleTest\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/SealedUnnamedModuleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-  65535; \/\/ minor version\n+  0; \/\/ minor version\n","filename":"test\/hotspot\/jtreg\/runtime\/sealedClasses\/planets\/OuterPlanets.jcod","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,9 +37,9 @@\n- * @compile --enable-preview --source ${jdk.version} Host\/Host.java ClassOne.java ClassTwo.java ClassThree.java ClassFour.java\n- * @compile --enable-preview --source ${jdk.version} TestPermittedSubclassesAttr.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr Host\n- * @compile --enable-preview --source ${jdk.version} HostA\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostA\n- * @compile --enable-preview --source ${jdk.version} HostAB\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostAB\n- * @compile --enable-preview --source ${jdk.version} HostABC\/Host.java\n- * @run main\/othervm -javaagent:redefineagent.jar --enable-preview -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostABC\n+ * @compile Host\/Host.java ClassOne.java ClassTwo.java ClassThree.java ClassFour.java\n+ * @compile TestPermittedSubclassesAttr.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr Host\n+ * @compile HostA\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostA\n+ * @compile HostAB\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostAB\n+ * @compile HostABC\/Host.java\n+ * @run main\/othervm -javaagent:redefineagent.jar -Xlog:redefine+class+sealed=trace TestPermittedSubclassesAttr HostABC\n@@ -142,1 +142,0 @@\n-    private static final String VERSION = Integer.toString(Runtime.version().feature());\n@@ -269,3 +268,1 @@\n-                              \"-classpath\", DEST,\n-                              \"--enable-preview\",\n-                              \"--source\", VERSION);\n+                              \"-classpath\", DEST);\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefinePermittedSubclassesAttr\/TestPermittedSubclassesAttr.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -144,0 +144,3 @@\n+compiler.warn.declared.using.preview                    # after making sealed classes a final feature there is no other\n+                                                        # preview feature but we should keep this key for future use just\n+                                                        # in case\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/AnonymousCantInheritFromSealed.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,3 +25,1 @@\n-\/\/ key: compiler.note.preview.plural\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --add-reads mSealed=mSub --enable-preview -source ${jdk.version}\n+\/\/ options: --add-reads mSealed=mSub\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantExtendSealedInAnotherModule\/CantExtendSealedInAnotherModule.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.plural\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantExtendSealedInAnotherPkg\/CantExtendSealedInAnotherPkg.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantInheritFromSealed.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/CantInheritFromSealed2.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/DuplicateTypeInPermits.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n@@ -29,1 +27,0 @@\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/LocalCantInheritFromSealed.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NonSealedWithNoSealedSuper.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PermitsCantListDeclaringClass.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PermitsCantListSuperType.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PermitsInNoSealedClass.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SealedMustHaveSubtypes.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SealedNotAllowedInLocalClass.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-\/\/ key: compiler.warn.preview.feature.use.plural\n-\/\/ key: compiler.warn.declared.using.preview\n-\/\/ options: --enable-preview -source ${jdk.version} -Xlint:preview\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ key: compiler.warn.source.no.system.modules.path\n+\/\/ options: -source 16\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SealedTypes.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SubtypeDoesntExtendSealed.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/\/ key: compiler.note.preview.filename\n-\/\/ key: compiler.note.preview.recompile\n-\/\/ options: --enable-preview -source ${jdk.version}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeVarInPermits.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations.class, 17\n-- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations$C.class, 17\n-- compiler.warn.preview.feature.use.classfile: DeclaredUsingPreviewDeclarations$C2.class, 17\n-DeclaredUsingPreview.java:9:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n-4 warnings\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview-class.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-DeclaredUsingPreviewDeclarations.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n-DeclaredUsingPreviewDeclarations.java:3:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n-DeclaredUsingPreviewDeclarations.java:4:5: compiler.warn.preview.feature.use.plural: (compiler.misc.feature.sealed.classes)\n-DeclaredUsingPreview.java:9:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n-DeclaredUsingPreview.java:10:37: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C2\n-DeclaredUsingPreviewDeclarations.java:4:33: compiler.warn.declared.using.preview: kindname.class, DeclaredUsingPreviewDeclarations.C\n-6 warnings\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview-source.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,11 +0,0 @@\n-\/**\n- * @test \/nodynamiccopyright\/\n- * @bug 8250768\n- * @summary Verify javac correctly reports errors for uses of classes declared using preview features.\n- * @compile\/ref=DeclaredUsingPreview-source.out -XDrawDiagnostics --enable-preview -source ${jdk.version} -Xlint:preview DeclaredUsingPreview.java DeclaredUsingPreviewDeclarations.java\n- * @compile\/ref=DeclaredUsingPreview-class.out -XDrawDiagnostics --enable-preview -source ${jdk.version} -Xlint:preview DeclaredUsingPreview.java\n- *\/\n-public class DeclaredUsingPreview {\n-    DeclaredUsingPreviewDeclarations.C c;\n-    DeclaredUsingPreviewDeclarations.C2 c2; \/\/TODO: should cause warning?\n-}\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreview.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-\/\/\/nodynamiccopyright\/\n-public class DeclaredUsingPreviewDeclarations {\n-    sealed class C {}\n-    non-sealed class C2 extends C {}\n-}\n","filename":"test\/langtools\/tools\/javac\/preview\/DeclaredUsingPreviewDeclarations.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -99,3 +99,1 @@\n-                        \"Outer.java:4:5: compiler.warn.declared.using.preview: kindname.record, test.Outer.R\",\n-                        \"Use.java:3:8: compiler.warn.declared.using.preview: kindname.record, test.Outer.R\",\n-                        \"4 warnings\");\n+                        \"2 warnings\");\n@@ -104,6 +102,3 @@\n-        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer.class\"),\n-                              true); \/\/TODO: correct?\n-        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer$R.class\"),\n-                              true);\n-        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Use.class\"),\n-                              true);\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer.class\"), true); \/\/TODO: correct?\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Outer$R.class\"),true);\n+        checkPreviewClassfile(classes.resolve(\"test\").resolve(\"Use.class\"),false);\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewAutoSuppress.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -237,3 +237,1 @@\n-                        .options(\"--patch-module\", \"java.base=\" + srcJavaBase.toString(),\n-                                 \"--enable-preview\",\n-                                 \"-source\", String.valueOf(Runtime.version().feature()))\n+                        .options(\"--patch-module\", \"java.base=\" + srcJavaBase.toString())\n@@ -247,1 +245,2 @@\n-                    .withOption(\"java.base\/user=ALL-UNNAMED\");\n+                    .withOption(\"java.base\/user=ALL-UNNAMED\")\n+                    .withOption(\"-XDforcePreview=true\");\n@@ -255,1 +254,2 @@\n-                    .withOption(\"java.base\/user=ALL-UNNAMED\");\n+                    .withOption(\"java.base\/user=ALL-UNNAMED\")\n+                    .withOption(\"-XDforcePreview=true\");\n@@ -292,2 +292,3 @@\n-                            ok = false;\n-                            expected = Set.of(\"-1:-1:compiler.err.preview.feature.disabled.classfile\");\n+                            ok = true;\n+                            previewClass = false;\n+                            expected = Set.of();\n@@ -297,0 +298,1 @@\n+                            previewClass = false;\n@@ -333,15 +335,2 @@\n-                            if (suppress == Suppress.YES) {\n-                                if (lint == Lint.ENABLE_PREVIEW) {\n-                                    expected = Set.of(\"-1:-1:compiler.warn.preview.feature.use.classfile\");\n-                                } else {\n-                                    expected = Set.of(\/*\"-1:-1:compiler.note.preview.filename\",\n-                                                      \"-1:-1:compiler.note.preview.recompile\"*\/);\n-                                }\n-                            } else if (lint == Lint.ENABLE_PREVIEW) {\n-                                expected = Set.of(\"5:13:compiler.warn.declared.using.preview\",\n-                                                  \"5:24:compiler.warn.declared.using.preview\",\n-                                                  \"-1:-1:compiler.warn.preview.feature.use.classfile\");\n-                            } else {\n-                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n-                                                  \"-1:-1:compiler.note.preview.recompile\");\n-                            }\n+                            previewClass = false;\n+                            expected = Set.of();\n@@ -350,0 +339,1 @@\n+                            previewClass = false;\n@@ -351,9 +341,1 @@\n-                                if (suppress == Suppress.YES) {\n-                                    expected = Set.of(\"2:8:compiler.warn.preview.feature.use.plural\",\n-                                                      \"3:26:compiler.warn.declared.using.preview\");\n-                                } else {\n-                                    expected = Set.of(\"5:13:compiler.warn.declared.using.preview\",\n-                                                      \"5:24:compiler.warn.declared.using.preview\",\n-                                                      \"2:8:compiler.warn.preview.feature.use.plural\",\n-                                                      \"3:26:compiler.warn.declared.using.preview\");\n-                                }\n+                                expected = Set.of(\"2:8:compiler.warn.preview.feature.use.plural\");\n@@ -361,7 +343,2 @@\n-                                if (suppress == Suppress.YES) {\n-                                    expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n-                                                      \"-1:-1:compiler.note.preview.recompile\");\n-                                } else {\n-                                    expected = Set.of(\"-1:-1:compiler.note.preview.plural\",\n-                                                      \"-1:-1:compiler.note.preview.recompile\");\n-                                }\n+                                expected = Set.of(\"-1:-1:compiler.note.preview.filename\",\n+                                                  \"-1:-1:compiler.note.preview.recompile\");\n","filename":"test\/langtools\/tools\/javac\/preview\/PreviewErrors.java","additions":15,"deletions":38,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n- * @compile --enable-preview -source ${jdk.version} TestSealed.java\n- * @run main\/othervm --enable-preview TestSealed\n+ * @run main TestSealed\n@@ -133,3 +132,1 @@\n-                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\",\n-                \"- compiler.note.preview.filename: SealedInterface.java, DEFAULT\",\n-                \"- compiler.note.preview.recompile\"\n+                \"- compiler.note.proc.messager:     this class has: 0, permitted subclasses\"\n@@ -141,2 +138,0 @@\n-                            \"--enable-preview\",\n-                            \"-source\", Integer.toString(Runtime.version().feature()),\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestSealed.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,3 +36,2 @@\n- * @compile --enable-preview -source ${jdk.version} SealedCompilationTests.java\n- * @run testng\/othervm -DuseAP=false --enable-preview SealedCompilationTests\n- * @run testng\/othervm -DuseAP=true --enable-preview SealedCompilationTests\n+ * @run testng\/othervm -DuseAP=false SealedCompilationTests\n+ * @run testng\/othervm -DuseAP=true SealedCompilationTests\n@@ -80,11 +79,1 @@\n-    \/\/ When sealed classes become a permanent feature, we don't need these any more\n-    private static String[] PREVIEW_OPTIONS = {\n-            \"--enable-preview\",\n-            \"-source\", Integer.toString(Runtime.version().feature())\n-    };\n-\n-    private static String[] PREVIEW_OPTIONS_WITH_AP = {\n-            \"--enable-preview\",\n-            \"-source\", Integer.toString(Runtime.version().feature()),\n-            \"-processor\", SimplestAP.class.getName()\n-    };\n+    private static String[] OPTIONS_WITH_AP = { \"-processor\", SimplestAP.class.getName() };\n@@ -111,1 +100,1 @@\n-        setCompileOptions(useAP ? PREVIEW_OPTIONS_WITH_AP : PREVIEW_OPTIONS);\n+        setCompileOptions(useAP ? OPTIONS_WITH_AP : new String[]{});\n@@ -301,16 +290,0 @@\n-\n-        String[] testOptions = {\/* no options *\/};\n-        String[] previousCompOptions = getCompileOptions();\n-        setCompileOptions(testOptions);\n-        \/\/ now testing with preview disabled\n-        for (String s : List.of(\n-                \"sealed class S {}\",\n-                \"class Outer { sealed class S {} }\",\n-                \"class Outer { void m() { sealed class S {} } }\",\n-                \"non-sealed class S {}\",\n-                \"class Outer { non-sealed class S {} }\",\n-                \"class Outer { void m() { non-sealed class S {} } }\"\n-        )) {\n-            assertFail(\"compiler.err.preview.feature.disabled.plural\", s);\n-        }\n-        setCompileOptions(previousCompOptions);\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":4,"deletions":31,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n@@ -124,1 +123,0 @@\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n@@ -191,1 +189,0 @@\n-                .options(\"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n@@ -213,1 +210,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -239,1 +236,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -278,1 +275,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -312,1 +309,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -345,1 +342,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -380,1 +377,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -416,1 +413,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -456,1 +453,1 @@\n-                .options(\"-XDrawDiagnostics\", \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"-XDrawDiagnostics\")\n@@ -482,1 +479,1 @@\n-                .options(\"--module-source-path\", src.toString(), \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"--module-source-path\", src.toString())\n@@ -501,1 +498,1 @@\n-                .options(\"--module-source-path\", src.toString(), \"--enable-preview\", \"-source\", Integer.toString(Runtime.version().feature()))\n+                .options(\"--module-source-path\", src.toString())\n@@ -522,2 +519,1 @@\n-                        src.toString(), \"--enable-preview\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString())\n@@ -553,2 +549,1 @@\n-                        src.toString(), \"--enable-preview\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString())\n@@ -593,3 +588,1 @@\n-                        \"--add-reads\", \"mSealed=mSub\",\n-                        \"--enable-preview\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        \"--add-reads\", \"mSealed=mSub\")\n@@ -604,2 +597,0 @@\n-            \"- compiler.note.preview.plural: DEFAULT\",\n-            \"- compiler.note.preview.recompile\",\n@@ -626,2 +617,1 @@\n-                        src.toString(), \"--enable-preview\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString())\n@@ -636,2 +626,1 @@\n-                        src.toString(), \"--enable-preview\", \"-doe\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString(), \"-doe\")\n@@ -646,2 +635,1 @@\n-                        src.toString(), \"--enable-preview\", \"-doe\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString(), \"-doe\")\n@@ -659,2 +647,1 @@\n-                        src.toString(), \"--enable-preview\", \"-doe\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString(), \"-doe\")\n@@ -671,2 +658,1 @@\n-                        src.toString(), \"--enable-preview\", \"-doe\",\n-                        \"-source\", Integer.toString(Runtime.version().feature()))\n+                        src.toString(), \"-doe\")\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedDiffConfigurationsTest.java","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-                                \"java.base\/jdk.internal.javac\",\n","filename":"test\/langtools\/tools\/jdeps\/listdeps\/ListModuleDeps.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}