{"files":[{"patch":"@@ -4693,3 +4693,7 @@\n-      int array_base = arrayOopDesc::base_offset_in_bytes(basic_elem_type);\n-      int elem_size = type2aelembytes(basic_elem_type);\n-      st->print(\"[%d]\", (_offset - array_base)\/elem_size);\n+      if (basic_elem_type == T_ILLEGAL) {\n+        st->print(\"+any\");\n+      } else {\n+        int array_base = arrayOopDesc::base_offset_in_bytes(basic_elem_type);\n+        int elem_size = type2aelembytes(basic_elem_type);\n+        st->print(\"[%d]\", (_offset - array_base)\/elem_size);\n+      }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-  assert(allow_address || t != T_ADDRESS, \" \");\n+  assert((allow_address || t != T_ADDRESS) && t <= T_CONFLICT, \"unexpected basic type\");\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277060\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=dontinline,compiler.debug.TestTracePhaseCCP::test\n+ * -XX:CompileCommand=compileonly,compiler.debug.TestTracePhaseCCP::test -XX:+TracePhaseCCP\n+ * compiler.debug.TestTracePhaseCCP\n+ *\/\n+\n+package compiler.debug;\n+\n+import jdk.internal.misc.Unsafe;\n+import java.nio.ByteOrder;\n+\n+public class TestTracePhaseCCP {\n+    static private Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    static final boolean IS_BIG_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;\n+\n+    static int[] srcArr = new int[1];\n+    static int[] dstArr = new int[1];\n+\n+    static int test(boolean flag) {\n+        int[]  srcArrIntLocal  = new int[1];\n+        long[] srcArrLongLocal = new long[1];\n+        Object srcArrLocal = (flag ? srcArrIntLocal               : srcArrLongLocal);\n+        long   srcOffset   = (flag ? Unsafe.ARRAY_INT_BASE_OFFSET : Unsafe.ARRAY_LONG_BASE_OFFSET);\n+        srcOffset += (!flag && IS_BIG_ENDIAN ? 4 : 0);\n+        UNSAFE.copyMemory(srcArrLocal, srcOffset, dstArr, Unsafe.ARRAY_INT_BASE_OFFSET, 4);\n+        return dstArr[0];\n+    }\n+\n+    static boolean flag = false;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            flag = (i % 2 == 0);\n+            int r1 = test(flag);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestTracePhaseCCP.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}