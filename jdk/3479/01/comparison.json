{"files":[{"patch":"@@ -5923,12 +5923,0 @@\n-  if (DumpSharedSpaces && _major_version < JAVA_6_VERSION) {\n-    ResourceMark rm;\n-    warning(\"Pre JDK 6 class not supported by CDS: %u.%u %s\",\n-            _major_version,  _minor_version, _class_name->as_C_string());\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_UnsupportedClassVersionError(),\n-      \"Unsupported major.minor version for dump time %u.%u\",\n-      _major_version,\n-      _minor_version);\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1383,0 +1383,1 @@\n+      return true;\n@@ -1384,1 +1385,4 @@\n-      warn_excluded(k, \"Not linked\");\n+      if (!MetaspaceShared::is_old_class(k)) {\n+        warn_excluded(k, \"Not linked\");\n+        return true;\n+      }\n@@ -1386,1 +1390,0 @@\n-    return true;\n@@ -1388,1 +1391,3 @@\n-  if (k->major_version() < 50 \/*JAVA_6_VERSION*\/) {\n+  if (DynamicDumpSharedSpaces && k->major_version() < 50 \/*JAVA_6_VERSION*\/) {\n+    \/\/ In order to support old classes during dynamic dump, class rewriting needs to\n+    \/\/ be reverted. This would result in more complex code and testing but not much gain.\n@@ -1395,0 +1400,5 @@\n+  if (MetaspaceShared::is_old_class(k) && k->is_linked()) {\n+    warn_excluded(k, \"Old class has been linked\");\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"memory\/metaspaceShared.hpp\"\n@@ -288,1 +289,3 @@\n-    !klass->is_shared() &&\n+    \/\/ However, bytecodes for shared old classes can be verified because\n+    \/\/ they have not been rewritten.\n+    (!(klass->is_shared() && klass->is_rewritten())) &&\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/metaspaceShared.hpp\"\n@@ -570,2 +571,3 @@\n-  if (!DumpSharedSpaces) {\n-    assert(!klass->is_shared(), \"archive methods must not be rewritten at run time\");\n+  if (klass->is_shared()) {\n+    assert(!klass->is_rewritten(), \"rewritten shared classes cannot be rewritten again\");\n+    assert(MetaspaceShared::is_old_class(klass), \"only shared old classes aren't rewritten\");\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -392,1 +392,3 @@\n-    rewrite_nofast_bytecode(m);\n+    if (!is_old_class(ik)) {\n+      rewrite_nofast_bytecode(m);\n+    }\n@@ -581,0 +583,20 @@\n+bool MetaspaceShared::is_old_class(InstanceKlass* ik) {\n+  if (ik == NULL) {\n+    return false;\n+  }\n+  if (ik->major_version() < 50 \/*JAVA_6_VERSION*\/) {\n+    return true;\n+  }\n+  if (is_old_class(ik->java_super())) {\n+    return true;\n+  }\n+  Array<InstanceKlass*>* interfaces = ik->local_interfaces();\n+  int len = interfaces->length();\n+  for (int i = 0; i < len; i++) {\n+    if (is_old_class(interfaces->at(i))) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -582,0 +604,5 @@\n+  bool is_old = is_old_class(ik);\n+  if (is_old) {\n+    ik->set_is_shared_old_klass();\n+  }\n+  \/\/ For static CDS dump, do not link old classes.\n@@ -583,1 +610,1 @@\n-  return DumpSharedSpaces ? true : !ik->is_shared_unregistered_class();\n+  return DumpSharedSpaces ? !is_old : !ik->is_shared_unregistered_class();\n@@ -763,1 +790,1 @@\n-  if (ik->is_loaded() && !ik->is_linked() &&\n+  if (ik->is_loaded() && !ik->is_linked() && !MetaspaceShared::is_old_class(ik) &&\n@@ -809,1 +836,3 @@\n-      ik->constants()->add_dumped_interned_strings();\n+      if (ik->is_linked()) {\n+        ik->constants()->add_dumped_interned_strings();\n+      }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+  static bool is_old_class(InstanceKlass* ik);\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -408,1 +408,5 @@\n-  it->push(&_constants);\n+  if (!method()->method_holder()->is_rewritten()) {\n+    it->push(&_constants, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constants);\n+  }\n@@ -422,1 +426,0 @@\n-  ConstMethod* this_ptr = this;\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -356,0 +356,3 @@\n+  if (!_pool_holder->is_linked() && !_pool_holder->is_rewritten()) {\n+    return;\n+  }\n@@ -393,0 +396,3 @@\n+  if (!_pool_holder->is_linked() && _pool_holder->is_shared_old_klass()) {\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2457,1 +2457,5 @@\n-  it->push(&_constants);\n+  if (!is_rewritten()) {\n+    it->push(&_constants, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constants);\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -180,1 +180,2 @@\n-    _has_value_based_class_annotation = 4\n+    _has_value_based_class_annotation = 4,\n+    _is_shared_old_klass = 8\n@@ -336,0 +337,8 @@\n+  void set_is_shared_old_klass() {\n+    CDS_ONLY(_shared_class_flags |= _is_shared_old_klass;)\n+  }\n+  bool is_shared_old_klass() const {\n+    CDS_ONLY(return (_shared_class_flags & _is_shared_old_klass) != 0;)\n+    NOT_CDS(return false;)\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  return _klass->is_shared() && !MetaspaceShared::remapped_readwrite();\n+  return _klass->is_shared() && !MetaspaceShared::remapped_readwrite() && !_klass->is_shared_old_klass();\n@@ -1096,1 +1096,2 @@\n-     !MetaspaceShared::remapped_readwrite()) {\n+     !MetaspaceShared::remapped_readwrite() &&\n+     !MetaspaceShared::is_old_class(m->method_holder())) {\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -347,1 +347,5 @@\n-  it->push(&_constMethod);\n+  if (!method_holder()->is_rewritten()) {\n+    it->push(&_constMethod, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constMethod);\n+  }\n@@ -350,2 +354,0 @@\n-\n-  Method* this_ptr = this;\n@@ -365,1 +367,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite()) {\n+  if (is_shared() && !MetaspaceShared::remapped_readwrite() && !method_holder()->is_shared_old_klass()) {\n@@ -376,1 +378,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite()) {\n+  if (is_shared() && !MetaspaceShared::remapped_readwrite() && !method_holder()->is_shared_old_klass()) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-              .shouldMatch(\".class.load. LambdaWithOldClassApp[$][$]Lambda[$].*\/0x.*source:.*LambdaWithOldClassApp\")\n+              .shouldMatch(\".class.load. LambdaWithOldClassApp[$][$]Lambda[$].*\/0x.*source:.*shared objects file\")\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithOldClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary classes with major version < JDK_6 (50) should not be included in CDS\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n@@ -38,0 +38,1 @@\n+import jdk.test.lib.cds.CDSTestUtils;\n@@ -58,0 +59,1 @@\n+    boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n@@ -60,2 +62,4 @@\n-    OutputAnalyzer output = TestCommon.dump(jar, appClasses);\n-    TestCommon.checkExecReturn(output, 0, true, \"Pre JDK 6 class not supported by CDS\");\n+    OutputAnalyzer output = TestCommon.dump(jar, appClasses, \"-Xlog:class+load,cds=debug\");\n+    TestCommon.checkExecReturn(output, 0,\n+                               dynamicMode ? true : false,\n+                               \"Pre JDK 6 class not supported by CDS\");\n@@ -65,0 +69,1 @@\n+        \"-Xlog:class+load\",\n@@ -66,1 +71,8 @@\n-      .assertNormalExit(\"Hello Unicode world (Old)\");\n+      .assertNormalExit(out -> {\n+          out.shouldContain(\"Hello Unicode world (Old)\");\n+          if (!dynamicMode) {\n+              out.shouldContain(\"Hello source: shared objects file\");\n+          } else {\n+              out.shouldMatch(\".class.load. Hello source:.*OldClassTest_old.jar\");\n+          }\n+      });\n@@ -72,1 +84,3 @@\n-    TestCommon.checkExecReturn(output, 0, true, \"Pre JDK 6 class not supported by CDS\");\n+    TestCommon.checkExecReturn(output, 0,\n+                               dynamicMode ? true : false,\n+                               \"Pre JDK 6 class not supported by CDS\");\n@@ -76,0 +90,1 @@\n+        \"-Xlog:class+load\",\n@@ -77,1 +92,8 @@\n-      .assertNormalExit(\"Hello Unicode world (Old)\");\n+      .assertNormalExit(out -> {\n+          out.shouldContain(\"Hello Unicode world (Old)\");\n+          if (!dynamicMode) {\n+              out.shouldContain(\"Hello source: shared objects file\");\n+          } else {\n+              out.shouldMatch(\".class.load. Hello source:.*OldClassTest_old.jar\");\n+          }\n+      });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldClassTest.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n+ *          Test with old super class.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldSuper.jasm\n+ * @compile test-classes\/ChildOldSuper.java\n+ * @compile test-classes\/GChild.java\n+ * @compile test-classes\/OldSuperApp.java\n+ * @run driver OldSuperClass\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldSuperClass {\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"OldSuperApp\";\n+        String namePrefix = \"oldsuperclass\";\n+        String appClasses[] = TestCommon.list(\"OldSuper\", \"ChildOldSuper\", \"GChild\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+\n+        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   dynamicMode ? true : false,\n+                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldSuper\",\n+                                   \"Skipping ChildOldSuper: Old class has been linked\",\n+                                   \"Skipping GChild: Old class has been linked\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldSuper with old format\")\n+                 .shouldContain(\"Verifying class ChildOldSuper with new format\")\n+                 .shouldContain(\"Verifying class GChild with new format\");\n+              if (!dynamicMode) {\n+                  out.shouldContain(\"OldSuper source: shared objects file\")\n+                     .shouldContain(\"ChildOldSuper source: shared objects file\")\n+                     .shouldContain(\"GChild source: shared objects file\");\n+              } else {\n+                  \/\/ Old classes were already linked before dynamic dump happened,\n+                  \/\/ so they couldn't be archived.\n+                  out.shouldMatch(\".class.load.*OldSuper source:.*oldsuperclass.jar\")\n+                     .shouldMatch(\".class.load.*ChildOldSuper source:.*oldsuperclass.jar\")\n+                     .shouldMatch(\".class.load.*GChild source:.*oldsuperclass.jar\");\n+              }\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperClass.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n+ *          Test with old super interface.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldInf.jasm\n+ * @compile test-classes\/ChildOldInf.java\n+ * @compile test-classes\/GChild2.java\n+ * @compile test-classes\/OldSuperInfApp.java\n+ * @run driver OldSuperInf\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldSuperInf {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"OldSuperInfApp\";\n+        String namePrefix = \"oldsuperinf\";\n+        String appClasses[] = TestCommon.list(\"OldInf\", \"ChildOldInf\", \"GChild2\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String archiveName = namePrefix + \".jsa\";\n+\n+        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   dynamicMode ? true : false,\n+                                   \"Pre JDK 6 class not supported by CDS: 49.0 OldInf\",\n+                                   \"Skipping ChildOldInf: Old class has been linked\",\n+                                   \"Skipping GChild2: Old class has been linked\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldInf with old format\")\n+                 .shouldContain(\"Verifying class ChildOldInf with new format\")\n+                 .shouldContain(\"Verifying class GChild2 with new format\");\n+              if (!dynamicMode) {\n+                  out.shouldContain(\"OldInf source: shared objects file\")\n+                     .shouldContain(\"ChildOldInf source: shared objects file\")\n+                     .shouldContain(\"GChild2 source: shared objects file\");\n+              } else {\n+                  \/\/ Old classes were already linked before dynamic dump happened,\n+                  \/\/ so they couldn't be archived.\n+                  out.shouldMatch(\".class.load.*OldInf source:.*oldsuperinf.jar\")\n+                     .shouldMatch(\".class.load.*ChildOldInf source:.*oldsuperinf.jar\")\n+                     .shouldMatch(\".class.load.*GChild2 source:.*oldsuperinf.jar\");\n+              }\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/OldSuperInf.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test archiving of old class and interface with custom loader.\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/OldClassApp.java ..\/test-classes\/OldSuper.jasm\n+ * @compile ..\/test-classes\/ChildOldSuper.java ..\/test-classes\/GChild.java\n+ * @compile ..\/test-classes\/OldInf.jasm ..\/test-classes\/ChildOldInf.java\n+ * @compile ..\/test-classes\/GChild2.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldclassapp.jar OldClassApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar loadees.jar OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar loadees2.jar OldInf ChildOldInf GChild2\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run driver OldClassAndInf\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import sun.hotspot.WhiteBox;\n+\n+public class OldClassAndInf {\n+    static String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+    static String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+    static String appJar = ClassFileInstaller.getJarPath(\"oldclassapp.jar\");\n+    static String loadeesJar = ClassFileInstaller.getJarPath(\"loadees.jar\");\n+    static String loadeesJar2 = ClassFileInstaller.getJarPath(\"loadees2.jar\");\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String classlist[] = new String[] {\n+            \"OldClassApp\",\n+            \"java\/lang\/Object id: 1\",\n+            \"OldSuper id: 2 super: 1 source: \" + loadeesJar,\n+            \"ChildOldSuper id: 3 super: 2 source: \" + loadeesJar,\n+            \"GChild id: 4 super: 3 source: \" + loadeesJar\n+        };\n+        doTest(classlist, loadeesJar, \"true\",  \"OldSuper\", \"ChildOldSuper\", \"GChild\");\n+\n+        String classlist2[] = new String[] {\n+            \"OldClassApp\",\n+            \"java\/lang\/Object id: 1\",\n+            \"OldInf id: 2 super: 1 source: \" + loadeesJar2,\n+            \"ChildOldInf id: 3 super: 1 interfaces: 2 source: \" + loadeesJar2,\n+            \"GChild2 id: 4 super: 3 source: \" + loadeesJar2\n+        };\n+        doTest(classlist2, loadeesJar2, \"true\", \"OldInf\", \"ChildOldInf\", \"GChild2\");\n+    }\n+\n+    public static void doTest(String[] classlist, String loadeesJar, String inArchive, String ...loadees) throws Exception {\n+\n+        OutputAnalyzer output;\n+        TestCommon.testDump(appJar, classlist,\n+                            \"-Xlog:cds=debug,class+load\",\n+                            use_whitebox_jar);\n+\n+        output = TestCommon.exec(appJar,\n+                                 TestCommon.concat(\n+                                     TestCommon.list(\n+                                         use_whitebox_jar,\n+                                         \"-Xlog:class+load,cds=debug\",\n+                                         \"-XX:+UnlockDiagnosticVMOptions\",\n+                                         \"-XX:+WhiteBoxAPI\",\n+                                         \"OldClassApp\", loadeesJar, inArchive),\n+                                     loadees));\n+\n+        TestCommon.checkExec(output);\n+        for (String loadee : loadees) {\n+            output.shouldContain(\"[class,load] \" + loadee + \" source: shared objects file\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/OldClassAndInf.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import sun.hotspot.WhiteBox;\n+\n+public class OldClassApp {\n+    public static void main(String args[]) throws Exception {\n+        String path = args[0];\n+        URL url = new File(path).toURI().toURL();\n+        URL[] urls = new URL[] {url};\n+        System.out.println(path);\n+        System.out.println(url);\n+\n+        boolean inArchive = false;\n+        if (args[1].equals(\"true\")) {\n+            inArchive = true;\n+        } else if (args[1].equals(\"false\")) {\n+            inArchive = false;\n+        } else {\n+            throw new RuntimeException(\"args[1] can only be either \\\"true\\\" or \\\"false\\\", actual \" + args[1]);\n+        }\n+\n+        URLClassLoader urlClassLoader =\n+            new URLClassLoader(\"OldClassAppClassLoader\", urls, null);\n+\n+        for (int i = 2; i < args.length; i++) {\n+            Class c = urlClassLoader.loadClass(args[i]);\n+            System.out.println(c);\n+            System.out.println(c.getClassLoader());\n+\n+            \/\/ [1] Check that class is defined by the correct loader\n+            if (c.getClassLoader() != urlClassLoader) {\n+                throw new RuntimeException(\"c.getClassLoader() == \" + c.getClassLoader() +\n+                                           \", expected == \" + urlClassLoader);\n+            }\n+\n+            \/\/ [2] Check that class is loaded from shared static archive.\n+            if (inArchive) {\n+                WhiteBox wb = WhiteBox.getWhiteBox();\n+                if (wb.isSharedClass(OldClassApp.class)) {\n+                    if (!wb.isSharedClass(c)) {\n+                        throw new RuntimeException(\"wb.isSharedClass(c) should be true\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\/OldClassApp.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test archiving of old class and interface with custom loader with dynamic CDS.\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/customLoader\/test-classes\/OldClassApp.java ..\/test-classes\/OldSuper.jasm\n+ * @compile ..\/test-classes\/ChildOldSuper.java ..\/test-classes\/GChild.java\n+ * @compile ..\/test-classes\/OldInf.jasm ..\/test-classes\/ChildOldInf.java\n+ * @compile ..\/test-classes\/GChild2.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar oldclassapp.jar OldClassApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar loadees.jar OldSuper ChildOldSuper GChild\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar loadees2.jar OldInf ChildOldInf GChild2\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar OldClassAndInf\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldClassAndInf extends DynamicArchiveTestBase {\n+    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"oldclass-top.jsa\");\n+    private static String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+    private static String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+    private static String appJar = ClassFileInstaller.getJarPath(\"oldclassapp.jar\");\n+    private static String mainAppClass = \"OldClassApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(OldClassAndInf::testDefaultBase);\n+    }\n+\n+    private static void testDefaultBase() throws Exception {\n+        System.out.println(\"Run test with old super class...\");\n+        String loadeesJar = ClassFileInstaller.getJarPath(\"loadees.jar\");\n+        doTest(loadeesJar, \"false\", \"OldSuper\", \"ChildOldSuper\", \"GChild\");\n+\n+        System.out.println(\"Run test with old super interface...\");\n+        String loadeesJar2 = ClassFileInstaller.getJarPath(\"loadees2.jar\");\n+        doTest(loadeesJar2, \"false\", \"OldInf\", \"ChildOldInf\", \"GChild2\");\n+    }\n+\n+    private static void doTest(String loadeesJar, String inArchive, String ...loadees) throws Exception {\n+\n+        String[] loadeesArray = TestCommon.list(loadees);\n+\n+        dump(ARCHIVE_NAME,\n+             TestCommon.concat(\n+                 TestCommon.list(\n+                     use_whitebox_jar,\n+                     \"-XX:+UnlockDiagnosticVMOptions\",\n+                     \"-XX:+WhiteBoxAPI\",\n+                     \"-Xlog:cds\",\n+                     \"-Xlog:cds+dynamic=debug\",\n+                     \"-cp\", appJar,\n+                     mainAppClass, loadeesJar, inArchive),\n+             loadees))\n+             .assertNormalExit(output -> {\n+                 output.shouldContain(\"Written dynamic archive 0x\")\n+                       .shouldContain(\"Pre JDK 6 class not supported by CDS: 49.0 \" + loadeesArray[0])\n+                       .shouldMatch(\"Skipping \" + loadeesArray[1] +\":.*\" + loadeesArray[0] + \" is excluded\")\n+                       .shouldMatch(\"Skipping \" + loadeesArray[2] +\": super.*\" + loadeesArray[1] + \" is excluded\")\n+                       .shouldHaveExitValue(0);\n+                 });\n+\n+        run(ARCHIVE_NAME,\n+            TestCommon.concat(\n+                TestCommon.list(\n+                    use_whitebox_jar,\n+                    \"-XX:+UnlockDiagnosticVMOptions\",\n+                    \"-XX:+WhiteBoxAPI\",\n+                    \"-Xlog:class+load\",\n+                    \"-Xlog:cds=debug\",\n+                    \"-Xlog:cds+dynamic=info\",\n+                    \"-cp\", appJar,\n+                    mainAppClass, loadeesJar, inArchive),\n+            loadees))\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0);\n+                for (String loadee : loadees) {\n+                    output.shouldMatch(\".class.load. \" + loadee + \" source:.*\" + loadeesJar);\n+                }\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/OldClassAndInf.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @summary Dump old class with java agent.\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @requires vm.cds\n+ * @requires vm.jvmti\n+ * @compile ..\/..\/test-classes\/OldSuper.jasm\n+ * @compile SimpleAgent.java\n+ * @run main\/othervm OldClassWithJavaAgent\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class OldClassWithJavaAgent {\n+    public static String appClasses[] = {\"OldSuper\"};\n+    public static String agentClasses[] = {\"SimpleAgent\"};\n+    public static String diagnosticOption = \"-XX:+AllowArchivingWithJavaAgent\";\n+    public static void main(String[] args) throws Throwable {\n+        String agentJar =\n+            ClassFileInstaller.writeJar(\"SimpleAgent.jar\",\n+                                        ClassFileInstaller.Manifest.fromSourceFile(\"SimpleAgent.mf\"),\n+                                        agentClasses);\n+\n+        String appJar =\n+            ClassFileInstaller.writeJar(\"OldClassWithJavaAgent.jar\", appClasses);\n+        OutputAnalyzer output = TestCommon.testDump(appJar, TestCommon.list(\"OldSuper\"),\n+            \"-Xlog:cds=debug,class+load\",\n+            \"-XX:+UnlockDiagnosticVMOptions\", diagnosticOption,\n+            \"-javaagent:\" + agentJar + \"=OldSuper\");\n+\n+        boolean dynamicMode = CDSTestUtils.DYNAMIC_DUMP;\n+\n+        \/\/ The java agent will load and link the class. We will skip old classes\n+        \/\/ which have been linked during static CDS dump.\n+        \/\/ Dynamic CDS dump doesn't support old class.\n+        if (!dynamicMode) {\n+            output.shouldContain(\"Skipping OldSuper: Old class has been linked\");\n+        } else {\n+            output.shouldContain(\"Pre JDK 6 class not supported by CDS: 49.0 OldSuper\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/OldClassWithJavaAgent.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-    public static void premain(String agentArg, Instrumentation instrumentation) {\n+    public static void premain(String agentArg, Instrumentation instrumentation) throws Exception {\n@@ -29,0 +29,4 @@\n+        \/\/ Only load the class if the test requires it.\n+        if (agentArg != null && agentArg.equals(\"OldSuper\")) {\n+            Class<?> cls = Class.forName(\"OldSuper\", true, ClassLoader.getSystemClassLoader());\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/SimpleAgent.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class ChildOldInf implements OldInf {\n+    public String doit() {\n+        return \"ChildOldInf\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ChildOldInf.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class ChildOldSuper extends OldSuper {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ChildOldSuper.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class GChild extends ChildOldSuper {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/GChild.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class GChild2 extends ChildOldInf {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/GChild2.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public interface  OldInf\n+\tversion 49:0\n+{\n+\n+\n+public abstract Method doit:\"()Ljava\/lang\/String;\";\n+\n+} \/\/ end Class OldInf\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldInf.jasm","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+super public class OldSuper\n+\tversion 49:0\n+{\n+\n+\n+public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+{\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+}\n+\n+public Method doit:\"()Ljava\/lang\/String;\"\n+\tstack 1 locals 1\n+{\n+\t\tldc\tString \"Hello\";\n+\t\tareturn;\n+}\n+\n+} \/\/ end Class OldSuper\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldSuper.jasm","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class OldSuperApp {\n+    public static void main(String args[]) {\n+        ChildOldSuper c = new ChildOldSuper();\n+        System.out.println(c.doit());\n+\n+        GChild g = new GChild();\n+        System.out.println(g.doit());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldSuperApp.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class OldSuperInfApp {\n+    public static void main(String args[]) {\n+        ChildOldInf c = new ChildOldInf();\n+        System.out.println(c.doit());\n+\n+        GChild2 g = new GChild2();\n+        System.out.println(g.doit());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/OldSuperInfApp.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"}]}