{"files":[{"patch":"@@ -3743,1 +3743,3 @@\n-      tzcntq(tmp, tmp);\n+      mov64(dst, masklen);\n+      bsfq(tmp, tmp);\n+      cmov(Assembler::notZero, dst, tmp);\n@@ -3751,67 +3753,19 @@\n-  if (vec_enc == AVX_512bit) {\n-    Label DONE;\n-    assert(!VM_Version::supports_avx512bw(), \"\");\n-    switch(opc) {\n-      case Op_VectorMaskTrueCount:\n-        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n-        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp1);\n-        popcntq(dst, tmp);\n-        vextracti64x4(xtmp1, mask, 0x1);\n-        vpsubb(xtmp, xtmp, xtmp1, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp);\n-        popcntq(tmp, tmp);\n-        addq(dst, tmp);\n-        break;\n-      case Op_VectorMaskLastTrue:\n-        mov64(dst, -1);\n-        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n-        vextracti64x4(xtmp1, mask, 0x1);\n-        vpsubb(xtmp1, xtmp, xtmp1, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp1);\n-        bsrq(tmp, tmp);\n-        cmov(Assembler::notZero, dst, tmp);\n-        jcc(Assembler::notZero, DONE);\n-        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp1);\n-        bsrq(tmp, tmp);\n-        jcc(Assembler::zero, DONE);\n-        leaq(dst, Address(tmp, 32));\n-        bind(DONE);\n-        break;\n-      case Op_VectorMaskFirstTrue:\n-        mov64(dst, masklen);\n-        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n-        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp1);\n-        bsfq(tmp, tmp);\n-        cmov(Assembler::notZero, dst, tmp);\n-        jcc(Assembler::notZero, DONE);\n-        vextracti64x4(xtmp1, mask, 0x1);\n-        vpsubb(xtmp1, xtmp, xtmp1, Assembler::AVX_256bit);\n-        vpmovmskb(tmp, xtmp1);\n-        bsrq(tmp, tmp);\n-        jcc(Assembler::zero, DONE);\n-        leaq(dst, Address(tmp, 32));\n-        bind(DONE);\n-        break;\n-      default: assert(false, \"Unhandled mask operation\");\n-    }\n-  } else {\n-    vpxor(xtmp, xtmp, xtmp, vec_enc);\n-    vpsubb(xtmp, xtmp, mask, vec_enc);\n-    vpmovmskb(tmp, xtmp);\n-    switch(opc) {\n-      case Op_VectorMaskTrueCount:\n-        popcntq(dst, tmp);\n-        break;\n-      case Op_VectorMaskLastTrue:\n-        mov64(dst, -1);\n-        bsrq(tmp, tmp);\n-        cmov(Assembler::notZero, dst, tmp);\n-        break;\n-      case Op_VectorMaskFirstTrue:\n-        tzcntq(tmp, tmp);\n-        break;\n-      default: assert(false, \"Unhandled mask operation\");\n-    }\n+  assert(VM_Version::supports_avx(), \"\");\n+  vpxor(xtmp, xtmp, xtmp, vec_enc);\n+  vpsubb(xtmp, xtmp, mask, vec_enc);\n+  vpmovmskb(tmp, xtmp);\n+  switch(opc) {\n+    case Op_VectorMaskTrueCount:\n+      popcntq(dst, tmp);\n+      break;\n+    case Op_VectorMaskLastTrue:\n+      mov64(dst, -1);\n+      bsrq(tmp, tmp);\n+      cmov(Assembler::notZero, dst, tmp);\n+      break;\n+    case Op_VectorMaskFirstTrue:\n+      mov64(dst, masklen);\n+      bsfq(tmp, tmp);\n+      cmov(Assembler::notZero, dst, tmp);\n+      break;\n+    default: assert(false, \"Unhandled mask operation\");\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":22,"deletions":68,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -1587,1 +1587,1 @@\n-      if (UseAVX < 1) {\n+      if (!is_LP64 || UseAVX < 1) {\n@@ -1660,3 +1660,0 @@\n-    case Op_VectorMaskLastTrue:\n-    case Op_VectorMaskFirstTrue:\n-    case Op_VectorMaskTrueCount:\n@@ -8068,2 +8065,2 @@\n-instruct vmask_oper_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp, rFlagsReg cr) %{\n-  predicate(VM_Version::supports_avx512bw());\n+instruct vmask_truecount_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp) %{\n+  predicate(VM_Version::supports_avx512vlbw());\n@@ -8071,0 +8068,16 @@\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp);\n+  format %{ \"vector_truecount_evex $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    const MachNode* mask_node = static_cast<const MachNode*>(this->in(this->operand_index($mask)));\n+    assert(mask_node->bottom_type()->isa_vect(), \"\");\n+    int vector_len = vector_length_encoding(mask_node);\n+    int opcode = this->ideal_Opcode();\n+    int mask_len = mask_node->bottom_type()->is_vect()->length();\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $tmp$$Register, $ktmp$$KRegister, mask_len, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_first_or_last_true_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp, rFlagsReg cr) %{\n+  predicate(VM_Version::supports_avx512vlbw());\n@@ -8074,1 +8087,1 @@\n-  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n+  format %{ \"vector_mask_first_or_last_true_evex $mask \\t! vector first\/last true location\" %}\n@@ -8087,2 +8100,2 @@\n-instruct vmask_oper_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n-  predicate(!VM_Version::supports_avx512bw());\n+instruct vmask_truecount_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1) %{\n+  predicate(!VM_Version::supports_avx512vlbw());\n@@ -8090,0 +8103,16 @@\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1);\n+  format %{ \"vector_truecount_avx $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    const MachNode* mask_node = static_cast<const MachNode*>(this->in(this->operand_index($mask)));\n+    assert(mask_node->bottom_type()->isa_vect(), \"\");\n+    int vector_len = vector_length_encoding(mask_node);\n+    int opcode = this->ideal_Opcode();\n+    int mask_len = mask_node->bottom_type()->is_vect()->length();\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_first_or_last_true_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx512vlbw());\n@@ -8093,1 +8122,1 @@\n-  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n+  format %{ \"vector_mask_first_or_last_true_avx $mask \\t! vector first\/last true location\" %}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -928,1 +928,1 @@\n-    do_name(vector_mask_oper_name, \"maskOp\")                                                                                                   \\\n+    do_name(vector_mask_oper_name, \"maskReductionCoerced\")                                                                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -407,2 +407,3 @@\n-\/\/ <E, M extends VectorMask<E>>\n-\/\/ int maskOp(int oper, Class<?> MaskClass, Class<?> E, int length, M m, VectorMaskOp<E, M> defaultImpl)\n+\/\/ <E, M>\n+\/\/ int maskReductionCoerced(int oper, Class<? extends M> maskClass, Class<?> elemClass,\n+\/\/                          int length, M m, VectorMaskOp<M> defaultImpl)\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -468,2 +468,2 @@\n-    <M>\n-    int maskOp(int oper, Class<?> maskClass, Class<?> elemClass, int length, M m,\n+    <E, M>\n+    int maskReductionCoerced(int oper, Class<? extends M> maskClass, Class<?> elemClass, int length, M m,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -688,2 +688,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte128Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Byte128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Byte128Mask)m).getBits()));\n@@ -695,2 +695,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Byte128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Byte128Mask)m).getBits()));\n@@ -702,2 +702,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Byte128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Byte128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -720,2 +720,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte256Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Byte256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Byte256Mask)m).getBits()));\n@@ -727,2 +727,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Byte256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Byte256Mask)m).getBits()));\n@@ -734,2 +734,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Byte256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Byte256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -784,2 +784,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte512Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Byte512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Byte512Mask)m).getBits()));\n@@ -791,2 +791,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Byte512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Byte512Mask)m).getBits()));\n@@ -798,2 +798,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Byte512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Byte512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte64Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Byte64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Byte64Mask)m).getBits()));\n@@ -679,2 +679,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Byte64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Byte64Mask)m).getBits()));\n@@ -686,2 +686,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Byte64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Byte64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -658,2 +658,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, ByteMaxMask.class, byte.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((ByteMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((ByteMaxMask)m).getBits()));\n@@ -665,2 +665,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((ByteMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((ByteMaxMask)m).getBits()));\n@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((ByteMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((ByteMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -656,2 +656,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Double128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Double128Mask)m).getBits()));\n@@ -663,2 +663,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Double128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Double128Mask)m).getBits()));\n@@ -670,2 +670,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Double128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Double128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -660,2 +660,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Double256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Double256Mask)m).getBits()));\n@@ -667,2 +667,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Double256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Double256Mask)m).getBits()));\n@@ -674,2 +674,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Double256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Double256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -668,2 +668,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Double512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Double512Mask)m).getBits()));\n@@ -675,2 +675,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Double512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Double512Mask)m).getBits()));\n@@ -682,2 +682,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Double512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Double512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -654,2 +654,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Double64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Double64Mask)m).getBits()));\n@@ -661,2 +661,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Double64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Double64Mask)m).getBits()));\n@@ -668,2 +668,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Double64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Double64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -653,2 +653,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, DoubleMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((DoubleMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((DoubleMaxMask)m).getBits()));\n@@ -660,2 +660,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((DoubleMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((DoubleMaxMask)m).getBits()));\n@@ -667,2 +667,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((DoubleMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((DoubleMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -660,2 +660,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Float128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Float128Mask)m).getBits()));\n@@ -667,2 +667,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Float128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Float128Mask)m).getBits()));\n@@ -674,2 +674,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Float128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Float128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -668,2 +668,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Float256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Float256Mask)m).getBits()));\n@@ -675,2 +675,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Float256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Float256Mask)m).getBits()));\n@@ -682,2 +682,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Float256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Float256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -684,2 +684,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Float512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Float512Mask)m).getBits()));\n@@ -691,2 +691,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Float512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Float512Mask)m).getBits()));\n@@ -698,2 +698,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Float512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Float512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -656,2 +656,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Float64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Float64Mask)m).getBits()));\n@@ -663,2 +663,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Float64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Float64Mask)m).getBits()));\n@@ -670,2 +670,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Float64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Float64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -653,2 +653,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, FloatMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((FloatMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((FloatMaxMask)m).getBits()));\n@@ -660,2 +660,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((FloatMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((FloatMaxMask)m).getBits()));\n@@ -667,2 +667,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((FloatMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((FloatMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -664,2 +664,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Int128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Int128Mask)m).getBits()));\n@@ -671,2 +671,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Int128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Int128Mask)m).getBits()));\n@@ -678,2 +678,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Int128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Int128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Int256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Int256Mask)m).getBits()));\n@@ -679,2 +679,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Int256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Int256Mask)m).getBits()));\n@@ -686,2 +686,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Int256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Int256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -688,2 +688,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Int512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Int512Mask)m).getBits()));\n@@ -695,2 +695,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Int512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Int512Mask)m).getBits()));\n@@ -702,2 +702,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Int512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Int512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -660,2 +660,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Int64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Int64Mask)m).getBits()));\n@@ -667,2 +667,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Int64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Int64Mask)m).getBits()));\n@@ -674,2 +674,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Int64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Int64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -658,2 +658,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, IntMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((IntMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, IntMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((IntMaxMask)m).getBits()));\n@@ -665,2 +665,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((IntMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((IntMaxMask)m).getBits()));\n@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((IntMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((IntMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -650,2 +650,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Long128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Long128Mask)m).getBits()));\n@@ -657,2 +657,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Long128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Long128Mask)m).getBits()));\n@@ -664,2 +664,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Long128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Long128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -654,2 +654,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Long256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Long256Mask)m).getBits()));\n@@ -661,2 +661,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Long256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Long256Mask)m).getBits()));\n@@ -668,2 +668,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Long256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Long256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -662,2 +662,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Long512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Long512Mask)m).getBits()));\n@@ -669,2 +669,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Long512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Long512Mask)m).getBits()));\n@@ -676,2 +676,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Long512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Long512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -648,2 +648,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Long64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Long64Mask)m).getBits()));\n@@ -655,2 +655,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Long64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Long64Mask)m).getBits()));\n@@ -662,2 +662,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Long64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Long64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -648,2 +648,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, LongMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((LongMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, LongMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((LongMaxMask)m).getBits()));\n@@ -655,2 +655,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((LongMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((LongMaxMask)m).getBits()));\n@@ -662,2 +662,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((LongMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((LongMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short128Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Short128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short128Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Short128Mask)m).getBits()));\n@@ -679,2 +679,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Short128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Short128Mask)m).getBits()));\n@@ -686,2 +686,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Short128Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Short128Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -688,2 +688,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short256Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Short256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short256Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Short256Mask)m).getBits()));\n@@ -695,2 +695,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Short256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Short256Mask)m).getBits()));\n@@ -702,2 +702,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Short256Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Short256Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -720,2 +720,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short512Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Short512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short512Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Short512Mask)m).getBits()));\n@@ -727,2 +727,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Short512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Short512Mask)m).getBits()));\n@@ -734,2 +734,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Short512Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Short512Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -664,2 +664,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short64Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((Short64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short64Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((Short64Mask)m).getBits()));\n@@ -671,2 +671,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((Short64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((Short64Mask)m).getBits()));\n@@ -678,2 +678,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((Short64Mask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((Short64Mask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -658,2 +658,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, ShortMaxMask.class, short.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper(((ShortMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper(((ShortMaxMask)m).getBits()));\n@@ -665,2 +665,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper(((ShortMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper(((ShortMaxMask)m).getBits()));\n@@ -672,2 +672,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper(((ShortMaxMask)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper(((ShortMaxMask)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -931,2 +931,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class, VLENGTH, this,\n-                                        (m) -> trueCountHelper((($masktype$)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                                      (m) -> trueCountHelper((($masktype$)m).getBits()));\n@@ -938,2 +938,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n-                                        (m) -> firstTrueHelper((($masktype$)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                                      (m) -> firstTrueHelper((($masktype$)m).getBits()));\n@@ -945,2 +945,2 @@\n-            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n-                                        (m) -> lastTrueHelper((($masktype$)m).getBits()));\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                                      (m) -> lastTrueHelper((($masktype$)m).getBits()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5181,0 +5181,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5181,0 +5181,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5181,0 +5181,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5181,0 +5181,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByte64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5186,0 +5186,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueByteMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4927,0 +4927,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4927,0 +4927,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4927,0 +4927,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4927,0 +4927,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDouble64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4932,0 +4932,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueDoubleMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4905,0 +4905,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4905,0 +4905,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4905,0 +4905,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4905,0 +4905,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloat64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -4910,0 +4910,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueFloatMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5136,0 +5136,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5136,0 +5136,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5136,0 +5136,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5136,0 +5136,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueInt64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5141,0 +5141,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueIntMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5019,0 +5019,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5019,0 +5019,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5019,0 +5019,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5019,0 +5019,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLong64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5024,0 +5024,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueLongMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5160,0 +5160,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort128VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5160,0 +5160,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort256VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5160,0 +5160,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort512VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5160,0 +5160,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShort64VectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5165,0 +5165,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrueShortMaxVectorTestsSmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -447,0 +447,18 @@\n+    @Test(dataProvider = \"maskProvider\")\n+    static void maskFirstTrue$vectorteststype$SmokeTest(IntFunction<boolean[]> fa) {\n+        boolean[] a = fa.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            var vmask = SPECIES.loadMask(a, i);\n+            int ftrue = vmask.firstTrue();\n+            int j = i;\n+            for (; j < i + SPECIES.length() ; j++) {\n+                if (a[j]) break;\n+            }\n+            int expectedFtrue = j - i;\n+\n+            Assert.assertTrue(ftrue == expectedFtrue, \"at index \" + i +\n+                \", firstTrue should be = \" + expectedFtrue + \", but is = \" + ftrue);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}