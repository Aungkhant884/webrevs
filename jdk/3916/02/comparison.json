{"files":[{"patch":"@@ -9220,0 +9220,8 @@\n+void Assembler::evpmovb2m(KRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512vlbw(), \"\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F3, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x29, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2471,0 +2471,2 @@\n+  void evpmovb2m(KRegister dst, XMMRegister src, int vector_len);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3724,0 +3724,97 @@\n+\n+#ifdef _LP64\n+void C2_MacroAssembler::vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n+                                              Register tmp, KRegister ktmp, int masklen, int vec_enc) {\n+  assert(VM_Version::supports_avx512vlbw(), \"\");\n+  vpxor(xtmp, xtmp, xtmp, vec_enc);\n+  vpsubb(xtmp, xtmp, mask, vec_enc);\n+  evpmovb2m(ktmp, xtmp, vec_enc);\n+  kmovql(tmp, ktmp);\n+  switch(opc) {\n+    case Op_VectorMaskTrueCount:\n+      popcntq(dst, tmp);\n+      break;\n+    case Op_VectorMaskLastTrue:\n+      mov64(dst, -1);\n+      bsrq(tmp, tmp);\n+      cmov(Assembler::notZero, dst, tmp);\n+      break;\n+    case Op_VectorMaskFirstTrue:\n+      tzcntq(tmp, tmp);\n+      break;\n+    default: assert(false, \"Unhandled mask operation\");\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n+                                              XMMRegister xtmp1, Register tmp, int masklen, int vec_enc) {\n+  if (vec_enc == AVX_512bit) {\n+    Label DONE;\n+    assert(!VM_Version::supports_avx512bw(), \"\");\n+    switch(opc) {\n+      case Op_VectorMaskTrueCount:\n+        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n+        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp1);\n+        popcntq(dst, tmp);\n+        vextracti64x4(xtmp1, mask, 0x1);\n+        vpsubb(xtmp, xtmp, xtmp1, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp);\n+        popcntq(tmp, tmp);\n+        addq(dst, tmp);\n+        break;\n+      case Op_VectorMaskLastTrue:\n+        mov64(dst, -1);\n+        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n+        vextracti64x4(xtmp1, mask, 0x1);\n+        vpsubb(xtmp1, xtmp, xtmp1, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp1);\n+        bsrq(tmp, tmp);\n+        cmov(Assembler::notZero, dst, tmp);\n+        jcc(Assembler::notZero, DONE);\n+        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp1);\n+        bsrq(tmp, tmp);\n+        jcc(Assembler::zero, DONE);\n+        leaq(dst, Address(tmp, 32));\n+        bind(DONE);\n+        break;\n+      case Op_VectorMaskFirstTrue:\n+        mov64(dst, masklen);\n+        vpxor(xtmp, xtmp, xtmp, Assembler::AVX_256bit);\n+        vpsubb(xtmp1, xtmp, mask, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp1);\n+        bsfq(tmp, tmp);\n+        cmov(Assembler::notZero, dst, tmp);\n+        jcc(Assembler::notZero, DONE);\n+        vextracti64x4(xtmp1, mask, 0x1);\n+        vpsubb(xtmp1, xtmp, xtmp1, Assembler::AVX_256bit);\n+        vpmovmskb(tmp, xtmp1);\n+        bsrq(tmp, tmp);\n+        jcc(Assembler::zero, DONE);\n+        leaq(dst, Address(tmp, 32));\n+        bind(DONE);\n+        break;\n+      default: assert(false, \"Unhandled mask operation\");\n+    }\n+  } else {\n+    vpxor(xtmp, xtmp, xtmp, vec_enc);\n+    vpsubb(xtmp, xtmp, mask, vec_enc);\n+    vpmovmskb(tmp, xtmp);\n+    switch(opc) {\n+      case Op_VectorMaskTrueCount:\n+        popcntq(dst, tmp);\n+        break;\n+      case Op_VectorMaskLastTrue:\n+        mov64(dst, -1);\n+        bsrq(tmp, tmp);\n+        cmov(Assembler::notZero, dst, tmp);\n+        break;\n+      case Op_VectorMaskFirstTrue:\n+        tzcntq(tmp, tmp);\n+        break;\n+      default: assert(false, \"Unhandled mask operation\");\n+    }\n+  }\n+}\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":97,"deletions":0,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -214,0 +214,3 @@\n+#ifdef _LP64\n+  void vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, Register tmp,\n+                             KRegister ktmp, int masklen, int vec_enc);\n@@ -215,0 +218,3 @@\n+  void vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, XMMRegister xtmp1,\n+                             Register tmp, int masklen, int vec_enc);\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1584,0 +1584,7 @@\n+    case Op_VectorMaskFirstTrue:\n+    case Op_VectorMaskLastTrue:\n+    case Op_VectorMaskTrueCount:\n+      if (UseAVX < 1) {\n+         return false;\n+      }\n+      break;\n@@ -1653,0 +1660,3 @@\n+    case Op_VectorMaskLastTrue:\n+    case Op_VectorMaskFirstTrue:\n+    case Op_VectorMaskTrueCount:\n@@ -8057,0 +8067,38 @@\n+\n+instruct vmask_oper_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp, rFlagsReg cr) %{\n+  predicate(VM_Version::supports_avx512bw());\n+  match(Set dst (VectorMaskTrueCount mask));\n+  match(Set dst (VectorMaskFirstTrue mask));\n+  match(Set dst (VectorMaskLastTrue mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp, KILL cr);\n+  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    const MachNode* mask_node = static_cast<const MachNode*>(this->in(this->operand_index($mask)));\n+    assert(mask_node->bottom_type()->isa_vect(), \"\");\n+    int vector_len = vector_length_encoding(mask_node);\n+    int opcode = this->ideal_Opcode();\n+    int mask_len = mask_node->bottom_type()->is_vect()->length();\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $tmp$$Register, $ktmp$$KRegister, mask_len, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vmask_oper_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n+  predicate(!VM_Version::supports_avx512bw());\n+  match(Set dst (VectorMaskTrueCount mask));\n+  match(Set dst (VectorMaskFirstTrue mask));\n+  match(Set dst (VectorMaskLastTrue mask));\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1, KILL cr);\n+  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n+  ins_encode %{\n+    const MachNode* mask_node = static_cast<const MachNode*>(this->in(this->operand_index($mask)));\n+    assert(mask_node->bottom_type()->isa_vect(), \"\");\n+    int vector_len = vector_length_encoding(mask_node);\n+    int opcode = this->ideal_Opcode();\n+    int mask_len = mask_node->bottom_type()->is_vect()->length();\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -925,1 +925,5 @@\n-                                                                                                                               \\\n+  do_intrinsic(_VectorMaskOp, jdk_internal_vm_vector_VectorSupport, vector_mask_oper_name, vector_mask_oper_sig, F_S)                          \\\n+    do_signature(vector_mask_oper_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;\"                                               \\\n+                                        \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMaskOp;)I\")                                               \\\n+    do_name(vector_mask_oper_name, \"maskOp\")                                                                                                   \\\n+                                                                                                                                               \\\n@@ -1034,1 +1038,1 @@\n-  LAST_COMPILER_INLINE = _VectorScatterOp,\n+  LAST_COMPILER_INLINE = _VectorMaskOp,\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -679,0 +679,1 @@\n+  case vmIntrinsics::_VectorMaskOp:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -416,0 +416,4 @@\n+macro(VectorMaskOp)\n+macro(VectorMaskTrueCount)\n+macro(VectorMaskFirstTrue)\n+macro(VectorMaskLastTrue)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -640,0 +640,2 @@\n+  case vmIntrinsics::_VectorMaskOp:\n+    return inline_vector_mask_operation();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+  bool inline_vector_mask_operation();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -407,0 +407,49 @@\n+\/\/ <E, M extends VectorMask<E>>\n+\/\/ int maskOp(int oper, Class<?> MaskClass, Class<?> E, int length, M m, VectorMaskOp<E, M> defaultImpl)\n+bool LibraryCallKit::inline_vector_mask_operation() {\n+  const TypeInt*     oper       = gvn().type(argument(0))->isa_int();\n+  const TypeInstPtr* mask_klass = gvn().type(argument(1))->isa_instptr();\n+  const TypeInstPtr* elem_klass = gvn().type(argument(2))->isa_instptr();\n+  const TypeInt*     vlen       = gvn().type(argument(3))->isa_int();\n+  Node*              mask       = argument(4);\n+\n+  if (mask_klass == NULL || elem_klass == NULL || mask->is_top() || vlen == NULL) {\n+    return false; \/\/ dead code\n+  }\n+\n+  if (!is_klass_initialized(mask_klass)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** klass argument not initialized\");\n+    }\n+    return false;\n+  }\n+\n+  int num_elem = vlen->get_con();\n+  ciType* elem_type = elem_klass->const_oop()->as_instance()->java_mirror_type();\n+  BasicType elem_bt = elem_type->basic_type();\n+\n+  if (num_elem <= 2) {\n+    return false;\n+  }\n+\n+  int mopc = VectorSupport::vop2ideal(oper->get_con(), elem_bt);\n+  if (!arch_supports_vector(mopc, num_elem, elem_bt, VecMaskNotUsed)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n+                    mopc, num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n+\n+  const Type* elem_ty = Type::get_const_basic_type(elem_bt);\n+  ciKlass* mbox_klass = mask_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+  const TypeInstPtr* mask_box_type = TypeInstPtr::make_exact(TypePtr::NotNull, mbox_klass);\n+  Node* mask_vec = unbox_vector(mask, mask_box_type, elem_bt, num_elem, true);\n+  Node* store_mask = gvn().transform(VectorStoreMaskNode::make(gvn(), mask_vec, elem_bt, num_elem));\n+  Node* maskoper = gvn().transform(VectorMaskOpNode::make(store_mask, TypeInt::INT, mopc));\n+  set_result(maskoper);\n+\n+  C->set_max_vector_size(MAX2(C->max_vector_size(), (uint)(num_elem * type2aelembytes(elem_bt))));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1297,0 +1297,15 @@\n+Node* VectorMaskOpNode::make(Node* mask, const Type* ty, int mopc) {\n+  switch(mopc) {\n+    case Op_VectorMaskTrueCount:\n+      return new VectorMaskTrueCountNode(mask, ty);\n+    case Op_VectorMaskLastTrue:\n+      return new VectorMaskLastTrueNode(mask, ty);\n+    case Op_VectorMaskFirstTrue:\n+      return new VectorMaskFirstTrueNode(mask, ty);\n+    default:\n+      assert(false, \"Unhandled operation\");\n+  }\n+  return NULL;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -856,0 +856,39 @@\n+class VectorMaskOpNode : public TypeNode {\n+ public:\n+  VectorMaskOpNode(Node* mask, const Type* ty, int mopc):\n+    TypeNode(ty, 2), _mopc(mopc) {\n+    assert(mask->Opcode() == Op_VectorStoreMask, \"\");\n+    init_req(1, mask);\n+  }\n+\n+  virtual int Opcode() const;\n+  virtual  uint  size_of() const { return sizeof(VectorMaskOpNode); }\n+  virtual uint  ideal_reg() const { return Op_RegI; }\n+  int get_mask_Opcode() const { return _mopc;}\n+  static Node* make(Node* mask, const Type* ty, int mopc);\n+\n+  private:\n+    int _mopc;\n+};\n+\n+class VectorMaskTrueCountNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskTrueCountNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskTrueCount) {}\n+  virtual int Opcode() const;\n+};\n+\n+class VectorMaskFirstTrueNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskFirstTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskFirstTrue) {}\n+  virtual int Opcode() const;\n+};\n+\n+class VectorMaskLastTrueNode : public VectorMaskOpNode {\n+ public:\n+  VectorMaskLastTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskLastTrue) {}\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -365,0 +365,36 @@\n+    case VECTOR_OP_MASK_LASTTRUE: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_VectorMaskLastTrue;\n+        default: fatal(\"MASK_LASTTRUE: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n+    case VECTOR_OP_MASK_FIRSTTRUE: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_VectorMaskFirstTrue;\n+        default: fatal(\"MASK_FIRSTTRUE: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n+    case VECTOR_OP_MASK_TRUECOUNT: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_VectorMaskTrueCount;\n+        default: fatal(\"MASK_TRUECOUNT: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -80,1 +80,6 @@\n-    VECTOR_OP_REINTERPRET = 18\n+    VECTOR_OP_REINTERPRET = 18,\n+\n+    \/\/ Mask manipulation operations\n+    VECTOR_OP_MASK_TRUECOUNT = 19,\n+    VECTOR_OP_MASK_FIRSTTRUE = 20,\n+    VECTOR_OP_MASK_LASTTRUE  = 21\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,0 +72,5 @@\n+    \/\/ Mask manipulation operations\n+    public static final int VECTOR_OP_MASK_TRUECOUNT = 19;\n+    public static final int VECTOR_OP_MASK_FIRSTTRUE = 20;\n+    public static final int VECTOR_OP_MASK_LASTTRUE  = 21;\n+\n@@ -456,0 +461,14 @@\n+    \/* ============================================================================ *\/\n+    public interface VectorMaskOp<M> {\n+        int apply(M m);\n+    }\n+\n+    @IntrinsicCandidate\n+    public static\n+    <M>\n+    int maskOp(int oper, Class<?> maskClass, Class<?> elemClass, int length, M m,\n+               VectorMaskOp<M> defaultImpl) {\n+       assert isNonCapturingLambda(defaultImpl) : defaultImpl;\n+       return defaultImpl.apply(m);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -117,30 +117,0 @@\n-    @Override\n-    public int trueCount() {\n-        \/\/FIXME: use a population count intrinsic here\n-        int c = 0;\n-        for (boolean i : getBits()) {\n-            if (i) c++;\n-        }\n-        return c;\n-    }\n-\n-    @Override\n-    public int firstTrue() {\n-        \/\/FIXME: use a count trailing zeros intrinsic here\n-        boolean[] bits = getBits();\n-        for (int i = 0; i < bits.length; i++) {\n-            if (bits[i])  return i;\n-        }\n-        return bits.length;\n-    }\n-\n-    @Override\n-    public int lastTrue() {\n-        \/\/FIXME: use a count leading zeros intrinsic here\n-        boolean[] bits = getBits();\n-        for (int i = bits.length-1; i >= 0; i--) {\n-            if (bits[i])  return i;\n-        }\n-        return -1;\n-    }\n-\n@@ -176,0 +146,25 @@\n+    \/*package-private*\/\n+    static int trueCountHelper(boolean[] bits) {\n+        int c = 0;\n+        for (boolean i : bits) {\n+            if (i) c++;\n+        }\n+        return c;\n+    }\n+\n+    \/*package-private*\/\n+    static int firstTrueHelper(boolean[] bits) {\n+        for (int i = 0; i < bits.length; i++) {\n+            if (bits[i])  return i;\n+        }\n+        return bits.length;\n+    }\n+\n+    \/*package-private*\/\n+    static int lastTrueHelper(boolean[] bits) {\n+        for (int i = bits.length-1; i >= 0; i--) {\n+            if (bits[i])  return i;\n+        }\n+        return -1;\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":25,"deletions":30,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -683,0 +683,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Byte128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Byte128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte128Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Byte128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -715,0 +715,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Byte256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Byte256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte256Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Byte256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -779,0 +779,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Byte512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Byte512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte512Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Byte512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -667,0 +667,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Byte64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Byte64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Byte64Mask.class, byte.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Byte64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -653,0 +653,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((ByteMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((ByteMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, ByteMaxMask.class, byte.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((ByteMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -651,0 +651,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Double128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Double128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Double128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -655,0 +655,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Double256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Double256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Double256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -663,0 +663,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Double512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Double512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Double512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -649,0 +649,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Double64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Double64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Double64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Double64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Double64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -648,0 +648,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((DoubleMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((DoubleMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, DoubleMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((DoubleMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -655,0 +655,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Float128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Float128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Float128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -663,0 +663,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Float256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Float256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Float256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -679,0 +679,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Float512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Float512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Float512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -651,0 +651,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Float64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Float64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Float64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Float64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Float64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -648,0 +648,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((FloatMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((FloatMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, FloatMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((FloatMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -659,0 +659,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Int128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Int128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int128Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Int128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -667,0 +667,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Int256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Int256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int256Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Int256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -683,0 +683,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Int512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Int512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int512Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Int512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -655,0 +655,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Int64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Int64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Int64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Int64Mask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Int64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -653,0 +653,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, IntMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((IntMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((IntMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, IntMaxMask.class, int.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((IntMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -645,0 +645,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Long128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Long128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long128Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Long128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -649,0 +649,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Long256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Long256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long256Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Long256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -657,0 +657,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Long512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Long512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long512Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Long512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -643,0 +643,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Long64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Long64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Long64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Long64Mask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Long64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -643,0 +643,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, LongMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((LongMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((LongMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, LongMaxMask.class, long.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((LongMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -667,0 +667,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short128Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Short128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Short128Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short128Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Short128Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -683,0 +683,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short256Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Short256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Short256Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short256Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Short256Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -715,0 +715,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short512Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Short512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Short512Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short512Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Short512Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -659,0 +659,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, Short64Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((Short64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((Short64Mask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, Short64Mask.class, short.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((Short64Mask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -653,0 +653,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper(((ShortMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper(((ShortMaxMask)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, ShortMaxMask.class, short.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper(((ShortMaxMask)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -926,0 +926,23 @@\n+        \/\/ Mask Query operations\n+\n+        @Override\n+        @ForceInline\n+        public int trueCount() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                        (m) -> trueCountHelper((($masktype$)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int firstTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                        (m) -> firstTrueHelper((($masktype$)m).getBits()));\n+        }\n+\n+        @Override\n+        @ForceInline\n+        public int lastTrue() {\n+            return VectorSupport.maskOp(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,\n+                                        (m) -> lastTrueHelper((($masktype$)m).getBits()));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/\/\n+\/\/ Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.Random;\n+import jdk.incubator.vector.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+public class MaskQueryOperationsBenchmark {\n+    @Param({\"128\",\"256\",\"512\"})\n+    int bits;\n+\n+    @Param({\"1\",\"2\",\"3\"})\n+    int inputs;\n+\n+    VectorSpecies bspecies;\n+    VectorSpecies sspecies;\n+    VectorSpecies ispecies;\n+    VectorSpecies lspecies;\n+    VectorMask    bmask;\n+    VectorMask    smask;\n+    VectorMask    imask;\n+    VectorMask    lmask;\n+    boolean []    mask_arr;\n+\n+\n+    static final boolean [] mask_avg_case = {\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false\n+    };\n+\n+    static final boolean [] mask_best_case  = {\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true\n+    };\n+\n+    static final boolean [] mask_worst_case  = {\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false,\n+       false, false, false, false, false, false, false, false\n+    };\n+\n+    @Setup(Level.Trial)\n+    public void BmSetup() {\n+        bspecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n+        sspecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n+        ispecies = VectorSpecies.of(int.class, VectorShape.forBitSize(bits));\n+        lspecies = VectorSpecies.of(long.class, VectorShape.forBitSize(bits));\n+\n+        if( 1 == inputs) {\n+          mask_arr = mask_best_case;\n+        } else if ( 2 == inputs ) {\n+          mask_arr = mask_worst_case;\n+        } else {\n+          mask_arr = mask_avg_case;\n+        }\n+\n+        bmask   = VectorMask.fromArray(bspecies, mask_arr, 0);\n+        smask   = VectorMask.fromArray(sspecies, mask_arr, 0);\n+        imask   = VectorMask.fromArray(ispecies, mask_arr, 0);\n+        lmask   = VectorMask.fromArray(lspecies, mask_arr, 0);\n+    }\n+\n+    @Benchmark\n+    public int testTrueCountByte(Blackhole bh) {\n+        return bmask.trueCount();\n+    }\n+\n+    @Benchmark\n+    public int testTrueCountShort(Blackhole bh) {\n+        return smask.trueCount();\n+    }\n+    @Benchmark\n+    public int testTrueCountInt(Blackhole bh) {\n+        return imask.trueCount();\n+    }\n+    @Benchmark\n+    public int testTrueCountLong(Blackhole bh) {\n+        return lmask.trueCount();\n+    }\n+\n+    @Benchmark\n+    public int testFirstTrueByte(Blackhole bh) {\n+        return bmask.firstTrue();\n+    }\n+\n+    @Benchmark\n+    public int testFirstTrueShort(Blackhole bh) {\n+        return smask.firstTrue();\n+    }\n+    @Benchmark\n+    public int testFirstTrueInt(Blackhole bh) {\n+        return imask.firstTrue();\n+    }\n+    @Benchmark\n+    public int testFirstTrueLong(Blackhole bh) {\n+        return lmask.firstTrue();\n+    }\n+\n+    @Benchmark\n+    public int testLastTrueByte(Blackhole bh) {\n+        return bmask.lastTrue();\n+    }\n+\n+    @Benchmark\n+    public int testLastTrueShort(Blackhole bh) {\n+        return smask.lastTrue();\n+    }\n+    @Benchmark\n+    public int testLastTrueInt(Blackhole bh) {\n+        return imask.lastTrue();\n+    }\n+    @Benchmark\n+    public int testLastTrueLong(Blackhole bh) {\n+        return lmask.lastTrue();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskQueryOperationsBenchmark.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}