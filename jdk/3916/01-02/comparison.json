{"files":[{"patch":"@@ -9221,1 +9221,1 @@\n-  assert(VM_Version::supports_avx512bw(), \"\");\n+  assert(VM_Version::supports_avx512vlbw(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3726,5 +3726,6 @@\n-void C2_MacroAssembler::vector_mask_oper(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n-                                         Register tmp, KRegister ktmp, int masklen, int vlen) {\n-  vpxor(xtmp, xtmp, xtmp, vlen);\n-  vpsubb(xtmp, xtmp, mask, vlen);\n-  evpmovb2m(ktmp, xtmp, vlen);\n+void C2_MacroAssembler::vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n+                                              Register tmp, KRegister ktmp, int masklen, int vec_enc) {\n+  assert(VM_Version::supports_avx512vlbw(), \"\");\n+  vpxor(xtmp, xtmp, xtmp, vec_enc);\n+  vpsubb(xtmp, xtmp, mask, vec_enc);\n+  evpmovb2m(ktmp, xtmp, vec_enc);\n@@ -3748,3 +3749,3 @@\n-void C2_MacroAssembler::vector_mask_oper(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n-                                         XMMRegister xtmp1, Register tmp, int masklen, int vlen) {\n-  if (vlen == AVX_512bit) {\n+void C2_MacroAssembler::vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp,\n+                                              XMMRegister xtmp1, Register tmp, int masklen, int vec_enc) {\n+  if (vec_enc == AVX_512bit) {\n@@ -3800,2 +3801,2 @@\n-    vpxor(xtmp, xtmp, xtmp, vlen);\n-    vpsubb(xtmp, xtmp, mask, vlen);\n+    vpxor(xtmp, xtmp, xtmp, vec_enc);\n+    vpsubb(xtmp, xtmp, mask, vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -215,2 +215,2 @@\n-  void vector_mask_oper(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, Register tmp,\n-                        KRegister ktmp, int masklen, int vlen);\n+  void vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, Register tmp,\n+                             KRegister ktmp, int masklen, int vec_enc);\n@@ -218,2 +218,2 @@\n-  void vector_mask_oper(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, XMMRegister xtmp1,\n-                        Register tmp, int masklen, int vlen);\n+  void vector_mask_operation(int opc, Register dst, XMMRegister mask, XMMRegister xtmp, XMMRegister xtmp1,\n+                             Register tmp, int masklen, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1660,0 +1660,3 @@\n+    case Op_VectorMaskLastTrue:\n+    case Op_VectorMaskFirstTrue:\n+    case Op_VectorMaskTrueCount:\n@@ -8065,1 +8068,1 @@\n-instruct vmask_true_count_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp) %{\n+instruct vmask_oper_evex(rRegI dst, vec mask, rRegL tmp, kReg ktmp, vec xtmp, rFlagsReg cr) %{\n@@ -8070,2 +8073,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp);\n-  format %{ \"vector_mask_true_count_evex $mask \\t! vector mask true count\" %}\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP ktmp, TEMP xtmp, KILL cr);\n+  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n@@ -8078,2 +8081,2 @@\n-    __ vector_mask_oper(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n-                        $tmp$$Register, $ktmp$$KRegister, mask_len, vector_len);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $tmp$$Register, $ktmp$$KRegister, mask_len, vector_len);\n@@ -8084,1 +8087,1 @@\n-instruct vmask_true_count_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1) %{\n+instruct vmask_oper_avx(rRegI dst, vec mask, rRegL tmp, vec xtmp, vec xtmp1, rFlagsReg cr) %{\n@@ -8089,2 +8092,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1);\n-  format %{ \"vector_mask_true_count_evex $mask \\t! vector mask true count\" %}\n+  effect(TEMP_DEF dst, TEMP tmp, TEMP xtmp, TEMP xtmp1, KILL cr);\n+  format %{ \"vector_mask_oper_evex $mask \\t! vector mask true count\" %}\n@@ -8097,2 +8100,2 @@\n-    __ vector_mask_oper(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n-                        $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vector_len);\n+    __ vector_mask_operation(opcode, $dst$$Register, $mask$$XMMRegister, $xtmp$$XMMRegister,\n+                             $xtmp1$$XMMRegister, $tmp$$Register, mask_len, vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -448,1 +448,2 @@\n-  Node* maskoper = gvn().transform(VectorMaskOpNode::make(mask_vec, TypeInt::INT, elem_ty, mopc));\n+  Node* store_mask = gvn().transform(VectorStoreMaskNode::make(gvn(), mask_vec, elem_bt, num_elem));\n+  Node* maskoper = gvn().transform(VectorMaskOpNode::make(store_mask, TypeInt::INT, mopc));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1297,17 +1297,1 @@\n-Node* VectorMaskOpNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  Node* mask = in(1);\n-  if (mask->Opcode() == Op_VectorLoadMask) {\n-    set_req(1, in(1)->in(1));\n-    return this;\n-  } else {\n-    const TypeVect* mask_vt = mask->bottom_type()->is_vect();\n-    if (mask_vt->element_basic_type() != T_BOOLEAN) {\n-      Node* value = phase->transform(VectorStoreMaskNode::make(*phase, mask, T_BOOLEAN,\n-                                                               mask_vt->length()));\n-      return VectorMaskOpNode::make(value, bottom_type(), get_elem_type(), get_mask_Opcode());\n-    }\n-  }\n-  return NULL;\n-}\n-\n-Node* VectorMaskOpNode::make(Node* mask, const Type* ty, const Type* ety, int mopc) {\n+Node* VectorMaskOpNode::make(Node* mask, const Type* ty, int mopc) {\n@@ -1316,1 +1300,1 @@\n-      return new VectorMaskTrueCountNode(mask, ty, ety);\n+      return new VectorMaskTrueCountNode(mask, ty);\n@@ -1318,1 +1302,1 @@\n-      return new VectorMaskLastTrueNode(mask, ty, ety);\n+      return new VectorMaskLastTrueNode(mask, ty);\n@@ -1320,1 +1304,1 @@\n-      return new VectorMaskFirstTrueNode(mask, ty, ety);\n+      return new VectorMaskFirstTrueNode(mask, ty);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -858,2 +858,3 @@\n-  VectorMaskOpNode(Node* mask, const Type* ty, const Type* ety, int mopc):\n-    TypeNode(ty, 2), _elemType(ety), _mopc(mopc) {\n+  VectorMaskOpNode(Node* mask, const Type* ty, int mopc):\n+    TypeNode(ty, 2), _mopc(mopc) {\n+    assert(mask->Opcode() == Op_VectorStoreMask, \"\");\n@@ -864,1 +865,0 @@\n-  const Type* get_elem_type()  { return _elemType;}\n@@ -867,1 +867,0 @@\n-  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -869,1 +868,1 @@\n-  static Node* make(Node* mask, const Type* ty, const Type* ety, int mopc);\n+  static Node* make(Node* mask, const Type* ty, int mopc);\n@@ -872,1 +871,0 @@\n-    const Type* _elemType;\n@@ -878,2 +876,2 @@\n-  VectorMaskTrueCountNode(Node* mask, const Type* ty, const Type* ety):\n-    VectorMaskOpNode(mask, ty, ety, Op_VectorMaskTrueCount) {}\n+  VectorMaskTrueCountNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskTrueCount) {}\n@@ -885,2 +883,2 @@\n-  VectorMaskFirstTrueNode(Node* mask, const Type* ty, const Type* ety):\n-    VectorMaskOpNode(mask, ty, ety, Op_VectorMaskFirstTrue) {}\n+  VectorMaskFirstTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskFirstTrue) {}\n@@ -892,2 +890,2 @@\n-  VectorMaskLastTrueNode(Node* mask, const Type* ty, const Type* ety):\n-    VectorMaskOpNode(mask, ty, ety, Op_VectorMaskLastTrue) {}\n+  VectorMaskLastTrueNode(Node* mask, const Type* ty):\n+    VectorMaskOpNode(mask, ty, Op_VectorMaskLastTrue) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"}]}