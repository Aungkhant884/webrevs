{"files":[{"patch":"@@ -2816,1 +2816,4 @@\n-                    if (value instanceof CSS.CssValue) {\n+                    if (value instanceof CSS.FontSize) {\n+                        return ((CSS.FontSize)value)\n+                                     .getValue(this, StyleSheet.this);\n+                    } else if (value instanceof CSS.CssValue) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\r\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+\r\n+import java.awt.BorderLayout;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import javax.swing.JEditorPane;\r\n+import javax.swing.JFrame;\r\n+import javax.swing.JScrollPane;\r\n+import javax.swing.SwingUtilities;\r\n+import javax.swing.text.AbstractDocument.AbstractElement;\r\n+import javax.swing.text.Document;\r\n+import javax.swing.text.GlyphView;\r\n+import javax.swing.text.View;\r\n+import javax.swing.text.html.HTMLEditorKit;\r\n+import javax.swing.text.html.StyleSheet;\r\n+\r\n+\/*\r\n+ * @test\r\n+ * @bug 8260687\r\n+ * @summary  Tests inherited font-size is the same as explicitly specified\r\n+ * @run main BodyInheritedFontSize\r\n+ *\/\r\n+public class BodyInheritedFontSize {\r\n+    private static final String HTML_TEXT = \"\"\"\r\n+            <html>\r\n+            <body>\r\n+              <p style=\"font-size: 100%\">100% from body<\/p>\r\n+              <p>16pt inherited from body<\/p>\r\n+              <p style=\"font-size: 16pt\">16pt paragraph<\/p>\r\n+            <\/body>\r\n+            <\/html>\r\n+            \"\"\";\r\n+\r\n+    private static JEditorPane createEditorPane(boolean w3cUnits, boolean showFrame) {\r\n+        JEditorPane htmlPane = new JEditorPane();\r\n+        htmlPane.setEditable(false);\r\n+\r\n+        if (w3cUnits) {\r\n+            htmlPane.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, Boolean.TRUE);\r\n+        }\r\n+\r\n+        HTMLEditorKit kit = new HTMLEditorKit();\r\n+        htmlPane.setEditorKit(kit);\r\n+\r\n+        StyleSheet styleSheet = kit.getStyleSheet();\r\n+        styleSheet.addRule(\"body { font-family: sans-serif; font-size: 16pt; }\");\r\n+\r\n+        Document doc = kit.createDefaultDocument();\r\n+        htmlPane.setDocument(doc);\r\n+        htmlPane.setText(HTML_TEXT);\r\n+\r\n+        if (showFrame) {\r\n+            JFrame frame = new JFrame(\"HtmlFontSizeGUITest: \"\r\n+                                              + (w3cUnits ? \"w3c\" : \"std\"));\r\n+            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n+            frame.add(new JScrollPane(htmlPane), BorderLayout.CENTER);\r\n+            frame.setLocationRelativeTo(null);\r\n+            frame.pack();\r\n+            frame.setVisible(true);\r\n+        }\r\n+\r\n+        \/\/ Ignore the result but perform layout\r\n+        htmlPane.getPreferredSize();\r\n+\r\n+        return htmlPane;\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws Exception {\r\n+        final List<String> argsList = Arrays.asList(args);\r\n+        final boolean showFrame = toShowFrame(argsList);\r\n+        final boolean debugPrint = toDebugPrint(argsList);\r\n+\r\n+        final List<Exception> exceptions = new ArrayList<>(2);\r\n+        SwingUtilities.invokeAndWait(() -> {\r\n+            for (boolean w3cUnits : new boolean[] {true, false}) {\r\n+                JEditorPane htmlPane = createEditorPane(w3cUnits, showFrame);\r\n+                try {\r\n+                    checkFontSize(htmlPane, w3cUnits, debugPrint);\r\n+                } catch (Exception e) {\r\n+                    exceptions.add(e);\r\n+                }\r\n+            }\r\n+        });\r\n+        if (exceptions.size() > 0) {\r\n+            exceptions.forEach(System.err::println);\r\n+            throw new RuntimeException(\r\n+                    \"Test failed: \" + exceptions.get(0).getMessage(),\r\n+                    exceptions.get(0));\r\n+        }\r\n+    }\r\n+\r\n+    private static boolean toShowFrame(final List<String> argsList) {\r\n+        return argsList.contains(\"-show\");\r\n+    }\r\n+\r\n+    private static boolean toDebugPrint(final List<String> argsList) {\r\n+        return argsList.contains(\"-print\");\r\n+    }\r\n+\r\n+    private static void checkFontSize(JEditorPane htmlPane,\r\n+                                      boolean w3cUnits,\r\n+                                      boolean debugPrint) {\r\n+        final View rootView = htmlPane.getUI().getRootView(htmlPane);\r\n+        final View boxView = rootView.getView(0);\r\n+        final View bodyView = boxView.getView(1);\r\n+\r\n+        int fontSizePrecentage = getViewFontSize(bodyView.getView(0), debugPrint);\r\n+        int fontSizeInherited  = getViewFontSize(bodyView.getView(1), debugPrint);\r\n+        int fontSizeExplicit   = getViewFontSize(bodyView.getView(2), debugPrint);\r\n+        if (debugPrint) {\r\n+            System.out.println(\"w3cUnits: \" + w3cUnits + \"\\n\"\r\n+                    + \"Percentage: \" + fontSizePrecentage + \"\\n\"\r\n+                    + \"Inherited: \" + fontSizeInherited + \"\\n\"\r\n+                    + \"Explicit: \" + fontSizeExplicit + \"\\n\");\r\n+        }\r\n+        if (fontSizeInherited != fontSizeExplicit) {\r\n+            throw new RuntimeException(\"The font size is different with \"\r\n+                    + (w3cUnits ? \"w3cUnits\" : \"stdUnits\") + \": \"\r\n+                    + \"Percentage: \" + fontSizePrecentage + \" vs. \"\r\n+                    + \"Inherited: \" + fontSizeInherited + \" vs. \"\r\n+                    + \"Explicit: \" + fontSizeExplicit);\r\n+        }\r\n+    }\r\n+\r\n+    private static int getViewFontSize(View paragraphView, boolean debugPrint) {\r\n+        GlyphView inlineView = findFirstTextRun(paragraphView);\r\n+        int fontSize = inlineView.getFont().getSize();\r\n+        if (debugPrint) {\r\n+            ((AbstractElement) inlineView.getElement()).dump(System.out, 1);\r\n+        }\r\n+        return fontSize;\r\n+    }\r\n+\r\n+    private static GlyphView findFirstTextRun(View view) {\r\n+        if (view instanceof GlyphView) {\r\n+            return (GlyphView) view;\r\n+        }\r\n+        for (int i = 0; i < view.getViewCount(); i++) {\r\n+            GlyphView textRun = findFirstTextRun(view.getView(i));\r\n+            if (textRun != null) {\r\n+                return textRun;\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+}\r\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/8260687\/BodyInheritedFontSize.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -41,1 +41,2 @@\n- * @run main TestWrongCSSFontSize\n+ * @run main TestWrongCSSFontSize false\n+ * @run main TestWrongCSSFontSize true\n@@ -45,1 +46,1 @@\n-    private static String text =\n+    private static final String TEXT =\n@@ -64,2 +65,4 @@\n-    private static int expectedFontSize = 21;\n-    private static int expectedAssertions = 8;\n+    private static final int expectedFontSize = 21;\n+    private static final int expectedAssertions = 8;\n+\n+    private final boolean w3cUnits;\n@@ -69,0 +72,4 @@\n+    public TestWrongCSSFontSize(boolean w3cUnits) {\n+        this.w3cUnits = w3cUnits;\n+    }\n+\n@@ -72,1 +79,4 @@\n-        editor.setText(text);\n+        if (w3cUnits) {\n+            editor.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, Boolean.TRUE);\n+        }\n+        editor.setText(TEXT);\n@@ -80,1 +90,2 @@\n-            throw new AssertionError(\"assertion count expected [\"\n+            throw new AssertionError((w3cUnits ? \"w3cUnits - \" : \"\")\n+                    + \"assertion count expected [\"\n@@ -107,1 +118,2 @@\n-            throw new AssertionError(\"font size expected [\"\n+            throw new AssertionError((w3cUnits ? \"w3cUnits - \" : \"\")\n+                    + \"font size expected [\"\n@@ -137,1 +149,2 @@\n-        TestWrongCSSFontSize test = new TestWrongCSSFontSize();\n+        TestWrongCSSFontSize test = new TestWrongCSSFontSize(\n+                (args.length > 0) && Boolean.parseBoolean(args[0]));\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/TestWrongCSSFontSize.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"}]}