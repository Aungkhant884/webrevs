{"files":[{"patch":"@@ -1,168 +1,168 @@\n-\/*\r\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-\r\n-import java.awt.BorderLayout;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import javax.swing.JEditorPane;\r\n-import javax.swing.JFrame;\r\n-import javax.swing.JScrollPane;\r\n-import javax.swing.SwingUtilities;\r\n-import javax.swing.text.AbstractDocument.AbstractElement;\r\n-import javax.swing.text.Document;\r\n-import javax.swing.text.GlyphView;\r\n-import javax.swing.text.View;\r\n-import javax.swing.text.html.HTMLEditorKit;\r\n-import javax.swing.text.html.StyleSheet;\r\n-\r\n-\/*\r\n- * @test\r\n- * @bug 8260687\r\n- * @summary  Tests inherited font-size is the same as explicitly specified\r\n- * @run main BodyInheritedFontSize\r\n- *\/\r\n-public class BodyInheritedFontSize {\r\n-    private static final String HTML_TEXT = \"\"\"\r\n-            <html>\r\n-            <body>\r\n-              <p style=\"font-size: 100%\">100% from body<\/p>\r\n-              <p>16pt inherited from body<\/p>\r\n-              <p style=\"font-size: 16pt\">16pt paragraph<\/p>\r\n-            <\/body>\r\n-            <\/html>\r\n-            \"\"\";\r\n-\r\n-    private static JEditorPane createEditorPane(boolean w3cUnits, boolean showFrame) {\r\n-        JEditorPane htmlPane = new JEditorPane();\r\n-        htmlPane.setEditable(false);\r\n-\r\n-        if (w3cUnits) {\r\n-            htmlPane.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, Boolean.TRUE);\r\n-        }\r\n-\r\n-        HTMLEditorKit kit = new HTMLEditorKit();\r\n-        htmlPane.setEditorKit(kit);\r\n-\r\n-        StyleSheet styleSheet = kit.getStyleSheet();\r\n-        styleSheet.addRule(\"body { font-family: sans-serif; font-size: 16pt; }\");\r\n-\r\n-        Document doc = kit.createDefaultDocument();\r\n-        htmlPane.setDocument(doc);\r\n-        htmlPane.setText(HTML_TEXT);\r\n-\r\n-        if (showFrame) {\r\n-            JFrame frame = new JFrame(\"HtmlFontSizeGUITest: \"\r\n-                                              + (w3cUnits ? \"w3c\" : \"std\"));\r\n-            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n-            frame.add(new JScrollPane(htmlPane), BorderLayout.CENTER);\r\n-            frame.setLocationRelativeTo(null);\r\n-            frame.pack();\r\n-            frame.setVisible(true);\r\n-        }\r\n-\r\n-        \/\/ Ignore the result but perform layout\r\n-        htmlPane.getPreferredSize();\r\n-\r\n-        return htmlPane;\r\n-    }\r\n-\r\n-    public static void main(String[] args) throws Exception {\r\n-        final List<String> argsList = Arrays.asList(args);\r\n-        final boolean showFrame = toShowFrame(argsList);\r\n-        final boolean debugPrint = toDebugPrint(argsList);\r\n-\r\n-        final List<Exception> exceptions = new ArrayList<>(2);\r\n-        SwingUtilities.invokeAndWait(() -> {\r\n-            for (boolean w3cUnits : new boolean[] {true, false}) {\r\n-                JEditorPane htmlPane = createEditorPane(w3cUnits, showFrame);\r\n-                try {\r\n-                    checkFontSize(htmlPane, w3cUnits, debugPrint);\r\n-                } catch (Exception e) {\r\n-                    exceptions.add(e);\r\n-                }\r\n-            }\r\n-        });\r\n-        if (exceptions.size() > 0) {\r\n-            exceptions.forEach(System.err::println);\r\n-            throw new RuntimeException(\r\n-                    \"Test failed: \" + exceptions.get(0).getMessage(),\r\n-                    exceptions.get(0));\r\n-        }\r\n-    }\r\n-\r\n-    private static boolean toShowFrame(final List<String> argsList) {\r\n-        return argsList.contains(\"-show\");\r\n-    }\r\n-\r\n-    private static boolean toDebugPrint(final List<String> argsList) {\r\n-        return argsList.contains(\"-print\");\r\n-    }\r\n-\r\n-    private static void checkFontSize(JEditorPane htmlPane,\r\n-                                      boolean w3cUnits,\r\n-                                      boolean debugPrint) {\r\n-        final View rootView = htmlPane.getUI().getRootView(htmlPane);\r\n-        final View boxView = rootView.getView(0);\r\n-        final View bodyView = boxView.getView(1);\r\n-\r\n-        int fontSizePrecentage = getViewFontSize(bodyView.getView(0), debugPrint);\r\n-        int fontSizeInherited  = getViewFontSize(bodyView.getView(1), debugPrint);\r\n-        int fontSizeExplicit   = getViewFontSize(bodyView.getView(2), debugPrint);\r\n-        if (debugPrint) {\r\n-            System.out.println(\"w3cUnits: \" + w3cUnits + \"\\n\"\r\n-                    + \"Percentage: \" + fontSizePrecentage + \"\\n\"\r\n-                    + \"Inherited: \" + fontSizeInherited + \"\\n\"\r\n-                    + \"Explicit: \" + fontSizeExplicit + \"\\n\");\r\n-        }\r\n-        if (fontSizeInherited != fontSizeExplicit) {\r\n-            throw new RuntimeException(\"The font size is different with \"\r\n-                    + (w3cUnits ? \"w3cUnits\" : \"stdUnits\") + \": \"\r\n-                    + \"Percentage: \" + fontSizePrecentage + \" vs. \"\r\n-                    + \"Inherited: \" + fontSizeInherited + \" vs. \"\r\n-                    + \"Explicit: \" + fontSizeExplicit);\r\n-        }\r\n-    }\r\n-\r\n-    private static int getViewFontSize(View paragraphView, boolean debugPrint) {\r\n-        GlyphView inlineView = findFirstTextRun(paragraphView);\r\n-        int fontSize = inlineView.getFont().getSize();\r\n-        if (debugPrint) {\r\n-            ((AbstractElement) inlineView.getElement()).dump(System.out, 1);\r\n-        }\r\n-        return fontSize;\r\n-    }\r\n-\r\n-    private static GlyphView findFirstTextRun(View view) {\r\n-        if (view instanceof GlyphView) {\r\n-            return (GlyphView) view;\r\n-        }\r\n-        for (int i = 0; i < view.getViewCount(); i++) {\r\n-            GlyphView textRun = findFirstTextRun(view.getView(i));\r\n-            if (textRun != null) {\r\n-                return textRun;\r\n-            }\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.AbstractDocument.AbstractElement;\n+import javax.swing.text.Document;\n+import javax.swing.text.GlyphView;\n+import javax.swing.text.View;\n+import javax.swing.text.html.HTMLEditorKit;\n+import javax.swing.text.html.StyleSheet;\n+\n+\/*\n+ * @test\n+ * @bug 8260687\n+ * @summary  Tests inherited font-size is the same as explicitly specified\n+ * @run main BodyInheritedFontSize\n+ *\/\n+public class BodyInheritedFontSize {\n+    private static final String HTML_TEXT = \"\"\"\n+            <html>\n+            <body>\n+              <p style=\"font-size: 100%\">100% from body<\/p>\n+              <p>16pt inherited from body<\/p>\n+              <p style=\"font-size: 16pt\">16pt paragraph<\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+\n+    private static JEditorPane createEditorPane(boolean w3cUnits, boolean showFrame) {\n+        JEditorPane htmlPane = new JEditorPane();\n+        htmlPane.setEditable(false);\n+\n+        if (w3cUnits) {\n+            htmlPane.putClientProperty(JEditorPane.W3C_LENGTH_UNITS, Boolean.TRUE);\n+        }\n+\n+        HTMLEditorKit kit = new HTMLEditorKit();\n+        htmlPane.setEditorKit(kit);\n+\n+        StyleSheet styleSheet = kit.getStyleSheet();\n+        styleSheet.addRule(\"body { font-family: sans-serif; font-size: 16pt; }\");\n+\n+        Document doc = kit.createDefaultDocument();\n+        htmlPane.setDocument(doc);\n+        htmlPane.setText(HTML_TEXT);\n+\n+        if (showFrame) {\n+            JFrame frame = new JFrame(\"HtmlFontSizeGUITest: \"\n+                                              + (w3cUnits ? \"w3c\" : \"std\"));\n+            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+            frame.add(new JScrollPane(htmlPane), BorderLayout.CENTER);\n+            frame.setLocationRelativeTo(null);\n+            frame.pack();\n+            frame.setVisible(true);\n+        }\n+\n+        \/\/ Ignore the result but perform layout\n+        htmlPane.getPreferredSize();\n+\n+        return htmlPane;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        final List<String> argsList = Arrays.asList(args);\n+        final boolean showFrame = toShowFrame(argsList);\n+        final boolean debugPrint = toDebugPrint(argsList);\n+\n+        final List<Exception> exceptions = new ArrayList<>(2);\n+        SwingUtilities.invokeAndWait(() -> {\n+            for (boolean w3cUnits : new boolean[] {true, false}) {\n+                JEditorPane htmlPane = createEditorPane(w3cUnits, showFrame);\n+                try {\n+                    checkFontSize(htmlPane, w3cUnits, debugPrint);\n+                } catch (Exception e) {\n+                    exceptions.add(e);\n+                }\n+            }\n+        });\n+        if (exceptions.size() > 0) {\n+            exceptions.forEach(System.err::println);\n+            throw new RuntimeException(\n+                    \"Test failed: \" + exceptions.get(0).getMessage(),\n+                    exceptions.get(0));\n+        }\n+    }\n+\n+    private static boolean toShowFrame(final List<String> argsList) {\n+        return argsList.contains(\"-show\");\n+    }\n+\n+    private static boolean toDebugPrint(final List<String> argsList) {\n+        return argsList.contains(\"-print\");\n+    }\n+\n+    private static void checkFontSize(JEditorPane htmlPane,\n+                                      boolean w3cUnits,\n+                                      boolean debugPrint) {\n+        final View rootView = htmlPane.getUI().getRootView(htmlPane);\n+        final View boxView = rootView.getView(0);\n+        final View bodyView = boxView.getView(1);\n+\n+        int fontSizePrecentage = getViewFontSize(bodyView.getView(0), debugPrint);\n+        int fontSizeInherited  = getViewFontSize(bodyView.getView(1), debugPrint);\n+        int fontSizeExplicit   = getViewFontSize(bodyView.getView(2), debugPrint);\n+        if (debugPrint) {\n+            System.out.println(\"w3cUnits: \" + w3cUnits + \"\\n\"\n+                    + \"Percentage: \" + fontSizePrecentage + \"\\n\"\n+                    + \"Inherited: \" + fontSizeInherited + \"\\n\"\n+                    + \"Explicit: \" + fontSizeExplicit + \"\\n\");\n+        }\n+        if (fontSizeInherited != fontSizeExplicit) {\n+            throw new RuntimeException(\"The font size is different with \"\n+                    + (w3cUnits ? \"w3cUnits\" : \"stdUnits\") + \": \"\n+                    + \"Percentage: \" + fontSizePrecentage + \" vs. \"\n+                    + \"Inherited: \" + fontSizeInherited + \" vs. \"\n+                    + \"Explicit: \" + fontSizeExplicit);\n+        }\n+    }\n+\n+    private static int getViewFontSize(View paragraphView, boolean debugPrint) {\n+        GlyphView inlineView = findFirstTextRun(paragraphView);\n+        int fontSize = inlineView.getFont().getSize();\n+        if (debugPrint) {\n+            ((AbstractElement) inlineView.getElement()).dump(System.out, 1);\n+        }\n+        return fontSize;\n+    }\n+\n+    private static GlyphView findFirstTextRun(View view) {\n+        if (view instanceof GlyphView) {\n+            return (GlyphView) view;\n+        }\n+        for (int i = 0; i < view.getViewCount(); i++) {\n+            GlyphView textRun = findFirstTextRun(view.getView(i));\n+            if (textRun != null) {\n+                return textRun;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/8260687\/BodyInheritedFontSize.java","additions":168,"deletions":168,"binary":false,"changes":336,"status":"modified"}]}