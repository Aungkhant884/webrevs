{"files":[{"patch":"@@ -263,0 +263,13 @@\n+  <Event name=\"GCHeapMemoryUsage\" category=\"Java Virtual Machine, Heap\" label=\"GC Heap Memory Usage\" period=\"everyChunk\">\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"used\" label=\"Heap Used\" description=\"Bytes allocated for storing objects on the heap\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"committed\" label=\"Heap Committed\" description=\"Bytes committed for storing objects on the heap\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"max\" label=\"Heap Max\" description=\"Max size for the heap\" \/>\n+  <\/Event>\n+\n+  <Event name=\"GCHeapMemoryPoolUsage\" category=\"Java Virtual Machine, Heap\" label=\"GC Heap Memory Pool Usage\" period=\"everyChunk\">\n+    <Field type=\"string\" name=\"name\" label=\"Name\" description=\"GC Heap Memory Pool Name\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"used\" label=\"GC Heap Memory Pool Used\" description=\"Bytes used for storing objects in this memory pool\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"committed\" label=\"GC Heap Memory Pool Committed\" description=\"Bytes committed for storing objects in this memory pool\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"max\" label=\"GC Heap Memory Pool Max\" description=\"Max size for storing objects in this memory pool\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"services\/memoryPool.hpp\"\n@@ -529,0 +530,31 @@\n+TRACE_REQUEST_FUNC(GCHeapMemoryUsage) {\n+  MemoryUsage usage = Universe::heap()->memory_usage();\n+  EventGCHeapMemoryUsage event;\n+  event.set_used(usage.used());\n+  event.set_committed(usage.committed());\n+  event.set_max(usage.max_size());\n+  event.set_starttime(timestamp());\n+  event.set_endtime(timestamp());\n+  event.commit();\n+}\n+\n+TRACE_REQUEST_FUNC(GCHeapMemoryPoolUsage) {\n+  ResourceMark mark;\n+  GrowableArray<MemoryPool*> pools = Universe::heap()->memory_pools();\n+  for (int i = 0; i < pools.length(); i++) {\n+    MemoryPool* pool = pools.at(i);\n+    if (pool->is_heap()) {\n+      MemoryUsage usage = pool->get_memory_usage();\n+      EventGCHeapMemoryPoolUsage event;\n+      event.set_name(pool->name());\n+      event.set_used(usage.used());\n+      event.set_committed(usage.committed());\n+      event.set_max(usage.max_size());\n+      event.set_starttime(timestamp());\n+      event.set_endtime(timestamp());\n+      event.commit();\n+    }\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -325,0 +325,10 @@\n+    <event name=\"jdk.GCHeapMemoryUsage\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.GCHeapMemoryPoolUsage\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -325,0 +325,10 @@\n+    <event name=\"jdk.GCHeapMemoryUsage\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n+    <event name=\"jdk.GCHeapMemoryPoolUsage\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+      <setting name=\"period\">everyChunk<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.gc.detailed;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import static jdk.test.lib.Asserts.assertFalse;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -XX:-ExplicitGCInvokesConcurrent jdk.jfr.event.gc.detailed.TestGCHeapMemoryPoolUsageEvent\n+ *\/\n+public class TestGCHeapMemoryPoolUsageEvent {\n+    public static void main(String[] args) throws Exception {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.GCHeapMemoryPoolUsage);\n+            recording.start();\n+            System.gc();\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            System.out.println(events);\n+            assertFalse(events.isEmpty());\n+\n+            RecordedEvent event = events.get(0);\n+            Events.assertField(event, \"name\").notNull();\n+            Events.assertField(event, \"used\").atLeast(0L);\n+            Events.assertField(event, \"committed\").atLeast(0L);\n+            Events.assertField(event, \"max\").atLeast(-1L);\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCHeapMemoryPoolUsageEvent.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.gc.detailed;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+import static jdk.test.lib.Asserts.assertFalse;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -XX:-ExplicitGCInvokesConcurrent jdk.jfr.event.gc.detailed.TestGCHeapMemoryUsageEvent\n+ *\/\n+public class TestGCHeapMemoryUsageEvent {\n+    public static void main(String[] args) throws Exception {\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.GCHeapMemoryUsage);\n+            recording.start();\n+            System.gc();\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            System.out.println(events);\n+            assertFalse(events.isEmpty());\n+            RecordedEvent event = events.get(0);\n+            Events.assertField(event, \"used\").above(0L);\n+            Events.assertField(event, \"committed\").above(0L);\n+            Events.assertField(event, \"max\").above(0L);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCHeapMemoryUsageEvent.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -98,0 +98,2 @@\n+    public static final String GCHeapMemoryUsage = PREFIX + \"GCHeapMemoryUsage\";\n+    public static final String GCHeapMemoryPoolUsage = PREFIX + \"GCHeapMemoryPoolUsage\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}