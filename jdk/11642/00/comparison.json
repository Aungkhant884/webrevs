{"files":[{"patch":"@@ -1378,1 +1378,7 @@\n-            assert(is_loop || block->find_node(def) < j, \"uses must follow definitions\");\n+            \/\/ Uses must be before definition, except if:\n+            \/\/ - We are in some kind of loop we already detected\n+            \/\/ - We are in infinite loop, where Region may not have been turned into LoopNode\n+            assert(block->find_node(def) < j ||\n+                   is_loop ||\n+                   (block->head()->as_Region()->is_in_infinite_subgraph() && n->is_Phi()),\n+                   \"uses must follow definitions (except in loops)\");\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -397,0 +397,39 @@\n+\/\/ Is this region in an infinite subgraph?\n+\/\/ (no path to root except through false NeverBranch exit)\n+bool RegionNode::is_in_infinite_subgraph() {\n+  ResourceMark rm;\n+  Unique_Node_List worklist;\n+  worklist.push(this);\n+  return RegionNode::are_all_in_infinite_subgraph(worklist);\n+}\n+\n+\/\/ Are all nodes in worklist in infinite subgraph?\n+\/\/ (no path to root except through false NeverBranch exit)\n+\/\/ worklist is directly used for the traversal\n+bool RegionNode::are_all_in_infinite_subgraph(Unique_Node_List &worklist) {\n+  \/\/ BFS traversal down the CFG, except through NeverBranch exits\n+  for (uint i = 0; i < worklist.size(); ++i) {\n+    Node* n = worklist.at(i);\n+    assert(n->is_CFG(), \"only traverse CFG\");\n+    if (n->is_Root()) {\n+      \/\/ Found root -> there was an exit!\n+      return false;\n+    } else if (n->is_NeverBranch()) {\n+      \/\/ Only follow the loop-internal projection, not the NeverBranch exit\n+      ProjNode* proj = n->as_NeverBranch()->proj_out_or_null(0);\n+      assert(proj != nullptr, \"must find loop-internal projection of NeverBranch\");\n+      worklist.push(proj);\n+    } else {\n+      \/\/ Traverse all CFG outputs\n+      for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+        Node* use = n->fast_out(i);\n+        if (use->is_CFG()) {\n+          worklist.push(use);\n+        }\n+      }\n+    }\n+  }\n+  \/\/ No exit found for any loop -> all are infinite\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -94,0 +94,2 @@\n+  bool is_in_infinite_subgraph();\n+  static bool are_all_in_infinite_subgraph(Unique_Node_List &worklist);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4204,24 +4204,1 @@\n-  \/\/ BFS traversal down the CFG, except through NeverBranch exits\n-  for (uint i = 0; i < worklist.size(); ++i) {\n-    Node* n = worklist.at(i);\n-    assert(n->is_CFG(), \"only traverse CFG\");\n-    if (n->is_Root()) {\n-      \/\/ Found root -> there was an exit!\n-      return false;\n-    } else if (n->is_NeverBranch()) {\n-      \/\/ Only follow the loop-internal projection, not the NeverBranch exit\n-      ProjNode* proj = n->as_NeverBranch()->proj_out_or_null(0);\n-      assert(proj != nullptr, \"must find loop-internal projection of NeverBranch\");\n-      worklist.push(proj);\n-    } else {\n-      \/\/ Traverse all CFG outputs\n-      for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n-        Node* use = n->fast_out(i);\n-        if (use->is_CFG()) {\n-          worklist.push(use);\n-        }\n-      }\n-    }\n-  }\n-  \/\/ No exit found for any loop -> all are infinite\n-  return true;\n+  return RegionNode::are_all_in_infinite_subgraph(worklist);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296318\n+ * @summary Loops inside infinite loops may not be detected, thus a region may still\n+ *          be the loop head, even if it is not a LoopNode.\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *      -XX:CompileCommand=compileonly,TestUndetectedLoopInInfiniteLoop::test*\n+ *      -XX:PerMethodTrapLimit=0\n+ *      TestUndetectedLoopInInfiniteLoop\n+ *\/\n+\n+\n+public class TestUndetectedLoopInInfiniteLoop {\n+    public static void main (String[] args) {\n+        test(true, false);\n+    }\n+    public static void test(boolean flag, boolean flag2) {\n+        int x = 0;\n+        if (flag2) { \/\/ runtime check, avoid infinite loop\n+            while (true) { \/\/ infinite loop (no exit)\n+                if (flag) {\n+                    x++;\n+                }\n+                do { \/\/ inner loop\n+                    \/\/ assert for this block\n+                    \/\/ Region\n+                    \/\/ Phi -> SubI -> XorI ---> Phi\n+                    x = (x - 1) ^ 1;\n+                    \/\/ Problem: this looks like a loop, but we have no LoopNode\n+                    \/\/ We have no LoopNode, because this is all in an infinite\n+                    \/\/ loop, and during PhaseIdealLoop::build_loop_tree we do not\n+                    \/\/ attach the loops of an infinite loop to the loop tree,\n+                    \/\/ and hence we do not get to call beautify_loop on these loops\n+                    \/\/ which would have turned the Region into a LoopNode.\n+                } while (x < 0);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUndetectedLoopInInfiniteLoop.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}