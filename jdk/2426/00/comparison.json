{"files":[{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/atomic.hpp\"\n@@ -46,0 +45,3 @@\n+\/\/\n+\/\/ Invariant: bottom() <= top() <= end()\n+\/\/ top() and end() are exclusive.\n@@ -57,5 +59,3 @@\n-  \/\/ Supports CAS-based allocation.\n-  \/\/ Invariant: bottom() <= top() <= end()\n-  HeapWord* _bottom;            \/\/ Start of the region.\n-  HeapWord* volatile _top;      \/\/ Current allocation pointer.\n-  HeapWord* volatile _end;      \/\/ Current allocation limit.  expand() advances.\n+  HeapWord* _bottom;\n+  HeapWord* volatile _top;\n+  HeapWord* _end;\n@@ -70,4 +70,0 @@\n- protected:\n-  HeapWord* volatile* top_addr()           { return &_top; }\n-  HeapWord* volatile* end_addr()           { return &_end; }\n-\n@@ -80,2 +76,2 @@\n-  HeapWord* top() const                    { return Atomic::load(&_top); }\n-  HeapWord* end() const                    { return Atomic::load(&_end); }\n+  HeapWord* top() const                    { return _top;    }\n+  HeapWord* end() const                    { return _end; }\n@@ -84,2 +80,5 @@\n-  virtual void set_top(HeapWord* value)    { Atomic::store(&_top, value); }\n-  void set_end(HeapWord* value)            { Atomic::store(&_end, value); }\n+  virtual void set_top(HeapWord* value)    { _top = value;   }\n+  void set_end(HeapWord* value)            { _end = value; }\n+\n+  HeapWord* volatile* top_addr()           { return &_top; }\n+  HeapWord** end_addr()                    { return &_end; }\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -203,0 +203,3 @@\n+  HeapWord* volatile* top_addr() const { return !UseNUMA ? young_gen()->top_addr() : (HeapWord* volatile*)-1; }\n+  HeapWord** end_addr() const { return !UseNUMA ? young_gen()->end_addr() : (HeapWord**)-1; }\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+  HeapWord* volatile* top_addr() const   { return eden_space()->top_addr(); }\n+  HeapWord** end_addr() const   { return eden_space()->end_addr(); }\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  volatile_nonstatic_field(MutableSpace,       _end,                                          HeapWord*)                             \\\n+  nonstatic_field(MutableSpace,                _end,                                          HeapWord*)                             \\\n","filename":"src\/hotspot\/share\/gc\/parallel\/vmStructs_parallelgc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}