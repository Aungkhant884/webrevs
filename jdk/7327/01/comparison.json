{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -430,1 +430,1 @@\n-            ee.printStackTrace();\n+            ee.printStackTrace(err);\n@@ -433,1 +433,1 @@\n-            t.printStackTrace();\n+            t.printStackTrace(err);\n@@ -464,1 +464,6 @@\n-                    Files.move(path, Paths.get(fname), StandardCopyOption.REPLACE_EXISTING);\n+                    Path target = Paths.get(fname);\n+                    Path parent = target.getParent();\n+                    if (parent != null) {\n+                        Files.createDirectories(parent);\n+                    }\n+                    Files.move(path, target, StandardCopyOption.REPLACE_EXISTING);\n@@ -1656,1 +1661,1 @@\n-        e.printStackTrace();\n+        e.printStackTrace(err);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -230,1 +230,3 @@\n-\\  -c, --create               Create the archive\n+\\  -c, --create               Create the archive. When the archive file name specified\\n\\\n+\\                             by -f or --file contains a path, missing parent directories\\n\\\n+\\                             will also be created\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8281104\n+ * @modules jdk.jartool\n+ * @summary jar --create --file a\/b\/test.jar should create directories a\/b\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Stream;\n+\n+public class CreateMissingParentDirectories {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jar tool not found\")\n+        );\n+\n+    \/**\n+     * Remove dirs & files needed for test.\n+     *\/\n+    private static void cleanup(Path dir) {\n+        try {\n+            if (Files.isDirectory(dir)) {\n+                try (Stream<Path> s = Files.list(dir)) {\n+                    s.forEach(p -> cleanup(p));\n+                }\n+            }\n+            Files.delete(dir);\n+        } catch (Exception x) {\n+            fail(x.toString());\n+        }\n+    }\n+\n+    public static void realMain(String[] args) throws Throwable {\n+        Path topDir = Files.createTempDirectory(\"delete\");\n+        try {\n+            Path entry = Files.writeString(topDir.resolve(\"test.txt\"), \"Some text...\");\n+\n+            doHappyPathTest(topDir.resolve(\"test.jar\"), entry);\n+            doHappyPathTest(topDir.resolve(\"a\/test.jar\"), entry);\n+            doHappyPathTest(topDir.resolve(\"a\/b\/test.jar\"), entry);\n+\n+            doFailingTest(topDir.toString() + \"\/a\/*\/test.jar\", entry);\n+            Path blocker = Files.writeString(topDir.resolve(\"blocker.txt\"), \"Blocked!\");\n+            doFailingTest(topDir.resolve(\"blocker.txt\/test.jar\").toString(), entry);\n+        } finally {\n+            cleanup(topDir);\n+        }\n+    }\n+\n+    private static void doHappyPathTest(Path jar, Path entry) throws Throwable {\n+        String[] jarArgs = new String[]{\"cf\", jar.toString(), entry.toString()};\n+        if (JAR_TOOL.run(System.out, System.err, jarArgs) != 0) {\n+            fail(\"Could not create jar file: \" + jar);\n+            return;\n+        }\n+        pass();\n+    }\n+\n+    private static void doFailingTest(String jar, Path entry) throws Throwable {\n+        StringWriter out = new StringWriter();\n+        StringWriter err = new StringWriter();\n+        String[] jarArgs = new String[]{\"cf\", jar, entry.toString()};\n+\n+        if (JAR_TOOL.run(new PrintWriter(out, true), new PrintWriter(err, true), jarArgs) == 0) {\n+            fail(\"Should have failed creating jar file: \" + jar);\n+            return;\n+        }\n+        \/\/ non-zero exit code expected, check error message contains jar file's name\n+        check(err.toString().contains(jar));\n+        pass();\n+    }\n+\n+    \/\/--------------------- Infrastructure ---------------------------\n+    static volatile int passed = 0, failed = 0;\n+    static void pass() {passed++;}\n+    static void fail() {failed++; Thread.dumpStack();}\n+    static void fail(String msg) {System.out.println(msg); fail();}\n+    static void unexpected(Throwable t) {failed++; t.printStackTrace();}\n+    static void check(boolean cond) {if (cond) pass(); else fail();}\n+    static void equal(Object x, Object y) {\n+        if (x == null ? y == null : x.equals(y)) pass();\n+        else fail(x + \" not equal to \" + y);}\n+    public static void main(String[] args) throws Throwable {\n+        try {realMain(args);} catch (Throwable t) {unexpected(t);}\n+        System.out.println(\"\\nPassed = \" + passed + \" failed = \" + failed);\n+        if (failed > 0) throw new AssertionError(\"Some tests failed\");}\n+}\n","filename":"test\/jdk\/tools\/jar\/CreateMissingParentDirectories.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}