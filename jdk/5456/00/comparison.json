{"files":[{"patch":"@@ -428,1 +428,1 @@\n-    BerDecoder readReply(LdapRequest ldr) throws IOException, NamingException {\n+    BerDecoder readReply(LdapRequest ldr) throws NamingException {\n@@ -439,1 +439,1 @@\n-        NamingException namingException = null;\n+        IOException ioException = null;\n@@ -448,4 +448,1 @@\n-        } catch (CommunicationException ce) {\n-            \/\/ Re-throw\n-            throw ce;\n-        } catch (NamingException ne) {\n+        } catch (IOException ioe) {\n@@ -453,1 +450,2 @@\n-            namingException = ne;\n+            \/\/ getReplyBer throws IOException when the requests needs to be abandoned\n+            ioException = ioe;\n@@ -460,1 +458,1 @@\n-        \/\/ namingException can be not null in the following cases:\n+        \/\/ ioException can be not null in the following cases:\n@@ -462,1 +460,4 @@\n-        \/\/  b) LDAP request connection has been closed or cancelled\n+        \/\/  b) LDAP request connection has been closed\n+        \/\/ If the request has been cancelled - CommunicationException is\n+        \/\/ thrown directly from LdapRequest.getReplyBer, since there is no\n+        \/\/ need to abandon request.\n@@ -464,3 +465,6 @@\n-        if (namingException != null) {\n-            \/\/ Re-throw NamingException after all cleanups are done\n-            throw namingException;\n+        if (ioException != null) {\n+            \/\/ Throw CommunicationException after all cleanups are done\n+            String message = ioException.getMessage();\n+            var ce = new CommunicationException(message);\n+            ce.initCause(ioException);\n+            throw ce;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,2 +106,2 @@\n-     * @throws NamingException request has been closed or timed out. Request does need to be abandoned\n-     * @throws InterruptedException LDAP operation has been interrupted\n+     * @throws IOException            request has been closed or timed out. Request does need to be abandoned\n+     * @throws InterruptedException   LDAP operation has been interrupted\n@@ -109,1 +109,1 @@\n-    BerDecoder getReplyBer(long millis) throws NamingException,\n+    BerDecoder getReplyBer(long millis) throws IOException, CommunicationException,\n@@ -116,1 +116,1 @@\n-            throw new NamingException(CLOSE_MSG);\n+            throw new IOException(CLOSE_MSG);\n@@ -129,1 +129,1 @@\n-            throw new NamingException(String.format(TIMEOUT_MSG_FMT, millis));\n+            throw new IOException(String.format(TIMEOUT_MSG_FMT, millis));\n@@ -133,1 +133,1 @@\n-            throw new NamingException(CLOSE_MSG);\n+            throw new IOException(CLOSE_MSG);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/LdapRequest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n- * @bug 8062947\n- * @summary Test that NamingException message text matches the failure reason\n+ * @bug 8062947 8273402\n+ * @summary Test that CommunicationException is thrown when connection is timed out or closed\/cancelled,\n+ *  and it's text matches the failure reason.\n@@ -32,0 +33,1 @@\n+import javax.naming.CommunicationException;\n@@ -58,3 +60,4 @@\n-            var namingException = Assert.expectThrows(NamingException.class, () -> new InitialDirContext(env));\n-            System.out.println(\"Got naming exception:\" + namingException);\n-            Assert.assertEquals(namingException.getMessage(), EXPECTED_TIMEOUT_MESSAGE);\n+            var communicationException =\n+                    Assert.expectThrows(CommunicationException.class, () -> new InitialDirContext(env));\n+            System.out.println(\"Got CommunicationException:\" + communicationException);\n+            Assert.assertEquals(communicationException.getMessage(), EXPECTED_TIMEOUT_MESSAGE);\n@@ -77,3 +80,6 @@\n-                \/\/ If exception is not ServiceUnavailableException - check the exception message\n-                System.out.println(\"Got NamingException:\" + namingException);\n-                Assert.assertEquals(namingException.getMessage(), EXPECTED_CLOSURE_MESSAGE);\n+                \/\/ If exception is not ServiceUnavailableException, CommunicationException is expected\n+                Assert.assertTrue(namingException instanceof CommunicationException);\n+                var communicationException = (CommunicationException) namingException;\n+                System.out.println(\"Got CommunicationException:\" + communicationException);\n+                \/\/ Check exception message\n+                Assert.assertEquals(communicationException.getMessage(), EXPECTED_CLOSURE_MESSAGE);\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/NamingExceptionMessageTest.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"}]}