{"files":[{"patch":"@@ -460,1 +460,1 @@\n-          assert(archived_obj != NULL,  \"already checked not too large to archive\");\n+          assert(archived_obj != nullptr,  \"already checked not too large to archive\");\n@@ -633,0 +633,21 @@\n+  StringTable::write_shared_table(_dumped_interned_strings);\n+}\n+\n+void HeapShared::copy_interned_strings() {\n+  init_seen_objects_table();\n+\n+  auto copier = [&] (oop s, bool value_ignored) {\n+    assert(s != nullptr, \"sanity\");\n+    typeArrayOop value = java_lang_String::value_no_keepalive(s);\n+    if (!HeapShared::is_too_large_to_archive(value)) {\n+      oop archived_s = archive_reachable_objects_from(1, _default_subgraph_info,\n+                                                      s, \/*is_closed_archive=*\/true);\n+      assert(archived_s != nullptr, \"already checked not too large to archive\");\n+      \/\/ Prevent string deduplication from changing the value field to\n+      \/\/ something not in the archive.\n+      java_lang_String::set_deduplication_forbidden(archived_s);\n+    }\n+  };\n+  _dumped_interned_strings->iterate_all(copier);\n+\n+  delete_seen_objects_table();\n@@ -641,1 +662,1 @@\n-  StringTable::write_to_archive(_dumped_interned_strings);\n+  copy_interned_strings();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -319,0 +319,1 @@\n+  static oop archive_object(oop obj);\n@@ -320,0 +321,1 @@\n+  static void copy_interned_strings();\n@@ -376,1 +378,0 @@\n-  static oop archive_object(oop obj);\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -757,26 +757,1 @@\n-oop StringTable::create_archived_string(oop s) {\n-  assert(DumpSharedSpaces, \"this function is only used with -Xshare:dump\");\n-  assert(java_lang_String::is_instance(s), \"sanity\");\n-  assert(!HeapShared::is_archived_object_during_dumptime(s), \"sanity\");\n-\n-  oop new_s = nullptr;\n-  typeArrayOop v = java_lang_String::value_no_keepalive(s);\n-  typeArrayOop new_v = (typeArrayOop)HeapShared::archive_object(v);\n-  if (new_v == nullptr) {\n-    return nullptr;\n-  }\n-  new_s = HeapShared::archive_object(s);\n-  if (new_s == nullptr) {\n-    return nullptr;\n-  }\n-\n-  \/\/ adjust the pointer to the 'value' field in the new String oop\n-  java_lang_String::set_value_raw(new_s, new_v);\n-  \/\/ Prevent string deduplication from changing the 'value' field to\n-  \/\/ something not in the archive before building the archive.  Also marks\n-  \/\/ the shared string when loaded.\n-  java_lang_String::set_deduplication_forbidden(new_s);\n-  return new_s;\n-}\n-\n-class CopyToArchive : StackObj {\n+class EncodeSharedStringsAsOffsets : StackObj {\n@@ -795,1 +770,1 @@\n-  CopyToArchive(CompactHashtableWriter* writer) : _writer(writer) {}\n+  EncodeSharedStringsAsOffsets(CompactHashtableWriter* writer) : _writer(writer) {}\n@@ -798,11 +773,8 @@\n-    unsigned int hash = java_lang_String::hash_code(s);\n-    oop new_s = StringTable::create_archived_string(s);\n-    if (new_s == nullptr) {\n-      return true;\n-    }\n-\n-    \/\/ add to the compact table\n-    if (UseCompressedOops) {\n-      _writer->add(hash, CompressedOops::narrow_oop_value(new_s));\n-    } else {\n-      _writer->add(hash, compute_delta(new_s));\n+    oop new_s = HeapShared::find_archived_heap_object(s);\n+    if (new_s != nullptr) { \/\/ could be null if the string is too big\n+      unsigned int hash = java_lang_String::hash_code(s);\n+      if (UseCompressedOops) {\n+        _writer->add(hash, CompressedOops::narrow_oop_value(new_s));\n+      } else {\n+        _writer->add(hash, compute_delta(new_s));\n+      }\n@@ -810,1 +782,1 @@\n-    return true;\n+    return true; \/\/ keep iterating\n@@ -814,1 +786,2 @@\n-void StringTable::write_to_archive(const DumpedInternedStrings* dumped_interned_strings) {\n+\/\/ Write the _shared_table (a CompactHashtable) into the CDS archive file.\n+void StringTable::write_shared_table(const DumpedInternedStrings* dumped_interned_strings) {\n@@ -820,3 +793,6 @@\n-  \/\/ Copy the interned strings into the \"string space\" within the java heap\n-  CopyToArchive copier(&writer);\n-  dumped_interned_strings->iterate(&copier);\n+  \/\/ Encode the strings in the CompactHashtable using offsets -- we know that the\n+  \/\/ strings will not move during runtime because they are inside the G1 closed\n+  \/\/ archive region.\n+  EncodeSharedStringsAsOffsets offset_finder(&writer);\n+  dumped_interned_strings->iterate(&offset_finder);\n+\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":19,"deletions":43,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -112,2 +112,1 @@\n-  static oop create_archived_string(oop s) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n-  static void write_to_archive(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void write_shared_table(const DumpedInternedStrings* dumped_interned_strings) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}