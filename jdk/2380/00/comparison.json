{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,2 @@\n-     * Returns a new InnocuousThread with an auto-generated thread name.\n+     * Returns a new InnocuousThread with an auto-generated thread name,\n+     * inheriting the current thread priority.\n@@ -86,1 +87,2 @@\n-     * Returns a new InnocuousThread with null context class loader.\n+     * Returns a new InnocuousThread with null context class loader,\n+     * inheriting the current thread priority.\n@@ -89,0 +91,11 @@\n+        return newSystemThread(name, target, currentThread().getPriority());\n+    }\n+\n+    \/**\n+     * Returns a new InnocuousThread with null context class loader,\n+     * with priority set to the given priority.\n+     *\/\n+    public static Thread newSystemThread(String name, Runnable target, int priority) {\n+        if (System.getSecurityManager() == null) {\n+            return createSystemThread(name, target, priority);\n+        }\n@@ -93,2 +106,1 @@\n-                        return new InnocuousThread(INNOCUOUSTHREADGROUP,\n-                                                   target, name, null);\n+                        return createSystemThread(name, target, priority);\n@@ -99,0 +111,9 @@\n+    private static Thread createSystemThread(String name, Runnable target, int priority) {\n+        Thread t = new InnocuousThread(INNOCUOUSTHREADGROUP,\n+                target, name, null);\n+        if (t.getPriority() != priority) {\n+            t.setPriority(priority);\n+        }\n+        return t;\n+    }\n+\n@@ -170,7 +191,11 @@\n-            INNOCUOUSTHREADGROUP = AccessController.doPrivileged(\n-                new PrivilegedAction<ThreadGroup>() {\n-                    @Override\n-                    public ThreadGroup run() {\n-                        return new ThreadGroup(root, \"InnocuousThreadGroup\");\n-                    }\n-                });\n+            if (System.getSecurityManager() == null) {\n+                INNOCUOUSTHREADGROUP = new ThreadGroup(root, \"InnocuousThreadGroup\");\n+            } else {\n+                INNOCUOUSTHREADGROUP = AccessController.doPrivileged(\n+                    new PrivilegedAction<ThreadGroup>() {\n+                        @Override\n+                        public ThreadGroup run() {\n+                            return new ThreadGroup(root, \"InnocuousThreadGroup\");\n+                        }\n+                    });\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/InnocuousThread.java","additions":37,"deletions":12,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -45,8 +43,2 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                @Override\n-                public Thread run() {\n-                    Thread t = InnocuousThread.newSystemThread(\"Common-Cleaner\", r);\n-                    t.setPriority(Thread.MAX_PRIORITY - 2);\n-                    return t;\n-                }\n-            });\n+            return InnocuousThread.newSystemThread(\"Common-Cleaner\",\n+                    r, Thread.MAX_PRIORITY - 2);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/CleanerFactory.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"}]}