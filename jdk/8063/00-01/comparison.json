{"files":[{"patch":"@@ -25,1 +25,0 @@\n-\n@@ -42,3 +41,3 @@\n- * This class manages different properties related to Stax specification and its implementation.\n- * This class constructor also takes itself (PropertyManager object) as parameter and initializes the\n- * object with the property taken from the object passed.\n+ * This class manages the properties for the Stax specification and its\n+ * implementation. A PropertyManager object can be constructed based on the\n+ * context or initialized with another PropertyManager object.\n@@ -50,1 +49,0 @@\n-\n@@ -53,1 +51,0 @@\n-\n@@ -59,1 +56,3 @@\n-    \/** Property identifier: Security manager. *\/\n+    \/**\n+     * Property identifier: Security manager.\n+     *\/\n@@ -62,3 +61,5 @@\n-    \/** Property identifier: Security property manager. *\/\n-    private static final String XML_SECURITY_PROPERTY_MANAGER =\n-            JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n+    \/**\n+     * Property identifier: Security property manager.\n+     *\/\n+    private static final String XML_SECURITY_PROPERTY_MANAGER\n+            = JdkConstants.XML_SECURITY_PROPERTY_MANAGER;\n@@ -74,1 +75,5 @@\n-    \/** Creates a new instance of PropertyManager *\/\n+    \/**\n+     * Creates a new instance of the PropertyManager based on the context.\n+     *\n+     * @param context a flag indicating the context: for a reader or writer.\n+     *\/\n@@ -76,2 +81,2 @@\n-        switch(context){\n-            case CONTEXT_READER:{\n+        switch (context) {\n+            case CONTEXT_READER: {\n@@ -81,1 +86,1 @@\n-            case CONTEXT_WRITER:{\n+            case CONTEXT_WRITER: {\n@@ -89,1 +94,4 @@\n-     * Initialize this object with the properties taken from passed PropertyManager object.\n+     * Initializes the object with the properties of another\n+     * PropertyManager object.\n+     *\n+     * @param propertyManager another PropertyManager object\n@@ -91,1 +99,1 @@\n-    public PropertyManager(PropertyManager propertyManager){\n+    public PropertyManager(PropertyManager propertyManager) {\n@@ -95,2 +103,2 @@\n-        fSecurityManager = (XMLSecurityManager)getProperty(SECURITY_MANAGER);\n-        fSecurityPropertyMgr = (XMLSecurityPropertyManager)getProperty(XML_SECURITY_PROPERTY_MANAGER);\n+        fSecurityManager = (XMLSecurityManager) getProperty(SECURITY_MANAGER);\n+        fSecurityPropertyMgr = (XMLSecurityPropertyManager) getProperty(XML_SECURITY_PROPERTY_MANAGER);\n@@ -99,2 +107,2 @@\n-    private HashMap<String, Object> getProperties(){\n-        return supportedProps ;\n+    private HashMap<String, Object> getProperties() {\n+        return supportedProps;\n@@ -103,1 +111,0 @@\n-\n@@ -105,3 +112,1 @@\n-     * Important point:\n-     * 1. We are not exposing Xerces namespace property. Application should configure namespace through\n-     * Stax specific property.\n+     * Initializes reader properties.\n@@ -109,0 +114,1 @@\n+     * @implNote: StAX defined namespace rather than Xerces' should be used.\n@@ -110,1 +116,1 @@\n-    private void initConfigurableReaderProperties(){\n+    private void initConfigurableReaderProperties() {\n@@ -121,1 +127,1 @@\n-        supportedProps.put(STAX_NOTATIONS,null );\n+        supportedProps.put(STAX_NOTATIONS, null);\n@@ -125,1 +131,1 @@\n-        supportedProps.put(Constants.SAX_FEATURE_PREFIX + Constants.STRING_INTERNING_FEATURE , true);\n+        supportedProps.put(Constants.SAX_FEATURE_PREFIX + Constants.STRING_INTERNING_FEATURE, true);\n@@ -127,1 +133,1 @@\n-        supportedProps.put(Constants.XERCES_FEATURE_PREFIX + Constants.ALLOW_JAVA_ENCODINGS_FEATURE, true) ;\n+        supportedProps.put(Constants.XERCES_FEATURE_PREFIX + Constants.ALLOW_JAVA_ENCODINGS_FEATURE, true);\n@@ -129,1 +135,1 @@\n-        supportedProps.put(Constants.ADD_NAMESPACE_DECL_AS_ATTRIBUTE ,  Boolean.FALSE) ;\n+        supportedProps.put(Constants.ADD_NAMESPACE_DECL_AS_ATTRIBUTE, Boolean.FALSE);\n@@ -132,1 +138,1 @@\n-        supportedProps.put(Constants.ZEPHYR_PROPERTY_PREFIX + Constants.STAX_REPORT_CDATA_EVENT , false);\n+        supportedProps.put(Constants.ZEPHYR_PROPERTY_PREFIX + Constants.STAX_REPORT_CDATA_EVENT, false);\n@@ -145,1 +151,1 @@\n-        for( CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n+        for (CatalogFeatures.Feature f : CatalogFeatures.Feature.values()) {\n@@ -152,2 +158,5 @@\n-    private void initWriterProps(){\n-        supportedProps.put(XMLOutputFactory.IS_REPAIRING_NAMESPACES , Boolean.FALSE);\n+    \/**\n+     * Initializes writer properties.\n+     *\/\n+    private void initWriterProps() {\n+        supportedProps.put(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.FALSE);\n@@ -155,1 +164,1 @@\n-        supportedProps.put(Constants.ESCAPE_CHARACTERS , Boolean.TRUE);\n+        supportedProps.put(Constants.ESCAPE_CHARACTERS, Boolean.TRUE);\n@@ -160,3 +169,5 @@\n-     * public void reset(){\n-     * supportedProps.clear() ;\n-     * }\n+     * Checks whether a property is managed by the PropertyManager.\n+     *\n+     * @param property the name of a property\n+     * @return true if the property is managed by the PropertyManager, false\n+     * otherwise\n@@ -164,4 +175,4 @@\n-    public boolean containsProperty(String property){\n-        return supportedProps.containsKey(property) ||\n-                (fSecurityManager != null && fSecurityManager.getIndex(property) > -1) ||\n-                (fSecurityPropertyMgr!=null && fSecurityPropertyMgr.getIndex(property) > -1) ;\n+    public boolean containsProperty(String property) {\n+        return supportedProps.containsKey(property)\n+                || (fSecurityManager != null && fSecurityManager.getIndex(property) > -1)\n+                || (fSecurityPropertyMgr != null && fSecurityPropertyMgr.getIndex(property) > -1);\n@@ -170,8 +181,19 @@\n-    public Object getProperty(String property){\n-        \/** Check to see if the property is managed by the security manager **\/\n-        String propertyValue = (fSecurityManager != null) ?\n-                fSecurityManager.getLimitAsString(property) : null;\n-        \/** Check to see if the property is managed by the security property manager **\/\n-        if (propertyValue == null){\n-            propertyValue = (fSecurityPropertyMgr != null) ?\n-                fSecurityPropertyMgr.getValue(property) : null;\n+    \/**\n+     * Returns the value of a property.\n+     *\n+     * @param property the name of the property\n+     * @return the value of a property\n+     *\/\n+    public Object getProperty(String property) {\n+        \/**\n+         * Check to see if the property is managed by the security manager *\n+         *\/\n+        String propertyValue = (fSecurityManager != null)\n+                ? fSecurityManager.getLimitAsString(property) : null;\n+        \/**\n+         * Check to see if the property is managed by the security property\n+         * manager\n+         *\/\n+        if (propertyValue == null) {\n+            propertyValue = (fSecurityPropertyMgr != null)\n+                    ? fSecurityPropertyMgr.getValue(property) : null;\n@@ -182,8 +204,13 @@\n-    public void setProperty(String property, Object value){\n-        String equivalentProperty = null ;\n-        if(property.equals(XMLInputFactory.IS_NAMESPACE_AWARE)){\n-            equivalentProperty = Constants.XERCES_FEATURE_PREFIX + Constants.NAMESPACES_FEATURE ;\n-        }\n-        else if(property.equals(XMLInputFactory.IS_VALIDATING)){\n-            if( (value instanceof Boolean) && ((Boolean)value).booleanValue()){\n-                throw new java.lang.IllegalArgumentException(\"true value of isValidating not supported\") ;\n+    \/**\n+     * Sets a property value.\n+     *\n+     * @param property the name of the property\n+     * @param value the value of the property\n+     *\/\n+    public void setProperty(String property, Object value) {\n+        String equivalentProperty = null;\n+        if (property.equals(XMLInputFactory.IS_NAMESPACE_AWARE)) {\n+            equivalentProperty = Constants.XERCES_FEATURE_PREFIX + Constants.NAMESPACES_FEATURE;\n+        } else if (property.equals(XMLInputFactory.IS_VALIDATING)) {\n+            if ((value instanceof Boolean) && ((Boolean) value)) {\n+                throw new IllegalArgumentException(\"true value of isValidating not supported\");\n@@ -191,4 +218,4 @@\n-        }\n-        else if(property.equals(STRING_INTERNING)){\n-            if( (value instanceof Boolean) && !((Boolean)value).booleanValue()){\n-                throw new java.lang.IllegalArgumentException(\"false value of \" + STRING_INTERNING + \"feature is not supported\") ;\n+        } else if (property.equals(STRING_INTERNING)) {\n+            if ((value instanceof Boolean) && !((Boolean) value)) {\n+                throw new IllegalArgumentException(\"false value of \" +\n+                        STRING_INTERNING + \"feature is not supported\");\n@@ -196,2 +223,1 @@\n-        }\n-        else if(property.equals(XMLInputFactory.RESOLVER)){\n+        } else if (property.equals(XMLInputFactory.RESOLVER)) {\n@@ -199,1 +225,3 @@\n-            supportedProps.put( Constants.XERCES_PROPERTY_PREFIX + Constants.STAX_ENTITY_RESOLVER_PROPERTY , new StaxEntityResolverWrapper((XMLResolver)value)) ;\n+            supportedProps.put(Constants.XERCES_PROPERTY_PREFIX +\n+                    Constants.STAX_ENTITY_RESOLVER_PROPERTY,\n+                    new StaxEntityResolverWrapper((XMLResolver) value));\n@@ -203,2 +231,3 @@\n-         * It's possible for users to set a security manager through the interface.\n-         * If it's the old SecurityManager, convert it to the new XMLSecurityManager\n+         * It's possible for users to set a security manager through the\n+         * interface. If it's the old SecurityManager, convert it to the new\n+         * XMLSecurityManager\n@@ -215,1 +244,1 @@\n-                fSecurityPropertyMgr = (XMLSecurityPropertyManager)value;\n+                fSecurityPropertyMgr = (XMLSecurityPropertyManager) value;\n@@ -222,2 +251,2 @@\n-        if (fSecurityManager == null ||\n-                !fSecurityManager.setLimit(property, JdkProperty.State.APIPROPERTY, value)) {\n+        if (fSecurityManager == null\n+                || !fSecurityManager.setLimit(property, JdkProperty.State.APIPROPERTY, value)) {\n@@ -225,2 +254,2 @@\n-            if (fSecurityPropertyMgr == null ||\n-                    !fSecurityPropertyMgr.setValue(property, XMLSecurityPropertyManager.State.APIPROPERTY, value)) {\n+            if (fSecurityPropertyMgr == null\n+                    || !fSecurityPropertyMgr.setValue(property, XMLSecurityPropertyManager.State.APIPROPERTY, value)) {\n@@ -232,2 +261,2 @@\n-        if(equivalentProperty != null){\n-            supportedProps.put(equivalentProperty, value ) ;\n+        if (equivalentProperty != null) {\n+            supportedProps.put(equivalentProperty, value);\n@@ -237,1 +266,2 @@\n-    public String toString(){\n+    @Override\n+    public String toString() {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/PropertyManager.java","additions":104,"deletions":74,"binary":false,"changes":178,"status":"modified"}]}