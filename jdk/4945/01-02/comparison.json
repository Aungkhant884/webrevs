{"files":[{"patch":"@@ -42,2 +42,0 @@\n-import java.util.Random;\n-import sun.hotspot.WhiteBox;\n@@ -65,2 +63,0 @@\n-        \"The shared archive file has a bad magic number\",\n-        \"Unable to map shared spaces\",\n@@ -110,1 +106,0 @@\n-        CDSArchiveUtils.initialize();  \/\/ all offsets available\n@@ -210,2 +205,2 @@\n-        \/\/ delete bytes in data section\n-        System.out.println(\"\\n5. Delete bytes at beginning of data section, should fail\\n\");\n+        \/\/ insert  bytes in data section\n+        System.out.println(\"\\n5. Insert bytes at beginning of data section, should fail\\n\");\n@@ -216,2 +211,2 @@\n-        \/\/ insert bytes in data section forward\n-        System.out.println(\"\\n6. Insert bytes at beginning of data section, should fail\\n\");\n+        \/\/ delete bytes in data section forward\n+        System.out.println(\"\\n6. Delete bytes at beginning of data section, should fail\\n\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -72,6 +72,21 @@\n-    public static void initialize() throws Exception {\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n-        offsetMagic = wb.getOffsetForName(\"FileMapHeader::_magic\");\n-        offsetVersion = wb.getOffsetForName(\"FileMapHeader::_version\");\n-        offsetJvmIdent = wb.getOffsetForName(\"FileMapHeader::_jvm_ident\");\n-        spOffsetCrc = wb.getOffsetForName(\"CDSFileMapRegion::_crc\");\n+    static {\n+        WhiteBox wb;\n+        try {\n+            wb = WhiteBox.getWhiteBox();\n+            offsetMagic = wb.getOffsetForName(\"FileMapHeader::_magic\");\n+            offsetVersion = wb.getOffsetForName(\"FileMapHeader::_version\");\n+            offsetJvmIdent = wb.getOffsetForName(\"FileMapHeader::_jvm_ident\");\n+            spOffsetCrc = wb.getOffsetForName(\"CDSFileMapRegion::_crc\");\n+            spOffset = wb.getOffsetForName(\"FileMapHeader::_space[0]\") - offsetMagic;\n+            spUsedOffset = wb.getOffsetForName(\"CDSFileMapRegion::_used\") - spOffsetCrc;\n+            sizetSize = wb.getOffsetForName(\"size_t_size\");\n+            intSize = wb.getOffsetForName(\"int_size\");\n+            cdsFileMapRegionSize  = wb.getOffsetForName(\"CDSFileMapRegion_size\");\n+            alignment = wb.metaspaceSharedRegionAlignment();\n+            \/\/ file_header_size is structure size, real size aligned with alignment\n+            \/\/ so must be calculated after alignment is available\n+            fileHeaderSize = (int)alignUpWithAlignment(wb.getOffsetForName(\"file_header_size\"));\n+        } catch (Exception e) {\n+            throw new RuntimeException(e.getMessage());\n+        }\n+\n@@ -84,10 +99,0 @@\n-\n-        spOffset = wb.getOffsetForName(\"FileMapHeader::_space[0]\") - offsetMagic;\n-        spUsedOffset = wb.getOffsetForName(\"CDSFileMapRegion::_used\") - spOffsetCrc;\n-        sizetSize = wb.getOffsetForName(\"size_t_size\");\n-        intSize = wb.getOffsetForName(\"int_size\");\n-        cdsFileMapRegionSize  = wb.getOffsetForName(\"CDSFileMapRegion_size\");\n-        alignment = wb.metaspaceSharedRegionAlignment();\n-        \/\/ file_header_size is structure size, real size aligned with alignment\n-        \/\/ so must be after alignment available\n-        fileHeaderSize = (int)alignUpWithAlignment(wb.getOffsetForName(\"file_header_size\"));\n@@ -282,0 +287,1 @@\n+            outputChannel.position(offset);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"}]}