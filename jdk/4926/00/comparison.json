{"files":[{"patch":"@@ -118,2 +118,15 @@\n-          error_msg = \"Method pattern uses '\/' together with '::'\";\n-          return false;\n+          \/\/ Check wether it's a hidden class method.\n+          \/\/ According to ClassFileParser::mangle_hidden_class_name, the pattern of\n+          \/\/ hidden class name in the VM should be: _class_name, \"+\", and &ik\n+          \/\/ But \"+\" will be replaced with \"\/\" when it is printed by PrintCompilation.\n+          \/\/ So if \"\/\" is followed with a digit or \"*\", it may be a hidden class method.\n+          \/\/ There may be false positive cases, but all of them are harmless and won't make anything worse.\n+          char next = *(lp + 1);\n+          if (('0' <= next && next <= '9') || next == '*') {\n+            \/\/ May be a hidden class method, so replace '\/' with '+'\n+            *lp = '+';\n+          } else {\n+            \/\/ Not a hidden class method\n+            error_msg = \"Method pattern uses '\/' together with '::'\";\n+            return false;\n+          }\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8271461\n+ * @summary the CompileCommand support for hidden class methods\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.compiler1.enabled | vm.compiler2.enabled\n+ *\n+ * @run driver compiler.compilercontrol.TestHiddenClassMethod\n+ *\/\n+\n+package compiler.compilercontrol;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestHiddenClassMethod {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x00000008010413c8::run\",\n+                \"-version\");\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldNotContain(\"Error: Method pattern uses '\/' together with '::'\");\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldNotContain(\"Error: Method pattern uses '\/' together with '::'\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestHiddenClassMethod.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}