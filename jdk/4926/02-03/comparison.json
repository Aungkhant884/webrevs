{"files":[{"patch":"@@ -98,0 +98,43 @@\n+static bool is_hidden_calss_pattern(const char * start) {\n+  int index = 0;\n+  char c = *start;\n+  while (c != '\\0' && c != '*' && c != ':') {\n+    if (index == 0) {\n+      \/\/ The first non-'*' char after '\/' should be '0'\n+      if (c != '0') {\n+        return false;\n+      }\n+    } else if (index == 1) {\n+      \/\/ The second non-'*' char after '\/' should be 'x'\n+      if (c != 'x') {\n+        return false;\n+      }\n+    } else {\n+      \/\/ The remaining non-'*' chars should be xdigits\n+      if (!isxdigit(c)) {\n+        return false;\n+      }\n+    }\n+    index++;\n+    c = *(++start);\n+  }\n+\n+  if (c == '*' || c == ':') {\n+    char next = *(++start);\n+    if (next == ':') {\n+      if (c == ':') {\n+        \/\/ full hidden class name without '*'\n+        return true;\n+      } else {\n+        char next_next = *(++start);\n+        if (next_next == ':') {\n+          \/\/ partial hidden class name with suffix '*'\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+\n+  return false;\n+}\n+\n@@ -119,8 +162,5 @@\n-          \/\/ According to ClassFileParser::mangle_hidden_class_name, the pattern of\n-          \/\/ hidden class name in the VM should be: _class_name, \"+\", and &ik\n-          \/\/ But \"+\" will be replaced with \"\/\" when it is printed by PrintCompilation.\n-          \/\/ So if \"\/\" is followed with a digit or \"*\", it may be a hidden class method.\n-          \/\/ There may be false positive cases, but all of them are harmless and won't make anything worse.\n-          char next = *(lp + 1);\n-          if (isdigit(next) || next == '*') {\n-            \/\/ May be a hidden class method, so replace '\/' with '+'\n+          if (is_hidden_calss_pattern(lp + 1)) {\n+            \/\/ According to ClassFileParser::mangle_hidden_class_name, the pattern of\n+            \/\/ hidden class name in the VM should be: _class_name, \"+\", and &ik\n+            \/\/ But \"+\" will be replaced with \"\/\" when it is printed by PrintCompilation.\n+            \/\/ So replace '\/' with '+'\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":48,"deletions":8,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -55,0 +55,14 @@\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/01234::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Error: Method pattern uses '\/' together with '::'\");\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x23u*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Error: Method pattern uses '\/' together with '::'\");\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestHiddenClassMethod.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}