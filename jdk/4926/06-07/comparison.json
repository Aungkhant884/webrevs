{"files":[{"patch":"@@ -98,1 +98,1 @@\n-static bool is_hidden_class_pattern(const char * start) {\n+static bool is_hidden_class_pattern(const char * current, const char* start) {\n@@ -100,1 +100,1 @@\n-  char c = *start;\n+  char c = *(++current);\n@@ -120,1 +120,1 @@\n-    c = *(++start);\n+    c = *(++current);\n@@ -124,1 +124,1 @@\n-    char next = *(++start);\n+    char next = *(++current);\n@@ -127,1 +127,1 @@\n-        \/\/ full hidden class name without '*'\n+        \/\/ Full hidden class name without '*'\n@@ -130,1 +130,1 @@\n-        char next_next = *(++start);\n+        char next_next = *(++current);\n@@ -132,2 +132,11 @@\n-          \/\/ partial hidden class name with suffix '*'\n-          return true;\n+          \/\/ May be partial hidden class name with suffix '*'\n+          if (index == 0) {\n+            \/\/ To be conservative for \"\/*::\" pattern\n+            \/\/ Check if '$' exists to avoid cases like \"java.util\/*::method\"\n+            const char* pos = strchr(start, '$');\n+            if (pos != NULL && pos < current) {\n+              return true;\n+            }\n+          } else {\n+            return true;\n+          }\n@@ -163,1 +172,1 @@\n-          if (is_hidden_class_pattern(lp + 1)) {\n+          if (is_hidden_class_pattern(lp, line)) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+        testCases.add(toString, \"java.util\/*::run\", PARSING_FAILURE);\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/MethodMatcherTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}