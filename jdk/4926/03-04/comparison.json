{"files":[{"patch":"@@ -98,1 +98,1 @@\n-static bool is_hidden_calss_pattern(const char * start) {\n+static bool is_hidden_class_pattern(const char * start) {\n@@ -101,0 +101,6 @@\n+\n+  if (c == '*') {\n+    \/\/ Return false for '\/*' pattern to avoid applying to package names\n+    return false;\n+  }\n+\n@@ -162,1 +168,1 @@\n-          if (is_hidden_calss_pattern(lp + 1)) {\n+          if (is_hidden_class_pattern(lp + 1)) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/*::run\",\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x*::run\",\n@@ -69,0 +69,7 @@\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java\/*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Error: Method pattern uses '\/' together with '::'\");\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestHiddenClassMethod.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}