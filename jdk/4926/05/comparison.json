{"files":[{"patch":"@@ -98,0 +98,49 @@\n+static bool is_hidden_class_pattern(const char * start) {\n+  int index = 0;\n+  char c = *start;\n+\n+  if (c == '*') {\n+    \/\/ Return false for '\/*' pattern to avoid applying to package names\n+    return false;\n+  }\n+\n+  while (c != '\\0' && c != '*' && c != ':') {\n+    if (index == 0) {\n+      \/\/ The first non-'*' char after '\/' should be '0'\n+      if (c != '0') {\n+        return false;\n+      }\n+    } else if (index == 1) {\n+      \/\/ The second non-'*' char after '\/' should be 'x'\n+      if (c != 'x') {\n+        return false;\n+      }\n+    } else {\n+      \/\/ The remaining non-'*' chars should be xdigits\n+      if (!isxdigit(c)) {\n+        return false;\n+      }\n+    }\n+    index++;\n+    c = *(++start);\n+  }\n+\n+  if (c == '*' || c == ':') {\n+    char next = *(++start);\n+    if (next == ':') {\n+      if (c == ':') {\n+        \/\/ full hidden class name without '*'\n+        return true;\n+      } else {\n+        char next_next = *(++start);\n+        if (next_next == ':') {\n+          \/\/ partial hidden class name with suffix '*'\n+          return true;\n+        }\n+      }\n+    }\n+  }\n+\n+  return false;\n+}\n+\n@@ -118,2 +167,12 @@\n-          error_msg = \"Method pattern uses '\/' together with '::'\";\n-          return false;\n+          \/\/ Check whether it's a hidden class method.\n+          if (is_hidden_class_pattern(lp + 1)) {\n+            \/\/ According to ClassFileParser::mangle_hidden_class_name, the pattern of\n+            \/\/ hidden class name in the VM should be: _class_name, \"+\", and &ik\n+            \/\/ But \"+\" will be replaced with \"\/\" when it is printed by PrintCompilation.\n+            \/\/ So replace '\/' with '+'\n+            *lp = '+';\n+          } else {\n+            \/\/ Not a hidden class method\n+            error_msg = \"Method pattern uses '\/' together with '::'\";\n+            return false;\n+          }\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8271461\n+ * @summary the CompileCommand support for hidden class methods\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.compiler1.enabled | vm.compiler2.enabled\n+ *\n+ * @run driver compiler.compilercontrol.TestHiddenClassMethod\n+ *\/\n+\n+package compiler.compilercontrol;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestHiddenClassMethod {\n+    public static void main(String[] args) throws Exception {\n+        String err_msg = \"Error: Method pattern uses '\/' together with '::'\";\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x00000008010413c8::run\",\n+                \"-version\");\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldNotContain(err_msg);\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldNotContain(err_msg);\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/01234::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(err_msg);\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java.util.ResourceBundle$$Lambda$1\/0x23u*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(err_msg);\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=exclude,java\/*::run\",\n+                \"-version\");\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(err_msg);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestHiddenClassMethod.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}