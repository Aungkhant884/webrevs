{"files":[{"patch":"@@ -82,1 +82,4 @@\n-             \"Use CPU_ALLOC code path in os::active_processor_count \")\n+             \"Use CPU_ALLOC code path in os::active_processor_count \")  \\\n+                                                                        \\\n+  product(bool, DumpPerfMapAtExit, false,                               \\\n+          \"Write map file for Linux perf tool at exit\")\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4628,0 +4628,6 @@\n+  if (DumpPerfMapAtExit && FLAG_IS_DEFAULT(UseCodeCacheFlushing)) {\n+    \/\/ Disable code cache flushing to ensure the map file written at\n+    \/\/ exit contains all nmethods generated during execution.\n+    FLAG_SET_DEFAULT(UseCodeCacheFlushing, false);\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1562,1 +1562,2 @@\n-void CodeCache::write_perf_map(outputStream* st) {\n+#ifdef LINUX\n+void CodeCache::write_perf_map() {\n@@ -1565,0 +1566,1 @@\n+  \/\/ Perf expects to find the map file at \/tmp\/perf-<pid>.map.\n@@ -1571,1 +1573,0 @@\n-    st->print_cr(\"Failed to create %s\", fname);\n@@ -1586,2 +1587,0 @@\n-\n-  st->print_cr(\"Written to %s\", fname);\n@@ -1589,0 +1588,1 @@\n+#endif \/\/ LINUX\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-  static void write_perf_map(outputStream* st);\n+  LINUX_ONLY(static void write_perf_map();)\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,0 +481,6 @@\n+#ifdef LINUX\n+  if (DumpPerfMapAtExit) {\n+    CodeCache::write_perf_map();\n+  }\n+#endif\n+\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -899,0 +899,1 @@\n+#ifdef LINUX\n@@ -900,1 +901,1 @@\n-  CodeCache::write_perf_map(output());\n+  CodeCache::write_perf_map();\n@@ -902,0 +903,1 @@\n+#endif \/\/ LINUX\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -580,0 +580,1 @@\n+#ifdef LINUX\n@@ -600,0 +601,1 @@\n+#endif \/\/ LINUX\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.nio.file.Path;\n@@ -57,2 +58,0 @@\n-    static final Pattern OUTPUT_PATTERN =\n-        Pattern.compile(\"Written to (\/tmp\/perf-\\\\p{Digit}*\\\\.map)\");\n@@ -64,2 +63,0 @@\n-        String line = output.asLines().iterator().next();\n-        Matcher m = OUTPUT_PATTERN.matcher(line);\n@@ -67,1 +64,7 @@\n-        Assert.assertTrue(m.matches(), \"Did not print map file name, line = \" + line);\n+        output.stderrShouldBeEmpty();\n+        output.stdoutShouldBeEmpty();\n+\n+        final long pid = ProcessHandle.current().pid();\n+        final Path path = Paths.get(String.format(\"\/tmp\/perf-%d.map\", pid));\n+\n+        Assert.assertTrue(Files.exists(path));\n@@ -71,2 +74,2 @@\n-            for (String entry : Files.readAllLines(Paths.get(m.group(1)))) {\n-                m = LINE_PATTERN.matcher(entry);\n+            for (String entry : Files.readAllLines(path)) {\n+                Matcher m = LINE_PATTERN.matcher(entry);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}