{"files":[{"patch":"@@ -1562,0 +1562,27 @@\n+void CodeCache::write_perf_map(outputStream* st) {\n+  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n+\n+  char fname[32];\n+  jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n+\n+  fileStream fs(fname, \"w\");\n+  if (!fs.is_open()) {\n+    st->print_cr(\"Failed to create %s\", fname);\n+    return;\n+  }\n+\n+  AllCodeBlobsIterator iter(AllCodeBlobsIterator::only_alive_and_not_unloading);\n+  while (iter.next()) {\n+    CodeBlob *cb = iter.method();\n+    ResourceMark rm;\n+    const char* method_name =\n+      cb->is_compiled() ? cb->as_compiled_method()->method()->external_name()\n+                        : cb->name();\n+    fs.print_cr(INTPTR_FORMAT \" \" INTPTR_FORMAT \" %s\",\n+                (intptr_t)cb->code_begin(), (intptr_t)cb->code_size(),\n+                method_name);\n+  }\n+\n+  st->print_cr(\"Written to %s\", fname);\n+}\n+\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -194,0 +194,1 @@\n+  static void write_perf_map(outputStream* st);\n@@ -412,0 +413,5 @@\n+struct AllCodeBlobsFilter {\n+  static bool apply(CodeBlob* cb) { return true; }\n+  static const GrowableArray<CodeHeap*>* heaps() { return CodeCache::heaps(); }\n+};\n+\n@@ -414,0 +420,1 @@\n+typedef CodeBlobIterator<CodeBlob, AllCodeBlobsFilter> AllCodeBlobsIterator;\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -113,0 +113,3 @@\n+#ifdef LINUX\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<PerfMapDCmd>(full_export, true, false));\n+#endif \/\/ LINUX\n@@ -896,0 +899,4 @@\n+void PerfMapDCmd::execute(DCmdSource source, TRAPS) {\n+  CodeCache::write_perf_map(output());\n+}\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -580,0 +580,21 @@\n+class PerfMapDCmd : public DCmd {\n+public:\n+  PerfMapDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n+  static const char* name() {\n+    return \"Compiler.perfmap\";\n+  }\n+  static const char* description() {\n+    return \"Write map file for Linux perf tool.\";\n+  }\n+  static const char* impact() {\n+    return \"Medium\";\n+  }\n+  static const JavaPermission permission() {\n+    JavaPermission p = {\"java.lang.management.ManagementPermission\",\n+                        \"monitor\", NULL};\n+    return p;\n+  }\n+  static int num_arguments() { return 0; }\n+  virtual void execute(DCmdSource source, TRAPS);\n+};\n+\n@@ -601,1 +622,0 @@\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test PerfMapTest\n+ * @bug 8254723\n+ * @requires os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.compiler\n+ *          java.management\n+ *          jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @run testng\/othervm PerfMapTest\n+ * @summary Test of diagnostic command Compiler.perfmap\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import org.testng.Assert;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.util.Iterator;\n+import java.util.Scanner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Call jcmd Compiler.perfmap and check the output file has the expected\n+ * format.\n+ *\/\n+public class PerfMapTest {\n+\n+    static Pattern outputPattern =\n+        Pattern.compile(\"Written to (\/tmp\/perf-\\\\p{Digit}*\\\\.map)\");\n+    static Pattern linePattern =\n+        Pattern.compile(\"^((?:0x)?\\\\p{XDigit}+)\\\\s+((?:0x)?\\\\p{XDigit}+)\\\\s+(.*)$\");\n+\n+    public void run(CommandExecutor executor) {\n+        OutputAnalyzer output = executor.execute(\"Compiler.perfmap\");\n+        String line = output.asLines().iterator().next();\n+        Matcher m = outputPattern.matcher(line);\n+\n+        Assert.assertTrue(m.matches(), \"Did not print map file name\");\n+\n+        \/\/ Sanity check the file contents\n+        try (Scanner in = new Scanner(new FileInputStream(m.group(1)))) {\n+            while (in.hasNextLine()) {\n+                line = in.nextLine();\n+                m = linePattern.matcher(line);\n+                Assert.assertTrue(m.matches(), \"Invalid file format: \" + line);\n+            }\n+        } catch (FileNotFoundException e) {\n+            Assert.fail(e.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void jmx() {\n+        run(new JMXExecutor());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}