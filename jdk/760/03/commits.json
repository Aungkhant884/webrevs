[{"commit":{"message":"Merge master"},"files":[{"filename":"src\/hotspot\/os\/linux\/globals_linux.hpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"}],"sha":"959adca5e64ea37e293e58b0576952dfee96a4d7"},{"commit":{"message":"Add -XX:+DumpPerfMapAtExit option"},"files":[{"filename":"src\/hotspot\/os\/linux\/globals_linux.hpp"},{"filename":"src\/hotspot\/os\/linux\/os_linux.cpp"},{"filename":"src\/hotspot\/share\/code\/codeCache.cpp"},{"filename":"src\/hotspot\/share\/code\/codeCache.hpp"},{"filename":"src\/hotspot\/share\/runtime\/java.cpp"},{"filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp"},{"filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp"},{"filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java"}],"sha":"bd35433eaa48539d671b139626b66b96bd67ca20"},{"commit":{"message":"Update for review comments"},"files":[{"filename":"src\/hotspot\/share\/code\/codeCache.cpp"},{"filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp"},{"filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java"}],"sha":"a3cb0ed4367a040f5d2f78165ccc872151e0ccaa"},{"commit":{"message":"8254723: add diagnostic command to write Linux perf map file\n\nWhen using the Linux \"perf\" tool to do system profiling, symbol names of\nrunning Java methods cannot be decoded, resulting in unhelpful output\nsuch as:\n\n  10.52% [JIT] tid 236748 [.] 0x00007f6fdb75d223\n\nPerf can read a simple text file format describing the mapping between\naddress ranges and symbol names for a particular process [1].\n\nIt's possible to generate this already for Java processes using a JVMTI\nplugin such as perf-map-agent [2]. However this requires compiling\nthird-party code and then loading the agent into your Java process. It\nwould be more convenient if Hotspot could write this file directly using\na diagnostic command. The information required is almost identical to\nthat of the existing Compiler.codelist command.\n\nThis patch adds a Compiler.perfmap diagnostic command on Linux only. To\nuse, first run \"jcmd <pid> Compiler.perfmap\" and then \"perf top\" or\n\"perf record\" and the report should show decoded Java symbol names for\nthat process.\n\nAs this just writes a snapshot of the code cache when the command is\nrun, it will become stale if methods are compiled later or unloaded.\nHowever this shouldn't be a big problem in practice if the map file is\ngenerated after the application has warmed up.\n\n[1] https:\/\/github.com\/torvalds\/linux\/blob\/master\/tools\/perf\/Documentation\/jit-interface.txt\n[2] https:\/\/github.com\/jvm-profiling-tools\/perf-map-agent"},"files":[{"filename":"src\/hotspot\/share\/code\/codeCache.cpp"},{"filename":"src\/hotspot\/share\/code\/codeCache.hpp"},{"filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp"},{"filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp"},{"filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java"}],"sha":"5b0c269519ec88dc0bd765acafd5cc1475e9819f"}]