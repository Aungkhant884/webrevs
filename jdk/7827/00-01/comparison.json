{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,2 @@\n-import java.security.AccessControlException;\n-import java.security.Permission;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n@@ -30,0 +28,5 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import static jdk.test.lib.Asserts.*;\n+\n@@ -32,2 +35,4 @@\n- * @bug     8042901\n- * @summary Check permission for PlatformMBeanProvider Constructor\n+ * @library \/test\/lib\n+ * @build  jdk.test.lib.Asserts\n+ * @bug     8042901 8283092\n+ * @summary Check encapsulation of PlatformMBeanProvider Constructor\n@@ -35,2 +40,1 @@\n- * @author  Shanliang Jiang\n- * @run main\/othervm -Djava.security.manager=allow PlatformMBeanProviderConstructorCheck\n+ * @run main PlatformMBeanProviderConstructorCheck\n@@ -39,5 +43,0 @@\n-    public static void main(String[] args) throws Exception {\n-        Policy origPolicy = Policy.getPolicy();\n-        SecurityManager origSM = System.getSecurityManager();\n-        try {\n-            System.out.println(\"---PlatformMBeanProviderConstructorCheck starting...\");\n@@ -45,2 +44,9 @@\n-            Policy.setPolicy(new MyPolicy());\n-            System.setSecurityManager(new SecurityManager());\n+    \/**\n+     * jtreg invokes this test with module arguments that permit compilation\n+     * of the MyProvider class, which extends PlatformMBeanProvider.\n+     * First check we can invoke that class, then re-invoke ourself without\n+     * those module arguments, and expect a failure calling MyProvider.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"---PlatformMBeanProviderConstructorCheck:\");\n+        boolean expectedFail = false;\n@@ -48,7 +54,7 @@\n-            System.out.println(\"---PlatformMBeanProviderConstructorCheck Testing without permission...\");\n-            try {\n-                new MyProvider();\n-                throw new RuntimeException(\"Does not get expected AccessControlException!\");\n-            } catch (AccessControlException ace) {\n-                System.out.println(\"---PlatformMBeanProviderConstructorCheck got the expected exception: \"\n-                        + ace);\n+        \/\/ Recognise argument to signify we were re-invoked, and MyProvider should fail:\n+        if (args.length == 1) {\n+            if (args[0].equals(\"--nomoduleargs\")) {\n+                expectedFail = true;\n+                verifyNoModuleArguments();\n+            } else {\n+                throw new RuntimeException(\"unknown argument: '\" + args[0] + \"'\");\n@@ -56,3 +62,4 @@\n-\n-            System.out.println(\"---PlatformMBeanProviderConstructorCheck Testing with permission...\");\n-            MyPolicy.allowed = true;\n+        }\n+        System.out.println(\"---PlatformMBeanProviderConstructorCheck: invoke MyProvider with expectedFail = \" + expectedFail);\n+        Throwable e = null;\n+        try {\n@@ -60,5 +67,3 @@\n-\n-            System.out.println(\"---PlatformMBeanProviderConstructorCheck PASSED!\");\n-        } finally {\n-            System.setSecurityManager(origSM);\n-            Policy.setPolicy(origPolicy);\n+        } catch (IllegalAccessError iae) {\n+            System.out.println(\"---PlatformMBeanProviderConstructorCheck got exception: \" + iae);\n+            e = iae;\n@@ -66,1 +71,0 @@\n-    }\n@@ -68,3 +72,4 @@\n-    private static class MyPolicy extends Policy {\n-        private static String permName = \"sun.management.spi.PlatformMBeanProvider.subclass\";\n-        private static boolean allowed = false;\n+        if (!expectedFail) {\n+            \/\/ This was the first invocation, should have worked OK:\n+            assertNull(e);\n+            System.out.println(\"---PlatformMBeanProviderConstructorCheck PASSED (1) (expectedFail = \" + expectedFail + \")\");\n@@ -72,5 +77,13 @@\n-        @Override\n-        public boolean implies(ProtectionDomain domain, Permission permission) {\n-            if (permName.equals(permission.getName())) {\n-                System.out.println(\"---MyPolicy-implies checks permission for \"\n-                        +permName+\" and returns \"+allowed);\n+            \/\/ Re-invoke this test to check failure:\n+            System.out.println(\"---PlatformMBeanProviderConstructorCheck: re-invoke without --add-modules or --add-exports\");\n+            OutputAnalyzer output =  ProcessTools.executeTestJava(\"PlatformMBeanProviderConstructorCheck\", \"--nomoduleargs\");\n+            output.reportDiagnosticSummary();\n+            output.shouldContain(\"java.lang.IllegalAccessError: superclass access check failed:\");\n+            output.shouldContain(\" module java.management does not export sun.management.spi to \");\n+            output.shouldNotContain(\"MyProvider constructor.\");\n+        } else {\n+            \/\/ This was the re-invocation without module access, should fail:\n+            assertNotNull(e);\n+            System.out.println(\"---PlatformMBeanProviderConstructorCheck PASSED (2) (expectedFail = \" + expectedFail + \")\");\n+        }\n+    }\n@@ -78,3 +91,6 @@\n-                return allowed;\n-            } else {\n-                return true;\n+    private static void verifyNoModuleArguments() {\n+        RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();\n+        for (String s : mxbean.getInputArguments()) {\n+            if (s.startsWith(\"--add-modules\") || s.startsWith(\"--add-exports\")) {\n+                System.out.println(\"arg: \" + s);\n+                throw new RuntimeException(\"argument list contains: \" + s);\n@@ -88,0 +104,1 @@\n+            System.out.println(\"MyProvider constructor.\");\n","filename":"test\/jdk\/sun\/management\/PlatformMBeanProviderConstructorCheck.java","additions":60,"deletions":43,"binary":false,"changes":103,"status":"modified"}]}