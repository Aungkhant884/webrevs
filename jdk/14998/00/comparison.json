{"files":[{"patch":"@@ -60,1 +60,1 @@\n-    public QueryRecording(Configuration configuration, ArgumentParser parser) throws IOException, DCmdException {\n+    public QueryRecording(Configuration configuration, ArgumentParser parser) throws IOException, DCmdException, UserDataException {\n@@ -62,1 +62,1 @@\n-            throw new DCmdException(\"No recording data available. Start a recording with JFR.start\");\n+            throw new DCmdException(\"No recording data available. Start a recording with JFR.start.\");\n@@ -95,0 +95,3 @@\n+        if (chunks.isEmpty()) {\n+            throw new UserDataException(\"No recording data found on disk.\");\n+        }\n@@ -103,1 +106,4 @@\n-            list.add(currentChunk());\n+            RepositoryChunk current = currentChunk();\n+            if (current != null) {\n+                list.add(current);\n+            }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/QueryRecording.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.jcmd;\n+\n+import jdk.jfr.Configuration;\n+import jdk.jfr.Recording;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary The test verifies JFR.view command\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jcmd.TestJcmdViewMissingData\n+ *\/\n+public class TestJcmdViewMissingData {\n+\n+    public static void main(String... args) throws Exception {\n+        testNotInitialized();\n+        testInMemory();\n+        testClosed();\n+    }\n+\n+    private static void testNotInitialized() {\n+        OutputAnalyzer output = JcmdHelper.jcmd(\"JFR.view\", \"jvm-information\");\n+        output.shouldContain(\"No recording data available. Start a recording with JFR.start.\");\n+    }\n+\n+    private static void testInMemory() throws Exception {\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        try (Recording r = new Recording(c)) {\n+            r.setToDisk(false);\n+            r.start();\n+            OutputAnalyzer output = JcmdHelper.jcmd(\"JFR.view\", \"hot-methods\");\n+            output.shouldContain(\"No recording data found on disk.\");\n+            r.stop();\n+        }\n+    }\n+\n+    private static void testClosed() throws Exception {\n+        Configuration c = Configuration.getConfiguration(\"default\");\n+        try (Recording r = new Recording(c)) {\n+            r.start();\n+            r.stop();\n+        }\n+        OutputAnalyzer output = JcmdHelper.jcmd(\"JFR.view\", \"hot-methods\");\n+        output.shouldContain(\"No recording data found on disk.\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdViewMissingData.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}