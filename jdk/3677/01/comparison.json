{"files":[{"patch":"@@ -2541,0 +2541,1 @@\n+  Label L_NOT_DOUBLE2;\n@@ -2545,0 +2546,1 @@\n+  static double DOUBLE2 = 2.0;\n@@ -2552,0 +2554,9 @@\n+\n+  \/\/ Special case: pow(x, 2.0) => x * x\n+  ucomisd(xmm1, ExternalAddress((address) &DOUBLE2));\n+  jccb(Assembler::notEqual, L_NOT_DOUBLE2);\n+  jccb(Assembler::parity, L_NOT_DOUBLE2);\n+  mulsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_NOT_DOUBLE2);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_pow.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265917\n+ * @summary test the optimization of pow(x, 2.0)\n+ * @run main\/othervm TestPow2Opt\n+ * @run main\/othervm -Xint TestPow2Opt\n+ * @run main\/othervm -Xbatch -XX:TieredStopAtLevel=1 TestPow2Opt\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation  TestPow2Opt\n+ *\/\n+\n+public class TestPow2Opt {\n+\n+  static void test(double a) {\n+    double r1 = a * a;\n+    double r2 = Math.pow(a, 2.0);\n+    if (r1 != r2) {\n+      throw new RuntimeException(\"pow(\" + a + \", 2.0), expected: \" + r1 + \", actual: \" + r2);\n+    }\n+  }\n+\n+  public static void main(String[] args) throws Exception {\n+    for (int i = 0; i < 10; i++) {\n+      for (int j = 1; j < 100000; j++) {\n+        test(j * 1.0);\n+        test(1.0 \/ j);\n+      }\n+    }\n+  }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/math\/TestPow2Opt.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}