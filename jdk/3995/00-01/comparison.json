{"files":[{"patch":"@@ -334,20 +334,4 @@\n-  Stack<const Klass*, mtTracing> mark_stack;\n-  mark_stack.push(vmClasses::ClassLoader_klass()->subklass());\n-\n-  while (!mark_stack.is_empty()) {\n-    const Klass* const current = mark_stack.pop();\n-    assert(current != NULL, \"null element in stack!\");\n-    if (is_classloader_klass_allowed(current)) {\n-      do_loader_klass(current);\n-    }\n-\n-    \/\/ subclass (depth)\n-    const Klass* next_klass = current->subklass();\n-    if (next_klass != NULL) {\n-      mark_stack.push(next_klass);\n-    }\n-\n-    \/\/ siblings (breadth)\n-    next_klass = current->next_sibling();\n-    if (next_klass != NULL) {\n-      mark_stack.push(next_klass);\n+  for (ClassHierarchyIterator iter(vmClasses::ClassLoader_klass()); !iter.done(); iter.next()) {\n+    Klass* subk = iter.klass();\n+    if (is_classloader_klass_allowed(subk)) {\n+      do_loader_klass(subk);\n@@ -356,1 +340,0 @@\n-  assert(mark_stack.is_empty(), \"invariant\");\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrTypeSet.cpp","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-static void fill_klasses(GrowableArray<const void*>& event_subklasses, const Klass* event_klass, Thread* thread) {\n+static void fill_klasses(GrowableArray<const void*>& event_subklasses, const InstanceKlass* event_klass, Thread* thread) {\n@@ -84,21 +84,4 @@\n-  Stack<const Klass*, mtTracing> mark_stack;\n-  mark_stack.push(event_klass->subklass());\n-\n-  while (!mark_stack.is_empty()) {\n-    const Klass* const current = mark_stack.pop();\n-    assert(current != NULL, \"null element in stack!\");\n-\n-    if (is_allowed(current)) {\n-      event_subklasses.append(current);\n-    }\n-\n-    \/\/ subclass (depth)\n-    const Klass* next_klass = current->subklass();\n-    if (next_klass != NULL) {\n-      mark_stack.push(next_klass);\n-    }\n-\n-    \/\/ siblings (breadth)\n-    next_klass = current->next_sibling();\n-    if (next_klass != NULL) {\n-      mark_stack.push(next_klass);\n+  for (ClassHierarchyIterator iter(const_cast<InstanceKlass*>(event_klass)); !iter.done(); iter.next()) {\n+    Klass* subk = iter.klass();\n+    if (is_allowed(subk)) {\n+      event_subklasses.append(subk);\n@@ -107,1 +90,0 @@\n-  assert(mark_stack.is_empty(), \"invariant\");\n@@ -135,0 +117,1 @@\n+  assert(klass->is_instance_klass(), \"invariant\");\n@@ -143,1 +126,1 @@\n-  fill_klasses(event_subklasses, klass, THREAD);\n+  fill_klasses(event_subklasses, InstanceKlass::cast(klass), THREAD);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":7,"deletions":24,"binary":false,"changes":31,"status":"modified"}]}