{"files":[{"patch":"@@ -190,1 +190,7 @@\n-                    handleReset(rf, subscriber);\n+                    if (endStreamReceived()) {\n+                        \/\/ If END_STREAM is already received, we should not receive any new RST_STREAM frames and\n+                        \/\/ close the connection gracefully by processing all remaining frames in the inputQ.\n+                        requestBodyCF.complete(null);\n+                    } else {\n+                        handleReset(rf, subscriber);\n+                    }\n@@ -204,1 +210,1 @@\n-                    sched.stop();\n+                    if (inputQ.isEmpty()) sched.stop();\n@@ -223,1 +229,1 @@\n-                        sched.stop();\n+                        if (inputQ.isEmpty()) sched.stop();\n@@ -570,1 +576,1 @@\n-        if (endStreamReceived()) {\n+        if (endStreamReceived() && requestBodyCF.isDone()) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n- * @summary Tests that when the httpclient sends a 100 Expect Continue header and receives\n- *          a response code of 417 Expectation Failed, that the client does not hang\n- *          indefinitely and closes the connection.\n+ * @summary Tests basic handling of Partial Responses by the HttpClient\n@@ -34,1 +32,1 @@\n- * @run testng\/othervm -Djdk.internal.httpclient.debug=err ExpectContinueTest\n+ * @run testng\/othervm -Djdk.internal.httpclient.debug=true -Djdk.httpclient.HttpClient.log=errors ExpectContinueTest\n@@ -38,0 +36,9 @@\n+import jdk.httpclient.test.lib.http2.BodyOutputStream;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+import jdk.internal.net.http.common.HttpHeadersBuilder;\n+import jdk.internal.net.http.frame.HeaderFrame;\n+import org.testng.TestException;\n@@ -44,0 +51,1 @@\n+import javax.net.ssl.SSLSession;\n@@ -51,0 +59,1 @@\n+import java.io.PrintStream;\n@@ -60,0 +69,1 @@\n+import java.net.http.HttpHeaders;\n@@ -63,0 +73,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -64,0 +75,2 @@\n+import java.util.concurrent.ExecutionException;\n+\n@@ -69,1 +82,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.*;\n@@ -75,1 +88,1 @@\n-    HttpTestServer http2TestServer; \/\/ HTTP\/2\n+    Http2TestServer http2TestServer; \/\/ HTTP\/2\n@@ -77,6 +90,2 @@\n-    URI getUri;\n-    URI postUri;\n-    URI hangUri;\n-    URI h2getUri;\n-    URI h2postUri;\n-    URI h2hangUri;\n+    URI getUri, postUri, hangUri;\n+    URI h2postUri, h2hangUri, h2endStreamUri, h2warmupURI;\n@@ -84,0 +93,2 @@\n+    static PrintStream err = new PrintStream(System.err);\n+    static PrintStream out = new PrintStream(System.out);\n@@ -86,0 +97,39 @@\n+    @DataProvider(name = \"uris\")\n+    public Object[][] urisData() {\n+        return new Object[][]{\n+                \/\/ URI, Expected Status Code, Will finish with Exception, Protocol Version\n+                { postUri, 200, false, HTTP_1_1 },\n+                { hangUri, 417, false, HTTP_1_1},\n+                { h2postUri, 200, false, HTTP_2 },\n+                { h2hangUri, 417, false, HTTP_2 },\n+                { h2endStreamUri, 200, true, HTTP_2 }, \/\/ Error\n+        };\n+    }\n+    @Test(dataProvider = \"uris\")\n+    public void test(URI uri, int expectedStatusCode, boolean exceptionally, HttpClient.Version version)\n+            throws CancellationException, InterruptedException, ExecutionException, IOException {\n+\n+        err.printf(\"\\nTesting with Version: %s, URI: %s, exceptionally: %b\\n\", version, uri, exceptionally);\n+        try (HttpClient client = HttpClient.newBuilder().proxy(Builder.NO_PROXY).version(version).build()) {\n+            HttpResponse<String> resp = null;\n+            Throwable testThrowable = null;\n+            if (!version.equals(HTTP_1_1)) {\n+                err.printf(\"Performing warmup request to %s\", h2warmupURI);\n+                client.send(HttpRequest.newBuilder(h2warmupURI).GET().version(version).build(), HttpResponse.BodyHandlers.discarding());\n+            }\n+            HttpRequest postRequest = HttpRequest.newBuilder(uri)\n+                    .version(version)\n+                    .POST(HttpRequest.BodyPublishers.ofString(\"Sample Post\"))\n+                    .expectContinue(true)\n+                    .build();\n+            err.printf(\"Sending request (%s): %s%n\", version, postRequest);\n+            CompletableFuture<HttpResponse<String>> cf = client.sendAsync(postRequest, HttpResponse.BodyHandlers.ofString());\n+            try {\n+                resp = cf.get();\n+            } catch (Exception e) {\n+                testThrowable = e.getCause();\n+            }\n+            verifyRequest(expectedStatusCode, resp, exceptionally, testThrowable);\n+        }\n+    }\n+\n@@ -89,1 +139,0 @@\n-\n@@ -96,1 +145,1 @@\n-        \/\/ Due to limitations of the above Http1 Server, a manual approach is taken to test the hanging with the\n+        \/\/ Due to limitations of the above Http1 Test Server, a manual approach is taken to test the hanging with the\n@@ -101,0 +150,6 @@\n+        http2TestServer = new Http2TestServer(false, 0);\n+        http2TestServer.setExchangeSupplier(ExpectContinueTestExchangeImpl::new);\n+        http2TestServer.addHandler(new GetHandler().toHttp2Handler(), \"\/http2\/warmup\");\n+        http2TestServer.addHandler(new PostHandler().toHttp2Handler(), \"\/http2\/post\");\n+        http2TestServer.addHandler(new PostHandlerCantContinue().toHttp2Handler(), \"\/http2\/hang\");\n+        http2TestServer.addHandler(new PostHandlerHttp2(), \"\/http2\/endStream\");\n@@ -102,5 +157,1 @@\n-        http2TestServer = HttpTestServer.create(HTTP_2);\n-        http2TestServer.addHandler(new GetHandler(), \"\/http2\/get\");\n-        http2TestServer.addHandler(new PostHandler(), \"\/http2\/post\");\n-        http2TestServer.addHandler(new PostHandlerCantContinue(), \"\/http2\/hang\");\n-        h2getUri = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/get\");\n+        h2warmupURI = new URI(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/warmup\");\n@@ -109,0 +160,1 @@\n+        h2endStreamUri = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/endStream\");\n@@ -110,3 +162,3 @@\n-        System.out.println(\"HTTP\/1.1 server listening at: \" + http1TestServer.serverAuthority());\n-        System.out.println(\"HTTP\/1.1 hang server listening at: \" + hangUri.getRawAuthority());\n-        System.out.println(\"HTTP\/2 clear server listening at: \" + http2TestServer.serverAuthority());\n+        out.printf(\"HTTP\/1.1 server listening at: %s\", http1TestServer.serverAuthority());\n+        out.printf(\"HTTP\/1.1 hang server listening at: %s\", hangUri.getRawAuthority());\n+        out.printf(\"HTTP\/2 clear server listening at: %s\", http2TestServer.serverAuthority());\n@@ -118,1 +170,0 @@\n-\n@@ -130,6 +181,3 @@\n-            try (InputStream is = exchange.getRequestBody();\n-                 OutputStream os = exchange.getResponseBody()) {\n-                System.err.println(\"Server reading body\");\n-                is.readAllBytes();\n-                byte[] bytes = \"RESPONSE_BODY\".getBytes(UTF_8);\n-                System.err.println(\"Server sending 200  (length=\"+bytes.length+\")\");\n+            try (OutputStream os = exchange.getResponseBody()) {\n+                byte[] bytes = \"Response Body\".getBytes(UTF_8);\n+                err.printf(\"Server sending 200  (length=%s)\", bytes.length);\n@@ -137,0 +185,1 @@\n+                err.println(\"Server sending Response Body\");\n@@ -149,1 +198,1 @@\n-                System.err.println(\"Server sending 100 (length = 0)\");\n+                err.println(\"Server sending 100 (length = 0)\");\n@@ -154,3 +203,2 @@\n-            try (InputStream is = exchange.getRequestBody();\n-                OutputStream os = exchange.getResponseBody()) {\n-                System.err.println(\"Server reading body\");\n+            try (InputStream is = exchange.getRequestBody()) {\n+                err.println(\"Server reading body\");\n@@ -158,1 +206,1 @@\n-                System.err.println(\"Server send 200 (length=0)\");\n+                err.println(\"Server send 200 (length=0)\");\n@@ -164,1 +212,1 @@\n-    static class PostHandlerCantContinue implements HttpTestHandler {\n+    static class PostHandlerHttp2 implements Http2Handler {\n@@ -166,0 +214,9 @@\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            if (exchange instanceof ExpectContinueTestExchangeImpl impl) {\n+                impl.sendEndStreamHeaders();\n+            }\n+        }\n+    }\n+\n+    static class PostHandlerCantContinue implements HttpTestHandler {\n@@ -169,2 +226,1 @@\n-            try (InputStream is = exchange.getRequestBody();\n-                 OutputStream os = exchange.getResponseBody()) {\n+            try (OutputStream os = exchange.getResponseBody()) {\n@@ -172,1 +228,1 @@\n-                System.err.println(\"Server send 417 (length=\"+bytes.length+\")\");\n+                err.println(\"Server send 417 (length=\"+bytes.length+\")\");\n@@ -174,0 +230,1 @@\n+                err.println(\"Server sending Response Body\");\n@@ -179,0 +236,19 @@\n+    static class ExpectContinueTestExchangeImpl extends Http2TestExchangeImpl {\n+\n+        public ExpectContinueTestExchangeImpl(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os, Http2TestServerConnection conn, boolean pushAllowed) {\n+            super(streamid, method, reqheaders, rspheadersBuilder, uri, is, sslSession, os, conn, pushAllowed);\n+        }\n+\n+        private void sendEndStreamHeaders() throws IOException {\n+            this.responseLength = 0;\n+            rspheadersBuilder.setHeader(\":status\", Integer.toString(100));\n+            HttpHeaders headers = rspheadersBuilder.build();\n+            Http2TestServerConnection.ResponseHeaders response\n+                    = new Http2TestServerConnection.ResponseHeaders(headers);\n+            response.streamid(streamid);\n+            response.setFlag(HeaderFrame.END_HEADERS);\n+            response.setFlag(HeaderFrame.END_STREAM);\n+            sendResponseHeaders(response);\n+        }\n+    }\n+\n@@ -227,1 +303,1 @@\n-                                        && version.equals(\"HTTP\/1.1\");\n+                            && version.equals(\"HTTP\/1.1\");\n@@ -266,53 +342,12 @@\n-    @DataProvider(name = \"uris\")\n-    public Object[][] urisData() {\n-        return new Object[][]{\n-                { getUri,   postUri, hangUri, HTTP_1_1 },\n-                { h2getUri,  h2postUri, h2hangUri, HTTP_2 }\n-        };\n-    }\n-\n-    @Test(dataProvider = \"uris\")\n-    public void test(URI getUri, URI postUri, URI hangUri, HttpClient.Version version) throws IOException, InterruptedException {\n-        System.out.println(\"Testing with version: \" + version);\n-        HttpClient client = HttpClient.newBuilder()\n-                .proxy(Builder.NO_PROXY)\n-                .version(version)\n-                .build();\n-\n-        HttpRequest getRequest = HttpRequest.newBuilder(getUri)\n-                .GET()\n-                .build();\n-\n-        HttpRequest postRequest = HttpRequest.newBuilder(postUri)\n-                .POST(HttpRequest.BodyPublishers.ofString(\"Sample Post\"))\n-                .expectContinue(true)\n-                .build();\n-\n-        HttpRequest hangRequest = HttpRequest.newBuilder(hangUri)\n-                .POST(HttpRequest.BodyPublishers.ofString(\"Sample Post\"))\n-                .expectContinue(true)\n-                .build();\n-\n-        System.out.printf(\"Sending request (%s): %s%n\", version, getRequest);\n-        System.err.println(\"Sending request: \" + getRequest);\n-        CompletableFuture<HttpResponse<String>> cf = client.sendAsync(getRequest, HttpResponse.BodyHandlers.ofString());\n-        HttpResponse<String> resp = cf.join();\n-        System.err.println(\"Response Headers: \" + resp.headers());\n-        System.err.println(\"Response Status Code: \" + resp.statusCode());\n-        assertEquals(resp.statusCode(), 200);\n-\n-        System.out.printf(\"Sending request (%s): %s%n\", version, postRequest);\n-        System.err.println(\"Sending request: \" + postRequest);\n-        cf = client.sendAsync(postRequest, HttpResponse.BodyHandlers.ofString());\n-        resp = cf.join();\n-        System.err.println(\"Response Headers: \" + resp.headers());\n-        System.err.println(\"Response Status Code: \" + resp.statusCode());\n-        assertEquals(resp.statusCode(), 200);\n-\n-        System.out.printf(\"Sending request (%s): %s%n\", version, hangRequest);\n-        System.err.println(\"Sending request: \" + hangRequest);\n-        cf = client.sendAsync(hangRequest, HttpResponse.BodyHandlers.ofString());\n-        resp = cf.join();\n-        System.err.println(\"Response Headers: \" + resp.headers());\n-        System.err.println(\"Response Status Code: \" + resp.statusCode());\n-        assertEquals(resp.statusCode(), 417);\n+    private void verifyRequest(int expectedStatusCode, HttpResponse<String> resp, boolean exceptionally, Throwable testThrowable) {\n+        if (exceptionally && testThrowable != null) {\n+            err.println(testThrowable);\n+            assertEquals(IOException.class, testThrowable.getClass());\n+        } else if (exceptionally) {\n+            throw new TestException(\"Expected case to finish with an IOException but testException is null\");\n+        } else if (resp != null) {\n+            assertEquals(resp.statusCode(), expectedStatusCode);\n+            err.println(\"Request completed successfully\");\n+            err.println(\"Response Headers: \" + resp.headers());\n+            err.println(\"Response Status Code: \" + resp.statusCode());\n+        }\n@@ -320,1 +355,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/ExpectContinueTest.java","additions":127,"deletions":93,"binary":false,"changes":220,"status":"modified"},{"patch":"@@ -0,0 +1,305 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifies that the client reacts correctly to receiving RST_STREAM at various stages of\n+ *          a Partial Response.\n+ * @bug 8309118\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ * @run testng\/othervm -Djdk.internal.httpclient.debug=true -Djdk.httpclient.HttpClient.log=errors,headers ExpectContinueResetTest\n+ *\/\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.http2.BodyOutputStream;\n+import jdk.httpclient.test.lib.http2.Http2Handler;\n+import jdk.httpclient.test.lib.http2.Http2TestExchange;\n+import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n+import jdk.httpclient.test.lib.http2.Http2TestServer;\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n+\n+import jdk.internal.net.http.common.HttpHeadersBuilder;\n+import jdk.internal.net.http.frame.HeaderFrame;\n+import jdk.internal.net.http.frame.ResetFrame;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.net.ssl.SSLSession;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.*;\n+\n+public class ExpectContinueResetTest {\n+\n+    Http2TestServer http2TestServer;\n+    final String samplePost = \"Sample Post\";\n+\n+    URI warmup, postSuccessfully, postExceptionally;\n+    URI resetStreamAfter100NoError, resetStreamAfter100Error, resetStreamAfter200NoError, resetStreamAfter200Error;\n+\n+    static PrintStream err = new PrintStream(System.err);\n+\n+    @DataProvider(name = \"testDataUnconsumedBody\")\n+    public Object[][] testDataUnconsumedBody() {\n+        \/\/ Not consuming the InputStream in the server's handler results in different handling of RST_STREAM client-side\n+        return new Object[][] {\n+                { postSuccessfully, false }, \/\/ Checks RST_STREAM is ignored after client sees an END_STREAM\n+                { postExceptionally, true }  \/\/ Checks RST_STREAM is processed if client sees no END_STREAM\n+        };\n+    }\n+\n+    @DataProvider(name = \"testDataConsumedBody\")\n+    public Object[][] testDataConsumedBody() {\n+        return new Object[][] {\n+                \/\/ All client requests to these URIs should complete exceptionally\n+                { resetStreamAfter100NoError }, \/\/ Client receives RST_STREAM before END_STREAM and 200\n+                { resetStreamAfter100Error },  \/\/ Client receives RST_STREAM before END_STREAM and 200\n+                { resetStreamAfter200NoError }, \/\/ Client receives RST_STREAM after 200 but before server sends END_STREAM\n+                { resetStreamAfter200Error } \/\/ Client receives RST_STREAM after 200 but before server sends END_STREAM\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testDataUnconsumedBody\")\n+    public void testUnconsumedBody(URI uri, boolean exceptionally) {\n+        err.printf(\"\\nTesting with Version: %s, URI: %s\\n\", HTTP_2, uri);\n+        HttpRequest.BodyPublisher testPub = HttpRequest.BodyPublishers.ofString(samplePost);\n+        HttpResponse<String> resp = null;\n+        Throwable testThrowable = null;\n+        try {\n+            resp = performRequest(testPub, uri);\n+        } catch (Exception e) {\n+            testThrowable = e.getCause();\n+        }\n+        if (exceptionally) {\n+            assertNotNull(testThrowable, \"Request should have completed exceptionally but testThrowable is null\");\n+            assertEquals(testThrowable.getClass(), IOException.class, \"Test should have closed with an IOException\");\n+        } else {\n+            assertNull(testThrowable);\n+            assertNotNull(resp);\n+            assertEquals(resp.statusCode(), 200);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"testDataConsumedBody\")\n+    public void testConsumedBody(URI uri) {\n+        err.printf(\"\\nTesting with Version: %s, URI: %s\\n\", HTTP_2, uri);\n+        HttpRequest.BodyPublisher testPub = HttpRequest.BodyPublishers.ofString(samplePost);\n+        Throwable testThrowable = null;\n+        try {\n+            performRequest(testPub, uri);\n+        } catch (Exception e) {\n+            testThrowable = e.getCause();\n+        }\n+        assertNotNull(testThrowable, \"Request should have completed exceptionally but testThrowable is null\");\n+        assertEquals(testThrowable.getClass(), IOException.class, \"Test should have closed with an IOException\");\n+    }\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        http2TestServer = new Http2TestServer(false, 0);\n+        http2TestServer.setExchangeSupplier(ExpectContinueResetTestExchangeImpl::new);\n+        http2TestServer.addHandler(new GetHandler().toHttp2Handler(), \"\/warmup\");\n+\n+        http2TestServer.addHandler(new PostHandlerHttp2(), \"\/http2\/resetStreamAfter100NoError\");\n+        http2TestServer.addHandler(new PostHandlerHttp2(), \"\/http2\/resetStreamAfter100Error\");\n+        http2TestServer.addHandler(new PostHandlerHttp2(), \"\/http2\/resetStreamAfter200Error\");\n+        http2TestServer.addHandler(new PostHandlerHttp2(), \"\/http2\/resetStreamAfter200NoError\");\n+\n+        http2TestServer.addHandler(new TestHandlerEndStreamOn200(), \"\/testHandlerSuccessfully\");\n+        http2TestServer.addHandler(new TestHandlerNoEndStreamOn200(), \"\/testHandlerExceptionally\");\n+        warmup = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/warmup\");\n+\n+        resetStreamAfter100NoError = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/resetStreamAfter100NoError\");\n+        resetStreamAfter100Error = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/resetStreamAfter100Error\");\n+        resetStreamAfter200NoError = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/resetStreamAfter200NoError\");\n+        resetStreamAfter200Error = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/resetStreamAfter200Error\");\n+\n+        postSuccessfully = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/testHandlerSuccessfully\");\n+        postExceptionally = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/testHandlerExceptionally\");\n+        http2TestServer.start();\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        http2TestServer.stop();\n+    }\n+\n+    private HttpResponse<String> performRequest(HttpRequest.BodyPublisher bodyPublisher, URI uri)\n+            throws IOException, InterruptedException, ExecutionException {\n+        try (HttpClient client = HttpClient.newBuilder().proxy(HttpClient.Builder.NO_PROXY).version(HTTP_2).build()) {\n+            err.printf(\"Performing warmup request to %s\", warmup);\n+            client.send(HttpRequest.newBuilder(warmup).GET().version(HTTP_2).build(), HttpResponse.BodyHandlers.discarding());\n+            HttpRequest postRequest = HttpRequest.newBuilder(uri)\n+                    .version(HTTP_2)\n+                    .POST(bodyPublisher)\n+                    .expectContinue(true)\n+                    .build();\n+            err.printf(\"Sending request (%s): %s%n\", HTTP_2, postRequest);\n+            CompletableFuture<HttpResponse<String>> cf = client.sendAsync(postRequest, HttpResponse.BodyHandlers.ofString());\n+            return cf.get();\n+        }\n+    }\n+\n+    static class GetHandler implements HttpServerAdapters.HttpTestHandler {\n+\n+        @Override\n+        public void handle(HttpServerAdapters.HttpTestExchange exchange) throws IOException {\n+            try (OutputStream os = exchange.getResponseBody()) {\n+                byte[] bytes = \"Response Body\".getBytes(UTF_8);\n+                err.printf(\"Server sending 200  (length=%s)\", bytes.length);\n+                exchange.sendResponseHeaders(200, bytes.length);\n+                err.println(\"Server sending Response Body\");\n+                os.write(bytes);\n+            }\n+        }\n+    }\n+\n+    static class PostHandlerHttp2 implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            if (exchange instanceof ExpectContinueResetTestExchangeImpl impl) {\n+                String path = exchange.getRequestURI().getPath();\n+                impl.handleTestExchange(path);\n+            }\n+        }\n+    }\n+\n+    static class TestHandlerEndStreamOn200 implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            err.println(\"Sending 100\");\n+            exchange.sendResponseHeaders(100, -1);\n+            err.println(\"Sending 200\");\n+            exchange.sendResponseHeaders(200, -1);\n+            \/\/ Setting responseLength to -1, sets the END_STREAM flag on the ResponseHeaders before sending a RST_STREAM frame.\n+            \/\/ Therefore, there is no need to explicitly send a RST_STREAM here as this will be sent by the Server impl.\n+            err.println(\"Sending Reset\");\n+        }\n+    }\n+\n+    static class TestHandlerNoEndStreamOn200 implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            err.println(\"Sending 100\");\n+            exchange.sendResponseHeaders(100, 0);\n+            err.println(\"Sending 200\");\n+            exchange.sendResponseHeaders(200, 0);\n+            if (exchange instanceof ExpectContinueResetTestExchangeImpl testExchange) {\n+                err.println(\"Sending Reset\");\n+                testExchange.addResetToOutputQ(ResetFrame.NO_ERROR);\n+            } else {\n+                throw new RuntimeException(\"Wrong Exchange type used\");\n+            }\n+        }\n+    }\n+    static class ExpectContinueResetTestExchangeImpl extends Http2TestExchangeImpl {\n+\n+        public ExpectContinueResetTestExchangeImpl(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os, Http2TestServerConnection conn, boolean pushAllowed) {\n+            super(streamid, method, reqheaders, rspheadersBuilder, uri, is, sslSession, os, conn, pushAllowed);\n+        }\n+\n+        public void addResetToOutputQ(int code) throws IOException {\n+            ResetFrame rf = new ResetFrame(streamid, code);\n+            this.conn.addToOutputQ(rf);\n+        }\n+\n+        public void handleTestExchange(String path) throws IOException {\n+            \/\/Based on request path, execute a different response case\n+            try (InputStream reqBody = this.getRequestBody()) {\n+                switch (path) {\n+                    case \"\/http2\/endStream\" -> sendEndStreamHeaders();\n+                    case \"\/http2\/resetStreamAfter100NoError\" -> resetStreamAfter100NoError(reqBody);\n+                    case \"\/http2\/resetStreamAfter100Error\" -> resetStreamAfter100Error(reqBody);\n+                    case \"\/http2\/resetStreamAfter200NoError\" -> resetStreamAfter200NoError(reqBody);\n+                    case \"\/http2\/resetStreamAfter200Error\" -> resetStreamAfter200Error(reqBody);\n+                    default -> sendResponseHeaders(400, 0);\n+                }\n+            }\n+        }\n+\n+        private void sendEndStreamHeaders() throws IOException {\n+            this.responseLength = 0;\n+            rspheadersBuilder.setHeader(\":status\", Integer.toString(100));\n+            HttpHeaders headers = rspheadersBuilder.build();\n+            Http2TestServerConnection.ResponseHeaders response\n+                    = new Http2TestServerConnection.ResponseHeaders(headers);\n+            response.streamid(streamid);\n+            response.setFlag(HeaderFrame.END_HEADERS);\n+            response.setFlag(HeaderFrame.END_STREAM);\n+            sendResponseHeaders(response);\n+        }\n+\n+        private void resetStreamAfter100NoError(InputStream reqBody) throws IOException {\n+            err.println(\"IN HANDLER\");\n+            this.sendResponseHeaders(100, 0);\n+            reqBody.readAllBytes();\n+            \/\/ Send Reset Frame immediately after Response Headers\n+            addResetToOutputQ(ResetFrame.NO_ERROR);\n+        }\n+\n+        private void resetStreamAfter100Error(InputStream reqBody) throws IOException {\n+            this.sendResponseHeaders(100, 0);\n+            reqBody.readAllBytes();\n+            \/\/ Send Reset Frame immediately after Response Headers\n+            addResetToOutputQ(ResetFrame.PROTOCOL_ERROR);\n+        }\n+\n+        public void resetStreamAfter200NoError(InputStream reqBody) throws IOException {\n+            this.sendResponseHeaders(100, 0);\n+            reqBody.readAllBytes();\n+            this.sendResponseHeaders(200, 0);\n+            \/\/ Send Reset after reading data and 200 sent. This means the RST_STREAM will be received by the client before\n+            \/\/ an empty DATA_FRAME with the END_STREAM flag sent causing the exchange to complete exceptionally.\n+            addResetToOutputQ(ResetFrame.NO_ERROR);\n+        }\n+\n+        public void resetStreamAfter200Error(InputStream reqBody) throws IOException {\n+            this.sendResponseHeaders(100, 0);\n+            reqBody.readAllBytes();\n+            this.sendResponseHeaders(200, 0);\n+            \/\/ Send Reset after reading data and 200 sent. This means the RST_STREAM will be received by the client before\n+            \/\/ an empty DATA_FRAME with the END_STREAM flag sent causing the exchange to complete exceptionally.\n+            addResetToOutputQ(ResetFrame.PROTOCOL_ERROR);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ExpectContinueResetTest.java","additions":305,"deletions":0,"binary":false,"changes":305,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.httpclient.test.lib.http2.Http2TestServerConnection.ResponseHeaders;\n@@ -148,2 +149,2 @@\n-        Http2TestServerConnection.ResponseHeaders response\n-                = new Http2TestServerConnection.ResponseHeaders(headers);\n+        ResponseHeaders response\n+                = new ResponseHeaders(headers);\n@@ -156,1 +157,1 @@\n-            conn.outputQ.put(response);\n+            sendResponseHeaders(response);\n@@ -164,1 +165,1 @@\n-            conn.outputQ.put(response);\n+            sendResponseHeaders(response);\n@@ -170,0 +171,4 @@\n+    public void sendResponseHeaders(ResponseHeaders response) throws IOException {\n+        conn.outputQ.put(response);\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestExchangeImpl.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1244,1 +1244,1 @@\n-    static class ResponseHeaders extends Http2Frame {\n+    public static class ResponseHeaders extends Http2Frame {\n@@ -1247,1 +1247,1 @@\n-        ResponseHeaders(HttpHeaders headers) {\n+        public ResponseHeaders(HttpHeaders headers) {\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestServerConnection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}