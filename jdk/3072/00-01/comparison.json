{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.zip.CRC32;\n@@ -42,0 +43,1 @@\n+    private static final int FLAGS_HEADER_INDEX = 3;\n@@ -44,1 +46,5 @@\n-\n+    \/\/ flags for test\n+    private static final int FHCRC      = 2;    \/\/ Header CRC\n+    private static final int FEXTRA     = 4;    \/\/ Extra field\n+    private static final int FNAME      = 8;    \/\/ File name\n+    private static final int FCOMMENT   = 16;   \/\/ File comment\n@@ -47,1 +53,2 @@\n-     * has a value of {@code 255} which represents \"unknown\"\n+     * has a value of {@code 255} which represents \"unknown\", and test\n+     * that the flags and header crc16 field could be successfully set.\n@@ -52,0 +59,10 @@\n+        \/\/ header fields\n+        boolean generateHeaderCrc = true;\n+        \/\/ extra field\n+        byte[] xfield = \"extraFieldBytesTest\".getBytes();\n+        \/\/ file name\n+        byte[] fname = \"FileNameTest.tmp\".getBytes();\n+        \/\/ file comment\n+        byte[] fcomment = \"FileCommentTest\".getBytes();\n+        CRC32 crc = new CRC32();\n+        crc.reset();\n@@ -53,1 +70,5 @@\n-        try (final GZIPOutputStream gzipOutputStream = new GZIPOutputStream(baos);) {\n+        try (final GZIPOutputStream gzipOutputStream = new GZIPOutputStream(baos,\n+                                                                            generateHeaderCrc,\n+                                                                            xfield,\n+                                                                            fname,\n+                                                                            fcomment);) {\n@@ -60,0 +81,37 @@\n+        \/\/ test header flags\n+        byte expectedFlags = (byte) ((FHCRC | FEXTRA | FNAME | FCOMMENT) & 0xff);\n+        Assert.assertEquals(toUnsignedByte(compressed[FLAGS_HEADER_INDEX]), expectedFlags,\n+                \"Unexpected value for header flags\");\n+        \/\/ test extra field\n+        int index = OS_HEADER_INDEX + 1;\n+        int lo = toUnsignedByte(compressed[index++]);\n+        int hi = toUnsignedByte(compressed[index++]) << 8;\n+        int fieldLen = hi | lo;\n+        int expectedFieldLen = xfield.length;\n+        String fieldStr = new String(compressed, index, expectedFieldLen);\n+        Assert.assertEquals(fieldLen, expectedFieldLen, \"Unexpected length of extra field\");\n+        Assert.assertEquals(fieldStr, new String(xfield), \"Unexpected extra field contents\");\n+        index += expectedFieldLen;\n+\n+        \/\/ test file name\n+        int fnameLen = fname.length;\n+        String fn = new String(compressed, index, fnameLen);\n+        Assert.assertEquals(fn, new String(fname), \"Unexpected file name in header\");\n+        index += fnameLen;\n+        Assert.assertEquals(compressed[index++], 0, \"File name in header must be end with 0\");\n+\n+        \/\/ test file comment\n+        int fcommLen = fcomment.length;\n+        String fc = new String(compressed, index, fcommLen);\n+        Assert.assertEquals(fc, new String(fcomment), \"Unexpected file name in header\");\n+        index += fcommLen;\n+        Assert.assertEquals(compressed[index++], 0, \"File comment in header must be end with 0\");\n+\n+        \/\/ test crc of header (lower 16bits)\n+        crc.update(compressed, 0, index);\n+        int expected = (int)(crc.getValue()) & 0xffff;\n+        int low = toUnsignedByte(compressed[index++]);\n+        int high = toUnsignedByte(compressed[index++]) << 8;\n+        int headerCrc = high | low;\n+        Assert.assertEquals(headerCrc, expected, \"Unexpected CRC value of header\");\n+\n","filename":"test\/jdk\/java\/util\/zip\/GZIP\/GZIPOutputStreamHeaderTest.java","additions":62,"deletions":4,"binary":false,"changes":66,"status":"modified"}]}