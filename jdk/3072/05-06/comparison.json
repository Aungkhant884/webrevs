{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -57,0 +58,2 @@\n+    private GZIPHeaderBuilder.GZIPHeaderData headerData;\n+\n@@ -142,0 +145,8 @@\n+    \/**\n+     * Retures GZIP header data\n+     * @return header data\n+     *\/\n+    public GZIPHeaderBuilder.GZIPHeaderData headerData() {\n+        return headerData;\n+    }\n+\n@@ -161,0 +172,1 @@\n+        GZIPHeaderBuilder builder = new GZIPHeaderBuilder();\n@@ -176,0 +188,1 @@\n+\n@@ -179,1 +192,1 @@\n-            skipBytes(in, m);\n+            builder.withExtraFieldBytes(readBytes(in, m));\n@@ -184,3 +197,3 @@\n-            do {\n-                n++;\n-            } while (readUByte(in) != 0);\n+            String filename = readString(in);\n+            builder.withFileName(filename);\n+            n += filename.getBytes(\"ISO-8859-1\").length + 1;\n@@ -190,3 +203,3 @@\n-            do {\n-                n++;\n-            } while (readUByte(in) != 0);\n+            String fcomm = readString(in);\n+            builder.withFileComment(fcomm);\n+            n += fcomm.getBytes(\"ISO-8859-1\").length + 1;\n@@ -200,0 +213,1 @@\n+            builder.calculateHeaderCRC(true);\n@@ -203,0 +217,1 @@\n+        headerData = builder.build();\n@@ -293,0 +308,34 @@\n+\n+    \/*\n+     * Reads bytes of input data blocking until all bytes are read.\n+     * Does not assume that the input stream is capable of seeking.\n+     *\/\n+    private byte[] readBytes(InputStream in, int n) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        while (n > 0) {\n+            int len = in.read(tmpbuf, 0, n < tmpbuf.length ? n : tmpbuf.length);\n+            if (len == -1) {\n+                throw new EOFException();\n+            }\n+            baos.write(tmpbuf, 0, len);\n+            n -= len;\n+        }\n+        baos.close();\n+        return baos.toByteArray();\n+    }\n+\n+    \/*\n+     * Reads string of input data blocking until all bytes are read.\n+     * Does not assume that the input stream is capable of seeking.\n+     *\/\n+    private String readString(InputStream in) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        do {\n+            int c = in.read();\n+            if (c == 0) break;\n+            baos.write(c);\n+        } while (true);\n+        baos.close();\n+        return new String(baos.toByteArray(), \"ISO-8859-1\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":56,"deletions":7,"binary":false,"changes":63,"status":"modified"}]}