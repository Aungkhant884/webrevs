{"files":[{"patch":"@@ -42,1 +42,1 @@\n-#include \"oops\/method.hpp\"\n+#include \"oops\/method.inline.hpp\"\n@@ -113,10 +113,12 @@\n-  if (m->is_method_handle_intrinsic()) {\n-    vmIntrinsics::ID id = m->intrinsic_id();\n-    assert(MethodHandles::is_signature_polymorphic(id), \"must match an intrinsic\");\n-    MethodKind kind = (MethodKind)(method_handle_invoke_FIRST +\n-                                   vmIntrinsics::as_int(id) -\n-                                   static_cast<int>(vmIntrinsics::FIRST_MH_SIG_POLY));\n-    assert(kind <= method_handle_invoke_LAST, \"parallel enum ranges\");\n-    return kind;\n-  }\n-\n+  vmIntrinsics::ID iid = m->intrinsic_id();\n+  if (iid != vmIntrinsics::_none) {\n+    if (m->is_method_handle_intrinsic()) {\n+      assert(MethodHandles::is_signature_polymorphic(id), \"must match an intrinsic\");\n+      MethodKind kind = (MethodKind)(method_handle_invoke_FIRST +\n+                                    vmIntrinsics::as_int(iid) -\n+                                    static_cast<int>(vmIntrinsics::FIRST_MH_SIG_POLY));\n+      assert(kind <= method_handle_invoke_LAST, \"parallel enum ranges\");\n+      return kind;\n+    }\n+\n+    switch (iid) {\n@@ -124,14 +126,39 @@\n-  switch (m->intrinsic_id()) {\n-    \/\/ Use optimized stub code for CRC32 native methods.\n-    case vmIntrinsics::_updateCRC32            : return java_util_zip_CRC32_update;\n-    case vmIntrinsics::_updateBytesCRC32       : return java_util_zip_CRC32_updateBytes;\n-    case vmIntrinsics::_updateByteBufferCRC32  : return java_util_zip_CRC32_updateByteBuffer;\n-    \/\/ Use optimized stub code for CRC32C methods.\n-    case vmIntrinsics::_updateBytesCRC32C             : return java_util_zip_CRC32C_updateBytes;\n-    case vmIntrinsics::_updateDirectByteBufferCRC32C  : return java_util_zip_CRC32C_updateDirectByteBuffer;\n-    case vmIntrinsics::_intBitsToFloat:      return java_lang_Float_intBitsToFloat;\n-    case vmIntrinsics::_floatToRawIntBits:   return java_lang_Float_floatToRawIntBits;\n-    case vmIntrinsics::_longBitsToDouble:    return java_lang_Double_longBitsToDouble;\n-    case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;\n-    default:                                 break;\n-  }\n+      \/\/ Use optimized stub code for CRC32 native methods.\n+      case vmIntrinsics::_updateCRC32:       return java_util_zip_CRC32_update;\n+      case vmIntrinsics::_updateBytesCRC32:  return java_util_zip_CRC32_updateBytes;\n+      case vmIntrinsics::_updateByteBufferCRC32: return java_util_zip_CRC32_updateByteBuffer;\n+      \/\/ Use optimized stub code for CRC32C methods.\n+      case vmIntrinsics::_updateBytesCRC32C: return java_util_zip_CRC32C_updateBytes;\n+      case vmIntrinsics::_updateDirectByteBufferCRC32C: return java_util_zip_CRC32C_updateDirectByteBuffer;\n+      case vmIntrinsics::_intBitsToFloat:    return java_lang_Float_intBitsToFloat;\n+      case vmIntrinsics::_floatToRawIntBits: return java_lang_Float_floatToRawIntBits;\n+      case vmIntrinsics::_longBitsToDouble:  return java_lang_Double_longBitsToDouble;\n+      case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;\n+#endif\n+      case vmIntrinsics::_dsin:              return java_lang_math_sin;\n+      case vmIntrinsics::_dcos:              return java_lang_math_cos;\n+      case vmIntrinsics::_dtan:              return java_lang_math_tan;\n+      case vmIntrinsics::_dabs:              return java_lang_math_abs;\n+      case vmIntrinsics::_dlog:              return java_lang_math_log;\n+      case vmIntrinsics::_dlog10:            return java_lang_math_log10;\n+      case vmIntrinsics::_dpow:              return java_lang_math_pow;\n+      case vmIntrinsics::_dexp:              return java_lang_math_exp;\n+      case vmIntrinsics::_fmaD:              return java_lang_math_fmaD;\n+      case vmIntrinsics::_fmaF:              return java_lang_math_fmaF;\n+      case vmIntrinsics::_Reference_get:     return java_lang_ref_reference_get;\n+      case vmIntrinsics::_dsqrt:\n+        \/\/ _dsqrt will be selected for both Math::sqrt and StrictMath::sqrt, but the latter\n+        \/\/ is native. Keep treating it like a native method in the interpreter\n+        assert(m->name() == vmSymbols::sqrt_name() &&\n+               (m->klass_name() == vmSymbols::java_lang_Math() ||\n+                m->klass_name() == vmSymbols::java_lang_StrictMath()), \"must be\");\n+        return m->is_native() ? native : java_lang_math_sqrt;\n+      case vmIntrinsics::_Object_init:\n+        if (RegisterFinalizersAtInit && m->code_size() == 1) {\n+          \/\/ We need to execute the special return bytecode to check for\n+          \/\/ finalizer registration so create a normal frame.\n+          return zerolocals;\n+        }\n+        break;\n+      default: break;\n+    }\n@@ -139,0 +166,1 @@\n+  }\n@@ -141,2 +169,0 @@\n-  \/\/ Note: This test must come _before_ the test for intrinsic\n-  \/\/       methods. See also comments below.\n@@ -153,7 +179,0 @@\n-  if (RegisterFinalizersAtInit && m->code_size() == 1 &&\n-      m->intrinsic_id() == vmIntrinsics::_Object_init) {\n-    \/\/ We need to execute the special return bytecode to check for\n-    \/\/ finalizer registration so create a normal frame.\n-    return zerolocals;\n-  }\n-\n@@ -165,23 +184,0 @@\n-  \/\/ Special intrinsic method?\n-  \/\/ Note: This test must come _after_ the test for native methods,\n-  \/\/       otherwise we will run into problems with JDK 1.2, see also\n-  \/\/       TemplateInterpreterGenerator::generate_method_entry() for\n-  \/\/       for details.\n-  switch (m->intrinsic_id()) {\n-    case vmIntrinsics::_dsin  : return java_lang_math_sin  ;\n-    case vmIntrinsics::_dcos  : return java_lang_math_cos  ;\n-    case vmIntrinsics::_dtan  : return java_lang_math_tan  ;\n-    case vmIntrinsics::_dabs  : return java_lang_math_abs  ;\n-    case vmIntrinsics::_dsqrt : return java_lang_math_sqrt ;\n-    case vmIntrinsics::_dlog  : return java_lang_math_log  ;\n-    case vmIntrinsics::_dlog10: return java_lang_math_log10;\n-    case vmIntrinsics::_dpow  : return java_lang_math_pow  ;\n-    case vmIntrinsics::_dexp  : return java_lang_math_exp  ;\n-    case vmIntrinsics::_fmaD  : return java_lang_math_fmaD ;\n-    case vmIntrinsics::_fmaF  : return java_lang_math_fmaF ;\n-\n-    case vmIntrinsics::_Reference_get\n-                              : return java_lang_ref_reference_get;\n-    default                   : break;\n-  }\n-\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":53,"deletions":57,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -623,5 +623,0 @@\n-bool Method::is_empty_method() const {\n-  return  code_size() == 1\n-      && *code_base() == Bytecodes::_return;\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -86,0 +86,5 @@\n+inline bool Method::is_empty_method() const {\n+  return  code_size() == 1\n+      && *code_base() == Bytecodes::_return;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/method.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}