{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-    AixFileSystem(UnixFileSystemProvider provider) {\n-        super(provider);\n+    AixFileSystem(UnixFileSystemProvider provider, String dir) {\n+        super(provider, dir);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/AixFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-    AixFileSystem newFileSystem() {\n-        return new AixFileSystem(this);\n+    AixFileSystem newFileSystem(String dir) {\n+        return new AixFileSystem(this, dir);\n","filename":"src\/java.base\/aix\/classes\/sun\/nio\/fs\/AixFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n-    LinuxFileSystem(UnixFileSystemProvider provider) {\n-        super(provider);\n+    LinuxFileSystem(UnixFileSystemProvider provider, String dir) {\n+        super(provider, dir);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-    LinuxFileSystem newFileSystem() {\n-        return new LinuxFileSystem(this);\n+    LinuxFileSystem newFileSystem(String dir) {\n+        return new LinuxFileSystem(this, dir);\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,2 +49,2 @@\n-    BsdFileSystem(UnixFileSystemProvider provider) {\n-        super(provider);\n+    BsdFileSystem(UnixFileSystemProvider provider, String dir) {\n+        super(provider, dir);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-    BsdFileSystem newFileSystem() {\n-        return new BsdFileSystem(this);\n+    BsdFileSystem newFileSystem(String dir) {\n+        return new BsdFileSystem(this, dir);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-    MacOSXFileSystem(UnixFileSystemProvider provider) {\n-        super(provider);\n+    MacOSXFileSystem(UnixFileSystemProvider provider, String dir) {\n+        super(provider, dir);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-    MacOSXFileSystem newFileSystem() {\n-        return new MacOSXFileSystem(this);\n+    MacOSXFileSystem newFileSystem(String dir) {\n+        return new MacOSXFileSystem(this, dir);\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/MacOSXFileSystemProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -77,0 +76,1 @@\n+    private final boolean needToResolveAgainstDefaultDirectory;\n@@ -80,2 +80,1 @@\n-    UnixFileSystem(UnixFileSystemProvider provider) {\n-        String dir = StaticProperty.userDir();\n+    UnixFileSystem(UnixFileSystemProvider provider, String dir) {\n@@ -88,0 +87,22 @@\n+        \/\/ if process-wide chdir is allowed or default directory is not the\n+        \/\/ process working directory then paths must be resolved against the\n+        \/\/ default directory.\n+        String propValue = GetPropertyAction\n+                .privilegedGetProperty(\"sun.nio.fs.chdirAllowed\", \"false\");\n+        boolean chdirAllowed = propValue.isEmpty() ? true : Boolean.parseBoolean(propValue);\n+        if (chdirAllowed) {\n+            this.needToResolveAgainstDefaultDirectory = true;\n+        } else {\n+            byte[] cwd = UnixNativeDispatcher.getcwd();\n+            boolean defaultIsCwd = (cwd.length == defaultDirectory.length);\n+            if (defaultIsCwd) {\n+                for (int i=0; i<cwd.length; i++) {\n+                    if (cwd[i] != defaultDirectory[i]) {\n+                        defaultIsCwd = false;\n+                        break;\n+                    }\n+                }\n+            }\n+            this.needToResolveAgainstDefaultDirectory = !defaultIsCwd;\n+        }\n+\n@@ -97,0 +118,4 @@\n+    boolean needToResolveAgainstDefaultDirectory() {\n+        return needToResolveAgainstDefaultDirectory;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-        theFileSystem = newFileSystem();\n+        theFileSystem = newFileSystem(StaticProperty.userDir());\n@@ -86,1 +86,1 @@\n-     * Constructs a new file system.\n+     * Constructs a new file system using the given default directory.\n@@ -88,1 +88,1 @@\n-    abstract UnixFileSystem newFileSystem();\n+    abstract UnixFileSystem newFileSystem(String dir);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,5 @@\n+    \/**\n+     * char *getcwd(char *buf, size_t size);\n+     *\/\n+    static native byte[] getcwd();\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -141,2 +141,4 @@\n-        if (!isEmpty()) {\n-            return path;\n+        \/\/ resolve against default directory if required (chdir allowed or\n+        \/\/ file system default directory is not working directory)\n+        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n+            return resolve(getFileSystem().defaultDirectory(), path);\n@@ -144,3 +146,7 @@\n-            \/\/ empty path case will access current directory\n-            byte[] here = { '.' };\n-            return here;\n+            if (!isEmpty()) {\n+                return path;\n+            } else {\n+                \/\/ empty path case will access current directory\n+                byte[] here = { '.' };\n+                return here;\n+            }\n@@ -157,1 +163,5 @@\n-        return toString();\n+        if (getFileSystem().needToResolveAgainstDefaultDirectory()) {\n+            return Util.toString(getByteArrayForSysCalls());\n+        } else {\n+            return toString();\n+        }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixPath.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,0 +327,19 @@\n+JNIEXPORT jbyteArray JNICALL\n+Java_sun_nio_fs_UnixNativeDispatcher_getcwd(JNIEnv* env, jclass this) {\n+    jbyteArray result = NULL;\n+    char buf[PATH_MAX+1];\n+\n+    \/* EINTR not listed as a possible error *\/\n+    char* cwd = getcwd(buf, sizeof(buf));\n+    if (cwd == NULL) {\n+        throwUnixException(env, errno);\n+    } else {\n+        jsize len = (jsize)strlen(buf);\n+        result = (*env)->NewByteArray(env, len);\n+        if (result != NULL) {\n+            (*env)->SetByteArrayRegion(env, result, 0, len, (jbyte*)buf);\n+        }\n+    }\n+    return result;\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.internal.util.StaticProperty;\n@@ -46,1 +45,3 @@\n-    WindowsFileSystem(WindowsFileSystemProvider provider) {\n+    WindowsFileSystem(WindowsFileSystemProvider provider,\n+                      String dir)\n+    {\n@@ -50,1 +51,0 @@\n-        String dir = StaticProperty.userDir();\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.internal.util.StaticProperty;\n@@ -51,1 +52,1 @@\n-        theFileSystem = new WindowsFileSystem(this);\n+        theFileSystem = new WindowsFileSystem(this, StaticProperty.userDir());\n","filename":"src\/java.base\/windows\/classes\/sun\/nio\/fs\/WindowsFileSystemProvider.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}