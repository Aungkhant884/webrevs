{"files":[{"patch":"@@ -31,0 +31,1 @@\n+ * @compile --enable-preview -source ${jdk.version} ClassFileVersionTest.java\n@@ -37,1 +38,8 @@\n-\n+    public static final int LOWER_16 = 0x0000_FFFF;\n+    \/*\n+     * Include a use of a preview API so that the minor class file\n+     * version of the class file for this class gets set during\n+     * compilation. If a particular class becomes non-preview, any\n+     * currently preview class can be substituted in.\n+     *\/\n+    private static final Class<?> PREVIEW_API = java.lang.foreign.MemoryAddress.class;\n@@ -41,1 +49,4 @@\n-        Class<?> testClass = Class.forName(className);\n+        testIt(Class.forName(className), expectedResult);\n+    }\n+\n+    public static void testIt(Class<?> testClass, int expectedResult) throws Exception {\n@@ -44,4 +55,4 @@\n-            int exp_minor = (expectedResult >> 16) & 0x0000FFFF;\n-            int exp_major = expectedResult & 0x0000FFFF;\n-            int got_minor = (ver >> 16) & 0x0000FFFF;\n-            int got_major = ver & 0x0000FFFF;\n+            int exp_minor = (expectedResult >> 16) & LOWER_16;\n+            int exp_major = expectedResult & LOWER_16;\n+            int got_minor = (ver >> 16) & LOWER_16;\n+            int got_major = ver & LOWER_16;\n@@ -58,0 +69,6 @@\n+        \/\/ Class file version is stored like \"64.0\".\n+        int latestMajor = (int)Double.parseDouble(System.getProperty(\"java.class.version\"));\n+\n+        testIt(Object.class, latestMajor);\n+        \/\/ ClassFileVersionTest use preview features so its minor version should be 0xFFFF\n+        testIt(ClassFileVersionTest.class, (~LOWER_16) | latestMajor);\n@@ -60,3 +77,1 @@\n-        testIt(\"Version45_3\", 0x3002D);  \/\/ 3:45\n-        \/\/ test minor version of 65535.\n-        testIt(\"Version64_65535\", 0xFFFF0040);  \/\/ 0xFFFF0040 = 65535:64\n+        testIt(\"Version45_3\", 0x0003_002D);  \/\/ 3:45\n@@ -67,2 +82,2 @@\n-            int got_minor = (ver >> 16) & 0x0000FFFF;\n-            int got_major = ver & 0x0000FFFF;\n+            int got_minor = (ver >> 16) & LOWER_16;\n+            int got_major = ver & LOWER_16;\n@@ -76,2 +91,2 @@\n-            int got_minor = (ver >> 16) & 0x0000FFFF;\n-            int got_major = ver & 0x0000FFFF;\n+            int got_minor = (ver >> 16) & LOWER_16;\n+            int got_major = ver & LOWER_16;\n@@ -85,2 +100,2 @@\n-            int got_minor = (ver >> 16) & 0x0000FFFF;\n-            int got_major = ver & 0x0000FFFF;\n+            int got_minor = (ver >> 16) & LOWER_16;\n+            int got_major = ver & LOWER_16;\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassFileVersionTest.java","additions":30,"deletions":15,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -204,91 +204,0 @@\n-\n-\/\/ Class with major version 64 and minor version 65535\n-class Version64_65535 {\n-  0xCAFEBABE;\n-  65535; \/\/ minor version\n-  64; \/\/ version\n-  [14] { \/\/ Constant Pool\n-    ; \/\/ first element is empty\n-    Method #2 #3; \/\/ #1     at 0x0A\n-    class #4; \/\/ #2     at 0x0F\n-    NameAndType #5 #6; \/\/ #3     at 0x12\n-    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n-    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n-    Utf8 \"()V\"; \/\/ #6     at 0x33\n-    class #8; \/\/ #7     at 0x39\n-    Utf8 \"Version64_65535\"; \/\/ #8     at 0x3C\n-    Utf8 \"Code\"; \/\/ #9     at 0x48\n-    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n-    Utf8 \"hi\"; \/\/ #11     at 0x61\n-    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n-    Utf8 \"Version64_65535.java\"; \/\/ #13     at 0x73\n-  } \/\/ Constant Pool\n-\n-  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n-  #7;\/\/ this_cpx\n-  #2;\/\/ super_cpx\n-\n-  [0] { \/\/ Interfaces\n-  } \/\/ Interfaces\n-\n-  [0] { \/\/ Fields\n-  } \/\/ Fields\n-\n-  [2] { \/\/ Methods\n-    {  \/\/ method at 0x90\n-      0x0001; \/\/ access\n-      #5; \/\/ name_index       : <init>\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#9, 29) { \/\/ Code at 0x98\n-          1; \/\/ max_stack\n-          1; \/\/ max_locals\n-          Bytes[5]{\n-            0x2AB70001B1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n-              [1] { \/\/ line_number_table\n-                0  1; \/\/  at 0xBB\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-    ;\n-    {  \/\/ method at 0xBB\n-      0x0009; \/\/ access\n-      #11; \/\/ name_index       : hi\n-      #6; \/\/ descriptor_index : ()V\n-      [1] { \/\/ Attributes\n-        Attr(#9, 25) { \/\/ Code at 0xC3\n-          0; \/\/ max_stack\n-          0; \/\/ max_locals\n-          Bytes[1]{\n-            0xB1;\n-          }\n-          [0] { \/\/ Traps\n-          } \/\/ end Traps\n-          [1] { \/\/ Attributes\n-            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n-              [1] { \/\/ line_number_table\n-                0  2; \/\/  at 0xE2\n-              }\n-            } \/\/ end LineNumberTable\n-          } \/\/ Attributes\n-        } \/\/ end Code\n-      } \/\/ Attributes\n-    }\n-  } \/\/ Methods\n-\n-  [1] { \/\/ Attributes\n-    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n-      #13;\n-    } \/\/ end SourceFile\n-  } \/\/ Attributes\n-} \/\/ end class Version64_65535\n-\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/classFileVersions.jcod","additions":0,"deletions":91,"binary":false,"changes":91,"status":"modified"}]}