{"files":[{"patch":"@@ -70,0 +70,1 @@\n+import sun.swing.AccessibleComponentAccessor;\n@@ -820,0 +821,9 @@\n+    \/\/ This method is called from the native in OutlineRowAccessibility.m\n+    private static Accessible getAccessibleCurrentAccessible(Accessible a, Component c) {\n+        if (a == null) return null;\n+        return invokeAndWait(() -> {\n+            AccessibleContext ac = a.getAccessibleContext();\n+            return ac == null ? null : AccessibleComponentAccessor.getAccessible(ac);\n+        }, c);\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,3 +35,1 @@\n-static jclass sjc_CAccessible = NULL;\n-#define GET_CACCESSIBLE_CLASS_RETURN(ret) \\\n-    GET_CLASS_RETURN(sjc_CAccessible, \"sun\/lwawt\/macosx\/CAccessible\", ret);\n+static jclass sjc_CAccessibility = NULL;\n@@ -45,5 +43,3 @@\n-    jobject jAxContext = getAxContext(env, fAccessible, fComponent);\n-    if (jAxContext == NULL) return NULL;\n-    jclass axContextClass = (*env)->GetObjectClass(env, jAxContext);\n-    DECLARE_METHOD_RETURN(jm_getCurrentComponent, axContextClass, \"getCurrentComponent\", \"()Ljava\/awt\/Component;\", NULL);\n-    jobject newComponent = (*env)->CallObjectMethod(env, jAxContext, jm_getCurrentComponent);\n+    GET_CACCESSIBILITY_CLASS_RETURN(NULL);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleCurrentAccessible, sjc_CAccessibility, \"getAccessibleCurrentAccessible\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", NULL);\n+    jobject currentAccessible = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleCurrentAccessible, fAccessible, fComponent);\n@@ -51,11 +47,1 @@\n-    (*env)->DeleteLocalRef(env, jAxContext);\n-    if (newComponent != NULL) {\n-        GET_CACCESSIBLE_CLASS_RETURN(NULL);\n-        DECLARE_STATIC_METHOD_RETURN(sjm_getCAccessible, sjc_CAccessible, \"getCAccessible\", \"(Ljavax\/accessibility\/Accessible;)Lsun\/lwawt\/macosx\/CAccessible;\", NULL);\n-        jobject currentAccessible = (*env)->CallStaticObjectMethod(env, sjc_CAccessible, sjm_getCAccessible, newComponent);\n-        CHECK_EXCEPTION();\n-        (*env)->DeleteLocalRef(env, newComponent);\n-        return currentAccessible;\n-    } else {\n-        return NULL;\n-    }\n+    return currentAccessible;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineRowAccessibility.m","additions":5,"deletions":19,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+import sun.swing.AccessibleComponentAccessor;\n@@ -3231,0 +3232,5 @@\n+              static {\n+                  AccessibleComponentAccessor.addAccessor(c ->\n+                          c instanceof JList.AccessibleJList.AccessibleJListChild ? ((JList.AccessibleJList.AccessibleJListChild) c).getCurrentComponent() : null);\n+              }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JList.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+import sun.swing.AccessibleComponentAccessor;\n@@ -8093,0 +8094,6 @@\n+            static {\n+                AccessibleComponentAccessor.addAccessor(c ->\n+                        c instanceof AccessibleJTableCell ? ((AccessibleJTableCell) c).getCurrentComponent() : null);\n+            }\n+\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTable.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+import sun.swing.AccessibleComponentAccessor;\n@@ -4743,0 +4744,5 @@\n+            static {\n+                AccessibleComponentAccessor.addAccessor(c ->\n+                        c instanceof AccessibleJTreeNode ? ((AccessibleJTreeNode) c).getCurrentComponent() : null);\n+            }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JTree.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.swing;\n+\n+import javax.accessibility.Accessible;\n+import javax.accessibility.AccessibleContext;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+public class AccessibleComponentAccessor {\n+    private static final List<Function<AccessibleContext, Object>> accessors = new CopyOnWriteArrayList<>();\n+\n+    public static void addAccessor(Function<AccessibleContext, Object> accessor) {\n+        accessors.add(accessor);\n+    }\n+\n+    public static Accessible getAccessible(AccessibleContext context) {\n+        for (Function<AccessibleContext, Object> accessor : accessors) {\n+            Object o = accessor.apply(context);\n+            if (o instanceof Accessible accessible) {\n+                return accessible;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/AccessibleComponentAccessor.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}