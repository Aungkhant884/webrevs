{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,2 @@\n+        validTypes.add(\"PBEWithHmacSHA512\/224AndAES_128\".toUpperCase(Locale.ENGLISH));\n+        validTypes.add(\"PBEWithHmacSHA512\/256AndAES_128\".toUpperCase(Locale.ENGLISH));\n@@ -78,0 +80,2 @@\n+        validTypes.add(\"PBEWithHmacSHA512\/224AndAES_256\".toUpperCase(Locale.ENGLISH));\n+        validTypes.add(\"PBEWithHmacSHA512\/256AndAES_256\".toUpperCase(Locale.ENGLISH));\n@@ -80,3 +84,2 @@\n-    public static final class PBEWithMD5AndDES\n-            extends PBEKeyFactory {\n-        public PBEWithMD5AndDES()  {\n+    public static final class PBEWithMD5AndDES extends PBEKeyFactory {\n+        public PBEWithMD5AndDES() {\n@@ -87,3 +90,2 @@\n-    public static final class PBEWithSHA1AndDESede\n-            extends PBEKeyFactory {\n-        public PBEWithSHA1AndDESede()  {\n+    public static final class PBEWithSHA1AndDESede extends PBEKeyFactory {\n+        public PBEWithSHA1AndDESede() {\n@@ -94,3 +96,2 @@\n-    public static final class PBEWithSHA1AndRC2_40\n-            extends PBEKeyFactory {\n-        public PBEWithSHA1AndRC2_40()  {\n+    public static final class PBEWithSHA1AndRC2_40 extends PBEKeyFactory {\n+        public PBEWithSHA1AndRC2_40() {\n@@ -101,3 +102,2 @@\n-    public static final class PBEWithSHA1AndRC2_128\n-            extends PBEKeyFactory {\n-        public PBEWithSHA1AndRC2_128()  {\n+    public static final class PBEWithSHA1AndRC2_128 extends PBEKeyFactory {\n+        public PBEWithSHA1AndRC2_128() {\n@@ -108,3 +108,2 @@\n-    public static final class PBEWithSHA1AndRC4_40\n-            extends PBEKeyFactory {\n-        public PBEWithSHA1AndRC4_40()  {\n+    public static final class PBEWithSHA1AndRC4_40 extends PBEKeyFactory {\n+        public PBEWithSHA1AndRC4_40() {\n@@ -115,3 +114,2 @@\n-    public static final class PBEWithSHA1AndRC4_128\n-            extends PBEKeyFactory {\n-        public PBEWithSHA1AndRC4_128()  {\n+    public static final class PBEWithSHA1AndRC4_128 extends PBEKeyFactory {\n+        public PBEWithSHA1AndRC4_128() {\n@@ -125,3 +123,2 @@\n-    public static final class PBEWithMD5AndTripleDES\n-            extends PBEKeyFactory {\n-        public PBEWithMD5AndTripleDES()  {\n+    public static final class PBEWithMD5AndTripleDES extends PBEKeyFactory {\n+        public PBEWithMD5AndTripleDES() {\n@@ -132,3 +129,2 @@\n-    public static final class PBEWithHmacSHA1AndAES_128\n-            extends PBEKeyFactory {\n-        public PBEWithHmacSHA1AndAES_128()  {\n+    public static final class PBEWithHmacSHA1AndAES_128 extends PBEKeyFactory {\n+        public PBEWithHmacSHA1AndAES_128() {\n@@ -141,1 +137,1 @@\n-        public PBEWithHmacSHA224AndAES_128()  {\n+        public PBEWithHmacSHA224AndAES_128() {\n@@ -148,1 +144,1 @@\n-        public PBEWithHmacSHA256AndAES_128()  {\n+        public PBEWithHmacSHA256AndAES_128() {\n@@ -155,1 +151,1 @@\n-        public PBEWithHmacSHA384AndAES_128()  {\n+        public PBEWithHmacSHA384AndAES_128() {\n@@ -162,1 +158,1 @@\n-        public PBEWithHmacSHA512AndAES_128()  {\n+        public PBEWithHmacSHA512AndAES_128() {\n@@ -167,1 +163,8 @@\n-    public static final class PBEWithHmacSHA1AndAES_256\n+    public static final class PBEWithHmacSHA512_224AndAES_128\n+            extends PBEKeyFactory {\n+        public PBEWithHmacSHA512_224AndAES_128() {\n+            super(\"PBEWithHmacSHA512\/224AndAES_128\");\n+        }\n+    }\n+\n+    public static final class PBEWithHmacSHA512_256AndAES_128\n@@ -169,1 +172,7 @@\n-        public PBEWithHmacSHA1AndAES_256()  {\n+        public PBEWithHmacSHA512_256AndAES_128() {\n+            super(\"PBEWithHmacSHA512\/256AndAES_128\");\n+        }\n+    }\n+\n+    public static final class PBEWithHmacSHA1AndAES_256 extends PBEKeyFactory {\n+        public PBEWithHmacSHA1AndAES_256() {\n@@ -176,1 +185,1 @@\n-        public PBEWithHmacSHA224AndAES_256()  {\n+        public PBEWithHmacSHA224AndAES_256() {\n@@ -183,1 +192,1 @@\n-        public PBEWithHmacSHA256AndAES_256()  {\n+        public PBEWithHmacSHA256AndAES_256() {\n@@ -190,1 +199,1 @@\n-        public PBEWithHmacSHA384AndAES_256()  {\n+        public PBEWithHmacSHA384AndAES_256() {\n@@ -197,1 +206,1 @@\n-        public PBEWithHmacSHA512AndAES_256()  {\n+        public PBEWithHmacSHA512AndAES_256() {\n@@ -202,0 +211,14 @@\n+    public static final class PBEWithHmacSHA512_224AndAES_256\n+            extends PBEKeyFactory {\n+        public PBEWithHmacSHA512_224AndAES_256() {\n+            super(\"PBEWithHmacSHA512\/224AndAES_256\");\n+        }\n+    }\n+\n+    public static final class PBEWithHmacSHA512_256AndAES_256\n+            extends PBEKeyFactory {\n+        public PBEWithHmacSHA512_256AndAES_256() {\n+            super(\"PBEWithHmacSHA512\/256AndAES_256\");\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBEKeyFactory.java","additions":58,"deletions":35,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -92,0 +92,6 @@\n+            case \"HmacSHA512\/224\":\n+                kdf = new PBKDF2Core.HmacSHA512_224();\n+                break;\n+            case \"HmacSHA512\/256\":\n+                kdf = new PBKDF2Core.HmacSHA512_256();\n+                break;\n@@ -373,0 +379,14 @@\n+    public static final class HmacSHA512_224AndAES_128 extends PBES2Core {\n+        public HmacSHA512_224AndAES_128()\n+            throws NoSuchAlgorithmException, NoSuchPaddingException {\n+            super(\"HmacSHA512\/224\", \"AES\", 16);\n+        }\n+    }\n+\n+    public static final class HmacSHA512_256AndAES_128 extends PBES2Core {\n+        public HmacSHA512_256AndAES_128()\n+            throws NoSuchAlgorithmException, NoSuchPaddingException {\n+            super(\"HmacSHA512\/256\", \"AES\", 16);\n+        }\n+    }\n+\n@@ -407,0 +427,13 @@\n+\n+    public static final class HmacSHA512_224AndAES_256 extends PBES2Core {\n+        public HmacSHA512_224AndAES_256()\n+            throws NoSuchAlgorithmException, NoSuchPaddingException {\n+            super(\"HmacSHA512\/224\", \"AES\", 32);\n+        }\n+    }\n+    public static final class HmacSHA512_256AndAES_256 extends PBES2Core {\n+        public HmacSHA512_256AndAES_256()\n+            throws NoSuchAlgorithmException, NoSuchPaddingException {\n+            super(\"HmacSHA512\/256\", \"AES\", 32);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Core.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -169,0 +169,2 @@\n+        case \"HmacSHA512\/224\":\n+        case \"HmacSHA512\/256\":\n@@ -288,1 +290,3 @@\n-                    !o.stdName().equals(\"HmacSHA512\"))) {\n+                    !o.stdName().equals(\"HmacSHA512\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/224\") &&\n+                    !o.stdName().equals(\"HmacSHA512\/256\"))) {\n@@ -363,1 +367,1 @@\n-        \/\/ algorithm is id-hmacWithSHA1\/SHA224\/SHA256\/SHA384\/SHA512\n+        \/\/ algorithm is id-hmacWith<MD>\n@@ -400,1 +404,2 @@\n-     * or HmacSHA512, and <encryption> is AES with a keysize suffix.\n+     * HmacSHA512, HmacSHA512\/224, or HmacSHA512\/256 and <encryption> is\n+     * AES with a keysize suffix.\n@@ -442,0 +447,12 @@\n+    public static final class HmacSHA512_224AndAES_128 extends PBES2Parameters {\n+        public HmacSHA512_224AndAES_128() throws NoSuchAlgorithmException {\n+            super(\"PBEWithHmacSHA512\/224AndAES_128\");\n+        }\n+    }\n+\n+    public static final class HmacSHA512_256AndAES_128 extends PBES2Parameters {\n+        public HmacSHA512_256AndAES_128() throws NoSuchAlgorithmException {\n+            super(\"PBEWithHmacSHA512\/256AndAES_128\");\n+        }\n+    }\n+\n@@ -471,0 +488,12 @@\n+\n+    public static final class HmacSHA512_224AndAES_256 extends PBES2Parameters {\n+        public HmacSHA512_224AndAES_256() throws NoSuchAlgorithmException {\n+            super(\"PBEWithHmacSHA512\/224AndAES_256\");\n+        }\n+    }\n+\n+    public static final class HmacSHA512_256AndAES_256 extends PBES2Parameters {\n+        public HmacSHA512_256AndAES_256() throws NoSuchAlgorithmException {\n+            super(\"PBEWithHmacSHA512\/256AndAES_256\");\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Parameters.java","additions":32,"deletions":3,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -38,2 +38,3 @@\n- * PBKDF2 with HmacSHA1\/HmacSHA224\/HmacSHA256\/HmacSHA384\/HmacSHA512\n- * pseudo random function (PRF) as defined in PKCS#5 v2.1.\n+ * PBKDF2 with HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512,\n+ * HmacSHA512\/224, and HmacSHA512\/256 pseudo random function (PRF) as\n+ * defined in PKCS#5 v2.1.\n@@ -196,0 +197,12 @@\n+\n+    public static final class HmacSHA512_224 extends PBKDF2Core {\n+        public HmacSHA512_224() {\n+            super(\"HmacSHA512\/224\");\n+        }\n+    }\n+\n+    public static final class HmacSHA512_256 extends PBKDF2Core {\n+        public HmacSHA512_256() {\n+            super(\"HmacSHA512\/256\");\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBKDF2Core.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,6 @@\n+        case \"HmacSHA512\/224\":\n+                kdf = new PBKDF2Core.HmacSHA512_224();\n+                break;\n+        case \"HmacSHA512\/256\":\n+                kdf = new PBKDF2Core.HmacSHA512_256();\n+                break;\n@@ -224,0 +230,12 @@\n+\n+    public static final class HmacSHA512_224 extends PBMAC1Core {\n+        public HmacSHA512_224() throws NoSuchAlgorithmException {\n+            super(\"HmacSHA512\/224\", \"SHA-512\/224\", 128);\n+        }\n+    }\n+\n+    public static final class HmacSHA512_256 extends PBMAC1Core {\n+        public HmacSHA512_256() throws NoSuchAlgorithmException {\n+            super(\"HmacSHA512\/256\", \"SHA-512\/256\", 128);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBMAC1Core.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -350,0 +350,7 @@\n+        ps(\"Cipher\", \"PBEWithHmacSHA512\/224AndAES_128\",\n+                \"com.sun.crypto.provider.PBES2Core$HmacSHA512_224AndAES_128\");\n+\n+        ps(\"Cipher\", \"PBEWithHmacSHA512\/256AndAES_128\",\n+                \"com.sun.crypto.provider.PBES2Core$HmacSHA512_256AndAES_128\");\n+\n+\n@@ -365,0 +372,6 @@\n+        ps(\"Cipher\", \"PBEWithHmacSHA512\/224AndAES_256\",\n+                \"com.sun.crypto.provider.PBES2Core$HmacSHA512_224AndAES_256\");\n+\n+        ps(\"Cipher\", \"PBEWithHmacSHA512\/256AndAES_256\",\n+                \"com.sun.crypto.provider.PBES2Core$HmacSHA512_256AndAES_256\");\n+\n@@ -501,0 +514,6 @@\n+        ps(\"AlgorithmParameters\", \"PBEWithHmacSHA512\/224AndAES_128\",\n+                \"com.sun.crypto.provider.PBES2Parameters$HmacSHA512_224AndAES_128\");\n+\n+        ps(\"AlgorithmParameters\", \"PBEWithHmacSHA512\/256AndAES_128\",\n+                \"com.sun.crypto.provider.PBES2Parameters$HmacSHA512_256AndAES_128\");\n+\n@@ -516,0 +535,6 @@\n+        ps(\"AlgorithmParameters\", \"PBEWithHmacSHA512\/224AndAES_256\",\n+                \"com.sun.crypto.provider.PBES2Parameters$HmacSHA512_224AndAES_256\");\n+\n+        ps(\"AlgorithmParameters\", \"PBEWithHmacSHA512\/256AndAES_256\",\n+                \"com.sun.crypto.provider.PBES2Parameters$HmacSHA512_256AndAES_256\");\n+\n@@ -598,0 +623,6 @@\n+        ps(\"SecretKeyFactory\", \"PBEWithHmacSHA512\/224AndAES_128\",\n+                \"com.sun.crypto.provider.PBEKeyFactory$PBEWithHmacSHA512_224AndAES_128\");\n+\n+        ps(\"SecretKeyFactory\", \"PBEWithHmacSHA512\/256AndAES_128\",\n+                \"com.sun.crypto.provider.PBEKeyFactory$PBEWithHmacSHA512_256AndAES_128\");\n+\n@@ -613,0 +644,6 @@\n+        ps(\"SecretKeyFactory\", \"PBEWithHmacSHA512\/224AndAES_256\",\n+                \"com.sun.crypto.provider.PBEKeyFactory$PBEWithHmacSHA512_224AndAES_256\");\n+\n+        ps(\"SecretKeyFactory\", \"PBEWithHmacSHA512\/256AndAES_256\",\n+                \"com.sun.crypto.provider.PBEKeyFactory$PBEWithHmacSHA512_256AndAES_256\");\n+\n@@ -625,0 +662,4 @@\n+        ps(\"SecretKeyFactory\", \"PBKDF2WithHmacSHA512\/224\",\n+                \"com.sun.crypto.provider.PBKDF2Core$HmacSHA512_224\");\n+        ps(\"SecretKeyFactory\", \"PBKDF2WithHmacSHA512\/256\",\n+                \"com.sun.crypto.provider.PBKDF2Core$HmacSHA512_256\");\n@@ -689,0 +730,5 @@\n+        ps(\"Mac\", \"PBEWithHmacSHA512\/224\",\n+                \"com.sun.crypto.provider.PBMAC1Core$HmacSHA512_224\", null, attrs);\n+        ps(\"Mac\", \"PBEWithHmacSHA512\/256\",\n+                \"com.sun.crypto.provider.PBMAC1Core$HmacSHA512_256\", null, attrs);\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/SunJCE.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -311,0 +311,2 @@\n+    private static final String SHA512TRUNCATED = \"SHA512\/2\";\n+\n@@ -323,8 +325,18 @@\n-        String[] parts = new String[3];\n-        int count = 0;\n-        StringTokenizer parser = new StringTokenizer(transformation, \"\/\");\n-        try {\n-            while (parser.hasMoreTokens() && count < 3) {\n-                parts[count++] = parser.nextToken().trim();\n-            }\n-            if (count == 0 || count == 2) {\n+        String[] parts = { \"\", \"\", \"\" };\n+\n+        \/\/ check if the transformation contains algorithms with \"\/\" in their\n+        \/\/ name which can cause the parsing logic to go wrong\n+        int sha512Idx = transformation.toUpperCase(Locale.ENGLISH).indexOf\n+                (SHA512TRUNCATED);\n+        int startIdx = (sha512Idx == -1? 0 :\n+            sha512Idx + SHA512TRUNCATED.length());\n+        int endIdx = transformation.indexOf('\/', startIdx);\n+        if (endIdx == -1) {\n+            \/\/ algorithm\n+            parts[0] = transformation.trim();\n+        } else {\n+            \/\/ algorithm\/mode\/padding\n+            parts[0] = transformation.substring(0, endIdx).trim();\n+            startIdx = endIdx+1;\n+            endIdx = transformation.indexOf('\/', startIdx);\n+            if (endIdx == -1) {\n@@ -332,6 +344,1 @@\n-                                               + \" format:\" +\n-                                               transformation);\n-            }\n-            \/\/ treats all subsequent tokens as part of padding\n-            if (count == 3 && parser.hasMoreTokens()) {\n-                parts[2] = parts[2] + parser.nextToken(\"\\r\\n\");\n+                            + \" format:\" + transformation);\n@@ -339,3 +346,2 @@\n-        } catch (NoSuchElementException e) {\n-            throw new NoSuchAlgorithmException(\"Invalid transformation \" +\n-                                           \"format:\" + transformation);\n+            parts[1] = transformation.substring(startIdx, endIdx).trim();\n+            parts[2] = transformation.substring(endIdx+1).trim();\n@@ -343,1 +349,1 @@\n-        if ((parts[0] == null) || (parts[0].isEmpty())) {\n+        if (parts[0].isEmpty()) {\n@@ -447,6 +453,0 @@\n-        if ((mode != null) && (mode.isEmpty())) {\n-            mode = null;\n-        }\n-        if ((pad != null) && (pad.isEmpty())) {\n-            pad = null;\n-        }\n@@ -454,2 +454,2 @@\n-        if ((mode == null) && (pad == null)) {\n-            \/\/ AES\n+        if ((mode.length() == 0) && (pad.length() == 0)) {\n+            \/\/ Algorithm only\n@@ -458,2 +458,2 @@\n-        } else { \/\/ if ((mode != null) && (pad != null)) {\n-            \/\/ AES\/CBC\/PKCS5Padding\n+        } else {\n+            \/\/ Algorithm w\/ at least mode or padding or both\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,2 @@\n+    HMAC_SHA512_224_AES_128(\"PBEWithHmacSHA512\/224AndAES_128\", \"\", \"\", AbstractPBEWrapper.AES),\n+    HMAC_SHA512_256_AES_128(\"PBEWithHmacSHA512\/256AndAES_128\", \"\", \"\", AbstractPBEWrapper.AES),\n@@ -58,0 +60,2 @@\n+    HMAC_SHA512_224_AES_256(\"PBEWithHmacSHA512\/224AndAES_256\", \"\", \"\", AbstractPBEWrapper.AES),\n+    HMAC_SHA512_256_AES_256(\"PBEWithHmacSHA512\/256AndAES_256\", \"\", \"\", AbstractPBEWrapper.AES),\n@@ -62,1 +66,4 @@\n-    PBKDF_HMAC_SHA512(\"PBKDF2WithHmacSHA512\", \"\", \"\", AbstractPBEWrapper.PBKDF2);\n+    PBKDF_HMAC_SHA512(\"PBKDF2WithHmacSHA512\", \"\", \"\", AbstractPBEWrapper.PBKDF2),\n+    PBKDF_HMAC_SHA512_224(\"PBKDF2WithHmacSHA512\/224\", \"\", \"\", AbstractPBEWrapper.PBKDF2),\n+    PBKDF_HMAC_SHA512_256(\"PBKDF2WithHmacSHA512\/256\", \"\", \"\", AbstractPBEWrapper.PBKDF2);\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/CICO\/PBEFunc\/PBEAlgorithm.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n- * @bug 8048599 8248268\n+ * @bug 8048599 8248268 8288050\n@@ -77,0 +77,2 @@\n+            \"PBEWithHmacSHA512\/224AndAES_128\",\n+            \"PBEWithHmacSHA512\/256AndAES_128\",\n@@ -79,1 +81,4 @@\n-            \"PBEWithHmacSHA512AndAES_256\" };\n+            \"PBEWithHmacSHA512AndAES_256\",\n+            \"PBEWithHmacSHA512\/224AndAES_256\",\n+            \"PBEWithHmacSHA512\/256AndAES_256\",\n+    };\n@@ -238,1 +243,3 @@\n-            String baseAlgo = alg.split(\"\/\")[0].toUpperCase();\n+            String keyAlgo = (alg.endsWith(\"Padding\") ?\n+                    alg.split(\"\/\")[0].toUpperCase() : alg);\n+\n@@ -243,1 +250,1 @@\n-                    && (baseAlgo.endsWith(\"TRIPLEDES\") || alg\n+                    && (keyAlgo.endsWith(\"TRIPLEDES\") || alg\n@@ -249,1 +256,1 @@\n-            SecretKeyFactory skf = SecretKeyFactory.getInstance(baseAlgo, p);\n+            SecretKeyFactory skf = SecretKeyFactory.getInstance(keyAlgo, p);\n@@ -283,1 +290,2 @@\n-        String algo = transformation.split(\"\/\")[0];\n+        String algo = (transformation.endsWith(\"Padding\") ?\n+                transformation.split(\"\/\")[0] : transformation);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/KeyWrap\/TestCipherKeyWrapperTest.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4953553 8002277\n+ * @bug 4953553 8002277 8288050\n@@ -57,0 +57,2 @@\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/DecryptWithoutParameters.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6209660 6383200\n+ * @bug 6209660 6383200 8288050\n@@ -53,1 +53,3 @@\n-        \"PBEWithHmacSHA512AndAES_128\"\n+        \"PBEWithHmacSHA512AndAES_128\",\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBEInvalidParamsTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6341599 6383200\n+ * @bug 6341599 6383200 8288050\n@@ -49,1 +49,3 @@\n-        \"PBKDF2WithHmacSHA512\"\n+        \"PBKDF2WithHmacSHA512\",\n+        \"PBKDF2WithHmacSHA512\/224\",\n+        \"PBKDF2WithHmacSHA512\/256\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBEKeysAlgorithmNames.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4944783 6383200\n+ * @bug 4944783 6383200 8288050\n@@ -52,1 +52,3 @@\n-        \"PBEWithHmacSHA512AndAES_128\"\n+        \"PBEWithHmacSHA512AndAES_128\",\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBEParametersTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6383200\n+ * @bug 6383200 8288050\n@@ -31,0 +31,1 @@\n+import java.util.Locale;\n@@ -41,1 +42,10 @@\n-        \"PBEWithHmacSHA512AndAES_128\"\n+        \"PBEWithHmacSHA512AndAES_128\",\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n+        \"PBEWithHmacSha1AndAES_128\/CBC\/PKCS5PAdding\",\n+        \"PBEWithHmacSHA224andAES_128\/CBC\/PkCS5Padding\",\n+        \"PBEWithHmacSHA256AndAes_128\/CBC\/PKCS5PaddIng\",\n+        \"PBEWithHmacSHa384AndAES_128\/CbC\/PKCS5Padding\",\n+        \"PBEWithHmacSHA512andAES_128\/CBc\/PKCS5Padding\",\n+        \"PBEWithHmacSha512\/224andAES_128\/cBC\/PKCS5Padding\",\n+        \"PBEWithHmacShA512\/256AndAES_128\/CBC\/pkCS5Padding\",\n@@ -67,1 +77,3 @@\n-        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(algo);\n+        int modeIdx = algo.toUpperCase(Locale.ENGLISH).indexOf(\"\/CBC\");\n+        String keyAlgo = (modeIdx == -1 ? algo : algo.substring(0, modeIdx));\n+        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(keyAlgo);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBES2Test.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @bug 8041781\n+ * @bug 8041781 8288050\n@@ -72,0 +72,2 @@\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n@@ -76,1 +78,3 @@\n-        \"PBEWithHmacSHA512AndAES_256\"\n+        \"PBEWithHmacSHA512AndAES_256\",\n+        \"PBEWithHmacSHA512\/224AndAES_256\",\n+        \"PBEWithHmacSHA512\/256AndAES_256\",\n@@ -118,3 +122,4 @@\n-        String baseAlgo\n-                = new StringTokenizer(algo, \"\/\").nextToken().toUpperCase();\n-        boolean isAES = baseAlgo.contains(\"AES\");\n+        String keyAlgo = (algo.endsWith(\"Padding\") ?\n+                new StringTokenizer(algo, \"\/\").nextToken().toUpperCase() :\n+                algo);\n+        boolean isAES = keyAlgo.contains(\"AES\");\n@@ -128,1 +133,1 @@\n-            SecretKeyFactory skf = SecretKeyFactory.getInstance(baseAlgo, p);\n+            SecretKeyFactory skf = SecretKeyFactory.getInstance(keyAlgo, p);\n@@ -164,1 +169,1 @@\n-            if (baseAlgo.endsWith(\"TRIPLEDES\") || baseAlgo.endsWith(\"AES_256\")) {\n+            if (keyAlgo.endsWith(\"TRIPLEDES\") || keyAlgo.endsWith(\"AES_256\")) {\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBESealedObject.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @bug 8041781\n+ * @bug 8041781 7181214 8288050\n@@ -50,1 +50,3 @@\n-        \"PBKDF2WithHmacSHA512\"\n+        \"PBKDF2WithHmacSHA512\",\n+        \"PBKDF2WithHmacSHA512\/224\",\n+        \"PBKDF2WithHmacSHA512\/256\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBKDF2Translate.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @bug 8041787\n+ * @bug 8041787 8288050\n@@ -53,1 +53,3 @@\n-            \"PBEWithHmacSHA512\"\n+            \"PBEWithHmacSHA512\",\n+            \"PBEWithHmacSHA512\/224\",\n+            \"PBEWithHmacSHA512\/256\",\n@@ -61,1 +63,3 @@\n-            \"PBKDF2WithHmacSHA512\"\n+            \"PBKDF2WithHmacSHA512\",\n+            \"PBKDF2WithHmacSHA512\/224\",\n+            \"PBKDF2WithHmacSHA512\/256\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBMacBuffer.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @bug 8041787\n+ * @bug 8041787 8288050\n@@ -49,1 +49,3 @@\n-            \"PBEWithHmacSHA512\"\n+            \"PBEWithHmacSHA512\",\n+            \"PBEWithHmacSHA512\/224\",\n+            \"PBEWithHmacSHA512\/256\",\n@@ -57,1 +59,3 @@\n-            \"PBKDF2WithHmacSHA512\"\n+            \"PBKDF2WithHmacSHA512\",\n+            \"PBKDF2WithHmacSHA512\/224\",\n+            \"PBKDF2WithHmacSHA512\/256\",\n@@ -179,0 +183,1 @@\n+\n@@ -184,1 +189,1 @@\n-        if (m.find()) {\n+        while (m.find()) { \/\/ use the lastly found number\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/PBMacDoFinalVsUpdate.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @bug 8041781\n+ * @bug 8041781 8288050\n@@ -72,0 +72,2 @@\n+        \"PBEWithHmacSHA512\/224AndAES_128\",\n+        \"PBEWithHmacSHA512\/256AndAES_128\",\n@@ -76,1 +78,3 @@\n-        \"PBEWithHmacSHA512AndAES_256\"\n+        \"PBEWithHmacSHA512AndAES_256\",\n+        \"PBEWithHmacSHA512\/224AndAES_256\",\n+        \"PBEWithHmacSHA512\/256AndAES_256\",\n@@ -119,3 +123,4 @@\n-        String baseAlgo\n-                = new StringTokenizer(algo, \"\/\").nextToken().toUpperCase();\n-        boolean isAES = baseAlgo.contains(\"AES\");\n+        String keyAlgo = (algo.endsWith(\"Padding\") ?\n+                new StringTokenizer(algo, \"\/\").nextToken().toUpperCase() :\n+                algo);\n+        boolean isAES = algo.contains(\"AES\");\n@@ -131,1 +136,1 @@\n-            SecretKeyFactory skf = SecretKeyFactory.getInstance(baseAlgo, p);\n+            SecretKeyFactory skf = SecretKeyFactory.getInstance(keyAlgo, p);\n@@ -151,2 +156,2 @@\n-            if ((baseAlgo.endsWith(\"TRIPLEDES\")\n-                    || baseAlgo.endsWith(\"AES_256\")) && !isUnlimited) {\n+            if ((keyAlgo.endsWith(\"TRIPLEDES\")\n+                    || keyAlgo.endsWith(\"AES_256\")) && !isUnlimited) {\n@@ -162,2 +167,2 @@\n-            if ((baseAlgo.endsWith(\"TRIPLEDES\")\n-                    || baseAlgo.endsWith(\"AES_256\")) && !isUnlimited) {\n+            if ((keyAlgo.endsWith(\"TRIPLEDES\")\n+                    || keyAlgo.endsWith(\"AES_256\")) && !isUnlimited) {\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/TestCipherKeyWrapperPBEKey.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n- * @bug 8048601\n+ * @bug 8048601 8288050\n@@ -58,0 +58,1 @@\n+        \"PBEWithHmacSHA512\/224AndAES_128\", \"PBEWithHmacSHA512\/256AndAES_128\",\n@@ -60,1 +61,2 @@\n-        \"PBEWithHmacSHA512AndAES_256\", \"PBKDF2WithHmacSHA1\",\n+        \"PBEWithHmacSHA512AndAES_256\", \"PBEWithHmacSHA512\/224AndAES_256\",\n+        \"PBEWithHmacSHA512\/256AndAES_256\", \"PBKDF2WithHmacSHA1\",\n@@ -62,1 +64,3 @@\n-        \"PBKDF2WithHmacSHA384\", \"PBKDF2WithHmacSHA512\"};\n+        \"PBKDF2WithHmacSHA384\", \"PBKDF2WithHmacSHA512\",\n+        \"PBKDF2WithHmacSHA512\/224\", \"PBKDF2WithHmacSHA512\/256\",\n+    };\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/TextLength\/TestCipherTextLength.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 4628062 4963723 8267319\n+ * @bug 4628062 4963723 8267319 8288050\n@@ -43,0 +43,2 @@\n+    private static final int[] HMACSHA512_224_SIZES = { 28 };\n+    private static final int[] HMACSHA512_256_SIZES = { 32 };\n@@ -77,0 +79,1 @@\n+        System.out.println(algo + \" Passed!\");\n@@ -83,16 +86,8 @@\n-        String testName = test.getClass().getName();\n-        if (test.execute(\"AES\", AES_SIZES)) {\n-            System.out.println(testName + \": AES Passed!\");\n-        }\n-        if (test.execute(\"HmacSHA224\", HMACSHA224_SIZES)) {\n-            System.out.println(testName + \": HmacSHA224 Passed!\");\n-        }\n-        if (test.execute(\"HmacSHA256\", HMACSHA256_SIZES)) {\n-            System.out.println(testName + \": HmacSHA256 Passed!\");\n-        }\n-        if (test.execute(\"HmacSHA384\", HMACSHA384_SIZES)) {\n-            System.out.println(testName + \": HmacSHA384 Passed!\");\n-        }\n-        if (test.execute(\"HmacSHA512\", HMACSHA512_SIZES)) {\n-            System.out.println(testName + \": HmacSHA512 Passed!\");\n-        }\n+\n+        test.execute(\"AES\", AES_SIZES);\n+        test.execute(\"HmacSHA224\", HMACSHA224_SIZES);\n+        test.execute(\"HmacSHA256\", HMACSHA256_SIZES);\n+        test.execute(\"HmacSHA384\", HMACSHA384_SIZES);\n+        test.execute(\"HmacSHA512\", HMACSHA512_SIZES);\n+        test.execute(\"HmacSHA512\/224\", HMACSHA512_224_SIZES);\n+        test.execute(\"HmacSHA512\/256\", HMACSHA512_256_SIZES);\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyGenerator\/Test4628062.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4893959 8013069\n+ * @bug 4893959 8013069 8288050\n@@ -39,0 +39,1 @@\n+\n@@ -45,1 +46,3 @@\n-        \"PBEWithHmacSHA512\"\n+        \"PBEWithHmacSHA512\",\n+        \"PBEWithHmacSHA512\/224\",\n+        \"PBEWithHmacSHA512\/256\",\n@@ -47,1 +50,1 @@\n-    private static final int[] MAC_LENGTHS = { 20, 20, 28, 32, 48, 64 };\n+    private static final int[] MAC_LENGTHS = { 20, 20, 28, 32, 48, 64, 28, 32 };\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/HmacPBESHA1.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4925866\n+ * @bug 4925866 8288050\n@@ -48,1 +48,3 @@\n-        \"PBEWithHmacSHA512\"\n+        \"PBEWithHmacSHA512\",\n+        \"PBEWithHmacSHA512\/224\",\n+        \"PBEWithHmacSHA512\/256\",\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/HmacSaltLengths.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 7087021 8013069\n+ * @bug 7087021 8013069 8288050\n@@ -39,1 +39,3 @@\n-                           \"HmacSHA384\", \"HmacSHA512\" };\n+                           \"HmacSHA384\", \"HmacSHA512\", \"HmacSHA512\/224\",\n+                           \"HmacSHA512\/256\",\n+        };\n@@ -48,1 +50,3 @@\n-                            \"PBEWithHmacSHA384\", \"PBEWithHmacSHA512\" };\n+                            \"PBEWithHmacSHA384\", \"PBEWithHmacSHA512\",\n+                            \"PBEWithHmacSHA512\/224\", \"PBEWithHmacSHA512\/256\",\n+        };\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/MacClone.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,2 +34,4 @@\n-    static final String[] MAC_ALGOS = {\"HmacMD5\", \"HmacSHA1\", \"HmacSHA224\",\n-        \"HmacSHA256\", \"HmacSHA384\", \"HmacSHA512\"};\n+    static final String[] MAC_ALGOS = {\n+            \"HmacMD5\", \"HmacSHA1\", \"HmacSHA224\", \"HmacSHA256\", \"HmacSHA384\",\n+            \"HmacSHA512\", \"HmacSHA512\/224\", \"HmacSHA512\/256\",\n+    };\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Mac\/Utils.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @bug 8075286\n+ * @bug 8075286 8288050\n@@ -52,1 +52,4 @@\n-            new DataTuple(\"1.2.840.113549.2.11\", \"HmacSHA512\"));\n+            new DataTuple(\"1.2.840.113549.2.11\", \"HmacSHA512\"),\n+            new DataTuple(\"1.2.840.113549.2.12\", \"HmacSHA512\/224\"),\n+            new DataTuple(\"1.2.840.113549.2.13\", \"HmacSHA512\/256\")\n+    );\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/NSASuiteB\/TestHmacSHAOids.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}