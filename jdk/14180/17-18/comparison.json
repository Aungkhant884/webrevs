{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.classfile;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.ClassTransform;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.CodeTransform;\n+import jdk.internal.classfile.CompoundElement;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+\/**\n+ * ClassfileBenchmark\n+ *\/\n+@Warmup(iterations = 3)\n+@Measurement(iterations = 5)\n+@Fork(value = 1, jvmArgsAppend = {\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\"})\n+\n+@State(Scope.Benchmark)\n+public class ClassfileBenchmark {\n+    private byte[] benchBytes;\n+    private ClassModel benchModel;\n+    private Classfile sharedCP, newCP, genSM;\n+    private ClassTransform threeLevelNoop;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+        benchBytes = Files.readAllBytes(\n+                FileSystems.getFileSystem(URI.create(\"jrt:\/\"))\n+                .getPath(\"modules\/java.base\/java\/util\/AbstractMap.class\"));\n+        sharedCP = Classfile.of();\n+        newCP = Classfile.of(Classfile.ConstantPoolSharingOption.NEW_POOL);\n+        genSM = Classfile.of(Classfile.StackMapsOption.GENERATE_STACK_MAPS);\n+        benchModel = Classfile.of().parse(benchBytes);\n+        threeLevelNoop = ClassTransform.transformingMethodBodies(CodeTransform.ACCEPT_ALL);\n+        \/\/warmup the model\n+        sharedCP.transform(benchModel, threeLevelNoop);\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    public void parse(Blackhole bh) {\n+        consume(sharedCP.parse(benchBytes));\n+    }\n+\n+    private static void consume(CompoundElement<?> parent) {\n+        parent.forEach(e -> {\n+            if (e instanceof CompoundElement<?> ce) consume(ce);\n+        });\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    public void transformWithSharedCP(Blackhole bh) {\n+        bh.consume(sharedCP.transform(benchModel, threeLevelNoop));\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    public void transformWithNewCP(Blackhole bh) {\n+        bh.consume(newCP.transform(benchModel, threeLevelNoop));\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    public void transformWithNewMaps(Blackhole bh) {\n+        bh.consume(genSM.transform(benchModel, threeLevelNoop));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ClassfileBenchmark.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}