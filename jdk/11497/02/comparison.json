{"files":[{"patch":"@@ -49,0 +49,2 @@\n+  \/\/ Peak memory ever allocated from this code path\n+  size_t peak_size()  const { return _c.peak_size(); }\n@@ -51,0 +53,2 @@\n+\n+  const MemoryCounter* counter() const { return &_c; }\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -45,11 +46,1 @@\n-void MemoryCounter::update_peak_count(size_t count) {\n-  size_t peak_cnt = peak_count();\n-  while (peak_cnt < count) {\n-    size_t old_cnt = Atomic::cmpxchg(&_peak_count, peak_cnt, count, memory_order_relaxed);\n-    if (old_cnt != peak_cnt) {\n-      peak_cnt = old_cnt;\n-    }\n-  }\n-}\n-\n-void MemoryCounter::update_peak_size(size_t sz) {\n+void MemoryCounter::update_peak(size_t size, size_t cnt) {\n@@ -57,3 +48,7 @@\n-  while (peak_sz < sz) {\n-    size_t old_sz = Atomic::cmpxchg(&_peak_size, peak_sz, sz, memory_order_relaxed);\n-    if (old_sz != peak_sz) {\n+  while (peak_sz < size) {\n+    size_t old_sz = Atomic::cmpxchg(&_peak_size, peak_sz, size, memory_order_relaxed);\n+    if (old_sz == peak_sz) {\n+      \/\/ I won\n+      _peak_count = cnt;\n+      break;\n+    } else {\n@@ -64,8 +59,0 @@\n-\n-size_t MemoryCounter::peak_count() const {\n-  return Atomic::load(&_peak_count);\n-}\n-\n-size_t MemoryCounter::peak_size() const {\n-  return Atomic::load(&_peak_size);\n-}\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -48,2 +48,7 @@\n-  DEBUG_ONLY(volatile size_t   _peak_count;)\n-  DEBUG_ONLY(volatile size_t   _peak_size; )\n+#ifdef ASSERT\n+  \/\/ Peak size and count. Note: Peak count is the count at the point\n+  \/\/ peak size was reached, not the absolute highest peak count.\n+  volatile size_t _peak_count;\n+  volatile size_t _peak_size;\n+  void update_peak(size_t size, size_t cnt);\n+#endif \/\/ ASSERT\n@@ -61,1 +66,1 @@\n-      DEBUG_ONLY(update_peak_size(sum);)\n+      DEBUG_ONLY(update_peak(sum, cnt);)\n@@ -63,1 +68,0 @@\n-    DEBUG_ONLY(update_peak_count(cnt);)\n@@ -79,1 +83,1 @@\n-      DEBUG_ONLY(update_peak_size(sum);)\n+      DEBUG_ONLY(update_peak(sum, _count);)\n@@ -86,6 +90,7 @@\n-#ifdef ASSERT\n-  void update_peak_count(size_t cnt);\n-  void update_peak_size(size_t sz);\n-  size_t peak_count() const;\n-  size_t peak_size()  const;\n-#endif \/\/ ASSERT\n+  inline size_t peak_count() const {\n+    return DEBUG_ONLY(Atomic::load(&_peak_count)) NOT_DEBUG(0);\n+  }\n+\n+  inline size_t peak_size() const {\n+    return DEBUG_ONLY(Atomic::load(&_peak_size)) NOT_DEBUG(0);\n+  }\n@@ -128,0 +133,1 @@\n+  inline size_t malloc_peak_size()  const { return _malloc.peak_size(); }\n@@ -130,0 +136,1 @@\n+  inline size_t arena_peak_size()  const { return _arena.peak_size(); }\n@@ -132,2 +139,2 @@\n-  DEBUG_ONLY(inline const MemoryCounter& malloc_counter() const { return _malloc; })\n-  DEBUG_ONLY(inline const MemoryCounter& arena_counter()  const { return _arena;  })\n+  const MemoryCounter* malloc_counter() const { return &_malloc; }\n+  const MemoryCounter* arena_counter()  const { return &_arena;  }\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-void MemReporterBase::print_malloc(size_t amount, size_t count, MEMFLAGS flag) const {\n+void MemReporterBase::print_malloc(const MemoryCounter* c, MEMFLAGS flag) const {\n@@ -53,0 +53,3 @@\n+  const size_t amount = c->size();\n+  const size_t count = c->count();\n+\n@@ -61,0 +64,1 @@\n+  \/\/ blends out mtChunk count number\n@@ -66,0 +70,9 @@\n+\n+  size_t pk_amount = c->peak_size();\n+  if (pk_amount == amount) {\n+    out->print_raw(\" (peak)\");\n+  } else if (pk_amount > amount) {\n+    size_t pk_count = c->peak_count();\n+    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+        amount_in_current_scale(pk_amount), scale, pk_count);\n+  }\n@@ -74,1 +87,1 @@\n-void MemReporterBase::print_malloc_line(size_t amount, size_t count) const {\n+void MemReporterBase::print_malloc_line(const MemoryCounter* c) const {\n@@ -76,1 +89,1 @@\n-  print_malloc(amount, count);\n+  print_malloc(c);\n@@ -86,1 +99,1 @@\n-void MemReporterBase::print_arena_line(size_t amount, size_t count) const {\n+void MemReporterBase::print_arena_line(const MemoryCounter* c) const {\n@@ -88,1 +101,6 @@\n-  output()->print_cr(\"%27s (arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\", \" \",\n+  outputStream* out = output();\n+\n+  const size_t amount = c->size();\n+  const size_t count = c->count();\n+\n+  out->print(\"%27s (arena=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\", \"\",\n@@ -90,0 +108,11 @@\n+\n+  size_t pk_amount = c->peak_size();\n+  if (pk_amount == amount) {\n+    out->print_raw(\" (peak)\");\n+  } else if (pk_amount > amount) {\n+    size_t pk_count = c->peak_count();\n+    out->print(\" (peak=\" SIZE_FORMAT \"%s #\" SIZE_FORMAT \")\",\n+        amount_in_current_scale(pk_amount), scale, pk_count);\n+  }\n+\n+  out->cr();\n@@ -198,1 +227,2 @@\n-    if (amount_in_current_scale(malloc_memory->malloc_size()) > 0) {\n+    if (amount_in_current_scale(malloc_memory->malloc_size()) > 0\n+        DEBUG_ONLY(|| amount_in_current_scale(malloc_memory->malloc_peak_size()) > 0)) {\n@@ -201,1 +231,1 @@\n-      print_malloc_line(malloc_memory->malloc_size(), count);\n+      print_malloc_line(malloc_memory->malloc_counter());\n@@ -208,2 +238,3 @@\n-    if (amount_in_current_scale(malloc_memory->arena_size()) > 0) {\n-      print_arena_line(malloc_memory->arena_size(), malloc_memory->arena_count());\n+    if (amount_in_current_scale(malloc_memory->arena_size()) > 0\n+        DEBUG_ONLY(|| amount_in_current_scale(malloc_memory->arena_peak_size()) > 0)) {\n+      print_arena_line(malloc_memory->arena_counter());\n@@ -274,6 +305,3 @@\n-    \/\/ Don't report free sites; does not count toward omitted count.\n-    if (malloc_site->size() == 0) {\n-      continue;\n-    }\n-    \/\/ Don't report if site has allocated less than one unit of whatever our scale is\n-    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0) {\n+    \/\/ Don't report if site has never allocated less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0\n+                       DEBUG_ONLY(&& amount_in_current_scale(malloc_site->peak_size()) == 0)) {\n@@ -289,1 +317,1 @@\n-    print_malloc(malloc_site->size(), malloc_site->count(),flag);\n+    print_malloc(malloc_site->counter(), flag);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":44,"deletions":16,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  void print_malloc(size_t amount, size_t count, MEMFLAGS flag = mtNone) const;\n+  void print_malloc(const MemoryCounter* c, MEMFLAGS flag = mtNone) const;\n@@ -86,1 +86,1 @@\n-  void print_malloc_line(size_t amount, size_t count) const;\n+  void print_malloc_line(const MemoryCounter* c) const;\n@@ -88,1 +88,1 @@\n-  void print_arena_line(size_t amount, size_t count) const;\n+  void print_arena_line(const MemoryCounter* c) const;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}