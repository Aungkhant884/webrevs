{"files":[{"patch":"@@ -139,0 +139,6 @@\n+    if (elements != NULL) {\n+        for (i = 0; i < nElements; i++) {\n+            NSString *pbFormat = formatForIndex(elements[i]);\n+            if (pbFormat)\n+                [formatArray addObject:pbFormat];\n+        }\n@@ -140,4 +146,2 @@\n-    for (i = 0; i < nElements; i++) {\n-        NSString *pbFormat = formatForIndex(elements[i]);\n-        if (pbFormat)\n-            [formatArray addObject:pbFormat];\n+        (*env)->ReleasePrimitiveArrayCritical(env, inTypes, elements, JNI_ABORT);\n+        [[CClipboard sharedClipboard] declareTypes:formatArray withOwner:inJavaClip jniEnv:env];\n@@ -145,3 +149,0 @@\n-\n-    (*env)->ReleasePrimitiveArrayCritical(env, inTypes, elements, JNI_ABORT);\n-    [[CClipboard sharedClipboard] declareTypes:formatArray withOwner:inJavaClip jniEnv:env];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/CClipboard.m","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -61,2 +61,3 @@\n-    CTS_GetGlyphsAsIntsForCharacters(awtFont, unicodes,\n-                                     cgGlyphs, glyphCodeInts, count);\n+    if (glyphCodeInts != NULL) {\n+        CTS_GetGlyphsAsIntsForCharacters(awtFont, unicodes,\n+                                         cgGlyphs, glyphCodeInts, count);\n@@ -64,3 +65,4 @@\n-    \/\/ Do not use JNI_COMMIT, as that will not free the buffer copy\n-    \/\/ when +ProtectJavaHeap is on.\n-    (*env)->ReleasePrimitiveArrayCritical(env, glyphs, glyphCodeInts, 0);\n+        \/\/ Do not use JNI_COMMIT, as that will not free the buffer copy\n+        \/\/ when +ProtectJavaHeap is on.\n+        (*env)->ReleasePrimitiveArrayCritical(env, glyphs, glyphCodeInts, 0);\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/font\/CCharToGlyphMapper.m","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -280,5 +280,7 @@\n-    rect[0] = partBounds.origin.x;\n-    rect[1] = partBounds.origin.y;\n-    rect[2] = partBounds.size.width;\n-    rect[3] = partBounds.size.height;\n-    (*env)->ReleasePrimitiveArrayCritical(env, rectArray, rect, 0);\n+    if (rect != NULL) {\n+        rect[0] = partBounds.origin.x;\n+        rect[1] = partBounds.origin.y;\n+        rect[2] = partBounds.size.width;\n+        rect[3] = partBounds.size.height;\n+        (*env)->ReleasePrimitiveArrayCritical(env, rectArray, rect, 0);\n+    }\n","filename":"src\/java.desktop\/macosx\/native\/libosxui\/JRSUIController.m","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -338,0 +338,5 @@\n+    if (buffer == 0) {\n+        (*env)->ExceptionClear(env);\n+        JNU_ThrowOutOfMemoryError(env, \"Could not get image buffer\");\n+        return -1;\n+    }\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/swing_GTKEngine.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -439,4 +439,5 @@\n-        BOOL transparent = FALSE;\n-        transparent = IsThemeBackgroundPartiallyTransparentFunc(hTheme, part, state);\n-        copyDIBToBufferedImage(pDstBits, pSrcBits, transparent, w, h, stride);\n-        env->ReleasePrimitiveArrayCritical(array, pDstBits, 0);\n+        if (pDstBits != NULL) {\n+            BOOL transparent = IsThemeBackgroundPartiallyTransparentFunc(hTheme, part, state);\n+            copyDIBToBufferedImage(pDstBits, pSrcBits, transparent, w, h, stride);\n+            env->ReleasePrimitiveArrayCritical(array, pDstBits, 0);\n+        }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ThemeReader.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -166,0 +166,4 @@\n+    if (pLogPalette == NULL) {\n+        env->DeleteLocalRef(paletteBytes);\n+        return NULL;\n+    }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_DataTransferer.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2864,2 +2864,4 @@\n-        for (int i = 0; i < (sizeof indexMap)\/(sizeof *indexMap) && i < colorLen; i++) {\n-            colorsPtr[i] = DesktopColor2RGB(indexMap[i]);\n+        if (colorsPtr != NULL) {\n+            for (int i = 0; i < (sizeof indexMap)\/(sizeof *indexMap) && i < colorLen; i++) {\n+                colorsPtr[i] = DesktopColor2RGB(indexMap[i]);\n+            }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}