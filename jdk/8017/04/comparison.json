{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,8 +301,11 @@\n-        if (contentLength == 0) {\n-            systemHeadersBuilder.setHeader(\"Content-Length\", \"0\");\n-        } else if (contentLength > 0) {\n-            systemHeadersBuilder.setHeader(\"Content-Length\", Long.toString(contentLength));\n-            streaming = false;\n-        } else {\n-            streaming = true;\n-            systemHeadersBuilder.setHeader(\"Transfer-encoding\", \"chunked\");\n+        \/\/ GET, HEAD and DELETE with no request body should not set the Content-Length header\n+        if (requestPublisher != null) {\n+            if (contentLength == 0) {\n+                systemHeadersBuilder.setHeader(\"Content-Length\", \"0\");\n+            } else if (contentLength > 0) {\n+                systemHeadersBuilder.setHeader(\"Content-Length\", Long.toString(contentLength));\n+                streaming = false;\n+            } else {\n+                streaming = true;\n+                systemHeadersBuilder.setHeader(\"Transfer-encoding\", \"chunked\");\n+            }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests that a Content-length header is not sent for GET requests\n+ *          that do not have a body. Also checks that the header is sent when\n+ *          a body is present on the GET request.\n+ * @library \/test\/lib\n+ * @bug 8283544\n+ * @run testng\/othervm ContentLengthHeaderTest\n+ *\/\n+\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import jdk.test.lib.net.URIBuilder;\n+\n+\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertEquals;\n+\n+\n+public class ContentLengthHeaderTest {\n+\n+    final String NO_BODY_PATH = \"\/no_body\";\n+    final String BODY_PATH = \"\/body\";\n+\n+    static HttpServer testContentLengthServer;\n+    static PrintStream testLog = System.err;\n+\n+    URI testContentLengthURI;\n+\n+    @BeforeTest\n+    public void setup() throws IOException, URISyntaxException {\n+        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        testContentLengthServer = HttpServer.create(sa, 0);\n+\n+        \/\/ Create handlers for tests that check for the presence of a Content-length header\n+        testContentLengthServer.createContext(NO_BODY_PATH, new NoContentLengthHandler());\n+        testContentLengthServer.createContext(BODY_PATH, new ContentLengthHandler());\n+        testContentLengthURI = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(testContentLengthServer.getAddress().getPort())\n+                .build();\n+\n+        testContentLengthServer.start();\n+        testLog.println(\"Server up at address: \" + testContentLengthServer.getAddress());\n+        testLog.println(\"Request URI for Client: \" + testContentLengthURI);\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        if (testContentLengthServer != null)\n+            testContentLengthServer.stop(0);\n+    }\n+\n+    @Test\n+    \/\/ A GET request with no request body should have no Content-length header\n+    public void getWithNoBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking GET with no request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .GET()\n+                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    @Test\n+    \/\/ A GET request with a request body should have a Content-length header\n+    public void getWithBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking GET with request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .method(\"GET\", HttpRequest.BodyPublishers.ofString(\"GET Body\"))\n+                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    @Test\n+    \/\/ A DELETE request with no request body should have no Content-length header\n+    public void deleteWithNoBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking DELETE with no request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .DELETE()\n+                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    @Test\n+    \/\/ A DELETE request with a request body should have a Content-length header\n+    public void deleteWithBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking DELETE with request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .method(\"DELETE\", HttpRequest.BodyPublishers.ofString(\"DELETE Body\"))\n+                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    @Test\n+    \/\/ A HEAD request with no request body should have no Content-length header\n+    public void headWithNoBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking HEAD with no request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .HEAD()\n+                .uri(URI.create(testContentLengthURI + NO_BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    @Test\n+    \/\/ A HEAD request with a request body should have a Content-length header\n+    public void headWithBody() throws IOException, InterruptedException {\n+        testLog.println(\"Checking HEAD with request body\");\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .method(\"HEAD\", HttpRequest.BodyPublishers.ofString(\"HEAD Body\"))\n+                .uri(URI.create(testContentLengthURI + BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        \/\/ Sending this request invokes sendResponseHeaders which emits a warning about including\n+        \/\/ a Content-length header with a HEAD request\n+        HttpResponse<String> resp = hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+        assertEquals(resp.statusCode(), 200, resp.body());\n+    }\n+\n+    public static void handleResponse(HttpExchange ex, String body, int rCode) throws IOException {\n+        try (OutputStream os = ex.getResponseBody()) {\n+            byte[] bytes = body.getBytes(UTF_8);\n+            ex.sendResponseHeaders(rCode, bytes.length);\n+            os.write(bytes);\n+        }\n+    }\n+\n+    static class NoContentLengthHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            testLog.println(\"NoContentLengthHandler: Received Headers \" + exchange.getRequestHeaders().entrySet() +\n+                            \" from \" + exchange.getRequestMethod() + \" request.\");\n+            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+\n+            \/\/ Check Content-length header was not set\n+            if (contentLength == null) {\n+                handleResponse(exchange, \"Request completed\",200);\n+            } else {\n+                String responseBody = exchange.getRequestMethod() + \" request contained an unexpected \" +\n+                        \"Content-length header.\";\n+                handleResponse(exchange, responseBody, 400);\n+            }\n+        }\n+    }\n+\n+    static class ContentLengthHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            testLog.println(\"ContentLengthHandler: Received Headers \" + exchange.getRequestHeaders().entrySet() +\n+                            \" from \" + exchange.getRequestMethod() + \" request.\");\n+            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+\n+            \/\/ Check Content-length header was set\n+            if (contentLength != null) {\n+                handleResponse(exchange, \"Request completed\",200);\n+            } else {\n+                String responseBody = \"Expected a Content-length header in \" +\n+                        exchange.getRequestMethod() + \" request but was not present.\";\n+                handleResponse(exchange, responseBody, 400);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ContentLengthHeaderTest.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"}]}