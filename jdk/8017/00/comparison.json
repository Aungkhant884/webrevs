{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,8 +301,14 @@\n-        if (contentLength == 0) {\n-            systemHeadersBuilder.setHeader(\"Content-Length\", \"0\");\n-        } else if (contentLength > 0) {\n-            systemHeadersBuilder.setHeader(\"Content-Length\", Long.toString(contentLength));\n-            streaming = false;\n-        } else {\n-            streaming = true;\n-            systemHeadersBuilder.setHeader(\"Transfer-encoding\", \"chunked\");\n+        \/\/ GET with no body should not set the Content-Length header\n+        if (requestPublisher != null || !\"GET\".equals(request.method())) {\n+            if (contentLength == 0) {\n+                systemHeadersBuilder.setHeader(\"Content-Length\", \"0\");\n+                System.err.println(\"in 1\");\n+            } else if (contentLength > 0) {\n+                systemHeadersBuilder.setHeader(\"Content-Length\", Long.toString(contentLength));\n+                streaming = false;\n+                System.err.println(\"in 2\");\n+            } else {\n+                streaming = true;\n+                systemHeadersBuilder.setHeader(\"Transfer-encoding\", \"chunked\");\n+                System.err.println(\"in 3\");\n+            }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Tests that a Content-length header is not sent for GET requests\n+ *          that do not have a body. Also checks that the header is sent when\n+ *          a body is present on the GET request.\n+ * @bug 8283544\n+ * @run testng\/othervm ContentLengthHeaderTest\n+ *\/\n+\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n+\n+\n+public class ContentLengthHeaderTest {\n+\n+    final String GET_NO_BODY_PATH = \"\/get_no_body\";\n+    final String GET_BODY_PATH = \"\/get_body\";\n+    static final String GET_BODY_STRING = \"Get with body\";\n+\n+    static HttpServer testContentLengthServer;\n+    static PrintStream testLog = System.err;\n+    static String responseString = \"Test Response Body\";\n+\n+    String testContentLenURI;\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        testContentLengthServer = HttpServer.create(sa, 0);\n+\n+        \/\/ Create handlers for tests that check for the presence of a Content-length header\n+        testContentLengthServer.createContext(GET_NO_BODY_PATH, new NoContentLengthHandler());\n+        testContentLengthServer.createContext(GET_BODY_PATH, new ContentLengthHandler());\n+        testContentLenURI = \"http:\/\/\" + testContentLengthServer.getAddress().getHostString() +\n+                             \":\" + testContentLengthServer.getAddress().getPort();\n+\n+        testContentLengthServer.start();\n+        testLog.println(\"Server up at address: \" + testContentLengthServer.getAddress());\n+        testLog.println(\"Request URI for Client: \" + testContentLenURI);\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        testContentLengthServer.stop(0);\n+    }\n+\n+    @Test\n+    \/\/ A GET request with no request body should have no Content-length header\n+    public void getWithNoBody() throws IOException, InterruptedException {\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .GET()\n+                .uri(URI.create(testContentLenURI + GET_NO_BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+    }\n+\n+    @Test\n+    \/\/ A GET request with a request body should have a Content-length header\n+    public void getWithBody() throws IOException, InterruptedException {\n+        HttpRequest req = HttpRequest.newBuilder()\n+                .version(HTTP_1_1)\n+                .method(\"GET\", HttpRequest.BodyPublishers.ofString(GET_BODY_STRING))\n+                .uri(URI.create(testContentLenURI + GET_BODY_PATH))\n+                .build();\n+        HttpClient hc = HttpClient.newHttpClient();\n+        hc.send(req, HttpResponse.BodyHandlers.ofString(UTF_8));\n+    }\n+\n+    public static void handleResponse(HttpExchange ex) throws IOException {\n+        \/\/ Meaningless response to finish off the exchange\n+        try (OutputStream os = ex.getResponseBody()) {\n+            byte[] bytes = responseString.getBytes(UTF_8);\n+            ex.sendResponseHeaders(200, bytes.length);\n+            os.write(bytes);\n+        }\n+    }\n+\n+    static class NoContentLengthHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            testLog.println(\"NoContentLengthHandler Received Headers: \" + exchange.getRequestHeaders().entrySet());\n+            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+\n+            \/\/ Check that content length was not set\n+            assertNull(contentLength);\n+            \/\/ Finish exchange with canned response\n+            handleResponse(exchange);\n+        }\n+    }\n+\n+    static class ContentLengthHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            testLog.println(\"ContentLengthHandler Received Headers: \" +\n+                            exchange.getRequestHeaders().entrySet());\n+            String contentLength = exchange.getRequestHeaders().getFirst(\"Content-length\");\n+\n+            \/\/ Check that the Content-length is correctly set\n+            assertNotNull(contentLength);\n+            assertEquals(Integer.valueOf(contentLength), Integer.valueOf(GET_BODY_STRING.getBytes(UTF_8).length));\n+            \/\/ Finish exchange with canned response\n+            handleResponse(exchange);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ContentLengthHeaderTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}