{"files":[{"patch":"@@ -380,2 +380,5 @@\n-     * modified to match the specification of this method.\n-     * If the system property {@code jdk.security.auth.subject.useTL}\n+     * modified to match the specification of this method. This preserves\n+     * compatibility with code that may still be calling\n+     * {@code getSubject(AccessControlContext)} which retrieves the subject\n+     * from an {@code AccessControlContext}. However,\n+     * if the system property {@code jdk.security.auth.subject.useTL}\n@@ -393,1 +396,1 @@\n-     * @throws NullPointerException if {@code code} is {@code null}\n+     * @throws NullPointerException if {@code action} is {@code null}\n@@ -465,4 +468,4 @@\n-     *       and subject to removal in a future release. Instead, users can\n-     *       call {@link #callAs} to perform the same work, which is based on\n-     *       {@link #doAs(Subject, PrivilegedExceptionAction)}\n-     *       by default in this implementation.\n+     *       and subject to removal in a future release. However, performing\n+     *       work as a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #callAs} has been added\n+     *       which can be used to perform the same work.\n@@ -537,3 +540,4 @@\n-     *       and subject to removal in a future release. Instead, users can\n-     *       call {@link #callAs} to perform the same work, which is based on\n-     *       this method by default in this implementation.\n+     *       and subject to removal in a future release. However, performing\n+     *       work as a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #callAs} has been added\n+     *       which can be used to perform the same work.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}