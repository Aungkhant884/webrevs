{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.reflect.*;\n@@ -35,2 +34,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n@@ -38,1 +35,0 @@\n-import java.security.PrivilegedAction;\n@@ -42,0 +38,4 @@\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+\n+import sun.security.action.GetBooleanAction;\n@@ -292,3 +292,4 @@\n-     *       and subject to removal in a future release. However, obtaining a\n-     *       Subject is useful independent of the Security Manager, so a\n-     *       replacement for this method may be added in a future release.\n+     *       and subject to removal in a future release. However,\n+     *       obtaining a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #current()} has been added\n+     *       which can be used to obtain the current subject.\n@@ -322,0 +323,106 @@\n+    \/\/ Store the current subject in a ThreadLocal when a system property is set.\n+    private static final boolean USE_TL = GetBooleanAction\n+            .privilegedGetProperty(\"jdk.security.auth.subject.useTL\");\n+\n+    private static final InheritableThreadLocal<Subject> SUBJECT_THREAD_LOCAL =\n+            USE_TL ?\n+            new InheritableThreadLocal<>() {\n+                @Override protected Subject initialValue() {\n+                    return null;\n+                }\n+            } : null;\n+\n+    \/**\n+     * Returns the current subject.\n+     * <p>\n+     * The current subject is installed by the {@link #callAs} method.\n+     * When {@code callAs(subject, action)} is called, {@code action} is\n+     * executed with {@code subject} as its current subject which can be\n+     * retrieved by this method. After {@code action} is finished, the current\n+     * subject is reset to its previous value. The current\n+     * subject is {@code null} before the first call of {@code callAs()}.\n+     * <p>\n+     * When a new thread is created, its current subject is the same as\n+     * the one of its parent thread, and will not change even if\n+     * its parent thread's current subject is changed to another value.\n+     *\n+     * @implNote\n+     * By default, this method returns the same value as\n+     * {@code Subject.getSubject(AccessController.getContext())}. This\n+     * preserves compatibility with code that may still be calling {@code doAs}\n+     * which installs the subject in an {@code AccessControlContext}. However,\n+     * if the system property {@systemProperty jdk.security.auth.subject.useTL}\n+     * is set to {@code true}, the subject is retrieved from an inheritable\n+     * {@code ThreadLocal} object. This behavior is subject to\n+     * change in a future version.\n+     *\n+     * @return the current subject, or {@code null} if a current subject is\n+     *      not installed or the current subject is set to {@code null}.\n+     * @see #callAs(Subject, Callable)\n+     * @since 18\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    public static Subject current() {\n+        return USE_TL\n+            ? SUBJECT_THREAD_LOCAL.get()\n+            : getSubject(AccessController.getContext());\n+    }\n+\n+    \/**\n+     * Executes a {@code Callable} with {@code subject} as the\n+     * current subject.\n+     *\n+     * @implNote\n+     * By default, this method calls {@link #doAs(Subject, PrivilegedExceptionAction)\n+     * Subject.doAs(subject, altAction)} which stores the subject in\n+     * a new {@code AccessControlContext}, where {@code altAction.run()}\n+     * is equivalent to {@code action.call()} and the exception thrown is\n+     * modified to match the specification of this method. This preserves\n+     * compatibility with code that may still be calling\n+     * {@code getSubject(AccessControlContext)} which retrieves the subject\n+     * from an {@code AccessControlContext}. However,\n+     * if the system property {@code jdk.security.auth.subject.useTL}\n+     * is set to {@code true}, the current subject will be stored in an inheritable\n+     * {@code ThreadLocal} object. This behavior is subject to change in a\n+     * future version.\n+     *\n+     * @param subject the {@code Subject} that the specified {@code action}\n+     *               will run as.  This parameter may be {@code null}.\n+     * @param action the code to be run with {@code subject} as its current\n+     *               subject. Must not be {@code null}.\n+     * @param <T> the type of value returned by the {@code call} method\n+     *            of {@code action}\n+     * @return the value returned by the {@code call} method of {@code action}\n+     * @throws NullPointerException if {@code action} is {@code null}\n+     * @throws CompletionException if {@code action.call()} throws an exception.\n+     *      The cause of the {@code CompletionException} is set to the exception\n+     *      thrown by {@code action.call()}.\n+     * @see #current()\n+     * @since 18\n+     *\/\n+    public static <T> T callAs(final Subject subject,\n+            final Callable<T> action) throws CompletionException {\n+        if (USE_TL) {\n+            Subject oldSubject = SUBJECT_THREAD_LOCAL.get();\n+            SUBJECT_THREAD_LOCAL.set(subject);\n+            try {\n+                return action.call();\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            } finally {\n+                SUBJECT_THREAD_LOCAL.set(oldSubject);\n+            }\n+        } else {\n+            try {\n+                PrivilegedExceptionAction<T> pa = () -> action.call();\n+                @SuppressWarnings(\"removal\")\n+                var result = doAs(subject, pa);\n+                return result;\n+            } catch (PrivilegedActionException e) {\n+                throw new CompletionException(e.getCause());\n+            } catch (Exception e) {\n+                throw new CompletionException(e);\n+            }\n+        }\n+    }\n+\n@@ -357,0 +464,8 @@\n+     *\n+     * @deprecated This method depends on {@link AccessControlContext}\n+     *       which, in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, is deprecated\n+     *       and subject to removal in a future release. However, performing\n+     *       work as a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #callAs} has been added\n+     *       which can be used to perform the same work.\n@@ -359,0 +474,1 @@\n+    @Deprecated(since=\"18\", forRemoval=true)\n@@ -420,0 +536,8 @@\n+     *\n+     * @deprecated This method depends on {@link AccessControlContext}\n+     *       which, in conjunction with\n+     *       {@linkplain SecurityManager the Security Manager}, is deprecated\n+     *       and subject to removal in a future release. However, performing\n+     *       work as a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #callAs} has been added\n+     *       which can be used to perform the same work.\n@@ -422,0 +546,1 @@\n+    @Deprecated(since=\"18\", forRemoval=true)\n@@ -860,4 +985,1 @@\n-            if (!privCredentials.equals(thatPrivCredentials)) {\n-                return false;\n-            }\n-            return true;\n+            return privCredentials.equals(thatPrivCredentials);\n@@ -936,1 +1058,1 @@\n-        \/**\n+        \/*\n@@ -1247,1 +1369,1 @@\n-                    \/\/ If the caller does not have read permission for\n+                    \/\/ If the caller does not have read permission\n@@ -1319,1 +1441,1 @@\n-                if (this.contains(item) == false) {\n+                if (!this.contains(item)) {\n@@ -1537,1 +1659,1 @@\n-            \/\/ Check whether the caller has permisson to get\n+            \/\/ Check whether the caller has permission to get\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":137,"deletions":15,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.security.AccessControlContext;\n@@ -316,2 +315,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc = AccessController.getContext();\n@@ -321,1 +318,1 @@\n-                AccessController.doPrivileged\n+                AccessController.doPrivilegedWithCombiner\n@@ -324,1 +321,1 @@\n-                        Subject accSubj = Subject.getSubject(acc);\n+                        Subject currSubj = Subject.current();\n@@ -326,1 +323,1 @@\n-                        if (accSubj != null) {\n+                        if (currSubj != null) {\n@@ -329,1 +326,1 @@\n-                                accSubj.getPrivateCredentials\n+                                currSubj.getPrivateCredentials\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/GSSUtil.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -36,1 +35,0 @@\n-import java.security.AccessControlContext;\n@@ -68,1 +66,0 @@\n-        final AccessControlContext acc = AccessController.getContext();\n@@ -72,1 +69,1 @@\n-            creds = AccessController.doPrivileged(\n+            creds = AccessController.doPrivilegedWithCombiner(\n@@ -77,1 +74,1 @@\n-                        serverPrinc, acc);\n+                        serverPrinc);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5AcceptCredential.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.security.AccessControlContext;\n@@ -644,4 +643,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    final AccessControlContext acc =\n-                        AccessController.getContext();\n-\n@@ -653,1 +648,1 @@\n-                           var tmp = AccessController.doPrivileged(\n+                           var tmp = AccessController.doPrivilegedWithCombiner(\n@@ -668,2 +663,1 @@\n-                                        peerName.getKrb5PrincipalName().getName(),\n-                                        acc);\n+                                        peerName.getKrb5PrincipalName().getName());\n@@ -713,1 +707,1 @@\n-                                AccessController.doPrivileged(\n+                                AccessController.doPrivilegedWithCombiner(\n@@ -716,1 +710,1 @@\n-                                        return (Subject.getSubject(acc));\n+                                        return (Subject.current());\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Context.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.security.AccessControlContext;\n@@ -368,2 +367,0 @@\n-        final AccessControlContext acc = AccessController.getContext();\n-\n@@ -374,1 +371,1 @@\n-            return AccessController.doPrivileged(\n+            return AccessController.doPrivilegedWithCombiner(\n@@ -380,2 +377,1 @@\n-                        realCaller,\n-                        clientPrincipal, acc);\n+                        realCaller, clientPrincipal);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5InitCredential.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.security.AccessControlContext;\n@@ -65,4 +64,2 @@\n-        String clientPrincipal, String serverPrincipal,\n-        @SuppressWarnings(\"removal\") AccessControlContext acc) throws LoginException {\n-\n-        \/\/ Try to get ticket from acc's Subject\n+            String clientPrincipal, String serverPrincipal) {\n+        \/\/ Try to get ticket from current Subject\n@@ -70,1 +67,1 @@\n-        Subject accSubj = Subject.getSubject(acc);\n+        Subject currSubj = Subject.current();\n@@ -72,1 +69,1 @@\n-            SubjectComber.find(accSubj, serverPrincipal, clientPrincipal,\n+            SubjectComber.find(currSubj, serverPrincipal, clientPrincipal,\n@@ -86,2 +83,1 @@\n-            String clientPrincipal,\n-            @SuppressWarnings(\"removal\") AccessControlContext acc) throws LoginException {\n+            String clientPrincipal) throws LoginException {\n@@ -89,3 +85,1 @@\n-        \/\/ Try to get ticket from acc's Subject\n-        @SuppressWarnings(\"removal\")\n-        Subject accSubj = Subject.getSubject(acc);\n+        Subject currSubj = Subject.current();\n@@ -93,1 +87,1 @@\n-                SubjectComber.find(accSubj, null, clientPrincipal,\n+                SubjectComber.find(currSubj, null, clientPrincipal,\n@@ -109,2 +103,0 @@\n-     *\n-     * NOTE: This method is also used by JSSE Kerberos Cipher Suites\n@@ -113,2 +105,1 @@\n-        String serverPrincipal, @SuppressWarnings(\"removal\") AccessControlContext acc)\n-                throws LoginException {\n+            String serverPrincipal) throws LoginException {\n@@ -116,2 +107,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Subject accSubj = Subject.getSubject(acc);\n+        Subject currSubj = Subject.current();\n@@ -119,2 +109,2 @@\n-        if (accSubj != null) {\n-            sc = ServiceCreds.getInstance(accSubj, serverPrincipal);\n+        if (currSubj != null) {\n+            sc = ServiceCreds.getInstance(currSubj, serverPrincipal);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Util.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.security.*;\n@@ -43,0 +42,1 @@\n+import java.util.concurrent.Callable;\n@@ -87,2 +87,2 @@\n-            Subject.doAs(clntSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n+            Subject.callAs(clntSubj, new Callable<>() {\n+                public Object call() throws Exception {\n@@ -100,2 +100,2 @@\n-            Subject.doAs(srvSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n+            Subject.callAs(srvSubj, new Callable<Object>() {\n+                public Object call() throws Exception {\n@@ -120,5 +120,2 @@\n-        response = (byte[]) Subject.doAs(clntSubj,\n-            new PrivilegedExceptionAction() {\n-            public Object run() throws Exception {\n-                return (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY);\n-            }});\n+        response = (byte[]) Subject.callAs(clntSubj,\n+                () -> (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY));\n@@ -128,5 +125,2 @@\n-            challenge = (byte[]) Subject.doAs(srvSubj,\n-                new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return srv.evaluateResponse(responseCopy);\n-                }});\n+            challenge = (byte[]) Subject.callAs(srvSubj,\n+                    () -> srv.evaluateResponse(responseCopy));\n@@ -136,5 +130,2 @@\n-                response = (byte[]) Subject.doAs(clntSubj,\n-                    new PrivilegedExceptionAction() {\n-                    public Object run() throws Exception {\n-                        return clnt.evaluateChallenge(challengeCopy);\n-                    }});\n+                response = (byte[]) Subject.callAs(clntSubj,\n+                        () -> clnt.evaluateChallenge(challengeCopy));\n","filename":"test\/jdk\/com\/sun\/security\/sasl\/gsskerb\/AuthOnly.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.security.*;\n@@ -88,3 +87,1 @@\n-            Subject.doAs(clntSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return Sasl.createSaslClient(\n+            Subject.callAs(clntSubj, () ->Sasl.createSaslClient(\n@@ -92,3 +89,1 @@\n-                        clntprops, null);\n-                }\n-            });\n+                        clntprops, null));\n@@ -101,6 +96,3 @@\n-            Subject.doAs(srvSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return Sasl.createSaslServer(MECH, PROTOCOL, SERVER_FQDN,\n-                        srvprops, srvCbh);\n-                }\n-            });\n+            Subject.callAs(srvSubj, () ->\n+                    Sasl.createSaslServer(MECH, PROTOCOL, SERVER_FQDN,\n+                        srvprops, srvCbh));\n@@ -121,5 +113,2 @@\n-        response = (byte[]) Subject.doAs(clntSubj,\n-            new PrivilegedExceptionAction() {\n-            public Object run() throws Exception {\n-                return (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY);\n-            }});\n+        response = Subject.callAs(clntSubj,\n+                () -> (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY));\n@@ -129,5 +118,2 @@\n-            challenge = (byte[]) Subject.doAs(srvSubj,\n-                new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return srv.evaluateResponse(responseCopy);\n-                }});\n+            challenge = Subject.callAs(srvSubj,\n+                    () -> srv.evaluateResponse(responseCopy));\n@@ -137,5 +123,2 @@\n-                response = (byte[]) Subject.doAs(clntSubj,\n-                    new PrivilegedExceptionAction() {\n-                    public Object run() throws Exception {\n-                        return clnt.evaluateChallenge(challengeCopy);\n-                    }});\n+                response = Subject.callAs(clntSubj,\n+                        () -> clnt.evaluateChallenge(challengeCopy));\n","filename":"test\/jdk\/com\/sun\/security\/sasl\/gsskerb\/ConfSecurityLayer.java","additions":12,"deletions":29,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.security.*;\n@@ -87,4 +86,3 @@\n-        final SaslClient clnt = (SaslClient)\n-            Subject.doAs(clntSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return Sasl.createSaslClient(\n+        final SaslClient clnt =\n+            Subject.callAs(clntSubj, () ->\n+                    Sasl.createSaslClient(\n@@ -92,3 +90,1 @@\n-                        clntprops, null);\n-                }\n-            });\n+                        clntprops, null));\n@@ -100,7 +96,4 @@\n-        final SaslServer srv = (SaslServer)\n-            Subject.doAs(srvSubj, new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return Sasl.createSaslServer(MECH, PROTOCOL, SERVER_FQDN,\n-                        srvprops, srvCbh);\n-                }\n-            });\n+        final SaslServer srv =\n+            Subject.callAs(srvSubj, () ->\n+                Sasl.createSaslServer(MECH, PROTOCOL, SERVER_FQDN,\n+                        srvprops, srvCbh));\n@@ -121,5 +114,2 @@\n-        response = (byte[]) Subject.doAs(clntSubj,\n-            new PrivilegedExceptionAction() {\n-            public Object run() throws Exception {\n-                return (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY);\n-            }});\n+        response = Subject.callAs(clntSubj,\n+                () -> (clnt.hasInitialResponse()? clnt.evaluateChallenge(EMPTY) : EMPTY));\n@@ -129,5 +119,2 @@\n-            challenge = (byte[]) Subject.doAs(srvSubj,\n-                new PrivilegedExceptionAction() {\n-                public Object run() throws Exception {\n-                    return srv.evaluateResponse(responseCopy);\n-                }});\n+            challenge = Subject.callAs(srvSubj,\n+                    () -> srv.evaluateResponse(responseCopy));\n@@ -137,5 +124,2 @@\n-                response = (byte[]) Subject.doAs(clntSubj,\n-                    new PrivilegedExceptionAction() {\n-                    public Object run() throws Exception {\n-                        return clnt.evaluateChallenge(challengeCopy);\n-                    }});\n+                response = Subject.callAs(clntSubj,\n+                        () -> clnt.evaluateChallenge(challengeCopy));\n","filename":"test\/jdk\/com\/sun\/security\/sasl\/gsskerb\/NoSecurityLayer.java","additions":15,"deletions":31,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.concurrent.Callable;\n@@ -41,2 +42,2 @@\n-        String result = (String)Subject.doAs(s, new PrivilegedAction() {\n-            public Object run() {\n+        String result = Subject.callAs(s, new Callable<String>() {\n+            public String call() {\n@@ -45,3 +46,2 @@\n-                Subject doAsSubject =\n-                        Subject.getSubject(AccessController.getContext());\n-                if (doAsSubject == null) {\n+                Subject callAsSubject = Subject.current();\n+                if (callAsSubject == null) {\n@@ -50,1 +50,1 @@\n-                    System.out.println(doAsSubject);\n+                    System.out.println(callAsSubject);\n@@ -59,2 +59,1 @@\n-                        Subject doPrivSubject =\n-                            Subject.getSubject(AccessController.getContext());\n+                        Subject doPrivSubject = Subject.current();\n@@ -82,2 +81,1 @@\n-                            Subject doPrivSubject = Subject.getSubject\n-                                (AccessController.getContext());\n+                            Subject doPrivSubject = Subject.current();\n","filename":"test\/jdk\/java\/security\/AccessController\/PreserveCombiner.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.security.auth.Subject;\n+import java.security.AccessController;\n+import java.security.Principal;\n+import java.security.PrivilegedAction;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+\/*\n+ * @test\n+ * @bug 8267108\n+ * @summary confirm current subject specification\n+ * @run main\/othervm\n+ *      -Djdk.security.auth.subject.useTL=false -Dtest=both CurrentSubject\n+ * @run main\/othervm\n+ *      -Djdk.security.auth.subject.useTL=true -Dtest=old CurrentSubject\n+ * @run main\/othervm\n+ *      -Djdk.security.auth.subject.useTL=true -Dtest=new CurrentSubject\n+ *\/\n+public class CurrentSubject {\n+\n+    static final boolean TEST_NEW = !System.getProperty(\"test\").equals(\"old\");\n+    static final boolean TEST_OLD = !System.getProperty(\"test\").equals(\"new\");\n+\n+    static transient boolean failed = false;\n+    static CountDownLatch cl = new CountDownLatch(1);\n+    static AtomicInteger count = new AtomicInteger();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ At the beginning, current subject is null\n+        test(\"\", null);\n+        cl.await();\n+        if (failed) {\n+            throw new Exception(\"Failed\");\n+        }\n+    }\n+\n+    \/**\n+     * Ensure the current subject is the expected Subject object.\n+     *\n+     * @param label label to print out\n+     * @param expected the expected Subject\n+     *\/\n+    synchronized static void check(String label, Subject expected) {\n+        Subject cas = Subject.current();\n+        Subject accs = Subject.getSubject(AccessController.getContext());\n+        if (TEST_NEW && TEST_OLD && cas != accs) {\n+            failed = true;\n+            System.out.println(label + \": current \" + s2s(cas)\n+                    + \" but getSubject is \" + s2s(accs));\n+        }\n+        Subject interested = TEST_NEW ? cas : accs;\n+        if (interested != expected) {\n+            failed = true;\n+            System.out.println(label + \": expected \" + s2s(expected)\n+                    + \" but see \" + s2s(interested));\n+        } else {\n+            System.out.println(label + \": \" + s2s(expected));\n+        }\n+    }\n+\n+    \/**\n+     * Recursively testing on current subject with getAs() and thread creations.\n+     *\n+     * @param name the current label\n+     * @param expected the expected Subject\n+     *\/\n+    static Void test(String name, Subject expected) {\n+        \/\/ Now it's the expected current subject\n+        check(\" \".repeat(name.length()) + \"-> \" + name, expected);\n+        \/\/ Recursively check, do not go infinity\n+        if (name.length() < 4) {\n+            Subject another = new Subject();\n+            another.getPrincipals().add(new RawPrincipal(name + \"d\"));\n+            \/\/ run with a new subject, inside current subject will be the new subject\n+            if (TEST_NEW) Subject.callAs(another, () -> test(name + 'c', another));\n+            if (TEST_OLD) Subject.doAs(another, (PrivilegedAction<Void>) () -> test(name + 'd', another));\n+            \/\/ run with null, inside current subject will be null\n+            if (TEST_NEW) Subject.callAs(null, () -> test(name + 'C', null));\n+            if (TEST_OLD) Subject.doAs(null, (PrivilegedAction<Void>) () -> test(name + 'D', null));\n+            \/\/ new thread, inside current subject is unchanged\n+            count.incrementAndGet();\n+            new Thread(() -> {\n+                try {\n+                    test(name + 't', expected);\n+                    try {\n+                        Thread.sleep(500);\n+                    } catch (Exception e) {\n+                        throw new AssertionError(e);\n+                    }\n+                    \/\/ by this time, parent thread should have exited the\n+                    \/\/ action and current subject reset, but here\n+                    \/\/ current subject unchanged.\n+                    test(name + 'T', expected);\n+                } finally {\n+                    var n = count.decrementAndGet();\n+                    if (n == 0) {\n+                        cl.countDown();\n+                    }\n+                    assert n >= 0;\n+                }\n+            }).start();\n+        }\n+        \/\/ Now it's reset to original\n+        check(\" \".repeat(name.length()) + \"<- \" + name, expected);\n+        return null;\n+    }\n+\n+    static class RawPrincipal implements Principal {\n+\n+        String name;\n+        RawPrincipal(String name) {\n+            this.name = name;\n+        }\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+    }\n+\n+    static String s2s(Subject s) {\n+        return s == null ? null\n+                : s.getPrincipals().iterator().next().getName();\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/CurrentSubject.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -47,3 +43,2 @@\n-            Subject.doAs(subject, (PrivilegedExceptionAction<Integer>)() -> {\n-                AccessControlContext c1 = AccessController.getContext();\n-                Subject s = Subject.getSubject(c1);\n+            Subject.callAs(subject, () -> {\n+                Subject s = Subject.current();\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/DoAs.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267108\n+ * @library \/test\/lib\n+ * @summary Check that callAs and doAs throw the specified exceptions\n+ * @run main\/othervm -Djava.security.manager=allow -Djdk.security.auth.subject.useTL=true Exceptions\n+ * @run main\/othervm -Djava.security.manager=allow -Djdk.security.auth.subject.useTL=false Exceptions\n+ *\/\n+import jdk.test.lib.Asserts;\n+\n+import javax.security.auth.Subject;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n+\n+public class Exceptions {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Checked exceptions are always wrapped\n+        new TestCase(() -> { throw new Exception(\"Hi\"); })\n+                .testDoAs(PrivilegedActionException.class, Exception.class)\n+                .testCallAs(CompletionException.class, Exception.class);\n+        \/\/ PrivilegedActionException itself is checked\n+        new TestCase(() -> { throw new PrivilegedActionException(new Exception(\"Hi\")); })\n+                .testDoAs(PrivilegedActionException.class, PrivilegedActionException.class, Exception.class)\n+                .testCallAs(CompletionException.class, PrivilegedActionException.class, Exception.class);\n+\n+        \/\/ Unchecked exception: rethrown by doAs(), wrapped by callAs()\n+        new TestCase(() -> { throw new RuntimeException(\"Hi\"); })\n+                .testDoAs(RuntimeException.class)\n+                .testCallAs(CompletionException.class, RuntimeException.class);\n+        \/\/ CompletionException itself is unchecked\n+        new TestCase(() -> { throw new CompletionException(new Exception(\"Hi\")); })\n+                .testDoAs(CompletionException.class, Exception.class)\n+                .testCallAs(CompletionException.class, CompletionException.class, Exception.class);\n+    }\n+\n+    static class TestCase {\n+\n+        final Callable<Void> action;\n+        TestCase(Callable<Void> action) {\n+            this.action = action;\n+        }\n+\n+        TestCase testDoAs(Class<?>... exceptions) {\n+            return test(true, exceptions);\n+        }\n+\n+        TestCase testCallAs(Class<?>... exceptions) {\n+            return test(false, exceptions);\n+        }\n+\n+        \/\/ Perform the action in doAs() or callAs() and inspect\n+        \/\/ the exception (and its causes, recursively) it throws\n+        private TestCase test(boolean doAs, Class<?>... exceptions) {\n+            int pos = 0;\n+            try {\n+                if (doAs) {\n+                    Subject.doAs(null, (PrivilegedExceptionAction<Object>) action::call);\n+                } else {\n+                    Subject.callAs(null, action::call);\n+                }\n+            } catch (Exception e) {\n+                while (e != null) {\n+                    Asserts.assertEQ(e.getClass(), exceptions[pos++]);\n+                    e = (Exception) e.getCause();\n+                }\n+            }\n+            \/\/ Make sure the list is the exact size\n+            Asserts.assertTrue(pos == exceptions.length);\n+            return this;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Exceptions.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.security.auth.Subject;\n+import javax.security.auth.x500.X500Principal;\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+\/*\n+ * @test\n+ * @bug 8267108\n+ * @summary confirm current installed subject specification\n+ * @run main\/othervm -Djava.security.manager=allow FromACC\n+ * @run main\/othervm -Djava.security.manager=disallow FromACC\n+ *\/\n+public class FromACC {\n+    public static void main(String[] args) throws Exception {\n+        var n = Subject.doAs(from(\"a\"), (PrivilegedAction<AccessControlContext>)\n+                () -> AccessController.getContext());\n+        if (!get(Subject.getSubject(n)).equals(\"CN=a\")) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    static Subject from(String name) {\n+        Subject s = new Subject();\n+        s.getPrincipals().add(new X500Principal(\"CN=\" + name));\n+        return s;\n+    }\n+\n+    static String get(Subject s) {\n+        if (s == null) {\n+            return \"none\";\n+        }\n+        var v = s.getPrincipals(X500Principal.class);\n+        if (v == null || v.isEmpty()) {\n+            return \"none\";\n+        } else {\n+            return v.iterator().next().getName();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/FromACC.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -34,0 +33,1 @@\n+import java.util.concurrent.Callable;\n@@ -55,1 +55,1 @@\n-            Subject.doAs(\n+            Subject.callAs(\n@@ -57,3 +57,3 @@\n-                new PrivilegedAction() {\n-                    public Object run() {\n-                        return Subject.doAs(\n+                new Callable() {\n+                    public Object call() {\n+                        return Subject.callAs(\n@@ -65,2 +65,2 @@\n-                            new PrivilegedAction() {\n-                                public Object run() {\n+                            new Callable() {\n+                                public Object call() {\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/Synch.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.Callable;\n@@ -62,2 +62,2 @@\n-        Subject.doAs(subj, new PrivilegedExceptionAction() {\n-            public Object run() throws Exception {\n+        Subject.callAs(subj, new Callable<>() {\n+            public Object call() throws Exception {\n","filename":"test\/jdk\/sun\/security\/krb5\/KrbCredSubKey.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -35,0 +33,2 @@\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n@@ -125,2 +125,2 @@\n-            String result = Subject.doAs(\n-                    subj, new PrivilegedExceptionAction<String>() {\n+            String result = Subject.callAs(\n+                    subj, new Callable<String>() {\n@@ -128,1 +128,1 @@\n-                public String run() throws GSSException {\n+                public String call() throws GSSException {\n@@ -142,1 +142,1 @@\n-        } catch (PrivilegedActionException e) {\n+        } catch (CompletionException e) {\n","filename":"test\/jdk\/sun\/security\/krb5\/ServiceCredsCombination.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -58,0 +56,2 @@\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n@@ -103,1 +103,1 @@\n-            out.cred = Subject.doAs(s, new PrivilegedExceptionAction<GSSCredential>() {\n+            out.cred = Subject.callAs(s, new Callable<GSSCredential>() {\n@@ -105,1 +105,1 @@\n-                public GSSCredential run() throws Exception {\n+                public GSSCredential call() throws Exception {\n@@ -114,2 +114,2 @@\n-        } catch (PrivilegedActionException pae) {\n-            throw pae.getException();\n+        } catch (CompletionException ce) {\n+            throw (Exception) ce.getCause();\n@@ -342,1 +342,1 @@\n-            return Subject.doAs(s, new PrivilegedExceptionAction<byte[]>() {\n+            return Subject.callAs(s, new Callable<byte[]>() {\n@@ -345,1 +345,1 @@\n-                public byte[] run() throws Exception {\n+                public byte[] call() throws Exception {\n@@ -349,2 +349,2 @@\n-        } catch (PrivilegedActionException pae) {\n-            throw pae.getException();\n+        } catch (CompletionException ce) {\n+            throw (Exception) ce.getCause();\n@@ -615,1 +615,1 @@\n-            GSSCredential creds = Subject.doAs(s, new PrivilegedExceptionAction<GSSCredential>() {\n+            GSSCredential creds = Subject.callAs(s, new Callable<GSSCredential>() {\n@@ -617,1 +617,1 @@\n-                public GSSCredential run() throws Exception {\n+                public GSSCredential call() throws Exception {\n@@ -634,2 +634,2 @@\n-        } catch (PrivilegedActionException pae) {\n-            Exception e = pae.getException();\n+        } catch (CompletionException ce) {\n+            Exception e = (Exception) ce.getCause();\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/Context.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n@@ -378,3 +380,3 @@\n-        final PrivilegedExceptionAction<Object> test_action\n-                = new PrivilegedExceptionAction<Object>() {\n-            public Object run() throws Exception {\n+        final Callable<Object> test_action\n+                = new Callable<Object>() {\n+            public Object call() throws Exception {\n@@ -390,1 +392,1 @@\n-            Subject.doAs(subject, test_action);\n+            Subject.callAs(subject, test_action);\n@@ -393,1 +395,1 @@\n-        } catch (PrivilegedActionException e) {\n+        } catch (CompletionException e) {\n@@ -469,1 +471,1 @@\n-            cred = Subject.doAs(s, new PrivilegedExceptionAction<GSSCredential>() {\n+            cred = Subject.callAs(s, new Callable<GSSCredential>() {\n@@ -471,1 +473,1 @@\n-                public GSSCredential run() throws Exception {\n+                public GSSCredential call() throws Exception {\n@@ -497,6 +499,1 @@\n-                    c = Subject.doAs(s, new PrivilegedExceptionAction<GSSContext>() {\n-                        @Override\n-                        public GSSContext run() throws Exception {\n-                            return m.createContext(cred);\n-                        }\n-                    });\n+                    c = Subject.callAs(s, () -> m.createContext(cred));\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/HttpNegotiateServer.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.security.PrivilegedExceptionAction;\n@@ -75,2 +74,1 @@\n-        GSSCredential cred = Subject.doAs(c.s(),\n-                (PrivilegedExceptionAction<GSSCredential>)\n+        GSSCredential cred = Subject.callAs(c.s(),\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/LongLife.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}