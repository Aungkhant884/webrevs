{"files":[{"patch":"@@ -41,1 +41,1 @@\n-import sun.security.action.GetPropertyAction;\n+import sun.security.action.GetBooleanAction;\n@@ -292,5 +292,4 @@\n-     *       and subject to removal in a future release. Instead, users can\n-     *       call {@link #current()} to retrieve the current subject,\n-     *       which is equivalent to\n-     *       {@code Subject.getSubject(AccessController.getContext())}\n-     *       by default in this implementation.\n+     *       and subject to removal in a future release. However,\n+     *       obtaining a Subject is useful independent of the Security Manager.\n+     *       Thus, a replacement API named {@link #current()} has been added\n+     *       which can be used to obtain the current subject.\n@@ -324,3 +323,3 @@\n-    \/\/ Store the current subject to a ThreadLocal when a system property is set.\n-    private static final boolean USE_TL = \"true\".equalsIgnoreCase(\n-            GetPropertyAction.privilegedGetProperty(\"jdk.security.auth.subject.useTL\"));\n+    \/\/ Store the current subject in a ThreadLocal when a system property is set.\n+    private static final boolean USE_TL = GetBooleanAction\n+            .privilegedGetProperty(\"jdk.security.auth.subject.useTL\");\n@@ -351,10 +350,8 @@\n-     * By default, the current subject is stored in the current\n-     * {@code AccessControlContext}, i.e. this method returns the same value as\n-     * {@code Subject.getSubject(AccessController.getContext())}.\n-     * If the system property {@systemProperty jdk.security.auth.subject.useTL}\n-     * is set to {@code true}, it will be retrieved from an inheritable\n-     * {@code ThreadLocal} object. This behavior is subject to change in a\n-     * future version.\n-     * <p>\n-     * No matter what storage is chosen, the current subject will\n-     * always be installed by the {@link #callAs} method.\n+     * By default, this method returns the same value as\n+     * {@code Subject.getSubject(AccessController.getContext())}. This\n+     * preserves compatibility with code that may still be calling {@code doAs}\n+     * which installs the subject in an {@code AccessControlContext}. However,\n+     * if the system property {@systemProperty jdk.security.auth.subject.useTL}\n+     * is set to {@code true}, the subject is retrieved from an inheritable\n+     * {@code ThreadLocal} object. This implementation behavior is subject to\n+     * change in a future version.\n@@ -362,3 +359,2 @@\n-     * @return the current subject. The return value can be\n-     *      {@code null} if no current subject is installed\n-     *      yet or a {@code null} value is explicitly installed.\n+     * @return the current subject, or {@code null} if a current subject is\n+     *      not installed or the current subject is set to {@code null}.\n@@ -381,1 +377,1 @@\n-     * Subject.doAs(subject, altAction)} to store the subject into\n+     * Subject.doAs(subject, altAction)} which stores the subject in\n@@ -386,2 +382,2 @@\n-     * is set to {@code true}, it will be stored in an inheritable\n-     * {@code ThreadLocal} object. The behavior is subject to change in a\n+     * is set to {@code true}, the current subject will be stored in an inheritable\n+     * {@code ThreadLocal} object. This behavior is subject to change in a\n@@ -389,3 +385,0 @@\n-     * <p>\n-     * No matter what storage is chosen, the current subject will\n-     * always be retrievable by the {@link #current} method.\n@@ -393,2 +386,2 @@\n-     * @param subject the intended current subject for {@code action}.\n-     *                Can be {@code null}.\n+     * @param subject the {@code Subject} that the specified {@code action}\n+     *               will run as.  This parameter may be {@code null}.\n@@ -400,4 +393,4 @@\n-     * @throws NullPointerException if the {@code Callable} is {@code null}.\n-     * @throws CompletionException if {@code action.call()} throws an\n-     *          exception, which will be the cause of this\n-     *          {@code CompletionException}.\n+     * @throws NullPointerException if {@code code} is {@code null}\n+     * @throws CompletionException if {@code action.call()} throws an exception.\n+     *      The cause of the {@code CompletionException} is set to the exception\n+     *      thrown by {@code action.call()}.\n","filename":"src\/java.base\/share\/classes\/javax\/security\/auth\/Subject.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.security.AccessControlContext;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Context.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.security.AccessControlContext;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5InitCredential.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -103,2 +103,0 @@\n-     *\n-     * NOTE: This method is also used by JSSE Kerberos Cipher Suites\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/krb5\/Krb5Util.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-     * Ensure the current subject is the expected Subject objet.\n+     * Ensure the current subject is the expected Subject object.\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/CurrentSubject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}