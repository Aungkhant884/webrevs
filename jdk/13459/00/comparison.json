{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -114,1 +115,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(new Blit(null, null, null));\n+        GeneralPrimitives.register(new Blit(null, null, null));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/Blit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -117,1 +118,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(new BlitBg(null, null, null));\n+        GeneralPrimitives.register(new BlitBg(null, null, null));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/BlitBg.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -76,1 +77,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(\n+        GeneralPrimitives.register(\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/DrawGlyphList.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -74,1 +75,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(\n+        GeneralPrimitives.register(\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/DrawGlyphListAA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -70,1 +71,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(\n+        GeneralPrimitives.register(\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/DrawGlyphListColor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -78,1 +79,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(new FillRect(null, null, null));\n+        GeneralPrimitives.register(new FillRect(null, null, null));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/FillRect.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    private static GraphicsPrimitive[] generalPrimitives;\n@@ -124,18 +123,0 @@\n-    \/**\n-     * Registers the general loop which will be used to produce specific\n-     * primitives by the {@link GraphicsPrimitive#makePrimitive} function.\n-     *\n-     * @param gen the graphics primitive to be registered as the general loop\n-     *\/\n-    public static synchronized void registerGeneral(GraphicsPrimitive gen) {\n-        if (generalPrimitives == null) {\n-            generalPrimitives = new GraphicsPrimitive[] {gen};\n-            return;\n-        }\n-        int len = generalPrimitives.length;\n-        GraphicsPrimitive[] newGen = new GraphicsPrimitive[len + 1];\n-        System.arraycopy(generalPrimitives, 0, newGen, 0, len);\n-        newGen[len] = gen;\n-        generalPrimitives = newGen;\n-    }\n-\n@@ -168,1 +149,1 @@\n-            prim = locateGeneral(primTypeID);\n+            prim = GeneralPrimitives.locate(primTypeID);\n@@ -221,14 +202,0 @@\n-    private static GraphicsPrimitive locateGeneral(int primTypeID) {\n-        if (generalPrimitives == null) {\n-            return null;\n-        }\n-        for (int i = 0; i < generalPrimitives.length; i++) {\n-            GraphicsPrimitive prim = generalPrimitives[i];\n-            if (prim.getPrimTypeID() == primTypeID) {\n-                return prim;\n-            }\n-        }\n-        return null;\n-        \/\/throw new InternalError(\"No general handler registered for\"+signature);\n-    }\n-\n@@ -277,0 +244,41 @@\n+    \/**\n+     * A holder for general primitives to avoid circular dependencies\n+     * between GraphicsPrimitiveMgr and Blit\/etc classes.\n+     *\/\n+    final static class GeneralPrimitives {\n+\n+        private static GraphicsPrimitive[] primitives;\n+\n+        \/**\n+         * Registers the general loop which will be used to produce specific\n+         * primitives by the {@link GraphicsPrimitive#makePrimitive} function.\n+         *\n+         * @param gen the graphics primitive to be registered as the general loop\n+         *\/\n+        static synchronized void register(GraphicsPrimitive gen) {\n+            if (primitives == null) {\n+                primitives = new GraphicsPrimitive[]{gen};\n+                return;\n+            }\n+            int len = primitives.length;\n+            GraphicsPrimitive[] newGen = new GraphicsPrimitive[len + 1];\n+            System.arraycopy(primitives, 0, newGen, 0, len);\n+            newGen[len] = gen;\n+            primitives = newGen;\n+        }\n+\n+        static GraphicsPrimitive locate(int primTypeID) {\n+            if (primitives == null) {\n+                return null;\n+            }\n+            for (int i = 0; i < primitives.length; i++) {\n+                GraphicsPrimitive prim = primitives[i];\n+                if (prim.getPrimTypeID() == primTypeID) {\n+                    return prim;\n+                }\n+            }\n+            return null;\n+            \/\/throw new InternalError(\"No general handler registered for\"+signature);\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/GraphicsPrimitiveMgr.java","additions":42,"deletions":34,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -112,1 +113,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(new MaskBlit(null, null, null));\n+        GeneralPrimitives.register(new MaskBlit(null, null, null));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/MaskBlit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import sun.java2d.loops.GraphicsPrimitiveMgr.GeneralPrimitives;\n@@ -144,1 +145,1 @@\n-        GraphicsPrimitiveMgr.registerGeneral(new MaskFill(null, null, null));\n+        GeneralPrimitives.register(new MaskFill(null, null, null));\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/loops\/MaskFill.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Azul Systems, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * @test\n+ * @bug 6995195\n+ * @summary Verify that concurrent classloading of GraphicsPrimitiveMgr and Blit doesn't deadlock\n+ * @run main\/othervm\/timeout=20 GraphicsPrimitiveMgrTest\n+ *\/\n+public class GraphicsPrimitiveMgrTest {\n+\n+    private static volatile CountDownLatch latch;\n+\n+    public static void main(final String[] args) throws ClassNotFoundException, InterruptedException {\n+        \/\/ force loading awt library\n+        Class.forName(\"java.awt.Toolkit\");\n+\n+        latch = new CountDownLatch(2);\n+\n+        Thread t1 = new Thread(() -> loadClass(\"sun.java2d.loops.GraphicsPrimitiveMgr\"));\n+        Thread t2 = new Thread(() -> loadClass(\"sun.java2d.loops.Blit\"));\n+\n+        t1.start();\n+        t2.start();\n+\n+        t1.join();\n+        t2.join();\n+    }\n+\n+    private static void loadClass(String className) {\n+        System.out.println(Thread.currentThread().getName() + \" loading \" + className);\n+        try {\n+            latch.countDown();\n+            latch.await();\n+            Class.forName(className);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/loops\/GraphicsPrimitiveMgrTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}