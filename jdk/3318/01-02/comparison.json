{"files":[{"patch":"@@ -193,1 +193,1 @@\n-  if (JVMFlagAccess::set<JVM_FLAG_TYPE(bool)>(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_bool(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-  if (JVMFlagAccess::set<JVM_FLAG_TYPE(bool)>(flag, &value, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_bool(flag, &value, origin) == JVMFlag::SUCCESS) {\n@@ -822,1 +822,1 @@\n-  if (JVMFlagAccess::set<JVM_FLAG_TYPE(double)>(flag, &v, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_double(flag, &v, origin) == JVMFlag::SUCCESS) {\n@@ -854,1 +854,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(int)>(flag, &int_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_int(flag, &int_v, origin) == JVMFlag::SUCCESS;\n@@ -857,1 +857,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(uint)>(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uint(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n@@ -863,1 +863,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(intx)>(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_intx(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n@@ -866,1 +866,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(uintx)>(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uintx(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n@@ -869,1 +869,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(uint64_t)>(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uint64_t(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n@@ -872,1 +872,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(size_t)>(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_size_t(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n@@ -875,1 +875,1 @@\n-    return JVMFlagAccess::set<JVM_FLAG_TYPE(double)>(flag, &double_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_double(flag, &double_v, origin) == JVMFlag::SUCCESS;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -132,0 +132,9 @@\n+\n+  static JVMFlag::Error set_bool    (JVMFlag* f, bool*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(bool)>    (f, v, origin); }\n+  static JVMFlag::Error set_int     (JVMFlag* f, int*      v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(int)>     (f, v, origin); }\n+  static JVMFlag::Error set_uint    (JVMFlag* f, uint*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint)>    (f, v, origin); }\n+  static JVMFlag::Error set_intx    (JVMFlag* f, intx*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(intx)>    (f, v, origin); }\n+  static JVMFlag::Error set_uintx   (JVMFlag* f, uintx*    v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uintx)>   (f, v, origin); }\n+  static JVMFlag::Error set_uint64_t(JVMFlag* f, uint64_t* v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint64_t)>(f, v, origin); }\n+  static JVMFlag::Error set_size_t  (JVMFlag* f, size_t*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(size_t)>  (f, v, origin); }\n+  static JVMFlag::Error set_double  (JVMFlag* f, double*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(double)>  (f, v, origin); }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}