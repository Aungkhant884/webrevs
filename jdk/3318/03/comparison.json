{"files":[{"patch":"@@ -193,1 +193,1 @@\n-  if (JVMFlagAccess::boolAtPut(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_bool(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1252,3 +1252,4 @@\n-WB_ENTRY(jobject, WB_GetIntVMFlag(JNIEnv* env, jobject o, jstring name))\n-  int result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(int)> (thread, env, name, &result)) {\n+template <typename T, int type_enum>\n+jobject GetVMFlag_longBox(JNIEnv* env, JavaThread* thread, jstring name) {\n+  T result;\n+  if (GetVMFlag <T, type_enum> (thread, env, name, &result)) {\n@@ -1259,0 +1260,4 @@\n+}\n+\n+WB_ENTRY(jobject, WB_GetIntVMFlag(JNIEnv* env, jobject o, jstring name))\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(int)>(env, thread, name);\n@@ -1262,6 +1267,1 @@\n-  uint result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(uint)> (thread, env, name, &result)) {\n-    ThreadToNativeFromVM ttnfv(thread);   \/\/ can't be in VM when we call JNI\n-    return longBox(thread, env, result);\n-  }\n-  return NULL;\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uint)>(env, thread, name);\n@@ -1271,6 +1271,1 @@\n-  intx result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(intx)> (thread, env, name, &result)) {\n-    ThreadToNativeFromVM ttnfv(thread);   \/\/ can't be in VM when we call JNI\n-    return longBox(thread, env, result);\n-  }\n-  return NULL;\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(intx)>(env, thread, name);\n@@ -1280,6 +1275,1 @@\n-  uintx result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(uintx)> (thread, env, name, &result)) {\n-    ThreadToNativeFromVM ttnfv(thread);   \/\/ can't be in VM when we call JNI\n-    return longBox(thread, env, result);\n-  }\n-  return NULL;\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uintx)>(env, thread, name);\n@@ -1289,6 +1279,1 @@\n-  uint64_t result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(uint64_t)> (thread, env, name, &result)) {\n-    ThreadToNativeFromVM ttnfv(thread);   \/\/ can't be in VM when we call JNI\n-    return longBox(thread, env, result);\n-  }\n-  return NULL;\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uint64_t)>(env, thread, name);\n@@ -1298,6 +1283,1 @@\n-  size_t result;\n-  if (GetVMFlag <JVM_FLAG_TYPE(size_t)> (thread, env, name, &result)) {\n-    ThreadToNativeFromVM ttnfv(thread);   \/\/ can't be in VM when we call JNI\n-    return longBox(thread, env, result);\n-  }\n-  return NULL;\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(size_t)>(env, thread, name);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":13,"deletions":33,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-  if (JVMFlagAccess::boolAtPut(flag, &value, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_bool(flag, &value, origin) == JVMFlag::SUCCESS) {\n@@ -822,1 +822,1 @@\n-  if (JVMFlagAccess::doubleAtPut(flag, &v, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set_double(flag, &v, origin) == JVMFlag::SUCCESS) {\n@@ -854,1 +854,1 @@\n-    return JVMFlagAccess::intAtPut(flag, &int_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_int(flag, &int_v, origin) == JVMFlag::SUCCESS;\n@@ -857,1 +857,1 @@\n-    return JVMFlagAccess::uintAtPut(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uint(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n@@ -863,1 +863,1 @@\n-    return JVMFlagAccess::intxAtPut(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_intx(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n@@ -866,1 +866,1 @@\n-    return JVMFlagAccess::uintxAtPut(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uintx(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n@@ -869,1 +869,1 @@\n-    return JVMFlagAccess::uint64_tAtPut(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_uint64_t(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n@@ -872,1 +872,1 @@\n-    return JVMFlagAccess::size_tAtPut(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_size_t(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n@@ -875,1 +875,1 @@\n-    return JVMFlagAccess::doubleAtPut(flag, &double_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set_double(flag, &double_v, origin) == JVMFlag::SUCCESS;\n@@ -882,1 +882,1 @@\n-  if (JVMFlagAccess::ccstrAtPut(flag, &value, origin) != JVMFlag::SUCCESS) return false;\n+  if (JVMFlagAccess::set_ccstr(flag, &value, origin) != JVMFlag::SUCCESS) return false;\n@@ -890,1 +890,1 @@\n-  if (JVMFlagAccess::ccstrAt(flag, &old_value) != JVMFlag::SUCCESS) return false;\n+  if (JVMFlagAccess::get_ccstr(flag, &old_value) != JVMFlag::SUCCESS) return false;\n@@ -907,1 +907,1 @@\n-  (void) JVMFlagAccess::ccstrAtPut(flag, &value, origin);\n+  (void) JVMFlagAccess::set_ccstr(flag, &value, origin);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -564,0 +564,8 @@\n+#define JVM_FLAG_TYPE_SIGNATURE(t) JVMFlag::type_signature<t>(),\n+\n+const int JVMFlag::type_signatures[] = {\n+  JVM_FLAG_NON_STRING_TYPES_DO(JVM_FLAG_TYPE_SIGNATURE)\n+  JVMFlag::type_signature<ccstr>(),\n+  JVMFlag::type_signature<ccstr>()\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -197,2 +197,1 @@\n-  t get_##t() const                        { assert(is_##t(), \"sanity\"); return *((t*) _addr); }  \\\n-  void set_##t(t value)                    { assert(is_##t(), \"sanity\"); *((t*) _addr) = value; }\n+  t get_##t() const                        { assert(is_##t(), \"sanity\"); return *((t*) _addr); }\n@@ -228,8 +227,0 @@\n-  void assert_type(int type_enum) const {\n-    if (type_enum == JVMFlag::TYPE_ccstr) {\n-      assert(is_ccstr(), \"type check\"); \/\/ ccstr or ccstrlist\n-    } else {\n-      assert(_type == type_enum, \"type check\");\n-    }\n-  }\n-\n@@ -238,2 +229,2 @@\n-  template <typename T, int type_enum> T read() const {\n-    assert_type(type_enum);\n+  template <typename T> T read() const {\n+    assert_compatible_type<T>(_type);\n@@ -243,2 +234,2 @@\n-  template <typename T, int type_enum> void write(T value) {\n-    assert_type(type_enum);\n+  template <typename T> void write(T value) {\n+    assert_compatible_type<T>(_type);\n@@ -294,7 +285,17 @@\n-  \/\/ type checking\n-#define CHECK_COMPATIBLE(type) \\\n-  case TYPE_##type: \\\n-    assert(sizeof(T) == sizeof(type) && \\\n-           std::is_integral<T>::value == std::is_integral<type>::value && \\\n-           std::is_signed  <T>::value == std::is_signed  <type>::value, \"must be\"); \\\n-    break;\n+private:\n+  \/\/ type checking - the following functions make sure you access *_addr as\n+  \/\/ the correct type <T>\n+\n+  static void assert_valid_type_enum(int type_enum) {\n+    assert(0 <= type_enum && type_enum < NUM_FLAG_TYPES, \"sanity\");\n+  }\n+\n+  \/\/ The following computation is not universal, but should be correct\n+  \/\/ for the limited number of types that can be stored inside a JVMFlag.\n+  template <typename T>\n+  static constexpr int type_signature() {\n+    return int(sizeof(T)) |\n+           (((std::is_integral<T>::value) ? 1 : 0) << 8) |\n+           (((std::is_signed<T>::value)   ? 1 : 0) << 9) |\n+           (((std::is_pointer<T>::value)  ? 1 : 0) << 10);\n+  }\n@@ -302,0 +303,3 @@\n+  static const int type_signatures[];\n+\n+public:\n@@ -304,6 +308,1 @@\n-#ifndef PRODUCT\n-    switch (type_enum) {\n-      JVM_FLAG_NON_STRING_TYPES_DO(CHECK_COMPATIBLE);\n-      default: ShouldNotReachHere();\n-    }\n-#endif\n+    assert(is_compatible_type<T>(type_enum), \"must be\");\n@@ -312,1 +311,5 @@\n-#undef CHECK_COMPATIBLE\n+  template <typename T>\n+  static bool is_compatible_type(int type_enum) {\n+    assert_valid_type_enum(type_enum);\n+    return type_signatures[type_enum] == type_signature<T>();\n+  }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlag.hpp","additions":31,"deletions":28,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-template <typename T, int type_enum, typename EVENT>\n+template <typename T, typename EVENT>\n@@ -73,1 +73,1 @@\n-    T old_value = flag->read<T, type_enum>();\n+    T old_value = flag->read<T>();\n@@ -75,1 +75,1 @@\n-    flag->write<T, type_enum>(value);\n+    flag->write<T>(value);\n@@ -83,1 +83,1 @@\n-    return typed_check_constraint(func, flag->read<T, type_enum>(), verbose);\n+    return typed_check_constraint(func, flag->read<T>(), verbose);\n@@ -89,1 +89,1 @@\n-class FlagAccessImpl_bool : public TypedFlagAccessImpl<JVM_FLAG_TYPE(bool), EventBooleanFlagChanged> {\n+class FlagAccessImpl_bool : public TypedFlagAccessImpl<bool, EventBooleanFlagChanged> {\n@@ -93,1 +93,1 @@\n-    return TypedFlagAccessImpl<JVM_FLAG_TYPE(bool), EventBooleanFlagChanged>\n+    return TypedFlagAccessImpl<bool, EventBooleanFlagChanged>\n@@ -102,2 +102,2 @@\n-template <typename T, int type_enum, typename EVENT>\n-class RangedFlagAccessImpl : public TypedFlagAccessImpl<T, type_enum, EVENT> {\n+template <typename T, typename EVENT>\n+class RangedFlagAccessImpl : public TypedFlagAccessImpl<T, EVENT> {\n@@ -117,1 +117,1 @@\n-    return TypedFlagAccessImpl<T, type_enum, EVENT>::check_constraint_and_set(flag, value_addr, origin, verbose);\n+    return TypedFlagAccessImpl<T, EVENT>::check_constraint_and_set(flag, value_addr, origin, verbose);\n@@ -123,1 +123,1 @@\n-      T value = flag->read<T, type_enum>();\n+      T value = flag->read<T>();\n@@ -141,1 +141,1 @@\n-class FlagAccessImpl_int : public RangedFlagAccessImpl<JVM_FLAG_TYPE(int), EventIntFlagChanged> {\n+class FlagAccessImpl_int : public RangedFlagAccessImpl<int, EventIntFlagChanged> {\n@@ -160,1 +160,1 @@\n-class FlagAccessImpl_uint : public RangedFlagAccessImpl<JVM_FLAG_TYPE(uint), EventUnsignedIntFlagChanged> {\n+class FlagAccessImpl_uint : public RangedFlagAccessImpl<uint, EventUnsignedIntFlagChanged> {\n@@ -179,1 +179,1 @@\n-class FlagAccessImpl_intx : public RangedFlagAccessImpl<JVM_FLAG_TYPE(intx), EventLongFlagChanged> {\n+class FlagAccessImpl_intx : public RangedFlagAccessImpl<intx, EventLongFlagChanged> {\n@@ -198,1 +198,1 @@\n-class FlagAccessImpl_uintx : public RangedFlagAccessImpl<JVM_FLAG_TYPE(uintx), EventUnsignedLongFlagChanged> {\n+class FlagAccessImpl_uintx : public RangedFlagAccessImpl<uintx, EventUnsignedLongFlagChanged> {\n@@ -217,1 +217,1 @@\n-class FlagAccessImpl_uint64_t : public RangedFlagAccessImpl<JVM_FLAG_TYPE(uint64_t), EventUnsignedLongFlagChanged> {\n+class FlagAccessImpl_uint64_t : public RangedFlagAccessImpl<uint64_t, EventUnsignedLongFlagChanged> {\n@@ -236,1 +236,1 @@\n-class FlagAccessImpl_size_t : public RangedFlagAccessImpl<JVM_FLAG_TYPE(size_t), EventUnsignedLongFlagChanged> {\n+class FlagAccessImpl_size_t : public RangedFlagAccessImpl<size_t, EventUnsignedLongFlagChanged> {\n@@ -255,1 +255,1 @@\n-class FlagAccessImpl_double : public RangedFlagAccessImpl<JVM_FLAG_TYPE(double), EventDoubleFlagChanged> {\n+class FlagAccessImpl_double : public RangedFlagAccessImpl<double, EventDoubleFlagChanged> {\n@@ -295,11 +295,5 @@\n-\/\/ This is called by JVMFlagAccess::*AtPut() and JVMFlagAccess::set<...>(JVMFlag* flag, ...)\n-JVMFlag::Error JVMFlagAccess::set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlagOrigin origin) {\n-  if (type_enum == JVMFlag::TYPE_ccstr || type_enum == JVMFlag::TYPE_ccstrlist) {\n-    return ccstrAtPut(flag, (ccstr*)value, origin);\n-  }\n-\n-  if (flag == NULL) {\n-    return JVMFlag::INVALID_FLAG;\n-  }\n-  if (flag->type() != type_enum) {\n-    return JVMFlag::WRONG_FORMAT;\n+JVMFlag::Error JVMFlagAccess::set_impl(JVMFlag* flag, void* value, JVMFlagOrigin origin) {\n+  if (flag->is_ccstr()) {\n+    return set_ccstr(flag, (ccstr*)value, origin);\n+  } else {\n+    return access_impl(flag)->set(flag, value, origin);\n@@ -307,1 +301,0 @@\n-  return access_impl(flag)->set(flag, value, origin);\n@@ -310,1 +303,1 @@\n-JVMFlag::Error JVMFlagAccess::ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin) {\n+JVMFlag::Error JVMFlagAccess::set_ccstr(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin) {\n@@ -334,1 +327,1 @@\n-JVMFlag::Error JVMFlagAccess::set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin) {\n+JVMFlag::Error JVMFlagAccess::set_or_assert(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin) {\n@@ -338,1 +331,1 @@\n-    return ccstrAtPut(flag, (ccstr*)value, origin);\n+    return set_ccstr(flag, (ccstr*)value, origin);\n@@ -341,1 +334,1 @@\n-    return set_impl(flag, type_enum, value, origin);\n+    return set_impl(flag, value, origin);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":26,"deletions":33,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-\/\/  intx v = flag->read<JVM_FLAG_TYPE(intx)>();\n+\/\/  intx v = flag->read<intx>();\n@@ -45,1 +45,1 @@\n-\/\/  JVMFlag::Error err = JVMFlagAccess::get<JVM_FLAG_TYPE(intx)>(flag, &v);\n+\/\/  JVMFlag::Error err = JVMFlagAccess::get<JVM_FLAG_TYPE(intx)>(flag, &v, origin);\n@@ -55,2 +55,15 @@\n-  static JVMFlag::Error set_impl(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin);\n-  static JVMFlag::Error set_impl(JVMFlag* flag, int type_enum, void* value, JVMFlagOrigin origin);\n+  static JVMFlag::Error set_impl(JVMFlag* flag, void* value, JVMFlagOrigin origin);\n+  static JVMFlag::Error set_or_assert(JVMFlagsEnum flag_enum, int type_enum, void* value, JVMFlagOrigin origin);\n+\n+  static bool is_correct_type(const JVMFlag* flag, int type_enum) {\n+    if (type_enum == JVMFlag::TYPE_ccstr) {\n+      if (!flag->is_ccstr()) { \/\/ ccstr or ccstrlist\n+        return false;\n+      }\n+    } else {\n+      if (flag->type() != type_enum) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n@@ -66,0 +79,4 @@\n+    \/\/ The caller must not not mix incompatible types such as\n+    \/\/ set<double, JVMFlag::TYPE_int>(flag, double_ptr);\n+    assert(JVMFlag::is_compatible_type<T>(type_enum), \"must be\");\n+\n@@ -69,8 +86,2 @@\n-    if (type_enum == JVMFlag::TYPE_ccstr) {\n-      if (!flag->is_ccstr()) { \/\/ ccstr or ccstrlist\n-        return JVMFlag::WRONG_FORMAT;\n-      }\n-    } else {\n-      if (flag->type() != type_enum) {\n-        return JVMFlag::WRONG_FORMAT;\n-      }\n+    if (!is_correct_type(flag, type_enum)) {\n+      return JVMFlag::WRONG_FORMAT;\n@@ -78,1 +89,2 @@\n-    *value = flag->read<T, type_enum>();\n+\n+    *value = flag->read<T>();\n@@ -88,1 +100,1 @@\n-    return set_impl(flag_enum, type_enum, &value, origin);\n+    return set_or_assert(flag_enum, type_enum, &value, origin);\n@@ -91,3 +103,2 @@\n-  \/\/ This setter, and the xxxAtPut functions below, are *generic* setters. They should be used\n-  \/\/ by code that can set a number of different flags, often according to external input that\n-  \/\/ may contain errors.\n+  \/\/ This is a *generic* setter. It should be used by code that can set a number of different\n+  \/\/ flags, often according to external input that may contain errors.\n@@ -98,2 +109,10 @@\n-    return set_impl(flag, type_enum, (void*)value, origin);\n-  }\n+    \/\/ The caller must not not mix incompatible types such as\n+    \/\/ set<double, JVMFlag::TYPE_int>(flag, double_ptr);\n+    assert(JVMFlag::is_compatible_type<T>(type_enum), \"must be\");\n+\n+    if (flag == NULL) {\n+      return JVMFlag::INVALID_FLAG;\n+    }\n+    if (!is_correct_type(flag, type_enum)) {\n+      return JVMFlag::WRONG_FORMAT;\n+    }\n@@ -101,8 +120,2 @@\n-  static JVMFlag::Error boolAtPut    (JVMFlag* f, bool*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(bool)>    (f, v, origin); }\n-  static JVMFlag::Error intAtPut     (JVMFlag* f, int*      v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(int)>     (f, v, origin); }\n-  static JVMFlag::Error uintAtPut    (JVMFlag* f, uint*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint)>    (f, v, origin); }\n-  static JVMFlag::Error intxAtPut    (JVMFlag* f, intx*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(intx)>    (f, v, origin); }\n-  static JVMFlag::Error uintxAtPut   (JVMFlag* f, uintx*    v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uintx)>   (f, v, origin); }\n-  static JVMFlag::Error uint64_tAtPut(JVMFlag* f, uint64_t* v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint64_t)>(f, v, origin); }\n-  static JVMFlag::Error size_tAtPut  (JVMFlag* f, size_t*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(size_t)>  (f, v, origin); }\n-  static JVMFlag::Error doubleAtPut  (JVMFlag* f, double*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(double)>  (f, v, origin); }\n+    return set_impl(flag, (void*)value, origin);\n+  }\n@@ -113,1 +126,1 @@\n-  static JVMFlag::Error ccstrAtPut(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin);\n+  static JVMFlag::Error set_ccstr(JVMFlag* flag, ccstr* value, JVMFlagOrigin origin);\n@@ -116,2 +129,2 @@\n-  static JVMFlag::Error ccstrAt(const JVMFlag* flag, ccstr* value) {\n-    return get<ccstr, JVMFlag::TYPE_ccstr>(flag, value);\n+  static JVMFlag::Error get_ccstr(const JVMFlag* flag, ccstr* value) {\n+    return get<JVM_FLAG_TYPE(ccstr)>(flag, value);\n@@ -119,0 +132,9 @@\n+\n+  static JVMFlag::Error set_bool    (JVMFlag* f, bool*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(bool)>    (f, v, origin); }\n+  static JVMFlag::Error set_int     (JVMFlag* f, int*      v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(int)>     (f, v, origin); }\n+  static JVMFlag::Error set_uint    (JVMFlag* f, uint*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint)>    (f, v, origin); }\n+  static JVMFlag::Error set_intx    (JVMFlag* f, intx*     v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(intx)>    (f, v, origin); }\n+  static JVMFlag::Error set_uintx   (JVMFlag* f, uintx*    v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uintx)>   (f, v, origin); }\n+  static JVMFlag::Error set_uint64_t(JVMFlag* f, uint64_t* v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(uint64_t)>(f, v, origin); }\n+  static JVMFlag::Error set_size_t  (JVMFlag* f, size_t*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(size_t)>  (f, v, origin); }\n+  static JVMFlag::Error set_double  (JVMFlag* f, double*   v, JVMFlagOrigin origin) { return set<JVM_FLAG_TYPE(double)>  (f, v, origin); }\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -99,0 +99,9 @@\n+template <typename T, int type_enum>\n+JVMFlag::Error WriteableFlags::set_flag_impl(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n+  JVMFlag* flag = JVMFlag::find_flag(name);\n+  JVMFlag::Error err = JVMFlagAccess::set<T, type_enum>(flag, &value, origin);\n+  print_flag_error_message_if_needed(err, flag, err_msg);\n+  return err;\n+}\n+\n+\n@@ -102,1 +111,1 @@\n-    return set_bool_flag(name, true, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(name, true, origin, err_msg);\n@@ -104,1 +113,1 @@\n-    return set_bool_flag(name, false, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(name, false, origin, err_msg);\n@@ -110,7 +119,0 @@\n-JVMFlag::Error WriteableFlags::set_bool_flag(const char* name, bool value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::boolAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -122,1 +124,1 @@\n-    return set_int_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(int)>(name, value, origin, err_msg);\n@@ -128,7 +130,0 @@\n-JVMFlag::Error WriteableFlags::set_int_flag(const char* name, int value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::intAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -140,1 +135,1 @@\n-    return set_uint_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint)>(name, value, origin, err_msg);\n@@ -146,7 +141,0 @@\n-JVMFlag::Error WriteableFlags::set_uint_flag(const char* name, uint value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::uintAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -158,1 +146,1 @@\n-    return set_intx_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(intx)>(name, value, origin, err_msg);\n@@ -164,7 +152,0 @@\n-JVMFlag::Error WriteableFlags::set_intx_flag(const char* name, intx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::intxAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -176,1 +157,1 @@\n-    return set_uintx_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uintx)>(name, value, origin, err_msg);\n@@ -182,7 +163,0 @@\n-JVMFlag::Error WriteableFlags::set_uintx_flag(const char* name, uintx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::uintxAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -194,1 +168,1 @@\n-    return set_uint64_t_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint64_t)>(name, value, origin, err_msg);\n@@ -200,7 +174,0 @@\n-JVMFlag::Error WriteableFlags::set_uint64_t_flag(const char* name, uint64_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::uint64_tAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -212,1 +179,1 @@\n-    return set_size_t_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(size_t)>(name, value, origin, err_msg);\n@@ -218,7 +185,0 @@\n-JVMFlag::Error WriteableFlags::set_size_t_flag(const char* name, size_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::size_tAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -230,1 +190,1 @@\n-    return set_double_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(double)>(name, value, origin, err_msg);\n@@ -236,7 +196,0 @@\n-JVMFlag::Error WriteableFlags::set_double_flag(const char* name, double value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::doubleAtPut(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -246,1 +199,1 @@\n-  JVMFlag::Error err = JVMFlagAccess::ccstrAtPut(flag, &value, origin);\n+  JVMFlag::Error err = JVMFlagAccess::set_ccstr(flag, &value, origin);\n@@ -335,1 +288,1 @@\n-    return set_bool_flag(f->name(), bvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(f->name(), bvalue, origin, err_msg);\n@@ -338,1 +291,1 @@\n-    return set_int_flag(f->name(), ivalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(int)>(f->name(), ivalue, origin, err_msg);\n@@ -341,1 +294,1 @@\n-    return set_uint_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint)>(f->name(), uvalue, origin, err_msg);\n@@ -344,1 +297,1 @@\n-    return set_intx_flag(f->name(), ivalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(intx)>(f->name(), ivalue, origin, err_msg);\n@@ -347,1 +300,1 @@\n-    return set_uintx_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uintx)>(f->name(), uvalue, origin, err_msg);\n@@ -350,1 +303,1 @@\n-    return set_uint64_t_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint64_t)>(f->name(), uvalue, origin, err_msg);\n@@ -353,1 +306,1 @@\n-    return set_size_t_flag(f->name(), svalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(size_t)>(f->name(), svalue, origin, err_msg);\n@@ -356,1 +309,1 @@\n-    return set_double_flag(f->name(), dvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(double)>(f->name(), dvalue, origin, err_msg);\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":27,"deletions":74,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-  \/\/ set a boolean global flag\n@@ -43,1 +42,0 @@\n-  \/\/ set a int global flag\n@@ -45,1 +43,0 @@\n-  \/\/ set a uint global flag\n@@ -47,1 +44,0 @@\n-  \/\/ set a intx global flag\n@@ -49,1 +45,0 @@\n-  \/\/ set a uintx global flag\n@@ -51,1 +46,0 @@\n-  \/\/ set a uint64_t global flag\n@@ -53,1 +47,0 @@\n-  \/\/ set a size_t global flag using value from AttachOperation\n@@ -55,1 +48,0 @@\n-  \/\/ set a double global flag using value from AttachOperation\n@@ -57,17 +49,0 @@\n-  \/\/ set a boolean global flag\n-  static JVMFlag::Error set_bool_flag(const char* name, bool value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a int global flag\n-  static JVMFlag::Error set_int_flag(const char* name, int value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a uint global flag\n-  static JVMFlag::Error set_uint_flag(const char* name, uint value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a intx global flag\n-  static JVMFlag::Error set_intx_flag(const char* name, intx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a uintx global flag\n-  static JVMFlag::Error set_uintx_flag(const char* name, uintx value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a uint64_t global flag\n-  static JVMFlag::Error set_uint64_t_flag(const char* name, uint64_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a size_t global flag using value from AttachOperation\n-  static JVMFlag::Error set_size_t_flag(const char* name, size_t value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a double global flag using value from AttachOperation\n-  static JVMFlag::Error set_double_flag(const char* name, double value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n-  \/\/ set a string global flag\n@@ -76,0 +51,3 @@\n+  template <typename T, int type_enum>\n+  static JVMFlag::Error set_flag_impl(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n+\n","filename":"src\/hotspot\/share\/services\/writeableFlags.hpp","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/flags\/jvmFlagAccess.hpp\"\n@@ -97,0 +98,22 @@\n+\n+template <typename T, int type_enum>\n+static JVMFlag::Error get_flag(const char* name) {\n+  JVMFlag* flag = (name == NULL) ? NULL : JVMFlag::find_flag(name);\n+\n+  T val;\n+  return JVMFlagAccess::get<T, type_enum>(flag, &val);\n+}\n+\n+TEST_VM(FlagAccess, wrong_format) {\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(int)>(NULL)), JVMFlag::INVALID_FLAG);\n+\n+  \/\/ MaxRAMPercentage is a double flag\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(bool)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(int)>     (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uint)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(intx)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uintx)>   (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uint64_t)>(\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(size_t)>  (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(double)>  (\"MaxRAMPercentage\")), JVMFlag::SUCCESS);\n+}\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}