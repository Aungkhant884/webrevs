{"files":[{"patch":"@@ -193,1 +193,1 @@\n-  if (JVMFlagAccess::set(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set<JVM_FLAG_TYPE(bool)>(jvmciEnableFlag, &value, origin) != JVMFlag::SUCCESS) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1165,1 +1165,1 @@\n-template <typename T>\n+template <typename T, int type_enum>\n@@ -1174,1 +1174,1 @@\n-  JVMFlag::Error result = JVMFlagAccess::get<T>(flag, value);\n+  JVMFlag::Error result = JVMFlagAccess::get<T, type_enum>(flag, value);\n@@ -1179,1 +1179,1 @@\n-template <typename T>\n+template <typename T, int type_enum>\n@@ -1188,1 +1188,1 @@\n-  JVMFlag::Error result = JVMFlagAccess::set<T>(flag, value, JVMFlagOrigin::INTERNAL);\n+  JVMFlag::Error result = JVMFlagAccess::set<T, type_enum>(flag, value, JVMFlagOrigin::INTERNAL);\n@@ -1244,1 +1244,1 @@\n-  if (GetVMFlag(thread, env, name, &result)) {\n+  if (GetVMFlag <JVM_FLAG_TYPE(bool)> (thread, env, name, &result)) {\n@@ -1251,1 +1251,1 @@\n-template <typename T>\n+template <typename T, int type_enum>\n@@ -1254,1 +1254,1 @@\n-  if (GetVMFlag(thread, env, name, &result)) {\n+  if (GetVMFlag <T, type_enum> (thread, env, name, &result)) {\n@@ -1262,1 +1262,1 @@\n-  return GetVMFlag_longBox<int>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(int)>(env, thread, name);\n@@ -1266,1 +1266,1 @@\n-  return GetVMFlag_longBox<uint>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uint)>(env, thread, name);\n@@ -1270,1 +1270,1 @@\n-  return GetVMFlag_longBox<intx>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(intx)>(env, thread, name);\n@@ -1274,1 +1274,1 @@\n-  return GetVMFlag_longBox<uintx>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uintx)>(env, thread, name);\n@@ -1278,1 +1278,1 @@\n-  return GetVMFlag_longBox<uint64_t>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(uint64_t)>(env, thread, name);\n@@ -1282,1 +1282,1 @@\n-  return GetVMFlag_longBox<size_t>(env, thread, name);\n+  return GetVMFlag_longBox<JVM_FLAG_TYPE(size_t)>(env, thread, name);\n@@ -1287,1 +1287,1 @@\n-  if (GetVMFlag(thread, env, name, &result)) {\n+  if (GetVMFlag <JVM_FLAG_TYPE(double)> (thread, env, name, &result)) {\n@@ -1296,1 +1296,1 @@\n-  if (GetVMFlag(thread, env, name, &ccstrResult)) {\n+  if (GetVMFlag <JVM_FLAG_TYPE(ccstr)> (thread, env, name, &ccstrResult)) {\n@@ -1307,1 +1307,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(bool)> (thread, env, name, &result);\n@@ -1312,1 +1312,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(int)> (thread, env, name, &result);\n@@ -1317,1 +1317,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(uint)> (thread, env, name, &result);\n@@ -1322,1 +1322,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(intx)> (thread, env, name, &result);\n@@ -1327,1 +1327,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(uintx)> (thread, env, name, &result);\n@@ -1332,1 +1332,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(uint64_t)> (thread, env, name, &result);\n@@ -1337,1 +1337,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(size_t)> (thread, env, name, &result);\n@@ -1342,1 +1342,1 @@\n-  SetVMFlag(thread, env, name, &result);\n+  SetVMFlag <JVM_FLAG_TYPE(double)> (thread, env, name, &result);\n@@ -1358,1 +1358,1 @@\n-    if (SetVMFlag(thread, env, name, &param)) {\n+    if (SetVMFlag <JVM_FLAG_TYPE(ccstr)> (thread, env, name, &param)) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -807,1 +807,1 @@\n-  if (JVMFlagAccess::set(flag, &value, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set<JVM_FLAG_TYPE(bool)>(flag, &value, origin) == JVMFlag::SUCCESS) {\n@@ -822,1 +822,1 @@\n-  if (JVMFlagAccess::set(flag, &v, origin) == JVMFlag::SUCCESS) {\n+  if (JVMFlagAccess::set<JVM_FLAG_TYPE(double)>(flag, &v, origin) == JVMFlag::SUCCESS) {\n@@ -854,1 +854,1 @@\n-    return JVMFlagAccess::set(flag, &int_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(int)>(flag, &int_v, origin) == JVMFlag::SUCCESS;\n@@ -857,1 +857,1 @@\n-    return JVMFlagAccess::set(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(uint)>(flag, &uint_v, origin) == JVMFlag::SUCCESS;\n@@ -863,1 +863,1 @@\n-    return JVMFlagAccess::set(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(intx)>(flag, &intx_v, origin) == JVMFlag::SUCCESS;\n@@ -866,1 +866,1 @@\n-    return JVMFlagAccess::set(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(uintx)>(flag, &uintx_v, origin) == JVMFlag::SUCCESS;\n@@ -869,1 +869,1 @@\n-    return JVMFlagAccess::set(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(uint64_t)>(flag, &uint64_t_v, origin) == JVMFlag::SUCCESS;\n@@ -872,1 +872,1 @@\n-    return JVMFlagAccess::set(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(size_t)>(flag, &size_t_v, origin) == JVMFlag::SUCCESS;\n@@ -875,1 +875,1 @@\n-    return JVMFlagAccess::set(flag, &double_v, origin) == JVMFlag::SUCCESS;\n+    return JVMFlagAccess::set<JVM_FLAG_TYPE(double)>(flag, &double_v, origin) == JVMFlag::SUCCESS;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"runtime\/globals_extension.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-\/\/  JVMFlag::Error err = JVMFlagAccess::get<intx>(flag, &v, origin);\n+\/\/  JVMFlag::Error err = JVMFlagAccess::get<JVM_FLAG_TYPE(intx)>(flag, &v, origin);\n@@ -58,0 +58,13 @@\n+  static bool is_correct_type(const JVMFlag* flag, int type_enum) {\n+    if (type_enum == JVMFlag::TYPE_ccstr) {\n+      if (!flag->is_ccstr()) { \/\/ ccstr or ccstrlist\n+        return false;\n+      }\n+    } else {\n+      if (flag->type() != type_enum) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n@@ -64,1 +77,1 @@\n-  template <typename T>\n+  template <typename T, int type_enum>\n@@ -66,0 +79,4 @@\n+    \/\/ The caller must not not mix incompatible types such as\n+    \/\/ set<double, JVMFlag::TYPE_int>(flag, double_ptr);\n+    assert(JVMFlag::is_compatible_type<T>(type_enum), \"must be\");\n+\n@@ -69,2 +86,1 @@\n-    int type_enum = flag->type();\n-    if (!JVMFlag::is_compatible_type<T>(type_enum)) {\n+    if (!is_correct_type(flag, type_enum)) {\n@@ -73,0 +89,1 @@\n+\n@@ -90,1 +107,1 @@\n-  template <typename T>\n+  template <typename T, int type_enum>\n@@ -92,0 +109,4 @@\n+    \/\/ The caller must not not mix incompatible types such as\n+    \/\/ set<double, JVMFlag::TYPE_int>(flag, double_ptr);\n+    assert(JVMFlag::is_compatible_type<T>(type_enum), \"must be\");\n+\n@@ -95,1 +116,1 @@\n-    if (!JVMFlag::is_compatible_type<T>(flag->type())) {\n+    if (!is_correct_type(flag, type_enum)) {\n@@ -98,0 +119,1 @@\n+\n@@ -108,1 +130,1 @@\n-    return get<ccstr>(flag, value);\n+    return get<JVM_FLAG_TYPE(ccstr)>(flag, value);\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagAccess.hpp","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-  template <int dummy> \\\n@@ -79,3 +78,3 @@\n-                                       FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::COMMAND_LINE))\n-#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::ERGONOMIC))\n-#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)<0>((value), JVMFlagOrigin::MANAGEMENT))\n+                                       FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::COMMAND_LINE))\n+#define FLAG_SET_ERGO(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::ERGONOMIC))\n+#define FLAG_SET_MGMT(name, value)    (FLAG_MEMBER_SETTER(name)((value), JVMFlagOrigin::MANAGEMENT))\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -100,0 +100,9 @@\n+template <typename T, int type_enum>\n+JVMFlag::Error WriteableFlags::set_flag_impl(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n+  JVMFlag* flag = JVMFlag::find_flag(name);\n+  JVMFlag::Error err = JVMFlagAccess::set<T, type_enum>(flag, &value, origin);\n+  print_flag_error_message_if_needed(err, flag, err_msg);\n+  return err;\n+}\n+\n+\n@@ -103,1 +112,1 @@\n-    return set_flag(name, true, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(name, true, origin, err_msg);\n@@ -105,1 +114,1 @@\n-    return set_flag(name, false, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(name, false, origin, err_msg);\n@@ -111,8 +120,0 @@\n-template <typename T>\n-JVMFlag::Error WriteableFlags::set_flag(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg) {\n-  JVMFlag* flag = JVMFlag::find_flag(name);\n-  JVMFlag::Error err = JVMFlagAccess::set(flag, &value, origin);\n-  print_flag_error_message_if_needed(err, flag, err_msg);\n-  return err;\n-}\n-\n@@ -124,1 +125,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(int)>(name, value, origin, err_msg);\n@@ -135,1 +136,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint)>(name, value, origin, err_msg);\n@@ -146,1 +147,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(intx)>(name, value, origin, err_msg);\n@@ -157,1 +158,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uintx)>(name, value, origin, err_msg);\n@@ -168,1 +169,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint64_t)>(name, value, origin, err_msg);\n@@ -179,1 +180,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(size_t)>(name, value, origin, err_msg);\n@@ -190,1 +191,1 @@\n-    return set_flag(name, value, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(double)>(name, value, origin, err_msg);\n@@ -288,1 +289,1 @@\n-    return set_flag(f->name(), bvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(bool)>(f->name(), bvalue, origin, err_msg);\n@@ -291,1 +292,1 @@\n-    return set_flag(f->name(), ivalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(int)>(f->name(), ivalue, origin, err_msg);\n@@ -294,1 +295,1 @@\n-    return set_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint)>(f->name(), uvalue, origin, err_msg);\n@@ -297,1 +298,1 @@\n-    return set_flag(f->name(), ivalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(intx)>(f->name(), ivalue, origin, err_msg);\n@@ -300,1 +301,1 @@\n-    return set_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uintx)>(f->name(), uvalue, origin, err_msg);\n@@ -303,1 +304,1 @@\n-    return set_flag(f->name(), uvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(uint64_t)>(f->name(), uvalue, origin, err_msg);\n@@ -306,1 +307,1 @@\n-    return set_flag(f->name(), svalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(size_t)>(f->name(), svalue, origin, err_msg);\n@@ -309,1 +310,1 @@\n-    return set_flag(f->name(), dvalue, origin, err_msg);\n+    return set_flag_impl<JVM_FLAG_TYPE(double)>(f->name(), dvalue, origin, err_msg);\n","filename":"src\/hotspot\/share\/services\/writeableFlags.cpp","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-  template <typename T>\n-  static JVMFlag::Error set_flag(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n+  template <typename T, int type_enum>\n+  static JVMFlag::Error set_flag_impl(const char* name, T value, JVMFlagOrigin origin, FormatBuffer<80>& err_msg);\n","filename":"src\/hotspot\/share\/services\/writeableFlags.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-template <typename T>\n+template <typename T, int type_enum>\n@@ -104,1 +104,1 @@\n-  return JVMFlagAccess::get(flag, &val);\n+  return JVMFlagAccess::get<T, type_enum>(flag, &val);\n@@ -107,3 +107,0 @@\n-enum MyEnum : bool {};\n-class MyClass {};\n-\n@@ -111,1 +108,1 @@\n-  ASSERT_EQ(get_flag<int>(NULL), JVMFlag::INVALID_FLAG);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(int)>(NULL)), JVMFlag::INVALID_FLAG);\n@@ -114,11 +111,8 @@\n-  ASSERT_EQ(get_flag<bool>    (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<int>     (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<uint>    (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<intx>    (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<uintx>   (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<uint64_t>(\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<size_t>  (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<double>  (\"MaxRAMPercentage\"), JVMFlag::SUCCESS);\n-  ASSERT_EQ(get_flag<MyEnum>  (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<MyClass> (\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n-  ASSERT_EQ(get_flag<MyClass*>(\"MaxRAMPercentage\"), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(bool)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(int)>     (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uint)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(intx)>    (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uintx)>   (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(uint64_t)>(\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(size_t)>  (\"MaxRAMPercentage\")), JVMFlag::WRONG_FORMAT);\n+  ASSERT_EQ((get_flag<JVM_FLAG_TYPE(double)>  (\"MaxRAMPercentage\")), JVMFlag::SUCCESS);\n","filename":"test\/hotspot\/gtest\/runtime\/test_globals.cpp","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}