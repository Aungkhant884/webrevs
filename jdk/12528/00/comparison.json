{"files":[{"patch":"@@ -54,0 +54,1 @@\n+import jdk.internal.util.ArraysSupport;\n@@ -1275,2 +1276,1 @@\n-        int dp = 0;\n-        while (dp < val.length && val[dp] >=0) { dp++; }\n+        int dp = StringCoding.countPositives(val, 0, val.length);\n@@ -1873,2 +1873,2 @@\n-        byte v1[] = value;\n-        byte v2[] = sb.getValue();\n+        byte[] v1 = value;\n+        byte[] v2 = sb.getValue();\n@@ -1877,6 +1877,1 @@\n-            int n = v1.length;\n-            for (int i = 0; i < n; i++) {\n-                if (v1[i] != v2[i]) {\n-                    return false;\n-                }\n-            }\n+            return v1.length <= v2.length && ArraysSupport.mismatch(v1, v2, v1.length) < 0;\n@@ -1889,1 +1884,0 @@\n-        return true;\n@@ -2027,2 +2021,2 @@\n-        byte v1[] = value;\n-        byte v2[] = anotherString.value;\n+        byte[] v1 = value;\n+        byte[] v2 = anotherString.value;\n@@ -2063,2 +2057,2 @@\n-            byte v1[] = s1.value;\n-            byte v2[] = s2.value;\n+            byte[] v1 = s1.value;\n+            byte[] v2 = s2.value;\n@@ -2139,2 +2133,0 @@\n-        byte tv[] = value;\n-        byte ov[] = other.value;\n@@ -2147,0 +2139,2 @@\n+        byte[] tv = value;\n+        byte[] ov = other.value;\n@@ -2149,9 +2143,4 @@\n-            if (!isLatin1() && (len > 0)) {\n-                toffset = toffset << 1;\n-                ooffset = ooffset << 1;\n-                len = len << 1;\n-            }\n-            while (len-- > 0) {\n-                if (tv[toffset++] != ov[ooffset++]) {\n-                    return false;\n-                }\n+            if (coder == UTF16) {\n+                toffset <<= UTF16;\n+                ooffset <<= UTF16;\n+                len <<= UTF16;\n@@ -2159,0 +2148,2 @@\n+            return ArraysSupport.mismatch(tv, toffset,\n+                    ov, ooffset, len) < 0;\n@@ -2238,2 +2229,2 @@\n-        byte tv[] = value;\n-        byte ov[] = other.value;\n+        byte[] tv = value;\n+        byte[] ov = other.value;\n@@ -2273,2 +2264,2 @@\n-        byte ta[] = value;\n-        byte pa[] = prefix.value;\n+        byte[] ta = value;\n+        byte[] pa = prefix.value;\n@@ -2279,6 +2270,3 @@\n-            int to = (coder == LATIN1) ? toffset : toffset << 1;\n-            while (po < pc) {\n-                if (ta[to++] != pa[po++]) {\n-                    return false;\n-                }\n-            }\n+            toffset <<= coder;\n+            return ArraysSupport.mismatch(ta, toffset,\n+                    pa, 0, pc) < 0;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":24,"deletions":36,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -112,6 +112,2 @@\n-        for (int k = 0; k < lim; k++) {\n-            if (value[k] != other[k]) {\n-                return getChar(value, k) - getChar(other, k);\n-            }\n-        }\n-        return len1 - len2;\n+        int k = ArraysSupport.mismatch(value, other, lim);\n+        return (k < 0) ? len1 - len2 : getChar(value, k) - getChar(other, k);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private StringBuilder sbLatin2;\n@@ -55,0 +56,1 @@\n+    private StringBuilder sbUtf17;\n@@ -67,0 +69,1 @@\n+        sbLatin2 = new StringBuilder(\"Latin1 string\");\n@@ -68,0 +71,1 @@\n+        sbUtf17 = new StringBuilder(\"UTF-\\uFF11\\uFF16 string\");\n@@ -253,0 +257,9 @@\n+    @Benchmark\n+    public int compareToLatin1() {\n+        return sbLatin1.compareTo(sbLatin2);\n+    }\n+\n+    @Benchmark\n+    public int compareToUTF16() {\n+        return sbUtf16.compareTo(sbUtf17);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * This benchmark naively explores String::startsWith and other String\n+ * comparison methods\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 3)\n+public class StringComparisons {\n+\n+    @Param({\"6\", \"15\", \"1024\"})\n+    public int size;\n+\n+    @Param({\"true\", \"false\"})\n+    public boolean utf16;\n+\n+    public String string;\n+    public String equalString;\n+    public String endsWithA;\n+    public String endsWithB;\n+    public String startsWithA;\n+\n+    @Setup\n+    public void setup() {\n+        String c = utf16 ? \"\\uff11\" : \"c\";\n+        string = c.repeat(size);\n+        equalString = c.repeat(size);\n+        endsWithA = c.repeat(size).concat(\"A\");\n+        endsWithB = c.repeat(size).concat(\"B\");\n+        startsWithA = \"A\" + (c.repeat(size));\n+    }\n+\n+    @Benchmark\n+    public boolean startsWith() {\n+        return endsWithA.startsWith(string);\n+    }\n+\n+    @Benchmark\n+    public boolean endsWith() {\n+        return startsWithA.endsWith(string);\n+    }\n+\n+    @Benchmark\n+    public boolean regionMatches() {\n+        return endsWithA.regionMatches(0, endsWithB, 0, endsWithB.length());\n+    }\n+\n+    @Benchmark\n+    public boolean regionMatchesRange() {\n+        return startsWithA.regionMatches(1, endsWithB, 0, endsWithB.length() - 1);\n+    }\n+\n+    @Benchmark\n+    public boolean regionMatchesCI() {\n+        return endsWithA.regionMatches(true, 0, endsWithB, 0, endsWithB.length());\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringComparisons.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -52,3 +52,0 @@\n-    private String str1, str2, str3, str4;\n-    private String str1UP;\n-\n@@ -58,5 +55,0 @@\n-        str1 = \"vm-guld vm-guld vm-guld\";\n-        str1UP = str1.toUpperCase(Locale.ROOT);\n-        str2 = \"vm-guld vm-guld vm-guldx\";\n-        str3 = \"vm-guld vm-guld vm-guldx\";\n-        str4 = \"adadaskasdjierudks\";\n@@ -73,9 +65,0 @@\n-    @Benchmark\n-    public int compareTo() {\n-        int total = 0;\n-        total += str1.compareTo(str2);\n-        total += str2.compareTo(str3);\n-        total += str3.compareTo(str4);\n-        return total;\n-    }\n-\n@@ -97,6 +80,0 @@\n-    @Benchmark\n-    public void regionMatchesLatin1(Blackhole bh) {\n-        bh.consume(str1.regionMatches(true, 0, str2, 0, str1.length()));\n-        bh.consume(str2.regionMatches(true, 16, str1UP, 0, 8));\n-        bh.consume(str3.regionMatches(true, 6, str4, 1, 2));\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringOther.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"}]}