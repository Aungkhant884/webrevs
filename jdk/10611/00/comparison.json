{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.nio.file.Path;\n@@ -27,0 +28,1 @@\n+import java.util.Set;\n@@ -30,1 +32,6 @@\n-import jdk.test.lib.Asserts;\n+import jdk.jfr.SettingControl;\n+import jdk.jfr.SettingDefinition;\n+import jdk.jfr.consumer.RecordingFile;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertFalse;\n@@ -34,1 +41,1 @@\n- * @summary Test enable\/disable event and verify recording has expected events.\n+ * @summary Test jdk.jfr.Event::shouldCommit()\n@@ -38,1 +45,1 @@\n- * @run main\/othervm -Xlog:jfr+event+setting=trace jdk.jfr.api.event.TestShouldCommit\n+ * @run main\/othervm jdk.jfr.api.event.TestShouldCommit\n@@ -40,1 +47,0 @@\n-\n@@ -43,33 +49,2 @@\n-    public static void main(String[] args) throws Exception {\n-        Recording rA = new Recording();\n-\n-        verifyShouldCommitFalse(); \/\/ No active recordings\n-\n-        rA.start();\n-        rA.enable(MyEvent.class).withoutThreshold(); \/\/ recA=all\n-        verifyShouldCommitTrue();\n-\n-        setThreshold(rA, 100); \/\/ recA=100\n-        verifyThreshold(100);\n-\n-        setThreshold(rA, 200); \/\/ recA=200\n-        verifyThreshold(200);\n-\n-        Recording rB = new Recording();\n-        verifyThreshold(200);  \/\/ recA=200, recB=not started\n-\n-        rB.start();\n-        verifyThreshold(200);  \/\/ recA=200, recB=not specified, settings from recA is used.\n-\n-        setThreshold(rB, 100); \/\/ recA=200, recB=100\n-        verifyThreshold(100);\n-\n-        setThreshold(rB, 300); \/\/ recA=200, recB=300\n-        verifyThreshold(200);\n-\n-        rA.disable(MyEvent.class); \/\/ recA=disabled, recB=300\n-\n-        verifyThreshold(300);\n-\n-        rB.disable(MyEvent.class); \/\/ recA=disabled, recB=disabled\n-        verifyShouldCommitFalse();\n+    private static class CatEvent extends Event {\n+    }\n@@ -77,2 +52,2 @@\n-        setThreshold(rA, 200); \/\/ recA=200, recB=disabled\n-        verifyThreshold(200);\n+    private static class DogEvent extends Event {\n+    }\n@@ -80,2 +55,2 @@\n-        rB.enable(MyEvent.class).withoutThreshold(); \/\/ recA=200, recB=all\n-        verifyShouldCommitTrue();\n+    private static class BirdEvent extends Event {\n+        public boolean isFlying;\n@@ -83,2 +58,5 @@\n-        setThreshold(rB, 100); \/\/ recA=200, recB=100\n-        verifyThreshold(100);\n+        @SettingDefinition\n+        public boolean fly(FlySetting control) {\n+            return control.shouldFly() == isFlying;\n+        }\n+    }\n@@ -86,2 +64,2 @@\n-        rB.stop(); \/\/ recA=200, recB=stopped\n-        verifyThreshold(200);\n+    private static class FlySetting extends SettingControl {\n+        private boolean shouldFly;\n@@ -89,2 +67,9 @@\n-        rA.stop(); \/\/ recA=stopped, recB=stopped\n-        verifyShouldCommitFalse();\n+        @Override\n+        public String combine(Set<String> settingValues) {\n+            for (String s : settingValues) {\n+                if (\"true\".equals(s)) {\n+                    return \"true\";\n+                }\n+            }\n+            return \"false\";\n+        }\n@@ -92,2 +77,3 @@\n-        rA.close();\n-        rB.close();\n+        public boolean shouldFly() {\n+            return shouldFly;\n+        }\n@@ -95,2 +81,4 @@\n-        verifyShouldCommitFalse();\n-    }\n+        @Override\n+        public void setValue(String settingValue) {\n+            shouldFly = \"true\".equals(settingValue);\n+        }\n@@ -98,2 +86,4 @@\n-    private static void setThreshold(Recording r, long millis) {\n-        r.enable(MyEvent.class).withThreshold(Duration.ofMillis(millis));\n+        @Override\n+        public String getValue() {\n+            return String.valueOf(shouldFly);\n+        }\n@@ -102,5 +92,6 @@\n-    private static void verifyThreshold(long threshold) throws Exception {\n-        \/\/ Create 2 events, with different sleep time between begin() and end()\n-        \/\/ First event ends just before threshold, the other just after.\n-        verifyThreshold(threshold-5, threshold);\n-        verifyThreshold(threshold+5, threshold);\n+    public static void main(String[] args) throws Exception {\n+        testEnablement();\n+        testThreshold();\n+        testCustomSetting();\n+        testWithoutEnd();\n+        testCommit();\n@@ -109,2 +100,3 @@\n-    private static void verifyThreshold(long sleepMs, long thresholdMs) throws Exception {\n-        MyEvent event = new MyEvent();\n+    private static void testEnablement() throws Exception {\n+        DogEvent b = new DogEvent();\n+        assertFalse(b.shouldCommit(), \"Expected false before recording is started\");\n@@ -112,3 +104,4 @@\n-        long beforeStartNanos = System.nanoTime();\n-        event.begin();\n-        long afterStartNanos = System.nanoTime();\n+        try (Recording r = new Recording()) {\n+            r.enable(CatEvent.class);\n+            r.disable(DogEvent.class);\n+            r.start();\n@@ -116,1 +109,2 @@\n-        Thread.sleep(sleepMs);\n+            CatEvent c = new CatEvent();\n+            assertTrue(c.shouldCommit(), \"Expected true for enabled event\");\n@@ -118,3 +112,3 @@\n-        long beforeStopNanos = System.nanoTime();\n-        event.end();\n-        long afterStopNanos = System.nanoTime();\n+            DogEvent d = new DogEvent();\n+            assertFalse(d.shouldCommit(), \"Expected false for disabled event\");\n+        }\n@@ -122,1 +116,3 @@\n-        boolean actualShouldCommit = event.shouldCommit();\n+        CatEvent c = new CatEvent();\n+        assertFalse(c.shouldCommit(), \"Expected false after recording is stopped\");\n+    }\n@@ -124,1 +120,5 @@\n-        final long safetyMarginNanos = 2000000; \/\/ Allow an error of 2 ms. May have to be tuned.\n+    private static void testThreshold() throws Exception {\n+        try (Recording r = new Recording()) {\n+            r.enable(CatEvent.class).withThreshold(Duration.ofNanos(0));\n+            r.enable(DogEvent.class).withThreshold(Duration.ofDays(1));\n+            r.start();\n@@ -126,5 +126,5 @@\n-        \/\/Duration of event has been at least minDurationMicros\n-        long minDurationMicros = (beforeStopNanos - afterStartNanos - safetyMarginNanos) \/ 1000;\n-        \/\/Duration of event has been at most maxDurationMicros\n-        long maxDurationMicros = (afterStopNanos - beforeStartNanos + safetyMarginNanos) \/ 1000;\n-        Asserts.assertLessThanOrEqual(minDurationMicros, maxDurationMicros, \"Wrong min\/max duration. Test error.\");\n+            CatEvent c = new CatEvent();\n+            c.begin();\n+            Thread.sleep(1);\n+            c.end();\n+            assertTrue(c.shouldCommit(), \"Expected true if above threshold\");\n@@ -132,8 +132,5 @@\n-        long thresholdMicros = thresholdMs * 1000;\n-        Boolean shouldCommit = null;\n-        if (minDurationMicros > thresholdMicros) {\n-            shouldCommit = new Boolean(true);  \/\/ shouldCommit() must be true\n-        } else if (maxDurationMicros < thresholdMicros) {\n-            shouldCommit = new Boolean(false); \/\/ shouldCommit() must be false\n-        } else {\n-            \/\/ Too close to call. No checks are done since we are not sure of expected shouldCommit().\n+            DogEvent d = new DogEvent();\n+            d.begin();\n+            Thread.sleep(1);\n+            d.end();\n+            assertFalse(d.shouldCommit(), \"Expected false if below threshold\");\n@@ -141,0 +138,1 @@\n+    }\n@@ -142,13 +140,15 @@\n-        System.out.printf(\n-            \"threshold=%d, duration=[%d-%d], shouldCommit()=%b, expected=%s%n\",\n-            thresholdMicros, minDurationMicros, maxDurationMicros, actualShouldCommit,\n-            (shouldCommit!=null ? shouldCommit : \"too close to call\"));\n-\n-        try {\n-            if (shouldCommit != null) {\n-                Asserts.assertEquals(shouldCommit.booleanValue(), actualShouldCommit, \"Wrong shouldCommit()\");\n-            }\n-        } catch (Exception e) {\n-            System.out.println(\"Unexpected value of shouldCommit(). Searching for active threshold...\");\n-            searchThreshold(thresholdMs, 2000+thresholdMs);\n-            throw e;\n+    private static void testCustomSetting() throws Exception {\n+        try (Recording r = new Recording()) {\n+            r.enable(BirdEvent.class).with(\"fly\", \"true\");\n+            r.start();\n+            BirdEvent b1 = new BirdEvent();\n+            b1.isFlying = false;\n+            b1.begin();\n+            b1.end();\n+            assertFalse(b1.shouldCommit(), \"Expected false if rejected by custom setting\");\n+\n+            BirdEvent b2 = new BirdEvent();\n+            b2.isFlying = true;\n+            b2.begin();\n+            b2.end();\n+            assertTrue(b2.shouldCommit(), \"Expected true if accepted by custom setting\");\n@@ -158,4 +158,5 @@\n-    \/\/ Sleeps until shouldCommit() is true, or give up. Used for logging.\n-    private static void searchThreshold(long expectedMs, long maxMs) throws Exception {\n-        long start = System.nanoTime();\n-        long stop = start + maxMs * 1000000;\n+    private static void testWithoutEnd() throws Exception {\n+        try (Recording r = new Recording()) {\n+            r.enable(CatEvent.class).withThreshold(Duration.ofDays(0));\n+            r.enable(DogEvent.class).withThreshold(Duration.ofDays(1));\n+            r.start();\n@@ -163,3 +164,4 @@\n-        MyEvent event = new MyEvent();\n-        event.begin();\n-        event.end();\n+            CatEvent c = new CatEvent();\n+            c.begin();\n+            Thread.sleep(1);\n+            assertTrue(c.shouldCommit(), \"Expected true when above threshold and end() not invoked\");\n@@ -167,1 +169,2 @@\n-        while (!event.shouldCommit() && System.nanoTime() < stop) {\n+            DogEvent d = new DogEvent();\n+            d.begin();\n@@ -169,1 +172,1 @@\n-            event.end();\n+            assertFalse(d.shouldCommit(), \"Expected false when below threshold and end() not invoked\");\n@@ -171,17 +174,0 @@\n-        long durationMicros = (System.nanoTime() - start) \/ 1000;\n-        long expectedMicros = expectedMs * 1000;\n-        System.out.printf(\"shouldCommit()=%b after %,d ms, expected %,d%n\", event.shouldCommit(), durationMicros, expectedMicros);\n-    }\n-\n-    private static void verifyShouldCommitFalse() {\n-        MyEvent event = new MyEvent();\n-        event.begin();\n-        event.end();\n-        Asserts.assertFalse(event.shouldCommit(), \"shouldCommit() expected false\");\n-    }\n-\n-    private static void verifyShouldCommitTrue() {\n-        MyEvent event = new MyEvent();\n-        event.begin();\n-        event.end();\n-        Asserts.assertTrue(event.shouldCommit(), \"shouldCommit() expected true\");\n@@ -190,1 +176,17 @@\n-    private static class MyEvent extends Event {\n+    private static void testCommit() throws Exception {\n+        try (Recording r = new Recording()) {\n+            r.enable(CatEvent.class);\n+            r.start();\n+            CatEvent c = new CatEvent();\n+            c.begin();\n+            Thread.sleep(1);\n+            c.end();\n+            if (c.shouldCommit()) {\n+                c.commit();\n+            }\n+            r.stop();\n+            Path file = Path.of(\"dump.jfr\");\n+            r.dump(file);\n+            boolean hasEvent = RecordingFile.readAllEvents(file).size() > 0;\n+            assertTrue(hasEvent, \"Expected event when using commit() after shouldCommit()\");\n+        }\n@@ -192,1 +194,0 @@\n-\n","filename":"test\/jdk\/jdk\/jfr\/api\/event\/TestShouldCommit.java","additions":125,"deletions":124,"binary":false,"changes":249,"status":"modified"}]}