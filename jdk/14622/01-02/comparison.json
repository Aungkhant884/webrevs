{"files":[{"patch":"@@ -39,0 +39,8 @@\n+\/**\n+ * The test implements different scenarios to get desired JVMTI thread states.\n+ * For each scenarios test also checks states after carrier and virtual threads suspend\/resume\n+ * and after virtual thread interrupt.\n+ * Special handling is required for WAITING state scenarios:\n+ * Spurious wakeups may cause unexpected thread state change and this causes test failure.\n+ * To avoid this test thread should be suspended (i.e. carrier and\/or mounted virtual thread is suspended).\n+ *\/\n@@ -68,1 +76,1 @@\n-        testThreadStates(vthread, true, JVMTI_THREAD_STATE_RUNNABLE);\n+        testThreadStates(vthread, false, true, JVMTI_THREAD_STATE_RUNNABLE);\n@@ -89,1 +97,1 @@\n-            testThreadStates(vthread, true, JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER);\n+            testThreadStates(vthread, false, true, JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER);\n@@ -102,2 +110,2 @@\n-                                           ? \">>JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT\"\n-                                           : \">>JVMTI_THREAD_STATE_WAITING_INDEFINITELY\");\n+                                           ? \"JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT\"\n+                                           : \"JVMTI_THREAD_STATE_WAITING_INDEFINITELY\");\n@@ -105,0 +113,3 @@\n+        \/\/ Test thread exits by InterruptedException,\n+        \/\/ stopFlag is to handle spurious wakeups.\n+        final boolean[] stopFlag = new boolean[1];\n@@ -110,4 +121,6 @@\n-                    if (withTimeout) {\n-                        syncObj.wait(60000);\n-                    } else {\n-                        syncObj.wait();\n+                    while (!stopFlag[0]) {\n+                        if (withTimeout) {\n+                            syncObj.wait(60000);\n+                        } else {\n+                            syncObj.wait();\n+                        }\n@@ -116,1 +129,1 @@\n-                    \/\/ expected, ignore\n+                    \/\/ expected after testThreadStates\n@@ -122,1 +135,4 @@\n-        Thread.sleep(500); \/\/ wait some time to ensure the thread is blocked on Object.wait\n+\n+        \/\/ Suspend test thread in \"waiting\" state.\n+        suspendWaiting(vthread);\n+\n@@ -128,1 +144,1 @@\n-        testThreadStates(vthread, true, expectedState);\n+        testThreadStates(vthread, true,  true, expectedState);\n@@ -131,0 +147,1 @@\n+            stopFlag[0] = true;\n@@ -144,0 +161,3 @@\n+        \/\/ Test thread exits by InterruptedException,\n+        \/\/ stopFlag is to handle spurious wakeups.\n+        final boolean[] stopFlag = new boolean[1];\n@@ -147,1 +167,3 @@\n-                Thread.sleep(60000);\n+                while (!stopFlag[0]) {\n+                    Thread.sleep(60000);\n+                }\n@@ -154,1 +176,7 @@\n-        Thread.sleep(500); \/\/ wait some time to ensure the thread has reached waiting state\n+\n+        \/\/ Suspend test thread in \"waiting\" state.\n+        suspendWaiting(vthread);\n+\n+        \/\/ vthread is suspended, set stopFlag before testThreadStates\n+        stopFlag[0] = true;\n+\n@@ -157,1 +185,1 @@\n-        testThreadStates(vthread, false,\n+        testThreadStates(vthread, true, false,\n@@ -168,0 +196,2 @@\n+        final boolean[] stopFlag = new boolean[1];\n+\n@@ -170,1 +200,3 @@\n-            LockSupport.park(Thread.currentThread());\n+            while (!stopFlag[0]) {\n+                LockSupport.park(Thread.currentThread());\n+            }\n@@ -174,1 +206,7 @@\n-        Thread.sleep(500); \/\/ wait some time to ensure the thread has reached waiting state\n+\n+        \/\/ Suspend test thread in \"waiting\" state.\n+        suspendWaiting(vthread);\n+\n+        \/\/ vthread is suspended, set stopFlag before testThreadStates\n+        stopFlag[0] = true;\n+\n@@ -177,1 +215,1 @@\n-        testThreadStates(vthread, false,\n+        testThreadStates(vthread, true, false,\n@@ -193,1 +231,1 @@\n-        testThreadStates(vthread, true,\n+        testThreadStates(vthread, false, true,\n@@ -196,0 +234,1 @@\n+        endWait();\n@@ -226,0 +265,14 @@\n+    \/\/ Native implementation of suspendWaiting.\n+    \/\/ Returns false if the method is not able to reach the desired state in several tries.\n+    private static native boolean trySuspendInWaitingState(Thread vthread);\n+\n+    \/\/ Suspends virtual thread and ensures it's suspended in \"waiting\" state\n+    \/\/ (to handle possible spurious wakeups).\n+    \/\/ throws an exception if the method is not able to reach the desired state in several tries.\n+    private static void suspendWaiting(Thread vthread) {\n+        boolean result = trySuspendInWaitingState(vthread);\n+        if (!result) {\n+            throw new RuntimeException(\"Failed to suspend thread in WAITING state\");\n+        }\n+    }\n+\n@@ -230,1 +283,3 @@\n-    private static native void testThread(Thread vthread,\n+    \/\/ Note: Last steps of the testing are interrupt\/resume the virtual thread,\n+    \/\/ so after the call vthread is interrupted.\n+    private static native void testThread(Thread vthread, boolean isVThreadSuspended,\n@@ -234,0 +289,2 @@\n+    \/\/ To retry test case when spurious wakeup detected.\n+    private static native int resetErrorCount(int count);\n@@ -243,1 +300,1 @@\n-    private static void testThreadStates(Thread vthread,\n+    private static void testThreadStates(Thread vthread, boolean isVThreadSuspended,\n@@ -248,1 +305,1 @@\n-        testThread(vthread, testInterrupt, expectedStrong, expectedWeak);\n+        testThread(vthread, isVThreadSuspended, testInterrupt, expectedStrong, expectedWeak);\n@@ -251,2 +308,3 @@\n-    private static void testThreadStates(Thread vthread, boolean testInterrupt, int expectedState) {\n-        testThreadStates(vthread, testInterrupt, expectedState, 0);\n+    private static void testThreadStates(Thread vthread, boolean isVThreadSuspended,\n+                                         boolean testInterrupt, int expectedState) {\n+        testThreadStates(vthread, isVThreadSuspended, testInterrupt, expectedState, 0);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetThreadStateMountedTest\/GetThreadStateMountedTest.java","additions":81,"deletions":23,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -53,0 +53,25 @@\n+extern \"C\" JNIEXPORT jboolean JNICALL\n+Java_GetThreadStateMountedTest_trySuspendInWaitingState(JNIEnv* jni, jclass clazz, jthread vthread) {\n+  const int max_retries = 10;\n+  for (int i = 0; i < max_retries; i++) {\n+    \/\/ wait a bit\n+    sleep_ms(100);\n+\n+    \/\/ suspend the thread\n+    LOG(\"suspend vthread (%d)\\n\", i);\n+    suspend_thread(jvmti, jni, vthread);\n+\n+    jint state = get_thread_state(jvmti, jni, vthread);\n+    if ((state & JVMTI_THREAD_STATE_WAITING) != 0) {\n+      LOG(\"suspended in WAITING state\\n\");\n+      return JNI_TRUE;\n+    }\n+    LOG(\"suspended vthread is not waiting: state = %x (%s)\\n\", state, TranslateState(state));\n+    LOG(\"resume vthread\\n\");\n+    resume_thread(jvmti, jni, vthread);\n+  }\n+  LOG(\"ERROR: failed to suspend in WAITING state in %d tries\\n\", max_retries);\n+  return JNI_FALSE;\n+\n+}\n+\n@@ -65,1 +90,1 @@\n-       missed, TranslateState(missed));\n+        missed, TranslateState(missed));\n@@ -73,1 +98,1 @@\n-       unexpected, TranslateState(unexpected));\n+        unexpected, TranslateState(unexpected));\n@@ -98,1 +123,2 @@\n-  JNIEnv* jni, jclass clazz, jthread vthread, jboolean test_interrupt,\n+  JNIEnv* jni, jclass clazz, jthread vthread, jboolean is_vthread_suspended,\n+  jboolean test_interrupt,\n@@ -112,1 +138,2 @@\n-                      exp_vt_state, expected_weak);\n+                      exp_vt_state | (is_vthread_suspended ? JVMTI_THREAD_STATE_SUSPENDED : 0),\n+                      expected_weak);\n@@ -120,1 +147,2 @@\n-                      exp_vt_state, expected_weak);\n+                      exp_vt_state | (is_vthread_suspended ? JVMTI_THREAD_STATE_SUSPENDED : 0),\n+                      expected_weak);\n@@ -122,7 +150,9 @@\n-  \/\/ suspend vtread and verify\n-  LOG(\"suspend vthread\\n\");\n-  suspend_thread(jvmti, jni, vthread);\n-  verify_thread_state(\"cthread\", jni, cthread,\n-                      exp_ct_state | JVMTI_THREAD_STATE_SUSPENDED, 0);\n-  verify_thread_state(\"vthread\", jni, vthread,\n-                      exp_vt_state | JVMTI_THREAD_STATE_SUSPENDED, expected_weak);\n+  \/\/ suspend vthread and verify\n+  if (!is_vthread_suspended) {\n+    LOG(\"suspend vthread\\n\");\n+    suspend_thread(jvmti, jni, vthread);\n+    verify_thread_state(\"cthread\", jni, cthread,\n+                        exp_ct_state | JVMTI_THREAD_STATE_SUSPENDED, 0);\n+    verify_thread_state(\"vthread\", jni, vthread,\n+                        exp_vt_state | JVMTI_THREAD_STATE_SUSPENDED, expected_weak);\n+  }\n@@ -149,1 +179,1 @@\n-  \/\/ resume vthread;\n+  \/\/ resume vthread\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/GetThreadStateMountedTest\/libGetThreadStateMountedTest.cpp","additions":43,"deletions":13,"binary":false,"changes":56,"status":"modified"}]}