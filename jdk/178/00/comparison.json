{"files":[{"patch":"@@ -1064,1 +1064,2 @@\n-  \/\/ The max number of regions in the heap.\n+  \/\/ The max number of regions reserved for the heap. Except for static array\n+  \/\/ sizing purposes you probably want max_expandable_regions().\n@@ -1067,1 +1068,1 @@\n-  \/\/ Max number of regions that can be comitted.\n+  \/\/ Max number of regions that can be committed.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -369,1 +369,1 @@\n-  _root_regions(_g1h->max_regions()),\n+  _root_regions(_g1h->max_expandable_regions()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -536,1 +536,1 @@\n-  assert(max_survivor_regions() + _g1h->num_used_regions() <= _g1h->max_regions(),\n+  assert(max_survivor_regions() + _g1h->num_used_regions() <= _g1h->max_expandable_regions(),\n@@ -538,1 +538,1 @@\n-         max_survivor_regions(), _g1h->num_used_regions(), _g1h->max_regions());\n+         max_survivor_regions(), _g1h->num_used_regions(), _g1h->max_expandable_regions());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,5 +88,5 @@\n-                               G1RegionToSpaceMapper* prev_bitmap,\n-                               G1RegionToSpaceMapper* next_bitmap,\n-                               G1RegionToSpaceMapper* bot,\n-                               G1RegionToSpaceMapper* cardtable,\n-                               G1RegionToSpaceMapper* card_counts) {\n+                                   G1RegionToSpaceMapper* prev_bitmap,\n+                                   G1RegionToSpaceMapper* next_bitmap,\n+                                   G1RegionToSpaceMapper* bot,\n+                                   G1RegionToSpaceMapper* cardtable,\n+                                   G1RegionToSpaceMapper* card_counts) {\n@@ -187,1 +187,2 @@\n-  guarantee(_num_committed + num_regions <= max_length(), \"Cannot commit more than the maximum amount of regions\");\n+  guarantee(num_regions <= available(),\n+            \"Cannot commit more than the maximum amount of regions\");\n@@ -324,10 +325,13 @@\n-  for (uint i = 0; i < max_length(); i++) {\n-    if (is_available(i)) {\n-      \/\/ Already in use continue\n-      continue;\n-    }\n-    \/\/ Always save the candidate so we can expand later on.\n-    expand_candidate = i;\n-    if (is_on_preferred_index(expand_candidate, preferred_index)) {\n-      \/\/ We have found a candidate on the preffered node, break.\n-      break;\n+\n+  if (available() >= 1) {\n+    for (uint i = 0; i < max_length(); i++) {\n+      if (is_available(i)) {\n+        \/\/ Already in use continue\n+        continue;\n+      }\n+      \/\/ Always save the candidate so we can expand later on.\n+      expand_candidate = i;\n+      if (is_on_preferred_index(expand_candidate, preferred_index)) {\n+        \/\/ We have found a candidate on the preferred node, break.\n+        break;\n+      }\n@@ -406,0 +410,4 @@\n+  \/\/ Check if we can actually satisfy the allocation.\n+  if (num_regions > available()) {\n+    return G1_NO_HRM_INDEX;\n+  }\n@@ -455,0 +463,2 @@\n+  \/\/ Shrink returned range to number of regions left to commit if necessary.\n+  end = MIN2(start + available(), end);\n@@ -617,0 +627,3 @@\n+  guarantee(_num_committed <= max_expandable_length(),\n+            \"invariant: _num_committed: %u max_expandable_length: %u\",\n+            _num_committed, max_expandable_length());\n@@ -747,1 +760,1 @@\n-  uint const num_workers = clamp(max_length(), 1u, workers->active_workers());\n+  uint const num_workers = clamp(max_expandable_length(), 1u, workers->active_workers());\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.cpp","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-\/\/ We keep track of three lengths:\n+\/\/ We keep track of four lengths:\n@@ -82,1 +82,2 @@\n-\/\/ * max_length() returns the maximum number of regions the heap can have.\n+\/\/ * max_expandable_length() returns the maximum number of regions the heap may commit.\n+\/\/ * max_length() returns the maximum number of regions the heap has reserved.\n@@ -97,1 +98,1 @@\n-   \/\/ The number of regions committed in the heap.\n+  \/\/ The number of regions committed in the heap.\n@@ -244,1 +245,1 @@\n-  uint available() const { return max_length() - length(); }\n+  uint available() const { return max_expandable_length() - length(); }\n@@ -249,1 +250,1 @@\n-  \/\/ Return the maximum number of regions in the heap.\n+  \/\/ The max number of regions reserved for the heap.\n@@ -253,1 +254,1 @@\n-  virtual uint max_expandable_length() const { return (uint)_regions.length(); }\n+  virtual uint max_expandable_length() const { return max_length(); }\n@@ -270,1 +271,1 @@\n-  \/\/ Try to expand on the given node index.\n+  \/\/ Try to expand on the given node index, returning the index of the new region.\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.hpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -457,1 +457,1 @@\n-    size_t nr = g1h->max_regions();\n+    size_t nr = g1h->max_expandable_regions();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}