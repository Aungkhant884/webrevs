{"files":[{"patch":"@@ -167,10 +167,4 @@\n-    \/\/ Loop around an allocation loop and wait until the TLABs have settled.\n-    \/\/ It takes two steps to enable Object Sampling with interval 0\n-    \/\/ 1. consume current TLAB, which can be varies with heap\/GC configuration\n-    \/\/    then allocation enters allocate_inside_tlab_slow and check\n-    \/\/    JvmtiExport::should_post_sampled_object_alloc\n-    \/\/ 2. consume initial ThreadHeapSampler::_bytes_until_sample\n-    \/\/    then runtime invokes pick_next_sample and check sampleing interval\n-    \/\/    and set _bytes_until_sample to 0.\n-    \/\/    initial _bytes_until_sample is geometric variable with the specified mean\n-    \/\/    (512K by default), check ThreadHeapSampler::pick_next_geometric_sample()\n+    \/\/ Trigger GC then loop around an allocation loop and wait until Object Sampling\n+    \/\/ is enabled for every later allocation. It takes two steps:\n+    \/\/ 1. Consume current TLAB, whose size can be varies with heap\/GC configuration\n+    \/\/ 2. Consume initial ThreadHeapSampler::_bytes_until_sample, which is around 512KB\n@@ -178,3 +172,1 @@\n-    \/\/ trigger GC to consume current TLAB in step1\n-    \/\/ consume initial _bytes_until_sample in following loops, each iteration consume\n-    \/\/ about 1600KB, 10 iterations can definitly consume intitial _bytes_until_sample\n+    \/\/ Step1 trigger GC to consume current TLAB\n@@ -182,0 +174,2 @@\n+    \/\/ Step2 loop allocation consume \"bytes until sample\", each iteration allocate\n+    \/\/ about 1600KB, 10 iterations can definitly consume initial \"bytes until sample\"\n@@ -215,1 +209,1 @@\n-    \/\/ similar reason with sampleEverything, consume TLAB and trigger sample\n+    \/\/ Use System.gc() to consume TLAB and trigger sampling as described above in sampleEverything\n@@ -219,1 +213,1 @@\n-          217));\n+          211));\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitor.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-    \/\/ retire TLAB with GC, ensure sample happens, not assume TLAB size\n+    \/\/ Instead of relying on the allocation loop to fill and retire the TLAB, which might not happen,\n+    \/\/ use System.gc() to retire the TLAB and ensure sampling happens\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}