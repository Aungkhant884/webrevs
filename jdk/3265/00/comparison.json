{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, 2019, Google and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Google and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,15 @@\n-    \/\/ Loop around an allocation loop and wait until the tlabs have settled.\n+    \/\/ Loop around an allocation loop and wait until the TLABs have settled.\n+    \/\/ It takes two steps to enable Object Sampling with interval 0\n+    \/\/ 1. consume current TLAB, which can be varies with heap\/GC configuration\n+    \/\/    then allocation enters allocate_inside_tlab_slow and check\n+    \/\/    JvmtiExport::should_post_sampled_object_alloc\n+    \/\/ 2. consume initial ThreadHeapSampler::_bytes_until_sample\n+    \/\/    then runtime invokes pick_next_sample and check sampleing interval\n+    \/\/    and set _bytes_until_sample to 0.\n+    \/\/    initial _bytes_until_sample is geometric variable with the specified mean\n+    \/\/    (512K by default), check ThreadHeapSampler::pick_next_geometric_sample()\n+    \/\/\n+    \/\/ trigger GC to consume current TLAB in step1\n+    \/\/ consume initial _bytes_until_sample in following loops, each iteration consume\n+    \/\/ about 1600KB, 10 iterations can definitly consume intitial _bytes_until_sample\n+    System.gc();\n@@ -201,1 +215,2 @@\n-\n+    \/\/ similar reason with sampleEverything, consume TLAB and trigger sample\n+    System.gc();\n@@ -204,1 +219,1 @@\n-          202));\n+          217));\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitor.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+    \/\/ retire TLAB with GC, ensure sample happens, not assume TLAB size\n+    System.gc();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}