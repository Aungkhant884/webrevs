{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, 2019, Google and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Google and\/or its affiliates. All rights reserved.\n@@ -167,1 +167,9 @@\n-    \/\/ Loop around an allocation loop and wait until the tlabs have settled.\n+    \/\/ Trigger GC then loop around an allocation loop and wait until Object Sampling\n+    \/\/ is enabled for every later allocation. It takes two steps:\n+    \/\/ 1. Consume current TLAB, whose size can be varies with heap\/GC configuration\n+    \/\/ 2. Consume initial ThreadHeapSampler::_bytes_until_sample, which is around 512KB\n+    \/\/\n+    \/\/ Step1 trigger GC to consume current TLAB\n+    System.gc();\n+    \/\/ Step2 loop allocation consume \"bytes until sample\", each iteration allocate\n+    \/\/ about 1600KB, 10 iterations can definitly consume initial \"bytes until sample\"\n@@ -201,1 +209,2 @@\n-\n+    \/\/ Use System.gc() to consume TLAB and trigger sampling as described above in sampleEverything\n+    System.gc();\n@@ -204,1 +213,1 @@\n-          202));\n+          211));\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitor.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2018, Google and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Google and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,3 @@\n+    \/\/ Instead of relying on the allocation loop to fill and retire the TLAB, which might not happen,\n+    \/\/ use System.gc() to retire the TLAB and ensure sampling happens\n+    System.gc();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/HeapMonitor\/MyPackage\/HeapMonitorStatObjectCorrectnessTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}