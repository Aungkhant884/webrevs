{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -591,0 +591,8 @@\n+     * This method is overridden by the subclasses of {@code URLConnection}.\n+     *\n+     * @implSpec In the implementation of these methods, if a given key has multiple\n+     * corresponding values, they must be returned in the order they were added,\n+     * preserving the insertion-order.\n+     *\n+     * @implNote The default implementation of this method returns an empty map always.\n+     *\n@@ -1136,0 +1144,4 @@\n+     * This method could be a no-op if appending a value\n+     * to the map is not supported by the protocol being\n+     * used in a given subclass.\n+     *\n@@ -1183,0 +1195,10 @@\n+     * If multiple values for a given key are added via the\n+     * {@link #addRequestProperty(String, String)} method,\n+     * these values will be returned in the order they were\n+     * added. This method must preserve the insertion order\n+     * of such values.\n+     *\n+     * @implNote The default implementation of this method preserves the insertion order when\n+     * multiple values are added for a given key. The values are returned in the order they\n+     * were added.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,1 +248,1 @@\n-        for (int i = nkeys; --i >= 0;) {\n+        for (int i = 0; i < nkeys; i++) {\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MessageHeader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8133686\n+ * @summary Ensuring that multiple header values for a given field-name are returned in\n+ *          the order they were added for HttpURLConnection.getRequestProperties\n+ *          and HttpURLConnection.getHeaderFields\n+ * @library \/test\/lib\n+ * @run testng HttpURLConnectionHeadersOrder\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.*;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class HttpURLConnectionHeadersOrder {\n+    private static final String LOCAL_TEST_ENDPOINT = \"\/headertest\";\n+    private static final String ERROR_MESSAGE_TEMPLATE = \"Expected Request Properties = %s, Actual Request Properties = %s\";\n+    private static final List<String> EXPECTED_HEADER_VALUES = Arrays.asList(\"a\", \"b\", \"c\");\n+    private static HttpServer server;\n+    private static URL serverUrl;\n+\n+\n+    @BeforeTest\n+    public void beforeTest() throws Exception {\n+        SimpleHandler handler = new SimpleHandler();\n+        server = createSimpleHttpServer(handler);\n+        serverUrl = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(server.getAddress().getAddress())\n+                .port(server.getAddress().getPort())\n+                .path(LOCAL_TEST_ENDPOINT)\n+                .toURL();\n+    }\n+\n+    @AfterTest\n+    public void afterTest() {\n+        if (server != null)\n+            server.stop(0);\n+    }\n+\n+    \/**\n+     * - This tests requestProperty insertion-order\n+     * - on the client side by sending a HTTP GET\n+     * - request to a \"dummy\" server with additional\n+     * - custom request properties\n+     *\n+     * @throws Exception\n+     *\/\n+    @Test (priority = 1)\n+    public void testRequestPropertiesOrder() throws Exception {\n+        final var conn = (HttpURLConnection) serverUrl.openConnection();\n+\n+        conn.addRequestProperty(\"test_req_prop\", \"a\");\n+        conn.addRequestProperty(\"test_req_prop\", \"b\");\n+        conn.addRequestProperty(\"test_req_prop\", \"c\");\n+\n+        conn.setRequestMethod(\"GET\");\n+\n+        var requestProperties = conn.getRequestProperties();\n+        var customRequestProps = requestProperties.get(\"test_req_prop\");\n+\n+        conn.disconnect();\n+        Assert.assertNotNull(customRequestProps);\n+        Assert.assertEquals(customRequestProps, EXPECTED_HEADER_VALUES, String.format(ERROR_MESSAGE_TEMPLATE, EXPECTED_HEADER_VALUES.toString(), customRequestProps.toString()));\n+    }\n+\n+    \/**\n+     * - This tests whether or not the insertion order is preserved for custom headers\n+     * - on the server's side.\n+     * - The server will return a custom status code (999) if the expected headers\n+     * - are not equal to the actual headers\n+     *\n+     * @throws Exception\n+     *\/\n+    @Test (priority = 2)\n+    public void testServerSideRequestHeadersOrder() throws Exception {\n+        final var conn = (HttpURLConnection) serverUrl.openConnection();\n+        conn.addRequestProperty(\"test_server_handling\", \"a\");\n+        conn.addRequestProperty(\"test_server_handling\", \"b\");\n+        conn.addRequestProperty(\"test_server_handling\", \"c\");\n+\n+        int statusCode = conn.getResponseCode();\n+        conn.disconnect();\n+        Assert.assertEquals(statusCode, 999, \"The insertion-order was not preserved on the server-side response headers handling\");\n+    }\n+\n+    @Test (priority = 3)\n+    public void testClientSideResponseHeadersOrder() throws Exception {\n+        final var conn = (HttpURLConnection) serverUrl.openConnection();\n+        conn.setRequestMethod(\"GET\");\n+\n+        var actualCustomResponseHeaders = conn.getHeaderFields().get(\"Test_response\");\n+        Assert.assertNotNull(actualCustomResponseHeaders, \"Error in reading custom response headers\");\n+        Assert.assertEquals(EXPECTED_HEADER_VALUES, actualCustomResponseHeaders, String.format(ERROR_MESSAGE_TEMPLATE, EXPECTED_HEADER_VALUES.toString(), actualCustomResponseHeaders.toString()));\n+    }\n+\n+    private static HttpServer createSimpleHttpServer(SimpleHandler handler) throws IOException {\n+        var serverAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        var server = HttpServer.create(serverAddress, 0);\n+        server.createContext(LOCAL_TEST_ENDPOINT, handler);\n+        server.start();\n+        System.out.println(\"Server started on \" + server.getAddress());\n+        return server;\n+    }\n+\n+    private static class SimpleHandler implements HttpHandler {\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            int statusCode = testRequestHeadersOrder(exchange);\n+            sendCustomResponse(exchange, statusCode);\n+        }\n+\n+        private int testRequestHeadersOrder(HttpExchange exchange) {\n+            var requestHeaders = exchange.getRequestHeaders();\n+            var actualTestRequestHeaders = requestHeaders.get(\"test_server_handling\");\n+\n+            if (actualTestRequestHeaders == null) {\n+                System.out.println(\"Error: requestHeaders.get(\\\"test_server_handling\\\") returned null\");\n+                return -1;\n+            }\n+\n+            if (!actualTestRequestHeaders.equals(EXPECTED_HEADER_VALUES)) {\n+                System.out.println(\"Error: \" + String.format(ERROR_MESSAGE_TEMPLATE, EXPECTED_HEADER_VALUES.toString(), actualTestRequestHeaders.toString()));\n+                return -1;\n+            }\n+            return 999;\n+        }\n+\n+        private void sendCustomResponse(HttpExchange exchange, int statusCode) throws IOException {\n+            var responseHeaders = exchange.getResponseHeaders();\n+            responseHeaders.add(\"test_response\", \"a\");\n+            responseHeaders.add(\"test_response\", \"b\");\n+            responseHeaders.add(\"test_response\", \"c\");\n+\n+            var outputStream = exchange.getResponseBody();\n+            var response = \"Testing headers\";\n+            exchange.sendResponseHeaders(statusCode, response.length());\n+\n+            outputStream.write(response.getBytes());\n+            outputStream.flush();\n+            outputStream.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpURLConnectionHeadersOrder.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n- * @bug 4644775 6230836\n- * @summary Test URLConnection Request Proterties\n+ * @bug 4644775 6230836 8133686\n+ * @summary Test URLConnection Request Properties\n+ * @run main RequestPropertyValues\n@@ -33,2 +34,1 @@\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.*;\n@@ -41,0 +41,2 @@\n+ * Part3:\n+ *   bug 8133686: Preserving the insertion-order of getRequestProperties\n@@ -48,0 +50,1 @@\n+        part3();\n@@ -102,0 +105,36 @@\n+     private static void part3() throws Exception{\n+        List<URL> urls = new ArrayList<>();\n+\n+        urls.add(new URL(\"http:\/\/localhost:8088\"));\n+        urls.add(new URL(\"jar:http:\/\/foo.com\/bar.html!\/foo\/bar\"));\n+\n+        for(URL url : urls) {\n+            System.out.println(\"Testing \" + url.toString().split(\":\")[0]);\n+            URLConnection urlConnection = url.openConnection();\n+            addCustomRequestProperties(urlConnection);\n+            testRequestPropertiesOrder(urlConnection);\n+        }\n+    }\n+\n+    private static void addCustomRequestProperties(URLConnection urlConnection) {\n+        urlConnection.addRequestProperty(\"Testprop\", \"val1\");\n+        urlConnection.addRequestProperty(\"Testprop\", \"val2\");\n+        urlConnection.addRequestProperty(\"Testprop\", \"val3\");\n+    }\n+\n+    private static void testRequestPropertiesOrder(URLConnection con) {\n+        List<String> expectedTestRequestProperties = Arrays.asList(\"val1\", \"val2\", \"val3\");\n+\n+        Map<String, List<String>> requestProperties = con.getRequestProperties();\n+\n+        List<String> actualTestRequestProperties = requestProperties.get(\"Testprop\");\n+        Objects.requireNonNull(actualTestRequestProperties);\n+\n+        if (!actualTestRequestProperties.equals(expectedTestRequestProperties)) {\n+            System.out.println(\"expectedTestRequestHeaders = \" + expectedTestRequestProperties.toString());\n+            System.out.println(\"actualTestRequestHeaders = \" + actualTestRequestProperties.toString());\n+            String errorMessageTemplate = \"expectedTestRequestProperties = %s, actualTestRequestProperties = %s\";\n+            throw new RuntimeException(\"expectedTestRequestProperties != actualTestRequestProperties for URL = \" + con.getURL().toString() + String.format(errorMessageTemplate, expectedTestRequestProperties.toString(), actualTestRequestProperties.toString()));\n+        }\n+    }\n+\n@@ -105,1 +144,0 @@\n-\n@@ -111,1 +149,0 @@\n-\n","filename":"test\/jdk\/java\/net\/URLConnection\/RequestPropertyValues.java","additions":44,"deletions":7,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4143541 4147035 4244362\n+ * @bug 4143541 4147035 4244362 8133686\n@@ -107,1 +107,1 @@\n-            if (!((List)e.get(\"Cookie\")).toString().equals(\"[cookie3, cookie2, cookie1]\")) {\n+            if (!((List)e.get(\"Cookie\")).toString().equals(\"[cookie1, cookie2, cookie3]\")) {\n","filename":"test\/jdk\/java\/net\/URLConnection\/URLConnectionHeaders.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8133686\n+ * @summary Ensuring that multiple header values for a given field-name are returned in\n+ *          the order they were added for HttpURLConnection.getRequestProperties\n+ *          and HttpURLConnection.getHeaderFields\n+ * @library \/test\/lib\n+ * @run testng URLConnectionHeadersOrder\n+ *\/\n+\n+import jdk.test.lib.net.URIBuilder;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Arrays;\n+\n+public class URLConnectionHeadersOrder {\n+    @Test\n+    public void testRequestPropertiesOrder() throws Exception {\n+        var url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(InetAddress.getLoopbackAddress())\n+                .toURL();\n+\n+        var conn = new DummyHttpURLConnection(url);\n+        conn.addRequestProperty(\"test\", \"a\");\n+        conn.addRequestProperty(\"test\", \"b\");\n+        conn.addRequestProperty(\"test\", \"c\");\n+        conn.connect();\n+\n+        var expectedRequestProps = Arrays.asList(\"a\", \"b\", \"c\");\n+        var actualRequestProps = conn.getRequestProperties().get(\"test\");\n+\n+        Assert.assertNotNull(actualRequestProps);\n+\n+        String errorMessageTemplate = \"Expected Request Properties = %s, Actual Request Properties = %s\";\n+        Assert.assertEquals(actualRequestProps, expectedRequestProps, String.format(errorMessageTemplate, expectedRequestProps.toString(), actualRequestProps.toString()));\n+    }\n+}\n+\n+class DummyHttpURLConnection extends URLConnection {\n+\n+    \/**\n+     * Constructs a URL connection to the specified URL. A connection to\n+     * the object referenced by the URL is not created.\n+     *\n+     * @param url the specified URL.\n+     *\/\n+    protected DummyHttpURLConnection(URL url) {\n+        super(url);\n+    }\n+\n+    @Override\n+    public void connect() throws IOException {\n+        var connected = true;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/URLConnection\/URLConnectionHeadersOrder.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8003948\n+ * @bug 8003948 8133686\n@@ -28,1 +28,1 @@\n- * @run main MessageHeaderTest\n+ * @run testng MessageHeaderTest\n@@ -30,0 +30,1 @@\n+\n@@ -31,0 +32,4 @@\n+import java.util.*;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n@@ -34,1 +39,46 @@\n-    public static void main (String[] args) throws Exception {\n+    \/* This test checks to see if the MessageHeader.getHeaders method\n+       returns headers with the same value field in the order they were added\n+       to conform with RFC2616\n+   *\/\n+\n+    @Test\n+    public void reverseMessageHeadersTest() throws Exception {\n+        String errorMessageTemplate = \"Expected Headers = %s, Actual Headers = %s\";\n+        var expectedHeaders = Arrays.asList(\"a\", \"b\", \"c\");\n+\n+        MessageHeader testHeader = new MessageHeader();\n+        testHeader.add(\"test\", \"a\");\n+        testHeader.add(\"test\", \"b\");\n+        testHeader.add(\"test\", \"c\");\n+\n+        var actualHeaders = testHeader.getHeaders().get(\"test\");\n+\n+        Assert.assertEquals(expectedHeaders, actualHeaders, String.format(errorMessageTemplate, expectedHeaders.toString(), actualHeaders.toString()));\n+    }\n+\n+    @Test\n+    public void ntlmNegotiateTest () throws Exception {\n+        String expected[] = {\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: }\",\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}{Bar: foo}\",\n+            \"{null: HTTP\/1.1 200 Ok}{WWW-Authenticate: Negotiate}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM}{Bar: foo}{WWW-Authenticate: Kerberos}\",\n+            \"{null: HTTP\/1.1 200 Ok}{Foo: foo}{Bar: }{WWW-Authenticate: NTLM blob}{Bar: foo blob}\"\n+        };\n+\n+        boolean[] expectedResult = {\n+            false, false, true, true, true, false, false\n+        };\n+\n+        String[] headers = {\n+            \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\",\n+            \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate:\",\n+            \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nWWW-Authenticate: Negotiate\",\n+            \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nWWW-Authenticate: Negotiate\\r\\nWWW-Authenticate: Kerberos\",\n+            \"HTTP\/1.1 200 Ok\\r\\nWWW-Authenticate: Negotiate\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nBar: foo\\r\\nWWW-Authenticate: Kerberos\",\n+            \"HTTP\/1.1 200 Ok\\r\\nWWW-Authenticate: Negotiate\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM\\r\\nBar: foo\\r\\nWWW-Authenticate: Kerberos\",\n+            \"HTTP\/1.1 200 Ok\\r\\nFoo: foo\\r\\nBar:\\r\\nWWW-Authenticate: NTLM blob\\r\\nBar: foo blob\"\n+        };\n+\n@@ -43,6 +93,2 @@\n-            if (!expected[i].equals(after)) {\n-                throw new RuntimeException(Integer.toString(i) + \" expected != after\");\n-            }\n-            if (result != expectedResult[i]) {\n-                throw new RuntimeException(Integer.toString(i) + \" result != expectedResult\");\n-            }\n+            Assert.assertEquals(expected[i], after, i + \" expected != after\");\n+            Assert.assertEquals(result, expectedResult[i], i + \" result != expectedResult\");\n@@ -51,24 +97,0 @@\n-\n-    static String expected[] = {\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: }\",\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}\",\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM sdsds}{Bar: foo}\",\n-        \"{null: HTTP\/1.1 200 Ok}{WWW-Authenticate: Negotiate}{Foo: bar}{Bar: foo}{WWW-Authenticate: NTLM}{Bar: foo}{WWW-Authenticate: Kerberos}\",\n-        \"{null: HTTP\/1.1 200 Ok}{Foo: foo}{Bar: }{WWW-Authenticate: NTLM blob}{Bar: foo blob}\"\n-    };\n-\n-    static boolean[] expectedResult = {\n-        false, false, true, true, true, false, false\n-    };\n-\n-    static String[] headers = {\n-        \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\",\n-        \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate:\",\n-        \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nWWW-Authenticate: Negotiate\",\n-        \"HTTP\/1.1 200 Ok\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nWWW-Authenticate: Negotiate\\r\\nWWW-Authenticate: Kerberos\",\n-        \"HTTP\/1.1 200 Ok\\r\\nWWW-Authenticate: Negotiate\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM sdsds\\r\\nBar: foo\\r\\nWWW-Authenticate: Kerberos\",\n-        \"HTTP\/1.1 200 Ok\\r\\nWWW-Authenticate: Negotiate\\r\\nFoo: bar\\r\\nBar: foo\\r\\nWWW-Authenticate: NTLM\\r\\nBar: foo\\r\\nWWW-Authenticate: Kerberos\",\n-        \"HTTP\/1.1 200 Ok\\r\\nFoo: foo\\r\\nBar:\\r\\nWWW-Authenticate: NTLM blob\\r\\nBar: foo blob\"\n-    };\n","filename":"test\/jdk\/sun\/net\/www\/MessageHeaderTest.java","additions":56,"deletions":34,"binary":false,"changes":90,"status":"modified"}]}