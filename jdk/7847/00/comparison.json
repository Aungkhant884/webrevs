{"files":[{"patch":"@@ -44,1 +44,1 @@\n-import jdk.jfr.internal.consumer.filter.CheckPointEvent;\n+import jdk.jfr.internal.consumer.filter.CheckpointEvent;\n@@ -80,1 +80,1 @@\n-    private enum CheckPointType {\n+    private enum CheckpointType {\n@@ -90,1 +90,1 @@\n-        private CheckPointType(int mask) {\n+        private CheckpointType(int mask) {\n@@ -270,1 +270,1 @@\n-                    if (CheckPointType.FLUSH.is(parseCheckpointType())) {\n+                    if (CheckpointType.FLUSH.is(parseCheckpointType())) {\n@@ -320,1 +320,1 @@\n-            CheckPointEvent cp = null;\n+            CheckpointEvent cp = null;\n@@ -322,1 +322,1 @@\n-                cp = configuration.chunkWriter.newCheckPointEvent(thisCP);\n+                cp = configuration.chunkWriter.newCheckpointEvent(thisCP);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ChunkParser.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public final class CheckPointEvent {\n+public final class CheckpointEvent {\n@@ -40,1 +40,1 @@\n-    private final LinkedHashMap<Long, CheckPointPool> pools = new LinkedHashMap<>();\n+    private final LinkedHashMap<Long, CheckpointPool> pools = new LinkedHashMap<>();\n@@ -43,1 +43,1 @@\n-    public CheckPointEvent(ChunkWriter chunkWriter, long startPosition) {\n+    public CheckpointEvent(ChunkWriter chunkWriter, long startPosition) {\n@@ -51,1 +51,1 @@\n-        var cpp = pools.computeIfAbsent(typeId, k -> new CheckPointPool(typeId));\n+        var cpp = pools.computeIfAbsent(typeId, k -> new CheckpointPool(typeId));\n@@ -59,1 +59,1 @@\n-        for (CheckPointPool cpp : pools.values()) {\n+        for (CheckpointPool cpp : pools.values()) {\n@@ -67,1 +67,1 @@\n-    public Collection<CheckPointPool> getPools() {\n+    public Collection<CheckpointPool> getPools() {\n@@ -77,1 +77,1 @@\n-        for (CheckPointPool p : pools.values()) {\n+        for (CheckpointPool p : pools.values()) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/filter\/CheckPointEvent.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-final class CheckPointPool {\n+final class CheckpointPool {\n@@ -36,1 +36,1 @@\n-    public CheckPointPool(long typeId) {\n+    public CheckpointPool(long typeId) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/filter\/CheckPointPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    private final Deque<CheckPointEvent> checkPoints = new ArrayDeque<>();\n+    private final Deque<CheckpointEvent> checkpoints = new ArrayDeque<>();\n@@ -62,1 +62,1 @@\n-    private long lastCheckPoint;\n+    private long lastCheckpoint;\n@@ -81,3 +81,3 @@\n-    public CheckPointEvent newCheckPointEvent(long startPosition) {\n-        CheckPointEvent event = new CheckPointEvent(this, startPosition);\n-        checkPoints.add(event);\n+    public CheckpointEvent newCheckpointEvent(long startPosition) {\n+        CheckpointEvent event = new CheckpointEvent(this, startPosition);\n+        checkpoints.add(event);\n@@ -123,1 +123,1 @@\n-        CheckPointEvent cp = checkPoints.peek();\n+        CheckpointEvent cp = checkpoints.peek();\n@@ -125,1 +125,1 @@\n-            checkPoints.poll();\n+            checkpoints.poll();\n@@ -127,2 +127,2 @@\n-            if (lastCheckPoint != 0) {\n-                delta = lastCheckPoint - output.position();\n+            if (lastCheckpoint != 0) {\n+                delta = lastCheckpoint - output.position();\n@@ -130,1 +130,1 @@\n-            lastCheckPoint = output.position();\n+            lastCheckpoint = output.position();\n@@ -132,1 +132,1 @@\n-            cp = checkPoints.peek();\n+            cp = checkpoints.peek();\n@@ -177,1 +177,1 @@\n-        updateHeader(output.position(), lastCheckPoint, metadata);\n+        updateHeader(output.position(), lastCheckpoint, metadata);\n@@ -180,1 +180,1 @@\n-        lastCheckPoint = 0;\n+        lastCheckpoint = 0;\n@@ -193,1 +193,1 @@\n-    private void write(CheckPointEvent event, long delta) throws IOException {\n+    private void write(CheckpointEvent event, long delta) throws IOException {\n@@ -208,1 +208,1 @@\n-        for (CheckPointPool pool : event.getPools()) {\n+        for (CheckpointPool pool : event.getPools()) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/filter\/ChunkWriter.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-            stats.put(1L, new Statistics(eventPrefix + \"CheckPoint\"));\n+            stats.put(1L, new Statistics(eventPrefix + \"Checkpoint\"));\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Summary.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-                processCheckPointHeader();\n+                processCheckpointHeader();\n@@ -289,1 +289,1 @@\n-    private void processCheckPointHeader() throws IOException {\n+    private void processCheckpointHeader() throws IOException {\n@@ -292,1 +292,1 @@\n-            writeCheckPointHeader();\n+            writeCheckpointHeader();\n@@ -324,1 +324,1 @@\n-    private void writeCheckPointHeader() throws IOException {\n+    private void writeCheckpointHeader() throws IOException {\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/DiskRepository.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}