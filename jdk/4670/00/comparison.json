{"files":[{"patch":"@@ -103,0 +103,1 @@\n+            metadata.computeEventSizeRange();\n@@ -163,0 +164,4 @@\n+    enum EventSizeRange {\n+        LT_128, GE_128, UNCERTAIN;\n+    }\n+\n@@ -184,0 +189,4 @@\n+        int maxSize = -1;\n+        int minSize = -1;\n+        EventSizeRange sizeRange;\n+\n@@ -376,0 +385,88 @@\n+        boolean hasUncertainSizeField(TypeElement te) {\n+            for (FieldElement field : te.fields) {\n+                String type = field.getFieldType();\n+                if (type.equals(\"const char*\")) {\n+                    return true;\n+                } else if (type.startsWith(\"JfrStruct\")) {\n+                    if (hasUncertainSizeField(field.type)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private void computeTypeSize(TypeElement te) {\n+            if (te.maxSize != -1) {\n+                return;\n+            }\n+            te.maxSize = te.minSize = 0;\n+            for (FieldElement field : te.fields) {\n+                String type = field.getFieldType();\n+                if (type.startsWith(\"JfrStruct\")) {\n+                    computeTypeSize(field.type);\n+                    te.maxSize += field.type.maxSize;\n+                    te.minSize += field.type.minSize;\n+                } else {\n+                    te.minSize += 1;\n+                    if (type.equals(\"u8\") || type.equals(\"double\") || type.equals(\"s8\") || type.equals(\"Ticks\")\n+                        || type.equals(\"Tickspan\") || type.endsWith(\"*\")) {\n+                        te.maxSize += 9;\n+                    } else if (type.equals(\"float\") || type.equals(\"s4\") || type.equals(\"unsigned\")) {\n+                        te.maxSize += 5;\n+                    } else if (type.equals(\"char\") || type.equals(\"s1\") || type.equals(\"u1\")) {\n+                        te.maxSize += 2;\n+                    } else if (type.equals(\"bool\")) {\n+                        te.maxSize += 1;\n+                    } else {\n+                        te.maxSize += 9;\n+                    }\n+                }\n+            }\n+        }\n+\n+        private void computeEventSizeRange(TypeElement event) {\n+            if (!event.isEvent) {\n+                throw new IllegalStateException();\n+            }\n+\n+            if (hasUncertainSizeField(event)) {\n+                event.sizeRange = EventSizeRange.UNCERTAIN;\n+                return;\n+            }\n+\n+            computeTypeSize(event);\n+            event.maxSize += event.id <= 127 ? 1 : 2;\n+            event.minSize ++;\n+\n+            event.maxSize += 9;\n+            event.minSize += 1;\n+\n+            if (!event.startTime || !event.period.isEmpty() || event.cutoff) {\n+                event.maxSize += 9;\n+                event.minSize += 1;\n+            }\n+\n+            if (event.thread) {\n+                event.maxSize += 9;\n+                event.minSize += 1;\n+            }\n+\n+            if (event.stackTrace) {\n+                event.maxSize += 9;\n+                event.minSize += 1;\n+            }\n+\n+            if (event.maxSize < 127) {\n+                event.sizeRange = EventSizeRange.LT_128;\n+            } else if (event.minSize >= 127) {\n+                event.sizeRange = EventSizeRange.GE_128;\n+            } else {\n+                event.sizeRange = EventSizeRange.UNCERTAIN;\n+            }\n+        }\n+\n+        void computeEventSizeRange() {\n+            getEvents().forEach(this::computeEventSizeRange);\n+        }\n+\n@@ -830,0 +927,1 @@\n+            out.write(\"  static const EventSizeRange sizeRange = \" + event.sizeRange.name() +\";\");\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -198,10 +198,8 @@\n-    bool large = is_large();\n-    if (write_sized_event(buffer, event_thread, tl, large)) {\n-      \/\/ Event written succesfully\n-      return;\n-    }\n-    if (!large) {\n-      \/\/ Try large size\n-      if (write_sized_event(buffer, event_thread, tl, true)) {\n-        \/\/ Event written succesfully, use large size from now on\n-        set_large();\n+\n+    if (T::sizeRange == LT_128) {\n+      write_sized_event(buffer, event_thread, tl, false);\n+    } else if (T::sizeRange == UNCERTAIN) {\n+      bool large = is_large();\n+      if (write_sized_event(buffer, event_thread, tl, large)) {\n+        \/\/ Event written succesfully\n+        return;\n@@ -209,0 +207,9 @@\n+      if (!large) {\n+        \/\/ Try large size\n+        if (write_sized_event(buffer, event_thread, tl, true)) {\n+          \/\/ Event written succesfully, use large size from now on\n+          set_large();\n+        }\n+      }\n+    } else if (T::sizeRange == GE_128) {\n+      write_sized_event(buffer, event_thread, tl, true);\n@@ -212,0 +219,1 @@\n+\n@@ -214,1 +222,1 @@\n-    writer.begin_event_write(large_size);\n+    writer.begin_event_write<T::sizeRange>(large_size);\n@@ -238,1 +246,1 @@\n-    return writer.end_event_write(large_size) > 0;\n+    return writer.end_event_write<T::sizeRange>(large_size) > 0;\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEvent.hpp","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -60,0 +60,5 @@\n+enum EventSizeRange {\n+  LT_128,\n+  GE_128,\n+  UNCERTAIN\n+};\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTypes.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  template <EventSizeRange RANGE = UNCERTAIN>\n@@ -39,0 +40,1 @@\n+  template <EventSizeRange RANGE= UNCERTAIN>\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrEventWriterHost.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+template <EventSizeRange RANGE>\n@@ -61,3 +62,1 @@\n-  if (large) {\n-    this->reserve(sizeof(u4));\n-  } else {\n+  if (RANGE == LT_128) {\n@@ -65,0 +64,8 @@\n+  } else if (RANGE == UNCERTAIN) {\n+    if (large) {\n+      this->reserve(sizeof(u4));\n+    } else {\n+      this->reserve(sizeof(u1));\n+    }\n+  } else if (RANGE == GE_128) {\n+    this->reserve(sizeof(u4));\n@@ -69,0 +76,1 @@\n+template <EventSizeRange RANGE>\n@@ -76,4 +84,3 @@\n-  if (large) {\n-    \/\/ size written is larger than header reserve, so commit\n-    if (written > sizeof(u4)) {\n-      this->write_padded_at_offset(written, 0);\n+  if (RANGE == LT_128) {\n+    if (written > sizeof(u1)) {\n+      this->write_at_offset(written, 0);\n@@ -82,6 +89,2 @@\n-  } else {\n-    \/\/ abort if event size will not fit in one byte (compressed)\n-    if (written > 127) {\n-      this->reset();\n-      written = 0;\n-    } else {\n+  } else if (RANGE == UNCERTAIN) {\n+    if (large) {\n@@ -89,2 +92,2 @@\n-      if (written > sizeof(u1)) {\n-        this->write_at_offset(written, 0);\n+      if (written > sizeof(u4)) {\n+        this->write_padded_at_offset(written, 0);\n@@ -93,0 +96,17 @@\n+    } else {\n+      \/\/ abort if event size will not fit in one byte (compressed)\n+      if (written > 127) {\n+        this->reset();\n+        written = 0;\n+      } else {\n+        \/\/ size written is larger than header reserve, so commit\n+        if (written > sizeof(u1)) {\n+          this->write_at_offset(written, 0);\n+          this->commit();\n+        }\n+      }\n+    }\n+  } else if (RANGE == GE_128) {\n+    if (written > sizeof(u4)) {\n+      this->write_padded_at_offset(written, 0);\n+      this->commit();\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrEventWriterHost.inline.hpp","additions":35,"deletions":15,"binary":false,"changes":50,"status":"modified"}]}