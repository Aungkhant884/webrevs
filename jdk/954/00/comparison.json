{"files":[{"patch":"@@ -72,1 +72,2 @@\n-  _lp(NULL),                              \/\/ LoopNode\n+  _lp(NULL),                              \/\/ CountedLoopNode\n+  _cached_pre_loop_end(NULL),             \/\/ Cached pre loop CountedLoopNodeEnd\n@@ -159,3 +160,8 @@\n-    if (pre_end == NULL) return;\n-    Node *pre_opaq1 = pre_end->limit();\n-    if (pre_opaq1->Opcode() != Op_Opaque1) return;\n+    if (pre_end == NULL) {\n+      return;\n+    }\n+    Node* pre_opaq1 = pre_end->limit();\n+    if (pre_opaq1->Opcode() != Op_Opaque1) {\n+      return;\n+    }\n+    set_cached_pre_loop_end(pre_end);\n@@ -914,1 +920,2 @@\n-  CountedLoopEndNode* pre_end = get_pre_loop_end(lp()->as_CountedLoop());\n+  CountedLoopEndNode* pre_end = cached_pre_loop_end();\n+  assert(get_pre_loop_end(lp()), \"pre loop end must still be found\");\n@@ -3434,3 +3441,3 @@\n-  CountedLoopNode *main_head = lp()->as_CountedLoop();\n-  assert(main_head->is_main_loop(), \"\");\n-  CountedLoopEndNode* pre_end = get_pre_loop_end(main_head);\n+  assert(lp()->is_main_loop(), \"\");\n+  CountedLoopEndNode* pre_end = cached_pre_loop_end();\n+  assert(get_pre_loop_end(lp()), \"pre loop end must still be found\");\n@@ -3438,1 +3445,1 @@\n-  Node *pre_opaq1 = pre_end->limit();\n+  Node* pre_opaq1 = pre_end->limit();\n@@ -3440,2 +3447,2 @@\n-  Opaque1Node *pre_opaq = (Opaque1Node*)pre_opaq1;\n-  Node *lim0 = pre_opaq->in(1);\n+  Opaque1Node* pre_opaq = (Opaque1Node*)pre_opaq1;\n+  Node* lim0 = pre_opaq->in(1);\n@@ -3444,1 +3451,1 @@\n-  Node *pre_ctrl = pre_end->loopnode()->in(LoopNode::EntryControl);\n+  Node* pre_ctrl = pre_end->loopnode()->in(LoopNode::EntryControl);\n@@ -3448,1 +3455,1 @@\n-  Node *orig_limit = pre_opaq->original_loop_limit();\n+  Node* orig_limit = pre_opaq->original_loop_limit();\n@@ -3789,1 +3796,1 @@\n-  Node *n_c = phase()->get_ctrl(n);\n+  Node* n_c = phase()->get_ctrl(n);\n@@ -3794,0 +3801,14 @@\n+bool SWPointer::invariant_not_dominated_by_pre_loop_end(Node* n) {\n+  NOT_PRODUCT(Tracer::Depth dd;)\n+  Node* n_c = phase()->get_ctrl(n);\n+  NOT_PRODUCT(_tracer.invariant_1(n, n_c);)\n+  bool is_not_member = !lpt()->is_member(phase()->get_loop(n_c));\n+  if (_slp->lp()->is_main_loop() && is_not_member) {\n+    \/\/ Check that pre loop end node does not dominate n_c. If it does, then we cannot use n as invariant in the pre loop.\n+    \/\/ This happens, for example, when n_c is a CastII node that prevents data nodes to flow above the main loop and into\n+    \/\/ the pre loop. Use the cached version as the real pre loop end might not be found anymore with get_pre_loop_end().\n+    return !phase()->is_dominator(_slp->cached_pre_loop_end(), n_c);\n+  }\n+  return is_not_member;\n+}\n+\n@@ -3854,1 +3875,1 @@\n-  if (_analyze_only && (invariant(n) == false)) {\n+  if (_analyze_only && (!invariant(n))) {\n@@ -3940,1 +3961,1 @@\n-  if (_analyze_only && (invariant(n) == false)) {\n+  if (_analyze_only && !invariant(n)) {\n@@ -3944,1 +3965,1 @@\n-    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n+    if (n->in(2)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(1))) {\n@@ -3950,1 +3971,1 @@\n-    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n+    } else if (n->in(1)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(2))) {\n@@ -3959,1 +3980,1 @@\n-    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n+    if (n->in(2)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(1))) {\n@@ -3965,1 +3986,1 @@\n-    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n+    } else if (n->in(1)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(2))) {\n@@ -3983,4 +4004,8 @@\n-    _negate_invar = negate;\n-    _invar = n;\n-    NOT_PRODUCT(_tracer.offset_plus_k_10(n, _invar, _negate_invar, _offset);)\n-    return true;\n+\n+    if (invariant_not_dominated_by_pre_loop_end(n)) {\n+      _negate_invar = negate;\n+      _invar = n;\n+      NOT_PRODUCT(_tracer.offset_plus_k_10(n, _invar, _negate_invar, _offset);)\n+      return true;\n+    }\n+    return false;\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":49,"deletions":24,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -313,1 +313,2 @@\n-  LoopNode*      _lp;              \/\/ Current LoopNode\n+  CountedLoopNode* _lp;            \/\/ Current CountedLoopNode\n+  CountedLoopEndNode* _cached_pre_loop_end; \/\/ Current CountedLoopEndNode of the pre loop\n@@ -331,1 +332,0 @@\n-\n@@ -334,1 +334,0 @@\n-\n@@ -337,4 +336,19 @@\n-  LoopNode* lp()                   { return _lp; }\n-  void      set_lp(LoopNode* lp)   { _lp = lp;\n-                                     _iv = lp->as_CountedLoop()->phi()->as_Phi(); }\n-  int      iv_stride()             { return lp()->as_CountedLoop()->stride_con(); }\n+  CountedLoopNode* lp()            { return _lp; }\n+  void set_lp(CountedLoopNode* lp) {\n+    _lp = lp;\n+    _iv = lp->as_CountedLoop()->phi()->as_Phi();\n+  }\n+\n+  CountedLoopEndNode* cached_pre_loop_end() {\n+#ifdef ASSERT\n+    Node* pre_end = get_pre_loop_end(_lp);\n+    assert(_lp != NULL && (pre_end == NULL || pre_end == _cached_pre_loop_end) , \"real CLE either not found anymore (NULL) or unchanged\");\n+    assert(_cached_pre_loop_end != NULL, \"should be set when fetched\");\n+#endif\n+    return _cached_pre_loop_end;\n+  }\n+  void set_cached_pre_loop_end(CountedLoopEndNode* cached_pre_loop_end) {\n+    _cached_pre_loop_end = cached_pre_loop_end;\n+  }\n+\n+  int      iv_stride()             { return lp()->stride_con(); }\n@@ -575,0 +589,1 @@\n+  bool invariant_not_dominated_by_pre_loop_end(Node* n);\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"}]}