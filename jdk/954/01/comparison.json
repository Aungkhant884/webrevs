{"files":[{"patch":"@@ -72,1 +72,3 @@\n-  _lp(NULL),                              \/\/ LoopNode\n+  _lp(NULL),                              \/\/ CountedLoopNode\n+  _pre_loop_head(NULL),                   \/\/ Pre loop CountedLoopNode\n+  _pre_loop_end(NULL),                    \/\/ Pre loop CountedLoopEndNode\n@@ -158,4 +160,10 @@\n-    CountedLoopEndNode* pre_end = get_pre_loop_end(cl);\n-    if (pre_end == NULL) return;\n-    Node *pre_opaq1 = pre_end->limit();\n-    if (pre_opaq1->Opcode() != Op_Opaque1) return;\n+    CountedLoopEndNode* pre_end = find_pre_loop_end(cl);\n+    if (pre_end == NULL) {\n+      return;\n+    }\n+    Node* pre_opaq1 = pre_end->limit();\n+    if (pre_opaq1->Opcode() != Op_Opaque1) {\n+      return;\n+    }\n+    set_pre_loop_end(pre_end);\n+    set_pre_loop_head(pre_end->loopnode());\n@@ -914,2 +922,1 @@\n-  CountedLoopEndNode* pre_end = get_pre_loop_end(lp()->as_CountedLoop());\n-  assert(pre_end != NULL, \"we must have a correct pre-loop\");\n+  CountedLoopEndNode* pre_end = pre_loop_end();\n@@ -3434,5 +3441,3 @@\n-  CountedLoopNode *main_head = lp()->as_CountedLoop();\n-  assert(main_head->is_main_loop(), \"\");\n-  CountedLoopEndNode* pre_end = get_pre_loop_end(main_head);\n-  assert(pre_end != NULL, \"we must have a correct pre-loop\");\n-  Node *pre_opaq1 = pre_end->limit();\n+  assert(lp()->is_main_loop(), \"\");\n+  CountedLoopEndNode* pre_end = pre_loop_end();\n+  Node* pre_opaq1 = pre_end->limit();\n@@ -3440,2 +3445,2 @@\n-  Opaque1Node *pre_opaq = (Opaque1Node*)pre_opaq1;\n-  Node *lim0 = pre_opaq->in(1);\n+  Opaque1Node* pre_opaq = (Opaque1Node*)pre_opaq1;\n+  Node* lim0 = pre_opaq->in(1);\n@@ -3444,1 +3449,1 @@\n-  Node *pre_ctrl = pre_end->loopnode()->in(LoopNode::EntryControl);\n+  Node* pre_ctrl = pre_end->loopnode()->in(LoopNode::EntryControl);\n@@ -3448,1 +3453,1 @@\n-  Node *orig_limit = pre_opaq->original_loop_limit();\n+  Node* orig_limit = pre_opaq->original_loop_limit();\n@@ -3599,1 +3604,1 @@\n-CountedLoopEndNode* SuperWord::get_pre_loop_end(CountedLoopNode* cl) {\n+CountedLoopEndNode* SuperWord::find_pre_loop_end(CountedLoopNode* cl) const {\n@@ -3727,1 +3732,1 @@\n-  if (!invariant(base)) {\n+  if (is_main_loop_member(base)) {\n@@ -3756,1 +3761,1 @@\n-  if (!invariant(adr)) {\n+  if (is_main_loop_member(adr)) {\n@@ -3786,0 +3791,4 @@\n+bool SWPointer::is_main_loop_member(Node* n) const {\n+  Node* n_c = phase()->get_ctrl(n);\n+  return lpt()->is_member(phase()->get_loop(n_c));\n+}\n@@ -3787,1 +3796,1 @@\n-bool SWPointer::invariant(Node* n) {\n+bool SWPointer::invariant(Node* n) const {\n@@ -3789,1 +3798,1 @@\n-  Node *n_c = phase()->get_ctrl(n);\n+  Node* n_c = phase()->get_ctrl(n);\n@@ -3791,1 +3800,8 @@\n-  return !lpt()->is_member(phase()->get_loop(n_c));\n+  bool is_not_member = !is_main_loop_member(n);\n+  if (is_not_member && _slp->lp()->is_main_loop()) {\n+    \/\/ Check that n_c dominates the pre loop head node. If it does not, then we cannot use n as invariant for the pre loop\n+    \/\/ CountedLoopEndNode check because n_c is either part of the pre loop or between the pre and the main loop (illegal\n+    \/\/ invariant: Happens, for example, when n_c is a CastII node that prevents data nodes to flow above the main loop).\n+    return phase()->is_dominator(n_c, _slp->pre_loop_head());\n+  }\n+  return is_not_member;\n@@ -3854,1 +3870,1 @@\n-  if (_analyze_only && (invariant(n) == false)) {\n+  if (_analyze_only && (is_main_loop_member(n))) {\n@@ -3940,1 +3956,1 @@\n-  if (_analyze_only && (invariant(n) == false)) {\n+  if (_analyze_only && is_main_loop_member(n)) {\n@@ -3973,1 +3989,1 @@\n-  if (invariant(n)) {\n+  if (!is_main_loop_member(n)) {\n@@ -3979,1 +3995,1 @@\n-        assert(invariant(n), \"sanity\");\n+        assert(!is_main_loop_member(n), \"sanity\");\n@@ -3983,4 +3999,8 @@\n-    _negate_invar = negate;\n-    _invar = n;\n-    NOT_PRODUCT(_tracer.offset_plus_k_10(n, _invar, _negate_invar, _offset);)\n-    return true;\n+\n+    if (invariant(n)) {\n+      _negate_invar = negate;\n+      _invar = n;\n+      NOT_PRODUCT(_tracer.offset_plus_k_10(n, _invar, _negate_invar, _offset);)\n+      return true;\n+    }\n+    return false;\n@@ -4007,2 +4027,4 @@\n-void SWPointer::Tracer::print_depth() {\n-  for (int ii = 0; ii<_depth; ++ii) tty->print(\"  \");\n+void SWPointer::Tracer::print_depth() const {\n+  for (int ii = 0; ii < _depth; ++ii) {\n+    tty->print(\"  \");\n+  }\n@@ -4060,1 +4082,1 @@\n-void SWPointer::Tracer::invariant_1(Node *n, Node *n_c) {\n+void SWPointer::Tracer::invariant_1(Node *n, Node *n_c) const {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":55,"deletions":33,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -294,3 +294,3 @@\n-  PhaseIdealLoop* phase()          { return _phase; }\n-  IdealLoopTree* lpt()             { return _lpt; }\n-  PhiNode* iv()                    { return _iv; }\n+  PhaseIdealLoop* phase() const    { return _phase; }\n+  IdealLoopTree* lpt() const       { return _lpt; }\n+  PhiNode* iv() const              { return _iv; }\n@@ -298,1 +298,1 @@\n-  bool early_return()              { return _early_return; }\n+  bool early_return() const        { return _early_return; }\n@@ -313,1 +313,3 @@\n-  LoopNode*      _lp;              \/\/ Current LoopNode\n+  CountedLoopNode* _lp;            \/\/ Current CountedLoopNode\n+  CountedLoopNode* _pre_loop_head; \/\/ Current CountedLoopNode of pre loop\n+  CountedLoopEndNode* _pre_loop_end; \/\/ Current CountedLoopEndNode of pre loop\n@@ -333,2 +335,1 @@\n-  void  set_bb(Node* bb)           { _bb = bb; }\n-\n+  void set_bb(Node* bb)            { _bb = bb; }\n@@ -336,0 +337,6 @@\n+  CountedLoopNode* lp() const      { return _lp; }\n+  void set_lp(CountedLoopNode* lp) {\n+    _lp = lp;\n+    _iv = lp->as_CountedLoop()->phi()->as_Phi();\n+  }\n+  int iv_stride() const            { return lp()->stride_con(); }\n@@ -337,4 +344,22 @@\n-  LoopNode* lp()                   { return _lp; }\n-  void      set_lp(LoopNode* lp)   { _lp = lp;\n-                                     _iv = lp->as_CountedLoop()->phi()->as_Phi(); }\n-  int      iv_stride()             { return lp()->as_CountedLoop()->stride_con(); }\n+  void set_pre_loop_head(CountedLoopNode* pre_loop_head) {\n+    assert(pre_loop_head != NULL, \"must be valid\");\n+    _pre_loop_head = pre_loop_head;\n+  }\n+  CountedLoopNode* pre_loop_head() const {\n+    assert(_pre_loop_head != NULL, \"should be set when fetched\");\n+    return _pre_loop_head;\n+  }\n+  void set_pre_loop_end(CountedLoopEndNode* pre_loop_end) {\n+    assert(pre_loop_end, \"must be valid\");\n+    _pre_loop_end = pre_loop_end;\n+  }\n+  CountedLoopEndNode* pre_loop_end() const {\n+#ifdef ASSERT\n+    assert(_lp != NULL, \"sanity\");\n+    assert(_pre_loop_end != NULL, \"should be set when fetched\");\n+    Node* found_pre_end = find_pre_loop_end(_lp);\n+    assert(_pre_loop_end == found_pre_end && _pre_loop_end == pre_loop_head()->loopexit(),\n+           \"should find the pre loop end and must be the same result\");\n+#endif\n+    return _pre_loop_end;\n+  }\n@@ -534,1 +559,1 @@\n-  CountedLoopEndNode* get_pre_loop_end(CountedLoopNode *cl);\n+  CountedLoopEndNode* find_pre_loop_end(CountedLoopNode *cl) const;\n@@ -570,3 +595,3 @@\n-  PhaseIdealLoop* phase() { return _slp->phase(); }\n-  IdealLoopTree*  lpt()   { return _slp->lpt(); }\n-  PhiNode*        iv()    { return _slp->iv();  } \/\/ Induction var\n+  PhaseIdealLoop* phase() const { return _slp->phase(); }\n+  IdealLoopTree*  lpt() const   { return _slp->lpt(); }\n+  PhiNode*        iv() const    { return _slp->iv();  } \/\/ Induction var\n@@ -574,1 +599,2 @@\n-  bool invariant(Node* n);\n+  bool is_main_loop_member(Node* n) const;\n+  bool invariant(Node* n) const;\n@@ -641,1 +667,1 @@\n-    void print_depth();\n+    void print_depth() const;\n@@ -667,1 +693,1 @@\n-    void invariant_1(Node *n, Node *n_c);\n+    void invariant_1(Node *n, Node *n_c) const;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":44,"deletions":18,"binary":false,"changes":62,"status":"modified"}]}