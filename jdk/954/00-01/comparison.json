{"files":[{"patch":"@@ -73,1 +73,2 @@\n-  _cached_pre_loop_end(NULL),             \/\/ Cached pre loop CountedLoopNodeEnd\n+  _pre_loop_head(NULL),                   \/\/ Pre loop CountedLoopNode\n+  _pre_loop_end(NULL),                    \/\/ Pre loop CountedLoopEndNode\n@@ -159,1 +160,1 @@\n-    CountedLoopEndNode* pre_end = get_pre_loop_end(cl);\n+    CountedLoopEndNode* pre_end = find_pre_loop_end(cl);\n@@ -167,1 +168,2 @@\n-    set_cached_pre_loop_end(pre_end);\n+    set_pre_loop_end(pre_end);\n+    set_pre_loop_head(pre_end->loopnode());\n@@ -920,3 +922,1 @@\n-  CountedLoopEndNode* pre_end = cached_pre_loop_end();\n-  assert(get_pre_loop_end(lp()), \"pre loop end must still be found\");\n-  assert(pre_end != NULL, \"we must have a correct pre-loop\");\n+  CountedLoopEndNode* pre_end = pre_loop_end();\n@@ -3442,3 +3442,1 @@\n-  CountedLoopEndNode* pre_end = cached_pre_loop_end();\n-  assert(get_pre_loop_end(lp()), \"pre loop end must still be found\");\n-  assert(pre_end != NULL, \"we must have a correct pre-loop\");\n+  CountedLoopEndNode* pre_end = pre_loop_end();\n@@ -3606,1 +3604,1 @@\n-CountedLoopEndNode* SuperWord::get_pre_loop_end(CountedLoopNode* cl) {\n+CountedLoopEndNode* SuperWord::find_pre_loop_end(CountedLoopNode* cl) const {\n@@ -3734,1 +3732,1 @@\n-  if (!invariant(base)) {\n+  if (is_main_loop_member(base)) {\n@@ -3763,1 +3761,1 @@\n-  if (!invariant(adr)) {\n+  if (is_main_loop_member(adr)) {\n@@ -3793,3 +3791,1 @@\n-\n-bool SWPointer::invariant(Node* n) {\n-  NOT_PRODUCT(Tracer::Depth dd;)\n+bool SWPointer::is_main_loop_member(Node* n) const {\n@@ -3797,2 +3793,1 @@\n-  NOT_PRODUCT(_tracer.invariant_1(n, n_c);)\n-  return !lpt()->is_member(phase()->get_loop(n_c));\n+  return lpt()->is_member(phase()->get_loop(n_c));\n@@ -3801,1 +3796,1 @@\n-bool SWPointer::invariant_not_dominated_by_pre_loop_end(Node* n) {\n+bool SWPointer::invariant(Node* n) const {\n@@ -3805,6 +3800,6 @@\n-  bool is_not_member = !lpt()->is_member(phase()->get_loop(n_c));\n-  if (_slp->lp()->is_main_loop() && is_not_member) {\n-    \/\/ Check that pre loop end node does not dominate n_c. If it does, then we cannot use n as invariant in the pre loop.\n-    \/\/ This happens, for example, when n_c is a CastII node that prevents data nodes to flow above the main loop and into\n-    \/\/ the pre loop. Use the cached version as the real pre loop end might not be found anymore with get_pre_loop_end().\n-    return !phase()->is_dominator(_slp->cached_pre_loop_end(), n_c);\n+  bool is_not_member = !is_main_loop_member(n);\n+  if (is_not_member && _slp->lp()->is_main_loop()) {\n+    \/\/ Check that n_c dominates the pre loop head node. If it does not, then we cannot use n as invariant for the pre loop\n+    \/\/ CountedLoopEndNode check because n_c is either part of the pre loop or between the pre and the main loop (illegal\n+    \/\/ invariant: Happens, for example, when n_c is a CastII node that prevents data nodes to flow above the main loop).\n+    return phase()->is_dominator(n_c, _slp->pre_loop_head());\n@@ -3875,1 +3870,1 @@\n-  if (_analyze_only && (!invariant(n))) {\n+  if (_analyze_only && (is_main_loop_member(n))) {\n@@ -3961,1 +3956,1 @@\n-  if (_analyze_only && !invariant(n)) {\n+  if (_analyze_only && is_main_loop_member(n)) {\n@@ -3965,1 +3960,1 @@\n-    if (n->in(2)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(1))) {\n+    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n@@ -3971,1 +3966,1 @@\n-    } else if (n->in(1)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(2))) {\n+    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n@@ -3980,1 +3975,1 @@\n-    if (n->in(2)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(1))) {\n+    if (n->in(2)->is_Con() && invariant(n->in(1))) {\n@@ -3986,1 +3981,1 @@\n-    } else if (n->in(1)->is_Con() && invariant_not_dominated_by_pre_loop_end(n->in(2))) {\n+    } else if (n->in(1)->is_Con() && invariant(n->in(2))) {\n@@ -3994,1 +3989,1 @@\n-  if (invariant(n)) {\n+  if (!is_main_loop_member(n)) {\n@@ -4000,1 +3995,1 @@\n-        assert(invariant(n), \"sanity\");\n+        assert(!is_main_loop_member(n), \"sanity\");\n@@ -4005,1 +4000,1 @@\n-    if (invariant_not_dominated_by_pre_loop_end(n)) {\n+    if (invariant(n)) {\n@@ -4032,2 +4027,4 @@\n-void SWPointer::Tracer::print_depth() {\n-  for (int ii = 0; ii<_depth; ++ii) tty->print(\"  \");\n+void SWPointer::Tracer::print_depth() const {\n+  for (int ii = 0; ii < _depth; ++ii) {\n+    tty->print(\"  \");\n+  }\n@@ -4085,1 +4082,1 @@\n-void SWPointer::Tracer::invariant_1(Node *n, Node *n_c) {\n+void SWPointer::Tracer::invariant_1(Node *n, Node *n_c) const {\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":33,"deletions":36,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -294,3 +294,3 @@\n-  PhaseIdealLoop* phase()          { return _phase; }\n-  IdealLoopTree* lpt()             { return _lpt; }\n-  PhiNode* iv()                    { return _iv; }\n+  PhaseIdealLoop* phase() const    { return _phase; }\n+  IdealLoopTree* lpt() const       { return _lpt; }\n+  PhiNode* iv() const              { return _iv; }\n@@ -298,1 +298,1 @@\n-  bool early_return()              { return _early_return; }\n+  bool early_return() const        { return _early_return; }\n@@ -314,1 +314,2 @@\n-  CountedLoopEndNode* _cached_pre_loop_end; \/\/ Current CountedLoopEndNode of the pre loop\n+  CountedLoopNode* _pre_loop_head; \/\/ Current CountedLoopNode of pre loop\n+  CountedLoopEndNode* _pre_loop_end; \/\/ Current CountedLoopEndNode of pre loop\n@@ -332,0 +333,1 @@\n+\n@@ -333,1 +335,1 @@\n-  void  set_bb(Node* bb)           { _bb = bb; }\n+  void set_bb(Node* bb)            { _bb = bb; }\n@@ -335,2 +337,1 @@\n-\n-  CountedLoopNode* lp()            { return _lp; }\n+  CountedLoopNode* lp() const      { return _lp; }\n@@ -341,0 +342,1 @@\n+  int iv_stride() const            { return lp()->stride_con(); }\n@@ -342,1 +344,13 @@\n-  CountedLoopEndNode* cached_pre_loop_end() {\n+  void set_pre_loop_head(CountedLoopNode* pre_loop_head) {\n+    assert(pre_loop_head != NULL, \"must be valid\");\n+    _pre_loop_head = pre_loop_head;\n+  }\n+  CountedLoopNode* pre_loop_head() const {\n+    assert(_pre_loop_head != NULL, \"should be set when fetched\");\n+    return _pre_loop_head;\n+  }\n+  void set_pre_loop_end(CountedLoopEndNode* pre_loop_end) {\n+    assert(pre_loop_end, \"must be valid\");\n+    _pre_loop_end = pre_loop_end;\n+  }\n+  CountedLoopEndNode* pre_loop_end() const {\n@@ -344,3 +358,5 @@\n-    Node* pre_end = get_pre_loop_end(_lp);\n-    assert(_lp != NULL && (pre_end == NULL || pre_end == _cached_pre_loop_end) , \"real CLE either not found anymore (NULL) or unchanged\");\n-    assert(_cached_pre_loop_end != NULL, \"should be set when fetched\");\n+    assert(_lp != NULL, \"sanity\");\n+    assert(_pre_loop_end != NULL, \"should be set when fetched\");\n+    Node* found_pre_end = find_pre_loop_end(_lp);\n+    assert(_pre_loop_end == found_pre_end && _pre_loop_end == pre_loop_head()->loopexit(),\n+           \"should find the pre loop end and must be the same result\");\n@@ -348,4 +364,1 @@\n-    return _cached_pre_loop_end;\n-  }\n-  void set_cached_pre_loop_end(CountedLoopEndNode* cached_pre_loop_end) {\n-    _cached_pre_loop_end = cached_pre_loop_end;\n+    return _pre_loop_end;\n@@ -354,2 +367,0 @@\n-  int      iv_stride()             { return lp()->stride_con(); }\n-\n@@ -548,1 +559,1 @@\n-  CountedLoopEndNode* get_pre_loop_end(CountedLoopNode *cl);\n+  CountedLoopEndNode* find_pre_loop_end(CountedLoopNode *cl) const;\n@@ -584,3 +595,3 @@\n-  PhaseIdealLoop* phase() { return _slp->phase(); }\n-  IdealLoopTree*  lpt()   { return _slp->lpt(); }\n-  PhiNode*        iv()    { return _slp->iv();  } \/\/ Induction var\n+  PhaseIdealLoop* phase() const { return _slp->phase(); }\n+  IdealLoopTree*  lpt() const   { return _slp->lpt(); }\n+  PhiNode*        iv() const    { return _slp->iv();  } \/\/ Induction var\n@@ -588,2 +599,2 @@\n-  bool invariant(Node* n);\n-  bool invariant_not_dominated_by_pre_loop_end(Node* n);\n+  bool is_main_loop_member(Node* n) const;\n+  bool invariant(Node* n) const;\n@@ -656,1 +667,1 @@\n-    void print_depth();\n+    void print_depth() const;\n@@ -682,1 +693,1 @@\n-    void invariant_1(Node *n, Node *n_c);\n+    void invariant_1(Node *n, Node *n_c) const;\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":37,"deletions":26,"binary":false,"changes":63,"status":"modified"}]}