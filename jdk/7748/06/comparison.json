{"files":[{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -327,1 +327,1 @@\n-        ! -name \"*.tar.gz\" ! -name \"*.jsa\" ! -name \"gtestLauncher\" \\\n+        ! -name \"*.tar.gz\" ! -name \"classes_nocoops.jsa\" ! -name \"gtestLauncher\" \\\n","filename":"make\/scripts\/compare.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -525,1 +525,2 @@\n-  } else if (ref->msotype() == MetaspaceObj::MethodDataType) {\n+  } else if (ref->msotype() == MetaspaceObj::MethodDataType ||\n+             ref->msotype() == MetaspaceObj::MethodCountersType) {\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"utilities\/macros.hpp\"\n@@ -150,1 +151,1 @@\n-  void append_intptr_t(intptr_t n, bool need_to_mark = false);\n+  void append_intptr_t(intptr_t n, bool need_to_mark = false) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -170,1 +170,2 @@\n-inline unsigned DumpTimeSharedClassTable_hash(InstanceKlass* const& k) {\n+template <typename T>\n+inline unsigned DumpTimeSharedClassTable_hash(T* const& k) {\n@@ -178,1 +179,1 @@\n-    return primitive_hash<InstanceKlass*>(k);\n+    return primitive_hash<T*>(k);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -577,1 +577,1 @@\n-    _dump_time_subgraph_info_table->put_if_absent(relocated_k, KlassSubGraphInfo(relocated_k, is_full_module_graph),\n+    _dump_time_subgraph_info_table->put_if_absent(k, KlassSubGraphInfo(relocated_k, is_full_module_graph),\n@@ -585,2 +585,1 @@\n-  Klass* relocated_k = ArchiveBuilder::get_relocated_klass(k);\n-  KlassSubGraphInfo* info = _dump_time_subgraph_info_table->get(relocated_k);\n+  KlassSubGraphInfo* info = _dump_time_subgraph_info_table->get(k);\n@@ -747,1 +746,2 @@\n-      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary((address)klass);\n+      Klass* relocated_k = ArchiveBuilder::get_relocated_klass(klass);\n+      unsigned int hash = SystemDictionaryShared::hash_for_shared_dictionary((address)relocated_k);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/dumpTimeClassInfo.hpp\"\n@@ -255,5 +256,0 @@\n-  static unsigned klass_hash(Klass* const& klass) {\n-    \/\/ Generate deterministic hashcode even if SharedBaseAddress is changed due to ASLR.\n-    return primitive_hash<address>(address(klass) - SharedBaseAddress);\n-  }\n-\n@@ -265,1 +261,1 @@\n-                               HeapShared::klass_hash> {\n+                               DumpTimeSharedClassTable_hash> {\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,0 +420,5 @@\n+void CollectedHeap::zap_filler_array_with(HeapWord* start, size_t words, juint value) {\n+  Copy::fill_to_words(start + filler_array_hdr_size(),\n+                      words - filler_array_hdr_size(), value);\n+}\n+\n@@ -430,2 +435,1 @@\n-    Copy::fill_to_words(start + filler_array_hdr_size(),\n-                        words - filler_array_hdr_size(), 0XDEAFBABE);\n+    zap_filler_array_with(start, words, 0XDEAFBABE);\n@@ -448,1 +452,7 @@\n-  DEBUG_ONLY(zap_filler_array(start, words, zap);)\n+  if (DumpSharedSpaces) {\n+    \/\/ This array is written into the CDS archive. Make sure it\n+    \/\/ has deterministic contents.\n+    zap_filler_array_with(start, words, 0);\n+  } else {\n+    DEBUG_ONLY(zap_filler_array(start, words, zap);)\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+  static inline void zap_filler_array_with(HeapWord* start, size_t words, juint value);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2868,0 +2868,20 @@\n+#if INCLUDE_CDS\n+  if (DumpSharedSpaces) {\n+    \/\/ During java -Xshare:dump, if we allow multiple Java threads to\n+    \/\/ execute in parallel, symbols and classes may be loaded in\n+    \/\/ random orders which will make the resulting CDS archive\n+    \/\/ non-deterministic.\n+    \/\/\n+    \/\/ Lucikly, during java -Xshare:dump, it's important to run only\n+    \/\/ the code in the main Java thread (which is NOT started here) that\n+    \/\/ creates the module graph, etc. It's safe to not start the other\n+    \/\/ threads which are launched by class static initializers\n+    \/\/ (ReferenceHandler, FinalizerThread and CleanerImpl).\n+    if (log_is_enabled(Info, cds)) {\n+      ResourceMark rm;\n+      oop t = JNIHandles::resolve_non_null(jthread);\n+      log_info(cds)(\"JVM_StartThread() ignored: %s\", t->klass()->external_name());\n+    }\n+    return;\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -663,1 +663,4 @@\n-\n+  if (DumpSharedSpaces) {\n+    \/\/ Need to deterministically fill all the alignment gaps in C++ structures.\n+    ::memset(inner_ptr, 0, size);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-runtime\/cds\/DeterministicDump.java 8253495 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,5 @@\n+            if (!compressed) {\n+                System.out.println(\"CDS archives with uncompressed oops are still non-deterministic\");\n+                System.out.println(\"See https:\/\/bugs.openjdk.java.net\/browse\/JDK-8282828\");\n+                return;\n+            }\n@@ -81,0 +86,1 @@\n+        String mapName = logName + \".map\";\n@@ -83,0 +89,1 @@\n+            .addPrefix(\"-Xlog:cds+map=trace:file=\" + mapName + \":none:filesize=0\")\n@@ -84,0 +91,1 @@\n+            .addSuffix(args)\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/DeterministicDump.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-            if (i != 0) {\n+            if (i != 0 && !out.getStdout().contains(\"LockDuringDumpAgent timeout\")) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/LockDuringDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,5 @@\n+            long started = System.currentTimeMillis();\n+            long timeout = 10000;\n+            synchronized (LITERAL) {\n+                Thread.sleep(1);\n+            }\n@@ -56,1 +61,8 @@\n-                    lock.wait();\n+                    lock.wait(timeout);\n+                    long elapsed = System.currentTimeMillis() - started;\n+                    if (elapsed >= timeout) {\n+                        System.out.println(\"This JVM may decide to not launch any Java threads during -Xshare:dump.\");\n+                        System.out.println(\"This is OK because no string objects could be in a locked state during heap dump.\");\n+                        System.out.println(\"LockDuringDumpAgent timeout after \" + elapsed + \" ms\");\n+                        return;\n+                    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/LockDuringDumpAgent.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,5 @@\n+    public CDSOptions addSuffix(ArrayList<String> suffix) {\n+        for (String s : suffix) this.suffix.add(s);\n+        return this;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSOptions.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}