{"files":[{"patch":"@@ -32,2 +32,2 @@\n- * Represents the abstract syntax tree for compilation units (source\n- * files) and package declarations (package-info.java).\n+ * Represents the abstract syntax tree for ordinary compilation units\n+ * and modular compilation units.\n@@ -37,0 +37,1 @@\n+ * @jls 7.7 Module Declarations\n@@ -42,0 +43,12 @@\n+\n+    \/**\n+     * Returns the module tree associated with this compilation unit,\n+     * or {@code null} if there is no module declaration.\n+     * @return the module tree\n+     * @implSpec This implementation throws {@code UnsupportedOperationException}\n+     * @since 17\n+     *\/\n+     default ModuleTree getModule() {\n+         throw new UnsupportedOperationException();\n+     }\n+\n@@ -67,1 +80,2 @@\n-     * Returns the import declarations appearing in this compilation unit.\n+     * Returns the import declarations appearing in this compilation unit,\n+     * or an empty list if there are no import declarations.\n@@ -73,1 +87,2 @@\n-     * Returns the type declarations appearing in this compilation unit.\n+     * Returns the type declarations appearing in this compilation unit,\n+     * or an empty list if there are no type declarations.\n@@ -76,0 +91,1 @@\n+     * A modular compilation unit does not contain any type declarations.\n@@ -87,2 +103,2 @@\n-     * Returns the line map for this compilation unit, if available.\n-     * Returns {@code null} if the line map is not available.\n+     * Returns the line map for this compilation unit, if available,\n+     * or {@code null} if the line map is not available.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/CompilationUnitTree.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+        r = scanAndReduce(node.getModule(), p, r);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/TreeScanner.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -556,0 +556,5 @@\n+        @DefinedBy(Api.COMPILER_TREE)\n+        public JCModuleDecl getModule() {\n+            return getModuleDecl();\n+        }\n+\n@@ -596,2 +601,3 @@\n-            for (typeDefs = defs; !typeDefs.isEmpty(); typeDefs = typeDefs.tail)\n-                if (!typeDefs.head.hasTag(PACKAGEDEF) && !typeDefs.head.hasTag(IMPORT))\n+            for (typeDefs = defs; !typeDefs.isEmpty(); typeDefs = typeDefs.tail) {\n+                if (!typeDefs.head.hasTag(MODULEDEF)\n+                        && !typeDefs.head.hasTag(PACKAGEDEF) && !typeDefs.head.hasTag(IMPORT)) {\n@@ -599,0 +605,2 @@\n+                }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -463,0 +463,1 @@\n+                print(\" \");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/Pretty.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8255464\n+ * @summary Cannot access ModuleTree in a CompilationUnitTree\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Objects;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import com.sun.tools.javac.api.JavacTool;\n+\n+public class CompilationUnitTreeTest {\n+    public static void main(String... args) throws Exception {\n+        new CompilationUnitTreeTest().run();\n+    }\n+\n+    PrintStream out = System.err;\n+    int errors;\n+\n+    void run() throws Exception {\n+        testModuleCompilationUnit();\n+        testOrdinaryCompilationUnit();\n+        if (errors > 0) {\n+            out.println(errors + \" errors\");\n+            throw new Exception(errors + \" errors\");\n+        }\n+    }\n+\n+    void testModuleCompilationUnit() throws IOException {\n+        out.println(\"Test ModuleCompilationUnit\");\n+        CompilationUnitTree cut = parse(\"import java.util.*; module m { }\");\n+        checkTree(\"package\", cut.getPackage(),     null);\n+        checkList(\"imports\", cut.getImports(),      List.of(\"IMPORT import java.util.*;\"));\n+        checkList(\"type decls\", cut.getTypeDecls(), List.of());\n+        checkTree(\"module\", cut.getModule(),       \"MODULE module m { }\");\n+    }\n+\n+    void testOrdinaryCompilationUnit() throws IOException {\n+        out.println(\"Test OrdinaryCompilationUnit\");\n+        CompilationUnitTree cut = parse(\"package p; import java.util.*; public class C { };\");\n+        checkTree(\"package\",    cut.getPackage(),  \"PACKAGE package p;\");\n+        checkList(\"imports\",    cut.getImports(),   List.of(\"IMPORT import java.util.*;\"));\n+        checkList(\"type decls\", cut.getTypeDecls(), List.of(\"CLASS public class C { }\", \"EMPTY_STATEMENT ;\"));\n+        checkTree(\"module\",     cut.getModule(),   null);\n+    }\n+\n+    void checkTree(String label, Tree tree, String expect) {\n+        String f = tree == null ? null\n+                : tree.getKind() + \" \" + tree.toString().trim().replaceAll(\"\\\\s+\", \" \");\n+        if (Objects.equals(f, expect)) {\n+            out.println(\"  \" + label + \" OK: \" + expect);\n+        } else {\n+            out.println(\"  \" + label + \" error\");\n+            out.println(\"    expect: \" + expect);\n+            out.println(\"     found: \" + f);\n+            errors++;\n+        }\n+    }\n+\n+    void checkList(String label, List<? extends Tree> trees, List<String> expect) {\n+        Objects.requireNonNull(expect);\n+        if (trees == null) {\n+            out.println(\"  \" + label + \" error: list is null\");\n+            errors++;\n+            return;\n+        }\n+        if (trees.size() != expect.size()) {\n+            out.println(\"  \" + label + \" error: list size mismatch\");\n+            out.println(\"    expect: \" + expect.size());\n+            out.println(\"     found: \" + trees.size());\n+            errors++;\n+        }\n+        \/\/ compare entries in both lists\n+        for (int i = 0; i < Math.min(trees.size(), expect.size()); i++) {\n+            Tree ti = trees.get(i);\n+            String ei = expect.get(i);\n+            checkTree(label + \"[\" + i + \"]\", ti, ei);\n+        }\n+        \/\/ show any excess entries in expect list\n+        for (int i = trees.size(); i < expect.size(); i++) {\n+            String ei = expect.get(i);\n+            out.println(\"    \" + label + \"[\" + i + \"]: expect: \" + ei);\n+        }\n+        \/\/ show any excess entries in trees list\n+        for (int i = expect.size(); i < trees.size(); i++) {\n+            Tree ti = trees.get(i);\n+            String fi = ti == null ? null : ti.getKind() + \" \" + ti.toString();\n+            out.println(\"    \" + label + \"[\" + i + \"]: found: \" + fi);\n+        }\n+    }\n+\n+    CompilationUnitTree parse(String text) throws IOException {\n+        JavacTool tool = JavacTool.create();\n+        JavacTask ct = tool.getTask(null, null, null,\n+                null, null, List.of(new MyFileObject(text)));\n+        return ct.parse().iterator().next();\n+    }\n+\n+    static class MyFileObject extends SimpleJavaFileObject {\n+\n+        private final String text;\n+\n+        public MyFileObject(String text) {\n+            super(URI.create(\"fo:\/Test.java\"), JavaFileObject.Kind.SOURCE);\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+            return text;\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/tree\/CompilationUnitTreeTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}