{"files":[{"patch":"@@ -53,1 +53,1 @@\n-  G1CardSetConfiguration(HeapRegion::LogCardsPerRegion,                             \/* inline_ptr_bits_per_card *\/\n+  G1CardSetConfiguration(HeapRegion::LogCardsPerRegion - default_log2_card_regions_per_region(),                                                                                   \/* inline_ptr_bits_per_card *\/\n@@ -58,1 +58,2 @@\n-                         (uint)HeapRegion::CardsPerRegion,                          \/* max_cards_in_cardset *\/\n+                         (uint)HeapRegion::CardsPerRegion >> default_log2_card_regions_per_region(),\n+                                                                                    \/* max_cards_in_card_set *\/\n@@ -78,1 +79,1 @@\n-                         max_cards_in_card_set,                                \/* max_cards_in_cardset *\/\n+                         max_cards_in_card_set,                                \/* max_cards_in_card_set *\/\n@@ -99,1 +100,14 @@\n-  _log2_cards_per_card_region(log2i_exact(_max_cards_in_card_set) - _log2_card_regions_per_heap_region) {\n+  _log2_cards_per_card_region(log2i_exact(_max_cards_in_card_set)) {\n+\n+  assert(_inline_ptr_bits_per_card <= G1CardSetContainer::LogCardsPerRegionLimit,\n+         \"inline_ptr_bits_per_card (%u) is wasteful, can represent more than maximum possible card indexes (%u)\",\n+         _inline_ptr_bits_per_card, G1CardSetContainer::LogCardsPerRegionLimit);\n+  assert(_inline_ptr_bits_per_card >= _log2_cards_per_card_region,\n+         \"inline_ptr_bits_per_card (%u) must be larger than possible card indexes (%u)\",\n+         _inline_ptr_bits_per_card, _log2_cards_per_card_region);\n+\n+  assert(cards_in_bitmap_threshold_percent >= 0.0 && cards_in_bitmap_threshold_percent <= 1.0,\n+         \"cards_in_bitmap_threshold_percent (%1.2f) out of range\", cards_in_bitmap_threshold_percent);\n+\n+  assert(cards_in_howl_threshold_percent >= 0.0 && cards_in_howl_threshold_percent <= 1.0,\n+         \"cards_in_howl_threshold_percent (%1.2f) out of range\", cards_in_howl_threshold_percent);\n@@ -103,0 +117,12 @@\n+  assert(_max_cards_in_card_set <= G1CardSetContainer::cards_per_region_limit(),\n+         \"Specified number of cards (%u) exceeds maximum representable (%u)\",\n+         _max_cards_in_card_set, G1CardSetContainer::cards_per_region_limit());\n+\n+  assert(_cards_in_howl_bitmap_threshold <= _max_cards_in_howl_bitmap,\n+         \"Threshold to coarsen Howl Bitmap to Howl Full (%u) must be \"\n+         \"smaller than or equal to max number of cards in Howl bitmap (%u)\",\n+         _cards_in_howl_bitmap_threshold, _max_cards_in_howl_bitmap);\n+  assert(_cards_in_howl_threshold <= _max_cards_in_card_set,\n+         \"Threshold to coarsen Howl to Full (%u) must be \"\n+         \"smaller than or equal to max number of cards in card region (%u)\",\n+         _cards_in_howl_threshold, _max_cards_in_card_set);\n@@ -132,1 +158,1 @@\n-                          (uint)1 << log2_cards_per_card_region());\n+                          max_cards_in_region());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-  \/\/ Maximum number of cards in a non-full card set for a single region. Card sets\n+  \/\/ Maximum number of cards in a non-full card set for a single card region. Card sets\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,0 +160,2 @@\n+\n+  static uint cards_per_region_limit() { return 1u << LogCardsPerRegionLimit; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetContainers.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-  assert(card_within_region < ((uint)1 << G1CardSetContainer::LogCardsPerRegionLimit), \"must be\");\n+  assert(card_within_region < G1CardSetContainer::cards_per_region_limit(), \"must be\");\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}