{"files":[{"patch":"@@ -1803,0 +1803,1 @@\n+                preFlow(c);\n@@ -5921,0 +5922,2 @@\n+            initTypeIfNeeded(that);\n+            initTypeIfNeeded(that.var);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658 8246774\n+ * @bug 8205418 8207229 8207230 8230847 8245786 8247334 8248641 8240658 8246774 8274347\n@@ -91,0 +91,1 @@\n+        new TestGetScopeResult().testNestedSwitchExpression();\n@@ -754,0 +755,71 @@\n+    void testNestedSwitchExpression() throws IOException {\n+        JavacTool c = JavacTool.create();\n+        try (StandardJavaFileManager fm = c.getStandardFileManager(null, null, null)) {\n+            String code = \"\"\"\n+                          class Test {\n+                              void t(Object o1, Object o2) {\n+                                  System.err.println(switch (o1) {\n+                                    case String s -> switch (j) {\n+                                        case Integer i -> {\n+                                            int scopeHere;\n+                                            yield \"\";\n+                                        }\n+                                        default -> \"\";\n+                                    };\n+                                    default -> \"\";\n+                                  });\n+                              }\n+                          }\n+                          \"\"\";\n+            class MyFileObject extends SimpleJavaFileObject {\n+                MyFileObject() {\n+                    super(URI.create(\"myfo:\/\/\/Test.java\"), SOURCE);\n+                }\n+                @Override\n+                public String getCharContent(boolean ignoreEncodingErrors) {\n+                    return code;\n+                }\n+            }\n+            Context ctx = new Context();\n+            TestAnalyzer.preRegister(ctx);\n+            JavacTask t = (JavacTask) c.getTask(null, fm, null, null, null,\n+                                                List.of(new MyFileObject()), ctx);\n+            CompilationUnitTree cut = t.parse().iterator().next();\n+            t.analyze();\n+\n+            List<List<String>> actual = new ArrayList<>();\n+\n+            new TreePathScanner<Void, Void>() {\n+                @Override\n+                public Void visitVariable(VariableTree node, Void p) {\n+                    if (node.getName().contentEquals(\"scopeHere\")) {\n+                        Scope scope = Trees.instance(t).getScope(getCurrentPath());\n+                        actual.add(dumpScope(scope));\n+                        JCTree body = getCaseBody(scope);\n+                        if (body == null) {\n+                            throw new AssertionError(\"Unexpected null body.\");\n+                        }\n+                    }\n+                    return super.visitVariable(node, p);\n+                }\n+                JCTree getCaseBody(Scope scope) {\n+                    return ((JCCase) ((JavacScope) scope).getEnv().next.next.tree).body;\n+                }\n+            }.scan(cut, null);\n+\n+            List<List<String>> expected =\n+                    List.of(List.of(\"scopeHere:int\",\n+                                    \"i:java.lang.Integer\",\n+                                    \"s:java.lang.String\",\n+                                    \"o2:java.lang.Object\",\n+                                    \"o1:java.lang.Object\",\n+                                    \"super:java.lang.Object\",\n+                                    \"this:Test\"\n+                                ));\n+\n+            if (!expected.equals(actual)) {\n+                throw new AssertionError(\"Unexpected Scope content: \" + actual);\n+            }\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetScopeResult.java","additions":74,"deletions":2,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8206986 8254286\n+ * @bug 8206986 8254286 8274347\n@@ -86,0 +86,10 @@\n+    void preflow(int i, int j) {\n+        System.out.println(switch (i) {\n+            case 1 -> switch (j) {\n+                    case 1 -> \"one and one\";\n+                    default -> \"one and many\";\n+                };\n+            case 2 -> \"two\";\n+            default -> \"many\";\n+        });\n+    }\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchInfer.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}