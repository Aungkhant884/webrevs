{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.Supplier;\n@@ -85,2 +86,2 @@\n-    public String getRawPropertyValue(String key) {\n-        Map.Entry<String, String> entry = rawProperties.stream()\n+    public String getRawPropertyValue(String key, Supplier<String> getDefault) {\n+        return rawProperties.stream()\n@@ -88,1 +89,2 @@\n-                .findFirst().orElse(null);\n+                .map(e -> e.getValue()).findAny().orElseGet(getDefault);\n+    }\n@@ -90,1 +92,3 @@\n-        return entry == null ? null : entry.getValue();\n+    private String getDesciption(JPackageCommand cmd) {\n+        return getRawPropertyValue(\"description\", () -> cmd.getArgumentValue(\n+                \"--description\", unused -> cmd.name()));\n@@ -256,33 +260,14 @@\n-            String expectedDescription = getRawPropertyValue(\"description\");\n-            if (expectedDescription != null) {\n-                Path launcherPath = cmd.appLauncherPath(name);\n-                Executor exec = Executor.of(\"powershell\",\n-                                             \"-NoLogo\",\n-                                             \"-NoProfile\",\n-                                             \"-Command\",\n-                                             \"(Get-Item \\\\\\\"\" +\n-                                             launcherPath.toAbsolutePath() +\n-                                             \"\\\\\\\").VersionInfo | select FileDescription\");\n-                boolean descriptionIsValid = false;\n-                List<String> lines = exec.executeAndGetOutput();\n-                if (lines != null) {\n-                    for (int i = 0; i < lines.size(); i++) {\n-                        if (lines.get(i).trim().equals(\"FileDescription\")) {\n-                            i += 2; \/\/ Skip \"---------------\" and move to description\n-                            descriptionIsValid =\n-                                    expectedDescription.equals(lines.get(i).trim());\n-                        }\n-                    }\n-                }\n-                TKit.assertTrue(descriptionIsValid, \"Invalid file description\");\n-            }\n-        } else if (TKit.isLinux()) {\n-            String expectedDescription = getRawPropertyValue(\"description\");\n-            if (expectedDescription != null) {\n-                Path desktopFile = LinuxHelper.getDesktopFile(cmd, name);\n-                if (Files.exists(desktopFile)) {\n-                    TKit.assertTextStream(\"Comment=\" + expectedDescription)\n-                            .label(String.format(\"[%s] file\", desktopFile))\n-                            .predicate(String::equals)\n-                            .apply(Files.readAllLines(desktopFile).stream());\n-                }\n+            String expectedDescription = getDesciption(cmd);\n+            Path launcherPath = cmd.appLauncherPath(name);\n+            String actualDescription =\n+                    WindowsHelper.getExecutableDesciption(launcherPath);\n+            TKit.assertEquals(expectedDescription, actualDescription,\n+                    \"Invalid file description\");\n+        } else if (TKit.isLinux() && !cmd.isImagePackageType()) {\n+            String expectedDescription = getDesciption(cmd);\n+            Path desktopFile = LinuxHelper.getDesktopFile(cmd, name);\n+            if (Files.exists(desktopFile)) {\n+                TKit.assertTextStream(\"Comment=\" + expectedDescription)\n+                        .label(String.format(\"[%s] file\", desktopFile))\n+                        .predicate(String::equals)\n+                        .apply(Files.readAllLines(desktopFile).stream());\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":22,"deletions":37,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,0 +142,22 @@\n+    public static String getExecutableDesciption(Path pathToExeFile) {\n+        String description = null;\n+        Executor exec = Executor.of(\"powershell\",\n+                \"-NoLogo\",\n+                \"-NoProfile\",\n+                \"-Command\",\n+                \"(Get-Item \\\\\\\"\"\n+                + pathToExeFile.toAbsolutePath()\n+                + \"\\\\\\\").VersionInfo | select FileDescription\");\n+        List<String> lines = exec.executeAndGetOutput();\n+        for (int i = 0; i < lines.size(); i++) {\n+            if (lines.get(i).trim().equals(\"FileDescription\")) {\n+                i += 2; \/\/ Skip \"---------------\" and move to description\n+                description = lines.get(i).trim();\n+            }\n+        }\n+\n+        TKit.assertNotNull(description, \"Failed to get file description\");\n+\n+        return description;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}