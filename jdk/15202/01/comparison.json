{"files":[{"patch":"@@ -24,2 +24,0 @@\n-import java.io.IOException;\n-\n@@ -45,1 +43,1 @@\n-    public void run(CommandExecutor executor, boolean overwrite) throws IOException {\n+    public void run(CommandExecutor executor, boolean overwrite) throws Exception {\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpAllTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        verifyHeapDump(dump);\n+        HprofParser.parseAndVerify(dump);\n@@ -149,24 +149,0 @@\n-\n-    private static void verifyHeapDump(File dump) throws Exception {\n-\n-        Asserts.assertTrue(dump.exists() && dump.isFile(),\n-                           \"Could not create dump file \" + dump.getAbsolutePath());\n-\n-        try {\n-            File out = HprofParser.parse(dump);\n-\n-            Asserts.assertTrue(out != null && out.exists() && out.isFile(),\n-                               \"Could not find hprof parser output file\");\n-            List<String> lines = Files.readAllLines(out.toPath());\n-            Asserts.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n-            for (String line : lines) {\n-                Asserts.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve \" +\n-                                                 \"object.*constantPoolOop.*).*\"));\n-            }\n-\n-            out.delete();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Asserts.fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpCompressedTest.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private static void checkAndVerify(OutputAnalyzer dcmdOut, LingeredApp app, File heapDumpFile, boolean expectSerial) throws IOException {\n+    private static void checkAndVerify(OutputAnalyzer dcmdOut, LingeredApp app, File heapDumpFile, boolean expectSerial) throws Exception {\n@@ -67,1 +67,1 @@\n-        verifyHeapDump(heapDumpFile);\n+        HprofParser.parseAndVerify(heapDumpFile);\n@@ -128,19 +128,0 @@\n-\n-    private static void verifyHeapDump(File dump) {\n-        Asserts.assertTrue(dump.exists() && dump.isFile(), \"Could not create dump file \" + dump.getAbsolutePath());\n-        try {\n-            File out = HprofParser.parse(dump);\n-\n-            Asserts.assertTrue(out != null && out.exists() && out.isFile(), \"Could not find hprof parser output file\");\n-            List<String> lines = Files.readAllLines(out.toPath());\n-            Asserts.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n-            for (String line : lines) {\n-                Asserts.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve object.*constantPoolOop.*).*\"));\n-            }\n-\n-            out.delete();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Asserts.fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpParallelTest.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.IOException;\n@@ -53,1 +52,1 @@\n-    public void run(CommandExecutor executor, boolean overwrite) throws IOException {\n+    public void run(CommandExecutor executor, boolean overwrite) throws Exception {\n@@ -64,1 +63,1 @@\n-        verifyHeapDump(dump);\n+        HprofParser.parseAndVerify(dump);\n@@ -68,19 +67,0 @@\n-    private void verifyHeapDump(File dump) {\n-        Assert.assertTrue(dump.exists() && dump.isFile(), \"Could not create dump file \" + dump.getAbsolutePath());\n-        try {\n-            File out = HprofParser.parse(dump);\n-\n-            Assert.assertTrue(out != null && out.exists() && out.isFile(), \"Could not find hprof parser output file\");\n-            List<String> lines = Files.readAllLines(out.toPath());\n-            Assert.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n-            for (String line : lines) {\n-                Assert.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve object.*constantPoolOop.*).*\"));\n-            }\n-\n-            out.delete();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Assert.fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n-        }\n-    }\n-\n@@ -89,1 +69,1 @@\n-    public void pid() throws IOException {\n+    public void pid() throws Exception {\n@@ -94,1 +74,1 @@\n-    public void pidRewrite() throws IOException {\n+    public void pidRewrite() throws Exception {\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpTest.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import jdk.test.lib.hprof.HprofParser;\n@@ -58,24 +59,0 @@\n-    private static void verifyHeapDump(String heapFile) {\n-\n-        File heapDumpFile = new File(heapFile);\n-        Asserts.assertTrue(heapDumpFile.exists() && heapDumpFile.isFile(),\n-                          \"Could not create dump file \" + heapDumpFile.getAbsolutePath());\n-        try (PositionDataInputStream in = new PositionDataInputStream(\n-                new BufferedInputStream(new FileInputStream(heapFile)))) {\n-            int i = in.readInt();\n-            if (HprofReader.verifyMagicNumber(i)) {\n-                Snapshot sshot;\n-                HprofReader r = new HprofReader(heapFile, in, 0,\n-                                                false, 0);\n-                sshot = r.read();\n-            } else {\n-                throw new IOException(\"Unrecognized magic number: \" + i);\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Asserts.fail(\"Could not read dump file \" + heapFile);\n-        } finally {\n-            heapDumpFile.delete();\n-        }\n-    }\n-\n@@ -104,1 +81,1 @@\n-        verifyHeapDump(heapDumpFileName);\n+        HprofParser.parseAndVerify(new File(heapDumpFileName));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestHeapDumpForInvokeDynamic.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-            verifyDumpFile(file);\n+            HprofParser.parseAndVerify(file);\n@@ -305,21 +305,0 @@\n-    private static void verifyDumpFile(File dump) {\n-        assertTrue(dump.exists() && dump.isFile(), \"Could not create dump file \" + dump.getAbsolutePath());\n-        try {\n-            File out = HprofParser.parse(dump);\n-\n-            assertTrue(out != null && out.exists() && out.isFile(),\n-                       \"Could not find hprof parser output file\");\n-            List<String> lines = Files.readAllLines(out.toPath());\n-            assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n-            for (String line : lines) {\n-                assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve \" +\n-                                         \"object.*constantPoolOop.*).*\"));\n-            }\n-\n-            out.delete();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -30,0 +31,3 @@\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n@@ -31,0 +35,1 @@\n+import jdk.test.lib.Asserts;\n@@ -51,1 +56,8 @@\n-     * @see #parse(File, boolean, boolean, boolean)\n+     * @see #parse(File, boolean, boolean, boolean, boolean)\n+     *\/\n+    public static File parseAndVerify(File dump) throws Exception {\n+        return parse(dump, false, true, true, true);\n+    }\n+\n+    \/**\n+     * @see #parse(File, boolean, boolean, boolean, boolean)\n@@ -54,1 +66,1 @@\n-        return parse(dump, false, true, true);\n+        return parse(dump, false, true, true, false);\n@@ -58,1 +70,1 @@\n-     * @see #parse(File, boolean, boolean, boolean)\n+     * @see #parse(File, boolean, boolean, boolean, boolean)\n@@ -61,1 +73,1 @@\n-        return parse(dump, true, true, true);\n+        return parse(dump, true, true, true, false);\n@@ -71,0 +83,1 @@\n+     * @param verifyParse Verify output of parse process and fail if error occurred\n@@ -74,1 +87,2 @@\n-    public static File parse(File dump, boolean debug, boolean callStack, boolean calculateRefs) throws Exception {\n+    public static File parse(File dump, boolean debug, boolean callStack,\n+                             boolean calculateRefs, boolean verifyParse) throws Exception {\n@@ -90,4 +104,6 @@\n-       } finally {\n-           System.setOut(psSystemOut);\n-       }\n-\n+        } finally {\n+            System.setOut(psSystemOut);\n+        }\n+        if (verifyParse) {\n+            verifyParse(out);\n+        }\n@@ -97,0 +113,8 @@\n+    private static void verifyParse(File out) throws IOException {\n+        Asserts.assertTrue(out != null && out.exists() && out.isFile(), \"Could not find hprof parser output file\");\n+        List<String> lines = Files.readAllLines(out.toPath());\n+        Asserts.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n+        for (String line : lines) {\n+            Asserts.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve object.*constantPoolOop.*).*\"));\n+        }\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/HprofParser.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"}]}