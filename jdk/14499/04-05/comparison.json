{"files":[{"patch":"@@ -435,0 +435,3 @@\n+        \/\/ See if lint options checking was explicitly disabled by the\n+        \/\/ user; this is distinct from the options check being\n+        \/\/ enabled\/disabled.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1778,1 +1778,2 @@\n-    Use -Xlint:-options to suppress this message.\n+    Use -Xlint:-options to suppress this message.\\n\\\n+    Use -proc:none to disable annotation processing.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+ *\n+ * Does _not_ generate a note and the processor _doesn't_ run.\n+ * $ javac -cp ImplicitProcTestProc.jar -proc:none                          HelloWorldTest.java\n@@ -83,0 +86,2 @@\n+        Path apDir = Paths.get(\".\");\n+\n@@ -84,8 +89,8 @@\n-        tb.writeFile(\"HelloWorldTest.java\",\n-                     \"\"\"\n-                     public class HelloWorldTest {\n-                         public static void main(String... args) {\n-                             System.out.println(\"Hello world test.\");\n-                         }\n-                     }\n-                     \"\"\");\n+        tb.writeJavaFiles(apDir,\n+                          \"\"\"\n+                          public class HelloWorldTest {\n+                              public static void main(String... args) {\n+                                  System.out.println(\"Hello world test.\");\n+                              }\n+                          }\n+                          \"\"\");\n@@ -94,1 +99,0 @@\n-        Path apDir = Paths.get(\".\");\n@@ -102,2 +106,1 @@\n-        tb.writeFile(servicesFile,\n-                     processorName);\n+        tb.writeFile(servicesFile, processorName);\n@@ -106,26 +109,26 @@\n-        tb.writeFile(processorName + \".java\",\n-                     \"\"\"\n-                     import java.util.Set;\n-                     import javax.annotation.processing.*;\n-                     import javax.lang.model.SourceVersion;\n-                     import javax.lang.model.element.TypeElement;\n-\n-                     @SupportedAnnotationTypes(\"*\")\n-                     public class ImplicitProcTestProc extends AbstractProcessor {\n-                         public ImplicitProcTestProc() {super();}\n-\n-                         @Override\n-                         public boolean process(Set<? extends TypeElement> annotations,\n-                                                RoundEnvironment roundEnv) {\n-                             if (roundEnv.processingOver()) {\n-                                 System.out.println(\"ImplicitProcTestProc run\");\n-                             }\n-                             return true;\n-                         }\n-\n-                         @Override\n-                         public SourceVersion getSupportedSourceVersion() {\n-                             return SourceVersion.latest();\n-                         }\n-                     }\n-                     \"\"\");\n+        tb.writeJavaFiles(apDir,\n+                          \"\"\"\n+                          import java.util.Set;\n+                          import javax.annotation.processing.*;\n+                          import javax.lang.model.SourceVersion;\n+                          import javax.lang.model.element.TypeElement;\n+\n+                          @SupportedAnnotationTypes(\"*\")\n+                          public class ImplicitProcTestProc extends AbstractProcessor {\n+                              public ImplicitProcTestProc() {super();}\n+\n+                              @Override\n+                              public boolean process(Set<? extends TypeElement> annotations,\n+                                                     RoundEnvironment roundEnv) {\n+                                  if (roundEnv.processingOver()) {\n+                                      System.out.println(\"ImplicitProcTestProc run\");\n+                                  }\n+                                  return true;\n+                              }\n+\n+                              @Override\n+                              public SourceVersion getSupportedSourceVersion() {\n+                                  return SourceVersion.latest();\n+                              }\n+                          }\n+                          \"\"\");\n@@ -251,0 +254,15 @@\n+    @Test\n+    public void procNone(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-proc:none\",\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, false);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+\n@@ -270,1 +288,2 @@\n-        if (expectedPresent ^ outputLines.get(0).contains(\"- compiler.note.implicit.annotation.processing\")) {\n+        if (expectedPresent ^\n+            outputLines.get(0).contains(\"- compiler.note.implicit.annotation.processing\")) {\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/TestNoteOnImplicitProcessing.java","additions":57,"deletions":38,"binary":false,"changes":95,"status":"modified"}]}