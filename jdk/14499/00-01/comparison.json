{"files":[{"patch":"@@ -313,0 +313,4 @@\n+                 *\n+                 * Note: if an explicit processor path is not set,\n+                 * only the class path and _not_ the module path are\n+                 * searched for processors.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1773,8 +1773,6 @@\n-    One or more annotation processors found under the default policy of searching\\n\\\n-    the class path or module path for processors. Those processors will be used in\\n\\\n-    this compilation, but javac in future releases may change its default policy to\\n\\\n-    not run such implicit processors in the absence of annotation processing\\n\\\n-    configuration options.\\n\\\n-    Use the -proc:full to explicitly request annotation processing and compilation\\n\\\n-    without any other annotation processing configuration and use -Xlint:-options\\n\\\n-    to suppress this message.\n+    Annotation processing is enabled because one or more processors were found\\n\\\n+    on the class path. A future release of javac may disable annotation processing\\n\\\n+    unless at least one processor is specified by name (-processor), or a search\\n\\\n+    path is specified (--processor-path, --processor-module-path), or annotation\\n\\\n+    processing is enabled explicitly (-proc:only, -proc:full).\\n\\\n+    Use -Xlint:-options to suppress this message.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,259 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8310061\n+ * @summary Verify a note is issued for implicit annotation processing\n+ *\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask JavacTestingAbstractProcessor\n+ * @run main TestNoteOnImplicitProcessing\n+ *\/\n+\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import javax.annotation.processing.Processor;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Expect;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.JarTask;\n+\n+\/*\n+ * Generates note and the processor runs:\n+ * $ javac -cp ImplicitProcTestProc.jar                                     HelloWorldTest.java\n+ *\n+ * Does _not_ generate a note and the processor runs:\n+ * $ javac -cp ImplicitProcTestProc.jar -processor ImplicitProcTestProc.jar HelloWorldTest.java\n+ * $ javac -cp ImplicitProcTestProc.jar -proc:full                          HelloWorldTest.java\n+ * $ javac -cp ImplicitProcTestProc.jar -proc:only                          HelloWorldTest.java\n+ * $ javac -cp ImplicitProcTestProc.jar -Xlint:-options                     HelloWorldTest.java\n+ * $ javac -cp ImplicitProcTestProc.jar -Xlint:none                         HelloWorldTest.java\n+ *\/\n+\n+public class TestNoteOnImplicitProcessing extends TestRunner {\n+    public static void main(String... args) throws Exception {\n+\n+        var self  = new TestNoteOnImplicitProcessing();\n+        Path jarFilePath = self.createProcessorJarFile();\n+        self.runTests(m -> new Object[] { Paths.get(m.getName()), jarFilePath });\n+    }\n+\n+    private ToolBox tb = new ToolBox();\n+    private String processorName = \"ImplicitProcTestProc\";\n+\n+    public TestNoteOnImplicitProcessing() {\n+        super(System.err);\n+    }\n+\n+    private Path createProcessorJarFile() throws Exception {\n+        \/\/ Write out shared-use source file\n+        tb.writeFile(\"HelloWorldTest.java\",\n+                     \"\"\"\n+                     public class HelloWorldTest {\n+                         public static void main(String... args) {\n+                             System.out.println(\"Hello world test.\");\n+                         }\n+                     }\n+                     \"\"\");\n+\n+        JarTask jarTask = new JarTask(tb, processorName + \".jar\");\n+        Path apDir = Paths.get(\".\");\n+\n+        \/\/ write out META-INF\/services file for the processor\n+        Path servicesFile =\n+            apDir\n+            .resolve(\"META-INF\")\n+            .resolve(\"services\")\n+            .resolve(Processor.class.getCanonicalName());\n+        tb.writeFile(servicesFile,\n+                     processorName);\n+\n+        \/\/ write out processor source file\n+        tb.writeFile(processorName + \".java\",\n+                     \"\"\"\n+                     import java.util.Set;\n+                     import javax.annotation.processing.*;\n+                     import javax.lang.model.SourceVersion;\n+                     import javax.lang.model.element.TypeElement;\n+\n+                     @SupportedAnnotationTypes(\"*\")\n+                     public class ImplicitProcTestProc extends AbstractProcessor {\n+                         public ImplicitProcTestProc() {super();}\n+\n+                         @Override\n+                         public boolean process(Set<? extends TypeElement> annotations,\n+                                                RoundEnvironment roundEnv) {\n+                             if (roundEnv.processingOver()) {\n+                                 System.out.println(\"ImplicitProcTestProc run\");\n+                             }\n+                             return true;\n+                         }\n+\n+                         @Override\n+                         public SourceVersion getSupportedSourceVersion() {\n+                             return SourceVersion.latest();\n+                         }\n+                     }\n+                     \"\"\");\n+\n+        \/\/ Compile the processor\n+        new JavacTask(tb)\n+            .files(processorName + \".java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        \/\/ Create jar file\n+        jarTask\n+            .files(servicesFile.toString(),\n+                   apDir.resolve(processorName + \".class\").toString())\n+            .run();\n+\n+        return Paths.get(processorName + \".jar\");\n+    }\n+\n+    @Test\n+    public void generateWarning(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, true);\n+    }\n+\n+    @Test\n+    public void processor(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-processor\", processorName,\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+\n+    @Test\n+    public void procFull(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-proc:full\",\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+\n+    @Test\n+    public void procOnly(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-proc:only\",\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+\n+    @Test\n+    public void lintOptions(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-Xlint:-options\",\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+    \n+    @Test\n+    public void lintNone(Path base, Path jarFile) {\n+        Task.Result javacResult =\n+            new JavacTask(tb)\n+            .options(\"-classpath\", jarFile.toString(),\n+                     \"-Xlint:none\",\n+                     \"-XDrawDiagnostics\")\n+            .files(\"HelloWorldTest.java\")\n+            .run(Expect.SUCCESS)\n+            .writeAll();\n+\n+        checkForProcessorMessage(javacResult, true);\n+        checkForCompilerNote(javacResult, false);\n+    }\n+\n+    private void checkForProcessorMessage(Task.Result javacResult, boolean expectedPresent) {\n+        List<String> outputLines = javacResult.getOutputLines(Task.OutputKind.STDOUT);\n+\n+        if (!expectedPresent && outputLines.isEmpty()) {\n+            return;\n+        }\n+\n+        if (expectedPresent ^ outputLines.get(0).contains(\"ImplicitProcTestProc run\")) {\n+            throw new RuntimeException(\"Expected processor message not printed\");\n+        }\n+    }\n+\n+    private void checkForCompilerNote(Task.Result javacResult, boolean expectedPresent) {\n+        List<String> outputLines = javacResult.getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!expectedPresent && outputLines.isEmpty()) {\n+            return;\n+        }\n+\n+        if (expectedPresent ^ outputLines.get(0).contains(\"- compiler.note.implicit.annotation.processing\")) {\n+            throw new RuntimeException(\"Expected note not printed\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/TestNoteOnImplicitProcessing.java","additions":259,"deletions":0,"binary":false,"changes":259,"status":"added"}]}