{"files":[{"patch":"@@ -87,0 +87,2 @@\n+import com.sun.tools.javac.code.Lint;\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -88,0 +90,1 @@\n+\n@@ -235,0 +238,4 @@\n+    \/** Whether or not the options lint category was initially disabled\n+     *\/\n+    boolean optionsCheckingInitiallyDisabled;\n+\n@@ -427,0 +434,3 @@\n+        optionsCheckingInitiallyDisabled =\n+            options.isSet(Option.XLINT_CUSTOM, \"-options\") ||\n+            options.isSet(Option.XLINT_CUSTOM, \"none\");\n@@ -1135,0 +1145,5 @@\n+                if (!explicitAnnotationProcessingRequested() &&\n+                    !optionsCheckingInitiallyDisabled) {\n+                    log.note(Notes.ImplicitAnnotationProcessing);\n+                }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1772,0 +1772,10 @@\n+compiler.note.implicit.annotation.processing=\\\n+    One or more annotation processors found under the default policy of searching\\n\\\n+    the class path or module path for processors. Those processors will be used in\\n\\\n+    this compilation, but javac in future releases may change its default policy to\\n\\\n+    not run such implicit processors in the absence of annotation processing\\n\\\n+    configuration options.\\n\\\n+    Use the -proc:full to explicitly request annotation processing and compilation\\n\\\n+    without any other annotation processing configuration and use -Xlint:-options\\n\\\n+    to suppress this message.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,2 @@\n-                             \"-processorpath\", apDir.toString())\n+                             \"-processorpath\", apDir.toString(),\n+                             \"-Xlint:-options\")\n","filename":"test\/langtools\/tools\/javac\/annotations\/8218152\/MalformedAnnotationProcessorTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-compiler.err.annotation.unrecognized.attribute.name\n\\ No newline at end of file\n+compiler.err.annotation.unrecognized.attribute.name\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\/\/ key: compiler.note.implicit.annotation.processing\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUseProcOrImplicit\/ProcUseProcOrImplicit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -242,1 +242,1 @@\n-            return Arrays.asList(\"-Xlint:rawtypes\", \"-XDrawDiagnostics\");\n+            return Arrays.asList(\"-Xlint:rawtypes\", \"-XDrawDiagnostics\", \"-proc:full\");\n","filename":"test\/langtools\/tools\/javac\/platform\/PlatformProviderTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        compiler.getTask(outputWriter, fileManager, null, List.of(\"-XDrawDiagnostics\", \"--module\", \"mod\"), null, null).call();\n+        compiler.getTask(outputWriter, fileManager, null, List.of(\"-XDrawDiagnostics\", \"--module\", \"mod\", \"-proc:full\"), null, null).call();\n","filename":"test\/langtools\/tools\/javac\/processing\/ReportOnImportedModuleAnnotation\/ReportOnImportedModuleAnnotation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}