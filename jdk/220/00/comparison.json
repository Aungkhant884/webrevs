{"files":[{"patch":"@@ -39,0 +39,9 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ In fastdebug builds the code size can get out of hand, potentially\n+\/\/ tripping over compiler limits (which may be bugs, but nevertheless\n+\/\/ need to be taken into consideration).  A side benefit of limiting\n+\/\/ inlining is that we get more call frames that might aid debugging.\n+\/\/ Explicit NOINLINE to block ATTRIBUTE_FLATTENing.\n+#define MAYBE_INLINE_EVACUATION NOT_DEBUG(inline) DEBUG_ONLY(NOINLINE)\n@@ -158,1 +167,3 @@\n-template <class T> void G1ParScanThreadState::do_oop_evac(T* p) {\n+template <class T>\n+MAYBE_INLINE_EVACUATION\n+void G1ParScanThreadState::do_oop_evac(T* p) {\n@@ -197,0 +208,1 @@\n+MAYBE_INLINE_EVACUATION\n@@ -246,0 +258,1 @@\n+MAYBE_INLINE_EVACUATION\n@@ -391,0 +404,1 @@\n+MAYBE_INLINE_EVACUATION\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -159,1 +159,1 @@\n-  inline void do_partial_array(PartialArrayScanTask task);\n+  void do_partial_array(PartialArrayScanTask task);\n@@ -172,3 +172,3 @@\n-  inline oop do_copy_to_survivor_space(G1HeapRegionAttr region_attr,\n-                                       oop obj,\n-                                       markWord old_mark);\n+  oop do_copy_to_survivor_space(G1HeapRegionAttr region_attr,\n+                                oop obj,\n+                                markWord old_mark);\n@@ -177,1 +177,1 @@\n-  template <class T> inline void do_oop_evac(T* p);\n+  template <class T> void do_oop_evac(T* p);\n@@ -179,1 +179,1 @@\n-  inline void dispatch_task(ScannerTask task);\n+  void dispatch_task(ScannerTask task);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}