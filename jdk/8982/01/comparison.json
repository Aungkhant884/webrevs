{"files":[{"patch":"@@ -418,1 +418,1 @@\n-  int result = ::vsnprintf(buf, len, fmt, args);\n+  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n@@ -786,1 +786,1 @@\n-  ::exit(num);\n+  ALLOW_C_FUNCTION(::exit, ::exit(num);)\n@@ -790,1 +790,1 @@\n-  ::_exit(num);\n+  ALLOW_C_FUNCTION(::_exit, ::_exit(num);)\n@@ -2006,1 +2006,1 @@\n-  ::_exit(1);\n+  os::_exit(1);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1689,1 +1689,1 @@\n-  int result = ::vsnprintf(buf, len, fmt, args);\n+  ALLOW_C_FUNCTION(::vsnprintf, int result = ::vsnprintf(buf, len, fmt, args);)\n@@ -4142,1 +4142,1 @@\n-    ::exit(exit_code);\n+    ALLOW_C_FUNCTION(::exit, ::exit(exit_code);)\n@@ -4144,1 +4144,1 @@\n-    ::_exit(exit_code);\n+    ALLOW_C_FUNCTION(::_exit, ::_exit(exit_code);)\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -733,2 +734,1 @@\n-  vsnprintf(msg, max_msg_size, format, ap);\n-  msg[max_msg_size-1] = '\\0';\n+  os::vsnprintf(msg, max_msg_size, format, ap);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -388,1 +388,1 @@\n-    exit(-1);\n+    os::exit(-1);\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,21 @@\n+\/\/ Support warnings for use of certain C functions, except where explicitly\n+\/\/ permitted.\n+\/\/\n+\/\/ FORBID_C_FUNCTION(signature, alternative)\n+\/\/ - signature: the function that should not normally be used.\n+\/\/ - alternative: a string that may be used in a warning about a use, typically\n+\/\/   suggesting an alternative.\n+\/\/\n+\/\/ ALLOW_C_FUNCTION(name, ... using statement ...)\n+\/\/ - name: the name of a forbidden function whose use is permitted in statement.\n+\/\/ - statement: a use of the otherwise forbidden function.  Using a variadic\n+\/\/   tail allows the statement to contain non-nested commas.\n+\n+#ifndef FORBID_C_FUNCTION\n+#define FORBID_C_FUNCTION(signature, alternative)\n+#endif\n+\n+#ifndef ALLOW_C_FUNCTION\n+#define ALLOW_C_FUNCTION(name, ...) __VA_ARGS__\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,22 @@\n+#if (__GNUC__ >= 9) || (__clang_major__ >= 14)\n+\n+\/\/ Use \"warning\" attribute to detect uses of \"forbidden\" functions.\n+\/\/\n+\/\/ Note: _FORTIFY_SOURCE transforms calls to certain functions into calls to\n+\/\/ associated \"checking\" functions, and that transformation seems to occur\n+\/\/ *before* the attribute check.  We use fortification in fastdebug builds,\n+\/\/ so uses of functions that are both forbidden and fortified won't cause\n+\/\/ forbidden warnings in such builds.\n+#define FORBID_C_FUNCTION(signature, alternative) \\\n+  extern \"C\" __attribute__((__warning__(alternative))) signature;\n+\n+\/\/ Disable warning attribute over the scope of the affected statement.\n+\/\/ The name serves only to document the intended function.\n+#define ALLOW_C_FUNCTION(name, ...)                     \\\n+  PRAGMA_DIAG_PUSH                                      \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wattribute-warning\")     \\\n+  __VA_ARGS__                                           \\\n+  PRAGMA_DIAG_POP\n+\n+#endif \/\/ gcc9+ or clang14+\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,35 @@\n+\/\/ The Visual Studio implementation of FORBID_C_FUNCTION explicitly does\n+\/\/ nothing, because there doesn't seem to be a way to implement it for Visual\n+\/\/ Studio.  What seems the most likely approach is to use deprecation warnings,\n+\/\/ but that runs into problems.\n+\/\/\n+\/\/ (1) Declaring the function deprecated (using either __declspec(deprecated)\n+\/\/ or the C++14 [[deprecated]] attribute) fails with warnings like this:\n+\/\/   warning C4273: 'exit': inconsistent dll linkage\n+\/\/ It seems attributes are not simply additive with this compiler.\n+\/\/\n+\/\/ (2) Additionally adding __declspec(dllimport) to deal with (1) fails with\n+\/\/ warnings like this:\n+\/\/   error C2375: 'vsnprintf': redefinition; different linkage\n+\/\/ It seems some functions in the set of interest have different linkage than\n+\/\/ others (\"exit\" is marked imported while \"vsnprintf\" is not, for example).\n+\/\/ That makes it difficult to provide a generic macro.\n+\/\/\n+\/\/ (3) Using __pragma(deprecated(name)) fails with\n+\/\/   warning C4995: 'frobnicate': name was marked as #pragma deprecated\n+\/\/ for a *declaration* (not a use) of a 'frobnicate' function.\n+\/\/\n+\/\/ ALLOW_C_FUNCTIONS disables deprecation warnings over the statement scope.\n+\/\/ Some of the functions we're interested in allowing are conditionally\n+\/\/ deprecated on Windows, under the control of various preprocessor defines\n+\/\/ such as _CRT_SECURE_NO_WARNINGS.  Annotating vetted uses allows those\n+\/\/ warnings to catch unchecked uses.\n+\n+#define FORBID_C_FUNCTION(signature, alternative)\n+\n+#define ALLOW_C_FUNCTION(name, ...)             \\\n+  PRAGMA_DIAG_PUSH                              \\\n+  PRAGMA_DISABLE_MSVC_WARNING(4996)             \\\n+  __VA_ARGS__                                   \\\n+  PRAGMA_DIAG_POP\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_visCPP.hpp","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -159,0 +159,13 @@\n+\n+\/\/----------------------------------------------------------------------------------------------------\n+\/\/ Forbid the use of various C library functions.\n+\/\/ Some of these have os:: replacements that should normally be used instead.\n+\/\/ Others are considered security concerns, with preferred alternatives.\n+\n+FORBID_C_FUNCTION(void exit(int), \"use os::exit\");\n+FORBID_C_FUNCTION(void _exit(int), \"use os::exit\");\n+FORBID_C_FUNCTION(char* strerror(int), \"use os::strerror\");\n+FORBID_C_FUNCTION(char* strtok(char*, const char*), \"use strtok_r\");\n+FORBID_C_FUNCTION(int vsprintf(char*, const char*, va_list), \"use os::vsnprintf\");\n+FORBID_C_FUNCTION(int vsnprintf(char*, size_t, const char*, va_list), \"use os::vsnprintf\");\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -126,1 +127,1 @@\n-        exit(1);\n+        os::exit(1);\n@@ -248,1 +249,1 @@\n-    exit(1);\n+    os::exit(1);\n@@ -297,1 +298,1 @@\n-    exit(2);\n+    os::exit(2);\n@@ -326,1 +327,1 @@\n-    exit(2);\n+    os::exit(2);\n@@ -348,1 +349,1 @@\n-    exit(2);\n+    os::exit(2);\n@@ -353,1 +354,1 @@\n-    exit(2);\n+    os::exit(2);\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/os.hpp\"\n+\n+extern void gtest_exit_from_child_vm(int num);\n+\n+void gtest_exit_from_child_vm(int num) {\n+  os::exit(num);\n+}\n","filename":"test\/hotspot\/gtest\/unittest.cpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,3 @@\n+\/\/ Wrapper around os::exit so we don't need to include os.hpp here.\n+extern void gtest_exit_from_child_vm(int num);\n+\n@@ -97,1 +100,1 @@\n-    exit(0);                                                        \\\n+    gtest_exit_from_child_vm(0);                                    \\\n@@ -115,1 +118,1 @@\n-    exit(0);                                                        \\\n+    gtest_exit_from_child_vm(0);                                    \\\n@@ -137,1 +140,1 @@\n-    exit(0);                                                        \\\n+    gtest_exit_from_child_vm(0);                                    \\\n@@ -158,1 +161,1 @@\n-    exit(0);                                                        \\\n+    gtest_exit_from_child_vm(0);                                    \\\n@@ -164,1 +167,1 @@\n-                msg);                            \\\n+                msg);                                               \\\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}