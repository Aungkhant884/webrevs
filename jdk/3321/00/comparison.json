{"files":[{"patch":"@@ -37,0 +37,4 @@\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n@@ -72,1 +76,1 @@\n-    private boolean attached;\n+    private volatile boolean attached;\n@@ -141,55 +145,1 @@\n-\n-    interface WorkerThreadTask {\n-       public void doit(LinuxDebuggerLocal debugger) throws DebuggerException;\n-    }\n-\n-    class LinuxDebuggerLocalWorkerThread extends Thread {\n-       LinuxDebuggerLocal debugger;\n-       WorkerThreadTask task;\n-       DebuggerException lastException;\n-\n-       public LinuxDebuggerLocalWorkerThread(LinuxDebuggerLocal debugger) {\n-         this.debugger = debugger;\n-         setDaemon(true);\n-       }\n-\n-       public void run() {\n-          synchronized (workerThread) {\n-             for (;;) {\n-                if (task != null) {\n-                   lastException = null;\n-                   try {\n-                      task.doit(debugger);\n-                   } catch (DebuggerException exp) {\n-                      lastException = exp;\n-                   }\n-                   task = null;\n-                   workerThread.notifyAll();\n-                }\n-\n-                try {\n-                   workerThread.wait();\n-                } catch (InterruptedException x) {}\n-             }\n-          }\n-       }\n-\n-       public WorkerThreadTask execute(WorkerThreadTask task) throws DebuggerException {\n-          synchronized (workerThread) {\n-             this.task = task;\n-             workerThread.notifyAll();\n-             while (this.task != null) {\n-                try {\n-                   workerThread.wait();\n-                } catch (InterruptedException x) {}\n-             }\n-             if (lastException != null) {\n-                throw new DebuggerException(lastException.getMessage(), lastException);\n-             } else {\n-                return task;\n-             }\n-          }\n-       }\n-    }\n-\n-    private LinuxDebuggerLocalWorkerThread workerThread = null;\n+    private ExecutorService ptraceWorkerThreadPool;\n@@ -240,2 +190,1 @@\n-        workerThread = new LinuxDebuggerLocalWorkerThread(this);\n-        workerThread.start();\n+        ptraceWorkerThreadPool = null;\n@@ -333,8 +282,9 @@\n-        class AttachTask implements WorkerThreadTask {\n-           int pid;\n-           public void doit(LinuxDebuggerLocal debugger) {\n-              debugger.attach0(pid);\n-              debugger.attached = true;\n-              debugger.isCore = false;\n-              findABIVersion();\n-           }\n+        ptraceWorkerThreadPool = Executors.newSingleThreadExecutor();\n+        isCore = false;\n+        try {\n+            attached = ptraceWorkerThreadPool.submit(() -> {\n+                attach0(processID);\n+                findABIVersion();\n+            }, true).get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            throw new DebuggerException(e);\n@@ -342,4 +292,0 @@\n-\n-        AttachTask task = new AttachTask();\n-        task.pid = processID;\n-        workerThread.execute(task);\n@@ -354,1 +300,0 @@\n-        attached = true;\n@@ -357,0 +302,1 @@\n+        attached = true;\n@@ -360,1 +306,1 @@\n-    public synchronized boolean detach() {\n+    public boolean detach() {\n@@ -365,3 +311,0 @@\n-        threadList = null;\n-        loadObjectList = null;\n-\n@@ -370,2 +313,0 @@\n-            attached = false;\n-            return true;\n@@ -373,7 +314,6 @@\n-            class DetachTask implements WorkerThreadTask {\n-                boolean result = false;\n-\n-                public void doit(LinuxDebuggerLocal debugger) {\n-                    debugger.detach0();\n-                    debugger.attached = false;\n-                    result = true;\n+            try {\n+                boolean detach_succeeded = ptraceWorkerThreadPool.submit(this::detach0, true).get();\n+                if (detach_succeeded) {\n+                    ptraceWorkerThreadPool.shutdownNow();\n+                    ptraceWorkerThreadPool.awaitTermination(5, TimeUnit.SECONDS);\n+                    ptraceWorkerThreadPool = null;\n@@ -381,0 +321,2 @@\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new DebuggerException(e);\n@@ -382,4 +324,0 @@\n-\n-            DetachTask task = new DetachTask();\n-            workerThread.execute(task);\n-            return task.result;\n@@ -387,0 +325,5 @@\n+\n+        threadList = null;\n+        loadObjectList = null;\n+        attached = false;\n+        return true;\n@@ -431,1 +374,1 @@\n-    public synchronized Address lookup(String objectName, String symbol) {\n+    public Address lookup(String objectName, String symbol) {\n@@ -433,3 +376,0 @@\n-        if (!attached) {\n-            return null;\n-        }\n@@ -437,0 +377,1 @@\n+        long addr;\n@@ -438,2 +379,1 @@\n-            long addr = lookupByName0(objectName, symbol);\n-            return (addr == 0)? null : new LinuxAddress(this, handleGCC32ABI(addr, symbol));\n+            addr = lookupByName0(objectName, symbol);\n@@ -441,8 +381,5 @@\n-            class LookupByNameTask implements WorkerThreadTask {\n-                String objectName, symbol;\n-                Address result;\n-\n-                public void doit(LinuxDebuggerLocal debugger) {\n-                    long addr = debugger.lookupByName0(objectName, symbol);\n-                    result = (addr == 0 ? null : new LinuxAddress(debugger, handleGCC32ABI(addr, symbol)));\n-                }\n+            try {\n+                addr = ptraceWorkerThreadPool.submit(() -> lookupByName0(objectName, symbol))\n+                                             .get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new DebuggerException(e);\n@@ -450,6 +387,0 @@\n-\n-            LookupByNameTask task = new LookupByNameTask();\n-            task.objectName = objectName;\n-            task.symbol = symbol;\n-            workerThread.execute(task);\n-            return task.result;\n@@ -457,0 +388,1 @@\n+        return (addr == 0L) ? null : new LinuxAddress(this, handleGCC32ABI(addr, symbol));\n@@ -460,1 +392,1 @@\n-    public synchronized OopHandle lookupOop(String objectName, String symbol) {\n+    public OopHandle lookupOop(String objectName, String symbol) {\n@@ -533,1 +465,1 @@\n-    public synchronized long[] getThreadIntegerRegisterSet(int lwp_id)\n+    public long[] getThreadIntegerRegisterSet(int lwp_id)\n@@ -539,6 +471,5 @@\n-            class GetThreadIntegerRegisterSetTask implements WorkerThreadTask {\n-                int lwp_id;\n-                long[] result;\n-                public void doit(LinuxDebuggerLocal debugger) {\n-                    result = debugger.getThreadIntegerRegisterSet0(lwp_id);\n-                }\n+            try {\n+                return ptraceWorkerThreadPool.submit(() -> getThreadIntegerRegisterSet0(lwp_id))\n+                                             .get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new DebuggerException(e);\n@@ -546,5 +477,0 @@\n-\n-            GetThreadIntegerRegisterSetTask task = new GetThreadIntegerRegisterSetTask();\n-            task.lwp_id = lwp_id;\n-            workerThread.execute(task);\n-            return task.result;\n@@ -607,1 +533,1 @@\n-    public synchronized ClosestSymbol lookup(long addr) {\n+    public ClosestSymbol lookup(long addr) {\n@@ -610,1 +536,1 @@\n-          return lookupByAddress0(addr);\n+           return lookupByAddress0(addr);\n@@ -612,13 +538,6 @@\n-          class LookupByAddressTask implements WorkerThreadTask {\n-             long addr;\n-             ClosestSymbol result;\n-\n-             public void doit(LinuxDebuggerLocal debugger) {\n-                 result = debugger.lookupByAddress0(addr);\n-             }\n-          }\n-\n-          LookupByAddressTask task = new LookupByAddressTask();\n-          task.addr = addr;\n-          workerThread.execute(task);\n-          return task.result;\n+           try {\n+               return ptraceWorkerThreadPool.submit(() -> lookupByAddress0(addr))\n+                                            .get();\n+           } catch (InterruptedException | ExecutionException e) {\n+               throw new DebuggerException(e);\n+           }\n@@ -636,1 +555,1 @@\n-    public synchronized ReadResult readBytesFromProcess(long address,\n+    public ReadResult readBytesFromProcess(long address,\n@@ -639,0 +558,1 @@\n+        byte[] res;\n@@ -640,2 +560,1 @@\n-            byte[] res = readBytesFromProcess0(address, numBytes);\n-            return (res != null)? new ReadResult(res) : new ReadResult(address);\n+            res = readBytesFromProcess0(address, numBytes);\n@@ -643,10 +562,5 @@\n-            class ReadBytesFromProcessTask implements WorkerThreadTask {\n-                long address, numBytes;\n-                ReadResult result;\n-                public void doit(LinuxDebuggerLocal debugger) {\n-                    byte[] res = debugger.readBytesFromProcess0(address, numBytes);\n-                    if (res != null)\n-                        result = new ReadResult(res);\n-                    else\n-                        result = new ReadResult(address);\n-                }\n+            try {\n+                res = ptraceWorkerThreadPool.submit(() -> readBytesFromProcess0(address, numBytes))\n+                                            .get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new DebuggerException(e);\n@@ -654,6 +568,0 @@\n-\n-            ReadBytesFromProcessTask task = new ReadBytesFromProcessTask();\n-            task.address = address;\n-            task.numBytes = numBytes;\n-            workerThread.execute(task);\n-            return task.result;\n@@ -661,0 +569,1 @@\n+        return (res != null) ? new ReadResult(res) : new ReadResult(address);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxDebuggerLocal.java","additions":64,"deletions":155,"binary":false,"changes":219,"status":"modified"}]}