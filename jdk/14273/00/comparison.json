{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,1 @@\n+        this.signingRandom = null;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DSA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308474\n+ * @summary Test that calling initSign resets RNG\n+ * @run main SecureRandomReset\n+ *\/\n+\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.SecureRandom;\n+import java.security.Signature;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+\n+public class SecureRandomReset {\n+\n+    public static void main(String[] args) throws Exception {\n+        KeyPairGenerator g = KeyPairGenerator.getInstance(\"DSA\");\n+        PrivateKey sk = g.generateKeyPair().getPrivate();\n+        Signature s = Signature.getInstance(\"SHA256withDSA\");\n+\n+        \/\/ Initialize deterministic RNG and sign\n+        s.initSign(sk, deterministic());\n+        byte[] sig1 = s.sign();\n+\n+        \/\/ Re-initialize deterministic RNG and sign\n+        s.initSign(sk, deterministic());\n+        byte[] sig2 = s.sign();\n+\n+        if (!Arrays.equals(sig1,sig2)) {\n+            System.out.println(\"Expected equal signatures\");\n+            throw new RuntimeException(\"initSign not properly resetting RNG\");\n+        }\n+    }\n+\n+    static SecureRandom deterministic() {\n+        return new SecureRandom() {\n+            final Random r = new Random(0);\n+            @Override\n+            public void nextBytes(byte[] bytes) {\n+                r.nextBytes(bytes);\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/security\/provider\/DSA\/SecureRandomReset.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}