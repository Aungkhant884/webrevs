{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-  SA_CFLAGS := -D_WINDOWS -D_DEBUG -D_CONSOLE -D_MBCS -EHsc\n+  SA_CFLAGS := -D_WINDOWS -D_DEBUG -D_CONSOLE -EHsc\n@@ -68,1 +68,1 @@\n-    LDFLAGS := $(LDFLAGS_JDKLIB), \\\n+    LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \\\n@@ -70,0 +70,1 @@\n+    LIBS_unix := -ljava, \\\n@@ -73,1 +74,1 @@\n-    LIBS_windows := dbgeng.lib, \\\n+    LIBS_windows := dbgeng.lib $(WIN_JAVA_LIB), \\\n","filename":"make\/modules\/jdk.hotspot.agent\/Lib.gmk","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,1 @@\n+#include \"jni_util.h\"\n@@ -74,35 +75,0 @@\n-#ifdef _WINDOWS\n-static int getLastErrorString(char *buf, size_t len)\n-{\n-    long errval;\n-\n-    if ((errval = GetLastError()) != 0)\n-    {\n-      \/* DOS error *\/\n-      size_t n = (size_t)FormatMessage(\n-            FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,\n-            NULL,\n-            errval,\n-            0,\n-            buf,\n-            (DWORD)len,\n-            NULL);\n-      if (n > 3) {\n-        \/* Drop final '.', CR, LF *\/\n-        if (buf[n - 1] == '\\n') n--;\n-        if (buf[n - 1] == '\\r') n--;\n-        if (buf[n - 1] == '.') n--;\n-        buf[n] = '\\0';\n-      }\n-      return (int)n;\n-    }\n-\n-    if (errno != 0)\n-    {\n-      \/* C runtime error that has no corresponding DOS error code *\/\n-      strerror_s(buf, len, errno);\n-      return strlen(buf);\n-    }\n-    return 0;\n-}\n-#endif \/* _WINDOWS *\/\n@@ -177,4 +143,6 @@\n-    jclass eclass = (*env)->FindClass(env, \"sun\/jvm\/hotspot\/debugger\/DebuggerException\");\n-    if ((*env)->ExceptionOccurred(env)) {\n-      \/* Can't throw exception, probably OOM, so silently return 0 *\/\n-      return (jlong) 0;\n+    jstring s = JNU_NewStringPlatform(env, error_message);\n+    if (s != NULL) {\n+      jobject x = JNU_NewObjectByName(env, \"sun\/jvm\/hotspot\/debugger\/DebuggerException\", \"(Ljava\/lang\/String;)V\", s);\n+      if (x != NULL) {\n+        (*env)->Throw(env, x);\n+      }\n@@ -182,2 +150,0 @@\n-\n-    (*env)->ThrowNew(env, eclass, error_message);\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/sadis.c","additions":8,"deletions":42,"binary":false,"changes":50,"status":"modified"}]}