{"files":[{"patch":"@@ -224,1 +224,1 @@\n-    target |= val;\n+    target |= checked_cast<unsigned>(val);\n@@ -232,1 +232,1 @@\n-    unsigned uval = val;\n+    uint64_t uval = val;\n@@ -239,1 +239,1 @@\n-    target |= uval;\n+    target |= checked_cast<unsigned>(uval);\n@@ -265,1 +265,1 @@\n-    unsigned uval = val;\n+    uint64_t uval = val;\n@@ -268,1 +268,1 @@\n-    f(uval, lsb + nbits - 1, lsb);\n+    f(checked_cast<unsigned>(uval), lsb + nbits - 1, lsb);\n@@ -556,1 +556,1 @@\n-          i->f(offset() >> size, 21, 10);\n+          i->f(checked_cast<unsigned>(offset() >> size), 21, 10);\n@@ -656,1 +656,1 @@\n-      int sve_offset = offset \/ vl;\n+      int64_t sve_offset = offset \/ vl;\n@@ -2415,1 +2415,1 @@\n-      ld_st(Vt, T, a.base(), a.offset(), op1, op2, regs);\n+      ld_st(Vt, T, a.base(), checked_cast<int>(a.offset()), op1, op2, regs);\n@@ -3525,1 +3525,1 @@\n-      sve_ld_st1(Zt, a.base(), a.offset(), Pg, T, op1, type, imm_op2);\n+      sve_ld_st1(Zt, a.base(), checked_cast<int>(a.offset()), Pg, T, op1, type, imm_op2);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/collectedHeap.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"memory\/universe.hpp\"\n@@ -2437,1 +2437,1 @@\n-    intptr_t offs = (intptr_t)dst - (intptr_t)pc();\n+    int offs = checked_cast<int>((intptr_t)dst - (intptr_t)pc());\n@@ -2464,2 +2464,2 @@\n-    intptr_t dist = (intptr_t)entry - ((intptr_t)pc() + short_size);\n-    intptr_t delta = short_branch_delta();\n+    int dist = checked_cast<int>((intptr_t)entry - (intptr_t)(pc() + short_size));\n+    int delta = short_branch_delta();\n@@ -2469,1 +2469,1 @@\n-    assert(is8bit(dist), \"Dispacement too large for a short jmp at %s:%d\", file, line);\n+    assert(is8bit(dist), \"Displacement too large for a short jmp at %s:%d\", file, line);\n@@ -2471,1 +2471,1 @@\n-    intptr_t offs = (intptr_t)entry - (intptr_t)pc();\n+    int offs = checked_cast<int>((intptr_t)entry - (intptr_t)pc());\n@@ -2495,1 +2495,1 @@\n-    intptr_t offs = entry - pc();\n+    int offs = checked_cast<int>(entry - pc());\n@@ -2534,2 +2534,2 @@\n-    intptr_t dist = (intptr_t)entry - ((intptr_t)pc() + short_size);\n-    intptr_t delta = short_branch_delta();\n+    int dist = checked_cast<int>((intptr_t)entry - (intptr_t)(pc() + short_size));\n+    int delta = short_branch_delta();\n@@ -2539,1 +2539,1 @@\n-    assert(is8bit(dist), \"Dispacement too large for a short jmp at %s:%d\", file, line);\n+    assert(is8bit(dist), \"Displacement too large for a short jmp at %s:%d\", file, line);\n@@ -6382,1 +6382,1 @@\n-    intptr_t offset = entry - pc();\n+    int offset = checked_cast<int>(entry - pc());\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -293,0 +293,12 @@\n+  \/\/ sign-extended tolerant cast needed by callers of emit_int8 and emit_int16\n+  template <typename T>\n+  constexpr T narrow_cast(int x) const {\n+   if (x < 0) {\n+    assert(x > -(std::numeric_limits<T>::max() - 1), \"too negative\");\n+    return static_cast<T>(x);  \/\/ cut off sign bits\n+   } else {\n+     return checked_cast<T>(x);\n+   }\n+  }\n+\n+\n@@ -301,1 +313,3 @@\n-  void emit_int8(   uint8_t x1)                                     { code_section()->emit_int8(x1); }\n+  void emit_int8(       int x1)                                     { code_section()->emit_int8(narrow_cast<uint8_t>(x1)); }\n+\n+  void emit_int16(       int x)                                     { code_section()->emit_int16(narrow_cast<uint16_t>(x)); }\n@@ -303,2 +317,2 @@\n-  void emit_int16(  uint16_t x)                                     { code_section()->emit_int16(x); }\n-  void emit_int16(  uint8_t x1, uint8_t x2)                         { code_section()->emit_int16(x1, x2); }\n+  void emit_int16(      int x1,     int x2)                         { code_section()->emit_int16(narrow_cast<uint8_t>(x1),\n+                                                                                                 narrow_cast<uint8_t>(x2)); }\n@@ -306,1 +320,3 @@\n-  void emit_int24(  uint8_t x1, uint8_t x2, uint8_t x3)             { code_section()->emit_int24(x1, x2, x3); }\n+  void emit_int24(      int x1,     int x2,     int x3)             { code_section()->emit_int24(narrow_cast<uint8_t>(x1),\n+                                                                                                 narrow_cast<uint8_t>(x2),\n+                                                                                                 narrow_cast<uint8_t>(x3)); }\n@@ -309,1 +325,4 @@\n-  void emit_int32(  uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4) { code_section()->emit_int32(x1, x2, x3, x4); }\n+  void emit_int32(      int x1,     int x2,     int x3,     int x4) { code_section()->emit_int32(narrow_cast<uint8_t>(x1),\n+                                                                                                 narrow_cast<uint8_t>(x2),\n+                                                                                                 narrow_cast<uint8_t>(x3),\n+                                                                                                 narrow_cast<uint8_t>(x4)); }\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -78,2 +78,2 @@\n-    const int blob_len = end - begin;\n-    const int offset   = here - begin;\n+    const int blob_len = pointer_delta_as_int(end, begin);\n+    const int offset   = pointer_delta_as_int(here, begin);\n","filename":"src\/hotspot\/share\/compiler\/abstractDisassembler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}