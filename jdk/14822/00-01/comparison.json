{"files":[{"patch":"@@ -189,1 +189,1 @@\n-      CFLAGS_WARNINGS_ARE_ERRORS=\"-Werror\"\n+      CFLAGS_WARNINGS_ARE_ERRORS=\"\"\n@@ -194,1 +194,1 @@\n-          -Wtrampolines\"\n+          -Wtrampolines -Wconversion\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    target |= checked_cast<unsigned>(val);\n+    target |= (unsigned)val;\n@@ -239,1 +239,1 @@\n-    target |= checked_cast<unsigned>(uval);\n+    target |= (unsigned)uval;\n@@ -268,1 +268,1 @@\n-    f(checked_cast<unsigned>(uval), lsb + nbits - 1, lsb);\n+    f((unsigned)uval, lsb + nbits - 1, lsb);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -294,0 +294,2 @@\n+  \/\/ Some callers pass signed types that need to fit into the unsigned type so check\n+  \/\/ that the range is correct.\n@@ -297,1 +299,2 @@\n-    assert(x > -(std::numeric_limits<T>::max() - 1), \"too negative\");\n+    using stype = std::make_signed_t<T>;\n+    assert(x >= std::numeric_limits<stype>::min(), \"too negative\"); \/\/ >= -128 for 8 bits\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}