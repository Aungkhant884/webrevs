{"files":[{"patch":"@@ -167,3 +167,3 @@\n-void BitMap::verify_range(idx_t start, idx_t end) const {\n-  assert(start <= end,\n-         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, start, end);\n+void BitMap::verify_range(idx_t beg, idx_t end) const {\n+  assert(beg <= end,\n+         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, beg, end);\n@@ -178,2 +178,2 @@\n-void BitMap::set_range_within_word(idx_t start, idx_t end) {\n-  \/\/ With a valid range (start <= end), this test ensures that end != 0, as\n+void BitMap::set_range_within_word(idx_t beg, idx_t end) {\n+  \/\/ With a valid range (beg <= end), this test ensures that end != 0, as\n@@ -181,3 +181,3 @@\n-  if (start != end) {\n-    bm_word_t mask = inverted_bit_mask_for_range(start, end);\n-    *word_addr(start) |= ~mask;\n+  if (beg != end) {\n+    bm_word_t mask = inverted_bit_mask_for_range(beg, end);\n+    *word_addr(beg) |= ~mask;\n@@ -187,2 +187,2 @@\n-void BitMap::clear_range_within_word(idx_t start, idx_t end) {\n-  \/\/ With a valid range (start <= end), this test ensures that end != 0, as\n+void BitMap::clear_range_within_word(idx_t beg, idx_t end) {\n+  \/\/ With a valid range (beg <= end), this test ensures that end != 0, as\n@@ -190,3 +190,3 @@\n-  if (start != end) {\n-    bm_word_t mask = inverted_bit_mask_for_range(start, end);\n-    *word_addr(start) &= mask;\n+  if (beg != end) {\n+    bm_word_t mask = inverted_bit_mask_for_range(beg, end);\n+    *word_addr(beg) &= mask;\n@@ -196,1 +196,1 @@\n-void BitMap::par_put_range_within_word(idx_t start, idx_t end, bool value) {\n+void BitMap::par_put_range_within_word(idx_t beg, idx_t end, bool value) {\n@@ -198,1 +198,1 @@\n-  \/\/ With a valid range (start <= end), this test ensures that end != 0, as\n+  \/\/ With a valid range (beg <= end), this test ensures that end != 0, as\n@@ -200,2 +200,2 @@\n-  if (start != end) {\n-    volatile bm_word_t* pw = word_addr(start);\n+  if (beg != end) {\n+    volatile bm_word_t* pw = word_addr(beg);\n@@ -203,1 +203,1 @@\n-    bm_word_t mr = inverted_bit_mask_for_range(start, end);\n+    bm_word_t mr = inverted_bit_mask_for_range(beg, end);\n@@ -214,2 +214,2 @@\n-void BitMap::set_range(idx_t start, idx_t end) {\n-  verify_range(start, end);\n+void BitMap::set_range(idx_t beg, idx_t end) {\n+  verify_range(beg, end);\n@@ -217,1 +217,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -220,1 +220,1 @@\n-  if (start_full_word < end_full_word) {\n+  if (beg_full_word < end_full_word) {\n@@ -222,2 +222,2 @@\n-    set_range_within_word(start, bit_index(start_full_word));\n-    set_range_of_words(start_full_word, end_full_word);\n+    set_range_within_word(beg, bit_index(beg_full_word));\n+    set_range_of_words(beg_full_word, end_full_word);\n@@ -227,2 +227,2 @@\n-    idx_t boundary = MIN2(bit_index(start_full_word), end);\n-    set_range_within_word(start, boundary);\n+    idx_t boundary = MIN2(bit_index(beg_full_word), end);\n+    set_range_within_word(beg, boundary);\n@@ -233,2 +233,2 @@\n-void BitMap::clear_range(idx_t start, idx_t end) {\n-  verify_range(start, end);\n+void BitMap::clear_range(idx_t beg, idx_t end) {\n+  verify_range(beg, end);\n@@ -236,1 +236,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -239,1 +239,1 @@\n-  if (start_full_word < end_full_word) {\n+  if (beg_full_word < end_full_word) {\n@@ -241,2 +241,2 @@\n-    clear_range_within_word(start, bit_index(start_full_word));\n-    clear_range_of_words(start_full_word, end_full_word);\n+    clear_range_within_word(beg, bit_index(beg_full_word));\n+    clear_range_of_words(beg_full_word, end_full_word);\n@@ -246,2 +246,2 @@\n-    idx_t boundary = MIN2(bit_index(start_full_word), end);\n-    clear_range_within_word(start, boundary);\n+    idx_t boundary = MIN2(bit_index(beg_full_word), end);\n+    clear_range_within_word(beg, boundary);\n@@ -252,1 +252,1 @@\n-bool BitMap::is_small_range_of_words(idx_t start_full_word, idx_t end_full_word) {\n+bool BitMap::is_small_range_of_words(idx_t beg_full_word, idx_t end_full_word) {\n@@ -255,1 +255,1 @@\n-  \/\/ because start_full_word > end_full_word can occur when start and end are in\n+  \/\/ because beg_full_word > end_full_word can occur when beg and end are in\n@@ -259,1 +259,1 @@\n-  return start_full_word + small_range_words >= end_full_word;\n+  return beg_full_word + small_range_words >= end_full_word;\n@@ -262,2 +262,2 @@\n-void BitMap::set_large_range(idx_t start, idx_t end) {\n-  verify_range(start, end);\n+void BitMap::set_large_range(idx_t beg, idx_t end) {\n+  verify_range(beg, end);\n@@ -265,1 +265,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -268,2 +268,2 @@\n-  if (is_small_range_of_words(start_full_word, end_full_word)) {\n-    set_range(start, end);\n+  if (is_small_range_of_words(beg_full_word, end_full_word)) {\n+    set_range(beg, end);\n@@ -274,2 +274,2 @@\n-  set_range_within_word(start, bit_index(start_full_word));\n-  set_large_range_of_words(start_full_word, end_full_word);\n+  set_range_within_word(beg, bit_index(beg_full_word));\n+  set_large_range_of_words(beg_full_word, end_full_word);\n@@ -279,2 +279,2 @@\n-void BitMap::clear_large_range(idx_t start, idx_t end) {\n-  verify_range(start, end);\n+void BitMap::clear_large_range(idx_t beg, idx_t end) {\n+  verify_range(beg, end);\n@@ -282,1 +282,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -285,2 +285,2 @@\n-  if (is_small_range_of_words(start_full_word, end_full_word)) {\n-    clear_range(start, end);\n+  if (is_small_range_of_words(beg_full_word, end_full_word)) {\n+    clear_range(beg, end);\n@@ -291,2 +291,2 @@\n-  clear_range_within_word(start, bit_index(start_full_word));\n-  clear_large_range_of_words(start_full_word, end_full_word);\n+  clear_range_within_word(beg, bit_index(beg_full_word));\n+  clear_large_range_of_words(beg_full_word, end_full_word);\n@@ -323,1 +323,1 @@\n-void BitMap::at_put_range(idx_t start_offset, idx_t end_offset, bool value) {\n+void BitMap::at_put_range(idx_t beg_offset, idx_t end_offset, bool value) {\n@@ -325,1 +325,1 @@\n-    set_range(start_offset, end_offset);\n+    set_range(beg_offset, end_offset);\n@@ -327,1 +327,1 @@\n-    clear_range(start_offset, end_offset);\n+    clear_range(beg_offset, end_offset);\n@@ -331,2 +331,2 @@\n-void BitMap::par_at_put_range(idx_t start, idx_t end, bool value) {\n-  verify_range(start, end);\n+void BitMap::par_at_put_range(idx_t beg, idx_t end, bool value) {\n+  verify_range(beg, end);\n@@ -334,1 +334,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -337,1 +337,1 @@\n-  if (start_full_word < end_full_word) {\n+  if (beg_full_word < end_full_word) {\n@@ -339,1 +339,1 @@\n-    par_put_range_within_word(start, bit_index(start_full_word), value);\n+    par_put_range_within_word(beg, bit_index(beg_full_word), value);\n@@ -341,1 +341,1 @@\n-      set_range_of_words(start_full_word, end_full_word);\n+      set_range_of_words(beg_full_word, end_full_word);\n@@ -343,1 +343,1 @@\n-      clear_range_of_words(start_full_word, end_full_word);\n+      clear_range_of_words(beg_full_word, end_full_word);\n@@ -348,2 +348,2 @@\n-    idx_t boundary = MIN2(bit_index(start_full_word), end);\n-    par_put_range_within_word(start, boundary, value);\n+    idx_t boundary = MIN2(bit_index(beg_full_word), end);\n+    par_put_range_within_word(beg, boundary, value);\n@@ -355,1 +355,1 @@\n-void BitMap::at_put_large_range(idx_t start, idx_t end, bool value) {\n+void BitMap::at_put_large_range(idx_t beg, idx_t end, bool value) {\n@@ -357,1 +357,1 @@\n-    set_large_range(start, end);\n+    set_large_range(beg, end);\n@@ -359,1 +359,1 @@\n-    clear_large_range(start, end);\n+    clear_large_range(beg, end);\n@@ -363,2 +363,2 @@\n-void BitMap::par_at_put_large_range(idx_t start, idx_t end, bool value) {\n-  verify_range(start, end);\n+void BitMap::par_at_put_large_range(idx_t beg, idx_t end, bool value) {\n+  verify_range(beg, end);\n@@ -366,1 +366,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -369,2 +369,2 @@\n-  if (is_small_range_of_words(start_full_word, end_full_word)) {\n-    par_at_put_range(start, end, value);\n+  if (is_small_range_of_words(beg_full_word, end_full_word)) {\n+    par_at_put_range(beg, end, value);\n@@ -375,1 +375,1 @@\n-  par_put_range_within_word(start, bit_index(start_full_word), value);\n+  par_put_range_within_word(beg, bit_index(beg_full_word), value);\n@@ -377,1 +377,1 @@\n-    set_large_range_of_words(start_full_word, end_full_word);\n+    set_large_range_of_words(beg_full_word, end_full_word);\n@@ -379,1 +379,1 @@\n-    clear_large_range_of_words(start_full_word, end_full_word);\n+    clear_large_range_of_words(beg_full_word, end_full_word);\n@@ -596,1 +596,1 @@\n-BitMap::idx_t BitMap::count_one_bits_in_range_of_words(idx_t start_full_word, idx_t end_full_word) const {\n+BitMap::idx_t BitMap::count_one_bits_in_range_of_words(idx_t beg_full_word, idx_t end_full_word) const {\n@@ -598,1 +598,1 @@\n-  for (idx_t i = start_full_word; i < end_full_word; i++) {\n+  for (idx_t i = beg_full_word; i < end_full_word; i++) {\n@@ -605,5 +605,5 @@\n-BitMap::idx_t BitMap::count_one_bits_within_word(idx_t start, idx_t end) const {\n-  if (start != end) {\n-    assert(end > start, \"must be\");\n-    bm_word_t mask = ~inverted_bit_mask_for_range(start, end);\n-    bm_word_t w = *word_addr(start);\n+BitMap::idx_t BitMap::count_one_bits_within_word(idx_t beg, idx_t end) const {\n+  if (beg != end) {\n+    assert(end > beg, \"must be\");\n+    bm_word_t mask = ~inverted_bit_mask_for_range(beg, end);\n+    bm_word_t w = *word_addr(beg);\n@@ -620,3 +620,3 @@\n-\/\/ Returns the number of bits set within  [start, end).\n-BitMap::idx_t BitMap::count_one_bits(idx_t start, idx_t end) const {\n-  verify_range(start, end);\n+\/\/ Returns the number of bits set within  [beg, end).\n+BitMap::idx_t BitMap::count_one_bits(idx_t beg, idx_t end) const {\n+  verify_range(beg, end);\n@@ -624,1 +624,1 @@\n-  idx_t start_full_word = to_words_align_up(start);\n+  idx_t beg_full_word = to_words_align_up(beg);\n@@ -629,1 +629,1 @@\n-  if (start_full_word < end_full_word) {\n+  if (beg_full_word < end_full_word) {\n@@ -631,2 +631,2 @@\n-    sum += count_one_bits_within_word(start, bit_index(start_full_word));\n-    sum += count_one_bits_in_range_of_words(start_full_word, end_full_word);\n+    sum += count_one_bits_within_word(beg, bit_index(beg_full_word));\n+    sum += count_one_bits_in_range_of_words(beg_full_word, end_full_word);\n@@ -636,2 +636,2 @@\n-    idx_t boundary = MIN2(bit_index(start_full_word), end);\n-    sum += count_one_bits_within_word(start, boundary);\n+    idx_t boundary = MIN2(bit_index(beg_full_word), end);\n+    sum += count_one_bits_within_word(beg, boundary);\n@@ -641,1 +641,1 @@\n-  assert(sum <= (start - end), \"must be\");\n+  assert(sum <= (beg - end), \"must be\");\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":91,"deletions":91,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  inline idx_t get_next_bit_impl(idx_t start, idx_t end) const;\n+  inline idx_t get_next_bit_impl(idx_t beg, idx_t end) const;\n@@ -112,1 +112,1 @@\n-  static bool is_small_range_of_words(idx_t start_full_word, idx_t end_full_word);\n+  static bool is_small_range_of_words(idx_t beg_full_word, idx_t end_full_word);\n@@ -145,1 +145,1 @@\n-  \/\/ Utilities for ranges of bits.  Ranges are half-open [start, end).\n+  \/\/ Utilities for ranges of bits.  Ranges are half-open [beg, end).\n@@ -148,4 +148,4 @@\n-  bm_word_t inverted_bit_mask_for_range(idx_t start, idx_t end) const;\n-  void  set_range_within_word      (idx_t start, idx_t end);\n-  void  clear_range_within_word    (idx_t start, idx_t end);\n-  void  par_put_range_within_word  (idx_t start, idx_t end, bool value);\n+  bm_word_t inverted_bit_mask_for_range(idx_t beg, idx_t end) const;\n+  void  set_range_within_word      (idx_t beg, idx_t end);\n+  void  clear_range_within_word    (idx_t beg, idx_t end);\n+  void  par_put_range_within_word  (idx_t beg, idx_t end, bool value);\n@@ -154,4 +154,4 @@\n-  void      set_range_of_words         (idx_t start, idx_t end);\n-  void      clear_range_of_words       (idx_t start, idx_t end);\n-  void      set_large_range_of_words   (idx_t start, idx_t end);\n-  void      clear_large_range_of_words (idx_t start, idx_t end);\n+  void      set_range_of_words         (idx_t beg, idx_t end);\n+  void      clear_range_of_words       (idx_t beg, idx_t end);\n+  void      set_large_range_of_words   (idx_t beg, idx_t end);\n+  void      clear_large_range_of_words (idx_t beg, idx_t end);\n@@ -159,1 +159,1 @@\n-  static void clear_range_of_words(bm_word_t* map, idx_t start, idx_t end);\n+  static void clear_range_of_words(bm_word_t* map, idx_t beg, idx_t end);\n@@ -161,2 +161,2 @@\n-  idx_t count_one_bits_within_word(idx_t start, idx_t end) const;\n-  idx_t count_one_bits_in_range_of_words(idx_t start_full_word, idx_t end_full_word) const;\n+  idx_t count_one_bits_within_word(idx_t beg, idx_t end) const;\n+  idx_t count_one_bits_in_range_of_words(idx_t beg_full_word, idx_t end_full_word) const;\n@@ -218,9 +218,9 @@\n-  \/\/ Update a range of bits.  Ranges are half-open [start, end).\n-  void set_range   (idx_t start, idx_t end);\n-  void clear_range (idx_t start, idx_t end);\n-  void set_large_range   (idx_t start, idx_t end);\n-  void clear_large_range (idx_t start, idx_t end);\n-  void at_put_range(idx_t start, idx_t end, bool value);\n-  void par_at_put_range(idx_t start, idx_t end, bool value);\n-  void at_put_large_range(idx_t start, idx_t end, bool value);\n-  void par_at_put_large_range(idx_t start, idx_t end, bool value);\n+  \/\/ Update a range of bits.  Ranges are half-open [beg, end).\n+  void set_range   (idx_t beg, idx_t end);\n+  void clear_range (idx_t beg, idx_t end);\n+  void set_large_range   (idx_t beg, idx_t end);\n+  void clear_large_range (idx_t beg, idx_t end);\n+  void at_put_range(idx_t beg, idx_t end, bool value);\n+  void par_at_put_range(idx_t beg, idx_t end, bool value);\n+  void at_put_large_range(idx_t beg, idx_t end, bool value);\n+  void par_at_put_large_range(idx_t beg, idx_t end, bool value);\n@@ -231,4 +231,4 @@\n-  void set_range(idx_t start, idx_t end, RangeSizeHint hint);\n-  void clear_range(idx_t start, idx_t end, RangeSizeHint hint);\n-  void par_set_range(idx_t start, idx_t end, RangeSizeHint hint);\n-  void par_clear_range  (idx_t start, idx_t end, RangeSizeHint hint);\n+  void set_range(idx_t beg, idx_t end, RangeSizeHint hint);\n+  void clear_range(idx_t beg, idx_t end, RangeSizeHint hint);\n+  void par_set_range(idx_t beg, idx_t end, RangeSizeHint hint);\n+  void par_clear_range  (idx_t beg, idx_t end, RangeSizeHint hint);\n@@ -248,2 +248,2 @@\n-  \/\/ Verify [start,end) is a valid range, e.g. start <= end <= size().\n-  void verify_range(idx_t start, idx_t end) const NOT_DEBUG_RETURN;\n+  \/\/ Verify [beg,end) is a valid range, e.g. beg <= end <= size().\n+  void verify_range(idx_t beg, idx_t end) const NOT_DEBUG_RETURN;\n@@ -258,1 +258,1 @@\n-  \/\/ precondition: start and end form a valid range.\n+  \/\/ precondition: beg and end form a valid range.\n@@ -260,1 +260,1 @@\n-  bool iterate(BitMapClosureType* cl, idx_t start, idx_t end);\n+  bool iterate(BitMapClosureType* cl, idx_t beg, idx_t end);\n@@ -265,1 +265,1 @@\n-  \/\/ Looking for 1's and 0's at indices equal to or greater than \"start\",\n+  \/\/ Looking for 1's and 0's at indices equal to or greater than \"beg\",\n@@ -268,2 +268,2 @@\n-  idx_t get_next_one_offset (idx_t start, idx_t end) const;\n-  idx_t get_next_zero_offset(idx_t start, idx_t end) const;\n+  idx_t get_next_one_offset (idx_t beg, idx_t end) const;\n+  idx_t get_next_zero_offset(idx_t beg, idx_t end) const;\n@@ -280,1 +280,1 @@\n-  idx_t get_next_one_offset_aligned_right(idx_t start, idx_t end) const;\n+  idx_t get_next_one_offset_aligned_right(idx_t beg, idx_t end) const;\n@@ -285,2 +285,2 @@\n-  \/\/ Returns the number of bits set within  [start, end).\n-  idx_t count_one_bits(idx_t start, idx_t end) const;\n+  \/\/ Returns the number of bits set within  [beg, end).\n+  idx_t count_one_bits(idx_t beg, idx_t end) const;\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"}]}