{"files":[{"patch":"@@ -596,1 +596,0 @@\n-\n@@ -611,1 +610,3 @@\n-            keyChains.add(path);\n+            if (!keyChains.contains(path)) {\n+                keyChains.add(path);\n+            }\n@@ -685,21 +686,17 @@\n-                    List<String> args;\n-                    \/\/ runtime and Framework files will be signed below\n-                    \/\/ but they need to be unsigned first here\n-                    if ((p.toString().contains(\"\/Contents\/runtime\")) ||\n-                        (p.toString().contains(\"\/Contents\/Frameworks\"))) {\n-\n-                        args = new ArrayList<>();\n-                        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                                \"--remove-signature\", p.toString()));\n-                        try {\n-                            Set<PosixFilePermission> oldPermissions =\n-                                    Files.getPosixFilePermissions(p);\n-                            p.toFile().setWritable(true, true);\n-                            ProcessBuilder pb = new ProcessBuilder(args);\n-                            IOUtils.exec(pb);\n-                            Files.setPosixFilePermissions(p,oldPermissions);\n-                        } catch (IOException ioe) {\n-                            Log.verbose(ioe);\n-                            toThrow.set(ioe);\n-                            return;\n-                        }\n+                    \/\/ unsign everything before signing\n+                    List<String> args = new ArrayList<>();\n+                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                            \"--remove-signature\", p.toString()));\n+                    try {\n+                        Set<PosixFilePermission> oldPermissions =\n+                                Files.getPosixFilePermissions(p);\n+                        p.toFile().setWritable(true, true);\n+                        ProcessBuilder pb = new ProcessBuilder(args);\n+                        \/\/ run quietly\n+                        IOUtils.exec(pb, false, null, false,\n+                                Executor.INFINITE_TIMEOUT, true);\n+                        Files.setPosixFilePermissions(p,oldPermissions);\n+                    } catch (IOException ioe) {\n+                        Log.verbose(ioe);\n+                        toThrow.set(ioe);\n+                        return;\n@@ -730,1 +727,3 @@\n-                        IOUtils.exec(pb);\n+                        \/\/ run quietly\n+                        IOUtils.exec(pb, false, null, false,\n+                                Executor.INFINITE_TIMEOUT, true);\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -193,0 +193,7 @@\n+        exec(pb, testForPresenceOnly, consumer, writeOutputToFile,\n+                Executor.INFINITE_TIMEOUT, false);\n+    }\n+\n+    static void exec(ProcessBuilder pb, boolean testForPresenceOnly,\n+            PrintStream consumer, boolean writeOutputToFile,\n+            long timeout, boolean quiet) throws IOException {\n@@ -194,7 +201,10 @@\n-        Executor exec = Executor.of(pb).setWriteOutputToFile(writeOutputToFile)\n-                .setTimeout(timeout).setOutputConsumer(lines -> {\n-            lines.forEach(output::add);\n-            if (consumer != null) {\n-                output.forEach(consumer::println);\n-            }\n-        });\n+        Executor exec = Executor.of(pb)\n+                .setWriteOutputToFile(writeOutputToFile)\n+                .setTimeout(timeout)\n+                .setQuiet(quiet)\n+                .setOutputConsumer(lines -> {\n+                    lines.forEach(output::add);\n+                    if (consumer != null) {\n+                        output.forEach(consumer::println);\n+                    }\n+                });\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.jpackage.test.AdditionalLauncher;\n@@ -77,0 +78,18 @@\n+\n+    @Test\n+    public static void testAdditionalLauncher() throws Exception {\n+        SigningCheck.checkCertificates();\n+\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+        cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n+                SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n+                SigningBase.KEYCHAIN);\n+        AdditionalLauncher testAL = new AdditionalLauncher(\"testAL\");\n+        testAL.applyTo(cmd);\n+\n+        cmd.executeAndAssertHelloAppImageCreated();\n+        Path launcherPath = cmd.appLauncherPath();\n+        Path testALPath = launcherPath.getParent().resolve(\"testAL\");\n+        SigningBase.verifyCodesign(launcherPath, true);\n+        SigningBase.verifyCodesign(testALPath, true);\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}