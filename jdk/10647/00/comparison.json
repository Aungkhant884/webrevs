{"files":[{"patch":"@@ -244,4 +244,0 @@\n-double G1Analytics::predict_young_card_merge_to_scan_ratio() const {\n-  return predict_in_unit_interval(_young_card_merge_to_scan_ratio_seq);\n-}\n-\n@@ -250,1 +246,1 @@\n-    return (size_t)(rs_length * predict_young_card_merge_to_scan_ratio());\n+    return (size_t)(rs_length * predict_in_unit_interval(_young_card_merge_to_scan_ratio_seq));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,3 +142,0 @@\n-  double predict_young_card_merge_to_scan_ratio() const;\n-\n-  double predict_mixed_card_merge_to_scan_ratio() const;\n@@ -146,0 +143,2 @@\n+  \/\/ Predict how many of the given remembered set of length rs_length will add to\n+  \/\/ the number of total cards scanned.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Analytics.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1013,1 +1013,3 @@\n-  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase());\n+  \/\/ Assume that all cards from the log buffers will be scanned, i.e. there are no\n+  \/\/ duplicates in that set.\n+  size_t effective_scanned_cards = _analytics->predict_scan_card_num(rs_length, collector_state()->in_young_only_phase()) + pending_cards;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}