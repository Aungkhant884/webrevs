{"files":[{"patch":"@@ -29,0 +29,12 @@\n+G1BiasedMappedArrayBase::G1BiasedMappedArrayBase() :\n+  _alloc_base(NULL),\n+  _base(NULL),\n+  _length(0),\n+  _biased_base(NULL),\n+  _bias(0),\n+  _shift_by(0) { }\n+\n+G1BiasedMappedArrayBase::~G1BiasedMappedArrayBase() {\n+  FreeHeap(_alloc_base);\n+}\n+\n@@ -33,1 +45,1 @@\n-  return PaddedPrimitiveArray<u_char, mtGC>::create_unfreeable(length * elem_size);\n+  return PaddedPrimitiveArray<u_char, mtGC>::create(length * elem_size, &_alloc_base);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -35,1 +36,1 @@\n-class G1BiasedMappedArrayBase {\n+class G1BiasedMappedArrayBase : public CHeapObj<mtGC> {\n@@ -37,0 +38,3 @@\n+\n+  void* _alloc_base;      \/\/ the address the unpadded array has been allocated to\n+\n@@ -39,0 +43,1 @@\n+\n@@ -47,3 +52,1 @@\n-\n-  G1BiasedMappedArrayBase() : _base(NULL), _length(0), _biased_base(NULL),\n-    _bias(0), _shift_by(0) { }\n+  G1BiasedMappedArrayBase();\n@@ -52,1 +55,1 @@\n-  static address create_new_base_array(size_t length, size_t elem_size);\n+  address create_new_base_array(size_t length, size_t elem_size);\n@@ -93,2 +96,4 @@\n-   \/\/ Return the length of the array in elements.\n-   size_t length() const { return _length; }\n+  virtual ~G1BiasedMappedArrayBase();\n+\n+  \/\/ Return the length of the array in elements.\n+  size_t length() const { return _length; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+  static T* create(size_t length, void** alloc_base);\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -85,0 +85,6 @@\n+  void* temp;\n+  return create(length, &temp);\n+}\n+\n+template <class T, MEMFLAGS flags, size_t alignment>\n+T* PaddedPrimitiveArray<T, flags, alignment>::create(size_t length, void** alloc_base) {\n@@ -90,0 +96,1 @@\n+  *alloc_base = chunk;\n","filename":"src\/hotspot\/share\/memory\/padded.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}