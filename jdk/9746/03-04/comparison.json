{"files":[{"patch":"@@ -356,1 +356,1 @@\n-                    convert(componentAccessor, componentType);\/\/TODO - cast only when needed\n+                    convert(componentAccessor, componentType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+        runBoxed();\n@@ -134,0 +135,31 @@\n+    void runBoxed() {\n+        assertEquals(2, testBoxed(new Box(new Pair<>(\"1\", 1))));\n+        try {\n+            testBoxed(new Box((Pair<String, Integer>) (Object) new Pair<Integer, Integer>(1, 1)));\n+            fail(\"Expected an exception, but none happened!\");\n+        } catch (ClassCastException ex) {\n+            System.err.println(\"expected exception:\");\n+            ex.printStackTrace();\n+        }\n+        try {\n+            testBoxed(new Box(new Pair<String, Integer>(\"fail\", 1)));\n+            fail(\"Expected an exception, but none happened!\");\n+        } catch (MatchException ex) {\n+            assertEquals(TestPatternFailed.class.getName() + \": \" + EXCEPTION_MESSAGE,\n+                         ex.getMessage());\n+            if (ex.getCause() instanceof TestPatternFailed ex2) {\n+                System.err.println(\"expected exception:\");\n+                ex2.printStackTrace();\n+            } else {\n+                fail(\"Not the correct exception.\");\n+            }\n+        }\n+    }\n+\n+    int testBoxed(Object p) {\n+        return switch (p) {\n+            case Box(Pair<String, Integer>(String s, Integer i)) -> s.length() + i;\n+            case Object o -> -1;\n+        };\n+    }\n+\n@@ -148,0 +180,2 @@\n+    record Box(Pair<String, Integer> boxed) {}\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/TypedDeconstructionPatternExc.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}