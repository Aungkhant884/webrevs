{"files":[{"patch":"@@ -440,57 +440,0 @@\n-    \/**\n-     * Uses \"jcmd -l\" to search for a jvm pid. This function will wait\n-     * forever (until jtreg timeout) for the pid to be found.\n-     * @param key Regular expression to search for\n-     * @return The found pid.\n-     *\/\n-    public static int waitForJvmPid(String key) throws Throwable {\n-        final long iterationSleepMillis = 250;\n-        System.out.println(\"waitForJvmPid: Waiting for key '\" + key + \"'\");\n-        System.out.flush();\n-        while (true) {\n-            int pid = tryFindJvmPid(key);\n-            if (pid >= 0) {\n-                return pid;\n-            }\n-            Thread.sleep(iterationSleepMillis);\n-        }\n-    }\n-\n-    \/**\n-     * Searches for a jvm pid in the output from \"jcmd -l\".\n-     *\n-     * Example output from jcmd is:\n-     * 12498 sun.tools.jcmd.JCmd -l\n-     * 12254 \/tmp\/jdk8\/tl\/jdk\/JTwork\/classes\/com\/sun\/tools\/attach\/Application.jar\n-     *\n-     * @param key A regular expression to search for.\n-     * @return The found pid, or -1 if not found.\n-     * @throws Exception If multiple matching jvms are found.\n-     *\/\n-    public static int tryFindJvmPid(String key) throws Throwable {\n-        OutputAnalyzer output = null;\n-        try {\n-            JDKToolLauncher jcmdLauncher = JDKToolLauncher.create(\"jcmd\");\n-            jcmdLauncher.addToolArg(\"-l\");\n-            output = ProcessTools.executeProcess(jcmdLauncher.getCommand());\n-            output.shouldHaveExitValue(0);\n-\n-            \/\/ Search for a line starting with numbers (pid), follwed by the key.\n-            Pattern pattern = Pattern.compile(\"([0-9]+)\\\\s.*(\" + key + \").*\\\\r?\\\\n\");\n-            Matcher matcher = pattern.matcher(output.getStdout());\n-\n-            int pid = -1;\n-            if (matcher.find()) {\n-                pid = Integer.parseInt(matcher.group(1));\n-                System.out.println(\"findJvmPid.pid: \" + pid);\n-                if (matcher.find()) {\n-                    throw new Exception(\"Found multiple JVM pids for key: \" + key);\n-                }\n-            }\n-            return pid;\n-        } catch (Throwable t) {\n-            System.out.println(String.format(\"Utils.findJvmPid(%s) failed: %s\", key, t));\n-            throw t;\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"modified"}]}