{"files":[{"patch":"@@ -2456,1 +2456,1 @@\n-    cmpptr(rheapbase, ExternalAddress((address)CompressedOops::ptrs_base_addr()));\n+    cmpptr(rheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()));\n@@ -2590,1 +2590,1 @@\n-      lea(rheapbase, ExternalAddress((address)CompressedOops::ptrs_base_addr()));\n+      lea(rheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1356,1 +1356,1 @@\n-      la_patchable(xheapbase, ExternalAddress((address)CompressedOops::ptrs_base_addr()), offset);\n+      la_patchable(xheapbase, ExternalAddress(CompressedOops::ptrs_base_addr()), offset);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1258,6 +1258,6 @@\n-    if (adr.isxmmindex()) {\n-       emit_operand(reg, adr._base, adr._xmmindex, adr._scale, adr._disp, adr._rspec);\n-    } else {\n-       emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n-       adr._rspec);\n-    }\n+  if (adr.isxmmindex()) {\n+     emit_operand(reg, adr._base, adr._xmmindex, adr._scale, adr._disp, adr._rspec);\n+  } else {\n+     emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n+     adr._rspec);\n+  }\n@@ -12249,0 +12249,3 @@\n+  if (adr.is_lval()) {\n+    return false;\n+  }\n@@ -12254,0 +12257,3 @@\n+  if (adr.is_lval()) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -547,1 +547,1 @@\n-    __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_slowcase_cnt));\n+    __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_slowcase_cnt), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/c1_CodeStubs_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-      __ push_oop(const_opr->as_jobject());\n+      __ push_oop(const_opr->as_jobject(), rscratch1);\n@@ -472,1 +472,1 @@\n-    __ mov_metadata(Address(rsp, sizeof(void*)), method()->constant_encoding());\n+    __ mov_metadata(Address(rsp, sizeof(void*)), method()->constant_encoding(), noreg);\n@@ -506,1 +506,1 @@\n-  __ pushptr(here.addr());\n+  __ pushptr(here.addr(), rscratch1);\n@@ -694,1 +694,1 @@\n-      __ movoop(frame_map()->address_for_slot(dest->single_stack_ix()), c->as_jobject());\n+      __ movoop(frame_map()->address_for_slot(dest->single_stack_ix()), c->as_jobject(), rscratch1);\n@@ -701,1 +701,3 @@\n-                                            lo_word_offset_in_bytes), (intptr_t)c->as_jlong_bits());\n+                                              lo_word_offset_in_bytes),\n+                (intptr_t)c->as_jlong_bits(),\n+                rscratch1);\n@@ -749,1 +751,1 @@\n-          __ movoop(as_Address(addr, noreg), c->as_jobject());\n+          __ movoop(as_Address(addr, noreg), c->as_jobject(), rscratch1);\n@@ -762,1 +764,1 @@\n-          __ movoop(as_Address(addr), c->as_jobject());\n+          __ movoop(as_Address(addr), c->as_jobject(), noreg);\n@@ -1787,1 +1789,1 @@\n-        __ pushklass(k->constant_encoding());\n+        __ pushklass(k->constant_encoding(), noreg);\n@@ -2435,1 +2437,2 @@\n-                     ExternalAddress((address)double_signmask_pool));\n+                     ExternalAddress((address)double_signmask_pool),\n+                     rscratch1);\n@@ -2676,1 +2679,1 @@\n-          __ cmpoop(reg1, o);\n+          __ cmpoop(reg1, o, rscratch1);\n@@ -3038,1 +3041,1 @@\n-void LIR_Assembler::store_parameter(jobject o,  int offset_from_rsp_in_words) {\n+void LIR_Assembler::store_parameter(jobject o, int offset_from_rsp_in_words) {\n@@ -3042,1 +3045,1 @@\n-  __ movoop (Address(rsp, offset_from_rsp_in_bytes), o);\n+  __ movoop(Address(rsp, offset_from_rsp_in_bytes), o, rscratch1);\n@@ -3046,1 +3049,1 @@\n-void LIR_Assembler::store_parameter(Metadata* m,  int offset_from_rsp_in_words) {\n+void LIR_Assembler::store_parameter(Metadata* m, int offset_from_rsp_in_words) {\n@@ -3050,1 +3053,1 @@\n-  __ mov_metadata(Address(rsp, offset_from_rsp_in_bytes), m);\n+  __ mov_metadata(Address(rsp, offset_from_rsp_in_bytes), m, rscratch1);\n@@ -3112,1 +3115,1 @@\n-      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt));\n+      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt), rscratch1);\n@@ -3121,1 +3124,1 @@\n-      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt));\n+      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt), rscratch1);\n@@ -3135,1 +3138,1 @@\n-      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt));\n+      __ incrementl(ExternalAddress((address)&Runtime1::_generic_arraycopystub_cnt), rscratch1);\n@@ -3368,1 +3371,1 @@\n-          __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_cnt));\n+          __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_cnt), rscratch1);\n@@ -3378,1 +3381,1 @@\n-          __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_attempt_cnt));\n+          __ incrementl(ExternalAddress((address)&Runtime1::_arraycopy_checkcast_attempt_cnt), rscratch1);\n@@ -3587,1 +3590,1 @@\n-          __ mov_metadata(recv_addr, known_klass->constant_encoding());\n+          __ mov_metadata(recv_addr, known_klass->constant_encoding(), rscratch1);\n@@ -3819,1 +3822,2 @@\n-               ExternalAddress((address)float_signflip_pool));\n+               ExternalAddress((address)float_signflip_pool),\n+               rscratch1);\n@@ -3836,1 +3840,2 @@\n-               ExternalAddress((address)double_signflip_pool));\n+               ExternalAddress((address)double_signflip_pool),\n+               rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -40,2 +40,1 @@\n-  \/\/ When we need to use something other than rscratch1 use this\n-  \/\/ method.\n+  \/\/ When we need to use something other than rscratch1 use this method.\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  const Register rklass_decode_tmp = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n@@ -58,1 +57,1 @@\n-    load_klass(hdr, obj, rklass_decode_tmp);\n+    load_klass(hdr, obj, rscratch1);\n@@ -149,1 +148,0 @@\n-  Register tmp_encode_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n@@ -154,1 +152,1 @@\n-    encode_klass_not_null(t1, tmp_encode_klass);\n+    encode_klass_not_null(t1, rscratch1);\n@@ -289,1 +287,0 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch2) NOT_LP64(noreg);\n@@ -292,1 +289,1 @@\n-    load_klass(rscratch1, receiver, tmp_load_klass);\n+    load_klass(rscratch1, receiver, rscratch2);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-  void push_oop  (jobject o)  { _rsp_offset++; pushoop(o); }\n@@ -107,0 +106,2 @@\n+  void push_oop  (jobject o, Register rscratch) { _rsp_offset++; pushoop(o, rscratch); }\n+\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    set_last_Java_frame(thread, noreg, rbp, NULL);\n+    set_last_Java_frame(thread, noreg, rbp, NULL, rscratch1);\n@@ -84,1 +84,1 @@\n-    set_last_Java_frame(thread, noreg, rbp, the_pc);\n+    set_last_Java_frame(thread, noreg, rbp, the_pc, rscratch1);\n@@ -889,1 +889,1 @@\n-  __ set_last_Java_frame(thread, noreg, rbp, NULL);\n+  __ set_last_Java_frame(thread, noreg, rbp, NULL, rscratch1);\n@@ -1150,1 +1150,0 @@\n-        Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n@@ -1152,1 +1151,1 @@\n-        __ load_klass(t, rax, tmp_load_klass);\n+        __ load_klass(t, rax, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1652,0 +1652,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1665,1 +1667,1 @@\n-        vpbroadcastq(dst, src, vlen_enc, noreg);\n+        vpbroadcastq(dst, src, vlen_enc);\n@@ -1667,1 +1669,1 @@\n-        vmovddup(dst, src, vlen_enc, noreg);\n+        vmovddup(dst, src, vlen_enc);\n@@ -1673,1 +1675,1 @@\n-        vmovddup(dst, src, vlen_enc, noreg);\n+        vmovddup(dst, src, vlen_enc);\n@@ -1677,1 +1679,1 @@\n-        vpbroadcastd(dst, src, vlen_enc, noreg);\n+        vpbroadcastd(dst, src, vlen_enc);\n@@ -1679,1 +1681,1 @@\n-        vbroadcastss(dst, src, vlen_enc, noreg);\n+        vbroadcastss(dst, src, vlen_enc);\n@@ -2398,2 +2400,2 @@\n-void C2_MacroAssembler::evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral adr, int comparison, int vector_len, Register rscratch) {\n-  assert(rscratch != noreg || always_reachable(adr), \"missing\");\n+void C2_MacroAssembler::evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral src2, int comparison, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src2), \"missing\");\n@@ -2404,1 +2406,1 @@\n-      evpcmpb(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpb(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2408,1 +2410,1 @@\n-      evpcmpw(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpw(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2412,1 +2414,1 @@\n-      evpcmpd(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpd(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -2416,1 +2418,1 @@\n-      evpcmpq(kdmask, ksmask, src1, adr, comparison, \/*signed*\/ true, vector_len, rscratch);\n+      evpcmpq(kdmask, ksmask, src1, src2, comparison, \/*signed*\/ true, vector_len, rscratch);\n@@ -4360,4 +4362,3 @@\n-void C2_MacroAssembler::vector_cast_float_special_cases_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                                            XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n-                                                            Register scratch, AddressLiteral float_sign_flip,\n-                                                            int vec_enc) {\n+void C2_MacroAssembler::vector_cast_float_special_cases_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                                            XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n+                                                            Register rscratch) {\n@@ -4365,1 +4366,1 @@\n-  vmovdqu(xtmp1, float_sign_flip, vec_enc, scratch);\n+  vmovdqu(xtmp1, float_sign_flip, vec_enc, rscratch);\n@@ -4389,4 +4390,4 @@\n-void C2_MacroAssembler::vector_cast_float_special_cases_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                                             XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n-                                                             Register scratch, AddressLiteral float_sign_flip,\n-                                                             int vec_enc) {\n+void C2_MacroAssembler::vector_cast_float_special_cases_evex(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                                             XMMRegister xtmp1, XMMRegister xtmp2,\n+                                                             KRegister ktmp1, KRegister ktmp2,\n+                                                             Register rscratch) {\n@@ -4394,1 +4395,1 @@\n-  evmovdqul(xtmp1, k0, float_sign_flip, false, vec_enc, scratch);\n+  evmovdqul(xtmp1, k0, float_sign_flip, false, vec_enc, rscratch);\n@@ -4410,5 +4411,7 @@\n-void C2_MacroAssembler::vector_cast_float_to_long_special_cases_evex(\n-                                                             XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                                             XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n-                                                             Register scratch, AddressLiteral double_sign_flip,\n-                                                             int vec_enc) {\n+void C2_MacroAssembler::vector_cast_float_to_long_special_cases_evex(XMMRegister dst, XMMRegister src,\n+                                                                     AddressLiteral double_sign_flip, int vec_enc,\n+                                                                     XMMRegister xtmp1, XMMRegister xtmp2,\n+                                                                     KRegister ktmp1, KRegister ktmp2,\n+                                                                     Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4416,1 +4419,1 @@\n-  evmovdquq(xtmp1, k0, double_sign_flip, false, vec_enc, scratch);\n+  evmovdquq(xtmp1, k0, double_sign_flip, false, vec_enc, rscratch);\n@@ -4440,4 +4443,6 @@\n-void C2_MacroAssembler::vector_cast_double_special_cases_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                                              XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n-                                                              Register scratch, AddressLiteral double_sign_flip,\n-                                                              int vec_enc) {\n+void C2_MacroAssembler::vector_cast_double_special_cases_evex(XMMRegister dst, XMMRegister src,\n+                                                              AddressLiteral double_sign_flip, int vec_enc,\n+                                                              XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n+                                                              Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4445,1 +4450,1 @@\n-  evmovdqul(xtmp1, k0, double_sign_flip, false, vec_enc, scratch);\n+  evmovdqul(xtmp1, k0, double_sign_flip, false, vec_enc, rscratch);\n@@ -4471,3 +4476,4 @@\n-void C2_MacroAssembler::vector_castD2L_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                            KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                            Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_castD2L_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n@@ -4475,1 +4481,2 @@\n-  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  vector_cast_double_special_cases_evex(dst, src, double_sign_flip, vec_enc,\n+                                        xtmp1, xtmp2, ktmp1, ktmp2, rscratch);\n@@ -4478,3 +4485,4 @@\n-void C2_MacroAssembler::vector_castF2I_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                           XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n-                                           AddressLiteral float_sign_flip, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_castF2I_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                           XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n+\n@@ -4482,1 +4490,2 @@\n-  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, scratch, float_sign_flip, vec_enc);\n+  vector_cast_float_special_cases_avx(dst, src, float_sign_flip, vec_enc,\n+                                      xtmp1, xtmp2, xtmp3, xtmp4, rscratch);\n@@ -4485,3 +4494,4 @@\n-void C2_MacroAssembler::vector_castF2I_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                            KRegister ktmp1, KRegister ktmp2, AddressLiteral float_sign_flip,\n-                                            Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_castF2I_evex(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n+\n@@ -4489,1 +4499,2 @@\n-  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, float_sign_flip, vec_enc);\n+  vector_cast_float_special_cases_evex(dst, src, float_sign_flip, vec_enc,\n+                                       xtmp1, xtmp2, ktmp1, ktmp2, rscratch);\n@@ -4492,3 +4503,4 @@\n-void C2_MacroAssembler::vector_castF2L_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                            KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                            Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_castF2L_evex(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(float_sign_flip), \"missing\");\n+\n@@ -4496,1 +4508,2 @@\n-  vector_cast_float_to_long_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n+  vector_cast_float_to_long_special_cases_evex(dst, src, float_sign_flip, vec_enc,\n+                                               xtmp1, xtmp2, ktmp1, ktmp2, rscratch);\n@@ -4499,4 +4512,6 @@\n-void C2_MacroAssembler::vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                            XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n-                                            AddressLiteral double_sign_flip, Register scratch, int vec_enc) {\n-  vector_castD2L_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, double_sign_flip, scratch, vec_enc);\n+void C2_MacroAssembler::vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(double_sign_flip), \"missing\");\n+\n+  vector_castD2L_evex(dst, src, double_sign_flip, vec_enc,\n+                      xtmp1, xtmp2, ktmp1, ktmp2, rscratch);\n@@ -4522,3 +4537,3 @@\n-void C2_MacroAssembler::vector_round_double_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                 KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                                 AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_double_evex(XMMRegister dst, XMMRegister src,\n+                                                 AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                                 Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2) {\n@@ -4527,4 +4542,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  mov64(scratch, julong_cast(0.5L));\n-  evpbroadcastq(xtmp1, scratch, vec_enc);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  mov64(tmp, julong_cast(0.5L));\n+  evpbroadcastq(xtmp1, tmp, vec_enc);\n@@ -4533,2 +4548,4 @@\n-  vector_cast_double_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, double_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+  vector_cast_double_special_cases_evex(dst, src, double_sign_flip, vec_enc,\n+                                        xtmp1, xtmp2, ktmp1, ktmp2, tmp);\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4537,3 +4554,3 @@\n-void C2_MacroAssembler::vector_round_float_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                                KRegister ktmp1, KRegister ktmp2, AddressLiteral float_sign_flip,\n-                                                AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_float_evex(XMMRegister dst, XMMRegister src,\n+                                                AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                                Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2) {\n@@ -4542,4 +4559,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  movl(scratch, jint_cast(0.5));\n-  movq(xtmp1, scratch);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  movl(tmp, jint_cast(0.5));\n+  movq(xtmp1, tmp);\n@@ -4549,2 +4566,4 @@\n-  vector_cast_float_special_cases_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, scratch, float_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+  vector_cast_float_special_cases_evex(dst, src, float_sign_flip, vec_enc,\n+                                       xtmp1, xtmp2, ktmp1, ktmp2, tmp);\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4553,3 +4572,3 @@\n-void C2_MacroAssembler::vector_round_float_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                               XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n-                                               AddressLiteral new_mxcsr, Register scratch, int vec_enc) {\n+void C2_MacroAssembler::vector_round_float_avx(XMMRegister dst, XMMRegister src,\n+                                               AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                               Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4) {\n@@ -4558,4 +4577,4 @@\n-  ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-  ldmxcsr(new_mxcsr, scratch);\n-  movl(scratch, jint_cast(0.5));\n-  movq(xtmp1, scratch);\n+  ldmxcsr(new_mxcsr, tmp \/*rscratch*\/);\n+\n+  movl(tmp, jint_cast(0.5));\n+  movq(xtmp1, tmp);\n@@ -4565,2 +4584,4 @@\n-  vector_cast_float_special_cases_avx(dst, src, xtmp1, xtmp2, xtmp3, xtmp4, scratch, float_sign_flip, vec_enc);\n-  ldmxcsr(mxcsr_std, scratch);\n+  vector_cast_float_special_cases_avx(dst, src, float_sign_flip, vec_enc,\n+                                      xtmp1, xtmp2, xtmp3, xtmp4, tmp);\n+\n+  ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), tmp \/*rscratch*\/);\n@@ -4568,1 +4589,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -5128,2 +5149,5 @@\n-void C2_MacroAssembler::vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src,\n-                                                XMMRegister xtmp, AddressLiteral mask, Register rtmp, int vec_enc) {\n+void C2_MacroAssembler::vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, AddressLiteral mask, int vec_enc,\n+                                                XMMRegister xtmp, Register rscratch) {\n+  assert(VM_Version::supports_gfni(), \"\");\n+  assert(rscratch != noreg || always_reachable(mask), \"missing\");\n+\n@@ -5132,2 +5156,1 @@\n-  assert(VM_Version::supports_gfni(), \"\");\n-  vpbroadcastq(xtmp, mask, vec_enc, rtmp);\n+  vpbroadcastq(xtmp, mask, vec_enc, rscratch);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":107,"deletions":84,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -151,2 +151,2 @@\n-  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral adr, int comparison, int vector_len, Register rscratch = rscratch1);\n-  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, XMMRegister src2, int comparison, int vector_len);\n+  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, XMMRegister    src2, int comparison, int vector_len);\n+  void evpcmp(BasicType typ, KRegister kdmask, KRegister ksmask, XMMRegister src1, AddressLiteral src2, int comparison, int vector_len, Register rscratch = noreg);\n@@ -155,0 +155,3 @@\n+  void load_vector(XMMRegister dst, Address        src, int vlen_in_bytes);\n+  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = noreg);\n+\n@@ -156,1 +159,1 @@\n-  void load_vector_mask(KRegister dst, XMMRegister src, XMMRegister xtmp, bool novlbwdq, int vlen_enc);\n+  void load_vector_mask(KRegister   dst, XMMRegister src, XMMRegister xtmp, bool novlbwdq, int vlen_enc);\n@@ -158,2 +161,0 @@\n-  void load_vector(XMMRegister dst, Address src, int vlen_in_bytes);\n-  void load_vector(XMMRegister dst, AddressLiteral src, int vlen_in_bytes, Register rscratch = rscratch1);\n@@ -310,3 +311,2 @@\n-  void vector_castF2I_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                          XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n-                          AddressLiteral float_sign_flip, Register scratch, int vec_enc);\n+  void vector_castF2I_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                          XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4, Register rscratch = noreg);\n@@ -314,3 +314,2 @@\n-  void vector_castF2I_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                           KRegister ktmp1, KRegister ktmp2, AddressLiteral float_sign_flip,\n-                           Register scratch, int vec_enc);\n+  void vector_castF2I_evex(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                           XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg);\n@@ -318,3 +317,2 @@\n-  void vector_castF2L_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                           KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                           Register scratch, int vec_enc);\n+  void vector_castF2L_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                           XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg);\n@@ -322,3 +320,2 @@\n-  void vector_castD2L_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                           KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                           Register scratch, int vec_enc);\n+  void vector_castD2L_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                           XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg );\n@@ -326,3 +323,2 @@\n-  void vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                           XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                           Register scratch, int vec_enc);\n+  void vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                           XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg);\n@@ -330,2 +326,1 @@\n-  void vector_unsigned_cast(XMMRegister dst, XMMRegister src, int vlen_enc,\n-                            BasicType from_elem_bt, BasicType to_elem_bt);\n+  void vector_unsigned_cast(XMMRegister dst, XMMRegister src, int vlen_enc, BasicType from_elem_bt, BasicType to_elem_bt);\n@@ -333,3 +328,2 @@\n-  void vector_cast_double_special_cases_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                             KRegister ktmp1, KRegister ktmp2, Register scratch, AddressLiteral double_sign_flip,\n-                                             int vec_enc);\n+  void vector_cast_double_special_cases_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg );\n@@ -337,3 +331,2 @@\n-  void vector_cast_float_special_cases_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                            KRegister ktmp1, KRegister ktmp2, Register scratch, AddressLiteral float_sign_flip,\n-                                            int vec_enc);\n+  void vector_cast_float_special_cases_evex(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                            XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, Register rscratch = noreg);\n@@ -341,4 +334,3 @@\n-  void vector_cast_float_to_long_special_cases_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                                    XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n-                                                    Register scratch, AddressLiteral double_sign_flip,\n-                                                    int vec_enc);\n+  void vector_cast_float_to_long_special_cases_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, int vec_enc,\n+                                                    XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n+                                                    Register rscratch = noreg);\n@@ -346,4 +338,3 @@\n-  void vector_cast_float_special_cases_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                           XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n-                                           Register scratch, AddressLiteral float_sign_flip,\n-                                           int vec_enc);\n+  void vector_cast_float_special_cases_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, int vec_enc,\n+                                           XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4,\n+                                           Register rscratch = noreg);\n@@ -352,3 +343,2 @@\n-  void vector_round_double_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                                KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                                AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n+  void vector_round_double_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                                Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2);\n@@ -356,3 +346,2 @@\n-  void vector_round_float_evex(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                               KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n-                               AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n+  void vector_round_float_evex(XMMRegister dst, XMMRegister src, AddressLiteral double_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                               Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2);\n@@ -360,4 +349,3 @@\n-  void vector_round_float_avx(XMMRegister dst, XMMRegister src, XMMRegister xtmp1, XMMRegister xtmp2,\n-                              XMMRegister xtmp3, XMMRegister xtmp4, AddressLiteral float_sign_flip,\n-                              AddressLiteral new_mxcsr, Register scratch, int vec_enc);\n-#endif\n+  void vector_round_float_avx(XMMRegister dst, XMMRegister src, AddressLiteral float_sign_flip, AddressLiteral new_mxcsr, int vec_enc,\n+                              Register tmp, XMMRegister xtmp1, XMMRegister xtmp2, XMMRegister xtmp3, XMMRegister xtmp4);\n+#endif \/\/ _LP64\n@@ -388,2 +376,2 @@\n-  void vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp,\n-                               AddressLiteral mask, Register rtmp, int vec_enc);\n+  void vector_reverse_bit_gfni(BasicType bt, XMMRegister dst, XMMRegister src, AddressLiteral mask, int vec_enc,\n+                               XMMRegister xtmp, Register rscratch = noreg);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":36,"deletions":48,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  __ set_last_Java_frame(rsp, rbp, (address)the_pc);\n+  __ set_last_Java_frame(rsp, rbp, (address)the_pc, rscratch1);\n@@ -249,1 +249,1 @@\n-  __ restore_cpu_control_state_after_jni();\n+  __ restore_cpu_control_state_after_jni(rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -334,6 +334,3 @@\n-#ifdef _LP64\n-  Register tmp1 = rscratch1;\n-  Register tmp2 = rscratch2;\n-#else\n-  Register tmp1 = rax;\n-  Register tmp2 = rcx;\n+  Register tmp1 = LP64_ONLY( rscratch1 ) NOT_LP64( rax );\n+  Register tmp2 = LP64_ONLY( rscratch2 ) NOT_LP64( rcx );\n+#ifndef _LP64\n@@ -342,1 +339,1 @@\n-#endif \/\/ _LP64\n+#endif \/\/ !_LP64\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    card_addr = __ as_Address(ArrayAddress(cardtable, index));\n+    card_addr = __ as_Address(ArrayAddress(cardtable, index), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  load_klass(obj, obj, tmp_load_klass);\n+  load_klass(obj, obj, rscratch1);\n@@ -883,1 +882,1 @@\n-    jump(dispatch_addr);\n+    jump(dispatch_addr, noreg);\n@@ -889,1 +888,1 @@\n-    jump(dispatch_addr);\n+    jump(dispatch_addr, noreg);\n@@ -1006,1 +1005,1 @@\n-  set_last_Java_frame(rthread, noreg, rbp, (address)pc());\n+  set_last_Java_frame(rthread, noreg, rbp, (address)pc(), rscratch1);\n@@ -1210,1 +1209,1 @@\n-    const Register rklass_decode_tmp = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n+    const Register rklass_decode_tmp = rscratch1;\n@@ -2015,1 +2014,1 @@\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+    SkipIfEqual skip(this, &DTraceMethodProbes, false, rscratch1);\n@@ -2060,1 +2059,1 @@\n-    SkipIfEqual skip(this, &DTraceMethodProbes, false);\n+    SkipIfEqual skip(this, &DTraceMethodProbes, false, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-\/\/ Warning: do not use rip relative addressing after the first counter load\n-\/\/ since that may scratch r10!\n-\n@@ -80,4 +77,3 @@\n-    \/\/ Check to see if a field access watch has been set before we\n-    \/\/ take the fast path.\n-    assert_different_registers(rscratch1, robj, rcounter); \/\/ cmp32 clobbers rscratch1!\n-    __ cmp32(ExternalAddress((address) JvmtiExport::get_field_access_count_addr()), 0);\n+    \/\/ Check to see if a field access watch has been set before we take the fast path.\n+    assert_different_registers(rscratch1, robj, rcounter);\n+    __ cmp32(ExternalAddress(JvmtiExport::get_field_access_count_addr()), 0, rscratch1);\n@@ -107,1 +103,1 @@\n-  __ cmp32 (rcounter, counter);\n+  __ cmp32 (rcounter, counter, rscratch1);\n@@ -125,1 +121,1 @@\n-  __ jump (ExternalAddress(slow_case_addr));\n+  __ jump (ExternalAddress(slow_case_addr), rscratch1);\n@@ -180,1 +176,1 @@\n-    __ cmp32(ExternalAddress((address) JvmtiExport::get_field_access_count_addr()), 0);\n+    __ cmp32(ExternalAddress(JvmtiExport::get_field_access_count_addr()), 0, rscratch1);\n@@ -199,1 +195,1 @@\n-  __ cmp32 (rcounter, counter);\n+  __ cmp32 (rcounter, counter, rscratch1);\n@@ -213,1 +209,1 @@\n-  __ jump (ExternalAddress(slow_case_addr));\n+  __ jump (ExternalAddress(slow_case_addr), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/jniFastGetField_x86_64.cpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -105,1 +105,2 @@\n-Address MacroAssembler::as_Address(ArrayAddress adr) {\n+Address MacroAssembler::as_Address(ArrayAddress adr, Register rscratch) {\n+  assert(rscratch == noreg, \"\");\n@@ -128,1 +129,2 @@\n-void MacroAssembler::cmpoop(Register src1, jobject obj) {\n+void MacroAssembler::cmpoop(Register src1, jobject obj, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -164,2 +166,3 @@\n-void MacroAssembler::jump(ArrayAddress entry) {\n-  jmp(as_Address(entry));\n+void MacroAssembler::jump(ArrayAddress entry, Register rscratch) {\n+  assert(rscratch == noreg, \"not needed\");\n+  jmp(as_Address(entry, noreg));\n@@ -198,1 +201,3 @@\n-void MacroAssembler::lea(Address dst, AddressLiteral adr) {\n+void MacroAssembler::lea(Address dst, AddressLiteral adr, Register rscratch) {\n+  assert(rscratch == noreg, \"not needed\");\n+\n@@ -301,1 +306,2 @@\n-void MacroAssembler::movoop(Address dst, jobject obj) {\n+void MacroAssembler::movoop(Address dst, jobject obj, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -309,1 +315,2 @@\n-void MacroAssembler::mov_metadata(Address dst, Metadata* obj) {\n+void MacroAssembler::mov_metadata(Address dst, Metadata* obj, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -321,2 +328,3 @@\n-void MacroAssembler::movptr(ArrayAddress dst, Register src) {\n-  movl(as_Address(dst), src);\n+void MacroAssembler::movptr(ArrayAddress dst, Register src, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n+  movl(as_Address(dst, noreg), src);\n@@ -326,1 +334,1 @@\n-  movl(dst, as_Address(src));\n+  movl(dst, as_Address(src, noreg));\n@@ -329,2 +337,2 @@\n-\/\/ src should NEVER be a real pointer. Use AddressLiteral for true pointers\n-void MacroAssembler::movptr(Address dst, intptr_t src) {\n+void MacroAssembler::movptr(Address dst, intptr_t src, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -334,1 +342,2 @@\n-void MacroAssembler::pushoop(jobject obj) {\n+void MacroAssembler::pushoop(jobject obj, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -338,1 +347,2 @@\n-void MacroAssembler::pushklass(Metadata* obj) {\n+void MacroAssembler::pushklass(Metadata* obj, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -342,1 +352,2 @@\n-void MacroAssembler::pushptr(AddressLiteral src) {\n+void MacroAssembler::pushptr(AddressLiteral src, Register rscratch) {\n+  assert(rscratch == noreg, \"redundant\");\n@@ -435,1 +446,0 @@\n-  ExternalAddress message((address)msg);\n@@ -437,1 +447,2 @@\n-  pushptr(message.addr());\n+  ExternalAddress message((address)msg);\n+  pushptr(message.addr(), noreg);\n@@ -447,1 +458,0 @@\n-  ExternalAddress message((address) msg);\n@@ -449,1 +459,2 @@\n-  pushptr(message.addr());\n+  ExternalAddress message((address)msg);\n+  pushptr(message.addr(), noreg);\n@@ -482,1 +493,1 @@\n-Address MacroAssembler::as_Address(ArrayAddress adr) {\n+Address MacroAssembler::as_Address(ArrayAddress adr, Register rscratch) {\n@@ -484,1 +495,1 @@\n-  lea(rscratch1, base);\n+  lea(rscratch, base);\n@@ -487,1 +498,1 @@\n-  Address array(rscratch1, index._index, index._scale, index._disp);\n+  Address array(rscratch, index._index, index._scale, index._disp);\n@@ -551,1 +562,1 @@\n-  cmp64(rax, ExternalAddress((address) &min_long));\n+  cmp64(rax, ExternalAddress((address) &min_long), rdx \/*rscratch*\/);\n@@ -586,1 +597,3 @@\n-void MacroAssembler::incrementq(AddressLiteral dst) {\n+void MacroAssembler::incrementq(AddressLiteral dst, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(dst), \"missing\");\n+\n@@ -590,2 +603,2 @@\n-    lea(rscratch1, dst);\n-    incrementq(Address(rscratch1, 0));\n+    lea(rscratch, dst);\n+    incrementq(Address(rscratch, 0));\n@@ -613,2 +626,2 @@\n-void MacroAssembler::jump(ArrayAddress entry) {\n-  lea(rscratch1, entry.base());\n+void MacroAssembler::jump(ArrayAddress entry, Register rscratch) {\n+  lea(rscratch, entry.base());\n@@ -617,1 +630,1 @@\n-  dispatch._base = rscratch1;\n+  dispatch._base = rscratch;\n@@ -627,1 +640,1 @@\n-    mov_literal64(dst, (intptr_t)src.target(), src.rspec());\n+  mov_literal64(dst, (intptr_t)src.target(), src.rspec());\n@@ -630,3 +643,3 @@\n-void MacroAssembler::lea(Address dst, AddressLiteral adr) {\n-  mov_literal64(rscratch1, (intptr_t)adr.target(), adr.rspec());\n-  movptr(dst, rscratch1);\n+void MacroAssembler::lea(Address dst, AddressLiteral adr, Register rscratch) {\n+  lea(rscratch, adr);\n+  movptr(dst, rscratch);\n@@ -649,3 +662,3 @@\n-void MacroAssembler::movoop(Address dst, jobject obj) {\n-  mov_literal64(rscratch1, (intptr_t)obj, oop_Relocation::spec_for_immediate());\n-  movq(dst, rscratch1);\n+void MacroAssembler::movoop(Address dst, jobject obj, Register rscratch) {\n+  mov_literal64(rscratch, (intptr_t)obj, oop_Relocation::spec_for_immediate());\n+  movq(dst, rscratch);\n@@ -658,3 +671,3 @@\n-void MacroAssembler::mov_metadata(Address dst, Metadata* obj) {\n-  mov_literal64(rscratch1, (intptr_t)obj, metadata_Relocation::spec_for_immediate());\n-  movq(dst, rscratch1);\n+void MacroAssembler::mov_metadata(Address dst, Metadata* obj, Register rscratch) {\n+  mov_literal64(rscratch, (intptr_t)obj, metadata_Relocation::spec_for_immediate());\n+  movq(dst, rscratch);\n@@ -676,2 +689,2 @@\n-void MacroAssembler::movptr(ArrayAddress dst, Register src) {\n-  movq(as_Address(dst), src);\n+void MacroAssembler::movptr(ArrayAddress dst, Register src, Register rscratch) {\n+  movq(as_Address(dst, rscratch), src);\n@@ -681,1 +694,1 @@\n-  movq(dst, as_Address(src));\n+  movq(dst, as_Address(src, dst \/*rscratch*\/));\n@@ -685,1 +698,1 @@\n-void MacroAssembler::movptr(Address dst, intptr_t src) {\n+void MacroAssembler::movptr(Address dst, intptr_t src, Register rscratch) {\n@@ -689,2 +702,2 @@\n-    mov64(rscratch1, src);\n-    movq(dst, rscratch1);\n+    mov64(rscratch, src);\n+    movq(dst, rscratch);\n@@ -694,8 +707,3 @@\n-\/\/ These are mostly for initializing NULL\n-void MacroAssembler::movptr(Address dst, int32_t src) {\n-  movslq(dst, src);\n-}\n-\n-void MacroAssembler::pushoop(jobject obj) {\n-  movoop(rscratch1, obj);\n-  push(rscratch1);\n+void MacroAssembler::pushoop(jobject obj, Register rscratch) {\n+  movoop(rscratch, obj);\n+  push(rscratch);\n@@ -704,3 +712,3 @@\n-void MacroAssembler::pushklass(Metadata* obj) {\n-  mov_metadata(rscratch1, obj);\n-  push(rscratch1);\n+void MacroAssembler::pushklass(Metadata* obj, Register rscratch) {\n+  mov_metadata(rscratch, obj);\n+  push(rscratch);\n@@ -709,2 +717,2 @@\n-void MacroAssembler::pushptr(AddressLiteral src) {\n-  lea(rscratch1, src);\n+void MacroAssembler::pushptr(AddressLiteral src, Register rscratch) {\n+  lea(rscratch, src);\n@@ -712,1 +720,1 @@\n-    push(rscratch1);\n+    push(rscratch);\n@@ -714,1 +722,1 @@\n-    pushq(Address(rscratch1, 0));\n+    pushq(Address(rscratch, 0));\n@@ -724,22 +732,3 @@\n-                                         address  last_java_pc) {\n-  vzeroupper();\n-  \/\/ determine last_java_sp register\n-  if (!last_java_sp->is_valid()) {\n-    last_java_sp = rsp;\n-  }\n-\n-  \/\/ last_java_fp is optional\n-  if (last_java_fp->is_valid()) {\n-    movptr(Address(r15_thread, JavaThread::last_Java_fp_offset()),\n-           last_java_fp);\n-  }\n-\n-  \/\/ last_java_pc is optional\n-  if (last_java_pc != NULL) {\n-    Address java_pc(r15_thread,\n-                    JavaThread::frame_anchor_offset() + JavaFrameAnchor::last_Java_pc_offset());\n-    lea(rscratch1, InternalAddress(last_java_pc));\n-    movptr(java_pc, rscratch1);\n-  }\n-\n-  movptr(Address(r15_thread, JavaThread::last_Java_sp_offset()), last_java_sp);\n+                                         address  last_java_pc,\n+                                         Register rscratch) {\n+  set_last_Java_frame(r15_thread, last_java_sp, last_java_fp, last_java_pc, rscratch);\n@@ -790,0 +779,1 @@\n+\n@@ -791,2 +781,2 @@\n-  lea(rax, ExternalAddress(CAST_FROM_FN_PTR(address, warning)));\n-  call(rax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, warning)));\n+\n@@ -1200,1 +1190,1 @@\n-void MacroAssembler::andpd(XMMRegister dst, AddressLiteral src, Register scratch_reg) {\n+void MacroAssembler::andpd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n@@ -1203,0 +1193,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1206,2 +1198,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::andpd(dst, Address(scratch_reg, 0));\n+    lea(rscratch, src);\n+    Assembler::andpd(dst, Address(rscratch, 0));\n@@ -1211,1 +1203,1 @@\n-void MacroAssembler::andps(XMMRegister dst, AddressLiteral src, Register scratch_reg) {\n+void MacroAssembler::andps(XMMRegister dst, AddressLiteral src, Register rscratch) {\n@@ -1214,0 +1206,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1217,2 +1211,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::andps(dst, Address(scratch_reg, 0));\n+    lea(rscratch, src);\n+    Assembler::andps(dst, Address(rscratch, 0));\n@@ -1231,1 +1225,3 @@\n-void MacroAssembler::atomic_incl(AddressLiteral counter_addr, Register scr) {\n+void MacroAssembler::atomic_incl(AddressLiteral counter_addr, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(counter_addr), \"missing\");\n+\n@@ -1235,2 +1231,2 @@\n-    lea(scr, counter_addr);\n-    atomic_incl(Address(scr, 0));\n+    lea(rscratch, counter_addr);\n+    atomic_incl(Address(rscratch, 0));\n@@ -1246,1 +1242,3 @@\n-void MacroAssembler::atomic_incq(AddressLiteral counter_addr, Register scr) {\n+void MacroAssembler::atomic_incq(AddressLiteral counter_addr, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(counter_addr), \"missing\");\n+\n@@ -1250,2 +1248,2 @@\n-    lea(scr, counter_addr);\n-    atomic_incq(Address(scr, 0));\n+    lea(rscratch, counter_addr);\n+    atomic_incq(Address(rscratch, 0));\n@@ -1284,4 +1282,4 @@\n-    \/\/ testing if reserved zone needs to be enabled\n-    Label no_reserved_zone_enabling;\n-    Register thread = NOT_LP64(rsi) LP64_ONLY(r15_thread);\n-    NOT_LP64(get_thread(rsi);)\n+  \/\/ testing if reserved zone needs to be enabled\n+  Label no_reserved_zone_enabling;\n+  Register thread = NOT_LP64(rsi) LP64_ONLY(r15_thread);\n+  NOT_LP64(get_thread(rsi);)\n@@ -1289,2 +1287,2 @@\n-    cmpptr(rsp, Address(thread, JavaThread::reserved_stack_activation_offset()));\n-    jcc(Assembler::below, no_reserved_zone_enabling);\n+  cmpptr(rsp, Address(thread, JavaThread::reserved_stack_activation_offset()));\n+  jcc(Assembler::below, no_reserved_zone_enabling);\n@@ -1292,3 +1290,3 @@\n-    call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone), thread);\n-    jump(RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry()));\n-    should_not_reach_here();\n+  call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::enable_stack_reserved_zone), thread);\n+  jump(RuntimeAddress(StubRoutines::throw_delayed_StackOverflowError_entry()));\n+  should_not_reach_here();\n@@ -1296,1 +1294,1 @@\n-    bind(no_reserved_zone_enabling);\n+  bind(no_reserved_zone_enabling);\n@@ -1317,1 +1315,3 @@\n-void MacroAssembler::call(AddressLiteral entry) {\n+void MacroAssembler::call(AddressLiteral entry, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(entry), \"missing\");\n+\n@@ -1321,2 +1321,2 @@\n-    lea(rscratch1, entry);\n-    Assembler::call(rscratch1);\n+    lea(rscratch, entry);\n+    Assembler::call(rscratch);\n@@ -1552,1 +1552,1 @@\n-  set_last_Java_frame(java_thread, last_java_sp, rbp, NULL);\n+  set_last_Java_frame(java_thread, last_java_sp, rbp, NULL, rscratch1);\n@@ -1732,1 +1732,3 @@\n-void MacroAssembler::cmp32(AddressLiteral src1, int32_t imm) {\n+void MacroAssembler::cmp32(AddressLiteral src1, int32_t imm, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src1), \"missing\");\n+\n@@ -1736,2 +1738,2 @@\n-    lea(rscratch1, src1);\n-    cmpl(Address(rscratch1, 0), imm);\n+    lea(rscratch, src1);\n+    cmpl(Address(rscratch, 0), imm);\n@@ -1741,1 +1743,1 @@\n-void MacroAssembler::cmp32(Register src1, AddressLiteral src2) {\n+void MacroAssembler::cmp32(Register src1, AddressLiteral src2, Register rscratch) {\n@@ -1743,0 +1745,2 @@\n+  assert(rscratch != noreg || always_reachable(src2), \"missing\");\n+\n@@ -1746,2 +1750,2 @@\n-    lea(rscratch1, src2);\n-    cmpl(src1, Address(rscratch1, 0));\n+    lea(rscratch, src2);\n+    cmpl(src1, Address(rscratch, 0));\n@@ -1804,1 +1808,3 @@\n-void MacroAssembler::cmp8(AddressLiteral src1, int imm) {\n+void MacroAssembler::cmp8(AddressLiteral src1, int imm, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src1), \"missing\");\n+\n@@ -1808,2 +1814,2 @@\n-    lea(rscratch1, src1);\n-    cmpb(Address(rscratch1, 0), imm);\n+    lea(rscratch, src1);\n+    cmpb(Address(rscratch, 0), imm);\n@@ -1813,1 +1819,1 @@\n-void MacroAssembler::cmpptr(Register src1, AddressLiteral src2) {\n+void MacroAssembler::cmpptr(Register src1, AddressLiteral src2, Register rscratch) {\n@@ -1815,0 +1821,2 @@\n+  assert(rscratch != noreg || always_reachable(src2), \"missing\");\n+\n@@ -1816,2 +1824,2 @@\n-    movptr(rscratch1, src2);\n-    Assembler::cmpq(src1, rscratch1);\n+    movptr(rscratch, src2);\n+    Assembler::cmpq(src1, rscratch);\n@@ -1821,2 +1829,2 @@\n-    lea(rscratch1, src2);\n-    Assembler::cmpq(src1, Address(rscratch1, 0));\n+    lea(rscratch, src2);\n+    Assembler::cmpq(src1, Address(rscratch, 0));\n@@ -1825,0 +1833,1 @@\n+  assert(rscratch == noreg, \"not needed\");\n@@ -1833,1 +1842,1 @@\n-void MacroAssembler::cmpptr(Address src1, AddressLiteral src2) {\n+void MacroAssembler::cmpptr(Address src1, AddressLiteral src2, Register rscratch) {\n@@ -1837,2 +1846,2 @@\n-  movptr(rscratch1, src2);\n-  Assembler::cmpq(src1, rscratch1);\n+  movptr(rscratch, src2);\n+  Assembler::cmpq(src1, rscratch);\n@@ -1840,0 +1849,1 @@\n+  assert(rscratch == noreg, \"not needed\");\n@@ -1853,3 +1863,3 @@\n-void MacroAssembler::cmpoop(Register src1, jobject src2) {\n-  movoop(rscratch1, src2);\n-  cmpptr(src1, rscratch1);\n+void MacroAssembler::cmpoop(Register src1, jobject src2, Register rscratch) {\n+  movoop(rscratch, src2);\n+  cmpptr(src1, rscratch);\n@@ -1859,1 +1869,3 @@\n-void MacroAssembler::locked_cmpxchgptr(Register reg, AddressLiteral adr) {\n+void MacroAssembler::locked_cmpxchgptr(Register reg, AddressLiteral adr, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(adr), \"missing\");\n+\n@@ -1864,1 +1876,1 @@\n-    lea(rscratch1, adr);\n+    lea(rscratch, adr);\n@@ -1866,1 +1878,1 @@\n-    cmpxchgptr(reg, Address(rscratch1, 0));\n+    cmpxchgptr(reg, Address(rscratch, 0));\n@@ -1874,1 +1886,3 @@\n-void MacroAssembler::comisd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::comisd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1878,2 +1892,2 @@\n-    lea(rscratch1, src);\n-    Assembler::comisd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::comisd(dst, Address(rscratch, 0));\n@@ -1883,1 +1897,3 @@\n-void MacroAssembler::comiss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::comiss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1887,2 +1903,2 @@\n-    lea(rscratch1, src);\n-    Assembler::comiss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::comiss(dst, Address(rscratch, 0));\n@@ -1893,1 +1909,3 @@\n-void MacroAssembler::cond_inc32(Condition cond, AddressLiteral counter_addr) {\n+void MacroAssembler::cond_inc32(Condition cond, AddressLiteral counter_addr, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(counter_addr), \"missing\");\n+\n@@ -1898,1 +1916,1 @@\n-  atomic_incl(counter_addr);\n+  atomic_incl(counter_addr, rscratch);\n@@ -1974,1 +1992,3 @@\n-void MacroAssembler::divsd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::divsd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1978,2 +1998,2 @@\n-    lea(rscratch1, src);\n-    Assembler::divsd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::divsd(dst, Address(rscratch, 0));\n@@ -1983,1 +2003,3 @@\n-void MacroAssembler::divss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::divss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1987,2 +2009,2 @@\n-    lea(rscratch1, src);\n-    Assembler::divss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::divss(dst, Address(rscratch, 0));\n@@ -2098,1 +2120,1 @@\n-  Assembler::fldcw(as_Address(src));\n+  fldcw(as_Address(src));\n@@ -2238,1 +2260,3 @@\n-void MacroAssembler::incrementl(AddressLiteral dst) {\n+void MacroAssembler::incrementl(AddressLiteral dst, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(dst), \"missing\");\n+\n@@ -2242,2 +2266,2 @@\n-    lea(rscratch1, dst);\n-    incrementl(Address(rscratch1, 0));\n+    lea(rscratch, dst);\n+    incrementl(Address(rscratch, 0));\n@@ -2247,2 +2271,2 @@\n-void MacroAssembler::incrementl(ArrayAddress dst) {\n-  incrementl(as_Address(dst));\n+void MacroAssembler::incrementl(ArrayAddress dst, Register rscratch) {\n+  incrementl(as_Address(dst, rscratch));\n@@ -2267,1 +2291,3 @@\n-void MacroAssembler::jump(AddressLiteral dst) {\n+void MacroAssembler::jump(AddressLiteral dst, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(dst), \"missing\");\n+\n@@ -2271,2 +2297,2 @@\n-    lea(rscratch1, dst);\n-    jmp(rscratch1);\n+    lea(rscratch, dst);\n+    jmp(rscratch);\n@@ -2276,1 +2302,3 @@\n-void MacroAssembler::jump_cc(Condition cc, AddressLiteral dst) {\n+void MacroAssembler::jump_cc(Condition cc, AddressLiteral dst, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(dst), \"missing\");\n+\n@@ -2299,2 +2327,2 @@\n-    lea(rscratch1, dst);\n-    Assembler::jmp(rscratch1);\n+    lea(rscratch, dst);\n+    Assembler::jmp(rscratch);\n@@ -2305,3 +2333,2 @@\n-void MacroAssembler::fld_x(AddressLiteral src) {\n-  Assembler::fld_x(as_Address(src));\n-}\n+void MacroAssembler::ldmxcsr(AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2309,1 +2336,0 @@\n-void MacroAssembler::ldmxcsr(AddressLiteral src, Register scratchReg) {\n@@ -2313,2 +2339,2 @@\n-    lea(scratchReg, src);\n-    Assembler::ldmxcsr(Address(scratchReg, 0));\n+    lea(rscratch, src);\n+    Assembler::ldmxcsr(Address(rscratch, 0));\n@@ -2418,1 +2444,3 @@\n-void MacroAssembler::mov32(AddressLiteral dst, Register src) {\n+void MacroAssembler::mov32(AddressLiteral dst, Register src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(dst), \"missing\");\n+\n@@ -2422,2 +2450,2 @@\n-    lea(rscratch1, dst);\n-    movl(Address(rscratch1, 0), src);\n+    lea(rscratch, dst);\n+    movl(Address(rscratch, 0), src);\n@@ -2431,2 +2459,2 @@\n-    lea(rscratch1, src);\n-    movl(dst, Address(rscratch1, 0));\n+    lea(dst, src);\n+    movl(dst, Address(dst, 0));\n@@ -2474,4 +2502,0 @@\n-void MacroAssembler::movbyte(ArrayAddress dst, int src) {\n-  movb(as_Address(dst), src);\n-}\n-\n@@ -2480,0 +2504,1 @@\n+\n@@ -2490,0 +2515,1 @@\n+\n@@ -2498,1 +2524,3 @@\n-void MacroAssembler::movdbl(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movdbl(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2506,1 +2534,1 @@\n-    lea(rscratch1, src);\n+    lea(rscratch, src);\n@@ -2508,1 +2536,1 @@\n-      movsd (dst, Address(rscratch1, 0));\n+      movsd (dst, Address(rscratch, 0));\n@@ -2510,1 +2538,1 @@\n-      movlpd(dst, Address(rscratch1, 0));\n+      movlpd(dst, Address(rscratch, 0));\n@@ -2515,1 +2543,3 @@\n-void MacroAssembler::movflt(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movflt(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2519,2 +2549,2 @@\n-    lea(rscratch1, src);\n-    movss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    movss(dst, Address(rscratch, 0));\n@@ -2541,0 +2571,4 @@\n+void MacroAssembler::movptr(Address dst, int32_t src) {\n+  LP64_ONLY(movslq(dst, src)) NOT_LP64(movl(dst, src));\n+}\n+\n@@ -2583,1 +2617,1 @@\n-  assert(rscratch != noreg || always_reachable(src),  \"missing\");\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2595,1 +2629,1 @@\n-  assert(rscratch != noreg || always_reachable(src),  \"missing\");\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2651,1 +2685,3 @@\n-void MacroAssembler::kmovql(KRegister dst, AddressLiteral src, Register scratch_reg) {\n+void MacroAssembler::kmovql(KRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2655,2 +2691,2 @@\n-    lea(scratch_reg, src);\n-    kmovql(dst, Address(scratch_reg, 0));\n+    lea(rscratch, src);\n+    kmovql(dst, Address(rscratch, 0));\n@@ -2672,1 +2708,3 @@\n-                               int vector_len, Register scratch_reg) {\n+                               int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2676,2 +2714,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evmovdqub(dst, mask, Address(scratch_reg, 0), merge, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evmovdqub(dst, mask, Address(rscratch, 0), merge, vector_len);\n@@ -2682,1 +2720,3 @@\n-                               int vector_len, Register scratch_reg) {\n+                               int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2686,2 +2726,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evmovdquw(dst, mask, Address(scratch_reg, 0), merge, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evmovdquw(dst, mask, Address(rscratch, 0), merge, vector_len);\n@@ -2702,2 +2742,1 @@\n-void MacroAssembler::evmovdquq(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge,\n-                               int vector_len, Register rscratch) {\n+void MacroAssembler::evmovdquq(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch) {\n@@ -2725,1 +2764,3 @@\n-void MacroAssembler::movdqa(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movdqa(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2729,2 +2770,2 @@\n-    lea(rscratch1, src);\n-    Assembler::movdqa(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::movdqa(dst, Address(rscratch, 0));\n@@ -2745,1 +2786,3 @@\n-void MacroAssembler::movss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2749,2 +2792,2 @@\n-    lea(rscratch1, src);\n-    Assembler::movss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::movss(dst, Address(rscratch, 0));\n@@ -2755,0 +2798,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2764,0 +2809,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2783,1 +2830,3 @@\n-void MacroAssembler::mulss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::mulss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2787,2 +2836,2 @@\n-    lea(rscratch1, src);\n-    Assembler::mulss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::mulss(dst, Address(rscratch, 0));\n@@ -3028,1 +3077,2 @@\n-                                         address  last_java_pc) {\n+                                         address  last_java_pc,\n+                                         Register rscratch) {\n@@ -3039,1 +3089,0 @@\n-\n@@ -3041,1 +3090,0 @@\n-\n@@ -3045,1 +3093,0 @@\n-\n@@ -3047,1 +3094,0 @@\n-\n@@ -3049,4 +3095,3 @@\n-    lea(Address(java_thread,\n-                 JavaThread::frame_anchor_offset() + JavaFrameAnchor::last_Java_pc_offset()),\n-        InternalAddress(last_java_pc));\n-\n+    Address java_pc(java_thread,\n+                    JavaThread::frame_anchor_offset() + JavaFrameAnchor::last_Java_pc_offset());\n+    lea(java_pc, InternalAddress(last_java_pc), rscratch);\n@@ -3128,8 +3173,2 @@\n-void MacroAssembler::sqrtsd(XMMRegister dst, AddressLiteral src) {\n-  if (reachable(src)) {\n-    Assembler::sqrtsd(dst, as_Address(src));\n-  } else {\n-    lea(rscratch1, src);\n-    Assembler::sqrtsd(dst, Address(rscratch1, 0));\n-  }\n-}\n+void MacroAssembler::sqrtss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -3137,1 +3176,0 @@\n-void MacroAssembler::sqrtss(XMMRegister dst, AddressLiteral src) {\n@@ -3141,2 +3179,2 @@\n-    lea(rscratch1, src);\n-    Assembler::sqrtss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::sqrtss(dst, Address(rscratch, 0));\n@@ -3146,1 +3184,3 @@\n-void MacroAssembler::subsd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::subsd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3150,2 +3190,2 @@\n-    lea(rscratch1, src);\n-    Assembler::subsd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::subsd(dst, Address(rscratch, 0));\n@@ -3166,1 +3206,3 @@\n-void MacroAssembler::subss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::subss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3170,2 +3212,2 @@\n-    lea(rscratch1, src);\n-    Assembler::subss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::subss(dst, Address(rscratch, 0));\n@@ -3175,1 +3217,3 @@\n-void MacroAssembler::ucomisd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::ucomisd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3179,2 +3223,2 @@\n-    lea(rscratch1, src);\n-    Assembler::ucomisd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::ucomisd(dst, Address(rscratch, 0));\n@@ -3184,1 +3228,3 @@\n-void MacroAssembler::ucomiss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::ucomiss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3188,2 +3234,2 @@\n-    lea(rscratch1, src);\n-    Assembler::ucomiss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::ucomiss(dst, Address(rscratch, 0));\n@@ -3236,1 +3282,3 @@\n-void MacroAssembler::pshufb(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::pshufb(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3243,2 +3291,2 @@\n-    lea(rscratch1, src);\n-    Assembler::pshufb(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::pshufb(dst, Address(rscratch, 0));\n@@ -3250,1 +3298,3 @@\n-void MacroAssembler::vaddsd(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vaddsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3254,2 +3304,2 @@\n-    lea(rscratch1, src);\n-    vaddsd(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vaddsd(dst, nds, Address(rscratch, 0));\n@@ -3259,1 +3309,3 @@\n-void MacroAssembler::vaddss(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vaddss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3263,2 +3315,2 @@\n-    lea(rscratch1, src);\n-    vaddss(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vaddss(dst, nds, Address(rscratch, 0));\n@@ -3292,1 +3344,1 @@\n-void MacroAssembler::vabsss(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len) {\n+void MacroAssembler::vabsss(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len, Register rscratch) {\n@@ -3294,1 +3346,3 @@\n-  vandps(dst, nds, negate_field, vector_len);\n+  assert(rscratch != noreg || always_reachable(negate_field), \"missing\");\n+\n+  vandps(dst, nds, negate_field, vector_len, rscratch);\n@@ -3297,1 +3351,1 @@\n-void MacroAssembler::vabssd(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len) {\n+void MacroAssembler::vabssd(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len, Register rscratch) {\n@@ -3299,1 +3353,3 @@\n-  vandpd(dst, nds, negate_field, vector_len);\n+  assert(rscratch != noreg || always_reachable(negate_field), \"missing\");\n+\n+  vandpd(dst, nds, negate_field, vector_len, rscratch);\n@@ -3323,1 +3379,1 @@\n-  assert(rscratch != noreg || always_reachable(src),  \"missing\");\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -3334,0 +3390,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3343,0 +3401,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3352,0 +3412,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3361,0 +3423,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3379,2 +3443,3 @@\n-void MacroAssembler::evpcmpeqd(KRegister kdst, KRegister mask, XMMRegister nds,\n-                               AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::evpcmpeqd(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3384,2 +3449,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpcmpeqd(kdst, mask, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpcmpeqd(kdst, mask, nds, Address(rscratch, 0), vector_len);\n@@ -3390,1 +3455,3 @@\n-                             int comparison, bool is_signed, int vector_len, Register scratch_reg) {\n+                             int comparison, bool is_signed, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3394,2 +3461,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpcmpd(kdst, mask, nds, Address(scratch_reg, 0), comparison, is_signed, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpcmpd(kdst, mask, nds, Address(rscratch, 0), comparison, is_signed, vector_len);\n@@ -3400,1 +3467,3 @@\n-                             int comparison, bool is_signed, int vector_len, Register scratch_reg) {\n+                             int comparison, bool is_signed, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3404,2 +3473,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpcmpq(kdst, mask, nds, Address(scratch_reg, 0), comparison, is_signed, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpcmpq(kdst, mask, nds, Address(rscratch, 0), comparison, is_signed, vector_len);\n@@ -3410,1 +3479,3 @@\n-                             int comparison, bool is_signed, int vector_len, Register scratch_reg) {\n+                             int comparison, bool is_signed, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3414,2 +3485,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpcmpb(kdst, mask, nds, Address(scratch_reg, 0), comparison, is_signed, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpcmpb(kdst, mask, nds, Address(rscratch, 0), comparison, is_signed, vector_len);\n@@ -3420,1 +3491,3 @@\n-                             int comparison, bool is_signed, int vector_len, Register scratch_reg) {\n+                             int comparison, bool is_signed, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3424,2 +3497,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpcmpw(kdst, mask, nds, Address(scratch_reg, 0), comparison, is_signed, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpcmpw(kdst, mask, nds, Address(rscratch, 0), comparison, is_signed, vector_len);\n@@ -3494,1 +3567,1 @@\n-void MacroAssembler::vpmulld(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vpmulld(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n@@ -3496,0 +3569,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3499,2 +3574,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::vpmulld(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    Assembler::vpmulld(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3590,1 +3665,3 @@\n-void MacroAssembler::vandpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vandpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3594,2 +3671,2 @@\n-    lea(scratch_reg, src);\n-    vandpd(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    vandpd(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3599,1 +3676,3 @@\n-void MacroAssembler::vandps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vandps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3603,2 +3682,2 @@\n-    lea(scratch_reg, src);\n-    vandps(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    vandps(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3609,1 +3688,3 @@\n-                            bool merge, int vector_len, Register scratch_reg) {\n+                            bool merge, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3613,2 +3694,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evpord(dst, mask, nds, Address(scratch_reg, 0), merge, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evpord(dst, mask, nds, Address(rscratch, 0), merge, vector_len);\n@@ -3618,1 +3699,3 @@\n-void MacroAssembler::vdivsd(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vdivsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3622,2 +3705,2 @@\n-    lea(rscratch1, src);\n-    vdivsd(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vdivsd(dst, nds, Address(rscratch, 0));\n@@ -3627,1 +3710,3 @@\n-void MacroAssembler::vdivss(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vdivss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3631,2 +3716,2 @@\n-    lea(rscratch1, src);\n-    vdivss(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vdivss(dst, nds, Address(rscratch, 0));\n@@ -3636,1 +3721,3 @@\n-void MacroAssembler::vmulsd(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vmulsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3640,2 +3727,2 @@\n-    lea(rscratch1, src);\n-    vmulsd(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vmulsd(dst, nds, Address(rscratch, 0));\n@@ -3645,1 +3732,3 @@\n-void MacroAssembler::vmulss(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vmulss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3649,2 +3738,2 @@\n-    lea(rscratch1, src);\n-    vmulss(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vmulss(dst, nds, Address(rscratch, 0));\n@@ -3654,1 +3743,3 @@\n-void MacroAssembler::vsubsd(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vsubsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3658,2 +3749,2 @@\n-    lea(rscratch1, src);\n-    vsubsd(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vsubsd(dst, nds, Address(rscratch, 0));\n@@ -3663,1 +3754,3 @@\n-void MacroAssembler::vsubss(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vsubss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3667,2 +3760,2 @@\n-    lea(rscratch1, src);\n-    vsubss(dst, nds, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    vsubss(dst, nds, Address(rscratch, 0));\n@@ -3672,1 +3765,1 @@\n-void MacroAssembler::vnegatess(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vnegatess(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n@@ -3674,1 +3767,3 @@\n-  vxorps(dst, nds, src, Assembler::AVX_128bit);\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n+  vxorps(dst, nds, src, Assembler::AVX_128bit, rscratch);\n@@ -3677,1 +3772,1 @@\n-void MacroAssembler::vnegatesd(XMMRegister dst, XMMRegister nds, AddressLiteral src) {\n+void MacroAssembler::vnegatesd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch) {\n@@ -3679,1 +3774,3 @@\n-  vxorpd(dst, nds, src, Assembler::AVX_128bit);\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n+  vxorpd(dst, nds, src, Assembler::AVX_128bit, rscratch);\n@@ -3682,1 +3779,3 @@\n-void MacroAssembler::vxorpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vxorpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3686,2 +3785,2 @@\n-    lea(scratch_reg, src);\n-    vxorpd(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    vxorpd(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3691,1 +3790,3 @@\n-void MacroAssembler::vxorps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vxorps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3695,2 +3796,2 @@\n-    lea(scratch_reg, src);\n-    vxorps(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    vxorps(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3700,1 +3801,3 @@\n-void MacroAssembler::vpxor(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vpxor(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3705,2 +3808,2 @@\n-      lea(scratch_reg, src);\n-      Assembler::vpxor(dst, nds, Address(scratch_reg, 0), vector_len);\n+      lea(rscratch, src);\n+      Assembler::vpxor(dst, nds, Address(rscratch, 0), vector_len);\n@@ -3708,3 +3811,2 @@\n-  }\n-  else {\n-    MacroAssembler::vxorpd(dst, nds, src, vector_len, scratch_reg);\n+  } else {\n+    MacroAssembler::vxorpd(dst, nds, src, vector_len, rscratch);\n@@ -3714,1 +3816,3 @@\n-void MacroAssembler::vpermd(XMMRegister dst,  XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg) {\n+void MacroAssembler::vpermd(XMMRegister dst,  XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -3718,2 +3822,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::vpermd(dst, nds, Address(scratch_reg, 0), vector_len);\n+    lea(rscratch, src);\n+    Assembler::vpermd(dst, nds, Address(rscratch, 0), vector_len);\n@@ -4384,0 +4488,7 @@\n+  BLOCK_COMMENT(\"verify_oop {\");\n+#ifdef _LP64\n+  push(rscratch1);\n+#endif\n+  push(rax);                          \/\/ save rax\n+  push(reg);                          \/\/ pass register argument\n+\n@@ -4392,6 +4503,0 @@\n-  BLOCK_COMMENT(\"verify_oop {\");\n-#ifdef _LP64\n-  push(rscratch1);                    \/\/ save r10, trashed by movptr()\n-#endif\n-  push(rax);                          \/\/ save rax,\n-  push(reg);                          \/\/ pass register argument\n@@ -4399,4 +4504,2 @@\n-  \/\/ avoid using pushptr, as it modifies scratch registers\n-  \/\/ and our contract is not to modify anything\n-  movptr(rax, buffer.addr());\n-  push(rax);\n+  pushptr(buffer.addr(), rax \/*rscratch*\/);\n+\n@@ -4447,9 +4550,0 @@\n-  \/\/ Address adjust(addr.base(), addr.index(), addr.scale(), addr.disp() + BytesPerWord);\n-  \/\/ Pass register number to verify_oop_subroutine\n-  const char* b = NULL;\n-  {\n-    ResourceMark rm;\n-    stringStream ss;\n-    ss.print(\"verify_oop_addr: %s (%s:%d)\", s, file, line);\n-    b = code_string(ss.as_string());\n-  }\n@@ -4457,1 +4551,1 @@\n-  push(rscratch1);                    \/\/ save r10, trashed by movptr()\n+  push(rscratch1);\n@@ -4459,1 +4553,1 @@\n-  push(rax);                          \/\/ save rax,\n+  push(rax); \/\/ save rax,\n@@ -4471,0 +4565,8 @@\n+  \/\/ Pass register number to verify_oop_subroutine\n+  const char* b = NULL;\n+  {\n+    ResourceMark rm;\n+    stringStream ss;\n+    ss.print(\"verify_oop_addr: %s (%s:%d)\", s, file, line);\n+    b = code_string(ss.as_string());\n+  }\n@@ -4472,5 +4574,1 @@\n-  \/\/ pass msg argument\n-  \/\/ avoid using pushptr, as it modifies scratch registers\n-  \/\/ and our contract is not to modify anything\n-  movptr(rax, buffer.addr());\n-  push(rax);\n+  pushptr(buffer.addr(), rax \/*rscratch*\/);\n@@ -4853,1 +4951,1 @@\n-  pushptr(msg.addr());\n+  pushptr(msg.addr(), noreg);\n@@ -4868,1 +4966,1 @@\n-void MacroAssembler::restore_cpu_control_state_after_jni() {\n+void MacroAssembler::restore_cpu_control_state_after_jni(Register rscratch) {\n@@ -4873,1 +4971,1 @@\n-      ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()));\n+      ldmxcsr(ExternalAddress(StubRoutines::x86::addr_mxcsr_std()), rscratch);\n@@ -5020,2 +5118,1 @@\n-    const auto src2 = ExternalAddress((address)CompressedOops::ptrs_base_addr());\n-    assert(!src2.is_lval(), \"should not be lval\");\n+    ExternalAddress src2(CompressedOops::ptrs_base_addr());\n@@ -5026,1 +5123,1 @@\n-    cmpptr(r12_heapbase, src2);\n+    cmpptr(r12_heapbase, src2, rscratch1);\n@@ -5315,1 +5412,1 @@\n-      movptr(r12_heapbase, ExternalAddress((address)CompressedOops::ptrs_base_addr()));\n+      movptr(r12_heapbase, ExternalAddress(CompressedOops::ptrs_base_addr()));\n@@ -7273,1 +7370,1 @@\n-  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 32));\n+  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 32), rscratch1);\n@@ -7287,1 +7384,1 @@\n-  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 16));\n+  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 16), rscratch1);\n@@ -7296,1 +7393,1 @@\n-  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 16));\n+  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr() + 16), rscratch1);\n@@ -7306,1 +7403,1 @@\n-  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr()));\n+  movdqu(xmm0, ExternalAddress(StubRoutines::x86::crc_by128_masks_addr()), rscratch1);\n@@ -9406,1 +9503,1 @@\n-    MacroAssembler* masm, const bool* flag_addr, bool value) {\n+    MacroAssembler* masm, const bool* flag_addr, bool value, Register rscratch) {\n@@ -9408,1 +9505,1 @@\n-  _masm->cmp8(ExternalAddress((address)flag_addr), value);\n+  _masm->cmp8(ExternalAddress((address)flag_addr), value, rscratch);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":450,"deletions":353,"binary":false,"changes":803,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  Address as_Address(ArrayAddress adr);\n+  Address as_Address(ArrayAddress adr, Register rscratch);\n@@ -172,1 +172,1 @@\n-  void movflt(XMMRegister dst, AddressLiteral src);\n+  void movflt(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -184,1 +184,1 @@\n-  void movdbl(XMMRegister dst, AddressLiteral src);\n+  void movdbl(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -192,2 +192,2 @@\n-  void incrementl(AddressLiteral dst);\n-  void incrementl(ArrayAddress dst);\n+  void incrementl(AddressLiteral dst, Register rscratch = noreg);\n+  void incrementl(ArrayAddress   dst, Register rscratch);\n@@ -195,1 +195,1 @@\n-  void incrementq(AddressLiteral dst);\n+  void incrementq(AddressLiteral dst, Register rscratch = noreg);\n@@ -314,1 +314,2 @@\n-                           address last_java_pc);\n+                           address  last_java_pc,\n+                           Register rscratch);\n@@ -319,1 +320,2 @@\n-                           address last_java_pc);\n+                           address  last_java_pc,\n+                           Register rscratch);\n@@ -340,1 +342,1 @@\n-  void resolve_oop_handle(Register result, Register tmp = rscratch2);\n+  void resolve_oop_handle(Register result, Register tmp);\n@@ -342,1 +344,1 @@\n-  void load_mirror(Register mirror, Register method, Register tmp = rscratch2);\n+  void load_mirror(Register mirror, Register method, Register tmp);\n@@ -663,1 +665,1 @@\n-  void restore_cpu_control_state_after_jni();\n+  void restore_cpu_control_state_after_jni(Register rscratch);\n@@ -731,1 +733,1 @@\n-  void cmp8(AddressLiteral src1, int imm);\n+  void cmp8(AddressLiteral src1, int imm, Register rscratch = noreg);\n@@ -736,1 +738,1 @@\n-  void cmp32(AddressLiteral src1, int32_t imm);\n+  void cmp32(AddressLiteral src1, int32_t imm, Register rscratch = noreg);\n@@ -738,1 +740,1 @@\n-  void cmp32(Register src1, AddressLiteral src2);\n+  void cmp32(Register src1, AddressLiteral src2, Register rscratch = noreg);\n@@ -750,1 +752,1 @@\n-  void cmpoop(Register dst, jobject obj);\n+  void cmpoop(Register dst, jobject obj, Register rscratch);\n@@ -753,1 +755,1 @@\n-  void cmpptr(Address src1, AddressLiteral src2);\n+  void cmpptr(Address src1, AddressLiteral src2, Register rscratch);\n@@ -755,1 +757,1 @@\n-  void cmpptr(Register src1, AddressLiteral src2);\n+  void cmpptr(Register src1, AddressLiteral src2, Register rscratch = noreg);\n@@ -765,1 +767,1 @@\n-  void cmp64(Register src1, AddressLiteral src, Register rscratch = rscratch1);\n+  void cmp64(Register src1, AddressLiteral src, Register rscratch = noreg);\n@@ -769,2 +771,1 @@\n-  void locked_cmpxchgptr(Register reg, AddressLiteral adr);\n-\n+  void locked_cmpxchgptr(Register reg, AddressLiteral adr, Register rscratch = noreg);\n@@ -813,1 +814,1 @@\n-  void cond_inc32(Condition cond, AddressLiteral counter_addr);\n+  void cond_inc32(Condition cond, AddressLiteral counter_addr, Register rscratch = noreg);\n@@ -816,1 +817,1 @@\n-  void atomic_incl(AddressLiteral counter_addr, Register scr = rscratch1);\n+  void atomic_incl(AddressLiteral counter_addr, Register rscratch = noreg);\n@@ -819,1 +820,1 @@\n-  void atomic_incq(AddressLiteral counter_addr, Register scr = rscratch1);\n+  void atomic_incq(AddressLiteral counter_addr, Register rscratch = noreg);\n@@ -821,1 +822,1 @@\n-  void atomic_incptr(AddressLiteral counter_addr, Register scr = rscratch1) { LP64_ONLY(atomic_incq(counter_addr, scr)) NOT_LP64(atomic_incl(counter_addr, scr)) ; }\n+  void atomic_incptr(AddressLiteral counter_addr, Register rscratch = noreg) { LP64_ONLY(atomic_incq(counter_addr, rscratch)) NOT_LP64(atomic_incl(counter_addr, rscratch)) ; }\n@@ -824,0 +825,1 @@\n+  void lea(Register dst, Address        adr) { Assembler::lea(dst, adr); }\n@@ -825,2 +827,1 @@\n-  void lea(Address dst, AddressLiteral adr);\n-  void lea(Register dst, Address adr) { Assembler::lea(dst, adr); }\n+  void lea(Address  dst, AddressLiteral adr, Register rscratch);\n@@ -833,1 +834,1 @@\n-  void testl(Register dst, AddressLiteral src);\n+  void testl(Register dst, AddressLiteral src); \/\/ requires reachable address\n@@ -856,1 +857,1 @@\n-  void call(AddressLiteral entry);\n+  void call(AddressLiteral entry, Register rscratch = rax);\n@@ -868,2 +869,3 @@\n-  void jump(AddressLiteral dst);\n-  void jump_cc(Condition cc, AddressLiteral dst);\n+  void jump(AddressLiteral dst, Register rscratch = noreg);\n+\n+  void jump_cc(Condition cc, AddressLiteral dst, Register rscratch = noreg);\n@@ -874,1 +876,1 @@\n-  void jump(ArrayAddress entry);\n+  void jump(ArrayAddress entry, Register rscratch);\n@@ -883,3 +885,3 @@\n-  void andpd(XMMRegister dst, Address src) { Assembler::andpd(dst, src); }\n-  void andpd(XMMRegister dst, AddressLiteral src, Register scratch_reg = rscratch1);\n-  void andpd(XMMRegister dst, XMMRegister src) { Assembler::andpd(dst, src); }\n+  void andpd(XMMRegister dst, XMMRegister    src) { Assembler::andpd(dst, src); }\n+  void andpd(XMMRegister dst, Address        src) { Assembler::andpd(dst, src); }\n+  void andpd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -887,3 +889,3 @@\n-  void andps(XMMRegister dst, XMMRegister src) { Assembler::andps(dst, src); }\n-  void andps(XMMRegister dst, Address src) { Assembler::andps(dst, src); }\n-  void andps(XMMRegister dst, AddressLiteral src, Register scratch_reg = rscratch1);\n+  void andps(XMMRegister dst, XMMRegister    src) { Assembler::andps(dst, src); }\n+  void andps(XMMRegister dst, Address        src) { Assembler::andps(dst, src); }\n+  void andps(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -891,3 +893,3 @@\n-  void comiss(XMMRegister dst, XMMRegister src) { Assembler::comiss(dst, src); }\n-  void comiss(XMMRegister dst, Address src) { Assembler::comiss(dst, src); }\n-  void comiss(XMMRegister dst, AddressLiteral src);\n+  void comiss(XMMRegister dst, XMMRegister    src) { Assembler::comiss(dst, src); }\n+  void comiss(XMMRegister dst, Address        src) { Assembler::comiss(dst, src); }\n+  void comiss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -895,3 +897,3 @@\n-  void comisd(XMMRegister dst, XMMRegister src) { Assembler::comisd(dst, src); }\n-  void comisd(XMMRegister dst, Address src) { Assembler::comisd(dst, src); }\n-  void comisd(XMMRegister dst, AddressLiteral src);\n+  void comisd(XMMRegister dst, XMMRegister    src) { Assembler::comisd(dst, src); }\n+  void comisd(XMMRegister dst, Address        src) { Assembler::comisd(dst, src); }\n+  void comisd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -900,1 +902,1 @@\n-  void fadd_s(Address src)        { Assembler::fadd_s(src); }\n+  void fadd_s(Address        src) { Assembler::fadd_s(src); }\n@@ -903,1 +905,1 @@\n-  void fldcw(Address src) { Assembler::fldcw(src); }\n+  void fldcw(Address        src) { Assembler::fldcw(src); }\n@@ -906,2 +908,2 @@\n-  void fld_s(int index)   { Assembler::fld_s(index); }\n-  void fld_s(Address src) { Assembler::fld_s(src); }\n+  void fld_s(int index)          { Assembler::fld_s(index); }\n+  void fld_s(Address        src) { Assembler::fld_s(src); }\n@@ -910,1 +912,1 @@\n-  void fld_d(Address src) { Assembler::fld_d(src); }\n+  void fld_d(Address        src) { Assembler::fld_d(src); }\n@@ -913,3 +915,2 @@\n-  void fmul_s(Address src)        { Assembler::fmul_s(src); }\n-  void fmul_s(AddressLiteral src) { Assembler::fmul_s(as_Address(src)); }\n-#endif \/\/ _LP64\n+  void fld_x(Address        src) { Assembler::fld_x(src); }\n+  void fld_x(AddressLiteral src) { Assembler::fld_x(as_Address(src)); }\n@@ -917,2 +918,3 @@\n-  void fld_x(Address src) { Assembler::fld_x(src); }\n-  void fld_x(AddressLiteral src);\n+  void fmul_s(Address        src) { Assembler::fmul_s(src); }\n+  void fmul_s(AddressLiteral src) { Assembler::fmul_s(as_Address(src)); }\n+#endif \/\/ !_LP64\n@@ -921,1 +923,1 @@\n-  void ldmxcsr(AddressLiteral src, Register scratchReg = rscratch1);\n+  void ldmxcsr(AddressLiteral src, Register rscratch = noreg);\n@@ -1128,4 +1130,4 @@\n-  void movss(XMMRegister dst, XMMRegister src) { Assembler::movss(dst, src); }\n-  void movss(Address dst, XMMRegister src)     { Assembler::movss(dst, src); }\n-  void movss(XMMRegister dst, Address src)     { Assembler::movss(dst, src); }\n-  void movss(XMMRegister dst, AddressLiteral src);\n+  void movss(Address     dst, XMMRegister    src) { Assembler::movss(dst, src); }\n+  void movss(XMMRegister dst, XMMRegister    src) { Assembler::movss(dst, src); }\n+  void movss(XMMRegister dst, Address        src) { Assembler::movss(dst, src); }\n+  void movss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1133,2 +1135,2 @@\n-  void movlpd(XMMRegister dst, Address src)    {Assembler::movlpd(dst, src); }\n-  void movlpd(XMMRegister dst, AddressLiteral src);\n+  void movlpd(XMMRegister dst, Address        src) {Assembler::movlpd(dst, src); }\n+  void movlpd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1140,1 +1142,1 @@\n-  void addsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void addsd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1144,1 +1146,1 @@\n-  void addss(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void addss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1148,1 +1150,1 @@\n-  void addpd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void addpd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1151,1 +1153,1 @@\n-  void vbroadcastsd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vbroadcastsd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1154,1 +1156,1 @@\n-  void vbroadcastss(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vbroadcastss(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1156,3 +1158,3 @@\n-  void divsd(XMMRegister dst, XMMRegister src)    { Assembler::divsd(dst, src); }\n-  void divsd(XMMRegister dst, Address src)        { Assembler::divsd(dst, src); }\n-  void divsd(XMMRegister dst, AddressLiteral src);\n+  void divsd(XMMRegister dst, XMMRegister    src) { Assembler::divsd(dst, src); }\n+  void divsd(XMMRegister dst, Address        src) { Assembler::divsd(dst, src); }\n+  void divsd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1160,3 +1162,3 @@\n-  void divss(XMMRegister dst, XMMRegister src)    { Assembler::divss(dst, src); }\n-  void divss(XMMRegister dst, Address src)        { Assembler::divss(dst, src); }\n-  void divss(XMMRegister dst, AddressLiteral src);\n+  void divss(XMMRegister dst, XMMRegister    src) { Assembler::divss(dst, src); }\n+  void divss(XMMRegister dst, Address        src) { Assembler::divss(dst, src); }\n+  void divss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1168,1 +1170,1 @@\n-  void movdqu(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void movdqu(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1175,1 +1177,1 @@\n-  void kmovwl(KRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void kmovwl(KRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1177,6 +1179,6 @@\n-  void kmovql(KRegister dst, KRegister src) { Assembler::kmovql(dst, src); }\n-  void kmovql(KRegister dst, Register src) { Assembler::kmovql(dst, src); }\n-  void kmovql(Register dst, KRegister src) { Assembler::kmovql(dst, src); }\n-  void kmovql(KRegister dst, Address src) { Assembler::kmovql(dst, src); }\n-  void kmovql(Address  dst, KRegister src) { Assembler::kmovql(dst, src); }\n-  void kmovql(KRegister dst, AddressLiteral src, Register scratch_reg = rscratch1);\n+  void kmovql(KRegister dst, KRegister      src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, Register       src) { Assembler::kmovql(dst, src); }\n+  void kmovql(Register  dst, KRegister      src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, Address        src) { Assembler::kmovql(dst, src); }\n+  void kmovql(Address   dst, KRegister      src) { Assembler::kmovql(dst, src); }\n+  void kmovql(KRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1193,1 +1195,2 @@\n-  void movddup(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void movddup(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n+\n@@ -1195,1 +1198,1 @@\n-  void vmovddup(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vmovddup(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1201,2 +1204,2 @@\n-  void vmovdqu(XMMRegister dst, AddressLiteral src,                 Register rscratch = rscratch1);\n-  void vmovdqu(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vmovdqu(XMMRegister dst, AddressLiteral src,                 Register rscratch = noreg);\n+  void vmovdqu(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1216,3 +1219,6 @@\n-  void evmovdqub(XMMRegister dst, KRegister mask, Address src, bool merge, int vector_len) { Assembler::evmovdqub(dst, mask, src, merge, vector_len); }\n-  void evmovdqub(Address dst, KRegister mask, XMMRegister src, bool merge, int vector_len) { Assembler::evmovdqub(dst, mask, src, merge, vector_len); }\n-  void evmovdqub(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register scratch_reg);\n+  void evmovdqub(Address     dst, KRegister mask, XMMRegister    src, bool merge, int vector_len) { Assembler::evmovdqub(dst, mask, src, merge, vector_len); }\n+  void evmovdqub(XMMRegister dst, KRegister mask, Address        src, bool merge, int vector_len) { Assembler::evmovdqub(dst, mask, src, merge, vector_len); }\n+  void evmovdqub(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n+\n+  void evmovdquw(Address     dst, XMMRegister src, int vector_len) { Assembler::evmovdquw(dst, src, vector_len); }\n+  void evmovdquw(XMMRegister dst, Address     src, int vector_len) { Assembler::evmovdquw(dst, src, vector_len); }\n@@ -1220,2 +1226,0 @@\n-  void evmovdquw(XMMRegister dst, Address src, int vector_len) { Assembler::evmovdquw(dst, src, vector_len); }\n-  void evmovdquw(Address dst, XMMRegister src, int vector_len) { Assembler::evmovdquw(dst, src, vector_len); }\n@@ -1227,3 +1231,3 @@\n-  void evmovdquw(XMMRegister dst, KRegister mask, Address src, bool merge, int vector_len) { Assembler::evmovdquw(dst, mask, src, merge, vector_len); }\n-  void evmovdquw(Address dst, KRegister mask, XMMRegister src, bool merge, int vector_len) { Assembler::evmovdquw(dst, mask, src, merge, vector_len); }\n-  void evmovdquw(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register scratch_reg);\n+  void evmovdquw(XMMRegister dst, KRegister mask, Address        src, bool merge, int vector_len) { Assembler::evmovdquw(dst, mask, src, merge, vector_len); }\n+  void evmovdquw(Address     dst, KRegister mask, XMMRegister    src, bool merge, int vector_len) { Assembler::evmovdquw(dst, mask, src, merge, vector_len); }\n+  void evmovdquw(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n@@ -1236,2 +1240,2 @@\n-  void evmovdqul(Address dst, XMMRegister src, int vector_len) { Assembler::evmovdqul(dst, src, vector_len); }\n-  void evmovdqul(XMMRegister dst, Address src, int vector_len) { Assembler::evmovdqul(dst, src, vector_len); }\n+  void evmovdqul(Address     dst, XMMRegister src, int vector_len) { Assembler::evmovdqul(dst, src, vector_len); }\n+  void evmovdqul(XMMRegister dst, Address     src, int vector_len) { Assembler::evmovdqul(dst, src, vector_len); }\n@@ -1246,1 +1250,1 @@\n-  void evmovdqul(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch);\n+  void evmovdqul(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n@@ -1267,3 +1271,3 @@\n-  void movdqa(XMMRegister dst, Address src)       { Assembler::movdqa(dst, src); }\n-  void movdqa(XMMRegister dst, XMMRegister src)   { Assembler::movdqa(dst, src); }\n-  void movdqa(XMMRegister dst, AddressLiteral src);\n+  void movdqa(XMMRegister dst, XMMRegister    src) { Assembler::movdqa(dst, src); }\n+  void movdqa(XMMRegister dst, Address        src) { Assembler::movdqa(dst, src); }\n+  void movdqa(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1274,1 +1278,1 @@\n-  void movsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void movsd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1278,1 +1282,1 @@\n-  void mulpd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void mulpd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1282,1 +1286,1 @@\n-  void mulsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void mulsd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1284,3 +1288,3 @@\n-  void mulss(XMMRegister dst, XMMRegister src)    { Assembler::mulss(dst, src); }\n-  void mulss(XMMRegister dst, Address src)        { Assembler::mulss(dst, src); }\n-  void mulss(XMMRegister dst, AddressLiteral src);\n+  void mulss(XMMRegister dst, XMMRegister    src) { Assembler::mulss(dst, src); }\n+  void mulss(XMMRegister dst, Address        src) { Assembler::mulss(dst, src); }\n+  void mulss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1311,4 +1315,0 @@\n-  void sqrtsd(XMMRegister dst, XMMRegister src)    { Assembler::sqrtsd(dst, src); }\n-  void sqrtsd(XMMRegister dst, Address src)        { Assembler::sqrtsd(dst, src); }\n-  void sqrtsd(XMMRegister dst, AddressLiteral src);\n-\n@@ -1317,1 +1317,1 @@\n-  void roundsd(XMMRegister dst, AddressLiteral src, int32_t rmode, Register rscratch);\n+  void roundsd(XMMRegister dst, AddressLiteral src, int32_t rmode, Register rscratch = noreg);\n@@ -1319,3 +1319,3 @@\n-  void sqrtss(XMMRegister dst, XMMRegister src)    { Assembler::sqrtss(dst, src); }\n-  void sqrtss(XMMRegister dst, Address src)        { Assembler::sqrtss(dst, src); }\n-  void sqrtss(XMMRegister dst, AddressLiteral src);\n+  void sqrtss(XMMRegister dst, XMMRegister     src) { Assembler::sqrtss(dst, src); }\n+  void sqrtss(XMMRegister dst, Address         src) { Assembler::sqrtss(dst, src); }\n+  void sqrtss(XMMRegister dst, AddressLiteral  src, Register rscratch = noreg);\n@@ -1323,3 +1323,3 @@\n-  void subsd(XMMRegister dst, XMMRegister src)    { Assembler::subsd(dst, src); }\n-  void subsd(XMMRegister dst, Address src)        { Assembler::subsd(dst, src); }\n-  void subsd(XMMRegister dst, AddressLiteral src);\n+  void subsd(XMMRegister dst, XMMRegister    src) { Assembler::subsd(dst, src); }\n+  void subsd(XMMRegister dst, Address        src) { Assembler::subsd(dst, src); }\n+  void subsd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1327,3 +1327,3 @@\n-  void subss(XMMRegister dst, XMMRegister src)    { Assembler::subss(dst, src); }\n-  void subss(XMMRegister dst, Address src)        { Assembler::subss(dst, src); }\n-  void subss(XMMRegister dst, AddressLiteral src);\n+  void subss(XMMRegister dst, XMMRegister    src) { Assembler::subss(dst, src); }\n+  void subss(XMMRegister dst, Address        src) { Assembler::subss(dst, src); }\n+  void subss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1331,3 +1331,3 @@\n-  void ucomiss(XMMRegister dst, XMMRegister src) { Assembler::ucomiss(dst, src); }\n-  void ucomiss(XMMRegister dst, Address src)     { Assembler::ucomiss(dst, src); }\n-  void ucomiss(XMMRegister dst, AddressLiteral src);\n+  void ucomiss(XMMRegister dst, XMMRegister    src) { Assembler::ucomiss(dst, src); }\n+  void ucomiss(XMMRegister dst, Address        src) { Assembler::ucomiss(dst, src); }\n+  void ucomiss(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1335,3 +1335,3 @@\n-  void ucomisd(XMMRegister dst, XMMRegister src) { Assembler::ucomisd(dst, src); }\n-  void ucomisd(XMMRegister dst, Address src)     { Assembler::ucomisd(dst, src); }\n-  void ucomisd(XMMRegister dst, AddressLiteral src);\n+  void ucomisd(XMMRegister dst, XMMRegister    src) { Assembler::ucomisd(dst, src); }\n+  void ucomisd(XMMRegister dst, Address        src) { Assembler::ucomisd(dst, src); }\n+  void ucomisd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1342,1 +1342,1 @@\n-  void xorpd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void xorpd(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1347,1 +1347,1 @@\n-  void xorps(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void xorps(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1350,3 +1350,3 @@\n-  void pshufb(XMMRegister dst, XMMRegister src) { Assembler::pshufb(dst, src); }\n-  void pshufb(XMMRegister dst, Address src)     { Assembler::pshufb(dst, src); }\n-  void pshufb(XMMRegister dst, AddressLiteral src);\n+  void pshufb(XMMRegister dst, XMMRegister    src) { Assembler::pshufb(dst, src); }\n+  void pshufb(XMMRegister dst, Address        src) { Assembler::pshufb(dst, src); }\n+  void pshufb(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1355,3 +1355,3 @@\n-  void vaddsd(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vaddsd(dst, nds, src); }\n-  void vaddsd(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vaddsd(dst, nds, src); }\n-  void vaddsd(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vaddsd(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vaddsd(dst, nds, src); }\n+  void vaddsd(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vaddsd(dst, nds, src); }\n+  void vaddsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1359,3 +1359,3 @@\n-  void vaddss(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vaddss(dst, nds, src); }\n-  void vaddss(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vaddss(dst, nds, src); }\n-  void vaddss(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vaddss(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vaddss(dst, nds, src); }\n+  void vaddss(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vaddss(dst, nds, src); }\n+  void vaddss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1363,2 +1363,2 @@\n-  void vabsss(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len);\n-  void vabssd(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len);\n+  void vabsss(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len, Register rscratch = noreg);\n+  void vabssd(XMMRegister dst, XMMRegister nds, XMMRegister src, AddressLiteral negate_field, int vector_len, Register rscratch = noreg);\n@@ -1368,1 +1368,1 @@\n-  void vpaddb(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch);\n+  void vpaddb(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1371,1 +1371,1 @@\n-  void vpaddw(XMMRegister dst, XMMRegister nds, Address src, int vector_len);\n+  void vpaddw(XMMRegister dst, XMMRegister nds, Address     src, int vector_len);\n@@ -1379,1 +1379,1 @@\n-  void vpand(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vpand(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1382,1 +1382,1 @@\n-  void vpbroadcastd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vpbroadcastd(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1385,1 +1385,1 @@\n-  void vpbroadcastq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = rscratch1);\n+  void vpbroadcastq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1390,1 +1390,1 @@\n-  void evpcmpeqd(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg);\n+  void evpcmpeqd(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1393,16 +1393,19 @@\n-  void evpcmpd(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister src,\n-               int comparison, bool is_signed, int vector_len) { Assembler::evpcmpd(kdst, mask, nds, src, comparison, is_signed, vector_len); }\n-  void evpcmpd(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src,\n-               int comparison, bool is_signed, int vector_len, Register scratch_reg);\n-  void evpcmpq(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister src,\n-               int comparison, bool is_signed, int vector_len) { Assembler::evpcmpq(kdst, mask, nds, src, comparison, is_signed, vector_len); }\n-  void evpcmpq(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src,\n-               int comparison, bool is_signed, int vector_len, Register scratch_reg);\n-  void evpcmpb(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister src,\n-               int comparison, bool is_signed, int vector_len) { Assembler::evpcmpb(kdst, mask, nds, src, comparison, is_signed, vector_len); }\n-  void evpcmpb(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src,\n-               int comparison, bool is_signed, int vector_len, Register scratch_reg);\n-  void evpcmpw(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister src,\n-               int comparison, bool is_signed, int vector_len) { Assembler::evpcmpw(kdst, mask, nds, src, comparison, is_signed, vector_len); }\n-  void evpcmpw(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src,\n-               int comparison, bool is_signed, int vector_len, Register scratch_reg);\n+  void evpcmpd(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister    src, int comparison, bool is_signed, int vector_len) {\n+    Assembler::evpcmpd(kdst, mask, nds, src, comparison, is_signed, vector_len);\n+  }\n+  void evpcmpd(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int comparison, bool is_signed, int vector_len, Register rscratch = noreg);\n+\n+  void evpcmpq(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister    src, int comparison, bool is_signed, int vector_len) {\n+    Assembler::evpcmpq(kdst, mask, nds, src, comparison, is_signed, vector_len);\n+  }\n+  void evpcmpq(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int comparison, bool is_signed, int vector_len, Register rscratch = noreg);\n+\n+  void evpcmpb(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister    src, int comparison, bool is_signed, int vector_len) {\n+    Assembler::evpcmpb(kdst, mask, nds, src, comparison, is_signed, vector_len);\n+  }\n+  void evpcmpb(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int comparison, bool is_signed, int vector_len, Register rscratch = noreg);\n+\n+  void evpcmpw(KRegister kdst, KRegister mask, XMMRegister nds, XMMRegister    src, int comparison, bool is_signed, int vector_len) {\n+    Assembler::evpcmpw(kdst, mask, nds, src, comparison, is_signed, vector_len);\n+  }\n+  void evpcmpw(KRegister kdst, KRegister mask, XMMRegister nds, AddressLiteral src, int comparison, bool is_signed, int vector_len, Register rscratch = noreg);\n@@ -1416,1 +1419,1 @@\n-  void vpmovzxbw(XMMRegister dst, Address src, int vector_len);\n+  void vpmovzxbw(XMMRegister dst, Address     src, int vector_len);\n@@ -1422,8 +1425,5 @@\n-  void vpmullw(XMMRegister dst, XMMRegister nds, Address src, int vector_len);\n-  void vpmulld(XMMRegister dst, XMMRegister nds, Address src, int vector_len) {\n-    Assembler::vpmulld(dst, nds, src, vector_len);\n-  };\n-  void vpmulld(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n-    Assembler::vpmulld(dst, nds, src, vector_len);\n-  }\n-  void vpmulld(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg);\n+  void vpmullw(XMMRegister dst, XMMRegister nds, Address     src, int vector_len);\n+\n+  void vpmulld(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vpmulld(dst, nds, src, vector_len); }\n+  void vpmulld(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vpmulld(dst, nds, src, vector_len); }\n+  void vpmulld(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1432,1 +1432,1 @@\n-  void vpsubb(XMMRegister dst, XMMRegister nds, Address src, int vector_len);\n+  void vpsubb(XMMRegister dst, XMMRegister nds, Address     src, int vector_len);\n@@ -1435,1 +1435,1 @@\n-  void vpsubw(XMMRegister dst, XMMRegister nds, Address src, int vector_len);\n+  void vpsubw(XMMRegister dst, XMMRegister nds, Address     src, int vector_len);\n@@ -1438,1 +1438,1 @@\n-  void vpsraw(XMMRegister dst, XMMRegister nds, int shift, int vector_len);\n+  void vpsraw(XMMRegister dst, XMMRegister nds, int         shift, int vector_len);\n@@ -1441,1 +1441,1 @@\n-  void evpsraq(XMMRegister dst, XMMRegister nds, int shift, int vector_len);\n+  void evpsraq(XMMRegister dst, XMMRegister nds, int         shift, int vector_len);\n@@ -1530,3 +1530,3 @@\n-  void vandpd(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vandpd(dst, nds, src, vector_len); }\n-  void vandpd(XMMRegister dst, XMMRegister nds, Address src, int vector_len)     { Assembler::vandpd(dst, nds, src, vector_len); }\n-  void vandpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg = rscratch1);\n+  void vandpd(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vandpd(dst, nds, src, vector_len); }\n+  void vandpd(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vandpd(dst, nds, src, vector_len); }\n+  void vandpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1534,3 +1534,3 @@\n-  void vandps(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vandps(dst, nds, src, vector_len); }\n-  void vandps(XMMRegister dst, XMMRegister nds, Address src, int vector_len)     { Assembler::vandps(dst, nds, src, vector_len); }\n-  void vandps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg = rscratch1);\n+  void vandps(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vandps(dst, nds, src, vector_len); }\n+  void vandps(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vandps(dst, nds, src, vector_len); }\n+  void vandps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1538,1 +1538,1 @@\n-  void evpord(XMMRegister dst, KRegister mask, XMMRegister nds, AddressLiteral src, bool merge, int vector_len, Register scratch_reg);\n+  void evpord(XMMRegister dst, KRegister mask, XMMRegister nds, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n@@ -1540,3 +1540,3 @@\n-  void vdivsd(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vdivsd(dst, nds, src); }\n-  void vdivsd(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vdivsd(dst, nds, src); }\n-  void vdivsd(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vdivsd(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vdivsd(dst, nds, src); }\n+  void vdivsd(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vdivsd(dst, nds, src); }\n+  void vdivsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1544,3 +1544,3 @@\n-  void vdivss(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vdivss(dst, nds, src); }\n-  void vdivss(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vdivss(dst, nds, src); }\n-  void vdivss(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vdivss(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vdivss(dst, nds, src); }\n+  void vdivss(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vdivss(dst, nds, src); }\n+  void vdivss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1548,3 +1548,3 @@\n-  void vmulsd(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vmulsd(dst, nds, src); }\n-  void vmulsd(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vmulsd(dst, nds, src); }\n-  void vmulsd(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vmulsd(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vmulsd(dst, nds, src); }\n+  void vmulsd(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vmulsd(dst, nds, src); }\n+  void vmulsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1552,3 +1552,3 @@\n-  void vmulss(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vmulss(dst, nds, src); }\n-  void vmulss(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vmulss(dst, nds, src); }\n-  void vmulss(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vmulss(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vmulss(dst, nds, src); }\n+  void vmulss(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vmulss(dst, nds, src); }\n+  void vmulss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1556,3 +1556,3 @@\n-  void vsubsd(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vsubsd(dst, nds, src); }\n-  void vsubsd(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vsubsd(dst, nds, src); }\n-  void vsubsd(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vsubsd(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vsubsd(dst, nds, src); }\n+  void vsubsd(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vsubsd(dst, nds, src); }\n+  void vsubsd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1560,3 +1560,3 @@\n-  void vsubss(XMMRegister dst, XMMRegister nds, XMMRegister src) { Assembler::vsubss(dst, nds, src); }\n-  void vsubss(XMMRegister dst, XMMRegister nds, Address src)     { Assembler::vsubss(dst, nds, src); }\n-  void vsubss(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vsubss(XMMRegister dst, XMMRegister nds, XMMRegister    src) { Assembler::vsubss(dst, nds, src); }\n+  void vsubss(XMMRegister dst, XMMRegister nds, Address        src) { Assembler::vsubss(dst, nds, src); }\n+  void vsubss(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1564,2 +1564,2 @@\n-  void vnegatess(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n-  void vnegatesd(XMMRegister dst, XMMRegister nds, AddressLiteral src);\n+  void vnegatess(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n+  void vnegatesd(XMMRegister dst, XMMRegister nds, AddressLiteral src, Register rscratch = noreg);\n@@ -1569,3 +1569,3 @@\n-  void vxorpd(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vxorpd(dst, nds, src, vector_len); }\n-  void vxorpd(XMMRegister dst, XMMRegister nds, Address src, int vector_len) { Assembler::vxorpd(dst, nds, src, vector_len); }\n-  void vxorpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg = rscratch1);\n+  void vxorpd(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vxorpd(dst, nds, src, vector_len); }\n+  void vxorpd(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vxorpd(dst, nds, src, vector_len); }\n+  void vxorpd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1573,3 +1573,3 @@\n-  void vxorps(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vxorps(dst, nds, src, vector_len); }\n-  void vxorps(XMMRegister dst, XMMRegister nds, Address src, int vector_len) { Assembler::vxorps(dst, nds, src, vector_len); }\n-  void vxorps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg = rscratch1);\n+  void vxorps(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vxorps(dst, nds, src, vector_len); }\n+  void vxorps(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vxorps(dst, nds, src, vector_len); }\n+  void vxorps(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1589,1 +1589,1 @@\n-  void vpxor(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg = rscratch1);\n+  void vpxor(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1601,2 +1601,2 @@\n-  void vpermd(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vpermd(dst, nds, src, vector_len); }\n-  void vpermd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register scratch_reg);\n+  void vpermd(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vpermd(dst, nds, src, vector_len); }\n+  void vpermd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1844,1 +1844,1 @@\n-  void movoop(Address dst, jobject obj);\n+  void movoop(Address  dst, jobject obj, Register rscratch);\n@@ -1847,1 +1847,1 @@\n-  void mov_metadata(Address dst, Metadata* obj);\n+  void mov_metadata(Address  dst, Metadata* obj, Register rscratch);\n@@ -1855,2 +1855,3 @@\n-  void movptr(Address      dst, intptr_t       src);\n-  void movptr(ArrayAddress dst, Register       src);\n+  void movptr(Address      dst, int32_t        imm);\n+  void movptr(Address      dst, intptr_t       src, Register rscratch);\n+  void movptr(ArrayAddress dst, Register       src, Register rscratch);\n@@ -1863,10 +1864,0 @@\n-#ifdef _LP64\n-  \/\/ Generally the next two are only used for moving NULL\n-  \/\/ Although there are situations in initializing the mark word where\n-  \/\/ they could be used. They are dangerous.\n-\n-  \/\/ They only exist on LP64 so that int32_t and intptr_t are not the same\n-  \/\/ and we have ambiguous declarations.\n-\n-  void movptr(Address dst, int32_t imm32);\n-#endif \/\/ _LP64\n@@ -1875,5 +1866,2 @@\n-  void mov32(AddressLiteral dst, Register src);\n-  void mov32(Register dst, AddressLiteral src);\n-\n-  \/\/ to avoid hiding movb\n-  void movbyte(ArrayAddress dst, int src);\n+  void mov32(Register       dst, AddressLiteral src);\n+  void mov32(AddressLiteral dst, Register        src, Register rscratch = noreg);\n@@ -1884,0 +1872,2 @@\n+  void movdl(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n+\n@@ -1885,2 +1875,1 @@\n-  void movdl(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n-  void movq (XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void movq(XMMRegister dst, AddressLiteral src, Register rscratch = noreg);\n@@ -1889,1 +1878,1 @@\n-  void pushptr(AddressLiteral src);\n+  void pushptr(AddressLiteral src, Register rscratch);\n@@ -1894,2 +1883,2 @@\n-  void pushoop(jobject obj);\n-  void pushklass(Metadata* obj);\n+  void pushoop(jobject obj, Register rscratch);\n+  void pushklass(Metadata* obj, Register rscratch);\n@@ -2113,1 +2102,1 @@\n-   SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value);\n+   SkipIfEqual(MacroAssembler*, const bool* flag_addr, bool value, Register rscratch);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":221,"deletions":232,"binary":false,"changes":453,"status":"modified"},{"patch":"@@ -81,2 +81,0 @@\n-  Register temp2 = noreg;\n-  LP64_ONLY(temp2 = rscratch1);  \/\/ used by MacroAssembler::cmpptr and load_klass\n@@ -88,4 +86,5 @@\n-  __ push(temp); if (temp2 != noreg)  __ push(temp2);\n-#define UNPUSH { if (temp2 != noreg)  __ pop(temp2);  __ pop(temp); }\n-  __ load_klass(temp, obj, temp2);\n-  __ cmpptr(temp, ExternalAddress((address) klass_addr));\n+#define PUSH { __ push(temp); LP64_ONLY(  __ push(rscratch1); )               }\n+#define POP  {                LP64_ONLY(  __ pop(rscratch1);  ) __ pop(temp); }\n+  PUSH;\n+  __ load_klass(temp, obj, rscratch1);\n+  __ cmpptr(temp, ExternalAddress((address) klass_addr), rscratch1);\n@@ -95,1 +94,1 @@\n-  __ cmpptr(temp, ExternalAddress((address) klass_addr));\n+  __ cmpptr(temp, ExternalAddress((address) klass_addr), rscratch1);\n@@ -97,1 +96,1 @@\n-  UNPUSH;\n+  POP;\n@@ -101,1 +100,1 @@\n-  UNPUSH;\n+  POP;\n@@ -103,0 +102,2 @@\n+#undef POP\n+#undef PUSH\n@@ -675,1 +676,1 @@\n-  __ movptr(Address(rsp, 0), (intptr_t) adaptername);\n+  __ movptr(Address(rsp, 0), (intptr_t) adaptername, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  __ set_last_Java_frame(rcx, noreg, noreg, NULL);\n+  __ set_last_Java_frame(rcx, noreg, noreg, NULL, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/runtime_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1663,1 +1663,1 @@\n-  __ set_last_Java_frame(thread, rsp, noreg, (address)the_pc);\n+  __ set_last_Java_frame(thread, rsp, noreg, (address)the_pc, noreg);\n@@ -1670,1 +1670,1 @@\n-    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0);\n+    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0, noreg);\n@@ -1763,1 +1763,1 @@\n-  __ restore_cpu_control_state_after_jni();\n+  __ restore_cpu_control_state_after_jni(noreg);\n@@ -1906,1 +1906,1 @@\n-    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0);\n+    SkipIfEqual skip_if(masm, &DTraceMethodProbes, 0, noreg);\n@@ -2236,1 +2236,1 @@\n-  __ set_last_Java_frame(rcx, noreg, noreg, NULL);\n+  __ set_last_Java_frame(rcx, noreg, noreg, NULL, noreg);\n@@ -2384,1 +2384,1 @@\n-  __ set_last_Java_frame(rcx, noreg, rbp, NULL);\n+  __ set_last_Java_frame(rcx, noreg, rbp, NULL, noreg);\n@@ -2481,1 +2481,1 @@\n-  __ set_last_Java_frame(rdx, noreg, noreg, NULL);\n+  __ set_last_Java_frame(rdx, noreg, noreg, NULL, noreg);\n@@ -2593,1 +2593,1 @@\n-  __ set_last_Java_frame(rdi, noreg, rbp, NULL);\n+  __ set_last_Java_frame(rdi, noreg, rbp, NULL, noreg);\n@@ -2675,1 +2675,1 @@\n-  __ set_last_Java_frame(java_thread, noreg, noreg, NULL);\n+  __ set_last_Java_frame(java_thread, noreg, noreg, NULL, noreg);\n@@ -2814,1 +2814,1 @@\n-  __ set_last_Java_frame(thread, noreg, rbp, NULL);\n+  __ set_last_Java_frame(thread, noreg, rbp, NULL, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1014,1 +1014,1 @@\n-      Register flags  = rscratch1;\n+      Register flags = rscratch1;\n@@ -1697,1 +1697,1 @@\n-  assert_different_registers(ic_reg, receiver, rscratch1);\n+  assert_different_registers(ic_reg, receiver, rscratch1, rscratch2);\n@@ -1914,1 +1914,1 @@\n-  __ set_last_Java_frame(rsp, noreg, (address)the_pc);\n+  __ set_last_Java_frame(rsp, noreg, (address)the_pc, rscratch1);\n@@ -1921,1 +1921,1 @@\n-    SkipIfEqual skip(masm, &DTraceMethodProbes, false);\n+    SkipIfEqual skip(masm, &DTraceMethodProbes, false, rscratch1);\n@@ -2023,1 +2023,1 @@\n-  __ restore_cpu_control_state_after_jni();\n+  __ restore_cpu_control_state_after_jni(rscratch1);\n@@ -2152,1 +2152,1 @@\n-    SkipIfEqual skip(masm, &DTraceMethodProbes, false);\n+    SkipIfEqual skip(masm, &DTraceMethodProbes, false, rscratch1);\n@@ -2426,1 +2426,1 @@\n-    __ set_last_Java_frame(noreg, noreg, NULL);\n+    __ set_last_Java_frame(noreg, noreg, NULL, rscratch1);\n@@ -2508,1 +2508,1 @@\n-  __ set_last_Java_frame(noreg, noreg, NULL);\n+  __ set_last_Java_frame(noreg, noreg, NULL, rscratch1);\n@@ -2656,1 +2656,1 @@\n-  __ set_last_Java_frame(noreg, rbp, the_pc);\n+  __ set_last_Java_frame(noreg, rbp, the_pc, rscratch1);\n@@ -2727,1 +2727,1 @@\n-  __ set_last_Java_frame(noreg, noreg, NULL);\n+  __ set_last_Java_frame(noreg, noreg, NULL, rscratch1);\n@@ -2844,1 +2844,1 @@\n-  __ set_last_Java_frame(noreg, rbp, the_pc);\n+  __ set_last_Java_frame(noreg, rbp, the_pc, rscratch1);\n@@ -2921,1 +2921,1 @@\n-  __ set_last_Java_frame(noreg, noreg, NULL);  \/\/ JavaFrameAnchor::capture_last_Java_pc() will get the pc from the return address, which we store next:\n+  __ set_last_Java_frame(noreg, noreg, NULL, rscratch1);  \/\/ JavaFrameAnchor::capture_last_Java_pc() will get the pc from the return address, which we store next:\n@@ -3057,1 +3057,1 @@\n-  MacroAssembler* masm                = new MacroAssembler(&buffer);\n+  MacroAssembler* masm = new MacroAssembler(&buffer);\n@@ -3071,1 +3071,1 @@\n-  __ set_last_Java_frame(noreg, noreg, NULL);\n+  __ set_last_Java_frame(noreg, noreg, NULL, rscratch1);\n@@ -3467,1 +3467,1 @@\n-  __ set_last_Java_frame(noreg, noreg, the_pc);\n+  __ set_last_Java_frame(noreg, noreg, the_pc, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -346,4 +346,4 @@\n-    __ movptr(Address(rcx, Thread::pending_exception_offset()), rax          );\n-    __ lea(Address(rcx, Thread::exception_file_offset   ()),\n-           ExternalAddress((address)__FILE__));\n-    __ movl(Address(rcx, Thread::exception_line_offset   ()), __LINE__ );\n+    __ movptr(Address(rcx, Thread::pending_exception_offset()), rax);\n+    __ lea(Address(rcx, Thread::exception_file_offset()),\n+           ExternalAddress((address)__FILE__), noreg);\n+    __ movl(Address(rcx, Thread::exception_line_offset()), __LINE__ );\n@@ -3849,1 +3849,1 @@\n-    __ set_last_Java_frame(java_thread, rsp, rbp, NULL);\n+    __ set_last_Java_frame(java_thread, rsp, rbp, NULL, noreg);\n@@ -3933,1 +3933,1 @@\n-    __ set_last_Java_frame(java_thread, rsp, rbp, the_pc);\n+    __ set_last_Java_frame(java_thread, rsp, rbp, the_pc, noreg);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-#define inc_counter_np(counter) ((void)0)\n+#define INC_COUNTER_NP(counter, rscratch) ((void)0)\n@@ -94,3 +94,2 @@\n-  void inc_counter_np_(int& counter) {\n-    \/\/ This can destroy rscratch1 if counter is far from the code cache\n-    __ incrementl(ExternalAddress((address)&counter));\n+  void inc_counter_np(int& counter, Register rscratch) {\n+    __ incrementl(ExternalAddress((address)&counter), rscratch);\n@@ -98,1 +97,1 @@\n-#define inc_counter_np(counter) \\\n+#define INC_COUNTER_NP(counter, rscratch) \\\n@@ -100,1 +99,1 @@\n-  inc_counter_np_(counter);\n+  inc_counter_np(counter, rscratch);\n@@ -304,1 +303,1 @@\n-      __ cmp32(rax, mxcsr_std);\n+      __ cmp32(rax, mxcsr_std, rscratch1);\n@@ -306,1 +305,1 @@\n-      __ ldmxcsr(mxcsr_std);\n+      __ ldmxcsr(mxcsr_std, rscratch1);\n@@ -624,1 +623,1 @@\n-      __ cmp32(rax, mxcsr_std);\n+      __ cmp32(rax, mxcsr_std, rscratch1);\n@@ -629,1 +628,1 @@\n-      __ ldmxcsr(mxcsr_std);\n+      __ ldmxcsr(mxcsr_std, rscratch1);\n@@ -1045,1 +1044,1 @@\n-    __ incrementl(ExternalAddress((address) StubRoutines::verify_oop_count_addr()));\n+    __ incrementl(ExternalAddress((address) StubRoutines::verify_oop_count_addr()), rscratch1);\n@@ -1677,1 +1676,1 @@\n-    inc_counter_np(get_profile_ctr(shift)); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -1852,1 +1851,1 @@\n-    inc_counter_np(get_profile_ctr(shift)); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -1966,1 +1965,1 @@\n-    inc_counter_np(SharedRuntime::_jbyte_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2067,1 +2066,1 @@\n-    inc_counter_np(SharedRuntime::_jbyte_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2080,1 +2079,1 @@\n-    inc_counter_np(SharedRuntime::_jbyte_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2186,1 +2185,1 @@\n-    inc_counter_np(SharedRuntime::_jshort_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2302,1 +2301,1 @@\n-    inc_counter_np(SharedRuntime::_jshort_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2315,1 +2314,1 @@\n-    inc_counter_np(SharedRuntime::_jshort_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2422,1 +2421,1 @@\n-    inc_counter_np(SharedRuntime::_jint_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2527,1 +2526,1 @@\n-    inc_counter_np(SharedRuntime::_jint_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2543,1 +2542,1 @@\n-    inc_counter_np(SharedRuntime::_jint_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2635,1 +2634,1 @@\n-      inc_counter_np(SharedRuntime::_jlong_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+      INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2652,5 +2651,3 @@\n-    if (is_oop) {\n-      inc_counter_np(SharedRuntime::_oop_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n-    } else {\n-      inc_counter_np(SharedRuntime::_jlong_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n-    }\n+    INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n+                            SharedRuntime::_jlong_array_copy_ctr,\n+                   rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2737,1 +2734,1 @@\n-      inc_counter_np(SharedRuntime::_jlong_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+      INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2753,5 +2750,3 @@\n-    if (is_oop) {\n-      inc_counter_np(SharedRuntime::_oop_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n-    } else {\n-      inc_counter_np(SharedRuntime::_jlong_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n-    }\n+    INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n+                            SharedRuntime::_jlong_array_copy_ctr,\n+                   rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2977,1 +2972,1 @@\n-    inc_counter_np(SharedRuntime::_checkcast_array_copy_ctr); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_checkcast_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -3018,1 +3013,1 @@\n-    inc_counter_np(SharedRuntime::_unsafe_array_copy_ctr);\n+    INC_COUNTER_NP(SharedRuntime::_unsafe_array_copy_ctr, rscratch1);\n@@ -3141,1 +3136,1 @@\n-    inc_counter_np(SharedRuntime::_generic_array_copy_ctr);\n+    INC_COUNTER_NP(SharedRuntime::_generic_array_copy_ctr, rscratch1);\n@@ -7441,1 +7436,1 @@\n-    __ set_last_Java_frame(rsp, rbp, the_pc);\n+    __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n@@ -7633,1 +7628,1 @@\n-    __ set_last_Java_frame(rsp, rbp, the_pc);\n+    __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n@@ -7726,1 +7721,1 @@\n-    __ set_last_Java_frame(rsp, rbp, the_pc);\n+    __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":35,"deletions":40,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -584,1 +584,1 @@\n-    __ load_mirror(rax, rbx);\n+    __ load_mirror(rax, rbx, rscratch2);\n@@ -628,1 +628,1 @@\n-  __ load_mirror(rdx, rbx);\n+  __ load_mirror(rdx, rbx, rscratch2);\n@@ -1003,1 +1003,1 @@\n-    __ cmpptr(rax, unsatisfied.addr());\n+    __ cmpptr(rax, unsatisfied.addr(), rscratch1);\n@@ -1023,1 +1023,1 @@\n-   __ set_last_Java_frame(thread, noreg, rbp, __ pc());\n+   __ set_last_Java_frame(thread, noreg, rbp, __ pc(), noreg);\n@@ -1029,1 +1029,1 @@\n-   __ set_last_Java_frame(rsp, rbp, (address) __ pc());\n+   __ set_last_Java_frame(rsp, rbp, (address) __ pc(), rscratch1);\n@@ -1055,1 +1055,1 @@\n-  __ restore_cpu_control_state_after_jni();\n+  __ restore_cpu_control_state_after_jni(rscratch1);\n@@ -1078,1 +1078,1 @@\n-              float_handler.addr());\n+              float_handler.addr(), noreg);\n@@ -1081,1 +1081,1 @@\n-              double_handler.addr());\n+              double_handler.addr(), noreg);\n@@ -1622,1 +1622,1 @@\n-  __ set_last_Java_frame(thread, noreg, rbp, __ pc());\n+  __ set_last_Java_frame(thread, noreg, rbp, __ pc(), noreg);\n@@ -1629,1 +1629,1 @@\n-  __ set_last_Java_frame(noreg, rbp, __ pc());\n+  __ set_last_Java_frame(noreg, rbp, __ pc(), rscratch1);\n@@ -1825,1 +1825,1 @@\n-  __ incrementl(ExternalAddress((address) &BytecodeCounter::_counter_value));\n+  __ incrementl(ExternalAddress((address) &BytecodeCounter::_counter_value), rscratch1);\n@@ -1829,1 +1829,1 @@\n-  __ incrementl(ExternalAddress((address) &BytecodeHistogram::_counters[t->bytecode()]));\n+  __ incrementl(ExternalAddress((address) &BytecodeHistogram::_counters[t->bytecode()]), rscratch1);\n@@ -1838,1 +1838,1 @@\n-  __ mov32(ExternalAddress((address) &BytecodePairHistogram::_index), rbx);\n+  __ mov32(ExternalAddress((address) &BytecodePairHistogram::_index), rbx, rscratch1);\n@@ -1866,1 +1866,2 @@\n-           StopInterpreterAt);\n+           StopInterpreterAt,\n+           rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-      __ movflt(xmm0, ExternalAddress((address) &one));\n+      __ movflt(xmm0, ExternalAddress((address) &one), rscratch1);\n@@ -295,1 +295,1 @@\n-      __ movflt(xmm0, ExternalAddress((address) &two));\n+      __ movflt(xmm0, ExternalAddress((address) &two), rscratch1);\n@@ -323,1 +323,1 @@\n-      __ movdbl(xmm0, ExternalAddress((address) &one));\n+      __ movdbl(xmm0, ExternalAddress((address) &one), rscratch1);\n@@ -449,1 +449,1 @@\n-    __ resolve_oop_handle(tmp);\n+    __ resolve_oop_handle(tmp, rscratch2);\n@@ -1130,1 +1130,0 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n@@ -1132,1 +1131,1 @@\n-  __ load_klass(rbx, rax, tmp_load_klass);\n+  __ load_klass(rbx, rax, rscratch1);\n@@ -1134,1 +1133,1 @@\n-  __ load_klass(rax, rdx, tmp_load_klass);\n+  __ load_klass(rax, rdx, rscratch1);\n@@ -1177,2 +1176,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  __ load_klass(rcx, rdx, tmp_load_klass);\n+  __ load_klass(rcx, rdx, rscratch1);\n@@ -1549,1 +1547,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -1558,1 +1556,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -1567,1 +1565,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -1612,1 +1610,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -1622,1 +1620,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -1631,1 +1629,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -1660,1 +1658,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -1694,1 +1692,1 @@\n-    __ xorps(xmm0, ExternalAddress((address) float_signflip));\n+    __ xorps(xmm0, ExternalAddress((address) float_signflip), rscratch1);\n@@ -1706,1 +1704,1 @@\n-    __ xorpd(xmm0, ExternalAddress((address) double_signflip));\n+    __ xorpd(xmm0, ExternalAddress((address) double_signflip), rscratch1);\n@@ -1827,1 +1825,1 @@\n-    __ cmp64(rax, ExternalAddress((address) &is_nan));\n+    __ cmp64(rax, ExternalAddress((address) &is_nan), rscratch1);\n@@ -1851,1 +1849,1 @@\n-    __ cmp64(rax, ExternalAddress((address) &is_nan));\n+    __ cmp64(rax, ExternalAddress((address) &is_nan), rscratch1);\n@@ -1863,1 +1861,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -2054,1 +2052,1 @@\n-#endif\n+#endif \/\/ _LP64\n@@ -2108,1 +2106,1 @@\n-#else\n+#else \/\/ !_LP64\n@@ -2571,2 +2569,1 @@\n-    Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-    __ load_klass(rdi, robj, tmp_load_klass);\n+    __ load_klass(rdi, robj, rscratch1);\n@@ -2720,1 +2717,1 @@\n-    __ resolve_oop_handle(obj);\n+    __ resolve_oop_handle(obj, rscratch2);\n@@ -3612,3 +3609,6 @@\n-    LP64_ONLY(__ lea(rscratch1, table));\n-    LP64_ONLY(__ movptr(flags, Address(rscratch1, flags, Address::times_ptr)));\n-    NOT_LP64(__ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr))));\n+#ifdef _LP64\n+    __ lea(rscratch1, table);\n+    __ movptr(flags, Address(rscratch1, flags, Address::times_ptr));\n+#else\n+    __ movptr(flags, ArrayAddress(table, Address(noreg, flags, Address::times_ptr)));\n+#endif \/\/ _LP64\n@@ -3662,2 +3662,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  __ load_klass(rax, recv, tmp_load_klass);\n+  __ load_klass(rax, recv, rscratch1);\n@@ -3755,2 +3754,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  __ load_klass(rlocals, rcx, tmp_load_klass);\n+  __ load_klass(rlocals, rcx, rscratch1);\n@@ -3779,1 +3777,1 @@\n-  __ load_klass(rdx, rcx, tmp_load_klass);\n+  __ load_klass(rdx, rcx, rscratch1);\n@@ -4008,2 +4006,1 @@\n-    Register tmp_store_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-    __ store_klass(rax, rcx, tmp_store_klass);  \/\/ klass\n+    __ store_klass(rax, rcx, rscratch1);  \/\/ klass\n@@ -4012,1 +4009,1 @@\n-      SkipIfEqual skip_if(_masm, &DTraceAllocProbes, 0);\n+      SkipIfEqual skip_if(_masm, &DTraceAllocProbes, 0, rscratch1);\n@@ -4103,2 +4100,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  __ load_klass(rbx, rdx, tmp_load_klass);\n+  __ load_klass(rbx, rdx, rscratch1);\n@@ -4161,2 +4157,1 @@\n-  Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);\n-  __ load_klass(rdx, rdx, tmp_load_klass);\n+  __ load_klass(rdx, rdx, rscratch1);\n@@ -4167,1 +4162,1 @@\n-  __ load_klass(rdx, rax, tmp_load_klass);\n+  __ load_klass(rdx, rax, rscratch1);\n@@ -4406,1 +4401,1 @@\n-  __ jump(ArrayAddress(wtable, Address(noreg, rbx, Address::times_ptr)));\n+  __ jump(ArrayAddress(wtable, Address(noreg, rbx, Address::times_ptr)), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":38,"deletions":43,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    __ cmp32(rax, mxcsr_std);\n+    __ cmp32(rax, mxcsr_std, rscratch1);\n@@ -120,1 +120,1 @@\n-    __ ldmxcsr(mxcsr_std);\n+    __ ldmxcsr(mxcsr_std, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/upcallLinker_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  Register tmp_load_klass = rscratch1;\n@@ -73,1 +72,1 @@\n-    __ incrementq(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n+    __ incrementq(ExternalAddress(SharedRuntime::nof_megamorphic_calls_addr()), rscratch1);\n@@ -84,1 +83,1 @@\n-  __ load_klass(rax, j_rarg0, tmp_load_klass);\n+  __ load_klass(rax, j_rarg0, rscratch1);\n@@ -167,1 +166,1 @@\n-    __ incrementq(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n+    __ incrementq(ExternalAddress(SharedRuntime::nof_megamorphic_calls_addr()), rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_64.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1346,1 +1346,1 @@\n-  __ pushptr(here.addr());\n+  __ pushptr(here.addr(), noreg);\n@@ -1395,2 +1395,0 @@\n-  static address vector_float_signflip() { return StubRoutines::x86::vector_float_sign_flip();}\n-  static address vector_double_signflip() { return StubRoutines::x86::vector_double_sign_flip();}\n@@ -7355,3 +7353,3 @@\n-    __ vector_castF2I_avx($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                          $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister,\n-                          ExternalAddress(vector_float_signflip()), noreg, vlen_enc);\n+    __ vector_castF2I_avx($dst$$XMMRegister, $src$$XMMRegister,\n+                          ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), vlen_enc,\n+                          $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister);\n@@ -7371,3 +7369,3 @@\n-    __ vector_castF2I_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                           $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                           ExternalAddress(vector_float_signflip()), noreg, vlen_enc);\n+    __ vector_castF2I_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                           ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), vlen_enc,\n+                           $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7390,3 +7388,3 @@\n-      __ vector_castF2L_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                             $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                             ExternalAddress(vector_double_signflip()), noreg, vlen_enc);\n+      __ vector_castF2L_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                             ExternalAddress(StubRoutines::x86::vector_double_sign_flip()), vlen_enc,\n+                             $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7395,3 +7393,3 @@\n-      __ vector_castF2I_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                             $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                             ExternalAddress(vector_float_signflip()), noreg, vlen_enc);\n+      __ vector_castF2I_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                             ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), vlen_enc,\n+                             $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7428,3 +7426,3 @@\n-    __ vector_castD2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                           $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                           ExternalAddress(vector_double_signflip()), noreg, vlen_enc);\n+    __ vector_castD2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister,\n+                           ExternalAddress(StubRoutines::x86::vector_double_sign_flip()), vlen_enc,\n+                           $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7452,1 +7450,1 @@\n-instruct vround_float_avx(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_avx(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, vec xtmp3, vec xtmp4, rFlagsReg cr) %{\n@@ -7457,2 +7455,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $xtmp3, $xtmp4 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP xtmp4, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $xtmp3, $xtmp4 as TEMP\" %}\n@@ -7462,3 +7460,3 @@\n-    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                              $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister,\n-                              ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_float_avx($dst$$XMMRegister, $src$$XMMRegister,\n+                              ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), new_mxcsr, vlen_enc,\n+                              $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $xtmp3$$XMMRegister, $xtmp4$$XMMRegister);\n@@ -7469,1 +7467,1 @@\n-instruct vround_float_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_float_evex(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rFlagsReg cr) %{\n@@ -7474,2 +7472,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_float $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, KILL cr);\n+  format %{ \"vector_round_float $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $ktmp1, $ktmp2 as TEMP\" %}\n@@ -7479,3 +7477,3 @@\n-    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                               $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                               ExternalAddress(vector_float_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_float_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                               ExternalAddress(StubRoutines::x86::vector_float_sign_flip()), new_mxcsr, vlen_enc,\n+                               $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7486,1 +7484,1 @@\n-instruct vround_reg_evex(vec dst, vec src, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rRegP scratch, rFlagsReg cr) %{\n+instruct vround_reg_evex(vec dst, vec src, rRegP tmp, vec xtmp1, vec xtmp2, kReg ktmp1, kReg ktmp2, rFlagsReg cr) %{\n@@ -7489,2 +7487,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2, TEMP scratch, KILL cr);\n-  format %{ \"vector_round_long $dst,$src\\t! using $xtmp1, $xtmp2, $ktmp1, $ktmp2 and $scratch as TEMP\" %}\n+  effect(TEMP dst, TEMP tmp, TEMP xtmp1, TEMP xtmp2, TEMP ktmp1, TEMP ktmp2,  KILL cr);\n+  format %{ \"vector_round_long $dst,$src\\t! using $tmp, $xtmp1, $xtmp2, $ktmp1, $ktmp2 as TEMP\" %}\n@@ -7494,3 +7492,3 @@\n-    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n-                                $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister,\n-                                ExternalAddress(vector_double_signflip()), new_mxcsr, $scratch$$Register, vlen_enc);\n+    __ vector_round_double_evex($dst$$XMMRegister, $src$$XMMRegister,\n+                                ExternalAddress(StubRoutines::x86::vector_double_sign_flip()), new_mxcsr, vlen_enc,\n+                                $tmp$$Register, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister, $ktmp1$$KRegister, $ktmp2$$KRegister);\n@@ -7500,1 +7498,3 @@\n-#endif\n+\n+#endif \/\/ _LP64\n+\n@@ -9393,2 +9393,2 @@\n-    __ vector_reverse_bit_gfni(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp$$XMMRegister,\n-                               addr, noreg, vec_enc);\n+    __ vector_reverse_bit_gfni(bt, $dst$$XMMRegister, $src$$XMMRegister, addr, vec_enc,\n+                               $xtmp$$XMMRegister);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -12632,1 +12632,1 @@\n-    __ jump(ArrayAddress($constantaddress, index));\n+    __ jump(ArrayAddress($constantaddress, index), noreg);\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  masm->jump(ExternalAddress((address)&HandleExceptionFromCodeCache));\n+  masm->jump(ExternalAddress((address)&HandleExceptionFromCodeCache), rscratch1);\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static address* ptrs_base_addr()           { return &_narrow_oop._base; }\n+  static address  ptrs_base_addr()           { return (address)&_narrow_oop._base; }\n","filename":"src\/hotspot\/share\/oops\/compressedOops.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}