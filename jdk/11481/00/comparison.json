{"files":[{"patch":"@@ -623,1 +623,1 @@\n-  \/\/ Find true target\n+  \/\/ NeverBranch sits at end_idx, the two projections right after it\n@@ -625,2 +625,11 @@\n-  int idx = b->get_node(end_idx+1)->as_Proj()->_con;\n-  Block *succ = b->_succs[idx];\n+  int taken_idx = b->get_node(end_idx+1)->as_Proj()->_con;\n+  ProjNode* alwaysTaken = b->get_node(end_idx + 1 + taken_idx)->as_Proj();\n+  ProjNode* neverTaken  = b->get_node(end_idx + 2 - taken_idx)->as_Proj();\n+  assert(alwaysTaken->_con == 0 && neverTaken->_con == 1, \"correct projection constants\");\n+  \/\/ if alwaysTaken projects into _succs[0], dead_idx == 1\n+  int dead_idx = b->_succs[0]->get_node(0) == alwaysTaken->unique_ctrl_out_or_null();\n+  Block* succ = b->_succs[1 - dead_idx];\n+  Block* dead = b->_succs[dead_idx];\n+  assert(alwaysTaken->unique_ctrl_out_or_null() == succ->get_node(0), \"alwaysTaken leads to succ block\");\n+  assert(neverTaken->unique_ctrl_out_or_null() == dead->get_node(0), \"neverTaken leads to dead block\");\n+\n@@ -645,1 +654,0 @@\n-  Block* dead = b->_succs[1 - idx];\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+super public class TestPhaseCFGNeverBranchToGoto\n+{\n+    public Method \"<init>\":\"()V\"\n+    stack 2 locals 1\n+    {\n+        aload_0;\n+        invokespecial  Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+    static Method test:\"(III)V\"\n+    stack 200 locals 200\n+    {\n+        iload      2;\n+        ifeq LEND; \/\/ at runtime avoid the infinite-loop\n+\n+        iload      0;\n+        ifeq L20;\n+        goto L10;\n+    L10:\n+        goto L11;\n+    L11:\n+        iinc 0, 1;\n+        iload      1;\n+        ifge L10;\n+        goto L11;\n+    L20:\n+        iload      1;\n+        ifle L21;\n+        goto L10;\n+    L21:\n+        iconst_m1; \/\/ eventually false\n+        ifge L11;\n+        goto L20;\n+\n+    LEND:\n+        return;\n+    }\n+    public static Method main:\"([Ljava\/lang\/String;)V\"\n+    stack 100 locals 100\n+    {\n+        iconst_0;\n+        iconst_m1;\n+        iconst_0;\n+        invokestatic    Method test:\"(III)V\";\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestPhaseCFGNeverBranchToGoto.jasm","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296389\n+ * @summary Peeling of Irreducible loop can lead to NeverBranch being visited from either side\n+ * @run main\/othervm -Xcomp -Xbatch -XX:-TieredCompilation -XX:PerMethodTrapLimit=0\n+ *      -XX:CompileCommand=compileonly,TestPhaseCFGNeverBranchToGotoMain::test\n+ *      TestPhaseCFGNeverBranchToGotoMain\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8296389\n+ * @compile TestPhaseCFGNeverBranchToGoto.jasm\n+ * @summary Peeling of Irreducible loop can lead to NeverBranch being visited from either side\n+ * @run main\/othervm -Xcomp -Xbatch -XX:-TieredCompilation -XX:PerMethodTrapLimit=0\n+ *      -XX:CompileCommand=compileonly,TestPhaseCFGNeverBranchToGoto::test\n+ *      TestPhaseCFGNeverBranchToGoto\n+ *\/\n+\n+\n+public class TestPhaseCFGNeverBranchToGotoMain {\n+    public static void main (String[] args) {\n+        test(false, false);\n+    }\n+    public static void test(boolean flag1, boolean flag2) {\n+        if (flag1) { \/\/ runtime check, avoid infinite loop\n+            int a = 77;\n+            int b = 0;\n+            do { \/\/ empty loop\n+                a--;\n+                b++;\n+            } while (a > 0);\n+            \/\/ a == 0, b == 77 - after first loop-opts phase\n+            int p = 0;\n+            for (int i = 0; i < 4; i++) {\n+                if ((i % 2) == 0) {\n+                    p = 1;\n+                }\n+            }\n+            \/\/ p == 1 - after second loop-opts phase (via unrolling)\n+            \/\/ in first loop-opts phase we have 2x unrolling, 4x after second\n+            int x = 1;\n+            if (flag2) {\n+                x = 3;\n+            } \/\/ have region here, so that NeverBranch does not get removed\n+            do { \/\/ infinite loop\n+                do {\n+                    \/\/ NeverBranch inserted here, during loop-opts 1\n+                    x *= 2;\n+                    if (p == 0) { \/\/ reason for peeling in loop-opts 1\n+                        \/\/ after we know that p == 1, we lose this exit\n+                        break;\n+                    }\n+                    \/\/ once we know that b == 77, we lose exit\n+            } while (b == 77);\n+            \/\/ after we lost both exits above, this loop gets cut off\n+            int y = 5;\n+                do {\n+                    y *= 3;\n+                } while (b == 77);\n+            } while (true);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestPhaseCFGNeverBranchToGotoMain.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}