{"files":[{"patch":"@@ -65,0 +65,1 @@\n+import static java.lang.invoke.LambdaForm.BasicType.V_TYPE;\n@@ -5207,0 +5208,23 @@\n+    \/**\n+     * Drop the return value of the target handle (if any).\n+     * The returned method handle will have a {@code void} return type.\n+     *\n+     * @param target the method handle to adapt\n+     * @return a possibly adapted method handle\n+     * @throws NullPointerException if {@code target} is null\n+     * @since 16\n+     *\/\n+    public static MethodHandle dropReturn(MethodHandle target) {\n+        Objects.requireNonNull(target);\n+        MethodType oldType = target.type();\n+        Class<?> oldReturnType = oldType.returnType();\n+        if (oldReturnType == void.class)\n+            return target;\n+        MethodType newType = oldType.changeReturnType(void.class);\n+        BoundMethodHandle result = target.rebind();\n+        LambdaForm lform = result.form;\n+        lform = lform.editor().filterReturnForm(V_TYPE, true);\n+        result = result.copyWith(newType, lform);\n+        return result;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8027823\n+ * @run testng TestDropReturn\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestDropReturn {\n+\n+    @Test(dataProvider = \"dropReturnCases\")\n+    public void testDropReturn(Class<?> cls, Object testValue) throws Throwable {\n+        MethodHandle mh = MethodHandles.identity(cls);\n+        assertEquals(mh.type(), methodType(cls, cls));\n+        Object x = mh.invoke(testValue);\n+        assertEquals(x, testValue);\n+\n+        mh = MethodHandles.dropReturn(mh);\n+        assertEquals(mh.type(), methodType(void.class, cls));\n+        mh.invoke(testValue); \/\/ should at least work\n+    }\n+\n+    @DataProvider\n+    public static Object[][] dropReturnCases() {\n+        return new Object[][]{\n+            { boolean.class, true         },\n+            { byte.class,    (byte) 10    },\n+            { char.class,    'x'          },\n+            { short.class,   (short) 10   },\n+            { int.class,     10           },\n+            { long.class,    10L          },\n+            { float.class,   10F          },\n+            { double.class,  10D          },\n+            { Object.class,  new Object() },\n+            { String.class,  \"ABCD\"       },\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/MethodHandles\/TestDropReturn.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}