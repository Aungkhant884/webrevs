{"files":[{"patch":"@@ -63,1 +63,1 @@\n-public class DefaultLoaderDelegate implements LoaderDelegate {\n+class DefaultLoaderDelegate implements LoaderDelegate {\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/DefaultLoaderDelegate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.HashMap;\n@@ -43,12 +42,0 @@\n-    \/**\n-     * Controls the default {@link LoaderDelegate}'s internal {@link ClassLoader}'s parent loader.\n-     *\n-     * <p>\n-     * This parameter takes a boolean value. When false (the default), the {@link LoaderDelegate}'s internal\n-     * {@link ClassLoader} is configured with the {@linkplain ClassLoader#getSystemClassLoader system loader}\n-     * as its parent loader. When true, the current thread's {@linkplain Thread#getContextClassLoader context loader}\n-     * is used instead; this makes more application classes visible to the {@link ExecutionControl}\n-     * in certain class loading scenarios, e.g., servlet containers.\n-     *\/\n-    public static final String PARAM_CONTEXT_LOADER_PARENT = \"contextLoaderParent\";\n-\n@@ -76,0 +63,1 @@\n+     * {@code LocalExecutionControlProvider} has no parameters.\n@@ -77,1 +65,1 @@\n-     * @return the default parameter map\n+     * @return an empty parameter map\n@@ -80,4 +68,2 @@\n-    public Map<String, String> defaultParameters() {\n-        final HashMap<String, String> map = new HashMap<>(1);\n-        map.put(PARAM_CONTEXT_LOADER_PARENT, String.valueOf(false));\n-        return map;\n+    public Map<String,String> defaultParameters() {\n+        return ExecutionControlProvider.super.defaultParameters();\n@@ -97,2 +83,2 @@\n-        \/\/ Create LoaderDelegate\n-        LoaderDelegate loaderDelegate = createLoaderDelegate(env, parameters);\n+        \/\/ Create ExecutionControl\n+        ExecutionControl executionControl = createExecutionControl(env, parameters);\n@@ -105,1 +91,1 @@\n-                loaderDelegate.addToClasspath(remoteOptions.get(classPathIndex));\n+                executionControl.addToClasspath(remoteOptions.get(classPathIndex));\n@@ -111,2 +97,2 @@\n-        \/\/ Create ExecutionControl\n-        return createExecutionControl(env, parameters, loaderDelegate);\n+        \/\/ Done\n+        return executionControl;\n@@ -116,18 +102,9 @@\n-     * Create the {@link LoaderDelegate} to be used.\n-     *\/\n-    LoaderDelegate createLoaderDelegate(ExecutionEnv env, Map<String, String> parameters) {\n-\n-        \/\/ Get parameters\n-        boolean contextLoaderParent = Boolean.valueOf(parameters.get(PARAM_CONTEXT_LOADER_PARENT));\n-\n-        \/\/ Get the context loader (note, it can be null)\n-        ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n-\n-        \/\/ Create LoaderDelegate\n-        return contextLoaderParent && contextLoader != null ?\n-          new DefaultLoaderDelegate(contextLoader) :\n-          new DefaultLoaderDelegate();\n-    }\n-\n-    \/**\n-     * Create the {@link ExecutionControl} using the specified delegate.\n+     * Create a new {@link ExecutionControl} instance.\n+     *\n+     * <p>\n+     * This method is invoked by {@link #generate generate()}.\n+     *\n+     * @param env the {@code ExecutionEnv} for which the {@link ExecutionControl} should be created\n+     * @param parameters the parameters that were passed to {@link #generate generate()}\n+     * @return the newly created {@code ExecutionControl}\n+     * @since 22\n@@ -135,2 +112,2 @@\n-    ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters, LoaderDelegate delegate) {\n-        return new LocalExecutionControl(delegate);\n+    public ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters) {\n+        return new LocalExecutionControl(new DefaultLoaderDelegate());\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControlProvider.java","additions":20,"deletions":43,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Verify function of LocalExecutionControlProvider \"contextLoaderParent\" parameter\n+ * @summary Verify function of LocalExecutionControlProvider createExecutionControl() method override\n@@ -36,0 +36,1 @@\n+import java.io.IOException;\n@@ -39,0 +40,2 @@\n+import java.nio.file.Path;\n+import java.util.Arrays;\n@@ -40,0 +43,9 @@\n+import java.util.Map;\n+import java.nio.file.Files;\n+\n+import jdk.jshell.execution.LocalExecutionControl;\n+import jdk.jshell.execution.LocalExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionControl;\n+import jdk.jshell.spi.ExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionEnv;\n+\n@@ -41,0 +53,1 @@\n+import org.testng.annotations.BeforeTest;\n@@ -44,0 +57,7 @@\n+    @BeforeTest\n+    public void installParentTestProvider() throws IOException {\n+        Path dir = createSubdir(classesDir, \"META-INF\/services\");\n+        Files.write(dir.resolve(ExecutionControlProvider.class.getName()),\n+          Arrays.asList(ParentTestExecutionControlProvider.class.getName()));\n+    }\n+\n@@ -57,1 +77,1 @@\n-        args = this.prependArgs(args, \"--execution\", \"local:contextLoaderParent(true)\");\n+        args = this.prependArgs(args, \"--execution\", \"parentTest\");\n@@ -69,0 +89,15 @@\n+\n+\/\/ ParentTestExecutionControlProvider\n+\n+    public static class ParentTestExecutionControlProvider extends LocalExecutionControlProvider {\n+\n+        @Override\n+        public String name() {\n+            return \"parentTest\";\n+        }\n+\n+        @Override\n+        public ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters) {\n+            return new LocalExecutionControl(Thread.currentThread().getContextClassLoader());\n+        }\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionContextLoaderParentTest.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -71,1 +71,5 @@\n-        Path dir = baseDir.resolve(name);\n+        return createSubdir(baseDir, name);\n+    }\n+\n+    protected Path createSubdir(Path base, String name) throws IOException {\n+        Path dir = base.resolve(name);\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionTestSupport.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}