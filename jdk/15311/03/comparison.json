{"files":[{"patch":"@@ -76,0 +76,4 @@\n+        RemoteClassLoader(ClassLoader parent) {\n+            super(new URL[0], parent);\n+        }\n+\n@@ -219,0 +223,7 @@\n+    \/**\n+     * Default constructor.\n+     *\n+     * <p>\n+     * The internal class loader will use the\n+     * {@linkplain ClassLoader#getSystemClassLoader system class loader} as its parent loader.\n+     *\/\n@@ -224,0 +235,13 @@\n+    \/**\n+     * Creates an instance with the given parent class loader.\n+     *\n+     * <p>\n+     * The internal class loader will use the given parent class loader.\n+     *\n+     * @param parent parent class loader\n+     *\/\n+    public DefaultLoaderDelegate(ClassLoader parent) {\n+        this.loader = new RemoteClassLoader(parent);\n+        Thread.currentThread().setContextClassLoader(loader);\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/DefaultLoaderDelegate.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-     * Create an instance using the default class loading.\n+     * Create an instance using the default class loading, which delegates to the system class loader.\n@@ -68,0 +68,10 @@\n+    \/**\n+     * Create an instance using the default class loading, but delegating to the specified parent class loader.\n+     *\n+     * @param parent parent class loader\n+     * @since 22\n+     *\/\n+    public LocalExecutionControl(ClassLoader parent) {\n+        super(new DefaultLoaderDelegate(parent));\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -81,1 +82,17 @@\n-        return new LocalExecutionControl();\n+\n+        \/\/ Create ExecutionControl\n+        ExecutionControl executionControl = createExecutionControl(env, parameters);\n+\n+        \/\/ Apply any configured class path\n+        List<String> remoteOptions = env.extraRemoteVMOptions();\n+        int classPathIndex = remoteOptions.indexOf(\"--class-path\") + 1;\n+        if (classPathIndex > 0 && classPathIndex < remoteOptions.size()) {\n+            try {\n+                executionControl.addToClasspath(remoteOptions.get(classPathIndex));\n+            } catch (ExecutionControl.ExecutionControlException e) {\n+                throw new RuntimeException(\"error configuring class path\", e);\n+            }\n+        }\n+\n+        \/\/ Done\n+        return executionControl;\n@@ -84,0 +101,14 @@\n+    \/**\n+     * Create a new {@link ExecutionControl} instance.\n+     *\n+     * <p>\n+     * This method is invoked by {@link #generate generate()}.\n+     *\n+     * @param env the {@code ExecutionEnv} for which the {@link ExecutionControl} should be created\n+     * @param parameters the parameters that were passed to {@link #generate generate()}\n+     * @return the newly created {@code ExecutionControl}\n+     * @since 22\n+     *\/\n+    public ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters) {\n+        return new LocalExecutionControl(new DefaultLoaderDelegate());\n+    }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControlProvider.java","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314327\n+ * @summary Verify the \"--class-path\" flag works properly in local execution mode\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask LocalExecutionTestSupport\n+ * @run testng\/othervm LocalExecutionClassPathTest\n+ *\/\n+\n+import java.util.Locale;\n+import org.testng.annotations.Test;\n+\n+public class LocalExecutionClassPathTest extends LocalExecutionTestSupport {\n+\n+    @Override\n+    public void test(Locale locale, boolean defaultStartUp, String[] args, String startMsg, ReplTest... tests) {\n+\n+        \/\/ Set local execution with context class loader\n+        args = this.prependArgs(args,\n+          \"--execution\", \"local\",\n+          \"--class-path\", this.classesDir.toString());\n+\n+        \/\/ Verify MyClass can be found by both the compiler and the execution engine\n+        super.test(locale, defaultStartUp, args, startMsg, tests);\n+    }\n+\n+    @Test\n+    public void verifyMyClassFoundOnClassPath() {\n+        test(new String[] { \"--no-startup\" },\n+            a -> assertCommand(a, \"test.MyClass.class\", \"$1 ==> class test.MyClass\")\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionClassPathTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314327\n+ * @summary Verify function of LocalExecutionControlProvider createExecutionControl() method override\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask LocalExecutionTestSupport\n+ * @run testng\/othervm LocalExecutionContextLoaderParentTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.nio.file.Files;\n+\n+import jdk.jshell.execution.LocalExecutionControl;\n+import jdk.jshell.execution.LocalExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionControl;\n+import jdk.jshell.spi.ExecutionControlProvider;\n+import jdk.jshell.spi.ExecutionEnv;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.BeforeTest;\n+\n+public class LocalExecutionContextLoaderParentTest extends LocalExecutionTestSupport {\n+\n+    @BeforeTest\n+    public void installParentTestProvider() throws IOException {\n+        Path dir = createSubdir(classesDir, \"META-INF\/services\");\n+        Files.write(dir.resolve(ExecutionControlProvider.class.getName()),\n+          Arrays.asList(ParentTestExecutionControlProvider.class.getName()));\n+    }\n+\n+    @Override\n+    public void test(Locale locale, boolean defaultStartUp, String[] args, String startMsg, ReplTest... tests) {\n+\n+        \/\/ Make test.MyClass visible to the context class loader\n+        final URL classesDirURL;\n+        try {\n+            classesDirURL = this.classesDir.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+        Thread.currentThread().setContextClassLoader(new URLClassLoader(new URL[] { classesDirURL }));\n+\n+        \/\/ Set local execution with context class loader as parent loader\n+        args = this.prependArgs(args, \"--execution\", \"parentTest\");\n+\n+        \/\/ Verify the execution engine can find MyClass (we don't care whether the compiler can find it in this test)\n+        super.test(locale, defaultStartUp, args, startMsg, tests);\n+    }\n+\n+    @Test\n+    public void verifyMyClassFoundByExecutionEngine() {\n+        test(new String[] { \"--no-startup\" },\n+            a -> assertCommand(a, \"Class.forName(\\\"test.MyClass\\\").getField(\\\"FOO\\\").get(null)\", \"$1 ==> \\\"bar\\\"\")\n+        );\n+    }\n+\n+\/\/ ParentTestExecutionControlProvider\n+\n+    public static class ParentTestExecutionControlProvider extends LocalExecutionControlProvider {\n+\n+        @Override\n+        public String name() {\n+            return \"parentTest\";\n+        }\n+\n+        @Override\n+        public ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters) {\n+            return new LocalExecutionControl(Thread.currentThread().getContextClassLoader());\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionContextLoaderParentTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.testng.annotations.BeforeTest;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+\/*\n+ * This class installs a class in a temporary diretory so we can test\n+ * finding classes that are not visible to the system class loader.\n+ *\/\n+public class LocalExecutionTestSupport extends ReplToolTesting {\n+\n+    public static final String MY_CLASS_SOURCE = \"\"\"\n+        package test;\n+        public class MyClass {\n+            public static final String FOO = \"bar\";\n+        }\"\"\";\n+\n+    protected final ToolBox tb = new ToolBox();\n+\n+    protected Path baseDir;                 \/\/ base working directory\n+    protected Path sourcesDir;              \/\/ sources directory\n+    protected Path classesDir;              \/\/ classes directory\n+\n+    \/\/ Install file \"test\/MyClass.class\" in some temporary directory somewhere\n+    @BeforeTest\n+    public void installMyClass() throws IOException {\n+\n+        \/\/ Create directories\n+        baseDir = Files.createTempDirectory(getClass().getSimpleName()).toAbsolutePath();\n+        sourcesDir = createWorkSubdir(\"sources\");\n+        classesDir = createWorkSubdir(\"classes\");\n+\n+        \/\/ Create source file\n+        tb.writeJavaFiles(sourcesDir, MY_CLASS_SOURCE);\n+\n+        \/\/ Compile source file\n+        new JavacTask(tb)\n+            .outdir(classesDir)\n+            .files(sourcesDir.resolve(\"test\/MyClass.java\"))\n+            .run();\n+    }\n+\n+    protected Path createWorkSubdir(String name) throws IOException {\n+        return createSubdir(baseDir, name);\n+    }\n+\n+    protected Path createSubdir(Path base, String name) throws IOException {\n+        Path dir = base.resolve(name);\n+        Files.createDirectories(dir);\n+        return dir;\n+    }\n+\n+    protected String[] prependArgs(String[] args, String... prepends) {\n+        String[] newArgs = new String[prepends.length + args.length];\n+        System.arraycopy(prepends, 0, newArgs, 0, prepends.length);\n+        System.arraycopy(args, 0, newArgs, prepends.length, args.length);\n+        return newArgs;\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionTestSupport.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}