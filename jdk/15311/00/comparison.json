{"files":[{"patch":"@@ -63,1 +63,1 @@\n-class DefaultLoaderDelegate implements LoaderDelegate {\n+public class DefaultLoaderDelegate implements LoaderDelegate {\n@@ -76,0 +76,4 @@\n+        RemoteClassLoader(ClassLoader parent) {\n+            super(new URL[0], parent);\n+        }\n+\n@@ -219,0 +223,7 @@\n+    \/**\n+     * Default constructor.\n+     *\n+     * <p>\n+     * The internal class loader will use the\n+     * {@linkplain ClassLoader#getSystemClassLoader system class loader} as its parent loader.\n+     *\/\n@@ -224,0 +235,13 @@\n+    \/**\n+     * Creates an instance with the given parent class loader.\n+     *\n+     * <p>\n+     * The internal class loader will use the given parent class loader.\n+     *\n+     * @param parent parent class loader\n+     *\/\n+    public DefaultLoaderDelegate(ClassLoader parent) {\n+        this.loader = new RemoteClassLoader(parent);\n+        Thread.currentThread().setContextClassLoader(loader);\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/DefaultLoaderDelegate.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-     * Create an instance using the default class loading.\n+     * Create an instance using the default class loading, which delegates to the system class loader.\n@@ -68,0 +68,7 @@\n+    \/**\n+     * Create an instance using the default class loading, but delegating to the specified parent class loader.\n+     *\/\n+    public LocalExecutionControl(ClassLoader parent) {\n+        super(new DefaultLoaderDelegate(parent));\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControl.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.HashMap;\n+import java.util.List;\n@@ -41,0 +43,12 @@\n+    \/**\n+     * Controls the default {@link LoaderDelegate}'s internal {@link ClassLoader}'s parent loader.\n+     *\n+     * <p>\n+     * This parameter takes a boolean value. When false (the default), the {@link LoaderDelegate}'s internal\n+     * {@link ClassLoader} is configured with the {@linkplain ClassLoader#getSystemClassLoader system loader}\n+     * as its parent loader. When true, the current thread's {@linkplain Thread#getContextClassLoader context loader}\n+     * is used instead; this makes more application classes visible to the {@link ExecutionControl}\n+     * in certain class loading scenarios, e.g., servlet containers.\n+     *\/\n+    public static final String PARAM_CONTEXT_LOADER_PARENT = \"contextLoaderParent\";\n+\n@@ -62,1 +76,0 @@\n-     * {@code LocalExecutionControlProvider} has no parameters.\n@@ -64,1 +77,1 @@\n-     * @return an empty parameter map\n+     * @return the default parameter map\n@@ -67,2 +80,4 @@\n-    public Map<String,String> defaultParameters() {\n-        return ExecutionControlProvider.super.defaultParameters();\n+    public Map<String, String> defaultParameters() {\n+        final HashMap<String, String> map = new HashMap<>(1);\n+        map.put(PARAM_CONTEXT_LOADER_PARENT, String.valueOf(false));\n+        return map;\n@@ -81,1 +96,17 @@\n-        return new LocalExecutionControl();\n+\n+        \/\/ Create LoaderDelegate\n+        LoaderDelegate loaderDelegate = createLoaderDelegate(env, parameters);\n+\n+        \/\/ Apply any configured class path\n+        List<String> remoteOptions = env.extraRemoteVMOptions();\n+        int classPathIndex = remoteOptions.indexOf(\"--class-path\") + 1;\n+        if (classPathIndex > 0 && classPathIndex < remoteOptions.size()) {\n+            try {\n+                loaderDelegate.addToClasspath(remoteOptions.get(classPathIndex));\n+            } catch (ExecutionControl.ExecutionControlException e) {\n+                throw new RuntimeException(\"error configuring class path\", e);\n+            }\n+        }\n+\n+        \/\/ Create ExecutionControl\n+        return createExecutionControl(env, parameters, loaderDelegate);\n@@ -84,0 +115,23 @@\n+    \/**\n+     * Create the {@link LoaderDelegate} to be used.\n+     *\/\n+    LoaderDelegate createLoaderDelegate(ExecutionEnv env, Map<String, String> parameters) {\n+\n+        \/\/ Get parameters\n+        boolean contextLoaderParent = Boolean.valueOf(parameters.get(PARAM_CONTEXT_LOADER_PARENT));\n+\n+        \/\/ Get the context loader (note, it can be null)\n+        ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n+\n+        \/\/ Create LoaderDelegate\n+        return contextLoaderParent && contextLoader != null ?\n+          new DefaultLoaderDelegate(contextLoader) :\n+          new DefaultLoaderDelegate();\n+    }\n+\n+    \/**\n+     * Create the {@link ExecutionControl} using the specified delegate.\n+     *\/\n+    ExecutionControl createExecutionControl(ExecutionEnv env, Map<String, String> parameters, LoaderDelegate delegate) {\n+        return new LocalExecutionControl(delegate);\n+    }\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/LocalExecutionControlProvider.java","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314327\n+ * @summary Verify the \"--class-path\" flag works properly in local execution mode\n+ * @run testng\/othervm LocalExecutionClassPathTest\n+ *\/\n+\n+import java.util.Locale;\n+import org.testng.annotations.Test;\n+\n+public class LocalExecutionClassPathTest extends LocalExecutionTestSupport {\n+\n+    @Override\n+    public void test(Locale locale, boolean defaultStartUp, String[] args, String startMsg, ReplTest... tests) {\n+\n+        \/\/ Set local execution with context class loader\n+        args = this.prependArgs(args,\n+          \"--execution\", \"local\",\n+          \"--class-path\", this.classesDir.toString());\n+\n+        \/\/ Verify MyClass can be found by both the compiler and the execution engine\n+        super.test(locale, defaultStartUp, args, startMsg, tests);\n+    }\n+\n+    @Test\n+    public void verifyMyClassFoundOnClassPath() {\n+        test(new String[] { \"--no-startup\" },\n+            a -> assertCommand(a, \"test.MyClass.class\", \"$1 ==> class test.MyClass\")\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionClassPathTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8314327\n+ * @summary Verify function of LocalExecutionControlProvider \"contextLoaderParent\" parameter\n+ * @run testng\/othervm LocalExecutionContextLoaderParentTest\n+ *\/\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Locale;\n+import org.testng.annotations.Test;\n+\n+public class LocalExecutionContextLoaderParentTest extends LocalExecutionTestSupport {\n+\n+    @Override\n+    public void test(Locale locale, boolean defaultStartUp, String[] args, String startMsg, ReplTest... tests) {\n+\n+        \/\/ Make test.MyClass visible to the context class loader\n+        final URL classesDirURL;\n+        try {\n+            classesDirURL = this.classesDir.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n+        }\n+        Thread.currentThread().setContextClassLoader(new URLClassLoader(new URL[] { classesDirURL }));\n+\n+        \/\/ Set local execution with context class loader as parent loader\n+        args = this.prependArgs(args, \"--execution\", \"local:contextLoaderParent(true)\");\n+\n+        \/\/ Verify the execution engine can find MyClass (we don't care whether the compiler can find it in this test)\n+        super.test(locale, defaultStartUp, args, startMsg, tests);\n+    }\n+\n+    @Test\n+    public void verifyMyClassFoundByExecutionEngine() {\n+        test(new String[] { \"--no-startup\" },\n+            a -> assertCommand(a, \"Class.forName(\\\"test.MyClass\\\").getField(\\\"FOO\\\").get(null)\", \"$1 ==> \\\"bar\\\"\")\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionContextLoaderParentTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.net.URL;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeTest;\n+\n+\/*\n+ * This class installs a class in a temporary diretory so we can test\n+ * finding classes that are not visible to the system class loader.\n+ *\/\n+public class LocalExecutionTestSupport extends ReplToolTesting {\n+\n+    \/*\n+     * This is a classfile corresponding to this source:\n+     *\n+     *      package test;\n+     *      public class MyClass {\n+     *          public static final String FOO = \"bar\";\n+     *      }\n+     *\/\n+    private static final String MYCLASS =\n+          \"cafebabe0000003400120a0003000e07\"\n+        + \"000f070010010003464f4f0100124c6a\"\n+        + \"6176612f6c616e672f537472696e673b\"\n+        + \"01000d436f6e7374616e7456616c7565\"\n+        + \"0800110100063c696e69743e01000328\"\n+        + \"2956010004436f646501000f4c696e65\"\n+        + \"4e756d6265725461626c6501000a536f\"\n+        + \"7572636546696c6501000c4d79436c61\"\n+        + \"73732e6a6176610c0008000901000c74\"\n+        + \"6573742f4d79436c6173730100106a61\"\n+        + \"76612f6c616e672f4f626a6563740100\"\n+        + \"03626172002100020003000000010019\"\n+        + \"00040005000100060000000200070001\"\n+        + \"0001000800090001000a0000001d0001\"\n+        + \"0001000000052ab70001b10000000100\"\n+        + \"0b000000060001000000020001000c00\"\n+        + \"000002000d\";\n+\n+    \/\/ The classes directory containing \"test\/MyClass.class\"\n+    protected Path classesDir;\n+\n+    \/\/ Install file \"test\/MyClass.class\" in some temporary directory somewhere\n+    @BeforeTest\n+    public void installMyClass() throws IOException {\n+        classesDir = Files.createTempDirectory(getClass().getSimpleName()).toAbsolutePath();\n+        Path testPkgDir = classesDir.resolve(\"test\");\n+        Path myclassFile = testPkgDir.resolve(\"MyClass.class\");\n+        Files.createDirectory(testPkgDir);\n+        Files.write(myclassFile, string2bytes(MYCLASS));\n+    }\n+\n+    protected String[] prependArgs(String[] args, String... prepends) {\n+        String[] newArgs = new String[prepends.length + args.length];\n+        System.arraycopy(prepends, 0, newArgs, 0, prepends.length);\n+        System.arraycopy(args, 0, newArgs, prepends.length, args.length);\n+        return newArgs;\n+    }\n+\n+    protected byte[] string2bytes(String string) {\n+        byte[] buf = new byte[string.length() \/ 2];\n+        for (int i = 0; i < string.length(); i += 2) {\n+            int value = Integer.parseInt(string.substring(i, i + 2), 16);\n+            buf[i \/ 2] = (byte)value;\n+        }\n+        return buf;\n+    }\n+}\n","filename":"test\/langtools\/jdk\/jshell\/LocalExecutionTestSupport.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}