{"files":[{"patch":"@@ -1113,0 +1113,38 @@\n+class SHA3SIMDOp(Instruction):\n+\n+    def generate(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            self.reg = [FloatRegister().generate(), FloatRegister().generate(),\n+                        FloatRegister().generate(), FloatRegister().generate()]\n+        else:\n+            self.reg = [FloatRegister().generate(), FloatRegister().generate(),\n+                        FloatRegister().generate()]\n+            if (self._name == 'xar'):\n+                self.imm6 = random.randint(0, 63)\n+        return self\n+\n+    def cstr(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T16B, %s, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2], self.reg[3])))\n+        elif (self._name == 'rax1'):\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T2D, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2])))\n+        else:\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T2D, %s, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2], self.imm6)))\n+\n+    def astr(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.16B, %s.16B, %s.16B, %s.16B' % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\"), self.reg[3].astr(\"v\"))))\n+        elif (self._name == 'rax1'):\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.2D, %s.2D, %s.2D') % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\")))\n+        else:\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.2D, %s.2D, %s.2D, #%s') % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\"), self.imm6))\n+\n@@ -1444,2 +1482,0 @@\n-generate(SHA512SIMDOp, [\"sha512h\", \"sha512h2\", \"sha512su0\", \"sha512su1\"])\n-\n@@ -1520,0 +1556,5 @@\n+# ARMv8.2A\n+generate(SHA3SIMDOp, [\"bcax\", \"eor3\", \"rax1\", \"xar\"])\n+\n+generate(SHA512SIMDOp, [\"sha512h\", \"sha512h2\", \"sha512su0\", \"sha512su1\"])\n+\n@@ -1568,2 +1609,2 @@\n-# compile for sve with 8.1 and sha2 because of lse atomics and sha512 crypto extension.\n-subprocess.check_call([AARCH64_AS, \"-march=armv8.1-a+sha2+sve\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n+# compile for sve with 8.2 and sha3 because of SHA3 crypto extension.\n+subprocess.check_call([AARCH64_AS, \"-march=armv8.2-a+sha3+sve\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -758,6 +758,0 @@\n-\/\/ SHA512SIMDOp\n-    __ sha512h(v13, __ T2D, v4, v28);                  \/\/       sha512h         q13, q4, v28.2D\n-    __ sha512h2(v23, __ T2D, v21, v25);                \/\/       sha512h2                q23, q21, v25.2D\n-    __ sha512su0(v24, __ T2D, v3);                     \/\/       sha512su0               v24.2D, v3.2D\n-    __ sha512su1(v23, __ T2D, v26, v23);               \/\/       sha512su1               v23.2D, v26.2D, v23.2D\n-\n@@ -849,9 +843,9 @@\n-    __ swp(Assembler::xword, r15, r21, r3);            \/\/       swp     x15, x21, [x3]\n-    __ ldadd(Assembler::xword, r24, r8, r25);          \/\/       ldadd   x24, x8, [x25]\n-    __ ldbic(Assembler::xword, r20, r16, r17);         \/\/       ldclr   x20, x16, [x17]\n-    __ ldeor(Assembler::xword, r2, r1, r0);            \/\/       ldeor   x2, x1, [x0]\n-    __ ldorr(Assembler::xword, r24, r4, r3);           \/\/       ldset   x24, x4, [x3]\n-    __ ldsmin(Assembler::xword, r12, zr, r28);         \/\/       ldsmin  x12, xzr, [x28]\n-    __ ldsmax(Assembler::xword, r10, r26, r2);         \/\/       ldsmax  x10, x26, [x2]\n-    __ ldumin(Assembler::xword, r12, r16, sp);         \/\/       ldumin  x12, x16, [sp]\n-    __ ldumax(Assembler::xword, r1, r13, r29);         \/\/       ldumax  x1, x13, [x29]\n+    __ swp(Assembler::xword, r13, r5, r29);            \/\/       swp     x13, x5, [x29]\n+    __ ldadd(Assembler::xword, r24, r21, r26);         \/\/       ldadd   x24, x21, [x26]\n+    __ ldbic(Assembler::xword, r24, r3, r24);          \/\/       ldclr   x24, x3, [x24]\n+    __ ldeor(Assembler::xword, r26, r23, r15);         \/\/       ldeor   x26, x23, [x15]\n+    __ ldorr(Assembler::xword, r21, r3, r24);          \/\/       ldset   x21, x3, [x24]\n+    __ ldsmin(Assembler::xword, r8, r25, r20);         \/\/       ldsmin  x8, x25, [x20]\n+    __ ldsmax(Assembler::xword, r16, r17, r2);         \/\/       ldsmax  x16, x17, [x2]\n+    __ ldumin(Assembler::xword, r1, r0, r24);          \/\/       ldumin  x1, x0, [x24]\n+    __ ldumax(Assembler::xword, r4, r3, r12);          \/\/       ldumax  x4, x3, [x12]\n@@ -860,9 +854,9 @@\n-    __ swpa(Assembler::xword, r0, r19, r12);           \/\/       swpa    x0, x19, [x12]\n-    __ ldadda(Assembler::xword, r17, r22, r13);        \/\/       ldadda  x17, x22, [x13]\n-    __ ldbica(Assembler::xword, r28, r30, sp);         \/\/       ldclra  x28, x30, [sp]\n-    __ ldeora(Assembler::xword, r1, r26, r28);         \/\/       ldeora  x1, x26, [x28]\n-    __ ldorra(Assembler::xword, r4, r30, r4);          \/\/       ldseta  x4, x30, [x4]\n-    __ ldsmina(Assembler::xword, r6, r30, r26);        \/\/       ldsmina x6, x30, [x26]\n-    __ ldsmaxa(Assembler::xword, r16, r9, r8);         \/\/       ldsmaxa x16, x9, [x8]\n-    __ ldumina(Assembler::xword, r12, r0, r20);        \/\/       ldumina x12, x0, [x20]\n-    __ ldumaxa(Assembler::xword, r1, r24, r2);         \/\/       ldumaxa x1, x24, [x2]\n+    __ swpa(Assembler::xword, zr, r28, r10);           \/\/       swpa    xzr, x28, [x10]\n+    __ ldadda(Assembler::xword, r26, r2, r12);         \/\/       ldadda  x26, x2, [x12]\n+    __ ldbica(Assembler::xword, r16, zr, r1);          \/\/       ldclra  x16, xzr, [x1]\n+    __ ldeora(Assembler::xword, r13, r29, r0);         \/\/       ldeora  x13, x29, [x0]\n+    __ ldorra(Assembler::xword, r19, r12, r17);        \/\/       ldseta  x19, x12, [x17]\n+    __ ldsmina(Assembler::xword, r22, r13, r28);       \/\/       ldsmina x22, x13, [x28]\n+    __ ldsmaxa(Assembler::xword, r30, zr, r1);         \/\/       ldsmaxa x30, xzr, [x1]\n+    __ ldumina(Assembler::xword, r26, r28, r4);        \/\/       ldumina x26, x28, [x4]\n+    __ ldumaxa(Assembler::xword, r30, r4, r6);         \/\/       ldumaxa x30, x4, [x6]\n@@ -871,9 +865,9 @@\n-    __ swpal(Assembler::xword, r0, r9, r24);           \/\/       swpal   x0, x9, [x24]\n-    __ ldaddal(Assembler::xword, r26, r16, r30);       \/\/       ldaddal x26, x16, [x30]\n-    __ ldbical(Assembler::xword, r3, r10, r23);        \/\/       ldclral x3, x10, [x23]\n-    __ ldeoral(Assembler::xword, r10, r4, r15);        \/\/       ldeoral x10, x4, [x15]\n-    __ ldorral(Assembler::xword, r2, r11, r8);         \/\/       ldsetal x2, x11, [x8]\n-    __ ldsminal(Assembler::xword, r10, r15, r17);      \/\/       ldsminal        x10, x15, [x17]\n-    __ ldsmaxal(Assembler::xword, r2, r10, r12);       \/\/       ldsmaxal        x2, x10, [x12]\n-    __ lduminal(Assembler::xword, r12, r15, r13);      \/\/       lduminal        x12, x15, [x13]\n-    __ ldumaxal(Assembler::xword, r2, r7, r20);        \/\/       ldumaxal        x2, x7, [x20]\n+    __ swpal(Assembler::xword, r30, r26, r15);         \/\/       swpal   x30, x26, [x15]\n+    __ ldaddal(Assembler::xword, r9, r8, r12);         \/\/       ldaddal x9, x8, [x12]\n+    __ ldbical(Assembler::xword, r0, r20, r1);         \/\/       ldclral x0, x20, [x1]\n+    __ ldeoral(Assembler::xword, r24, r2, r0);         \/\/       ldeoral x24, x2, [x0]\n+    __ ldorral(Assembler::xword, r9, r24, r26);        \/\/       ldsetal x9, x24, [x26]\n+    __ ldsminal(Assembler::xword, r16, r30, r3);       \/\/       ldsminal        x16, x30, [x3]\n+    __ ldsmaxal(Assembler::xword, r10, r23, r10);      \/\/       ldsmaxal        x10, x23, [x10]\n+    __ lduminal(Assembler::xword, r4, r16, r2);        \/\/       lduminal        x4, x16, [x2]\n+    __ ldumaxal(Assembler::xword, r11, r8, r10);       \/\/       ldumaxal        x11, x8, [x10]\n@@ -882,9 +876,9 @@\n-    __ swpl(Assembler::xword, r26, r16, r4);           \/\/       swpl    x26, x16, [x4]\n-    __ ldaddl(Assembler::xword, r2, r4, r12);          \/\/       ldaddl  x2, x4, [x12]\n-    __ ldbicl(Assembler::xword, r16, r21, r16);        \/\/       ldclrl  x16, x21, [x16]\n-    __ ldeorl(Assembler::xword, r16, r11, r21);        \/\/       ldeorl  x16, x11, [x21]\n-    __ ldorrl(Assembler::xword, r23, r12, r26);        \/\/       ldsetl  x23, x12, [x26]\n-    __ ldsminl(Assembler::xword, r23, r28, r14);       \/\/       ldsminl x23, x28, [x14]\n-    __ ldsmaxl(Assembler::xword, r11, r24, r1);        \/\/       ldsmaxl x11, x24, [x1]\n-    __ lduminl(Assembler::xword, r12, zr, r10);        \/\/       lduminl x12, xzr, [x10]\n-    __ ldumaxl(Assembler::xword, r16, r7, r2);         \/\/       ldumaxl x16, x7, [x2]\n+    __ swpl(Assembler::xword, r15, r17, r2);           \/\/       swpl    x15, x17, [x2]\n+    __ ldaddl(Assembler::xword, r10, r12, r12);        \/\/       ldaddl  x10, x12, [x12]\n+    __ ldbicl(Assembler::xword, r15, r13, r2);         \/\/       ldclrl  x15, x13, [x2]\n+    __ ldeorl(Assembler::xword, r7, r20, r26);         \/\/       ldeorl  x7, x20, [x26]\n+    __ ldorrl(Assembler::xword, r16, r4, r2);          \/\/       ldsetl  x16, x4, [x2]\n+    __ ldsminl(Assembler::xword, r4, r12, r15);        \/\/       ldsminl x4, x12, [x15]\n+    __ ldsmaxl(Assembler::xword, r21, r16, r15);       \/\/       ldsmaxl x21, x16, [x15]\n+    __ lduminl(Assembler::xword, r11, r21, r23);       \/\/       lduminl x11, x21, [x23]\n+    __ ldumaxl(Assembler::xword, r12, r26, r23);       \/\/       ldumaxl x12, x26, [x23]\n@@ -893,9 +887,9 @@\n-    __ swp(Assembler::word, r3, r13, r19);             \/\/       swp     w3, w13, [x19]\n-    __ ldadd(Assembler::word, r17, r16, r3);           \/\/       ldadd   w17, w16, [x3]\n-    __ ldbic(Assembler::word, r1, r11, r30);           \/\/       ldclr   w1, w11, [x30]\n-    __ ldeor(Assembler::word, r5, r8, r15);            \/\/       ldeor   w5, w8, [x15]\n-    __ ldorr(Assembler::word, r29, r30, r0);           \/\/       ldset   w29, w30, [x0]\n-    __ ldsmin(Assembler::word, r20, r7, r20);          \/\/       ldsmin  w20, w7, [x20]\n-    __ ldsmax(Assembler::word, r23, r28, r21);         \/\/       ldsmax  w23, w28, [x21]\n-    __ ldumin(Assembler::word, r27, r25, r5);          \/\/       ldumin  w27, w25, [x5]\n-    __ ldumax(Assembler::word, r1, r23, r16);          \/\/       ldumax  w1, w23, [x16]\n+    __ swp(Assembler::word, r28, r14, r11);            \/\/       swp     w28, w14, [x11]\n+    __ ldadd(Assembler::word, r24, r1, r12);           \/\/       ldadd   w24, w1, [x12]\n+    __ ldbic(Assembler::word, zr, r10, r16);           \/\/       ldclr   wzr, w10, [x16]\n+    __ ldeor(Assembler::word, r7, r2, r3);             \/\/       ldeor   w7, w2, [x3]\n+    __ ldorr(Assembler::word, r13, r19, r17);          \/\/       ldset   w13, w19, [x17]\n+    __ ldsmin(Assembler::word, r16, r3, r1);           \/\/       ldsmin  w16, w3, [x1]\n+    __ ldsmax(Assembler::word, r11, r30, r5);          \/\/       ldsmax  w11, w30, [x5]\n+    __ ldumin(Assembler::word, r8, r15, r29);          \/\/       ldumin  w8, w15, [x29]\n+    __ ldumax(Assembler::word, r30, r0, r20);          \/\/       ldumax  w30, w0, [x20]\n@@ -904,9 +898,9 @@\n-    __ swpa(Assembler::word, zr, r5, r12);             \/\/       swpa    wzr, w5, [x12]\n-    __ ldadda(Assembler::word, r9, r28, r15);          \/\/       ldadda  w9, w28, [x15]\n-    __ ldbica(Assembler::word, r29, r22, sp);          \/\/       ldclra  w29, w22, [sp]\n-    __ ldeora(Assembler::word, r19, zr, r5);           \/\/       ldeora  w19, wzr, [x5]\n-    __ ldorra(Assembler::word, r14, r16, sp);          \/\/       ldseta  w14, w16, [sp]\n-    __ ldsmina(Assembler::word, r16, r27, r20);        \/\/       ldsmina w16, w27, [x20]\n-    __ ldsmaxa(Assembler::word, r16, r12, r11);        \/\/       ldsmaxa w16, w12, [x11]\n-    __ ldumina(Assembler::word, r9, r6, r30);          \/\/       ldumina w9, w6, [x30]\n-    __ ldumaxa(Assembler::word, r17, r27, r28);        \/\/       ldumaxa w17, w27, [x28]\n+    __ swpa(Assembler::word, r7, r20, r23);            \/\/       swpa    w7, w20, [x23]\n+    __ ldadda(Assembler::word, r28, r21, r27);         \/\/       ldadda  w28, w21, [x27]\n+    __ ldbica(Assembler::word, r25, r5, r1);           \/\/       ldclra  w25, w5, [x1]\n+    __ ldeora(Assembler::word, r23, r16, sp);          \/\/       ldeora  w23, w16, [sp]\n+    __ ldorra(Assembler::word, r5, r12, r9);           \/\/       ldseta  w5, w12, [x9]\n+    __ ldsmina(Assembler::word, r28, r15, r29);        \/\/       ldsmina w28, w15, [x29]\n+    __ ldsmaxa(Assembler::word, r22, zr, r19);         \/\/       ldsmaxa w22, wzr, [x19]\n+    __ ldumina(Assembler::word, zr, r5, r14);          \/\/       ldumina wzr, w5, [x14]\n+    __ ldumaxa(Assembler::word, r16, zr, r15);         \/\/       ldumaxa w16, wzr, [x15]\n@@ -915,9 +909,9 @@\n-    __ swpal(Assembler::word, r30, r7, r10);           \/\/       swpal   w30, w7, [x10]\n-    __ ldaddal(Assembler::word, r20, r10, r4);         \/\/       ldaddal w20, w10, [x4]\n-    __ ldbical(Assembler::word, r24, r17, r17);        \/\/       ldclral w24, w17, [x17]\n-    __ ldeoral(Assembler::word, r22, r3, r29);         \/\/       ldeoral w22, w3, [x29]\n-    __ ldorral(Assembler::word, r15, r22, r19);        \/\/       ldsetal w15, w22, [x19]\n-    __ ldsminal(Assembler::word, r19, r22, r2);        \/\/       ldsminal        w19, w22, [x2]\n-    __ ldsmaxal(Assembler::word, r15, r6, r12);        \/\/       ldsmaxal        w15, w6, [x12]\n-    __ lduminal(Assembler::word, r16, r11, r13);       \/\/       lduminal        w16, w11, [x13]\n-    __ ldumaxal(Assembler::word, r23, r1, r30);        \/\/       ldumaxal        w23, w1, [x30]\n+    __ swpal(Assembler::word, r27, r20, r16);          \/\/       swpal   w27, w20, [x16]\n+    __ ldaddal(Assembler::word, r12, r11, r9);         \/\/       ldaddal w12, w11, [x9]\n+    __ ldbical(Assembler::word, r6, r30, r17);         \/\/       ldclral w6, w30, [x17]\n+    __ ldeoral(Assembler::word, r27, r28, r30);        \/\/       ldeoral w27, w28, [x30]\n+    __ ldorral(Assembler::word, r7, r10, r20);         \/\/       ldsetal w7, w10, [x20]\n+    __ ldsminal(Assembler::word, r10, r4, r24);        \/\/       ldsminal        w10, w4, [x24]\n+    __ ldsmaxal(Assembler::word, r17, r17, r22);       \/\/       ldsmaxal        w17, w17, [x22]\n+    __ lduminal(Assembler::word, r3, r29, r15);        \/\/       lduminal        w3, w29, [x15]\n+    __ ldumaxal(Assembler::word, r22, r19, r19);       \/\/       ldumaxal        w22, w19, [x19]\n@@ -926,9 +920,21 @@\n-    __ swpl(Assembler::word, r19, r5, r17);            \/\/       swpl    w19, w5, [x17]\n-    __ ldaddl(Assembler::word, r2, r16, r22);          \/\/       ldaddl  w2, w16, [x22]\n-    __ ldbicl(Assembler::word, r13, r10, r21);         \/\/       ldclrl  w13, w10, [x21]\n-    __ ldeorl(Assembler::word, r29, r27, r12);         \/\/       ldeorl  w29, w27, [x12]\n-    __ ldorrl(Assembler::word, r27, r3, r1);           \/\/       ldsetl  w27, w3, [x1]\n-    __ ldsminl(Assembler::word, zr, r24, r19);         \/\/       ldsminl wzr, w24, [x19]\n-    __ ldsmaxl(Assembler::word, r17, r9, r28);         \/\/       ldsmaxl w17, w9, [x28]\n-    __ lduminl(Assembler::word, r27, r15, r7);         \/\/       lduminl w27, w15, [x7]\n-    __ ldumaxl(Assembler::word, r21, r23, sp);         \/\/       ldumaxl w21, w23, [sp]\n+    __ swpl(Assembler::word, r22, r2, r15);            \/\/       swpl    w22, w2, [x15]\n+    __ ldaddl(Assembler::word, r6, r12, r16);          \/\/       ldaddl  w6, w12, [x16]\n+    __ ldbicl(Assembler::word, r11, r13, r23);         \/\/       ldclrl  w11, w13, [x23]\n+    __ ldeorl(Assembler::word, r1, r30, r19);          \/\/       ldeorl  w1, w30, [x19]\n+    __ ldorrl(Assembler::word, r5, r17, r2);           \/\/       ldsetl  w5, w17, [x2]\n+    __ ldsminl(Assembler::word, r16, r22, r13);        \/\/       ldsminl w16, w22, [x13]\n+    __ ldsmaxl(Assembler::word, r10, r21, r29);        \/\/       ldsmaxl w10, w21, [x29]\n+    __ lduminl(Assembler::word, r27, r12, r27);        \/\/       lduminl w27, w12, [x27]\n+    __ ldumaxl(Assembler::word, r3, r1, sp);           \/\/       ldumaxl w3, w1, [sp]\n+\n+\/\/ SHA3SIMDOp\n+    __ bcax(v23, __ T16B, v19, v17, v9);               \/\/       bcax            v23.16B, v19.16B, v17.16B, v9.16B\n+    __ eor3(v27, __ T16B, v26, v14, v6);               \/\/       eor3            v27.16B, v26.16B, v14.16B, v6.16B\n+    __ rax1(v20, __ T2D, v22, v30);                    \/\/       rax1            v20.2D, v22.2D, v30.2D\n+    __ xar(v24, __ T2D, v2, v30, 54);                  \/\/       xar             v24.2D, v2.2D, v30.2D, #54\n+\n+\/\/ SHA512SIMDOp\n+    __ sha512h(v17, __ T2D, v10, v22);                 \/\/       sha512h         q17, q10, v22.2D\n+    __ sha512h2(v17, __ T2D, v2, v17);                 \/\/       sha512h2                q17, q2, v17.2D\n+    __ sha512su0(v0, __ T2D, v24);                     \/\/       sha512su0               v0.2D, v24.2D\n+    __ sha512su1(v25, __ T2D, v22, v2);                \/\/       sha512su1               v25.2D, v22.2D, v2.2D\n@@ -937,38 +943,38 @@\n-    __ sve_add(z24, __ D, z2, z30);                    \/\/       add     z24.d, z2.d, z30.d\n-    __ sve_sub(z17, __ S, z10, z22);                   \/\/       sub     z17.s, z10.s, z22.s\n-    __ sve_fadd(z2, __ D, z17, z0);                    \/\/       fadd    z2.d, z17.d, z0.d\n-    __ sve_fmul(z25, __ D, z22, z2);                   \/\/       fmul    z25.d, z22.d, z2.d\n-    __ sve_fsub(z12, __ D, z3, z27);                   \/\/       fsub    z12.d, z3.d, z27.d\n-    __ sve_abs(z28, __ B, p4, z26);                    \/\/       abs     z28.b, p4\/m, z26.b\n-    __ sve_add(z9, __ B, p7, z17);                     \/\/       add     z9.b, p7\/m, z9.b, z17.b\n-    __ sve_asr(z4, __ H, p1, z15);                     \/\/       asr     z4.h, p1\/m, z4.h, z15.h\n-    __ sve_cnt(z22, __ D, p2, z2);                     \/\/       cnt     z22.d, p2\/m, z2.d\n-    __ sve_lsl(z20, __ D, p7, z5);                     \/\/       lsl     z20.d, p7\/m, z20.d, z5.d\n-    __ sve_lsr(z0, __ B, p4, z14);                     \/\/       lsr     z0.b, p4\/m, z0.b, z14.b\n-    __ sve_mul(z25, __ S, p2, z27);                    \/\/       mul     z25.s, p2\/m, z25.s, z27.s\n-    __ sve_neg(z26, __ S, p6, z24);                    \/\/       neg     z26.s, p6\/m, z24.s\n-    __ sve_not(z0, __ S, p1, z6);                      \/\/       not     z0.s, p1\/m, z6.s\n-    __ sve_smax(z0, __ B, p1, z15);                    \/\/       smax    z0.b, p1\/m, z0.b, z15.b\n-    __ sve_smin(z9, __ H, p1, z5);                     \/\/       smin    z9.h, p1\/m, z9.h, z5.h\n-    __ sve_sub(z27, __ S, p1, z20);                    \/\/       sub     z27.s, p1\/m, z27.s, z20.s\n-    __ sve_fabs(z20, __ S, p1, z10);                   \/\/       fabs    z20.s, p1\/m, z10.s\n-    __ sve_fadd(z16, __ D, p7, z6);                    \/\/       fadd    z16.d, p7\/m, z16.d, z6.d\n-    __ sve_fdiv(z2, __ D, p3, z29);                    \/\/       fdiv    z2.d, p3\/m, z2.d, z29.d\n-    __ sve_fmax(z2, __ D, p6, z22);                    \/\/       fmax    z2.d, p6\/m, z2.d, z22.d\n-    __ sve_fmin(z14, __ D, p3, z27);                   \/\/       fmin    z14.d, p3\/m, z14.d, z27.d\n-    __ sve_fmul(z23, __ S, p1, z2);                    \/\/       fmul    z23.s, p1\/m, z23.s, z2.s\n-    __ sve_fneg(z10, __ D, p4, z10);                   \/\/       fneg    z10.d, p4\/m, z10.d\n-    __ sve_frintm(z22, __ D, p3, z3);                  \/\/       frintm  z22.d, p3\/m, z3.d\n-    __ sve_frintn(z16, __ D, p1, z1);                  \/\/       frintn  z16.d, p1\/m, z1.d\n-    __ sve_frintp(z16, __ S, p4, z12);                 \/\/       frintp  z16.s, p4\/m, z12.s\n-    __ sve_fsqrt(z12, __ S, p0, z16);                  \/\/       fsqrt   z12.s, p0\/m, z16.s\n-    __ sve_fsub(z20, __ S, p5, z5);                    \/\/       fsub    z20.s, p5\/m, z20.s, z5.s\n-    __ sve_fmla(z7, __ D, p4, z12, z27);               \/\/       fmla    z7.d, p4\/m, z12.d, z27.d\n-    __ sve_fmls(z16, __ S, p1, z2, z28);               \/\/       fmls    z16.s, p1\/m, z2.s, z28.s\n-    __ sve_fnmla(z4, __ S, p1, z17, z19);              \/\/       fnmla   z4.s, p1\/m, z17.s, z19.s\n-    __ sve_fnmls(z12, __ D, p5, z8, z24);              \/\/       fnmls   z12.d, p5\/m, z8.d, z24.d\n-    __ sve_mla(z17, __ B, p0, z10, z23);               \/\/       mla     z17.b, p0\/m, z10.b, z23.b\n-    __ sve_mls(z19, __ B, p7, z13, z16);               \/\/       mls     z19.b, p7\/m, z13.b, z16.b\n-    __ sve_and(z0, z7, z14);                           \/\/       and     z0.d, z7.d, z14.d\n-    __ sve_eor(z25, z8, z10);                          \/\/       eor     z25.d, z8.d, z10.d\n-    __ sve_orr(z20, z22, z27);                         \/\/       orr     z20.d, z22.d, z27.d\n+    __ sve_add(z17, __ D, z12, z3);                    \/\/       add     z17.d, z12.d, z3.d\n+    __ sve_sub(z29, __ D, z28, z16);                   \/\/       sub     z29.d, z28.d, z16.d\n+    __ sve_fadd(z6, __ D, z9, z28);                    \/\/       fadd    z6.d, z9.d, z28.d\n+    __ sve_fmul(z7, __ S, z4, z7);                     \/\/       fmul    z7.s, z4.s, z7.s\n+    __ sve_fsub(z9, __ S, z22, z8);                    \/\/       fsub    z9.s, z22.s, z8.s\n+    __ sve_abs(z27, __ B, p5, z30);                    \/\/       abs     z27.b, p5\/m, z30.b\n+    __ sve_add(z26, __ H, p0, z16);                    \/\/       add     z26.h, p0\/m, z26.h, z16.h\n+    __ sve_asr(z3, __ D, p6, z8);                      \/\/       asr     z3.d, p6\/m, z3.d, z8.d\n+    __ sve_cnt(z21, __ D, p6, z26);                    \/\/       cnt     z21.d, p6\/m, z26.d\n+    __ sve_lsl(z22, __ B, p0, z4);                     \/\/       lsl     z22.b, p0\/m, z22.b, z4.b\n+    __ sve_lsr(z17, __ H, p0, z3);                     \/\/       lsr     z17.h, p0\/m, z17.h, z3.h\n+    __ sve_mul(z1, __ B, p2, z6);                      \/\/       mul     z1.b, p2\/m, z1.b, z6.b\n+    __ sve_neg(z9, __ S, p7, z7);                      \/\/       neg     z9.s, p7\/m, z7.s\n+    __ sve_not(z22, __ H, p5, z5);                     \/\/       not     z22.h, p5\/m, z5.h\n+    __ sve_smax(z8, __ B, p4, z30);                    \/\/       smax    z8.b, p4\/m, z8.b, z30.b\n+    __ sve_smin(z17, __ D, p0, z11);                   \/\/       smin    z17.d, p0\/m, z17.d, z11.d\n+    __ sve_sub(z28, __ S, p0, z26);                    \/\/       sub     z28.s, p0\/m, z28.s, z26.s\n+    __ sve_fabs(z28, __ D, p3, z13);                   \/\/       fabs    z28.d, p3\/m, z13.d\n+    __ sve_fadd(z16, __ S, p6, z5);                    \/\/       fadd    z16.s, p6\/m, z16.s, z5.s\n+    __ sve_fdiv(z13, __ S, p2, z15);                   \/\/       fdiv    z13.s, p2\/m, z13.s, z15.s\n+    __ sve_fmax(z26, __ S, p5, z11);                   \/\/       fmax    z26.s, p5\/m, z26.s, z11.s\n+    __ sve_fmin(z22, __ S, p4, z4);                    \/\/       fmin    z22.s, p4\/m, z22.s, z4.s\n+    __ sve_fmul(z19, __ S, p4, z17);                   \/\/       fmul    z19.s, p4\/m, z19.s, z17.s\n+    __ sve_fneg(z14, __ D, p3, z2);                    \/\/       fneg    z14.d, p3\/m, z2.d\n+    __ sve_frintm(z3, __ S, p5, z23);                  \/\/       frintm  z3.s, p5\/m, z23.s\n+    __ sve_frintn(z6, __ S, p1, z17);                  \/\/       frintn  z6.s, p1\/m, z17.s\n+    __ sve_frintp(z27, __ S, p4, z16);                 \/\/       frintp  z27.s, p4\/m, z16.s\n+    __ sve_fsqrt(z2, __ S, p7, z3);                    \/\/       fsqrt   z2.s, p7\/m, z3.s\n+    __ sve_fsub(z6, __ S, p4, z19);                    \/\/       fsub    z6.s, p4\/m, z6.s, z19.s\n+    __ sve_fmla(z12, __ D, p5, z8, z24);               \/\/       fmla    z12.d, p5\/m, z8.d, z24.d\n+    __ sve_fmls(z17, __ S, p0, z10, z23);              \/\/       fmls    z17.s, p0\/m, z10.s, z23.s\n+    __ sve_fnmla(z19, __ S, p7, z13, z16);             \/\/       fnmla   z19.s, p7\/m, z13.s, z16.s\n+    __ sve_fnmls(z0, __ D, p1, z14, z17);              \/\/       fnmls   z0.d, p1\/m, z14.d, z17.d\n+    __ sve_mla(z8, __ S, p2, z22, z20);                \/\/       mla     z8.s, p2\/m, z22.s, z20.s\n+    __ sve_mls(z27, __ S, p0, z3, z15);                \/\/       mls     z27.s, p0\/m, z3.s, z15.s\n+    __ sve_and(z20, z7, z4);                           \/\/       and     z20.d, z7.d, z4.d\n+    __ sve_eor(z7, z0, z8);                            \/\/       eor     z7.d, z0.d, z8.d\n+    __ sve_orr(z19, z22, z4);                          \/\/       orr     z19.d, z22.d, z4.d\n@@ -977,9 +983,9 @@\n-    __ sve_andv(v3, __ S, p3, z17);                    \/\/       andv s3, p3, z17.s\n-    __ sve_orv(v7, __ B, p1, z28);                     \/\/       orv b7, p1, z28.b\n-    __ sve_eorv(v0, __ S, p2, z16);                    \/\/       eorv s0, p2, z16.s\n-    __ sve_smaxv(v22, __ H, p1, z15);                  \/\/       smaxv h22, p1, z15.h\n-    __ sve_sminv(v22, __ B, p2, z25);                  \/\/       sminv b22, p2, z25.b\n-    __ sve_fminv(v30, __ D, p4, z13);                  \/\/       fminv d30, p4, z13.d\n-    __ sve_fmaxv(v11, __ S, p0, z13);                  \/\/       fmaxv s11, p0, z13.s\n-    __ sve_fadda(v20, __ S, p4, z25);                  \/\/       fadda s20, p4, s20, z25.s\n-    __ sve_uaddv(v4, __ H, p1, z17);                   \/\/       uaddv d4, p1, z17.h\n+    __ sve_andv(v9, __ D, p5, z11);                    \/\/       andv d9, p5, z11.d\n+    __ sve_orv(v5, __ H, p7, z16);                     \/\/       orv h5, p7, z16.h\n+    __ sve_eorv(v22, __ H, p3, z1);                    \/\/       eorv h22, p3, z1.h\n+    __ sve_smaxv(v8, __ D, p5, z16);                   \/\/       smaxv d8, p5, z16.d\n+    __ sve_sminv(v15, __ S, p1, z4);                   \/\/       sminv s15, p1, z4.s\n+    __ sve_fminv(v8, __ S, p1, z29);                   \/\/       fminv s8, p1, z29.s\n+    __ sve_fmaxv(v28, __ D, p4, z29);                  \/\/       fmaxv d28, p4, z29.d\n+    __ sve_fadda(v9, __ S, p3, z2);                    \/\/       fadda s9, p3, s9, z2.s\n+    __ sve_uaddv(v28, __ B, p0, z7);                   \/\/       uaddv d28, p0, z7.b\n@@ -1004,7 +1010,7 @@\n-    0x14000000,     0x17ffffd7,     0x140002c9,     0x94000000,\n-    0x97ffffd4,     0x940002c6,     0x3400000a,     0x34fffa2a,\n-    0x3400586a,     0x35000008,     0x35fff9c8,     0x35005808,\n-    0xb400000b,     0xb4fff96b,     0xb40057ab,     0xb500001d,\n-    0xb5fff91d,     0xb500575d,     0x10000013,     0x10fff8b3,\n-    0x100056f3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305676,     0x3758000c,     0x375ff7cc,     0x3758560c,\n+    0x14000000,     0x17ffffd7,     0x140002cd,     0x94000000,\n+    0x97ffffd4,     0x940002ca,     0x3400000a,     0x34fffa2a,\n+    0x340058ea,     0x35000008,     0x35fff9c8,     0x35005888,\n+    0xb400000b,     0xb4fff96b,     0xb400582b,     0xb500001d,\n+    0xb5fff91d,     0xb50057dd,     0x10000013,     0x10fff8b3,\n+    0x10005773,     0x90000013,     0x36300016,     0x3637f836,\n+    0x363056f6,     0x3758000c,     0x375ff7cc,     0x3758568c,\n@@ -1015,13 +1021,13 @@\n-    0x540053e0,     0x54000001,     0x54fff541,     0x54005381,\n-    0x54000002,     0x54fff4e2,     0x54005322,     0x54000002,\n-    0x54fff482,     0x540052c2,     0x54000003,     0x54fff423,\n-    0x54005263,     0x54000003,     0x54fff3c3,     0x54005203,\n-    0x54000004,     0x54fff364,     0x540051a4,     0x54000005,\n-    0x54fff305,     0x54005145,     0x54000006,     0x54fff2a6,\n-    0x540050e6,     0x54000007,     0x54fff247,     0x54005087,\n-    0x54000008,     0x54fff1e8,     0x54005028,     0x54000009,\n-    0x54fff189,     0x54004fc9,     0x5400000a,     0x54fff12a,\n-    0x54004f6a,     0x5400000b,     0x54fff0cb,     0x54004f0b,\n-    0x5400000c,     0x54fff06c,     0x54004eac,     0x5400000d,\n-    0x54fff00d,     0x54004e4d,     0x5400000e,     0x54ffefae,\n-    0x54004dee,     0x5400000f,     0x54ffef4f,     0x54004d8f,\n+    0x54005460,     0x54000001,     0x54fff541,     0x54005401,\n+    0x54000002,     0x54fff4e2,     0x540053a2,     0x54000002,\n+    0x54fff482,     0x54005342,     0x54000003,     0x54fff423,\n+    0x540052e3,     0x54000003,     0x54fff3c3,     0x54005283,\n+    0x54000004,     0x54fff364,     0x54005224,     0x54000005,\n+    0x54fff305,     0x540051c5,     0x54000006,     0x54fff2a6,\n+    0x54005166,     0x54000007,     0x54fff247,     0x54005107,\n+    0x54000008,     0x54fff1e8,     0x540050a8,     0x54000009,\n+    0x54fff189,     0x54005049,     0x5400000a,     0x54fff12a,\n+    0x54004fea,     0x5400000b,     0x54fff0cb,     0x54004f8b,\n+    0x5400000c,     0x54fff06c,     0x54004f2c,     0x5400000d,\n+    0x54fff00d,     0x54004ecd,     0x5400000e,     0x54ffefae,\n+    0x54004e6e,     0x5400000f,     0x54ffef4f,     0x54004e0f,\n@@ -1059,1 +1065,1 @@\n-    0xbd1b1869,     0x58003ddb,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x58003e5b,     0x1800000b,     0xf8945060,\n@@ -1132,1 +1138,0 @@\n-    0xce7c808d,     0xce7986b7,     0xcec08078,     0xce778b57,\n@@ -1153,30 +1158,32 @@\n-    0xf82f8075,     0xf8380328,     0xf8341230,     0xf8222001,\n-    0xf8383064,     0xf82c539f,     0xf82a405a,     0xf82c73f0,\n-    0xf82163ad,     0xf8a08193,     0xf8b101b6,     0xf8bc13fe,\n-    0xf8a1239a,     0xf8a4309e,     0xf8a6535e,     0xf8b04109,\n-    0xf8ac7280,     0xf8a16058,     0xf8e08309,     0xf8fa03d0,\n-    0xf8e312ea,     0xf8ea21e4,     0xf8e2310b,     0xf8ea522f,\n-    0xf8e2418a,     0xf8ec71af,     0xf8e26287,     0xf87a8090,\n-    0xf8620184,     0xf8701215,     0xf87022ab,     0xf877334c,\n-    0xf87751dc,     0xf86b4038,     0xf86c715f,     0xf8706047,\n-    0xb823826d,     0xb8310070,     0xb82113cb,     0xb82521e8,\n-    0xb83d301e,     0xb8345287,     0xb83742bc,     0xb83b70b9,\n-    0xb8216217,     0xb8bf8185,     0xb8a901fc,     0xb8bd13f6,\n-    0xb8b320bf,     0xb8ae33f0,     0xb8b0529b,     0xb8b0416c,\n-    0xb8a973c6,     0xb8b1639b,     0xb8fe8147,     0xb8f4008a,\n-    0xb8f81231,     0xb8f623a3,     0xb8ef3276,     0xb8f35056,\n-    0xb8ef4186,     0xb8f071ab,     0xb8f763c1,     0xb8738225,\n-    0xb86202d0,     0xb86d12aa,     0xb87d219b,     0xb87b3023,\n-    0xb87f5278,     0xb8714389,     0xb87b70ef,     0xb87563f7,\n-    0x04fe0058,     0x04b60551,     0x65c00222,     0x65c20ad9,\n-    0x65db046c,     0x0416b35c,     0x04001e29,     0x045085e4,\n-    0x04daa856,     0x04d39cb4,     0x041191c0,     0x04900b79,\n-    0x0497bb1a,     0x049ea4c0,     0x040805e0,     0x044a04a9,\n-    0x0481069b,     0x049ca554,     0x65c09cd0,     0x65cd8fa2,\n-    0x65c69ac2,     0x65c78f6e,     0x65828457,     0x04ddb14a,\n-    0x65c2ac76,     0x65c0a430,     0x6581b190,     0x658da20c,\n-    0x658194b4,     0x65fb1187,     0x65bc2450,     0x65b34624,\n-    0x65f8750c,     0x04174151,     0x04107db3,     0x042e30e0,\n-    0x04aa3119,     0x047b32d4,     0x049a2e23,     0x04182787,\n-    0x04992a00,     0x044825f6,     0x040a2b36,     0x65c731be,\n-    0x658621ab,     0x65983334,     0x04412624,\n+    0xf82d83a5,     0xf8380355,     0xf8381303,     0xf83a21f7,\n+    0xf8353303,     0xf8285299,     0xf8304051,     0xf8217300,\n+    0xf8246183,     0xf8bf815c,     0xf8ba0182,     0xf8b0103f,\n+    0xf8ad201d,     0xf8b3322c,     0xf8b6538d,     0xf8be403f,\n+    0xf8ba709c,     0xf8be60c4,     0xf8fe81fa,     0xf8e90188,\n+    0xf8e01034,     0xf8f82002,     0xf8e93358,     0xf8f0507e,\n+    0xf8ea4157,     0xf8e47050,     0xf8eb6148,     0xf86f8051,\n+    0xf86a018c,     0xf86f104d,     0xf8672354,     0xf8703044,\n+    0xf86451ec,     0xf87541f0,     0xf86b72f5,     0xf86c62fa,\n+    0xb83c816e,     0xb8380181,     0xb83f120a,     0xb8272062,\n+    0xb82d3233,     0xb8305023,     0xb82b40be,     0xb82873af,\n+    0xb83e6280,     0xb8a782f4,     0xb8bc0375,     0xb8b91025,\n+    0xb8b723f0,     0xb8a5312c,     0xb8bc53af,     0xb8b6427f,\n+    0xb8bf71c5,     0xb8b061ff,     0xb8fb8214,     0xb8ec012b,\n+    0xb8e6123e,     0xb8fb23dc,     0xb8e7328a,     0xb8ea5304,\n+    0xb8f142d1,     0xb8e371fd,     0xb8f66273,     0xb87681e2,\n+    0xb866020c,     0xb86b12ed,     0xb861227e,     0xb8653051,\n+    0xb87051b6,     0xb86a43b5,     0xb87b736c,     0xb86363e1,\n+    0xce312677,     0xce0e1b5b,     0xce7e8ed4,     0xce9ed858,\n+    0xce768151,     0xce718451,     0xcec08300,     0xce628ad9,\n+    0x04e30191,     0x04f0079d,     0x65dc0126,     0x65870887,\n+    0x658806c9,     0x0416b7db,     0x0440021a,     0x04d09903,\n+    0x04dabb55,     0x04138096,     0x04518071,     0x041008c1,\n+    0x0497bce9,     0x045eb4b6,     0x040813c8,     0x04ca0171,\n+    0x0481035c,     0x04dcadbc,     0x658098b0,     0x658d89ed,\n+    0x6586957a,     0x65879096,     0x65829233,     0x04ddac4e,\n+    0x6582b6e3,     0x6580a626,     0x6581b21b,     0x658dbc62,\n+    0x65819266,     0x65f8150c,     0x65b72151,     0x65b05db3,\n+    0x65f165c0,     0x04944ac8,     0x048f607b,     0x042430f4,\n+    0x04a83007,     0x046432d3,     0x04da3569,     0x04583e05,\n+    0x04592c36,     0x04c83608,     0x048a248f,     0x658727a8,\n+    0x65c633bc,     0x65982c49,     0x040120fc,\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":184,"deletions":177,"binary":false,"changes":361,"status":"modified"},{"patch":"@@ -2553,0 +2553,34 @@\n+#define INSN(NAME, opc)                                                                                   \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm, FloatRegister Va) { \\\n+    starti;                                                                                               \\\n+    assert(T == T16B, \"arrangement must be T16B\");                                                        \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(0b0, 15, 15), rf(Va, 10), rf(Vn, 5), rf(Vd, 0);  \\\n+  }\n+\n+  INSN(eor3, 0b000);\n+  INSN(bcax, 0b001);\n+\n+#undef INSN\n+\n+#define INSN(NAME, opc)                                                                               \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm, unsigned imm) { \\\n+    starti;                                                                                           \\\n+    assert(T == T2D, \"arrangement must be T2D\");                                                      \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(imm, 15, 10), rf(Vn, 5), rf(Vd, 0);          \\\n+  }\n+\n+  INSN(xar, 0b100);\n+\n+#undef INSN\n+\n+#define INSN(NAME, opc)                                                                           \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm) {           \\\n+    starti;                                                                                       \\\n+    assert(T == T2D, \"arrangement must be T2D\");                                                  \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(0b100011, 15, 10), rf(Vn, 5), rf(Vd, 0); \\\n+  }\n+\n+  INSN(rax1, 0b011);\n+\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3312,0 +3312,219 @@\n+  \/\/ Arguments:\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/   c_rarg0   - byte[]  source+offset\n+  \/\/   c_rarg1   - byte[]   SHA.state\n+  \/\/   c_rarg2   - int     digest_length\n+  \/\/   c_rarg3   - int     offset\n+  \/\/   c_rarg4   - int     limit\n+  \/\/\n+  address generate_sha3_implCompress(bool multi_block, const char *name) {\n+    static const uint64_t round_consts[24] = {\n+      0x0000000000000001L, 0x0000000000008082L, 0x800000000000808AL,\n+      0x8000000080008000L, 0x000000000000808BL, 0x0000000080000001L,\n+      0x8000000080008081L, 0x8000000000008009L, 0x000000000000008AL,\n+      0x0000000000000088L, 0x0000000080008009L, 0x000000008000000AL,\n+      0x000000008000808BL, 0x800000000000008BL, 0x8000000000008089L,\n+      0x8000000000008003L, 0x8000000000008002L, 0x8000000000000080L,\n+      0x000000000000800AL, 0x800000008000000AL, 0x8000000080008081L,\n+      0x8000000000008080L, 0x0000000080000001L, 0x8000000080008008L\n+    };\n+\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", name);\n+    address start = __ pc();\n+\n+    Register buf           = c_rarg0;\n+    Register state         = c_rarg1;\n+    Register digest_length = c_rarg2;\n+    Register ofs           = c_rarg3;\n+    Register limit         = c_rarg4;\n+\n+    Label sha3_loop, rounds24_loop;\n+    Label sha3_512, sha3_384_or_224, sha3_256;\n+\n+    __ stpd(v8, v9, __ pre(sp, -64));\n+    __ stpd(v10, v11, Address(sp, 16));\n+    __ stpd(v12, v13, Address(sp, 32));\n+    __ stpd(v14, v15, Address(sp, 48));\n+\n+    \/\/ load state\n+    __ add(rscratch1, state, 32);\n+    __ ld1(v0, v1, v2,  v3,  __ T1D, state);\n+    __ ld1(v4, v5, v6,  v7,  __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v8, v9, v10, v11, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v12, v13, v14, v15, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v16, v17, v18, v19, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v20, v21, v22, v23, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v24, __ T1D, rscratch1);\n+\n+    __ BIND(sha3_loop);\n+\n+    \/\/ 24 keccak rounds\n+    __ movw(rscratch2, 24);\n+\n+    \/\/ load round_constants base\n+    __ lea(rscratch1, ExternalAddress((address) round_consts));\n+\n+    \/\/ load input\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, v30, v31, __ T8B, __ post(buf, 24));\n+    __ eor(v0, __ T8B, v0, v25);\n+    __ eor(v1, __ T8B, v1, v26);\n+    __ eor(v2, __ T8B, v2, v27);\n+    __ eor(v3, __ T8B, v3, v28);\n+    __ eor(v4, __ T8B, v4, v29);\n+    __ eor(v5, __ T8B, v5, v30);\n+    __ eor(v6, __ T8B, v6, v31);\n+\n+    \/\/ digest_length == 64, SHA3-512\n+    __ tbnz(digest_length, 6, sha3_512);\n+\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, v30, __ T8B, __ post(buf, 16));\n+    __ eor(v7, __ T8B, v7, v25);\n+    __ eor(v8, __ T8B, v8, v26);\n+    __ eor(v9, __ T8B, v9, v27);\n+    __ eor(v10, __ T8B, v10, v28);\n+    __ eor(v11, __ T8B, v11, v29);\n+    __ eor(v12, __ T8B, v12, v30);\n+\n+    \/\/ digest_length == 28, SHA3-224;  digest_length == 48, SHA3-384\n+    __ tbnz(digest_length, 4, sha3_384_or_224);\n+\n+    \/\/ SHA3-256\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ eor(v13, __ T8B, v13, v25);\n+    __ eor(v14, __ T8B, v14, v26);\n+    __ eor(v15, __ T8B, v15, v27);\n+    __ eor(v16, __ T8B, v16, v28);\n+    __ b(rounds24_loop);\n+\n+    __ BIND(sha3_384_or_224);\n+    __ tbz(digest_length, 2, rounds24_loop); \/\/ bit 2 cleared? SHA-384\n+\n+    \/\/ SHA3-224\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, __ T8B, __ post(buf, 8));\n+    __ eor(v13, __ T8B, v13, v25);\n+    __ eor(v14, __ T8B, v14, v26);\n+    __ eor(v15, __ T8B, v15, v27);\n+    __ eor(v16, __ T8B, v16, v28);\n+    __ eor(v17, __ T8B, v17, v29);\n+    __ b(rounds24_loop);\n+\n+    __ BIND(sha3_512);\n+    __ ld1(v25, v26, __ T8B, __ post(buf, 16));\n+    __ eor(v7, __ T8B, v7, v25);\n+    __ eor(v8, __ T8B, v8, v26);\n+\n+    __ BIND(rounds24_loop);\n+    __ subw(rscratch2, rscratch2, 1);\n+\n+    __ eor3(v29, __ T16B, v4, v9, v14);\n+    __ eor3(v26, __ T16B, v1, v6, v11);\n+    __ eor3(v28, __ T16B, v3, v8, v13);\n+    __ eor3(v25, __ T16B, v0, v5, v10);\n+    __ eor3(v27, __ T16B, v2, v7, v12);\n+    __ eor3(v29, __ T16B, v29, v19, v24);\n+    __ eor3(v26, __ T16B, v26, v16, v21);\n+    __ eor3(v28, __ T16B, v28, v18, v23);\n+    __ eor3(v25, __ T16B, v25, v15, v20);\n+    __ eor3(v27, __ T16B, v27, v17, v22);\n+\n+    __ rax1(v30, __ T2D, v29, v26);\n+    __ rax1(v26, __ T2D, v26, v28);\n+    __ rax1(v28, __ T2D, v28, v25);\n+    __ rax1(v25, __ T2D, v25, v27);\n+    __ rax1(v27, __ T2D, v27, v29);\n+\n+    __ eor(v0, __ T16B, v0, v30);\n+    __ xar(v29, __ T2D, v1,  v25, (64 - 1));\n+    __ xar(v1,  __ T2D, v6,  v25, (64 - 44));\n+    __ xar(v6,  __ T2D, v9,  v28, (64 - 20));\n+    __ xar(v9,  __ T2D, v22, v26, (64 - 61));\n+    __ xar(v22, __ T2D, v14, v28, (64 - 39));\n+    __ xar(v14, __ T2D, v20, v30, (64 - 18));\n+    __ xar(v31, __ T2D, v2,  v26, (64 - 62));\n+    __ xar(v2,  __ T2D, v12, v26, (64 - 43));\n+    __ xar(v12, __ T2D, v13, v27, (64 - 25));\n+    __ xar(v13, __ T2D, v19, v28, (64 - 8));\n+    __ xar(v19, __ T2D, v23, v27, (64 - 56));\n+    __ xar(v23, __ T2D, v15, v30, (64 - 41));\n+    __ xar(v15, __ T2D, v4,  v28, (64 - 27));\n+    __ xar(v28, __ T2D, v24, v28, (64 - 14));\n+    __ xar(v24, __ T2D, v21, v25, (64 - 2));\n+    __ xar(v8,  __ T2D, v8,  v27, (64 - 55));\n+    __ xar(v4,  __ T2D, v16, v25, (64 - 45));\n+    __ xar(v16, __ T2D, v5,  v30, (64 - 36));\n+    __ xar(v5,  __ T2D, v3,  v27, (64 - 28));\n+    __ xar(v27, __ T2D, v18, v27, (64 - 21));\n+    __ xar(v3,  __ T2D, v17, v26, (64 - 15));\n+    __ xar(v25, __ T2D, v11, v25, (64 - 10));\n+    __ xar(v26, __ T2D, v7,  v26, (64 - 6));\n+    __ xar(v30, __ T2D, v10, v30, (64 - 3));\n+\n+    __ bcax(v20, __ T16B, v31, v22, v8);\n+    __ bcax(v21, __ T16B, v8,  v23, v22);\n+    __ bcax(v22, __ T16B, v22, v24, v23);\n+    __ bcax(v23, __ T16B, v23, v31, v24);\n+    __ bcax(v24, __ T16B, v24, v8,  v31);\n+\n+    __ ld1r(v31, __ T2D, __ post(rscratch1, 8));\n+\n+    __ bcax(v17, __ T16B, v25, v19, v3);\n+    __ bcax(v18, __ T16B, v3,  v15, v19);\n+    __ bcax(v19, __ T16B, v19, v16, v15);\n+    __ bcax(v15, __ T16B, v15, v25, v16);\n+    __ bcax(v16, __ T16B, v16, v3,  v25);\n+\n+    __ bcax(v10, __ T16B, v29, v12, v26);\n+    __ bcax(v11, __ T16B, v26, v13, v12);\n+    __ bcax(v12, __ T16B, v12, v14, v13);\n+    __ bcax(v13, __ T16B, v13, v29, v14);\n+    __ bcax(v14, __ T16B, v14, v26, v29);\n+\n+    __ bcax(v7, __ T16B, v30, v9,  v4);\n+    __ bcax(v8, __ T16B, v4,  v5,  v9);\n+    __ bcax(v9, __ T16B, v9,  v6,  v5);\n+    __ bcax(v5, __ T16B, v5,  v30, v6);\n+    __ bcax(v6, __ T16B, v6,  v4,  v30);\n+\n+    __ bcax(v3, __ T16B, v27, v0,  v28);\n+    __ bcax(v4, __ T16B, v28, v1,  v0);\n+    __ bcax(v0, __ T16B, v0,  v2,  v1);\n+    __ bcax(v1, __ T16B, v1,  v27, v2);\n+    __ bcax(v2, __ T16B, v2,  v28, v27);\n+\n+    __ eor(v0, __ T16B, v0, v31);\n+\n+    __ cbnzw(rscratch2, rounds24_loop);\n+\n+    if (multi_block) {\n+      \/\/ block_size =  200 - 2 * digest_length, ofs += block_size\n+      __ add(ofs, ofs, 200);\n+      __ sub(ofs, ofs, digest_length, Assembler::LSL, 1);\n+\n+      __ cmp(ofs, limit);\n+      __ br(Assembler::LE, sha3_loop);\n+      __ mov(c_rarg0, ofs); \/\/ return ofs\n+    }\n+\n+    __ st1(v0, v1, v2,  v3,  __ T1D, __ post(state, 32));\n+    __ st1(v4, v5, v6,  v7,  __ T1D, __ post(state, 32));\n+    __ st1(v8, v9, v10, v11, __ T1D, __ post(state, 32));\n+    __ st1(v12, v13, v14, v15, __ T1D, __ post(state, 32));\n+    __ st1(v16, v17, v18, v19, __ T1D, __ post(state, 32));\n+    __ st1(v20, v21, v22, v23, __ T1D, __ post(state, 32));\n+    __ st1(v24, __ T1D, state);\n+\n+    __ ldpd(v14, v15, Address(sp, 48));\n+    __ ldpd(v12, v13, Address(sp, 32));\n+    __ ldpd(v10, v11, Address(sp, 16));\n+    __ ldpd(v8, v9, __ post(sp, 64));\n+\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -6051,0 +6270,4 @@\n+    if (UseSHA3Intrinsics) {\n+      StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(false,   \"sha3_implCompress\");\n+      StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(true,    \"sha3_implCompressMB\");\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":223,"deletions":0,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -197,0 +197,1 @@\n+  if (_features & CPU_SHA3) strcat(buf, \", sha3\");\n@@ -278,1 +279,1 @@\n-  if (_features & (CPU_SHA1 | CPU_SHA2)) {\n+  if (_features & (CPU_SHA1 | CPU_SHA2 | CPU_SHA3 | CPU_SHA512)) {\n@@ -305,0 +306,10 @@\n+  if (UseSHA && (_features & CPU_SHA3)) {\n+    \/\/ Do not auto-enable UseSHA3Intrinsics until it has been fully tested on hardware\n+    \/\/ if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {\n+      \/\/ FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);\n+    \/\/ }\n+  } else if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n@@ -315,1 +326,1 @@\n-  if (!(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) {\n+  if (!(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA3Intrinsics || UseSHA512Intrinsics)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+    CPU_SHA3         = (1<<17),\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -237,0 +237,5 @@\n+  }\n+\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm_32.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -334,0 +334,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -224,0 +224,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -984,0 +984,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -62,0 +62,4 @@\n+#ifndef HWCAP_SHA3\n+#define HWCAP_SHA3 (1 << 17)\n+#endif\n+\n@@ -106,0 +110,1 @@\n+  static_assert(CPU_SHA3    == HWCAP_SHA3);\n@@ -119,0 +124,1 @@\n+      HWCAP_SHA3    |\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/vm_version_linux_aarch64.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-    return 4;\n+    return 5;\n@@ -439,0 +439,3 @@\n+  case vmIntrinsics::_sha3_implCompress:\n+    if (!UseSHA3Intrinsics) return true;\n+    break;\n@@ -440,1 +443,1 @@\n-    if (!(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) return true;\n+    if (!(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics)) return true;\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -435,0 +435,4 @@\n+  \/* support for sun.security.provider.SHA3 *\/                                                                          \\\n+  do_class(sun_security_provider_sha3,                             \"sun\/security\/provider\/SHA3\")                        \\\n+  do_intrinsic(_sha3_implCompress, sun_security_provider_sha3, implCompress_name, implCompress_signature, F_R)          \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -630,0 +630,1 @@\n+  case vmIntrinsics::_sha3_implCompress:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1004,0 +1004,2 @@\n+                  strcmp(call->as_CallLeaf()->_name, \"sha3_implCompress\") == 0 ||\n+                  strcmp(call->as_CallLeaf()->_name, \"sha3_implCompressMB\") == 0 ||\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,0 +551,1 @@\n+  case vmIntrinsics::_sha3_implCompress:\n@@ -6197,0 +6198,3 @@\n+\/\/ Calculate SHA3 (i.e., SHA3-224 or SHA3-256 or SHA3-384 or SHA3-512) for single-block byte[] array.\n+\/\/ void com.sun.security.provider.SHA3.implCompress(byte[] buf, int ofs)\n+\/\/\n@@ -6219,0 +6223,1 @@\n+  Node* digest_length = NULL;\n@@ -6225,1 +6230,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6231,1 +6236,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6237,1 +6242,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6243,1 +6248,1 @@\n-    state = get_long_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[J\");\n@@ -6247,0 +6252,8 @@\n+  case vmIntrinsics::_sha3_implCompress:\n+    assert(UseSHA3Intrinsics, \"need SHA3 instruction support\");\n+    state = get_state_from_digest_object(digestBase_obj, \"[B\");\n+    stubAddr = StubRoutines::sha3_implCompress();\n+    stubName = \"sha3_implCompress\";\n+    digest_length = get_digest_length_from_digest_object(digestBase_obj);\n+    if (digest_length == NULL) return false;\n+    break;\n@@ -6257,3 +6270,10 @@\n-  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(),\n-                                 stubAddr, stubName, TypePtr::BOTTOM,\n-                                 src_start, state);\n+  Node* call;\n+  if (digest_length == NULL) {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(false),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state);\n+  } else {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(true),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, digest_length);\n+  }\n@@ -6266,1 +6286,1 @@\n-\/\/ Calculate MD5\/SHA\/SHA2\/SHA5 for multi-block byte[] array.\n+\/\/ Calculate MD5\/SHA\/SHA2\/SHA5\/SHA3 for multi-block byte[] array.\n@@ -6270,3 +6290,3 @@\n-  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 4, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512\/SHA3 instruction support\");\n+  assert((uint)predicate < 5, \"sanity\");\n@@ -6298,1 +6318,1 @@\n-  bool        long_state = false;\n+  const char* state_type = \"[I\";\n@@ -6327,1 +6347,9 @@\n-      long_state = true;\n+      state_type = \"[J\";\n+    }\n+    break;\n+  case 4:\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_sha3_implCompress)) {\n+      klass_digestBase_name = \"sun\/security\/provider\/SHA3\";\n+      stub_name = \"sha3_implCompressMB\";\n+      stub_addr = StubRoutines::sha3_implCompressMB();\n+      state_type = \"[B\";\n@@ -6345,1 +6373,1 @@\n-    return inline_digestBase_implCompressMB(digestBase_obj, instklass_digestBase, long_state, stub_addr, stub_name, src_start, ofs, limit);\n+    return inline_digestBase_implCompressMB(digestBase_obj, instklass_digestBase, state_type, stub_addr, stub_name, src_start, ofs, limit);\n@@ -6352,1 +6380,1 @@\n-                                                      bool long_state, address stubAddr, const char *stubName,\n+                                                      const char* state_type, address stubAddr, const char *stubName,\n@@ -6359,6 +6387,1 @@\n-  Node* state;\n-  if (long_state) {\n-    state = get_long_state_from_digest_object(digest_obj);\n-  } else {\n-    state = get_state_from_digest_object(digest_obj);\n-  }\n+  Node* state = get_state_from_digest_object(digest_obj, state_type);\n@@ -6367,0 +6390,6 @@\n+  Node* digest_length = NULL;\n+  if (strcmp(\"sha3_implCompressMB\", stubName) == 0) {\n+    digest_length = get_digest_length_from_digest_object(digest_obj);\n+    if (digest_length == NULL) return false;\n+  }\n+\n@@ -6368,4 +6397,13 @@\n-  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP,\n-                                 OptoRuntime::digestBase_implCompressMB_Type(),\n-                                 stubAddr, stubName, TypePtr::BOTTOM,\n-                                 src_start, state, ofs, limit);\n+  Node* call;\n+  if (digest_length == NULL) {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP,\n+                             OptoRuntime::digestBase_implCompressMB_Type(false),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, ofs, limit);\n+  } else {\n+     call = make_runtime_call(RC_LEAF|RC_NO_FP,\n+                             OptoRuntime::digestBase_implCompressMB_Type(true),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, digest_length, ofs, limit);\n+  }\n+\n@@ -6380,3 +6418,3 @@\n-Node * LibraryCallKit::get_state_from_digest_object(Node *digest_object) {\n-  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[I\", \/*is_exact*\/ false);\n-  assert (digest_state != NULL, \"wrong version of sun.security.provider.MD5\/SHA\/SHA2\");\n+Node * LibraryCallKit::get_state_from_digest_object(Node *digest_object, const char *state_type) {\n+  Node* digest_state = load_field_from_object(digest_object, \"state\", state_type, \/*is_exact*\/ false);\n+  assert (digest_state != NULL, \"wrong version of sun.security.provider.MD5\/SHA\/SHA2\/SHA5\/SHA3\");\n@@ -6390,9 +6428,5 @@\n-\/\/------------------------------get_long_state_from_digest_object-----------------------\n-Node * LibraryCallKit::get_long_state_from_digest_object(Node *digest_object) {\n-  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[J\", \/*is_exact*\/ false);\n-  assert (digest_state != NULL, \"wrong version of sun.security.provider.SHA5\");\n-  if (digest_state == NULL) return (Node *) NULL;\n-\n-  \/\/ now have the array, need to get the start address of the state array\n-  Node* state = array_element_address(digest_state, intcon(0), T_LONG);\n-  return state;\n+\/\/------------------------------get_digest_length_from_sha3_object----------------------------------\n+Node * LibraryCallKit::get_digest_length_from_digest_object(Node *digest_object) {\n+  Node* digest_length = load_field_from_object(digest_object, \"digestLength\", \"I\", \/*is_exact*\/ false);\n+  assert (digest_length != NULL, \"sanity\");\n+  return digest_length;\n@@ -6404,1 +6438,1 @@\n-\/\/    if (digestBaseObj instanceof MD5\/SHA\/SHA2\/SHA5) do_intrinsic, else do_javapath\n+\/\/    if (digestBaseObj instanceof MD5\/SHA\/SHA2\/SHA5\/SHA3) do_intrinsic, else do_javapath\n@@ -6407,3 +6441,3 @@\n-  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 4, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512\/SHA3 instruction support\");\n+  assert((uint)predicate < 5, \"sanity\");\n@@ -6445,0 +6479,6 @@\n+  case 4:\n+    if (UseSHA3Intrinsics) {\n+      \/\/ we want to do an instanceof comparison against the SHA3 class\n+      klass_name = \"sun\/security\/provider\/SHA3\";\n+    }\n+    break;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":81,"deletions":41,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-                                        bool long_state, address stubAddr, const char *stubName,\n+                                        const char* state_type, address stubAddr, const char *stubName,\n@@ -284,2 +284,2 @@\n-  Node* get_state_from_digest_object(Node *digestBase_object);\n-  Node* get_long_state_from_digest_object(Node *digestBase_object);\n+  Node* get_state_from_digest_object(Node *digestBase_object, const char* state_type);\n+  Node* get_digest_length_from_digest_object(Node *digestBase_object);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -964,1 +964,1 @@\n-const TypeFunc* OptoRuntime::digestBase_implCompress_Type() {\n+const TypeFunc* OptoRuntime::digestBase_implCompress_Type(bool is_sha3) {\n@@ -966,1 +966,1 @@\n-  int num_args = 2;\n+  int num_args = is_sha3 ? 3 : 2;\n@@ -972,0 +972,1 @@\n+  if (is_sha3) fields[argp++] = TypeInt::INT; \/\/ digest_length\n@@ -985,1 +986,1 @@\n-const TypeFunc* OptoRuntime::digestBase_implCompressMB_Type() {\n+const TypeFunc* OptoRuntime::digestBase_implCompressMB_Type(bool is_sha3) {\n@@ -987,1 +988,1 @@\n-  int num_args = 4;\n+  int num_args = is_sha3 ? 5 : 4;\n@@ -993,0 +994,1 @@\n+  if (is_sha3) fields[argp++] = TypeInt::INT; \/\/ digest_length\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -281,2 +281,2 @@\n-  static const TypeFunc* digestBase_implCompress_Type();\n-  static const TypeFunc* digestBase_implCompressMB_Type();\n+  static const TypeFunc* digestBase_implCompress_Type(bool is_sha3);\n+  static const TypeFunc* digestBase_implCompressMB_Type(bool is_sha3);\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -351,0 +351,4 @@\n+  product(bool, UseSHA3Intrinsics, false, DIAGNOSTIC,                       \\\n+          \"Use intrinsics for SHA3 crypto hash function. \"                  \\\n+          \"Requires that UseSHA is enabled.\")                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+address StubRoutines::_sha3_implCompress     = NULL;\n+address StubRoutines::_sha3_implCompressMB   = NULL;\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,0 +231,2 @@\n+  static address _sha3_implCompress;\n+  static address _sha3_implCompressMB;\n@@ -410,0 +412,2 @@\n+  static address sha3_implCompress()     { return _sha3_implCompress; }\n+  static address sha3_implCompressMB()   { return _sha3_implCompressMB; }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -76,0 +77,4 @@\n+    private void implCompressCheck(byte[] b, int ofs) {\n+        Objects.requireNonNull(b);\n+    }\n+\n@@ -81,4 +86,10 @@\n-        for (int i = 0; i < buffer.length; i++) {\n-            state[i] ^= b[ofs++];\n-        }\n-        keccak();\n+        implCompressCheck(b, ofs);\n+        implCompress0(b, ofs);\n+    }\n+\n+    @IntrinsicCandidate\n+    private void implCompress0(byte[] b, int ofs) {\n+       for (int i = 0; i < buffer.length; i++) {\n+           state[i] ^= b[ofs++];\n+       }\n+       keccak();\n@@ -97,4 +108,1 @@\n-        for (int i = 0; i < buffer.length; i++) {\n-            state[i] ^= buffer[i];\n-        }\n-        keccak();\n+        implCompress(buffer, 0);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -604,0 +604,1 @@\n+        add(toBeInvestigated, \"sun\/security\/provider\/SHA3.\" + shaCompressName + \"([BI)V\");\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.test\/src\/org\/graalvm\/compiler\/hotspot\/test\/CheckGraalIntrinsics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary C2 support for MD5\/SHA-1\/SHA-224\/SHA-256\/SHA-384\/SHA-512\n+ * @summary C2 support for MD5\/SHA-1\/SHA-224\/SHA-256\/SHA-384\/SHA-512\/SHA3\n@@ -47,0 +47,12 @@\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512\n+ *      compiler.intrinsics.sha.TestDigest\n@@ -66,0 +78,12 @@\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n@@ -83,0 +107,25 @@\n+ *\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-224\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-256\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-384\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-512\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/TestDigest.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    public static final String USE_SHA3_INTRINSICS_OPTION\n+            = \"UseSHA3Intrinsics\";\n@@ -67,0 +69,2 @@\n+    protected static final String SHA3_INTRINSICS_ARE_NOT_AVAILABLE\n+            = \"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\";\n@@ -92,0 +96,2 @@\n+        case DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION:\n+            return DigestOptionsBase.SHA3_INTRINSICS_ARE_NOT_AVAILABLE;\n@@ -118,0 +124,2 @@\n+            case DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION:\n+                return IntrinsicPredicates.SHA3_INSTRUCTION_AVAILABLE;\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/DigestOptionsBase.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify UseSHA3Intrinsics option processing on supported CPU.\n+ * @library \/test\/lib testcases \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI\n+ *                   compiler.intrinsics.sha.cli.TestUseSHA3IntrinsicsOptionOnSupportedCPU\n+ *\/\n+\n+package compiler.intrinsics.sha.cli;\n+\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForSupportedCPU;\n+\n+public class TestUseSHA3IntrinsicsOptionOnSupportedCPU {\n+    public static void main(String args[]) throws Throwable {\n+        new DigestOptionsBase(new GenericTestCaseForSupportedCPU(\n+                DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION)).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify UseSHA3Intrinsics option processing on unsupported CPU.\n+ * @library \/test\/lib testcases \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI\n+ *                   compiler.intrinsics.sha.cli.TestUseSHA3IntrinsicsOptionOnUnsupportedCPU\n+ *\/\n+\n+package compiler.intrinsics.sha.cli;\n+\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.UseSHAIntrinsicsSpecificTestCaseForUnsupportedCPU;\n+\n+public class TestUseSHA3IntrinsicsOptionOnUnsupportedCPU {\n+    public static void main(String args[]) throws Throwable {\n+        new DigestOptionsBase(\n+                new GenericTestCaseForUnsupportedX86CPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new GenericTestCaseForUnsupportedAArch64CPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new UseSHAIntrinsicsSpecificTestCaseForUnsupportedCPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new GenericTestCaseForOtherCPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION)).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnUnsupportedCPU.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -69,1 +69,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -86,1 +88,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -105,1 +109,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -124,1 +130,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForSupportedCPU.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -78,1 +78,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n@@ -97,1 +99,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForUnsupportedCPU.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    protected static final String SHA3_INTRINSIC_ID\n+            = \"_sha3_implCompress\";\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/DigestSanityTestBase.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ * @comment the test verifies compilation of java.base methods, so it can't be run w\/ AOT'ed java.base\n+ * @requires !vm.aot.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *                    negative_224.log negative_256.log negative_384.log negative_512.log\n+ *\/\n+\n+package compiler.intrinsics.sha.sanity;\n+\n+import compiler.testlibrary.sha.predicate.IntrinsicPredicates;\n+\n+public class TestSHA3Intrinsics {\n+    public static void main(String args[]) throws Exception {\n+        new DigestSanityTestBase(IntrinsicPredicates.isSHA3IntrinsicAvailable(),\n+                DigestSanityTestBase.SHA3_INTRINSIC_ID).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ * @comment the test verifies compilation of java.base methods, so it can't be run w\/ AOT'ed java.base\n+ * @requires !vm.aot.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log negative_224.log negative_256.log\n+ *                    negative_384.log negative_512.log\n+ *\/\n+\n+package compiler.intrinsics.sha.sanity;\n+\n+import compiler.testlibrary.sha.predicate.IntrinsicPredicates;\n+\n+public class TestSHA3MultiBlockIntrinsics {\n+    public static void main(String args[]) throws Exception {\n+        new DigestSanityTestBase(IntrinsicPredicates.isSHA3IntrinsicAvailable(),\n+                DigestSanityTestBase.MB_INTRINSIC_ID).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -100,0 +100,4 @@\n+    public static final BooleanSupplier SHA3_INSTRUCTION_AVAILABLE\n+            \/\/ sha3 is only implemented on aarch64 for now\n+            = new CPUSpecificPredicate(\"aarch64.*\", new String[] {\"sha3\"          }, null);\n+\n@@ -102,3 +106,2 @@\n-                    new OrPredicate(\n-                            IntrinsicPredicates.SHA256_INSTRUCTION_AVAILABLE,\n-                            IntrinsicPredicates.SHA512_INSTRUCTION_AVAILABLE));\n+              new OrPredicate(IntrinsicPredicates.SHA256_INSTRUCTION_AVAILABLE,\n+              new OrPredicate(IntrinsicPredicates.SHA512_INSTRUCTION_AVAILABLE, IntrinsicPredicates.SHA3_INSTRUCTION_AVAILABLE)));\n@@ -126,0 +129,5 @@\n+    public static BooleanSupplier isSHA3IntrinsicAvailable() {\n+        return new AndPredicate(IntrinsicPredicates.COMPILABLE_BY_C2,\n+                                IntrinsicPredicates.isIntrinsicAvailable(\"sun.security.provider.SHA3\", \"implCompress0\"));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/testlibrary\/sha\/predicate\/IntrinsicPredicates.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @library \/test\/lib\n+ * @summary testing SHA3-224\/256\/384\/512.\n+ *\/\n+public class SHA3 {\n+\n+    static byte[] msg1600bits;\n+    static {\n+        msg1600bits = new byte[200];\n+        for (int i = 0; i < 200; i++)\n+            msg1600bits[i] = (byte) 0xa3;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        MessageDigest md;\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-224_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-224\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"6B4E0342 3667DBB7 3B6E1545 4F0EB1AB D4597F9A 1B078E3F 5B5A6BC7\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-224_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"9376816A BA503F72 F96CE7EB 65AC095D EEE3BE4B F9BBC2A1 CB7E11E0\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-256_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-256\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"A7FFC6F8 BF1ED766 51C14756 A061D662 F580FF4D E43B49FA 82D80A4B 80F8434A\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-256_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"79F38ADE C5C20307 A98EF76E 8324AFBF D46CFD81 B22E3973 C65FA1BD 9DE31787\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-384_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-384\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"0C63A75B 845E4F7D 01107D85 2E4C2485 C51A50AA AA94FC61 995E71BB EE983A2A\" +\n+                                             \"C3713831 264ADB47 FB6BD1E0 58D5F004\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-384_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"1881DE2C A7E41EF9 5DC4732B 8F5F002B 189CC1E4 2B74168E D1732649 CE1DBCDD\" +\n+                                             \"76197A31 FD55EE98 9F2D7050 DD473E8F\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-512_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-512\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"A69F73CC A23A9AC5 C8B567DC 185A756E 97C98216 4FE25859 E0D1DCC1 475C80A6\" +\n+                                             \"15B2123A F1F5F94C 11E3E940 2C3AC558 F500199D 95B6D3E3 01758586 281DCD26\")));\n+        \/\/ Test vectors obtaned from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-512_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"E76DFAD2 2084A8B1 467FCF2F FA58361B EC7628ED F5F3FDC0 E4805DC4 8CAEECA8\" +\n+                                             \"1B7C13C3 0ADF52A3 65958473 9A2DF46B E589C51C A1A4A841 6DF6545A 1CE8BA00\")));\n+    }\n+\n+    static byte[] xeh(String in) {\n+        in = in.replaceAll(\" \", \"\");\n+        int len = in.length() \/ 2;\n+        byte[] out = new byte[len];\n+        for (int i = 0; i < len; i++) {\n+            out[i] = (byte)Integer.parseInt(in.substring(i * 2, i * 2 + 2), 16);\n+        }\n+        return out;\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHA3.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    @Param({\"md2\", \"md5\", \"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\"})\n+    @Param({\"md2\", \"md5\", \"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA3-224\", \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/MessageDigests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}