{"files":[{"patch":"@@ -1050,0 +1050,38 @@\n+class SHA3SIMDOp(Instruction):\n+\n+    def generate(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            self.reg = [FloatRegister().generate(), FloatRegister().generate(),\n+                        FloatRegister().generate(), FloatRegister().generate()]\n+        else:\n+            self.reg = [FloatRegister().generate(), FloatRegister().generate(),\n+                        FloatRegister().generate()]\n+            if (self._name == 'xar'):\n+                self.imm6 = random.randint(0, 63)\n+        return self\n+\n+    def cstr(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T16B, %s, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2], self.reg[3])))\n+        elif (self._name == 'rax1'):\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T2D, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2])))\n+        else:\n+            return (super(SHA3SIMDOp, self).cstr()\n+                    + ('%s, __ T2D, %s, %s, %s);' % (self.reg[0], self.reg[1], self.reg[2], self.imm6)))\n+\n+    def astr(self):\n+        if ((self._name == 'eor3') or (self._name == 'bcax')):\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.16B, %s.16B, %s.16B, %s.16B' % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\"), self.reg[3].astr(\"v\"))))\n+        elif (self._name == 'rax1'):\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.2D, %s.2D, %s.2D') % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\")))\n+        else:\n+            return (super(SHA3SIMDOp, self).astr()\n+                    + ('\\t%s.2D, %s.2D, %s.2D, #%s') % (self.reg[0].astr(\"v\"), self.reg[1].astr(\"v\"),\n+                        self.reg[2].astr(\"v\"), self.imm6))\n+\n@@ -1287,2 +1325,0 @@\n-generate(SHA512SIMDOp, [\"sha512h\", \"sha512h2\", \"sha512su0\", \"sha512su1\"])\n-\n@@ -1363,0 +1399,5 @@\n+# ARMv8.2A\n+generate(SHA512SIMDOp, [\"sha512h\", \"sha512h2\", \"sha512su0\", \"sha512su1\"])\n+\n+generate(SHA3SIMDOp, [\"bcax\", \"eor3\", \"rax1\", \"xar\"])\n+\n@@ -1414,2 +1455,2 @@\n-# compile for sve with 8.1 and sha2 because of lse atomics and sha512 crypto extension.\n-subprocess.check_call([AARCH64_AS, \"-march=armv8.1-a+sha2+sve\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n+# compile for sve with 8.2 and sha3 because of SHA3 crypto extension.\n+subprocess.check_call([AARCH64_AS, \"-march=armv8.2-a+sha3+sve\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64-asmtest.py","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -617,6 +617,0 @@\n-\/\/ SHA512SIMDOp\n-    __ sha512h(v22, __ T2D, v27, v4);                  \/\/       sha512h         q22, q27, v4.2D\n-    __ sha512h2(v7, __ T2D, v6, v1);                   \/\/       sha512h2                q7, q6, v1.2D\n-    __ sha512su0(v26, __ T2D, v15);                    \/\/       sha512su0               v26.2D, v15.2D\n-    __ sha512su1(v2, __ T2D, v13, v13);                \/\/       sha512su1               v2.2D, v13.2D, v13.2D\n-\n@@ -708,9 +702,9 @@\n-    __ swp(Assembler::xword, r24, r24, r4);            \/\/       swp     x24, x24, [x4]\n-    __ ldadd(Assembler::xword, r20, r16, r0);          \/\/       ldadd   x20, x16, [x0]\n-    __ ldbic(Assembler::xword, r4, r21, r11);          \/\/       ldclr   x4, x21, [x11]\n-    __ ldeor(Assembler::xword, r30, r16, r22);         \/\/       ldeor   x30, x16, [x22]\n-    __ ldorr(Assembler::xword, r4, r15, r23);          \/\/       ldset   x4, x15, [x23]\n-    __ ldsmin(Assembler::xword, r26, r6, r12);         \/\/       ldsmin  x26, x6, [x12]\n-    __ ldsmax(Assembler::xword, r15, r14, r15);        \/\/       ldsmax  x15, x14, [x15]\n-    __ ldumin(Assembler::xword, r9, r25, r29);         \/\/       ldumin  x9, x25, [x29]\n-    __ ldumax(Assembler::xword, r11, r20, r12);        \/\/       ldumax  x11, x20, [x12]\n+    __ swp(Assembler::xword, r23, r28, r5);            \/\/       swp     x23, x28, [x5]\n+    __ ldadd(Assembler::xword, r7, r6, r1);            \/\/       ldadd   x7, x6, [x1]\n+    __ ldbic(Assembler::xword, r27, r16, r2);          \/\/       ldclr   x27, x16, [x2]\n+    __ ldeor(Assembler::xword, r14, r14, r24);         \/\/       ldeor   x14, x14, [x24]\n+    __ ldorr(Assembler::xword, r24, r4, r20);          \/\/       ldset   x24, x4, [x20]\n+    __ ldsmin(Assembler::xword, r16, r0, r4);          \/\/       ldsmin  x16, x0, [x4]\n+    __ ldsmax(Assembler::xword, r21, r11, r30);        \/\/       ldsmax  x21, x11, [x30]\n+    __ ldumin(Assembler::xword, r16, r22, r4);         \/\/       ldumin  x16, x22, [x4]\n+    __ ldumax(Assembler::xword, r15, r23, r26);        \/\/       ldumax  x15, x23, [x26]\n@@ -719,9 +713,9 @@\n-    __ swpa(Assembler::xword, r18, r22, r16);          \/\/       swpa    x18, x22, [x16]\n-    __ ldadda(Assembler::xword, r21, r24, r26);        \/\/       ldadda  x21, x24, [x26]\n-    __ ldbica(Assembler::xword, r6, r6, r16);          \/\/       ldclra  x6, x6, [x16]\n-    __ ldeora(Assembler::xword, r16, r25, r16);        \/\/       ldeora  x16, x25, [x16]\n-    __ ldorra(Assembler::xword, r28, r24, r16);        \/\/       ldseta  x28, x24, [x16]\n-    __ ldsmina(Assembler::xword, r26, r15, r10);       \/\/       ldsmina x26, x15, [x10]\n-    __ ldsmaxa(Assembler::xword, r13, r14, r20);       \/\/       ldsmaxa x13, x14, [x20]\n-    __ ldumina(Assembler::xword, r1, r23, r30);        \/\/       ldumina x1, x23, [x30]\n-    __ ldumaxa(Assembler::xword, r14, r2, r6);         \/\/       ldumaxa x14, x2, [x6]\n+    __ swpa(Assembler::xword, r6, r12, r15);           \/\/       swpa    x6, x12, [x15]\n+    __ ldadda(Assembler::xword, r14, r15, r9);         \/\/       ldadda  x14, x15, [x9]\n+    __ ldbica(Assembler::xword, r25, r29, r11);        \/\/       ldclra  x25, x29, [x11]\n+    __ ldeora(Assembler::xword, r20, r12, r18);        \/\/       ldeora  x20, x12, [x18]\n+    __ ldorra(Assembler::xword, r22, r16, r21);        \/\/       ldseta  x22, x16, [x21]\n+    __ ldsmina(Assembler::xword, r24, r26, r6);        \/\/       ldsmina x24, x26, [x6]\n+    __ ldsmaxa(Assembler::xword, r6, r16, r16);        \/\/       ldsmaxa x6, x16, [x16]\n+    __ ldumina(Assembler::xword, r25, r16, r28);       \/\/       ldumina x25, x16, [x28]\n+    __ ldumaxa(Assembler::xword, r24, r16, r26);       \/\/       ldumaxa x24, x16, [x26]\n@@ -730,9 +724,9 @@\n-    __ swpal(Assembler::xword, r3, r8, r25);           \/\/       swpal   x3, x8, [x25]\n-    __ ldaddal(Assembler::xword, r0, r27, r30);        \/\/       ldaddal x0, x27, [x30]\n-    __ ldbical(Assembler::xword, r5, r5, r30);         \/\/       ldclral x5, x5, [x30]\n-    __ ldeoral(Assembler::xword, r11, r25, r0);        \/\/       ldeoral x11, x25, [x0]\n-    __ ldorral(Assembler::xword, zr, r0, r19);         \/\/       ldsetal xzr, x0, [x19]\n-    __ ldsminal(Assembler::xword, r29, r26, r9);       \/\/       ldsminal        x29, x26, [x9]\n-    __ ldsmaxal(Assembler::xword, r26, r12, r15);      \/\/       ldsmaxal        x26, x12, [x15]\n-    __ lduminal(Assembler::xword, r11, r11, r18);      \/\/       lduminal        x11, x11, [x18]\n-    __ ldumaxal(Assembler::xword, r25, r22, r24);      \/\/       ldumaxal        x25, x22, [x24]\n+    __ swpal(Assembler::xword, r15, r10, r13);         \/\/       swpal   x15, x10, [x13]\n+    __ ldaddal(Assembler::xword, r14, r20, r1);        \/\/       ldaddal x14, x20, [x1]\n+    __ ldbical(Assembler::xword, r23, r30, r14);       \/\/       ldclral x23, x30, [x14]\n+    __ ldeoral(Assembler::xword, r2, r6, r3);          \/\/       ldeoral x2, x6, [x3]\n+    __ ldorral(Assembler::xword, r8, r25, r0);         \/\/       ldsetal x8, x25, [x0]\n+    __ ldsminal(Assembler::xword, r27, r30, r5);       \/\/       ldsminal        x27, x30, [x5]\n+    __ ldsmaxal(Assembler::xword, r5, r30, r11);       \/\/       ldsmaxal        x5, x30, [x11]\n+    __ lduminal(Assembler::xword, r25, r0, sp);        \/\/       lduminal        x25, x0, [sp]\n+    __ ldumaxal(Assembler::xword, r0, r19, r29);       \/\/       ldumaxal        x0, x19, [x29]\n@@ -741,9 +735,9 @@\n-    __ swpl(Assembler::xword, r0, r17, r11);           \/\/       swpl    x0, x17, [x11]\n-    __ ldaddl(Assembler::xword, r6, r29, r6);          \/\/       ldaddl  x6, x29, [x6]\n-    __ ldbicl(Assembler::xword, r5, r5, r21);          \/\/       ldclrl  x5, x5, [x21]\n-    __ ldeorl(Assembler::xword, r19, r16, r18);        \/\/       ldeorl  x19, x16, [x18]\n-    __ ldorrl(Assembler::xword, r30, r27, r28);        \/\/       ldsetl  x30, x27, [x28]\n-    __ ldsminl(Assembler::xword, r1, r28, r1);         \/\/       ldsminl x1, x28, [x1]\n-    __ ldsmaxl(Assembler::xword, r20, r29, r16);       \/\/       ldsmaxl x20, x29, [x16]\n-    __ lduminl(Assembler::xword, r13, r10, r29);       \/\/       lduminl x13, x10, [x29]\n-    __ ldumaxl(Assembler::xword, r29, r19, r22);       \/\/       ldumaxl x29, x19, [x22]\n+    __ swpl(Assembler::xword, r26, r9, r26);           \/\/       swpl    x26, x9, [x26]\n+    __ ldaddl(Assembler::xword, r12, r15, r11);        \/\/       ldaddl  x12, x15, [x11]\n+    __ ldbicl(Assembler::xword, r11, r18, r25);        \/\/       ldclrl  x11, x18, [x25]\n+    __ ldeorl(Assembler::xword, r22, r24, r0);         \/\/       ldeorl  x22, x24, [x0]\n+    __ ldorrl(Assembler::xword, r17, r11, r6);         \/\/       ldsetl  x17, x11, [x6]\n+    __ ldsminl(Assembler::xword, r29, r6, r5);         \/\/       ldsminl x29, x6, [x5]\n+    __ ldsmaxl(Assembler::xword, r5, r21, r19);        \/\/       ldsmaxl x5, x21, [x19]\n+    __ lduminl(Assembler::xword, r16, r18, r30);       \/\/       lduminl x16, x18, [x30]\n+    __ ldumaxl(Assembler::xword, r27, r28, r1);        \/\/       ldumaxl x27, x28, [x1]\n@@ -752,9 +746,9 @@\n-    __ swp(Assembler::word, r10, r4, sp);              \/\/       swp     w10, w4, [sp]\n-    __ ldadd(Assembler::word, r21, r8, sp);            \/\/       ldadd   w21, w8, [sp]\n-    __ ldbic(Assembler::word, r19, r10, r28);          \/\/       ldclr   w19, w10, [x28]\n-    __ ldeor(Assembler::word, r2, r25, r5);            \/\/       ldeor   w2, w25, [x5]\n-    __ ldorr(Assembler::word, r3, r8, r22);            \/\/       ldset   w3, w8, [x22]\n-    __ ldsmin(Assembler::word, r19, r13, r5);          \/\/       ldsmin  w19, w13, [x5]\n-    __ ldsmax(Assembler::word, r29, r24, r21);         \/\/       ldsmax  w29, w24, [x21]\n-    __ ldumin(Assembler::word, r26, r24, r3);          \/\/       ldumin  w26, w24, [x3]\n-    __ ldumax(Assembler::word, r24, r26, r23);         \/\/       ldumax  w24, w26, [x23]\n+    __ swp(Assembler::word, r28, r1, r20);             \/\/       swp     w28, w1, [x20]\n+    __ ldadd(Assembler::word, r29, r16, r13);          \/\/       ldadd   w29, w16, [x13]\n+    __ ldbic(Assembler::word, r10, r29, r29);          \/\/       ldclr   w10, w29, [x29]\n+    __ ldeor(Assembler::word, r19, r22, r10);          \/\/       ldeor   w19, w22, [x10]\n+    __ ldorr(Assembler::word, r4, zr, r21);            \/\/       ldset   w4, wzr, [x21]\n+    __ ldsmin(Assembler::word, r8, zr, r19);           \/\/       ldsmin  w8, wzr, [x19]\n+    __ ldsmax(Assembler::word, r10, r28, r2);          \/\/       ldsmax  w10, w28, [x2]\n+    __ ldumin(Assembler::word, r25, r5, r3);           \/\/       ldumin  w25, w5, [x3]\n+    __ ldumax(Assembler::word, r8, r22, r19);          \/\/       ldumax  w8, w22, [x19]\n@@ -763,9 +757,9 @@\n-    __ swpa(Assembler::word, r15, r21, r3);            \/\/       swpa    w15, w21, [x3]\n-    __ ldadda(Assembler::word, r24, r8, r25);          \/\/       ldadda  w24, w8, [x25]\n-    __ ldbica(Assembler::word, r20, r16, r17);         \/\/       ldclra  w20, w16, [x17]\n-    __ ldeora(Assembler::word, r2, r1, r0);            \/\/       ldeora  w2, w1, [x0]\n-    __ ldorra(Assembler::word, r24, r4, r3);           \/\/       ldseta  w24, w4, [x3]\n-    __ ldsmina(Assembler::word, r12, zr, r28);         \/\/       ldsmina w12, wzr, [x28]\n-    __ ldsmaxa(Assembler::word, r10, r26, r2);         \/\/       ldsmaxa w10, w26, [x2]\n-    __ ldumina(Assembler::word, r12, r18, sp);         \/\/       ldumina w12, w18, [sp]\n-    __ ldumaxa(Assembler::word, r1, r13, r29);         \/\/       ldumaxa w1, w13, [x29]\n+    __ swpa(Assembler::word, r13, r5, r29);            \/\/       swpa    w13, w5, [x29]\n+    __ ldadda(Assembler::word, r24, r21, r26);         \/\/       ldadda  w24, w21, [x26]\n+    __ ldbica(Assembler::word, r24, r3, r24);          \/\/       ldclra  w24, w3, [x24]\n+    __ ldeora(Assembler::word, r26, r23, r15);         \/\/       ldeora  w26, w23, [x15]\n+    __ ldorra(Assembler::word, r21, r3, r24);          \/\/       ldseta  w21, w3, [x24]\n+    __ ldsmina(Assembler::word, r8, r25, r20);         \/\/       ldsmina w8, w25, [x20]\n+    __ ldsmaxa(Assembler::word, r16, r17, r2);         \/\/       ldsmaxa w16, w17, [x2]\n+    __ ldumina(Assembler::word, r1, r0, r24);          \/\/       ldumina w1, w0, [x24]\n+    __ ldumaxa(Assembler::word, r4, r3, r12);          \/\/       ldumaxa w4, w3, [x12]\n@@ -774,9 +768,9 @@\n-    __ swpal(Assembler::word, r0, r19, r12);           \/\/       swpal   w0, w19, [x12]\n-    __ ldaddal(Assembler::word, r17, r22, r13);        \/\/       ldaddal w17, w22, [x13]\n-    __ ldbical(Assembler::word, r28, r30, sp);         \/\/       ldclral w28, w30, [sp]\n-    __ ldeoral(Assembler::word, r1, r26, r28);         \/\/       ldeoral w1, w26, [x28]\n-    __ ldorral(Assembler::word, r4, r30, r4);          \/\/       ldsetal w4, w30, [x4]\n-    __ ldsminal(Assembler::word, r6, r30, r26);        \/\/       ldsminal        w6, w30, [x26]\n-    __ ldsmaxal(Assembler::word, r18, r9, r8);         \/\/       ldsmaxal        w18, w9, [x8]\n-    __ lduminal(Assembler::word, r12, r0, r20);        \/\/       lduminal        w12, w0, [x20]\n-    __ ldumaxal(Assembler::word, r1, r24, r2);         \/\/       ldumaxal        w1, w24, [x2]\n+    __ swpal(Assembler::word, zr, r28, r10);           \/\/       swpal   wzr, w28, [x10]\n+    __ ldaddal(Assembler::word, r26, r2, r12);         \/\/       ldaddal w26, w2, [x12]\n+    __ ldbical(Assembler::word, r18, zr, r1);          \/\/       ldclral w18, wzr, [x1]\n+    __ ldeoral(Assembler::word, r13, r29, r0);         \/\/       ldeoral w13, w29, [x0]\n+    __ ldorral(Assembler::word, r19, r12, r17);        \/\/       ldsetal w19, w12, [x17]\n+    __ ldsminal(Assembler::word, r22, r13, r28);       \/\/       ldsminal        w22, w13, [x28]\n+    __ ldsmaxal(Assembler::word, r30, zr, r1);         \/\/       ldsmaxal        w30, wzr, [x1]\n+    __ lduminal(Assembler::word, r26, r28, r4);        \/\/       lduminal        w26, w28, [x4]\n+    __ ldumaxal(Assembler::word, r30, r4, r6);         \/\/       ldumaxal        w30, w4, [x6]\n@@ -785,9 +779,21 @@\n-    __ swpl(Assembler::word, r0, r9, r24);             \/\/       swpl    w0, w9, [x24]\n-    __ ldaddl(Assembler::word, r26, r16, r30);         \/\/       ldaddl  w26, w16, [x30]\n-    __ ldbicl(Assembler::word, r3, r10, r23);          \/\/       ldclrl  w3, w10, [x23]\n-    __ ldeorl(Assembler::word, r10, r4, r18);          \/\/       ldeorl  w10, w4, [x18]\n-    __ ldorrl(Assembler::word, r2, r11, r8);           \/\/       ldsetl  w2, w11, [x8]\n-    __ ldsminl(Assembler::word, r10, r15, r17);        \/\/       ldsminl w10, w15, [x17]\n-    __ ldsmaxl(Assembler::word, r2, r10, r12);         \/\/       ldsmaxl w2, w10, [x12]\n-    __ lduminl(Assembler::word, r12, r15, r13);        \/\/       lduminl w12, w15, [x13]\n-    __ ldumaxl(Assembler::word, r2, r7, r20);          \/\/       ldumaxl w2, w7, [x20]\n+    __ swpl(Assembler::word, r30, r26, r18);           \/\/       swpl    w30, w26, [x18]\n+    __ ldaddl(Assembler::word, r9, r8, r12);           \/\/       ldaddl  w9, w8, [x12]\n+    __ ldbicl(Assembler::word, r0, r20, r1);           \/\/       ldclrl  w0, w20, [x1]\n+    __ ldeorl(Assembler::word, r24, r2, r0);           \/\/       ldeorl  w24, w2, [x0]\n+    __ ldorrl(Assembler::word, r9, r24, r26);          \/\/       ldsetl  w9, w24, [x26]\n+    __ ldsminl(Assembler::word, r16, r30, r3);         \/\/       ldsminl w16, w30, [x3]\n+    __ ldsmaxl(Assembler::word, r10, r23, r10);        \/\/       ldsmaxl w10, w23, [x10]\n+    __ lduminl(Assembler::word, r4, r18, r2);          \/\/       lduminl w4, w18, [x2]\n+    __ ldumaxl(Assembler::word, r11, r8, r10);         \/\/       ldumaxl w11, w8, [x10]\n+\n+\/\/ SHA512SIMDOp\n+    __ sha512h(v15, __ T2D, v16, v2);                  \/\/       sha512h         q15, q16, v2.2D\n+    __ sha512h2(v9, __ T2D, v11, v12);                 \/\/       sha512h2                q9, q11, v12.2D\n+    __ sha512su0(v14, __ T2D, v13);                    \/\/       sha512su0               v14.2D, v13.2D\n+    __ sha512su1(v2, __ T2D, v6, v19);                 \/\/       sha512su1               v2.2D, v6.2D, v19.2D\n+\n+\/\/ SHA3SIMDOp\n+    __ bcax(v25, __ T16B, v15, v4, v2);                \/\/       bcax            v25.16B, v15.16B, v4.16B, v2.16B\n+    __ eor3(v4, __ T16B, v11, v17, v20);               \/\/       eor3            v4.16B, v11.16B, v17.16B, v20.16B\n+    __ rax1(v16, __ T2D, v17, v10);                    \/\/       rax1            v16.2D, v17.2D, v10.2D\n+    __ xar(v20, __ T2D, v22, v12, 52);                 \/\/       xar             v20.2D, v22.2D, v12.2D, #52\n@@ -796,38 +802,38 @@\n-    __ sve_add(z25, __ B, z15, z4);                    \/\/       add     z25.b, z15.b, z4.b\n-    __ sve_sub(z4, __ S, z11, z17);                    \/\/       sub     z4.s, z11.s, z17.s\n-    __ sve_fadd(z16, __ D, z17, z10);                  \/\/       fadd    z16.d, z17.d, z10.d\n-    __ sve_fmul(z22, __ D, z12, z25);                  \/\/       fmul    z22.d, z12.d, z25.d\n-    __ sve_fsub(z28, __ D, z14, z10);                  \/\/       fsub    z28.d, z14.d, z10.d\n-    __ sve_abs(z1, __ H, p3, z30);                     \/\/       abs     z1.h, p3\/m, z30.h\n-    __ sve_add(z15, __ B, p1, z2);                     \/\/       add     z15.b, p1\/m, z15.b, z2.b\n-    __ sve_asr(z13, __ S, p4, z16);                    \/\/       asr     z13.s, p4\/m, z13.s, z16.s\n-    __ sve_cnt(z3, __ D, p0, z11);                     \/\/       cnt     z3.d, p0\/m, z11.d\n-    __ sve_lsl(z5, __ D, p2, z14);                     \/\/       lsl     z5.d, p2\/m, z5.d, z14.d\n-    __ sve_lsr(z29, __ B, p0, z20);                    \/\/       lsr     z29.b, p0\/m, z29.b, z20.b\n-    __ sve_mul(z20, __ S, p5, z27);                    \/\/       mul     z20.s, p5\/m, z20.s, z27.s\n-    __ sve_neg(z26, __ B, p6, z4);                     \/\/       neg     z26.b, p6\/m, z4.b\n-    __ sve_not(z22, __ B, p4, z30);                    \/\/       not     z22.b, p4\/m, z30.b\n-    __ sve_smax(z11, __ H, p2, z27);                   \/\/       smax    z11.h, p2\/m, z11.h, z27.h\n-    __ sve_smin(z28, __ S, p5, z30);                   \/\/       smin    z28.s, p5\/m, z28.s, z30.s\n-    __ sve_sub(z30, __ S, p1, z13);                    \/\/       sub     z30.s, p1\/m, z30.s, z13.s\n-    __ sve_fabs(z30, __ D, p4, z26);                   \/\/       fabs    z30.d, p4\/m, z26.d\n-    __ sve_fadd(z15, __ S, p3, z11);                   \/\/       fadd    z15.s, p3\/m, z15.s, z11.s\n-    __ sve_fdiv(z6, __ D, p7, z16);                    \/\/       fdiv    z6.d, p7\/m, z6.d, z16.d\n-    __ sve_fmax(z27, __ S, p7, z7);                    \/\/       fmax    z27.s, p7\/m, z27.s, z7.s\n-    __ sve_fmin(z19, __ D, p2, z4);                    \/\/       fmin    z19.d, p2\/m, z19.d, z4.d\n-    __ sve_fmul(z17, __ S, p4, z22);                   \/\/       fmul    z17.s, p4\/m, z17.s, z22.s\n-    __ sve_fneg(z28, __ D, p3, z21);                   \/\/       fneg    z28.d, p3\/m, z21.d\n-    __ sve_frintm(z18, __ S, p5, z2);                  \/\/       frintm  z18.s, p5\/m, z2.s\n-    __ sve_frintn(z6, __ S, p3, z15);                  \/\/       frintn  z6.s, p3\/m, z15.s\n-    __ sve_frintp(z12, __ D, p5, z1);                  \/\/       frintp  z12.d, p5\/m, z1.d\n-    __ sve_fsqrt(z18, __ S, p1, z17);                  \/\/       fsqrt   z18.s, p1\/m, z17.s\n-    __ sve_fsub(z15, __ S, p5, z13);                   \/\/       fsub    z15.s, p5\/m, z15.s, z13.s\n-    __ sve_fmla(z20, __ D, p7, z27, z11);              \/\/       fmla    z20.d, p7\/m, z27.d, z11.d\n-    __ sve_fmls(z3, __ D, p0, z30, z23);               \/\/       fmls    z3.d, p0\/m, z30.d, z23.d\n-    __ sve_fnmla(z17, __ S, p2, z27, z26);             \/\/       fnmla   z17.s, p2\/m, z27.s, z26.s\n-    __ sve_fnmls(z6, __ D, p5, z22, z30);              \/\/       fnmls   z6.d, p5\/m, z22.d, z30.d\n-    __ sve_mla(z2, __ H, p7, z26, z18);                \/\/       mla     z2.h, p7\/m, z26.h, z18.h\n-    __ sve_mls(z22, __ B, p4, z2, z17);                \/\/       mls     z22.b, p4\/m, z2.b, z17.b\n-    __ sve_and(z24, z25, z22);                         \/\/       and     z24.d, z25.d, z22.d\n-    __ sve_eor(z18, z12, z3);                          \/\/       eor     z18.d, z12.d, z3.d\n-    __ sve_orr(z29, z28, z16);                         \/\/       orr     z29.d, z28.d, z16.d\n+    __ sve_add(z23, __ H, z28, z14);                   \/\/       add     z23.h, z28.h, z14.h\n+    __ sve_sub(z24, __ D, z1, z11);                    \/\/       sub     z24.d, z1.d, z11.d\n+    __ sve_fadd(z10, __ S, z15, z7);                   \/\/       fadd    z10.s, z15.s, z7.s\n+    __ sve_fmul(z3, __ D, z13, z19);                   \/\/       fmul    z3.d, z13.d, z19.d\n+    __ sve_fsub(z16, __ S, z3, z1);                    \/\/       fsub    z16.s, z3.s, z1.s\n+    __ sve_abs(z29, __ H, p1, z8);                     \/\/       abs     z29.h, p1\/m, z8.h\n+    __ sve_add(z28, __ S, p7, z0);                     \/\/       add     z28.s, p7\/m, z28.s, z0.s\n+    __ sve_asr(z7, __ D, p5, z23);                     \/\/       asr     z7.d, p5\/m, z7.d, z23.d\n+    __ sve_cnt(z21, __ B, p6, z24);                    \/\/       cnt     z21.b, p6\/m, z24.b\n+    __ sve_lsl(z1, __ D, p5, z16);                     \/\/       lsl     z1.d, p5\/m, z1.d, z16.d\n+    __ sve_lsr(z5, __ D, p3, z8);                      \/\/       lsr     z5.d, p3\/m, z5.d, z8.d\n+    __ sve_mul(z14, __ D, p7, z21);                    \/\/       mul     z14.d, p7\/m, z14.d, z21.d\n+    __ sve_neg(z18, __ H, p7, z5);                     \/\/       neg     z18.h, p7\/m, z5.h\n+    __ sve_not(z17, __ D, p7, z17);                    \/\/       not     z17.d, p7\/m, z17.d\n+    __ sve_smax(z19, __ H, p4, z12);                   \/\/       smax    z19.h, p4\/m, z19.h, z12.h\n+    __ sve_smin(z9, __ S, p1, z29);                    \/\/       smin    z9.s, p1\/m, z9.s, z29.s\n+    __ sve_sub(z26, __ B, p7, z29);                    \/\/       sub     z26.b, p7\/m, z26.b, z29.b\n+    __ sve_fabs(z10, __ S, p5, z9);                    \/\/       fabs    z10.s, p5\/m, z9.s\n+    __ sve_fadd(z23, __ D, p4, z16);                   \/\/       fadd    z23.d, p4\/m, z23.d, z16.d\n+    __ sve_fdiv(z3, __ D, p7, z14);                    \/\/       fdiv    z3.d, p7\/m, z3.d, z14.d\n+    __ sve_fmax(z18, __ S, p4, z22);                   \/\/       fmax    z18.s, p4\/m, z18.s, z22.s\n+    __ sve_fmin(z15, __ D, p1, z12);                   \/\/       fmin    z15.d, p1\/m, z15.d, z12.d\n+    __ sve_fmul(z10, __ S, p3, z22);                   \/\/       fmul    z10.s, p3\/m, z10.s, z22.s\n+    __ sve_fneg(z29, __ D, p4, z5);                    \/\/       fneg    z29.d, p4\/m, z5.d\n+    __ sve_frintm(z2, __ S, p4, z21);                  \/\/       frintm  z2.s, p4\/m, z21.s\n+    __ sve_frintn(z9, __ D, p5, z28);                  \/\/       frintn  z9.d, p5\/m, z28.d\n+    __ sve_frintp(z11, __ S, p6, z3);                  \/\/       frintp  z11.s, p6\/m, z3.s\n+    __ sve_fsqrt(z30, __ D, p6, z19);                  \/\/       fsqrt   z30.d, p6\/m, z19.d\n+    __ sve_fsub(z9, __ S, p7, z26);                    \/\/       fsub    z9.s, p7\/m, z9.s, z26.s\n+    __ sve_fmla(z6, __ D, p5, z22, z30);               \/\/       fmla    z6.d, p5\/m, z22.d, z30.d\n+    __ sve_fmls(z2, __ S, p7, z26, z18);               \/\/       fmls    z2.s, p7\/m, z26.s, z18.s\n+    __ sve_fnmla(z22, __ S, p4, z2, z17);              \/\/       fnmla   z22.s, p4\/m, z2.s, z17.s\n+    __ sve_fnmls(z24, __ D, p6, z22, z2);              \/\/       fnmls   z24.d, p6\/m, z22.d, z2.d\n+    __ sve_mla(z12, __ D, p1, z27, z29);               \/\/       mla     z12.d, p1\/m, z27.d, z29.d\n+    __ sve_mls(z16, __ D, p6, z6, z9);                 \/\/       mls     z16.d, p6\/m, z6.d, z9.d\n+    __ sve_and(z18, z7, z4);                           \/\/       and     z18.d, z7.d, z4.d\n+    __ sve_eor(z15, z9, z22);                          \/\/       eor     z15.d, z9.d, z22.d\n+    __ sve_orr(z2, z27, z20);                          \/\/       orr     z2.d, z27.d, z20.d\n@@ -836,9 +842,9 @@\n-    __ sve_andv(v6, __ S, p2, z28);                    \/\/       andv s6, p2, z28.s\n-    __ sve_orv(v7, __ H, p1, z7);                      \/\/       orv h7, p1, z7.h\n-    __ sve_eorv(v9, __ B, p5, z8);                     \/\/       eorv b9, p5, z8.b\n-    __ sve_smaxv(v27, __ B, p5, z30);                  \/\/       smaxv b27, p5, z30.b\n-    __ sve_sminv(v26, __ H, p0, z16);                  \/\/       sminv h26, p0, z16.h\n-    __ sve_fminv(v3, __ D, p6, z8);                    \/\/       fminv d3, p6, z8.d\n-    __ sve_fmaxv(v21, __ D, p6, z26);                  \/\/       fmaxv d21, p6, z26.d\n-    __ sve_fadda(v22, __ S, p0, z4);                   \/\/       fadda s22, p0, s22, z4.s\n-    __ sve_uaddv(v17, __ H, p0, z3);                   \/\/       uaddv d17, p0, z3.h\n+    __ sve_andv(v5, __ S, p6, z0);                     \/\/       andv s5, p6, z0.s\n+    __ sve_orv(v14, __ H, p1, z25);                    \/\/       orv h14, p1, z25.h\n+    __ sve_eorv(v27, __ D, p5, z26);                   \/\/       eorv d27, p5, z26.d\n+    __ sve_smaxv(v24, __ B, p5, z0);                   \/\/       smaxv b24, p5, z0.b\n+    __ sve_sminv(v6, __ B, p4, z0);                    \/\/       sminv b6, p4, z0.b\n+    __ sve_fminv(v15, __ S, p0, z9);                   \/\/       fminv s15, p0, z9.s\n+    __ sve_fmaxv(v5, __ S, p2, z27);                   \/\/       fmaxv s5, p2, z27.s\n+    __ sve_fadda(v20, __ S, p5, z20);                  \/\/       fadda s20, p5, s20, z20.s\n+    __ sve_uaddv(v10, __ D, p2, z16);                  \/\/       uaddv d10, p2, z16.d\n@@ -897,1 +903,1 @@\n-  a8:   14000242        b       9b0 <forth>\n+  a8:   14000246        b       9c0 <forth>\n@@ -900,1 +906,1 @@\n-  b4:   9400023f        bl      9b0 <forth>\n+  b4:   94000243        bl      9c0 <forth>\n@@ -903,1 +909,1 @@\n-  c0:   3400478a        cbz     w10, 9b0 <forth>\n+  c0:   3400480a        cbz     w10, 9c0 <forth>\n@@ -906,1 +912,1 @@\n-  cc:   35004728        cbnz    w8, 9b0 <forth>\n+  cc:   350047a8        cbnz    w8, 9c0 <forth>\n@@ -909,1 +915,1 @@\n-  d8:   b40046cb        cbz     x11, 9b0 <forth>\n+  d8:   b400474b        cbz     x11, 9c0 <forth>\n@@ -912,1 +918,1 @@\n-  e4:   b500467d        cbnz    x29, 9b0 <forth>\n+  e4:   b50046fd        cbnz    x29, 9c0 <forth>\n@@ -915,1 +921,1 @@\n-  f0:   10004613        adr     x19, 9b0 <forth>\n+  f0:   10004693        adr     x19, 9c0 <forth>\n@@ -919,1 +925,1 @@\n- 100:   36304596        tbz     w22, #6, 9b0 <forth>\n+ 100:   36304616        tbz     w22, #6, 9c0 <forth>\n@@ -922,1 +928,1 @@\n- 10c:   3758452c        tbnz    w12, #11, 9b0 <forth>\n+ 10c:   375845ac        tbnz    w12, #11, 9c0 <forth>\n@@ -939,1 +945,1 @@\n- 150:   54004300        b.eq    9b0 <forth>  \/\/ b.none\n+ 150:   54004380        b.eq    9c0 <forth>  \/\/ b.none\n@@ -942,1 +948,1 @@\n- 15c:   540042a1        b.ne    9b0 <forth>  \/\/ b.any\n+ 15c:   54004321        b.ne    9c0 <forth>  \/\/ b.any\n@@ -945,1 +951,1 @@\n- 168:   54004242        b.cs    9b0 <forth>  \/\/ b.hs, b.nlast\n+ 168:   540042c2        b.cs    9c0 <forth>  \/\/ b.hs, b.nlast\n@@ -948,1 +954,1 @@\n- 174:   540041e2        b.cs    9b0 <forth>  \/\/ b.hs, b.nlast\n+ 174:   54004262        b.cs    9c0 <forth>  \/\/ b.hs, b.nlast\n@@ -951,1 +957,1 @@\n- 180:   54004183        b.cc    9b0 <forth>  \/\/ b.lo, b.ul, b.last\n+ 180:   54004203        b.cc    9c0 <forth>  \/\/ b.lo, b.ul, b.last\n@@ -954,1 +960,1 @@\n- 18c:   54004123        b.cc    9b0 <forth>  \/\/ b.lo, b.ul, b.last\n+ 18c:   540041a3        b.cc    9c0 <forth>  \/\/ b.lo, b.ul, b.last\n@@ -957,1 +963,1 @@\n- 198:   540040c4        b.mi    9b0 <forth>  \/\/ b.first\n+ 198:   54004144        b.mi    9c0 <forth>  \/\/ b.first\n@@ -960,1 +966,1 @@\n- 1a4:   54004065        b.pl    9b0 <forth>  \/\/ b.nfrst\n+ 1a4:   540040e5        b.pl    9c0 <forth>  \/\/ b.nfrst\n@@ -963,1 +969,1 @@\n- 1b0:   54004006        b.vs    9b0 <forth>\n+ 1b0:   54004086        b.vs    9c0 <forth>\n@@ -966,1 +972,1 @@\n- 1bc:   54003fa7        b.vc    9b0 <forth>\n+ 1bc:   54004027        b.vc    9c0 <forth>\n@@ -969,1 +975,1 @@\n- 1c8:   54003f48        b.hi    9b0 <forth>  \/\/ b.pmore\n+ 1c8:   54003fc8        b.hi    9c0 <forth>  \/\/ b.pmore\n@@ -972,1 +978,1 @@\n- 1d4:   54003ee9        b.ls    9b0 <forth>  \/\/ b.plast\n+ 1d4:   54003f69        b.ls    9c0 <forth>  \/\/ b.plast\n@@ -975,1 +981,1 @@\n- 1e0:   54003e8a        b.ge    9b0 <forth>  \/\/ b.tcont\n+ 1e0:   54003f0a        b.ge    9c0 <forth>  \/\/ b.tcont\n@@ -978,1 +984,1 @@\n- 1ec:   54003e2b        b.lt    9b0 <forth>  \/\/ b.tstop\n+ 1ec:   54003eab        b.lt    9c0 <forth>  \/\/ b.tstop\n@@ -981,1 +987,1 @@\n- 1f8:   54003dcc        b.gt    9b0 <forth>\n+ 1f8:   54003e4c        b.gt    9c0 <forth>\n@@ -984,1 +990,1 @@\n- 204:   54003d6d        b.le    9b0 <forth>\n+ 204:   54003ded        b.le    9c0 <forth>\n@@ -987,1 +993,1 @@\n- 210:   54003d0e        b.al    9b0 <forth>\n+ 210:   54003d8e        b.al    9c0 <forth>\n@@ -990,1 +996,1 @@\n- 21c:   54003caf        b.nv    9b0 <forth>\n+ 21c:   54003d2f        b.nv    9c0 <forth>\n@@ -1116,1 +1122,1 @@\n- 414:   58002cfb        ldr     x27, 9b0 <forth>\n+ 414:   58002d7b        ldr     x27, 9c0 <forth>\n@@ -1272,203 +1278,207 @@\n- 684:   ce648376        sha512h q22, q27, v4.2d\n- 688:   ce6184c7        sha512h2        q7, q6, v1.2d\n- 68c:   cec081fa        sha512su0       v26.2d, v15.2d\n- 690:   ce6d89a2        sha512su1       v2.2d, v13.2d, v13.2d\n- 694:   ba5fd3e3        ccmn    xzr, xzr, #0x3, le\n- 698:   3a5f03e5        ccmn    wzr, wzr, #0x5, eq  \/\/ eq = none\n- 69c:   fa411be4        ccmp    xzr, #0x1, #0x4, ne  \/\/ ne = any\n- 6a0:   7a42cbe2        ccmp    wzr, #0x2, #0x2, gt\n- 6a4:   93df03ff        ror     xzr, xzr, #0\n- 6a8:   c820ffff        stlxp   w0, xzr, xzr, [sp]\n- 6ac:   8822fc7f        stlxp   w2, wzr, wzr, [x3]\n- 6b0:   c8247cbf        stxp    w4, xzr, xzr, [x5]\n- 6b4:   88267fff        stxp    w6, wzr, wzr, [sp]\n- 6b8:   4e010fe0        dup     v0.16b, wzr\n- 6bc:   4e081fe1        mov     v1.d[0], xzr\n- 6c0:   4e0c1fe1        mov     v1.s[1], wzr\n- 6c4:   4e0a1fe1        mov     v1.h[2], wzr\n- 6c8:   4e071fe1        mov     v1.b[3], wzr\n- 6cc:   4cc0ac3f        ld1     {v31.2d, v0.2d}, [x1], x0\n- 6d0:   05a08020        mov     z0.s, p0\/m, s1\n- 6d4:   04b0e3e0        incw    x0\n- 6d8:   0470e7e1        dech    x1\n- 6dc:   042f9c20        lsl     z0.b, z1.b, #7\n- 6e0:   043f9c35        lsl     z21.h, z1.h, #15\n- 6e4:   047f9c20        lsl     z0.s, z1.s, #31\n- 6e8:   04ff9c20        lsl     z0.d, z1.d, #63\n- 6ec:   04299420        lsr     z0.b, z1.b, #7\n- 6f0:   04319160        asr     z0.h, z11.h, #15\n- 6f4:   0461943e        lsr     z30.s, z1.s, #31\n- 6f8:   04a19020        asr     z0.d, z1.d, #63\n- 6fc:   042053ff        addvl   sp, x0, #31\n- 700:   047f5401        addpl   x1, sp, #-32\n- 704:   25208028        cntp    x8, p0, p1.b\n- 708:   2538cfe0        mov     z0.b, #127\n- 70c:   2578d001        mov     z1.h, #-128\n- 710:   25b8efe2        mov     z2.s, #32512\n- 714:   25f8f007        mov     z7.d, #-32768\n- 718:   a400a3e0        ld1b    {z0.b}, p0\/z, [sp]\n- 71c:   a4a8a7ea        ld1h    {z10.h}, p1\/z, [sp, #-8, mul vl]\n- 720:   a547a814        ld1w    {z20.s}, p2\/z, [x0, #7, mul vl]\n- 724:   a4084ffe        ld1b    {z30.b}, p3\/z, [sp, x8]\n- 728:   a55c53e0        ld1w    {z0.s}, p4\/z, [sp, x28, lsl #2]\n- 72c:   a5e1540b        ld1d    {z11.d}, p5\/z, [x0, x1, lsl #3]\n- 730:   e400fbf6        st1b    {z22.b}, p6, [sp]\n- 734:   e408ffff        st1b    {z31.b}, p7, [sp, #-8, mul vl]\n- 738:   e547e400        st1w    {z0.s}, p1, [x0, #7, mul vl]\n- 73c:   e4014be0        st1b    {z0.b}, p2, [sp, x1]\n- 740:   e4a84fe0        st1h    {z0.h}, p3, [sp, x8, lsl #1]\n- 744:   e5f25000        st1d    {z0.d}, p4, [x0, x18, lsl #3]\n- 748:   858043e0        ldr     z0, [sp]\n- 74c:   85a043ff        ldr     z31, [sp, #-256, mul vl]\n- 750:   e59f5d08        str     z8, [x8, #255, mul vl]\n- 754:   1e601000        fmov    d0, #2.000000000000000000e+00\n- 758:   1e603000        fmov    d0, #2.125000000000000000e+00\n- 75c:   1e621000        fmov    d0, #4.000000000000000000e+00\n- 760:   1e623000        fmov    d0, #4.250000000000000000e+00\n- 764:   1e641000        fmov    d0, #8.000000000000000000e+00\n- 768:   1e643000        fmov    d0, #8.500000000000000000e+00\n- 76c:   1e661000        fmov    d0, #1.600000000000000000e+01\n- 770:   1e663000        fmov    d0, #1.700000000000000000e+01\n- 774:   1e681000        fmov    d0, #1.250000000000000000e-01\n- 778:   1e683000        fmov    d0, #1.328125000000000000e-01\n- 77c:   1e6a1000        fmov    d0, #2.500000000000000000e-01\n- 780:   1e6a3000        fmov    d0, #2.656250000000000000e-01\n- 784:   1e6c1000        fmov    d0, #5.000000000000000000e-01\n- 788:   1e6c3000        fmov    d0, #5.312500000000000000e-01\n- 78c:   1e6e1000        fmov    d0, #1.000000000000000000e+00\n- 790:   1e6e3000        fmov    d0, #1.062500000000000000e+00\n- 794:   1e701000        fmov    d0, #-2.000000000000000000e+00\n- 798:   1e703000        fmov    d0, #-2.125000000000000000e+00\n- 79c:   1e721000        fmov    d0, #-4.000000000000000000e+00\n- 7a0:   1e723000        fmov    d0, #-4.250000000000000000e+00\n- 7a4:   1e741000        fmov    d0, #-8.000000000000000000e+00\n- 7a8:   1e743000        fmov    d0, #-8.500000000000000000e+00\n- 7ac:   1e761000        fmov    d0, #-1.600000000000000000e+01\n- 7b0:   1e763000        fmov    d0, #-1.700000000000000000e+01\n- 7b4:   1e781000        fmov    d0, #-1.250000000000000000e-01\n- 7b8:   1e783000        fmov    d0, #-1.328125000000000000e-01\n- 7bc:   1e7a1000        fmov    d0, #-2.500000000000000000e-01\n- 7c0:   1e7a3000        fmov    d0, #-2.656250000000000000e-01\n- 7c4:   1e7c1000        fmov    d0, #-5.000000000000000000e-01\n- 7c8:   1e7c3000        fmov    d0, #-5.312500000000000000e-01\n- 7cc:   1e7e1000        fmov    d0, #-1.000000000000000000e+00\n- 7d0:   1e7e3000        fmov    d0, #-1.062500000000000000e+00\n- 7d4:   f8388098        swp     x24, x24, [x4]\n- 7d8:   f8340010        ldadd   x20, x16, [x0]\n- 7dc:   f8241175        ldclr   x4, x21, [x11]\n- 7e0:   f83e22d0        ldeor   x30, x16, [x22]\n- 7e4:   f82432ef        ldset   x4, x15, [x23]\n- 7e8:   f83a5186        ldsmin  x26, x6, [x12]\n- 7ec:   f82f41ee        ldsmax  x15, x14, [x15]\n- 7f0:   f82973b9        ldumin  x9, x25, [x29]\n- 7f4:   f82b6194        ldumax  x11, x20, [x12]\n- 7f8:   f8b28216        swpa    x18, x22, [x16]\n- 7fc:   f8b50358        ldadda  x21, x24, [x26]\n- 800:   f8a61206        ldclra  x6, x6, [x16]\n- 804:   f8b02219        ldeora  x16, x25, [x16]\n- 808:   f8bc3218        ldseta  x28, x24, [x16]\n- 80c:   f8ba514f        ldsmina x26, x15, [x10]\n- 810:   f8ad428e        ldsmaxa x13, x14, [x20]\n- 814:   f8a173d7        ldumina x1, x23, [x30]\n- 818:   f8ae60c2        ldumaxa x14, x2, [x6]\n- 81c:   f8e38328        swpal   x3, x8, [x25]\n- 820:   f8e003db        ldaddal x0, x27, [x30]\n- 824:   f8e513c5        ldclral x5, x5, [x30]\n- 828:   f8eb2019        ldeoral x11, x25, [x0]\n- 82c:   f8ff3260        ldsetal xzr, x0, [x19]\n- 830:   f8fd513a        ldsminal        x29, x26, [x9]\n- 834:   f8fa41ec        ldsmaxal        x26, x12, [x15]\n- 838:   f8eb724b        lduminal        x11, x11, [x18]\n- 83c:   f8f96316        ldumaxal        x25, x22, [x24]\n- 840:   f8608171        swpl    x0, x17, [x11]\n- 844:   f86600dd        ldaddl  x6, x29, [x6]\n- 848:   f86512a5        ldclrl  x5, x5, [x21]\n- 84c:   f8732250        ldeorl  x19, x16, [x18]\n- 850:   f87e339b        ldsetl  x30, x27, [x28]\n- 854:   f861503c        ldsminl x1, x28, [x1]\n- 858:   f874421d        ldsmaxl x20, x29, [x16]\n- 85c:   f86d73aa        lduminl x13, x10, [x29]\n- 860:   f87d62d3        ldumaxl x29, x19, [x22]\n- 864:   b82a83e4        swp     w10, w4, [sp]\n- 868:   b83503e8        ldadd   w21, w8, [sp]\n- 86c:   b833138a        ldclr   w19, w10, [x28]\n- 870:   b82220b9        ldeor   w2, w25, [x5]\n- 874:   b82332c8        ldset   w3, w8, [x22]\n- 878:   b83350ad        ldsmin  w19, w13, [x5]\n- 87c:   b83d42b8        ldsmax  w29, w24, [x21]\n- 880:   b83a7078        ldumin  w26, w24, [x3]\n- 884:   b83862fa        ldumax  w24, w26, [x23]\n- 888:   b8af8075        swpa    w15, w21, [x3]\n- 88c:   b8b80328        ldadda  w24, w8, [x25]\n- 890:   b8b41230        ldclra  w20, w16, [x17]\n- 894:   b8a22001        ldeora  w2, w1, [x0]\n- 898:   b8b83064        ldseta  w24, w4, [x3]\n- 89c:   b8ac539f        ldsmina w12, wzr, [x28]\n- 8a0:   b8aa405a        ldsmaxa w10, w26, [x2]\n- 8a4:   b8ac73f2        ldumina w12, w18, [sp]\n- 8a8:   b8a163ad        ldumaxa w1, w13, [x29]\n- 8ac:   b8e08193        swpal   w0, w19, [x12]\n- 8b0:   b8f101b6        ldaddal w17, w22, [x13]\n- 8b4:   b8fc13fe        ldclral w28, w30, [sp]\n- 8b8:   b8e1239a        ldeoral w1, w26, [x28]\n- 8bc:   b8e4309e        ldsetal w4, w30, [x4]\n- 8c0:   b8e6535e        ldsminal        w6, w30, [x26]\n- 8c4:   b8f24109        ldsmaxal        w18, w9, [x8]\n- 8c8:   b8ec7280        lduminal        w12, w0, [x20]\n- 8cc:   b8e16058        ldumaxal        w1, w24, [x2]\n- 8d0:   b8608309        swpl    w0, w9, [x24]\n- 8d4:   b87a03d0        ldaddl  w26, w16, [x30]\n- 8d8:   b86312ea        ldclrl  w3, w10, [x23]\n- 8dc:   b86a2244        ldeorl  w10, w4, [x18]\n- 8e0:   b862310b        ldsetl  w2, w11, [x8]\n- 8e4:   b86a522f        ldsminl w10, w15, [x17]\n- 8e8:   b862418a        ldsmaxl w2, w10, [x12]\n- 8ec:   b86c71af        lduminl w12, w15, [x13]\n- 8f0:   b8626287        ldumaxl w2, w7, [x20]\n- 8f4:   042401f9        add     z25.b, z15.b, z4.b\n- 8f8:   04b10564        sub     z4.s, z11.s, z17.s\n- 8fc:   65ca0230        fadd    z16.d, z17.d, z10.d\n- 900:   65d90996        fmul    z22.d, z12.d, z25.d\n- 904:   65ca05dc        fsub    z28.d, z14.d, z10.d\n- 908:   0456afc1        abs     z1.h, p3\/m, z30.h\n- 90c:   0400044f        add     z15.b, p1\/m, z15.b, z2.b\n- 910:   0490920d        asr     z13.s, p4\/m, z13.s, z16.s\n- 914:   04daa163        cnt     z3.d, p0\/m, z11.d\n- 918:   04d389c5        lsl     z5.d, p2\/m, z5.d, z14.d\n- 91c:   0411829d        lsr     z29.b, p0\/m, z29.b, z20.b\n- 920:   04901774        mul     z20.s, p5\/m, z20.s, z27.s\n- 924:   0417b89a        neg     z26.b, p6\/m, z4.b\n- 928:   041eb3d6        not     z22.b, p4\/m, z30.b\n- 92c:   04480b6b        smax    z11.h, p2\/m, z11.h, z27.h\n- 930:   048a17dc        smin    z28.s, p5\/m, z28.s, z30.s\n- 934:   048105be        sub     z30.s, p1\/m, z30.s, z13.s\n- 938:   04dcb35e        fabs    z30.d, p4\/m, z26.d\n- 93c:   65808d6f        fadd    z15.s, p3\/m, z15.s, z11.s\n- 940:   65cd9e06        fdiv    z6.d, p7\/m, z6.d, z16.d\n- 944:   65869cfb        fmax    z27.s, p7\/m, z27.s, z7.s\n- 948:   65c78893        fmin    z19.d, p2\/m, z19.d, z4.d\n- 94c:   658292d1        fmul    z17.s, p4\/m, z17.s, z22.s\n- 950:   04ddaebc        fneg    z28.d, p3\/m, z21.d\n- 954:   6582b452        frintm  z18.s, p5\/m, z2.s\n- 958:   6580ade6        frintn  z6.s, p3\/m, z15.s\n- 95c:   65c1b42c        frintp  z12.d, p5\/m, z1.d\n- 960:   658da632        fsqrt   z18.s, p1\/m, z17.s\n- 964:   658195af        fsub    z15.s, p5\/m, z15.s, z13.s\n- 968:   65eb1f74        fmla    z20.d, p7\/m, z27.d, z11.d\n- 96c:   65f723c3        fmls    z3.d, p0\/m, z30.d, z23.d\n- 970:   65ba4b71        fnmla   z17.s, p2\/m, z27.s, z26.s\n- 974:   65fe76c6        fnmls   z6.d, p5\/m, z22.d, z30.d\n- 978:   04525f42        mla     z2.h, p7\/m, z26.h, z18.h\n- 97c:   04117056        mls     z22.b, p4\/m, z2.b, z17.b\n- 980:   04363338        and     z24.d, z25.d, z22.d\n- 984:   04a33192        eor     z18.d, z12.d, z3.d\n- 988:   0470339d        orr     z29.d, z28.d, z16.d\n- 98c:   049a2b86        andv    s6, p2, z28.s\n- 990:   045824e7        orv     h7, p1, z7.h\n- 994:   04193509        eorv    b9, p5, z8.b\n- 998:   040837db        smaxv   b27, p5, z30.b\n- 99c:   044a221a        sminv   h26, p0, z16.h\n- 9a0:   65c73903        fminv   d3, p6, z8.d\n- 9a4:   65c63b55        fmaxv   d21, p6, z26.d\n- 9a8:   65982096        fadda   s22, p0, s22, z4.s\n- 9ac:   04412071        uaddv   d17, p0, z3.h\n+ 684:   ba5fd3e3        ccmn    xzr, xzr, #0x3, le\n+ 688:   3a5f03e5        ccmn    wzr, wzr, #0x5, eq  \/\/ eq = none\n+ 68c:   fa411be4        ccmp    xzr, #0x1, #0x4, ne  \/\/ ne = any\n+ 690:   7a42cbe2        ccmp    wzr, #0x2, #0x2, gt\n+ 694:   93df03ff        ror     xzr, xzr, #0\n+ 698:   c820ffff        stlxp   w0, xzr, xzr, [sp]\n+ 69c:   8822fc7f        stlxp   w2, wzr, wzr, [x3]\n+ 6a0:   c8247cbf        stxp    w4, xzr, xzr, [x5]\n+ 6a4:   88267fff        stxp    w6, wzr, wzr, [sp]\n+ 6a8:   4e010fe0        dup     v0.16b, wzr\n+ 6ac:   4e081fe1        mov     v1.d[0], xzr\n+ 6b0:   4e0c1fe1        mov     v1.s[1], wzr\n+ 6b4:   4e0a1fe1        mov     v1.h[2], wzr\n+ 6b8:   4e071fe1        mov     v1.b[3], wzr\n+ 6bc:   4cc0ac3f        ld1     {v31.2d, v0.2d}, [x1], x0\n+ 6c0:   05a08020        mov     z0.s, p0\/m, s1\n+ 6c4:   04b0e3e0        incw    x0\n+ 6c8:   0470e7e1        dech    x1\n+ 6cc:   042f9c20        lsl     z0.b, z1.b, #7\n+ 6d0:   043f9c35        lsl     z21.h, z1.h, #15\n+ 6d4:   047f9c20        lsl     z0.s, z1.s, #31\n+ 6d8:   04ff9c20        lsl     z0.d, z1.d, #63\n+ 6dc:   04299420        lsr     z0.b, z1.b, #7\n+ 6e0:   04319160        asr     z0.h, z11.h, #15\n+ 6e4:   0461943e        lsr     z30.s, z1.s, #31\n+ 6e8:   04a19020        asr     z0.d, z1.d, #63\n+ 6ec:   042053ff        addvl   sp, x0, #31\n+ 6f0:   047f5401        addpl   x1, sp, #-32\n+ 6f4:   25208028        cntp    x8, p0, p1.b\n+ 6f8:   2538cfe0        mov     z0.b, #127\n+ 6fc:   2578d001        mov     z1.h, #-128\n+ 700:   25b8efe2        mov     z2.s, #32512\n+ 704:   25f8f007        mov     z7.d, #-32768\n+ 708:   a400a3e0        ld1b    {z0.b}, p0\/z, [sp]\n+ 70c:   a4a8a7ea        ld1h    {z10.h}, p1\/z, [sp, #-8, mul vl]\n+ 710:   a547a814        ld1w    {z20.s}, p2\/z, [x0, #7, mul vl]\n+ 714:   a4084ffe        ld1b    {z30.b}, p3\/z, [sp, x8]\n+ 718:   a55c53e0        ld1w    {z0.s}, p4\/z, [sp, x28, lsl #2]\n+ 71c:   a5e1540b        ld1d    {z11.d}, p5\/z, [x0, x1, lsl #3]\n+ 720:   e400fbf6        st1b    {z22.b}, p6, [sp]\n+ 724:   e408ffff        st1b    {z31.b}, p7, [sp, #-8, mul vl]\n+ 728:   e547e400        st1w    {z0.s}, p1, [x0, #7, mul vl]\n+ 72c:   e4014be0        st1b    {z0.b}, p2, [sp, x1]\n+ 730:   e4a84fe0        st1h    {z0.h}, p3, [sp, x8, lsl #1]\n+ 734:   e5f25000        st1d    {z0.d}, p4, [x0, x18, lsl #3]\n+ 738:   858043e0        ldr     z0, [sp]\n+ 73c:   85a043ff        ldr     z31, [sp, #-256, mul vl]\n+ 740:   e59f5d08        str     z8, [x8, #255, mul vl]\n+ 744:   1e601000        fmov    d0, #2.000000000000000000e+00\n+ 748:   1e603000        fmov    d0, #2.125000000000000000e+00\n+ 74c:   1e621000        fmov    d0, #4.000000000000000000e+00\n+ 750:   1e623000        fmov    d0, #4.250000000000000000e+00\n+ 754:   1e641000        fmov    d0, #8.000000000000000000e+00\n+ 758:   1e643000        fmov    d0, #8.500000000000000000e+00\n+ 75c:   1e661000        fmov    d0, #1.600000000000000000e+01\n+ 760:   1e663000        fmov    d0, #1.700000000000000000e+01\n+ 764:   1e681000        fmov    d0, #1.250000000000000000e-01\n+ 768:   1e683000        fmov    d0, #1.328125000000000000e-01\n+ 76c:   1e6a1000        fmov    d0, #2.500000000000000000e-01\n+ 770:   1e6a3000        fmov    d0, #2.656250000000000000e-01\n+ 774:   1e6c1000        fmov    d0, #5.000000000000000000e-01\n+ 778:   1e6c3000        fmov    d0, #5.312500000000000000e-01\n+ 77c:   1e6e1000        fmov    d0, #1.000000000000000000e+00\n+ 780:   1e6e3000        fmov    d0, #1.062500000000000000e+00\n+ 784:   1e701000        fmov    d0, #-2.000000000000000000e+00\n+ 788:   1e703000        fmov    d0, #-2.125000000000000000e+00\n+ 78c:   1e721000        fmov    d0, #-4.000000000000000000e+00\n+ 790:   1e723000        fmov    d0, #-4.250000000000000000e+00\n+ 794:   1e741000        fmov    d0, #-8.000000000000000000e+00\n+ 798:   1e743000        fmov    d0, #-8.500000000000000000e+00\n+ 79c:   1e761000        fmov    d0, #-1.600000000000000000e+01\n+ 7a0:   1e763000        fmov    d0, #-1.700000000000000000e+01\n+ 7a4:   1e781000        fmov    d0, #-1.250000000000000000e-01\n+ 7a8:   1e783000        fmov    d0, #-1.328125000000000000e-01\n+ 7ac:   1e7a1000        fmov    d0, #-2.500000000000000000e-01\n+ 7b0:   1e7a3000        fmov    d0, #-2.656250000000000000e-01\n+ 7b4:   1e7c1000        fmov    d0, #-5.000000000000000000e-01\n+ 7b8:   1e7c3000        fmov    d0, #-5.312500000000000000e-01\n+ 7bc:   1e7e1000        fmov    d0, #-1.000000000000000000e+00\n+ 7c0:   1e7e3000        fmov    d0, #-1.062500000000000000e+00\n+ 7c4:   f83780bc        swp     x23, x28, [x5]\n+ 7c8:   f8270026        ldadd   x7, x6, [x1]\n+ 7cc:   f83b1050        ldclr   x27, x16, [x2]\n+ 7d0:   f82e230e        ldeor   x14, x14, [x24]\n+ 7d4:   f8383284        ldset   x24, x4, [x20]\n+ 7d8:   f8305080        ldsmin  x16, x0, [x4]\n+ 7dc:   f83543cb        ldsmax  x21, x11, [x30]\n+ 7e0:   f8307096        ldumin  x16, x22, [x4]\n+ 7e4:   f82f6357        ldumax  x15, x23, [x26]\n+ 7e8:   f8a681ec        swpa    x6, x12, [x15]\n+ 7ec:   f8ae012f        ldadda  x14, x15, [x9]\n+ 7f0:   f8b9117d        ldclra  x25, x29, [x11]\n+ 7f4:   f8b4224c        ldeora  x20, x12, [x18]\n+ 7f8:   f8b632b0        ldseta  x22, x16, [x21]\n+ 7fc:   f8b850da        ldsmina x24, x26, [x6]\n+ 800:   f8a64210        ldsmaxa x6, x16, [x16]\n+ 804:   f8b97390        ldumina x25, x16, [x28]\n+ 808:   f8b86350        ldumaxa x24, x16, [x26]\n+ 80c:   f8ef81aa        swpal   x15, x10, [x13]\n+ 810:   f8ee0034        ldaddal x14, x20, [x1]\n+ 814:   f8f711de        ldclral x23, x30, [x14]\n+ 818:   f8e22066        ldeoral x2, x6, [x3]\n+ 81c:   f8e83019        ldsetal x8, x25, [x0]\n+ 820:   f8fb50be        ldsminal        x27, x30, [x5]\n+ 824:   f8e5417e        ldsmaxal        x5, x30, [x11]\n+ 828:   f8f973e0        lduminal        x25, x0, [sp]\n+ 82c:   f8e063b3        ldumaxal        x0, x19, [x29]\n+ 830:   f87a8349        swpl    x26, x9, [x26]\n+ 834:   f86c016f        ldaddl  x12, x15, [x11]\n+ 838:   f86b1332        ldclrl  x11, x18, [x25]\n+ 83c:   f8762018        ldeorl  x22, x24, [x0]\n+ 840:   f87130cb        ldsetl  x17, x11, [x6]\n+ 844:   f87d50a6        ldsminl x29, x6, [x5]\n+ 848:   f8654275        ldsmaxl x5, x21, [x19]\n+ 84c:   f87073d2        lduminl x16, x18, [x30]\n+ 850:   f87b603c        ldumaxl x27, x28, [x1]\n+ 854:   b83c8281        swp     w28, w1, [x20]\n+ 858:   b83d01b0        ldadd   w29, w16, [x13]\n+ 85c:   b82a13bd        ldclr   w10, w29, [x29]\n+ 860:   b8332156        ldeor   w19, w22, [x10]\n+ 864:   b82432bf        stset   w4, [x21]\n+ 868:   b828527f        stsmin  w8, [x19]\n+ 86c:   b82a405c        ldsmax  w10, w28, [x2]\n+ 870:   b8397065        ldumin  w25, w5, [x3]\n+ 874:   b8286276        ldumax  w8, w22, [x19]\n+ 878:   b8ad83a5        swpa    w13, w5, [x29]\n+ 87c:   b8b80355        ldadda  w24, w21, [x26]\n+ 880:   b8b81303        ldclra  w24, w3, [x24]\n+ 884:   b8ba21f7        ldeora  w26, w23, [x15]\n+ 888:   b8b53303        ldseta  w21, w3, [x24]\n+ 88c:   b8a85299        ldsmina w8, w25, [x20]\n+ 890:   b8b04051        ldsmaxa w16, w17, [x2]\n+ 894:   b8a17300        ldumina w1, w0, [x24]\n+ 898:   b8a46183        ldumaxa w4, w3, [x12]\n+ 89c:   b8ff815c        swpal   wzr, w28, [x10]\n+ 8a0:   b8fa0182        ldaddal w26, w2, [x12]\n+ 8a4:   b8f2103f        ldclral w18, wzr, [x1]\n+ 8a8:   b8ed201d        ldeoral w13, w29, [x0]\n+ 8ac:   b8f3322c        ldsetal w19, w12, [x17]\n+ 8b0:   b8f6538d        ldsminal        w22, w13, [x28]\n+ 8b4:   b8fe403f        ldsmaxal        w30, wzr, [x1]\n+ 8b8:   b8fa709c        lduminal        w26, w28, [x4]\n+ 8bc:   b8fe60c4        ldumaxal        w30, w4, [x6]\n+ 8c0:   b87e825a        swpl    w30, w26, [x18]\n+ 8c4:   b8690188        ldaddl  w9, w8, [x12]\n+ 8c8:   b8601034        ldclrl  w0, w20, [x1]\n+ 8cc:   b8782002        ldeorl  w24, w2, [x0]\n+ 8d0:   b8693358        ldsetl  w9, w24, [x26]\n+ 8d4:   b870507e        ldsminl w16, w30, [x3]\n+ 8d8:   b86a4157        ldsmaxl w10, w23, [x10]\n+ 8dc:   b8647052        lduminl w4, w18, [x2]\n+ 8e0:   b86b6148        ldumaxl w11, w8, [x10]\n+ 8e4:   ce62820f        sha512h q15, q16, v2.2d\n+ 8e8:   ce6c8569        sha512h2        q9, q11, v12.2d\n+ 8ec:   cec081ae        sha512su0       v14.2d, v13.2d\n+ 8f0:   ce7388c2        sha512su1       v2.2d, v6.2d, v19.2d\n+ 8f4:   ce2409f9        bcax    v25.16b, v15.16b, v4.16b, v2.16b\n+ 8f8:   ce115164        eor3    v4.16b, v11.16b, v17.16b, v20.16b\n+ 8fc:   ce6a8e30        rax1    v16.2d, v17.2d, v10.2d\n+ 900:   ce8cd2d4        xar     v20.2d, v22.2d, v12.2d, #52\n+ 904:   046e0397        add     z23.h, z28.h, z14.h\n+ 908:   04eb0438        sub     z24.d, z1.d, z11.d\n+ 90c:   658701ea        fadd    z10.s, z15.s, z7.s\n+ 910:   65d309a3        fmul    z3.d, z13.d, z19.d\n+ 914:   65810470        fsub    z16.s, z3.s, z1.s\n+ 918:   0456a51d        abs     z29.h, p1\/m, z8.h\n+ 91c:   04801c1c        add     z28.s, p7\/m, z28.s, z0.s\n+ 920:   04d096e7        asr     z7.d, p5\/m, z7.d, z23.d\n+ 924:   041abb15        cnt     z21.b, p6\/m, z24.b\n+ 928:   04d39601        lsl     z1.d, p5\/m, z1.d, z16.d\n+ 92c:   04d18d05        lsr     z5.d, p3\/m, z5.d, z8.d\n+ 930:   04d01eae        mul     z14.d, p7\/m, z14.d, z21.d\n+ 934:   0457bcb2        neg     z18.h, p7\/m, z5.h\n+ 938:   04debe31        not     z17.d, p7\/m, z17.d\n+ 93c:   04481193        smax    z19.h, p4\/m, z19.h, z12.h\n+ 940:   048a07a9        smin    z9.s, p1\/m, z9.s, z29.s\n+ 944:   04011fba        sub     z26.b, p7\/m, z26.b, z29.b\n+ 948:   049cb52a        fabs    z10.s, p5\/m, z9.s\n+ 94c:   65c09217        fadd    z23.d, p4\/m, z23.d, z16.d\n+ 950:   65cd9dc3        fdiv    z3.d, p7\/m, z3.d, z14.d\n+ 954:   658692d2        fmax    z18.s, p4\/m, z18.s, z22.s\n+ 958:   65c7858f        fmin    z15.d, p1\/m, z15.d, z12.d\n+ 95c:   65828eca        fmul    z10.s, p3\/m, z10.s, z22.s\n+ 960:   04ddb0bd        fneg    z29.d, p4\/m, z5.d\n+ 964:   6582b2a2        frintm  z2.s, p4\/m, z21.s\n+ 968:   65c0b789        frintn  z9.d, p5\/m, z28.d\n+ 96c:   6581b86b        frintp  z11.s, p6\/m, z3.s\n+ 970:   65cdba7e        fsqrt   z30.d, p6\/m, z19.d\n+ 974:   65819f49        fsub    z9.s, p7\/m, z9.s, z26.s\n+ 978:   65fe16c6        fmla    z6.d, p5\/m, z22.d, z30.d\n+ 97c:   65b23f42        fmls    z2.s, p7\/m, z26.s, z18.s\n+ 980:   65b15056        fnmla   z22.s, p4\/m, z2.s, z17.s\n+ 984:   65e27ad8        fnmls   z24.d, p6\/m, z22.d, z2.d\n+ 988:   04dd476c        mla     z12.d, p1\/m, z27.d, z29.d\n+ 98c:   04c978d0        mls     z16.d, p6\/m, z6.d, z9.d\n+ 990:   042430f2        and     z18.d, z7.d, z4.d\n+ 994:   04b6312f        eor     z15.d, z9.d, z22.d\n+ 998:   04743362        orr     z2.d, z27.d, z20.d\n+ 99c:   049a3805        andv    s5, p6, z0.s\n+ 9a0:   0458272e        orv     h14, p1, z25.h\n+ 9a4:   04d9375b        eorv    d27, p5, z26.d\n+ 9a8:   04083418        smaxv   b24, p5, z0.b\n+ 9ac:   040a3006        sminv   b6, p4, z0.b\n+ 9b0:   6587212f        fminv   s15, p0, z9.s\n+ 9b4:   65862b65        fmaxv   s5, p2, z27.s\n+ 9b8:   65983694        fadda   s20, p5, s20, z20.s\n+ 9bc:   04c12a0a        uaddv   d10, p2, z16.d\n@@ -1489,7 +1499,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000242,     0x94000000,\n-    0x97ffffd4,     0x9400023f,     0x3400000a,     0x34fffa2a,\n-    0x3400478a,     0x35000008,     0x35fff9c8,     0x35004728,\n-    0xb400000b,     0xb4fff96b,     0xb40046cb,     0xb500001d,\n-    0xb5fff91d,     0xb500467d,     0x10000013,     0x10fff8b3,\n-    0x10004613,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36304596,     0x3758000c,     0x375ff7cc,     0x3758452c,\n+    0x14000000,     0x17ffffd7,     0x14000246,     0x94000000,\n+    0x97ffffd4,     0x94000243,     0x3400000a,     0x34fffa2a,\n+    0x3400480a,     0x35000008,     0x35fff9c8,     0x350047a8,\n+    0xb400000b,     0xb4fff96b,     0xb400474b,     0xb500001d,\n+    0xb5fff91d,     0xb50046fd,     0x10000013,     0x10fff8b3,\n+    0x10004693,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36304616,     0x3758000c,     0x375ff7cc,     0x375845ac,\n@@ -1500,13 +1510,13 @@\n-    0x54004300,     0x54000001,     0x54fff541,     0x540042a1,\n-    0x54000002,     0x54fff4e2,     0x54004242,     0x54000002,\n-    0x54fff482,     0x540041e2,     0x54000003,     0x54fff423,\n-    0x54004183,     0x54000003,     0x54fff3c3,     0x54004123,\n-    0x54000004,     0x54fff364,     0x540040c4,     0x54000005,\n-    0x54fff305,     0x54004065,     0x54000006,     0x54fff2a6,\n-    0x54004006,     0x54000007,     0x54fff247,     0x54003fa7,\n-    0x54000008,     0x54fff1e8,     0x54003f48,     0x54000009,\n-    0x54fff189,     0x54003ee9,     0x5400000a,     0x54fff12a,\n-    0x54003e8a,     0x5400000b,     0x54fff0cb,     0x54003e2b,\n-    0x5400000c,     0x54fff06c,     0x54003dcc,     0x5400000d,\n-    0x54fff00d,     0x54003d6d,     0x5400000e,     0x54ffefae,\n-    0x54003d0e,     0x5400000f,     0x54ffef4f,     0x54003caf,\n+    0x54004380,     0x54000001,     0x54fff541,     0x54004321,\n+    0x54000002,     0x54fff4e2,     0x540042c2,     0x54000002,\n+    0x54fff482,     0x54004262,     0x54000003,     0x54fff423,\n+    0x54004203,     0x54000003,     0x54fff3c3,     0x540041a3,\n+    0x54000004,     0x54fff364,     0x54004144,     0x54000005,\n+    0x54fff305,     0x540040e5,     0x54000006,     0x54fff2a6,\n+    0x54004086,     0x54000007,     0x54fff247,     0x54004027,\n+    0x54000008,     0x54fff1e8,     0x54003fc8,     0x54000009,\n+    0x54fff189,     0x54003f69,     0x5400000a,     0x54fff12a,\n+    0x54003f0a,     0x5400000b,     0x54fff0cb,     0x54003eab,\n+    0x5400000c,     0x54fff06c,     0x54003e4c,     0x5400000d,\n+    0x54fff00d,     0x54003ded,     0x5400000e,     0x54ffefae,\n+    0x54003d8e,     0x5400000f,     0x54ffef4f,     0x54003d2f,\n@@ -1544,1 +1554,1 @@\n-    0xbd1b1869,     0x58002cfb,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x58002d7b,     0x1800000b,     0xf8945060,\n@@ -1583,2 +1593,1 @@\n-    0x0de2eb2c,     0xce648376,     0xce6184c7,     0xcec081fa,\n-    0xce6d89a2,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n+    0x0de2eb2c,     0xba5fd3e3,     0x3a5f03e5,     0xfa411be4,\n@@ -1604,30 +1613,32 @@\n-    0x1e7e3000,     0xf8388098,     0xf8340010,     0xf8241175,\n-    0xf83e22d0,     0xf82432ef,     0xf83a5186,     0xf82f41ee,\n-    0xf82973b9,     0xf82b6194,     0xf8b28216,     0xf8b50358,\n-    0xf8a61206,     0xf8b02219,     0xf8bc3218,     0xf8ba514f,\n-    0xf8ad428e,     0xf8a173d7,     0xf8ae60c2,     0xf8e38328,\n-    0xf8e003db,     0xf8e513c5,     0xf8eb2019,     0xf8ff3260,\n-    0xf8fd513a,     0xf8fa41ec,     0xf8eb724b,     0xf8f96316,\n-    0xf8608171,     0xf86600dd,     0xf86512a5,     0xf8732250,\n-    0xf87e339b,     0xf861503c,     0xf874421d,     0xf86d73aa,\n-    0xf87d62d3,     0xb82a83e4,     0xb83503e8,     0xb833138a,\n-    0xb82220b9,     0xb82332c8,     0xb83350ad,     0xb83d42b8,\n-    0xb83a7078,     0xb83862fa,     0xb8af8075,     0xb8b80328,\n-    0xb8b41230,     0xb8a22001,     0xb8b83064,     0xb8ac539f,\n-    0xb8aa405a,     0xb8ac73f2,     0xb8a163ad,     0xb8e08193,\n-    0xb8f101b6,     0xb8fc13fe,     0xb8e1239a,     0xb8e4309e,\n-    0xb8e6535e,     0xb8f24109,     0xb8ec7280,     0xb8e16058,\n-    0xb8608309,     0xb87a03d0,     0xb86312ea,     0xb86a2244,\n-    0xb862310b,     0xb86a522f,     0xb862418a,     0xb86c71af,\n-    0xb8626287,     0x042401f9,     0x04b10564,     0x65ca0230,\n-    0x65d90996,     0x65ca05dc,     0x0456afc1,     0x0400044f,\n-    0x0490920d,     0x04daa163,     0x04d389c5,     0x0411829d,\n-    0x04901774,     0x0417b89a,     0x041eb3d6,     0x04480b6b,\n-    0x048a17dc,     0x048105be,     0x04dcb35e,     0x65808d6f,\n-    0x65cd9e06,     0x65869cfb,     0x65c78893,     0x658292d1,\n-    0x04ddaebc,     0x6582b452,     0x6580ade6,     0x65c1b42c,\n-    0x658da632,     0x658195af,     0x65eb1f74,     0x65f723c3,\n-    0x65ba4b71,     0x65fe76c6,     0x04525f42,     0x04117056,\n-    0x04363338,     0x04a33192,     0x0470339d,     0x049a2b86,\n-    0x045824e7,     0x04193509,     0x040837db,     0x044a221a,\n-    0x65c73903,     0x65c63b55,     0x65982096,     0x04412071,\n+    0x1e7e3000,     0xf83780bc,     0xf8270026,     0xf83b1050,\n+    0xf82e230e,     0xf8383284,     0xf8305080,     0xf83543cb,\n+    0xf8307096,     0xf82f6357,     0xf8a681ec,     0xf8ae012f,\n+    0xf8b9117d,     0xf8b4224c,     0xf8b632b0,     0xf8b850da,\n+    0xf8a64210,     0xf8b97390,     0xf8b86350,     0xf8ef81aa,\n+    0xf8ee0034,     0xf8f711de,     0xf8e22066,     0xf8e83019,\n+    0xf8fb50be,     0xf8e5417e,     0xf8f973e0,     0xf8e063b3,\n+    0xf87a8349,     0xf86c016f,     0xf86b1332,     0xf8762018,\n+    0xf87130cb,     0xf87d50a6,     0xf8654275,     0xf87073d2,\n+    0xf87b603c,     0xb83c8281,     0xb83d01b0,     0xb82a13bd,\n+    0xb8332156,     0xb82432bf,     0xb828527f,     0xb82a405c,\n+    0xb8397065,     0xb8286276,     0xb8ad83a5,     0xb8b80355,\n+    0xb8b81303,     0xb8ba21f7,     0xb8b53303,     0xb8a85299,\n+    0xb8b04051,     0xb8a17300,     0xb8a46183,     0xb8ff815c,\n+    0xb8fa0182,     0xb8f2103f,     0xb8ed201d,     0xb8f3322c,\n+    0xb8f6538d,     0xb8fe403f,     0xb8fa709c,     0xb8fe60c4,\n+    0xb87e825a,     0xb8690188,     0xb8601034,     0xb8782002,\n+    0xb8693358,     0xb870507e,     0xb86a4157,     0xb8647052,\n+    0xb86b6148,     0xce62820f,     0xce6c8569,     0xcec081ae,\n+    0xce7388c2,     0xce2409f9,     0xce115164,     0xce6a8e30,\n+    0xce8cd2d4,     0x046e0397,     0x04eb0438,     0x658701ea,\n+    0x65d309a3,     0x65810470,     0x0456a51d,     0x04801c1c,\n+    0x04d096e7,     0x041abb15,     0x04d39601,     0x04d18d05,\n+    0x04d01eae,     0x0457bcb2,     0x04debe31,     0x04481193,\n+    0x048a07a9,     0x04011fba,     0x049cb52a,     0x65c09217,\n+    0x65cd9dc3,     0x658692d2,     0x65c7858f,     0x65828eca,\n+    0x04ddb0bd,     0x6582b2a2,     0x65c0b789,     0x6581b86b,\n+    0x65cdba7e,     0x65819f49,     0x65fe16c6,     0x65b23f42,\n+    0x65b15056,     0x65e27ad8,     0x04dd476c,     0x04c978d0,\n+    0x042430f2,     0x04b6312f,     0x04743362,     0x049a3805,\n+    0x0458272e,     0x04d9375b,     0x04083418,     0x040a3006,\n+    0x6587212f,     0x65862b65,     0x65983694,     0x04c12a0a,\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":420,"deletions":409,"binary":false,"changes":829,"status":"modified"}]}