{"files":[{"patch":"@@ -2449,0 +2449,34 @@\n+#define INSN(NAME, opc)                                                                                   \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm, FloatRegister Va) { \\\n+    starti;                                                                                               \\\n+    assert(T == T16B, \"arrangement must be T16B\");                                                        \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(0b0, 15, 15), rf(Va, 10), rf(Vn, 5), rf(Vd, 0);  \\\n+  }\n+\n+  INSN(eor3, 0b000);\n+  INSN(bcax, 0b001);\n+\n+#undef INSN\n+\n+#define INSN(NAME, opc)                                                                               \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm, unsigned imm) { \\\n+    starti;                                                                                           \\\n+    assert(T == T2D, \"arrangement must be T2D\");                                                      \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(imm, 15, 10), rf(Vn, 5), rf(Vd, 0);          \\\n+  }\n+\n+  INSN(xar, 0b100);\n+\n+#undef INSN\n+\n+#define INSN(NAME, opc)                                                                           \\\n+  void NAME(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm) {           \\\n+    starti;                                                                                       \\\n+    assert(T == T2D, \"arrangement must be T2D\");                                                  \\\n+    f(0b11001110, 31, 24), f(opc, 23, 21), rf(Vm, 16), f(0b100011, 15, 10), rf(Vn, 5), rf(Vd, 0); \\\n+  }\n+\n+  INSN(rax1, 0b011);\n+\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3299,0 +3299,219 @@\n+  \/\/ Arguments:\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/   c_rarg0   - byte[]  source+offset\n+  \/\/   c_rarg1   - byte[]   SHA.state\n+  \/\/   c_rarg2   - int     digest_length\n+  \/\/   c_rarg3   - int     offset\n+  \/\/   c_rarg4   - int     limit\n+  \/\/\n+  address generate_sha3_implCompress(bool multi_block, const char *name) {\n+    static const uint64_t round_consts[24] = {\n+      0x0000000000000001L, 0x0000000000008082L, 0x800000000000808AL,\n+      0x8000000080008000L, 0x000000000000808BL, 0x0000000080000001L,\n+      0x8000000080008081L, 0x8000000000008009L, 0x000000000000008AL,\n+      0x0000000000000088L, 0x0000000080008009L, 0x000000008000000AL,\n+      0x000000008000808BL, 0x800000000000008BL, 0x8000000000008089L,\n+      0x8000000000008003L, 0x8000000000008002L, 0x8000000000000080L,\n+      0x000000000000800AL, 0x800000008000000AL, 0x8000000080008081L,\n+      0x8000000000008080L, 0x0000000080000001L, 0x8000000080008008L\n+    };\n+\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", name);\n+    address start = __ pc();\n+\n+    Register buf           = c_rarg0;\n+    Register state         = c_rarg1;\n+    Register digest_length = c_rarg2;\n+    Register ofs           = c_rarg3;\n+    Register limit         = c_rarg4;\n+\n+    Label sha3_loop, rounds24_loop;\n+    Label sha3_512, sha3_384_or_224, sha3_256;\n+\n+    __ stpd(v8, v9, __ pre(sp, -64));\n+    __ stpd(v10, v11, Address(sp, 16));\n+    __ stpd(v12, v13, Address(sp, 32));\n+    __ stpd(v14, v15, Address(sp, 48));\n+\n+    \/\/ load state\n+    __ add(rscratch1, state, 32);\n+    __ ld1(v0, v1, v2,  v3,  __ T1D, state);\n+    __ ld1(v4, v5, v6,  v7,  __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v8, v9, v10, v11, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v12, v13, v14, v15, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v16, v17, v18, v19, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v20, v21, v22, v23, __ T1D, __ post(rscratch1, 32));\n+    __ ld1(v24, __ T1D, rscratch1);\n+\n+    __ BIND(sha3_loop);\n+\n+    \/\/ 24 keccak rounds\n+    __ movw(rscratch2, 24);\n+\n+    \/\/ load round_constants base\n+    __ lea(rscratch1, ExternalAddress((address) round_consts));\n+\n+    \/\/ load input\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, v30, v31, __ T8B, __ post(buf, 24));\n+    __ eor(v0, __ T8B, v0, v25);\n+    __ eor(v1, __ T8B, v1, v26);\n+    __ eor(v2, __ T8B, v2, v27);\n+    __ eor(v3, __ T8B, v3, v28);\n+    __ eor(v4, __ T8B, v4, v29);\n+    __ eor(v5, __ T8B, v5, v30);\n+    __ eor(v6, __ T8B, v6, v31);\n+\n+    \/\/ digest_length == 64, SHA3-512\n+    __ tbnz(digest_length, 6, sha3_512);\n+\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, v30, __ T8B, __ post(buf, 16));\n+    __ eor(v7, __ T8B, v7, v25);\n+    __ eor(v8, __ T8B, v8, v26);\n+    __ eor(v9, __ T8B, v9, v27);\n+    __ eor(v10, __ T8B, v10, v28);\n+    __ eor(v11, __ T8B, v11, v29);\n+    __ eor(v12, __ T8B, v12, v30);\n+\n+    \/\/ digest_length == 28, SHA3-224;  digest_length == 48, SHA3-384\n+    __ tbnz(digest_length, 4, sha3_384_or_224);\n+\n+    \/\/ SHA3-256\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ eor(v13, __ T8B, v13, v25);\n+    __ eor(v14, __ T8B, v14, v26);\n+    __ eor(v15, __ T8B, v15, v27);\n+    __ eor(v16, __ T8B, v16, v28);\n+    __ b(rounds24_loop);\n+\n+    __ BIND(sha3_384_or_224);\n+    __ tbz(digest_length, 2, rounds24_loop); \/\/ bit 2 cleared? SHA-384\n+\n+    \/\/ SHA3-224\n+    __ ld1(v25, v26, v27, v28, __ T8B, __ post(buf, 32));\n+    __ ld1(v29, __ T8B, __ post(buf, 8));\n+    __ eor(v13, __ T8B, v13, v25);\n+    __ eor(v14, __ T8B, v14, v26);\n+    __ eor(v15, __ T8B, v15, v27);\n+    __ eor(v16, __ T8B, v16, v28);\n+    __ eor(v17, __ T8B, v17, v29);\n+    __ b(rounds24_loop);\n+\n+    __ BIND(sha3_512);\n+    __ ld1(v25, v26, __ T8B, __ post(buf, 16));\n+    __ eor(v7, __ T8B, v7, v25);\n+    __ eor(v8, __ T8B, v8, v26);\n+\n+    __ BIND(rounds24_loop);\n+    __ subw(rscratch2, rscratch2, 1);\n+\n+    __ eor3(v29, __ T16B, v4, v9, v14);\n+    __ eor3(v26, __ T16B, v1, v6, v11);\n+    __ eor3(v28, __ T16B, v3, v8, v13);\n+    __ eor3(v25, __ T16B, v0, v5, v10);\n+    __ eor3(v27, __ T16B, v2, v7, v12);\n+    __ eor3(v29, __ T16B, v29, v19, v24);\n+    __ eor3(v26, __ T16B, v26, v16, v21);\n+    __ eor3(v28, __ T16B, v28, v18, v23);\n+    __ eor3(v25, __ T16B, v25, v15, v20);\n+    __ eor3(v27, __ T16B, v27, v17, v22);\n+\n+    __ rax1(v30, __ T2D, v29, v26);\n+    __ rax1(v26, __ T2D, v26, v28);\n+    __ rax1(v28, __ T2D, v28, v25);\n+    __ rax1(v25, __ T2D, v25, v27);\n+    __ rax1(v27, __ T2D, v27, v29);\n+\n+    __ eor(v0, __ T16B, v0, v30);\n+    __ xar(v29, __ T2D, v1,  v25, (64 - 1));\n+    __ xar(v1,  __ T2D, v6,  v25, (64 - 44));\n+    __ xar(v6,  __ T2D, v9,  v28, (64 - 20));\n+    __ xar(v9,  __ T2D, v22, v26, (64 - 61));\n+    __ xar(v22, __ T2D, v14, v28, (64 - 39));\n+    __ xar(v14, __ T2D, v20, v30, (64 - 18));\n+    __ xar(v31, __ T2D, v2,  v26, (64 - 62));\n+    __ xar(v2,  __ T2D, v12, v26, (64 - 43));\n+    __ xar(v12, __ T2D, v13, v27, (64 - 25));\n+    __ xar(v13, __ T2D, v19, v28, (64 - 8));\n+    __ xar(v19, __ T2D, v23, v27, (64 - 56));\n+    __ xar(v23, __ T2D, v15, v30, (64 - 41));\n+    __ xar(v15, __ T2D, v4,  v28, (64 - 27));\n+    __ xar(v28, __ T2D, v24, v28, (64 - 14));\n+    __ xar(v24, __ T2D, v21, v25, (64 - 2));\n+    __ xar(v8,  __ T2D, v8,  v27, (64 - 55));\n+    __ xar(v4,  __ T2D, v16, v25, (64 - 45));\n+    __ xar(v16, __ T2D, v5,  v30, (64 - 36));\n+    __ xar(v5,  __ T2D, v3,  v27, (64 - 28));\n+    __ xar(v27, __ T2D, v18, v27, (64 - 21));\n+    __ xar(v3,  __ T2D, v17, v26, (64 - 15));\n+    __ xar(v25, __ T2D, v11, v25, (64 - 10));\n+    __ xar(v26, __ T2D, v7,  v26, (64 - 6));\n+    __ xar(v30, __ T2D, v10, v30, (64 - 3));\n+\n+    __ bcax(v20, __ T16B, v31, v22, v8);\n+    __ bcax(v21, __ T16B, v8,  v23, v22);\n+    __ bcax(v22, __ T16B, v22, v24, v23);\n+    __ bcax(v23, __ T16B, v23, v31, v24);\n+    __ bcax(v24, __ T16B, v24, v8,  v31);\n+\n+    __ ld1r(v31, __ T2D, __ post(rscratch1, 8));\n+\n+    __ bcax(v17, __ T16B, v25, v19, v3);\n+    __ bcax(v18, __ T16B, v3,  v15, v19);\n+    __ bcax(v19, __ T16B, v19, v16, v15);\n+    __ bcax(v15, __ T16B, v15, v25, v16);\n+    __ bcax(v16, __ T16B, v16, v3,  v25);\n+\n+    __ bcax(v10, __ T16B, v29, v12, v26);\n+    __ bcax(v11, __ T16B, v26, v13, v12);\n+    __ bcax(v12, __ T16B, v12, v14, v13);\n+    __ bcax(v13, __ T16B, v13, v29, v14);\n+    __ bcax(v14, __ T16B, v14, v26, v29);\n+\n+    __ bcax(v7, __ T16B, v30, v9,  v4);\n+    __ bcax(v8, __ T16B, v4,  v5,  v9);\n+    __ bcax(v9, __ T16B, v9,  v6,  v5);\n+    __ bcax(v5, __ T16B, v5,  v30, v6);\n+    __ bcax(v6, __ T16B, v6,  v4,  v30);\n+\n+    __ bcax(v3, __ T16B, v27, v0,  v28);\n+    __ bcax(v4, __ T16B, v28, v1,  v0);\n+    __ bcax(v0, __ T16B, v0,  v2,  v1);\n+    __ bcax(v1, __ T16B, v1,  v27, v2);\n+    __ bcax(v2, __ T16B, v2,  v28, v27);\n+\n+    __ eor(v0, __ T16B, v0, v31);\n+\n+    __ cbnzw(rscratch2, rounds24_loop);\n+\n+    if (multi_block) {\n+      \/\/ block_size =  200 - 2 * digest_length, ofs += block_size\n+      __ add(ofs, ofs, 200);\n+      __ sub(ofs, ofs, digest_length, Assembler::LSL, 1);\n+\n+      __ cmp(ofs, limit);\n+      __ br(Assembler::LE, sha3_loop);\n+      __ mov(c_rarg0, ofs); \/\/ return ofs\n+    }\n+\n+    __ st1(v0, v1, v2,  v3,  __ T1D, __ post(state, 32));\n+    __ st1(v4, v5, v6,  v7,  __ T1D, __ post(state, 32));\n+    __ st1(v8, v9, v10, v11, __ T1D, __ post(state, 32));\n+    __ st1(v12, v13, v14, v15, __ T1D, __ post(state, 32));\n+    __ st1(v16, v17, v18, v19, __ T1D, __ post(state, 32));\n+    __ st1(v20, v21, v22, v23, __ T1D, __ post(state, 32));\n+    __ st1(v24, __ T1D, state);\n+\n+    __ ldpd(v14, v15, Address(sp, 48));\n+    __ ldpd(v12, v13, Address(sp, 32));\n+    __ ldpd(v10, v11, Address(sp, 16));\n+    __ ldpd(v8, v9, __ post(sp, 64));\n+\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -6036,0 +6255,4 @@\n+    if (UseSHA3Intrinsics) {\n+      StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(false,   \"sha3_implCompress\");\n+      StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(true,    \"sha3_implCompressMB\");\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":223,"deletions":0,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -86,0 +86,4 @@\n+#ifndef HWCAP_SHA3\n+#define HWCAP_SHA3 (1 << 17)\n+#endif\n+\n@@ -317,0 +321,1 @@\n+  if (auxv & HWCAP_SHA3)  strcat(buf, \", sha3\");\n@@ -397,1 +402,1 @@\n-  if (auxv & (HWCAP_SHA1 | HWCAP_SHA2)) {\n+  if (auxv & (HWCAP_SHA1 | HWCAP_SHA2 | HWCAP_SHA512 | HWCAP_SHA3)) {\n@@ -434,1 +439,11 @@\n-  if (!(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) {\n+  if (UseSHA && (auxv & HWCAP_SHA3)) {\n+    \/\/ Do not auto-enable UseSHA3Intrinsics until it has been fully tested on hardware\n+    \/\/ if (FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {\n+      \/\/ FLAG_SET_DEFAULT(UseSHA3Intrinsics, true);\n+    \/\/ }\n+  } else if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n+  if (!(UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics)) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -236,0 +236,5 @@\n+  }\n+\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm_32.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -333,0 +333,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/ppc\/vm_version_ppc.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -223,0 +223,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/s390\/vm_version_s390.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1031,0 +1031,5 @@\n+  if (UseSHA3Intrinsics) {\n+    warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n+    FLAG_SET_DEFAULT(UseSHA3Intrinsics, false);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -458,1 +458,1 @@\n-    return 4;\n+    return 5;\n@@ -714,0 +714,3 @@\n+  case vmIntrinsics::_sha3_implCompress:\n+    if (!UseSHA3Intrinsics) return true;\n+    break;\n@@ -715,1 +718,1 @@\n-    if (!(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics)) return true;\n+    if (!(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics)) return true;\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1074,0 +1074,4 @@\n+  \/* support for sun.security.provider.SHA3 *\/                                                                          \\\n+  do_class(sun_security_provider_sha3,                             \"sun\/security\/provider\/SHA3\")                        \\\n+  do_intrinsic(_sha3_implCompress, sun_security_provider_sha3, implCompress_name, implCompress_signature, F_R)          \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -629,0 +629,1 @@\n+  case vmIntrinsics::_sha3_implCompress:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1004,0 +1004,2 @@\n+                  strcmp(call->as_CallLeaf()->_name, \"sha3_implCompress\") == 0 ||\n+                  strcmp(call->as_CallLeaf()->_name, \"sha3_implCompressMB\") == 0 ||\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-                                        bool long_state, address stubAddr, const char *stubName,\n+                                        const char* state_type, address stubAddr, const char *stubName,\n@@ -313,2 +313,2 @@\n-  Node* get_state_from_digest_object(Node *digestBase_object);\n-  Node* get_long_state_from_digest_object(Node *digestBase_object);\n+  Node* get_state_from_digest_object(Node *digestBase_object, const char* state_type);\n+  Node* get_digest_length_from_digest_object(Node *digestBase_object);\n@@ -837,0 +837,1 @@\n+  case vmIntrinsics::_sha3_implCompress:\n@@ -6444,0 +6445,3 @@\n+\/\/ Calculate SHA3 (i.e., SHA3-224 or SHA3-256 or SHA3-384 or SHA3-512) for single-block byte[] array.\n+\/\/ void com.sun.security.provider.SHA3.implCompress(byte[] buf, int ofs)\n+\/\/\n@@ -6466,0 +6470,1 @@\n+  Node* digest_length = NULL;\n@@ -6472,1 +6477,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6478,1 +6483,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6484,1 +6489,1 @@\n-    state = get_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[I\");\n@@ -6490,1 +6495,1 @@\n-    state = get_long_state_from_digest_object(digestBase_obj);\n+    state = get_state_from_digest_object(digestBase_obj, \"[J\");\n@@ -6494,0 +6499,8 @@\n+  case vmIntrinsics::_sha3_implCompress:\n+    assert(UseSHA3Intrinsics, \"need SHA3 instruction support\");\n+    state = get_state_from_digest_object(digestBase_obj, \"[B\");\n+    stubAddr = StubRoutines::sha3_implCompress();\n+    stubName = \"sha3_implCompress\";\n+    digest_length = get_digest_length_from_digest_object(digestBase_obj);\n+    if (digest_length == NULL) return false;\n+    break;\n@@ -6504,3 +6517,10 @@\n-  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(),\n-                                 stubAddr, stubName, TypePtr::BOTTOM,\n-                                 src_start, state);\n+  Node* call;\n+  if (digest_length == NULL) {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(false),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state);\n+  } else {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::digestBase_implCompress_Type(true),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, digest_length);\n+  }\n@@ -6513,1 +6533,1 @@\n-\/\/ Calculate MD5\/SHA\/SHA2\/SHA5 for multi-block byte[] array.\n+\/\/ Calculate MD5\/SHA\/SHA2\/SHA5\/SHA3 for multi-block byte[] array.\n@@ -6517,3 +6537,3 @@\n-  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 4, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512\/SHA3 instruction support\");\n+  assert((uint)predicate < 5, \"sanity\");\n@@ -6545,1 +6565,1 @@\n-  bool        long_state = false;\n+  const char* state_type = \"[I\";\n@@ -6574,1 +6594,9 @@\n-      long_state = true;\n+      state_type = \"[J\";\n+    }\n+    break;\n+  case 4:\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_sha3_implCompress)) {\n+      klass_digestBase_name = \"sun\/security\/provider\/SHA3\";\n+      stub_name = \"sha3_implCompressMB\";\n+      stub_addr = StubRoutines::sha3_implCompressMB();\n+      state_type = \"[B\";\n@@ -6592,1 +6620,1 @@\n-    return inline_digestBase_implCompressMB(digestBase_obj, instklass_digestBase, long_state, stub_addr, stub_name, src_start, ofs, limit);\n+    return inline_digestBase_implCompressMB(digestBase_obj, instklass_digestBase, state_type, stub_addr, stub_name, src_start, ofs, limit);\n@@ -6599,1 +6627,1 @@\n-                                                      bool long_state, address stubAddr, const char *stubName,\n+                                                      const char* state_type, address stubAddr, const char *stubName,\n@@ -6606,6 +6634,1 @@\n-  Node* state;\n-  if (long_state) {\n-    state = get_long_state_from_digest_object(digest_obj);\n-  } else {\n-    state = get_state_from_digest_object(digest_obj);\n-  }\n+  Node* state = get_state_from_digest_object(digest_obj, state_type);\n@@ -6614,0 +6637,6 @@\n+  Node* digest_length = NULL;\n+  if (strcmp(\"sha3_implCompressMB\", stubName) == 0) {\n+    digest_length = get_digest_length_from_digest_object(digest_obj);\n+    if (digest_length == NULL) return false;\n+  }\n+\n@@ -6615,4 +6644,13 @@\n-  Node* call = make_runtime_call(RC_LEAF|RC_NO_FP,\n-                                 OptoRuntime::digestBase_implCompressMB_Type(),\n-                                 stubAddr, stubName, TypePtr::BOTTOM,\n-                                 src_start, state, ofs, limit);\n+  Node* call;\n+  if (digest_length == NULL) {\n+    call = make_runtime_call(RC_LEAF|RC_NO_FP,\n+                             OptoRuntime::digestBase_implCompressMB_Type(false),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, ofs, limit);\n+  } else {\n+     call = make_runtime_call(RC_LEAF|RC_NO_FP,\n+                             OptoRuntime::digestBase_implCompressMB_Type(true),\n+                             stubAddr, stubName, TypePtr::BOTTOM,\n+                             src_start, state, digest_length, ofs, limit);\n+  }\n+\n@@ -6627,3 +6665,3 @@\n-Node * LibraryCallKit::get_state_from_digest_object(Node *digest_object) {\n-  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[I\", \/*is_exact*\/ false);\n-  assert (digest_state != NULL, \"wrong version of sun.security.provider.MD5\/SHA\/SHA2\");\n+Node * LibraryCallKit::get_state_from_digest_object(Node *digest_object, const char *state_type) {\n+  Node* digest_state = load_field_from_object(digest_object, \"state\", state_type, \/*is_exact*\/ false);\n+  assert (digest_state != NULL, \"wrong version of sun.security.provider.MD5\/SHA\/SHA2\/SHA5\/SHA3\");\n@@ -6637,9 +6675,5 @@\n-\/\/------------------------------get_long_state_from_digest_object-----------------------\n-Node * LibraryCallKit::get_long_state_from_digest_object(Node *digest_object) {\n-  Node* digest_state = load_field_from_object(digest_object, \"state\", \"[J\", \/*is_exact*\/ false);\n-  assert (digest_state != NULL, \"wrong version of sun.security.provider.SHA5\");\n-  if (digest_state == NULL) return (Node *) NULL;\n-\n-  \/\/ now have the array, need to get the start address of the state array\n-  Node* state = array_element_address(digest_state, intcon(0), T_LONG);\n-  return state;\n+\/\/------------------------------get_digest_length_from_sha3_object----------------------------------\n+Node * LibraryCallKit::get_digest_length_from_digest_object(Node *digest_object) {\n+  Node* digest_length = load_field_from_object(digest_object, \"digestLength\", \"I\", \/*is_exact*\/ false);\n+  assert (digest_length != NULL, \"sanity\");\n+  return digest_length;\n@@ -6651,1 +6685,1 @@\n-\/\/    if (digestBaseObj instanceof MD5\/SHA\/SHA2\/SHA5) do_intrinsic, else do_javapath\n+\/\/    if (digestBaseObj instanceof MD5\/SHA\/SHA2\/SHA5\/SHA3) do_intrinsic, else do_javapath\n@@ -6654,3 +6688,3 @@\n-  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics,\n-         \"need MD5\/SHA1\/SHA256\/SHA512 instruction support\");\n-  assert((uint)predicate < 4, \"sanity\");\n+  assert(UseMD5Intrinsics || UseSHA1Intrinsics || UseSHA256Intrinsics || UseSHA512Intrinsics || UseSHA3Intrinsics,\n+         \"need MD5\/SHA1\/SHA256\/SHA512\/SHA3 instruction support\");\n+  assert((uint)predicate < 5, \"sanity\");\n@@ -6692,0 +6726,6 @@\n+  case 4:\n+    if (UseSHA3Intrinsics) {\n+      \/\/ we want to do an instanceof comparison against the SHA3 class\n+      klass_name = \"sun\/security\/provider\/SHA3\";\n+    }\n+    break;\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":84,"deletions":44,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -963,1 +963,1 @@\n-const TypeFunc* OptoRuntime::digestBase_implCompress_Type() {\n+const TypeFunc* OptoRuntime::digestBase_implCompress_Type(bool is_sha3) {\n@@ -965,1 +965,1 @@\n-  int num_args = 2;\n+  int num_args = is_sha3 ? 3 : 2;\n@@ -971,0 +971,1 @@\n+  if (is_sha3) fields[argp++] = TypeInt::INT; \/\/ digest_length\n@@ -984,1 +985,1 @@\n-const TypeFunc* OptoRuntime::digestBase_implCompressMB_Type() {\n+const TypeFunc* OptoRuntime::digestBase_implCompressMB_Type(bool is_sha3) {\n@@ -986,1 +987,1 @@\n-  int num_args = 4;\n+  int num_args = is_sha3 ? 5 : 4;\n@@ -992,0 +993,1 @@\n+  if (is_sha3) fields[argp++] = TypeInt::INT; \/\/ digest_length\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -281,2 +281,2 @@\n-  static const TypeFunc* digestBase_implCompress_Type();\n-  static const TypeFunc* digestBase_implCompressMB_Type();\n+  static const TypeFunc* digestBase_implCompress_Type(bool is_sha3);\n+  static const TypeFunc* digestBase_implCompressMB_Type(bool is_sha3);\n","filename":"src\/hotspot\/share\/opto\/runtime.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -355,0 +355,4 @@\n+  product(bool, UseSHA3Intrinsics, false, DIAGNOSTIC,                       \\\n+          \"Use intrinsics for SHA3 crypto hash function. \"                  \\\n+          \"Requires that UseSHA is enabled.\")                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+address StubRoutines::_sha3_implCompress     = NULL;\n+address StubRoutines::_sha3_implCompressMB   = NULL;\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,0 +231,2 @@\n+  static address _sha3_implCompress;\n+  static address _sha3_implCompressMB;\n@@ -410,0 +412,2 @@\n+  static address sha3_implCompress()     { return _sha3_implCompress; }\n+  static address sha3_implCompressMB()   { return _sha3_implCompressMB; }\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.HotSpotIntrinsicCandidate;\n@@ -76,0 +77,4 @@\n+    private void implCompressCheck(byte[] b, int ofs) {\n+        Objects.requireNonNull(b);\n+    }\n+\n@@ -81,4 +86,10 @@\n-        for (int i = 0; i < buffer.length; i++) {\n-            state[i] ^= b[ofs++];\n-        }\n-        keccak();\n+        implCompressCheck(b, ofs);\n+        implCompress0(b, ofs);\n+    }\n+\n+    @HotSpotIntrinsicCandidate\n+    private void implCompress0(byte[] b, int ofs) {\n+       for (int i = 0; i < buffer.length; i++) {\n+           state[i] ^= b[ofs++];\n+       }\n+       keccak();\n@@ -97,4 +108,1 @@\n-        for (int i = 0; i < buffer.length; i++) {\n-            state[i] ^= buffer[i];\n-        }\n-        keccak();\n+        implCompress(buffer, 0);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -579,0 +579,1 @@\n+        add(toBeInvestigated, \"sun\/security\/provider\/SHA3.\" + shaCompressName + \"([BI)V\");\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.test\/src\/org\/graalvm\/compiler\/hotspot\/test\/CheckGraalIntrinsics.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary C2 support for MD5\/SHA-1\/SHA-224\/SHA-256\/SHA-384\/SHA-512\n+ * @summary C2 support for MD5\/SHA-1\/SHA-224\/SHA-256\/SHA-384\/SHA-512\/SHA3\n@@ -47,0 +47,12 @@\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512\n+ *      compiler.intrinsics.sha.TestDigest\n@@ -66,0 +78,12 @@\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512 -Doffset=1\n+ *      compiler.intrinsics.sha.TestDigest\n@@ -83,0 +107,25 @@\n+ *\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-224\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-256\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-384\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA-1   -Dalgorithm2=SHA3-512\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-224 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-256 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-384 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n+ * @run main\/othervm\/timeout=600 -Xbatch\n+ *      -Dalgorithm=SHA3-512 -Dalgorithm2=SHA-1\n+ *      compiler.intrinsics.sha.TestDigest\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/TestDigest.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    public static final String USE_SHA3_INTRINSICS_OPTION\n+            = \"UseSHA3Intrinsics\";\n@@ -67,0 +69,2 @@\n+    protected static final String SHA3_INTRINSICS_ARE_NOT_AVAILABLE\n+            = \"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\";\n@@ -92,0 +96,2 @@\n+        case DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION:\n+            return DigestOptionsBase.SHA3_INTRINSICS_ARE_NOT_AVAILABLE;\n@@ -118,0 +124,2 @@\n+            case DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION:\n+                return IntrinsicPredicates.SHA3_INSTRUCTION_AVAILABLE;\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/DigestOptionsBase.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify UseSHA3Intrinsics option processing on supported CPU.\n+ * @library \/test\/lib testcases \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI\n+ *                   compiler.intrinsics.sha.cli.TestUseSHA3IntrinsicsOptionOnSupportedCPU\n+ *\/\n+\n+package compiler.intrinsics.sha.cli;\n+\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForSupportedCPU;\n+\n+public class TestUseSHA3IntrinsicsOptionOnSupportedCPU {\n+    public static void main(String args[]) throws Throwable {\n+        new DigestOptionsBase(new GenericTestCaseForSupportedCPU(\n+                DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION)).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify UseSHA3Intrinsics option processing on unsupported CPU.\n+ * @library \/test\/lib testcases \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI\n+ *                   compiler.intrinsics.sha.cli.TestUseSHA3IntrinsicsOptionOnUnsupportedCPU\n+ *\/\n+\n+package compiler.intrinsics.sha.cli;\n+\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForOtherCPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedAArch64CPU;\n+import compiler.intrinsics.sha.cli.testcases.GenericTestCaseForUnsupportedX86CPU;\n+import compiler.intrinsics.sha.cli.testcases.UseSHAIntrinsicsSpecificTestCaseForUnsupportedCPU;\n+\n+public class TestUseSHA3IntrinsicsOptionOnUnsupportedCPU {\n+    public static void main(String args[]) throws Throwable {\n+        new DigestOptionsBase(\n+                new GenericTestCaseForUnsupportedX86CPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new GenericTestCaseForUnsupportedAArch64CPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new UseSHAIntrinsicsSpecificTestCaseForUnsupportedCPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION),\n+                new GenericTestCaseForOtherCPU(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION)).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnUnsupportedCPU.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -69,1 +69,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -86,1 +88,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -105,1 +109,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, false),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, false));\n@@ -124,1 +130,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForSupportedCPU.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -78,1 +78,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n@@ -97,1 +99,3 @@\n-                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true));\n+                        DigestOptionsBase.USE_SHA512_INTRINSICS_OPTION, true),\n+                CommandLineOptionTest.prepareBooleanFlag(\n+                        DigestOptionsBase.USE_SHA3_INTRINSICS_OPTION, true));\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForUnsupportedCPU.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+    protected static final String SHA3_INTRINSIC_ID\n+            = \"_sha3_implCompress\";\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/DigestSanityTestBase.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ * @comment the test verifies compilation of java.base methods, so it can't be run w\/ AOT'ed java.base\n+ * @requires !vm.aot.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:-UseSHA3Intrinsics\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *                    negative_224.log negative_256.log negative_384.log negative_512.log\n+ *\/\n+\n+package compiler.intrinsics.sha.sanity;\n+\n+import compiler.testlibrary.sha.predicate.IntrinsicPredicates;\n+\n+public class TestSHA3Intrinsics {\n+    public static void main(String args[]) throws Exception {\n+        new DigestSanityTestBase(IntrinsicPredicates.isSHA3IntrinsicAvailable(),\n+                DigestSanityTestBase.SHA3_INTRINSIC_ID).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ * @comment the test verifies compilation of java.base methods, so it can't be run w\/ AOT'ed java.base\n+ * @requires !vm.aot.enabled\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_224.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_256.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_384.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=negative_512.log\n+ *                   -XX:CompileOnly=sun\/security\/provider\/DigestBase\n+ *                   -XX:CompileOnly=sun\/security\/provider\/SHA3 -XX:-UseSHA\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log negative_224.log negative_256.log\n+ *                    negative_384.log negative_512.log\n+ *\/\n+\n+package compiler.intrinsics.sha.sanity;\n+\n+import compiler.testlibrary.sha.predicate.IntrinsicPredicates;\n+\n+public class TestSHA3MultiBlockIntrinsics {\n+    public static void main(String args[]) throws Exception {\n+        new DigestSanityTestBase(IntrinsicPredicates.isSHA3IntrinsicAvailable(),\n+                DigestSanityTestBase.MB_INTRINSIC_ID).test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -100,0 +100,4 @@\n+    public static final BooleanSupplier SHA3_INSTRUCTION_AVAILABLE\n+            \/\/ sha3 is only implemented on aarch64 for now\n+            = new CPUSpecificPredicate(\"aarch64.*\", new String[] {\"sha3\"          }, null);\n+\n@@ -102,3 +106,2 @@\n-                    new OrPredicate(\n-                            IntrinsicPredicates.SHA256_INSTRUCTION_AVAILABLE,\n-                            IntrinsicPredicates.SHA512_INSTRUCTION_AVAILABLE));\n+              new OrPredicate(IntrinsicPredicates.SHA256_INSTRUCTION_AVAILABLE,\n+              new OrPredicate(IntrinsicPredicates.SHA512_INSTRUCTION_AVAILABLE, IntrinsicPredicates.SHA3_INSTRUCTION_AVAILABLE)));\n@@ -126,0 +129,5 @@\n+    public static BooleanSupplier isSHA3IntrinsicAvailable() {\n+        return new AndPredicate(IntrinsicPredicates.COMPILABLE_BY_C2,\n+                                IntrinsicPredicates.isIntrinsicAvailable(\"sun.security.provider.SHA3\", \"implCompress0\"));\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/testlibrary\/sha\/predicate\/IntrinsicPredicates.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+\n+import java.security.MessageDigest;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8252204\n+ * @library \/test\/lib\n+ * @summary testing SHA3-224\/256\/384\/512.\n+ *\/\n+public class SHA3 {\n+\n+    static byte[] msg1600bits;\n+    static {\n+        msg1600bits = new byte[200];\n+        for (int i = 0; i < 200; i++)\n+            msg1600bits[i] = (byte) 0xa3;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        MessageDigest md;\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-224_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-224\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"6B4E0342 3667DBB7 3B6E1545 4F0EB1AB D4597F9A 1B078E3F 5B5A6BC7\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-224_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"9376816A BA503F72 F96CE7EB 65AC095D EEE3BE4B F9BBC2A1 CB7E11E0\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-256_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-256\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"A7FFC6F8 BF1ED766 51C14756 A061D662 F580FF4D E43B49FA 82D80A4B 80F8434A\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-256_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"79F38ADE C5C20307 A98EF76E 8324AFBF D46CFD81 B22E3973 C65FA1BD 9DE31787\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-384_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-384\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"0C63A75B 845E4F7D 01107D85 2E4C2485 C51A50AA AA94FC61 995E71BB EE983A2A\" +\n+                                             \"C3713831 264ADB47 FB6BD1E0 58D5F004\")));\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-384_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"1881DE2C A7E41EF9 5DC4732B 8F5F002B 189CC1E4 2B74168E D1732649 CE1DBCDD\" +\n+                                             \"76197A31 FD55EE98 9F2D7050 DD473E8F\")));\n+\n+        \/\/ Test vectors obtained from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-512_Msg0.pdf\n+        md = MessageDigest.getInstance(\"SHA3-512\");\n+        Asserts.assertTrue(Arrays.equals(md.digest(\"\".getBytes()),\n+                                         xeh(\"A69F73CC A23A9AC5 C8B567DC 185A756E 97C98216 4FE25859 E0D1DCC1 475C80A6\" +\n+                                             \"15B2123A F1F5F94C 11E3E940 2C3AC558 F500199D 95B6D3E3 01758586 281DCD26\")));\n+        \/\/ Test vectors obtaned from\n+        \/\/ https:\/\/csrc.nist.gov\/CSRC\/media\/Projects\/Cryptographic-Standards-and-Guidelines\/documents\/examples\/SHA3-512_1600.pdf\n+        Asserts.assertTrue(Arrays.equals(md.digest(msg1600bits),\n+                                         xeh(\"E76DFAD2 2084A8B1 467FCF2F FA58361B EC7628ED F5F3FDC0 E4805DC4 8CAEECA8\" +\n+                                             \"1B7C13C3 0ADF52A3 65958473 9A2DF46B E589C51C A1A4A841 6DF6545A 1CE8BA00\")));\n+    }\n+\n+    static byte[] xeh(String in) {\n+        in = in.replaceAll(\" \", \"\");\n+        int len = in.length() \/ 2;\n+        byte[] out = new byte[len];\n+        for (int i = 0; i < len; i++) {\n+            out[i] = (byte)Integer.parseInt(in.substring(i * 2, i * 2 + 2), 16);\n+        }\n+        return out;\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHA3.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-    @Param({\"md2\", \"md5\", \"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\"})\n+    @Param({\"md2\", \"md5\", \"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\", \"SHA3-224\", \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"})\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/MessageDigests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}