{"files":[{"patch":"@@ -763,0 +763,45 @@\n+    \/**\n+     * {@return {@code true} if the executable element can be\n+     * determined to be a canonical constructor of a record, {@code\n+     * false} otherwise}\n+     * Note that in some cases there may be insufficient information\n+     * to determine if a constructor is a canonical constructor, such\n+     * as if the executable element is built backed by a class\n+     * file. In such cases, {@code false} is returned.\n+     *\n+     * @implSpec\n+     * The default implementation of this method unconditionally\n+     * returns {@code false}.\n+     *\n+     * @param e  the executable being examined\n+     * @jls 8.10.4.1 Normal Canonical Constructors\n+     * @since 20\n+     *\/\n+    default boolean isCanonicalConstructor(ExecutableElement e) {\n+        return false;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the executable element can be\n+     * determined to be a compact constructor of a record, {@code\n+     * false} otherwise}\n+     * By definition, a compact constructor is also a {@linkplain\n+     * #isCanonicalConstructor(ExecutableElement) canonical\n+     * constructor}.\n+     * Note that in some cases there may be insufficient information\n+     * to determine if a constructor is a compact constructor, such as\n+     * if the executable element is built backed by a class file. In\n+     * such cases, {@code false} is returned.\n+     *\n+     * @implSpec\n+     * The default implementation of this method unconditionally\n+     * returns {@code false}.\n+     *\n+     * @param e  the executable being examined\n+     * @jls 8.10.4.2 Compact Canonical Constructors\n+     * @since 20\n+     *\/\n+    default boolean isCompactConstructor(ExecutableElement e) {\n+        return false;\n+    }\n+\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Elements.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -730,0 +730,10 @@\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public boolean isCompactConstructor(ExecutableElement e) {\n+        return (((MethodSymbol)e).flags() & Flags.COMPACT_RECORD_CONSTRUCTOR) != 0;\n+    }\n+\n+    @Override @DefinedBy(Api.LANGUAGE_MODEL)\n+    public boolean isCanonicalConstructor(ExecutableElement e) {\n+        return (((MethodSymbol)e).flags() & Flags.RECORD) != 0;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289249\n+ * @summary Test Elements.{isCompactConstructor, isCanonicalConstructor}\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestRecordPredicates\n+ * @compile -processor TestRecordPredicates -proc:only TestRecordPredicates.java\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+\n+\/**\n+ * Test Elements.{isCompactConstructor, isCanonicalConstructor}.\n+ *\/\n+public class TestRecordPredicates extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            \/\/ Test null handling\n+            Elements vacuousElements = new VacuousElements();\n+            expectFalse( () -> vacuousElements.isCompactConstructor(null));\n+            expectFalse( () -> vacuousElements.isCanonicalConstructor(null));\n+\n+            expectNpe( () -> elements.isCompactConstructor(null));\n+            expectNpe( () -> elements.isCanonicalConstructor(null));\n+\n+            for (var typeElt :\n+                     ElementFilter.typesIn(roundEnv.getElementsAnnotatedWith(ExpectedPredicates.class))) {\n+                ExpectedPredicates ep = typeElt.getAnnotation(ExpectedPredicates.class);\n+                for (ExecutableElement ctor : ElementFilter.constructorsIn(typeElt.getEnclosedElements())) {\n+                    boolean isCompact = elements.isCompactConstructor(ctor);\n+                    if (isCompact != ep.isCompact()) {\n+                        messager.printError(\"Unexpected isCompact value on \", ctor);\n+                    }\n+\n+                    boolean isCanonical = elements.isCanonicalConstructor(ctor);\n+                    if (isCanonical != ep.isCanonical()) {\n+                        messager.printError(\"Unexpected isCanonical value on \", ctor);\n+                    }\n+\n+                    if (isCompact && !isCanonical) {\n+                        messager.printError(\"Compact constructors not reported as canonical \", ctor);\n+                    }\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private void expectNpe(java.util.function.BooleanSupplier bs) {\n+        try {\n+            bs.getAsBoolean();\n+            messager.printError(\"Did not get expected NPE\");\n+        } catch (NullPointerException npe) {\n+                ; \/\/ Expected\n+        }\n+    }\n+\n+    private void expectFalse(java.util.function.BooleanSupplier bs) {\n+        try {\n+            boolean result = bs.getAsBoolean();\n+            if (result) {\n+                messager.printError(\"Unexpected true result\");\n+            }\n+        } catch (NullPointerException npe) {\n+            messager.printError(\"Unexpected NPE thrown\");\n+        }\n+    }\n+\n+\n+    \/**\n+     * Annotation the class, not just constructor, since many of the\n+     * constructors that are of interest are implicitly declared.\n+     *\/\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @interface ExpectedPredicates {\n+        boolean isCompact()   default false;\n+        boolean isCanonical() default false;\n+    }\n+\n+    @ExpectedPredicates(isCompact=true, isCanonical=true)\n+    record RecordCompactCtor(int foo, double bar) {}\n+\n+    \/\/ Example from JLS 8.10.4.2\n+    @ExpectedPredicates(isCompact=true, isCanonical=true)\n+    record Rational(int num, int denom) {\n+        private static int gcd(int a, int b) {\n+            if (b == 0) return Math.abs(a);\n+            else return gcd(b, a % b);\n+        }\n+\n+        \/\/ Compact ctor\n+        Rational {\n+            int gcd = gcd(num, denom);\n+            num    \/= gcd;\n+            denom  \/= gcd;\n+        }\n+    }\n+\n+    \/\/ Example from JLS 8.10.4.2\n+    @ExpectedPredicates(isCanonical=true)\n+    record RationalAlt(int num, int denom) {\n+        private static int gcd(int a, int b) {\n+            if (b == 0) return Math.abs(a);\n+            else return gcd(b, a % b);\n+        }\n+\n+        \/\/ Non-compact ctor\n+        RationalAlt(int num, int denom) {\n+            int gcd = gcd(num, denom);\n+            num    \/= gcd;\n+            denom  \/= gcd;\n+            this.num   = num;\n+            this.denom = denom;\n+        }\n+    }\n+\n+    \/\/ Only constructors on records can be compact or canonical.\n+    @ExpectedPredicates\n+    enum MetaSyntax {\n+        FOO,\n+        BAR;\n+    }\n+\n+    @ExpectedPredicates\n+    class NestedClass {\n+        \/\/ A default constructor is neither compact nor canonical.\n+    }\n+\n+    @ExpectedPredicates\n+    static class StaticNestedClass {\n+        \/\/ A default constructor is neither compact nor canonical.\n+    }\n+\n+    @ExpectedPredicates\n+    static class AnotherNestedClass {\n+        \/\/ Non-default constructor\n+        public AnotherNestedClass() {}\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestRecordPredicates.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}