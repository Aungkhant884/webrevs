{"files":[{"patch":"@@ -38,3 +38,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Collections;\n@@ -44,0 +41,1 @@\n+import java.util.List;\n@@ -49,0 +47,2 @@\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n@@ -52,0 +52,6 @@\n+class MyClass {\n+    public static void main(String args[]) {\n+    System.out.println(\"Inside MyClass\");\n+    }\n+}\n+\n@@ -53,4 +59,0 @@\n-    private static String file1GHugePages = \"\/sys\/kernel\/mm\/hugepages\/hugepages-1048576kB\/free_hugepages\";\n-    private static String file2MHugePages = \"\/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/free_hugepages\";\n-    private static String file1GHugePagesResv = \"\/sys\/kernel\/mm\/hugepages\/hugepages-1048576kB\/resv_hugepages\";\n-    private static String file2MHugePagesResv = \"\/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/resv_hugepages\";\n@@ -58,2 +60,7 @@\n-    private static String heapPrefix = \"Heap:\";\n-    private static Pattern heapPattern = Pattern.compile(heapPrefix);\n+    private static final String DIR_HUGE_PAGES = \"\/sys\/kernel\/mm\/hugepages\/\";\n+    private static final int HEAP_SIZE_IN_KB = 2097152;\n+\n+    private static final Pattern HEAP_PATTERN = Pattern.compile(\"Heap:\");\n+    private static final Pattern PAGE_SIZE_PATTERN = Pattern.compile(\".*page_size=([^ ]+).*\");\n+    private static final Pattern HUGEPAGE_PATTERN = Pattern.compile(\".*hugepages-([^ ]+).*kB\");\n+\n@@ -62,5 +69,0 @@\n-    private static int orig1GPageCount;\n-    private static int orig2MPageCount;\n-    private static int resv1GPageCount;\n-    private static int resv2MPageCount;\n-\n@@ -69,0 +71,4 @@\n+    private static final int SIZE=32;\n+    private static boolean[] pageSizes = new boolean[SIZE];\n+    private static int[] pageCount = new int[SIZE];\n+    private static int vmPageSizeIndex;\n@@ -70,1 +76,1 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String args[]) {\n@@ -73,4 +79,6 @@\n-            testCase1();\n-            testCase2();\n-            testCase3();\n-            testCase4();\n+            for (int i = 31;i > vmPageSizeIndex;i--) {\n+                if (pageSizes[i]) {\n+                    testCase(i);\n+                    break;\n+                }\n+            }\n@@ -80,3 +88,0 @@\n-        if (errorMessage!=null) {\n-            throw new AssertionError(errorMessage);\n-        }\n@@ -86,2 +91,4 @@\n-    private static boolean matchPattern(String line, Pattern regex) {\n-        return regex.matcher(line).find();\n+\n+    private static int requiredPageCount(int index) {\n+        int pageSizeInKB =  1 << (index-10);\n+        return HEAP_SIZE_IN_KB\/pageSizeInKB;\n@@ -89,2 +96,12 @@\n-    private static boolean matchPattern(String line) {\n-        return matchPattern(line, heapPattern);\n+\n+    private static String sizeFromIndex(int index) {\n+        int k = 1024;\n+        int m = 1024*1024;\n+        int g = 1024*1024*1024;\n+        int sizeInBytes = 1 << index;\n+        if (sizeInBytes < m)\n+           return Integer.toString(sizeInBytes\/k)+\"K\";\n+        if(sizeInBytes < g)\n+           return Integer.toString(sizeInBytes\/m)+\"M\";\n+        else\n+           return Integer.toString(sizeInBytes\/g)+\"G\";\n@@ -95,2 +112,0 @@\n-        String traceLinePatternString = \".*page_size=([^ ]+).*\";\n-        Pattern traceLinePattern = Pattern.compile(traceLinePatternString);\n@@ -100,2 +115,2 @@\n-            if (matchPattern(line)) {\n-                Matcher trace = traceLinePattern.matcher(line);\n+            if (HEAP_PATTERN.matcher(line).find()) {\n+                Matcher trace = PAGE_SIZE_PATTERN.matcher(line);\n@@ -104,1 +119,1 @@\n-                if(pageSize.contains(tracePageSize)) {\n+                if (pageSize.contains(tracePageSize)) {\n@@ -112,12 +127,7 @@\n-    public static int checkAndReadFile(String filename, String errorstr) throws Exception {\n-        try {\n-            fis = new FileInputStream(filename);\n-            dis = new DataInputStream(fis);\n-            int pagecount = Integer.parseInt(dis.readLine());\n-            dis.close();\n-            fis.close();\n-            return pagecount;\n-        } catch (Exception e) {\n-            System.out.println(errorstr);\n-        }\n-        return -1;\n+    public static int checkAndReadFile(String filename, String pageSize) throws Exception {\n+        fis = new FileInputStream(filename);\n+        dis = new DataInputStream(fis);\n+        int pagecount = Integer.parseInt(dis.readLine());\n+        dis.close();\n+        fis.close();\n+        return pagecount;\n@@ -126,21 +136,20 @@\n-    public static void doSetup() throws Exception{\n-        File file;\n-        \/\/ Legality check for 1G , 2M pages.\n-        orig1GPageCount = checkAndReadFile(file1GHugePages, \"System does not support 1G pages\");\n-        if (orig1GPageCount >= 0) {\n-            System.out.println(\"Number of 1G pages = \" + orig1GPageCount + \"\\n\");\n-        }\n-        orig2MPageCount =  checkAndReadFile(file2MHugePages, \"System does not support 2M pages\");\n-        if (orig2MPageCount >= 0) {\n-            System.out.println(\"Number of 2M pages = \" + orig2MPageCount + \"\\n\");\n-        }\n-        resv1GPageCount = checkAndReadFile(file1GHugePagesResv, \"System does not support 1G pages\");\n-        if (resv2MPageCount >= 0) {\n-            System.out.println(\"Number of reserved 1G pages = \" + resv1GPageCount + \"\\n\");\n-        }\n-        resv2MPageCount =  checkAndReadFile(file2MHugePagesResv, \"System does not support 2M pages\");\n-        if (resv2MPageCount >= 0) {\n-            System.out.println(\"Number of reserved 2M pages = \" + resv2MPageCount + \"\\n\");\n-        }\n-\n-    }\n+    public static void doSetup() throws Exception {\n+        \/\/ Large page sizes\n+        File[] directories = new File(DIR_HUGE_PAGES).listFiles(File::isDirectory);\n+        for (File dir : directories) {\n+            String pageSizeFileName = dir.getName();\n+            Matcher matcher = HUGEPAGE_PATTERN.matcher(pageSizeFileName);\n+            matcher.find();\n+            String pageSize = matcher.group(1);\n+\n+            if (pageSize != null) {\n+                int freePageCount = checkAndReadFile(DIR_HUGE_PAGES+pageSizeFileName+\"\/free_hugepages\", pageSize);\n+                int resvPageCount = checkAndReadFile(DIR_HUGE_PAGES+pageSizeFileName+\"\/resv_hugepages\", pageSize);\n+\n+                int availablePages = freePageCount - resvPageCount;\n+                if (availablePages >= 0) {\n+                    System.out.println(\"Number of available \"+pageSize+\"kB pages = \"+availablePages);\n+                } else {\n+                    System.out.println(\"System does not support\"+pageSize+\"kB pages\");\n+                    continue;\n+                }\n@@ -148,18 +157,4 @@\n-    public static void testCase1() throws Exception {\n-        if((orig1GPageCount - resv1GPageCount)  < 2) {\n-            System.out.println(\"TestCase1 skipped\\n\");\n-            return;\n-        }\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:pagesize\",\n-                                                                  \"-XX:LargePageSizeInBytes=1G\",\n-                                                                  \"-XX:+UseParallelGC\",\n-                                                                  \"-XX:+UseLargePages\",\n-                                                                  \"-Xmx2g\",\n-                                                                  \"-Xms1g\",\n-                                                                  TestExplicitPageAllocation.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-        if(!checkOutput(output,\"1G\")) {\n-           errorMessage = \"Failed 1G page allocation\\n\";\n-        } else {\n-           System.out.println(\"TestCase1 Passed\\n\");\n+                int index = Integer.numberOfTrailingZeros(Integer.parseInt(pageSize)*1024);\n+                pageSizes[index] = true;\n+                pageCount[index] = availablePages;\n+            }\n@@ -167,0 +162,11 @@\n+        \/\/ OS vm page size\n+        ProcessBuilder processBuilder = new ProcessBuilder();\n+        processBuilder.command(\"getconf\", \"PAGE_SIZE\");\n+        Process process = processBuilder.start();\n+        StringBuilder output = new StringBuilder();\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        String vmPageSize = reader.readLine();\n+\n+        vmPageSizeIndex = Integer.numberOfTrailingZeros(Integer.parseInt(vmPageSize));\n+        pageSizes[vmPageSizeIndex] = true;\n+        pageCount[vmPageSizeIndex] = Integer.MAX_VALUE;\n@@ -169,5 +175,2 @@\n-    public static void testCase2() throws Exception {\n-        if((orig1GPageCount - resv1GPageCount) > 0 || (orig2MPageCount - resv2MPageCount) < 1280) {\n-            System.out.println(\"TestCase2 skipped\\n\");\n-            return;\n-        }\n+    public static void testCase(int index) throws Exception {\n+        String pageSize = sizeFromIndex(index);\n@@ -175,1 +178,1 @@\n-                                                                  \"-XX:LargePageSizeInBytes=1G\",\n+                                                                  \"-XX:LargePageSizeInBytes=\"+pageSize,\n@@ -180,1 +183,1 @@\n-                                                                  TestExplicitPageAllocation.class.getName());\n+                                                                  MyClass.class.getName());\n@@ -183,6 +186,0 @@\n-        if(!checkOutput(output,\"2M\")) {\n-           errorMessage = \"Failed 2M page allocation\\n\";\n-        } else {\n-           System.out.println(\"TestCase2 Passed\\n\");\n-        }\n-    }\n@@ -190,18 +187,14 @@\n-    public static void testCase3() throws Exception {\n-        if((orig1GPageCount - resv1GPageCount) > 0 || (orig2MPageCount - resv2MPageCount) > 0) {\n-            System.out.println(\"TestCase3 skipped\\n\");\n-            return;\n-        }\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:pagesize\",\n-                                                                 \"-XX:LargePageSizeInBytes=1G\",\n-                                                                 \"-XX:+UseParallelGC\",\n-                                                                 \"-XX:+UseLargePages\",\n-                                                                 \"-Xmx2g\",\n-                                                                 \"-Xms1g\",\n-                                                                 TestExplicitPageAllocation.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-        if(!checkOutput(output,\"4K\")) {\n-           errorMessage = \"Failed 4K page allocation\\n\";\n-        } else {\n-           System.out.println(\"TestCase3 Passed\\n\");\n+        for (int i = index;i >= vmPageSizeIndex;i--) {\n+            if(pageSizes[i]) {\n+                String size = sizeFromIndex(i);\n+                System.out.println(\"Checking allocation for \" + size);\n+                if (!checkOutput(output,size)) {\n+                    if (requiredPageCount(i) > pageCount[i]) {\n+                       continue;\n+                    }\n+                    errorMessage += \"TestCase Failed for \"+size+\" page allocation\\n\";\n+                } else {\n+                    System.out.println(\"TestCase Passed for pagesize: \"+pageSize+\", allocated pagesize:\"+size);\n+                    break;\n+                }\n+            }\n@@ -209,1 +202,0 @@\n-    }\n@@ -211,18 +203,2 @@\n-    public static void testCase4() throws Exception {\n-        if((orig2MPageCount - resv2MPageCount) < 1280) {\n-            System.out.println(\"TestCase4 skipped\\n\");\n-            return;\n-        }\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:pagesize\",\n-                                                                 \"-XX:LargePageSizeInBytes=2M\",\n-                                                                 \"-XX:+UseParallelGC\",\n-                                                                 \"-XX:+UseLargePages\",\n-                                                                 \"-Xmx2g\",\n-                                                                 \"-Xms1g\",\n-                                                                 TestExplicitPageAllocation.class.getName());\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-        if(!checkOutput(output,\"2M\")) {\n-           errorMessage = \"Failed 2M page allocation\\n\";\n-        } else {\n-           System.out.println(\"TestCase4 Passed\\n\");\n+        if (errorMessage!=null) {\n+            throw new AssertionError(errorMessage);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestExplicitPageAllocation.java","additions":108,"deletions":132,"binary":false,"changes":240,"status":"modified"}]}