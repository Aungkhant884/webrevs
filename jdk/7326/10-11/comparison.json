{"files":[{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.bits == 64\n@@ -42,1 +43,1 @@\n-import java.util.List;\n+import java.util.*;\n@@ -55,8 +56,1 @@\n-\n-    private static String errorMessage = \"\";\n-\n-    private static final int MAX_NUMBER_OF_PAGESIZE = 64;\n-    private static boolean[] pageSizes = new boolean[MAX_NUMBER_OF_PAGESIZE];\n-    private static int[] pageCount = new int[MAX_NUMBER_OF_PAGESIZE];\n-    private static int largestPageSizeIndex;\n-    private static int vmPageSizeIndex;\n+    private static TreeMap<Long, Integer> treeMap = new TreeMap<Long, Integer>(Collections.reverseOrder());\n@@ -65,1 +59,1 @@\n-    public static void main(String args[]) {\n+    public static void main(String args[]) throws Exception {\n@@ -68,3 +62,0 @@\n-            if (largestPageSizeIndex > vmPageSizeIndex) {\n-                testCase(largestPageSizeIndex);\n-            }\n@@ -72,1 +63,2 @@\n-           System.out.println(\"Exception \" + e);\n+            System.out.println(\"Setup Exception \" + e);\n+            return;\n@@ -74,0 +66,1 @@\n+        testCase(treeMap.firstKey());\n@@ -76,4 +69,4 @@\n-    private static long requiredPageCount(int index) {\n-        long pageSizeInKB = 1L << (index - 10);\n-        long codeCacheAddened = CODE_CACHE_SIZE_IN_KB >= pageSizeInKB ? CODE_CACHE_SIZE_IN_KB : 0;\n-        return (long) Math.ceil((double) (HEAP_SIZE_IN_KB + codeCacheAddened) \/ pageSizeInKB);\n+    \/\/ Calculates the required page count needed to accomodate both code cache and heap for the given page size index.\n+    private static long requiredPageCount(long pageSizeInKb) {\n+        long codeCacheAddened = CODE_CACHE_SIZE_IN_KB >= pageSizeInKb ? CODE_CACHE_SIZE_IN_KB : 0;\n+        return (long) Math.ceil((double) (HEAP_SIZE_IN_KB + codeCacheAddened) \/ pageSizeInKb);\n@@ -82,9 +75,7 @@\n-    private static String sizeFromIndex(int index) {\n-        int k = 1024;\n-        int m = 1024 * 1024;\n-        int g = 1024 * 1024 * 1024;\n-        long sizeInBytes = 1L << index;\n-        if (sizeInBytes < m) {\n-           return Long.toString(sizeInBytes \/ k) + \"K\";\n-        } else if (sizeInBytes < g) {\n-           return Long.toString(sizeInBytes \/ m) + \"M\";\n+    public static String pageSizeToString(long pageSizeInKb) {\n+        int m = 1024;\n+        int g = 1024 * 1024;\n+        if (pageSizeInKb < m) {\n+            return Long.toString(pageSizeInKb) + \"K\";\n+        } else if (pageSizeInKb < g) {\n+            return Long.toString(pageSizeInKb \/ m) + \"M\";\n@@ -92,1 +83,1 @@\n-           return Long.toString(sizeInBytes \/ g) + \"G\";\n+            return Long.toString(pageSizeInKb \/ g) + \"G\";\n@@ -96,1 +87,1 @@\n-    private static boolean checkOutput(OutputAnalyzer out, String pageSize) throws Exception {\n+    private static boolean checkOutput(OutputAnalyzer out, String pageSize) {\n@@ -132,4 +123,1 @@\n-            int index = Long.numberOfTrailingZeros(Long.parseLong(pageSize) * 1024);\n-            largestPageSizeIndex = Math.max(index, largestPageSizeIndex);\n-            pageSizes[index] = true;\n-            pageCount[index] = availablePages;\n+            treeMap.put(Long.parseLong(pageSize), availablePages);\n@@ -138,3 +126,1 @@\n-        vmPageSizeIndex = Long.numberOfTrailingZeros(wb.getVMPageSize());\n-        pageSizes[vmPageSizeIndex] = true;\n-        pageCount[vmPageSizeIndex] = Integer.MAX_VALUE;\n+        treeMap.put(wb.getVMPageSize() \/ 1024L, Integer.MAX_VALUE);\n@@ -143,4 +129,1 @@\n-    public static void testCase(int index) throws Exception {\n-        String pageSize = sizeFromIndex(index);\n-        long heap_size_in_gb = HEAP_SIZE_IN_KB >> 20;\n-        long code_cache_size = CODE_CACHE_SIZE_IN_KB >> 10;\n+    public static void testCase(long pageSize) throws Exception {\n@@ -148,1 +131,1 @@\n-                                                                  \"-XX:ReservedCodeCacheSize=\" + code_cache_size + \"m\",\n+                                                                  \"-XX:ReservedCodeCacheSize=\" + CODE_CACHE_SIZE_IN_KB + \"k\",\n@@ -150,1 +133,1 @@\n-                                                                  \"-XX:LargePageSizeInBytes=\" + pageSize,\n+                                                                  \"-XX:LargePageSizeInBytes=\" + pageSizeToString(pageSize),\n@@ -153,2 +136,2 @@\n-                                                                  \"-Xmx\" + heap_size_in_gb + \"g\",\n-                                                                  \"-Xms\" + heap_size_in_gb + \"g\",\n+                                                                  \"-Xmx\" + HEAP_SIZE_IN_KB + \"k\",\n+                                                                  \"-Xms\" + HEAP_SIZE_IN_KB + \"k\",\n@@ -158,16 +141,16 @@\n-        for (int i = index; i >= vmPageSizeIndex; i--) {\n-            if (pageSizes[i]) {\n-                String size = sizeFromIndex(i);\n-                System.out.println(\"Checking allocation for \" + size);\n-                if (checkOutput(output, size)) {\n-                    System.out.println(\"TestCase Passed for pagesize: \" + pageSize + \", allocated pagesize: \" + size);\n-                    \/\/ Page allocation succeeded no need to check any more page sizes.\n-                    return;\n-                } else {\n-                    \/\/ Only consider this a test failure if there are enough configured\n-                    \/\/ pages to allow this reservation to succeeded.\n-                    if (requiredPageCount(i) <= pageCount[i]) {\n-                        throw new AssertionError(\"TestCase Failed for \" + size + \" page allocation. \" +\n-                                                 \"Required pages: \" + requiredPageCount(i) + \", \" +\n-                                                 \"Configured pages: \" + pageCount[i]);\n-                    }\n+        for (Map.Entry<Long, Integer> entry : treeMap.entrySet()) {\n+            long pageSizeInKb = entry.getKey();\n+            int pageCount = entry.getValue();\n+            String size = pageSizeToString(pageSizeInKb);\n+            System.out.println(\"Checking allocation for \" + size);\n+            if (checkOutput(output, size)) {\n+                System.out.println(\"TestCase Passed for pagesize: \" + pageSizeToString(pageSize) + \", allocated pagesize: \" + size);\n+                \/\/ Page allocation succeeded no need to check any more page sizes.\n+                return;\n+            } else {\n+                \/\/ Only consider this a test failure if there are enough configured\n+                \/\/ pages to allow this reservation to succeeded.\n+                if (requiredPageCount(pageSizeInKb) <= pageCount) {\n+                    throw new AssertionError(\"TestCase Failed for \" + size + \" page allocation. \" +\n+                                             \"Required pages: \" + requiredPageCount(pageSizeInKb) + \", \" +\n+                                             \"Configured pages: \" + pageCount);\n@@ -177,4 +160,0 @@\n-\n-        if (errorMessage != \"\") {\n-            throw new AssertionError(errorMessage);\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestExplicitPageAllocation.java","additions":43,"deletions":64,"binary":false,"changes":107,"status":"modified"}]}