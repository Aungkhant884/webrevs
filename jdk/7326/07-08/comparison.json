{"files":[{"patch":"@@ -34,5 +34,1 @@\n- * @run main\/othervm\n- *      -Xbootclasspath\/a:.\n- *      -XX:+UnlockDiagnosticVMOptions\n- *      -XX:+WhiteBoxAPI\n- *      runtime.os.TestExplicitPageAllocation\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI runtime.os.TestExplicitPageAllocation\n@@ -47,7 +43,1 @@\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.BufferedReader;\n-import java.io.InputStreamReader;\n+import java.io.*;\n@@ -55,1 +45,0 @@\n-import java.io.FileWriter;\n@@ -61,1 +50,1 @@\n-    private static final int HEAP_SIZE_IN_KB = 1 * 1024 * 1024;\n+    private static final long HEAP_SIZE_IN_KB = 1 * 1024 * 1024;\n@@ -67,3 +56,1 @@\n-    private static FileInputStream fis;\n-    private static DataInputStream dis;\n-    private static String errorMessage = null;\n+    private static String errorMessage = \"\";\n@@ -89,1 +76,0 @@\n-\n@@ -92,2 +78,2 @@\n-    private static int requiredPageCount(int index) {\n-        int pageSizeInKB = 1 << (index - 10);\n+    private static long requiredPageCount(int index) {\n+        long pageSizeInKB = 1L << (index - 10);\n@@ -101,1 +87,1 @@\n-        int sizeInBytes = 1 << index;\n+        long sizeInBytes = 1L << index;\n@@ -103,1 +89,1 @@\n-           return Integer.toString(sizeInBytes \/ k) + \"K\";\n+           return Long.toString(sizeInBytes \/ k) + \"K\";\n@@ -105,1 +91,1 @@\n-           return Integer.toString(sizeInBytes \/ m) + \"M\";\n+           return Long.toString(sizeInBytes \/ m) + \"M\";\n@@ -107,1 +93,1 @@\n-           return Integer.toString(sizeInBytes \/ g) + \"G\";\n+           return Long.toString(sizeInBytes \/ g) + \"G\";\n@@ -119,1 +105,1 @@\n-                if (pageSize.contains(tracePageSize)) {\n+                if (pageSize.equals(tracePageSize)) {\n@@ -127,7 +113,7 @@\n-    public static int checkAndReadFile(String filename, String pageSize) throws Exception {\n-        fis = new FileInputStream(filename);\n-        dis = new DataInputStream(fis);\n-        int pagecount = Integer.parseInt(dis.readLine());\n-        dis.close();\n-        fis.close();\n-        return pagecount;\n+    public static int readPageCount(String filename, String pageSize) throws Exception {\n+        BufferedReader d = new BufferedReader(new FileReader(filename));\n+        int pageCount = Integer.parseInt(d.readLine());\n+        if (pageCount == 0) {\n+            System.out.println(\"No pages configured for \" + pageSize + \"kB\");\n+        }\n+        return pageCount;\n@@ -145,5 +131,2 @@\n-            int availablePages = checkAndReadFile(DIR_HUGE_PAGES + pageSizeFileName + \"\/free_hugepages\", pageSize);\n-            if (availablePages == 0) {\n-                System.out.println(\"No Pages configured for \" + pageSize + \"kB\");\n-            }\n-            int index = Integer.numberOfTrailingZeros(Integer.parseInt(pageSize) * 1024);\n+            int availablePages = readPageCount(DIR_HUGE_PAGES + pageSizeFileName + \"\/free_hugepages\", pageSize);\n+            int index = Long.numberOfTrailingZeros(Long.parseLong(pageSize) * 1024);\n@@ -154,1 +137,1 @@\n-        vmPageSizeIndex = Integer.numberOfTrailingZeros(wb.getVMPageSize());\n+        vmPageSizeIndex = Long.numberOfTrailingZeros(wb.getVMPageSize());\n@@ -162,1 +145,1 @@\n-                                                                  \"-XX:LargePageSizeInBytes=\"+ pageSize,\n+                                                                  \"-XX:LargePageSizeInBytes=\" + pageSize,\n@@ -178,1 +161,1 @@\n-                    errorMessage += \"TestCase Failed for \" + size + \" page allocation\\n\";\n+                    errorMessage += \"TestCase Failed for \" + size + \" page allocation, \";\n@@ -186,1 +169,1 @@\n-        if (errorMessage != null) {\n+        if (errorMessage != \"\") {\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestExplicitPageAllocation.java","additions":24,"deletions":41,"binary":false,"changes":65,"status":"modified"}]}