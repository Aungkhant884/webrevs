{"files":[{"patch":"@@ -24,0 +24,2 @@\n+package runtime.os;\n+\n@@ -29,1 +31,0 @@\n- * @modules java.base\/jdk.internal.misc\n@@ -31,1 +32,7 @@\n- * @run driver runtime.os.TestExplicitPageAllocation\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n+ *      runtime.os.TestExplicitPageAllocation\n@@ -34,2 +41,0 @@\n-package runtime.os;\n-\n@@ -51,6 +56,1 @@\n-\n-class MyClass {\n-    public static void main(String args[]) {\n-    System.out.println(\"Inside MyClass\");\n-    }\n-}\n+import jdk.test.whitebox.WhiteBox;\n@@ -61,1 +61,1 @@\n-    private static final int HEAP_SIZE_IN_KB = 2097152;\n+    private static final int HEAP_SIZE_IN_KB = 1 * 1024 *1024;\n@@ -71,3 +71,3 @@\n-    private static final int SIZE=32;\n-    private static boolean[] pageSizes = new boolean[SIZE];\n-    private static int[] pageCount = new int[SIZE];\n+    private static final int MAX_NUMBER_OF_PAGESIZE=64;\n+    private static boolean[] pageSizes = new boolean[MAX_NUMBER_OF_PAGESIZE];\n+    private static int[] pageCount = new int[MAX_NUMBER_OF_PAGESIZE];\n@@ -75,0 +75,1 @@\n+    private static final WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -79,1 +80,1 @@\n-            for (int i = 31;i > vmPageSizeIndex;i--) {\n+            for (int i = MAX_NUMBER_OF_PAGESIZE-1;i > vmPageSizeIndex;i--) {\n@@ -129,1 +130,1 @@\n-        dis = new DataInputStream(fis);\n+        dis = new DataInputStream(fis)\n@@ -144,16 +145,4 @@\n-\n-            if (pageSize != null) {\n-                int freePageCount = checkAndReadFile(DIR_HUGE_PAGES+pageSizeFileName+\"\/free_hugepages\", pageSize);\n-                int resvPageCount = checkAndReadFile(DIR_HUGE_PAGES+pageSizeFileName+\"\/resv_hugepages\", pageSize);\n-\n-                int availablePages = freePageCount - resvPageCount;\n-                if (availablePages >= 0) {\n-                    System.out.println(\"Number of available \"+pageSize+\"kB pages = \"+availablePages);\n-                } else {\n-                    System.out.println(\"System does not support\"+pageSize+\"kB pages\");\n-                    continue;\n-                }\n-\n-                int index = Integer.numberOfTrailingZeros(Integer.parseInt(pageSize)*1024);\n-                pageSizes[index] = true;\n-                pageCount[index] = availablePages;\n+            assert pageSize != null;\n+            int availablePages = checkAndReadFile(DIR_HUGE_PAGES+pageSizeFileName+\"\/free_hugepages\", pageSize);\n+            if (availablePages == 0) {\n+                System.out.println(\"No Pages configured for \"+pageSize+\"kB\");\n@@ -161,0 +150,3 @@\n+            int index = Integer.numberOfTrailingZeros(Integer.parseInt(pageSize)*1024);\n+            pageSizes[index] = true;\n+            pageCount[index] = availablePages;\n@@ -163,8 +155,1 @@\n-        ProcessBuilder processBuilder = new ProcessBuilder();\n-        processBuilder.command(\"getconf\", \"PAGE_SIZE\");\n-        Process process = processBuilder.start();\n-        StringBuilder output = new StringBuilder();\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n-        String vmPageSize = reader.readLine();\n-\n-        vmPageSizeIndex = Integer.numberOfTrailingZeros(Integer.parseInt(vmPageSize));\n+        vmPageSizeIndex = Integer.numberOfTrailingZeros(wb.getVMPageSize());\n@@ -183,1 +168,1 @@\n-                                                                  MyClass.class.getName());\n+                                                                  \"-version\");\n@@ -186,1 +171,0 @@\n-\n@@ -201,0 +185,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestExplicitPageAllocation.java","additions":27,"deletions":42,"binary":false,"changes":69,"status":"modified"}]}