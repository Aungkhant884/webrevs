{"files":[{"patch":"@@ -50,2 +50,2 @@\n-    private static final long HEAP_SIZE_IN_KB = 1 * 1024 * 1024;\n-\n+    private static final long HEAP_SIZE_IN_KB = 2 * 1024 * 1024;\n+    private static final long CODE_CACHE_SIZE_IN_KB = 256 * 1024;\n@@ -61,0 +61,1 @@\n+    private static int largestPageSizeIndex;\n@@ -67,5 +68,2 @@\n-            for (int i = MAX_NUMBER_OF_PAGESIZE - 1; i > vmPageSizeIndex; i--) {\n-                if (pageSizes[i]) {\n-                    testCase(i);\n-                    break;\n-                }\n+            if (largestPageSizeIndex > vmPageSizeIndex) {\n+                testCase(largestPageSizeIndex);\n@@ -80,1 +78,2 @@\n-        return (long) Math.ceil((double) HEAP_SIZE_IN_KB \/ pageSizeInKB);\n+        long codeCacheAddened = CODE_CACHE_SIZE_IN_KB >= pageSizeInKB ? CODE_CACHE_SIZE_IN_KB : 0;\n+        return (long) Math.ceil((double) (HEAP_SIZE_IN_KB + codeCacheAddened) \/ pageSizeInKB);\n@@ -88,1 +87,1 @@\n-        if (sizeInBytes < m)\n+        if (sizeInBytes < m) {\n@@ -90,1 +89,1 @@\n-        if (sizeInBytes < g)\n+        } else if (sizeInBytes < g) {\n@@ -92,1 +91,1 @@\n-        else\n+        } else {\n@@ -94,0 +93,1 @@\n+        }\n@@ -133,0 +133,1 @@\n+            largestPageSizeIndex = Math.max(index, largestPageSizeIndex);\n@@ -144,0 +145,2 @@\n+        long heap_size_in_gb = HEAP_SIZE_IN_KB >> 20;\n+        long code_cache_size = CODE_CACHE_SIZE_IN_KB >> 10;\n@@ -145,0 +148,2 @@\n+                                                                  \"-XX:ReservedCodeCacheSize=\" + code_cache_size + \"m\",\n+                                                                  \"-XX:InitialCodeCacheSize=160k\",\n@@ -148,2 +153,2 @@\n-                                                                  \"-Xmx2g\",\n-                                                                  \"-Xms1g\",\n+                                                                  \"-Xmx\" + heap_size_in_gb + \"g\",\n+                                                                  \"-Xms\" + heap_size_in_gb + \"g\",\n@@ -157,6 +162,1 @@\n-                if (!checkOutput(output, size)) {\n-                    if (requiredPageCount(i) > pageCount[i]) {\n-                       continue;\n-                    }\n-                    errorMessage += \"TestCase Failed for \" + size + \" page allocation, \";\n-                } else {\n+                if (checkOutput(output, size)) {\n@@ -164,0 +164,10 @@\n+                    \/\/ Page allocation succeeded no need to check any more page sizes.\n+                    return;\n+                } else {\n+                    \/\/ Only consider this a test failure if there are enough configured\n+                    \/\/ pages to allow this reservation to succeeded.\n+                    if (requiredPageCount(i) <= pageCount[i]) {\n+                        throw new AssertionError(\"TestCase Failed for \" + size + \" page allocation. \" +\n+                                                 \"Required pages: \" + requiredPageCount(i) + \", \" +\n+                                                 \"Configured pages: \" + pageCount[i]);\n+                    }\n@@ -165,1 +175,0 @@\n-                break;\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestExplicitPageAllocation.java","additions":29,"deletions":20,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-\/\/\n+\n@@ -32,0 +32,2 @@\n+@Fork(jvmArgsAppend = {\"-Xmx256m\", \"-XX:+UseLargePages\", \"-XX:LargePageSizeInBytes=1g\", \"-Xlog:pagesize\"}, value = 5)\n+\n@@ -34,1 +36,1 @@\n-    @Param({\"1073741824\"})\n+    @Param({\"2097152\"})\n@@ -40,2 +42,0 @@\n-    public static final int ITERS = 100;\n-\n@@ -49,1 +49,0 @@\n-\n@@ -57,6 +56,4 @@\n-        for (int i = 0; i < ITERS ; i++) {\n-            for (int j = 0; j < NUM; j += 1) {\n-                for (int k = 0; k < ARRAYSIZE; k += 512) {\n-                    OUT[j][k] = INP[j][k];\n-                }\n-            }\n+        for (int i = 0; i < NUM; i += 1) {\n+             for (int j = 0; j < ARRAYSIZE; j += 512) {\n+                 OUT[i][j] = INP[i][j];\n+             }\n@@ -64,1 +61,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/gc\/MicroLargePages.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"}]}