{"files":[{"patch":"@@ -116,78 +116,0 @@\n-    \/**\n-     * logical function ch(x,y,z) as defined in spec:\n-     * @return (x and y) xor ((complement x) and z)\n-     * @param x int\n-     * @param y int\n-     * @param z int\n-     *\/\n-    private static int lf_ch(int x, int y, int z) {\n-        return (x & y) ^ ((~x) & z);\n-    }\n-\n-    \/**\n-     * logical function maj(x,y,z) as defined in spec:\n-     * @return (x and y) xor (x and z) xor (y and z)\n-     * @param x int\n-     * @param y int\n-     * @param z int\n-     *\/\n-    private static int lf_maj(int x, int y, int z) {\n-        return (x & y) ^ (x & z) ^ (y & z);\n-    }\n-\n-    \/**\n-     * logical function R(x,s) - right shift\n-     * @return x right shift for s times\n-     * @param x int\n-     * @param s int\n-     *\/\n-    private static int lf_R( int x, int s ) {\n-        return (x >>> s);\n-    }\n-\n-    \/**\n-     * logical function S(x,s) - right rotation\n-     * @return x circular right shift for s times\n-     * @param x int\n-     * @param s int\n-     *\/\n-    private static int lf_S(int x, int s) {\n-        return (x >>> s) | (x << (32 - s));\n-    }\n-\n-    \/**\n-     * logical function sigma0(x) - xor of results of right rotations\n-     * @return S(x,2) xor S(x,13) xor S(x,22)\n-     * @param x int\n-     *\/\n-    private static int lf_sigma0(int x) {\n-        return lf_S(x, 2) ^ lf_S(x, 13) ^ lf_S(x, 22);\n-    }\n-\n-    \/**\n-     * logical function sigma1(x) - xor of results of right rotations\n-     * @return S(x,6) xor S(x,11) xor S(x,25)\n-     * @param x int\n-     *\/\n-    private static int lf_sigma1(int x) {\n-        return lf_S( x, 6 ) ^ lf_S( x, 11 ) ^ lf_S( x, 25 );\n-    }\n-\n-    \/**\n-     * logical function delta0(x) - xor of results of right shifts\/rotations\n-     * @return int\n-     * @param x int\n-     *\/\n-    private static int lf_delta0(int x) {\n-        return lf_S(x, 7) ^ lf_S(x, 18) ^ lf_R(x, 3);\n-    }\n-\n-    \/**\n-     * logical function delta1(x) - xor of results of right shifts\/rotations\n-     * @return int\n-     * @param x int\n-     *\/\n-    private static int lf_delta1(int x) {\n-        return lf_S(x, 17) ^ lf_S(x, 19) ^ lf_R(x, 10);\n-    }\n-\n@@ -222,2 +144,21 @@\n-            W[t] = lf_delta1(W[t-2]) + W[t-7] + lf_delta0(W[t-15])\n-                   + W[t-16];\n+            int W_t2 = W[t - 2];\n+            int W_t15 = W[t - 15];\n+\n+            \/\/ S(x,s) is right rotation of x by s positions:\n+            \/\/   S(x,s) = (x >>> s) | (x << (32 - s))\n+            \/\/ R(x,s) is right shift of x by s positions:\n+            \/\/   R(x,s) = (x >>> s)\n+\n+            \/\/ delta0(x) = S(x, 7) ^ S(x, 18) ^ R(x, 3)\n+            int delta0_W_t15 =\n+                    ((W_t15 >>>  7) | (W_t15 << 25)) ^\n+                    ((W_t15 >>> 18) | (W_t15 << 14)) ^\n+                     (W_t15 >>>  3);\n+\n+            \/\/ delta1(x) = S(x, 17) ^ S(x, 19) ^ R(x, 10)\n+            int delta1_W_t2 =\n+                    ((W_t2 >>> 17) | (W_t2 << 15)) ^\n+                    ((W_t2 >>> 19) | (W_t2 << 13)) ^\n+                     (W_t2 >>> 10);\n+\n+            W[t] = delta0_W_t15 + delta1_W_t2 + W[t-7] + W[t-16];\n@@ -236,2 +177,23 @@\n-            int T1 = h + lf_sigma1(e) + lf_ch(e,f,g) + ROUND_CONSTS[i] + W[i];\n-            int T2 = lf_sigma0(a) + lf_maj(a,b,c);\n+            \/\/ S(x,s) is right rotation of x by s positions:\n+            \/\/   S(x,s) = (x >>> s) | (x << (32 - s))\n+\n+            \/\/ sigma0(x) = S(x,2) xor S(x,13) xor S(x,22)\n+            int sigma0_a =\n+                    ((a >>>  2) | (a << 30)) ^\n+                    ((a >>> 13) | (a << 19)) ^\n+                    ((a >>> 22) | (a << 10));\n+\n+            \/\/ sigma1(x) = S(x,6) xor S(x,11) xor S(x,25)\n+            int sigma1_e =\n+                    ((e >>>  6) | (e << 26)) ^\n+                    ((e >>> 11) | (e << 21)) ^\n+                    ((e >>> 25) | (e <<  7));\n+\n+            \/\/ ch(x,y,z) = (x and y) xor ((complement x) and z)\n+            int ch_efg = (e & f) ^ ((~e) & g);\n+\n+            \/\/ maj(x,y,z) = (x and y) xor (x and z) xor (y and z)\n+            int maj_abc = (a & b) ^ (a & c) ^ (b & c);\n+\n+            int T1 = h + sigma1_e + ch_efg + ROUND_CONSTS[i] + W[i];\n+            int T2 = sigma0_a + maj_abc;\n@@ -247,0 +209,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA2.java","additions":45,"deletions":82,"binary":false,"changes":127,"status":"modified"}]}