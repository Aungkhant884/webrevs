{"files":[{"patch":"@@ -660,5 +660,0 @@\n-  \/\/ This detects arithmetic wraparound on _used.  Non-generational mode does not keep track of _affiliated_region_count\n-  \/\/ TODO: REMOVE IS_GLOBAL() QUALIFIER AFTER WE FIX GLOBAL AFFILIATED REGION ACCOUNTING\n-  assert(is_global() || ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n-         (_used + _humongous_waste <= _affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n-         \"used cannot exceed regions\");\n@@ -686,6 +681,0 @@\n-\n-  \/\/ Non-generational mode does not maintain affiliated region counts\n-  \/\/ TODO: REMOVE IS_GLOBAL() QUALIFIER AFTER WE FIX GLOBAL AFFILIATED REGION ACCOUNTING\n-  assert(is_global() || ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n-         (_affiliated_region_count * ShenandoahHeapRegion::region_size_bytes() >= _used),\n-         \"Affiliated regions must hold more than what is currently used\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -160,7 +160,0 @@\n-#ifdef ASSERT\n-  size_t live_bytes = new_live_data * HeapWordSize;\n-  size_t used_bytes = used();\n-  assert(live_bytes <= used_bytes,\n-         \"%s Region \" SIZE_FORMAT \" can't have more live data than used: \" SIZE_FORMAT \", \" SIZE_FORMAT \" after adding \" SIZE_FORMAT,\n-         affiliation_name(), index(), live_bytes, used_bytes, s * HeapWordSize);\n-#endif\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}