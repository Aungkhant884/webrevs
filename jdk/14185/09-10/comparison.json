{"files":[{"patch":"@@ -48,0 +48,1 @@\n+\n@@ -63,1 +64,1 @@\n-    private static void allocate(String size) throws Exception {\n+    private static void allocate(String size, int multiplier) throws Exception {\n@@ -66,1 +67,1 @@\n-                work(1024 * 1024, 16);\n+                work(1024 * 1024, 16 * multiplier);\n@@ -69,1 +70,1 @@\n-                work(16 * 1024 * 1024, 1);\n+                work(16 * 1024 * 1024, multiplier);\n@@ -72,1 +73,1 @@\n-                work(1, 16 * 1024 * 1024);\n+                work(1, 16 * 1024 * 1024 * multiplier);\n@@ -80,2 +81,2 @@\n-        if (args.length > 1) {\n-            \/\/ Called from test, size is second argument\n+        if (args.length > 2) {\n+            \/\/ Called from test, size is second argument, heap requested is third\n@@ -83,1 +84,14 @@\n-            allocate(size);\n+            long spec_heap = Integer.parseInt(args[2]);\n+\n+            \/\/ The actual heap we get may be larger than the one we asked for\n+            \/\/ (particularly in the generational case)\n+            final long actual_heap = Runtime.getRuntime().maxMemory();\n+            int multiplier = 1;\n+            if (actual_heap > spec_heap) {\n+                \/\/ A suitable multiplier is used, so as to allocate an\n+                \/\/ amount appropriate to the larger actual heap size than what\n+                \/\/ was specified.\n+                multiplier = (int)((actual_heap + spec_heap - 1)\/spec_heap);\n+            }\n+\n+            allocate(size, multiplier);\n@@ -90,0 +104,1 @@\n+            int heap = 16*1024*1024;      \/\/ -Xmx16m\n@@ -94,1 +109,1 @@\n-                          \"test\", size);\n+                          \"test\", size, Integer.toString(heap));\n@@ -100,1 +115,1 @@\n-                          \"test\", size);\n+                          \"test\", size, Integer.toString(heap));\n@@ -104,0 +119,1 @@\n+            int heap = 1*1024*1024*1024;  \/\/ -Xmx1g\n@@ -108,1 +124,1 @@\n-                          \"test\", size);\n+                          \"test\", size, Integer.toString(heap));\n@@ -114,1 +130,1 @@\n-                          \"test\", size);\n+                          \"test\", size, Integer.toString(heap));\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/oom\/TestAllocOutOfMemory.java","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"}]}