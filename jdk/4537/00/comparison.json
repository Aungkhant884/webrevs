{"files":[{"patch":"@@ -49,0 +49,4 @@\n+    char* s = msg.message();\n+    if (s != nullptr) {\n+      os::free(s);\n+    }\n@@ -158,0 +162,5 @@\n+void AsyncLogWriter::remove(LogOutput* output) {\n+  AsyncLogLocker locker;\n+  _stats.remove(static_cast<LogFileOutput* >(output));\n+}\n+\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -173,0 +173,1 @@\n+  void remove(LogOutput* output);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -208,0 +208,6 @@\n+\n+  AsyncLogWriter* asynclog = AsyncLogWriter::instance();\n+  if (asynclog!= nullptr) {\n+    asynclog->remove(output);\n+  }\n+\n","filename":"src\/hotspot\/share\/logging\/logConfiguration.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -281,0 +281,1 @@\n+template class BasicHashtable<mtTest>;\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -314,0 +314,25 @@\n+  bool remove(K key) {\n+    unsigned int hash = HASH(key);\n+    int index = BasicHashtable<F>::hash_to_index(hash);\n+    BasicHashtableEntry<F>* p = NULL;\n+    KVHashtableEntry* e = bucket(index);\n+\n+    for (; e != NULL; p = e, e = e->next()) {\n+      if (e->hash() == hash && EQUALS(e->_key, key)) {\n+        break;\n+      }\n+    }\n+\n+    if (e != NULL) {\n+      if (p == NULL) {\n+        *(bucket_addr(index)) = e->next();\n+      } else {\n+        *(p->next_addr()) = e->next();\n+      }\n+      free_entry(e);\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n@@ -318,1 +343,1 @@\n-  \/\/ ITER contains bool do_entry(K, V const&), which will be\n+  \/\/ ITER contains bool do_entry(K, V*), which will be\n","filename":"src\/hotspot\/share\/utilities\/hashtable.hpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"unittest.hpp\"\n+#include \"utilities\/hashtable.hpp\"\n+\n+\/\/ Count how many keys in KVHashtable\n+template <class K, class V>\n+class CountIterator {\n+  int _sz = {0};\n+\n+ public:\n+  bool do_entry(K key, V* val) {\n+    _sz++;\n+    return true;\n+  }\n+\n+  int size() const {\n+    return _sz;\n+  }\n+};\n+\n+TEST_VM(Hashtable, kvhashtable_remove) {\n+  KVHashtable<int, int, mtTest> map(137\/*table_size*\/);\n+  typedef CountIterator<int, int> Iter;\n+  const int SZ = 1000;\n+\n+  for (int i = 0; i < SZ; ++i) {\n+    int* v = map.add(i, i);\n+    EXPECT_EQ(i, *v);\n+  }\n+\n+  for (int i = 0; i < SZ; ++i) {\n+    EXPECT_TRUE(map.remove(i));\n+    EXPECT_FALSE(map.remove(i));\n+    EXPECT_EQ(NULL, map.lookup(i));\n+\n+    Iter it;\n+    map.iterate(&it);\n+    EXPECT_EQ(SZ - (i + 1), it.size());\n+  }\n+\n+  for (int i = 0; i < SZ; ++i) {\n+    int* v = map.add(i, i);\n+    EXPECT_EQ(i, *v);\n+  }\n+  \/\/ 2nd round: reverse order\n+  for (int i = SZ - 1; i >= 0; --i) {\n+    EXPECT_TRUE(map.remove(i));\n+    EXPECT_FALSE(map.remove(i));\n+    EXPECT_EQ(NULL, map.lookup(i));\n+\n+    Iter it;\n+    map.iterate(&it);\n+    EXPECT_EQ(i, it.size());\n+  }\n+\n+  for (int i = 0; i < SZ; ++i) {\n+    int* v = map.add(i, i);\n+    EXPECT_EQ(i, *v);\n+  }\n+\n+  \/\/ 3rd round: start in middle\n+  int Mid = SZ \/ 2;\n+  for (int i = 0; i < SZ; ++i) {\n+    int j = i + Mid;\n+    if (j >= SZ) {\n+      j -= SZ;\n+    }\n+    \/\/fprintf(stderr, \"executing: %d %d \\n\", i, j);\n+    ASSERT_TRUE(map.remove(j));\n+    ASSERT_FALSE(map.remove(j));\n+    EXPECT_EQ(NULL, map.lookup(j));\n+\n+    Iter it;\n+    map.iterate(&it);\n+    EXPECT_EQ(SZ - (i + 1), it.size());\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_hashtable.cpp","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}