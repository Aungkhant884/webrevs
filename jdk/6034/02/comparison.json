{"files":[{"patch":"@@ -100,1 +100,1 @@\n-  void add(G1SegmentedArrayBuffer<flag>& elem) { _list.prepend(elem); }\n+  void add(G1SegmentedArrayBuffer<flag>& elem);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,7 @@\n+template<MEMFLAGS flag>\n+void G1SegmentedArrayBufferList<flag>::add(G1SegmentedArrayBuffer<flag>& elem) {\n+  _list.prepend(elem);\n+  Atomic::inc(&_num_buffers, memory_order_relaxed);\n+  Atomic::add(&_mem_size, elem.elem_size(), memory_order_relaxed);\n+}\n+\n@@ -80,1 +87,1 @@\n-    Atomic::dec(&_num_buffers, memory_order_relaxed);\n+    Atomic::sub(&_num_buffers, (size_t)1,memory_order_relaxed);\n@@ -135,0 +142,3 @@\n+    next->set_next(nullptr);\n+    \/\/ reuse the newly allocated or poped buffer by adding it into free buffer list.\n+    _free_buffer_list->add(*next);\n@@ -136,1 +146,0 @@\n-    delete next;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}