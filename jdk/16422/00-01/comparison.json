{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2023 Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.NoSuchElementException;\n+\n+\/*\n+ * @test\n+ * @bug 8319120\n+ * @enablePreview\n+ * @run main\/othervm -Xmx10m UnboundValueAfterOOME\n+ *\/\n+public class UnboundValueAfterOOME {\n+\n+    static final Thread doRun = new Thread() {\n+        public void run() {\n+            try {\n+                try {\n+                    \/\/ Provoke the VM to throw an OutOfMemoryError\n+                    java.util.Arrays.fill(new int[Integer.MAX_VALUE][], new int[Integer.MAX_VALUE]);\n+                } catch (OutOfMemoryError e) {\n+                    \/\/ Try to get() an unbound ScopedValue\n+                    ScopedValue.newInstance().get();\n+                }\n+            } catch (NoSuchElementException e) {\n+                System.out.println(\"OK\");\n+                return;\n+            }\n+            throw new RuntimeException(\"Expected NoSuchElementException\");\n+        }\n+    };\n+\n+    public static void main(String [] args) throws Exception {\n+        doRun.run();   \/\/ Run on this Thread\n+        var job = new Thread(doRun);\n+        job.start();   \/\/ Run on a new Thread\n+        job.join();\n+        doRun.start(); \/\/ Run on the Thread doRun\n+        doRun.join();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/UnboundValueAfterOOME.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -1,36 +0,0 @@\n-import java.util.NoSuchElementException;\n-\n-\/*\n- * @test\n- * @enablePreview\n- * @run main\/othervm -Xmx10m UnboundValueTest\n- *\/\n-public class UnboundValueTest {\n-\n-    static final Thread doRun = new Thread() {\n-        public void run() {\n-            try {\n-                try {\n-                    \/\/ Provoke the VM to throw an OutOfMemoryError\n-                    java.util.Arrays.fill(new int[Integer.MAX_VALUE][], new int[Integer.MAX_VALUE]);\n-                } catch (OutOfMemoryError e) {\n-                    \/\/ Try to get() an unbound ScopedValue\n-                    ScopedValue.newInstance().get();\n-                }\n-            } catch (NoSuchElementException e) {\n-                System.out.println(\"OK\");\n-                return;\n-            }\n-            throw new RuntimeException(\"Expected NoSuchElementException\");\n-        }\n-    };\n-\n-    public static void main(String [] args) throws Exception {\n-        doRun.run();   \/\/ Run on this Thread\n-        var job = new Thread(doRun);\n-        job.start();   \/\/ Run on a new Thread\n-        job.join();\n-        doRun.start(); \/\/ Run on the Thread doRun\n-        doRun.join();\n-    }\n-}\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/UnboundValueTest.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"}]}