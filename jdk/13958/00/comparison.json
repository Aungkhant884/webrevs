{"files":[{"patch":"@@ -95,1 +95,6 @@\n-        decode(new ByteArrayInputStream(input));\n+        try {\n+            decode(new DerValue(input));\n+        } catch (IOException e) {\n+            throw new InvalidKeyException(\"IOException: \" +\n+                    e.getMessage());\n+        }\n@@ -98,2 +103,1 @@\n-    private void decode(InputStream is) throws InvalidKeyException {\n-        DerValue val = null;\n+    private void decode(DerValue val) throws InvalidKeyException {\n@@ -101,1 +105,0 @@\n-            val = new DerValue(is);\n@@ -244,1 +247,1 @@\n-            decode(stream);\n+            decode(new DerValue(stream));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -337,2 +337,1 @@\n-     * Initialize an X509Key object from an input stream.  The data on that\n-     * input stream must be encoded using DER, obeying the X.509\n+     * Initialize an X509Key object from a DerValue, obeying the X.509\n@@ -353,2 +352,1 @@\n-     * @param in an input stream with a DER-encoded X.509\n-     *          SubjectPublicKeyInfo value\n+     * @param val a DER-encoded X.509 SubjectPublicKeyInfo value\n@@ -357,5 +355,1 @@\n-    public void decode(InputStream in)\n-    throws InvalidKeyException\n-    {\n-        DerValue        val;\n-\n+    void decode(DerValue val) throws InvalidKeyException {\n@@ -363,1 +357,0 @@\n-            val = new DerValue(in);\n@@ -380,1 +373,6 @@\n-        decode(new ByteArrayInputStream(encodedKey));\n+        try {\n+            decode(new DerValue(encodedKey));\n+        } catch (IOException e) {\n+            throw new InvalidKeyException(\"IOException: \" +\n+                    e.getMessage());\n+        }\n@@ -399,1 +397,1 @@\n-            decode(stream);\n+            decode(new DerValue(stream));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509Key.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308010\n+ * @summary X509Key and PKCS8Key allows garbage bytes at the end\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+public class LongPKCS8orX509KeySpec {\n+\n+    public static void main(String[] argv) throws Exception {\n+        var g = KeyPairGenerator.getInstance(\"EC\");\n+        var f = KeyFactory.getInstance(\"EC\");\n+        Utils.runAndCheckException(() -> f.generatePublic(new X509EncodedKeySpec(\n+                Arrays.copyOf(g.generateKeyPair().getPublic().getEncoded(), 1000))),\n+                InvalidKeySpecException.class);\n+        Utils.runAndCheckException(() -> f.generatePrivate(new PKCS8EncodedKeySpec(\n+                Arrays.copyOf(g.generateKeyPair().getPrivate().getEncoded(), 1000))),\n+                InvalidKeySpecException.class);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs\/pkcs8\/LongPKCS8orX509KeySpec.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}