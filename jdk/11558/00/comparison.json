{"files":[{"patch":"@@ -589,2 +589,0 @@\n-javax\/net\/ssl\/DTLS\/CipherSuite.java                             8202059 macosx-x64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.io.IOException;\n@@ -53,2 +54,0 @@\n-    private static final int MAX_HANDSHAKE_LOOPS = 200;\n-    private static final int MAX_APP_READ_LOOPS = 60;\n@@ -78,2 +77,4 @@\n-    private static Exception clientException = null;\n-    private static Exception serverException = null;\n+    private volatile Exception clientException = null;\n+    private volatile Exception serverException = null;\n+\n+    private final CountDownLatch serverStarted = new CountDownLatch(1);\n@@ -151,1 +152,1 @@\n-        int loops = MAX_HANDSHAKE_LOOPS;\n+        int loops = 0;\n@@ -156,5 +157,0 @@\n-            if (--loops < 0) {\n-                throw new RuntimeException(\n-                        \"Too many loops to produce handshake packets\");\n-            }\n-\n@@ -162,1 +158,1 @@\n-            log(side, \"=======handshake(\" + loops + \", \" + hs + \")=======\");\n+            log(side, \"=======handshake(\" + ++loops + \", \" + hs + \")=======\");\n@@ -316,1 +312,0 @@\n-        int loops = MAX_APP_READ_LOOPS;\n@@ -318,5 +313,0 @@\n-            if (--loops < 0) {\n-                throw new RuntimeException(\n-                        \"Too much loops to receive application data\");\n-            }\n-\n@@ -324,2 +314,2 @@\n-            DatagramPacket packet = new DatagramPacket(buf, buf.length);\n-            socket.receive(packet);\n+            DatagramPacket packet = readFromSocket(socket, buf);\n+\n@@ -341,0 +331,18 @@\n+    \/*\n+    Some tests failed with receive time-out errors when the client tried to read\n+    from the server. The server thread had exitted normally so the read _should_\n+    succeed. So let's try to read a couple times before giving up.\n+     *\/\n+    DatagramPacket readFromSocket(DatagramSocket socket, byte[] buffer) throws IOException {\n+        for (int i = 1 ; i <= 2 ; ++i) {\n+            try {\n+                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n+                socket.receive(packet);\n+                return packet;\n+            } catch (SocketTimeoutException exc) {\n+                System.out.println(\"Attempt \" + i + \": Timeout occurred reading from socket.\");\n+            }\n+        }\n+        throw new IOException(\"Did not receive data after 2 attempts.\");\n+    }\n+\n@@ -346,1 +354,1 @@\n-        int loops = MAX_HANDSHAKE_LOOPS \/ 2;\n+        int loops = 0;\n@@ -350,5 +358,0 @@\n-            if (--loops < 0) {\n-                throw new RuntimeException(\n-                        \"Too many loops to produce handshake packets\");\n-            }\n-\n@@ -363,1 +366,1 @@\n-                    loops + \", \" + rs + \", \" + hs + \")----\");\n+                    ++loops + \", \" + rs + \", \" + hs + \")----\");\n@@ -544,2 +547,2 @@\n-            ExecutorService pool = Executors.newFixedThreadPool(2);\n-            Future<String> server, client;\n+            ExecutorService pool = Executors.newFixedThreadPool(1);\n+            Future<String> server;\n@@ -547,2 +550,1 @@\n-            try {\n-                server = pool.submit(new ServerCallable(\n+            server = pool.submit(() -> runServer(\n@@ -550,5 +552,1 @@\n-                client = pool.submit(new ClientCallable(\n-                        testCase, clientSocket, serverSocketAddr));\n-            } finally {\n-                pool.shutdown();\n-            }\n+            pool.shutdown();\n@@ -557,2 +555,0 @@\n-\n-            \/\/ wait for client to finish\n@@ -560,3 +556,3 @@\n-                System.out.println(\"Client finished: \" + client.get());\n-            } catch (CancellationException | InterruptedException\n-                        | ExecutionException e) {\n+                String msg = runClient(testCase, clientSocket, serverSocketAddr);\n+                System.out.println(\"Client finished: \"+msg);\n+            } catch (Exception exc) {\n@@ -564,1 +560,1 @@\n-                e.printStackTrace(System.out);\n+                exc.printStackTrace(System.out);\n@@ -570,1 +566,1 @@\n-                System.out.println(\"Client finished: \" + server.get());\n+                System.out.println(\"Server finished: \" + server.get());\n@@ -584,18 +580,9 @@\n-    record ServerCallable(DTLSOverDatagram testCase, DatagramSocket socket,\n-                          InetSocketAddress clientSocketAddr) implements Callable<String> {\n-\n-        @Override\n-        public String call() throws Exception {\n-            try {\n-                testCase.doServerSide(socket, clientSocketAddr);\n-            } catch (Exception e) {\n-                System.out.println(\"Exception in  ServerCallable.call():\");\n-                e.printStackTrace(System.out);\n-                serverException = e;\n-\n-                if (testCase.isGoodJob()) {\n-                    throw e;\n-                } else {\n-                    return \"Well done, server!\";\n-                }\n-            }\n+    String runServer(DTLSOverDatagram testCase, DatagramSocket socket,\n+                          InetSocketAddress clientSocketAddr) throws Exception {\n+        try {\n+            serverStarted.countDown();\n+            testCase.doServerSide(socket, clientSocketAddr);\n+        } catch (Exception e) {\n+            System.out.println(\"Exception in  ServerCallable.call():\");\n+            e.printStackTrace(System.out);\n+            serverException = e;\n@@ -604,1 +591,1 @@\n-                return \"Well done, server!\";\n+                throw e;\n@@ -606,1 +593,1 @@\n-                throw new Exception(\"No expected exception\");\n+                return \"Well done, server!\";\n@@ -609,1 +596,0 @@\n-    }\n@@ -611,2 +597,6 @@\n-    record ClientCallable(DTLSOverDatagram testCase, DatagramSocket socket,\n-                          InetSocketAddress serverSocketAddr) implements Callable<String> {\n+        if (testCase.isGoodJob()) {\n+            return \"Well done, server!\";\n+        } else {\n+            throw new Exception(\"No expected exception\");\n+        }\n+    }\n@@ -614,3 +604,6 @@\n-        @Override\n-        public String call() throws Exception {\n-            try {\n+    private String runClient(DTLSOverDatagram testCase, DatagramSocket socket, InetSocketAddress serverSocketAddr)\n+    throws Exception {\n+        try {\n+            if(!serverStarted.await(5, TimeUnit.SECONDS)) {\n+                throw new Exception(\"Server did not start within 5 seconds.\");\n+            } else {\n@@ -618,10 +611,0 @@\n-            } catch (Exception e) {\n-                System.out.println(\"Exception in ClientCallable.call():\");\n-                e.printStackTrace(System.out);\n-                clientException = e;\n-\n-                if (testCase.isGoodJob()) {\n-                    throw e;\n-                } else {\n-                    return \"Well done, client!\";\n-                }\n@@ -629,0 +612,4 @@\n+        } catch (Exception e) {\n+            System.out.println(\"Exception in ClientCallable.call():\");\n+            e.printStackTrace(System.out);\n+            clientException = e;\n@@ -631,1 +618,1 @@\n-                return \"Well done, client!\";\n+                throw e;\n@@ -633,1 +620,1 @@\n-                throw new Exception(\"No expected exception\");\n+                return \"Well done, client!\";\n@@ -636,0 +623,6 @@\n+\n+        if (testCase.isGoodJob()) {\n+            return \"Well done, client!\";\n+        } else {\n+            throw new Exception(\"No expected exception\");\n+        }\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSOverDatagram.java","additions":73,"deletions":80,"binary":false,"changes":153,"status":"modified"}]}