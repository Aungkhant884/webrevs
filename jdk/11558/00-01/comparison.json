{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -77,2 +78,1 @@\n-    private volatile Exception clientException = null;\n-    private volatile Exception serverException = null;\n+    private final AtomicBoolean exceptionOccurred = new AtomicBoolean(false);\n@@ -154,2 +154,1 @@\n-        while (!endLoops &&\n-                (serverException == null) && (clientException == null)) {\n+        while (!endLoops && !exceptionOccurred.get()) {\n@@ -312,1 +311,1 @@\n-        while ((serverException == null) && (clientException == null)) {\n+        while (!exceptionOccurred.get()) {\n@@ -355,2 +354,1 @@\n-        while (!endLoops &&\n-                (serverException == null) && (clientException == null)) {\n+        while (!endLoops && !exceptionOccurred.get()) {\n@@ -407,1 +405,1 @@\n-    DatagramPacket createHandshakePacket(byte[] ba, SocketAddress socketAddr) {\n+    DatagramPacket createHandshakePacket(byte[] ba, SocketAddress socketAddr){\n@@ -524,4 +522,0 @@\n-    \/\/ Will the handshaking and application data exchange succeed?\n-    public boolean isGoodJob() {\n-        return true;\n-    }\n@@ -548,1 +542,1 @@\n-            Future<String> server;\n+            Future<Void> server;\n@@ -554,23 +548,2 @@\n-            boolean failed = false;\n-            try {\n-                String msg = runClient(testCase, clientSocket, serverSocketAddr);\n-                System.out.println(\"Client finished: \"+msg);\n-            } catch (Exception exc) {\n-                System.out.println(\"Exception on client side: \");\n-                exc.printStackTrace(System.out);\n-                failed = true;\n-            }\n-\n-            \/\/ wait for server to finish\n-            try {\n-                System.out.println(\"Server finished: \" + server.get());\n-            } catch (CancellationException | InterruptedException\n-                        | ExecutionException e) {\n-                System.out.println(\"Exception on server side: \");\n-                e.printStackTrace(System.out);\n-                failed = true;\n-            }\n-\n-            if (failed) {\n-                throw new RuntimeException(\"Test failed\");\n-            }\n+            runClient(testCase, clientSocket, serverSocketAddr);\n+            server.get();\n@@ -580,1 +553,1 @@\n-    String runServer(DTLSOverDatagram testCase, DatagramSocket socket,\n+    Void runServer(DTLSOverDatagram testCase, DatagramSocket socket,\n@@ -585,11 +558,0 @@\n-        } catch (Exception e) {\n-            System.out.println(\"Exception in  ServerCallable.call():\");\n-            e.printStackTrace(System.out);\n-            serverException = e;\n-\n-            if (testCase.isGoodJob()) {\n-                throw e;\n-            } else {\n-                return \"Well done, server!\";\n-            }\n-        }\n@@ -597,4 +559,7 @@\n-        if (testCase.isGoodJob()) {\n-            return \"Well done, server!\";\n-        } else {\n-            throw new Exception(\"No expected exception\");\n+        } catch (Exception exc) {\n+            exceptionOccurred.set(true);\n+\n+            \/\/ log for debugging clarity\n+            System.out.println(\"Unexpected exception in server\");\n+            exc.printStackTrace(System.err);\n+            throw exc;\n@@ -602,0 +567,2 @@\n+\n+        return null;\n@@ -604,18 +571,4 @@\n-    private String runClient(DTLSOverDatagram testCase, DatagramSocket socket, InetSocketAddress serverSocketAddr)\n-    throws Exception {\n-        try {\n-            if(!serverStarted.await(5, TimeUnit.SECONDS)) {\n-                throw new Exception(\"Server did not start within 5 seconds.\");\n-            } else {\n-                testCase.doClientSide(socket, serverSocketAddr);\n-            }\n-        } catch (Exception e) {\n-            System.out.println(\"Exception in ClientCallable.call():\");\n-            e.printStackTrace(System.out);\n-            clientException = e;\n-\n-            if (testCase.isGoodJob()) {\n-                throw e;\n-            } else {\n-                return \"Well done, client!\";\n-            }\n+    private void runClient(DTLSOverDatagram testCase, DatagramSocket socket,\n+                           InetSocketAddress serverSocketAddr) throws Exception {\n+        if(!serverStarted.await(5, TimeUnit.SECONDS)) {\n+            throw new Exception(\"Server did not start within 5 seconds.\");\n@@ -624,4 +577,10 @@\n-        if (testCase.isGoodJob()) {\n-            return \"Well done, client!\";\n-        } else {\n-            throw new Exception(\"No expected exception\");\n+        try {\n+            testCase.doClientSide(socket, serverSocketAddr);\n+\n+        } catch (Exception exc) {\n+            exceptionOccurred.set(true);\n+\n+            \/\/ log for debugging clarity\n+            System.out.println(\"Unexpected exception in client.\");\n+            exc.printStackTrace(System.err);\n+            throw exc;\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSOverDatagram.java","additions":34,"deletions":75,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -45,1 +46,1 @@\n-    boolean needInvalidRecords = true;\n+    private static final AtomicBoolean needInvalidRecords = new AtomicBoolean(true);\n@@ -50,1 +51,0 @@\n-    }\n@@ -52,3 +52,7 @@\n-    @Override\n-    public boolean isGoodJob() {\n-        return false;\n+        if (needInvalidRecords.get()) {\n+            \/\/ if this is true, the createHandshakePacket() method\n+            \/\/ was NOT called twice to create ClientHello messages\n+            throw new RuntimeException(\n+                    \"The invalid handshake packet was not\"\n+                    + \" rejected as it should have been.\");\n+        }\n@@ -57,0 +61,1 @@\n+\n@@ -59,1 +64,1 @@\n-        if ((ba.length >= 60) &&\n+        if (needInvalidRecords.get() && (ba.length >= 60) &&\n@@ -68,10 +73,0 @@\n-            if (!needInvalidRecords) {\n-                \/\/ The 2nd ClientHello with cookie.  The 1st one should be\n-                \/\/ rejected as expected.\n-                \/\/\n-                \/\/ This may happen if the last few bytes of the packet are\n-                \/\/ for supported_version extension.\n-                throw new RuntimeException(\n-                    \"the crashed handshake message was rejected as expected\");\n-            }\n-\n@@ -79,1 +74,1 @@\n-            needInvalidRecords = false;\n+            needInvalidRecords.set(false);\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/InvalidRecords.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"}]}