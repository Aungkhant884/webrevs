{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import org.testng.Assert;\n@@ -29,1 +30,0 @@\n-import javax.xml.xpath.XPath;\n@@ -31,1 +31,0 @@\n-import javax.xml.xpath.XPathFactory;\n@@ -95,2 +94,2 @@\n-     * DataProvider for testing TransformerException being thrown on\n-     * invalid number function usage.\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid boolean function usage.\n@@ -103,4 +102,13 @@\n-                {\"boolean(\/\/*[boolean()=true()])\"},\n-                {\"boolean(\/\/*[boolean()=false()])\"},\n-                {\"boolean(\/\/*[not()=true()])\"},\n-                {\"boolean(\/\/*[not()=false()])\"},\n+                \/\/ Argument is required for these functions\n+                {\"boolean()\"},\n+                {\"\/\/*[boolean()=true()]\"},\n+                {\"not()\"},\n+                {\"\/\/*[not()=true()]\"},\n+                {\"lang()\"},\n+                {\"\/*[lang()=true()]\"},\n+\n+                \/\/ No arguments should be passed to these functions\n+                {\"true(1)\"},\n+                {\"false(0)\"},\n+                {\"\/\/*[true(.)=true()]\"},\n+                {\"\/\/*[false(.)=false()]\"},\n@@ -124,1 +132,1 @@\n-     * Verifies that TransformerException is thrown on xpath evaluation.\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n@@ -127,1 +135,0 @@\n-     * @throws Exception if test fails\n@@ -129,4 +136,4 @@\n-    @Test(dataProvider = \"exceptionExpTestCases\", expectedExceptions =\n-            XPathExpressionException.class)\n-    void testExceptionOnEval(String exp) throws Exception {\n-        testEval(doc, exp);\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathBooleanFnTest.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -88,1 +88,2 @@\n-                        CUSTOMERS - 1 + (CUSTOMERS - 1) * (CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS)},\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) *\n+                                (CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS)},\n@@ -92,1 +93,2 @@\n-                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/descendant::*)\",\n+                        CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS},\n@@ -152,2 +154,2 @@\n-     * DataProvider for testing TransformerException being thrown on\n-     * invalid number function usage.\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid node set function usage.\n@@ -160,0 +162,1 @@\n+                \/\/ Argument is required for these functions\n@@ -164,0 +167,2 @@\n+\n+                \/\/ No argument should be passed to these functions\n@@ -168,0 +173,18 @@\n+\n+                \/\/ Node-set argument is required for these functions\n+                {\"count(1)\"},\n+                {\"count(true())\"},\n+                {\"count('')\"},\n+                {\"count('abc')\"},\n+                {\"local-name(1)\"},\n+                {\"local-name(true())\"},\n+                {\"local-name('')\"},\n+                {\"local-name('abc')\"},\n+                {\"name(1)\"},\n+                {\"name(true())\"},\n+                {\"name('')\"},\n+                {\"name('abc')\"},\n+                {\"namespace-uri(1)\"},\n+                {\"namespace-uri(true())\"},\n+                {\"namespace-uri('')\"},\n+                {\"namespace-uri('abc')\"},\n@@ -252,1 +275,1 @@\n-     * Verifies that TransformerException is thrown on xpath evaluation.\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n@@ -255,1 +278,0 @@\n-     * @throws Exception if test fails\n@@ -257,4 +279,4 @@\n-    @Test(dataProvider = \"exceptionExpTestCases\", expectedExceptions =\n-            XPathExpressionException.class)\n-    void testExceptionOnEval(String exp) throws Exception {\n-        testEval(doc, exp);\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNodeSetFnTest.java","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import org.w3c.dom.Node;\n@@ -31,2 +30,2 @@\n-import javax.xml.transform.TransformerException;\n-import javax.xml.xpath.*;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.util.stream.IntStream;\n@@ -57,2 +56,3 @@\n-                {\"number(\/\/Customer[2]\/Age)\", 1.0},\n-                {\"number(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\", 1.0},\n+                {\"number(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+                {\"number(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\",\n+                        CUSTOMER_AGES[0] + CUSTOMER_AGES[1]},\n@@ -61,2 +61,4 @@\n-                {\"number(\/\/Age[number()=1.0])\", 1.0},\n-                {\"number(\/\/Age[number(.)=1.0])\", 1.0},\n+                {String.format(\"number(\/\/Age[number()=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n+                {String.format(\"number(\/\/Age[number(.)=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n@@ -68,2 +70,2 @@\n-                {\"sum(\/\/Age)\", 0},\n-                {\"sum(\/\/Customer[2]\/Age)\", 1},\n+                {\"sum(\/\/Age)\", IntStream.of(CUSTOMER_AGES).sum()},\n+                {\"sum(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n@@ -79,1 +81,1 @@\n-                {\"floor(\/\/Customer[2]\/Age)\", 1.0},\n+                {\"floor(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n@@ -81,1 +83,2 @@\n-                {\"number(\/\/Age[floor(.)=1.0])\", 1.0},\n+                {String.format(\"number(\/\/Age[floor(.)=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n@@ -91,1 +94,1 @@\n-                {\"ceiling(\/\/Customer[2]\/Age)\", 1.0},\n+                {\"ceiling(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n@@ -93,1 +96,2 @@\n-                {\"number(\/\/Age[ceiling(.)=1.0])\", 1.0},\n+                {String.format(\"number(\/\/Age[ceiling(.)=%d])\",\n+                        CUSTOMER_AGES[1]), CUSTOMER_AGES[1]},\n@@ -105,1 +109,1 @@\n-                {\"round(\/\/Customer[2]\/Age)\", 1.0},\n+                {\"round(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n@@ -107,1 +111,2 @@\n-                {\"number(\/\/Age[round(.)=1.0])\", 1.0},\n+                {String.format(\"number(\/\/Age[round(.)=%d])\",\n+                        CUSTOMER_AGES[1]), CUSTOMER_AGES[1]},\n@@ -112,1 +117,1 @@\n-     * DataProvider for testing TransformerException being thrown on\n+     * DataProvider for testing XPathExpressionException being thrown on\n@@ -120,5 +125,5 @@\n-                {\"number(\/\/Age[floor()=1.0])\"},\n-\n-                {\"number(\/\/Age[ceiling()=1.0])\"},\n-\n-                {\"number(\/\/Age[round()=1.0])\"},\n+                \/\/ Argument is required for these functions\n+                {\"\/\/Age[floor()=1.0]\"},\n+                {\"(\/Age[ceiling()=1.0]\"},\n+                {\"\/\/Age[round()=1.0]\"},\n+                {\"\/\/Age[sum()]\"},\n@@ -126,0 +131,1 @@\n+                \/\/ Node-set argument is required for these functions\n@@ -130,1 +136,0 @@\n-                {\"number(\/\/Age[sum()])\"},\n@@ -148,1 +153,1 @@\n-     * Verifies that TransformerException is thrown on xpath evaluation.\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n@@ -151,1 +156,0 @@\n-     * @throws Exception if test fails\n@@ -153,4 +157,4 @@\n-    @Test(dataProvider = \"exceptionExpTestCases\", expectedExceptions =\n-            XPathExpressionException.class)\n-    void testExceptionOnEval(String exp) throws Exception {\n-        testEval(doc, exp);\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNumberFnTest.java","additions":32,"deletions":28,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.testng.Assert;\n@@ -29,1 +30,0 @@\n-import javax.xml.xpath.XPath;\n@@ -31,1 +31,0 @@\n-import javax.xml.xpath.XPathFactory;\n@@ -62,3 +61,6 @@\n-                {\"string(\/\/Customer[1]\/Age)\", \"0\"},\n-                {\"string(number(\/\/Customer[2]\/Age))\", \"1\"},\n-                {\"string(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\", \"1\"},\n+                {\"string(\/\/Customer[1]\/Age)\",\n+                        Integer.toString(CUSTOMER_AGES[0])},\n+                {\"string(number(\/\/Customer[2]\/Age))\",\n+                        Integer.toString(CUSTOMER_AGES[1])},\n+                {\"string(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\",\n+                        Integer.toString(CUSTOMER_AGES[0] + CUSTOMER_AGES[1])},\n@@ -242,2 +244,2 @@\n-     * DataProvider for testing TransformerException being thrown on\n-     * invalid number function usage.\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid string function usage.\n@@ -250,18 +252,15 @@\n-                {\"concat('Hello')\"},\n-\n-                {\"string(\/\/*[concat()='name2'])\"},\n-                {\"string(\/\/*[concat(.)='name2'])\"},\n-\n-                {\"substring('123@xyz.com')\"},\n-                {\"string(\/\/*[substring()='name2'])\"},\n-                {\"string(\/\/*[substring(.)='name2'])\"},\n-\n-                {\"translate('1111 111st ave')\"},\n-                {\"string(\/\/*[translate()='name2'])\"},\n-                {\"string(\/\/*[translate(.)='name2'])\"},\n-\n-                {\"boolean(\/\/*[contains()])\"},\n-                {\"boolean(\/\/*[contains(.)])\"},\n-\n-                {\"boolean(\/\/*[starts-with()])\"},\n-                {\"boolean(\/\/*[starts-with(.)])\"},\n+                \/\/ At least two arguments are required for these functions\n+                {\"\/\/*[concat()='name2']\"},\n+                {\"\/\/*[concat(.)='name2']\"},\n+                {\"\/\/*[substring()='name2']\"},\n+                {\"\/\/*[substring(.)='name2']\"},\n+                {\"\/\/*[substring-before()='name2']\"},\n+                {\"\/\/*[substring-before(.)='name2']\"},\n+                {\"\/\/*[substring-after()='name2']\"},\n+                {\"\/\/*[substring-after(.)='name2']\"},\n+                {\"\/\/*[translate()='name2']\"},\n+                {\"\/\/*[translate(.)='name2']\"},\n+                {\"\/\/*[contains()]\"},\n+                {\"\/\/*[contains(.)]\"},\n+                {\"\/\/*[starts-with()]\"},\n+                {\"\/\/*[starts-with(.)]\"},\n@@ -376,1 +375,1 @@\n-     * Verifies that TransformerException is thrown on xpath evaluation.\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n@@ -379,1 +378,0 @@\n-     * @throws Exception if test fails\n@@ -381,4 +379,4 @@\n-    @Test(dataProvider = \"exceptionExpTestCases\", expectedExceptions =\n-            XPathExpressionException.class)\n-    void testExceptionOnEval(String exp) throws Exception {\n-        testEval(doc, exp);\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathStringFnTest.java","additions":29,"deletions":31,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.function.BiConsumer;\n@@ -41,1 +40,0 @@\n-import org.testng.annotations.Test;\n@@ -94,1 +92,1 @@\n-            + \"        <Age>1.0<\/Age>\"\n+            + \"        <Age>100<\/Age>\"\n@@ -106,1 +104,1 @@\n-            + \"        <Age>-1.0<\/Age>\"\n+            + \"        <Age>-100<\/Age>\"\n@@ -138,0 +136,2 @@\n+    \/\/ Customer Ages\n+    final int[] CUSTOMER_AGES = {0, 100, -100, 0};\n@@ -218,2 +218,2 @@\n-        T b = xPath.evaluateExpression(exp, doc, clazz);\n-        T b2 = (T) xPath.evaluate(exp, doc,\n+        T result = xPath.evaluateExpression(exp, doc, clazz);\n+        T result2 = (T) xPath.evaluate(exp, doc,\n@@ -222,2 +222,2 @@\n-        Assert.assertEquals(b, expected);\n-        Assert.assertEquals(b2, b);\n+        Assert.assertEquals(result, expected);\n+        Assert.assertEquals(result2, result);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathTestBase.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}