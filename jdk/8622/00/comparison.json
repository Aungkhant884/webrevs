{"files":[{"patch":"@@ -1100,1 +1100,1 @@\n-static void mmap_attach_shared(const char* user, int vmid, PerfMemory::PerfMemoryMode mode, char** addr, size_t* sizep, TRAPS) {\n+static void mmap_attach_shared(const char* user, int vmid, char** addr, size_t* sizep, TRAPS) {\n@@ -1108,2 +1108,2 @@\n-  int mmap_prot;\n-  int file_flags;\n+  int mmap_prot = PROT_READ;\n+  int file_flags = O_RDONLY | O_NOFOLLOW;\n@@ -1113,20 +1113,0 @@\n-  \/\/ map the high level access mode to the appropriate permission\n-  \/\/ constructs for the file and the shared memory mapping.\n-  if (mode == PerfMemory::PERF_MODE_RO) {\n-    mmap_prot = PROT_READ;\n-    file_flags = O_RDONLY | O_NOFOLLOW;\n-  }\n-  else if (mode == PerfMemory::PERF_MODE_RW) {\n-#ifdef LATER\n-    mmap_prot = PROT_READ | PROT_WRITE;\n-    file_flags = O_RDWR | O_NOFOLLOW;\n-#else\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              \"Unsupported access mode\");\n-#endif\n-  }\n-  else {\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              \"Illegal access mode\");\n-  }\n-\n@@ -1291,1 +1271,1 @@\n-void PerfMemory::attach(const char* user, int vmid, PerfMemoryMode mode, char** addrp, size_t* sizep, TRAPS) {\n+void PerfMemory::attach(const char* user, int vmid, char** addrp, size_t* sizep, TRAPS) {\n@@ -1299,1 +1279,1 @@\n-  mmap_attach_shared(user, vmid, mode, addrp, sizep, CHECK);\n+  mmap_attach_shared(user, vmid, addrp, sizep, CHECK);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1577,1 +1577,0 @@\n-                              PerfMemory::PerfMemoryMode mode,\n@@ -1585,2 +1584,2 @@\n-  DWORD ofm_access;\n-  DWORD mv_access;\n+  DWORD ofm_access = FILE_MAP_READ;\n+  DWORD mv_access = FILE_MAP_READ;\n@@ -1589,17 +1588,0 @@\n-  if (mode == PerfMemory::PERF_MODE_RO) {\n-    ofm_access = FILE_MAP_READ;\n-    mv_access = FILE_MAP_READ;\n-  }\n-  else if (mode == PerfMemory::PERF_MODE_RW) {\n-#ifdef LATER\n-    ofm_access = FILE_MAP_READ | FILE_MAP_WRITE;\n-    mv_access = FILE_MAP_READ | FILE_MAP_WRITE;\n-#else\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              \"Unsupported access mode\");\n-#endif\n-  }\n-  else {\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              \"Illegal access mode\");\n-  }\n@@ -1799,1 +1781,1 @@\n-void PerfMemory::attach(const char* user, int vmid, PerfMemoryMode mode,\n+void PerfMemory::attach(const char* user, int vmid,\n@@ -1808,1 +1790,1 @@\n-  open_file_mapping(user, vmid, mode, addrp, sizep, CHECK);\n+  open_file_mapping(user, vmid, addrp, sizep, CHECK);\n","filename":"src\/hotspot\/os\/windows\/perfMemory_windows.cpp","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-PERF_ENTRY(jobject, Perf_Attach(JNIEnv *env, jobject unused, jstring user, int vmid, int mode))\n+PERF_ENTRY(jobject, Perf_Attach(JNIEnv *env, jobject unused, jstring user, int vmid))\n@@ -83,5 +83,0 @@\n-  if (mode != PerfMemory::PERF_MODE_RO &&\n-      mode != PerfMemory::PERF_MODE_RW) {\n-    THROW_0(vmSymbols::java_lang_IllegalArgumentException());\n-  }\n-\n@@ -89,1 +84,1 @@\n-  PerfMemory::attach(user_utf, vmid, (PerfMemory::PerfMemoryMode) mode,\n+  PerfMemory::attach(user_utf, vmid,\n@@ -303,1 +298,1 @@\n-  {CC \"attach\",              CC \"(\" JLS \"II)\" BB, FN_PTR(Perf_Attach)},\n+  {CC \"attach0\",             CC \"(\" JLS \"I)\" BB,  FN_PTR(Perf_Attach)},\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,5 +131,0 @@\n-    enum PerfMemoryMode {\n-      PERF_MODE_RO = 0,\n-      PERF_MODE_RW = 1\n-    };\n-\n@@ -151,1 +146,1 @@\n-    static void attach(const char* user, int vmid, PerfMemoryMode mode,\n+    static void attach(const char* user, int vmid,\n","filename":"src\/hotspot\/share\/runtime\/perfMemory.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,3 +59,0 @@\n-    private static final int PERF_MODE_RO = 0;\n-    private static final int PERF_MODE_RW = 1;\n-\n@@ -174,13 +171,0 @@\n-     * <p>\n-     * The attach mode specifies the access permissions requested for the\n-     * instrumentation buffer of the target virtual machine. The permitted\n-     * access permissions are:\n-     * <ul>\n-     * <li>\"r\"  - Read only access. This Java virtual machine has only\n-     * read access to the instrumentation buffer for the target Java\n-     * virtual machine.\n-     * <li>\"rw\"  - Read\/Write access. This Java virtual machine has read and\n-     * write access to the instrumentation buffer for the target Java virtual\n-     * machine. This mode is currently not supported and is reserved for\n-     * future enhancements.\n-     * <\/ul>\n@@ -190,1 +174,0 @@\n-     * @param   mode             a string indicating the attach mode.\n@@ -192,1 +175,1 @@\n-     * @throws  IllegalArgumentException  The lvmid or mode was invalid.\n+     * @throws  IllegalArgumentException  The lvmid was invalid.\n@@ -199,1 +182,1 @@\n-    public ByteBuffer attach(int lvmid, String mode)\n+    public ByteBuffer attach(int lvmid)\n@@ -202,9 +185,1 @@\n-        if (mode.compareTo(\"r\") == 0) {\n-            return attachImpl(null, lvmid, PERF_MODE_RO);\n-        }\n-        else if (mode.compareTo(\"rw\") == 0) {\n-            return attachImpl(null, lvmid, PERF_MODE_RW);\n-        }\n-        else {\n-            throw new IllegalArgumentException(\"unknown mode\");\n-        }\n+        return attachImpl(null, lvmid);\n@@ -217,1 +192,1 @@\n-     * This method behaves just as the <code>attach(int lvmid, String mode)\n+     * This method behaves just as the <code>attach(int lvmid)\n@@ -226,1 +201,0 @@\n-     * @param   mode             a string indicating the attach mode.\n@@ -228,1 +202,1 @@\n-     * @throws  IllegalArgumentException  The lvmid or mode was invalid.\n+     * @throws  IllegalArgumentException  The lvmid was invalid.\n@@ -235,1 +209,1 @@\n-    public ByteBuffer attach(String user, int lvmid, String mode)\n+    public ByteBuffer attach(String user, int lvmid)\n@@ -238,9 +212,1 @@\n-        if (mode.compareTo(\"r\") == 0) {\n-            return attachImpl(user, lvmid, PERF_MODE_RO);\n-        }\n-        else if (mode.compareTo(\"rw\") == 0) {\n-            return attachImpl(user, lvmid, PERF_MODE_RW);\n-        }\n-        else {\n-            throw new IllegalArgumentException(\"unknown mode\");\n-        }\n+        return attachImpl(user, lvmid);\n@@ -262,1 +228,0 @@\n-     * @param   mode             a string indicating the attach mode.\n@@ -264,1 +229,1 @@\n-     * @throws  IllegalArgumentException  The lvmid or mode was invalid.\n+     * @throws  IllegalArgumentException  The lvmid was invalid.\n@@ -270,1 +235,1 @@\n-    private ByteBuffer attachImpl(String user, int lvmid, int mode)\n+    private ByteBuffer attachImpl(String user, int lvmid)\n@@ -273,1 +238,1 @@\n-        final ByteBuffer b = attach(user, lvmid, mode);\n+        final ByteBuffer b = attach0(user, lvmid);\n@@ -329,1 +294,0 @@\n-     * @param   mode             a string indicating the attach mode.\n@@ -331,1 +295,1 @@\n-     * @throws  IllegalArgumentException  The lvmid or mode was invalid.\n+     * @throws  IllegalArgumentException  The lvmid was invalid.\n@@ -337,1 +301,1 @@\n-    private native ByteBuffer attach(String user, int lvmid, int mode)\n+    private native ByteBuffer attach0(String user, int lvmid)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/perf\/Perf.java","additions":13,"deletions":49,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -261,1 +261,1 @@\n-            ByteBuffer bb = perf.attach(0, \"r\");\n+            ByteBuffer bb = perf.attach(0);\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,4 +69,1 @@\n- *          the name of the RMI remote object. The Query component may\n- *          contain an access mode specifier <em>?mode=<\/em> specifying\n- *          <em>\"r\"<\/em> or <em>\"rw\"<\/em> access (write access currently\n- *          ignored). The Fragment part is ignored.\n+ *          the name of the RMI remote object. The Fragment part is ignored.\n@@ -500,20 +497,0 @@\n-    \/**\n-     * Return the mode indicated in this HostIdentifier.\n-     *\n-     * @return String - the mode string. If no mode is specified, then \"r\"\n-     *                  is returned. otherwise, the specified mode is returned.\n-     *\/\n-    public String getMode() {\n-        String query = getQuery();\n-        if (query != null) {\n-            String[] queryArgs = query.split(\"\\\\+\");\n-            for (String queryArg : queryArgs) {\n-                if (queryArg.startsWith(\"mode=\")) {\n-                    int index = queryArg.indexOf('=');\n-                    return queryArg.substring(index + 1);\n-                }\n-            }\n-        }\n-        return \"r\";\n-    }\n-\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/monitor\/HostIdentifier.java","additions":2,"deletions":25,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -378,20 +378,0 @@\n-    \/**\n-     * Return the mode indicated in this VmIdentifier.\n-     *\n-     * @return String - the mode string. If no mode is specified, then \"r\"\n-     *                  is returned. otherwise, the specified mode is returned.\n-     *\/\n-    public String getMode() {\n-        String query = getQuery();\n-        if (query != null) {\n-            String[] queryArgs = query.split(\"\\\\+\");\n-            for (String queryArg : queryArgs) {\n-                if (queryArg.startsWith(\"mode=\")) {\n-                    int index = queryArg.indexOf('=');\n-                    return queryArg.substring(index + 1);\n-                }\n-            }\n-        }\n-        return \"r\";\n-    }\n-\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/monitor\/VmIdentifier.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-        String mode = vmid.getMode();\n@@ -59,11 +58,2 @@\n-            FileChannel fc = new RandomAccessFile(f, mode).getChannel();\n-            ByteBuffer bb = null;\n-\n-            if (mode.equals(\"r\")) {\n-                bb = fc.map(FileChannel.MapMode.READ_ONLY, 0L, (int)fc.size());\n-            } else if (mode.equals(\"rw\")) {\n-                bb = fc.map(FileChannel.MapMode.READ_WRITE, 0L, (int)fc.size());\n-            } else {\n-                throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n-            }\n-\n+            FileChannel fc = new RandomAccessFile(f, \"r\").getChannel();\n+            ByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0L, (int)fc.size());\n@@ -71,1 +61,0 @@\n-\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/file\/PerfDataBuffer.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-            ByteBuffer bb = perf.attach(vmid.getLocalVmId(), vmid.getMode());\n+            ByteBuffer bb = perf.attach(vmid.getLocalVmId());\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/local\/PerfDataBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-                String vmidString = \"\/\/\" + lvmid + \"?mode=r\";\n+                String vmidString = \"\/\/\" + lvmid;\n","filename":"src\/jdk.jcmd\/share\/classes\/sun\/tools\/jps\/Jps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,1 @@\n-    RemoteVm attachVm(int vmid, String mode) throws RemoteException,\n-                                                    MonitorException;\n+    RemoteVm attachVm(int vmid) throws RemoteException, MonitorException;\n","filename":"src\/jdk.jstatd\/share\/classes\/sun\/jvmstat\/monitor\/remote\/RemoteHost.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,2 +144,1 @@\n-            RemoteVm rvm = remoteHost.attachVm(vmid.getLocalVmId(),\n-                                               vmid.getMode());\n+            RemoteVm rvm = remoteHost.attachVm(vmid.getLocalVmId());\n","filename":"src\/jdk.jstatd\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/rmi\/MonitoredHostProvider.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-    public RemoteVm attachVm(int lvmid, String mode)\n+    public RemoteVm attachVm(int lvmid)\n@@ -77,4 +77,0 @@\n-        if (mode != null) {\n-            sb.append(\"?mode=\").append(mode);\n-        }\n-\n","filename":"src\/jdk.jstatd\/share\/classes\/sun\/tools\/jstatd\/RemoteHostImpl.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-            bb = perf.attach(vmid, \"r\");\n+            bb = perf.attach(vmid);\n@@ -203,1 +203,1 @@\n-            bb = perf.attach(vmid, \"r\");\n+            bb = perf.attach(vmid);\n","filename":"src\/jdk.management.agent\/share\/classes\/jdk\/internal\/agent\/ConnectorAddressLink.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}