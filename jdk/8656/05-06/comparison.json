{"files":[{"patch":"@@ -67,0 +67,4 @@\n+        \/\/ codes are up to 30 bits long - and their length\n+        \/\/ is code on 5 bits which means casting to int here is safe: the\n+        \/\/ returned value is expected to be in the range (5..30) and will\n+        \/\/ never be negative.\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/hpack\/QuickHuffman.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-                \/\/ so the value is more than 16 bits and the\n+                \/\/ so the value becomes more than 16 bits and the\n@@ -286,3 +286,1 @@\n-            \/\/ The negation \"~\" sets the high order bits\n-            \/\/ so the value is more than 16 bits and the\n-            \/\/ compiler will emit a warning if not cast\n+            \/\/ Explicit cast required: see fin() above\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/Frame.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}