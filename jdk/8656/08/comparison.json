{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-    private int accumulatedBytes;\n+    private long accumulatedBytes;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/BufferingSubscriber.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,2 +66,8 @@\n-    private static long codeLengthOf(char c) {\n-        return codes[c] & 0x00000000ffffffffL;\n+    private static int codeLengthOf(char c) {\n+        \/\/ codes are up to 30 bits long - and their length\n+        \/\/ is coded on 5 bits which means casting to int here is safe: the\n+        \/\/ returned value is expected to be in the range (5..30) and will\n+        \/\/ never be negative.\n+        int len = (int) (codes[c] & 0x00000000ffffffffL);\n+        assert len >= 0;\n+        return len;\n@@ -735,1 +741,1 @@\n-                    long len = codeLengthOf(c);\n+                    int len = codeLengthOf(c);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/hpack\/QuickHuffman.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,1 +218,5 @@\n-                firstChar &= ~0b10000000_00000000;\n+                \/\/ Explicit cast required:\n+                \/\/ The negation \"~\" sets the high order bits\n+                \/\/ so the value becomes more than 16 bits and the\n+                \/\/ compiler will emit a warning if not cast\n+                firstChar &= (char) ~0b10000000_00000000;\n@@ -227,1 +231,2 @@\n-                firstChar &= ~0b01000000_00000000;\n+                \/\/ Explicit cast required - see fin() above\n+                firstChar &= (char) ~0b01000000_00000000;\n@@ -236,1 +241,2 @@\n-                firstChar &= ~0b00100000_00000000;\n+                \/\/ Explicit cast required - see fin() above\n+                firstChar &= (char) ~0b00100000_00000000;\n@@ -245,1 +251,2 @@\n-                firstChar &= ~0b00010000_00000000;\n+                \/\/ Explicit cast required - see fin() above\n+                firstChar &= (char) ~0b00010000_00000000;\n@@ -262,1 +269,1 @@\n-                firstChar |= payloadLen;\n+                firstChar |= (char) payloadLen;\n@@ -279,1 +286,2 @@\n-            firstChar &= ~0b00000000_10000000;\n+            \/\/ Explicit cast required: see fin() above\n+            firstChar &= (char) ~0b00000000_10000000;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/Frame.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"}]}