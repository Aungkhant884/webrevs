{"files":[{"patch":"@@ -224,3 +224,1 @@\n-  if (ShenandoahSATBBarrier) {\n-    bool is_weak = (decorators & ON_WEAK_OOP_REF) != 0;\n-    bool is_phantom = (decorators & ON_PHANTOM_OOP_REF) != 0;\n+  if (ShenandoahSATBBarrier && ShenandoahBarrierSet::need_keep_alive_barrier(decorators, type)) {\n@@ -228,14 +226,11 @@\n-    bool keep_alive = (decorators & AS_NO_KEEPALIVE) == 0;\n-\n-    if ((is_weak || is_phantom || is_anonymous) && keep_alive) {\n-      \/\/ Register the value in the referent field with the pre-barrier\n-      LabelObj *Lcont_anonymous;\n-      if (is_anonymous) {\n-        Lcont_anonymous = new LabelObj();\n-        generate_referent_check(access, Lcont_anonymous);\n-      }\n-      pre_barrier(gen, access.access_emit_info(), decorators, LIR_OprFact::illegalOpr \/* addr_opr *\/,\n-                  result \/* pre_val *\/);\n-      if (is_anonymous) {\n-        __ branch_destination(Lcont_anonymous->label());\n-      }\n+\n+    \/\/ Register the value in the referent field with the pre-barrier\n+    LabelObj *Lcont_anonymous;\n+    if (is_anonymous) {\n+      Lcont_anonymous = new LabelObj();\n+      generate_referent_check(access, Lcont_anonymous);\n+    }\n+    pre_barrier(gen, access.access_emit_info(), decorators, LIR_OprFact::illegalOpr \/* addr_opr *\/,\n+                result \/* pre_val *\/);\n+    if (is_anonymous) {\n+      __ branch_destination(Lcont_anonymous->label());\n@@ -243,1 +238,1 @@\n- }\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+  _mark_closure(NULL),\n@@ -540,1 +541,1 @@\n-    MonitorLocker ml(Heap_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(Heap_lock);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}