{"files":[{"patch":"@@ -348,7 +348,6 @@\n-  }\n-  ArchiveClassesAtExit = archive_name;\n-  if (Arguments::init_shared_archive_paths()) {\n-    dump();\n-  } else {\n-    ArchiveClassesAtExit = nullptr;\n-    THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n+    ArchiveClassesAtExit = archive_name;\n+    if (Arguments::init_shared_archive_paths()) {\n+      DynamicArchive::dump(CHECK);\n+    } else {\n+      ArchiveClassesAtExit = nullptr;\n+      THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n@@ -356,5 +355,5 @@\n-  }\n-  \/\/ prevent do dynamic dump at exit.\n-  ArchiveClassesAtExit = nullptr;\n-  if (!Arguments::init_shared_archive_paths()) {\n-    THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n+    }\n+    \/\/ prevent do dynamic dump at exit.\n+    ArchiveClassesAtExit = nullptr;\n+    if (!Arguments::init_shared_archive_paths()) {\n+      THROW_MSG(vmSymbols::java_lang_RuntimeException(),\n@@ -362,0 +361,1 @@\n+    }\n@@ -365,1 +365,1 @@\n-void DynamicArchive::dump() {\n+void DynamicArchive::dump(TRAPS) {\n@@ -373,1 +373,1 @@\n-  LambdaFormInvokers::regenerate_holder_classes();\n+  LambdaFormInvokers::regenerate_holder_classes(CHECK);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  static void dump();\n+  static void dump(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,11 @@\n-void LambdaFormInvokers::regenerate_holder_classes() {\n+#define HANDLE_IF_HAS_EXCEPTION                                                                         \\\n+  if (HAS_PENDING_EXCEPTION) {                                                                          \\\n+    if (!PENDING_EXCEPTION->is_a(vmClasses::OutOfMemoryError_klass())) {                                \\\n+      log_error(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(),                             \\\n+                     java_lang_String::as_utf8_string(java_lang_Throwable::message(PENDING_EXCEPTION)));\\\n+      CLEAR_PENDING_EXCEPTION;                                                                          \\\n+    }                                                                                                   \\\n+    return;                                                                                             \\\n+  }\n+\n+void LambdaFormInvokers::regenerate_holder_classes(TRAPS) {\n@@ -87,1 +97,1 @@\n-  JavaThread* THREAD = JavaThread::current();\n+\n@@ -113,6 +123,1 @@\n-  if (HAS_PENDING_EXCEPTION) {\n-    log_info(cds)(\"%s: %s\", THREAD->pending_exception()->klass()->external_name(),\n-                            java_lang_String::as_utf8_string(java_lang_Throwable::message(THREAD->pending_exception())));\n-    CLEAR_PENDING_EXCEPTION;\n-    return;\n-  }\n+  HANDLE_IF_HAS_EXCEPTION;\n@@ -132,5 +137,1 @@\n-    char *buf = resource_allocate_bytes(THREAD, len, AllocFailStrategy::RETURN_NULL);\n-    if (buf == nullptr) {\n-      log_info(cds)(\"Out of memory when reloading class %s, quit\", class_name);\n-      return;\n-    }\n+    char *buf = NEW_RESOURCE_ARRAY(char, len);\n@@ -140,7 +141,1 @@\n-\n-    if (HAS_PENDING_EXCEPTION) {\n-      log_info(cds)(\"Exception happened: %s\", PENDING_EXCEPTION->klass()->name()->as_C_string());\n-      log_info(cds)(\"Could not create InstanceKlass for class %s\", class_name);\n-      CLEAR_PENDING_EXCEPTION;\n-      return;\n-    }\n+    HANDLE_IF_HAS_EXCEPTION;\n@@ -182,1 +177,1 @@\n-  log_info(cds, lambda)(\"Replaced class %s, old: %p  new: %p\", name, klass, result);\n+  log_debug(cds, lambda)(\"Replaced class %s, old: %p  new: %p\", name, klass, result);\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-  static void reload_class(char* name, ClassFileStream& st, TRAPS);\n-  \/\/ for storing LF form lines in read only table.\n+  \/\/ for storing LF form lines (LF_RESOLVE only) in read only table.\n@@ -40,0 +39,1 @@\n+  static void reload_class(char* name, ClassFileStream& st, TRAPS);\n@@ -43,1 +43,3 @@\n-  static void regenerate_holder_classes();\n+  \/\/ All exceptions except for OOM will be suppressed in the fucntion, the\n+  \/\/ non-OOM failure should not affect normal archiving.\n+  static void regenerate_holder_classes(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -747,1 +747,1 @@\n-    LambdaFormInvokers::regenerate_holder_classes();\n+    LambdaFormInvokers::regenerate_holder_classes(CHECK);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,1 +506,9 @@\n-    DynamicArchive::dump();\n+    ExceptionMark em(thread);\n+    DynamicArchive::dump(thread);\n+    if (thread->has_pending_exception()) {\n+      ResourceMark rm(thread);\n+      oop pending_exception = thread->pending_exception();\n+      log_error(cds)(\"ArchiveClassesAtExit has failed %s: %s\", pending_exception->klass()->external_name(),\n+                     java_lang_String::as_utf8_string(java_lang_Throwable::message(pending_exception)));\n+      thread->clear_pending_exception();\n+    }\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}