{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"cds\/lambdaFormInvokers.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"classfile\/lambdaFormInvokers.hpp\"\n@@ -1100,5 +1100,0 @@\n-  if (mapinfo->is_static()) {\n-    mapinfo->set_lambdaform_invokers_offset();\n-    mapinfo->set_size_lambdaform_invokers(LambdaFormInvokers::total_bytes());\n-    mapinfo->write_lambdaform_invokers();\n-  }\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"cds\/lambdaFormInvokers.hpp\"\n@@ -32,1 +33,0 @@\n-#include \"classfile\/lambdaFormInvokers.hpp\"\n@@ -372,7 +372,4 @@\n-  if (LambdaFormInvokers::should_regenerate_holder_classes()) {\n-    JavaThread* THREAD = JavaThread::current();\n-    assert(THREAD->is_Java_thread(), \"Should be JavaThread\");\n-    log_info(cds, dynamic)(\"Regenerate lambdaform holder classes ...\");\n-    LambdaFormInvokers::regenerate_holder_classes(THREAD);\n-    log_info(cds, dynamic)(\"Regenerate lambdaform holder classes ...done\");\n-  }\n+  JavaThread* THREAD = JavaThread::current();\n+  log_info(cds, dynamic)(\"Regenerate lambdaform holder classes ...\");\n+  LambdaFormInvokers::regenerate_holder_classes(THREAD);\n+  log_info(cds, dynamic)(\"Regenerate lambdaform holder classes ...done\");\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"cds\/lambdaFormInvokers.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"classfile\/lambdaFormInvokers.hpp\"\n@@ -303,2 +303,0 @@\n-  st->print_cr(\"- lambdaform_invokers_offset:     \" SIZE_FORMAT, _lambdaform_invokers_offset);\n-  st->print_cr(\"- size_lambdaform_invokers        \" SIZE_FORMAT, _size_lambdaform_invokers);\n@@ -1251,46 +1249,0 @@\n-\/\/ Write all lambdafor_invoker_lines into static archive.\n-void FileMapInfo::write_lambdaform_invokers() {\n-  GrowableArrayCHeap<char*, mtClassShared>* all_lines = LambdaFormInvokers::lambdaform_lines();\n-  log_info(cds)(\"lambdaform_invokers file_offset = \" SIZE_FORMAT, header()->lambdaform_invokers_offset());\n-  log_info(cds)(\"lambdaform_invokers size = \" SIZE_FORMAT, header()->size_lambdaform_invokers());\n-  assert(_file_offset == header()->lambdaform_invokers_offset(), \"Anything writen after file offset set?\");\n-  if (all_lines != nullptr) {\n-    int len = all_lines->length();\n-    for (int i = 0; i < len; i++) {\n-      char* line = all_lines->at(i);\n-      write_bytes(line, strlen(line) + 1); \/\/ including ending '\\0'.\n-    }\n-  }\n-}\n-\n-void FileMapInfo::read_lambdaform_invokers() {\n-  assert(UseSharedSpaces, \"Must be shared mod\");\n-  size_t offset = header()->lambdaform_invokers_offset();\n-  size_t size   = header()->size_lambdaform_invokers();\n-  char* base = os::map_memory(_fd, _full_path, offset,  nullptr, size,\n-                                true\/*read only*\/, true\/*exec*\/, mtClassShared);\n-  if (base == nullptr) {\n-    \/\/ read content from file\n-    base = (char*)os::malloc(header()->size_lambdaform_invokers(), mtClassShared);\n-    if (base == nullptr) {\n-      vm_exit_out_of_memory(size, OOM_MMAP_ERROR, \"failed to allocate memory for lambdaform_invokers, out of memory.\");\n-    }\n-    if (lseek(_fd, (long)header()->lambdaform_invokers_offset(), SEEK_SET) !=\n-                   (long)header()->lambdaform_invokers_offset()  ||\n-      read_bytes(base, size) != size) {\n-      vm_exit_during_initialization(\"Could not read lambdaform_invvokers from file!\");\n-    }\n-  }\n-\n-  size_t count = 0;\n-  size_t len;\n-  int    index = 0;\n-  while (count < size) {\n-    len = strlen(base) + 1;\n-    LambdaFormInvokers::append_filtered(base);\n-    count += len;\n-    base  += len;\n-  }\n-  log_info(cds)(\"Total lambdaform lines (filtered)  from static archive %d  and total bytes \" SIZE_FORMAT, index, size);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":49,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -240,2 +240,0 @@\n-  size_t _lambdaform_invokers_offset;   \/\/ lambdaform_invoker lines offset.\n-  size_t _size_lambdaform_invokers;     \/\/ total size of lambdainvoker lines, string saved as char*, ends with '\\0'.\n@@ -287,2 +285,0 @@\n-  size_t lambdaform_invokers_offset()      const { return _lambdaform_invokers_offset; }\n-  size_t size_lambdaform_invokers()        const { return _size_lambdaform_invokers; }\n@@ -299,2 +295,0 @@\n-  void set_lambdaform_invokers_offset(size_t offset) { _lambdaform_invokers_offset = offset; }\n-  void set_size_lambdaform_invokers(size_t size)     { _size_lambdaform_invokers = size; }\n@@ -459,1 +453,0 @@\n-  void  write_lambdaform_invokers();\n@@ -472,1 +465,0 @@\n-  void  read_lambdaform_invokers();\n@@ -558,17 +550,0 @@\n-  size_t lambdaform_invokers_offset() const {\n-    return header()->lambdaform_invokers_offset();\n-  }\n-\n-  \/\/ Set current file offset. Must be assigned before write header.\n-  void set_lambdaform_invokers_offset() {\n-    align_file_position();\n-    header()->set_lambdaform_invokers_offset(_file_offset);\n-  }\n-\n-  size_t size_lambdaform_invokers() const {\n-    return header()->size_lambdaform_invokers();\n-  }\n-  void set_size_lambdaform_invokers(size_t size) {\n-    header()->set_size_lambdaform_invokers(size);\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/archiveBuilder.hpp\"\n@@ -49,1 +50,2 @@\n-GrowableArrayCHeap<char*, mtClassShared>* LambdaFormInvokers::_lambdaform_lines = NULL;\n+GrowableArrayCHeap<char*, mtClassShared>* LambdaFormInvokers::_lambdaform_lines = nullptr;\n+Array<Array<char>*>* LambdaFormInvokers::_static_archive_invokers = nullptr;\n@@ -74,1 +76,4 @@\n-  assert(_lambdaform_lines != NULL, \"Bad List\");\n+  if (_lambdaform_lines == nullptr || _lambdaform_lines->length() == 0) {\n+    log_info(cds)(\"Nothing to regenerate for holder classes\");\n+    return;\n+  }\n@@ -81,1 +86,1 @@\n-  log_info(cds)(\"Total lambdaform lines %d  and total bytes \" SIZE_FORMAT, _lambdaform_lines->length(), total_bytes());\n+  log_info(cds)(\"Total lambdaform lines %d\", _lambdaform_lines->length());\n@@ -85,0 +90,4 @@\n+  if (list_lines == nullptr) {\n+    log_info(cds)(\"Out of memory, skip regenerate holder classes\");\n+    return;\n+  }\n@@ -87,0 +96,4 @@\n+    if (h_line == nullptr) {\n+      log_info(cds)(\"Out of memory, skip regenerate holder classes\");\n+      return;\n+    }\n@@ -117,0 +130,4 @@\n+    if (class_name == nullptr) {\n+      log_info(cds)(\"Out of memory when reloading classes, quit\");\n+      return;\n+    }\n@@ -120,0 +137,4 @@\n+    if (buf == nullptr) {\n+      log_info(cds)(\"Out of memory when reloading classes for %s, quit\", class_name);\n+      return;\n+    }\n@@ -171,4 +192,5 @@\n-size_t LambdaFormInvokers::total_bytes() {\n-  if (_lambdaform_lines != nullptr) {\n-    size_t total = 0;\n-    for (int i = 0; i < _lambdaform_lines->length(); i ++) {\n+void LambdaFormInvokers::dump_static_archive_invokers() {\n+  if (_lambdaform_lines != nullptr && _lambdaform_lines->length() > 0) {\n+    int count = _lambdaform_lines->length();\n+    _static_archive_invokers = ArchiveBuilder::new_ro_array<Array<char>*>(count);\n+    for (int i = 0; i < count; i++) {\n@@ -176,1 +198,6 @@\n-      total += strlen(str) + 1; \/\/ including ending '\\0'\n+      int len = (int)strlen(str);\n+      Array<char>* line = ArchiveBuilder::new_ro_array<char>(len+1);\n+      strcpy(line->adr_at(0), str); \/\/ copies terminating zero as well\n+\n+      _static_archive_invokers->at_put(i, line);\n+      ArchivePtrMarker::mark_pointer(_static_archive_invokers->adr_at(i));\n@@ -178,3 +205,0 @@\n-    return total;\n-  } else {\n-    return 0;\n@@ -183,0 +207,4 @@\n+\n+void LambdaFormInvokers::serialize(SerializeClosure* soc) {\n+  soc->do_ptr((void**)&_static_archive_invokers);\n+}\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":39,"deletions":11,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+template <class T> class Array;\n@@ -37,1 +38,2 @@\n-\n+  \/\/ for storing LF form lines in read only table.\n+  static Array<Array<char>*>* _static_archive_invokers;\n@@ -45,4 +47,2 @@\n-  static size_t total_bytes();\n-  static bool should_regenerate_holder_classes() {\n-    assert(DynamicDumpSharedSpaces, \"Dynamic dump only\");\n-    return _lambdaform_lines != nullptr && _lambdaform_lines->length() > 0;\n+  static  Array<Array<char>*>* static_archive_invokers() {\n+    return _static_archive_invokers;\n@@ -50,0 +50,2 @@\n+  static void dump_static_archive_invokers();\n+  static void serialize(SerializeClosure* soc);\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -364,0 +364,1 @@\n+  LambdaFormInvokers::serialize(soc);\n@@ -463,0 +464,2 @@\n+  \/\/ Write lambform lines into archive\n+  LambdaFormInvokers::dump_static_archive_invokers();\n@@ -935,4 +938,0 @@\n-    if (DynamicDumpSharedSpaces) {\n-      \/\/ Read stored LF format lines stored in static archive\n-      static_mapinfo->read_lambdaform_invokers();\n-    }\n@@ -1457,0 +1456,13 @@\n+  \/\/ Set up LambdaFormInvokers::_lambdaform_lines for dynamic dump\n+  if (DynamicDumpSharedSpaces) {\n+    \/\/ Read stored LF format lines stored in static archive\n+    Array<Array<char>*>* static_archive_invokers = LambdaFormInvokers::static_archive_invokers();\n+    if (static_archive_invokers != nullptr) {\n+      for (int i = 0; i < static_archive_invokers->length(); i++) {\n+        Array<char>* line = static_archive_invokers->at(i);\n+        char* str = line->adr_at(0);\n+        LambdaFormInvokers::append_filtered(str);\n+      }\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"cds\/lambdaFormInvokers.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"classfile\/lambdaFormInvokers.hpp\"\n@@ -3663,0 +3663,2 @@\n+      \/\/ Note: LambdaFormInvokers::append_filtered and LambdaFormInvokers::append take same format which is not\n+      \/\/ same as below the print format. The line does not include LAMBDA_FORM_TAG.\n@@ -3664,1 +3666,2 @@\n-    } else {\n+    }\n+    if (ClassListWriter::is_enabled()) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}