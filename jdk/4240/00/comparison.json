{"files":[{"patch":"@@ -35,0 +35,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"compiler\/compilerThread.hpp\"\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n@@ -68,0 +69,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n@@ -942,1 +944,1 @@\n-        new_thread->as_CompilerThread()->set_compiler(comp);\n+        new_thread->as_Compiler_thread()->set_compiler(comp);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,9 +112,0 @@\n-inline CompilerThread* JavaThread::as_CompilerThread() {\n-  assert(is_Compiler_thread(), \"just checking\");\n-  return (CompilerThread*)this;\n-}\n-\n-inline CompilerThread* CompilerThread::current() {\n-  return JavaThread::current()->as_CompilerThread();\n-}\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n+#define SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n+\n+#include \"runtime\/thread.inline.hpp\"\n+#include \"compiler\/compilerThread.hpp\"\n+\n+inline CompilerThread* CompilerThread::current() {\n+  return JavaThread::current()->as_Compiler_thread();\n+}\n+\n+#endif \/\/ SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.inline.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n@@ -159,1 +160,1 @@\n-    CompileTask *task = thread->as_CompilerThread()->task();\n+    CompileTask *task = thread->as_Compiler_thread()->task();\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/thread.inline.hpp\"\n@@ -439,1 +440,1 @@\n-  CompilerThread* compilerThread = thread->is_Compiler_thread() ? thread->as_CompilerThread() : NULL;\n+  CompilerThread* compilerThread = thread->is_Compiler_thread() ? thread->as_Compiler_thread() : NULL;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1427,1 +1427,1 @@\n-  inline CompilerThread* as_CompilerThread();\n+  inline CompilerThread* as_Compiler_thread();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"compiler\/compilerThread.hpp\"\n@@ -94,0 +95,5 @@\n+inline CompilerThread* JavaThread::as_Compiler_thread() {\n+  assert(is_Compiler_thread(), \"incorrect cast to CompilerThread\");\n+  return static_cast<CompilerThread*>(this);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}