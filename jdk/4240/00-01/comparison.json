{"files":[{"patch":"@@ -35,1 +35,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n+#include \"compiler\/compilerThread.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n@@ -69,1 +68,0 @@\n-#include \"runtime\/thread.inline.hpp\"\n@@ -944,1 +942,1 @@\n-        new_thread->as_Compiler_thread()->set_compiler(comp);\n+        CompilerThread::cast(new_thread)->set_compiler(comp);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"compiler\/compilerThread.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,8 @@\n-  static CompilerThread* current();\n+  static CompilerThread* current() {\n+    return CompilerThread::cast(JavaThread::current());\n+  }\n+\n+  static CompilerThread* cast(Thread* t) {\n+    assert(t->is_Compiler_thread(), \"incorrect cast to CompilerThread\");\n+    return static_cast<CompilerThread*>(t);\n+  }\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n-#define SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n-\n-#include \"runtime\/thread.inline.hpp\"\n-#include \"compiler\/compilerThread.hpp\"\n-\n-inline CompilerThread* CompilerThread::current() {\n-  return JavaThread::current()->as_Compiler_thread();\n-}\n-\n-#endif \/\/ SHARE_COMPILER_COMPILERTHREAD_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/compilerThread.inline.hpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"runtime\/thread.inline.hpp\"\n@@ -160,1 +159,1 @@\n-    CompileTask *task = thread->as_Compiler_thread()->task();\n+    CompileTask *task = CompilerThread::cast(thread)->task();\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compilerThread.hpp\"\n@@ -40,1 +41,0 @@\n-#include \"runtime\/thread.inline.hpp\"\n@@ -440,1 +440,1 @@\n-  CompilerThread* compilerThread = thread->is_Compiler_thread() ? thread->as_Compiler_thread() : NULL;\n+  CompilerThread* compilerThread = thread->is_Compiler_thread() ? CompilerThread::cast(thread) : NULL;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"compiler\/compilerThread.inline.hpp\"\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1427,2 +1427,0 @@\n-  inline CompilerThread* as_Compiler_thread();\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"compiler\/compilerThread.hpp\"\n@@ -95,5 +94,0 @@\n-inline CompilerThread* JavaThread::as_Compiler_thread() {\n-  assert(is_Compiler_thread(), \"incorrect cast to CompilerThread\");\n-  return static_cast<CompilerThread*>(this);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}