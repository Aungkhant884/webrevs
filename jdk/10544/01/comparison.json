{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import sun.security.util.math.intpoly.IntegerPolynomialP256;\n+import sun.security.util.math.intpoly.P256OrderField;\n+\n@@ -166,1 +169,1 @@\n-        return pow(getField().getSize().subtract(BigInteger.valueOf(2)));\n+        return MultiplicativeInverser.of(getField().getSize()).inverse(this);\n@@ -211,1 +214,56 @@\n-}\n+    sealed interface MultiplicativeInverser {\n+        static MultiplicativeInverser of(BigInteger m) {\n+            if (m.equals(IntegerPolynomialP256.MODULUS)) {\n+                return Secp256R1.instance;\n+            } else if (m.equals(P256OrderField.MODULUS)) {\n+                return Secp256R1Field.instance;\n+            } else {\n+                return new Default(m);\n+            }\n+        }\n+\n+        \/**\n+         * Compute the multiplicative inverse of {@code imp}.\n+         *\n+         * @return the multiplicative inverse (1 \/ imp)\n+         *\/\n+        ImmutableIntegerModuloP inverse(IntegerModuloP imp);\n+\n+        final class Default implements MultiplicativeInverser {\n+            private final BigInteger b;\n+\n+            Default(BigInteger b) {\n+                this.b = b.subtract(BigInteger.TWO);\n+            }\n+\n+            @Override\n+            public ImmutableIntegerModuloP inverse(IntegerModuloP imp) {\n+                MutableIntegerModuloP y = imp.getField().get1().mutable();\n+                MutableIntegerModuloP x = imp.mutable();\n+                int bitLength = b.bitLength();\n+                for (int bit = 0; bit < bitLength; bit++) {\n+                    if (b.testBit(bit)) {\n+                        \/\/ odd\n+                        y.setProduct(x);\n+                    }\n+                    x.setSquare();\n+                }\n+\n+                return y.fixed();\n+            }\n+        }\n+\n+        final class Secp256R1 implements MultiplicativeInverser {\n+            private static final Secp256R1 instance = new Secp256R1();\n+\n+            @Override\n+            public ImmutableIntegerModuloP inverse(IntegerModuloP imp) {\n+                \/\/ Invert imp with a modular exponentiation: the modulus is\n+                \/\/     p = FFFFFFFF 00000001 00000000 00000000\n+                \/\/         00000000 FFFFFFFF FFFFFFFF FFFFFFFF\n+                \/\/ and the exponent is (p -2).\n+                \/\/  p -2 = FFFFFFFF 00000001 00000000 00000000\n+                \/\/         00000000 FFFFFFFF FFFFFFFF FFFFFFFD\n+                \/\/\n+                \/\/ There are 4 contiguous 31-bit set, and thus imp^(2^31 - 1)\n+                \/\/ is pre-computed to speed up the computation.\n@@ -213,0 +271,74 @@\n+                \/\/ calculate imp ^ (2^31 - 1)\n+                MutableIntegerModuloP t = imp.mutable();\n+                for (int i = 30; i != 0; i--) {\n+                    t.setSquare();\n+                    t.setProduct(imp);\n+                }\n+\n+                \/\/ calculate (1 \/ imp)\n+                MutableIntegerModuloP d = t.mutable();\n+                for (int i = 31; i < 256; i++) {\n+                    d.setSquare();\n+                    switch (i) {\n+                        \/\/ For contiguous 31-bit set.\n+                        case 190, 221, 252 -> {\n+                            d.setProduct(t);\n+                        }\n+                        \/\/ For individual 1-bit set.\n+                        case 31, 63, 253, 255 -> {\n+                            d.setProduct(imp);\n+                        }\n+                    }\n+                }\n+\n+                return d.fixed();\n+            }\n+        }\n+\n+        final class Secp256R1Field implements MultiplicativeInverser {\n+            private static final Secp256R1Field instance = new Secp256R1Field();\n+            private static final BigInteger b =\n+                    P256OrderField.MODULUS.subtract(BigInteger.TWO);\n+            @Override\n+            public ImmutableIntegerModuloP inverse(IntegerModuloP imp) {\n+                \/\/ Invert imp with a modular exponentiation: the modulus is\n+                \/\/     n = FFFFFFFF 00000000 FFFFFFFF FFFFFFFF\n+                \/\/         BCE6FAAD A7179E84 F3B9CAC2 FC632551\n+                \/\/ and the exponent is (n -2).\n+                \/\/  n - 2 = FFFFFFFF 00000000 FFFFFFFF FFFFFFFF\n+                \/\/          BCE6FAAD A7179E84 F3B9CAC2 FC63254F\n+                \/\/\n+                \/\/ There are 3 contiguous 32-bit set, and imp^(2^16 - 1)\n+                \/\/ is pre-computed to speed up the computation.\n+\n+                \/\/ calculate imp ^ (2^16 - 1)\n+                MutableIntegerModuloP t = imp.mutable();\n+                for (int i = 15; i != 0; i--) {\n+                    t.setSquare();\n+                    t.setProduct(imp);\n+                }\n+\n+                \/\/ calculate (1 \/ imp)\n+                \/\/\n+                \/\/ calculate for bit 16-128, for contiguous 16-bit set.\n+                MutableIntegerModuloP d = t.mutable();\n+                for (int i = 32; i < 128; i++) {\n+                    d.setSquare();\n+                    if (i == 31 || i == 79 || i == 95 || i == 111 || i == 127) {\n+                            d.setProduct(t);\n+                    }\n+                }\n+\n+                \/\/ Calculate for bit 128-255, for individual 1-bit set.\n+                for (int i = 127; i >= 0; i--) {\n+                    d.setSquare();\n+                    if (b.testBit(i)) {\n+                        d.setProduct(imp);\n+                    }\n+                }\n+\n+                return d.fixed();\n+            }\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/IntegerModuloP.java","additions":134,"deletions":2,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.security;\n+\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.security.*;\n+import java.security.spec.ECGenParameterSpec;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.SECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(jvmArgsAppend = {\"-Xms1024m\", \"-Xmx1024m\", \"-Xmn768m\", \"-XX:+UseParallelGC\"}, value = 3)\n+public class Signatures {\n+    private Signature signer;\n+\n+    @Param({\"64\", \"512\", \"2048\", \"16384\"})\n+    private int messageLength;\n+    private byte[] message;\n+\n+    @Setup\n+    public void setup() throws Exception {\n+        message = new byte[messageLength];\n+        (new Random(System.nanoTime())).nextBytes(message);\n+\n+\n+        AlgorithmParameters params =\n+                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n+        params.init(new ECGenParameterSpec(\"secp256r1\"));\n+        ECGenParameterSpec ecParams =\n+                params.getParameterSpec(ECGenParameterSpec.class);\n+\n+        KeyPairGenerator kpg =\n+                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n+        kpg.initialize(ecParams);\n+        KeyPair kp = kpg.generateKeyPair();\n+\n+        signer = Signature.getInstance(\"Sha256WithECDSA\", \"SunEC\");\n+        signer.initSign(kp.getPrivate());\n+    }\n+\n+    @Benchmark\n+    public byte[] sign() throws SignatureException {\n+        signer.update(message);\n+        return signer.sign();\n+    }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}