{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.java.security;\n-\n-\n-import org.openjdk.jmh.annotations.*;\n-\n-import java.security.*;\n-import java.security.spec.ECGenParameterSpec;\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.Throughput)\n-@OutputTimeUnit(TimeUnit.SECONDS)\n-@State(Scope.Thread)\n-@Warmup(iterations = 5, time = 1)\n-@Measurement(iterations = 5, time = 1)\n-@Fork(jvmArgsAppend = {\"-Xms1024m\", \"-Xmx1024m\", \"-Xmn768m\", \"-XX:+UseParallelGC\"}, value = 3)\n-public class Signatures {\n-    private Signature signer;\n-\n-    @Param({\"64\", \"512\", \"2048\", \"16384\"})\n-    private int messageLength;\n-    private byte[] message;\n-\n-    @Setup\n-    public void setup() throws Exception {\n-        message = new byte[messageLength];\n-        (new Random(System.nanoTime())).nextBytes(message);\n-\n-\n-        AlgorithmParameters params =\n-                AlgorithmParameters.getInstance(\"EC\", \"SunEC\");\n-        params.init(new ECGenParameterSpec(\"secp256r1\"));\n-        ECGenParameterSpec ecParams =\n-                params.getParameterSpec(ECGenParameterSpec.class);\n-\n-        KeyPairGenerator kpg =\n-                KeyPairGenerator.getInstance(\"EC\", \"SunEC\");\n-        kpg.initialize(ecParams);\n-        KeyPair kp = kpg.generateKeyPair();\n-\n-        signer = Signature.getInstance(\"Sha256WithECDSA\", \"SunEC\");\n-        signer.initSign(kp.getPrivate());\n-    }\n-\n-    @Benchmark\n-    public byte[] sign() throws SignatureException {\n-        signer.update(message);\n-        return signer.sign();\n-    }\n-}\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/Signatures.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"}]}