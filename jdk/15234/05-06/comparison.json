{"files":[{"patch":"@@ -114,30 +114,0 @@\n-\n-        extractJImage(image);\n-        decompileWitJavap(image);\n-    }\n-\n-    static void extractJImage(Path src) {\n-        Path binDir = src.resolve(\"out-jlink-dedup\").toAbsolutePath();\n-        Path outputDir = src.resolve(\"dir\");\n-        Path jimageDir = binDir.resolve(\"lib\", \"modules\");\n-\n-        Result result = JImageGenerator.getJImageTask()\n-                .dir(outputDir)\n-                .image(jimageDir)\n-                .extract();\n-\n-        System.out.println(\"jimage extracted dir \" + result.getFile());\n-        result.assertSuccess();\n-    }\n-\n-    static void decompileWitJavap(Path srcDir) throws Exception {\n-        Path systemModuleClass = srcDir.resolve(\"dir\", \"java.base\", \"jdk\", \"internal\", \"module\", \"SystemModules$all.class\");\n-        JDKToolLauncher javap = JDKToolLauncher.create(\"javap\")\n-                .addToolArg(\"-verbose\")\n-                .addToolArg(\"-p\")       \/\/ Shows all classes and members.\n-                .addToolArg(\"-c\")       \/\/ Prints out disassembled code\n-                .addToolArg(systemModuleClass.toString());\n-        ProcessBuilder pb = new ProcessBuilder(javap.getCommand());\n-        pb.inheritIO();\n-        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n-        out.shouldHaveExitValue(0);\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"}]}