{"files":[{"patch":"@@ -38,1 +38,2 @@\n- * @summary Make sure that modules can be linked using jlink and deduplication works correctly when creating sub methods\n+ * @summary Make sure that modules can be linked using jlink\n+ * and deduplication works correctly when creating sub methods\n@@ -94,1 +95,0 @@\n-                .addMods(\"m2\")\n","filename":"test\/jdk\/tools\/jlink\/JLinkDedupTestBatchSizeOne.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m1\/p1\/AInterface.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,1 +43,3 @@\n-        long subMethodCount = Arrays.stream(moduleClass.getDeclaredMethods()).filter(method -> method.getName().startsWith(\"sub\")).count();\n+        long subMethodCount = Arrays.stream(moduleClass.getDeclaredMethods())\n+                                    .filter(method -> method.getName().startsWith(\"sub\"))\n+                                    .count();\n@@ -45,2 +47,6 @@\n-        if (subMethodCount != MODULE_SUB_METHOD_COUNT) {\n-            throw new AssertionError(\"Difference in generated sub module methods count! Expected: \" + MODULE_SUB_METHOD_COUNT + \" but was \" + subMethodCount);\n+        \/\/ one subX method per each module is generated as the image is linked with\n+        \/\/ --system-modules=batchSize=1\n+        var moduleCount = ModuleFinder.ofSystem().findAll().stream().count();\n+        if (subMethodCount != moduleCount) {\n+            throw new AssertionError(\"Difference in generated sub module methods count! Expected: \" +\n+                    moduleCount + \" but was \" + subMethodCount);\n","filename":"test\/jdk\/tools\/jlink\/dedup\/src\/m4\/p4\/Main.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}