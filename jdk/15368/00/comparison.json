{"files":[{"patch":"@@ -283,1 +283,0 @@\n-   private static final double FACTOR = 1024*1024;\n@@ -285,6 +284,3 @@\n-      if (value < 0) {\n-        tty.println(alignment + title +   (value >>> 20)  + \" MB\");\n-      } else {\n-        double mb = value\/FACTOR;\n-        tty.println(alignment + title + value + \" (\" + mb + \"MB)\");\n-      }\n+       double valueMB = value >>> 20;  \/\/ unsigned divide by 1024*1024\n+       String valueUnsigned = Long.toUnsignedString(value, 10);\n+       tty.println(alignment + title + valueUnsigned + \" (\" + valueMB + \"MB)\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+        \"MaxNewSize\",\n@@ -60,5 +61,2 @@\n-        \"CompressedClassSpaceSize\"};\n-\n-    \/\/ Test can't deal with negative jlongs:\n-    \/\/  ignoring MaxMetaspaceSize\n-    \/\/  ignoring MaxNewSize\n+        \"CompressedClassSpaceSize\",\n+        \"MaxMetaspaceSize\"};\n@@ -155,0 +153,5 @@\n+        System.out.println(\"Jmap Output:\");\n+        for (String line : tmt.getToolOutput()) {\n+            System.out.println(line);\n+        }\n+\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/heapconfig\/JMapHeapConfigTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}