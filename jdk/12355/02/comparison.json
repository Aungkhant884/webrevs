{"files":[{"patch":"@@ -33,1 +33,1 @@\n-    _shared_trampoline_requests = new SharedTrampolineRequests(init_size, max_size);\n+    _shared_trampoline_requests = new (mtCompiler)SharedTrampolineRequests(init_size, max_size);\n","filename":"src\/hotspot\/cpu\/aarch64\/codeBuffer_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    _shared_trampoline_requests = new SharedTrampolineRequests(init_size, max_size);\n+    _shared_trampoline_requests = new (mtCompiler)SharedTrampolineRequests(init_size, max_size);\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,0 +141,4 @@\n+  if (_shared_trampoline_requests != nullptr) {\n+    delete _shared_trampoline_requests;\n+  }\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -406,1 +406,1 @@\n-  typedef ResizeableResourceHashtable<address, Offsets> SharedTrampolineRequests;\n+  typedef ResizeableResourceHashtable<address, Offsets, AnyObj::C_HEAP, mtCompiler> SharedTrampolineRequests;\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                            256, AnyObj::RESOURCE_AREA, mtInternal,\n+                            256, AnyObj::C_HEAP, mtStatistics,\n@@ -128,1 +128,1 @@\n-    _stats(new StatsTable()),\n+    _stats(new (mtStatistics)StatsTable()),\n@@ -135,0 +135,4 @@\n+  ~ClassLoaderStatsClosure() {\n+    delete _stats;\n+  }\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+#include <type_traits>\n+\n@@ -58,0 +60,4 @@\n+  static_assert(ALLOC_TYPE == AnyObj::C_HEAP || std::is_trivially_destructible<K>::value,\n+                \"Destructor for K is only called with C_HEAP\");\n+  static_assert(ALLOC_TYPE == AnyObj::C_HEAP || std::is_trivially_destructible<V>::value,\n+                \"Destructor for V is only called with C_HEAP\");\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}