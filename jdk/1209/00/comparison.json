{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import javax.xml.XMLConstants;\n-import javax.xml.stream.Location;\n@@ -59,1 +57,0 @@\n-    \/** Creates a new instance of XMLStreamFilterImpl *\/\n@@ -61,1 +58,14 @@\n-    public XMLStreamFilterImpl(XMLStreamReader reader,StreamFilter filter){\n+    \/**\n+     * Creates a new instance of XMLStreamFilterImpl, advancing the reader to\n+     * the next event accepted by the filter, if not already positioned on an\n+     * accepted event.\n+     *\n+     * @param reader\n+     *            the reader to filter\n+     * @param filter\n+     *            the filter to apply to the reader\n+     * @throws XMLStreamException\n+     *             when an <code>XMLStreamException<\/code> is thrown when\n+     *             advancing the reader to an accepted event.\n+     **\/\n+    public XMLStreamFilterImpl(XMLStreamReader reader,StreamFilter filter) throws XMLStreamException {\n@@ -67,8 +77,4 @@\n-        try {\n-            if (fStreamFilter.accept(fStreamReader)) {\n-                fEventAccepted = true;\n-            } else {\n-                findNextEvent();\n-            }\n-        }catch(XMLStreamException xs){\n-            System.err.println(\"Error while creating a stream Filter\"+xs);\n+        if (fStreamFilter.accept(fStreamReader)) {\n+            fEventAccepted = true;\n+        } else {\n+            findNextEvent();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xerces\/internal\/impl\/XMLStreamFilterImpl.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.util.Objects;\n+\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+\n+\/**\n+ * JDK-8255918\n+ *\/\n+public class XMLStreamReaderFilterTest {\n+\n+    static final String XMLSOURCE1 = \"<root>\\n\"\n+            + \"  <element1>\\n\"\n+            + \"    <element2>\\n\" \/\/ Unclosed element2\n+            + \"  <\/element1>\\n\"\n+            + \"  <element3>\\n\"\n+            + \"  <\/element3>\\n\"\n+            + \"<\/root>\";\n+\n+    static final String EXPECTED_MESSAGE1 = \"\"\n+            + \"ParseError at [row,col]:[4,5]\\n\"\n+            + \"Message: The element type \\\"element2\\\" must be terminated by the matching end-tag \\\"<\/element2>\\\".\";\n+\n+    public static void main(String[] args) {\n+        testXMLStreamReaderExceptionThrownByConstructor();\n+    }\n+\n+    static void testXMLStreamReaderExceptionThrownByConstructor() {\n+        XMLInputFactory factory = XMLInputFactory.newInstance();\n+        Throwable thrown = null;\n+\n+        try (Reader source = new StringReader(XMLSOURCE1)) {\n+            XMLStreamReader reader = factory.createXMLStreamReader(source);\n+            factory.createFilteredReader(reader, r ->\n+                r.getEventType() == XMLStreamConstants.START_ELEMENT\n+                        && r.getLocalName().equals(\"element3\"));\n+        } catch (Exception e) {\n+            thrown = e;\n+        }\n+\n+        if (!(thrown instanceof XMLStreamException)) {\n+            throw new RuntimeException(\"Missing or unexpected exception type: \" + String.valueOf(thrown));\n+        }\n+\n+        if (!Objects.equals(EXPECTED_MESSAGE1, thrown.getMessage())) {\n+            throw new RuntimeException(\"Unexpected exception message: \" + thrown.getMessage());\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/xml\/jaxp\/parsers\/8255918\/XMLStreamReaderFilterTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}