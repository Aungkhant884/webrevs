{"files":[{"patch":"@@ -57,4 +57,6 @@\n-     * Test that construction of a filtered {@code XMLStreamReader} results in an\n-     * {@code XMLStreamException} thrown when the underlying XML is not valid and\n-     * the filter condition requires that the original reader is advanced past the\n-     * invalid data.\n+     * Verifies that XMLStreamException is thrown as specified by the\n+     * {@code XMLInputFactory::createFilteredReader} method when an error\n+     * is encountered. This test illustrates the scenario by creating a\n+     * reader with a filter that requires the original reader to advance\n+     * past the invalid element in the underlying XML.\n+     *\n@@ -64,2 +66,4 @@\n-    public void testXMLStreamReaderExceptionThrownByConstructor() throws Exception {\n-        StreamFilter filter = r -> r.getEventType() == XMLStreamConstants.START_ELEMENT && r.getLocalName().equals(\"element3\");\n+    public void testCreateFilteredReader() throws Exception {\n+        StreamFilter filter = r -> r.getEventType() == XMLStreamConstants.START_ELEMENT\n+                                && r.getLocalName().equals(\"element3\");\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/stream\/XMLStreamFilterTest\/XMLStreamReaderFilterTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"}]}