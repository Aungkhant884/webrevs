{"files":[{"patch":"@@ -699,0 +699,41 @@\n+            int helperMethodCount = 0;\n+            final String helperMethodNamePrefix = \"moduleDescriptorsSub\";\n+\n+            for (int index = 0; index < moduleInfos.size(); index++) {\n+                if (index % 99 == 0) {\n+                    \/\/ start new child method each 99 module infos\n+                    \/\/ The number 99 is chosen \"randomly\" to be below the 64kb limit of a method\n+\n+                    \/\/ finish last helper method\n+                    if (helperMethodCount > 0) {\n+                        mv.visitInsn(ARETURN);\n+                        mv.visitMaxs(0, 0);\n+                        mv.visitEnd();\n+                    }\n+\n+                    \/\/ create method with name suffix helperMethodCount\n+                    mv = cw.visitMethod(ACC_PUBLIC,\n+                            helperMethodNamePrefix + helperMethodCount,\n+                            \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                            \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                            null);\n+\n+                    helperMethodCount++;\n+                }\n+\n+                ModuleInfo minfo = moduleInfos.get(index);\n+                \/\/ Here, the assignment to the array at position \"index\" is created\n+                new ModuleDescriptorBuilder(\n+                        minfo.descriptor(),\n+                        minfo.packages(),\n+                        index).build();\n+            }\n+\n+            \/\/ finish last helper method\n+            \/\/ same code as above\n+            mv.visitInsn(ARETURN);\n+            mv.visitMaxs(0, 0);\n+            mv.visitEnd();\n+\n+            \/\/ now the content of the method calling the helper methods is generated\n+\n@@ -709,5 +750,8 @@\n-            for (int index = 0; index < moduleInfos.size(); index++) {\n-                ModuleInfo minfo = moduleInfos.get(index);\n-                new ModuleDescriptorBuilder(minfo.descriptor(),\n-                                            minfo.packages(),\n-                                            index).build();\n+            for (int index = 0; index < helperMethodCount; index++) {\n+                \/\/ create call to helperMethod{i}\n+                mv.visitVarInsn(ALOAD, 0);\n+                mv.visitVarInsn(ALOAD, MD_VAR);\n+                mv.visitMethodInsn(INVOKEVIRTUAL, this.className,\n+                        helperMethodNamePrefix + index,\n+                        \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                        false);\n@@ -715,0 +759,1 @@\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":50,"deletions":5,"binary":false,"changes":55,"status":"modified"}]}