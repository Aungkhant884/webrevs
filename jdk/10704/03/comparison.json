{"files":[{"patch":"@@ -699,0 +699,43 @@\n+            int helperMethodCount = 0;\n+            final String helperMethodNamePrefix = \"moduleDescriptorsSub\";\n+\n+            \/\/ The method is \"manually split\" based on the heuristics that 70 ModuleDescriptors are smaller than 64kb\n+            \/\/ The number 70 is chosen \"randomly\" to be below the 64kb limit of a method\n+            \/\/ 99 does not work - see https:\/\/bugs.openjdk.org\/browse\/JDK-8246197\n+            for (int index = 0; index < moduleInfos.size(); index++) {\n+                if (index % 70 == 0) {\n+                    \/\/ start new child method each 70 module infos\n+\n+                    \/\/ finish last helper method\n+                    if (helperMethodCount > 0) {\n+                        mv.visitInsn(RETURN);\n+                        mv.visitMaxs(0, 0);\n+                        mv.visitEnd();\n+                    }\n+\n+                    \/\/ create method with name suffix helperMethodCount\n+                    mv = cw.visitMethod(ACC_PUBLIC,\n+                            helperMethodNamePrefix + helperMethodCount,\n+                            \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                            \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                            null);\n+\n+                    helperMethodCount++;\n+                }\n+\n+                ModuleInfo minfo = moduleInfos.get(index);\n+                \/\/ Here, the assignment to the array at position \"index\" is created\n+                new ModuleDescriptorBuilder(\n+                        minfo.descriptor(),\n+                        minfo.packages(),\n+                        index).build();\n+            }\n+\n+            \/\/ finish last helper method\n+            \/\/ same code as above\n+            mv.visitInsn(RETURN);\n+            mv.visitMaxs(0, 0);\n+            mv.visitEnd();\n+\n+            \/\/ now the content of the method calling the helper methods is generated\n+\n@@ -709,5 +752,8 @@\n-            for (int index = 0; index < moduleInfos.size(); index++) {\n-                ModuleInfo minfo = moduleInfos.get(index);\n-                new ModuleDescriptorBuilder(minfo.descriptor(),\n-                                            minfo.packages(),\n-                                            index).build();\n+            for (int index = 0; index < helperMethodCount; index++) {\n+                \/\/ create call to helperMethod{i}\n+                mv.visitVarInsn(ALOAD, 0);\n+                mv.visitVarInsn(ALOAD, MD_VAR);\n+                mv.visitMethodInsn(INVOKEVIRTUAL, this.className,\n+                        helperMethodNamePrefix + index,\n+                        \"(\" + MODULE_DESCRIPTOR_ARRAY_SIGNATURE + \")V\",\n+                        false);\n@@ -715,0 +761,1 @@\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":52,"deletions":5,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.StringJoiner;\n+\n+\/*\n+ * @test\n+ * @summary Make sure that 100 modules can be linked using jlink.\n+ * @bug 8240567\n+ * @modules jdk.jlink\n+ * @library \/test\/lib\n+ * @run main JLink100Modules\n+ *\/\n+public class JLink100Modules {\n+\n+    public static void main(String[] args) throws Exception {\n+        Path src = Paths.get(\"bug8240567\");\n+\n+        StringJoiner mainModuleInfoContent = new StringJoiner(\"; requires \", \"module mainModules { requires \", \"}\");\n+\n+        \/\/ create 100 modules\n+        for (int i = 0; i<100; i++) {\n+            String name = \"module\" + i;\n+            Path moduleDir = Files.createDirectories(src.resolve(name));\n+            String moduleInfoContent = \"module \" + name + \" {}\";\n+            Files.writeString(moduleDir.resolve(\"module-info.java\"), moduleInfoContent);\n+            mainModuleInfoContent.add(name);\n+        }\n+\n+        \/\/ create module reading the generated modules\n+        Path mainModulePath = src.resolve(\"bug8240567\");\n+        Path mainModuleInfo = mainModulePath.resolve(\"module-info.java\");\n+        Files.writeString(mainModuleInfo, mainModuleInfoContent.toString());\n+\n+\n+    }\n+}\n+\n","filename":"test\/jdk\/tools\/jlink\/JLink100Modules.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}