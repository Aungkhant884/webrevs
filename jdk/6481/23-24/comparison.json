{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.io.IOException;\n@@ -43,1 +44,0 @@\n-import java.util.Arrays;\n@@ -57,3 +57,3 @@\n-        .orElseThrow(() ->\n-            new RuntimeException(\"jar tool not found\")\n-        );\n+            .orElseThrow(() ->\n+                    new RuntimeException(\"jar tool not found\")\n+            );\n@@ -78,13 +78,13 @@\n-        return new Object[][] {\n-                                {\"1980-01-01T00:00:02+00:00\"},\n-                                {\"1986-06-24T01:02:03+00:00\"},\n-                                {\"2022-03-15T00:00:00+00:00\"},\n-                                {\"2022-03-15T00:00:00+06:00\"},\n-                                {\"2021-12-25T09:30:00-08:00[America\/Los_Angeles]\"},\n-                                {\"2021-12-31T23:59:59Z\"},\n-                                {\"2024-06-08T14:24Z\"},\n-                                {\"2026-09-24T16:26-05:00\"},\n-                                {\"2038-11-26T06:06:06+00:00\"},\n-                                {\"2098-02-18T00:00:00-08:00\"},\n-                                {\"2099-12-31T23:59:59+00:00\"}\n-                              };\n+        return new Object[][]{\n+                {\"1980-01-01T00:00:02+00:00\"},\n+                {\"1986-06-24T01:02:03+00:00\"},\n+                {\"2022-03-15T00:00:00+00:00\"},\n+                {\"2022-03-15T00:00:00+06:00\"},\n+                {\"2021-12-25T09:30:00-08:00[America\/Los_Angeles]\"},\n+                {\"2021-12-31T23:59:59Z\"},\n+                {\"2024-06-08T14:24Z\"},\n+                {\"2026-09-24T16:26-05:00\"},\n+                {\"2038-11-26T06:06:06+00:00\"},\n+                {\"2098-02-18T00:00:00-08:00\"},\n+                {\"2099-12-31T23:59:59+00:00\"}\n+        };\n@@ -96,8 +96,8 @@\n-        return new Object[][] {\n-                                {\"1976-06-24T01:02:03+00:00\"},\n-                                {\"1980-01-01T00:00:01+00:00\"},\n-                                {\"2100-01-01T00:00:00+00:00\"},\n-                                {\"2138-02-18T00:00:00-11:00\"},\n-                                {\"2006-04-06T12:38:00\"},\n-                                {\"2012-08-24T16\"}\n-                              };\n+        return new Object[][]{\n+                {\"1976-06-24T01:02:03+00:00\"},\n+                {\"1980-01-01T00:00:01+00:00\"},\n+                {\"2100-01-01T00:00:00+00:00\"},\n+                {\"2138-02-18T00:00:00-11:00\"},\n+                {\"2006-04-06T12:38:00\"},\n+                {\"2012-08-24T16\"}\n+        };\n@@ -107,1 +107,1 @@\n-    public void runBefore() throws Throwable {\n+    public void runBefore() throws IOException {\n@@ -113,1 +113,1 @@\n-    public void runAfter() throws Throwable {\n+    public void runAfter() {\n@@ -122,2 +122,2 @@\n-      * Test jar tool with various valid --date <timestamps>\n-      *\/\n+     * Test jar tool with various valid --date <timestamps>\n+     *\/\n@@ -125,1 +125,1 @@\n-    public void testValidSourceDate(String sourceDate) throws Throwable {\n+    public void testValidSourceDate(String sourceDate) {\n@@ -130,4 +130,4 @@\n-                           \"--create\",\n-                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n-                           \"--date\", sourceDate,\n-                           DIR_OUTER.getName()), 0);\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n@@ -138,2 +138,2 @@\n-                           \"--extract\",\n-                           \"--file\", JAR_FILE_SOURCE_DATE1.getName()), 0);\n+                \"--extract\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName()), 0);\n@@ -144,2 +144,3 @@\n-                                             DateTimeFormatter.ISO_DATE_TIME)\n-                                             .withZoneSameInstant(ZoneOffset.UTC).toLocalDateTime();\n+                        DateTimeFormatter.ISO_DATE_TIME)\n+                .withZoneSameInstant(ZoneOffset.UTC)\n+                .toLocalDateTime();\n@@ -147,1 +148,1 @@\n-                          sourceDate, expectedLdt);\n+                sourceDate, expectedLdt);\n@@ -149,2 +150,2 @@\n-                expectedLdt.toEpochSecond(ZoneId.systemDefault().getRules().getOffset(expectedLdt)),\n-                TimeUnit.SECONDS);\n+                expectedLdt.toEpochSecond(ZoneId.systemDefault().getRules()\n+                        .getOffset(expectedLdt)), TimeUnit.SECONDS);\n@@ -157,2 +158,2 @@\n-      * Test jar tool with various invalid --date <timestamps>\n-      *\/\n+     * Test jar tool with various invalid --date <timestamps>\n+     *\/\n@@ -160,1 +161,1 @@\n-    public void testInvalidSourceDate(String sourceDate) throws Throwable {\n+    public void testInvalidSourceDate(String sourceDate) {\n@@ -163,4 +164,4 @@\n-                           \"--create\",\n-                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n-                           \"--date\", sourceDate,\n-                           DIR_OUTER.getName()), 0);\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n@@ -170,2 +171,2 @@\n-      * Test jar produces deterministic reproducible output\n-      *\/\n+     * Test jar produces deterministic reproducible output\n+     *\/\n@@ -173,1 +174,1 @@\n-    public void testJarsReproducible(String sourceDate) throws Throwable {\n+    public void testJarsReproducible(String sourceDate) throws IOException {\n@@ -176,1 +177,1 @@\n-        TimeZone tzLA   = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone tzLA = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n@@ -179,4 +180,4 @@\n-                           \"--create\",\n-                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n-                           \"--date\", sourceDate,\n-                           DIR_OUTER.getName()), 0);\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n@@ -188,1 +189,2 @@\n-        } catch(InterruptedException ex) {}\n+        } catch (InterruptedException ex) {\n+        }\n@@ -192,4 +194,4 @@\n-                           \"--create\",\n-                           \"--file\", JAR_FILE_SOURCE_DATE2.getName(),\n-                           \"--date\", sourceDate,\n-                           DIR_OUTER.getName()), 0);\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE2.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n@@ -200,1 +202,1 @@\n-                            Files.readAllBytes(JAR_FILE_SOURCE_DATE2.toPath()));\n+                Files.readAllBytes(JAR_FILE_SOURCE_DATE2.toPath()));\n@@ -204,6 +206,6 @@\n-      * Create the standard directory structure used by the test:\n-      * outer\/\n-      *     inner\/\n-      *         foo.txt\n-      *\/\n-    static void createOuterInnerDirs() throws Throwable {\n+     * Create the standard directory structure used by the test:\n+     * outer\/\n+     * inner\/\n+     * foo.txt\n+     *\/\n+    static void createOuterInnerDirs() throws IOException {\n@@ -215,1 +217,0 @@\n-\n@@ -222,4 +223,4 @@\n-      * Check the extracted and original millis since Epoch file times are\n-      * within the zip precision time period.\n-      *\/\n-    static void checkFileTime(long now, long original) throws Throwable {\n+     * Check the extracted and original millis since Epoch file times are\n+     * within the zip precision time period.\n+     *\/\n+    static void checkFileTime(long now, long original) {\n@@ -235,1 +236,1 @@\n-                FileTime.fromMillis(now).toInstant().equals(UNIX_2038_ROLLOVER)) {\n+                    FileTime.fromMillis(now).toInstant().equals(UNIX_2038_ROLLOVER)) {\n@@ -237,2 +238,2 @@\n-                                   \" and extracted file time is \" + UNIX_2038_ROLLOVER_TIME + \", \" +\n-                                   \" Assuming restricted file system, pass file time check.\");\n+                        \" and extracted file time is \" + UNIX_2038_ROLLOVER_TIME + \", \" +\n+                        \" Assuming restricted file system, pass file time check.\");\n@@ -241,2 +242,2 @@\n-                                         \" extracted to \" +  FileTime.fromMillis(now) +\n-                                         \", expected to be close to \" + FileTime.fromMillis(original));\n+                        \" extracted to \" + FileTime.fromMillis(now) +\n+                        \", expected to be close to \" + FileTime.fromMillis(original));\n@@ -248,2 +249,2 @@\n-      * Has the timezone or DST changed during the test?\n-      *\/\n+     * Has the timezone or DST changed during the test?\n+     *\/\n@@ -254,1 +255,2 @@\n-            System.out.println(\"Timezone or DST has changed during ReproducibleJar testcase execution. Test skipped\");\n+            System.out.println(\"Timezone or DST has changed during \" +\n+                    \"ReproducibleJar testcase execution. Test skipped\");\n@@ -262,2 +264,2 @@\n-      * Is the Zone currently within the transition change period?\n-      *\/\n+     * Is the Zone currently within the transition change period?\n+     *\/\n@@ -265,2 +267,1 @@\n-        boolean inTransition = false;\n-\n+        var inTransition = false;\n@@ -274,1 +275,0 @@\n-\n@@ -279,4 +279,3 @@\n-      * Remove the directory and its contents\n-      *\/\n-    static boolean cleanup(File dir) throws Throwable {\n-        boolean rc = true;\n+     * Remove the directory and its contents\n+     *\/\n+    static void cleanup(File dir) {\n@@ -286,1 +285,1 @@\n-                rc &= f.delete();\n+                f.delete();\n@@ -289,1 +288,1 @@\n-        return rc & dir.delete();\n+        dir.delete();\n","filename":"test\/jdk\/tools\/jar\/ReproducibleJar.java","additions":91,"deletions":92,"binary":false,"changes":183,"status":"modified"}]}