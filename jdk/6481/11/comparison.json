{"files":[{"patch":"@@ -37,0 +37,5 @@\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n@@ -191,0 +196,13 @@\n+            new Option(true, OptionType.CREATE_UPDATE_INDEX, \"--date\") {\n+                void process(Main jartool, String opt, String arg) throws BadArgs {\n+                    try {\n+                        jartool.date = ZonedDateTime.parse(arg, DateTimeFormatter.ISO_DATE_TIME)\n+                                           .withZoneSameInstant(ZoneOffset.UTC).toLocalDateTime();\n+                        if (jartool.date.getYear() < 1980 || jartool.date.getYear() > 2099) {\n+                            throw new BadArgs(\"error.date.out.of.range\", arg);\n+                        }\n+                    } catch (DateTimeParseException x) {\n+                        throw new BadArgs(\"error.date.notvalid\", arg);\n+                    }\n+                }\n+            },\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/GNUStyleOptions.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -71,0 +72,2 @@\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n@@ -177,0 +180,3 @@\n+    \/* Date option for entry timestamps resolved to UTC Local time *\/\n+    LocalDateTime date;\n+\n@@ -865,1 +871,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                setDate(e);\n@@ -870,1 +876,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                setDate(e);\n@@ -970,1 +976,1 @@\n-                    e2.setTime(e.getTime());\n+                    setDate(e2, e.getTime());\n@@ -1036,1 +1042,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        setDate(e);\n@@ -1058,1 +1064,1 @@\n-                e.setLastModifiedTime(lastModified);\n+                setDate(e, lastModified.toMillis());\n@@ -1060,1 +1066,1 @@\n-                e.setLastModifiedTime(FileTime.fromMillis(System.currentTimeMillis()));\n+                setDate(e);\n@@ -1086,1 +1092,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        setDate(e);\n@@ -1207,1 +1213,1 @@\n-        e.setTime(file.lastModified());\n+        setDate(e, file.lastModified());\n@@ -2321,0 +2327,14 @@\n+    \/\/ Set the ZipEntry dostime using date if specified otherwise the current time\n+    private void setDate(ZipEntry e) {\n+        setDate(e, System.currentTimeMillis());\n+    }\n+\n+    \/\/ Set the ZipEntry dostime using the date if specified\n+    \/\/ otherwise the original time\n+    private void setDate(ZipEntry e, long origTime) {\n+        if (date != null) {\n+          e.setTimeLocal(date);\n+        } else {\n+          e.setTime(origTime);\n+        }\n+    }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,4 @@\n+error.date.notvalid=\\\n+        date {0} is not a valid ISO 8601 date and time\n+error.date.out.of.range=\\\n+        date {0} is not within the valid year range 1980->2099 \n@@ -293,0 +297,3 @@\n+main.help.opt.create.update.index.date=\\\n+\\      --date=TIMESTAMP       The timestamp in ISO 8601 format to use\\n\\\n+\\                             for entry timestamps\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.time.LocalDateTime;\n@@ -57,1 +58,1 @@\n-    static JmodOutputStream newOutputStream(Path file) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, LocalDateTime date) throws IOException {\n@@ -60,1 +61,1 @@\n-        return new JmodOutputStream(bos);\n+        return new JmodOutputStream(bos, date);\n@@ -64,1 +65,2 @@\n-    private JmodOutputStream(OutputStream out) {\n+    private final LocalDateTime   date;\n+    private JmodOutputStream(OutputStream out, LocalDateTime date) {\n@@ -66,0 +68,1 @@\n+        this.date = date;\n@@ -107,1 +110,5 @@\n-        e2.setTime(e1.getTime());\n+        if (date != null) {\n+            e2.setTimeLocal(date);\n+        } else {\n+            e2.setTime(e1.getTime());\n+        }\n@@ -127,1 +134,5 @@\n-        return new ZipEntry(name);\n+        ZipEntry zipEntry = new ZipEntry(name);\n+        if (date != null) {\n+            zipEntry.setTimeLocal(date);\n+        }\n+        return zipEntry;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -65,0 +65,5 @@\n+import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n@@ -163,0 +168,1 @@\n+        LocalDateTime date;\n@@ -430,1 +436,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date)) {\n@@ -987,1 +993,5 @@\n-                            ze.setTime(System.currentTimeMillis());\n+                            if (options.date != null) {\n+                                ze.setTimeLocal(options.date);\n+                            } else {\n+                                ze.setTime(System.currentTimeMillis());\n+                            }\n@@ -1015,1 +1025,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date))\n@@ -1150,0 +1160,20 @@\n+    static class DateConverter implements ValueConverter<LocalDateTime> {\n+        @Override\n+        public LocalDateTime convert(String value) {\n+            try {\n+                LocalDateTime date = ZonedDateTime.parse(value, DateTimeFormatter.ISO_DATE_TIME)\n+                                         .withZoneSameInstant(ZoneOffset.UTC).toLocalDateTime();\n+                if (date.getYear() < 1980 || date.getYear() > 2099) {\n+                    throw new CommandException(\"err.date.out.of.range\", value);\n+                }\n+                return date;\n+            } catch (DateTimeParseException x) {\n+                throw new CommandException(\"err.invalid.date\", value, x.getMessage());\n+            }\n+        }\n+\n+        @Override public Class<LocalDateTime> valueType() { return LocalDateTime.class; }\n+\n+        @Override public String valuePattern() { return \"date\"; }\n+    }\n+\n@@ -1385,0 +1415,5 @@\n+        OptionSpec<LocalDateTime> date\n+                = parser.accepts(\"date\", getMessage(\"main.opt.date\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new DateConverter());\n+\n@@ -1428,0 +1463,2 @@\n+            if (opts.has(date))\n+                options.date = opts.valueOf(date);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,1 @@\n+main.opt.date=Date and time to timestamp entries with specified in ISO 8601 format \n@@ -109,0 +110,2 @@\n+err.invalid.date=--date {0} is not a valid ISO 8601 date and time: {1} \n+err.date.out.of.range=--date {0} is out of the valid year range 1980->2099\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4225317 6969651\n+ * @bug 4225317 6969651 8276766\n@@ -37,0 +37,6 @@\n+import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.TimeUnit;\n@@ -88,0 +94,1 @@\n+        File jarFileSourceDate = new File(\"JarEntryTimeSourceDate.jar\");\n@@ -165,0 +172,52 @@\n+        \/\/ Test --date source date\n+        String[] sourceDates = {\"1986-06-24T01:02:03+00:00\",\n+                                \"2022-03-15T00:00:00+00:00\",\n+                                \"2022-03-15T00:00:00+06:00\",\n+                                \"2038-11-26T06:06:06+00:00\",\n+                                \"2098-02-18T00:00:00-08:00\"};\n+        for (String sourceDate : sourceDates) {\n+            jarFileSourceDate.delete();\n+            createOuterInnerDirs(dirOuter, dirInner);\n+            check(JAR_TOOL.run(System.out, System.err,\n+                           \"--create\",\n+                           \"--file\", jarFileSourceDate.getName(),\n+                           \"--date\", sourceDate,\n+                           dirOuter.getName()) == 0);\n+            check(jarFileSourceDate.exists());\n+\n+            \/\/ Extract jarFileSourceDate and check last modified values\n+            extractJar(jarFileSourceDate, false);\n+            check(dirOuter.exists());\n+            check(dirInner.exists());\n+            check(fileInner.exists());\n+            LocalDateTime expectedLdt = ZonedDateTime.parse(sourceDate,\n+                                             DateTimeFormatter.ISO_DATE_TIME)\n+                                             .withZoneSameInstant(ZoneOffset.UTC).toLocalDateTime();\n+            System.out.format(\"Checking jar entries local date time for --date %s, is %s%n\",\n+                              sourceDate, expectedLdt);\n+            long sourceDateEpochMillis = TimeUnit.MILLISECONDS.convert(\n+                expectedLdt.toEpochSecond(ZoneId.systemDefault().getRules().getOffset(expectedLdt)),\n+                TimeUnit.SECONDS);\n+            checkFileTime(dirOuter.lastModified(), sourceDateEpochMillis);\n+            checkFileTime(dirInner.lastModified(), sourceDateEpochMillis);\n+            checkFileTime(fileInner.lastModified(), sourceDateEpochMillis);\n+\n+            check(cleanup(dirInner));\n+            check(cleanup(dirOuter));\n+        }\n+\n+        \/\/ Negative Tests --date out of range source date\n+        String[] badSourceDates = {\"1976-06-24T01:02:03+00:00\",\n+                                   \"2100-02-18T00:00:00-11:00\"};\n+        for (String sourceDate : badSourceDates) {\n+            createOuterInnerDirs(dirOuter, dirInner);\n+            check(JAR_TOOL.run(System.out, System.err,\n+                           \"--create\",\n+                           \"--file\", jarFileSourceDate.getName(),\n+                           \"--date\", sourceDate,\n+                           dirOuter.getName()) != 0);\n+\n+            check(cleanup(dirInner));\n+            check(cleanup(dirOuter));\n+        }\n+\n@@ -166,0 +225,1 @@\n+        check(jarFileSourceDate.delete());\n@@ -169,0 +229,27 @@\n+    static void createOuterInnerDirs(File dirOuter, File dirInner) throws Throwable {\n+        \/* Create a directory structure\n+         * outer\/\n+         *     inner\/\n+         *         foo.txt\n+         * Set the lastModified dates so that outer is created now, inner\n+         * yesterday, and foo.txt created \"earlier\".\n+         *\/\n+        check(dirOuter.mkdir());\n+        check(dirInner.mkdir());\n+        File fileInner = new File(dirInner, \"foo.txt\");\n+        try (PrintWriter pw = new PrintWriter(fileInner)) {\n+            pw.println(\"hello, world\");\n+        }\n+\n+        \/\/ Get the \"now\" from the \"last-modified-time\" of the last file we\n+        \/\/ just created, instead of the \"System.currentTimeMillis()\", to\n+        \/\/ workaround the possible \"time difference\" due to nfs.\n+        final long now = fileInner.lastModified();\n+        final long earlier = now - (60L * 60L * 6L * 1000L);\n+        final long yesterday = now - (60L * 60L * 24L * 1000L);\n+\n+        check(dirOuter.setLastModified(now));\n+        check(dirInner.setLastModified(yesterday));\n+        check(fileInner.setLastModified(earlier));\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/JarEntryTime.java","additions":89,"deletions":2,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276764\n+ * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276764 8276766\n@@ -186,0 +186,2 @@\n+        Path jmod = MODS_DIR.resolve(\"foo.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n@@ -188,1 +190,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -192,1 +194,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -214,0 +216,58 @@\n+    @Test\n+    public void testSourceDateReproducible() throws IOException {\n+        String cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\").toString();\n+        Path jmod1 = MODS_DIR.resolve(\"foo1.jmod\");\n+        Path jmod2 = MODS_DIR.resolve(\"foo2.jmod\");\n+        Path jmod3 = MODS_DIR.resolve(\"foo3.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod1);\n+        FileUtils.deleteFileIfExistsWithRetry(jmod2);\n+        FileUtils.deleteFileIfExistsWithRetry(jmod3);\n+\n+        \/\/ Use source date of 15\/03\/2022\n+        String sourceDate = \"2022-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod1.toString())\n+            .assertSuccess();\n+\n+        try {\n+            \/\/ Sleep 5 seconds to ensure zip timestamps might be different if they could be\n+            Thread.sleep(5000);\n+        } catch(InterruptedException ex) {}\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod2.toString())\n+            .assertSuccess();\n+\n+        \/\/ Compare file byte content to see if they are identical\n+        assertSameContent(jmod1, jmod2);\n+\n+        \/\/ Use a date before 1980 and assert failure error\n+        sourceDate = \"1976-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod3.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertContains(r.output, \"is out of the valid year range 1980->2099\");\n+            });\n+\n+        \/\/ Use a date after 2099 and assert failure error\n+        sourceDate = \"2100-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod3.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertContains(r.output, \"is out of the valid year range 1980->2099\");\n+            });\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"}]}