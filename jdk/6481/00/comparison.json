{"files":[{"patch":"@@ -191,0 +191,9 @@\n+            new Option(true, OptionType.CREATE_UPDATE_INDEX, \"--source-date\") {\n+                void process(Main jartool, String opt, String arg) throws BadArgs {\n+                    try {\n+                        jartool.sourceDate = Long.parseLong(arg);\n+                    } catch (NumberFormatException x) {\n+                        throw new BadArgs(\"error.source.date.notnumber\", arg);\n+                    }\n+                }\n+            },\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/GNUStyleOptions.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,3 @@\n+    \/* Source date option for entry timestamps *\/\n+    long sourceDate = -1;\n+\n@@ -849,1 +852,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                e.setTime(getSourceDate());\n@@ -854,1 +857,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                e.setTime(getSourceDate());\n@@ -954,1 +957,1 @@\n-                    e2.setTime(e.getTime());\n+                    e2.setTime(getSourceDate(e.getTime()));\n@@ -1020,1 +1023,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        e.setTime(getSourceDate());\n@@ -1039,1 +1042,1 @@\n-            e.setTime(System.currentTimeMillis());\n+            e.setTime(getSourceDate());\n@@ -1064,1 +1067,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        e.setTime(getSourceDate());\n@@ -1185,1 +1188,1 @@\n-        e.setTime(file.lastModified());\n+        e.setTime(getSourceDate(file.lastModified()));\n@@ -2264,0 +2267,13 @@\n+    \/\/ Return sourceDate if specified othewise the current time\n+    private long getSourceDate() {\n+        return getSourceDate(System.currentTimeMillis());\n+    }\n+\n+    \/\/ Return the sourceDate if specified otherwise the original time\n+    private long getSourceDate(long origTime) {\n+        if (sourceDate != -1) {\n+          return sourceDate;\n+        } else {\n+          return origTime;\n+        }\n+    }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,2 @@\n+error.source.date.notnumber=\\\n+        source date {0} is not a valid long integer\n@@ -293,0 +295,3 @@\n+main.help.opt.create.update.index.source-date=\\\n+\\      --source-date=TIMESTAMP    The epoch timestamp in milliseconds to use\\n\\\n+\\                             for entry timestamps\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,6 @@\n+.TP\n+.B \\f[CB]\\-\\-source\\-date=\\f[R]\\f[I]TIMESTAMP\\f[R]\n+The timestamp in milliseconds since the epoch to use for all created\n+or updated jar entries.\n+.RS\n+.RE\n","filename":"src\/jdk.jartool\/share\/man\/jar.1","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    static JmodOutputStream newOutputStream(Path file) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, long sourceDate) throws IOException {\n@@ -60,1 +60,1 @@\n-        return new JmodOutputStream(bos);\n+        return new JmodOutputStream(bos, sourceDate);\n@@ -64,1 +64,2 @@\n-    private JmodOutputStream(OutputStream out) {\n+    private final long            sourceDate;\n+    private JmodOutputStream(OutputStream out, long sourceDate) {\n@@ -66,0 +67,1 @@\n+        this.sourceDate = sourceDate;\n@@ -107,1 +109,5 @@\n-        e2.setTime(e1.getTime());\n+        if (sourceDate != -1) {\n+            e2.setTime(sourceDate);\n+        } else {\n+            e2.setTime(e1.getTime());\n+        }\n@@ -127,1 +133,5 @@\n-        return new ZipEntry(name);\n+        ZipEntry zipEntry = new ZipEntry(name);\n+        if (sourceDate != -1) {\n+            zipEntry.setTime(sourceDate);\n+        }\n+        return zipEntry;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,0 +163,1 @@\n+        long sourceDate;\n@@ -430,1 +431,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.sourceDate)) {\n@@ -976,1 +977,5 @@\n-                            ze.setTime(System.currentTimeMillis());\n+                            if (options.sourceDate != -1) {\n+                                ze.setTime(options.sourceDate);\n+                            } else {\n+                                ze.setTime(System.currentTimeMillis());\n+                            }\n@@ -1004,1 +1009,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.sourceDate))\n@@ -1139,0 +1144,15 @@\n+    static class SourceDateConverter implements ValueConverter<Long> {\n+        @Override\n+        public Long convert(String value) {\n+            try {\n+                return Long.valueOf(value);\n+            } catch (NumberFormatException x) {\n+                throw new CommandException(\"err.invalid.source.date\", x.getMessage());\n+            }\n+        }\n+\n+        @Override public Class<Long> valueType() { return Long.class; }\n+\n+        @Override public String valuePattern() { return \"source-date\"; }\n+    }\n+\n@@ -1374,0 +1394,5 @@\n+        OptionSpec<Long> sourceDate\n+                = parser.accepts(\"source-date\", getMessage(\"main.opt.source-date\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new SourceDateConverter());\n+\n@@ -1417,0 +1442,4 @@\n+            if (opts.has(sourceDate))\n+                options.sourceDate = opts.valueOf(sourceDate).longValue();\n+            else\n+                options.sourceDate = -1;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,1 @@\n+main.opt.source-date=Epoch source date to timestamp entries with in milliseconds\n@@ -109,0 +110,1 @@\n+err.invalid.source.date=--source-date {0} is not a long integer\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,0 +217,6 @@\n+.B \\f[CB]\\-\\-source\\-date=\\f[R]\\f[I]TIMESTAMP\\f[R]\n+The timestamp in milliseconds since the epoch to use for all created\n+or updated jmod entries.\n+.RS\n+.RE\n+.TP\n","filename":"src\/jdk.jlink\/share\/man\/jmod.1","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4225317 6969651\n+ * @bug 4225317 6969651 8276766\n@@ -88,0 +88,1 @@\n+        File jarFileSourceDate = new File(\"JarEntryTimeSourceDate.jar\");\n@@ -126,0 +127,10 @@\n+        \/\/ Make a jar file from that directory structure with\n+        \/\/ --source-date set to 1647302400000 (15\/03\/2022)\n+        long sourceDate = 1647302400000L;\n+        check(JAR_TOOL.run(System.out, System.err,\n+                           \"--create\",\n+                           \"--file\", jarFileSourceDate.getName(),\n+                           \"--source-date\", String.valueOf(sourceDate),\n+                           dirOuter.getName()) == 0);\n+        check(jarFileSourceDate.exists());\n+\n@@ -165,0 +176,12 @@\n+        \/\/ Extract jarFileSourceDate and check last modified values\n+        extractJar(jarFileSourceDate, false);\n+        check(dirOuter.exists());\n+        check(dirInner.exists());\n+        check(fileInner.exists());\n+        checkFileTime(dirOuter.lastModified(), sourceDate);\n+        checkFileTime(dirInner.lastModified(), sourceDate);\n+        checkFileTime(fileInner.lastModified(), sourceDate);\n+\n+        check(cleanup(dirInner));\n+        check(cleanup(dirOuter));\n+\n@@ -166,0 +189,1 @@\n+        check(jarFileSourceDate.delete());\n","filename":"test\/jdk\/tools\/jar\/JarEntryTime.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8142968 8166568 8166286 8170618 8168149 8240910\n+ * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276766\n@@ -186,0 +186,2 @@\n+        Path jmod = MODS_DIR.resolve(\"foo.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n@@ -188,1 +190,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -192,1 +194,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -203,0 +205,32 @@\n+    @Test\n+    public void testSourceDateReproducible() throws IOException {\n+        String cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\").toString();\n+        Path jmod1 = MODS_DIR.resolve(\"foo1.jmod\");\n+        Path jmod2 = MODS_DIR.resolve(\"foo2.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod1);\n+        FileUtils.deleteFileIfExistsWithRetry(jmod2);\n+\n+        \/\/ Use source date of 15\/03\/2022\n+        long sourceDate = 1647302400000L;\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--source-date\", String.valueOf(sourceDate),\n+             jmod1.toString())\n+            .assertSuccess();\n+\n+        try {\n+            \/\/ Sleep 5 seconds to ensure zip timestamps might be different if they could be\n+            Thread.sleep(5000);\n+        } catch(InterruptedException ex) {}\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--source-date\", String.valueOf(sourceDate),\n+             jmod2.toString())\n+            .assertSuccess();\n+\n+        \/\/ Compare file byte content to see if they are identical\n+        assertSameContent(jmod1, jmod2);\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"}]}