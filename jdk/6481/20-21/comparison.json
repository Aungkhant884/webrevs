{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @run testng ReproducibleJar\n+ * @run testng\/othervm ReproducibleJar\n@@ -43,1 +43,0 @@\n-import java.time.ZoneId;\n@@ -67,28 +66,7 @@\n-    private static final String unix2038RolloverTime = \"2038-01-19T03:14:07Z\";\n-    private static final Instant unix2038Rollover = Instant.parse(unix2038RolloverTime);\n-    private static final File dirOuter = new File(\"outer\");\n-    private static final File dirInner = new File(dirOuter, \"inner\");\n-    private static final File fileInner = new File(dirInner, \"foo.txt\");\n-    private static final File jarFileSourceDate1 = new File(\"JarEntryTimeSourceDate1.jar\");\n-    private static final File jarFileSourceDate2 = new File(\"JarEntryTimeSourceDate2.jar\");\n-\n-    private static final String[] sourceDates =\n-                               {\"1980-01-01T00:00:02+00:00\",\n-                                \"1986-06-24T01:02:03+00:00\",\n-                                \"2022-03-15T00:00:00+00:00\",\n-                                \"2022-03-15T00:00:00+06:00\",\n-                                \"2021-12-25T09:30:00-08:00[America\/Los_Angeles]\",\n-                                \"2021-12-31T23:59:59Z\",\n-                                \"2024-06-08T14:24Z\",\n-                                \"2026-09-24T16:26-05:00\",\n-                                \"2038-11-26T06:06:06+00:00\",\n-                                \"2098-02-18T00:00:00-08:00\",\n-                                \"2099-12-31T23:59:59+00:00\"};\n-\n-    private static final String[] badSourceDates =\n-                                {\"1976-06-24T01:02:03+00:00\",\n-                                 \"1980-01-01T00:00:01+00:00\",\n-                                 \"2100-01-01T00:00:00+00:00\",\n-                                 \"2138-02-18T00:00:00-11:00\",\n-                                 \"2006-04-06T12:38:00\",\n-                                 \"2012-08-24T16\"};\n+    private static final String UNIX_2038_ROLLOVER_TIME = \"2038-01-19T03:14:07Z\";\n+    private static final Instant UNIX_2038_ROLLOVER = Instant.parse(UNIX_2038_ROLLOVER_TIME);\n+    private static final File DIR_OUTER = new File(\"outer\");\n+    private static final File DIR_INNER = new File(DIR_OUTER, \"inner\");\n+    private static final File FILE_INNER = new File(DIR_INNER, \"foo.txt\");\n+    private static final File JAR_FILE_SOURCE_DATE1 = new File(\"JarEntryTimeSourceDate1.jar\");\n+    private static final File JAR_FILE_SOURCE_DATE2 = new File(\"JarEntryTimeSourceDate2.jar\");\n@@ -98,5 +76,2 @@\n-        cleanup(dirInner);\n-        cleanup(dirOuter);\n-        jarFileSourceDate1.delete();\n-        jarFileSourceDate2.delete();\n-        TimeZone.setDefault(TZ);\n+        runAfter();\n+        createOuterInnerDirs();\n@@ -107,4 +82,4 @@\n-        cleanup(dirInner);\n-        cleanup(dirOuter);\n-        jarFileSourceDate1.delete();\n-        jarFileSourceDate2.delete();\n+        cleanup(DIR_INNER);\n+        cleanup(DIR_OUTER);\n+        JAR_FILE_SOURCE_DATE1.delete();\n+        JAR_FILE_SOURCE_DATE2.delete();\n@@ -114,2 +89,5 @@\n-    @Test\n-    public void testSourceDate() throws Throwable {\n+    \/**\n+      * Test jar tool with various valid --date <timestamps>\n+      *\/\n+    @Test(dataProvider = \"SourceDateData.valid\", dataProviderClass = SourceDateDataProvider.class)\n+    public void testValidSourceDate(String sourceDate) throws Throwable {\n@@ -119,3 +97,1 @@\n-        for (String sourceDate : sourceDates) {\n-            createOuterInnerDirs(dirOuter, dirInner);\n-            Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n@@ -123,1 +99,1 @@\n-                           \"--file\", jarFileSourceDate1.getName(),\n+                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n@@ -125,2 +101,2 @@\n-                           dirOuter.getName()), 0);\n-            Assert.assertTrue(jarFileSourceDate1.exists());\n+                           DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE1.exists());\n@@ -128,6 +104,8 @@\n-            \/\/ Extract jarFileSourceDate1 and check last modified values\n-            extractJar(jarFileSourceDate1);\n-            Assert.assertTrue(dirOuter.exists());\n-            Assert.assertTrue(dirInner.exists());\n-            Assert.assertTrue(fileInner.exists());\n-            LocalDateTime expectedLdt = ZonedDateTime.parse(sourceDate,\n+        \/\/ Extract JAR_FILE_SOURCE_DATE1 and check last modified values\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+                           \"--extract\",\n+                           \"--file\", JAR_FILE_SOURCE_DATE1.getName()), 0);\n+        Assert.assertTrue(DIR_OUTER.exists());\n+        Assert.assertTrue(DIR_INNER.exists());\n+        Assert.assertTrue(FILE_INNER.exists());\n+        LocalDateTime expectedLdt = ZonedDateTime.parse(sourceDate,\n@@ -136,3 +114,3 @@\n-            System.out.format(\"Checking jar entries local date time for --date %s, is %s%n\",\n-                              sourceDate, expectedLdt);\n-            long sourceDateEpochMillis = TimeUnit.MILLISECONDS.convert(\n+        System.out.format(\"Checking jar entries local date time for --date %s, is %s%n\",\n+                          sourceDate, expectedLdt);\n+        long sourceDateEpochMillis = TimeUnit.MILLISECONDS.convert(\n@@ -141,8 +119,3 @@\n-            checkFileTime(dirOuter.lastModified(), sourceDateEpochMillis);\n-            checkFileTime(dirInner.lastModified(), sourceDateEpochMillis);\n-            checkFileTime(fileInner.lastModified(), sourceDateEpochMillis);\n-\n-            cleanup(dirInner);\n-            cleanup(dirOuter);\n-            jarFileSourceDate1.delete();\n-        }\n+        checkFileTime(DIR_OUTER.lastModified(), sourceDateEpochMillis);\n+        checkFileTime(DIR_INNER.lastModified(), sourceDateEpochMillis);\n+        checkFileTime(FILE_INNER.lastModified(), sourceDateEpochMillis);\n@@ -151,2 +124,5 @@\n-    @Test\n-    public void testInvalidSourceDate() throws Throwable {\n+    \/**\n+      * Test jar tool with various invalid --date <timestamps>\n+      *\/\n+    @Test(dataProvider = \"SourceDateData.invalid\", dataProviderClass = SourceDateDataProvider.class)\n+    public void testInvalidSourceDate(String sourceDate) throws Throwable {\n@@ -154,3 +130,1 @@\n-        createOuterInnerDirs(dirOuter, dirInner);\n-        for (String sourceDate : badSourceDates) {\n-            Assert.assertNotEquals(JAR_TOOL.run(System.out, System.err,\n+        Assert.assertNotEquals(JAR_TOOL.run(System.out, System.err,\n@@ -158,1 +132,1 @@\n-                           \"--file\", jarFileSourceDate1.getName(),\n+                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n@@ -160,2 +134,1 @@\n-                           dirOuter.getName()), 0);\n-        }\n+                           DIR_OUTER.getName()), 0);\n@@ -164,2 +137,5 @@\n-    @Test\n-    public void testJarsReproducible() throws Throwable {\n+    \/**\n+      * Test jar produces deterministic reproducible output\n+      *\/\n+    @Test(dataProvider = \"SourceDateData.valid\", dataProviderClass = SourceDateDataProvider.class)\n+    public void testJarsReproducible(String sourceDate) throws Throwable {\n@@ -169,4 +145,2 @@\n-        for (String sourceDate : sourceDates) {\n-            createOuterInnerDirs(dirOuter, dirInner);\n-            TimeZone.setDefault(tzAsia);\n-            Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+        TimeZone.setDefault(tzAsia);\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n@@ -174,1 +148,1 @@\n-                           \"--file\", jarFileSourceDate1.getName(),\n+                           \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n@@ -176,2 +150,2 @@\n-                           dirOuter.getName()), 0);\n-            Assert.assertTrue(jarFileSourceDate1.exists());\n+                           DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE1.exists());\n@@ -179,4 +153,4 @@\n-            try {\n-                \/\/ Sleep 5 seconds to ensure jar timestamps might be different if they could be\n-                Thread.sleep(5000);\n-            } catch(InterruptedException ex) {}\n+        try {\n+            \/\/ Sleep 5 seconds to ensure jar timestamps might be different if they could be\n+            Thread.sleep(5000);\n+        } catch(InterruptedException ex) {}\n@@ -184,2 +158,2 @@\n-            TimeZone.setDefault(tzLA);\n-            Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+        TimeZone.setDefault(tzLA);\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n@@ -187,1 +161,1 @@\n-                           \"--file\", jarFileSourceDate2.getName(),\n+                           \"--file\", JAR_FILE_SOURCE_DATE2.getName(),\n@@ -189,2 +163,2 @@\n-                           dirOuter.getName()), 0);\n-            Assert.assertTrue(jarFileSourceDate2.exists());\n+                           DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE2.exists());\n@@ -192,8 +166,3 @@\n-            \/\/ Check jars are identical\n-            checkSameContent(jarFileSourceDate1, jarFileSourceDate2);\n-\n-            cleanup(dirInner);\n-            cleanup(dirOuter);\n-            jarFileSourceDate1.delete();\n-            jarFileSourceDate2.delete();\n-        }\n+        \/\/ Check jars are identical\n+        Assert.assertEquals(Files.readAllBytes(JAR_FILE_SOURCE_DATE1.toPath()),\n+                            Files.readAllBytes(JAR_FILE_SOURCE_DATE2.toPath()));\n@@ -202,9 +171,10 @@\n-    static void createOuterInnerDirs(File dirOuter, File dirInner) throws Throwable {\n-        \/* Create a directory structure\n-         * outer\/\n-         *     inner\/\n-         *         foo.txt\n-         *\/\n-        Assert.assertTrue(dirOuter.mkdir());\n-        Assert.assertTrue(dirInner.mkdir());\n-        try (PrintWriter pw = new PrintWriter(fileInner)) {\n+    \/**\n+      * Create the standard directory structure used by the test:\n+      * outer\/\n+      *     inner\/\n+      *         foo.txt\n+      *\/\n+    static void createOuterInnerDirs() throws Throwable {\n+        Assert.assertTrue(DIR_OUTER.mkdir());\n+        Assert.assertTrue(DIR_INNER.mkdir());\n+        try (PrintWriter pw = new PrintWriter(FILE_INNER)) {\n@@ -214,3 +184,3 @@\n-        Assert.assertTrue(dirOuter.exists());\n-        Assert.assertTrue(dirInner.exists());\n-        Assert.assertTrue(fileInner.exists());\n+        Assert.assertTrue(DIR_OUTER.exists());\n+        Assert.assertTrue(DIR_INNER.exists());\n+        Assert.assertTrue(FILE_INNER.exists());\n@@ -219,0 +189,4 @@\n+    \/**\n+      * Check the extracted and original millis since Epoch file times are\n+      * within the zip precision time period.\n+      *\/\n@@ -228,2 +202,2 @@\n-            if (FileTime.fromMillis(original).toInstant().isAfter(unix2038Rollover) &&\n-                FileTime.fromMillis(now).toInstant().equals(unix2038Rollover)) {\n+            if (FileTime.fromMillis(original).toInstant().isAfter(UNIX_2038_ROLLOVER) &&\n+                FileTime.fromMillis(now).toInstant().equals(UNIX_2038_ROLLOVER)) {\n@@ -231,1 +205,1 @@\n-                                   \" and extracted file time is \" + unix2038RolloverTime + \", \" +\n+                                   \" and extracted file time is \" + UNIX_2038_ROLLOVER_TIME + \", \" +\n@@ -241,8 +215,3 @@\n-    static void checkSameContent(File f1, File f2) throws Throwable {\n-        byte[] ba1 = Files.readAllBytes(f1.toPath());\n-        byte[] ba2 = Files.readAllBytes(f2.toPath());\n-        if (!Arrays.equals(ba1, ba2)) {\n-            throw new AssertionError(\"jar content differs:\" + f1 + \" != \" + f2);\n-        }\n-    }\n-\n+    \/**\n+      * Has the timezone or DST changed during the test?\n+      *\/\n@@ -260,0 +229,3 @@\n+    \/**\n+      * Is the Zone currently within the transition change period?\n+      *\/\n@@ -274,0 +246,3 @@\n+    \/**\n+      * Remove the directory and its contents\n+      *\/\n@@ -278,2 +253,2 @@\n-            for (int i = 0; i < x.length; i++) {\n-                rc &= x[i].delete();\n+            for (File f : x) {\n+                rc &= f.delete();\n@@ -284,12 +259,0 @@\n-\n-    static void extractJar(File jarFile) throws Throwable {\n-        String javahome = System.getProperty(\"java.home\");\n-        String jarcmd = javahome + File.separator + \"bin\" + File.separator + \"jar\";\n-        String[] args;\n-        args = new String[] {\n-                jarcmd,\n-                \"xf\",\n-                jarFile.getName() };\n-        Process p = Runtime.getRuntime().exec(args);\n-        Assert.assertTrue(p != null && (p.waitFor() == 0));\n-    }\n","filename":"test\/jdk\/tools\/jar\/ReproducibleJar.java","additions":98,"deletions":135,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.DataProvider;\n+\n+\/** TestNG DataProvider for SourceDate values *\/\n+public class SourceDateDataProvider {\n+\n+    private static final Object[][] validSourceDates = {\n+                                 {\"1980-01-01T00:00:02+00:00\"},\n+                                 {\"1986-06-24T01:02:03+00:00\"},\n+                                 {\"2022-03-15T00:00:00+00:00\"},\n+                                 {\"2022-03-15T00:00:00+06:00\"},\n+                                 {\"2021-12-25T09:30:00-08:00[America\/Los_Angeles]\"},\n+                                 {\"2021-12-31T23:59:59Z\"},\n+                                 {\"2024-06-08T14:24Z\"},\n+                                 {\"2026-09-24T16:26-05:00\"},\n+                                 {\"2038-11-26T06:06:06+00:00\"},\n+                                 {\"2098-02-18T00:00:00-08:00\"},\n+                                 {\"2099-12-31T23:59:59+00:00\"}\n+                               };\n+\n+    private static final Object[][] invalidSourceDates = {\n+                                 {\"1976-06-24T01:02:03+00:00\"},\n+                                 {\"1980-01-01T00:00:01+00:00\"},\n+                                 {\"2100-01-01T00:00:00+00:00\"},\n+                                 {\"2138-02-18T00:00:00-11:00\"},\n+                                 {\"2006-04-06T12:38:00\"},\n+                                 {\"2012-08-24T16\"}\n+                               };\n+\n+    @DataProvider(name = \"SourceDateData.valid\")\n+    public static Object[][] makeValidSourceDataData() {\n+        return validSourceDates;\n+    }\n+\n+    @DataProvider(name = \"SourceDateData.invalid\")\n+    public static Object[][] makeInvalidSourceDataData() {\n+        return invalidSourceDates;\n+    }\n+\n+}\n+\n","filename":"test\/jdk\/tools\/jar\/SourceDateDataProvider.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}