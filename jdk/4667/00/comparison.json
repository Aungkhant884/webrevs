{"files":[{"patch":"@@ -84,8 +84,0 @@\n-  \/\/ Someone could have modified the value of the static\n-  \/\/ field in the j.l.r.SoftReference class that holds the\n-  \/\/ soft reference timestamp clock using reflection or\n-  \/\/ Unsafe between GCs. Unconditionally update the static\n-  \/\/ field in ReferenceProcessor here so that we use the new\n-  \/\/ value during reference discovery.\n-\n-  _soft_ref_timestamp_clock = java_lang_ref_SoftReference::clock();\n@@ -159,2 +151,0 @@\n-  jlong soft_ref_clock = java_lang_ref_SoftReference::clock();\n-  assert(soft_ref_clock == _soft_ref_timestamp_clock, \"soft ref clocks out of sync\");\n@@ -204,10 +194,0 @@\n-  \/\/ If discovery was concurrent, someone could have modified\n-  \/\/ the value of the static field in the j.l.r.SoftReference\n-  \/\/ class that holds the soft reference timestamp clock using\n-  \/\/ reflection or Unsafe between when discovery was enabled and\n-  \/\/ now. Unconditionally update the static field in ReferenceProcessor\n-  \/\/ here so that we use the new value during processing of the\n-  \/\/ discovered soft refs.\n-\n-  _soft_ref_timestamp_clock = java_lang_ref_SoftReference::clock();\n-\n@@ -219,5 +199,0 @@\n-  {\n-    RefProcTotalPhaseTimesTracker tt(RefPhase1, &phase_times);\n-    process_soft_ref_reconsider(proxy_task, phase_times);\n-  }\n-\n@@ -227,1 +202,1 @@\n-    RefProcTotalPhaseTimesTracker tt(RefPhase2, &phase_times);\n+    RefProcTotalPhaseTimesTracker tt(RefPhase1, &phase_times);\n@@ -232,1 +207,1 @@\n-    RefProcTotalPhaseTimesTracker tt(RefPhase3, &phase_times);\n+    RefProcTotalPhaseTimesTracker tt(RefPhase2, &phase_times);\n@@ -237,1 +212,1 @@\n-    RefProcTotalPhaseTimesTracker tt(RefPhase4, &phase_times);\n+    RefProcTotalPhaseTimesTracker tt(RefPhase3, &phase_times);\n@@ -332,31 +307,0 @@\n-size_t ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&    refs_list,\n-                                                            ReferencePolicy*   policy,\n-                                                            BoolObjectClosure* is_alive,\n-                                                            OopClosure*        keep_alive,\n-                                                            VoidClosure*       complete_gc) {\n-  assert(policy != NULL, \"Must have a non-NULL policy\");\n-  DiscoveredListIterator iter(refs_list, keep_alive, is_alive);\n-  \/\/ Decide which softly reachable refs should be kept alive.\n-  while (iter.has_next()) {\n-    iter.load_ptrs(DEBUG_ONLY(!discovery_is_atomic() \/* allow_null_referent *\/));\n-    bool referent_is_dead = (iter.referent() != NULL) && !iter.is_referent_alive();\n-    if (referent_is_dead &&\n-        !policy->should_clear_reference(iter.obj(), _soft_ref_timestamp_clock)) {\n-      log_dropped_ref(iter, \"by policy\");\n-      \/\/ Remove Reference object from list\n-      iter.remove();\n-      \/\/ keep the referent around\n-      iter.make_referent_alive();\n-      iter.move_to_next();\n-    } else {\n-      iter.next();\n-    }\n-  }\n-  \/\/ Close the reachable set\n-  complete_gc->do_void();\n-\n-  log_develop_trace(gc, ref)(\" Dropped \" SIZE_FORMAT \" dead Refs out of \" SIZE_FORMAT \" discovered Refs by policy, from list \" INTPTR_FORMAT,\n-                             iter.removed(), iter.processed(), p2i(&refs_list));\n-  return iter.removed();\n-}\n-\n@@ -511,30 +455,2 @@\n-\n-class RefProcPhase1Task : public RefProcTask {\n-public:\n-  RefProcPhase1Task(ReferenceProcessor& ref_processor,\n-                    ReferenceProcessorPhaseTimes* phase_times,\n-                    ReferencePolicy* policy)\n-    : RefProcTask(ref_processor,\n-                  phase_times),\n-      _policy(policy) { }\n-\n-  void rp_work(uint worker_id,\n-               BoolObjectClosure* is_alive,\n-               OopClosure* keep_alive,\n-               VoidClosure* complete_gc) override {\n-    ResourceMark rm;\n-    RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::SoftRefSubPhase1, _phase_times, tracker_id(worker_id));\n-    size_t const removed = _ref_processor.process_soft_ref_reconsider_work(_ref_processor._discoveredSoftRefs[worker_id],\n-                                                                           _policy,\n-                                                                           is_alive,\n-                                                                           keep_alive,\n-                                                                           complete_gc);\n-    _phase_times->add_ref_cleared(REF_SOFT, removed);\n-  }\n-\n-private:\n-  ReferencePolicy* _policy;\n-};\n-\n-class RefProcPhase2Task: public RefProcTask {\n-  void run_phase2(uint worker_id,\n+class RefProcPhase1Task: public RefProcTask {\n+  void run_phase1(uint worker_id,\n@@ -554,1 +470,1 @@\n-  RefProcPhase2Task(ReferenceProcessor& ref_processor,\n+  RefProcPhase1Task(ReferenceProcessor& ref_processor,\n@@ -564,1 +480,1 @@\n-    RefProcWorkerTimeTracker t(_phase_times->phase2_worker_time_sec(), tracker_id(worker_id));\n+    RefProcWorkerTimeTracker t(_phase_times->phase1_worker_time_sec(), tracker_id(worker_id));\n@@ -566,2 +482,2 @@\n-      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::SoftRefSubPhase2, _phase_times, tracker_id(worker_id));\n-      run_phase2(worker_id, _ref_processor._discoveredSoftRefs, is_alive, keep_alive, true \/* do_enqueue_and_clear *\/, REF_SOFT);\n+      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::SoftRefSubPhase1, _phase_times, tracker_id(worker_id));\n+      run_phase1(worker_id, _ref_processor._discoveredSoftRefs, is_alive, keep_alive, true \/* do_enqueue_and_clear *\/, REF_SOFT);\n@@ -570,2 +486,2 @@\n-      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::WeakRefSubPhase2, _phase_times, tracker_id(worker_id));\n-      run_phase2(worker_id, _ref_processor._discoveredWeakRefs, is_alive, keep_alive, true \/* do_enqueue_and_clear *\/, REF_WEAK);\n+      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::WeakRefSubPhase1, _phase_times, tracker_id(worker_id));\n+      run_phase1(worker_id, _ref_processor._discoveredWeakRefs, is_alive, keep_alive, true \/* do_enqueue_and_clear *\/, REF_WEAK);\n@@ -574,2 +490,2 @@\n-      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::FinalRefSubPhase2, _phase_times, tracker_id(worker_id));\n-      run_phase2(worker_id, _ref_processor._discoveredFinalRefs, is_alive, keep_alive, false \/* do_enqueue_and_clear *\/, REF_FINAL);\n+      RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::FinalRefSubPhase1, _phase_times, tracker_id(worker_id));\n+      run_phase1(worker_id, _ref_processor._discoveredFinalRefs, is_alive, keep_alive, false \/* do_enqueue_and_clear *\/, REF_FINAL);\n@@ -583,1 +499,1 @@\n-class RefProcPhase3Task: public RefProcTask {\n+class RefProcPhase2Task: public RefProcTask {\n@@ -585,1 +501,1 @@\n-  RefProcPhase3Task(ReferenceProcessor& ref_processor,\n+  RefProcPhase2Task(ReferenceProcessor& ref_processor,\n@@ -595,1 +511,1 @@\n-    RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::FinalRefSubPhase3, _phase_times, tracker_id(worker_id));\n+    RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::FinalRefSubPhase2, _phase_times, tracker_id(worker_id));\n@@ -600,1 +516,1 @@\n-class RefProcPhase4Task: public RefProcTask {\n+class RefProcPhase3Task: public RefProcTask {\n@@ -602,1 +518,1 @@\n-  RefProcPhase4Task(ReferenceProcessor& ref_processor,\n+  RefProcPhase3Task(ReferenceProcessor& ref_processor,\n@@ -612,1 +528,1 @@\n-    RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::PhantomRefSubPhase4, _phase_times, tracker_id(worker_id));\n+    RefProcSubPhasesWorkerTimeTracker tt(ReferenceProcessor::PhantomRefSubPhase3, _phase_times, tracker_id(worker_id));\n@@ -794,32 +710,0 @@\n-void ReferenceProcessor::process_soft_ref_reconsider(RefProcProxyTask& proxy_task,\n-                                                     ReferenceProcessorPhaseTimes& phase_times) {\n-\n-  size_t const num_soft_refs = total_count(_discoveredSoftRefs);\n-  phase_times.set_ref_discovered(REF_SOFT, num_soft_refs);\n-  phase_times.set_processing_is_mt(processing_is_mt());\n-\n-  if (num_soft_refs == 0) {\n-    log_debug(gc, ref)(\"Skipped phase 1 of Reference Processing: no references\");\n-    return;\n-  }\n-\n-  if (_current_soft_ref_policy == NULL) {\n-    log_debug(gc, ref)(\"Skipped phase 1 of Reference Processing: no policy\");\n-    return;\n-  }\n-\n-  RefProcMTDegreeAdjuster a(this, RefPhase1, num_soft_refs);\n-\n-  if (processing_is_mt()) {\n-    RefProcBalanceQueuesTimeTracker tt(RefPhase1, &phase_times);\n-    maybe_balance_queues(_discoveredSoftRefs);\n-  }\n-\n-  RefProcPhaseTimeTracker tt(RefPhase1, &phase_times);\n-\n-  log_reflist(\"Phase 1 Soft before\", _discoveredSoftRefs, _max_num_queues);\n-  RefProcPhase1Task phase1(*this, &phase_times, _current_soft_ref_policy);\n-  run_task(phase1, proxy_task, true);\n-  log_reflist(\"Phase 1 Soft after\", _discoveredSoftRefs, _max_num_queues);\n-}\n-\n@@ -839,1 +723,1 @@\n-    log_debug(gc, ref)(\"Skipped phase 2 of Reference Processing: no references\");\n+    log_debug(gc, ref)(\"Skipped phase 1 of Reference Processing: no references\");\n@@ -843,1 +727,1 @@\n-  RefProcMTDegreeAdjuster a(this, RefPhase2, num_total_refs);\n+  RefProcMTDegreeAdjuster a(this, RefPhase1, num_total_refs);\n@@ -846,1 +730,1 @@\n-    RefProcBalanceQueuesTimeTracker tt(RefPhase2, &phase_times);\n+    RefProcBalanceQueuesTimeTracker tt(RefPhase1, &phase_times);\n@@ -852,1 +736,1 @@\n-  RefProcPhaseTimeTracker tt(RefPhase2, &phase_times);\n+  RefProcPhaseTimeTracker tt(RefPhase1, &phase_times);\n@@ -854,3 +738,3 @@\n-  log_reflist(\"Phase 2 Soft before\", _discoveredSoftRefs, _max_num_queues);\n-  log_reflist(\"Phase 2 Weak before\", _discoveredWeakRefs, _max_num_queues);\n-  log_reflist(\"Phase 2 Final before\", _discoveredFinalRefs, _max_num_queues);\n+  log_reflist(\"Phase 1 Soft before\", _discoveredSoftRefs, _max_num_queues);\n+  log_reflist(\"Phase 1 Weak before\", _discoveredWeakRefs, _max_num_queues);\n+  log_reflist(\"Phase 1 Final before\", _discoveredFinalRefs, _max_num_queues);\n@@ -858,2 +742,2 @@\n-  RefProcPhase2Task phase2(*this, &phase_times);\n-  run_task(phase2, proxy_task, false);\n+  RefProcPhase1Task phase1(*this, &phase_times);\n+  run_task(phase1, proxy_task, false);\n@@ -863,1 +747,1 @@\n-  log_reflist(\"Phase 2 Final after\", _discoveredFinalRefs, _max_num_queues);\n+  log_reflist(\"Phase 1 Final after\", _discoveredFinalRefs, _max_num_queues);\n@@ -873,1 +757,1 @@\n-    log_debug(gc, ref)(\"Skipped phase 3 of Reference Processing: no references\");\n+    log_debug(gc, ref)(\"Skipped phase 2 of Reference Processing: no references\");\n@@ -877,1 +761,1 @@\n-  RefProcMTDegreeAdjuster a(this, RefPhase3, num_final_refs);\n+  RefProcMTDegreeAdjuster a(this, RefPhase2, num_final_refs);\n@@ -880,1 +764,1 @@\n-    RefProcBalanceQueuesTimeTracker tt(RefPhase3, &phase_times);\n+    RefProcBalanceQueuesTimeTracker tt(RefPhase2, &phase_times);\n@@ -884,1 +768,1 @@\n-  \/\/ Phase 3:\n+  \/\/ Phase 2:\n@@ -886,3 +770,3 @@\n-  RefProcPhaseTimeTracker tt(RefPhase3, &phase_times);\n-  RefProcPhase3Task phase3(*this, &phase_times);\n-  run_task(phase3, proxy_task, true);\n+  RefProcPhaseTimeTracker tt(RefPhase2, &phase_times);\n+  RefProcPhase2Task phase2(*this, &phase_times);\n+  run_task(phase2, proxy_task, true);\n@@ -901,1 +785,1 @@\n-    log_debug(gc, ref)(\"Skipped phase 4 of Reference Processing: no references\");\n+    log_debug(gc, ref)(\"Skipped phase 3 of Reference Processing: no references\");\n@@ -905,1 +789,1 @@\n-  RefProcMTDegreeAdjuster a(this, RefPhase4, num_phantom_refs);\n+  RefProcMTDegreeAdjuster a(this, RefPhase3, num_phantom_refs);\n@@ -908,1 +792,1 @@\n-    RefProcBalanceQueuesTimeTracker tt(RefPhase4, &phase_times);\n+    RefProcBalanceQueuesTimeTracker tt(RefPhase3, &phase_times);\n@@ -912,2 +796,2 @@\n-  \/\/ Phase 4: Walk phantom references appropriately.\n-  RefProcPhaseTimeTracker tt(RefPhase4, &phase_times);\n+  \/\/ Phase 3: Walk phantom references appropriately.\n+  RefProcPhaseTimeTracker tt(RefPhase3, &phase_times);\n@@ -917,2 +801,2 @@\n-  RefProcPhase4Task phase4(*this, &phase_times);\n-  run_task(phase4, proxy_task, false);\n+  RefProcPhase3Task phase3(*this, &phase_times);\n+  run_task(phase3, proxy_task, false);\n@@ -1308,2 +1192,2 @@\n-  \/\/ Even a small number of references in either of those cases could produce large amounts of work.\n-  return (phase == ReferenceProcessor::RefPhase1 || phase == ReferenceProcessor::RefPhase3);\n+  \/\/ Even a small number of references in this phase could produce large amounts of work.\n+  return phase == ReferenceProcessor::RefPhase2;\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":45,"deletions":161,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -166,1 +166,0 @@\n-  friend class RefProcPhase4Task;\n@@ -172,2 +171,2 @@\n-    SoftRefSubPhase2,\n-    WeakRefSubPhase2,\n+    WeakRefSubPhase1,\n+    FinalRefSubPhase1,\n@@ -175,2 +174,1 @@\n-    FinalRefSubPhase3,\n-    PhantomRefSubPhase4,\n+    PhantomRefSubPhase3,\n@@ -185,1 +183,0 @@\n-    RefPhase4,\n@@ -240,5 +237,1 @@\n-  \/\/ Phase 1: Re-evaluate soft ref policy.\n-  void process_soft_ref_reconsider(RefProcProxyTask& proxy_task,\n-                                   ReferenceProcessorPhaseTimes& phase_times);\n-\n-  \/\/ Phase 2: Drop Soft\/Weak\/Final references with a NULL or live referent, and clear\n+  \/\/ Phase 1: Drop Soft\/Weak\/Final references with a NULL or live referent, and clear\n@@ -249,1 +242,1 @@\n-  \/\/ Phase 3: Keep alive followers of Final references, and enqueue.\n+  \/\/ Phase 2: Keep alive followers of Final references, and enqueue.\n@@ -253,1 +246,1 @@\n-  \/\/ Phase 4: Drop and keep alive live Phantom references, or clear and enqueue if dead.\n+  \/\/ Phase 3: Drop and keep alive live Phantom references, or clear and enqueue if dead.\n@@ -260,9 +253,0 @@\n-  \/\/ (SoftReferences only) Traverse the list and remove any SoftReferences whose\n-  \/\/ referents are not alive, but that should be kept alive for policy reasons.\n-  \/\/ Keep alive the transitive closure of all such referents.\n-  size_t process_soft_ref_reconsider_work(DiscoveredList&     refs_list,\n-                                          ReferencePolicy*    policy,\n-                                          BoolObjectClosure*  is_alive,\n-                                          OopClosure*         keep_alive,\n-                                          VoidClosure*        complete_gc);\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.hpp","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-       \"SoftRef (ms):\",\n@@ -56,1 +55,1 @@\n-static const char* Phase2ParWorkTitle = \"Total (ms):\";\n+static const char* Phase1ParWorkTitle = \"Total (ms):\";\n@@ -59,1 +58,0 @@\n-       \"SoftRef:\",\n@@ -67,1 +65,1 @@\n-static const char* Phase2SerWorkTitle = \"Total:\";\n+static const char* Phase1SerWorkTitle = \"Total:\";\n@@ -72,1 +70,0 @@\n-       \"Reconsider SoftReferences\",\n@@ -182,1 +179,1 @@\n-  _phase2_worker_time_sec = new WorkerDataArray<double>(NULL, Phase2ParWorkTitle, max_gc_threads);\n+  _phase1_worker_time_sec = new WorkerDataArray<double>(NULL, Phase1ParWorkTitle, max_gc_threads);\n@@ -218,1 +215,1 @@\n-  _phase2_worker_time_sec->reset();\n+  _phase1_worker_time_sec->reset();\n@@ -234,1 +231,1 @@\n-  delete _phase2_worker_time_sec;\n+  delete _phase1_worker_time_sec;\n@@ -285,1 +282,0 @@\n-  print_phase(ReferenceProcessor::RefPhase4, next_indent);\n@@ -338,0 +334,2 @@\n+        print_sub_phase(&ls, ReferenceProcessor::WeakRefSubPhase1, indent + 1);\n+        print_sub_phase(&ls, ReferenceProcessor::FinalRefSubPhase1, indent + 1);\n@@ -340,2 +338,0 @@\n-        print_sub_phase(&ls, ReferenceProcessor::SoftRefSubPhase2, indent + 1);\n-        print_sub_phase(&ls, ReferenceProcessor::WeakRefSubPhase2, indent + 1);\n@@ -345,4 +341,1 @@\n-        print_sub_phase(&ls, ReferenceProcessor::FinalRefSubPhase3, indent + 1);\n-        break;\n-      case ReferenceProcessor::RefPhase4:\n-        print_sub_phase(&ls, ReferenceProcessor::PhantomRefSubPhase4, indent + 1);\n+        print_sub_phase(&ls, ReferenceProcessor::PhantomRefSubPhase3, indent + 1);\n@@ -353,2 +346,2 @@\n-    if (phase == ReferenceProcessor::RefPhase2) {\n-      print_worker_time(&ls, _phase2_worker_time_sec, Phase2SerWorkTitle, indent + 1);\n+    if (phase == ReferenceProcessor::RefPhase1) {\n+      print_worker_time(&ls, _phase1_worker_time_sec, Phase1SerWorkTitle, indent + 1);\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.cpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  WorkerDataArray<double>* _phase2_worker_time_sec;\n+  WorkerDataArray<double>* _phase1_worker_time_sec;\n@@ -83,1 +83,1 @@\n-  WorkerDataArray<double>* phase2_worker_time_sec() const { return _phase2_worker_time_sec; }\n+  WorkerDataArray<double>* phase1_worker_time_sec() const { return _phase1_worker_time_sec; }\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessorPhaseTimes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    static final String phaseReconsiderSoftReferences = \"Reconsider SoftReferences\";\n@@ -140,2 +139,1 @@\n-        String phase1Regex = gcLogTimeRegex + phaseRegex(phaseReconsiderSoftReferences) + balanceRegex + subphaseRegex(\"SoftRef\", p);\n-        String phase2Regex = gcLogTimeRegex + phaseRegex(phaseNotifySoftWeakReferences) +\n+        String phase1Regex = gcLogTimeRegex + phaseRegex(phaseNotifySoftWeakReferences) +\n@@ -147,2 +145,2 @@\n-        String phase3Regex = gcLogTimeRegex + phaseRegex(phaseNotifyKeepAliveFinalizer) + balanceRegex + subphaseRegex(\"FinalRef\", p);\n-        String phase4Regex = gcLogTimeRegex + phaseRegex(phaseNotifyPhantomReferences) + balanceRegex + subphaseRegex(\"PhantomRef\", p);\n+        String phase2Regex = gcLogTimeRegex + phaseRegex(phaseNotifyKeepAliveFinalizer) + balanceRegex + subphaseRegex(\"FinalRef\", p);\n+        String phase3Regex = gcLogTimeRegex + phaseRegex(phaseNotifyPhantomReferences) + balanceRegex + subphaseRegex(\"PhantomRef\", p);\n@@ -153,2 +151,1 @@\n-                           phase3Regex +\n-                           phase4Regex);\n+                           phase3Regex);\n@@ -223,1 +220,1 @@\n-        BigDecimal sumOfSubPhasesTime = getTimeValue(phaseReconsiderSoftReferences, 2);\n+        BigDecimal sumOfSubPhasesTime = BigDecimal.ZERO;\n@@ -228,3 +225,3 @@\n-        \/\/ If there are 4 phases, we should allow 0.2 tolerance.\n-        final BigDecimal toleranceFor4SubPhases = BigDecimal.valueOf(0.2);\n-        if (!greaterThanOrApproximatelyEqual(refProcTime, sumOfSubPhasesTime, toleranceFor4SubPhases)) {\n+        \/\/ If there are 3 phases, we should allow 0.2 tolerance.\n+        final BigDecimal toleranceFor3SubPhases = BigDecimal.valueOf(0.2);\n+        if (!greaterThanOrApproximatelyEqual(refProcTime, sumOfSubPhasesTime, toleranceFor3SubPhases)) {\n","filename":"test\/hotspot\/jtreg\/gc\/logging\/TestPrintReferences.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"}]}