{"files":[{"patch":"@@ -30,1 +30,1 @@\n- * @run junit CurrencyNameProviderTest\n+ * @run junit CNPGetDisplayName\n@@ -43,1 +43,1 @@\n-public class CurrencyNameProviderTest {\n+public class CNPGetDisplayName {\n","filename":"test\/jdk\/java\/util\/Currency\/CNPGetDisplayName.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/util\/Currency\/CurrencyNameProviderTest.java","status":"renamed"},{"patch":"@@ -81,1 +81,1 @@\n-        \/\/ Calling getInstance() with an illegal name should throw an IAE\n+        \/\/ Calling getInstance() with an invalid currency code should throw an IAE\n@@ -241,2 +241,3 @@\n-                Arguments.of(\"TND\", 3), Arguments.of(\"TRL\", 0), \/\/ Turkish Lira\n-                Arguments.of(\"TRY\", 2)\n+                \/\/ Old and New Turkish Lira\n+                Arguments.of(\"TRL\", 0), Arguments.of(\"TRY\", 2),\n+                Arguments.of(\"TND\", 3)\n@@ -321,1 +322,2 @@\n-        assertEquals(currency1.getCurrencyCode(), currencyCode, \"Currency code changed\");\n+        assertEquals(currency1.getCurrencyCode(), currencyCode, \"getCurrencyCode()\" +\n+                \" did not return the expected value\");\n","filename":"test\/jdk\/java\/util\/Currency\/CurrencyTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4512215 4818420 4819436 8310923\n- * @summary Test some minor undefined currencies.\n- * @run junit MinorUndefinedCodes\n- *\/\n-\n-import java.util.Currency;\n-import java.util.stream.Stream;\n-\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class MinorUndefinedCodes {\n-\n-    \/**\n-     * Spot check some minor undefined codes and ensure their default fraction\n-     * digits are not 2.\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"minorUndefined\")\n-    public void checkFractionDigits(String currencyCode, int digits) {\n-        Currency currency = Currency.getInstance(currencyCode);\n-        assertEquals(currency.getCurrencyCode(), currencyCode);\n-        assertEquals(currency.getDefaultFractionDigits(), digits, String.format(\n-                \"[%s] expected: %s; got: %s\", currencyCode, digits, currency.getDefaultFractionDigits()));\n-    }\n-\n-    private static Stream<Arguments> minorUndefined() {\n-        return Stream.of(\n-                Arguments.of(\"XBD\", -1),\n-                Arguments.of(\"XAG\", -1),\n-                Arguments.of(\"XAU\", -1),\n-                Arguments.of(\"XBA\", -1),\n-                Arguments.of(\"XBB\", -1)\n-        );\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Currency\/MinorUndefinedCodes.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2007, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4512215 4818420 4819436 8310923\n+ * @summary Test currencies without minor units.\n+ * @run junit NoMinorUnitCurrenciesTest\n+ *\/\n+\n+import java.util.Currency;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class NoMinorUnitCurrenciesTest {\n+\n+    \/**\n+     * Spot check some minor undefined currencies and ensure their default fraction\n+     * digits are not 2.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"minorUndefined\")\n+    public void checkFractionDigits(String currencyCode, int digits) {\n+        Currency currency = Currency.getInstance(currencyCode);\n+        assertEquals(currency.getCurrencyCode(), currencyCode);\n+        assertEquals(currency.getDefaultFractionDigits(), digits, String.format(\n+                \"[%s] expected: %s; got: %s\", currencyCode, digits, currency.getDefaultFractionDigits()));\n+    }\n+\n+    \/\/ Currencies from the minorUndefined key of CurrencyData.properties\n+    \/\/ (These are currencies without minor units)\n+    private static Stream<Arguments> minorUndefined() {\n+        return Stream.of(\n+                Arguments.of(\"XBD\", -1),\n+                Arguments.of(\"XAG\", -1),\n+                Arguments.of(\"XAU\", -1),\n+                Arguments.of(\"XBA\", -1),\n+                Arguments.of(\"XBB\", -1)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Currency\/NoMinorUnitCurrenciesTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -86,0 +86,28 @@\n+    \/\/ Codes that are obsolete, do not have related country, extra currency\n+    private static final String otherCodes =\n+            \"ADP-AFA-ATS-AYM-AZM-BEF-BGL-BOV-BYB-BYR-CHE-CHW-CLF-COU-CUC-CYP-\"\n+                    + \"DEM-EEK-ESP-FIM-FRF-GHC-GRD-GWP-IEP-ITL-LTL-LUF-LVL-MGF-MRO-MTL-MXV-MZM-NLG-\"\n+                    + \"PTE-ROL-RUR-SDD-SIT-SLL-SKK-SRG-STD-TMM-TPE-TRL-VEF-UYI-USN-USS-VEB-VED-\"\n+                    + \"XAG-XAU-XBA-XBB-XBC-XBD-XDR-XFO-XFU-XPD-XPT-XSU-XTS-XUA-XXX-\"\n+                    + \"YUM-ZMK-ZWD-ZWN-ZWR\";\n+    private static final String[][] extraCodes = {\n+            \/* Defined in ISO 4217 list, but don't have code and minor unit info. *\/\n+            {\"AQ\", \"\", \"\", \"0\"},    \/\/ Antarctica\n+            \/*\n+             * Defined in ISO 4217 list, but don't have code and minor unit info in\n+             * it. On the other hand, both code and minor unit are defined in\n+             * .properties file. I don't know why, though.\n+             *\/\n+            {\"GS\", \"GBP\", \"826\", \"2\"},      \/\/ South Georgia And The South Sandwich Islands\n+            \/* Not defined in ISO 4217 list, but defined in .properties file. *\/\n+            {\"AX\", \"EUR\", \"978\", \"2\"},      \/\/ \\u00c5LAND ISLANDS\n+            {\"PS\", \"ILS\", \"376\", \"2\"},      \/\/ Palestinian Territory, Occupied\n+            \/* Not defined in ISO 4217 list, but added in ISO 3166 country code list *\/\n+            {\"JE\", \"GBP\", \"826\", \"2\"},      \/\/ Jersey\n+            {\"GG\", \"GBP\", \"826\", \"2\"},      \/\/ Guernsey\n+            {\"IM\", \"GBP\", \"826\", \"2\"},      \/\/ Isle of Man\n+            {\"BL\", \"EUR\", \"978\", \"2\"},      \/\/ Saint Barthelemy\n+            {\"MF\", \"EUR\", \"978\", \"2\"},      \/\/ Saint Martin\n+            \/* Defined neither in ISO 4217 nor ISO 3166 list *\/\n+            {\"XK\", \"EUR\", \"978\", \"2\"},      \/\/ Kosovo\n+    };\n@@ -96,1 +124,1 @@\n-        finishTestCurrencies();\n+        setUpOtherCurrencies();\n@@ -172,21 +200,0 @@\n-        String[][] extraCodes = {\n-                \/* Defined in ISO 4217 list, but don't have code and minor unit info. *\/\n-                {\"AQ\", \"\", \"\", \"0\"},    \/\/ Antarctica\n-                \/*\n-                 * Defined in ISO 4217 list, but don't have code and minor unit info in\n-                 * it. On the other hand, both code and minor unit are defined in\n-                 * .properties file. I don't know why, though.\n-                 *\/\n-                {\"GS\", \"GBP\", \"826\", \"2\"},      \/\/ South Georgia And The South Sandwich Islands\n-                \/* Not defined in ISO 4217 list, but defined in .properties file. *\/\n-                {\"AX\", \"EUR\", \"978\", \"2\"},      \/\/ \\u00c5LAND ISLANDS\n-                {\"PS\", \"ILS\", \"376\", \"2\"},      \/\/ Palestinian Territory, Occupied\n-                \/* Not defined in ISO 4217 list, but added in ISO 3166 country code list *\/\n-                {\"JE\", \"GBP\", \"826\", \"2\"},      \/\/ Jersey\n-                {\"GG\", \"GBP\", \"826\", \"2\"},      \/\/ Guernsey\n-                {\"IM\", \"GBP\", \"826\", \"2\"},      \/\/ Isle of Man\n-                {\"BL\", \"EUR\", \"978\", \"2\"},      \/\/ Saint Barthelemy\n-                {\"MF\", \"EUR\", \"978\", \"2\"},      \/\/ Saint Martin\n-                \/* Defined neither in ISO 4217 nor ISO 3166 list *\/\n-                {\"XK\", \"EUR\", \"978\", \"2\"},      \/\/ Kosovo\n-        };\n@@ -207,8 +214,1 @@\n-    private static void finishTestCurrencies() {\n-        \/\/ Codes that are obsolete, do not have related country, extra currency\n-        final String otherCodes =\n-                \"ADP-AFA-ATS-AYM-AZM-BEF-BGL-BOV-BYB-BYR-CHE-CHW-CLF-COU-CUC-CYP-\"\n-                        + \"DEM-EEK-ESP-FIM-FRF-GHC-GRD-GWP-IEP-ITL-LTL-LUF-LVL-MGF-MRO-MTL-MXV-MZM-NLG-\"\n-                        + \"PTE-ROL-RUR-SDD-SIT-SLL-SKK-SRG-STD-TMM-TPE-TRL-VEF-UYI-USN-USS-VEB-VED-\"\n-                        + \"XAG-XAU-XBA-XBB-XBC-XBD-XDR-XFO-XFU-XPD-XPT-XSU-XTS-XUA-XXX-\"\n-                        + \"YUM-ZMK-ZWD-ZWN-ZWR\";\n+    private static void setUpOtherCurrencies() {\n","filename":"test\/jdk\/java\/util\/Currency\/ValidateISO4217.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"}]}