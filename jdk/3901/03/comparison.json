{"files":[{"patch":"@@ -59,0 +59,5 @@\n+  uintptr_t cld = (uintptr_t)method->method_holder()->class_loader_data();\n+  hash = (hash * 31) ^ (unsigned int)cld;\n+#ifdef _LP64\n+  hash = hash ^ (unsigned int)(cld >> 32);\n+#endif\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,0 +51,8 @@\n+    private MethodHandle generateWithSameName() throws ReflectiveOperationException {\n+        byte[] buf = new byte[100];\n+        int size = writeClass(buf, \"MH$$\");\n+        \/\/ use different classloader instances to load the classes with the same name\n+        Class<?> cls = new ResolvedMethodTableHash().defineClass(null, buf, 0, size);\n+        return MethodHandles.publicLookup().findStatic(cls, \"m\", MethodType.methodType(void.class));\n+    }\n+\n@@ -85,1 +93,6 @@\n-            handles.add(generator.generate(\"MH$\" + i));\n+            \/\/ prevents metaspace oom\n+            if (i % 20 != 0) {\n+                handles.add(generator.generate(\"MH$\" + i));\n+            } else {\n+                handles.add(generator.generateWithSameName());\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/MemberName\/ResolvedMethodTableHash.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}