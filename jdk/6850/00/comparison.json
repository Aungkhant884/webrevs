{"files":[{"patch":"@@ -1264,0 +1264,4 @@\n+inline void validate_end_not_null(BlockBegin* block) {\n+  assert(block->end() != NULL, \"Expect block end to exist.\");\n+}\n+\n@@ -1266,6 +1270,2 @@\n-  EndNotNullValidator(IR* hir) {\n-    hir->start()->iterate_postorder(this);\n-  }\n-\n-  void block_do(BlockBegin* block) {\n-    assert(block->end() != NULL, \"Expect block end to exist.\");\n+  virtual void block_do(BlockBegin* block) {\n+    validate_end_not_null(block);\n@@ -1277,1 +1277,22 @@\n-class PredecessorValidator : public BlockClosure {\n+void verify_successor_xentry_flag(const BlockBegin* block) {\n+  for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+    assert(!block->end()->sux_at(i)->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n+  }\n+  for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+    assert(block->exception_handler_at(i)->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n+  }\n+}\n+\n+class XentryFlagValidator : public BlockClosure {\n+ public:\n+  virtual void block_do(BlockBegin* block) {\n+    verify_successor_xentry_flag(block);\n+  }\n+};\n+\n+\/\/ Validation goals:\n+\/\/ * code() length == blocks length\n+\/\/ * code() contents == blocks content\n+\/\/ * Each block's computed predecessors match sux lists (length)\n+\/\/ * Each block's computed predecessors match sux lists (set content)\n+class PredecessorAndCodeValidator : public BlockClosure {\n@@ -1287,1 +1308,1 @@\n-  PredecessorValidator(IR* hir) {\n+  PredecessorAndCodeValidator(IR* hir) {\n@@ -1308,1 +1329,0 @@\n-    verify_successor_xentry_flag(block);\n@@ -1313,9 +1333,0 @@\n-  void verify_successor_xentry_flag(const BlockBegin* block) const {\n-    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n-      assert(!block->end()->sux_at(i)->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n-    }\n-    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n-      assert(block->exception_handler_at(i)->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n-    }\n-  }\n-\n@@ -1362,1 +1373,5 @@\n-class VerifyBlockBeginField : public BlockClosure {\n+inline void verify_block_begin_field(BlockBegin* block) {\n+  for ( Instruction *cur = block; cur != NULL; cur = cur->next()) {\n+    assert(cur->block() == block, \"Block begin is not correct\");\n+  }\n+}\n@@ -1364,0 +1379,1 @@\n+class VerifyBlockBeginField : public BlockClosure {\n@@ -1365,0 +1381,4 @@\n+  virtual void block_do(BlockBegin* block) {\n+    verify_block_begin_field(block);\n+  }\n+};\n@@ -1366,4 +1386,22 @@\n-  virtual void block_do(BlockBegin *block) {\n-    for ( Instruction *cur = block; cur != NULL; cur = cur->next()) {\n-      assert(cur->block() == block, \"Block begin is not correct\");\n-    }\n+void validate_edge_mutuality(BlockBegin* block) {\n+  for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+    assert(block->end()->sux_at(i)->is_predecessor(block), \"Block's successor should have it as predecessor\");\n+  }\n+\n+  for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+    assert(block->exception_handler_at(i)->is_predecessor(block), \"Block's exception handler should have it as predecessor\");\n+  }\n+\n+  for (int i = 0; i < block->number_of_preds(); i++) {\n+    assert(block->pred_at(i) != NULL, \"Predecessor must exist\");\n+    assert(block->pred_at(i)->end() != NULL, \"Predecessor end must exist\");\n+    bool is_sux      = block->pred_at(i)->end()->is_sux(block);\n+    bool is_xhandler = block->pred_at(i)->is_exception_handler(block);\n+    assert(is_sux || is_xhandler, \"Block's predecessor should have it as successor or xhandler\");\n+  }\n+}\n+\n+class ValidateEdgeMutuality : public BlockClosure {\n+ public:\n+  virtual void block_do(BlockBegin* block) {\n+    validate_edge_mutuality(block);\n@@ -1373,0 +1411,35 @@\n+void IR::expand_with_neighborhood(BlockList& blocks) {\n+  int original_size = blocks.length();\n+  for (int h = 0; h < original_size; h++) {\n+    BlockBegin* block = blocks.at(h);\n+\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      if (blocks.contains(block->end()->sux_at(i))) continue;\n+      blocks.append(block->end()->sux_at(i));\n+    }\n+\n+    for (int i = 0; i < block->number_of_preds(); i++) {\n+      if (blocks.contains(block->pred_at(i))) continue;\n+      blocks.append(block->pred_at(i));\n+    }\n+\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      if (blocks.contains(block->exception_handler_at(i))) continue;\n+      blocks.append(block->exception_handler_at(i));\n+    }\n+  }\n+}\n+\n+void IR::verify_local(BlockList& blocks) {\n+#ifdef ASSERT\n+  EndNotNullValidator ennv;\n+  blocks.iterate_forward(&ennv);\n+\n+  ValidateEdgeMutuality vem;\n+  blocks.iterate_forward(&vem);\n+\n+  VerifyBlockBeginField verifier;\n+  blocks.iterate_forward(&verifier);\n+#endif \/\/ ASSERT\n+}\n+\n@@ -1375,2 +1448,11 @@\n-  PredecessorValidator pv(this);\n-  EndNotNullValidator(this);\n+  XentryFlagValidator xe;\n+  this->iterate_postorder(&xe);\n+\n+  PredecessorAndCodeValidator pv(this);\n+\n+  EndNotNullValidator ennv;\n+  this->iterate_postorder(&ennv);\n+\n+  ValidateEdgeMutuality vem;\n+  this->iterate_postorder(&vem);\n+\n@@ -1379,1 +1461,1 @@\n-#endif\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":108,"deletions":26,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -341,0 +341,2 @@\n+  void expand_with_neighborhood(BlockList& blocks);\n+  void verify_local(BlockList&)                                               PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1825,0 +1825,1 @@\n+  bool is_sux(BlockBegin* sux) const             { return _sux == NULL ? false : _sux->contains(sux); }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -183,0 +183,9 @@\n+#ifdef ASSERT\n+  BlockList blocks_to_verify_later;\n+  blocks_to_verify_later.append(block);\n+  blocks_to_verify_later.append(t_block);\n+  blocks_to_verify_later.append(f_block);\n+  blocks_to_verify_later.append(sux);\n+  _hir->expand_with_neighborhood(blocks_to_verify_later);\n+#endif \/\/ASSERT\n+\n@@ -251,1 +260,3 @@\n-  _hir->verify();\n+#ifdef ASSERT\n+  _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ ASSERT\n@@ -315,0 +326,1 @@\n+\/\/ This removes others' relation to block, but doesnt empty block's lists\n@@ -390,0 +402,15 @@\n+#ifdef ASSERT\n+    {\n+      BlockList b;\n+      b.append(block);\n+      b.append(sux);\n+      _hir->verify_local(b);\n+    }\n+#endif \/\/ ASSERT\n+\n+#ifdef ASSERT\n+    BlockList blocks_to_verify_later;\n+    blocks_to_verify_later.append(block);\n+    _hir->expand_with_neighborhood(blocks_to_verify_later);\n+#endif \/\/ASSERT\n+\n@@ -399,0 +426,3 @@\n+#ifdef ASSERT\n+    blocks_to_verify_later.remove(sux); \/\/ Sux is not part of graph anymore\n+#endif \/\/ASSERT\n@@ -407,0 +437,1 @@\n+      \/\/ TODO This should be in disconnect from graph...\n@@ -422,1 +453,3 @@\n-    _hir->verify();\n+#ifdef ASSERT\n+    _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ ASSERT\n@@ -472,1 +505,3 @@\n-              _hir->verify();\n+#ifdef ASSERT\n+              _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"}]}