{"files":[{"patch":"@@ -1266,5 +1266,1 @@\n-  EndNotNullValidator(IR* hir) {\n-    hir->start()->iterate_postorder(this);\n-  }\n-\n-  void block_do(BlockBegin* block) {\n+  virtual void block_do(BlockBegin* block) {\n@@ -1277,1 +1273,18 @@\n-class PredecessorValidator : public BlockClosure {\n+class XentryFlagValidator : public BlockClosure {\n+ public:\n+  virtual void block_do(BlockBegin* block) {\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      assert(!block->end()->sux_at(i)->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n+    }\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      assert(block->exception_handler_at(i)->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n+    }\n+  }\n+};\n+\n+\/\/ Validation goals:\n+\/\/ - code() length == blocks length\n+\/\/ - code() contents == blocks content\n+\/\/ - Each block's computed predecessors match sux lists (length)\n+\/\/ - Each block's computed predecessors match sux lists (set content)\n+class PredecessorAndCodeValidator : public BlockClosure {\n@@ -1287,1 +1300,1 @@\n-  PredecessorValidator(IR* hir) {\n+  PredecessorAndCodeValidator(IR* hir) {\n@@ -1308,1 +1321,0 @@\n-    verify_successor_xentry_flag(block);\n@@ -1313,9 +1325,0 @@\n-  void verify_successor_xentry_flag(const BlockBegin* block) const {\n-    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n-      assert(!block->end()->sux_at(i)->is_set(BlockBegin::exception_entry_flag), \"must not be xhandler\");\n-    }\n-    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n-      assert(block->exception_handler_at(i)->is_set(BlockBegin::exception_entry_flag), \"must be xhandler\");\n-    }\n-  }\n-\n@@ -1363,1 +1366,0 @@\n-\n@@ -1365,3 +1367,2 @@\n-\n-  virtual void block_do(BlockBegin *block) {\n-    for ( Instruction *cur = block; cur != NULL; cur = cur->next()) {\n+  virtual void block_do(BlockBegin* block) {\n+    for (Instruction* cur = block; cur != NULL; cur = cur->next()) {\n@@ -1373,0 +1374,57 @@\n+class ValidateEdgeMutuality : public BlockClosure {\n+ public:\n+  virtual void block_do(BlockBegin* block) {\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      assert(block->end()->sux_at(i)->is_predecessor(block), \"Block's successor should have it as predecessor\");\n+    }\n+\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      assert(block->exception_handler_at(i)->is_predecessor(block), \"Block's exception handler should have it as predecessor\");\n+    }\n+\n+    for (int i = 0; i < block->number_of_preds(); i++) {\n+      assert(block->pred_at(i) != NULL, \"Predecessor must exist\");\n+      assert(block->pred_at(i)->end() != NULL, \"Predecessor end must exist\");\n+      bool is_sux      = block->pred_at(i)->end()->is_sux(block);\n+      bool is_xhandler = block->pred_at(i)->is_exception_handler(block);\n+      assert(is_sux || is_xhandler, \"Block's predecessor should have it as successor or xhandler\");\n+    }\n+  }\n+};\n+\n+void IR::expand_with_neighborhood(BlockList& blocks) {\n+  int original_size = blocks.length();\n+  for (int h = 0; h < original_size; h++) {\n+    BlockBegin* block = blocks.at(h);\n+\n+    for (int i = 0; i < block->end()->number_of_sux(); i++) {\n+      if (!blocks.contains(block->end()->sux_at(i))) {\n+        blocks.append(block->end()->sux_at(i));\n+      }\n+    }\n+\n+    for (int i = 0; i < block->number_of_preds(); i++) {\n+      if (!blocks.contains(block->pred_at(i))) {\n+        blocks.append(block->pred_at(i));\n+      }\n+    }\n+\n+    for (int i = 0; i < block->number_of_exception_handlers(); i++) {\n+      if (!blocks.contains(block->exception_handler_at(i))) {\n+        blocks.append(block->exception_handler_at(i));\n+      }\n+    }\n+  }\n+}\n+\n+void IR::verify_local(BlockList& blocks) {\n+  EndNotNullValidator ennv;\n+  blocks.iterate_forward(&ennv);\n+\n+  ValidateEdgeMutuality vem;\n+  blocks.iterate_forward(&vem);\n+\n+  VerifyBlockBeginField verifier;\n+  blocks.iterate_forward(&verifier);\n+}\n+\n@@ -1374,3 +1432,11 @@\n-#ifdef ASSERT\n-  PredecessorValidator pv(this);\n-  EndNotNullValidator(this);\n+  XentryFlagValidator xe;\n+  iterate_postorder(&xe);\n+\n+  PredecessorAndCodeValidator pv(this);\n+\n+  EndNotNullValidator ennv;\n+  iterate_postorder(&ennv);\n+\n+  ValidateEdgeMutuality vem;\n+  iterate_postorder(&vem);\n+\n@@ -1378,2 +1444,1 @@\n-  this->iterate_postorder(&verifier);\n-#endif\n+  iterate_postorder(&verifier);\n","filename":"src\/hotspot\/share\/c1\/c1_IR.cpp","additions":91,"deletions":26,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -341,0 +341,2 @@\n+  void expand_with_neighborhood(BlockList& blocks)                            PRODUCT_RETURN;\n+  void verify_local(BlockList&)                                               PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/c1\/c1_IR.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1825,0 +1825,1 @@\n+  bool is_sux(BlockBegin* sux) const             { return _sux == NULL ? false : _sux->contains(sux); }\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -183,0 +183,19 @@\n+#ifdef ASSERT\n+#define DO_DELAYED_VERIFICATION\n+  \/*\n+   * We need to verify the internal representation after modifying it.\n+   * Verifying only the blocks that have been tampered with is cheaper than verifying the whole graph, but we must\n+   * capture blocks_to_verify_later before making the changes, since they might not be reachable afterwards.\n+   * DO_DELAYED_VERIFICATION ensures that the code for this is either enabled in full, or not at all.\n+   *\/\n+#endif \/\/ ASSERT\n+\n+#ifdef DO_DELAYED_VERIFICATION\n+  BlockList blocks_to_verify_later;\n+  blocks_to_verify_later.append(block);\n+  blocks_to_verify_later.append(t_block);\n+  blocks_to_verify_later.append(f_block);\n+  blocks_to_verify_later.append(sux);\n+  _hir->expand_with_neighborhood(blocks_to_verify_later);\n+#endif \/\/ DO_DELAYED_VERIFICATION\n+\n@@ -251,1 +270,4 @@\n-  _hir->verify();\n+#ifdef DO_DELAYED_VERIFICATION\n+  _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ DO_DELAYED_VERIFICATION\n+\n@@ -315,0 +337,1 @@\n+\/\/ This removes others' relation to block, but doesnt empty block's lists\n@@ -390,0 +413,6 @@\n+#ifdef DO_DELAYED_VERIFICATION\n+    BlockList blocks_to_verify_later;\n+    blocks_to_verify_later.append(block);\n+    _hir->expand_with_neighborhood(blocks_to_verify_later);\n+#endif \/\/ DO_DELAYED_VERIFICATION\n+\n@@ -399,0 +428,3 @@\n+#ifdef DO_DELAYED_VERIFICATION\n+    blocks_to_verify_later.remove(sux); \/\/ Sux is not part of graph anymore\n+#endif \/\/ DO_DELAYED_VERIFICATION\n@@ -407,0 +439,1 @@\n+      \/\/ TODO This should be in disconnect from graph...\n@@ -422,1 +455,3 @@\n-    _hir->verify();\n+#ifdef DO_DELAYED_VERIFICATION\n+    _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ DO_DELAYED_VERIFICATION\n@@ -472,1 +507,3 @@\n-              _hir->verify();\n+#ifdef DO_DELAYED_VERIFICATION\n+              _hir->verify_local(blocks_to_verify_later);\n+#endif \/\/ DO_DELAYED_VERIFICATION\n@@ -488,0 +525,3 @@\n+#ifdef ASSERT\n+#undef DO_DELAYED_VERIFICATION\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"}]}