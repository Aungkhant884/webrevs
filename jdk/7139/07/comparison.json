{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -295,1 +295,1 @@\n-            case \"toString\" -> self.getClass().getName() + \"@\" + Integer.toHexString(self.hashCode());\n+            case \"toString\" -> java.util.Objects.toIdentityString(self);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,24 @@\n+    \/**\n+     * {@return a string equivalent to the string returned by {@code\n+     * Object.toString} if that method and {@code hashCode} are not\n+     * overridden}\n+     *\n+     * @implNote\n+     * This method constructs a string for an object without calling\n+     * any overridable methods of the object.\n+     *\n+     * @implSpec\n+     * The method returns a string equivalent to:<br>\n+     * {@code o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o))}\n+     *\n+     * @param o an object\n+     * @throws NullPointerException if the argument is null\n+     * @see Object#toString\n+     * @see System#identityHashCode(Object)\n+     * @since 19\n+     *\/\n+    public static String toIdentityString(Object o) {\n+        requireNonNull(o);\n+        return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6797535 6889858 6891113 8013712 8011800 8014365\n+ * @bug 6797535 6889858 6891113 8013712 8011800 8014365 8280168\n@@ -28,1 +28,0 @@\n- * @author  Joseph D. Darcy\n@@ -43,0 +42,1 @@\n+        errors += testToIdentityString();\n@@ -137,0 +137,31 @@\n+    private static int testToIdentityString() {\n+        int errors = 0;\n+        \/\/ Test null behavior\n+        try {\n+            Objects.toIdentityString(null);\n+            errors++;\n+        } catch (NullPointerException npe) {\n+            ; \/\/ Expected\n+        }\n+        \/\/ Behavior on typical objects\n+        Object o = new Object(){};\n+        errors += (Objects.toIdentityString(o).equals(o.toString()))? 0 : 1;\n+        \/\/ Verify object's toString *not* called\n+        Object badToString = new Object() {\n+                @Override\n+                public String toString() {\n+                    throw new RuntimeException();\n+                }\n+            };\n+        Objects.toIdentityString(badToString);\n+        \/\/ Verify object's hashCode *not* called\n+        Object badHashCode = new Object() {\n+                @Override\n+                public int hashCode() {\n+                    throw new RuntimeException(\"0xDEADBEFF\");\n+                }\n+            };\n+        Objects.toIdentityString(badHashCode);\n+        return errors;\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Objects\/BasicObjectsTest.java","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"}]}