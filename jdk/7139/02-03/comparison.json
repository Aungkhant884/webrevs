{"files":[{"patch":"@@ -295,1 +295,1 @@\n-            case \"toString\" -> self.getClass().getName() + \"@\" + Integer.toHexString(self.hashCode());\n+            case \"toString\" -> java.util.Objects.toDefaultString(self);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,0 +167,19 @@\n+    \/**\n+     * {@return a string equivalent to the string returned by {@code\n+     * Object.toString} if that method is not overridden}\n+     *\n+     * @implSpec\n+     * The method returns a string equivalent to:<br>\n+     * {@code o.getClass().getName() + \"@\" + Integer.toHexString(o.hashCode())}\n+     *\n+     * @param o an object\n+     * @throws NullPointerException if the argument is null\n+     * @see Object#toString\n+     * @see #toIdentityString(Object)\n+     * @since 19\n+     *\/\n+    public static String toDefaultString(Object o) {\n+        requireNonNull(o);\n+        return o.getClass().getName() + \"@\" + Integer.toHexString(o.hashCode());\n+    }\n+\n@@ -172,0 +191,4 @@\n+     * @implNote\n+     * This method constructs a string for an object without calling\n+     * any overridable methods of the object.\n+     *\n@@ -180,0 +203,1 @@\n+     * @see #toDefaultString(Object)\n@@ -182,1 +206,1 @@\n-    public static String toDefaultString(Object o) {\n+    public static String toIdentityString(Object o) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Objects.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2228,1 +2228,1 @@\n-        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n+        return Objects.toDefaultString(this);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/xml\/internal\/stream\/writers\/XMLStreamWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+        errors += testToIdentityString();\n@@ -150,1 +151,1 @@\n-        \/\/ Verify object's toString *not* called\n+        \/\/ Verify object's toString is *not* called\n@@ -158,0 +159,37 @@\n+        \/\/ Verify object's hashCode is called\n+        errors += \n+            (\"java.math.BigInteger@0\"\n+             .equals(Objects.toDefaultString(java.math.BigInteger.ZERO))) ?\n+            0 : 1;\n+\n+        return errors;\n+    }\n+\n+    private static int testToIdentityString() {\n+        int errors = 0;\n+        \/\/ Test null behavior\n+        try {\n+            Objects.toIdentityString(null);\n+            errors++;\n+        } catch (NullPointerException npe) {\n+            ; \/\/ Expected\n+        }\n+        \/\/ Behavior on typical objects\n+        Object o = new Object(){};\n+        errors += (Objects.toIdentityString(o).equals(o.toString()))? 0 : 1;\n+        \/\/ Verify object's toString *not* called\n+        Object badToString = new Object() {\n+                @Override\n+                public String toString() {\n+                    throw new RuntimeException();\n+                }\n+            };\n+        Objects.toIdentityString(badToString);\n+        \/\/ Verify object's hashCode *not* called\n+        Object badHashCode = new Object() {\n+                @Override\n+                public int hashCode() {\n+                    throw new RuntimeException(\"0xDEADBEFF\");\n+                }\n+            };\n+        Objects.toIdentityString(badHashCode);\n","filename":"test\/jdk\/java\/util\/Objects\/BasicObjectsTest.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"}]}