{"files":[{"patch":"@@ -12165,1 +12165,1 @@\n-bool Assembler::reachable(AddressLiteral adr) {\n+static bool is_reachable_from(address pc, address target, relocInfo::relocType relocType) {\n@@ -12167,1 +12167,0 @@\n-  relocInfo::relocType relocType = adr.reloc();\n@@ -12201,1 +12200,1 @@\n-    if (CodeCache::find_blob(adr._target) == NULL) {\n+    if (!CodeCache::contains(target)) {\n@@ -12210,4 +12209,8 @@\n-  disp = (int64_t)adr._target - ((int64_t)CodeCache::low_bound() + sizeof(int));\n-  if (!is_simm32(disp)) return false;\n-  disp = (int64_t)adr._target - ((int64_t)CodeCache::high_bound() + sizeof(int));\n-  if (!is_simm32(disp)) return false;\n+  disp = (int64_t)target - ((int64_t)CodeCache::low_bound() + sizeof(int));\n+  if (!Assembler::is_simm32(disp)) {\n+    return false;\n+  }\n+  disp = (int64_t)target - ((int64_t)CodeCache::high_bound() + sizeof(int));\n+  if (!Assembler::is_simm32(disp)) {\n+    return false;\n+  }\n@@ -12215,1 +12218,1 @@\n-  disp = (int64_t)adr._target - ((int64_t)pc() + sizeof(int));\n+  disp = (int64_t)target - ((int64_t)pc + sizeof(int));\n@@ -12230,1 +12233,34 @@\n-  return is_simm32(disp);\n+  return Assembler::is_simm32(disp);\n+}\n+\n+bool Assembler::reachable(AddressLiteral adr) {\n+  bool is_reachable = is_reachable_from(pc(), adr.target(), adr.reloc());\n+  assert(is_reachable || !always_reachable(adr), \"sanity\");\n+  return is_reachable;\n+}\n+\n+bool Assembler::always_reachable(AddressLiteral adr) {\n+  switch (adr.reloc()) {\n+    \/\/ This should be rip relative and easily reachable.\n+    case relocInfo::internal_word_type: {\n+      return true;\n+    }\n+    \/\/ This should be rip relative within the code cache and easily\n+    \/\/ reachable until we get huge code caches. (At which point\n+    \/\/ IC code is going to have issues).\n+    case relocInfo::virtual_call_type:\n+    case relocInfo::opt_virtual_call_type:\n+    case relocInfo::static_call_type:\n+    case relocInfo::static_stub_type: {\n+      return true;\n+    }\n+    case relocInfo::runtime_call_type:\n+    case relocInfo::external_word_type:\n+    case relocInfo::poll_return_type: \/\/ these are really external_word but need special\n+    case relocInfo::poll_type: {      \/\/ relocs to identify them\n+      return CodeCache::contains(adr._target);\n+    }\n+    default: {\n+      return false;\n+    }\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":45,"deletions":9,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -805,1 +805,1 @@\n-  #ifdef ASSERT\n+#ifdef ASSERT\n@@ -807,1 +807,1 @@\n-  #endif\n+#endif\n@@ -814,1 +814,3 @@\n-  bool reachable(AddressLiteral adr) NOT_LP64({ return true;});\n+  bool always_reachable(AddressLiteral adr) NOT_LP64( { return true; } );\n+  bool        reachable(AddressLiteral adr) NOT_LP64( { return true; } );\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-void MacroAssembler::cmp64(Register src1, AddressLiteral src2) {\n+void MacroAssembler::cmp64(Register src1, AddressLiteral src2, Register rscratch) {\n@@ -525,0 +525,1 @@\n+  assert(rscratch != noreg || always_reachable(src2), \"missing\");\n@@ -529,2 +530,2 @@\n-    lea(rscratch1, src2);\n-    Assembler::cmpq(src1, Address(rscratch1, 0));\n+    lea(rscratch, src2);\n+    Assembler::cmpq(src1, Address(rscratch, 0));\n@@ -1125,1 +1126,3 @@\n-void MacroAssembler::addsd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::addsd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1129,2 +1132,2 @@\n-    lea(rscratch1, src);\n-    Assembler::addsd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::addsd(dst, Address(rscratch, 0));\n@@ -1134,1 +1137,3 @@\n-void MacroAssembler::addss(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::addss(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1138,2 +1143,2 @@\n-    lea(rscratch1, src);\n-    addss(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    addss(dst, Address(rscratch, 0));\n@@ -1143,1 +1148,3 @@\n-void MacroAssembler::addpd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::addpd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -1147,2 +1154,2 @@\n-    lea(rscratch1, src);\n-    Assembler::addpd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::addpd(dst, Address(rscratch, 0));\n@@ -2127,1 +2134,2 @@\n-void MacroAssembler::mulpd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::mulpd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2131,2 +2139,2 @@\n-    lea(rscratch1, src);\n-    Assembler::mulpd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::mulpd(dst, Address(rscratch, 0));\n@@ -2472,1 +2480,2 @@\n-void MacroAssembler::movdl(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movdl(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2476,2 +2485,2 @@\n-    lea(rscratch1, src);\n-    movdl(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    movdl(dst, Address(rscratch, 0));\n@@ -2481,1 +2490,2 @@\n-void MacroAssembler::movq(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movq(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n@@ -2485,2 +2495,2 @@\n-    lea(rscratch1, src);\n-    movq(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    movq(dst, Address(rscratch, 0));\n@@ -2686,1 +2696,3 @@\n-                               int vector_len, Register scratch_reg) {\n+                               int vector_len, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2690,2 +2702,2 @@\n-    lea(scratch_reg, src);\n-    Assembler::evmovdquq(dst, mask, Address(scratch_reg, 0), merge, vector_len);\n+    lea(rscratch, src);\n+    Assembler::evmovdquq(dst, mask, Address(rscratch, 0), merge, vector_len);\n@@ -2696,0 +2708,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2713,1 +2727,3 @@\n-void MacroAssembler::movsd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::movsd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2717,2 +2733,2 @@\n-    lea(rscratch1, src);\n-    Assembler::movsd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::movsd(dst, Address(rscratch, 0));\n@@ -2749,1 +2765,3 @@\n-void MacroAssembler::mulsd(XMMRegister dst, AddressLiteral src) {\n+void MacroAssembler::mulsd(XMMRegister dst, AddressLiteral src, Register rscratch) {\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n@@ -2753,2 +2771,2 @@\n-    lea(rscratch1, src);\n-    Assembler::mulsd(dst, Address(rscratch1, 0));\n+    lea(rscratch, src);\n+    Assembler::mulsd(dst, Address(rscratch, 0));\n@@ -3249,0 +3267,2 @@\n+  assert(rscratch != noreg || always_reachable(src), \"missing\");\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":50,"deletions":30,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -765,1 +765,1 @@\n-  void cmp64(Register src1, AddressLiteral src);\n+  void cmp64(Register src1, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1058,1 +1058,1 @@\n-                  Register rax, Register rcx, Register rdx, Register r11);\n+                  Register rax, Register rcx, Register rdx, Register r11, Register tmp);\n@@ -1070,2 +1070,3 @@\n-                Register rax, Register rcx, Register rdx, Register tmp1,\n-                Register tmp2, Register tmp3, Register tmp4);\n+                Register rax, Register rcx, Register rdx, Register r8,\n+                Register  r9, Register r10, Register r11, Register tmp);\n+\n@@ -1074,2 +1075,3 @@\n-                Register rax, Register rcx, Register rdx, Register tmp1,\n-                Register tmp2, Register tmp3, Register tmp4);\n+                Register rax, Register rcx, Register rdx, Register r8,\n+                Register  r9, Register r10, Register r11, Register tmp);\n+\n@@ -1136,3 +1138,3 @@\n-  void addsd(XMMRegister dst, XMMRegister src)    { Assembler::addsd(dst, src); }\n-  void addsd(XMMRegister dst, Address src)        { Assembler::addsd(dst, src); }\n-  void addsd(XMMRegister dst, AddressLiteral src);\n+  void addsd(XMMRegister dst, XMMRegister    src) { Assembler::addsd(dst, src); }\n+  void addsd(XMMRegister dst, Address        src) { Assembler::addsd(dst, src); }\n+  void addsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1140,3 +1142,3 @@\n-  void addss(XMMRegister dst, XMMRegister src)    { Assembler::addss(dst, src); }\n-  void addss(XMMRegister dst, Address src)        { Assembler::addss(dst, src); }\n-  void addss(XMMRegister dst, AddressLiteral src);\n+  void addss(XMMRegister dst, XMMRegister    src) { Assembler::addss(dst, src); }\n+  void addss(XMMRegister dst, Address        src) { Assembler::addss(dst, src); }\n+  void addss(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1144,3 +1146,3 @@\n-  void addpd(XMMRegister dst, XMMRegister src)    { Assembler::addpd(dst, src); }\n-  void addpd(XMMRegister dst, Address src)        { Assembler::addpd(dst, src); }\n-  void addpd(XMMRegister dst, AddressLiteral src);\n+  void addpd(XMMRegister dst, XMMRegister    src) { Assembler::addpd(dst, src); }\n+  void addpd(XMMRegister dst, Address        src) { Assembler::addpd(dst, src); }\n+  void addpd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1250,3 +1252,3 @@\n-  void evmovdquq(XMMRegister dst, Address src, int vector_len) { Assembler::evmovdquq(dst, src, vector_len); }\n-  void evmovdquq(Address dst, XMMRegister src, int vector_len) { Assembler::evmovdquq(dst, src, vector_len); }\n-  void evmovdquq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch);\n+  void evmovdquq(XMMRegister dst, Address        src, int vector_len) { Assembler::evmovdquq(dst, src, vector_len); }\n+  void evmovdquq(Address     dst, XMMRegister    src, int vector_len) { Assembler::evmovdquq(dst, src, vector_len); }\n+  void evmovdquq(XMMRegister dst, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1259,3 +1261,3 @@\n-  void evmovdquq(XMMRegister dst, KRegister mask, Address src, bool merge, int vector_len) { Assembler::evmovdquq(dst, mask, src, merge, vector_len); }\n-  void evmovdquq(Address dst, KRegister mask, XMMRegister src, bool merge, int vector_len) { Assembler::evmovdquq(dst, mask, src, merge, vector_len); }\n-  void evmovdquq(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register scratch_reg);\n+  void evmovdquq(Address     dst, KRegister mask, XMMRegister    src, bool merge, int vector_len) { Assembler::evmovdquq(dst, mask, src, merge, vector_len); }\n+  void evmovdquq(XMMRegister dst, KRegister mask, Address        src, bool merge, int vector_len) { Assembler::evmovdquq(dst, mask, src, merge, vector_len); }\n+  void evmovdquq(XMMRegister dst, KRegister mask, AddressLiteral src, bool merge, int vector_len, Register rscratch = noreg);\n@@ -1268,4 +1270,4 @@\n-  void movsd(XMMRegister dst, XMMRegister src) { Assembler::movsd(dst, src); }\n-  void movsd(Address dst, XMMRegister src)     { Assembler::movsd(dst, src); }\n-  void movsd(XMMRegister dst, Address src)     { Assembler::movsd(dst, src); }\n-  void movsd(XMMRegister dst, AddressLiteral src);\n+  void movsd(Address     dst, XMMRegister    src) { Assembler::movsd(dst, src); }\n+  void movsd(XMMRegister dst, XMMRegister    src) { Assembler::movsd(dst, src); }\n+  void movsd(XMMRegister dst, Address        src) { Assembler::movsd(dst, src); }\n+  void movsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1273,3 +1275,3 @@\n-  void mulpd(XMMRegister dst, XMMRegister src)    { Assembler::mulpd(dst, src); }\n-  void mulpd(XMMRegister dst, Address src)        { Assembler::mulpd(dst, src); }\n-  void mulpd(XMMRegister dst, AddressLiteral src);\n+  void mulpd(XMMRegister dst, XMMRegister    src) { Assembler::mulpd(dst, src); }\n+  void mulpd(XMMRegister dst, Address        src) { Assembler::mulpd(dst, src); }\n+  void mulpd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1277,3 +1279,3 @@\n-  void mulsd(XMMRegister dst, XMMRegister src)    { Assembler::mulsd(dst, src); }\n-  void mulsd(XMMRegister dst, Address src)        { Assembler::mulsd(dst, src); }\n-  void mulsd(XMMRegister dst, AddressLiteral src);\n+  void mulsd(XMMRegister dst, XMMRegister    src) { Assembler::mulsd(dst, src); }\n+  void mulsd(XMMRegister dst, Address        src) { Assembler::mulsd(dst, src); }\n+  void mulsd(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n@@ -1370,3 +1372,3 @@\n-  void vpaddd(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) { Assembler::vpaddd(dst, nds, src, vector_len); }\n-  void vpaddd(XMMRegister dst, XMMRegister nds, Address src, int vector_len) { Assembler::vpaddd(dst, nds, src, vector_len); }\n-  void vpaddd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch);\n+  void vpaddd(XMMRegister dst, XMMRegister nds, XMMRegister    src, int vector_len) { Assembler::vpaddd(dst, nds, src, vector_len); }\n+  void vpaddd(XMMRegister dst, XMMRegister nds, Address        src, int vector_len) { Assembler::vpaddd(dst, nds, src, vector_len); }\n+  void vpaddd(XMMRegister dst, XMMRegister nds, AddressLiteral src, int vector_len, Register rscratch = noreg);\n@@ -1891,2 +1893,2 @@\n-  void movdl(XMMRegister dst, AddressLiteral src);\n-  void movq(XMMRegister dst, AddressLiteral src);\n+  void movdl(XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n+  void movq (XMMRegister dst, AddressLiteral src, Register rscratch = rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":38,"deletions":36,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -181,3 +181,2 @@\n-                              Register eax, Register ecx, Register edx,\n-                              Register r8, Register r9, Register r10, Register r11) {\n-\n+                              Register eax, Register ecx, Register edx, Register r8,\n+                              Register  r9, Register r10, Register r11, Register tmp) {\n@@ -189,1 +188,1 @@\n-  assert_different_registers(r8, r9, r10, r11, eax, ecx, edx);\n+  assert_different_registers(eax, ecx, edx, r8, r9, r10, r11, tmp);\n@@ -198,1 +197,1 @@\n-  movq(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x40245f30UL\n+  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n@@ -204,2 +203,2 @@\n-  movdqu(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK));    \/\/0x00000000UL, 0x80000000UL\n+  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n@@ -211,2 +210,2 @@\n-  movdqu(xmm2, ExternalAddress(P_2));    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-  movq(xmm3, ExternalAddress(P_1));    \/\/0x54400000UL, 0x3fb921fbUL\n+  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n@@ -218,1 +217,1 @@\n-  movdqu(xmm5, ExternalAddress(SC_4));    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n@@ -224,1 +223,1 @@\n-  mulsd(xmm1, ExternalAddress(P_3));    \/\/0x2e037073UL, 0x3b63198aUL\n+  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n@@ -232,1 +231,1 @@\n-  movdqu(xmm6, ExternalAddress(SC_2));    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n@@ -248,1 +247,1 @@\n-  addpd(xmm5, ExternalAddress(SC_3));    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n@@ -250,1 +249,1 @@\n-  addpd(xmm6, ExternalAddress(SC_1));    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n@@ -278,1 +277,1 @@\n-  movq(xmm1, ExternalAddress(ONE));    \/\/0x00000000UL, 0x3ff00000UL\n+  movq(xmm1, ExternalAddress(ONE), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n@@ -426,2 +425,2 @@\n-  movq(xmm2, ExternalAddress(PI_4));     \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  movq(xmm6, ExternalAddress(PI_4 + 8)); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  movq(xmm6, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n@@ -451,1 +450,1 @@\n-  movq(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x40245f30UL\n+  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);   \/\/0x6dc9c883UL, 0x40245f30UL\n@@ -453,2 +452,2 @@\n-  movq(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK));    \/\/0x00000000UL, 0x80000000UL\n+  movq(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);   \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n@@ -460,2 +459,2 @@\n-  movq(xmm3, ExternalAddress(P_1));    \/\/0x54400000UL, 0x3fb921fbUL\n-  movdqu(xmm2, ExternalAddress(P_2));    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n+  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n@@ -469,1 +468,1 @@\n-  movdqu(xmm5, ExternalAddress(SC_4));    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n@@ -475,1 +474,1 @@\n-  mulsd(xmm1, ExternalAddress(P_3));    \/\/0x2e037073UL, 0x3b63198aUL\n+  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n@@ -494,1 +493,1 @@\n-  movdqu(xmm6, ExternalAddress(SC_2));    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n@@ -500,1 +499,1 @@\n-  addpd(xmm5, ExternalAddress(SC_3));    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n@@ -502,1 +501,1 @@\n-  addpd(xmm6, ExternalAddress(SC_1));    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n@@ -605,1 +604,1 @@\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO));    \/\/0x00000000UL, 0x80000000UL\n+  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_cos.cpp","additions":27,"deletions":28,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -203,4 +203,4 @@\n-  movdqu(xmm1, ExternalAddress(cv));       \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n-  movdqu(xmm2, ExternalAddress(cv + 16));  \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n-  movdqu(xmm3, ExternalAddress(cv + 32));  \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n-  movdqu(xmm6, ExternalAddress(SHIFTER));  \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n+  movdqu(xmm1, ExternalAddress(cv),      tmp \/*rscratch*\/); \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n+  movdqu(xmm2, ExternalAddress(cv + 16), tmp \/*rscratch*\/); \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n+  movdqu(xmm3, ExternalAddress(cv + 32), tmp \/*rscratch*\/); \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n+  movdqu(xmm6, ExternalAddress(SHIFTER), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n@@ -220,1 +220,1 @@\n-  movdqu(xmm4, ExternalAddress(64 + cv));    \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n+  movdqu(xmm4, ExternalAddress(cv + 64), tmp \/*rscratch*\/);  \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n@@ -222,1 +222,1 @@\n-  movdqu(xmm5, ExternalAddress(80 + cv));    \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n+  movdqu(xmm5, ExternalAddress(cv + 80), tmp \/*rscratch*\/);  \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n@@ -230,1 +230,1 @@\n-  movdqu(xmm6, ExternalAddress(mmask));    \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n+  movdqu(xmm6, ExternalAddress(mmask), tmp \/*rscratch*\/);    \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n@@ -232,1 +232,1 @@\n-  movdqu(xmm6, ExternalAddress(bias));     \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n+  movdqu(xmm6, ExternalAddress(bias), tmp \/*rscratch*\/);     \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n@@ -245,1 +245,1 @@\n-  mulpd(xmm6, ExternalAddress(48 + cv));     \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n+  mulpd(xmm6, ExternalAddress(cv + 48), tmp \/*rscratch*\/);     \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n@@ -263,1 +263,1 @@\n-  movdqu(xmm4, ExternalAddress(ALLONES));  \/\/ 0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n+  movdqu(xmm4, ExternalAddress(ALLONES), tmp \/*rscratch*\/);  \/\/ 0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n@@ -271,1 +271,1 @@\n-  movdqu(xmm6, ExternalAddress(ebias));    \/\/ 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n+  movdqu(xmm6, ExternalAddress(ebias), tmp \/*rscratch*\/);    \/\/ 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n@@ -340,1 +340,1 @@\n-  movsd(xmm0, ExternalAddress(XMAX));      \/\/ 0xffffffffUL, 0x7fefffffUL\n+  movsd(xmm0, ExternalAddress(XMAX), tmp \/*rscratch*\/);      \/\/ 0xffffffffUL, 0x7fefffffUL\n@@ -348,1 +348,1 @@\n-  movsd(xmm0, ExternalAddress(XMIN));      \/\/ 0x00000000UL, 0x00100000UL\n+  movsd(xmm0, ExternalAddress(XMIN), tmp \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00100000UL\n@@ -362,1 +362,1 @@\n-  movsd(xmm0, ExternalAddress(INF));       \/\/ 0x00000000UL, 0x7ff00000UL\n+  movsd(xmm0, ExternalAddress(INF), tmp \/*rscratch*\/);       \/\/ 0x00000000UL, 0x7ff00000UL\n@@ -366,1 +366,1 @@\n-  movsd(xmm0, ExternalAddress(ZERO));      \/\/ 0x00000000UL, 0x00000000UL\n+  movsd(xmm0, ExternalAddress(ZERO), tmp \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00000000UL\n@@ -380,1 +380,1 @@\n-  addsd(xmm0, ExternalAddress(ONE));   \/\/ 0x00000000UL, 0x3ff00000UL\n+  addsd(xmm0, ExternalAddress(ONE), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_exp.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -237,2 +237,2 @@\n-  movq(xmm6, ExternalAddress(log2));       \/\/ 0xfefa3800UL, 0x3fa62e42UL\n-  movdqu(xmm3, ExternalAddress(coeff));    \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n+  movq(xmm6, ExternalAddress(log2), tmp1 \/*rscratch*\/);       \/\/ 0xfefa3800UL, 0x3fa62e42UL\n+  movdqu(xmm3, ExternalAddress(coeff), tmp1 \/*rscratch*\/);    \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n@@ -243,1 +243,1 @@\n-  movdqu(xmm4, ExternalAddress(16 + coeff)); \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n+  movdqu(xmm4, ExternalAddress(coeff + 16), tmp1 \/*rscratch*\/); \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n@@ -245,1 +245,1 @@\n-  movdqu(xmm2, ExternalAddress(32 + coeff)); \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n+  movdqu(xmm2, ExternalAddress(coeff + 32), tmp1 \/*rscratch*\/); \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n@@ -254,1 +254,1 @@\n-  mulsd(xmm7, ExternalAddress(8 + log2));    \/\/ 0x93c76730UL, 0x3ceef357UL\n+  mulsd(xmm7, ExternalAddress(log2 + 8), tmp1 \/*rscratch*\/);    \/\/ 0x93c76730UL, 0x3ceef357UL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_log.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-\/\/          rax, rdx, rcx, tmp - r11\n+\/\/          rax, rdx, rcx, r11, tmp\n@@ -200,1 +200,1 @@\n-                                Register eax, Register ecx, Register edx, Register r11) {\n+                                Register eax, Register ecx, Register edx, Register r11, Register tmp) {\n@@ -228,1 +228,1 @@\n-  movdqu(xmm5, ExternalAddress(HIGHSIGMASK));    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n+  movdqu(xmm5, ExternalAddress(HIGHSIGMASK), tmp \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n@@ -233,1 +233,1 @@\n-  movdqu(xmm2, ExternalAddress(LOG10_E));    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+  movdqu(xmm2, ExternalAddress(LOG10_E), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n@@ -258,2 +258,2 @@\n-  movq(xmm6, ExternalAddress(log2));    \/\/0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n-  movdqu(xmm3, ExternalAddress(coeff));    \/\/0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL\n+  movq(xmm6, ExternalAddress(log2), tmp \/*rscratch*\/);    \/\/0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n+  movdqu(xmm3, ExternalAddress(coeff), tmp \/*rscratch*\/);    \/\/0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL\n@@ -264,1 +264,1 @@\n-  movdqu(xmm4, ExternalAddress(16 + coeff));    \/\/0x385593b1UL, 0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL\n+  movdqu(xmm4, ExternalAddress(coeff + 16), tmp \/*rscratch*\/);    \/\/0x385593b1UL, 0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL\n@@ -266,1 +266,1 @@\n-  movdqu(xmm2, ExternalAddress(32 + coeff));    \/\/0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL, 0xbff27af2UL\n+  movdqu(xmm2, ExternalAddress(coeff + 32), tmp \/*rscratch*\/);    \/\/0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL, 0xbff27af2UL\n@@ -269,1 +269,1 @@\n-  mulsd(xmm7, ExternalAddress(8 + log2));    \/\/0x1f12b358UL, 0x3cdfef31UL\n+  mulsd(xmm7, ExternalAddress(log2 + 8), tmp \/*rscratch*\/);    \/\/0x1f12b358UL, 0x3cdfef31UL\n@@ -273,1 +273,1 @@\n-  movq(xmm6, ExternalAddress(8 + LOG10_E));    \/\/0xbf2e4108UL, 0x3f5a7a6cUL\n+  movq(xmm6, ExternalAddress(LOG10_E + 8), tmp \/*rscratch*\/);    \/\/0xbf2e4108UL, 0x3f5a7a6cUL\n@@ -336,1 +336,1 @@\n-  movdqu(xmm2, ExternalAddress(LOG10_E));    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+  movdqu(xmm2, ExternalAddress(LOG10_E), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_log10.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -830,1 +830,1 @@\n-  cmp64(tmp1, ExternalAddress(DOUBLE2));\n+  cmp64(tmp1, ExternalAddress(DOUBLE2), tmp2 \/*rscratch*\/);\n@@ -837,1 +837,1 @@\n-  cmp64(tmp1, ExternalAddress(DOUBLE0DOT5));\n+  cmp64(tmp1, ExternalAddress(DOUBLE0DOT5), tmp2 \/*rscratch*\/);\n@@ -840,1 +840,1 @@\n-  cmp64(tmp2, ExternalAddress(DOUBLE0));\n+  cmp64(tmp2, ExternalAddress(DOUBLE0), tmp3 \/*rscratch*\/);\n@@ -864,1 +864,1 @@\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK));    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n@@ -866,1 +866,1 @@\n-  movq(xmm2, ExternalAddress(LOG2_E));    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -906,1 +906,1 @@\n-  movdqu(xmm1, ExternalAddress(coeff));    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n+  movdqu(xmm1, ExternalAddress(coeff), tmp2 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n@@ -909,1 +909,1 @@\n-  movdqu(xmm4, ExternalAddress(16 + coeff));    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n+  movdqu(xmm4, ExternalAddress(coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n@@ -917,1 +917,1 @@\n-  movdqu(xmm6, ExternalAddress(32 + coeff));    \/\/0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL\n+  movdqu(xmm6, ExternalAddress(coeff + 32), tmp2 \/*rscratch*\/);    \/\/0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL\n@@ -922,1 +922,1 @@\n-  movdqu(xmm0, ExternalAddress(48 + coeff));    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n+  movdqu(xmm0, ExternalAddress(coeff + 48), tmp2 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -935,1 +935,1 @@\n-  movq(xmm4, ExternalAddress(HIGHMASK_Y));    \/\/0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n+  movq(xmm4, ExternalAddress(HIGHMASK_Y), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n@@ -970,2 +970,2 @@\n-  movdqu(xmm7, ExternalAddress(e_coeff));    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n-  movdqu(xmm3, ExternalAddress(16 + e_coeff));    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  movdqu(xmm7, ExternalAddress(e_coeff),      tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n@@ -1030,1 +1030,1 @@\n-  movq(xmm2, ExternalAddress(LOG2_E));    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -1034,1 +1034,1 @@\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK));    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n@@ -1076,1 +1076,1 @@\n-  movq(xmm2, ExternalAddress(LOG2_E));    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -1080,1 +1080,1 @@\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK));    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n@@ -1107,1 +1107,1 @@\n-  movq(xmm2, ExternalAddress(HALFMASK));    \/\/0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n+  movq(xmm2, ExternalAddress(HALFMASK), tmp2 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n@@ -1135,2 +1135,2 @@\n-  movdqu(xmm7, ExternalAddress(e_coeff));    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n-  movdqu(xmm3, ExternalAddress(16 + e_coeff));    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  movdqu(xmm7, ExternalAddress(e_coeff +  0), tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n@@ -1151,1 +1151,1 @@\n-  movq(xmm1, ExternalAddress(32 + e_coeff));    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n+  movq(xmm1, ExternalAddress(e_coeff + 32), tmp2 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n@@ -1408,1 +1408,1 @@\n-  movq(xmm2, ExternalAddress(LOG2_E));    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -1441,1 +1441,1 @@\n-  movq(xmm2, ExternalAddress(LOG2_E));    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -1668,1 +1668,1 @@\n-  movq(xmm4, ExternalAddress(coeff_h));    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n+  movq(xmm4, ExternalAddress(coeff_h), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n@@ -1670,1 +1670,1 @@\n-  movq(xmm6, ExternalAddress(coeff_h));    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n+  movq(xmm6, ExternalAddress(coeff_h), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n@@ -1672,1 +1672,1 @@\n-  movq(xmm1, ExternalAddress(8 + coeff_h));    \/\/0x00000000UL, 0xbf5dabe1UL\n+  movq(xmm1, ExternalAddress(coeff_h + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n@@ -1676,1 +1676,1 @@\n-  movq(xmm0, ExternalAddress(8 + coeff_h));    \/\/0x00000000UL, 0xbf5dabe1UL\n+  movq(xmm0, ExternalAddress(coeff_h + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n@@ -1701,1 +1701,1 @@\n-  movdqu(xmm0, ExternalAddress(coeff));    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n+  movdqu(xmm0, ExternalAddress(coeff), tmp2 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n@@ -1707,1 +1707,1 @@\n-  movdqu(xmm2, ExternalAddress(64 + coeff));    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n+  movdqu(xmm2, ExternalAddress(coeff + 64), tmp2 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n@@ -1716,1 +1716,1 @@\n-  movdqu(xmm5, ExternalAddress(80 + coeff));    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL\n+  movdqu(xmm5, ExternalAddress(coeff + 80), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL\n@@ -1720,1 +1720,1 @@\n-  movdqu(xmm1, ExternalAddress(32 + coeff));    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n+  movdqu(xmm1, ExternalAddress(coeff + 32), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n@@ -1728,1 +1728,1 @@\n-  movq(xmm2, ExternalAddress(HIGHMASK_LOG_X));    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n+  movq(xmm2, ExternalAddress(HIGHMASK_LOG_X), tmp2 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n@@ -1736,1 +1736,1 @@\n-  movq(xmm4, ExternalAddress(8 + HIGHMASK_Y));    \/\/0x00000000UL, 0xffffffffUL\n+  movq(xmm4, ExternalAddress(HIGHMASK_Y + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xffffffffUL\n@@ -1764,1 +1764,1 @@\n-  movdqu(xmm7, ExternalAddress(e_coeff));    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  movdqu(xmm7, ExternalAddress(e_coeff), tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n@@ -1768,2 +1768,2 @@\n-  movdqu(xmm3, ExternalAddress(16 + e_coeff));    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n-  movq(xmm2, ExternalAddress(32 + e_coeff));    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n+  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  movq(xmm2, ExternalAddress(e_coeff + 32), tmp2 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_pow.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -822,3 +822,3 @@\n-  vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr +0)); \/\/[PSHUFFLE_BYTE_FLIP_MASK wrt rip]\n-  vmovdqu(SHUF_00BA, ExternalAddress(pshuffle_byte_flip_mask_addr + 32));     \/\/[_SHUF_00BA wrt rip]\n-  vmovdqu(SHUF_DC00, ExternalAddress(pshuffle_byte_flip_mask_addr + 64));     \/\/[_SHUF_DC00 wrt rip]\n+  vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr +  0)); \/\/ [PSHUFFLE_BYTE_FLIP_MASK wrt rip]\n+  vmovdqu(SHUF_00BA,      ExternalAddress(pshuffle_byte_flip_mask_addr + 32)); \/\/ [_SHUF_00BA wrt rip]\n+  vmovdqu(SHUF_DC00,      ExternalAddress(pshuffle_byte_flip_mask_addr + 64)); \/\/ [_SHUF_DC00 wrt rip]\n@@ -985,3 +985,3 @@\n-  vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr + 0)); \/\/[PSHUFFLE_BYTE_FLIP_MASK wrt rip]\n-  vmovdqu(SHUF_00BA, ExternalAddress(pshuffle_byte_flip_mask_addr + 32));     \/\/[_SHUF_00BA wrt rip]\n-  vmovdqu(SHUF_DC00, ExternalAddress(pshuffle_byte_flip_mask_addr + 64));     \/\/[_SHUF_DC00 wrt rip]\n+  vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr +  0)); \/\/ [PSHUFFLE_BYTE_FLIP_MASK wrt rip]\n+  vmovdqu(SHUF_00BA,      ExternalAddress(pshuffle_byte_flip_mask_addr + 32)); \/\/ [_SHUF_00BA wrt rip]\n+  vmovdqu(SHUF_DC00,      ExternalAddress(pshuffle_byte_flip_mask_addr + 64)); \/\/ [_SHUF_DC00 wrt rip]\n@@ -1377,2 +1377,2 @@\n-    vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr + 0)); \/\/PSHUFFLE_BYTE_FLIP_MASK wrt rip\n-    vmovdqu(YMM_MASK_LO, ExternalAddress(pshuffle_byte_flip_mask_addr + 32));\n+    vmovdqu(BYTE_FLIP_MASK, ExternalAddress(pshuffle_byte_flip_mask_addr +  0)); \/\/ PSHUFFLE_BYTE_FLIP_MASK wrt rip\n+    vmovdqu(YMM_MASK_LO,    ExternalAddress(pshuffle_byte_flip_mask_addr + 32));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_sha.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-                              Register eax, Register ebx, Register ecx, Register edx, Register tmp1) {\n+                              Register eax, Register ebx, Register ecx, Register edx, Register tmp) {\n@@ -195,1 +195,1 @@\n-  assert_different_registers(tmp1, eax, ebx, ecx, edx);\n+  assert_different_registers(tmp, eax, ebx, ecx, edx);\n@@ -203,2 +203,2 @@\n-  movq(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x40245f30UL\n-  movq(xmm2, ExternalAddress(SHIFTER));    \/\/0x00000000UL, 0x43380000UL\n+  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/); \/\/0x6dc9c883UL, 0x40245f30UL\n+  movq(xmm2, ExternalAddress(SHIFTER), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x43380000UL\n@@ -210,2 +210,2 @@\n-  movdqu(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK));    \/\/0x00000000UL, 0x80000000UL\n+  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n@@ -217,1 +217,1 @@\n-  movdqu(xmm6, ExternalAddress(P_2));    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  movdqu(xmm6, ExternalAddress(P_2), tmp \/*rscratch*\/); \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n@@ -220,1 +220,1 @@\n-  movdqu(xmm5, ExternalAddress(SC_4));    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/); \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n@@ -225,2 +225,1 @@\n-  }\n-  else {\n+  } else {\n@@ -234,1 +233,1 @@\n-  mulsd(xmm1, ExternalAddress(P_3));    \/\/0x2e037073UL, 0x3b63198aUL\n+  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/); \/\/0x2e037073UL, 0x3b63198aUL\n@@ -240,2 +239,1 @@\n-  }\n-  else {\n+  } else {\n@@ -255,1 +253,1 @@\n-  movdqu(xmm6, ExternalAddress(SC_2));    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/); \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n@@ -265,1 +263,1 @@\n-  addpd(xmm5, ExternalAddress(SC_3));    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/); \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n@@ -267,1 +265,1 @@\n-  addpd(xmm6, ExternalAddress(SC_1));    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/); \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n@@ -296,1 +294,1 @@\n-  mulsd(xmm0, ExternalAddress(ALL_ONES));    \/\/0xffffffffUL, 0x3fefffffUL\n+  mulsd(xmm0, ExternalAddress(ALL_ONES), tmp \/*rscratch*\/); \/\/0xffffffffUL, 0x3fefffffUL\n@@ -300,1 +298,1 @@\n-  movq(xmm3, ExternalAddress(TWO_POW_55));    \/\/0x00000000UL, 0x43600000UL\n+  movq(xmm3, ExternalAddress(TWO_POW_55), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x43600000UL\n@@ -303,1 +301,1 @@\n-  mulsd(xmm3, ExternalAddress(TWO_POW_M55));    \/\/0x00000000UL, 0x3c800000UL\n+  mulsd(xmm3, ExternalAddress(TWO_POW_M55), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x3c800000UL\n@@ -450,2 +448,2 @@\n-  movq(xmm2, ExternalAddress(PI_4));    \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  movq(xmm6, ExternalAddress(8 + PI_4));    \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  movq(xmm6, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n@@ -475,1 +473,1 @@\n-  movq(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x40245f30UL\n+  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n@@ -477,2 +475,2 @@\n-  movq(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK));    \/\/0x00000000UL, 0x80000000UL\n+  movq(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/);  \/\/0x00000000UL, 0x80000000UL\n@@ -484,2 +482,2 @@\n-  movq(xmm3, ExternalAddress(P_1));    \/\/0x54400000UL, 0x3fb921fbUL\n-  movdqu(xmm2, ExternalAddress(P_2));    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);      \/\/0x54400000UL, 0x3fb921fbUL\n+  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n@@ -493,1 +491,1 @@\n-  movdqu(xmm5, ExternalAddress(SC_4));    \/\/0x54400000UL, 0x3fb921fbUL\n+  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n@@ -499,1 +497,1 @@\n-  mulsd(xmm1, ExternalAddress(P_3));    \/\/0x2e037073UL, 0x3b63198aUL\n+  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n@@ -518,1 +516,1 @@\n-  movdqu(xmm6, ExternalAddress(SC_2));    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n@@ -524,1 +522,1 @@\n-  addpd(xmm5, ExternalAddress(SC_3));    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n@@ -526,1 +524,1 @@\n-  addpd(xmm6, ExternalAddress(SC_1));    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n@@ -630,1 +628,1 @@\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO));    \/\/0x00000000UL, 0x80000000UL\n+  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n@@ -1021,9 +1019,9 @@\n-  address zero_none = (address)_zero_none;\n-  address _4onpi_d = (address)__4onpi_d;\n-  address TWO_32H = (address)_TWO_32H;\n-  address pi04_3d = (address)_pi04_3d;\n-  address pi04_5d = (address)_pi04_5d;\n-  address SCALE = (address)_SCALE;\n-  address zeros = (address)_zeros;\n-  address pi04_2d = (address)_pi04_2d;\n-  address TWO_12H = (address)_TWO_12H;\n+  address zero_none  = (address)_zero_none;\n+  address _4onpi_d   = (address)__4onpi_d;\n+  address TWO_32H    = (address)_TWO_32H;\n+  address pi04_3d    = (address)_pi04_3d;\n+  address pi04_5d    = (address)_pi04_5d;\n+  address SCALE      = (address)_SCALE;\n+  address zeros      = (address)_zeros;\n+  address pi04_2d    = (address)_pi04_2d;\n+  address TWO_12H    = (address)_TWO_12H;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_sin.cpp","additions":39,"deletions":41,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-                              Register r10, Register r11) {\n+                              Register r10, Register r11, Register tmp) {\n@@ -472,1 +472,1 @@\n-  assert_different_registers(eax, ecx, edx, r8, r9, r10, r11);\n+  assert_different_registers(eax, ecx, edx, r8, r9, r10, r11, tmp);\n@@ -500,2 +500,2 @@\n-  movdqu(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movdqu(xmm6, ExternalAddress(MUL16));    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movdqu(xmm6, ExternalAddress(MUL16), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n@@ -503,1 +503,1 @@\n-  movdqu(xmm4, ExternalAddress(sign_mask));    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n+  movdqu(xmm4, ExternalAddress(sign_mask), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n@@ -505,1 +505,1 @@\n-  movdqu(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n+  movdqu(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n@@ -515,2 +515,2 @@\n-  movdqu(xmm3, ExternalAddress(P_1));    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n-  movq(xmm5, ExternalAddress(QQ_2));    \/\/0x676733afUL, 0x3d32e7b9UL\n+  movdqu(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n+  movq(xmm5, ExternalAddress(QQ_2), tmp \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n@@ -518,1 +518,1 @@\n-  movdqu(xmm4, ExternalAddress(P_2));    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n+  movdqu(xmm4, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n@@ -526,1 +526,1 @@\n-  mulpd(xmm1, ExternalAddress(P_3));    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n+  mulpd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n@@ -533,1 +533,1 @@\n-  movq(xmm6, ExternalAddress(ONE));    \/\/0x00000000UL, 0x3ff00000UL\n+  movq(xmm6, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n@@ -536,1 +536,1 @@\n-  andpd(xmm5, ExternalAddress(MASK_35));    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n+  andpd(xmm5, ExternalAddress(MASK_35), tmp \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n@@ -589,1 +589,1 @@\n-  movq(xmm7, ExternalAddress(ONE));    \/\/0x00000000UL, 0x3ff00000UL\n+  movq(xmm7, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n@@ -619,1 +619,1 @@\n-  movq(xmm1, ExternalAddress(Q_11));    \/\/0xb8fe4d77UL, 0x3f82609aUL\n+  movq(xmm1, ExternalAddress(Q_11), tmp \/*rscratch*\/);    \/\/0xb8fe4d77UL, 0x3f82609aUL\n@@ -623,1 +623,1 @@\n-  addsd(xmm1, ExternalAddress(Q_9));    \/\/0xbf847a43UL, 0x3f9664a0UL\n+  addsd(xmm1, ExternalAddress(Q_9), tmp \/*rscratch*\/);    \/\/0xbf847a43UL, 0x3f9664a0UL\n@@ -625,1 +625,1 @@\n-  addsd(xmm1, ExternalAddress(Q_7));    \/\/0x52c4c8abUL, 0x3faba1baUL\n+  addsd(xmm1, ExternalAddress(Q_7), tmp \/*rscratch*\/);    \/\/0x52c4c8abUL, 0x3faba1baUL\n@@ -627,1 +627,1 @@\n-  addsd(xmm1, ExternalAddress(Q_5));    \/\/0x11092746UL, 0x3fc11111UL\n+  addsd(xmm1, ExternalAddress(Q_5), tmp \/*rscratch*\/);    \/\/0x11092746UL, 0x3fc11111UL\n@@ -629,1 +629,1 @@\n-  addsd(xmm1, ExternalAddress(Q_3));    \/\/0x55555612UL, 0x3fd55555UL\n+  addsd(xmm1, ExternalAddress(Q_3), tmp \/*rscratch*\/);    \/\/0x55555612UL, 0x3fd55555UL\n@@ -635,1 +635,1 @@\n-  movq(xmm3, ExternalAddress(TWO_POW_55));    \/\/0x00000000UL, 0x43600000UL\n+  movq(xmm3, ExternalAddress(TWO_POW_55), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x43600000UL\n@@ -638,1 +638,1 @@\n-  mulsd(xmm0, ExternalAddress(TWO_POW_M55));    \/\/0x00000000UL, 0x3c800000UL\n+  mulsd(xmm0, ExternalAddress(TWO_POW_M55), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3c800000UL\n@@ -789,2 +789,2 @@\n-  movq(xmm2, ExternalAddress(PI_4));    \/\/0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n-  movq(xmm7, ExternalAddress(8 + PI_4));    \/\/0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n+  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n+  movq(xmm7, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/);    \/\/0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n@@ -812,1 +812,1 @@\n-  movdqu(xmm1, ExternalAddress(PI32INV));    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n+  movdqu(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n@@ -819,1 +819,1 @@\n-  movdqu(xmm4, ExternalAddress(sign_mask));    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n+  movdqu(xmm4, ExternalAddress(sign_mask), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n@@ -828,2 +828,2 @@\n-  movdqu(xmm5, ExternalAddress(ONEHALF));    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movdqu(xmm6, ExternalAddress(MUL16));    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  movdqu(xmm6, ExternalAddress(MUL16), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n@@ -838,2 +838,2 @@\n-  movdqu(xmm3, ExternalAddress(P_1));    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n-  movq(xmm5, ExternalAddress(QQ_2));    \/\/0x676733afUL, 0x3d32e7b9UL\n+  movdqu(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n+  movq(xmm5, ExternalAddress(QQ_2), tmp \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n@@ -842,1 +842,1 @@\n-  movdqu(xmm4, ExternalAddress(P_2));    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n+  movdqu(xmm4, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n@@ -851,1 +851,1 @@\n-  mulpd(xmm1, ExternalAddress(P_3));    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n+  mulpd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n@@ -858,1 +858,1 @@\n-  movq(xmm6, ExternalAddress(ONE));    \/\/0x00000000UL, 0x3ff00000UL\n+  movq(xmm6, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n@@ -861,1 +861,1 @@\n-  andpd(xmm5, ExternalAddress(MASK_35));    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n+  andpd(xmm5, ExternalAddress(MASK_35), tmp \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n@@ -915,1 +915,1 @@\n-  movq(xmm7, ExternalAddress(ONE));    \/\/0x00000000UL, 0x3ff00000UL\n+  movq(xmm7, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n@@ -1012,1 +1012,1 @@\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO));    \/\/0x00000000UL, 0x80000000UL\n+  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_tan.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -3548,12 +3548,0 @@\n-    const XMMRegister x0  = xmm0;\n-    const XMMRegister x1  = xmm1;\n-    const XMMRegister x2  = xmm2;\n-    const XMMRegister x3  = xmm3;\n-\n-    const XMMRegister x4  = xmm4;\n-    const XMMRegister x5  = xmm5;\n-    const XMMRegister x6  = xmm6;\n-    const XMMRegister x7  = xmm7;\n-\n-    const Register tmp   = rbx;\n-\n@@ -3562,1 +3550,2 @@\n-    __ fast_exp(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+    __ fast_exp(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, rbx);\n@@ -3575,12 +3564,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n-   const Register tmp = rbx;\n-\n@@ -3589,1 +3566,2 @@\n-   __ fast_log(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+   __ fast_log(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rcx, rdx, rbx);\n@@ -3602,12 +3580,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n-   const Register tmp = rbx;\n-\n@@ -3616,1 +3582,2 @@\n-   __ fast_log10(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+   __ fast_log10(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rcx, rdx, rbx);\n@@ -3629,12 +3596,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n-   const Register tmp = rbx;\n-\n@@ -3643,1 +3598,2 @@\n-   __ fast_pow(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+   __ fast_pow(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rcx, rdx, rbx);\n@@ -3668,3 +3624,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-\n@@ -3672,1 +3625,1 @@\n-   __ libm_sincos_huge(x0, x1, rax, rcx, rdx, rbx, rsi, rdi, rbp, rsp);\n+   __ libm_sincos_huge(xmm0, xmm1, rax, rcx, rdx, rbx, rsi, rdi, rbp, rsp);\n@@ -3683,10 +3636,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n@@ -3695,1 +3638,2 @@\n-   __ fast_sin(x0, x1, x2, x3, x4, x5, x6, x7, rax, rbx, rdx);\n+   __ fast_sin(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rbx, rdx);\n@@ -3708,12 +3652,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n-   const Register tmp = rbx;\n-\n@@ -3722,1 +3654,2 @@\n-   __ fast_cos(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+   __ fast_cos(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rcx, rdx, rbx);\n@@ -3735,3 +3668,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-\n@@ -3739,1 +3669,1 @@\n-   __ libm_tancot_huge(x0, x1, rax, rcx, rdx, rbx, rsi, rdi, rbp, rsp);\n+   __ libm_tancot_huge(xmm0, xmm1, rax, rcx, rdx, rbx, rsi, rdi, rbp, rsp);\n@@ -3750,12 +3680,0 @@\n-   const XMMRegister x0 = xmm0;\n-   const XMMRegister x1 = xmm1;\n-   const XMMRegister x2 = xmm2;\n-   const XMMRegister x3 = xmm3;\n-\n-   const XMMRegister x4 = xmm4;\n-   const XMMRegister x5 = xmm5;\n-   const XMMRegister x6 = xmm6;\n-   const XMMRegister x7 = xmm7;\n-\n-   const Register tmp = rbx;\n-\n@@ -3764,1 +3682,2 @@\n-   __ fast_tan(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+   __ fast_tan(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+               rax, rcx, rdx, rbx);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":16,"deletions":97,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -7266,12 +7266,0 @@\n-    const XMMRegister x0  = xmm0;\n-    const XMMRegister x1  = xmm1;\n-    const XMMRegister x2  = xmm2;\n-    const XMMRegister x3  = xmm3;\n-\n-    const XMMRegister x4  = xmm4;\n-    const XMMRegister x5  = xmm5;\n-    const XMMRegister x6  = xmm6;\n-    const XMMRegister x7  = xmm7;\n-\n-    const Register tmp   = r11;\n-\n@@ -7281,1 +7269,2 @@\n-    __ fast_exp(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+    __ fast_exp(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, r11);\n@@ -7295,13 +7284,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp1 = r11;\n-    const Register tmp2 = r8;\n-\n@@ -7311,1 +7287,2 @@\n-    __ fast_log(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp1, tmp2);\n+    __ fast_log(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, r11, r8);\n@@ -7325,12 +7302,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp = r11;\n-\n@@ -7340,1 +7305,2 @@\n-    __ fast_log10(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp);\n+    __ fast_log10(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                  rax, rcx, rdx, r11, r8);\n@@ -7354,15 +7320,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp1 = r8;\n-    const Register tmp2 = r9;\n-    const Register tmp3 = r10;\n-    const Register tmp4 = r11;\n-\n@@ -7372,1 +7323,2 @@\n-    __ fast_pow(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp1, tmp2, tmp3, tmp4);\n+    __ fast_pow(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, r8, r9, r10, r11);\n@@ -7386,12 +7338,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp1 = r8;\n-\n@@ -7405,2 +7345,2 @@\n-    __ fast_sin(x0, x1, x2, x3, x4, x5, x6, x7, rax, rbx, rcx, rdx, tmp1);\n-\n+    __ fast_sin(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rbx, rcx, rdx, r8);\n@@ -7424,15 +7364,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp1 = r8;\n-    const Register tmp2 = r9;\n-    const Register tmp3 = r10;\n-    const Register tmp4 = r11;\n-\n@@ -7446,1 +7371,2 @@\n-    __ fast_cos(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp1, tmp2, tmp3, tmp4);\n+    __ fast_cos(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, r8, r9, r10, r11, rbx);\n@@ -7465,15 +7391,0 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    const XMMRegister x3 = xmm3;\n-\n-    const XMMRegister x4 = xmm4;\n-    const XMMRegister x5 = xmm5;\n-    const XMMRegister x6 = xmm6;\n-    const XMMRegister x7 = xmm7;\n-\n-    const Register tmp1 = r8;\n-    const Register tmp2 = r9;\n-    const Register tmp3 = r10;\n-    const Register tmp4 = r11;\n-\n@@ -7487,1 +7398,2 @@\n-    __ fast_tan(x0, x1, x2, x3, x4, x5, x6, x7, rax, rcx, rdx, tmp1, tmp2, tmp3, tmp4);\n+    __ fast_tan(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n+                rax, rcx, rdx, r8, r9, r10, r11, rbx);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":14,"deletions":102,"binary":false,"changes":116,"status":"modified"}]}