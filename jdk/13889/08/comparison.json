{"files":[{"patch":"@@ -80,1 +80,13 @@\n-          \"Write map file for Linux perf tool at exit\")\n+          \"Write map file for Linux perf tool at exit\")                 \\\n+                                                                        \\\n+  product(intx, TimerSlack, -1, EXPERIMENTAL,                           \\\n+          \"Overrides the timer slack value to the given number of \"     \\\n+          \"nanoseconds. Lower value provides more accurate \"            \\\n+          \"high-precision timers, at the expense of (possibly) worse \"  \\\n+          \"power efficiency. In current Linux, 0 means using the \"      \\\n+          \"system-wide default, which would disable the override, but \" \\\n+          \"VM would still print the current timer slack values. Use -1 \"\\\n+          \"to disable both the override and the printouts.\"             \\\n+          \"See prctl(PR_SET_TIMERSLACK) for more info.\")                \\\n+                                                                        \\\n+\n","filename":"src\/hotspot\/os\/linux\/globals_linux.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+# include <sys\/prctl.h>\n@@ -970,0 +971,10 @@\n+\n+      \/\/ Print current timer slack if override is enabled and timer slack value is available.\n+      \/\/ Avoid calling prctl otherwise for extra safety.\n+      if (TimerSlack >= 0) {\n+        int slack = prctl(PR_GET_TIMERSLACK);\n+        if (slack >= 0) {\n+          log_info(os, thread)(\"Thread \\\"%s\\\" (pthread id: \" UINTX_FORMAT \") timer slack: %dns\",\n+                               thread->name(), (uintx) tid, slack);\n+        }\n+      }\n@@ -4704,0 +4715,9 @@\n+  \/\/ Override the timer slack value if needed. The adjustment for the main\n+  \/\/ thread will establish the setting for child threads, which would be\n+  \/\/ most threads in JDK\/JVM.\n+  if (TimerSlack >= 0) {\n+    if (prctl(PR_SET_TIMERSLACK, TimerSlack) < 0) {\n+      vm_exit_during_initialization(\"Setting timer slack failed: %s\", os::strerror(errno));\n+    }\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary Check that timer slack options work\n+ * @requires os.family == \"linux\"\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver TestTimerSlack\n+ *\/\n+public class TestTimerSlack {\n+\n+    public static void main(String[] args) throws Exception {\n+        int defaultSlack;\n+\n+        \/\/ Check the timer slack value is not printed by default\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"TestTimerSlack$TestMain\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldNotContain(\"timer slack:\");\n+        }\n+\n+        \/\/ Check the timer slack value is not printed when explicitly disabled\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"-XX:+UnlockExperimentalVMOptions\",\n+                                                      \"-XX:TimerSlack=-1\",\n+                                                      \"TestTimerSlack$TestMain\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldNotContain(\"timer slack:\");\n+        }\n+\n+        \/\/ Check the timer slack value is good when system-wide default is requested\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"-XX:+UnlockExperimentalVMOptions\",\n+                                                      \"-XX:TimerSlack=0\",\n+                                                      \"TestTimerSlack$TestMain\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"timer slack:\");\n+\n+            defaultSlack = parseSlackValue(output);\n+\n+            if (defaultSlack == 0) {\n+                fail(output, \"Default slack value (\" + defaultSlack + \") is unexpected\");\n+            }\n+        }\n+\n+        \/\/ Check the timer slack value is accepted by all threads\n+        for (int slack : new int[] {1, 10, 100, 1000, 10000, 100000, 1000000}) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"-XX:+UnlockExperimentalVMOptions\",\n+                                                      \"-XX:TimerSlack=\" + slack,\n+                                                      \"TestTimerSlack$TestMain\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"timer slack:\");\n+\n+            int actualSlack = parseSlackValue(output);\n+            if (actualSlack != slack) {\n+                fail(output, \"Actual slack value (\" + actualSlack + \") is not the requested one (\" + slack + \")\");\n+            }\n+        }\n+    }\n+\n+    static final Pattern EXTRACT_PATTERN = Pattern.compile(\"(.*)timer slack: ([0-9]+)ns(.*)\");\n+\n+    public static int parseSlackValue(OutputAnalyzer output) {\n+        Integer value = null;\n+        for (String s : output.asLines()) {\n+            Matcher m = EXTRACT_PATTERN.matcher(s);\n+            if (m.matches()) {\n+                Integer parsedValue = Integer.parseInt(m.group(2));\n+                if (value == null) {\n+                    value = parsedValue;\n+                } else if (!value.equals(parsedValue)) {\n+                    fail(output, \"Multiple timer slack values detected\");\n+                }\n+            }\n+        }\n+        if (value == null) {\n+            fail(output, \"No timer slack values detected\");\n+        }\n+        return value;\n+    }\n+\n+    private static void fail(OutputAnalyzer output, String msg) {\n+        output.reportDiagnosticSummary();\n+        throw new IllegalStateException(msg);\n+    }\n+\n+    public static class TestMain {\n+        static final int THREADS = 8;\n+\n+        public static void main(String... args) throws Exception {\n+            Thread[] ts = new Thread[THREADS];\n+            for (int c = 0; c < THREADS; c++) {\n+                ts[c] = new Thread();\n+                ts[c].start();\n+            }\n+\n+            for (int c = 0; c < THREADS; c++) {\n+                ts[c].join();\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTimerSlack.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"}]}