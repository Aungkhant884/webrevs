{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/**\n+ * @test\n+ * @summary Check that timer slack options work\n+ * requires os.family == \"linux\"\n+ * @requires vm.flagless\n+ * @library \/test\/lib\n+ * @run driver TestTimerSlack\n+ *\/\n+public class TestTimerSlack {\n+\n+    public static void main(String[] args) throws Exception {\n+        int defaultSlack;\n+\n+        \/\/ Check the timer slack value is good by default\n+        {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"TestTimerSlack$Hello\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"timer slack:\");\n+\n+            defaultSlack = parseSlackValue(output);\n+\n+            if (defaultSlack == 0) {\n+                output.reportDiagnosticSummary();\n+                throw new IllegalStateException(\"Default slack value (\" + defaultSlack + \") is unexpected\");\n+            }\n+        }\n+\n+        \/\/ Check the timer slack value is still default when explicitly disabled\/default\n+        for (int slack : new int[] {-1, 0}) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"-XX:+UnlockExperimentalVMOptions\",\n+                                                      \"-XX:TimerSlack=\" + slack,\n+                                                      \"TestTimerSlack$Hello\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"timer slack:\");\n+\n+            int disabledSlack = parseSlackValue(output);\n+            if (disabledSlack != defaultSlack) {\n+                output.reportDiagnosticSummary();\n+                throw new IllegalStateException(\"Disabled slack value (\" + disabledSlack +\n+                    \") is not default (\" + defaultSlack + \") when requested (\" + slack + \")\");\n+            }\n+        }\n+\n+        \/\/ Check the timer slack value is accepted by all threads\n+        for (int slack : new int[] {1, 10, 100, 1000, 10000, 100000, 1000000}) {\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:os+thread\",\n+                                                      \"-XX:+UnlockExperimentalVMOptions\",\n+                                                      \"-XX:TimerSlack=\" + slack,\n+                                                      \"TestTimerSlack$Hello\");\n+\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+            output.shouldContain(\"timer slack:\");\n+\n+            int actualSlack = parseSlackValue(output);\n+            if (actualSlack != slack) {\n+                output.reportDiagnosticSummary();\n+                throw new IllegalStateException(\"Actual slack value (\" + actualSlack +\n+                    \") is not the requested one (\" + slack + \")\");\n+            }\n+        }\n+    }\n+\n+    static final Pattern EXTRACT_PATTERN = Pattern.compile(\"(.*)timer slack: ([0-9]+)ns(.*)\");\n+\n+    public static int parseSlackValue(OutputAnalyzer output) {\n+        Integer value = null;\n+        for (String s : output.asLines()) {\n+            Matcher m = EXTRACT_PATTERN.matcher(s);\n+            if (m.matches()) {\n+                Integer parsedValue = Integer.parseInt(m.group(2));\n+                if (value == null) {\n+                    value = parsedValue;\n+                } else if (!value.equals(parsedValue)) {\n+                    output.reportDiagnosticSummary();\n+                    throw new IllegalStateException(\"Multiple timer slack values detected\");\n+                }\n+            }\n+        }\n+        if (value == null) {\n+            output.reportDiagnosticSummary();\n+            throw new IllegalStateException(\"No timer slack values detected\");\n+        }\n+        return value;\n+    }\n+\n+    public static class Hello {\n+        public static void main(String... args) {\n+            System.out.println(\"Hello!\");\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTimerSlack.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}