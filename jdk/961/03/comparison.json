{"files":[{"patch":"@@ -265,1 +265,1 @@\n-void ShenandoahBarrierSetAssembler::load_reference_barrier_native(MacroAssembler* masm, Register dst, Address load_addr) {\n+void ShenandoahBarrierSetAssembler::load_reference_barrier_weak(MacroAssembler* masm, Register dst, Address load_addr) {\n@@ -275,1 +275,1 @@\n-  __ block_comment(\"load_reference_barrier_native { \");\n+  __ block_comment(\"load_reference_barrier_weak { \");\n@@ -289,1 +289,1 @@\n-  __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native));\n+  __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n@@ -300,1 +300,1 @@\n-  __ block_comment(\"} load_reference_barrier_native\");\n+  __ block_comment(\"} load_reference_barrier_weak\");\n@@ -355,2 +355,2 @@\n-    if (ShenandoahBarrierSet::use_load_reference_barrier_native(decorators, type)) {\n-      load_reference_barrier_native(masm, dst, src);\n+    if (ShenandoahBarrierSet::use_load_reference_barrier_weak(decorators, type)) {\n+      load_reference_barrier_weak(masm, dst, src);\n@@ -672,2 +672,2 @@\n-  if (stub->is_native()) {\n-    __ far_call(RuntimeAddress(bs->load_reference_barrier_native_rt_code_blob()->code_begin()));\n+  if (stub->is_weak()) {\n+    __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n@@ -731,1 +731,1 @@\n-void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_native) {\n+void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_weak) {\n@@ -738,2 +738,2 @@\n-  if (is_native) {\n-    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native));\n+  if (is_weak) {\n+    __ mov(lr, CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  void load_reference_barrier_native(MacroAssembler* masm, Register dst, Address load_addr);\n+  void load_reference_barrier_weak(MacroAssembler* masm, Register dst, Address load_addr);\n@@ -75,1 +75,1 @@\n-  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_native);\n+  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_weak);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-void ShenandoahBarrierSetAssembler::load_reference_barrier_native(MacroAssembler* masm, Register dst, Address src) {\n+void ShenandoahBarrierSetAssembler::load_reference_barrier_weak(MacroAssembler* masm, Register dst, Address src) {\n@@ -347,1 +347,1 @@\n-  __ block_comment(\"load_reference_barrier_native { \");\n+  __ block_comment(\"load_reference_barrier_weak { \");\n@@ -399,1 +399,1 @@\n-  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native), dst, rsi);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), dst, rsi);\n@@ -423,1 +423,1 @@\n-  __ block_comment(\"load_reference_barrier_native { \");\n+  __ block_comment(\"} load_reference_barrier_weak\");\n@@ -520,2 +520,2 @@\n-    if (ShenandoahBarrierSet::use_load_reference_barrier_native(decorators, type)) {\n-      load_reference_barrier_native(masm, dst, src);\n+    if (ShenandoahBarrierSet::use_load_reference_barrier_weak(decorators, type)) {\n+      load_reference_barrier_weak(masm, dst, src);\n@@ -873,2 +873,2 @@\n-  if (stub->is_native()) {\n-    __ call(RuntimeAddress(bs->load_reference_barrier_native_rt_code_blob()->code_begin()));\n+  if (stub->is_weak()) {\n+    __ call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n@@ -941,1 +941,1 @@\n-void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_native) {\n+void ShenandoahBarrierSetAssembler::generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_weak) {\n@@ -950,2 +950,2 @@\n-  if (is_native) {\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native), c_rarg0, c_rarg1);\n+  if (is_weak) {\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), c_rarg0, c_rarg1);\n@@ -960,2 +960,2 @@\n-  if (is_native) {\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native), rax, rbx);\n+  if (is_weak) {\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak), rax, rbx);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_native);\n+  void generate_c1_load_reference_barrier_runtime_stub(StubAssembler* sasm, bool is_weak);\n@@ -77,1 +77,1 @@\n-  void load_reference_barrier_native(MacroAssembler* masm, Register dst, Address src);\n+  void load_reference_barrier_weak(MacroAssembler* masm, Register dst, Address src);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -214,2 +214,2 @@\n-    bool is_native = ShenandoahBarrierSet::use_load_reference_barrier_native(decorators, type);\n-    tmp = load_reference_barrier(gen, tmp, access.resolved_addr(), is_native);\n+    bool is_weak = ShenandoahBarrierSet::use_load_reference_barrier_weak(decorators, type);\n+    tmp = load_reference_barrier(gen, tmp, access.resolved_addr(), is_weak);\n@@ -254,1 +254,1 @@\n-  const bool _is_native;\n+  const bool _is_weak;\n@@ -257,1 +257,1 @@\n-  C1ShenandoahLoadReferenceBarrierCodeGenClosure(bool is_native) : _is_native(is_native) {}\n+  C1ShenandoahLoadReferenceBarrierCodeGenClosure(bool is_weak) : _is_weak(is_weak) {}\n@@ -261,1 +261,1 @@\n-    bs->generate_c1_load_reference_barrier_runtime_stub(sasm, _is_native);\n+    bs->generate_c1_load_reference_barrier_runtime_stub(sasm, _is_weak);\n@@ -277,4 +277,4 @@\n-    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_native_code_gen_cl(true);\n-    _load_reference_barrier_native_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n-                                                                   \"shenandoah_load_reference_barrier_native_slow\",\n-                                                                   false, &lrb_native_code_gen_cl);\n+    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_weak_code_gen_cl(true);\n+    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+                                                                   \"shenandoah_load_reference_barrier_weak_slow\",\n+                                                                   false, &lrb_weak_code_gen_cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  bool _is_native;\n+  bool _is_weak;\n@@ -99,2 +99,2 @@\n-  ShenandoahLoadReferenceBarrierStub(LIR_Opr obj, LIR_Opr addr, LIR_Opr result, LIR_Opr tmp1, LIR_Opr tmp2, bool is_native) :\n-          _obj(obj), _addr(addr), _result(result), _tmp1(tmp1), _tmp2(tmp2), _is_native(is_native)\n+  ShenandoahLoadReferenceBarrierStub(LIR_Opr obj, LIR_Opr addr, LIR_Opr result, LIR_Opr tmp1, LIR_Opr tmp2, bool is_weak) :\n+          _obj(obj), _addr(addr), _result(result), _tmp1(tmp1), _tmp2(tmp2), _is_weak(is_weak)\n@@ -114,1 +114,1 @@\n-  bool is_native() const { return _is_native; }\n+  bool is_weak() const { return _is_weak; }\n@@ -194,1 +194,1 @@\n-  CodeBlob* _load_reference_barrier_native_rt_code_blob;\n+  CodeBlob* _load_reference_barrier_weak_rt_code_blob;\n@@ -218,3 +218,3 @@\n-  CodeBlob* load_reference_barrier_native_rt_code_blob() {\n-    assert(_load_reference_barrier_native_rt_code_blob != NULL, \"\");\n-    return _load_reference_barrier_native_rt_code_blob;\n+  CodeBlob* load_reference_barrier_weak_rt_code_blob() {\n+    assert(_load_reference_barrier_weak_rt_code_blob != NULL, \"\");\n+    return _load_reference_barrier_weak_rt_code_blob;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -308,1 +308,1 @@\n-         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native));\n+         (entry_point == CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak));\n@@ -550,1 +550,1 @@\n-                                                  ShenandoahBarrierSet::use_load_reference_barrier_native(decorators, type));\n+                                                  ShenandoahBarrierSet::use_load_reference_barrier_weak(decorators, type));\n@@ -1066,1 +1066,1 @@\n-          ((ShenandoahLoadReferenceBarrierNode*)in2)->is_native())) {\n+          ((ShenandoahLoadReferenceBarrierNode*)in2)->is_weak())) {\n@@ -1071,1 +1071,1 @@\n-          ((ShenandoahLoadReferenceBarrierNode*)in1)->is_native())) {\n+          ((ShenandoahLoadReferenceBarrierNode*)in1)->is_weak())) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -959,1 +959,1 @@\n-void ShenandoahBarrierC2Support::call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem, bool is_native, PhaseIdealLoop* phase) {\n+void ShenandoahBarrierC2Support::call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem, bool is_weak, PhaseIdealLoop* phase) {\n@@ -974,3 +974,3 @@\n-  address calladdr = is_native ? CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_native)\n-                               : target;\n-  const char* name = is_native ? \"load_reference_barrier_native\" : \"load_reference_barrier\";\n+  address calladdr = is_weak ? CAST_FROM_FN_PTR(address, ShenandoahRuntime::load_reference_barrier_weak)\n+                             : target;\n+  const char* name = is_weak ? \"load_reference_barrier_native\" : \"load_reference_barrier\";\n@@ -1341,1 +1341,1 @@\n-    if (!lrb->is_native()) {\n+    if (!lrb->is_weak()) {\n@@ -1392,1 +1392,1 @@\n-    call_lrb_stub(ctrl, val, addr, result_mem, raw_mem, lrb->is_native(), phase);\n+    call_lrb_stub(ctrl, val, addr, result_mem, raw_mem, lrb->is_weak(), phase);\n@@ -2882,2 +2882,2 @@\n-ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* obj, bool native)\n-: Node(ctrl, obj), _native(native) {\n+ShenandoahLoadReferenceBarrierNode::ShenandoahLoadReferenceBarrierNode(Node* ctrl, Node* obj, bool weak)\n+: Node(ctrl, obj), _weak(weak) {\n@@ -2887,2 +2887,2 @@\n-bool ShenandoahLoadReferenceBarrierNode::is_native() const {\n-  return _native;\n+bool ShenandoahLoadReferenceBarrierNode::is_weak() const {\n+  return _weak;\n@@ -2896,1 +2896,1 @@\n-  return Node::hash() + (_native ? 1 : 0);\n+  return Node::hash() + (_weak ? 1 : 0);\n@@ -2901,1 +2901,1 @@\n-         _native == ((const ShenandoahLoadReferenceBarrierNode&)n)._native;\n+         _weak == ((const ShenandoahLoadReferenceBarrierNode&)n)._weak;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  static void call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem, bool is_native, PhaseIdealLoop* phase);\n+  static void call_lrb_stub(Node*& ctrl, Node*& val, Node* load_addr, Node*& result_mem, Node* raw_mem, bool is_weak, PhaseIdealLoop* phase);\n@@ -232,1 +232,1 @@\n-  bool _native;\n+  bool _weak;\n@@ -237,1 +237,1 @@\n-  bool is_native() const;\n+  bool is_weak() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-bool ShenandoahBarrierSet::use_load_reference_barrier_native(DecoratorSet decorators, BasicType type) {\n+bool ShenandoahBarrierSet::use_load_reference_barrier_weak(DecoratorSet decorators, BasicType type) {\n@@ -98,1 +98,1 @@\n-  return (decorators & IN_NATIVE) != 0;\n+  return ((decorators & IN_NATIVE) != 0) && ((decorators & ON_STRONG_OOP_REF) == 0);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  static bool use_load_reference_barrier_native(DecoratorSet decorators, BasicType type);\n+  static bool use_load_reference_barrier_weak(DecoratorSet decorators, BasicType type);\n@@ -95,2 +95,2 @@\n-  template <class T>\n-  inline oop load_reference_barrier_native(oop obj, T* load_addr);\n+  template <DecoratorSet decorators, class T>\n+  inline oop load_reference_barrier(oop obj, T* load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,5 +102,2 @@\n-template <class T>\n-inline oop ShenandoahBarrierSet::load_reference_barrier_native(oop obj, T* load_addr) {\n-  if (CompressedOops::is_null(obj)) {\n-    return NULL;\n-  }\n+template <DecoratorSet decorators, class T>\n+inline oop ShenandoahBarrierSet::load_reference_barrier(oop obj, T* load_addr) {\n@@ -108,2 +105,4 @@\n-  ShenandoahMarkingContext* const marking_context = _heap->marking_context();\n-  if (_heap->is_concurrent_weak_root_in_progress() && !marking_context->is_marked(obj)) {\n+  \/\/ Prevent resurrection of unreachable non-strorg references.\n+  if (!HasDecorator<decorators, ON_STRONG_OOP_REF>::value && obj != NULL &&\n+      _heap->is_concurrent_weak_root_in_progress() &&\n+      !_heap->marking_context()->is_marked(obj)) {\n@@ -114,0 +113,2 @@\n+      \/\/ This path is sometimes (rarely) taken by GC threads.\n+      \/\/ See e.g.: https:\/\/bugs.openjdk.java.net\/browse\/JDK-8237874\n@@ -189,1 +190,1 @@\n-    value = bs->load_reference_barrier_native(value, addr);\n+    value = bs->load_reference_barrier<decorators, T>(value, addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_native(oopDesc * src, oop* load_addr))\n-  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier_native(oop(src), load_addr);\n+JRT_LEAF(oopDesc*, ShenandoahRuntime::load_reference_barrier_weak(oopDesc * src, oop* load_addr))\n+  return (oopDesc*) ShenandoahBarrierSet::barrier_set()->load_reference_barrier<ON_UNKNOWN_OOP_REF, oop>(oop(src), load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static oopDesc* load_reference_barrier_native(oopDesc* src, oop* load_addr);\n+  static oopDesc* load_reference_barrier_weak(oopDesc* src, oop* load_addr);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}