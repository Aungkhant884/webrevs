{"files":[{"patch":"@@ -1879,0 +1879,3 @@\n+  if (pagesize == max_power_of_2<uintx>()) { \/\/ Shift by 32\/64 would be UB\n+    return 0;\n+  }\n@@ -1892,1 +1895,5 @@\n-  return next_smaller(max_power_of_2<uintx>());\n+  const size_t max = max_power_of_2<uintx>();\n+  if (is_set(max)) {\n+    return max;\n+  }\n+  return next_smaller(max);\n@@ -1896,1 +1903,1 @@\n-  assert(min_page_size() <= 4 * K, \"must be\");\n+  assert(min_page_size() > 0, \"Sanity\");\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -592,0 +592,2 @@\n+  ASSERT_EQ(os::min_page_size(), 4 * K);\n+  ASSERT_LE(os::min_page_size(), (size_t)os::vm_page_size());\n@@ -607,29 +609,14 @@\n-TEST_VM(os, pagesizeset) {\n-  const size_t largest_page_size = LP64_ONLY(1024 * G) NOT_LP64(1 * G);\n-  \/\/ Test a set with just one page size set\n-  for (size_t s = os::min_page_size(); s <= largest_page_size; s *= 2) {\n-    os::PagesizeSet pss;\n-    \/\/ Empty set\n-    ASSERT_FALSE(pss.is_set(s));\n-    ASSERT_FALSE(pss.is_set(s \/ 2));\n-    ASSERT_FALSE(pss.is_set(s * 2));\n-    ASSERT_EQ((size_t)0, pss.smallest());\n-    ASSERT_EQ((size_t)0, pss.largest());\n-    pss.add(s);\n-    \/\/ one size set\n-    ASSERT_TRUE(pss.is_set(s));\n-    ASSERT_FALSE(pss.is_set(s \/ 2));\n-    ASSERT_FALSE(pss.is_set(s * 2));\n-    ASSERT_EQ(s, pss.smallest());\n-    ASSERT_EQ(s, pss.largest());\n-    ASSERT_EQ(pss.next_larger(s), (size_t)0);\n-    ASSERT_EQ(pss.next_smaller(s), (size_t)0);\n-  }\n-  \/\/ Test a random set\n-  {\n-    os::PagesizeSet pss;\n-    const uintx master = LP64_ONLY(((uintx)os::random() << 32) + )\n-                                    (uintx)os::random();\n-    for (size_t s = os::min_page_size(); s < largest_page_size; s *= 2) {\n-      if (master & s) {\n-        pss.add(s);\n+static const int min_page_size_log2 = exact_log2(os::min_page_size());\n+static const int max_page_size_log2 = (int)(sizeof(size_t) * 8);\n+\n+TEST_VM(os, pagesizeset_test_range) {\n+  for (int bit = min_page_size_log2; bit < max_page_size_log2; bit ++) {\n+    for (int bit2 = min_page_size_log2; bit2 < max_page_size_log2; bit2 ++) {\n+      const size_t s =  (size_t)1 << bit;\n+      const size_t s2 = (size_t)1 << bit2;\n+      \/\/tty->print_cr(SIZE_FORMAT \" - \" SIZE_FORMAT, s, s2);\n+      os::PagesizeSet pss;\n+      \/\/ Empty set\n+      for (int bit3 = min_page_size_log2; bit3 < max_page_size_log2; bit3 ++) {\n+        const size_t s3 = (size_t)1 << bit3;\n+        ASSERT_FALSE(pss.is_set(s3));\n@@ -637,12 +624,4 @@\n-    }\n-    \/\/ query all sizes\n-    for (size_t s = os::min_page_size(); s < largest_page_size; s *= 2) {\n-      ASSERT_EQ(((master & s) > 0), pss.is_set(s));\n-    }\n-    \/\/ iterate both ways\n-    for (size_t s = pss.smallest(); s != 0; s = pss.next_larger(s)) {\n-      ASSERT_TRUE(master & s);\n-      ASSERT_TRUE(pss.is_set(s));\n-    }\n-    for (size_t s = pss.largest(); s != 0; s = pss.next_smaller(s)) {\n-      ASSERT_TRUE(master & s);\n+      ASSERT_EQ((size_t)0, pss.smallest());\n+      ASSERT_EQ((size_t)0, pss.largest());\n+      \/\/ one size set\n+      pss.add(s);\n@@ -650,0 +629,26 @@\n+      ASSERT_EQ(s, pss.smallest());\n+      ASSERT_EQ(s, pss.largest());\n+      ASSERT_EQ(pss.next_larger(s), (size_t)0);\n+      ASSERT_EQ(pss.next_smaller(s), (size_t)0);\n+      \/\/ two set\n+      pss.add(s2);\n+      ASSERT_TRUE(pss.is_set(s2));\n+      if (s2 < s) {\n+        ASSERT_EQ(s2, pss.smallest());\n+        ASSERT_EQ(s, pss.largest());\n+        ASSERT_EQ(pss.next_larger(s2), (size_t)s);\n+        ASSERT_EQ(pss.next_smaller(s2), (size_t)0);\n+        ASSERT_EQ(pss.next_larger(s), (size_t)0);\n+        ASSERT_EQ(pss.next_smaller(s), (size_t)s2);\n+      } else if (s2 > s) {\n+        ASSERT_EQ(s, pss.smallest());\n+        ASSERT_EQ(s2, pss.largest());\n+        ASSERT_EQ(pss.next_larger(s), (size_t)s2);\n+        ASSERT_EQ(pss.next_smaller(s), (size_t)0);\n+        ASSERT_EQ(pss.next_larger(s2), (size_t)0);\n+        ASSERT_EQ(pss.next_smaller(s2), (size_t)s);\n+      }\n+      for (int bit3 = min_page_size_log2; bit3 < max_page_size_log2; bit3 ++) {\n+        const size_t s3 = (size_t)1 << bit3;\n+        ASSERT_EQ(s3 == s || s3 == s2, pss.is_set(s3));\n+      }\n@@ -652,13 +657,7 @@\n-  \/\/ Test printing\n-  {\n-    os::PagesizeSet pss;\n-    const size_t sizes[] = { 16 * K, 64 * K, 128 * K, 1 * M, 4 * M, 1 * G, 2 * G, 0 };\n-    \/\/ init set\n-    for (int i = 0; sizes[i] != 0; i ++) {\n-      pss.add(sizes[i]);\n-    }\n-    \/\/ test printing\n-    char buffer[256];\n-    stringStream ss(buffer, sizeof(buffer));\n-    pss.print_on(&ss);\n-    ASSERT_EQ(strcmp(\"16k, 64k, 128k, 1m, 4m, 1g, 2g\", buffer), 0);\n+}\n+\n+TEST_VM(os, pagesizeset_print) {\n+  os::PagesizeSet pss;\n+  const size_t sizes[] = { 16 * K, 64 * K, 128 * K, 1 * M, 4 * M, 1 * G, 2 * G, 0 };\n+  for (int i = 0; sizes[i] != 0; i ++) {\n+    pss.add(sizes[i]);\n@@ -666,0 +665,4 @@\n+  char buffer[256];\n+  stringStream ss(buffer, sizeof(buffer));\n+  pss.print_on(&ss);\n+  ASSERT_EQ(strcmp(\"16k, 64k, 128k, 1m, 4m, 1g, 2g\", buffer), 0);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":57,"deletions":54,"binary":false,"changes":111,"status":"modified"}]}