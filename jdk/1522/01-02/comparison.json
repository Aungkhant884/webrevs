{"files":[{"patch":"@@ -79,1 +79,1 @@\n-os::PagesizeSet os::_page_sizes;\n+os::PagesizeSet   os::_page_sizes;\n@@ -1850,1 +1850,1 @@\n-\/\/\/\/\/\/ Implementation of pagesizeset_t\n+\/\/\/\/\/\/ Implementation of PagesizeSet\n@@ -1852,3 +1852,0 @@\n-\/\/ A pagesizeset_t is a set containing a set of page sizes.\n-\n-\/\/ sets the given page size\n@@ -1860,1 +1857,0 @@\n-\/\/ returns true if given page size is part of the set\n@@ -1863,1 +1859,1 @@\n-  return _v & pagesize;\n+  return (_v & pagesize) > 0;\n@@ -1866,1 +1862,0 @@\n-\/\/ returns the next smallest page size set in this set, or 0.\n@@ -1870,1 +1865,1 @@\n-  uintx v2 = _v & pagesize - 1;\n+  uintx v2 = _v & (pagesize - 1);\n@@ -1887,5 +1882,1 @@\n-  while ((v2 & 1) == 0) {\n-    v2 >>= 1;\n-    l ++;\n-  }\n-  return (size_t)1 << l;\n+  return (size_t)1 << (l + count_trailing_zeros(v2));\n@@ -1918,1 +1909,1 @@\n-      st->print(SIZE_FORMAT \"m\", sz \/ M);\n+      st->print(SIZE_FORMAT \"M\", sz \/ M);\n@@ -1920,1 +1911,1 @@\n-      st->print(SIZE_FORMAT \"g\", sz \/ G);\n+      st->print(SIZE_FORMAT \"G\", sz \/ G);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    \/\/ given a page size, return the next smaller page size in this set, or 0.\n+    \/\/ Given a page size, return the next smaller page size in this set, or 0.\n@@ -113,1 +113,1 @@\n-    \/\/ given a page size, return the next larger page size in this set, or 0.\n+    \/\/ Given a page size, return the next larger page size in this set, or 0.\n@@ -115,1 +115,1 @@\n-    \/\/ returns the largest page size in this set, or 0 if set is empty.\n+    \/\/ Returns the largest page size in this set, or 0 if set is empty.\n@@ -117,1 +117,1 @@\n-    \/\/ returns the smallest page size in this set, or 0 if set is empty.\n+    \/\/ Returns the smallest page size in this set, or 0 if set is empty.\n@@ -119,1 +119,1 @@\n-    \/\/ prints one line of comma separated, human readable page sizes, \"empty\" if empty.\n+    \/\/ Prints one line of comma separated, human readable page sizes, \"empty\" if empty.\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -662,0 +662,1 @@\n+  static const char* const expected = \"16k, 64k, 128k, 1M, 4M, 1G, 2G\";\n@@ -668,1 +669,2 @@\n-  ASSERT_EQ(strcmp(\"16k, 64k, 128k, 1m, 4m, 1g, 2g\", buffer), 0);\n+  \/\/ tty->print_cr(\"%s\", buffer);\n+  ASSERT_EQ(strcmp(expected, buffer), 0);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}