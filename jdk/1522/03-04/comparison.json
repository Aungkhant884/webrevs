{"files":[{"patch":"@@ -1852,3 +1852,3 @@\n-void os::PageSizes::add(size_t pagesize) {\n-  assert(is_power_of_2(pagesize), \"pagesize must be a power of 2: \" SIZE_FORMAT_HEX, pagesize);\n-  _v |= pagesize;\n+void os::PageSizes::add(size_t page_size) {\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_HEX, page_size);\n+  _v |= page_size;\n@@ -1857,3 +1857,3 @@\n-bool os::PageSizes::contains(size_t pagesize) const {\n-  assert(is_power_of_2(pagesize), \"pagesize must be a power of 2: \" SIZE_FORMAT_HEX, pagesize);\n-  return (_v & pagesize) > 0;\n+bool os::PageSizes::contains(size_t page_size) const {\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_HEX, page_size);\n+  return (_v & page_size) != 0;\n@@ -1862,3 +1862,3 @@\n-size_t os::PageSizes::next_smaller(size_t pagesize) const {\n-  assert(is_power_of_2(pagesize), \"pagesize must be a power of 2: \" SIZE_FORMAT_HEX, pagesize);\n-  size_t v2 = _v & (pagesize - 1);\n+size_t os::PageSizes::next_smaller(size_t page_size) const {\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_HEX, page_size);\n+  size_t v2 = _v & (page_size - 1);\n@@ -1871,3 +1871,3 @@\n-size_t os::PageSizes::next_larger(size_t pagesize) const {\n-  assert(is_power_of_2(pagesize), \"pagesize must be a power of 2: \" SIZE_FORMAT_HEX, pagesize);\n-  if (pagesize == max_power_of_2<size_t>()) { \/\/ Shift by 32\/64 would be UB\n+size_t os::PageSizes::next_larger(size_t page_size) const {\n+  assert(is_power_of_2(page_size), \"page_size must be a power of 2: \" SIZE_FORMAT_HEX, page_size);\n+  if (page_size == max_power_of_2<size_t>()) { \/\/ Shift by 32\/64 would be UB\n@@ -1876,2 +1876,2 @@\n-  int l = exact_log2(pagesize) + 1;\n-  size_t v2 = _v >> l;\n+  \/\/ Remove current and smaller page sizes\n+  size_t v2 = _v & ~(page_size + (page_size - 1));\n@@ -1881,1 +1881,1 @@\n-  return (size_t)1 << (l + count_trailing_zeros(v2));\n+  return (size_t)1 << count_trailing_zeros(v2);\n@@ -1893,2 +1893,3 @@\n-  assert(min_page_size() > 0, \"Sanity\");\n-  return next_larger(min_page_size() \/ 2);\n+  \/\/ Strictly speaking the set should not contain sizes < os::vm_page_size().\n+  \/\/ But this is not enforced.\n+  return next_larger(1);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-  static PageSizes        _page_sizes;\n+  static PageSizes          _page_sizes;\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -366,1 +366,1 @@\n-  for (int stripe = 0; stripe < num_stripes; stripe ++) {\n+  for (int stripe = 0; stripe < num_stripes; stripe++) {\n@@ -386,1 +386,1 @@\n-  for (int stripe = 0; stripe < num_stripes; stripe ++) {\n+  for (int stripe = 0; stripe < num_stripes; stripe++) {\n@@ -399,1 +399,1 @@\n-  for (int stripe = 0; stripe < num_stripes; stripe ++) {\n+  for (int stripe = 0; stripe < num_stripes; stripe++) {\n@@ -577,1 +577,1 @@\n-    for (int stripe = 0; stripe < 4; stripe ++) {\n+    for (int stripe = 0; stripe < 4; stripe++) {\n@@ -591,1 +591,1 @@\n-TEST_VM(os, pagesizes) {\n+TEST_VM(os, os_pagesizes) {\n@@ -610,1 +610,1 @@\n-static const int max_page_size_log2 = (int)(sizeof(size_t) * 8);\n+static const int max_page_size_log2 = (int)BitsPerWord;\n@@ -612,3 +612,3 @@\n-TEST_VM(os, pagesizeset_test_range) {\n-  for (int bit = min_page_size_log2; bit < max_page_size_log2; bit ++) {\n-    for (int bit2 = min_page_size_log2; bit2 < max_page_size_log2; bit2 ++) {\n+TEST_VM(os, pagesizes_test_range) {\n+  for (int bit = min_page_size_log2; bit < max_page_size_log2; bit++) {\n+    for (int bit2 = min_page_size_log2; bit2 < max_page_size_log2; bit2++) {\n@@ -617,1 +617,0 @@\n-      \/\/tty->print_cr(SIZE_FORMAT \" - \" SIZE_FORMAT, s, s2);\n@@ -619,5 +618,0 @@\n-      \/\/ Empty set\n-      for (int bit3 = min_page_size_log2; bit3 < max_page_size_log2; bit3 ++) {\n-        const size_t s3 = (size_t)1 << bit3;\n-        ASSERT_FALSE(pss.contains(s3));\n-      }\n@@ -651,1 +645,1 @@\n-      for (int bit3 = min_page_size_log2; bit3 < max_page_size_log2; bit3 ++) {\n+      for (int bit3 = min_page_size_log2; bit3 < max_page_size_log2; bit3++) {\n@@ -659,1 +653,1 @@\n-TEST_VM(os, pagesizeset_print) {\n+TEST_VM(os, pagesizes_test_print) {\n@@ -663,1 +657,1 @@\n-  for (int i = 0; sizes[i] != 0; i ++) {\n+  for (int i = 0; sizes[i] != 0; i++) {\n@@ -669,1 +663,0 @@\n-  \/\/ tty->print_cr(\"%s\", buffer);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":12,"deletions":19,"binary":false,"changes":31,"status":"modified"}]}