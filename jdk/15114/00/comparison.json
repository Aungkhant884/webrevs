{"files":[{"patch":"@@ -55,1 +55,1 @@\n- * Print method and constructor info.\n+ * Abstract \"member writer\" for executable elements.\n@@ -59,1 +59,8 @@\n-    public AbstractExecutableMemberWriter(SubWriterHolderWriter writer, TypeElement typeElement,\n+    \/**\n+     * Creates a writer for executable members, for a given enclosing writer, type element, and kind of member.\n+     *\n+     * @param writer the enclosing \"page\" writer, with an associated type element\n+     * @param typeElement the type element\n+     * @param kind the kind of member: one of {@link VisibleMemberTable.Kind#CONSTRUCTORS} or {@link VisibleMemberTable.Kind#METHODS}\n+     *\/\n+    protected AbstractExecutableMemberWriter(SubWriterHolderWriter writer, TypeElement typeElement,\n@@ -62,0 +69,6 @@\n+\n+        \/\/ The following would be better before the preceding call to super; see JDK-8300786\n+        switch (kind) {\n+            case CONSTRUCTORS, METHODS -> { }\n+            default -> throw new IllegalArgumentException(kind.toString());\n+        }\n@@ -64,1 +77,7 @@\n-    public AbstractExecutableMemberWriter(SubWriterHolderWriter writer) {\n+    \/**\n+     * Creates a writer for executable members, for a given enclosing writer.\n+     * No type element or kind is provided, limiting the set of methods that can be used.\n+     *\n+     * @param writer the enclosing \"page\" writer.\n+     *\/\n+    protected AbstractExecutableMemberWriter(SubWriterHolderWriter writer) {\n@@ -68,1 +87,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Links;\n@@ -70,0 +69,2 @@\n+ *\n+ * Two primary methods are defined: {@link #buildSummary(Content)} and {@link #buildDetails(Content)}.\n@@ -79,1 +80,0 @@\n-    protected final Links links;\n@@ -126,0 +126,6 @@\n+    \/**\n+     * Creates a member writer for a given enclosing writer and kind of member.\n+     *\n+     * @param writer the enclosing \"page\" writer.\n+     * @param kind the kind\n+     *\/\n@@ -130,0 +136,6 @@\n+    \/**\n+     * Creates a member writer for a given enclosing writer.\n+     * No type element or kind is provided, limiting the set of methods that can be used.\n+     *\n+     * @param writer the writer\n+     *\/\n@@ -134,0 +146,7 @@\n+    \/**\n+     * Creates a member writer for a given enclosing writer, and optional type element and member kind.\n+     * If no specific type element or kind is provided, methods that require such information\n+     * may throw {@link NullPointerException}.\n+     *\n+     * @param writer the writer\n+     *\/\n@@ -146,1 +165,0 @@\n-        this.links = writer.links;\n@@ -161,0 +179,20 @@\n+    \/**\n+     * Builds the signature.\n+     *\n+     * @param target the content to which the documentation will be added\n+     *\/\n+    protected abstract void buildSignature(Content target);\n+\n+    \/**\n+     * Builds the deprecation info.\n+     *\n+     * @param target the content to which the documentation will be added\n+     *\/\n+    protected abstract void buildDeprecationInfo(Content target);\n+\n+    \/**\n+     * Builds the preview info.\n+     *\n+     * @param target the content to which the documentation will be added\n+     *\/\n+    protected abstract void buildPreviewInfo(Content target);\n@@ -182,1 +220,1 @@\n-            Content member = getMemberSummaryHeader(typeElement, target);\n+            Content member = getMemberSummaryHeader(target);\n@@ -274,1 +312,0 @@\n-     * @param typeElement the class the summary belongs to\n@@ -279,1 +316,1 @@\n-    public abstract Content getMemberSummaryHeader(TypeElement typeElement, Content content);\n+    public abstract Content getMemberSummaryHeader(Content content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":43,"deletions":6,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * Abstract class to generate the overview files.\n+ * Abstract class to generate the top-level \"overview\" files.\n@@ -49,1 +49,1 @@\n-                                      DocPath filename) {\n+                                       DocPath filename) {\n@@ -53,0 +53,10 @@\n+    \/**\n+     * {@return the page description, for the {@code <meta>} element}\n+     *\/\n+    protected abstract String getDescription();\n+\n+    \/**\n+     * {@return the title for the page}\n+     *\/\n+    protected abstract String getTitleKey();\n+\n@@ -89,10 +99,4 @@\n-    \/**\n-     * Generate and prints the contents in the index file.\n-     *\n-     * @param title the title of the window\n-     * @param description the content for the description META tag\n-     * @throws DocFileIOException if there is a problem building the package index file\n-     *\/\n-    protected void buildOverviewIndexFile(String title, String description)\n-            throws DocFileIOException {\n-        String windowOverview = resources.getText(title);\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n+        var titleKey = getTitleKey();\n+        String windowOverview = resources.getText(titleKey);\n@@ -108,2 +112,2 @@\n-                configuration.metakeywords.getOverviewMetaKeywords(title, configuration.getOptions().docTitle()),\n-                description, body);\n+                configuration.metakeywords.getOverviewMetaKeywords(titleKey, configuration.getOptions().docTitle()),\n+                getDescription(), body);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractOverviewIndexWriter.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -62,1 +61,0 @@\n-     * @param filename Path to the file which is getting generated.\n@@ -65,3 +63,2 @@\n-    public AllClassesIndexWriter(HtmlConfiguration configuration,\n-            DocPath filename, IndexBuilder indexBuilder) {\n-        super(configuration, filename);\n+    public AllClassesIndexWriter(HtmlConfiguration configuration, IndexBuilder indexBuilder) {\n+        super(configuration, DocPaths.ALLCLASSES_INDEX);\n@@ -71,23 +68,2 @@\n-    \/**\n-     * Create AllClassesIndexWriter object.\n-     *\n-     * @param configuration The current configuration\n-     * @param indexBuilder IndexBuilder object for all classes index.\n-     * @throws DocFileIOException\n-     *\/\n-    public static void generate(HtmlConfiguration configuration,\n-            IndexBuilder indexBuilder) throws DocFileIOException {\n-        generate(configuration, indexBuilder, DocPaths.ALLCLASSES_INDEX);\n-    }\n-\n-    private static void generate(HtmlConfiguration configuration, IndexBuilder indexBuilder,\n-            DocPath fileName) throws DocFileIOException {\n-        AllClassesIndexWriter allClassGen = new AllClassesIndexWriter(configuration,\n-                fileName, indexBuilder);\n-        allClassGen.buildAllClassesFile();\n-    }\n-\n-    \/**\n-     * Print all the classes in the file.\n-     *\/\n-    protected void buildAllClassesFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllClassesIndexWriter.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -34,1 +35,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -37,1 +37,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -49,11 +48,0 @@\n-     * @param filename Path to the file which is getting generated.\n-     *\/\n-    public AllPackagesIndexWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n-    }\n-\n-    \/**\n-     * Create AllPackagesIndexWriter object.\n-     *\n-     * @param configuration The current configuration\n-     * @throws DocFileIOException\n@@ -61,7 +49,2 @@\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        generate(configuration, DocPaths.ALLPACKAGES_INDEX);\n-    }\n-\n-    private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {\n-        AllPackagesIndexWriter allPkgGen = new AllPackagesIndexWriter(configuration, fileName);\n-        allPkgGen.buildAllPackagesFile();\n+    public AllPackagesIndexWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.ALLPACKAGES_INDEX);\n@@ -73,1 +56,2 @@\n-    protected void buildAllPackagesFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AllPackagesIndexWriter.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -116,5 +116,1 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param target the content to which the documentation will be added\n-     *\/\n+    @Override\n@@ -125,7 +121,3 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param annotationContent the content to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content annotationContent) {\n-        addDeprecated(currentMember, annotationContent);\n+    @Override\n+    protected void buildDeprecationInfo(Content target) {\n+        addDeprecated(currentMember, target);\n@@ -134,7 +126,3 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param annotationContent the content to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content annotationContent) {\n-        addPreview(currentMember, annotationContent);\n+    @Override\n+    protected void buildPreviewInfo(Content target) {\n+        addPreview(currentMember, target);\n@@ -174,2 +162,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n@@ -190,4 +177,0 @@\n-    protected Content getMemberHeader() {\n-        return writer.getMemberHeader();\n-    }\n-\n@@ -341,1 +324,1 @@\n-    public void addDefaultValueInfo(Element member, Content annotationContent) {\n+    protected void addDefaultValueInfo(Element member, Content annotationContent) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeMemberWriter.java","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -89,1 +90,1 @@\n-     * Constructor.\n+     * Creates a writer for a page listing the uses of a type element.\n@@ -91,1 +92,3 @@\n-     * @param filename the file to be generated.\n+     * @param configuration the configuration\n+     * @param mapper a \"mapper\" containing the usage information\n+     * @param typeElement the type element\n@@ -94,1 +97,1 @@\n-                          ClassUseMapper mapper, DocPath filename,\n+                          ClassUseMapper mapper,\n@@ -96,1 +99,1 @@\n-        super(configuration, filename);\n+        super(configuration, pathFor(configuration, typeElement));\n@@ -141,0 +144,6 @@\n+    private static DocPath pathFor(HtmlConfiguration configuration, TypeElement typeElement) {\n+        return configuration.docPaths.forPackage(typeElement)\n+                .resolve(DocPaths.CLASS_USE)\n+                .resolve(configuration.docPaths.forName( typeElement));\n+    }\n+\n@@ -142,1 +151,1 @@\n-     * Write out class use pages.\n+     * Write out class use and package use pages.\n@@ -146,1 +155,1 @@\n-     * @throws DocFileIOException if there is an error while generating the documentation\n+     * @throws DocletException if there is an error while generating the documentation\n@@ -148,2 +157,3 @@\n-    public static void generate(HtmlConfiguration configuration, ClassTree classTree) throws DocFileIOException  {\n-        ClassUseMapper mapper = new ClassUseMapper(configuration, classTree);\n+    public static void generate(HtmlConfiguration configuration, ClassTree classTree) throws DocletException {\n+        var writerFactory = configuration.getWriterFactory();\n+        var mapper = new ClassUseMapper(configuration, classTree);\n@@ -157,3 +167,3 @@\n-            if (!(nodeprecated &&\n-                  utils.isDeprecated(utils.containingPackage(aClass))))\n-                ClassUseWriter.generate(configuration, mapper, aClass);\n+            if (!(nodeprecated && utils.isDeprecated(utils.containingPackage(aClass)))) {\n+                writerFactory.newClassUseWriter(aClass, mapper).buildPage();\n+            }\n@@ -164,2 +174,3 @@\n-            if (!(nodeprecated && utils.isDeprecated(pkg)))\n-                PackageUseWriter.generate(configuration, mapper, pkg);\n+            if (!(nodeprecated && utils.isDeprecated(pkg))) {\n+                writerFactory.newPackageUseWriter(pkg, mapper).buildPage();\n+            }\n@@ -183,15 +194,0 @@\n-    \/**\n-     * Generate a class page.\n-     *\n-     * @throws DocFileIOException if there is a problem while generating the documentation\n-     *\/\n-    public static void generate(HtmlConfiguration configuration, ClassUseMapper mapper,\n-                                TypeElement typeElement) throws DocFileIOException {\n-        ClassUseWriter clsgen;\n-        DocPath path = configuration.docPaths.forPackage(typeElement)\n-                              .resolve(DocPaths.CLASS_USE)\n-                              .resolve(configuration.docPaths.forName( typeElement));\n-        clsgen = new ClassUseWriter(configuration, mapper, path, typeElement);\n-        clsgen.generateClassUseFile();\n-    }\n-\n@@ -203,1 +199,2 @@\n-    protected void generateClassUseFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassUseWriter.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javax.lang.model.element.AnnotationMirror;\n@@ -85,1 +84,0 @@\n-    protected final VisibleMemberTable visibleMemberTable;\n@@ -102,1 +100,0 @@\n-        visibleMemberTable = configuration.getVisibleMemberTable(typeElement);\n@@ -116,1 +113,2 @@\n-    public void build() throws DocletException {\n+    @Override\n+    public void buildPage() throws DocletException {\n@@ -700,1 +698,1 @@\n-        if (isFunctionalInterface()) {\n+        if (utils.isFunctionalInterface(typeElement)) {\n@@ -710,11 +708,0 @@\n-    public boolean isFunctionalInterface() {\n-        List<? extends AnnotationMirror> annotationMirrors = typeElement.getAnnotationMirrors();\n-        for (AnnotationMirror anno : annotationMirrors) {\n-            if (utils.isFunctionalInterface(anno)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriter.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-    public void build() throws DocletException {\n+    @Override\n+    public void buildPage() throws DocletException {\n@@ -163,1 +164,1 @@\n-        Content summaries = getConstantSummaries();\n+        Content summaries = new ContentBuilder();\n@@ -362,6 +363,0 @@\n-    \/\/@Override\n-    \/\/ TODO: inline?\n-    public Content getConstantSummaries() {\n-        return new ContentBuilder();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriter.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-     * Construct a new ConstructorWriterImpl.\n+     * Construct a new member writer for constructors.\n@@ -61,1 +61,1 @@\n-     * @param writer The writer for the class that the constructors belong to.\n+     * @param writer the writer for the class to which the constructors belong\n@@ -123,7 +123,3 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param constructorContent the content to which the documentation will be added\n-     *\/\n-    protected void buildSignature(Content constructorContent) {\n-        constructorContent.add(getSignature(currentConstructor));\n+    @Override\n+    protected void buildSignature(Content target) {\n+        target.add(getSignature(currentConstructor));\n@@ -132,7 +128,3 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param constructorContent the content to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content constructorContent) {\n-        addDeprecated(currentConstructor, constructorContent);\n+    @Override\n+    protected void buildDeprecationInfo(Content target) {\n+        addDeprecated(currentConstructor, target);\n@@ -141,7 +133,3 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param constructorContent the content to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content constructorContent) {\n-        addPreview(currentConstructor, constructorContent);\n+    @Override\n+    protected void buildPreviewInfo(Content target) {\n+        addPreview(currentConstructor, target);\n@@ -172,2 +160,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n@@ -300,4 +287,0 @@\n-\n-    protected Content getMemberHeader(){\n-        return writer.getMemberHeader();\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriter.java","additions":12,"deletions":29,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.source.doctree.DeprecatedTree;\n@@ -33,0 +32,3 @@\n+import com.sun.source.doctree.DeprecatedTree;\n+\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -37,1 +39,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -40,2 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -56,1 +55,0 @@\n-     * @param filename the file to be generated\n@@ -58,2 +56,2 @@\n-    public DeprecatedListWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename, configuration.deprecatedAPIListBuilder);\n+    public DeprecatedListWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.DEPRECATED_LIST, configuration.deprecatedAPIListBuilder);\n@@ -62,15 +60,18 @@\n-    \/**\n-     * Get list of all the deprecated classes and members in all the Packages\n-     * specified on the command line.\n-     * Then instantiate DeprecatedListWriter and generate File.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @throws DocFileIOException if there is a problem writing the deprecated list\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.DEPRECATED)) {\n-            DocPath filename = DocPaths.DEPRECATED_LIST;\n-            DeprecatedListWriter depr = new DeprecatedListWriter(configuration, filename);\n-            depr.generateSummaryListFile(PageMode.DEPRECATED, \"deprecated elements\",\n-                    configuration.contents.deprecatedAPI, \"doclet.Window_Deprecated_List\");\n-        }\n+    @Override\n+    protected PageMode getPageMode() {\n+        return PageMode.DEPRECATED;\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"deprecated elements\";\n+    }\n+\n+    @Override\n+    protected Content getHeadContent() {\n+        return configuration.contents.deprecatedAPI;\n+    }\n+\n+    @Override\n+    protected String getTitleKey() {\n+        return \"doclet.Window_Deprecated_List\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DeprecatedListWriter.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -45,1 +46,0 @@\n-import javax.tools.FileObject;\n@@ -55,0 +55,4 @@\n+\/**\n+ * A class to handle any files, including HTML files, found in the {@code doc-files}\n+ * subdirectory for any given package.\n+ *\/\n@@ -57,4 +61,4 @@\n-    public final Element element;\n-    public final Location location;\n-    public final DocPath  source;\n-    public final HtmlConfiguration configuration;\n+    private final Element element;\n+    private final Location location;\n+    private final DocPath  source;\n+    private final HtmlConfiguration configuration;\n@@ -62,0 +66,2 @@\n+    private final Utils utils;\n+    private final WriterFactory writerFactory;\n@@ -64,1 +70,1 @@\n-     * Constructor to construct the DocFilesWriter object.\n+     * Constructor to construct the DocFilesHandler object.\n@@ -69,0 +75,1 @@\n+     * @see WriterFactory#newDocFilesHandler(Element)\n@@ -73,0 +80,2 @@\n+        this.utils = configuration.utils;\n+        this.writerFactory = configuration.getWriterFactory();\n@@ -78,1 +87,1 @@\n-                location = configuration.utils.getLocationForModule(mdle);\n+                location = utils.getLocationForModule(mdle);\n@@ -84,1 +93,1 @@\n-                location = configuration.utils.getLocationForPackage(pkg);\n+                location = utils.getLocationForPackage(pkg);\n@@ -100,1 +109,1 @@\n-     * @throws DocFileIOException if there is a problem while copying\n+     * @throws DocletException if there is a problem while copying\n@@ -103,1 +112,1 @@\n-    public void copyDocFiles()  throws DocFileIOException {\n+    public void copyDocFiles() throws DocletException {\n@@ -131,1 +140,1 @@\n-                               boolean first) throws DocFileIOException {\n+                               boolean first) throws DocletException {\n@@ -180,15 +189,4 @@\n-    private void handleHtmlFile(DocFile srcfile, DocPath dstPath) throws DocFileIOException {\n-        Utils utils = configuration.utils;\n-        FileObject fileObject = srcfile.getFileObject();\n-        DocFileElement dfElement = new DocFileElement(utils, element, fileObject);\n-\n-        DocPath dfilePath = dstPath.resolve(srcfile.getName());\n-        PackageElement pkg = dfElement.getPackageElement();\n-\n-        HtmlDocletWriter docletWriter = new DocFileWriter(configuration, dfilePath, element, pkg);\n-\n-        List<? extends DocTree> localTags = getLocalHeaderTags(utils.getPreamble(dfElement));\n-        Content localTagsContent = docletWriter.commentTagsToContent(dfElement, localTags, false);\n-\n-        String title = getWindowTitle(docletWriter, dfElement).trim();\n-        HtmlTree htmlContent = docletWriter.getBody(title);\n+    private void handleHtmlFile(DocFile srcFile, DocPath dstPath) throws DocletException {\n+        var fileObject = srcFile.getFileObject();\n+        var dfElement = new DocFileElement(utils, element, fileObject);\n+        var path = dstPath.resolve(srcFile.getName());\n@@ -196,9 +194,1 @@\n-        List<? extends DocTree> fullBody = utils.getFullBody(dfElement);\n-        Content pageContent = docletWriter.commentTagsToContent(dfElement, fullBody, false);\n-        docletWriter.addTagsInfo(dfElement, pageContent);\n-\n-        htmlContent.add(new BodyContents()\n-                .setHeader(docletWriter.getHeader(PageMode.DOC_FILE, element))\n-                .addMainContent(pageContent)\n-                .setFooter(docletWriter.getFooter()));\n-        docletWriter.printHtmlDocument(List.of(), null, localTagsContent, List.of(), htmlContent);\n+        writerFactory.newDocFileWriter(path, dfElement).buildPage();\n@@ -207,61 +197,6 @@\n-\n-    private List<? extends DocTree> getLocalHeaderTags(List<? extends DocTree> dtrees) {\n-        List<DocTree> localTags = new ArrayList<>();\n-        DocTreeFactory docTreeFactory = configuration.docEnv.getDocTrees().getDocTreeFactory();\n-        boolean inHead = false;\n-        boolean inTitle = false;\n-        loop:\n-        for (DocTree dt : dtrees) {\n-            switch (dt.getKind()) {\n-                case START_ELEMENT:\n-                    StartElementTree startElem = (StartElementTree)dt;\n-                    switch (HtmlTag.get(startElem.getName())) {\n-                        case HEAD:\n-                            inHead = true;\n-                            break;\n-                        case META:\n-                            break;\n-                        case TITLE:\n-                            inTitle = true;\n-                            break;\n-                        default:\n-                            if (inHead) {\n-                                localTags.add(startElem);\n-                                localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n-                            }\n-                    }\n-                    break;\n-                case END_ELEMENT:\n-                    EndElementTree endElem = (EndElementTree)dt;\n-                    switch (HtmlTag.get(endElem.getName())) {\n-                        case HEAD:\n-                            inHead = false;\n-                            break loop;\n-                        case TITLE:\n-                            inTitle = false;\n-                            break;\n-                        default:\n-                            if (inHead) {\n-                                localTags.add(endElem);\n-                                localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n-                            }\n-                    }\n-                    break;\n-                case ENTITY:\n-                case TEXT:\n-                    if (inHead && !inTitle) {\n-                        localTags.add(dt);\n-                    }\n-                    break;\n-            }\n-        }\n-        return localTags;\n-    }\n-\n-    private String getWindowTitle(HtmlDocletWriter docletWriter, Element element) {\n-        String t = configuration.utils.getHTMLTitle(element);\n-        return docletWriter.getWindowTitle(t);\n-    }\n-\n-    private static class DocFileWriter extends HtmlDocletWriter {\n-        private final PackageElement pkg;\n+    \/**\n+     * A writer to write out the processed form of an HTML file found in the {@code doc-files} subdirectory\n+     * for a module or package.\n+     *\/\n+    public static class DocFileWriter extends HtmlDocletWriter {\n+        private final DocFileElement dfElement;\n@@ -270,1 +205,1 @@\n-         * Constructor to construct the HtmlDocletWriter object.\n+         * Constructor.\n@@ -274,2 +209,1 @@\n-         * @param e             the anchoring element\n-         * @param pkg           the package containing the doc file\n+         * @param dfElement     the element representing the doc file\n@@ -277,1 +211,1 @@\n-        public DocFileWriter(HtmlConfiguration configuration, DocPath path, Element e, PackageElement pkg) {\n+        public DocFileWriter(HtmlConfiguration configuration, DocPath path, DocFileElement dfElement) {\n@@ -279,8 +213,1 @@\n-            switch (e.getKind()) {\n-                case PACKAGE:\n-                case MODULE:\n-                    break;\n-                default:\n-                    throw new AssertionError(\"unsupported element: \" + e.getKind());\n-            }\n-            this.pkg = pkg;\n+            this.dfElement = dfElement;\n@@ -291,0 +218,1 @@\n+            var pkg = dfElement.getPackageElement();\n@@ -298,0 +226,78 @@\n+\n+        @Override\n+        public void buildPage() throws DocFileIOException {\n+\n+            List<? extends DocTree> localTags = getLocalHeaderTags(utils.getPreamble(dfElement));\n+            Content localTagsContent = commentTagsToContent(dfElement, localTags, false);\n+\n+            String title = getWindowTitle(this, dfElement).trim();\n+            HtmlTree htmlContent = getBody(title);\n+\n+            List<? extends DocTree> fullBody = utils.getFullBody(dfElement);\n+            Content pageContent = commentTagsToContent(dfElement, fullBody, false);\n+            addTagsInfo(dfElement, pageContent);\n+\n+            htmlContent.add(new BodyContents()\n+                    .setHeader(getHeader(PageMode.DOC_FILE, dfElement.getElement()))\n+                    .addMainContent(pageContent)\n+                    .setFooter(getFooter()));\n+            printHtmlDocument(List.of(), null, localTagsContent, List.of(), htmlContent);\n+        }\n+\n+        private String getWindowTitle(HtmlDocletWriter docletWriter, Element element) {\n+            String t = configuration.utils.getHTMLTitle(element);\n+            return docletWriter.getWindowTitle(t);\n+        }\n+\n+        private List<? extends DocTree> getLocalHeaderTags(List<? extends DocTree> dtrees) {\n+            List<DocTree> localTags = new ArrayList<>();\n+            DocTreeFactory docTreeFactory = configuration.docEnv.getDocTrees().getDocTreeFactory();\n+            boolean inHead = false;\n+            boolean inTitle = false;\n+            loop:\n+            for (DocTree dt : dtrees) {\n+                switch (dt.getKind()) {\n+                    case START_ELEMENT:\n+                        StartElementTree startElem = (StartElementTree)dt;\n+                        switch (HtmlTag.get(startElem.getName())) {\n+                            case HEAD:\n+                                inHead = true;\n+                                break;\n+                            case META:\n+                                break;\n+                            case TITLE:\n+                                inTitle = true;\n+                                break;\n+                            default:\n+                                if (inHead) {\n+                                    localTags.add(startElem);\n+                                    localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n+                                }\n+                        }\n+                        break;\n+                    case END_ELEMENT:\n+                        EndElementTree endElem = (EndElementTree)dt;\n+                        switch (HtmlTag.get(endElem.getName())) {\n+                            case HEAD:\n+                                inHead = false;\n+                                break loop;\n+                            case TITLE:\n+                                inTitle = false;\n+                                break;\n+                            default:\n+                                if (inHead) {\n+                                    localTags.add(endElem);\n+                                    localTags.add(docTreeFactory.newTextTree(\"\\n\"));\n+                                }\n+                        }\n+                        break;\n+                    case ENTITY:\n+                    case TEXT:\n+                        if (inHead && !inTitle) {\n+                            localTags.add(dt);\n+                        }\n+                        break;\n+                }\n+            }\n+            return localTags;\n+        }\n@@ -299,0 +305,1 @@\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/DocFilesHandler.java","additions":115,"deletions":108,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -70,2 +70,1 @@\n-            Content enumConstantsDetailsHeader = getEnumConstantsDetailsHeader(typeElement,\n-                    target);\n+            Content enumConstantsDetailsHeader = getEnumConstantsDetailsHeader(target);\n@@ -76,2 +75,1 @@\n-                Content enumConstantContent = getEnumConstantsHeader(currentElement,\n-                        memberList);\n+                Content enumConstantContent = getEnumConstantsHeader(currentElement);\n@@ -93,5 +91,1 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param target the content to which the documentation will be added\n-     *\/\n+    @Override\n@@ -102,5 +96,1 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param target the content to which the documentation will be added\n-     *\/\n+    @Override\n@@ -111,5 +101,1 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param target the content to which the documentation will be added\n-     *\/\n+    @Override\n@@ -142,2 +128,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n@@ -156,2 +141,1 @@\n-    protected Content getEnumConstantsDetailsHeader(TypeElement typeElement,\n-                                                 Content memberDetails) {\n+    protected Content getEnumConstantsDetailsHeader(Content memberDetails) {\n@@ -166,2 +150,1 @@\n-    protected Content getEnumConstantsHeader(VariableElement enumConstant,\n-                                          Content enumConstantsDetails) {\n+    protected Content getEnumConstantsHeader(VariableElement enumConstant) {\n@@ -255,4 +238,0 @@\n-\n-    protected Content getMemberHeader(){\n-        return writer.getMemberHeader();\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/EnumConstantWriter.java","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -71,2 +70,0 @@\n-    private final Navigation navBar;\n-\n@@ -82,1 +79,0 @@\n-     * @param filename Path to the file which is getting generated.\n@@ -84,7 +80,2 @@\n-    public ExternalSpecsWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n-        this.navBar = new Navigation(null, configuration, PageMode.EXTERNAL_SPECS, path);\n-    }\n-\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        generate(configuration, DocPaths.EXTERNAL_SPECS);\n+    public ExternalSpecsWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.EXTERNAL_SPECS, false);\n@@ -93,1 +84,5 @@\n-    private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {\n+    \/**\n+     * Prints all the \"external specs\" to the file.\n+     *\/\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n@@ -99,2 +94,2 @@\n-        ExternalSpecsWriter w = new ExternalSpecsWriter(configuration, fileName);\n-        w.buildExternalSpecsPage();\n+\n+        writeGenerating();\n@@ -102,1 +97,0 @@\n-    }\n@@ -104,4 +98,0 @@\n-    \/**\n-     * Prints all the \"external specs\" to the file.\n-     *\/\n-    protected void buildExternalSpecsPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ExternalSpecsWriter.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -100,7 +100,3 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param fieldContent the content to which the documentation will be added\n-     *\/\n-    protected void buildSignature(Content fieldContent) {\n-        fieldContent.add(getSignature(currentElement));\n+    @Override\n+    protected void buildSignature(Content target) {\n+        target.add(getSignature(currentElement));\n@@ -109,7 +105,3 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param fieldContent the content to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content fieldContent) {\n-        addDeprecated(currentElement, fieldContent);\n+    @Override\n+    protected void buildDeprecationInfo(Content target) {\n+        addDeprecated(currentElement, target);\n@@ -118,7 +110,3 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param fieldContent the content to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content fieldContent) {\n-        addPreview(currentElement, fieldContent);\n+    @Override\n+    protected void buildPreviewInfo(Content target) {\n+        addPreview(currentElement, target);\n@@ -148,1 +136,0 @@\n-\n@@ -150,2 +137,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n@@ -286,4 +272,0 @@\n-\n-    protected Content getMemberHeader(){\n-        return writer.getMemberHeader();\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriter.java","additions":10,"deletions":28,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -65,1 +65,0 @@\n-     * @param filename File to be generated.\n@@ -67,3 +66,2 @@\n-    public HelpWriter(HtmlConfiguration configuration,\n-                      DocPath filename) {\n-        super(configuration, filename);\n+    public HelpWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.HELP_DOC);\n@@ -81,21 +79,2 @@\n-    \/**\n-     * Construct the HelpWriter object and then use it to generate the help\n-     * file. The name of the generated file is \"help-doc.html\". The help file\n-     * will get generated if and only if \"-helpfile\" and \"-nohelp\" is not used\n-     * on the command line.\n-     *\n-     * @param configuration the configuration\n-     * @throws DocFileIOException if there is a problem while generating the documentation\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        DocPath filename = DocPaths.HELP_DOC;\n-        HelpWriter helpgen = new HelpWriter(configuration, filename);\n-        helpgen.generateHelpFile();\n-    }\n-\n-    \/**\n-     * Generate the help file contents.\n-     *\n-     * @throws DocFileIOException if there is a problem while generating the documentation\n-     *\/\n-    protected void generateHelpFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n@@ -211,1 +190,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HelpWriter.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.EnumSet;\n@@ -219,2 +220,2 @@\n-        writerFactory.newConstantsSummaryWriter().build();\n-        writerFactory.newSerializedFormWriter().build();\n+        writerFactory.newConstantsSummaryWriter().buildPage();\n+        writerFactory.newSerializedFormWriter().buildPage();\n@@ -248,1 +249,1 @@\n-            TreeWriter.generate(configuration, classTree);\n+            writerFactory.newTreeWriter(classTree).buildPage();\n@@ -251,10 +252,13 @@\n-        if (configuration.conditionalPages.contains((HtmlConfiguration.ConditionalPage.DEPRECATED))) {\n-            DeprecatedListWriter.generate(configuration);\n-        }\n-\n-        if (configuration.conditionalPages.contains((HtmlConfiguration.ConditionalPage.PREVIEW))) {\n-            PreviewListWriter.generate(configuration);\n-        }\n-\n-        if (configuration.conditionalPages.contains((HtmlConfiguration.ConditionalPage.NEW))) {\n-            NewAPIListWriter.generate(configuration);\n+        for (var cp : EnumSet.of(\n+                HtmlConfiguration.ConditionalPage.DEPRECATED,\n+                HtmlConfiguration.ConditionalPage.PREVIEW,\n+                HtmlConfiguration.ConditionalPage.NEW)) {\n+            if (configuration.conditionalPages.contains(cp)) {\n+                var w = switch (cp) {\n+                    case DEPRECATED -> writerFactory.newDeprecatedListWriter();\n+                    case NEW -> writerFactory.newNewAPIListWriter();\n+                    case PREVIEW -> writerFactory.newPreviewListWriter();\n+                    default -> throw new AssertionError();\n+                };\n+                w.buildPage();\n+            }\n@@ -264,5 +268,4 @@\n-            if (configuration.showModules) {\n-                ModuleIndexWriter.generate(configuration);\n-            } else {\n-                PackageIndexWriter.generate(configuration);\n-            }\n+            var w = configuration.showModules\n+                    ? writerFactory.newModuleIndexWriter()\n+                    : writerFactory.newPackageIndexWriter();\n+            w.buildPage();\n@@ -273,1 +276,1 @@\n-                ExternalSpecsWriter.generate(configuration);\n+                writerFactory.newExternalSpecsWriter().buildPage();\n@@ -275,1 +278,2 @@\n-            SystemPropertiesWriter.generate(configuration);\n+            writerFactory.newSystemPropertiesWriter().buildPage();\n+\n@@ -279,1 +283,2 @@\n-            AllClassesIndexWriter.generate(configuration, allClassesIndex);\n+\n+            writerFactory.newAllClassesIndexWriter(allClassesIndex).buildPage();\n@@ -281,1 +286,1 @@\n-                AllPackagesIndexWriter.generate(configuration);\n+                writerFactory.newAllPackagesIndexWriter().buildPage();\n@@ -283,0 +288,1 @@\n+\n@@ -285,1 +291,1 @@\n-            SearchWriter.generate(configuration);\n+            writerFactory.newSearchWriter().buildPage();\n@@ -295,1 +301,2 @@\n-            HelpWriter.generate(configuration);\n+            var w = writerFactory.newHelpWriter();\n+            w.buildPage();\n@@ -297,0 +304,1 @@\n+\n@@ -402,1 +410,1 @@\n-            writerFactory.newClassWriter(te, classTree).build();\n+            writerFactory.newClassWriter(te, classTree).buildPage();\n@@ -411,1 +419,1 @@\n-                writerFactory.newModuleWriter(mdle).build();\n+                writerFactory.newModuleWriter(mdle).buildPage();\n@@ -426,1 +434,1 @@\n-                writerFactory.newPackageWriter(pkg).build();\n+                writerFactory.newPackageWriter(pkg).buildPage();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":35,"deletions":27,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -118,3 +119,2 @@\n- * Class for the Html Format Code Generation specific to JavaDoc.\n- * This Class contains methods related to the Html Code Generation which\n- * are used extensively while generating the entire documentation.\n+ * The base class for classes that write complete HTML pages to be included in the overall API documentation.\n+ * The primary method is {@link #buildPage()}.\n@@ -122,1 +122,1 @@\n-public class HtmlDocletWriter {\n+public abstract class HtmlDocletWriter {\n@@ -140,6 +140,0 @@\n-    \/**\n-     * Name of the file getting generated. If the file getting generated is\n-     * \"java\/lang\/Object.html\", then the filename is \"Object.html\".\n-     *\/\n-    public final DocPath filename;\n-\n@@ -212,1 +206,1 @@\n-    public HtmlDocletWriter(HtmlConfiguration configuration, DocPath path, boolean generating) {\n+    protected HtmlDocletWriter(HtmlConfiguration configuration, DocPath path, boolean generating) {\n@@ -224,1 +218,0 @@\n-        this.filename = path.basename();\n@@ -233,0 +226,7 @@\n+    \/**\n+     * The top-level method to generate and write the page represented by this writer.\n+     *\n+     * @throws DocletException if a problem occurs while building or writing the page\n+     *\/\n+    public abstract void buildPage() throws DocletException;\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -109,2 +109,0 @@\n-\n-    private static final String ENUM_CONSTANTS_INHERITANCE = \"enum-constants-inherited-from-class-\";\n@@ -326,11 +324,0 @@\n-    \/**\n-     * Returns an id for the list of enum constants inherited from a class or interface.\n-     *\n-     * @param element the class or interface\n-     *\n-     * @return the id\n-     *\/\n-    HtmlId forInheritedEnumConstants(TypeElement element) {\n-        return forInherited(ENUM_CONSTANTS_INHERITANCE, element);\n-    }\n-\n@@ -490,1 +477,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-\n@@ -152,1 +151,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIndexBuilder.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-        IndexRedirectWriter indexRedirect = new IndexRedirectWriter(configuration, fileName, target);\n-        indexRedirect.generateIndexFile();\n+        var indexRedirect = new IndexRedirectWriter(configuration, fileName, target);\n+        indexRedirect.buildPage();\n@@ -64,1 +64,1 @@\n-    private DocPath target;\n+    private final DocPath target;\n@@ -71,5 +71,2 @@\n-    \/**\n-     * Generate an index file that redirects to an alternate file.\n-     * @throws DocFileIOException if there is a problem generating the file\n-     *\/\n-    private void generateIndexFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexRedirectWriter.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.DocletException;\n@@ -66,0 +67,2 @@\n+    protected final List<Character> allFirstCharacters;\n+    protected final List<Character> displayFirstCharacters;\n@@ -75,1 +78,1 @@\n-     * @throws DocFileIOException if an error occurs while writing the files\n+     * @throws DocletException if an error occurs while writing the files\n@@ -77,1 +80,2 @@\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n+    public static void generate(HtmlConfiguration configuration) throws DocletException {\n+        var writerFactory = configuration.getWriterFactory();\n@@ -85,2 +89,1 @@\n-                IndexWriter writer = new IndexWriter(configuration, file);\n-                writer.generateIndexFile(firstCharacters, List.of(ch));\n+                writerFactory.newIndexWriter(file, firstCharacters, List.of(ch)).buildPage();\n@@ -89,2 +92,1 @@\n-            IndexWriter writer = new IndexWriter(configuration, DocPaths.INDEX_ALL);\n-            writer.generateIndexFile(firstCharacters, firstCharacters);\n+            writerFactory.newIndexWriter(DocPaths.INDEX_ALL, firstCharacters, firstCharacters).buildPage();\n@@ -99,0 +101,2 @@\n+     * @param allFirstCharacters     the initial characters of all index items\n+     * @param displayFirstCharacters the initial characters of the index items to appear on this page\n@@ -100,1 +104,2 @@\n-    protected IndexWriter(HtmlConfiguration configuration, DocPath path) {\n+    protected IndexWriter(HtmlConfiguration configuration, DocPath path,\n+                          List<Character> allFirstCharacters, List<Character> displayFirstCharacters) {\n@@ -104,0 +109,2 @@\n+        this.allFirstCharacters = allFirstCharacters;\n+        this.displayFirstCharacters = displayFirstCharacters;\n@@ -109,2 +116,0 @@\n-     * @param allFirstCharacters     the initial characters of all index items\n-     * @param displayFirstCharacters the initial characters of the index items to appear on this page\n@@ -113,2 +118,2 @@\n-    protected void generateIndexFile(List<Character> allFirstCharacters,\n-                                     List<Character> displayFirstCharacters) throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n@@ -192,1 +197,1 @@\n-            case MODULE:\n+            case MODULE -> {\n@@ -195,1 +200,1 @@\n-                break;\n+            }\n@@ -197,1 +202,1 @@\n-            case PACKAGE:\n+            case PACKAGE -> {\n@@ -203,1 +208,1 @@\n-                break;\n+            }\n@@ -205,5 +210,1 @@\n-            case CLASS:\n-            case ENUM:\n-            case RECORD:\n-            case ANNOTATION_TYPE:\n-            case INTERFACE:\n+            case CLASS, ENUM, RECORD, ANNOTATION_TYPE, INTERFACE -> {\n@@ -214,1 +215,1 @@\n-                break;\n+            }\n@@ -216,4 +217,1 @@\n-            case CONSTRUCTOR:\n-            case METHOD:\n-            case FIELD:\n-            case ENUM_CONSTANT:\n+            case CONSTRUCTOR, METHOD, FIELD, ENUM_CONSTANT -> {\n@@ -222,1 +220,1 @@\n-                                label, HtmlStyle.memberNameLink));\n+                        label, HtmlStyle.memberNameLink));\n@@ -225,1 +223,1 @@\n-                break;\n+            }\n@@ -227,2 +225,1 @@\n-            default:\n-                throw new Error();\n+            default -> throw new Error();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/IndexWriter.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -122,7 +122,3 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param methodContent the content to which the documentation will be added\n-     *\/\n-    protected void buildSignature(Content methodContent) {\n-        methodContent.add(getSignature(currentMethod));\n+    @Override\n+    protected void buildSignature(Content target) {\n+        target.add(getSignature(currentMethod));\n@@ -131,7 +127,3 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param methodContent the content to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content methodContent) {\n-        addDeprecated(currentMethod, methodContent);\n+    @Override\n+    protected void buildDeprecationInfo(Content target) {\n+        addDeprecated(currentMethod, target);\n@@ -140,7 +132,3 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param methodContent the content to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content methodContent) {\n-        addPreview(currentMethod, methodContent);\n+    @Override\n+    protected void buildPreviewInfo(Content target) {\n+        addPreview(currentMethod, target);\n@@ -177,1 +165,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement, Content target) {\n+    public Content getMemberSummaryHeader(Content target) {\n@@ -437,4 +425,0 @@\n-\n-    protected Content getMemberHeader(){\n-        return writer.getMemberHeader();\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriter.java","additions":10,"deletions":26,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -55,1 +53,0 @@\n-     * @param filename the name of the generated file\n@@ -57,2 +54,2 @@\n-    public ModuleIndexWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n+    public ModuleIndexWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.INDEX);\n@@ -62,10 +59,8 @@\n-    \/**\n-     * Generate the module index page.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @throws DocFileIOException if there is a problem generating the module index page\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        DocPath filename = DocPaths.INDEX;\n-        ModuleIndexWriter mdlgen = new ModuleIndexWriter(configuration, filename);\n-        mdlgen.buildOverviewIndexFile(\"doclet.Window_Overview_Summary\", \"module index\");\n+    @Override\n+    public String getDescription() {\n+        return \"module index\";\n+    }\n+\n+    @Override\n+    public String getTitleKey() {\n+        return \"doclet.Window_Overview_Summary\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleIndexWriter.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -168,6 +168,2 @@\n-    \/**\n-     * Build the module summary.\n-     *\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    public void build() throws DocletException {\n+    @Override\n+    public void buildPage() throws DocletException {\n@@ -684,0 +680,1 @@\n+            \/\/ TODO: consider deprecation info, addPackageDeprecationInfo\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriter.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -60,0 +60,4 @@\n+    protected void buildSignature(Content target) { }\n+    protected void buildDeprecationInfo(Content target) { }\n+    protected void buildPreviewInfo(Content target) { }\n+\n@@ -61,2 +65,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement,\n-            Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriter.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.List;\n+\n@@ -31,0 +33,1 @@\n+\n@@ -38,2 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -43,2 +44,0 @@\n-import java.util.List;\n-\n@@ -57,2 +56,2 @@\n-    public NewAPIListWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename, configuration.newAPIPageBuilder);\n+    public NewAPIListWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.NEW_LIST, configuration.newAPIPageBuilder);\n@@ -61,13 +60,18 @@\n-    \/**\n-     * If the \"New API\" page is configured this method instantiates a NewAPIListWriter\n-     * and generates the file.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @throws DocFileIOException if there is a problem writing the new API list\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.NEW)) {\n-            NewAPIListWriter writer = new NewAPIListWriter(configuration, DocPaths.NEW_LIST);\n-            writer.generateSummaryListFile(PageMode.NEW, \"new elements\",\n-                    Text.of(getHeading(configuration)), \"doclet.Window_New_List\");\n-        }\n+    @Override\n+    protected PageMode getPageMode() {\n+        return PageMode.NEW;\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"new elements\";\n+    }\n+\n+    @Override\n+    protected Content getHeadContent() {\n+        return Text.of(getHeading(configuration));\n+    }\n+\n+    @Override\n+    protected String getTitleKey() {\n+        return \"doclet.Window_New_List\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NewAPIListWriter.java","additions":23,"deletions":19,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import java.util.*;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.SortedSet;\n@@ -35,2 +37,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -46,1 +46,1 @@\n-     * A Set of Packages to be documented.\n+     * The Set of Packages to be documented.\n@@ -56,1 +56,0 @@\n-     * @param filename the path of the page to be generated\n@@ -59,2 +58,2 @@\n-    public PackageIndexWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n+    public PackageIndexWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.INDEX);\n@@ -64,10 +63,8 @@\n-    \/**\n-     * Generate the package index page.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @throws DocFileIOException if there is a problem generating the package index page\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        DocPath filename = DocPaths.INDEX;\n-        PackageIndexWriter packgen = new PackageIndexWriter(configuration, filename);\n-        packgen.buildOverviewIndexFile(\"doclet.Window_Overview_Summary\", \"package index\");\n+    @Override\n+    public String getDescription() {\n+        return \"package index\";\n+    }\n+\n+    @Override\n+    public String getTitleKey() {\n+        return \"doclet.Window_Overview_Summary\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageIndexWriter.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -35,1 +36,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -38,1 +38,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -58,1 +57,0 @@\n-     * @param path the docpath to generate files into\n@@ -61,3 +59,4 @@\n-    public PackageTreeWriter(HtmlConfiguration configuration, DocPath path, PackageElement packageElement) {\n-        super(configuration, path,\n-              new ClassTree(configuration.typeElementCatalog.allClasses(packageElement), configuration));\n+    public PackageTreeWriter(HtmlConfiguration configuration, PackageElement packageElement) {\n+        super(configuration,\n+                configuration.docPaths.forPackage(packageElement).resolve(DocPaths.PACKAGE_TREE),\n+                new ClassTree(configuration.typeElementCatalog.allClasses(packageElement), configuration));\n@@ -80,3 +79,4 @@\n-        DocPath path = configuration.docPaths.forPackage(pkg).resolve(DocPaths.PACKAGE_TREE);\n-        PackageTreeWriter packgen = new PackageTreeWriter(configuration, path, pkg);\n-        packgen.generatePackageTreeFile();\n+        if (!(noDeprecated && configuration.utils.isDeprecated(pkg))) {\n+            var packgen = new PackageTreeWriter(configuration, pkg);\n+            packgen.buildPage();\n+        }\n@@ -90,1 +90,2 @@\n-    protected void generatePackageTreeFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageTreeWriter.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-     * @param filename the file to be generated\n@@ -66,1 +65,1 @@\n-                            ClassUseMapper mapper, DocPath filename,\n+                            ClassUseMapper mapper,\n@@ -68,1 +67,1 @@\n-        super(configuration, configuration.docPaths.forPackage(pkgElement).resolve(filename));\n+        super(configuration, pathFor(configuration, pkgElement));\n@@ -92,14 +91,2 @@\n-    \/**\n-     * Generate a class page.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @param mapper        the mapping of the class usage.\n-     * @param pkgElement    the package being documented.\n-     * @throws DocFileIOException if there is a problem generating the package use page\n-     *\/\n-    public static void generate(HtmlConfiguration configuration,\n-                                ClassUseMapper mapper, PackageElement pkgElement)\n-            throws DocFileIOException {\n-        DocPath filename = DocPaths.PACKAGE_USE;\n-        PackageUseWriter pkgusegen = new PackageUseWriter(configuration, mapper, filename, pkgElement);\n-        pkgusegen.generatePackageUseFile();\n+    private static DocPath pathFor(HtmlConfiguration configuration, PackageElement packageElement) {\n+        return configuration.docPaths.forPackage(packageElement).resolve(DocPaths.PACKAGE_USE);\n@@ -112,1 +99,2 @@\n-    protected void generatePackageUseFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageUseWriter.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -103,6 +103,2 @@\n-    \/**\n-     * Build the package summary.\n-     *\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-    public void build() throws DocletException {\n+    @Override\n+    public void buildPage() throws DocletException {\n@@ -177,1 +173,0 @@\n-\n@@ -331,1 +326,0 @@\n-\n@@ -372,1 +366,1 @@\n-    public void addPackageSummary(List<PackageElement> packages, Content label,\n+    protected void addPackageSummary(List<PackageElement> packages, Content label,\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriter.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,2 +41,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -56,1 +54,0 @@\n-     * @param filename the file to be generated\n@@ -58,2 +55,2 @@\n-    public PreviewListWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename, configuration.previewAPIListBuilder);\n+    public PreviewListWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.PREVIEW_LIST, configuration.previewAPIListBuilder);\n@@ -62,14 +59,18 @@\n-    \/**\n-     * Get list of all the preview elements.\n-     * Then instantiate PreviewListWriter and generate File.\n-     *\n-     * @param configuration the current configuration of the doclet.\n-     * @throws DocFileIOException if there is a problem writing the preview list\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        if (configuration.conditionalPages.contains(HtmlConfiguration.ConditionalPage.PREVIEW)) {\n-            DocPath filename = DocPaths.PREVIEW_LIST;\n-            PreviewListWriter depr = new PreviewListWriter(configuration, filename);\n-            depr.generateSummaryListFile(PageMode.PREVIEW, \"preview elements\",\n-                    configuration.contents.previewAPI, \"doclet.Window_Preview_List\");\n-        }\n+    @Override\n+    protected PageMode getPageMode() {\n+        return PageMode.PREVIEW;\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return \"preview elements\";\n+    }\n+\n+    @Override\n+    protected Content getHeadContent() {\n+        return configuration.contents.previewAPI;\n+    }\n+\n+    @Override\n+    protected String getTitleKey() {\n+        return \"doclet.Window_Preview_List\";\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PreviewListWriter.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -83,0 +83,2 @@\n+                buildDeprecationInfo(propertyContent);\n+                buildPreviewInfo(propertyContent);\n@@ -93,7 +95,3 @@\n-    \/**\n-     * Build the signature.\n-     *\n-     * @param propertyContent the content to which the documentation will be added\n-     *\/\n-    protected void buildSignature(Content propertyContent) {\n-        propertyContent.add(getSignature(currentProperty));\n+    @Override\n+    protected void buildSignature(Content target) {\n+        target.add(getSignature(currentProperty));\n@@ -102,7 +100,3 @@\n-    \/**\n-     * Build the deprecation information.\n-     *\n-     * @param propertyContent the content to which the documentation will be added\n-     *\/\n-    protected void buildDeprecationInfo(Content propertyContent) {\n-        addDeprecated(currentProperty, propertyContent);\n+    @Override\n+    protected void buildDeprecationInfo(Content target) {\n+        addDeprecated(currentProperty, target);\n@@ -111,7 +105,3 @@\n-    \/**\n-     * Build the preview information.\n-     *\n-     * @param propertyContent the content to which the documentation will be added\n-     *\/\n-    protected void buildPreviewInfo(Content propertyContent) {\n-        addPreview(currentProperty, propertyContent);\n+    @Override\n+    protected void buildPreviewInfo(Content target) {\n+        addPreview(currentProperty, target);\n@@ -159,1 +149,0 @@\n-\n@@ -161,1 +150,1 @@\n-    public Content getMemberSummaryHeader(TypeElement typeElement, Content content) {\n+    public Content getMemberSummaryHeader(Content content) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriter.java","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -33,1 +34,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -35,1 +35,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;\n@@ -38,1 +38,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -49,1 +48,0 @@\n-     * @param filename file to be generated\n@@ -51,2 +49,2 @@\n-    public SearchWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n+    public SearchWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.SEARCH_PAGE);\n@@ -55,20 +53,2 @@\n-    \/**\n-     * Constructs the SearchWriter object and then use it to generate the search\n-     * file. The name of the generated file is \"search.html\". The search file\n-     * will get generated if and only if \"-noindex\" is not used on the command line.\n-     *\n-     * @param configuration the configuration\n-     * @throws DocFileIOException if there is a problem while generating the documentation\n-     *\/\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        DocPath filename = DocPaths.SEARCH_PAGE;\n-        SearchWriter searchWriter = new SearchWriter(configuration, filename);\n-        searchWriter.generateSearchFile();\n-    }\n-\n-    \/**\n-     * Generates the search file contents.\n-     *\n-     * @throws DocFileIOException if there is a problem while generating the documentation\n-     *\/\n-    protected void generateSearchFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SearchWriter.java","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.SortedSet;\n@@ -56,4 +55,0 @@\n-    public SortedSet<VariableElement> members(TypeElement te) {\n-        return utils.serializableFields(te);\n-    }\n-\n@@ -64,1 +59,1 @@\n-    protected Content getFieldsContentHeader(boolean isLastContent) {\n+    protected Content getFieldsContentHeader() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerialFieldWriter.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    protected Content getMethodsContentHeader(boolean isLastContent) {\n+    protected Content getMethodsContentHeader() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerialMethodWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,9 +106,5 @@\n-    \/**\n-     * Build the serialized form.\n-     *\n-     * @throws DocletException if there is a problem while building the documentation\n-     *\/\n-     void build() throws DocletException {\n-        SortedSet<TypeElement> rootclasses = new TreeSet<>(utils.comparators.generalPurposeComparator());\n-        rootclasses.addAll(configuration.getIncludedTypeElements());\n-        if (!serialClassFoundToDocument(rootclasses)) {\n+    @Override\n+    public void buildPage() throws DocletException {\n+        var rootClasses = new TreeSet<TypeElement>(utils.comparators.generalPurposeComparator());\n+        rootClasses.addAll(configuration.getIncludedTypeElements());\n+        if (!serialClassFoundToDocument(rootClasses)) {\n@@ -253,3 +249,3 @@\n-        for (var i = utils.serializationMethods(currentTypeElement).iterator(); i.hasNext(); ) {\n-            currentMember = i.next();\n-            Content methodsContent = methodWriter.getMethodsContentHeader(!i.hasNext());\n+        for (var executableElement : utils.serializationMethods(currentTypeElement)) {\n+            currentMember = executableElement;\n+            Content methodsContent = methodWriter.getMethodsContentHeader();\n@@ -363,1 +359,1 @@\n-                Content fieldsOverviewContent = fieldWriter.getFieldsContentHeader(true);\n+                Content fieldsOverviewContent = fieldWriter.getFieldsContentHeader();\n@@ -386,2 +382,2 @@\n-            for (var i = members.iterator(); i.hasNext();) {\n-                currentMember = i.next();\n+            for (var member : members) {\n+                currentMember = member;\n@@ -389,1 +385,1 @@\n-                    Content fieldsContent = fieldWriter.getFieldsContentHeader(!i.hasNext());\n+                    Content fieldsContent = fieldWriter.getFieldsContentHeader();\n@@ -454,1 +450,1 @@\n-            Content fieldsContent = fieldWriter.getFieldsContentHeader(tag.equals(tags.last()));\n+            Content fieldsContent = fieldWriter.getFieldsContentHeader();\n@@ -534,2 +530,2 @@\n-            String serialtext = Utils.toLowerCase(serial.get(0).toString());\n-            if (serialtext.contains(\"exclude\")) {\n+            var serialText = Utils.toLowerCase(serial.get(0).toString());\n+            if (serialText.contains(\"exclude\")) {\n@@ -537,1 +533,1 @@\n-            } else if (serialtext.contains(\"include\")) {\n+            } else if (serialText.contains(\"include\")) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriter.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * the formatting of member information.  Since AbstractSubWriter and its\n+ * the formatting of member information.  Since AbstractMemberWriter and its\n@@ -195,16 +195,0 @@\n-    \/**\n-     * Add the annotation content.\n-     *\n-     * @param source annotation content which will be added to the documentation\n-     *\/\n-    public void addAnnotationContent(Content source) {\n-        addClassContent(source);\n-    }\n-\n-    \/**\n-     * {@return the member header}\n-     *\/\n-    public Content getMemberHeader() {\n-        return HtmlTree.UL(HtmlStyle.blockList);\n-    }\n-\n@@ -230,1 +214,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SubWriterHolderWriter.java","additions":1,"deletions":18,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -49,0 +49,5 @@\n+ *\n+ * Note: the use of \"Summary\" in this context is distinct from the use of \"summary\" in the\n+ * context of {@link AbstractMemberWriter#buildSummary(Content)}.\n+ *\n+ * @param <B> a builder, to determine the elements to be included in the summary\n@@ -103,0 +108,20 @@\n+    \/**\n+     * {@return the page mode to use}\n+     *\/\n+    protected abstract PageMode getPageMode();\n+\n+    \/**\n+     * {@return the page descrition, for the {@code <meta>} element}\n+     *\/\n+    protected abstract String getDescription();\n+\n+    \/**\n+     * {@return the heading for the page}\n+     *\/\n+    protected abstract Content getHeadContent();\n+\n+    \/**\n+     * {@return the title for the page}\n+     *\/\n+    protected abstract String getTitleKey();\n+\n@@ -106,4 +131,0 @@\n-     * @param pageMode page mode to use\n-     * @param description page description\n-     * @param headContent page heading content\n-     * @param titleKey page title resource key\n@@ -112,4 +133,3 @@\n-    protected void generateSummaryListFile(PageMode pageMode, String description,\n-                                           Content headContent, String titleKey)\n-            throws DocFileIOException {\n-        HtmlTree body = getHeader(pageMode, titleKey);\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n+        HtmlTree body = getHeader(getPageMode(), getTitleKey());\n@@ -118,1 +138,1 @@\n-                HtmlStyle.title, headContent);\n+                HtmlStyle.title, getHeadContent());\n@@ -150,1 +170,1 @@\n-        printHtmlDocument(null, description, body);\n+        printHtmlDocument(null, getDescription(), body);\n@@ -184,0 +204,1 @@\n+     * {@return the header for the API Summary listing}\n@@ -186,1 +207,0 @@\n-     * {@return the header for the API Summary listing}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SummaryListWriter.java","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,0 +28,11 @@\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.WeakHashMap;\n+import java.util.stream.Collectors;\n+\n+import javax.lang.model.element.Element;\n+\n@@ -29,0 +40,2 @@\n+\n+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n@@ -31,1 +44,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -34,1 +46,1 @@\n-import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Text;\n@@ -38,1 +50,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n@@ -42,5 +53,0 @@\n-import javax.lang.model.element.Element;\n-import java.nio.file.Path;\n-import java.util.*;\n-import java.util.Map.Entry;\n-\n@@ -48,2 +54,0 @@\n-import java.util.stream.Collectors;\n-import java.util.ArrayList;\n@@ -65,1 +69,0 @@\n-     * @param filename Path to the file which is getting generated.\n@@ -67,2 +70,2 @@\n-    public SystemPropertiesWriter(HtmlConfiguration configuration, DocPath filename) {\n-        super(configuration, filename);\n+    public SystemPropertiesWriter(HtmlConfiguration configuration) {\n+        super(configuration, DocPaths.SYSTEM_PROPERTIES, false);\n@@ -71,5 +74,2 @@\n-    public static void generate(HtmlConfiguration configuration) throws DocFileIOException {\n-        generate(configuration, DocPaths.SYSTEM_PROPERTIES);\n-    }\n-\n-    private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n@@ -79,6 +79,0 @@\n-            \/\/ Cannot defer this check any further, because of the super() call\n-            \/\/ that prints out notices on creating files, etc.\n-            \/\/\n-            \/\/ There is probably a better place for this kind of checks (see how\n-            \/\/ this is achieved in other \"optional\" pages, like Constant Values\n-            \/\/ and Serialized Form).\n@@ -87,2 +81,2 @@\n-        SystemPropertiesWriter systemPropertiesGen = new SystemPropertiesWriter(configuration, fileName);\n-        systemPropertiesGen.buildSystemPropertiesPage();\n+\n+        writeGenerating();\n@@ -90,1 +84,0 @@\n-    }\n@@ -92,4 +85,0 @@\n-    \/**\n-     * Prints all the system properties to the file.\n-     *\/\n-    protected void buildSystemPropertiesPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SystemPropertiesWriter.java","additions":20,"deletions":31,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-     * @param configuration the current configuration of the doclet.\n-     * @param filename String filename\n+     * @param configuration the current configuration of the doclet\n@@ -70,2 +69,2 @@\n-    public TreeWriter(HtmlConfiguration configuration, DocPath filename, ClassTree classTree) {\n-        super(configuration, filename, classTree);\n+    public TreeWriter(HtmlConfiguration configuration, ClassTree classTree) {\n+        super(configuration, DocPaths.OVERVIEW_TREE, classTree);\n@@ -77,21 +76,2 @@\n-    \/**\n-     * Create a TreeWriter object and use it to generate the\n-     * \"overview-tree.html\" file.\n-     *\n-     * @param configuration the configuration for this doclet\n-     * @param classTree the class tree being documented.\n-     * @throws  DocFileIOException if there is a problem generating the overview tree page\n-     *\/\n-    public static void generate(HtmlConfiguration configuration,\n-                                ClassTree classTree) throws DocFileIOException {\n-        DocPath filename = DocPaths.OVERVIEW_TREE;\n-        TreeWriter treegen = new TreeWriter(configuration, filename, classTree);\n-        treegen.generateTreeFile();\n-    }\n-\n-    \/**\n-     * Generate the interface hierarchy and class hierarchy.\n-     *\n-     * @throws DocFileIOException if there is a problem generating the overview tree page\n-     *\/\n-    public void generateTreeFile() throws DocFileIOException {\n+    @Override\n+    public void buildPage() throws DocFileIOException {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TreeWriter.java","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.util.List;\n+\n@@ -34,0 +36,1 @@\n+import jdk.javadoc.internal.doclets.toolkit.DocFileElement;\n@@ -35,0 +38,3 @@\n+import jdk.javadoc.internal.doclets.toolkit.util.ClassUseMapper;\n+import jdk.javadoc.internal.doclets.toolkit.util.DocPath;\n+import jdk.javadoc.internal.doclets.toolkit.util.IndexBuilder;\n@@ -38,1 +44,1 @@\n- * The factory that returns HTML writers.\n+ * The factory that returns HTML writers, to be used to generate pages in the overall API documentation.\n@@ -49,1 +55,1 @@\n-     * {@return a new {@link ConstantsSummaryWriter}}\n+     * {@return a new writer for the page for a module}\n@@ -51,2 +57,2 @@\n-    public ConstantsSummaryWriter newConstantsSummaryWriter() {\n-        return new ConstantsSummaryWriter(configuration);\n+    public HtmlDocletWriter newModuleWriter(ModuleElement mdle) {\n+        return new ModuleWriter(configuration, mdle);\n@@ -56,1 +62,1 @@\n-     * {@return a new {@link PackageWriter}}\n+     * {@return a new writer for the \"module index\" page}\n@@ -58,1 +64,8 @@\n-    public PackageWriter newPackageWriter(PackageElement packageElement) {\n+    public HtmlDocletWriter newModuleIndexWriter() {\n+        return new ModuleIndexWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the page for a package}\n+     *\/\n+    public HtmlDocletWriter newPackageWriter(PackageElement packageElement) {\n@@ -63,1 +76,1 @@\n-     * {@return a new {@link ModuleWriter}}\n+     * {@return a new writer for the \"package index\" page}\n@@ -65,2 +78,9 @@\n-    public ModuleWriter newModuleWriter(ModuleElement mdle) {\n-        return new ModuleWriter(configuration, mdle);\n+    public HtmlDocletWriter newPackageIndexWriter() {\n+        return new PackageIndexWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the \"package use\" page for a package}\n+     *\/\n+    public HtmlDocletWriter newPackageUseWriter(PackageElement packageElement, ClassUseMapper mapper) {\n+        return new PackageUseWriter(configuration, mapper, packageElement);\n@@ -70,1 +90,1 @@\n-     * {@return a new {@link ClassWriter}}\n+     * {@return a new writer for the page for a class or other type element}\n@@ -72,1 +92,1 @@\n-    public ClassWriter newClassWriter(TypeElement typeElement, ClassTree classTree) {\n+    public HtmlDocletWriter newClassWriter(TypeElement typeElement, ClassTree classTree) {\n@@ -75,0 +95,57 @@\n+\n+    \/**\n+     * {@return a new writer for the \"class use\" page for a class or other type element}\n+     *\/\n+    public HtmlDocletWriter newClassUseWriter(TypeElement typeElement, ClassUseMapper mapper) {\n+        return new ClassUseWriter(configuration, mapper, typeElement);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the list of \"all classes\"}\n+     *\/\n+    public HtmlDocletWriter newAllClassesIndexWriter(IndexBuilder indexBuilder) {\n+        return new AllClassesIndexWriter(configuration, indexBuilder);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the list of \"all packages\"}\n+     *\/\n+    public HtmlDocletWriter newAllPackagesIndexWriter() {\n+        return new AllPackagesIndexWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the \"constants summary\" page}\n+     *\/\n+    public HtmlDocletWriter newConstantsSummaryWriter() {\n+        return new ConstantsSummaryWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the page giving the API that has been deprecated in recent releases}\n+     *\/\n+    public HtmlDocletWriter newDeprecatedListWriter() {\n+        return new DeprecatedListWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for a \"doc-file\" page}\n+     *\/\n+    public HtmlDocletWriter newDocFileWriter(DocPath path, DocFileElement dfElement) {\n+        return new DocFilesHandler.DocFileWriter(configuration, path, dfElement);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the page listing external specifications referenced in the API}\n+     *\/\n+    public HtmlDocletWriter newExternalSpecsWriter() {\n+        return new ExternalSpecsWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the \"help\" page}\n+     *\/\n+    public HtmlDocletWriter newHelpWriter() {\n+        return new HelpWriter(configuration);\n+    }\n+\n@@ -76,1 +153,1 @@\n-     * {@return a new {@link SerializedFormWriter}}\n+     * {@return a new writer for an \"index\" page}\n@@ -78,1 +155,29 @@\n-    public SerializedFormWriter newSerializedFormWriter() {\n+    public HtmlDocletWriter newIndexWriter(DocPath path, List<Character> allFirstCharacters, List<Character> displayFirstCharacters) {\n+        return new IndexWriter(configuration, path, allFirstCharacters, displayFirstCharacters);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the list of new API in recent releases}\n+     *\/\n+    public HtmlDocletWriter newNewAPIListWriter() {\n+        return new NewAPIListWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the list of preview API in this release}\n+     *\/\n+    public HtmlDocletWriter newPreviewListWriter() {\n+        return new PreviewListWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the \"search\" page}\n+     *\/\n+    public HtmlDocletWriter newSearchWriter() {\n+        return new SearchWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the page giving the serialized forms of classes and other type elements}\n+     *\/\n+    public HtmlDocletWriter newSerializedFormWriter() {\n@@ -82,0 +187,14 @@\n+    \/**\n+     * {@return a new writer for the page listing system properties referenced in the API}\n+     *\/\n+    public HtmlDocletWriter newSystemPropertiesWriter() {\n+        return new SystemPropertiesWriter(configuration);\n+    }\n+\n+    \/**\n+     * {@return a new writer for the page showing the hierarchy of classes and their superclasses}\n+     *\/\n+    public HtmlDocletWriter newTreeWriter(ClassTree classTree) {\n+        return new TreeWriter(configuration, classTree);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/WriterFactory.java","additions":132,"deletions":13,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -74,1 +74,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Entity.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -307,1 +307,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Head.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    private final Element element;\n@@ -44,0 +45,9 @@\n+    \/**\n+     * Creates a pseudo-element that wraps a {@code doc-files} HTML file.\n+     *\n+     * @param utils the standard utilities class\n+     * @param element the module element or package element that \"owns\" the {@code doc-files} subdirectory\n+     * @param fo the file object\n+     *\n+     * @throws IllegalArgumentException if the given element is not a module element or package element\n+     *\/\n@@ -45,0 +55,1 @@\n+        this.element = element;\n@@ -47,2 +58,2 @@\n-        switch(element.getKind()) {\n-            case MODULE:\n+        switch (element.getKind()) {\n+            case MODULE -> {\n@@ -51,1 +62,1 @@\n-                break;\n+            }\n@@ -53,1 +64,1 @@\n-            case PACKAGE:\n+            case PACKAGE ->\n@@ -55,1 +66,0 @@\n-                break;\n@@ -57,2 +67,1 @@\n-            default:\n-                throw new AssertionError(\"unknown kind: \" + element.getKind());\n+            default -> throw new IllegalArgumentException(element.getKind() + \":\" + element);\n@@ -62,0 +71,7 @@\n+    \/**\n+     * {@return the element that \"owns\" the {@code doc-files} directory}\n+     *\/\n+    public Element getElement() {\n+        return element;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/DocFileElement.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -383,0 +383,5 @@\n+    public boolean isFunctionalInterface(TypeElement typeElement) {\n+        return typeElement.getAnnotationMirrors().stream()\n+                .anyMatch(this::isFunctionalInterface);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}