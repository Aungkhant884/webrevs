{"files":[{"patch":"@@ -4981,0 +4981,1 @@\n+  jccb(Assembler::lessEqual, L_end);\n@@ -4984,1 +4985,0 @@\n-    jccb(Assembler::lessEqual, L_end);\n@@ -5016,2 +5016,2 @@\n-          mov64(rtmp, 0x7F);\n-          kmovql(k2, rtmp);\n+          movl(rtmp, 0x7F);\n+          kmovwl(k2, rtmp);\n@@ -5021,2 +5021,2 @@\n-          mov64(rtmp, 0x7);\n-          kmovql(k2, rtmp);\n+          movl(rtmp, 0x7);\n+          kmovwl(k2, rtmp);\n@@ -5028,2 +5028,2 @@\n-          mov64(rtmp, 0x3F);\n-          kmovql(k2, rtmp);\n+          movl(rtmp, 0x3F);\n+          kmovwl(k2, rtmp);\n@@ -5038,2 +5038,2 @@\n-          mov64(rtmp, 0x1F);\n-          kmovql(k2, rtmp);\n+          movl(rtmp, 0x1F);\n+          kmovwl(k2, rtmp);\n@@ -5050,2 +5050,2 @@\n-        mov64(rtmp, 0x7);\n-        kmovql(k2, rtmp);\n+        movl(rtmp, 0x7);\n+        kmovwl(k2, rtmp);\n@@ -8135,0 +8135,52 @@\n+\/\/ Set memory operation for length \"less than\" 64 bytes.\n+void MacroAssembler::fill64_masked_avx(uint shift, Register dst, int disp,\n+                                       XMMRegister xmm, KRegister mask, Register length,\n+                                       Register temp, bool use64byteVector) {\n+  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n+  assert(shift != 0, \"shift value should be 1 (short),2(int) or 3(long)\");\n+  BasicType type[] = { T_BYTE, T_SHORT,  T_INT,   T_LONG};\n+  if (!use64byteVector) {\n+    fill32_avx(dst, disp, xmm);\n+    subptr(length, 32 >> shift);\n+    fill32_masked_avx(shift, dst, disp + 32, xmm, mask, length, temp);\n+  } else {\n+    assert(MaxVectorSize == 64, \"vector length != 64\");\n+    movl(temp, 1);\n+    shlxl(temp, temp, length);\n+    subptr(temp, 1);\n+    kmovwl(mask, temp);\n+    evmovdqu(type[shift], mask, Address(dst, disp), xmm, Assembler::AVX_512bit);\n+  }\n+}\n+\n+\n+void MacroAssembler::fill32_masked_avx(uint shift, Register dst, int disp,\n+                                       XMMRegister xmm, KRegister mask, Register length,\n+                                       Register temp) {\n+  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n+  assert(shift != 0, \"shift value should be 1 (short), 2(int) or 3(long)\");\n+  BasicType type[] = { T_BYTE, T_SHORT,  T_INT,   T_LONG};\n+  movl(temp, 1);\n+  shlxl(temp, temp, length);\n+  subptr(temp, 1);\n+  kmovwl(mask, temp);\n+  evmovdqu(type[shift], mask, Address(dst, disp), xmm, Assembler::AVX_256bit);\n+}\n+\n+\n+void MacroAssembler::fill32_avx(Register dst, int disp, XMMRegister xmm) {\n+  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n+  vmovdqu(Address(dst, disp), xmm);\n+}\n+\n+\n+void MacroAssembler::fill64_avx(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n+  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n+  BasicType type[] = {T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n+  if (!use64byteVector) {\n+    fill32_avx(dst, disp, xmm);\n+    fill32_avx(dst, disp + 32, xmm);\n+  } else {\n+    evmovdquq(Address(dst, disp), xmm, Assembler::AVX_512bit);\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":63,"deletions":11,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -1806,0 +1806,12 @@\n+  void fill64_masked_avx(uint shift, Register dst, int disp,\n+                         XMMRegister xmm, KRegister mask, Register length,\n+                         Register temp, bool use64byteVector = false);\n+\n+  void fill32_masked_avx(uint shift, Register dst, int disp,\n+                         XMMRegister xmm, KRegister mask, Register length,\n+                         Register temp);\n+\n+  void fill32_avx(Register dst, int disp, XMMRegister xmm);\n+\n+  void fill64_avx(Register dst, int dis, XMMRegister xmm, bool use64byteVector = false);\n+\n@@ -1842,11 +1854,0 @@\n-  void fill64_masked_avx(int shift, Register dst, int disp,\n-                         XMMRegister xmm, KRegister mask, Register length,\n-                         Register temp, bool use64byteVector = false);\n-\n-  void fill32_masked_avx(int shift, Register dst, int disp,\n-                         XMMRegister xmm, KRegister mask, Register length,\n-                         Register temp);\n-\n-  void fill32_avx(Register dst, int disp, XMMRegister xmm);\n-\n-  void fill64_avx(Register dst, int dis, XMMRegister xmm, bool use64byteVector = false);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -251,55 +251,0 @@\n-\/\/ Set memory operation for length \"less than\" 64 bytes.\n-void MacroAssembler::fill64_masked_avx(int shift, Register dst, int disp,\n-                                       XMMRegister xmm, KRegister mask, Register length,\n-                                       Register temp, bool use64byteVector) {\n-  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n-  BasicType type[] = { T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n-  if (!use64byteVector) {\n-    fill32_avx(dst, disp, xmm);\n-    subq(length, 32 >> shift);\n-    fill32_masked_avx(shift, dst, disp + 32, xmm, mask, length, temp);\n-  } else {\n-    assert(MaxVectorSize == 64, \"vector length != 64\");\n-    mov64(temp, 1);\n-    shlxq(temp, temp, length);\n-    decq(temp);\n-    if (type[shift] == T_BYTE) {\n-      kmovql(mask, temp);\n-    } else {\n-      kmovwl(mask, temp);\n-    }\n-    evmovdqu(type[shift], mask, Address(dst, disp), xmm, Assembler::AVX_512bit);\n-  }\n-}\n-\n-\n-void MacroAssembler::fill32_masked_avx(int shift, Register dst, int disp,\n-                                       XMMRegister xmm, KRegister mask, Register length,\n-                                       Register temp) {\n-  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n-  BasicType type[] = {T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n-  mov64(temp, 1);\n-  shlxq(temp, temp, length);\n-  decq(temp);\n-  kmovwl(mask, temp);\n-  evmovdqu(type[shift], mask, Address(dst, disp), xmm, Assembler::AVX_256bit);\n-}\n-\n-\n-void MacroAssembler::fill32_avx(Register dst, int disp, XMMRegister xmm) {\n-  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n-  vmovdqu(Address(dst, disp), xmm);\n-}\n-\n-\n-void MacroAssembler::fill64_avx(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n-  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n-  BasicType type[] = {T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n-  if (!use64byteVector) {\n-    fill32_avx(dst, disp, xmm);\n-    fill32_avx(dst, disp + 32, xmm);\n-  } else {\n-    evmovdquq(Address(dst, disp), xmm, Assembler::AVX_512bit);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_arrayCopy_avx3.cpp","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -11442,1 +11442,1 @@\n-  predicate(!((ClearArrayNode*)n)->is_large());\n+  predicate(!((ClearArrayNode*)n)->is_large() && !n->in(2)->bottom_type()->is_int()->is_con());\n@@ -11549,0 +11549,12 @@\n+instruct rep_stos_im(immI cnt, eRegP base, regD tmp, rRegI zero, Universe dummy, eFlagsReg cr)\n+%{\n+  predicate(!((ClearArrayNode*)n)->is_large() && n->in(2)->bottom_type()->is_int()->is_con());\n+  match(Set dummy (ClearArray cnt base));\n+  effect(TEMP tmp,TEMP zero,  KILL cr);\n+  format %{ \"clear_mem_imm $base , $cnt  \\n\\t\" %}\n+  ins_encode %{\n+   __ clear_mem($base$$Register, $cnt$$constant, $zero$$Register, $tmp$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}