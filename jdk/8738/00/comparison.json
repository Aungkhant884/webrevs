{"files":[{"patch":"@@ -40,0 +40,5 @@\n+    public static final ActiveSettingEvent EVENT = new ActiveSettingEvent();\n+\n+    \/\/ The order of these fields must be the same as the parameters in\n+    \/\/ commit(... , long, String, String)\n+\n@@ -48,0 +53,4 @@\n+\n+    public static void commit(long startTime, long duration, long id, String name, String value) {\n+        \/\/ Generated\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ActiveSettingEvent.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-    void writeActiveSettingEvent() {\n+    void writeActiveSettingEvent(long timestamp) {\n@@ -292,5 +292,3 @@\n-                ActiveSettingEvent event = new ActiveSettingEvent();\n-                event.id = type.getId();\n-                event.name = nc.name;\n-                event.value = value;\n-                event.commit();\n+                if (ActiveSettingEvent.EVENT.isEnabled()) {\n+                    ActiveSettingEvent.commit(timestamp, 0L, type.getId(), nc.name(), value);\n+                }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventControl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-            settingsManager.setEventControl(configuration.getEventControl(), true);\n+            settingsManager.setEventControl(configuration.getEventControl(), true, JVM.counterTime());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -486,0 +486,1 @@\n+            long timestamp = JVM.counterTime();\n@@ -487,1 +488,1 @@\n-                ec.writeActiveSettingEvent();\n+                ec.writeActiveSettingEvent(timestamp);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+            long timestamp = JVM.counterTime();\n@@ -146,1 +147,1 @@\n-                setEventControl(ec, writeSettingEvents);\n+                setEventControl(ec, writeSettingEvents, timestamp);\n@@ -214,1 +215,1 @@\n-    void setEventControl(EventControl ec, boolean writeSettingEvents) {\n+    void setEventControl(EventControl ec, boolean writeSettingEvents, long timestamp) {\n@@ -254,1 +255,1 @@\n-            ec.writeActiveSettingEvent();\n+            ec.writeActiveSettingEvent(timestamp);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SettingsManager.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.time.Duration;\n+import java.time.Instant;\n@@ -88,0 +90,1 @@\n+            Instant timestamp = null;\n@@ -90,0 +93,9 @@\n+                    if (!e.getDuration().equals(Duration.ZERO)) {\n+                        throw new Exception(\"Expected event to have zero duration\");\n+                    }\n+                    if (timestamp == null) {\n+                        timestamp = e.getStartTime();\n+                    }\n+                    if (!e.getStartTime().equals(timestamp)) {\n+                        throw new Exception(\"Expected all events to have the same timestamp\");\n+                    }\n@@ -196,0 +208,7 @@\n+            Set<Instant> timestamps = new HashSet<>();\n+            for (RecordedEvent e : events) {\n+                timestamps.add(e.getStartTime());\n+            }\n+            if (timestamps.size() != 2) {\n+                throw new Exception(\"Expected two batches of Active Setting events, at Recording.start() and during Recording.setSetting(...)\");\n+            }\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveSettingEvent.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}