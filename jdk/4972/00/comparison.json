{"files":[{"patch":"@@ -78,1 +78,0 @@\n-  _next_offset_index(0),\n@@ -249,1 +248,1 @@\n-    alloc_block_work(&next_boundary, &next_index, q, n);\n+    alloc_block_work(&next_boundary, q, n);\n@@ -264,2 +263,2 @@\n-void G1BlockOffsetTablePart::alloc_block_work(HeapWord** threshold_, size_t* index_,\n-                                              HeapWord* blk_start, HeapWord* blk_end) {\n+void G1BlockOffsetTablePart::alloc_block_work(HeapWord** threshold_, HeapWord* blk_start,\n+                                              HeapWord* blk_end) {\n@@ -268,1 +267,1 @@\n-  size_t    index = *index_;\n+  size_t    index =  _bot->index_for_raw(threshold);\n@@ -286,2 +285,2 @@\n-  \/\/ that _next_offset_index and _next_offset_threshold are not\n-  \/\/ updated until the end of this method.\n+  \/\/ that _next_offset_threshold is not updated until the end\n+  \/\/ of this method.\n@@ -312,1 +311,0 @@\n-  *index_ = index;\n@@ -344,1 +342,2 @@\n-  size_t end_card = MIN2(_bot->index_for(_hr->top() - 1), _next_offset_index - 1);\n+  size_t next_offset_index = _bot->index_for_raw(_next_offset_threshold);\n+  size_t end_card = MIN2(_bot->index_for(_hr->top() - 1), next_offset_index - 1);\n@@ -401,1 +400,0 @@\n-  out->print_cr(\"  next offset index:     \" SIZE_FORMAT, _next_offset_index);\n@@ -406,2 +404,1 @@\n-  _next_offset_index = _bot->index_for_raw(_hr->bottom());\n-  _next_offset_index++;\n+  size_t next_offset_index = _bot->index_for_raw(_hr->bottom()) + 1;\n@@ -409,1 +406,1 @@\n-    _bot->address_for_index_raw(_next_offset_index);\n+    _bot->address_for_index_raw(next_offset_index);\n@@ -421,2 +418,1 @@\n-  _next_offset_index = _bot->index_for(_hr->bottom());\n-  _next_offset_index++;\n+  size_t next_offset_index = _bot->index_for(_hr->bottom()) + 1 ;\n@@ -424,1 +420,1 @@\n-    _bot->address_for_index(_next_offset_index);\n+    _bot->address_for_index(next_offset_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-  size_t    _next_offset_index;      \/\/ index corresponding to that boundary\n@@ -169,2 +168,1 @@\n-  \/\/ above \"blk_start\", and that \"*index_\" be the corresponding array\n-  \/\/ index.  If the block starts at or crosses \"*threshold_\", records\n+  \/\/ above \"blk_start\".  If the block starts at or crosses \"*threshold_\", records\n@@ -173,4 +171,5 @@\n-  \/\/ block.  Updates \"*threshold_\" and \"*index_\" to correspond to the first\n-  \/\/ index after the block end.\n-  void alloc_block_work(HeapWord** threshold_, size_t* index_,\n-                        HeapWord* blk_start, HeapWord* blk_end);\n+  \/\/ block.  Updates \"*threshold_\" to correspond to the first index after\n+  \/\/ the block end.\n+  void alloc_block_work(HeapWord** threshold_,\n+                        HeapWord* blk_start,\n+                        HeapWord* blk_end);\n@@ -217,1 +216,1 @@\n-      alloc_block_work(&_next_offset_threshold, &_next_offset_index, blk_start, blk_end);\n+      alloc_block_work(&_next_offset_threshold, blk_start, blk_end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  size_t index = _bot->index_for(addr);\n+\n@@ -113,1 +113,3 @@\n-  assert(index < _next_offset_index, \"Precondition\");\n+  assert(addr < _next_offset_threshold, \"Precondition\");\n+\n+  size_t index = _bot->index_for(addr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}