{"files":[{"patch":"@@ -193,1 +193,1 @@\n-            if (nread > 0) {\n+            if (nread > 0)\n@@ -195,1 +195,0 @@\n-            }\n@@ -201,1 +200,1 @@\n-                int n = 0;\n+                int n;\n@@ -204,1 +203,1 @@\n-                    if ((n = read(cbuf)) > 0) {\n+                    if ((n = read(cbuf, 0, Math.min(remaining, cbuf.length))) > 0) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-\n-import static java.nio.charset.StandardCharsets.US_ASCII;\n+import java.util.Objects;\n@@ -46,1 +45,1 @@\n-    private static final int BUFFER_SIZE = 24;\n+    private static final int BUFFER_SIZE = 8 + 8192 + 2;\n@@ -61,2 +60,11 @@\n-        try (Reader reader = new StringReader(\"ABCDEFGHIJKLMNOPQRTUVWXYZ\")) {\n-            buffer.limit(7);\n+        StringBuilder input = new StringBuilder(BUFFER_SIZE - 2 + 1);\n+        input.append(\"ABCDEF\");\n+        for (int i = 0; i < 8192; i++) {\n+            input.append('y');\n+        }\n+        input.append(\"GH\");\n+\n+        try (Reader reader = new UnoptimizedStringReader(input.toString())) {\n+            \/\/ put only between position and limit in the target buffer\n+            int limit = 1 + 6;\n+            buffer.limit(limit);\n@@ -65,2 +73,2 @@\n-            assertEquals(buffer.position(), 7);\n-            assertEquals(buffer.limit(), 7);\n+            assertEquals(buffer.position(), limit);\n+            assertEquals(buffer.limit(), limit);\n@@ -68,1 +76,4 @@\n-            buffer.limit(16);\n+            \/\/ read the full temporary buffer\n+            \/\/ and then accurately reduce the next #read call\n+            limit = 8 + 8192 + 1;\n+            buffer.limit(8 + 8192 + 1);\n@@ -70,3 +81,6 @@\n-            assertEquals(reader.read(buffer), 8);\n-            assertEquals(buffer.position(), 16);\n-            assertEquals(buffer.limit(), 16);\n+            assertEquals(reader.read(buffer), 8192 + 1);\n+            assertEquals(buffer.position(), limit);\n+            assertEquals(buffer.limit(), limit);\n+\n+            assertEquals(reader.read(), 'H');\n+            assertEquals(reader.read(), -1);\n@@ -76,1 +90,7 @@\n-        assertEquals(buffer.toString(), \"xABCDEFxGHIJKLMNxxxxxxxx\");\n+        StringBuilder expected = new StringBuilder(BUFFER_SIZE);\n+        expected.append(\"xABCDEFx\");\n+        for (int i = 0; i < 8192; i++) {\n+            expected.append('y');\n+        }\n+        expected.append(\"Gx\");\n+        assertEquals(buffer.toString(), expected.toString());\n@@ -80,1 +100,1 @@\n-        char[] filler = new char[BUFFER_SIZE];\n+        char[] filler = new char[buffer.remaining()];\n@@ -86,0 +106,41 @@\n+    \/**\n+     * Unoptimized version of StringReader in case StringReader overrides\n+     * #read(CharBuffer)\n+     *\/\n+    static final class UnoptimizedStringReader extends Reader {\n+\n+        private String str;\n+        private int next = 0;\n+\n+        UnoptimizedStringReader(String s) {\n+            this.str = s;\n+        }\n+\n+        @Override\n+        public int read() throws IOException {\n+            synchronized (lock) {\n+                if (next >= str.length())\n+                    return -1;\n+                return str.charAt(next++);\n+            }\n+        }\n+\n+        @Override\n+        public int read(char cbuf[], int off, int len) throws IOException {\n+            synchronized (lock) {\n+                Objects.checkFromIndexSize(off, len, cbuf.length);\n+                if (next >= str.length())\n+                    return -1;\n+                int n = Math.min(str.length() - next, len);\n+                str.getChars(next, next + n, cbuf, off);\n+                next += n;\n+                return n;\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/io\/Reader\/ReadCharBuffer.java","additions":74,"deletions":13,"binary":false,"changes":87,"status":"modified"}]}