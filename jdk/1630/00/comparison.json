{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n@@ -43,0 +45,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import java.util.function.BooleanSupplier;\n@@ -61,10 +66,5 @@\n-            \/\/ unloading the class loader and native library\n-            System.gc();\n-            \/\/ give Cleaner thread a chance to unload the native library\n-            Thread.sleep(100);\n-\n-            \/\/ unloadedCount is incremented when the native library is unloaded\n-            if (count != unloadedCount) {\n-                throw new RuntimeException(\"Expected unloaded=\" + count +\n-                    \" but got=\" + unloadedCount);\n-            }\n+            \/\/ Unload the class loader and native library, and give the Cleaner\n+            \/\/ thread a chance to unload the native library.\n+            \/\/ unloadedCount is incremented when the native library is unloaded.\n+            final int finalCount = count;\n+            gcAwait(() -> finalCount == unloadedCount);\n@@ -133,0 +133,36 @@\n+\n+    \/\/ --------------- GC finalization infrastructure ---------------\n+\n+    \/** No guarantees, but effective in practice. *\/\n+    static void forceFullGc() {\n+        long timeoutMillis = 1000L;\n+        CountDownLatch finalized = new CountDownLatch(1);\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        WeakReference<Object> ref = new WeakReference<>(\n+            new Object() { protected void finalize() { finalized.countDown(); }},\n+            queue);\n+        try {\n+            for (int tries = 3; tries--> 0; ) {\n+                System.gc();\n+                if (finalized.await(timeoutMillis, MILLISECONDS)\n+                    && queue.remove(timeoutMillis) != null\n+                    && ref.get() == null) {\n+                    System.runFinalization(); \/\/ try to pick up stragglers\n+                    return;\n+                }\n+                timeoutMillis *= 4;\n+            }\n+        } catch (InterruptedException unexpected) {\n+            throw new AssertionError(\"unexpected InterruptedException\");\n+        }\n+        throw new AssertionError(\"failed to do a \\\"full\\\" gc\");\n+    }\n+\n+    static void gcAwait(BooleanSupplier s) {\n+        for (int i = 0; i < 10; i++) {\n+            if (s.getAsBoolean())\n+                return;\n+            forceFullGc();\n+        }\n+        throw new AssertionError(\"failed to satisfy condition\");\n+    }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/nativeLibrary\/NativeLibraryTest.java","additions":47,"deletions":11,"binary":false,"changes":58,"status":"modified"}]}