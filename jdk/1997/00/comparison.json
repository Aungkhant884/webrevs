{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import javax.lang.model.element.AnnotationMirror;\n@@ -154,1 +153,3 @@\n-     * Add the receiver annotations information.\n+     * Add the receiver information.\n+     *\n+     * <p>Note: receivers can only have type-use annotations.<\/p>\n@@ -158,1 +159,0 @@\n-     * @param annotationMirrors list of annotation descriptions.\n@@ -161,7 +161,2 @@\n-    protected void addReceiverAnnotations(ExecutableElement member, TypeMirror rcvrType,\n-            List<? extends AnnotationMirror> annotationMirrors, Content tree) {\n-        tree.add(writer.getAnnotationInfo(member.getReceiverType().getAnnotationMirrors(), false));\n-        tree.add(Entity.NO_BREAK_SPACE);\n-        tree.add(utils.getTypeName(rcvrType, false));\n-        LinkInfoImpl linkInfo = new LinkInfoImpl(configuration, RECEIVER_TYPE, rcvrType);\n-        tree.add(writer.getTypeParameterLinks(linkInfo));\n+    protected void addReceiver(ExecutableElement member, TypeMirror rcvrType, Content tree) {\n+        tree.add(writer.getLink(new LinkInfoImpl(configuration, RECEIVER_TYPE, rcvrType)));\n@@ -169,0 +164,4 @@\n+        if (member.getKind() == ElementKind.CONSTRUCTOR) {\n+            tree.add(utils.getTypeName(rcvrType, false));\n+            tree.add(\".\");\n+        }\n@@ -201,3 +200,2 @@\n-        if (includeAnnotations && rcvrType != null && utils.isAnnotated(rcvrType)) {\n-            List<? extends AnnotationMirror> annotationMirrors = rcvrType.getAnnotationMirrors();\n-            addReceiverAnnotations(member, rcvrType, annotationMirrors, paramTree);\n+        if (includeAnnotations && rcvrType != null && utils.isRecursivelyAnnotated(rcvrType)) {\n+            addReceiver(member, rcvrType, paramTree);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-import javax.lang.model.util.SimpleTypeVisitor9;\n+import javax.lang.model.util.SimpleTypeVisitor14;\n@@ -329,0 +329,47 @@\n+    public boolean isRecursivelyAnnotated(TypeMirror e) {\n+        return new SimpleTypeVisitor14<Boolean, Void>() {\n+            @Override\n+            protected Boolean defaultAction(TypeMirror e, Void unused) {\n+                return isAnnotated(e);\n+            }\n+\n+            @Override\n+            public Boolean visitArray(ArrayType t, Void unused) {\n+                \/\/ kind 0\n+                return super.visitArray(t, unused) || visit(t.getComponentType());\n+            }\n+\n+            @Override\n+            public Boolean visitDeclared(DeclaredType t, Void unused) {\n+                \/\/ kind 1\n+                if (super.visitDeclared(t, unused) || visit(t.getEnclosingType()))\n+                    return true;\n+\n+                \/\/ kind 3\n+                for (var e : t.getTypeArguments()) {\n+                    if (visit(e))\n+                        return true;\n+                }\n+\n+                return false;\n+            }\n+\n+            @Override\n+            public Boolean visitWildcard(WildcardType t, Void unused) {\n+                if (super.visitWildcard(t, unused))\n+                    return true;\n+\n+                \/\/ kind 2\n+                var superBound = t.getSuperBound();\n+                if (superBound != null && visit(superBound))\n+                    return true;\n+\n+                var extendsBound = t.getExtendsBound();\n+                if (extendsBound != null && visit(extendsBound))\n+                    return true;\n+\n+                return false;\n+            }\n+        }.visit(e);\n+    }\n+\n@@ -629,1 +676,1 @@\n-        return new SimpleTypeVisitor9<Boolean, Void>() {\n+        return new SimpleTypeVisitor14<Boolean, Void>() {\n@@ -734,1 +781,1 @@\n-        return new SimpleTypeVisitor9<StringBuilder, Void>() {\n+        return new SimpleTypeVisitor14<StringBuilder, Void>() {\n@@ -1212,1 +1259,1 @@\n-        return new SimpleTypeVisitor9<TypeElement, Void>() {\n+        return new SimpleTypeVisitor14<TypeElement, Void>() {\n@@ -1268,1 +1315,1 @@\n-        return new SimpleTypeVisitor9<String, Void>() {\n+        return new SimpleTypeVisitor14<String, Void>() {\n@@ -1380,1 +1427,1 @@\n-        return new SimpleTypeVisitor9<String, Void>() {\n+        return new SimpleTypeVisitor14<String, Void>() {\n@@ -1765,1 +1812,1 @@\n-        return new SimpleTypeVisitor9<String, Void>() {\n+        return new SimpleTypeVisitor14<String, Void>() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":55,"deletions":8,"binary":false,"changes":63,"status":"modified"}]}