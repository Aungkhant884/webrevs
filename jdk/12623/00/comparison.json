{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,7 +138,7 @@\n-        int mapChar = ch;\n-        int val = getProperties(ch);\n-\n-        if (((val & $$maskLowerCase) != 0) && \n-                ((val & $$maskCaseOffset) != $$maskCaseOffset)) { \n-            int offset = val << $$shiftCaseOffsetSign >> ($$shiftCaseOffsetSign+$$shiftCaseOffset);\n-            mapChar = ch + offset;\n+        if (ch < 'A') { \/\/ Fast path for low code points\n+            return ch;\n+        }\n+        int l = ch | 0x20; \/\/ Lowercase using 'oldest ASCII trick in the book'\n+        if ( l <= 'z' \/\/ In range a-z\n+                || (l >= 0xE0 && l <= 0xFE && l != 0xF7)) { \/\/ ..or agrave-thorn, excluding division\n+            return l;\n@@ -146,1 +146,1 @@\n-        return mapChar;\n+        return ch;\n@@ -150,10 +150,16 @@\n-        int mapChar = ch;\n-        int val = getProperties(ch);\n-\n-        if ((val & $$maskUpperCase) != 0) {\n-            if ((val & $$maskCaseOffset) != $$maskCaseOffset) {\n-                int offset = val  << $$shiftCaseOffsetSign >> ($$shiftCaseOffsetSign+$$shiftCaseOffset);\n-                mapChar =  ch - offset;\n-            } else if (ch == 0x00B5) {\n-                mapChar = 0x039C;\n-            }\n+        if (ch < 'a') { \/\/ Fast path for low code points\n+            return ch;\n+        }\n+        int U = ch & 0xDF; \/\/ Uppercase using 'oldest ASCII trick in the book'\n+        if (U <= 'Z' \/\/ In range A-Z\n+                || (U >= 0xC0 && U <= 0xDE && U != 0xD7)) { \/\/ ..or Agrave-Thorn, excluding multiplication\n+            return U;\n+        }\n+\n+        \/\/ Special-case for 'y with Diaeresis' which uppercases out of latin1\n+        if (ch == 0xFF) {\n+            return 0x178; \/\/ Capital Letter Y with Diaeresis\n+        }\n+        \/\/ Special-case for 'Micro Sign' which uppercases out of latin1\n+        if (ch == 0xB5) {\n+            return 0x39C; \/\/ Greek Capital Letter Mu\n@@ -161,1 +167,1 @@\n-        return mapChar;\n+        return ch;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/CharacterDataLatin1.java.template","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+\/**\n+ * @test\n+ * @bug 8302877\n+ * @summary Provides exhaustive verification of Character.toUpperCase and Character.toLowerCase\n+ * for all code points in the latin1 range 0-255.\n+ * @run testng Latin1CaseConversion\n+ *\/\n+public class Latin1CaseConversion {\n+\n+    @Test\n+    public void shouldUpperCaseAndLowerCaseLatin1() {\n+        for (int c = 0; c < 256; c++) {\n+            int upper = Character.toUpperCase(c);\n+            int lower = Character.toLowerCase(c);\n+\n+            if (c < 0x41) { \/\/ Before A\n+                assertUnchanged(upper, lower, c);\n+            } else if (c <= 0x5A) { \/\/ A-Z\n+                assertEquals(upper, c);\n+                assertEquals(lower, c + 32);\n+            } else if (c < 0x61) { \/\/ Between Z and a\n+                assertUnchanged(upper, lower, c);\n+            } else if (c <= 0x7A) { \/\/ a-z\n+                assertEquals(upper, c - 32);\n+                assertEquals(lower, c);\n+            } else if (c < 0xB5) { \/\/ Between z and Micro Sign\n+                assertUnchanged(upper, lower, c);\n+            } else if (c == 0xB5) { \/\/ Special case for Micro Sign\n+                assertEquals(upper, 0x39C);\n+                assertEquals(lower, c);\n+            } else if (c < 0xC0) { \/\/ Between my and A-grave\n+                assertUnchanged(upper, lower, c);\n+            } else if (c < 0xD7) { \/\/ A-grave - O with Diaeresis\n+                assertEquals(upper, c);\n+                assertEquals(lower, c + 32);\n+            } else if (c == 0xD7) { \/\/ Multiplication\n+                assertUnchanged(upper, lower, c);\n+            } else if (c <= 0xDE) { \/\/ O with slash - Thorn\n+                assertEquals(upper, c);\n+                assertEquals(lower, c + 32);\n+            } else if (c == 0xDF) { \/\/ Sharp s\n+                assertUnchanged(upper, lower, c);\n+            } else if (c < 0xF7) { \/\/ a-grave - divsion\n+                assertEquals(upper, c - 32);\n+                assertEquals(lower, c);\n+            } else if (c == 0xF7) { \/\/ Division\n+                assertUnchanged(upper, lower, c);\n+            } else if (c < 0xFF) { \/\/ o with slash - thorn\n+                assertEquals(upper, c - 32);\n+                assertEquals(lower, c);\n+            } else if (c == 0XFF) { \/\/ Special case for y with Diaeresis\n+                assertEquals(upper, 0x178);\n+                assertEquals(lower, c);\n+            } else {\n+                fail(\"Uncovered code point: \" + Integer.toHexString(c));\n+            }\n+        }\n+    }\n+\n+    private static void assertUnchanged(int upper, int lower, int c) {\n+        assertEquals(upper, c);\n+        assertEquals(lower, c);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Character\/Latin1CaseConversion.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import org.openjdk.jmh.annotations.Level;\n@@ -35,0 +36,1 @@\n+import org.openjdk.jmh.annotations.Setup;\n@@ -83,0 +85,43 @@\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    @State(Scope.Thread)\n+    @Warmup(iterations = 5, time = 1)\n+    @Measurement(iterations = 5, time = 1)\n+    @Fork(3)\n+    public static class Latin1CaseConversions {\n+        @Param({\n+                \"low\",     \/\/ 0x09 pre A\n+                \"A\",       \/\/ 0x41 uppercase A\n+                \"a\",       \/\/ 0x61 lowercase a\n+                \"A-grave\", \/\/ 0xC0 uppercase A-grave\n+                \"a-grave\", \/\/ 0xE0 lowercase a-grave\n+                \"micro\",   \/\/ 0xB5 lowercase 'Micro Sign'\n+                \"yD\"       \/\/ 0xFF lowercase 'y with Diaeresis'\n+        })\n+        private String codePoint;\n+        private int cp;\n+\n+        @Setup(Level.Trial)\n+        public void setup() {\n+            cp = switch (codePoint) {\n+                case \"low\"     -> 0x09;\n+                case \"A\"       -> 0x41;\n+                case \"a\"       -> 0x61;\n+                case \"A-grave\" -> 0xC0;\n+                case \"a-grave\" -> 0xE0;\n+                case \"yD\"      -> 0xE0;\n+                case \"micro\"   -> 0xFF;\n+                default -> throw new IllegalArgumentException(\"Unknown character: \" + codePoint);\n+            };\n+        }\n+        @Benchmark\n+        public int toUpperCase() {\n+            return Character.toUpperCase(cp);\n+        }\n+\n+        @Benchmark\n+        public int toLowerCase() {\n+            return Character.toLowerCase(cp);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Characters.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}