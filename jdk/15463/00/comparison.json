{"files":[{"patch":"@@ -1015,1 +1015,5 @@\n-        boolean result = isSubtypeUncheckedInternal(t, s, true, warn);\n+        return isSubtypeUnchecked(t, s, true, warn);\n+    }\n+\n+    public boolean isSubtypeUnchecked(Type t, Type s, boolean capture, Warner warn) {\n+        boolean result = isSubtypeUncheckedInternal(t, s, capture, warn);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1211,1 +1211,1 @@\n-                return types.isSubtypeUnchecked(op1, op2, warn);\n+                return types.isSubtypeUnchecked(op1, op2, false, warn);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T7177306e.java:16:8: compiler.err.cant.apply.symbol: kindname.method, m, java.util.List<U>, java.util.List<java.util.List<?>>, kindname.class, T7177306e, (compiler.misc.inferred.do.not.conform.to.eq.bounds: java.lang.Object, compiler.misc.type.captureof: 1, ?)\n+T7177306e.java:16:8: compiler.err.cant.apply.symbol: kindname.method, m, java.util.List<U>, java.util.List<java.util.List<?>>, kindname.class, T7177306e, (compiler.misc.incompatible.bounds: U, (compiler.misc.eq.bounds: java.util.List<?>), (compiler.misc.upper.bounds: java.util.List<Z>))\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/7177306\/T7177306e.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315134\n+ * @summary javac inference seems to be capturing types incorrectly\n+ * @compile DontCaptureBeforeSubtypeCheckTest.java\n+ *\/\n+\n+import java.util.*;\n+\n+public class DontCaptureBeforeSubtypeCheckTest {\n+    private static <T> void arrayMethod(List<? super T>[] args) {\n+        listMethod(Arrays.asList(args));\n+    }\n+\n+    private static <T> void listMethod(List<List<? super T>> list) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/inference\/DontCaptureBeforeSubtypeCheckTest.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}