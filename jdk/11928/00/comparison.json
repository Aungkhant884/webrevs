{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -319,0 +319,4 @@\n+                \/\/ restore old state\n+                ZONES.put(zoneId, old);\n+                provider.provideZoneIds().stream()\n+                    .forEach(id -> ZONES.remove(id, provider));\n","filename":"src\/java.base\/share\/classes\/java\/time\/zone\/ZoneRulesProvider.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.java.time.zone;\n+\n+import java.time.ZoneId;\n+import java.time.zone.ZoneRules;\n+import java.time.zone.ZoneRulesException;\n+import java.time.zone.ZoneRulesProvider;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+\/**\n+ * @summary Tests for ZoneRulesProvider class.\n+ * @bug 8299571\n+ *\/\n+@Test\n+public class TestZoneRulesProvider {\n+    private static final Set<String> MY_ZONE_IDS =\n+        new LinkedHashSet(Arrays.asList(new String[] {\"MyID_1\", \"MyID_2\", \"CET\", \"MyID_3\"}));\n+\n+    \/**\n+     * Tests whether partially registered zones are cleaned on a provider registration\n+     * failure, in case a duplicated zone is detected.\n+     *\/\n+    @Test\n+    public void test_registerDuplicatedZone() {\n+        try {\n+            ZoneRulesProvider.registerProvider(new ZoneRulesProvider() {\n+                @Override\n+                protected Set<String> provideZoneIds() {\n+                    return MY_ZONE_IDS;\n+                }\n+\n+                @Override\n+                protected ZoneRules provideRules(String zoneId, boolean forCaching) {\n+                    return null;\n+                }\n+\n+                @Override\n+                protected NavigableMap<String, ZoneRules> provideVersions(String zoneId) {\n+                    return null;\n+                }\n+            });\n+            throw new RuntimeException(\"Registering a provider that duplicates a zone should throw an exception\");\n+        } catch (ZoneRulesException e) {\n+            \/\/ Ignore. Failure on registration is expected.\n+        }\n+\n+        MY_ZONE_IDS.stream().forEach(id -> {\n+            var isCET = id.equals(\"CET\");\n+\n+            \/\/ availability check\n+            var available = ZoneId.getAvailableZoneIds().contains(id);\n+            if (available ^ isCET) {\n+                throw new RuntimeException(\"Unexpected availability for \" + id + \", availability: \" + available);\n+            }\n+\n+            \/\/ instantiation check\n+            try {\n+                ZoneId.of(id);\n+                assertTrue(isCET, \"ZoneId.of() for the custom id %s should throw ZoneRulesException.\".formatted(id));\n+            } catch (ZoneRulesException e) {\n+                assertFalse(isCET, \"Not possible to obtain a ZoneId for \\\"CET\\\".\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/zone\/TestZoneRulesProvider.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}