{"files":[{"patch":"@@ -506,1 +506,1 @@\n-  for (     ; i < this->_len; i++) ::new ((void*)&newData[i]) E(this->_data[i]);\n+  for (     ; i < this->_len; i++) ::new ((void*)&newData[i]) E(static_cast<E&&>(this->_data[i]));\n@@ -545,1 +545,1 @@\n-    for (int i = 0; i < len; ++i) ::new (&new_data[i]) E(old_data[i]);\n+    for (int i = 0; i < len; ++i) ::new (&new_data[i]) E(static_cast<E&&>(old_data[i]));\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -604,0 +604,15 @@\n+\n+struct NoncopyableStruct {\n+  int some;\n+  int data;\n+  NONCOPYABLE(NoncopyableStruct);\n+  NoncopyableStruct() : some(0), data(0) {\n+  }\n+  NoncopyableStruct(NoncopyableStruct&&) = default;\n+};\n+\n+TEST(GrowableArray, ShouldMoveAndNotCopy) {\n+  \/\/ This should cause a compilation error if GrowableArrayCHeap cannot handle a movable but noncopyable type.\n+  GrowableArrayCHeap<NoncopyableStruct, mtTest> my_array;\n+  my_array.reserve(256);\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}