{"files":[{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(call isTargetOs, windows), true)\n+ifeq ($(call isTargetOs, linux macosx windows), true)\n@@ -34,0 +34,1 @@\n+      TOOLCHAIN := TOOLCHAIN_LINK_CXX, \\\n@@ -35,1 +36,1 @@\n-      CFLAGS := $(CFLAGS_JDKLIB), \\\n+      CFLAGS := $(CXXFLAGS_JDKLIB), \\\n@@ -37,1 +38,2 @@\n-      LIBS := $(JDKLIB_LIBS) user32.lib, \\\n+      LIBS_unix := $(JDKLIB_LIBS) $(LIBCXX), \\\n+      LIBS_windows := $(JDKLIB_LIBS) user32.lib, \\\n","filename":"make\/modules\/jdk.internal.le\/Lib.gmk","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna;\n+\n+import java.io.IOException;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.linux.LinuxNativePty;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+\n+class JDKNativePty {\n+\n+    static JnaNativePty current(TerminalProvider.Stream console) throws IOException {\n+        return LinuxNativePty.current(console);\n+    }\n+\n+    static JnaNativePty open(Attributes attr, Size size) throws IOException {\n+        return LinuxNativePty.open(attr, size);\n+    }\n+\n+    static int isatty(int fd) {\n+        return LinuxNativePty.isatty(fd);\n+    }\n+\n+    static String ttyname(int fd) {\n+        return LinuxNativePty.ttyname(fd);\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/linux\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/JDKNativePty.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,389 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.linux;\n+\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+\/\/import com.sun.jna.LastErrorException;\n+\/\/import com.sun.jna.Platform;\n+\/\/import com.sun.jna.Structure;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Attributes.ControlChar;\n+import jdk.internal.org.jline.terminal.Attributes.ControlFlag;\n+import jdk.internal.org.jline.terminal.Attributes.InputFlag;\n+import jdk.internal.org.jline.terminal.Attributes.LocalFlag;\n+import jdk.internal.org.jline.terminal.Attributes.OutputFlag;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+\n+public interface CLibrary {\/\/extends com.sun.jna.Library {\n+\n+    void tcgetattr(int fd, termios termios) throws LastErrorException;\n+\n+    void tcsetattr(int fd, int cmd, termios termios) throws LastErrorException;\n+\n+    void ioctl(int fd, int cmd, winsize data) throws LastErrorException;\n+\n+    int isatty(int fd);\n+\n+    void ttyname_r(int fd, byte[] buf, int len) throws LastErrorException;\n+\n+    class winsize { \/\/extends Structure {\n+        public short ws_row;\n+        public short ws_col;\n+        public short ws_xpixel;\n+        public short ws_ypixel;\n+\n+        public winsize() {\n+        }\n+\n+        public winsize(Size ws) {\n+            ws_row = (short) ws.getRows();\n+            ws_col = (short) ws.getColumns();\n+        }\n+\n+        public Size toSize() {\n+            return new Size(ws_col, ws_row);\n+        }\n+\n+\/\/        @Override\n+\/\/        protected List<String> getFieldOrder() {\n+\/\/            return Arrays.asList(\/\/\n+\/\/                    \"ws_row\",\/\/\n+\/\/                    \"ws_col\",\/\/\n+\/\/                    \"ws_xpixel\",\/\/\n+\/\/                    \"ws_ypixel\"\/\/\n+\/\/            );\n+\/\/        }\n+\n+    }\n+\n+    class termios {\/\/ extends Structure {\n+\n+        public int c_iflag;\n+        public int c_oflag;\n+        public int c_cflag;\n+        public int c_lflag;\n+        public byte c_line;\n+        public byte[] c_cc = new byte[32];\n+        public int c_ispeed;\n+        public int c_ospeed;\n+\n+\/\/        @Override\n+\/\/        protected List<String> getFieldOrder() {\n+\/\/            return Arrays.asList(\/\/\n+\/\/                    \"c_iflag\",\/\/\n+\/\/                    \"c_oflag\",\/\/\n+\/\/                    \"c_cflag\",\/\/\n+\/\/                    \"c_lflag\",\/\/\n+\/\/                    \"c_line\",\/\/\n+\/\/                    \"c_cc\",\/\/\n+\/\/                    \"c_ispeed\",\/\/\n+\/\/                    \"c_ospeed\"\/\/\n+\/\/            );\n+\/\/        }\n+\n+        public termios() {\n+        }\n+\n+        public termios(Attributes t) {\n+            \/\/ Input flags\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IGNBRK),           IGNBRK,     c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.BRKINT),           BRKINT,     c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IGNPAR),           IGNPAR,     c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.PARMRK),           PARMRK,     c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.INPCK),            INPCK,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.ISTRIP),           ISTRIP,     c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.INLCR),            INLCR,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IGNCR),            IGNCR,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.ICRNL),            ICRNL,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IXON),             IXON,       c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IXOFF),            IXOFF,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IXANY),            IXANY,      c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IMAXBEL),          IMAXBEL,    c_iflag);\n+            c_iflag = setFlag(t.getInputFlag(InputFlag.IUTF8),            IUTF8,      c_iflag);\n+            \/\/ Output flags\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.OPOST),          OPOST,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.ONLCR),          ONLCR,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.OCRNL),          OCRNL,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.ONOCR),          ONOCR,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.ONLRET),         ONLRET,     c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.OFILL),          OFILL,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.NLDLY),          NLDLY,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.TABDLY),         TABDLY,     c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.CRDLY),          CRDLY,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.FFDLY),          FFDLY,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.BSDLY),          BSDLY,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.VTDLY),          VTDLY,      c_oflag);\n+            c_oflag = setFlag(t.getOutputFlag(OutputFlag.OFDEL),          OFDEL,      c_oflag);\n+            \/\/ Control flags\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CS5),          CS5,        c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CS6),          CS6,        c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CS7),          CS7,        c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CS8),          CS8,        c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CSTOPB),       CSTOPB,     c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CREAD),        CREAD,      c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.PARENB),       PARENB,     c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.PARODD),       PARODD,     c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.HUPCL),        HUPCL,      c_cflag);\n+            c_cflag = setFlag(t.getControlFlag(ControlFlag.CLOCAL),       CLOCAL,     c_cflag);\n+            \/\/ Local flags\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHOKE),           ECHOKE,     c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHOE),            ECHOE,      c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHOK),            ECHOK,      c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHO),             ECHO,       c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHONL),           ECHONL,     c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHOPRT),          ECHOPRT,    c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ECHOCTL),          ECHOCTL,    c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ISIG),             ISIG,       c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.ICANON),           ICANON,     c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.EXTPROC),          EXTPROC,    c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.TOSTOP),           TOSTOP,     c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.FLUSHO),           FLUSHO,     c_lflag);\n+            c_lflag = setFlag(t.getLocalFlag(LocalFlag.NOFLSH),           NOFLSH,     c_lflag);\n+            \/\/ Control chars\n+            c_cc[VEOF]      = (byte) t.getControlChar(ControlChar.VEOF);\n+            c_cc[VEOL]      = (byte) t.getControlChar(ControlChar.VEOL);\n+            c_cc[VEOL2]     = (byte) t.getControlChar(ControlChar.VEOL2);\n+            c_cc[VERASE]    = (byte) t.getControlChar(ControlChar.VERASE);\n+            c_cc[VWERASE]   = (byte) t.getControlChar(ControlChar.VWERASE);\n+            c_cc[VKILL]     = (byte) t.getControlChar(ControlChar.VKILL);\n+            c_cc[VREPRINT]  = (byte) t.getControlChar(ControlChar.VREPRINT);\n+            c_cc[VINTR]     = (byte) t.getControlChar(ControlChar.VINTR);\n+            c_cc[VQUIT]     = (byte) t.getControlChar(ControlChar.VQUIT);\n+            c_cc[VSUSP]     = (byte) t.getControlChar(ControlChar.VSUSP);\n+            c_cc[VSTART]    = (byte) t.getControlChar(ControlChar.VSTART);\n+            c_cc[VSTOP]     = (byte) t.getControlChar(ControlChar.VSTOP);\n+            c_cc[VLNEXT]    = (byte) t.getControlChar(ControlChar.VLNEXT);\n+            c_cc[VDISCARD]  = (byte) t.getControlChar(ControlChar.VDISCARD);\n+            c_cc[VMIN]      = (byte) t.getControlChar(ControlChar.VMIN);\n+            c_cc[VTIME]     = (byte) t.getControlChar(ControlChar.VTIME);\n+        }\n+\n+        private int setFlag(boolean flag, int value, int org) {\n+            return flag ? (org | value) : org;\n+        }\n+\n+        public Attributes toAttributes() {\n+            Attributes attr = new Attributes();\n+            \/\/ Input flags\n+            EnumSet<InputFlag> iflag = attr.getInputFlags();\n+            addFlag(c_iflag, iflag, InputFlag.IGNBRK,   IGNBRK);\n+            addFlag(c_iflag, iflag, InputFlag.IGNBRK, IGNBRK);\n+            addFlag(c_iflag, iflag, InputFlag.BRKINT, BRKINT);\n+            addFlag(c_iflag, iflag, InputFlag.IGNPAR, IGNPAR);\n+            addFlag(c_iflag, iflag, InputFlag.PARMRK, PARMRK);\n+            addFlag(c_iflag, iflag, InputFlag.INPCK, INPCK);\n+            addFlag(c_iflag, iflag, InputFlag.ISTRIP, ISTRIP);\n+            addFlag(c_iflag, iflag, InputFlag.INLCR, INLCR);\n+            addFlag(c_iflag, iflag, InputFlag.IGNCR, IGNCR);\n+            addFlag(c_iflag, iflag, InputFlag.ICRNL, ICRNL);\n+            addFlag(c_iflag, iflag, InputFlag.IXON, IXON);\n+            addFlag(c_iflag, iflag, InputFlag.IXOFF, IXOFF);\n+            addFlag(c_iflag, iflag, InputFlag.IXANY, IXANY);\n+            addFlag(c_iflag, iflag, InputFlag.IMAXBEL, IMAXBEL);\n+            addFlag(c_iflag, iflag, InputFlag.IUTF8, IUTF8);\n+            \/\/ Output flags\n+            EnumSet<OutputFlag> oflag = attr.getOutputFlags();\n+            addFlag(c_oflag, oflag, OutputFlag.OPOST, OPOST);\n+            addFlag(c_oflag, oflag, OutputFlag.ONLCR, ONLCR);\n+            addFlag(c_oflag, oflag, OutputFlag.OCRNL, OCRNL);\n+            addFlag(c_oflag, oflag, OutputFlag.ONOCR, ONOCR);\n+            addFlag(c_oflag, oflag, OutputFlag.ONLRET, ONLRET);\n+            addFlag(c_oflag, oflag, OutputFlag.OFILL, OFILL);\n+            addFlag(c_oflag, oflag, OutputFlag.NLDLY, NLDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.TABDLY, TABDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.CRDLY, CRDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.FFDLY, FFDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.BSDLY, BSDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.VTDLY, VTDLY);\n+            addFlag(c_oflag, oflag, OutputFlag.OFDEL, OFDEL);\n+            \/\/ Control flags\n+            EnumSet<ControlFlag> cflag = attr.getControlFlags();\n+            addFlag(c_cflag, cflag, ControlFlag.CS5, CS5);\n+            addFlag(c_cflag, cflag, ControlFlag.CS6, CS6);\n+            addFlag(c_cflag, cflag, ControlFlag.CS7, CS7);\n+            addFlag(c_cflag, cflag, ControlFlag.CS8, CS8);\n+            addFlag(c_cflag, cflag, ControlFlag.CSTOPB, CSTOPB);\n+            addFlag(c_cflag, cflag, ControlFlag.CREAD, CREAD);\n+            addFlag(c_cflag, cflag, ControlFlag.PARENB, PARENB);\n+            addFlag(c_cflag, cflag, ControlFlag.PARODD, PARODD);\n+            addFlag(c_cflag, cflag, ControlFlag.HUPCL, HUPCL);\n+            addFlag(c_cflag, cflag, ControlFlag.CLOCAL, CLOCAL);\n+            \/\/ Local flags\n+            EnumSet<LocalFlag> lflag = attr.getLocalFlags();\n+            addFlag(c_lflag, lflag, LocalFlag.ECHOKE, ECHOKE);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHOE, ECHOE);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHOK, ECHOK);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHO, ECHO);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHONL, ECHONL);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHOPRT, ECHOPRT);\n+            addFlag(c_lflag, lflag, LocalFlag.ECHOCTL, ECHOCTL);\n+            addFlag(c_lflag, lflag, LocalFlag.ISIG, ISIG);\n+            addFlag(c_lflag, lflag, LocalFlag.ICANON, ICANON);\n+            addFlag(c_lflag, lflag, LocalFlag.EXTPROC, EXTPROC);\n+            addFlag(c_lflag, lflag, LocalFlag.TOSTOP, TOSTOP);\n+            addFlag(c_lflag, lflag, LocalFlag.FLUSHO, FLUSHO);\n+            addFlag(c_lflag, lflag, LocalFlag.NOFLSH, NOFLSH);\n+            \/\/ Control chars\n+            EnumMap<ControlChar, Integer> cc = attr.getControlChars();\n+            cc.put(ControlChar.VEOF,        (int) c_cc[VEOF]);\n+            cc.put(ControlChar.VEOL,        (int) c_cc[VEOL]);\n+            cc.put(ControlChar.VEOL2,       (int) c_cc[VEOL2]);\n+            cc.put(ControlChar.VERASE,      (int) c_cc[VERASE]);\n+            cc.put(ControlChar.VWERASE,     (int) c_cc[VWERASE]);\n+            cc.put(ControlChar.VKILL,       (int) c_cc[VKILL]);\n+            cc.put(ControlChar.VREPRINT,    (int) c_cc[VREPRINT]);\n+            cc.put(ControlChar.VINTR,       (int) c_cc[VINTR]);\n+            cc.put(ControlChar.VQUIT,       (int) c_cc[VQUIT]);\n+            cc.put(ControlChar.VSUSP,       (int) c_cc[VSUSP]);\n+            cc.put(ControlChar.VSTART,      (int) c_cc[VSTART]);\n+            cc.put(ControlChar.VSTOP,       (int) c_cc[VSTOP]);\n+            cc.put(ControlChar.VLNEXT,      (int) c_cc[VLNEXT]);\n+            cc.put(ControlChar.VDISCARD,    (int) c_cc[VDISCARD]);\n+            cc.put(ControlChar.VMIN,        (int) c_cc[VMIN]);\n+            cc.put(ControlChar.VTIME,       (int) c_cc[VTIME]);\n+            \/\/ Return\n+            return attr;\n+        }\n+\n+        private <T extends Enum<T>> void addFlag(int value, EnumSet<T> flags, T flag, int v) {\n+            if ((value & v) != 0) {\n+                flags.add(flag);\n+            }\n+        }\n+    }\n+\n+    \/\/ CONSTANTS\n+\n+    int TIOCGWINSZ = \/*Platform.isMIPS() || Platform.isPPC() || Platform.isSPARC() ? 0x40087468 : *\/0x00005413;\n+    int TIOCSWINSZ = \/*Platform.isMIPS() || Platform.isPPC() || Platform.isSPARC() ? 0x80087467 : *\/0x00005414;\n+\n+    int VINTR       = 0;\n+    int VQUIT       = 1;\n+    int VERASE      = 2;\n+    int VKILL       = 3;\n+    int VEOF        = 4;\n+    int VTIME       = 5;\n+    int VMIN        = 6;\n+    int VSWTC       = 7;\n+    int VSTART      = 8;\n+    int VSTOP       = 9;\n+    int VSUSP       = 10;\n+    int VEOL        = 11;\n+    int VREPRINT    = 12;\n+    int VDISCARD    = 13;\n+    int VWERASE     = 14;\n+    int VLNEXT      = 15;\n+    int VEOL2       = 16;\n+\n+    int IGNBRK =   0x0000001;\n+    int BRKINT =   0x0000002;\n+    int IGNPAR =   0x0000004;\n+    int PARMRK =   0x0000008;\n+    int INPCK =    0x0000010;\n+    int ISTRIP =   0x0000020;\n+    int INLCR =    0x0000040;\n+    int IGNCR =    0x0000080;\n+    int ICRNL =    0x0000100;\n+    int IUCLC =    0x0000200;\n+    int IXON =     0x0000400;\n+    int IXANY =    0x0000800;\n+    int IXOFF =    0x0001000;\n+    int IMAXBEL =  0x0002000;\n+    int IUTF8 =    0x0004000;\n+\n+    int OPOST =    0x0000001;\n+    int OLCUC =    0x0000002;\n+    int ONLCR =    0x0000004;\n+    int OCRNL =    0x0000008;\n+    int ONOCR =    0x0000010;\n+    int ONLRET =   0x0000020;\n+    int OFILL =    0x0000040;\n+    int OFDEL =    0x0000080;\n+    int NLDLY =    0x0000100;\n+      int NL0 =    0x0000000;\n+      int NL1 =    0x0000100;\n+    int CRDLY =    0x0000600;\n+      int CR0 =    0x0000000;\n+      int CR1 =    0x0000200;\n+      int CR2 =    0x0000400;\n+      int CR3 =    0x0000600;\n+    int TABDLY =   0x0001800;\n+      int TAB0 =   0x0000000;\n+      int TAB1 =   0x0000800;\n+      int TAB2 =   0x0001000;\n+      int TAB3 =   0x0001800;\n+      int XTABS =  0x0001800;\n+    int BSDLY =    0x0002000;\n+      int BS0 =    0x0000000;\n+      int BS1 =    0x0002000;\n+    int VTDLY =    0x0004000;\n+      int VT0 =    0x0000000;\n+      int VT1 =    0x0004000;\n+    int FFDLY =    0x0008000;\n+      int FF0 =    0x0000000;\n+      int FF1 =    0x0008000;\n+\n+    int CBAUD =    0x000100f;\n+     int B0 =      0x0000000;\n+     int B50 =     0x0000001;\n+     int B75 =     0x0000002;\n+     int B110 =    0x0000003;\n+     int B134 =    0x0000004;\n+     int B150 =    0x0000005;\n+     int B200 =    0x0000006;\n+     int B300 =    0x0000007;\n+     int B600 =    0x0000008;\n+     int B1200 =   0x0000009;\n+     int B1800 =   0x000000a;\n+     int B2400 =   0x000000b;\n+     int B4800 =   0x000000c;\n+     int B9600 =   0x000000d;\n+     int B19200 =  0x000000e;\n+     int B38400 =  0x000000f;\n+    int EXTA =  B19200;\n+    int EXTB =  B38400;\n+    int CSIZE =    0x0000030;\n+      int CS5 =    0x0000000;\n+      int CS6 =    0x0000010;\n+      int CS7 =    0x0000020;\n+      int CS8 =    0x0000030;\n+    int CSTOPB =   0x0000040;\n+    int CREAD =    0x0000080;\n+    int PARENB =   0x0000100;\n+    int PARODD =   0x0000200;\n+    int HUPCL =    0x0000400;\n+    int CLOCAL =   0x0000800;\n+\n+    int ISIG =     0x0000001;\n+    int ICANON =   0x0000002;\n+    int XCASE =    0x0000004;\n+    int ECHO =     0x0000008;\n+    int ECHOE =    0x0000010;\n+    int ECHOK =    0x0000020;\n+    int ECHONL =   0x0000040;\n+    int NOFLSH =   0x0000080;\n+    int TOSTOP =   0x0000100;\n+    int ECHOCTL =  0x0000200;\n+    int ECHOPRT =  0x0000400;\n+    int ECHOKE =   0x0000800;\n+    int FLUSHO =   0x0001000;\n+    int PENDIN =   0x0002000;\n+    int IEXTEN =   0x0008000;\n+    int EXTPROC =  0x0010000;\n+\n+    int TCSANOW =          0x0;\n+    int TCSADRAIN =        0x1;\n+    int TCSAFLUSH =        0x2;\n+\n+}\n","filename":"src\/jdk.internal.le\/linux\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibrary.java","additions":389,"deletions":0,"binary":false,"changes":389,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.linux;\n+\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+\n+public final class CLibraryImpl implements CLibrary {\n+\n+    static {\n+        System.loadLibrary(\"le\");\n+        initIDs();\n+    }\n+\n+    private static native void initIDs();\n+\n+    @Override\n+    public native void tcgetattr(int fd, termios termios) throws LastErrorException;\n+\n+    @Override\n+    public native void tcsetattr(int fd, int cmd, termios termios) throws LastErrorException;\n+\n+    @Override\n+    public void ioctl(int fd, int cmd, winsize data) throws LastErrorException {\n+        if (cmd == CLibrary.TIOCGWINSZ || cmd == CLibrary.TIOCSWINSZ) {\n+            ioctl0(fd, cmd, data);\n+        } else {\n+            throw new UnsupportedOperationException(\"Command: \" + cmd + \", not supported.\");\n+        }\n+    }\n+\n+    private native void ioctl0(int fd, int cmd, winsize data) throws LastErrorException;\n+\n+    @Override\n+    public native int isatty(int fd);\n+\n+    @Override\n+    public native void ttyname_r(int fd, byte[] buf, int len) throws LastErrorException;\n+\n+}\n","filename":"src\/jdk.internal.le\/linux\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibraryImpl.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.linux;\n+\n+import java.io.FileDescriptor;\n+import java.io.IOException;\n+\n+\/\/import com.sun.jna.LastErrorException;\n+\/\/import com.sun.jna.Native;\n+\/\/import com.sun.jna.Platform;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.JnaNativePty;\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+\n+import static jdk.internal.org.jline.terminal.impl.jna.linux.CLibrary.TCSADRAIN;\n+import static jdk.internal.org.jline.terminal.impl.jna.linux.CLibrary.TIOCGWINSZ;\n+import static jdk.internal.org.jline.terminal.impl.jna.linux.CLibrary.TIOCSWINSZ;\n+import static jdk.internal.org.jline.terminal.impl.jna.linux.CLibrary.termios;\n+import static jdk.internal.org.jline.terminal.impl.jna.linux.CLibrary.winsize;\n+\n+public class LinuxNativePty extends JnaNativePty {\n+\n+\/\/    private static final CLibrary C_LIBRARY = Native.load(Platform.C_LIBRARY_NAME, CLibrary.class);\n+    private static final CLibrary C_LIBRARY = new CLibraryImpl();\n+\n+    public interface UtilLibrary {\/\/ extends com.sun.jna.Library {\n+\n+        void openpty(int[] master, int[] slave, byte[] name, CLibrary.termios t, CLibrary.winsize s) throws LastErrorException;\n+\n+\/\/        UtilLibrary INSTANCE = Native.load(\"util\", UtilLibrary.class);\n+        UtilLibrary INSTANCE = new UtilLibraryImpl();\n+    }\n+\n+    public static LinuxNativePty current(TerminalProvider.Stream consoleStream) throws IOException {\n+        switch (consoleStream) {\n+            case Output:\n+                return new LinuxNativePty(-1, null, 0, FileDescriptor.in, 1, FileDescriptor.out, ttyname(0));\n+            case Error:\n+                return new LinuxNativePty(-1, null, 0, FileDescriptor.in, 2, FileDescriptor.err, ttyname(0));\n+            default:\n+                throw new IllegalArgumentException(\"Unsupport stream for console: \" + consoleStream);\n+        }\n+    }\n+\n+    public static LinuxNativePty open(Attributes attr, Size size) throws IOException {\n+        int[] master = new int[1];\n+        int[] slave = new int[1];\n+        byte[] buf = new byte[64];\n+        UtilLibrary.INSTANCE.openpty(master, slave, buf,\n+                attr != null ? new termios(attr) : null,\n+                size != null ? new winsize(size) : null);\n+        int len = 0;\n+        while (buf[len] != 0) {\n+            len++;\n+        }\n+        String name = new String(buf, 0, len);\n+        return new LinuxNativePty(master[0], newDescriptor(master[0]), slave[0], newDescriptor(slave[0]), name);\n+    }\n+\n+    public LinuxNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, String name) {\n+        super(master, masterFD, slave, slaveFD, name);\n+    }\n+\n+    public LinuxNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, int slaveOut, FileDescriptor slaveOutFD, String name) {\n+        super(master, masterFD, slave, slaveFD, slaveOut, slaveOutFD, name);\n+    }\n+\n+    @Override\n+    public Attributes getAttr() throws IOException {\n+        termios termios = new termios();\n+        C_LIBRARY.tcgetattr(getSlave(), termios);\n+        return termios.toAttributes();\n+    }\n+\n+    @Override\n+    protected void doSetAttr(Attributes attr) throws IOException {\n+        termios termios = new termios(attr);\n+        termios org = new termios();\n+        C_LIBRARY.tcgetattr(getSlave(), org);\n+        org.c_iflag = termios.c_iflag;\n+        org.c_oflag = termios.c_oflag;\n+        org.c_lflag = termios.c_lflag;\n+        System.arraycopy(termios.c_cc, 0, org.c_cc, 0, termios.c_cc.length);\n+        C_LIBRARY.tcsetattr(getSlave(), TCSADRAIN, org);\n+    }\n+\n+    @Override\n+    public Size getSize() throws IOException {\n+        winsize sz = new winsize();\n+        C_LIBRARY.ioctl(getSlave(), TIOCGWINSZ, sz);\n+        return sz.toSize();\n+    }\n+\n+    @Override\n+    public void setSize(Size size) throws IOException {\n+        winsize sz = new winsize(size);\n+        C_LIBRARY.ioctl(getSlave(), TIOCSWINSZ, sz);\n+    }\n+\n+    public static int isatty(int fd) {\n+        return C_LIBRARY.isatty(fd);\n+    }\n+\n+    public static String ttyname(int slave) {\n+        byte[] buf = new byte[64];\n+        C_LIBRARY.ttyname_r(slave, buf, buf.length);\n+        int len = 0;\n+        while (buf[len] != 0) {\n+            len++;\n+        }\n+        return new String(buf, 0, len);\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/linux\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/LinuxNativePty.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.linux;\n+\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+import jdk.internal.org.jline.terminal.impl.jna.linux.LinuxNativePty.UtilLibrary;\n+\n+public final class UtilLibraryImpl implements UtilLibrary {\n+\n+    @Override\n+    public void openpty(int[] master, int[] slave, byte[] name, CLibrary.termios t, CLibrary.winsize s) throws LastErrorException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/linux\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/UtilLibraryImpl.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl.h\"\n+\n+#include <errno.h>\n+#include <stdlib.h>\n+#include <termios.h>\n+#include <unistd.h>\n+#include <sys\/ioctl.h>\n+\n+static jclass lastErrorExceptionClass;\n+static jmethodID lastErrorExceptionConstructor;\n+\n+static jclass termios_j;\n+static jfieldID c_iflag;\n+static jfieldID c_oflag;\n+static jfieldID c_cflag;\n+static jfieldID c_lflag;\n+static jfieldID c_line;\n+static jfieldID c_cc;\n+static jfieldID c_ispeed;\n+static jfieldID c_ospeed;\n+\n+static jclass winsize_j;\n+static jfieldID ws_row;\n+static jfieldID ws_col;\n+static jfieldID ws_xpixel;\n+static jfieldID ws_ypixel;\n+\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_initIDs\n+  (JNIEnv *env, jclass) {\n+    jclass cls;\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/LastErrorException\");\n+    CHECK_NULL(cls);\n+    lastErrorExceptionClass = (jclass) env->NewGlobalRef(cls);\n+    lastErrorExceptionConstructor = env->GetMethodID(lastErrorExceptionClass, \"<init>\", \"(J)V\");\n+    CHECK_NULL(lastErrorExceptionConstructor);\n+\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibrary$termios\");\n+    CHECK_NULL(cls);\n+    termios_j = (jclass) env->NewGlobalRef(cls);\n+    c_iflag = env->GetFieldID(termios_j, \"c_iflag\", \"I\");\n+    CHECK_NULL(c_iflag);\n+    c_oflag = env->GetFieldID(termios_j, \"c_oflag\", \"I\");\n+    CHECK_NULL(c_oflag);\n+    c_cflag = env->GetFieldID(termios_j, \"c_cflag\", \"I\");\n+    CHECK_NULL(c_cflag);\n+    c_lflag = env->GetFieldID(termios_j, \"c_lflag\", \"I\");\n+    CHECK_NULL(c_lflag);\n+    c_line = env->GetFieldID(termios_j, \"c_line\", \"B\");\n+    CHECK_NULL(c_line);\n+    c_cc = env->GetFieldID(termios_j, \"c_cc\", \"[B\");\n+    CHECK_NULL(c_cc);\n+    c_ispeed = env->GetFieldID(termios_j, \"c_ispeed\", \"I\");\n+    CHECK_NULL(c_ispeed);\n+    c_ospeed = env->GetFieldID(termios_j, \"c_ospeed\", \"I\");\n+    CHECK_NULL(c_ospeed);\n+\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibrary$winsize\");\n+    CHECK_NULL(cls);\n+    winsize_j = (jclass) env->NewGlobalRef(cls);\n+    ws_row = env->GetFieldID(winsize_j, \"ws_row\", \"S\");\n+    CHECK_NULL(ws_row);\n+    ws_col = env->GetFieldID(winsize_j, \"ws_col\", \"S\");\n+    CHECK_NULL(ws_col);\n+    ws_xpixel= env->GetFieldID(winsize_j, \"ws_xpixel\", \"S\");\n+    CHECK_NULL(ws_xpixel);\n+    ws_ypixel= env->GetFieldID(winsize_j, \"ws_ypixel\", \"S\");\n+    CHECK_NULL(ws_ypixel);\n+}\n+\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_tcgetattr\n+  (JNIEnv *env, jobject, jint fd, jobject result) {\n+    termios data;\n+\n+    if (tcgetattr(fd, &data) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetIntField(result, c_iflag, data.c_iflag);\n+    env->SetIntField(result, c_oflag, data.c_oflag);\n+    env->SetIntField(result, c_cflag, data.c_cflag);\n+    env->SetIntField(result, c_lflag, data.c_lflag);\n+    env->SetIntField(result, c_line, data.c_line);\n+    jbyteArray c_ccValue = (jbyteArray) env->GetObjectField(result, c_cc);\n+    env->SetByteArrayRegion(c_ccValue, 0, NCCS, (signed char *) data.c_cc);\/\/TODO: cast?\n+    env->SetIntField(result, c_ispeed, data.c_ispeed);\n+    env->SetIntField(result, c_ospeed, data.c_ospeed);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl\n+ * Method:    tcsetattr\n+ * Signature: (IILjdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibrary\/termios;)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_tcsetattr\n+  (JNIEnv *env, jobject, jint fd, jint cmd, jobject input) {\n+    termios data;\n+\n+    data.c_iflag = env->GetIntField(input, c_iflag);\n+    data.c_oflag = env->GetIntField(input, c_oflag);\n+    data.c_cflag = env->GetIntField(input, c_cflag);\n+    data.c_lflag = env->GetIntField(input, c_lflag);\n+    data.c_line = env->GetIntField(input, c_line);\n+    jbyteArray c_ccValue = (jbyteArray) env->GetObjectField(input, c_cc);\n+    env->GetByteArrayRegion(c_ccValue, 0, NCCS, (signed char *) data.c_cc);\/\/TODO: cast?\n+    data.c_ispeed = env->GetIntField(input, c_ispeed);\n+    data.c_ospeed = env->GetIntField(input, c_ospeed);\n+\n+    if (tcsetattr(fd, cmd, &data) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+    }\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl\n+ * Method:    ioctl0\n+ * Signature: (IILjdk\/internal\/org\/jline\/terminal\/impl\/jna\/linux\/CLibrary\/winsize;)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_ioctl0\n+  (JNIEnv *env, jobject, jint fd, jint cmd, jobject data) {\n+    winsize ws;\n+\n+    ws.ws_row = env->GetIntField(data, ws_row);\n+    ws.ws_col = env->GetIntField(data, ws_col);\n+    ws.ws_xpixel = env->GetIntField(data, ws_xpixel);\n+    ws.ws_ypixel = env->GetIntField(data, ws_ypixel);\n+\n+    if (ioctl(fd, cmd, &ws) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetIntField(data, ws_row, ws.ws_row);\n+    env->SetIntField(data, ws_col, ws.ws_col);\n+    env->SetIntField(data, ws_xpixel, ws.ws_xpixel);\n+    env->SetIntField(data, ws_ypixel, ws.ws_ypixel);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl\n+ * Method:    isatty\n+ * Signature: (I)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_isatty\n+  (JNIEnv *, jobject, jint fd) {\n+    return isatty(fd);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl\n+ * Method:    ttyname_r\n+ * Signature: (I[BI)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_linux_CLibraryImpl_ttyname_1r\n+  (JNIEnv *env, jobject, jint fd, jbyteArray buf, jint len) {\n+    char *data = new char[len];\n+    int error = ttyname_r(fd, data, len);\n+\n+    if (error != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     error);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetByteArrayRegion(buf, 0, len, (signed char *) data);\n+    delete[] data;\n+}\n","filename":"src\/jdk.internal.le\/linux\/native\/lible\/CLibrary.cpp","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna;\n+\n+import java.io.IOException;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.osx.OsXNativePty;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+\n+class JDKNativePty {\n+\n+    static JnaNativePty current(TerminalProvider.Stream console) throws IOException {\n+        return OsXNativePty.current(console);\n+    }\n+\n+    static JnaNativePty open(Attributes attr, Size size) throws IOException {\n+        return OsXNativePty.open(attr, size);\n+    }\n+\n+    static int isatty(int fd) {\n+        return OsXNativePty.isatty(fd);\n+    }\n+\n+    static String ttyname(int fd) {\n+        return OsXNativePty.ttyname(fd);\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/macosx\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/JDKNativePty.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,394 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.osx;\n+\n+import java.util.Arrays;\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.List;\n+\n+\/\/import com.sun.jna.LastErrorException;\n+\/\/import com.sun.jna.NativeLong;\n+\/\/import com.sun.jna.Structure;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Attributes.ControlChar;\n+import jdk.internal.org.jline.terminal.Attributes.ControlFlag;\n+import jdk.internal.org.jline.terminal.Attributes.InputFlag;\n+import jdk.internal.org.jline.terminal.Attributes.LocalFlag;\n+import jdk.internal.org.jline.terminal.Attributes.OutputFlag;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+\n+public interface CLibrary {\/\/extends com.sun.jna.Library {\n+\n+    void tcgetattr(int fd, termios termios) throws LastErrorException;\n+\n+    void tcsetattr(int fd, int cmd, termios termios) throws LastErrorException;\n+\n+    void ioctl(int fd, NativeLong cmd, winsize data) throws LastErrorException;\n+\n+    int isatty(int fd);\n+\n+    void ttyname_r(int fd, byte[] buf, int len) throws LastErrorException;\n+\n+    void openpty(int[] master, int[] slave, byte[] name, termios t, winsize s) throws LastErrorException;\n+\n+    class winsize { \/\/extends Structure {\n+        public short ws_row;\n+        public short ws_col;\n+        public short ws_xpixel;\n+        public short ws_ypixel;\n+\n+        public winsize() {\n+        }\n+\n+        public winsize(Size ws) {\n+            ws_row = (short) ws.getRows();\n+            ws_col = (short) ws.getColumns();\n+        }\n+\n+        public Size toSize() {\n+            return new Size(ws_col, ws_row);\n+        }\n+\n+\/\/        @Override\n+\/\/        protected List<String> getFieldOrder() {\n+\/\/            return Arrays.asList(\/\/\n+\/\/                    \"ws_row\",\/\/\n+\/\/                    \"ws_col\",\/\/\n+\/\/                    \"ws_xpixel\",\/\/\n+\/\/                    \"ws_ypixel\"\/\/\n+\/\/            );\n+\/\/        }\n+\n+    }\n+\n+    class termios { \/\/extends Structure {\n+\n+        public NativeLong c_iflag;\n+        public NativeLong c_oflag;\n+        public NativeLong c_cflag;\n+        public NativeLong c_lflag;\n+        public byte[] c_cc = new byte[20];\n+        public NativeLong c_ispeed;\n+        public NativeLong c_ospeed;\n+\n+\/\/        @Override\n+\/\/        protected List<String> getFieldOrder() {\n+\/\/            return Arrays.asList(\/\/\n+\/\/                    \"c_iflag\",\/\/\n+\/\/                    \"c_oflag\",\/\/\n+\/\/                    \"c_cflag\",\/\/\n+\/\/                    \"c_lflag\",\/\/\n+\/\/                    \"c_cc\",\/\/\n+\/\/                    \"c_ispeed\",\/\/\n+\/\/                    \"c_ospeed\"\/\/\n+\/\/            );\n+\/\/        }\n+\n+        {\n+            c_iflag  = new NativeLong(0);\n+            c_oflag  = new NativeLong(0);\n+            c_cflag  = new NativeLong(0);\n+            c_lflag  = new NativeLong(0);\n+            c_ispeed = new NativeLong(0);\n+            c_ospeed = new NativeLong(0);\n+        }\n+\n+        public termios() {\n+        }\n+\n+        public termios(Attributes t) {\n+            \/\/ Input flags\n+            setFlag(t.getInputFlag(InputFlag.IGNBRK),           IGNBRK,     c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.BRKINT),           BRKINT,     c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IGNPAR),           IGNPAR,     c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.PARMRK),           PARMRK,     c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.INPCK),            INPCK,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.ISTRIP),           ISTRIP,     c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.INLCR),            INLCR,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IGNCR),            IGNCR,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.ICRNL),            ICRNL,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IXON),             IXON,       c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IXOFF),            IXOFF,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IXANY),            IXANY,      c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IMAXBEL),          IMAXBEL,    c_iflag);\n+            setFlag(t.getInputFlag(InputFlag.IUTF8),            IUTF8,      c_iflag);\n+            \/\/ Output flags\n+            setFlag(t.getOutputFlag(OutputFlag.OPOST),          OPOST,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.ONLCR),          ONLCR,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.OXTABS),         OXTABS,     c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.ONOEOT),         ONOEOT,     c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.OCRNL),          OCRNL,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.ONOCR),          ONOCR,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.ONLRET),         ONLRET,     c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.OFILL),          OFILL,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.NLDLY),          NLDLY,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.TABDLY),         TABDLY,     c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.CRDLY),          CRDLY,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.FFDLY),          FFDLY,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.BSDLY),          BSDLY,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.VTDLY),          VTDLY,      c_oflag);\n+            setFlag(t.getOutputFlag(OutputFlag.OFDEL),          OFDEL,      c_oflag);\n+            \/\/ Control flags\n+            setFlag(t.getControlFlag(ControlFlag.CIGNORE),      CIGNORE,    c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CS5),          CS5,        c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CS6),          CS6,        c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CS7),          CS7,        c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CS8),          CS8,        c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CSTOPB),       CSTOPB,     c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CREAD),        CREAD,      c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.PARENB),       PARENB,     c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.PARODD),       PARODD,     c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.HUPCL),        HUPCL,      c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CLOCAL),       CLOCAL,     c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CCTS_OFLOW),   CCTS_OFLOW, c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CRTS_IFLOW),   CRTS_IFLOW, c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CDTR_IFLOW),   CDTR_IFLOW, c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CDSR_OFLOW),   CDSR_OFLOW, c_cflag);\n+            setFlag(t.getControlFlag(ControlFlag.CCAR_OFLOW),   CCAR_OFLOW, c_cflag);\n+            \/\/ Local flags\n+            setFlag(t.getLocalFlag(LocalFlag.ECHOKE),           ECHOKE,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHOE),            ECHOE,      c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHOK),            ECHOK,      c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHO),             ECHO,       c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHONL),           ECHONL,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHOPRT),          ECHOPRT,    c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ECHOCTL),          ECHOCTL,    c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ISIG),             ISIG,       c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ICANON),           ICANON,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.ALTWERASE),        ALTWERASE,  c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.IEXTEN),           IEXTEN,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.EXTPROC),          EXTPROC,    c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.TOSTOP),           TOSTOP,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.FLUSHO),           FLUSHO,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.NOKERNINFO),       NOKERNINFO, c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.PENDIN),           PENDIN,     c_lflag);\n+            setFlag(t.getLocalFlag(LocalFlag.NOFLSH),           NOFLSH,     c_lflag);\n+            \/\/ Control chars\n+            c_cc[VEOF]      = (byte) t.getControlChar(ControlChar.VEOF);\n+            c_cc[VEOL]      = (byte) t.getControlChar(ControlChar.VEOL);\n+            c_cc[VEOL2]     = (byte) t.getControlChar(ControlChar.VEOL2);\n+            c_cc[VERASE]    = (byte) t.getControlChar(ControlChar.VERASE);\n+            c_cc[VWERASE]   = (byte) t.getControlChar(ControlChar.VWERASE);\n+            c_cc[VKILL]     = (byte) t.getControlChar(ControlChar.VKILL);\n+            c_cc[VREPRINT]  = (byte) t.getControlChar(ControlChar.VREPRINT);\n+            c_cc[VINTR]     = (byte) t.getControlChar(ControlChar.VINTR);\n+            c_cc[VQUIT]     = (byte) t.getControlChar(ControlChar.VQUIT);\n+            c_cc[VSUSP]     = (byte) t.getControlChar(ControlChar.VSUSP);\n+            c_cc[VDSUSP]    = (byte) t.getControlChar(ControlChar.VDSUSP);\n+            c_cc[VSTART]    = (byte) t.getControlChar(ControlChar.VSTART);\n+            c_cc[VSTOP]     = (byte) t.getControlChar(ControlChar.VSTOP);\n+            c_cc[VLNEXT]    = (byte) t.getControlChar(ControlChar.VLNEXT);\n+            c_cc[VDISCARD]  = (byte) t.getControlChar(ControlChar.VDISCARD);\n+            c_cc[VMIN]      = (byte) t.getControlChar(ControlChar.VMIN);\n+            c_cc[VTIME]     = (byte) t.getControlChar(ControlChar.VTIME);\n+            c_cc[VSTATUS]   = (byte) t.getControlChar(ControlChar.VSTATUS);\n+        }\n+\n+        private void setFlag(boolean flag, long value, NativeLong org) {\n+            org.setValue(flag ? org.longValue() | value : org.longValue());\n+        }\n+\n+        public Attributes toAttributes() {\n+            Attributes attr = new Attributes();\n+            \/\/ Input flags\n+            EnumSet<InputFlag> iflag = attr.getInputFlags();\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IGNBRK,   IGNBRK);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IGNBRK, IGNBRK);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.BRKINT, BRKINT);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IGNPAR, IGNPAR);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.PARMRK, PARMRK);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.INPCK, INPCK);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.ISTRIP, ISTRIP);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.INLCR, INLCR);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IGNCR, IGNCR);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.ICRNL, ICRNL);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IXON, IXON);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IXOFF, IXOFF);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IXANY, IXANY);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IMAXBEL, IMAXBEL);\n+            addFlag(c_iflag.longValue(), iflag, InputFlag.IUTF8, IUTF8);\n+            \/\/ Output flags\n+            EnumSet<OutputFlag> oflag = attr.getOutputFlags();\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.OPOST, OPOST);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.ONLCR, ONLCR);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.OXTABS, OXTABS);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.ONOEOT, ONOEOT);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.OCRNL, OCRNL);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.ONOCR, ONOCR);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.ONLRET, ONLRET);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.OFILL, OFILL);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.NLDLY, NLDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.TABDLY, TABDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.CRDLY, CRDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.FFDLY, FFDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.BSDLY, BSDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.VTDLY, VTDLY);\n+            addFlag(c_oflag.longValue(), oflag, OutputFlag.OFDEL, OFDEL);\n+            \/\/ Control flags\n+            EnumSet<ControlFlag> cflag = attr.getControlFlags();\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CIGNORE, CIGNORE);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CS5, CS5);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CS6, CS6);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CS7, CS7);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CS8, CS8);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CSTOPB, CSTOPB);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CREAD, CREAD);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.PARENB, PARENB);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.PARODD, PARODD);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.HUPCL, HUPCL);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CLOCAL, CLOCAL);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CCTS_OFLOW, CCTS_OFLOW);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CRTS_IFLOW, CRTS_IFLOW);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CDSR_OFLOW, CDSR_OFLOW);\n+            addFlag(c_cflag.longValue(), cflag, ControlFlag.CCAR_OFLOW, CCAR_OFLOW);\n+            \/\/ Local flags\n+            EnumSet<LocalFlag> lflag = attr.getLocalFlags();\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHOKE, ECHOKE);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHOE, ECHOE);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHOK, ECHOK);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHO, ECHO);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHONL, ECHONL);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHOPRT, ECHOPRT);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ECHOCTL, ECHOCTL);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ISIG, ISIG);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ICANON, ICANON);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.ALTWERASE, ALTWERASE);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.IEXTEN, IEXTEN);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.EXTPROC, EXTPROC);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.TOSTOP, TOSTOP);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.FLUSHO, FLUSHO);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.NOKERNINFO, NOKERNINFO);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.PENDIN, PENDIN);\n+            addFlag(c_lflag.longValue(), lflag, LocalFlag.NOFLSH, NOFLSH);\n+            \/\/ Control chars\n+            EnumMap<ControlChar, Integer> cc = attr.getControlChars();\n+            cc.put(ControlChar.VEOF,        (int) c_cc[VEOF]);\n+            cc.put(ControlChar.VEOL,        (int) c_cc[VEOL]);\n+            cc.put(ControlChar.VEOL2,       (int) c_cc[VEOL2]);\n+            cc.put(ControlChar.VERASE,      (int) c_cc[VERASE]);\n+            cc.put(ControlChar.VWERASE,     (int) c_cc[VWERASE]);\n+            cc.put(ControlChar.VKILL,       (int) c_cc[VKILL]);\n+            cc.put(ControlChar.VREPRINT,    (int) c_cc[VREPRINT]);\n+            cc.put(ControlChar.VINTR,       (int) c_cc[VINTR]);\n+            cc.put(ControlChar.VQUIT,       (int) c_cc[VQUIT]);\n+            cc.put(ControlChar.VSUSP,       (int) c_cc[VSUSP]);\n+            cc.put(ControlChar.VDSUSP,      (int) c_cc[VDSUSP]);\n+            cc.put(ControlChar.VSTART,      (int) c_cc[VSTART]);\n+            cc.put(ControlChar.VSTOP,       (int) c_cc[VSTOP]);\n+            cc.put(ControlChar.VLNEXT,      (int) c_cc[VLNEXT]);\n+            cc.put(ControlChar.VDISCARD,    (int) c_cc[VDISCARD]);\n+            cc.put(ControlChar.VMIN,        (int) c_cc[VMIN]);\n+            cc.put(ControlChar.VTIME,       (int) c_cc[VTIME]);\n+            cc.put(ControlChar.VSTATUS,     (int) c_cc[VSTATUS]);\n+            \/\/ Return\n+            return attr;\n+        }\n+\n+        private <T extends Enum<T>> void addFlag(long value, EnumSet<T> flags, T flag, int v) {\n+            if ((value & v) != 0) {\n+                flags.add(flag);\n+            }\n+        }\n+    }\n+\n+    \/\/ CONSTANTS\n+\n+     long TIOCGWINSZ = 0x40087468L;\n+     long TIOCSWINSZ = 0x80087467L;\n+\n+     int TCSANOW     = 0x00000000;\n+\n+     int VEOF        = 0;\n+     int VEOL        = 1;\n+     int VEOL2       = 2;\n+     int VERASE      = 3;\n+     int VWERASE     = 4;\n+     int VKILL       = 5;\n+     int VREPRINT    = 6;\n+     int VINTR       = 8;\n+     int VQUIT       = 9;\n+     int VSUSP       = 10;\n+     int VDSUSP      = 11;\n+     int VSTART      = 12;\n+     int VSTOP       = 13;\n+     int VLNEXT      = 14;\n+     int VDISCARD    = 15;\n+     int VMIN        = 16;\n+     int VTIME       = 17;\n+     int VSTATUS     = 18;\n+\n+     int IGNBRK      = 0x00000001;\n+     int BRKINT      = 0x00000002;\n+     int IGNPAR      = 0x00000004;\n+     int PARMRK      = 0x00000008;\n+     int INPCK       = 0x00000010;\n+     int ISTRIP      = 0x00000020;\n+     int INLCR       = 0x00000040;\n+     int IGNCR       = 0x00000080;\n+     int ICRNL       = 0x00000100;\n+     int IXON        = 0x00000200;\n+     int IXOFF       = 0x00000400;\n+     int IXANY       = 0x00000800;\n+     int IMAXBEL     = 0x00002000;\n+     int IUTF8       = 0x00004000;\n+\n+     int OPOST       = 0x00000001;\n+     int ONLCR       = 0x00000002;\n+     int OXTABS      = 0x00000004;\n+     int ONOEOT      = 0x00000008;\n+     int OCRNL       = 0x00000010;\n+     int ONOCR       = 0x00000020;\n+     int ONLRET      = 0x00000040;\n+     int OFILL       = 0x00000080;\n+     int NLDLY       = 0x00000300;\n+     int TABDLY      = 0x00000c04;\n+     int CRDLY       = 0x00003000;\n+     int FFDLY       = 0x00004000;\n+     int BSDLY       = 0x00008000;\n+     int VTDLY       = 0x00010000;\n+     int OFDEL       = 0x00020000;\n+\n+     int CIGNORE     = 0x00000001;\n+     int CS5         = 0x00000000;\n+     int CS6         = 0x00000100;\n+     int CS7         = 0x00000200;\n+     int CS8         = 0x00000300;\n+     int CSTOPB      = 0x00000400;\n+     int CREAD       = 0x00000800;\n+     int PARENB      = 0x00001000;\n+     int PARODD      = 0x00002000;\n+     int HUPCL       = 0x00004000;\n+     int CLOCAL      = 0x00008000;\n+     int CCTS_OFLOW  = 0x00010000;\n+     int CRTS_IFLOW  = 0x00020000;\n+     int CDTR_IFLOW  = 0x00040000;\n+     int CDSR_OFLOW  = 0x00080000;\n+     int CCAR_OFLOW  = 0x00100000;\n+\n+     int ECHOKE      = 0x00000001;\n+     int ECHOE       = 0x00000002;\n+     int ECHOK       = 0x00000004;\n+     int ECHO        = 0x00000008;\n+     int ECHONL      = 0x00000010;\n+     int ECHOPRT     = 0x00000020;\n+     int ECHOCTL     = 0x00000040;\n+     int ISIG        = 0x00000080;\n+     int ICANON      = 0x00000100;\n+     int ALTWERASE   = 0x00000200;\n+     int IEXTEN      = 0x00000400;\n+     int EXTPROC     = 0x00000800;\n+     int TOSTOP      = 0x00400000;\n+     int FLUSHO      = 0x00800000;\n+     int NOKERNINFO  = 0x02000000;\n+     int PENDIN      = 0x20000000;\n+     int NOFLSH      = 0x80000000;\n+\n+}\n","filename":"src\/jdk.internal.le\/macosx\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibrary.java","additions":394,"deletions":0,"binary":false,"changes":394,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.osx;\n+\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n+\n+public final class CLibraryImpl implements CLibrary {\n+\n+    static {\n+        System.loadLibrary(\"le\");\n+        initIDs();\n+    }\n+\n+    private static native void initIDs();\n+\n+    @Override\n+    public native void tcgetattr(int fd, termios termios) throws LastErrorException;\n+\n+    @Override\n+    public native void tcsetattr(int fd, int cmd, termios termios) throws LastErrorException;\n+\n+    @Override\n+    public void ioctl(int fd, NativeLong cmd, winsize data) throws LastErrorException {\n+        if (cmd.longValue() == CLibrary.TIOCGWINSZ || cmd.longValue() == CLibrary.TIOCSWINSZ) {\n+            ioctl0(fd, cmd.longValue(), data);\n+        } else {\n+            throw new UnsupportedOperationException(\"Command: \" + cmd + \", not supported.\");\n+        }\n+    }\n+\n+    private native void ioctl0(int fd, long cmd, winsize data) throws LastErrorException;\n+\n+    @Override\n+    public native int isatty(int fd);\n+\n+    @Override\n+    public native void ttyname_r(int fd, byte[] buf, int len) throws LastErrorException;\n+\n+    @Override\n+    public void openpty(int[] master, int[] slave, byte[] name, termios t, winsize s) throws LastErrorException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/macosx\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibraryImpl.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.osx;\n+\n+class NativeLong {\n+\n+    public long value;\n+\n+    public NativeLong(long value) {\n+        this.value = value;\n+    }\n+\n+    public void setValue(long value) {\n+        this.value = value;\n+    }\n+\n+    public long longValue() {\n+        return value;\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/macosx\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna.osx;\n+\n+import java.io.FileDescriptor;\n+import java.io.IOException;\n+\n+\/\/import com.sun.jna.Native;\n+\/\/import com.sun.jna.NativeLong;\n+\/\/import com.sun.jna.Platform;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.jna.JnaNativePty;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+\n+import static jdk.internal.org.jline.terminal.impl.jna.osx.CLibrary.TCSANOW;\n+import static jdk.internal.org.jline.terminal.impl.jna.osx.CLibrary.TIOCGWINSZ;\n+import static jdk.internal.org.jline.terminal.impl.jna.osx.CLibrary.TIOCSWINSZ;\n+import static jdk.internal.org.jline.terminal.impl.jna.osx.CLibrary.termios;\n+import static jdk.internal.org.jline.terminal.impl.jna.osx.CLibrary.winsize;\n+\n+public class OsXNativePty extends JnaNativePty {\n+\n+\/\/    private static final CLibrary C_LIBRARY = Native.load(Platform.C_LIBRARY_NAME, CLibrary.class);\n+    private static final CLibrary C_LIBRARY = new CLibraryImpl();\/\/Native.load(Platform.C_LIBRARY_NAME, CLibrary.class);\n+\n+    public static OsXNativePty current(TerminalProvider.Stream consoleStream) throws IOException {\n+        switch (consoleStream) {\n+            case Output:\n+                return new OsXNativePty(-1, null, 0, FileDescriptor.in, 1, FileDescriptor.out, ttyname(0));\n+            case Error:\n+                return new OsXNativePty(-1, null, 0, FileDescriptor.in, 2, FileDescriptor.err, ttyname(0));\n+            default:\n+                throw new IllegalArgumentException(\"Unsupport stream for console: \" + consoleStream);\n+        }\n+    }\n+\n+    public static OsXNativePty open(Attributes attr, Size size) throws IOException {\n+        int[] master = new int[1];\n+        int[] slave = new int[1];\n+        byte[] buf = new byte[64];\n+        C_LIBRARY.openpty(master, slave, buf,\n+                attr != null ? new termios(attr) : null,\n+                size != null ? new winsize(size) : null);\n+        int len = 0;\n+        while (buf[len] != 0) {\n+            len++;\n+        }\n+        String name = new String(buf, 0, len);\n+        return new OsXNativePty(master[0], newDescriptor(master[0]), slave[0], newDescriptor(slave[0]), name);\n+    }\n+\n+    public OsXNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, String name) {\n+        super(master, masterFD, slave, slaveFD, name);\n+    }\n+\n+    public OsXNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, int slaveOut, FileDescriptor slaveOutFD, String name) {\n+        super(master, masterFD, slave, slaveFD, slaveOut, slaveOutFD, name);\n+    }\n+\n+    @Override\n+    public Attributes getAttr() throws IOException {\n+        termios termios = new termios();\n+        C_LIBRARY.tcgetattr(getSlave(), termios);\n+        return termios.toAttributes();\n+    }\n+\n+    @Override\n+    protected void doSetAttr(Attributes attr) throws IOException {\n+        termios termios = new termios(attr);\n+        C_LIBRARY.tcsetattr(getSlave(), TCSANOW, termios);\n+    }\n+\n+    @Override\n+    public Size getSize() throws IOException {\n+        winsize sz = new winsize();\n+        C_LIBRARY.ioctl(getSlave(), new NativeLong(TIOCGWINSZ), sz);\n+        return sz.toSize();\n+    }\n+\n+    @Override\n+    public void setSize(Size size) throws IOException {\n+        winsize sz = new winsize(size);\n+        C_LIBRARY.ioctl(getSlave(), new NativeLong(TIOCSWINSZ), sz);\n+    }\n+\n+    public static int isatty(int fd) {\n+        return C_LIBRARY.isatty(fd);\n+    }\n+\n+    public static String ttyname(int fd) {\n+        byte[] buf = new byte[64];\n+        C_LIBRARY.ttyname_r(fd, buf, buf.length);\n+        int len = 0;\n+        while (buf[len] != 0) {\n+            len++;\n+        }\n+        return new String(buf, 0, len);\n+    }\n+}\n","filename":"src\/jdk.internal.le\/macosx\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/OsXNativePty.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,210 @@\n+\/*\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl.h\"\n+\n+#include <errno.h>\n+#include <stdlib.h>\n+#include <termios.h>\n+#include <unistd.h>\n+#include <sys\/ioctl.h>\n+\n+static jclass lastErrorExceptionClass;\n+static jmethodID lastErrorExceptionConstructor;\n+\n+static jclass termios_j;\n+static jfieldID c_iflag;\n+static jfieldID c_oflag;\n+static jfieldID c_cflag;\n+static jfieldID c_lflag;\n+static jfieldID c_cc;\n+static jfieldID c_ispeed;\n+static jfieldID c_ospeed;\n+\n+static jclass winsize_j;\n+static jfieldID ws_row;\n+static jfieldID ws_col;\n+static jfieldID ws_xpixel;\n+static jfieldID ws_ypixel;\n+\n+static jclass nativelong_j;\n+static jfieldID nativelong_value;\n+\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_initIDs\n+  (JNIEnv *env, jclass) {\n+    jclass cls;\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/LastErrorException\");\n+    CHECK_NULL(cls);\n+    lastErrorExceptionClass = (jclass) env->NewGlobalRef(cls);\n+    lastErrorExceptionConstructor = env->GetMethodID(lastErrorExceptionClass, \"<init>\", \"(J)V\");\n+    CHECK_NULL(lastErrorExceptionConstructor);\n+\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibrary$termios\");\n+    CHECK_NULL(cls);\n+    termios_j = (jclass) env->NewGlobalRef(cls);\n+    CHECK_NULL(termios_j);\n+    c_iflag = env->GetFieldID(termios_j, \"c_iflag\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_iflag);\n+    c_oflag = env->GetFieldID(termios_j, \"c_oflag\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_oflag);\n+    c_cflag = env->GetFieldID(termios_j, \"c_cflag\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_cflag);\n+    c_lflag = env->GetFieldID(termios_j, \"c_lflag\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_lflag);\n+    c_cc = env->GetFieldID(termios_j, \"c_cc\", \"[B\");\n+    CHECK_NULL(c_cc);\n+    c_ispeed = env->GetFieldID(termios_j, \"c_ispeed\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_ispeed);\n+    c_ospeed = env->GetFieldID(termios_j, \"c_ospeed\", \"Ljdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong;\");\n+    CHECK_NULL(c_ospeed);\n+\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibrary$winsize\");\n+    CHECK_NULL(cls);\n+    winsize_j = (jclass) env->NewGlobalRef(cls);\n+    ws_row = env->GetFieldID(winsize_j, \"ws_row\", \"S\");\n+    CHECK_NULL(ws_row);\n+    ws_col = env->GetFieldID(winsize_j, \"ws_col\", \"S\");\n+    CHECK_NULL(ws_col);\n+    ws_xpixel= env->GetFieldID(winsize_j, \"ws_xpixel\", \"S\");\n+    CHECK_NULL(ws_xpixel);\n+    ws_ypixel= env->GetFieldID(winsize_j, \"ws_ypixel\", \"S\");\n+    CHECK_NULL(ws_ypixel);\n+\n+    nativelong_j = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/NativeLong\");\n+    CHECK_NULL(nativelong_j);\n+    nativelong_value = env->GetFieldID(nativelong_j, \"value\", \"J\");\n+    CHECK_NULL(nativelong_value);\n+}\n+\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_tcgetattr\n+  (JNIEnv *env, jobject, jint fd, jobject result) {\n+    termios data;\n+\n+    if (tcgetattr(fd, &data) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetLongField(env->GetObjectField(result, c_iflag), nativelong_value, data.c_iflag);\n+    env->SetLongField(env->GetObjectField(result, c_oflag), nativelong_value, data.c_oflag);\n+    env->SetLongField(env->GetObjectField(result, c_cflag), nativelong_value, data.c_cflag);\n+    env->SetLongField(env->GetObjectField(result, c_lflag), nativelong_value, data.c_lflag);\n+    jbyteArray c_ccValue = (jbyteArray) env->GetObjectField(result, c_cc);\n+    env->SetByteArrayRegion(c_ccValue, 0, NCCS, (signed char *) data.c_cc);\n+    env->SetLongField(env->GetObjectField(result, c_ispeed), nativelong_value, data.c_ispeed);\n+    env->SetLongField(env->GetObjectField(result, c_ospeed), nativelong_value, data.c_ospeed);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl\n+ * Method:    tcsetattr\n+ * Signature: (IILjdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibrary\/termios;)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_tcsetattr\n+  (JNIEnv *env, jobject, jint fd, jint cmd, jobject input) {\n+    termios data;\n+\n+    data.c_iflag = env->GetLongField(env->GetObjectField(input, c_iflag), nativelong_value);\n+    data.c_oflag = env->GetLongField(env->GetObjectField(input, c_oflag), nativelong_value);\n+    data.c_cflag = env->GetLongField(env->GetObjectField(input, c_cflag), nativelong_value);\n+    data.c_lflag = env->GetLongField(env->GetObjectField(input, c_lflag), nativelong_value);\n+    jbyteArray c_ccValue = (jbyteArray) env->GetObjectField(input, c_cc);\n+    env->GetByteArrayRegion(c_ccValue, 0, NCCS, (signed char *) data.c_cc);\n+    data.c_ispeed = env->GetLongField(env->GetObjectField(input, c_ispeed), nativelong_value);\n+    data.c_ospeed = env->GetLongField(env->GetObjectField(input, c_ospeed), nativelong_value);\n+\n+    if (tcsetattr(fd, cmd, &data) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+    }\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl\n+ * Method:    ioctl0\n+ * Signature: (IILjdk\/internal\/org\/jline\/terminal\/impl\/jna\/osx\/CLibrary\/winsize;)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_ioctl0\n+  (JNIEnv *env, jobject, jint fd, jlong cmd, jobject data) {\n+    winsize ws;\n+\n+    ws.ws_row = env->GetIntField(data, ws_row);\n+    ws.ws_col = env->GetIntField(data, ws_col);\n+    ws.ws_xpixel = env->GetIntField(data, ws_xpixel);\n+    ws.ws_ypixel = env->GetIntField(data, ws_ypixel);\n+\n+    if (ioctl(fd, cmd, &ws) != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     errno);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetIntField(data, ws_row, ws.ws_row);\n+    env->SetIntField(data, ws_col, ws.ws_col);\n+    env->SetIntField(data, ws_xpixel, ws.ws_xpixel);\n+    env->SetIntField(data, ws_ypixel, ws.ws_ypixel);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl\n+ * Method:    isatty\n+ * Signature: (I)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_isatty\n+  (JNIEnv *, jobject, jint fd) {\n+    return isatty(fd);\n+}\n+\n+\/*\n+ * Class:     jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl\n+ * Method:    ttyname_r\n+ * Signature: (I[BI)V\n+ *\/\n+JNIEXPORT void JNICALL Java_jdk_internal_org_jline_terminal_impl_jna_osx_CLibraryImpl_ttyname_1r\n+  (JNIEnv *env, jobject, jint fd, jbyteArray buf, jint len) {\n+    char *data = new char[len];\n+    int error = ttyname_r(fd, data, len);\n+\n+    if (error != 0) {\n+        jobject exc = env->NewObject(lastErrorExceptionClass,\n+                                     lastErrorExceptionConstructor,\n+                                     error);\n+        env->Throw((jthrowable) exc);\n+        return ;\n+    }\n+\n+    env->SetByteArrayRegion(buf, 0, len, (signed char *) data);\n+    delete[] data;\n+}\n","filename":"src\/jdk.internal.le\/macosx\/native\/lible\/CLibrary.cpp","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -52,1 +52,11 @@\n-        return new JdkConsoleImpl(charset);\n+        try {\n+            Terminal terminal = TerminalBuilder.builder().encoding(charset)\n+                                               .exec(false).build();\n+            return new JdkConsoleImpl(terminal);\n+        } catch (IllegalStateException ise) {\n+            \/\/cannot create a non-dumb, non-exec terminal,\n+            \/\/use the standard Console:\n+            return null;\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe);\n+        }\n@@ -122,7 +132,3 @@\n-        public JdkConsoleImpl(Charset charset) {\n-            try {\n-                terminal = TerminalBuilder.builder().encoding(charset).build();\n-                jline = LineReaderBuilder.builder().terminal(terminal).build();\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe);\n-            }\n+        public JdkConsoleImpl(Terminal terminal) {\n+            this.terminal = terminal;\n+            this.jline = LineReaderBuilder.builder().terminal(terminal).build();\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna;\n+\n+@SuppressWarnings(\"serial\")\n+public class LastErrorException extends RuntimeException{\n+\n+    public final long lastError;\n+\n+    public LastErrorException(long lastError) {\n+        this.lastError = lastError;\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/LastErrorException.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna;\n+\n+import java.io.FileDescriptor;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.reflect.Constructor;\n+\n+\/\/import com.sun.jna.Platform;\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.impl.AbstractPty;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+import jdk.internal.org.jline.terminal.spi.Pty;\n+\/\/import jdk.internal.org.jline.terminal.impl.jna.freebsd.FreeBsdNativePty;\n+\/\/import jdk.internal.org.jline.terminal.impl.jna.linux.LinuxNativePty;\n+\/\/import jdk.internal.org.jline.terminal.impl.jna.osx.OsXNativePty;\n+\/\/import jdk.internal.org.jline.terminal.impl.jna.solaris.SolarisNativePty;\n+\n+public abstract class JnaNativePty extends AbstractPty implements Pty {\n+\n+    private final int master;\n+    private final int slave;\n+    private final int slaveOut;\n+    private final String name;\n+    private final FileDescriptor masterFD;\n+    private final FileDescriptor slaveFD;\n+    private final FileDescriptor slaveOutFD;\n+\n+    public static JnaNativePty current(TerminalProvider.Stream console) throws IOException {\n+\/\/        if (Platform.isMac()) {\n+\/\/            if (Platform.is64Bit() && Platform.isARM()) {\n+\/\/                throw new UnsupportedOperationException();\n+\/\/            }\n+\/\/            return OsXNativePty.current(console);\n+\/\/        } else if (Platform.isLinux()) {\n+\/\/            return LinuxNativePty.current(console);\n+\/\/        } else if (Platform.isSolaris()) {\n+\/\/            return SolarisNativePty.current(console);\n+\/\/        } else if (Platform.isFreeBSD()) {\n+\/\/            return FreeBsdNativePty.current(console);\n+\/\/        } else {\n+\/\/            throw new UnsupportedOperationException();\n+\/\/        }\n+        return JDKNativePty.current(console);\n+    }\n+\n+    public static JnaNativePty open(Attributes attr, Size size) throws IOException {\n+\/\/        if (Platform.isMac()) {\n+\/\/            return OsXNativePty.open(attr, size);\n+\/\/        } else if (Platform.isLinux()) {\n+\/\/            return LinuxNativePty.open(attr, size);\n+\/\/        } else if (Platform.isSolaris()) {\n+\/\/            return SolarisNativePty.open(attr, size);\n+\/\/        } else if (Platform.isFreeBSD()) {\n+\/\/            return FreeBsdNativePty.open(attr, size);\n+\/\/        } else {\n+\/\/            throw new UnsupportedOperationException();\n+\/\/        }\n+        return JDKNativePty.open(attr, size);\n+    }\n+\n+    protected JnaNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, String name) {\n+        this(master, masterFD, slave, slaveFD, slave, slaveFD, name);\n+    }\n+\n+    protected JnaNativePty(int master, FileDescriptor masterFD, int slave, FileDescriptor slaveFD, int slaveOut, FileDescriptor slaveOutFD, String name) {\n+        this.master = master;\n+        this.slave = slave;\n+        this.slaveOut = slaveOut;\n+        this.name = name;\n+        this.masterFD = masterFD;\n+        this.slaveFD = slaveFD;\n+        this.slaveOutFD = slaveOutFD;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (master > 0) {\n+            getMasterInput().close();\n+        }\n+        if (slave > 0) {\n+            getSlaveInput().close();\n+        }\n+    }\n+\n+    public int getMaster() {\n+        return master;\n+    }\n+\n+    public int getSlave() {\n+        return slave;\n+    }\n+\n+    public int getSlaveOut() {\n+        return slaveOut;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public FileDescriptor getMasterFD() {\n+        return masterFD;\n+    }\n+\n+    public FileDescriptor getSlaveFD() {\n+        return slaveFD;\n+    }\n+\n+    public FileDescriptor getSlaveOutFD() {\n+        return slaveOutFD;\n+    }\n+\n+    public InputStream getMasterInput() {\n+        return new FileInputStream(getMasterFD());\n+    }\n+\n+    public OutputStream getMasterOutput() {\n+        return new FileOutputStream(getMasterFD());\n+    }\n+\n+    protected InputStream doGetSlaveInput() {\n+        return new FileInputStream(getSlaveFD());\n+    }\n+\n+    public OutputStream getSlaveOutput() {\n+        return new FileOutputStream(getSlaveOutFD());\n+    }\n+\n+    protected static FileDescriptor newDescriptor(int fd) {\n+        try {\n+            Constructor<FileDescriptor> cns = FileDescriptor.class.getDeclaredConstructor(int.class);\n+            cns.setAccessible(true);\n+            return cns.newInstance(fd);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Unable to create FileDescriptor\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"JnaNativePty[\" + getName() + \"]\";\n+    }\n+\n+    public static boolean isPosixSystemStream(TerminalProvider.Stream stream) {\n+        switch (stream) {\n+            case Input: return isatty(0);\n+            case Output: return isatty(1);\n+            case Error: return isatty(2);\n+            default: return false;\n+        }\n+    }\n+\n+    public static String posixSystemStreamName(TerminalProvider.Stream stream) {\n+        switch (stream) {\n+            case Input: return ttyname(0);\n+            case Output: return ttyname(1);\n+            case Error: return ttyname(2);\n+            default: return null;\n+        }\n+    }\n+\n+    private static boolean isatty(int fd) {\n+\/\/        if (Platform.isMac()) {\n+\/\/            return OsXNativePty.isatty(fd) == 1;\n+\/\/        } else if (Platform.isLinux()) {\n+\/\/            return LinuxNativePty.isatty(fd) == 1;\n+\/\/        } else if (Platform.isSolaris()) {\n+\/\/            return SolarisNativePty.isatty(fd) == 1;\n+\/\/        } else if (Platform.isFreeBSD()) {\n+\/\/            return FreeBsdNativePty.isatty(fd) == 1;\n+\/\/        } else {\n+\/\/            return false;\n+\/\/        }\n+        return JDKNativePty.isatty(fd) == 1;\n+    }\n+\n+    private static String ttyname(int fd) {\n+\/\/        if (Platform.isMac()) {\n+\/\/            return OsXNativePty.ttyname(fd);\n+\/\/        } else if (Platform.isLinux()) {\n+\/\/            return LinuxNativePty.ttyname(fd);\n+\/\/        } else if (Platform.isSolaris()) {\n+\/\/            return SolarisNativePty.ttyname(fd);\n+\/\/        } else if (Platform.isFreeBSD()) {\n+\/\/            return FreeBsdNativePty.ttyname(fd);\n+\/\/        } else {\n+\/\/            return null;\n+\/\/        }\n+        return JDKNativePty.ttyname(fd);\n+    }\n+\n+}\n","filename":"src\/jdk.internal.le\/unix\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/JnaNativePty.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2002-2020, the original author or authors.\n+ *\n+ * This software is distributable under the BSD license. See the terms of the\n+ * BSD license in the documentation provided with this software.\n+ *\n+ * https:\/\/opensource.org\/licenses\/BSD-3-Clause\n+ *\/\n+package jdk.internal.org.jline.terminal.impl.jna;\n+\n+import jdk.internal.org.jline.terminal.Attributes;\n+import jdk.internal.org.jline.terminal.Size;\n+import jdk.internal.org.jline.terminal.Terminal;\n+import jdk.internal.org.jline.terminal.impl.PosixPtyTerminal;\n+import jdk.internal.org.jline.terminal.impl.PosixSysTerminal;\n+\/\/import jdk.internal.org.jline.terminal.impl.jna.win.JnaWinSysTerminal;\n+import jdk.internal.org.jline.terminal.spi.TerminalProvider;\n+import jdk.internal.org.jline.terminal.spi.Pty;\n+import jdk.internal.org.jline.utils.OSUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.util.function.Function;\n+\n+public class JnaTerminalProvider implements TerminalProvider\n+{\n+    @Override\n+    public String name() {\n+        return \"jna\";\n+    }\n+\n+    public Pty current(TerminalProvider.Stream console) throws IOException {\n+        return JnaNativePty.current(console);\n+    }\n+\n+    public Pty open(Attributes attributes, Size size) throws IOException {\n+        return JnaNativePty.open(attributes, size);\n+    }\n+\n+    @Override\n+    public Terminal sysTerminal(String name, String type, boolean ansiPassThrough, Charset encoding,\n+                                boolean nativeSignals, Terminal.SignalHandler signalHandler, boolean paused,\n+                                Stream consoleStream, Function<InputStream, InputStream> inputStreamWrapper) throws IOException {\n+\/\/        if (OSUtils.IS_WINDOWS) {\n+\/\/            return winSysTerminal(name, type, ansiPassThrough, encoding, nativeSignals, signalHandler, paused, consoleStream );\n+\/\/        } else {\n+            return posixSysTerminal(name, type, ansiPassThrough, encoding, nativeSignals, signalHandler, paused, consoleStream, inputStreamWrapper );\n+\/\/        }\n+    }\n+\n+\/\/    public Terminal winSysTerminal(String name, String type, boolean ansiPassThrough, Charset encoding,\n+\/\/                                   boolean nativeSignals, Terminal.SignalHandler signalHandler, boolean paused,\n+\/\/                                   Stream console, Function<InputStream, InputStream> inputStreamWrapper) throws IOException {\n+\/\/        return JnaWinSysTerminal.createTerminal(name, type, ansiPassThrough, encoding, nativeSignals, signalHandler, paused, console);\n+\/\/    }\n+\/\/\n+    public Terminal posixSysTerminal(String name, String type, boolean ansiPassThrough, Charset encoding,\n+                                     boolean nativeSignals, Terminal.SignalHandler signalHandler, boolean paused,\n+                                     Stream consoleStream, Function<InputStream, InputStream> inputStreamWrapper) throws IOException {\n+\/\/        Pty pty = jdk.internal.org.jline.terminal.impl.ExecPty.current(consoleStream);\n+        Pty pty = current(consoleStream);\n+        return new PosixSysTerminal(name, type, pty, encoding, nativeSignals, signalHandler, inputStreamWrapper);\n+    }\n+\n+    @Override\n+    public Terminal newTerminal(String name, String type, InputStream in, OutputStream out,\n+                                Charset encoding, Terminal.SignalHandler signalHandler, boolean paused,\n+                                Attributes attributes, Size size) throws IOException\n+    {\n+        Pty pty = open(attributes, size);\n+        return new PosixPtyTerminal(name, type, pty, in, out, encoding, signalHandler, paused);\n+    }\n+\n+    @Override\n+    public boolean isSystemStream(Stream stream) {\n+        try {\n+\/\/            if (OSUtils.IS_WINDOWS) {\n+\/\/                return isWindowsSystemStream(stream);\n+\/\/            } else {\n+                return isPosixSystemStream(stream);\n+\/\/            }\n+        } catch (Throwable t) {\n+            return false;\n+        }\n+    }\n+\n+\/\/    public boolean isWindowsSystemStream(Stream stream) {\n+\/\/        return JnaWinSysTerminal.isWindowsSystemStream(stream);\n+\/\/    }\n+\n+    public boolean isPosixSystemStream(Stream stream) {\n+        return JnaNativePty.isPosixSystemStream(stream);\n+    }\n+\n+    @Override\n+    public String systemStreamName(Stream stream) {\n+        if (OSUtils.IS_WINDOWS) {\n+            return null;\n+        } else {\n+            return JnaNativePty.posixSystemStreamName(stream);\n+        }\n+    }\n+}\n","filename":"src\/jdk.internal.le\/unix\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/JnaTerminalProvider.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -15,0 +15,1 @@\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/JnaWinConsoleWriter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/JnaWinSysTerminal.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/Kernel32.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.org.jline.terminal.impl.jna.LastErrorException;\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/Kernel32Impl.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.org.jline.terminal.impl.jna.win;\n-\n-@SuppressWarnings(\"serial\")\n-class LastErrorException extends RuntimeException{\n-\n-    public final long lastError;\n-\n-    public LastErrorException(long lastError) {\n-        this.lastError = lastError;\n-    }\n-\n-}\n","filename":"src\/jdk.internal.le\/windows\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/LastErrorException.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -144,1 +144,1 @@\n-    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/win\/LastErrorException\");\n+    cls = env->FindClass(\"jdk\/internal\/org\/jline\/terminal\/impl\/jna\/LastErrorException\");\n","filename":"src\/jdk.internal.le\/windows\/native\/lible\/Kernel32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}