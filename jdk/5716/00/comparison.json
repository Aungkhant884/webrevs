{"files":[{"patch":"@@ -1448,1 +1448,2 @@\n-      n->Opcode() != Op_Opaque4) {\n+      n->Opcode() != Op_Opaque4 &&\n+      (n->Opcode() == Op_CastII && ((CastIINode*)n)->has_range_check())) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8272562\n+ * @summary C2: assert(false) failed: Bad graph detected in build_loop_late\n+ *\n+ * @run main\/othervm -XX:CompileOnly=TestSunkCastOnUnreachablePath -XX:-TieredCompilation -Xbatch TestSunkCastOnUnreachablePath\n+ *\n+ *\/\n+\n+public class TestSunkCastOnUnreachablePath {\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 1000; i++) {\n+            vMeth();\n+        }\n+    }\n+\n+    static int vMeth() {\n+        int i2 = 3, iArr1[] = new int[200];\n+\n+        for (int i9 = 3; i9 < 100; i9++) {\n+            try {\n+                int i10 = (iArr1[i9 - 1]);\n+                i2 = (i10 \/ i9);\n+            } catch (ArithmeticException a_e) {\n+            }\n+        }\n+        return i2;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSunkCastOnUnreachablePath.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}