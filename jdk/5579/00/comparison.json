{"files":[{"patch":"@@ -716,1 +716,1 @@\n-        throw new UnsupportedOperationException(\"view <\" + type + \"> is not supported\");\n+        return (V) null;\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipPath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019 SAP SE. All rights reserved.\n+ * Copyright (c) 2019, 2021, SAP SE. All rights reserved.\n@@ -71,1 +71,1 @@\n- * @bug 8213031\n+ * @bug 8213031 8273935\n@@ -598,1 +598,1 @@\n-            assertTrue(throwsUOE(()->Files.getFileAttributeView(entry, PosixFileAttributeView.class)));\n+            assertNull(Files.getFileAttributeView(entry, PosixFileAttributeView.class));\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/TestPosix.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+package test;\n+\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import util.ZipFsBaseTest;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+\n+\/**\n+ * @test\n+ * @bug 8273935\n+ * @summary Validate that Files.getFileAttributeView will not throw\n+ * UnsupportedOperationException when the attribute view\n+ * PosixFileAttributeView is not available\n+ *\/\n+public class PosixAttributeViewTest extends ZipFsBaseTest {\n+    public static final String ZIP_ENTRY = \"Entry-0\";\n+    private static final Path ZIP_FILE = Path.of(\"posixTest.zip\");\n+\n+    \/**\n+     * Create initial Zip File\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        Files.deleteIfExists(ZIP_FILE);\n+        Entry e0 = Entry.of(ZIP_ENTRY, ZipEntry.DEFLATED,\n+                \"Tennis Anyone\");\n+        zip(ZIP_FILE, Map.of(\"create\", \"true\"), e0);\n+    }\n+\n+    \/**\n+     * Remove Zip File used by Test\n+     * @throws IOException if an error occurs\n+     *\/\n+    @AfterTest\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(ZIP_FILE);\n+    }\n+\n+    \/**\n+     * DataProvider used to specify the Map indicating whether Posix\n+     * file attributes have been enabled\n+     * @return  map of the Zip FS properties to configure\n+     *\/\n+    @DataProvider\n+    protected Object[][] zipfsMap() {\n+        return new Object[][]{\n+                {Map.of()},\n+                { Map.of(\"enablePosixFileAttributes\", \"true\")}\n+        };\n+    }\n+\n+    \/**\n+     * Verify that Files.getFileAttributeView will not throw\n+     * UnsupportedOperationException when the attribute view\n+     * PosixFileAttributeView is not available\n+     * @param env map of the Zip FS properties to configure\n+     * @throws Exception if an error occurs\n+     *\/\n+    @Test(dataProvider = \"zipfsMap\")\n+    public void testPosixAttributeView(Map<String, String> env) throws Exception {\n+\n+        try (FileSystem fs = FileSystems.newFileSystem(ZIP_FILE, env)) {\n+            Path entry = fs.getPath(ZIP_ENTRY);\n+            PosixFileAttributeView view = Files.getFileAttributeView(entry,\n+                    PosixFileAttributeView.class);\n+            System.out.printf(\"View returned: %s%n\", view);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/testng\/test\/PosixAttributeViewTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}