{"files":[{"patch":"@@ -92,4 +92,4 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.limit_in_bytes\",\n-                     \"Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, memlimit);\n-\n-  if (memlimit >= os::Linux::physical_memory()) {\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.limit_in_bytes\",\n+                     \"Memory Limit is: \" JLONG_FORMAT, JLONG_FORMAT, memlimit);\n+  assert(memlimit > 0, \"invariant\");\n+  if ((julong)memlimit >= os::Linux::physical_memory()) {\n@@ -99,3 +99,4 @@\n-      GET_CONTAINER_INFO_LINE(julong, _memory->controller(), \"\/memory.stat\", \"hierarchical_memory_limit\",\n-                             \"Hierarchical Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, hier_memlimit)\n-      if (hier_memlimit >= os::Linux::physical_memory()) {\n+      GET_CONTAINER_INFO_LINE(jlong, _memory->controller(), \"\/memory.stat\", \"hierarchical_memory_limit\",\n+                             \"Hierarchical Memory Limit is: \" JLONG_FORMAT, JLONG_FORMAT, hier_memlimit)\n+      assert(hier_memlimit > 0, \"invariant\");\n+      if ((julong)hier_memlimit >= os::Linux::physical_memory()) {\n@@ -104,1 +105,1 @@\n-        return (jlong)hier_memlimit;\n+        return hier_memlimit;\n@@ -110,1 +111,1 @@\n-    return (jlong)memlimit;\n+    return memlimit;\n@@ -115,0 +116,3 @@\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.memsw.limit_in_bytes\",\n+                     \"Memory and Swap Limit is: \" JLONG_FORMAT, JLONG_FORMAT, memswlimit);\n+  assert(memswlimit > 0, \"invariant\");\n@@ -116,2 +120,0 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.memsw.limit_in_bytes\",\n-                     \"Memory and Swap Limit is: \" JULONG_FORMAT, JULONG_FORMAT, memswlimit);\n@@ -119,1 +121,1 @@\n-  if (memswlimit >= host_total_memsw) {\n+  if ((julong)memswlimit >= host_total_memsw) {\n@@ -124,3 +126,4 @@\n-      GET_CONTAINER_INFO_LINE(julong, _memory->controller(), \"\/memory.stat\", matchline,\n-                             \"Hierarchical Memory and Swap Limit is : \" JULONG_FORMAT, JULONG_FORMAT, hier_memswlimit)\n-      if (hier_memswlimit >= host_total_memsw) {\n+      GET_CONTAINER_INFO_LINE(jlong, _memory->controller(), \"\/memory.stat\", matchline,\n+                             \"Hierarchical Memory and Swap Limit is : \" JLONG_FORMAT, JLONG_FORMAT, hier_memswlimit)\n+      assert(hier_memswlimit > 0, \"invariant\");\n+      if ((julong)hier_memswlimit >= host_total_memsw) {\n@@ -132,4 +135,4 @@\n-            GET_CONTAINER_INFO_LINE(julong, _memory->controller(), \"\/memory.stat\", matchmemline,\n-                             \"Hierarchical Memory Limit is : \" JULONG_FORMAT, JULONG_FORMAT, hier_memlimit)\n-            log_trace(os, container)(\"Memory and Swap Limit has been reset to \" JULONG_FORMAT \" because swappiness is 0\", hier_memlimit);\n-            return (jlong)hier_memlimit;\n+            GET_CONTAINER_INFO_LINE(jlong, _memory->controller(), \"\/memory.stat\", matchmemline,\n+                             \"Hierarchical Memory Limit is : \" JLONG_FORMAT, JLONG_FORMAT, hier_memlimit)\n+            log_trace(os, container)(\"Memory and Swap Limit has been reset to \" JLONG_FORMAT \" because swappiness is 0\", hier_memlimit);\n+            return hier_memlimit;\n@@ -137,1 +140,1 @@\n-        return (jlong)hier_memswlimit;\n+        return hier_memswlimit;\n@@ -145,1 +148,1 @@\n-      log_trace(os, container)(\"Memory and Swap Limit has been reset to \" JULONG_FORMAT \" because swappiness is 0\", memlimit);\n+      log_trace(os, container)(\"Memory and Swap Limit has been reset to \" JLONG_FORMAT \" because swappiness is 0\", memlimit);\n@@ -148,1 +151,1 @@\n-    return (jlong)memswlimit;\n+    return memswlimit;\n@@ -153,2 +156,2 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.swappiness\",\n-                     \"Swappiness is: \" JULONG_FORMAT, JULONG_FORMAT, swappiness);\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.swappiness\",\n+                     \"Swappiness is: \" JLONG_FORMAT, JLONG_FORMAT, swappiness);\n@@ -159,3 +162,4 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.soft_limit_in_bytes\",\n-                     \"Memory Soft Limit is: \" JULONG_FORMAT, JULONG_FORMAT, memsoftlimit);\n-  if (memsoftlimit >= os::Linux::physical_memory()) {\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.soft_limit_in_bytes\",\n+                     \"Memory Soft Limit is: \" JLONG_FORMAT, JLONG_FORMAT, memsoftlimit);\n+  assert(memsoftlimit > 0, \"invariant\");\n+  if ((julong)memsoftlimit >= os::Linux::physical_memory()) {\n@@ -165,1 +169,1 @@\n-    return (jlong)memsoftlimit;\n+    return memsoftlimit;\n@@ -206,3 +210,4 @@\n-  GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.kmem.limit_in_bytes\",\n-                     \"Kernel Memory Limit is: \" JULONG_FORMAT, JULONG_FORMAT, kmem_limit);\n-  if (kmem_limit >= os::Linux::physical_memory()) {\n+  GET_CONTAINER_INFO(jlong, _memory->controller(), \"\/memory.kmem.limit_in_bytes\",\n+                     \"Kernel Memory Limit is: \" JLONG_FORMAT, JLONG_FORMAT, kmem_limit);\n+  assert(kmem_limit > 0, \"invariant\");\n+  if ((julong)kmem_limit >= os::Linux::physical_memory()) {\n@@ -211,1 +216,1 @@\n-  return (jlong)kmem_limit;\n+  return kmem_limit;\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":37,"deletions":32,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -161,0 +161,3 @@\n+  if (log_is_enabled(Trace, os, container)) {\n+    log_trace(os, container)(\"Memory and Swap Limit is: \" JLONG_FORMAT, swap_limit);\n+  }\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+            testMemorySwapLimitSanity();\n@@ -150,0 +151,25 @@\n+    \/*\n+     * This test verifies that no confusingly large positive numbers get printed on\n+     * systems with swapaccount=0 kernel option. On some systems -2 were converted\n+     * to unsigned long and printed that way. Ensure this oddity doesn't occur.\n+     *\/\n+    private static void testMemorySwapLimitSanity() throws Exception {\n+        String valueToSet = \"500m\";\n+        String expectedTraceValue = \"524288000\";\n+        Common.logNewTestCase(\"memory swap sanity: \" + valueToSet);\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"PrintContainerInfo\");\n+        Common.addWhiteBoxOpts(opts);\n+        opts.addDockerOpts(\"--memory=\" + valueToSet);\n+        opts.addDockerOpts(\"--memory-swap=\" + valueToSet);\n+\n+        String neg2InUnsignedLong = \"18446744073709551614\";\n+\n+        Common.run(opts)\n+            .shouldMatch(\"Memory Limit is:.*\" + expectedTraceValue)\n+            \/\/ Either for cgroup v1: a_1) same as memory limit, or b_1) -2 on systems with swapaccount=0\n+            \/\/ Either for cgroup v2: a_2) 0, or b_2) -2 on systems with swapaccount=0\n+            .shouldMatch(\"Memory and Swap Limit is:.*(\" + expectedTraceValue + \"|-2|0)\")\n+            .shouldNotMatch(\"Memory and Swap Limit is:.*\" + neg2InUnsignedLong);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryAwareness.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        \/\/ we only have Memory and Swap Limit is: <huge integer> in the output\n+        \/\/ we only have 'Memory and Swap Limit is: -2' in the output\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithCgroupV1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}