{"files":[{"patch":"@@ -33,2 +33,0 @@\n-import java.util.function.BiFunction;\n-import java.util.function.ToLongBiFunction;\n@@ -151,1 +149,2 @@\n-        if (out instanceof ChannelOutputStream cos && ch instanceof FileChannel fc) {\n+        if (out instanceof ChannelOutputStream cos\n+                && ch instanceof FileChannel fc) {\n@@ -173,2 +172,2 @@\n-        long bytesWritten = 0L;\n-        long srcPos = src.position();\n+        long initialPos = src.position();\n+        long pos = initialPos;\n@@ -176,2 +175,2 @@\n-            while (srcPos + bytesWritten < src.size()) {\n-                bytesWritten += src.transferTo(srcPos + bytesWritten, Long.MAX_VALUE, dst);\n+            while (pos < src.size()) {\n+                pos += src.transferTo(pos, Long.MAX_VALUE, dst);\n@@ -179,1 +178,0 @@\n-            return bytesWritten;\n@@ -181,1 +179,1 @@\n-            src.position(srcPos + bytesWritten);\n+            src.position(pos);\n@@ -183,0 +181,1 @@\n+        return pos - initialPos;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+import jdk.test.lib.RandomFactory;\n+\n@@ -53,0 +55,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main TransferTo\n@@ -59,0 +64,6 @@\n+    private static final int MIN_SIZE      = 10_000;\n+    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n+\n+    private static final int ITERATIONS = 10;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n@@ -91,0 +102,1 @@\n+\n@@ -93,0 +105,8 @@\n+\n+        \/\/ randomly chosen starting points within source and target\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n+            int posIn = RND.nextInt(inBytes.length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n+        }\n@@ -97,0 +117,5 @@\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n+    }\n+\n+    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n@@ -100,1 +125,3 @@\n-            in.transferTo(out);\n+            \/\/ skip bytes till starting point\n+            in.readNBytes(posIn);\n+            out.write(new byte[posOut]);\n@@ -102,1 +129,2 @@\n-            byte[] outBytes = recorder.get().get();\n+            long reported = in.transferTo(out);\n+            int count = inBytes.length - posIn;\n@@ -104,1 +132,6 @@\n-            if (!Arrays.equals(inBytes, outBytes))\n+            if (reported != count)\n+                throw new AssertionError(\n+                        format(\"reported %d bytes but should report %d\", reported, count));\n+\n+            byte[] outBytes = recorder.get().get();\n+            if (!Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count))\n@@ -106,1 +139,1 @@\n-                        format(\"bytes.length=%s, outBytes.length=%s\", inBytes.length, outBytes.length));\n+                        format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n@@ -111,3 +144,2 @@\n-        Random rnd = new Random();\n-        byte[] bytes = new byte[min + rnd.nextInt(maxRandomAdditive)];\n-        rnd.nextBytes(bytes);\n+        byte[] bytes = new byte[min + RND.nextInt(maxRandomAdditive)];\n+        RND.nextBytes(bytes);\n","filename":"test\/jdk\/sun\/nio\/ch\/ChannelInputStream\/TransferTo.java","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"}]}