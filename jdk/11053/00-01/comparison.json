{"files":[{"patch":"@@ -569,1 +569,1 @@\n-                               _preserved_marks_set->get(worker_id),\n+                               _preserved_marks_set.get(worker_id),\n@@ -690,2 +690,0 @@\n-                                                 G1RedirtyCardsQueueSet* rdcqs,\n-                                                 PreservedMarksSet* preserved_marks_set,\n@@ -697,2 +695,2 @@\n-    _rdcqs(rdcqs),\n-    _preserved_marks_set(preserved_marks_set),\n+    _rdcqs(G1BarrierSet::dirty_card_queue_set().allocator()),\n+    _preserved_marks_set(true \/* in_c_heap *\/),\n@@ -706,0 +704,1 @@\n+  _preserved_marks_set.init(n_workers);\n@@ -716,0 +715,2 @@\n+  _preserved_marks_set.assert_empty();\n+  _preserved_marks_set.reclaim();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"gc\/shared\/preservedMarks.hpp\"\n@@ -232,2 +233,2 @@\n-  G1RedirtyCardsQueueSet* _rdcqs;\n-  PreservedMarksSet* _preserved_marks_set;\n+  G1RedirtyCardsQueueSet _rdcqs;\n+  PreservedMarksSet _preserved_marks_set;\n@@ -244,2 +245,0 @@\n-                          G1RedirtyCardsQueueSet* rdcqs,\n-                          PreservedMarksSet* preserved_marks_set,\n@@ -252,2 +251,2 @@\n-  G1RedirtyCardsQueueSet* rdcqs() { return _rdcqs; }\n-  PreservedMarksSet* preserved_marks_set() { return _preserved_marks_set; }\n+  G1RedirtyCardsQueueSet* rdcqs() { return &_rdcqs; }\n+  PreservedMarksSet* preserved_marks_set() { return &_preserved_marks_set; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -504,1 +504,10 @@\n-void G1YoungCollector::pre_evacuate_collection_set(G1EvacInfo* evacuation_info, G1ParScanThreadStateSet* per_thread_states) {\n+void G1YoungCollector::pre_evacuate_collection_set(G1EvacInfo* evacuation_info) {\n+  \/\/ Flush early, so later phases don't need to account for per-thread stuff.\n+  \/\/ Flushes deferred card marks, so must precede concatenting logs.\n+  retire_tlabs();\n+\n+  \/\/ Flush early, so later phases don't need to account for per-thread stuff.\n+  concatenate_dirty_card_logs_and_stats();\n+\n+  calculate_collection_set(evacuation_info, policy()->max_pause_time_ms());\n+\n@@ -510,1 +519,1 @@\n-   _evac_failure_regions.pre_collection(_g1h->max_reserved_regions());\n+  _evac_failure_regions.pre_collection(_g1h->max_reserved_regions());\n@@ -536,1 +545,0 @@\n-  per_thread_states->preserved_marks_set()->assert_empty();\n@@ -1031,13 +1039,0 @@\n-class G1PreservedMarksSet : public PreservedMarksSet {\n-public:\n-\n-  G1PreservedMarksSet(uint num_workers) : PreservedMarksSet(true \/* in_c_heap *\/) {\n-    init(num_workers);\n-  }\n-\n-  virtual ~G1PreservedMarksSet() {\n-    assert_empty();\n-    reclaim();\n-  }\n-};\n-\n@@ -1091,3 +1086,1 @@\n-    \/\/ Flush early, so later phases don't need to account for per-thread stuff.\n-    \/\/ Flushes deferred card marks, so must precede concatenting logs.\n-    retire_tlabs();\n+    pre_evacuate_collection_set(jtm.evacuation_info());\n@@ -1095,7 +1088,0 @@\n-    \/\/ Flush early, so later phases don't need to account for per-thread stuff.\n-    concatenate_dirty_card_logs_and_stats();\n-\n-    calculate_collection_set(jtm.evacuation_info(), policy()->max_pause_time_ms());\n-\n-    G1RedirtyCardsQueueSet rdcqs(G1BarrierSet::dirty_card_queue_set().allocator());\n-    G1PreservedMarksSet preserved_marks_set(workers()->active_workers());\n@@ -1103,2 +1089,0 @@\n-                                              &rdcqs,\n-                                              &preserved_marks_set,\n@@ -1110,2 +1094,0 @@\n-    pre_evacuate_collection_set(jtm.evacuation_info(), &per_thread_states);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":12,"deletions":30,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  void pre_evacuate_collection_set(G1EvacInfo* evacuation_info, G1ParScanThreadStateSet* pss);\n+  void pre_evacuate_collection_set(G1EvacInfo* evacuation_info);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}