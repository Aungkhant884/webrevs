{"files":[{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"gc\/shared\/concurrentGCBreakpoints.hpp\"\n+#include \"gc\/shenandoah\/shenandoahBreakpoint.hpp\"\n+#include \"runtime\/mutexLocker.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+bool ShenandoahBreakpoint::_start_gc = false;\n+\n+void ShenandoahBreakpoint::start_gc() {\n+  MonitorLocker ml(ConcurrentGCBreakpoints::monitor());\n+  assert(ConcurrentGCBreakpoints::is_controlled(), \"Invalid state\");\n+  assert(!_start_gc, \"Invalid state\");\n+  _start_gc = true;\n+  ml.notify_all();\n+}\n+\n+void ShenandoahBreakpoint::at_before_gc() {\n+  MonitorLocker ml(ConcurrentGCBreakpoints::monitor(), Mutex::_no_safepoint_check_flag);\n+  while (ConcurrentGCBreakpoints::is_controlled() && !_start_gc) {\n+    ml.wait();\n+  }\n+  _start_gc = false;\n+  ConcurrentGCBreakpoints::notify_idle_to_active();\n+}\n+\n+void ShenandoahBreakpoint::at_after_gc() {\n+  ConcurrentGCBreakpoints::notify_active_to_idle();\n+}\n+\n+void ShenandoahBreakpoint::at_after_marking_started() {\n+  ConcurrentGCBreakpoints::at(\"AFTER MARKING STARTED\");\n+}\n+\n+void ShenandoahBreakpoint::at_before_marking_completed() {\n+  ConcurrentGCBreakpoints::at(\"BEFORE MARKING COMPLETED\");\n+}\n+\n+void ShenandoahBreakpoint::at_after_reference_processing_started() {\n+  ConcurrentGCBreakpoints::at(\"AFTER CONCURRENT REFERENCE PROCESSING STARTED\");\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBreakpoint.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_SHENANDOAH_SHENANDOAHBREAKPOINT_HPP\n+#define SHARE_GC_SHENANDOAH_SHENANDOAHBREAKPOINT_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+\n+class ShenandoahBreakpoint : public AllStatic {\n+private:\n+  static bool _start_gc;\n+\n+public:\n+  static void start_gc();\n+\n+  static void at_before_gc();\n+  static void at_after_gc();\n+  static void at_after_marking_started();\n+  static void at_before_marking_completed();\n+  static void at_after_reference_processing_started();\n+};\n+#endif \/\/ SHARE_GC_SHENANDOAH_SHENANDOAHBREAKPOINT_HPP\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBreakpoint.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shenandoah\/shenandoahBreakpoint.hpp\"\n@@ -46,0 +47,1 @@\n+#include \"memory\/allocation.hpp\"\n@@ -50,0 +52,23 @@\n+\/\/ Breakpoint support\n+class ShenandoahConcurrentGCScope : public StackObj {\n+public:\n+  ShenandoahConcurrentGCScope() {\n+    ShenandoahBreakpoint::at_before_gc();\n+  }\n+\n+  ~ShenandoahConcurrentGCScope() {\n+    ShenandoahBreakpoint::at_after_gc();\n+  }\n+};\n+\n+class ShenandoahConcurrentMarkScope : public StackObj {\n+public:\n+  ShenandoahConcurrentMarkScope() {\n+    ShenandoahBreakpoint::at_after_marking_started();\n+  }\n+\n+  ~ShenandoahConcurrentMarkScope() {\n+    ShenandoahBreakpoint::at_before_marking_completed();\n+  }\n+};\n+\n@@ -65,0 +90,4 @@\n+  if (cause == GCCause::_wb_breakpoint) {\n+    ShenandoahBreakpoint::start_gc();\n+  }\n+  ShenandoahConcurrentGCScope gc_scope;\n@@ -72,0 +101,2 @@\n+  {\n+    ShenandoahConcurrentMarkScope conc_mark_scope;\n@@ -73,2 +104,2 @@\n-  entry_mark_roots();\n-  if (check_cancellation_and_abort(ShenandoahDegenPoint::_degenerated_outside_cycle)) return false;\n+    entry_mark_roots();\n+    if (check_cancellation_and_abort(ShenandoahDegenPoint::_degenerated_outside_cycle)) return false;\n@@ -76,3 +107,4 @@\n-  \/\/ Continue concurrent mark\n-  entry_mark();\n-  if (check_cancellation_and_abort(ShenandoahDegenPoint::_degenerated_mark)) return false;\n+    \/\/ Continue concurrent mark\n+    entry_mark();\n+    if (check_cancellation_and_abort(ShenandoahDegenPoint::_degenerated_mark)) return false;\n+  }\n@@ -626,0 +658,1 @@\n+  ShenandoahBreakpoint::at_after_reference_processing_started();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":38,"deletions":5,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\n@@ -475,0 +474,4 @@\n+bool ShenandoahControlThread::is_async_gc(GCCause::Cause cause) const {\n+  return cause == GCCause::_wb_breakpoint;\n+}\n+\n@@ -481,0 +484,1 @@\n+         cause == GCCause::_wb_breakpoint ||\n@@ -509,1 +513,3 @@\n-    ml.wait();\n+    if (!is_async_gc(cause)) {\n+      ml.wait();\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -117,0 +117,3 @@\n+  \/\/ Breakpoint support\n+  bool is_async_gc(GCCause::Cause cause) const;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -165,0 +165,5 @@\n+\/\/ WhiteBox testing support.\n+  bool supports_concurrent_gc_breakpoints() const {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,2 @@\n-               GC.Z.isSelected();\n+               GC.Z.isSelected() ||\n+               GC.Shenandoah.isSelected();\n@@ -126,2 +127,1 @@\n-               GC.Epsilon.isSelected() ||\n-               GC.Shenandoah.isSelected();\n+               GC.Epsilon.isSelected();\n","filename":"test\/hotspot\/jtreg\/gc\/TestConcurrentGCBreakpoints.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires vm.gc.Z\n+ * @requires vm.gc.Z | vm.gc.Shenandoah\n","filename":"test\/hotspot\/jtreg\/gc\/TestReferenceClearDuringReferenceProcessing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}