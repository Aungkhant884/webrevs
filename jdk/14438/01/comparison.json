{"files":[{"patch":"@@ -2780,1 +2780,1 @@\n-    log_info(class, init)(\"Exception thrown while saving initialization exception %s\",\n+    log_info(class, init)(\"Exception %s thrown while saving initialization exception\",\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,0 +117,1 @@\n+OopHandle Universe:: _class_init_stack_overflow_error;\n@@ -613,0 +614,3 @@\n+\n+oop Universe::class_init_out_of_memory_error()         { return out_of_memory_errors()->obj_at(_oom_java_heap); }\n+oop Universe::class_init_stack_overflow_error()        { return _class_init_stack_overflow_error.resolve(); }\n@@ -1031,0 +1035,5 @@\n+  \/\/ Setup preallocated StackOverflowError for use with class initialization failure\n+  k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_StackOverflowError(), true, CHECK_false);\n+  instance = InstanceKlass::cast(k)->allocate_instance(CHECK_false);\n+  Universe::_class_init_stack_overflow_error = OopHandle(Universe::vm_global(), instance);\n+\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+  static OopHandle    _class_init_stack_overflow_error;\n@@ -316,0 +317,5 @@\n+  \/\/ Saved StackOverflowError and OutOfMemoryError for use when\n+  \/\/ class initialization can't create ExceptionInInitializerError.\n+  static oop class_init_stack_overflow_error();\n+  static oop class_init_out_of_memory_error();\n+\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -986,3 +986,0 @@\n-  \/\/ If the initialization error is OOM, this might not work, but if GC kicks in\n-  \/\/ this would be still be helpful.\n-  JavaThread* THREAD = current;\n@@ -990,1 +987,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -992,2 +989,14 @@\n-    log_trace(class, init)(\"Initialization error is null for class %s\", external_name());\n-    return;\n+    log_trace(class, init)(\"Unable to create the desired initialization error for class %s\", external_name());\n+\n+    \/\/ We failed to create the new exception, most likely due to either out-of-memory or\n+    \/\/ a stackoverflow error. If the original exception was either of those then we save\n+    \/\/ the shared, pre-allocated, stackless, instance of that exception.\n+    if (exception->klass() == vmClasses::StackOverflowError_klass()) {\n+      log_debug(class, init)(\"Using shared StackOverflowError as initialization error for class %s\", external_name());\n+      init_error = Handle(current, Universe::class_init_stack_overflow_error());\n+    } else if (exception->klass() == vmClasses::OutOfMemoryError_klass()) {\n+      log_debug(class, init)(\"Using shared OutOfMemoryError as initialization error for class %s\", external_name());\n+      init_error = Handle(current, Universe::class_init_out_of_memory_error());\n+    } else {\n+      return;\n+    }\n@@ -996,1 +1005,1 @@\n-  MutexLocker ml(THREAD, ClassInitError_lock);\n+  MutexLocker ml(current, ClassInitError_lock);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8309034\n+ * @summary Test that when saving a class initialization failure caused by\n+ *          an OutOfMemoryError, that we record the OOME as the underlying\n+ *          cause, even if we can't create the ExceptionInInitializerError\n+ *\n+ * @comment Enable logging to ease failure diagnosis\n+ * @run main\/othervm -Xms64m -Xmx64m TestOutOfMemoryDuringInit\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.LinkedList;\n+\n+public class TestOutOfMemoryDuringInit {\n+\n+    static LinkedList<Object> theList = new LinkedList<>();\n+\n+    static class Nested {\n+        static void forceInit() { }\n+        static {\n+            while (theList != null) {\n+                theList.add(new Object());\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String expected = \"java.lang.NoClassDefFoundError: Could not initialize class TestOutOfMemoryDuringInit$Nested\";\n+        \/\/ This cause will match either the shared OOME or the EIIE we get\n+        \/\/ with some GC's.\n+        String cause = \"java.lang.OutOfMemoryError\";\n+\n+        try {\n+            Nested.forceInit();\n+        } catch (OutOfMemoryError oome) {\n+            theList = null; \/\/ free memory for verification process\n+            System.out.println(\"Trying to access class Nested ...\");\n+            try {\n+                Nested.forceInit();\n+                throw new RuntimeException(\"NoClassDefFoundError was not thrown\");\n+            } catch (NoClassDefFoundError ncdfe) {\n+                verify_stack(ncdfe, expected, cause);\n+            }\n+        }\n+    }\n+\n+    private static void verify_stack(Throwable e, String expected, String cause) throws Exception {\n+        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n+        try (PrintStream printStream = new PrintStream(byteOS)) {\n+            e.printStackTrace(printStream);\n+        }\n+        String stackTrace = byteOS.toString(\"ASCII\");\n+        System.out.println(stackTrace);\n+        if (!stackTrace.contains(expected) ||\n+            (cause != null && !stackTrace.contains(cause))) {\n+            throw new RuntimeException(expected + \" and\/or \" + cause + \" missing from stacktrace\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestOutOfMemoryDuringInit.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8309034\n+ * @summary Test that when saving a class initialization failure caused by\n+ *          a StackOverflowError, that we record the SOE as the underlying\n+ *          cause, even if we can't create the ExceptionInInitializerError\n+ * @requires os.simpleArch == \"x64\"\n+ * @comment The reproducer only fails in the desired way on x64.\n+ * @requires vm.flagless\n+ * @comment This test could easily be perturbed so don't allow flag settings.\n+ *\n+ * @run main\/othervm TestStackOverflowDuringInit\n+ *\/\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+public class TestStackOverflowDuringInit {\n+\n+    \/\/ Test case is fuzzed\/obfuscated\n+\n+    public static void main(String[] args) throws Exception {\n+        String expected = \"java.lang.NoClassDefFoundError: Could not initialize class java.lang.Long$LongCache\";\n+        String cause = \"Caused by: java.lang.StackOverflowError\";\n+\n+        TestStackOverflowDuringInit i = new TestStackOverflowDuringInit();\n+        try {\n+            i.j();\n+        } catch (Throwable ex) {\n+            \/\/            ex.printStackTrace();\n+            verify_stack(ex, expected, cause);\n+        }\n+    }\n+\n+    void j() { ((e) new a()).g = 0; }\n+\n+    private static void verify_stack(Throwable e, String expected, String cause) throws Exception {\n+        ByteArrayOutputStream byteOS = new ByteArrayOutputStream();\n+        try (PrintStream printStream = new PrintStream(byteOS)) {\n+            e.printStackTrace(printStream);\n+        }\n+        String stackTrace = byteOS.toString(\"ASCII\");\n+        System.out.println(stackTrace);\n+        if (!stackTrace.contains(expected) ||\n+            (cause != null && !stackTrace.contains(cause))) {\n+            throw new RuntimeException(expected + \" and\/or \" + cause + \" missing from stacktrace\");\n+        }\n+    }\n+}\n+\n+class a {\n+    Boolean b;\n+    {\n+        try {\n+            Long.valueOf(509505376256L);\n+            Boolean c =\n+                true ? new d().b\n+                : 5 != ((e)java.util.HashSet.newHashSet(301758).clone()).f;\n+        } finally {\n+            Long.valueOf(0);\n+        }\n+    }\n+}\n+class e extends a {\n+    double g;\n+    int f;\n+}\n+class d extends a {}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassInitErrors\/TestStackOverflowDuringInit.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}