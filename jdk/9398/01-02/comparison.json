{"files":[{"patch":"@@ -81,0 +81,63 @@\n+\/\/ Instruction sequences whose target may need to be retrieved or\n+\/\/ patched can be distinguished by their leading instruction,\n+\/\/ sorting them into three main instruction groups and\n+\/\/ related subgroups.\n+\/\/\n+\/\/ 1) Branch, Exception and System (insn count = 1)\n+\/\/    1a) Unconditional branch (immediate):\n+\/\/      b\/bl imm19\n+\/\/    1b) Compare & branch (immediate):\n+\/\/      cbz\/cbnz Rt imm19\n+\/\/    1c) Test & branch (immediate):\n+\/\/      tbz\/tbnz Rt imm14\n+\/\/    1d) Conditional branch (immediate):\n+\/\/      b.cond imm19\n+\/\/\n+\/\/ 2) Loads and Stores (insn count = 1)\n+\/\/    2a) Load register literal:\n+\/\/      ldr Rt imm19\n+\/\/\n+\/\/ 3) Data Processing Immediate (insn count = 2 or 3)\n+\/\/    3a) PC-rel. addressing\n+\/\/      adr\/adrp Rx imm21; ldr\/str Ry Rx  #imm12\n+\/\/      adr\/adrp Rx imm21; add Ry Rx  #imm12\n+\/\/      adr\/adrp Rx imm21; movk Rx #imm16<<32; ldr\/str Ry, [Rx, #offset_in_page]\n+\/\/      adr\/adrp Rx imm21; movk Rx #imm16<<32; add Ry, Rx, #offset_in_page\n+\/\/      adr\/adrp Rx imm21; movk Rx #imm16<<32\n+\/\/      adr\/adrp Rx imm21\n+\/\/    3b) Move wide (immediate)\n+\/\/      movz Rx #imm16; movk Rx #imm16 << 16; movk Rx #imm16 << 32;\n+\/\/\n+\/\/ A switch on a subset of the instruction's bits provides an efficient\n+\/\/ dispatch to these subcases.\n+\/\/\n+\/\/ insn[28:26] -> main group ('x' == don't care)\n+\/\/   00x -> UNALLOCATED\n+\/\/   100 -> Data Processing Immediate\n+\/\/   101 -> Branch, Exception and System\n+\/\/   x1x -> Loads and Stores\n+\/\/\n+\/\/ insn[30:25] -> subgroup ('_' == group, 'x' == don't care).\n+\/\/ n.b. in some cases extra bits need to be checked to verify the\n+\/\/ instruction is as expected\n+\/\/\n+\/\/ 1) ... xx101x Branch, Exception and System\n+\/\/   1a)  00___x Unconditional branch (immediate)\n+\/\/   1b)  01___0 Compare & branch (immediate)\n+\/\/   1c)  01___1 Test & branch (immediate)\n+\/\/   1d)  10___0 Conditional branch (immediate)\n+\/\/        other  Should not happen\n+\/\/\n+\/\/ 2) ... xxx1x0 Loads and Stores\n+\/\/   2a)  xx1__00 Load\/Store register (insn[28] == 1 && insn[24] == 0)\n+\/\/   2aa) x01__00 Load register literal (i.e. requires insn[29] == 0)\n+\/\/                strictly should be 64 bit non-FP\/SIMD i.e.\n+\/\/       0101_000 (i.e. requires insn[31:24] == 01011000)\n+\/\/\n+\/\/ 3) ... xx100x Data Processing Immediate\n+\/\/   3a)  xx___00 PC-rel. addressing (n.b. requires insn[24] == 0)\n+\/\/   3b)  xx___101 Move wide (immediate) (n.b. requires insn[24:23] == 01)\n+\/\/                 strictly should be 64 bit movz #imm16<<0\n+\/\/       110___10100 (i.e. requires insn[31:21] == 11010010100)\n+\/\/\n+\n@@ -98,2 +161,2 @@\n-    case 0b101010: \/\/ Compare & branch (immediate)\n-    case 0b011010: \/\/ Conditional branch (immediate)\n+    case 0b101010: \/\/ Conditional branch (immediate)\n+    case 0b011010: \/\/ Compare & branch (immediate)\n@@ -310,2 +373,2 @@\n-    case 0b101010: \/\/ Compare & branch (immediate)\n-    case 0b011010: \/\/ Conditional branch (immediate)\n+    case 0b101010: \/\/ Conditional branch (immediate)\n+    case 0b011010: \/\/ Compare & branch (immediate)\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":67,"deletions":4,"binary":false,"changes":71,"status":"modified"}]}