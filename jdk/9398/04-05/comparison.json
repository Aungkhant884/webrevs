{"files":[{"patch":"@@ -80,1 +80,2 @@\n-\n+\/\/ Target-dependent relocation processing\n+\/\/\n@@ -82,3 +83,2 @@\n-\/\/ patched can be distinguished by their leading instruction,\n-\/\/ sorting them into three main instruction groups and\n-\/\/ related subgroups.\n+\/\/ patched are distinguished by their leading instruction, sorting\n+\/\/ them into three main instruction groups and related subgroups.\n@@ -111,2 +111,2 @@\n-\/\/ A switch on a subset of the instruction's bits provides an efficient\n-\/\/ dispatch to these subcases.\n+\/\/ A switch on a subset of the instruction's bits provides an\n+\/\/ efficient dispatch to these subcases.\n@@ -151,0 +151,2 @@\n+  const uint32_t _insn;\n+\n@@ -152,0 +154,4 @@\n+\n+  RelocActions(address insn_addr) : _insn(*(uint32_t*)insn_addr) {}\n+  RelocActions(address insn_addr, uint32_t insn) : _insn(insn) {}\n+\n@@ -164,1 +170,1 @@\n-  int act(address insn_addr, address &target) {\n+  int ALWAYSINLINE run(address insn_addr, address &target) {\n@@ -166,1 +172,0 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n@@ -168,1 +173,1 @@\n-    uint32_t dispatch = Instruction_aarch64::extract(insn, 30, 25);\n+    uint32_t dispatch = Instruction_aarch64::extract(_insn, 30, 25);\n@@ -172,1 +177,1 @@\n-        unconditionalBranch(insn_addr, target);\n+        instructions = unconditionalBranch(insn_addr, target);\n@@ -177,1 +182,1 @@\n-          conditionalBranch(insn_addr, target);\n+        instructions = conditionalBranch(insn_addr, target);\n@@ -181,1 +186,1 @@\n-        testAndBranch(insn_addr, target);\n+        instructions = testAndBranch(insn_addr, target);\n@@ -193,1 +198,1 @@\n-        if ((Instruction_aarch64::extract(insn, 29, 24) & 0b111011) == 0b011000) {\n+        if ((Instruction_aarch64::extract(_insn, 29, 24) & 0b111011) == 0b011000) {\n@@ -195,1 +200,1 @@\n-          loadStore(insn_addr, target);\n+          instructions = loadStore(insn_addr, target);\n@@ -208,2 +213,2 @@\n-        assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n-        int shift = Instruction_aarch64::extract(insn, 31, 31);\n+        assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n+        int shift = Instruction_aarch64::extract(_insn, 31, 31);\n@@ -213,1 +218,1 @@\n-              Instruction_aarch64::extract(insn, 4, 0) ==\n+              Instruction_aarch64::extract(_insn, 4, 0) ==\n@@ -215,2 +220,1 @@\n-            adrp(insn_addr, target, adrpMem());\n-            instructions = 2;\n+            instructions = adrp(insn_addr, target, adrpMem());\n@@ -218,1 +222,1 @@\n-                     Instruction_aarch64::extract(insn, 4, 0) ==\n+                     Instruction_aarch64::extract(_insn, 4, 0) ==\n@@ -220,2 +224,1 @@\n-            adrp(insn_addr, target, adrpAdd());\n-            instructions = 2;\n+            instructions = adrp(insn_addr, target, adrpAdd());\n@@ -223,1 +226,1 @@\n-                     Instruction_aarch64::extract(insn, 4, 0) ==\n+                     Instruction_aarch64::extract(_insn, 4, 0) ==\n@@ -225,2 +228,1 @@\n-            adrp(insn_addr, target, adrpMovk());\n-            instructions = 2;\n+            instructions = adrp(insn_addr, target, adrpMovk());\n@@ -231,1 +233,1 @@\n-          adr(insn_addr, target);\n+          instructions = adr(insn_addr, target);\n@@ -239,2 +241,1 @@\n-        immediate(insn_addr, target);\n-        instructions = 3;\n+        instructions = immediate(insn_addr, target);\n@@ -259,0 +260,2 @@\n+  Patcher(address insn_addr) : RelocActions(insn_addr) {}\n+\n@@ -281,2 +284,1 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n+    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n@@ -295,2 +297,1 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n+    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n@@ -306,1 +307,1 @@\n-      instructions = ((*this).*inner)(insn_addr, target);\n+      instructions = (this->*inner)(insn_addr, target);\n@@ -338,2 +339,1 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    assert(Instruction_aarch64::extract(insn, 31, 21) == 0b11010010100, \"must be\");\n+    assert(Instruction_aarch64::extract(_insn, 31, 21) == 0b11010010100, \"must be\");\n@@ -383,1 +383,1 @@\n-class Reader : public RelocActions {\n+class Decoder : public RelocActions {\n@@ -389,0 +389,3 @@\n+\n+  Decoder(address insn_addr, uint32_t insn) : RelocActions(insn_addr, insn) {}\n+\n@@ -390,3 +393,2 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    intptr_t offset = Instruction_aarch64::sextract(insn, 23, 5);\n-    target = address(((uint64_t)insn_addr + (offset << 2)));\n+    intptr_t offset = Instruction_aarch64::sextract(_insn, 23, 5);\n+    target = insn_addr + (offset << 2);\n@@ -396,3 +398,2 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    intptr_t offset = Instruction_aarch64::sextract(insn, 25, 0);\n-    target = address(((uint64_t)insn_addr + (offset << 2)));\n+    intptr_t offset = Instruction_aarch64::sextract(_insn, 25, 0);\n+    target = insn_addr + (offset << 2);\n@@ -402,2 +403,1 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    intptr_t offset = Instruction_aarch64::sextract(insn, 23, 5);\n+    intptr_t offset = Instruction_aarch64::sextract(_insn, 23, 5);\n@@ -408,2 +408,1 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    intptr_t offset = Instruction_aarch64::sextract(insn, 18, 5);\n+    intptr_t offset = Instruction_aarch64::sextract(_insn, 18, 5);\n@@ -415,3 +414,2 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    intptr_t offset = Instruction_aarch64::extract(insn, 30, 29);\n-    offset |= Instruction_aarch64::sextract(insn, 23, 5) << 2;\n+    intptr_t offset = Instruction_aarch64::extract(_insn, 30, 29);\n+    offset |= Instruction_aarch64::sextract(_insn, 23, 5) << 2;\n@@ -422,5 +420,3 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n-    assert(Instruction_aarch64::extract(insn, 28, 24) == 0b10000, \"must be\");\n-    intptr_t offset = Instruction_aarch64::extract(insn, 30, 29);\n-    offset |= Instruction_aarch64::sextract(insn, 23, 5) << 2;\n-    \/\/ if (inner) {\n+    assert(Instruction_aarch64::extract(_insn, 28, 24) == 0b10000, \"must be\");\n+    intptr_t offset = Instruction_aarch64::extract(_insn, 30, 29);\n+    offset |= Instruction_aarch64::sextract(_insn, 23, 5) << 2;\n@@ -433,1 +429,1 @@\n-    ((*this).*inner)(insn_addr, target);\n+    (this->*inner)(insn_addr, target);\n@@ -461,1 +457,0 @@\n-    uint32_t insn = *(uint32_t*)insn_addr;\n@@ -465,1 +460,1 @@\n-    if (offset_for(insn, insn3, byte_offset)) {\n+    if (offset_for(_insn, insn3, byte_offset)) {\n@@ -467,0 +462,3 @@\n+      return 3;\n+    } else {\n+      return 2;\n@@ -468,1 +466,0 @@\n-    return 2;\n@@ -472,2 +469,1 @@\n-    uint32_t insn = insns[0];\n-    assert(Instruction_aarch64::extract(insn, 31, 21) == 0b11010010100, \"must be\");\n+    assert(Instruction_aarch64::extract(_insn, 31, 21) == 0b11010010100, \"must be\");\n@@ -477,1 +473,1 @@\n-    target = address(uint64_t(Instruction_aarch64::extract(insns[0], 20, 5))\n+    target = address(uint64_t(Instruction_aarch64::extract(_insn, 20, 5))\n@@ -480,1 +476,0 @@\n-\n@@ -483,1 +478,0 @@\n-\n@@ -490,2 +484,0 @@\n-static Reader reader;\n-\n@@ -493,0 +485,1 @@\n+  Decoder decoder(insn_addr, insn);\n@@ -494,1 +487,1 @@\n-  reader.act(insn_addr, target);\n+  decoder.run(insn_addr, target);\n@@ -498,2 +491,0 @@\n-static Patcher patcher;\n-\n@@ -503,1 +494,2 @@\n-  return patcher.act(insn_addr, target);\n+  Patcher patcher(insn_addr);\n+  return patcher.run(insn_addr, target);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":61,"deletions":69,"binary":false,"changes":130,"status":"modified"}]}