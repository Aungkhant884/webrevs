{"files":[{"patch":"@@ -83,0 +83,1 @@\n+import jdk.internal.classfile.impl.AttributeHelpers;\n@@ -323,5 +324,2 @@\n-                        buf.writeU2(info.startPc());\n-                        buf.writeU2(info.length());\n-                        buf.writeIndex(info.name());\n-                        buf.writeIndex(info.type());\n-                        buf.writeU2(info.slot());\n+                        AttributeHelpers.writeLocalVariableInfo(buf, info.startPc(),\n+                                info.length(), info.name(), info.type(), info.slot());\n@@ -345,5 +343,2 @@\n-                        buf.writeU2(info.startPc());\n-                        buf.writeU2(info.length());\n-                        buf.writeIndex(info.name());\n-                        buf.writeIndex(info.signature());\n-                        buf.writeU2(info.slot());\n+                        AttributeHelpers.writeLocalVariableInfo(buf, info.startPc(),\n+                                info.length(), info.name(), info.signature(), info.slot());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -82,22 +81,0 @@\n-\n-    public boolean writeTo(BufWriter b) {\n-        var lc = ((BufWriterImpl)b).labelContext();\n-        int startBci = lc.labelToBci(startScope());\n-        int endBci = lc.labelToBci(endScope());\n-        if (startBci == -1 || endBci == -1) {\n-            return false;\n-        }\n-        int length = endBci - startBci;\n-        b.writeU2(startBci);\n-        b.writeU2(length);\n-        if (b.canWriteDirect(code.constantPool())) {\n-            b.writeU2(nameIndex());\n-            b.writeU2(secondaryIndex());\n-        }\n-        else {\n-            b.writeIndex(name());\n-            b.writeIndex(secondaryEntry());\n-        }\n-        b.writeU2(slot());\n-        return true;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -191,16 +190,0 @@\n-\n-        public boolean writeTo(BufWriter b) {\n-            var lc = ((BufWriterImpl)b).labelContext();\n-            int startBci = lc.labelToBci(startScope());\n-            int endBci = lc.labelToBci(endScope());\n-            if (startBci == -1 || endBci == -1) {\n-                return false;\n-            }\n-            int length = endBci - startBci;\n-            b.writeU2(startBci);\n-            b.writeU2(length);\n-            b.writeIndex(name);\n-            b.writeIndex(descriptor);\n-            b.writeU2(slot());\n-            return true;\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\r\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * This code is free software; you can redistribute it and\/or modify it\r\n+ * under the terms of the GNU General Public License version 2 only, as\r\n+ * published by the Free Software Foundation.  Oracle designates this\r\n+ * particular file as subject to the \"Classpath\" exception as provided\r\n+ * by Oracle in the LICENSE file that accompanied this code.\r\n+ *\r\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n+ * version 2 for more details (a copy is included in the LICENSE file that\r\n+ * accompanied this code).\r\n+ *\r\n+ * You should have received a copy of the GNU General Public License version\r\n+ * 2 along with this work; if not, write to the Free Software Foundation,\r\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n+ *\r\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n+ * or visit www.oracle.com if you need additional information or have any\r\n+ * questions.\r\n+ *\/\r\n+package jdk.internal.classfile.impl;\r\n+\r\n+import jdk.internal.classfile.BufWriter;\r\n+import jdk.internal.classfile.Label;\r\n+import jdk.internal.classfile.constantpool.Utf8Entry;\r\n+\r\n+\/**\r\n+ * Utilities for writing logic shared for attributes that are streamable.\r\n+ *\/\r\n+public final class AttributeHelpers {\r\n+    private AttributeHelpers() {\r\n+    }\r\n+\r\n+    public static boolean writeLocalVariable(LabelContext lc, BufWriter b, Label start, Label end,\r\n+                                           Utf8Entry name, Utf8Entry type, int slot) {\r\n+        int startBci = lc.labelToBci(start);\r\n+        int endBci = lc.labelToBci(end);\r\n+        if (startBci == -1 || endBci == -1) {\r\n+            return false;\r\n+        }\r\n+        writeLocalVariableInfo(b, startBci, endBci - startBci, name, type, slot);\r\n+        return true;\r\n+    }\r\n+\r\n+    public static void writeLocalVariableInfo(BufWriter b, int startPc, int length,\r\n+                                          Utf8Entry name, Utf8Entry type, int slot) {\r\n+        b.writeU2(startPc);\r\n+        b.writeU2(length);\r\n+        b.writeIndex(name);\r\n+        b.writeIndex(type);\r\n+        b.writeU2(slot);\r\n+    }\r\n+}\r\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHelpers.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -44,1 +43,0 @@\n-import jdk.internal.classfile.Instruction;\n@@ -51,1 +49,0 @@\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n@@ -267,1 +264,2 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!AttributeHelpers.writeLocalVariable(DirectCodeBuilder.this, b, l.startScope(),\n+                                    l.endScope(), l.name(), l.type(), l.slot())) {\n@@ -290,1 +288,2 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!AttributeHelpers.writeLocalVariable(DirectCodeBuilder.this, b, l.startScope(),\n+                                    l.endScope(), l.name(), l.signature(), l.slot())) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -83,2 +82,0 @@\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -80,2 +79,0 @@\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -99,1 +100,9 @@\n-                        lv.writeTo(b);\n+                        var lc = ((BufWriterImpl) b).labelContext();\n+                        int startBci = lc.labelToBci(lv.startScope());\n+                        int endBci = lc.labelToBci(lv.endScope());\n+                        int length = endBci - startBci;\n+                        b.writeU2(startBci);\n+                        b.writeU2(length);\n+                        b.writeIndex(lv.name());\n+                        b.writeIndex(lv.type());\n+                        b.writeU2(lv.slot());\n@@ -106,1 +115,9 @@\n-                        lvt.writeTo(b);\n+                        var lc = ((BufWriterImpl) b).labelContext();\n+                        int startBci = lc.labelToBci(lvt.startScope());\n+                        int endBci = lc.labelToBci(lvt.endScope());\n+                        int length = endBci - startBci;\n+                        b.writeU2(startBci);\n+                        b.writeU2(length);\n+                        b.writeIndex(lvt.name());\n+                        b.writeIndex(lvt.signature());\n+                        b.writeU2(lvt.slot());\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}