{"files":[{"patch":"@@ -1,57 +1,57 @@\n-\/*\r\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n- *\r\n- * This code is free software; you can redistribute it and\/or modify it\r\n- * under the terms of the GNU General Public License version 2 only, as\r\n- * published by the Free Software Foundation.  Oracle designates this\r\n- * particular file as subject to the \"Classpath\" exception as provided\r\n- * by Oracle in the LICENSE file that accompanied this code.\r\n- *\r\n- * This code is distributed in the hope that it will be useful, but WITHOUT\r\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\r\n- * version 2 for more details (a copy is included in the LICENSE file that\r\n- * accompanied this code).\r\n- *\r\n- * You should have received a copy of the GNU General Public License version\r\n- * 2 along with this work; if not, write to the Free Software Foundation,\r\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\r\n- *\r\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\r\n- * or visit www.oracle.com if you need additional information or have any\r\n- * questions.\r\n- *\/\r\n-package jdk.internal.classfile.impl;\r\n-\r\n-import jdk.internal.classfile.BufWriter;\r\n-import jdk.internal.classfile.Label;\r\n-import jdk.internal.classfile.constantpool.Utf8Entry;\r\n-\r\n-\/**\r\n- * Utilities for writing logic shared for attributes that are streamable.\r\n- *\/\r\n-public final class AttributeHelpers {\r\n-    private AttributeHelpers() {\r\n-    }\r\n-\r\n-    public static boolean writeLocalVariable(LabelContext lc, BufWriter b, Label start, Label end,\r\n-                                           Utf8Entry name, Utf8Entry type, int slot) {\r\n-        int startBci = lc.labelToBci(start);\r\n-        int endBci = lc.labelToBci(end);\r\n-        if (startBci == -1 || endBci == -1) {\r\n-            return false;\r\n-        }\r\n-        writeLocalVariableInfo(b, startBci, endBci - startBci, name, type, slot);\r\n-        return true;\r\n-    }\r\n-\r\n-    public static void writeLocalVariableInfo(BufWriter b, int startPc, int length,\r\n-                                          Utf8Entry name, Utf8Entry type, int slot) {\r\n-        b.writeU2(startPc);\r\n-        b.writeU2(length);\r\n-        b.writeIndex(name);\r\n-        b.writeIndex(type);\r\n-        b.writeU2(slot);\r\n-    }\r\n-}\r\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+\/**\n+ * Utilities for writing logic shared for attributes that are streamable.\n+ *\/\n+public final class AttributeHelpers {\n+    private AttributeHelpers() {\n+    }\n+\n+    public static boolean writeLocalVariable(LabelContext lc, BufWriter b, Label start, Label end,\n+                                           Utf8Entry name, Utf8Entry type, int slot) {\n+        int startBci = lc.labelToBci(start);\n+        int endBci = lc.labelToBci(end);\n+        if (startBci == -1 || endBci == -1) {\n+            return false;\n+        }\n+        writeLocalVariableInfo(b, startBci, endBci - startBci, name, type, slot);\n+        return true;\n+    }\n+\n+    public static void writeLocalVariableInfo(BufWriter b, int startPc, int length,\n+                                          Utf8Entry name, Utf8Entry type, int slot) {\n+        b.writeU2(startPc);\n+        b.writeU2(length);\n+        b.writeIndex(name);\n+        b.writeIndex(type);\n+        b.writeU2(slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHelpers.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.classfile.impl.AttributeHelpers;\n@@ -41,1 +42,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -63,1 +63,0 @@\n-import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -100,9 +99,9 @@\n-                        var lc = ((BufWriterImpl) b).labelContext();\n-                        int startBci = lc.labelToBci(lv.startScope());\n-                        int endBci = lc.labelToBci(lv.endScope());\n-                        int length = endBci - startBci;\n-                        b.writeU2(startBci);\n-                        b.writeU2(length);\n-                        b.writeIndex(lv.name());\n-                        b.writeIndex(lv.type());\n-                        b.writeU2(lv.slot());\n+                        AttributeHelpers.writeLocalVariable(\n+                                ((BufWriterImpl) b).labelContext(),\n+                                b,\n+                                lv.startScope(),\n+                                lv.endScope(),\n+                                lv.name(),\n+                                lv.type(),\n+                                lv.slot()\n+                        );\n@@ -115,9 +114,9 @@\n-                        var lc = ((BufWriterImpl) b).labelContext();\n-                        int startBci = lc.labelToBci(lvt.startScope());\n-                        int endBci = lc.labelToBci(lvt.endScope());\n-                        int length = endBci - startBci;\n-                        b.writeU2(startBci);\n-                        b.writeU2(length);\n-                        b.writeIndex(lvt.name());\n-                        b.writeIndex(lvt.signature());\n-                        b.writeU2(lvt.slot());\n+                        AttributeHelpers.writeLocalVariable(\n+                                ((BufWriterImpl) b).labelContext(),\n+                                b,\n+                                lvt.startScope(),\n+                                lvt.endScope(),\n+                                lvt.name(),\n+                                lvt.signature(),\n+                                lvt.slot()\n+                        );\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"}]}