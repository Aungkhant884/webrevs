{"files":[{"patch":"@@ -83,0 +83,1 @@\n+import jdk.internal.classfile.impl.AttributeHelpers;\n@@ -450,5 +451,2 @@\n-                        buf.writeU2(info.startPc());\n-                        buf.writeU2(info.length());\n-                        buf.writeIndex(info.name());\n-                        buf.writeIndex(info.type());\n-                        buf.writeU2(info.slot());\n+                        AttributeHelpers.writeLocalVariableInfo(buf, info.startPc(),\n+                                info.length(), info.name(), info.type(), info.slot());\n@@ -477,5 +475,2 @@\n-                        buf.writeU2(info.startPc());\n-                        buf.writeU2(info.length());\n-                        buf.writeIndex(info.name());\n-                        buf.writeIndex(info.signature());\n-                        buf.writeU2(info.slot());\n+                        AttributeHelpers.writeLocalVariableInfo(buf, info.startPc(),\n+                                info.length(), info.name(), info.signature(), info.slot());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Attributes.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -82,22 +81,0 @@\n-\n-    public boolean writeTo(BufWriter b) {\n-        var lc = ((BufWriterImpl)b).labelContext();\n-        int startBci = lc.labelToBci(startScope());\n-        int endBci = lc.labelToBci(endScope());\n-        if (startBci == -1 || endBci == -1) {\n-            return false;\n-        }\n-        int length = endBci - startBci;\n-        b.writeU2(startBci);\n-        b.writeU2(length);\n-        if (b.canWriteDirect(code.constantPool())) {\n-            b.writeU2(nameIndex());\n-            b.writeU2(secondaryIndex());\n-        }\n-        else {\n-            b.writeIndex(name());\n-            b.writeIndex(secondaryEntry());\n-        }\n-        b.writeU2(slot());\n-        return true;\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractBoundLocalVariable.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -191,16 +190,0 @@\n-\n-        public boolean writeTo(BufWriter b) {\n-            var lc = ((BufWriterImpl)b).labelContext();\n-            int startBci = lc.labelToBci(startScope());\n-            int endBci = lc.labelToBci(endScope());\n-            if (startBci == -1 || endBci == -1) {\n-                return false;\n-            }\n-            int length = endBci - startBci;\n-            b.writeU2(startBci);\n-            b.writeU2(length);\n-            b.writeIndex(name);\n-            b.writeIndex(descriptor);\n-            b.writeU2(slot());\n-            return true;\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.impl;\n+\n+import jdk.internal.classfile.BufWriter;\n+import jdk.internal.classfile.Label;\n+import jdk.internal.classfile.constantpool.Utf8Entry;\n+\n+\/**\n+ * Utilities for writing logic shared for attributes that are streamable.\n+ *\/\n+public final class AttributeHelpers {\n+    private AttributeHelpers() {\n+    }\n+\n+    public static boolean writeLocalVariable(LabelContext lc, BufWriter b, Label start, Label end,\n+                                           Utf8Entry name, Utf8Entry type, int slot) {\n+        int startBci = lc.labelToBci(start);\n+        int endBci = lc.labelToBci(end);\n+        if (startBci == -1 || endBci == -1) {\n+            return false;\n+        }\n+        writeLocalVariableInfo(b, startBci, endBci - startBci, name, type, slot);\n+        return true;\n+    }\n+\n+    public static void writeLocalVariableInfo(BufWriter b, int startPc, int length,\n+                                          Utf8Entry name, Utf8Entry type, int slot) {\n+        b.writeU2(startPc);\n+        b.writeU2(length);\n+        b.writeIndex(name);\n+        b.writeIndex(type);\n+        b.writeU2(slot);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHelpers.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -44,1 +43,0 @@\n-import jdk.internal.classfile.Instruction;\n@@ -51,1 +49,0 @@\n-import jdk.internal.classfile.attribute.StackMapTableAttribute;\n@@ -267,1 +264,2 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!AttributeHelpers.writeLocalVariable(DirectCodeBuilder.this, b, l.startScope(),\n+                                    l.endScope(), l.name(), l.type(), l.slot())) {\n@@ -290,1 +288,2 @@\n-                            if (!l.writeTo(b)) {\n+                            if (!AttributeHelpers.writeLocalVariable(DirectCodeBuilder.this, b, l.startScope(),\n+                                    l.endScope(), l.name(), l.signature(), l.slot())) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -83,8 +82,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariable.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import jdk.internal.classfile.BufWriter;\n@@ -80,8 +79,0 @@\n-    \/**\n-     * Writes the local variable to the specified writer\n-     *\n-     * @param buf the writer\n-     * @return true if the variable has been written\n-     *\/\n-    boolean writeTo(BufWriter buf);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/instruction\/LocalVariableType.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import jdk.internal.classfile.impl.AttributeHelpers;\n+import jdk.internal.classfile.impl.BufWriterImpl;\n@@ -38,1 +40,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -60,1 +61,0 @@\n-import jdk.internal.classfile.constantpool.ConstantPool;\n@@ -97,1 +97,9 @@\n-                        lv.writeTo(b);\n+                        AttributeHelpers.writeLocalVariable(\n+                                ((BufWriterImpl) b).labelContext(),\n+                                b,\n+                                lv.startScope(),\n+                                lv.endScope(),\n+                                lv.name(),\n+                                lv.type(),\n+                                lv.slot()\n+                        );\n@@ -104,1 +112,9 @@\n-                        lvt.writeTo(b);\n+                        AttributeHelpers.writeLocalVariable(\n+                                ((BufWriterImpl) b).labelContext(),\n+                                b,\n+                                lvt.startScope(),\n+                                lvt.endScope(),\n+                                lvt.name(),\n+                                lvt.signature(),\n+                                lvt.slot()\n+                        );\n","filename":"test\/jdk\/jdk\/classfile\/CorpusTest.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"}]}