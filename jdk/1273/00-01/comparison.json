{"files":[{"patch":"@@ -1185,1 +1185,1 @@\n-        double defaultJumpDistance();\n+        double jumpDistance();\n@@ -1382,1 +1382,1 @@\n-        double defaultLeapDistance();\n+        double leapDistance();\n@@ -1563,1 +1563,1 @@\n-         * {@link ArbitrarilyJumpableGenerator#defaultJumpDistance() defaultJumpDistance}().\n+         * {@link ArbitrarilyJumpableGenerator#jumpDistance() jumpDistance}().\n@@ -1565,1 +1565,1 @@\n-        default void jump() { jump(defaultJumpDistance()); }\n+        default void jump() { jump(jumpDistance()); }\n@@ -1614,1 +1614,1 @@\n-         * {@link ArbitrarilyJumpableGenerator#defaultLeapDistance() defaultLeapDistance}().\n+         * {@link ArbitrarilyJumpableGenerator#leapDistance() leapDistance}().\n@@ -1616,1 +1616,1 @@\n-        default void leap() { jump(defaultLeapDistance()); }\n+        default void leap() { jump(leapDistance()); }\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,0 +52,7 @@\n+ * A specific {@link RandomGeneratorFactory} can be located by using the\n+ * {@link RandomGenerator#factoryOf(String)} method, where the argument string\n+ * is the name of the algorithm required. The method\n+ * {@link RandomGenerator#all()} produces a {@link Stream} of all available\n+ * {@link RandomGenerator RandomGenerators} that can be searched to locate a\n+ * {@link RandomGeneratorFactory} suitable to the task.\n+ *\n@@ -72,2 +79,3 @@\n- * The remaining {@link RandomGeneratorFactory} methods are used to select\n- * random number generators suitable for specific tasks. They are typically used in\n+ * RandomGeneratorFactory also provides methods describing the attributes (or properties)\n+ * of a generator and can be used to select random number generator algorithms.\n+ * These methods are typically used in\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGeneratorFactory.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,4 @@\n- * Classes and interfaces that support the definition and use of \"random\n+ * This package contains classes and interfaces that support a generic API\n+ * for random number generation in the JDK.\n+ *\n+ * These classes and interfaces that support the definition and use of \"random\n@@ -47,0 +50,5 @@\n+ * <p> The principal supporting class is {@link RandomGenertatorFactor}. This\n+ * can be used to generate multiple random number generators for a specific\n+ * algorithm. {@link RandomGeneratorFactory} also provides methods for\n+ * selecting random number generator algorithms.\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/package-info.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1757,1 +1757,1 @@\n-     * {@link JumpableGenerator#defaultJumpDistance() defaultJumpDistance}(),\n+     * {@link JumpableGenerator#jumpDistance() jumpDistance}(),\n@@ -1759,1 +1759,1 @@\n-     * {@link LeapableGenerator#defaultLeapDistance() defaultLeapDistance}().\n+     * {@link LeapableGenerator#leapDistance() leapDistance}().\n@@ -1784,1 +1784,1 @@\n-     * {@link JumpableGenerator#defaultJumpDistance() defaultJumpDistance}(),\n+     * {@link JumpableGenerator#jumpDistance() jumpDistance}(),\n@@ -1786,1 +1786,1 @@\n-     * {@link LeapableGenerator#defaultLeapDistance() defaultLeapDistance}().\n+     * {@link LeapableGenerator#leapDistance() leapDistance}().\n@@ -1880,1 +1880,1 @@\n-            return stream(makeJumpsSpliterator(0L, Long.MAX_VALUE, defaultJumpDistance()));\n+            return stream(makeJumpsSpliterator(0L, Long.MAX_VALUE, jumpDistance()));\n@@ -1898,1 +1898,1 @@\n-            return stream(makeJumpsSpliterator(0L, streamSize, defaultJumpDistance()));\n+            return stream(makeJumpsSpliterator(0L, streamSize, jumpDistance()));\n@@ -1942,1 +1942,1 @@\n-         * {@link LeapableGenerator#defaultLeapDistance() defaultLeapDistance}().\n+         * {@link LeapableGenerator#leapDistance() leapDistance}().\n@@ -1945,1 +1945,1 @@\n-            jump(defaultLeapDistance());\n+            jump(leapDistance());\n@@ -1961,1 +1961,1 @@\n-            return stream(makeLeapsSpliterator(0L, Long.MAX_VALUE, defaultLeapDistance()));\n+            return stream(makeLeapsSpliterator(0L, Long.MAX_VALUE, leapDistance()));\n@@ -1978,1 +1978,1 @@\n-            return stream(makeLeapsSpliterator(0L, streamSize, defaultLeapDistance()));\n+            return stream(makeLeapsSpliterator(0L, streamSize, leapDistance()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    public double defaultJumpDistance() {\n+    public double jumpDistance() {\n@@ -279,1 +279,1 @@\n-    public double defaultLeapDistance() {\n+    public double leapDistance() {\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/Xoroshiro128PlusPlus.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-    public double defaultJumpDistance() {\n+    public double jumpDistance() {\n@@ -303,1 +303,1 @@\n-    public double defaultLeapDistance() {\n+    public double leapDistance() {\n","filename":"src\/jdk.random\/share\/classes\/jdk\/random\/Xoshiro256PlusPlus.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}