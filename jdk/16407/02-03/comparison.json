{"files":[{"patch":"@@ -2281,1 +2281,2 @@\n-    private static void addTypeAnnotationsToSymbol(Symbol s, List<Attribute.TypeCompound> attributes) {\n+    private static void addTypeAnnotationsToSymbol(\n+            Symbol s, List<Attribute.TypeCompound> attributes) {\n@@ -2305,1 +2306,3 @@\n-                t.typarams_field = rewriteTypeParameters(t.typarams_field, TargetType.CLASS_TYPE_PARAMETER_BOUND);\n+                t.typarams_field =\n+                        rewriteTypeParameters(\n+                                t.typarams_field, TargetType.CLASS_TYPE_PARAMETER_BOUND);\n@@ -2410,1 +2413,2 @@\n-            Map<List<TypeAnnotationPosition.TypePathEntry>, ListBuffer<Attribute.TypeCompound>> attributesByPath = new HashMap<>();\n+            Map<List<TypeAnnotationPosition.TypePathEntry>, ListBuffer<Attribute.TypeCompound>>\n+                    attributesByPath = new HashMap<>();\n@@ -2437,1 +2441,2 @@\n-            return pos -> pos.type == TargetType.METHOD_FORMAL_PARAMETER && pos.parameter_index == index;\n+            return pos ->\n+                    pos.type == TargetType.METHOD_FORMAL_PARAMETER && pos.parameter_index == index;\n@@ -2455,1 +2460,2 @@\n-        private final Map<List<TypeAnnotationPosition.TypePathEntry>, ListBuffer<Attribute.TypeCompound>> attributesByPath;\n+        private final Map<List<TypeAnnotationPosition.TypePathEntry>,\n+                          ListBuffer<Attribute.TypeCompound>> attributesByPath;\n@@ -2459,1 +2465,2 @@\n-                Map<List<TypeAnnotationPosition.TypePathEntry>, ListBuffer<Attribute.TypeCompound>> attributesByPath,\n+                Map<List<TypeAnnotationPosition.TypePathEntry>, ListBuffer<Attribute.TypeCompound>>\n+                        attributesByPath,\n@@ -2474,2 +2481,2 @@\n-                 curr != null && curr != Type.noType;\n-                 curr = curr.getEnclosingType()) {\n+                    curr != null && curr != Type.noType;\n+                    curr = curr.getEnclosingType()) {\n@@ -2482,1 +2489,2 @@\n-                        visit(typaram, path.append(new TypeAnnotationPosition.TypePathEntry(TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i++)));\n+                        visit(typaram, path.append(new TypeAnnotationPosition.TypePathEntry(\n+                                TypeAnnotationPosition.TypePathEntryKind.TYPE_ARGUMENT, i++)));\n@@ -2492,1 +2500,2 @@\n-        public Void visitWildcardType(WildcardType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n+        public Void visitWildcardType(\n+                WildcardType t, List<TypeAnnotationPosition.TypePathEntry> path) {\n@@ -2518,1 +2527,2 @@\n-        private TypeAnnotationTypeMapping(Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n+        private TypeAnnotationTypeMapping(\n+                Map<Type, List<Attribute.TypeCompound>> attributesByType) {\n@@ -2523,3 +2533,3 @@\n-            \/\/ We're relying on object identify of Type instances to record where the annotations need to be added,\n-            \/\/ so we have to retrieve the annotations for each type before rewriting it, and then add them after\n-            \/\/ it's contained types have been rewritten.\n+            \/\/ We're relying on object identify of Type instances to record where the annotations\n+            \/\/ need to be added, so we have to retrieve the annotations for each type before\n+            \/\/ rewriting it, and then add them after it's contained types have been rewritten.\n@@ -2531,2 +2541,2 @@\n-            \/\/ Runtime-visible and -invisible annotations are completed separately, so if the same type has annotations\n-            \/\/ from both it will get annotated twice.\n+            \/\/ Runtime-visible and -invisible annotations are completed separately, so if the same\n+            \/\/ type has annotations from both it will get annotated twice.\n@@ -2562,1 +2572,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":26,"deletions":17,"binary":false,"changes":43,"status":"modified"}]}