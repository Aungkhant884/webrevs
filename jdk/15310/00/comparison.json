{"files":[{"patch":"@@ -4612,0 +4612,13 @@\n+\n+                boolean allPatternCaseLabels = c.labels.stream().allMatch(p -> p instanceof JCPatternCaseLabel);\n+\n+                if (allPatternCaseLabels) {\n+                    preview.checkSourceLevel(c.labels.tail.head.pos(), Feature.UNNAMED_VARIABLES);\n+                }\n+\n+                for (JCCaseLabel label : c.labels.tail) {\n+                    if (label instanceof JCConstantCaseLabel) {\n+                        log.error(label.pos(), Errors.InvalidCaseLabelCombination);\n+                        break;\n+                    }\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3313,0 +3313,2 @@\n+                    } else if (typeDepth == 0 && parenDepth == 0 && (peekToken(lookahead, tk -> tk == ARROW || tk == COMMA))) {\n+                        return PatternResult.EXPRESSION;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * @test  \/nodynamiccopyright\/\n+ * @bug 8314216\n+ * @summary Multiple patterns without unnamed variables\n+ * @compile\/fail\/ref=T8314216.out -XDrawDiagnostics --enable-preview --source ${jdk.version} T8314216.java\n+ *\/\n+\n+public class T8314216 {\n+    enum X {A, B}\n+\n+    void test(Object obj) {\n+        switch (obj) {\n+            case X.A, Integer _ -> System.out.println(\"A or Integer\");\n+            case String _, X.B -> System.out.println(\"B or String\");\n+            default -> System.out.println(\"other\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new Test().test(\"ddd\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8314216.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+T8314216.java:13:23: compiler.err.invalid.case.label.combination\n+T8314216.java:14:28: compiler.err.invalid.case.label.combination\n+T8314216.java:20:13: compiler.err.cant.resolve.location: kindname.class, Test, , , (compiler.misc.location: kindname.class, T8314216, null)\n+- compiler.note.preview.filename: T8314216.java, DEFAULT\n+- compiler.note.preview.recompile\n+3 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8314216.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test  \/nodynamiccopyright\/\n+ * @bug 8314423\n+ * @summary Multiple patterns without unnamed variables\n+ * @compile\/fail\/ref=T8314423.out -XDrawDiagnostics T8314423.java\n+ * @compile --enable-preview --source ${jdk.version} T8314423.java\n+ *\/\n+\n+public class T8314423 {\n+    record R1() {}\n+    record R2() {}\n+\n+    static void test(Object obj) {\n+        switch (obj) {\n+            case R1(), R2() -> System.out.println(\"R1 or R2\");\n+            default -> System.out.println(\"other\");\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test(new R1());\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8314423.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8314423.java:15:24: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.unnamed.variables)\n+1 error\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8314423.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}