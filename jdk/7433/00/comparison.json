{"files":[{"patch":"@@ -378,2 +378,1 @@\n-      vm_exit_during_initialization(\"-XX:ArchiveClassesAtExit\" __THEMSG, NULL);\n-#undef __THEMSG\n+      warning(\"-XX:ArchiveClassesAtExit\" __THEMSG);\n@@ -381,0 +380,2 @@\n+#undef __THEMSG\n+    DynamicDumpSharedSpaces = false;\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3579,0 +3579,4 @@\n+            if (AutoCreateSharedArchive) {\n+              warning(\"-XX:+AutoCreateSharedArchive is unsupported when base CDS archive is not loaded. Run with -Xlog:cds for more info.\");\n+              AutoCreateSharedArchive = false;\n+            }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,0 +205,25 @@\n+\n+        \/\/ following two tests:\n+        \/\/   -Xshare:auto -XX:SharedArchiveFile=top.jsa, but base does not exist.\n+\n+        new File(baseArchiveName).delete();\n+\n+        startTest(\"10. -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=\" + topArchiveName);\n+        run(topArchiveName,\n+            \"-Xshare:auto\",\n+            \"-XX:+AutoCreateSharedArchive\",\n+            \"-cp\",\n+            appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                output.shouldContain(\"warning: -XX:+AutoCreateSharedArchive is unsupported when base CDS archive is not loaded\");\n+            });\n+\n+        startTest(\"10. -XX:SharedArchiveFile=\" + topArchiveName + \" -XX:ArchiveClassesAtExit=\" + getNewArchiveName(\"top3\"));\n+        run(topArchiveName,\n+            \"-Xshare:auto\",\n+            \"-XX:ArchiveClassesAtExit=\" + getNewArchiveName(\"top3\"),\n+            \"-cp\",\n+            appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                output.shouldContain(\"VM warning: -XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\");\n+            });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArchiveConsistency.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,11 +67,0 @@\n-    private static void mustSkipWith(String expectedMsg, MyRunnable r) throws Exception {\n-        try {\n-            r.run();\n-        } catch (SkippedException e) {\n-            System.out.println(\"Got SkippedException: \" + e);\n-            Asserts.assertTrue(e.getMessage().contains(expectedMsg), \"SkippedException must have message \" + expectedMsg);\n-            return;\n-        }\n-        Asserts.fail(\"SkippedException should have been thrown\");\n-    }\n-\n@@ -201,3 +190,3 @@\n-             \"-XX:+RecordDynamicDumpInfo\",\n-             \"-Xlog:cds+dynamic=debug\",\n-             \"-cp\", appJar, mainClass)\n+            \"-XX:+RecordDynamicDumpInfo\",\n+            \"-Xlog:cds+dynamic=debug\",\n+            \"-cp\", appJar, mainClass)\n@@ -205,5 +194,2 @@\n-                    output.shouldNotMatch(\"\\\\[cds,dynamic\");\n-                });\n-\n-        {\n-            String ERROR = \"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\";\n+                output.shouldNotMatch(\"\\\\[cds,dynamic\");\n+            });\n@@ -211,0 +197,1 @@\n+         {\n@@ -212,6 +199,10 @@\n-            mustSkipWith(ERROR, () -> {\n-                    dump2(baseArchiveName,\n-                          topArchiveName,\n-                          \"-Xshare:off\",\n-                          \"-cp\", appJar, mainClass);\n-                });\n+            String ERROR = \"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\";\n+            dump2(baseArchiveName,\n+                  topArchiveName,\n+                  \"-Xshare:off\",\n+                  \"-Xlog:cds\",\n+                  \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                output.shouldNotMatch(\"\\\\[cds,dynamic\");\n+                output.shouldContain(\"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\");\n+            });\n@@ -220,7 +211,9 @@\n-            mustSkipWith(ERROR, () -> {\n-                    dump2(baseArchiveName + \".notExist\",\n-                          topArchiveName,\n-                          \"-Xlog:cds\",\n-                          \"-Xshare:auto\",\n-                          \"-cp\", appJar, mainClass);\n-                });\n+            dump2(baseArchiveName + \".notExist\",\n+                  topArchiveName,\n+                  \"-Xlog:cds\",\n+                  \"-Xshare:auto\",\n+                 \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                output.shouldNotMatch(\"\\\\[cds,dynamic\");\n+                output.shouldContain(\"-XX:ArchiveClassesAtExit is unsupported when base CDS archive is not loaded\");\n+            });\n@@ -236,1 +229,1 @@\n-                .assertAbnormalExit(\"Cannot use the following option when dumping the shared archive: --patch-module\");\n+            .assertAbnormalExit(\"Cannot use the following option when dumping the shared archive: --patch-module\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/SharedArchiveFileOption.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"}]}