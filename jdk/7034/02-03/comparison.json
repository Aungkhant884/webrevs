{"files":[{"patch":"@@ -2454,2 +2454,2 @@\n-static int profiled_count(ciMethod* m, ciTypeFlow::Loop* loop) {\n-  ciMethodData* methodData = m->method_data();\n+int ciTypeFlow::profiled_count(ciTypeFlow::Loop* loop) {\n+  ciMethodData* methodData = method()->method_data();\n@@ -2471,1 +2471,1 @@\n-  ciBytecodeStream iter(m);\n+  ciBytecodeStream iter(method());\n@@ -2508,1 +2508,1 @@\n-      return m->scale_count(data->as_JumpData()->taken());\n+      return method()->scale_count(data->as_JumpData()->taken());\n@@ -2514,1 +2514,1 @@\n-      return m->scale_count(data->as_JumpData()->taken());\n+      return method()->scale_count(data->as_JumpData()->taken());\n@@ -2516,1 +2516,1 @@\n-      return m->scale_count(data->as_BranchData()->not_taken());\n+      return method()->scale_count(data->as_BranchData()->not_taken());\n@@ -2523,0 +2523,23 @@\n+bool ciTypeFlow::Loop::insertion_point(Loop* lp, Loop* current) {\n+  int lp_pre_order = lp->head()->pre_order();\n+  if (current->head()->pre_order() < lp_pre_order) {\n+    return true;\n+  } else if (current->head()->pre_order() > lp_pre_order) {\n+    return false;\n+  }\n+  \/\/ In the case of a shared head, make the most frequent head\/tail (as reported by profiling) the inner loop\n+  if (current->head() == lp->head()) {\n+    int lp_count = outer()->profiled_count(lp);\n+    int current_count = outer()->profiled_count(current);\n+    if (current_count < lp_count) {\n+      return true;\n+    } else if (current_count > lp_count) {\n+      return false;\n+    }\n+  }\n+  if (current->tail()->pre_order() > lp->tail()->pre_order()) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n@@ -2532,1 +2555,1 @@\n-ciTypeFlow::Loop* ciTypeFlow::Loop::sorted_merge(Loop* lp, ciMethod* method) {\n+ciTypeFlow::Loop* ciTypeFlow::Loop::sorted_merge(Loop* lp) {\n@@ -2538,1 +2561,0 @@\n-    int lp_count = profiled_count(method, lp);\n@@ -2544,10 +2566,1 @@\n-      if (current->head()->pre_order() < lp_pre_order) {\n-        break;\n-      }\n-      int current_count = profiled_count(method, current);\n-      \/\/ In the case of a shared head, make the most frequent head\/tail (as reported by profiling) the inner loop\n-      if (current->head() == lp->head() && current_count < lp_count) {\n-        break;\n-      } else if (current->head()->pre_order() == lp_pre_order &&\n-                 (current->head() != lp->head() || current_count == lp_count) &&\n-                 current->tail()->pre_order() > lp->tail()->pre_order()) {\n+      if (insertion_point(lp, current)) {\n@@ -2627,1 +2640,1 @@\n-    innermost = innermost == NULL ? lp : innermost->sorted_merge(lp, method());\n+    innermost = innermost == NULL ? lp : innermost->sorted_merge(lp);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":32,"deletions":19,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -720,0 +720,3 @@\n+    ciTypeFlow* outer() const { return head()->outer(); }\n+    bool insertion_point(Loop* lp, Loop* current);\n+\n@@ -749,1 +752,1 @@\n-    Loop* sorted_merge(Loop* lp, ciMethod* method);\n+    Loop* sorted_merge(Loop* lp);\n@@ -916,0 +919,2 @@\n+  int profiled_count(ciTypeFlow::Loop* loop);\n+\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}