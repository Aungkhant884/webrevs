{"files":[{"patch":"@@ -2495,0 +2495,3 @@\n+    case Bytecodes::_goto_w:\n+    case Bytecodes::_jsr:\n+    case Bytecodes::_jsr_w:\n@@ -2497,1 +2500,1 @@\n-      ShouldNotReachHere();\n+      fatal(\" invalid bytecode: %s\", Bytecodes::name(iter.cur_bc()));\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Mode;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Thread)\n+public class SharedLoopHeader {\n+\n+    private static final int size = 1000;\n+    private static final boolean branch[] = new boolean[size];\n+    private static final int count[] = new int[size];\n+\n+    @Setup\n+    public void setup() {\n+        for (int i = 0; i < branch.length; i++) {\n+            branch[i] = ((i % 10) != 0);\n+        }\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    @OutputTimeUnit(TimeUnit.NANOSECONDS)\n+    public void sharedHeader() {\n+        int i = 0;\n+        while (i < branch.length) {\n+            if (branch[i]) {\n+                \/\/ common branch\n+                count[i]++;\n+                i++;\n+                continue;\n+            }\n+            i += 2;\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/SharedLoopHeader.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Setup;\n+import java.util.concurrent.TimeUnit;\n+import java.nio.charset.StandardCharsets;\n+\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class StringConstructorBenchmark {\n+  private byte[] array;\n+  private String str;\n+\n+  @Setup\n+  public void setup() {\n+    str = \"Quizdeltagerne spiste jordb\\u00e6r med fl\\u00f8de, mens cirkusklovnen. \\u042f\";\/\/Latin1 ending with Russian\n+    array = str.getBytes(StandardCharsets.UTF_8);\n+  }\n+\n+  @Benchmark\n+  public String newString()  {\n+      return new String(array, 0, array.length, StandardCharsets.UTF_8);\n+  }\n+\n+  @Benchmark\n+  public String translateEscapes()  {\n+      return str.translateEscapes();\n+  }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/StringConstructorBenchmark.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}