{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,3 @@\n-\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.stream.Stream;\n@@ -51,13 +53,4 @@\n-    static void invoke(Sprintable reader, Sprintable writer) throws Exception {\n-\n-        Thread writerThread = new Thread(writer);\n-        writerThread.start();\n-\n-        Thread readerThread = new Thread(reader);\n-        readerThread.start();\n-\n-        writerThread.join();\n-        readerThread.join();\n-\n-        reader.throwException();\n-        writer.throwException();\n+    static void invoke(Runnable reader, Runnable writer) throws CompletionException {\n+        CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer);\n+        CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader);\n+        wait(f1, f2);\n@@ -66,2 +59,12 @@\n-    public interface Sprintable extends Runnable {\n-        public void throwException() throws Exception;\n+    \/\/ This method waits until one of the given CompletableFutures completes exceptionally. In which case, it stops waiting for the other futures and\n+    \/\/ throws a CompletionException. Otherwise, will wait for all futures to complete successfully.\n+    private static void wait(CompletableFuture<?>... futures) throws CompletionException {\n+        CompletableFuture<?> future = CompletableFuture.allOf(futures);\n+        Stream.of(futures)\n+                .forEach(f -> {\n+                    f.exceptionally(ex -> {\n+                        future.completeExceptionally(ex);\n+                        return null;\n+                    });\n+                });\n+        future.join();\n@@ -70,1 +73,1 @@\n-    public static class Actor implements Sprintable {\n+    public static class Actor implements Runnable {\n@@ -72,1 +75,0 @@\n-        Exception e = null;\n@@ -78,5 +80,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -84,4 +81,1 @@\n-            try {\n-                DatagramChannel dc = DatagramChannel.open();\n-\n-                \/\/ Send a message\n+            try (DatagramChannel dc = DatagramChannel.open()) {\n@@ -91,4 +85,1 @@\n-                InetAddress address = InetAddress.getLocalHost();\n-                if (address.isLoopbackAddress()) {\n-                    address = InetAddress.getLoopbackAddress();\n-                }\n+                InetAddress address = InetAddress.getLoopbackAddress();\n@@ -97,0 +88,3 @@\n+\n+                \/\/ Send a message\n+                log.println(\"Actor attempting to write to Reactor at \" + isa.toString());\n@@ -100,2 +94,0 @@\n-                address = InetAddress.getLocalHost();\n-                InetSocketAddress bogus = new InetSocketAddress(address, 3333);\n@@ -103,2 +95,4 @@\n-                    dc.send(bb, bogus);\n-                    throw new RuntimeException(\"Allowed bogus send while connected\");\n+                    InetSocketAddress otherAddress = new InetSocketAddress(address, (port == 3333 ? 3332 : 3333));\n+                    log.println(\"Testing if Actor throws already connected exception when attempting to send to \" + otherAddress.toString());\n+                    dc.send(bb, otherAddress);\n+                    throw new RuntimeException(\"Actor allowed send to other address while already connected\");\n@@ -111,0 +105,1 @@\n+                log.println(\"Actor waiting to read\");\n@@ -113,3 +108,3 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                newDecoder().decode(bb);\n-                log.println(\"From Reactor: \"+isa+ \" said \" +cb);\n+                CharBuffer cb = StandardCharsets.US_ASCII.\n+                        newDecoder().decode(bb);\n+                log.println(\"Actor received from Reactor at \" + isa + \": \" + cb);\n@@ -119,1 +114,0 @@\n-                dc.close();\n@@ -121,1 +115,4 @@\n-                e = ex;\n+                log.println(\"Actor threw exception: \" + ex);\n+                throw new RuntimeException(ex);\n+            } finally {\n+                log.println(\"Actor finished\");\n@@ -126,1 +123,1 @@\n-    public static class Reactor implements Sprintable {\n+    public static class Reactor implements Runnable {\n@@ -128,1 +125,0 @@\n-        Exception e = null;\n@@ -138,5 +134,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -147,0 +138,1 @@\n+                log.println(\"Reactor waiting to receive\");\n@@ -149,3 +141,3 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                newDecoder().decode(bb);\n-                log.println(\"From Actor: \"+sa+ \" said \" +cb);\n+                CharBuffer cb = StandardCharsets.US_ASCII.\n+                        newDecoder().decode(bb);\n+                log.println(\"Reactor received from Actor at\" + sa +  \": \" + cb);\n@@ -156,0 +148,1 @@\n+                log.println(\"Reactor attempting to write: \" + dc.getRemoteAddress().toString());\n@@ -162,1 +155,4 @@\n-                e = ex;\n+                log.println(\"Reactor threw exception: \" + ex);\n+                throw new RuntimeException(ex);\n+            } finally {\n+                log.println(\"Reactor finished\");\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Connect.java","additions":48,"deletions":52,"binary":false,"changes":100,"status":"modified"}]}