{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -48,3 +50,4 @@\n-        Reactor r = new Reactor();\n-        Actor a = new Actor(r.port());\n-        invoke(a, r);\n+        try (Reactor r = new Reactor();\n+             Actor a = new Actor(r.port())) {\n+            invoke(a, r);\n+        }\n@@ -54,3 +57,8 @@\n-        CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer);\n-        CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader);\n-        wait(f1, f2);\n+        ExecutorService threadPool = Executors.newCachedThreadPool();\n+        try {\n+            CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer, threadPool);\n+            CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader, threadPool);\n+            wait(f1, f2);\n+        } finally {\n+            threadPool.shutdown();\n+        }\n@@ -59,2 +67,3 @@\n-    \/\/ This method waits until one of the given CompletableFutures completes exceptionally. In which case, it stops waiting for the other futures and\n-    \/\/ throws a CompletionException. Otherwise, will wait for all futures to complete successfully.\n+\n+    \/\/ This method waits for either one of the given futures to complete exceptionally\n+    \/\/ or for all of the given futures to complete successfully.\n@@ -64,6 +73,4 @@\n-                .forEach(f -> {\n-                    f.exceptionally(ex -> {\n-                        future.completeExceptionally(ex);\n-                        return null;\n-                    });\n-                });\n+                .forEach(f -> f.exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                }));\n@@ -73,1 +80,1 @@\n-    public static class Actor implements Runnable {\n+    public static class Actor implements AutoCloseable, Runnable {\n@@ -75,0 +82,1 @@\n+        final DatagramChannel dc;\n@@ -76,1 +84,1 @@\n-        Actor(int port) {\n+        Actor(int port) throws IOException {\n@@ -78,0 +86,1 @@\n+            dc = DatagramChannel.open();\n@@ -81,1 +90,1 @@\n-            try (DatagramChannel dc = DatagramChannel.open()) {\n+            try {\n@@ -111,3 +120,0 @@\n-\n-                \/\/ Clean up\n-                dc.disconnect();\n@@ -121,0 +127,5 @@\n+\n+        @Override\n+        public void close() throws Exception {\n+            dc.close();\n+        }\n@@ -123,1 +134,1 @@\n-    public static class Reactor implements Runnable {\n+    public static class Reactor implements AutoCloseable, Runnable {\n@@ -150,4 +161,0 @@\n-\n-                \/\/ Clean up\n-                dc.disconnect();\n-                dc.close();\n@@ -161,0 +168,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Connect.java","additions":37,"deletions":25,"binary":false,"changes":62,"status":"modified"}]}