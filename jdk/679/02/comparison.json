{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,5 @@\n-\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.stream.Stream;\n@@ -46,3 +50,7 @@\n-        Reactor r = new Reactor();\n-        Actor a = new Actor(r.port());\n-        invoke(a, r);\n+        ExecutorService threadPool = Executors.newCachedThreadPool();\n+        try (Reactor r = new Reactor();\n+             Actor a = new Actor(r.port())) {\n+            invoke(threadPool, a, r);\n+        } finally {\n+            threadPool.shutdown();\n+        }\n@@ -51,13 +59,4 @@\n-    static void invoke(Sprintable reader, Sprintable writer) throws Exception {\n-\n-        Thread writerThread = new Thread(writer);\n-        writerThread.start();\n-\n-        Thread readerThread = new Thread(reader);\n-        readerThread.start();\n-\n-        writerThread.join();\n-        readerThread.join();\n-\n-        reader.throwException();\n-        writer.throwException();\n+    static void invoke(ExecutorService e, Runnable reader, Runnable writer) throws CompletionException {\n+        CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer, e);\n+        CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader, e);\n+        wait(f1, f2);\n@@ -66,2 +65,11 @@\n-    public interface Sprintable extends Runnable {\n-        public void throwException() throws Exception;\n+\n+    \/\/ This method waits for either one of the given futures to complete exceptionally\n+    \/\/ or for all of the given futures to complete successfully.\n+    private static void wait(CompletableFuture<?>... futures) throws CompletionException {\n+        CompletableFuture<?> future = CompletableFuture.allOf(futures);\n+        Stream.of(futures)\n+                .forEach(f -> f.exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                }));\n+        future.join();\n@@ -70,1 +78,1 @@\n-    public static class Actor implements Sprintable {\n+    public static class Actor implements AutoCloseable, Runnable {\n@@ -72,1 +80,1 @@\n-        Exception e = null;\n+        final DatagramChannel dc;\n@@ -74,1 +82,1 @@\n-        Actor(int port) {\n+        Actor(int port) throws IOException {\n@@ -76,5 +84,1 @@\n-        }\n-\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n+            dc = DatagramChannel.open();\n@@ -85,3 +89,0 @@\n-                DatagramChannel dc = DatagramChannel.open();\n-\n-                \/\/ Send a message\n@@ -91,4 +92,1 @@\n-                InetAddress address = InetAddress.getLocalHost();\n-                if (address.isLoopbackAddress()) {\n-                    address = InetAddress.getLoopbackAddress();\n-                }\n+                InetAddress address = InetAddress.getLoopbackAddress();\n@@ -97,0 +95,3 @@\n+\n+                \/\/ Send a message\n+                log.println(\"Actor attempting to write to Reactor at \" + isa.toString());\n@@ -100,2 +101,0 @@\n-                address = InetAddress.getLocalHost();\n-                InetSocketAddress bogus = new InetSocketAddress(address, 3333);\n@@ -103,2 +102,4 @@\n-                    dc.send(bb, bogus);\n-                    throw new RuntimeException(\"Allowed bogus send while connected\");\n+                    InetSocketAddress otherAddress = new InetSocketAddress(address, (port == 3333 ? 3332 : 3333));\n+                    log.println(\"Testing if Actor throws already connected exception when attempting to send to \" + otherAddress.toString());\n+                    dc.send(bb, otherAddress);\n+                    throw new RuntimeException(\"Actor allowed send to other address while already connected\");\n@@ -111,0 +112,1 @@\n+                log.println(\"Actor waiting to read\");\n@@ -113,7 +115,3 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                newDecoder().decode(bb);\n-                log.println(\"From Reactor: \"+isa+ \" said \" +cb);\n-\n-                \/\/ Clean up\n-                dc.disconnect();\n-                dc.close();\n+                CharBuffer cb = StandardCharsets.US_ASCII.\n+                        newDecoder().decode(bb);\n+                log.println(\"Actor received from Reactor at \" + isa + \": \" + cb);\n@@ -121,1 +119,4 @@\n-                e = ex;\n+                log.println(\"Actor threw exception: \" + ex);\n+                throw new RuntimeException(ex);\n+            } finally {\n+                log.println(\"Actor finished\");\n@@ -124,0 +125,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n@@ -126,1 +132,1 @@\n-    public static class Reactor implements Sprintable {\n+    public static class Reactor implements AutoCloseable, Runnable {\n@@ -128,1 +134,0 @@\n-        Exception e = null;\n@@ -138,5 +143,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -147,0 +147,1 @@\n+                log.println(\"Reactor waiting to receive\");\n@@ -149,3 +150,3 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                newDecoder().decode(bb);\n-                log.println(\"From Actor: \"+sa+ \" said \" +cb);\n+                CharBuffer cb = StandardCharsets.US_ASCII.\n+                        newDecoder().decode(bb);\n+                log.println(\"Reactor received from Actor at\" + sa +  \": \" + cb);\n@@ -156,0 +157,1 @@\n+                log.println(\"Reactor attempting to write: \" + dc.getRemoteAddress().toString());\n@@ -157,4 +159,0 @@\n-\n-                \/\/ Clean up\n-                dc.disconnect();\n-                dc.close();\n@@ -162,1 +160,4 @@\n-                e = ex;\n+                log.println(\"Reactor threw exception: \" + ex);\n+                throw new RuntimeException(ex);\n+            } finally {\n+                log.println(\"Reactor finished\");\n@@ -165,0 +166,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Connect.java","additions":68,"deletions":62,"binary":false,"changes":130,"status":"modified"}]}