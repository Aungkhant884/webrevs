{"files":[{"patch":"@@ -356,0 +356,1 @@\n+  template(jdk_incubator_foreign_MemoryAccess,       \"jdk\/incubator\/foreign\/MemoryAccess\")        \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -717,0 +717,6 @@\n+\n+  if (_nmethod_mirror_index != -1 && nm->is_unloaded()) {\n+    \/\/ Drop the reference to the nmethod mirror object but don't clear the actual oop reference.  Otherwise\n+    \/\/ it would appear that the nmethod didn't need to be unloaded in the first place.\n+    _nmethod_mirror_index = -1;\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1604,0 +1604,12 @@\n+bool MethodData::profile_memory_access(const methodHandle& m, int bci) {\n+  Bytecode_invoke inv(m , bci);\n+  if (inv.is_invokestatic()) {\n+    if (inv.klass() == vmSymbols::jdk_incubator_foreign_MemoryAccess()) {\n+      if (inv.name()->starts_with(\"get\") || inv.name()->starts_with(\"set\")) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -1633,0 +1645,4 @@\n+  if (profile_memory_access(m, bci)) {\n+    return true;\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -338,0 +338,1 @@\n+ -runtime\/cds\/appcds\/LambdaVerificationFailedDuringDump.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -499,1 +499,1 @@\n-java\/awt\/FileDialog\/FilenameFilterTest\/FilenameFilterTest.java 8202882 linux-all\n+java\/awt\/FileDialog\/FilenameFilterTest\/FilenameFilterTest.java 8202882,8255898 linux-all,macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}