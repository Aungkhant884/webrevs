{"files":[{"patch":"@@ -415,0 +415,1 @@\n+  oop obj = cast_to_oop(mem);\n@@ -417,2 +418,2 @@\n-    oopDesc::set_mark(mem, markWord::prototype());\n-    oopDesc::release_set_klass(mem, k);\n+    obj->set_mark(markWord::prototype());\n+    obj->release_set_klass(k);\n@@ -422,1 +423,1 @@\n-    arrayOopDesc::set_length(mem, length);\n+    arrayOop(obj)->set_length(length);\n@@ -425,1 +426,1 @@\n-  _roots = OopHandle(Universe::vm_global(), cast_to_oop(mem));\n+  _roots = OopHandle(Universe::vm_global(), obj);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -386,1 +386,2 @@\n-  oopDesc::set_mark(mem, markWord::prototype());\n+  oop obj = cast_to_oop(mem);\n+  obj->set_mark(markWord::prototype());\n@@ -390,2 +391,2 @@\n-  oopDesc::release_set_klass(mem, _klass);\n-  return cast_to_oop(mem);\n+  obj->release_set_klass(_klass);\n+  return obj;\n@@ -416,1 +417,1 @@\n-  arrayOopDesc::set_length(mem, _length);\n+  arrayOop(cast_to_oop(mem))->set_length(_length);\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -121,4 +121,0 @@\n-  static void set_length(HeapWord* mem, int length) {\n-    *length_addr_impl(mem) = length;\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/arrayOop.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,2 +65,0 @@\n-  static inline void set_mark(HeapWord* mem, markWord m);\n-\n@@ -68,2 +66,1 @@\n-  inline markWord cas_set_mark(markWord new_mark, markWord old_mark);\n-  inline markWord cas_set_mark(markWord new_mark, markWord old_mark, atomic_memory_order order);\n+  inline markWord cas_set_mark(markWord new_mark, markWord old_mark, atomic_memory_order order = memory_order_conservative);\n@@ -81,1 +78,1 @@\n-  static inline void release_set_klass(HeapWord* mem, Klass* k);\n+  inline void release_set_klass(Klass* k);\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-  uintptr_t v = HeapAccess<MO_RELAXED>::load_at(as_oop(), mark_offset_in_bytes());\n-  return markWord(v);\n+  return *const_cast<markWord*>(&_mark);\n@@ -53,1 +52,1 @@\n-  return (markWord*) &_mark;\n+  return const_cast<markWord*>(&_mark);\n@@ -57,5 +56,1 @@\n-  HeapAccess<MO_RELAXED>::store_at(as_oop(), mark_offset_in_bytes(), m.value());\n-}\n-\n-void oopDesc::set_mark(HeapWord* mem, markWord m) {\n-  *(markWord*)(((char*)mem) + mark_offset_in_bytes()) = m;\n+  *const_cast<markWord*>(&_mark) = m;\n@@ -65,6 +60,1 @@\n-  HeapAccess<MO_RELEASE>::store_at(as_oop(), mark_offset_in_bytes(), m.value());\n-}\n-\n-markWord oopDesc::cas_set_mark(markWord new_mark, markWord old_mark) {\n-  uintptr_t v = HeapAccess<>::atomic_cmpxchg_at(as_oop(), mark_offset_in_bytes(), old_mark.value(), new_mark.value());\n-  return markWord(v);\n+  Atomic::release_store(&_mark, m);\n@@ -115,1 +105,1 @@\n-void oopDesc::release_set_klass(HeapWord* mem, Klass* k) {\n+void oopDesc::release_set_klass(Klass* k) {\n@@ -117,1 +107,0 @@\n-  char* raw_mem = ((char*)mem + klass_offset_in_bytes());\n@@ -119,1 +108,1 @@\n-    Atomic::release_store((narrowKlass*)raw_mem,\n+    Atomic::release_store(&_metadata._compressed_klass,\n@@ -122,1 +111,1 @@\n-    Atomic::release_store((Klass**)raw_mem, k);\n+    Atomic::release_store(&_metadata._klass, k);\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"}]}