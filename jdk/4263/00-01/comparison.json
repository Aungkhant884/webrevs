{"files":[{"patch":"@@ -151,1 +151,0 @@\n-            long i = 0L;\n@@ -154,9 +153,1 @@\n-                long pos = fc.position();\n-                long size = fc.size();\n-                try {\n-                    for (long n = size - pos; i < n;)\n-                        i += fc.transferTo(pos + i, Long.MAX_VALUE, oc);\n-                    return i;\n-                } finally {\n-                    fc.position(pos + i);\n-                }\n+                return transfer(fc, oc);\n@@ -166,2 +157,0 @@\n-                long fcpos = fc.position();\n-\n@@ -169,9 +158,1 @@\n-                    long pos = sbc.position();\n-                    long size = sbc.size();\n-                    try {\n-                        for (long n = size - pos; i < n;)\n-                            i += fc.transferFrom(ch, fcpos + i, Long.MAX_VALUE);\n-                        return i;\n-                    } finally {\n-                        fc.position(fcpos + i);\n-                    }\n+                    return transfer(sbc, fc);\n@@ -180,19 +161,1 @@\n-                ByteBuffer bb = Util.getTemporaryDirectBuffer(TRANSFER_SIZE);\n-                try {\n-                    int r;\n-                    do {\n-                        i += fc.transferFrom(ch, fcpos + i, Long.MAX_VALUE);\n-                        r = ch.read(bb); \/\/ detect end-of-stream\n-                        if (r > -1) {\n-                            bb.flip();\n-                            while (bb.hasRemaining())\n-                                oc.write(bb);\n-                            bb.clear();\n-                            i += r;\n-                        }\n-                    } while (r > -1);\n-                    return i;\n-                } finally {\n-                    fc.position(fcpos + i);\n-                    Util.releaseTemporaryDirectBuffer(bb);\n-                }\n+                return transfer(ch, fc);\n@@ -201,3 +164,43 @@\n-            ByteBuffer bb = Util.getTemporaryDirectBuffer(TRANSFER_SIZE);\n-            try {\n-                for (int r = ch.read(bb); r > -1; r = ch.read(bb)) {\n+            return transfer(ch, oc);\n+        }\n+\n+        return super.transferTo(out);\n+    }\n+\n+    private static long transfer(FileChannel src, WritableByteChannel dest) throws IOException {\n+        long bytesWritten = 0L;\n+        long srcPos = src.position();\n+        long srcSize = src.size();\n+        try {\n+            for (long n = srcSize - srcPos; bytesWritten < n;)\n+            \tbytesWritten += src.transferTo(srcPos + bytesWritten, Long.MAX_VALUE, dest);\n+            return bytesWritten;\n+        } finally {\n+            src.position(srcPos + bytesWritten);\n+        }\n+    }\n+\n+    private static long transfer(SeekableByteChannel src, FileChannel dest) throws IOException {\n+        long bytesWritten = 0L;\n+        long destPos = dest.position();\n+        long srcPos = src.position();\n+        long srcSize = src.size();\n+        try {\n+            for (long n = srcSize - srcPos; bytesWritten < n;)\n+            \tbytesWritten += dest.transferFrom(src, destPos + bytesWritten, Long.MAX_VALUE);\n+            return bytesWritten;\n+        } finally {\n+            dest.position(destPos + bytesWritten);\n+        }\n+    }\n+\n+    private static long transfer(ReadableByteChannel src, FileChannel dest) throws IOException {\n+        long bytesWritten = 0L;\n+        long destPos = dest.position();\n+        ByteBuffer bb = Util.getTemporaryDirectBuffer(TRANSFER_SIZE);\n+        try {\n+            int r;\n+            do {\n+            \tbytesWritten += dest.transferFrom(src, destPos + bytesWritten, Long.MAX_VALUE);\n+                r = src.read(bb); \/\/ detect end-of-stream\n+                if (r > -1) {\n@@ -206,1 +209,1 @@\n-                        oc.write(bb);\n+                        dest.write(bb);\n@@ -208,1 +211,1 @@\n-                    i += r;\n+                    bytesWritten += r;\n@@ -210,4 +213,5 @@\n-                return i;\n-            } finally {\n-                Util.releaseTemporaryDirectBuffer(bb);\n-            }\n+            } while (r > -1);\n+            return bytesWritten;\n+        } finally {\n+            dest.position(destPos + bytesWritten);\n+            Util.releaseTemporaryDirectBuffer(bb);\n@@ -215,2 +219,0 @@\n-\n-        return super.transferTo(out);\n@@ -219,0 +221,16 @@\n+    private static long transfer(ReadableByteChannel src, WritableByteChannel dest) throws IOException {\n+        long bytesWritten = 0L;\n+        ByteBuffer bb = Util.getTemporaryDirectBuffer(TRANSFER_SIZE);\n+        try {\n+            for (int r = src.read(bb); r > -1; r = src.read(bb)) {\n+                bb.flip();\n+                while (bb.hasRemaining())\n+                    dest.write(bb);\n+                bb.clear();\n+                bytesWritten += r;\n+            }\n+            return bytesWritten;\n+        } finally {\n+            Util.releaseTemporaryDirectBuffer(bb);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":69,"deletions":51,"binary":false,"changes":120,"status":"modified"}]}