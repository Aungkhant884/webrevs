{"files":[{"patch":"@@ -931,2 +931,39 @@\n-ATTRIBUTE_NO_ASAN static void print_hex_readable_pointer(outputStream* st, address p,\n-                                                         int unitsize) {\n+ATTRIBUTE_NO_ASAN static bool read_safely_from(intptr_t* p, intptr_t* result) {\n+  const intptr_t errval = 0x1717;\n+  intptr_t i = SafeFetchN(p, errval);\n+  if (i == errval) {\n+    i = SafeFetchN(p, ~errval);\n+    if (i == ~errval) {\n+      return false;\n+    }\n+  }\n+  (*result) = i;\n+  return true;\n+}\n+\n+static bool print_hex_location(outputStream* st, address p, int unitsize) {\n+  intptr_t i = 0;\n+  const intptr_t errval = 0x1717;\n+  address pa = align_down(p, sizeof(intptr_t));\n+  if (!read_safely_from((intptr_t*)pa, &i)) {\n+    return false;\n+  }\n+#ifndef _LP64\n+  \/\/ Special handling for printing qwords on 32-bit platforms\n+  if (unitsize == 8) {\n+    intptr_t i2 = 0;\n+    assert(sizeof(intptr_t) == 4, \"Sanity\");\n+    if (!read_safely_from((intptr_t*)pa + 1, &i2)) {\n+      return false;\n+    }\n+    uint64_t value = (((uint64_t)i2) << 32) | i;\n+    st->print(\"%016\" FORMAT64_MODIFIER \"x\", value);\n+    return true;\n+  }\n+#endif \/\/ 32-bit, 64-bit unitsize\n+  const int offset = (int)(p - (address)pa);\n+  const int bitoffset =\n+    LITTLE_ENDIAN_ONLY(offset * BitsPerByte)\n+    BIG_ENDIAN_ONLY((int)(sizeof(intptr_t) - 1 - offset) * BitsPerByte);\n+  const int bitfieldsize = unitsize * BitsPerByte;\n+  intptr_t value = bitfield(i, bitoffset, bitfieldsize);\n@@ -934,4 +971,7 @@\n-    case 1: st->print(\"%02x\", *(u1*)p); break;\n-    case 2: st->print(\"%04x\", *(u2*)p); break;\n-    case 4: st->print(\"%08x\", *(u4*)p); break;\n-    case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", *(u8*)p); break;\n+    case 1: st->print(\"%02x\", (u1)value); break;\n+    case 2: st->print(\"%04x\", (u2)value); break;\n+    case 4: st->print(\"%08x\", (u4)value); break;\n+  #ifdef _LP64\n+    case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", (u8)value); break;\n+  #endif\n+    default: ShouldNotReachHere();\n@@ -939,0 +979,1 @@\n+  return true;\n@@ -958,3 +999,1 @@\n-    if (is_readable_pointer(p)) {\n-      print_hex_readable_pointer(st, p, unitsize);\n-    } else {\n+    if (!print_hex_location(st, p, unitsize)) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":48,"deletions":9,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"gmock\/gmock.h\"\n@@ -172,3 +173,3 @@\n-\/\/  tty->print_cr(\"expected: %s\", expected);\n-\/\/  tty->print_cr(\"result: %s\", buf);\n-  ASSERT_NE(strstr(buf, expected), (char*)NULL);\n+  \/\/ tty->print_cr(\"expected: %s\", expected);\n+  \/\/ tty->print_cr(\"result: %s\", buf);\n+  EXPECT_THAT(buf, testing::HasSubstr(expected));\n@@ -180,4 +181,4 @@\n-    \"00 01 02 03 04 05 06 07\",\n-    \"0100 0302 0504 0706\",\n-    \"03020100 07060504\",\n-    \"0706050403020100\"\n+    \"00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\",\n+    \"0100 0302 0504 0706 0908 0b0a 0d0c 0f0e\",\n+    \"03020100 07060504 0b0a0908 0f0e0d0c\",\n+    \"0706050403020100 0f0e0d0c0b0a0908\"\n@@ -185,4 +186,4 @@\n-    \"00 01 02 03 04 05 06 07\",\n-    \"0001 0203 0405 0607\",\n-    \"00010203 04050607\",\n-    \"0001020304050607\"\n+    \"00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\",\n+    \"0001 0203 0405 0607 0809 0a0b 0c0d 0e0f\",\n+    \"00010203 04050607 08090a0b 0c0d0e0f\",\n+    \"0001020304050607 08090a0b0c0d0e0f\"\n@@ -193,4 +194,4 @@\n-    \"?? ?? ?? ?? ?? ?? ?? ??\",\n-    \"???? ???? ???? ????\",\n-    \"???????? ????????\",\n-    \"????????????????\"\n+    \"?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\",\n+    \"???? ???? ???? ???? ???? ???? ???? ????\",\n+    \"???????? ???????? ???????? ????????\",\n+    \"???????????????? ????????????????\"\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"}]}