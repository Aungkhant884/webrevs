{"files":[{"patch":"@@ -944,3 +944,1 @@\n-static bool print_hex_location(outputStream* st, address p, int unitsize) {\n-  intptr_t i = 0;\n-  const intptr_t errval = 0x1717;\n+static void print_hex_location(outputStream* st, address p, int unitsize) {\n@@ -948,3 +946,0 @@\n-  if (!read_safely_from((intptr_t*)pa, &i)) {\n-    return false;\n-  }\n@@ -954,4 +949,9 @@\n-    intptr_t i2 = 0;\n-    assert(sizeof(intptr_t) == 4, \"Sanity\");\n-    if (!read_safely_from((intptr_t*)pa + 1, &i2)) {\n-      return false;\n+    intptr_t i1, i2;\n+    if (read_safely_from((intptr_t*)pa, &i1) &&\n+        read_safely_from((intptr_t*)pa + 1, &i2)) {\n+      const uint64_t value =\n+        LITTLE_ENDIAN_ONLY((((uint64_t)i2) << 32) | i1)\n+        BIG_ENDIAN_ONLY((((uint64_t)i1) << 32) | i2);\n+      st->print(\"%016\" FORMAT64_MODIFIER \"x\", value);\n+    } else {\n+      st->print_raw(\"????????????????\");\n@@ -959,3 +959,1 @@\n-    uint64_t value = (((uint64_t)i2) << 32) | i;\n-    st->print(\"%016\" FORMAT64_MODIFIER \"x\", value);\n-    return true;\n+    return;\n@@ -963,15 +961,22 @@\n-#endif \/\/ 32-bit, 64-bit unitsize\n-  const int offset = (int)(p - (address)pa);\n-  const int bitoffset =\n-    LITTLE_ENDIAN_ONLY(offset * BitsPerByte)\n-    BIG_ENDIAN_ONLY((int)(sizeof(intptr_t) - 1 - offset) * BitsPerByte);\n-  const int bitfieldsize = unitsize * BitsPerByte;\n-  intptr_t value = bitfield(i, bitoffset, bitfieldsize);\n-  switch (unitsize) {\n-    case 1: st->print(\"%02x\", (u1)value); break;\n-    case 2: st->print(\"%04x\", (u2)value); break;\n-    case 4: st->print(\"%08x\", (u4)value); break;\n-  #ifdef _LP64\n-    case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", (u8)value); break;\n-  #endif\n-    default: ShouldNotReachHere();\n+#endif \/\/ 32-bit, qwords\n+  intptr_t i = 0;\n+  if (read_safely_from((intptr_t*)pa, &i)) {\n+    const int offset = (int)(p - (address)pa);\n+    const int bitoffset =\n+      LITTLE_ENDIAN_ONLY(offset * BitsPerByte)\n+      BIG_ENDIAN_ONLY((int)(sizeof(intptr_t) - 1 - offset) * BitsPerByte);\n+    const int bitfieldsize = unitsize * BitsPerByte;\n+    intptr_t value = bitfield(i, bitoffset, bitfieldsize);\n+    switch (unitsize) {\n+      case 1: st->print(\"%02x\", (u1)value); break;\n+      case 2: st->print(\"%04x\", (u2)value); break;\n+      case 4: st->print(\"%08x\", (u4)value); break;\n+      case 8: st->print(\"%016\" FORMAT64_MODIFIER \"x\", (u8)value); break;\n+    }\n+  } else {\n+    switch (unitsize) {\n+      case 1: st->print_raw(\"??\"); break;\n+      case 2: st->print_raw(\"????\"); break;\n+      case 4: st->print_raw(\"????????\"); break;\n+      case 8: st->print_raw(\"????????????????\"); break;\n+    }\n@@ -979,1 +984,0 @@\n-  return true;\n@@ -999,3 +1003,1 @@\n-    if (!print_hex_location(st, p, unitsize)) {\n-      st->print(\"%*.*s\", 2*unitsize, 2*unitsize, \"????????????????\");\n-    }\n+    print_hex_location(st, p, unitsize);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"}]}