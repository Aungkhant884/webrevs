{"files":[{"patch":"@@ -51,0 +51,1 @@\n+  template(HeapDumpMerge)                         \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-AttachListenerThread* AttachListener::_attach_listener_thread = NULL;\n@@ -461,2 +460,2 @@\n-  _attach_listener_thread = new AttachListenerThread();\n-  JavaThread::vm_exit_on_osthread_failure(_attach_listener_thread);\n+  JavaThread* thread = new AttachListenerThread();\n+  JavaThread::vm_exit_on_osthread_failure(thread);\n@@ -464,1 +463,1 @@\n-  JavaThread::start_internal_daemon(THREAD, _attach_listener_thread, thread_oop, NoPriority);\n+  JavaThread::start_internal_daemon(THREAD, thread, thread_oop, NoPriority);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-  static AttachListenerThread* _attach_listener_thread;\n@@ -119,2 +118,0 @@\n-  static AttachListenerThread* attach_listener_thread() { return _attach_listener_thread; }\n-\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"runtime\/handshake.hpp\"\n@@ -60,1 +59,0 @@\n-#include \"services\/attachListener.hpp\"\n@@ -1526,3 +1524,2 @@\n-\/\/ HeapDumpMergeClosure merges separate dump files into a complete one, this clousre\n-\/\/ is desired to be performed by attach listener thread\n-class HeapDumpMergeClosure: public HandshakeClosure {\n+\/\/ DumpMerger merges separate dump files into a complete one\n+class DumpMerger : public StackObj {\n@@ -1538,1 +1535,0 @@\n-  void do_merge();\n@@ -1541,2 +1537,1 @@\n-  HeapDumpMergeClosure(const char* path, DumpWriter* writer, int dump_seq) :\n-    HandshakeClosure(\"HeapDumpMerge\"),\n+  DumpMerger(const char* path, DumpWriter* writer, int dump_seq) :\n@@ -1548,4 +1543,1 @@\n-  void do_thread(Thread* thread) {\n-    guarantee(thread->is_AttachListener_thread(), \"must be\");\n-    do_merge();\n-  }\n+  void do_merge();\n@@ -1554,1 +1546,1 @@\n-void HeapDumpMergeClosure::merge_done() {\n+void DumpMerger::merge_done() {\n@@ -1563,1 +1555,1 @@\n-void HeapDumpMergeClosure::merge_file(char* path) {\n+void DumpMerger::merge_file(char* path) {\n@@ -1591,1 +1583,1 @@\n-void HeapDumpMergeClosure::do_merge() {\n+void DumpMerger::do_merge() {\n@@ -1616,0 +1608,14 @@\n+\/\/ The VM operation wraps DumpMerger so that it could be performed by VM thread\n+class VM_HeapDumpMerge : public VM_Operation {\n+private:\n+  DumpMerger* _merger;\n+public:\n+  VM_HeapDumpMerge(DumpMerger* merger) : _merger(merger) {}\n+  VMOp_Type type() const { return VMOp_HeapDumpMerge; }\n+  \/\/ heap dump merge could happen outside safepoint\n+  virtual bool evaluate_at_safepoint() const { return false; }\n+  void doit() {\n+    _merger->do_merge();\n+  }\n+};\n+\n@@ -2196,1 +2202,1 @@\n-  \/\/ Phase 1: Concurrent threads directly write data to multiple heap files.\n+  \/\/ Phase 1: Concurrent threads directly write heap data to multiple heap files.\n@@ -2200,3 +2206,1 @@\n-  \/\/          This is done within HeapDumpMergeClosure by attach listener thread,\n-  \/\/          this prevents us from occupying the VM Thread, which in turn affects\n-  \/\/          the occurrence of GC and other VM operations.\n+  \/\/          This is done by DumpMerger, which is performed outside safepoint\n@@ -2204,4 +2208,12 @@\n-    Thread* calling_thread = Thread::current();\n-    ThreadsListHandle tlh(calling_thread);\n-    HeapDumpMergeClosure closure(path, &writer, dumper.dump_seq());\n-    Handshake::execute(&closure, AttachListener::attach_listener_thread());\n+    DumpMerger merger(path, &writer, dumper.dump_seq());\n+    Thread* current_thread = Thread::current();\n+    if (current_thread->is_AttachListener_thread()) {\n+      \/\/ perform heapdump file merge operation in the current thread prevents us\n+      \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n+      \/\/ GC and other VM operations.\n+      merger.do_merge();\n+    } else {\n+      \/\/ otherwise, performs it by VM thread\n+      VM_HeapDumpMerge op(&merger);\n+      VMThread::execute(&op);\n+    }\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":35,"deletions":23,"binary":false,"changes":58,"status":"modified"}]}