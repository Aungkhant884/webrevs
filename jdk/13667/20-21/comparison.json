{"files":[{"patch":"@@ -485,0 +485,1 @@\n+  jlong parallel = HeapDumper::default_num_of_dump_threads();\n@@ -495,0 +496,9 @@\n+  if (_parallel.is_set()) {\n+    parallel = _parallel.value();\n+\n+    if (parallel <= 0) {\n+      output()->print_cr(\"Number of parallel dump thread must be > 0\");\n+      return;\n+    }\n+  }\n+\n@@ -499,2 +509,1 @@\n-  uint num_dump_thread = _parallel.is_set() ? (uint)_parallel.value() : HeapDumper::default_num_of_dump_threads();\n-  dumper.dump(_filename.value(), output(), (int) level, _overwrite.value(), num_dump_thread);\n+  dumper.dump(_filename.value(), output(), (int) level, _overwrite.value(), (uint)parallel);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1972,2 +1972,5 @@\n-  uint  num_active_workers = workers != nullptr ? workers->active_workers() : 0;\n-  uint requested_num_dump_thread = _num_dumper_threads;\n+  uint num_active_workers = workers != nullptr ? workers->active_workers() : 0;\n+  uint num_requested_dump_thread = _num_dumper_threads;\n+  bool can_parallel = can_parallel_dump();\n+  log_info(heapdump)(\"Reqeusted dump threads %u, active dump threads %u, \" \"parallelism %s\",\n+                      num_requested_dump_thread, num_active_workers, can_parallel ? \"true\" : \"false\");\n@@ -1976,2 +1979,2 @@\n-      requested_num_dump_thread <= 1 ||  \/\/ request serial dump?\n-     !can_parallel_dump()) {             \/\/ can not dump in parallel?\n+      num_requested_dump_thread <= 1 ||  \/\/ request serial dump?\n+     !can_parallel) {                    \/\/ can not dump in parallel?\n@@ -1983,1 +1986,1 @@\n-    _num_dumper_threads = clamp(requested_num_dump_thread, 2U, num_active_workers);\n+    _num_dumper_threads = clamp(num_requested_dump_thread, 2U, num_active_workers);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import jdk.test.lib.SA.SATestUtils;\n@@ -66,1 +65,3 @@\n-            LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\");\n+            LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\",\n+                                \"-XX:-UseDynamicNumberOfGCThreads\",\n+                                \"-XX:ParallelGCThreads=2\");\n@@ -69,0 +70,6 @@\n+            \/\/ Expect parallel heap dump\n+            if (Runtime.getRuntime().availableProcessors() > 1) {\n+                String output = theApp.getProcessStdout();\n+                Asserts.assertTrue(output.contains(\"Dump heap objects in parallel\"));\n+                Asserts.assertTrue(output.contains(\"Merge heap files complete\"));\n+            }\n","filename":"test\/hotspot\/jtreg\/serviceability\/HeapDump\/IntegrityHeapDumpTest.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpAllTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,4 +67,7 @@\n-        executor.execute(cmd);\n-\n-        verifyHeapDump(dump);\n-        dump.delete();\n+        OutputAnalyzer output = executor.execute(cmd);\n+        if (parallelNum <= 0) {\n+            output.shouldContain(\"Number of parallel dump thread must be > 0\");\n+        } else {\n+            verifyHeapDump(dump);\n+            dump.delete();\n+        }\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}