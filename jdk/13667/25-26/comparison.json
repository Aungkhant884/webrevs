{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -45,7 +46,0 @@\n-class HeapDumpParallel extends LingeredApp {\n-    public static void main(String[] args) {\n-        System.out.println(\"Hello world\");\n-        LingeredApp.main(args);\n-    }\n-}\n-\n@@ -53,1 +47,0 @@\n-    static HeapDumpParallel theApp;\n@@ -55,3 +48,5 @@\n-    private static void checkAndVerify(OutputAnalyzer out, LingeredApp app, File heapDumpFile, boolean expectSerial) {\n-        out.shouldHaveExitValue(0);\n-        out.shouldContain(\"Heap dump file created\");\n+    private static void checkAndVerify(OutputAnalyzer dcmdOut, LingeredApp app, File heapDumpFile, boolean expectSerial) throws IOException {\n+        dcmdOut.shouldHaveExitValue(0);\n+        dcmdOut.shouldContain(\"Heap dump file created\");\n+        OutputAnalyzer appOut = new OutputAnalyzer(app.getProcessStdout());\n+        appOut.shouldContain(\"[heapdump]\");\n@@ -59,2 +54,2 @@\n-            Asserts.assertTrue(app.getProcessStdout().contains(\"Dump heap objects in parallel\"));\n-            Asserts.assertTrue(app.getProcessStdout().contains(\"Merge heap files complete\"));\n+            appOut.shouldContain(\"Dump heap objects in parallel\");\n+            appOut.shouldContain(\"Merge heap files complete\");\n@@ -62,2 +57,2 @@\n-            Asserts.assertFalse(app.getProcessStdout().contains(\"Dump heap objects in parallel\"));\n-            Asserts.assertFalse(app.getProcessStdout().contains(\"Merge heap files complete\"));\n+            appOut.shouldNotContain(\"Dump heap objects in parallel\");\n+            appOut.shouldNotContain(\"Merge heap files complete\");\n@@ -71,0 +66,8 @@\n+    private static LingeredApp launchApp() throws IOException {\n+        LingeredApp theApp = new LingeredApp();\n+        LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\",\n+                             \"-XX:-UseDynamicNumberOfGCThreads\",\n+                             \"-XX:ParallelGCThreads=2\");\n+        return theApp;\n+    }\n+\n@@ -79,0 +82,1 @@\n+        LingeredApp theApp = launchApp();\n@@ -80,4 +84,0 @@\n-            theApp = new HeapDumpParallel();\n-            LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\",\n-                                \"-XX:-UseDynamicNumberOfGCThreads\",\n-                                \"-XX:ParallelGCThreads=2\");\n@@ -85,1 +85,1 @@\n-            OutputAnalyzer out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + -1);\n+            OutputAnalyzer out = attachJcmdHeapDump(heapDumpFile, theApp.getPid(), \"-parallel=\" + -1);\n@@ -89,2 +89,1 @@\n-            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + 0);\n-            checkAndVerify(out, theApp, heapDumpFile, true);\n+            test(heapDumpFile, \"-parallel=\" + 0, true);\n@@ -93,2 +92,1 @@\n-            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + 1);\n-            checkAndVerify(out, theApp, heapDumpFile, true);\n+            test(heapDumpFile,  \"-parallel=\" + 1, true);\n@@ -97,2 +95,1 @@\n-            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + Integer.MAX_VALUE);\n-            checkAndVerify(out, theApp, heapDumpFile, false);\n+            test(heapDumpFile, \"-parallel=\" + Integer.MAX_VALUE, false);\n@@ -101,2 +98,12 @@\n-            out = attachWith(heapDumpFile, theApp.getPid(), \"-gz=9 -overwrite -parallel=\" + Runtime.getRuntime().availableProcessors());\n-            checkAndVerify(out, theApp, heapDumpFile, false);\n+            test(heapDumpFile, \"-gz=9 -overwrite -parallel=\" + Runtime.getRuntime().availableProcessors(), false);\n+        } finally {\n+            theApp.stopApp();\n+        }\n+    }\n+\n+    private static void test(File heapDumpFile, String arg, boolean expectSerial) throws Exception {\n+        LingeredApp theApp = launchApp();\n+        try {\n+            OutputAnalyzer dcmdOut = attachJcmdHeapDump(heapDumpFile, theApp.getPid(), arg);\n+            theApp.stopApp();\n+            checkAndVerify(dcmdOut, theApp, heapDumpFile, expectSerial);\n@@ -104,1 +111,1 @@\n-            LingeredApp.stopApp(theApp);\n+            theApp.stopApp();\n@@ -108,13 +115,5 @@\n-    private static OutputAnalyzer attachWith(File heapDumpFile, long lingeredAppPid, String arg) throws Exception {\n-        \/\/jcmd <pid> GC.heap_dump -parallel=cpucount <file_path>\n-        JDKToolLauncher launcher = JDKToolLauncher\n-                .createUsingTestJDK(\"jcmd\")\n-                .addToolArg(Long.toString(lingeredAppPid))\n-                .addToolArg(\"GC.heap_dump\")\n-                .addToolArg(arg)\n-                .addToolArg(heapDumpFile.getAbsolutePath());\n-\n-        ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n-        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n-        OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);\n-        return output;\n+    private static OutputAnalyzer attachJcmdHeapDump(File heapDumpFile, long lingeredAppPid, String arg) throws Exception {\n+        \/\/ e.g. jcmd <pid> GC.heap_dump -parallel=cpucount <file_path>\n+        System.out.println(\"Testing pid \" + lingeredAppPid);\n+        PidJcmdExecutor executor = new PidJcmdExecutor(\"\" + lingeredAppPid);\n+        return executor.execute(\"GC.heap_dump \" + arg + \" \" + heapDumpFile.getAbsolutePath());\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpParallelTest.java","additions":41,"deletions":42,"binary":false,"changes":83,"status":"modified"}]}