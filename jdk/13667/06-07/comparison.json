{"files":[{"patch":"@@ -1488,22 +1488,4 @@\n-private:\n-  Monitor* _lock;\n-  uint   _dumper_number;\n-  uint   _complete_number;\n-\n-public:\n-  DumperController(uint number) :\n-    _lock(new (std::nothrow) PaddedMonitor(Mutex::safepoint, \"DumperController_lock\")),\n-    _dumper_number(number),\n-    _complete_number(0) { }\n-\n-  ~DumperController() { delete _lock; }\n-\n-  void dumper_complete(DumpWriter* local_writer, DumpWriter* global_writer) {\n-    MonitorLocker ml(_lock, Mutex::_no_safepoint_check_flag);\n-    _complete_number++;\n-    \/\/ propagate local error to global if any\n-    if (local_writer->has_error()) {\n-    global_writer->set_error(local_writer->error());\n-    }\n-    ml.notify();\n-  }\n+ private:\n+   Monitor* _lock;\n+   uint   _dumper_number;\n+   uint   _complete_number;\n@@ -1511,6 +1493,24 @@\n-  void wait_all_dumpers_complete() {\n-    MonitorLocker ml(_lock, Mutex::_no_safepoint_check_flag);\n-    while (_complete_number != _dumper_number) {\n-      ml.wait();\n-    }\n-  }\n+ public:\n+   DumperController(uint number) :\n+     _lock(new (std::nothrow) PaddedMonitor(Mutex::safepoint, \"DumperController_lock\")),\n+     _dumper_number(number),\n+     _complete_number(0) { }\n+\n+   ~DumperController() { delete _lock; }\n+\n+   void dumper_complete(DumpWriter* local_writer, DumpWriter* global_writer) {\n+     MonitorLocker ml(_lock, Mutex::_no_safepoint_check_flag);\n+     _complete_number++;\n+     \/\/ propagate local error to global if any\n+     if (local_writer->has_error()) {\n+      global_writer->set_error(local_writer->error());\n+     }\n+     ml.notify();\n+   }\n+\n+   void wait_all_dumpers_complete() {\n+     MonitorLocker ml(_lock, Mutex::_no_safepoint_check_flag);\n+     while (_complete_number != _dumper_number) {\n+        ml.wait();\n+     }\n+   }\n@@ -1519,1 +1519,0 @@\n-\/\/ Merge segmented dump files into a complete one\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/\/ HeapDumper is used to dump the java heap to file in HPROF binary format:\n+\/\/ HeapDumper is used to dump the java heap to file in HPROF binary format\n","filename":"src\/hotspot\/share\/services\/heapDumper.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n- * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n@@ -29,1 +28,0 @@\n-#include \"oops\/klass.inline.hpp\"\n@@ -34,1 +32,0 @@\n-#include \"services\/heapDumper.hpp\"\n@@ -37,0 +34,1 @@\n+\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n- * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n","filename":"src\/hotspot\/share\/services\/heapDumperCompression.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}