{"files":[{"patch":"@@ -1727,9 +1727,2 @@\n-  bool can_parallel_dump() {\n-    const char* base_path = writer()->get_file_path();\n-    assert(base_path != nullptr, \"sanity check\");\n-    if ((strlen(base_path) + 7\/*.p\\d\\d\\d\\d\\0*\/) >= JVM_MAXPATHLEN) {\n-      \/\/ no extra path room for separate heap dump files\n-      return false;\n-    }\n-    return true;\n-  }\n+  bool can_parallel_dump(WorkerThreads* workers);\n+\n@@ -1926,0 +1919,26 @@\n+bool VM_HeapDumper::can_parallel_dump(WorkerThreads* workers) {\n+  bool can_parallel = true;\n+  uint num_active_workers = workers != nullptr ? workers->active_workers() : 0;\n+  uint num_requested_dump_threads = _num_dumper_threads;\n+  \/\/ check if we can dump in parallel based on requested and active threads\n+  if (num_active_workers <= 1 || num_requested_dump_threads <= 1) {\n+    _num_dumper_threads = 1;\n+    can_parallel = false;\n+  } else {\n+    \/\/ check if we have extra path room to accommodate segmented heap files\n+    const char* base_path = writer()->get_file_path();\n+    assert(base_path != nullptr, \"sanity check\");\n+    if ((strlen(base_path) + 7\/*.p\\d\\d\\d\\d\\0*\/) >= JVM_MAXPATHLEN) {\n+      _num_dumper_threads = 1;\n+      can_parallel = false;\n+    } else {\n+      _num_dumper_threads = clamp(num_requested_dump_threads, 2U, num_active_workers);\n+    }\n+  }\n+\n+  log_info(heapdump)(\"Requested dump threads %u, active dump threads %u, \"\n+                     \"actual dump threads %u, parallelism %s\",\n+                     num_requested_dump_threads, num_active_workers,\n+                     _num_dumper_threads, can_parallel ? \"true\" : \"false\");\n+  return can_parallel;\n+}\n@@ -1972,11 +1991,1 @@\n-  uint num_active_workers = workers != nullptr ? workers->active_workers() : 0;\n-  uint num_requested_dump_thread = _num_dumper_threads;\n-  bool can_parallel = can_parallel_dump();\n-  log_info(heapdump)(\"Requested dump threads %u, active dump threads %u, \" \"parallelism %s\",\n-                      num_requested_dump_thread, num_active_workers, can_parallel ? \"true\" : \"false\");\n-\n-  if (num_active_workers <= 1 ||         \/\/ serial gc?\n-      num_requested_dump_thread <= 1 ||  \/\/ request serial dump?\n-     !can_parallel) {                    \/\/ can not dump in parallel?\n-    \/\/ Use serial dump, set dumper threads and writer threads number to 1.\n-    _num_dumper_threads = 1;\n+  if (!can_parallel_dump(workers)) {\n@@ -1985,2 +1994,0 @@\n-    \/\/ Use parallel dump otherwise\n-    _num_dumper_threads = clamp(num_requested_dump_thread, 2U, num_active_workers);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * @summary Verify the generated heap dump is valid and complete after parallel heap dump\n+ * @summary Verify the integrity of generated heap dump and capability of parallel dump\n@@ -57,1 +57,1 @@\n-        Asserts.assertTrue(out.getStdout().contains(\"Heap dump file created\"));\n+        out.shouldContain(\"Heap dump file created\");\n@@ -86,1 +86,1 @@\n-            Asserts.assertTrue(out.getStdout().contains(\"Invalid number of parallel dump threads.\"));\n+            out.shouldContain(\"Invalid number of parallel dump threads.\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpParallelTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}