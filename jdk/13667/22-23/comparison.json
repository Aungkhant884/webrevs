{"files":[{"patch":"@@ -499,2 +499,2 @@\n-    if (parallel <= 0) {\n-      output()->print_cr(\"Number of parallel dump thread must be > 0\");\n+    if (parallel < 0) {\n+      output()->print_cr(\"Invalid number of parallel dump threads.\");\n@@ -502,0 +502,3 @@\n+    } else if (parallel == 0) {\n+      \/\/ 0 implies to disable parallel heap dump, in such case, we use serial dump instead\n+      parallel = 1;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.util.List;\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-import jdk.test.lib.hprof.HprofParser;\n-\n-\/**\n- * @test\n- * @bug 8306441\n- * @summary Verify the generated heap dump is valid and complete after parallel heap dump\n- * @library \/test\/lib\n- * @run driver IntegrityHeapDumpTest\n- *\/\n-\n-class IntegrityTest extends LingeredApp {\n-    public static void main(String[] args) {\n-        System.out.println(\"Hello world\");\n-        LingeredApp.main(args);\n-    }\n-}\n-\n-public class IntegrityHeapDumpTest {\n-    static IntegrityTest theApp;\n-\n-    public static void main(String[] args) throws Exception {\n-        String heapDumpFileName = \"parallelHeapDump.bin\";\n-\n-        File heapDumpFile = new File(heapDumpFileName);\n-        if (heapDumpFile.exists()) {\n-            heapDumpFile.delete();\n-        }\n-\n-        try {\n-            theApp = new IntegrityTest();\n-            LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\",\n-                                \"-XX:-UseDynamicNumberOfGCThreads\",\n-                                \"-XX:ParallelGCThreads=2\");\n-            attachDumpAndVerify(heapDumpFile, theApp.getPid());\n-        } finally {\n-            \/\/ Expect parallel heap dump\n-            if (Runtime.getRuntime().availableProcessors() > 1) {\n-                String output = theApp.getProcessStdout();\n-                Asserts.assertTrue(output.contains(\"Dump heap objects in parallel\"));\n-                Asserts.assertTrue(output.contains(\"Merge heap files complete\"));\n-            }\n-            LingeredApp.stopApp(theApp);\n-        }\n-    }\n-\n-    private static void attachDumpAndVerify(File heapDumpFile,\n-                                            long lingeredAppPid) throws Exception {\n-\n-        \/\/jcmd <pid> GC.heap_dump -parallel=cpucount <file_path>\n-        JDKToolLauncher launcher = JDKToolLauncher\n-                .createUsingTestJDK(\"jcmd\")\n-                .addToolArg(Long.toString(lingeredAppPid))\n-                .addToolArg(\"GC.heap_dump\")\n-                .addToolArg(\"-parallel=\" + Runtime.getRuntime().availableProcessors())\n-                .addToolArg(heapDumpFile.getAbsolutePath());\n-\n-        ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n-        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n-        OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);\n-        String stdoutStr = output.getStdout();\n-        String stderrStr = output.getStderr();\n-        System.out.println(\"stdout:\");\n-        System.out.println(stdoutStr);\n-        System.out.println(\"stderr:\");\n-        System.out.println(stderrStr);\n-        output.shouldHaveExitValue(0);\n-        Asserts.assertTrue(stdoutStr.contains(\"Heap dump file created\"));\n-        Asserts.assertTrue(stderrStr.equals(\"\"));\n-\n-        verifyHeapDump(heapDumpFile);\n-    }\n-\n-    private static void verifyHeapDump(File dump) {\n-        Asserts.assertTrue(dump.exists() && dump.isFile(), \"Could not create dump file \" + dump.getAbsolutePath());\n-        try {\n-            File out = HprofParser.parse(dump);\n-\n-            Asserts.assertTrue(out != null && out.exists() && out.isFile(), \"Could not find hprof parser output file\");\n-            List<String> lines = Files.readAllLines(out.toPath());\n-            Asserts.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n-            for (String line : lines) {\n-                Asserts.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve object.*constantPoolOop.*).*\"));\n-            }\n-\n-            out.delete();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Asserts.fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/serviceability\/HeapDump\/IntegrityHeapDumpTest.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    public void run(CommandExecutor executor, boolean overwrite, int parallelNum) throws IOException {\n+    public void run(CommandExecutor executor, boolean overwrite) throws IOException {\n@@ -49,1 +49,1 @@\n-        super.run(executor, overwrite, parallelNum);\n+        super.run(executor, overwrite);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpAllTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import jdk.test.lib.hprof.HprofParser;\n+\n+\/**\n+ * @test\n+ * @bug 8306441\n+ * @summary Verify the generated heap dump is valid and complete after parallel heap dump\n+ * @library \/test\/lib\n+ * @run driver HeapDumpParallelTest\n+ *\/\n+\n+class HeapDumpParallel extends LingeredApp {\n+    public static void main(String[] args) {\n+        System.out.println(\"Hello world\");\n+        LingeredApp.main(args);\n+    }\n+}\n+\n+public class HeapDumpParallelTest {\n+    static HeapDumpParallel theApp;\n+\n+    private static void checkAndVerify(OutputAnalyzer out, LingeredApp app, File heapDumpFile, boolean expectSerial) {\n+        out.shouldHaveExitValue(0);\n+        Asserts.assertTrue(out.getStdout().contains(\"Heap dump file created\"));\n+        if (!expectSerial && Runtime.getRuntime().availableProcessors() > 1) {\n+            Asserts.assertTrue(app.getProcessStdout().contains(\"Dump heap objects in parallel\"));\n+            Asserts.assertTrue(app.getProcessStdout().contains(\"Merge heap files complete\"));\n+        } else {\n+            Asserts.assertFalse(app.getProcessStdout().contains(\"Dump heap objects in parallel\"));\n+            Asserts.assertFalse(app.getProcessStdout().contains(\"Merge heap files complete\"));\n+        }\n+        verifyHeapDump(heapDumpFile);\n+        if (heapDumpFile.exists()) {\n+            heapDumpFile.delete();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String heapDumpFileName = \"parallelHeapDump.bin\";\n+\n+        File heapDumpFile = new File(heapDumpFileName);\n+        if (heapDumpFile.exists()) {\n+            heapDumpFile.delete();\n+        }\n+\n+        try {\n+            theApp = new HeapDumpParallel();\n+            LingeredApp.startApp(theApp, \"-Xlog:heapdump\", \"-Xmx512m\",\n+                                \"-XX:-UseDynamicNumberOfGCThreads\",\n+                                \"-XX:ParallelGCThreads=2\");\n+            \/\/ Expect error message\n+            OutputAnalyzer out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + -1);\n+            Asserts.assertTrue(out.getStdout().contains(\"Invalid number of parallel dump threads.\"));\n+\n+            \/\/ Expect serial dump because 0 implies to disable parallel dump\n+            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + 0);\n+            checkAndVerify(out, theApp, heapDumpFile, true);\n+\n+            \/\/ Expect serial dump\n+            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + 1);\n+            checkAndVerify(out, theApp, heapDumpFile, true);\n+\n+            \/\/ Expect parallel dump\n+            out = attachWith(heapDumpFile, theApp.getPid(), \"-parallel=\" + Integer.MAX_VALUE);\n+            checkAndVerify(out, theApp, heapDumpFile, false);\n+\n+            \/\/ Expect parallel dump\n+            out = attachWith(heapDumpFile, theApp.getPid(), \"-gz=9 -overwrite -parallel=\" + Runtime.getRuntime().availableProcessors());\n+            checkAndVerify(out, theApp, heapDumpFile, false);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+    }\n+\n+    private static OutputAnalyzer attachWith(File heapDumpFile, long lingeredAppPid, String arg) throws Exception {\n+        \/\/jcmd <pid> GC.heap_dump -parallel=cpucount <file_path>\n+        JDKToolLauncher launcher = JDKToolLauncher\n+                .createUsingTestJDK(\"jcmd\")\n+                .addToolArg(Long.toString(lingeredAppPid))\n+                .addToolArg(\"GC.heap_dump\")\n+                .addToolArg(arg)\n+                .addToolArg(heapDumpFile.getAbsolutePath());\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());\n+        processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);\n+        OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);\n+        return output;        \n+    }\n+\n+    private static void verifyHeapDump(File dump) {\n+        Asserts.assertTrue(dump.exists() && dump.isFile(), \"Could not create dump file \" + dump.getAbsolutePath());\n+        try {\n+            File out = HprofParser.parse(dump);\n+\n+            Asserts.assertTrue(out != null && out.exists() && out.isFile(), \"Could not find hprof parser output file\");\n+            List<String> lines = Files.readAllLines(out.toPath());\n+            Asserts.assertTrue(lines.size() > 0, \"hprof parser output file is empty\");\n+            for (String line : lines) {\n+                Asserts.assertFalse(line.matches(\".*WARNING(?!.*Failed to resolve object.*constantPoolOop.*).*\"));\n+            }\n+\n+            out.delete();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            Asserts.fail(\"Could not parse dump file \" + dump.getAbsolutePath());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpParallelTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-    public void run(CommandExecutor executor, boolean overwrite, int parallelNum) throws IOException {\n+    public void run(CommandExecutor executor, boolean overwrite) throws IOException {\n@@ -61,13 +61,5 @@\n-        String cmd = \"GC.heap_dump \" +\n-                    (overwrite ? \"-overwrite \" : \" \") +\n-                    heapDumpArgs +\n-                    \" -parallel=\" + parallelNum +\n-                    \" \" +\n-                    dump.getAbsolutePath();\n-        OutputAnalyzer output = executor.execute(cmd);\n-        if (parallelNum <= 0) {\n-            output.shouldContain(\"Number of parallel dump thread must be > 0\");\n-        } else {\n-            verifyHeapDump(dump);\n-            dump.delete();\n-        }\n+        String cmd = \"GC.heap_dump \" + (overwrite ? \"-overwrite \" : \"\") + heapDumpArgs + \" \" + dump.getAbsolutePath();\n+        executor.execute(cmd);\n+\n+        verifyHeapDump(dump);\n+        dump.delete();\n@@ -98,1 +90,1 @@\n-        run(new PidJcmdExecutor(), false, 1);\n+        run(new PidJcmdExecutor(), false);\n@@ -103,11 +95,1 @@\n-        run(new PidJcmdExecutor(), true, 1);\n-    }\n-\n-    \/* Parallel variant*\/\n-    @Test\n-    public void pidParallel() throws IOException {\n-        run(new PidJcmdExecutor(), false, Runtime.getRuntime().availableProcessors());\n-        run(new PidJcmdExecutor(), true, Runtime.getRuntime().availableProcessors());\n-        run(new PidJcmdExecutor(), false, -1);\n-        run(new PidJcmdExecutor(), false, 0);\n-        run(new PidJcmdExecutor(), false, Integer.MAX_VALUE);\n+        run(new PidJcmdExecutor(), true);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/HeapDumpTest.java","additions":9,"deletions":27,"binary":false,"changes":36,"status":"modified"}]}