{"files":[{"patch":"@@ -330,0 +330,1 @@\n+  virtual bool is_AttachListener_thread() const      { return false; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -374,1 +374,1 @@\n-static void attach_listener_thread_entry(JavaThread* thread, TRAPS) {\n+void AttachListenerThread::thread_entry(JavaThread* thread, TRAPS) {\n@@ -463,1 +463,1 @@\n-  JavaThread* thread = new JavaThread(&attach_listener_thread_entry);\n+  JavaThread* thread = new AttachListenerThread();\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/javaThread.inline.hpp\"\n@@ -61,0 +62,9 @@\n+class AttachListenerThread : public JavaThread {\n+private:\n+  static void thread_entry(JavaThread* thread, TRAPS);\n+\n+public:\n+  AttachListenerThread() : JavaThread(&AttachListenerThread::thread_entry) {}\n+  bool is_AttachListener_thread() const { return true; }\n+};\n+\n","filename":"src\/hotspot\/share\/services\/attachListener.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -474,1 +474,2 @@\n-  _parallel(\"-parallel\", \"Number of parallel dump thread, it should be less than ParallelGCThread\",\n+  _parallel(\"-parallel\", \"Number of parallel threads to use for heap dump. The VM \"\n+                          \"will try to use the specified number of threads, but might use fewer.\",\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1520,2 +1520,2 @@\n-\/\/ The VM operation merges separate dump files into a complete one\n-class VM_HeapDumpMerge : public VM_Operation {\n+\/\/ DumpMerger merges separate dump files into a complete one\n+class DumpMerger {\n@@ -1530,0 +1530,1 @@\n+\n@@ -1531,6 +1532,4 @@\n-  VM_HeapDumpMerge(const char* path, DumpWriter* writer, int dump_seq) :\n-    _writer(writer), _path(path), _has_error(_writer->has_error()), _dump_seq(dump_seq) {}\n-  VMOp_Type type() const { return VMOp_HeapDumpMerge; }\n-  \/\/ heap dump merge could happen outside safepoint\n-  virtual bool evaluate_at_safepoint() const { return false; }\n-  void doit();\n+  DumpMerger(const char* path, DumpWriter* writer, int dump_seq)\n+    : _writer(writer), _path(path), _has_error(_writer->has_error()), _dump_seq(dump_seq) {}\n+\n+  void do_merge();\n@@ -1539,1 +1538,1 @@\n-void VM_HeapDumpMerge::merge_done() {\n+void DumpMerger::merge_done() {\n@@ -1548,1 +1547,1 @@\n-void VM_HeapDumpMerge::merge_file(char* path) {\n+void DumpMerger::merge_file(char* path) {\n@@ -1576,1 +1575,1 @@\n-void VM_HeapDumpMerge::doit() {\n+void DumpMerger::do_merge() {\n@@ -1601,0 +1600,14 @@\n+\/\/ The VM operation wraps DumpMerger so that it could be performed by VM thread\n+class VM_HeapDumpMerge : public VM_Operation {\n+private:\n+  DumpMerger* _merger;\n+public:\n+  VM_HeapDumpMerge(DumpMerger* merger) : _merger(merger) {}\n+  VMOp_Type type() const { return VMOp_HeapDumpMerge; }\n+  \/\/ heap dump merge could happen outside safepoint\n+  virtual bool evaluate_at_safepoint() const { return false; }\n+  void doit() {\n+    _merger->do_merge();\n+  }\n+};\n+\n@@ -1966,0 +1979,1 @@\n+\n@@ -1971,0 +1985,1 @@\n+\n@@ -2047,4 +2062,6 @@\n-    HeapObjectDumper obj_dumper(dw);\n-    _poi->object_iterate(&obj_dumper, worker_id);\n-    dw->finish_dump_segment();\n-    dw->flush();\n+    if (!dw->has_error()) {\n+      HeapObjectDumper obj_dumper(dw);\n+      _poi->object_iterate(&obj_dumper, worker_id);\n+      dw->finish_dump_segment();\n+      dw->flush();\n+    }\n@@ -2176,2 +2193,12 @@\n-    VM_HeapDumpMerge op(path, &writer, dumper.dump_seq());\n-    VMThread::execute(&op);\n+    DumpMerger merger(path, &writer, dumper.dump_seq());\n+    Thread* current_thread = Thread::current();\n+    \/\/ perform heapdump file merge operation in the current thread prevents us\n+    \/\/ from occupying the VM Thread, which in turn affects the occurrence of\n+    \/\/ GC and other VM operations.\n+    if (current_thread->is_AttachListener_thread()) {\n+      merger.do_merge();\n+    } else {\n+      \/\/ otherwise, performs it by VM thread\n+      VM_HeapDumpMerge op(&merger);\n+      VMThread::execute(&op);\n+    }\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":44,"deletions":17,"binary":false,"changes":61,"status":"modified"}]}