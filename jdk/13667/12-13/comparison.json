{"files":[{"patch":"@@ -623,1 +623,1 @@\n-  DumpWriter(FileWriter* writer, AbstractCompressor* compressor);\n+  DumpWriter(const char* path, bool overwrite, AbstractCompressor* compressor);\n@@ -638,1 +638,1 @@\n-DumpWriter::DumpWriter(FileWriter* writer, AbstractCompressor* compressor) :\n+DumpWriter::DumpWriter(const char* path, bool overwrite, AbstractCompressor* compressor) :\n@@ -640,1 +640,1 @@\n-  _writer(writer),\n+  _writer(new (std::nothrow) FileWriter(path, overwrite)),\n@@ -679,0 +679,3 @@\n+  if (_writer != NULL) {\n+    delete _writer;\n+  }\n@@ -1573,1 +1576,1 @@\n-  int cnt = 0;\n+  size_t cnt = 0;\n@@ -1653,1 +1656,1 @@\n-  DumpWriter* create_dump_writer();\n+  DumpWriter* create_local_writer();\n@@ -1970,1 +1973,1 @@\n-    work(0);\n+    work(VMDumperWorkerId);\n@@ -1988,1 +1991,1 @@\n-DumpWriter* VM_HeapDumper::create_dump_writer() {\n+DumpWriter* VM_HeapDumper::create_local_writer() {\n@@ -1999,3 +2002,2 @@\n-  FileWriter* file_writer = new (std::nothrow) FileWriter(path, writer()->is_overwrite());\n-  DumpWriter* new_writer = new DumpWriter(file_writer, compressor);\n-  return new_writer;\n+  DumpWriter* local_writer = new DumpWriter(path, writer()->is_overwrite(), compressor);\n+  return local_writer;\n@@ -2060,1 +2062,1 @@\n-    assert(worker_id == 0, \"must be\");\n+    assert(is_vm_dumper(worker_id), \"must be\");\n@@ -2073,3 +2075,3 @@\n-    DumpWriter* dw = is_vm_dumper(worker_id) ? writer() : create_dump_writer();\n-    if (!dw->has_error()) {\n-      HeapObjectDumper obj_dumper(dw);\n+    DumpWriter* local_writer = is_vm_dumper(worker_id) ? writer() : create_local_writer();\n+    if (!local_writer->has_error()) {\n+      HeapObjectDumper obj_dumper(local_writer);\n@@ -2077,2 +2079,2 @@\n-      dw->finish_dump_segment();\n-      dw->flush();\n+      local_writer->finish_dump_segment();\n+      local_writer->flush();\n@@ -2083,1 +2085,1 @@\n-      _dumper_controller->dumper_complete(dw, writer());\n+      _dumper_controller->dumper_complete(local_writer, writer());\n@@ -2172,1 +2174,1 @@\n-  DumpWriter writer(new (std::nothrow) FileWriter(path, overwrite), compressor);\n+  DumpWriter writer(path, overwrite, compressor);\n@@ -2190,0 +2192,19 @@\n+  \/\/ For serial dump, once VM_HeapDumper completes, the whole heap dump process\n+  \/\/ is done, no further phases needed. For parallel dump, the whole heap dump\n+  \/\/ process is done in two phases\n+  \/\/\n+  \/\/ Phase 1: Concurrent threads directly write data to multiple heap files.\n+  \/\/          This is done by VM_HeapDumper, which is performed within safepoint.\n+  \/\/\n+  \/\/ Phase 2: Merge multiple heap files into one complete heap dump file.\n+  \/\/          This is done within HeapDumpMergeClosure by attach listener thread,\n+  \/\/          this prevents us from occupying the VM Thread, which in turn affects\n+  \/\/          the occurrence of GC and other VM operations.\n+  if (dumper.is_parallel_dump()) {\n+    Thread* calling_thread = Thread::current();\n+    ThreadsListHandle tlh(calling_thread);\n+    HeapDumpMergeClosure closure(path, &writer, dumper.dump_seq());\n+    Handshake::execute(&closure, AttachListener::attach_listener_thread());\n+    set_error(writer.error());\n+  }\n+\n@@ -2203,12 +2224,0 @@\n-  \/\/ merge segmented dump files into a complete one, this is not required for serial dump\n-  if (dumper.is_parallel_dump()) {\n-    Thread* calling_thread = Thread::current();\n-    ThreadsListHandle tlh(calling_thread);\n-    \/\/ perform heapdump file merge operation via attach listener thread instead of\n-    \/\/ posting a VM operation, this prevents us from occupying the VM Thread, which\n-    \/\/ in turn affects the occurrence of GC and other VM operations.\n-    HeapDumpMergeClosure closure(path, &writer, dumper.dump_seq());\n-    Handshake::execute(&closure, AttachListener::attach_listener_thread());\n-    set_error(writer.error());\n-  }\n-\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":39,"deletions":30,"binary":false,"changes":69,"status":"modified"}]}