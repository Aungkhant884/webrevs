{"files":[{"patch":"@@ -873,0 +873,4 @@\n+  bool _has_error;\n+\n+  void merge_file(char* path);\n+  void merge_done();\n@@ -875,1 +879,1 @@\n-    : _writer(writer), _path(path) {}\n+    : _writer(writer), _path(path), _has_error(_writer->has_error()) {}\n@@ -1239,1 +1243,38 @@\n-void VM_HeapDumpMerge::doit(){\n+void VM_HeapDumpMerge::merge_done() {\n+  \/\/ Writes the HPROF_HEAP_DUMP_END record.\n+  if (!_has_error) {\n+    DumperSupport::end_of_dump(_writer);\n+    _writer->flush();\n+  }\n+  dump_seq = 0; \/\/reset\n+}\n+\n+void VM_HeapDumpMerge::merge_file(char* path) {\n+  assert(!SafepointSynchronize::is_at_safepoint(), \"merging happens outside safepoint\");\n+  TraceTime timer(\"Merge segmented heap file\", TRACETIME_LOG(Info, heapdump));\n+\n+  fileStream part_fs(path, \"r\");\n+  if (!part_fs.is_open()) {\n+    log_error(heapdump)(\"Can not open segmented heap file %s during merging\", path);\n+    _writer->set_error(\"Can not open segmented heap file during merging\");\n+    _has_error = true;\n+    return;\n+  }\n+\n+  jlong total = 0;\n+  int cnt = 0;\n+  char read_buf[4096];\n+  while ((cnt = part_fs.read(read_buf, 1, 4096)) != 0) {\n+    _writer->write_raw(read_buf, cnt);\n+    total += cnt;\n+  }\n+\n+  _writer->flush();\n+  if (part_fs.fileSize() != total) {\n+    log_error(heapdump)(\"Merged heap dump %s is incomplete\", path);\n+    _writer->set_error(\"Merged heap dump is incomplete\");\n+    _has_error = true;\n+  }\n+}\n+\n+void VM_HeapDumpMerge::doit() {\n@@ -1242,2 +1283,0 @@\n-  char path[JVM_MAXPATHLEN];\n-  bool has_error = _writer->has_error();\n@@ -1250,0 +1289,2 @@\n+  \/\/ merge segmented heap file and remove it anyway\n+  char path[JVM_MAXPATHLEN];\n@@ -1253,25 +1294,2 @@\n-\n-    if (!has_error) {\n-      TraceTime timer1(\"Merge segmented heap file\", TRACETIME_LOG(Info, heapdump));\n-      fileStream part_fs(path, \"r\");\n-      jlong total = 0;\n-      int cnt = 0;\n-      char read_buf[4096];\n-\n-      if (!part_fs.is_open()) {\n-          log_error(heapdump)(\"Failed to open %s during merging\",  path);\n-          _writer->set_error(\"Failed to merge heap dump: Can not open\");\n-          has_error = true;\n-          goto error;\n-      }\n-      while ((cnt = part_fs.read(read_buf, 1, 1024)) != 0) {\n-        _writer->write_raw(read_buf, cnt);\n-        total += cnt;\n-      }\n-      _writer->flush();\n-      if (part_fs.fileSize() != total) {\n-        log_error(heapdump)(\"Merge heap dump incomplete %s\", path);\n-        _writer->set_error(\"Failed to merge heap dump: Incomplete\");\n-        has_error = true;\n-        goto error;\n-      }\n+    if (!_has_error) {\n+      merge_file(path);\n@@ -1279,1 +1297,0 @@\n-error:\n@@ -1285,10 +1302,1 @@\n-\n-  if (!has_error) {\n-    \/\/ Writes the HPROF_HEAP_DUMP_END record.\n-    DumperSupport::end_of_dump(_writer);\n-\n-    \/\/ We are actually done here.\n-    _writer->flush();\n-  }\n-\n-  dump_seq = 0; \/\/reset\n+  merge_done();\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":48,"deletions":40,"binary":false,"changes":88,"status":"modified"}]}