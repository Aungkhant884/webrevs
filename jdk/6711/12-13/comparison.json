{"files":[{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.IllegalBlockingModeException;\n+import java.nio.channels.Pipe;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.SelectableChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.lang.String.format;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+class AbstractTransferTo {\n+    private static final int MIN_SIZE      = 10_000;\n+    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n+\n+    private static final int ITERATIONS = 10;\n+\n+    static final int NUM_WRITES = 3*1024;\n+    static final int BYTES_PER_WRITE = 1024*1024;\n+    static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n+\n+    static final Random RND = RandomFactory.getRandom();\n+\n+    static final Path CWD = Path.of(\".\");\n+\n+    \/*\n+     * Testing API compliance: input stream must throw NullPointerException\n+     * when parameter \"out\" is null.\n+     *\/\n+    @Test(dataProvider = \"inputStreamProviders\")\n+    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n+        \/\/ tests empty input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n+\n+        \/\/ tests single-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n+\n+        \/\/ tests dual-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n+    }\n+\n+    \/*\n+     * Testing API compliance: complete content of input stream must be\n+     * transferred to output stream.\n+     *\/\n+    @Test(dataProvider = \"streamCombinations\")\n+    public void testStreamContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider) throws Exception {\n+        \/\/ tests empty input stream\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n+\n+        \/\/ tests input stream with a length between 1k and 4k\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n+\n+        \/\/ tests input stream with several data chunks, as 16k is more than a\n+        \/\/ single chunk can hold\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n+\n+        \/\/ tests randomly chosen starting positions within source and\n+        \/\/ target stream\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n+            int posIn = RND.nextInt(inBytes.length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n+        }\n+\n+        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n+\n+        \/\/ tests writing beyond target EOF (must extend output stream)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n+    }\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i.e., compares the bytes\n+     * actually transferred to those expected. The position of the input and\n+     * output streams before the transfer are zero (BOF).\n+     *\/\n+    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n+    }\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i.e. compares the bytes\n+     * actually transferred to those expected. The positions of the input and\n+     * output streams before the transfer are provided by the caller.\n+     *\/\n+    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n+        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n+        try (InputStream in = inputStreamProvider.input(inBytes);\n+            OutputStream out = outputStreamProvider.output(recorder::set)) {\n+            \/\/ skip bytes until starting position\n+            in.skipNBytes(posIn);\n+            out.write(new byte[posOut]);\n+\n+            long reported = in.transferTo(out);\n+            int count = inBytes.length - posIn;\n+\n+            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n+\n+            byte[] outBytes = recorder.get().get();\n+            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n+                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n+        }\n+    }\n+\n+    \/*\n+     * Creates an array of random size (between min and min + maxRandomAdditive)\n+     * filled with random bytes\n+     *\/\n+    static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n+        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n+        RND.nextBytes(bytes);\n+        return bytes;\n+    }\n+\n+    interface InputStreamProvider {\n+        InputStream input(byte... bytes) throws Exception;\n+    }\n+\n+    interface OutputStreamProvider {\n+        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n+    }\n+\n+    \/*\n+     * Creates a provider for an input stream which wraps a readable byte\n+     * channel but is not a file channel\n+     *\/\n+    static InputStreamProvider readableByteChannelInput() {\n+        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n+    }\n+\n+    \/*\n+     * Creates a provider for an output stream which wraps a file channel\n+     *\/\n+    static OutputStreamProvider fileChannelOutput() {\n+        return spy -> {\n+            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n+            FileChannel fileChannel = FileChannel.open(path, WRITE);\n+            spy.accept(() -> {\n+                try {\n+                    return Files.readAllBytes(path);\n+                } catch (IOException e) {\n+                    throw new AssertionError(\"Failed to verify output file\", e);\n+                }\n+            });\n+            return Channels.newOutputStream(fileChannel);\n+        };\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/AbstractTransferTo.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -70,13 +70,1 @@\n-public class TransferTo {\n-    private static final int MIN_SIZE      = 10_000;\n-    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n-\n-    private static final int ITERATIONS = 10;\n-\n-    private static final int NUM_WRITES = 3*1024;\n-    private static final int BYTES_PER_WRITE = 1024*1024;\n-    private static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n-\n-    private static final Random RND = RandomFactory.getRandom();\n-\n-    private static final Path CWD = Path.of(\".\");\n+public class TransferTo extends AbstractTransferTo {\n@@ -118,49 +106,0 @@\n-    \/*\n-     * Testing API compliance: input stream must throw NullPointerException\n-     * when parameter \"out\" is null.\n-     *\/\n-    @Test(dataProvider = \"inputStreamProviders\")\n-    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n-        \/\/ tests empty input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n-\n-        \/\/ tests single-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n-\n-        \/\/ tests dual-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n-    }\n-\n-    \/*\n-     * Testing API compliance: complete content of input stream must be\n-     * transferred to output stream.\n-     *\/\n-    @Test(dataProvider = \"streamCombinations\")\n-    public void testStreamContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider) throws Exception {\n-        \/\/ tests empty input stream\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n-\n-        \/\/ tests input stream with a length between 1k and 4k\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n-\n-        \/\/ tests input stream with several data chunks, as 16k is more than a\n-        \/\/ single chunk can hold\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n-\n-        \/\/ tests randomly chosen starting positions within source and\n-        \/\/ target stream\n-        for (int i = 0; i < ITERATIONS; i++) {\n-            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n-            int posIn = RND.nextInt(inBytes.length);\n-            int posOut = RND.nextInt(MIN_SIZE);\n-            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n-        }\n-\n-        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n-\n-        \/\/ tests writing beyond target EOF (must extend output stream)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n-    }\n-\n@@ -267,53 +206,0 @@\n-    \/*\n-     * Asserts that the transferred content is correct, i.e., compares the bytes\n-     * actually transferred to those expected. The position of the input and\n-     * output streams before the transfer are zero (BOF).\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n-    }\n-\n-    \/*\n-     * Asserts that the transferred content is correct, i.e. compares the bytes\n-     * actually transferred to those expected. The positions of the input and\n-     * output streams before the transfer are provided by the caller.\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n-        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n-        try (InputStream in = inputStreamProvider.input(inBytes);\n-            OutputStream out = outputStreamProvider.output(recorder::set)) {\n-            \/\/ skip bytes until starting position\n-            in.skipNBytes(posIn);\n-            out.write(new byte[posOut]);\n-\n-            long reported = in.transferTo(out);\n-            int count = inBytes.length - posIn;\n-\n-            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n-\n-            byte[] outBytes = recorder.get().get();\n-            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n-                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n-        }\n-    }\n-\n-    \/*\n-     * Creates an array of random size (between min and min + maxRandomAdditive)\n-     * filled with random bytes\n-     *\/\n-    private static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n-        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n-        RND.nextBytes(bytes);\n-        return bytes;\n-    }\n-\n-    private interface InputStreamProvider {\n-        InputStream input(byte... bytes) throws Exception;\n-    }\n-\n-    private interface OutputStreamProvider {\n-        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n-    }\n-\n@@ -331,8 +217,0 @@\n-    \/*\n-     * Creates a provider for an input stream which wraps a readable byte\n-     * channel but is not a file channel\n-     *\/\n-    private static InputStreamProvider readableByteChannelInput() {\n-        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n-    }\n-\n@@ -351,18 +229,0 @@\n-    \/*\n-     * Creates a provider for an output stream which wraps a file channel\n-     *\/\n-    private static OutputStreamProvider fileChannelOutput() {\n-        return spy -> {\n-            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n-            FileChannel fileChannel = FileChannel.open(path, WRITE);\n-            spy.accept(() -> {\n-                try {\n-                    return Files.readAllBytes(path);\n-                } catch (IOException e) {\n-                    throw new AssertionError(\"Failed to verify output file\", e);\n-                }\n-            });\n-            return Channels.newOutputStream(fileChannel);\n-        };\n-    }\n-\n@@ -406,0 +266,1 @@\n+\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":2,"deletions":141,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -67,13 +67,1 @@\n-public class TransferTo2 {\n-    private static final int MIN_SIZE      = 10_000;\n-    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n-\n-    private static final int ITERATIONS = 10;\n-\n-    private static final int NUM_WRITES = 3*1024;\n-    private static final int BYTES_PER_WRITE = 1024*1024;\n-    private static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n-\n-    private static final Random RND = RandomFactory.getRandom();\n-\n-    private static final Path CWD = Path.of(\".\");\n+public class TransferTo2 extends AbstractTransferTo {\n@@ -107,49 +95,0 @@\n-    \/*\n-     * Testing API compliance: input stream must throw NullPointerException\n-     * when parameter \"out\" is null.\n-     *\/\n-    @Test(dataProvider = \"inputStreamProviders\")\n-    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n-        \/\/ tests empty input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n-\n-        \/\/ tests single-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n-\n-        \/\/ tests dual-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n-    }\n-\n-    \/*\n-     * Testing API compliance: complete content of input stream must be\n-     * transferred to output stream.\n-     *\/\n-    @Test(dataProvider = \"streamCombinations\")\n-    public void testStreamContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider) throws Exception {\n-        \/\/ tests empty input stream\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n-\n-        \/\/ tests input stream with a length between 1k and 4k\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n-\n-        \/\/ tests input stream with several data chunks, as 16k is more than a\n-        \/\/ single chunk can hold\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n-\n-        \/\/ tests randomly chosen starting positions within source and\n-        \/\/ target stream\n-        for (int i = 0; i < ITERATIONS; i++) {\n-            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n-            int posIn = RND.nextInt(inBytes.length);\n-            int posOut = RND.nextInt(MIN_SIZE);\n-            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n-        }\n-\n-        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n-\n-        \/\/ tests writing beyond target EOF (must extend output stream)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n-    }\n-\n@@ -222,96 +161,0 @@\n-    \/*\n-     * Special test whether selectable channel based transfer throws blocking mode exception.\n-     *\/\n-    @Test\n-    public void testIllegalBlockingMode() throws IOException {\n-        Pipe pipe = Pipe.open();\n-        try {\n-            \/\/ testing arbitrary input (here: empty file) to non-blocking\n-            \/\/ selectable output\n-            try (FileChannel fc = FileChannel.open(Files.createTempFile(CWD, \"testIllegalBlockingMode\", null));\n-                InputStream is = Channels.newInputStream(fc);\n-                SelectableChannel sc = pipe.sink().configureBlocking(false);\n-                OutputStream os = Channels.newOutputStream((WritableByteChannel) sc)) {\n-\n-                \/\/ IllegalBlockingMode must be thrown when trying to perform\n-                \/\/ a transfer\n-                assertThrows(IllegalBlockingModeException.class, () -> is.transferTo(os));\n-            }\n-\n-            \/\/ testing non-blocking selectable input to arbitrary output\n-            \/\/ (here: byte array)\n-            try (SelectableChannel sc = pipe.source().configureBlocking(false);\n-                InputStream is = Channels.newInputStream((ReadableByteChannel) sc);\n-                OutputStream os = new ByteArrayOutputStream()) {\n-\n-                \/\/ IllegalBlockingMode must be thrown when trying to perform\n-                \/\/ a transfer\n-                assertThrows(IllegalBlockingModeException.class, () -> is.transferTo(os));\n-            }\n-        } finally {\n-            pipe.source().close();\n-            pipe.sink().close();\n-        }\n-    }\n-\n-    \/*\n-     * Asserts that the transferred content is correct, i.e., compares the bytes\n-     * actually transferred to those expected. The position of the input and\n-     * output streams before the transfer are zero (BOF).\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n-    }\n-\n-    \/*\n-     * Asserts that the transferred content is correct, i.e. compares the bytes\n-     * actually transferred to those expected. The positions of the input and\n-     * output streams before the transfer are provided by the caller.\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n-        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n-        try (InputStream in = inputStreamProvider.input(inBytes);\n-            OutputStream out = outputStreamProvider.output(recorder::set)) {\n-            \/\/ skip bytes until starting position\n-            in.skipNBytes(posIn);\n-            out.write(new byte[posOut]);\n-\n-            long reported = in.transferTo(out);\n-            int count = inBytes.length - posIn;\n-\n-            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n-\n-            byte[] outBytes = recorder.get().get();\n-            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n-                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n-        }\n-    }\n-\n-    \/*\n-     * Creates an array of random size (between min and min + maxRandomAdditive)\n-     * filled with random bytes\n-     *\/\n-    private static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n-        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n-        RND.nextBytes(bytes);\n-        return bytes;\n-    }\n-\n-    private interface InputStreamProvider {\n-        InputStream input(byte... bytes) throws Exception;\n-    }\n-\n-    private interface OutputStreamProvider {\n-        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n-    }\n-\n-    \/*\n-     * Creates a provider for an input stream which wraps a readable byte\n-     * channel but is not a file channel\n-     *\/\n-    private static InputStreamProvider readableByteChannelInput() {\n-        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n-    }\n-\n@@ -335,17 +178,0 @@\n-    \/*\n-     * Creates a provider for an output stream which wraps a file channel\n-     *\/\n-    private static OutputStreamProvider fileChannelOutput() {\n-        return spy -> {\n-            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n-            FileChannel fileChannel = FileChannel.open(path, WRITE);\n-            spy.accept(() -> {\n-                try {\n-                    return Files.readAllBytes(path);\n-                } catch (IOException e) {\n-                    throw new AssertionError(\"Failed to verify output file\", e);\n-                }\n-            });\n-            return Channels.newOutputStream(fileChannel);\n-        };\n-    }\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo2.java","additions":1,"deletions":175,"binary":false,"changes":176,"status":"modified"}]}