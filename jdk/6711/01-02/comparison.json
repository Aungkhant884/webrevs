{"files":[{"patch":"@@ -24,0 +24,1 @@\n+import java.io.BufferedInputStream;\n@@ -156,2 +157,2 @@\n-     * Special test for file-to-file transfer of more than two GB.\n-     * This test covers multiple iterations of FileChannel.transerTo(FileChannel),\n+     * Special test for file-to-stream transfer of more than two GB.\n+     * This test covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n@@ -162,2 +163,2 @@\n-    public void testMoreThanTwoGB() throws IOException {\n-        Path sourceFile = Files.createTempFile(CWD, \"test2GBSource\", null);\n+    public void testMoreThanTwoGBtoStream() throws IOException {\n+        Path sourceFile = Files.createTempFile(CWD, \"test2GBtoStreamSource\", null);\n@@ -166,1 +167,1 @@\n-            Path targetFile = Files.createTempFile(CWD, \"test2GBtarget\", null);\n+            Path targetFile = Files.createTempFile(CWD, \"test2GBtoStreamTarget\", null);\n@@ -172,1 +173,2 @@\n-                \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferTo(WritableByteChannel)\n@@ -194,0 +196,41 @@\n+    \/*\n+     * Special test for stream-to-file transfer of more than two GB.\n+     * This test covers multiple iterations of FileChannel.transferFrom(ReadableByteChannel),\n+     * which ChannelInputStream.transferTo() only applies in this particular case,\n+     * and cannot get tested using a single byte[] due to size limitation of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGBfromStream() throws IOException {\n+        Path sourceFile = Files.createTempFile(CWD, \"test2GBfromStreamSource\", null);\n+        try {\n+            \/\/ preparing two temporary files which will be compared at the end of the test\n+            Path targetFile = Files.createTempFile(CWD, \"test2GBfromStreamTarget\", null);\n+            try {\n+                \/\/ writing 3 GB of random bytes into source file\n+                for (int i = 0; i < NUM_WRITES; i++)\n+                    Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n+                long count;\n+                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n+                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n+                     OutputStream outputStream = Channels\n+                             .newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE))) {\n+                    count = inputStream.transferTo(outputStream);\n+                }\n+\n+                \/\/ comparing reported transferred bytes, must be 3 GB\n+                assertEquals(count, BYTES_WRITTEN);\n+\n+                \/\/ comparing content of both files, failing in case of any difference\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n+    }\n+    \n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"}]}