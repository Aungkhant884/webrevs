{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import java.util.function.Function;\n@@ -165,9 +166,6 @@\n-    \/*\n-     * Special test for file-to-stream transfer of more than 2 GB. This test\n-     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n-     * which ChannelInputStream.transferTo() only applies in this particular\n-     * case, and cannot get tested using a single byte[] due to size limitation\n-     * of arrays.\n-     *\/\n-    @Test\n-    public void testMoreThanTwoGBtoStream() throws IOException {\n+    @FunctionalInterface\n+    private interface CheckedFunction<T, R, E extends Throwable> {\n+        R apply(T t) throws E;\n+    }\n+\n+    private static void testMoreThanTwoGB(String testName, CheckedFunction<Path, ReadableByteChannel, IOException> factory) throws IOException {\n@@ -176,1 +174,1 @@\n-        String sourceName = String.format(\"test3GBtoStreamSource%s.tmp\",\n+        String sourceName = String.format(\"test3GB%sSource%s.tmp\", testName,\n@@ -182,1 +180,1 @@\n-            String targetName = String.format(\"test3GBtoStreamTarget%s.tmp\",\n+            String targetName = String.format(\"test3GB%sTarget%s.tmp\", testName,\n@@ -209,2 +207,2 @@\n-                \/\/ of FileChannel.transferTo(WritableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n+                \/\/ of FileChannel.transferTo(WritableByteChannel) or FileChannel.transferFrom(ReadableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(factory.apply(sourceFile));\n@@ -230,0 +228,12 @@\n+    \/*\n+     * Special test for file-to-stream transfer of more than 2 GB. This test\n+     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n+     * which ChannelInputStream.transferTo() only applies in this particular\n+     * case, and cannot get tested using a single byte[] due to size limitation\n+     * of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGBtoStream() throws IOException {\n+        testMoreThanTwoGB(\"toStream\", FileChannel::open);\n+    }\n+\n@@ -239,55 +249,2 @@\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBfromStreamSource%s.tmp\",\n-            String.valueOf(RND.nextInt(Integer.MAX_VALUE)));\n-        Path sourceFile = CWD.resolve(sourceName);\n-\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBfromStreamTarget%s.tmp\",\n-                String.valueOf(RND.nextInt(Integer.MAX_VALUE)));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND);) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ fill the remainder of the file with random bytes\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n-                    }\n-                }\n-\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE);) {\n-                }\n-\n-                \/\/ performing actual transfer, effectively by multiple invocations of\n-                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n-                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n-\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n-                }\n-\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n-        }\n+        testMoreThanTwoGB(\"fromStream\", sourceFile -> Channels.newChannel(\n+                new BufferedInputStream(Files.newInputStream(sourceFile))));\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":25,"deletions":68,"binary":false,"changes":93,"status":"modified"}]}