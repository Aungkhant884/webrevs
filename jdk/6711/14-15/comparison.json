{"files":[{"patch":"@@ -1,191 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.nio.channels.Channels;\n-import java.nio.channels.FileChannel;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Arrays;\n-import java.util.Random;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-\n-import org.testng.annotations.Test;\n-\n-import jdk.test.lib.RandomFactory;\n-\n-import static java.lang.String.format;\n-import static java.nio.file.StandardOpenOption.*;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertThrows;\n-import static org.testng.Assert.assertTrue;\n-\n-class AbstractTransferTo {\n-    private static final int MIN_SIZE      = 10_000;\n-    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n-\n-    private static final int ITERATIONS = 10;\n-\n-    static final int NUM_WRITES = 3*1024;\n-    static final int BYTES_PER_WRITE = 1024*1024;\n-    static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n-\n-    static final Random RND = RandomFactory.getRandom();\n-\n-    static final Path CWD = Path.of(\".\");\n-\n-    \/*\n-     * Testing API compliance: input stream must throw NullPointerException\n-     * when parameter \"out\" is null.\n-     *\/\n-    @Test(dataProvider = \"inputStreamProviders\")\n-    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n-        \/\/ tests empty input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n-\n-        \/\/ tests single-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n-\n-        \/\/ tests dual-byte input stream\n-        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n-    }\n-\n-    \/*\n-     * Testing API compliance: complete content of input stream must be\n-     * transferred to output stream.\n-     *\/\n-    @Test(dataProvider = \"streamCombinations\")\n-    public void testStreamContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider) throws Exception {\n-        \/\/ tests empty input stream\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n-\n-        \/\/ tests input stream with a length between 1k and 4k\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n-\n-        \/\/ tests input stream with several data chunks, as 16k is more than a\n-        \/\/ single chunk can hold\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n-\n-        \/\/ tests randomly chosen starting positions within source and\n-        \/\/ target stream\n-        for (int i = 0; i < ITERATIONS; i++) {\n-            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n-            int posIn = RND.nextInt(inBytes.length);\n-            int posOut = RND.nextInt(MIN_SIZE);\n-            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n-        }\n-\n-        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n-\n-        \/\/ tests writing beyond target EOF (must extend output stream)\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n-    }\n-\n-    \/*\n-     * Asserts that the transferred content is correct, i.e., compares the bytes\n-     * actually transferred to those expected. The position of the input and\n-     * output streams before the transfer are zero (BOF).\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n-        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n-    }\n-\n-    \/*\n-     * Asserts that the transferred content is correct, i.e. compares the bytes\n-     * actually transferred to those expected. The positions of the input and\n-     * output streams before the transfer are provided by the caller.\n-     *\/\n-    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n-        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n-        try (InputStream in = inputStreamProvider.input(inBytes);\n-            OutputStream out = outputStreamProvider.output(recorder::set)) {\n-            \/\/ skip bytes until starting position\n-            in.skipNBytes(posIn);\n-            out.write(new byte[posOut]);\n-\n-            long reported = in.transferTo(out);\n-            int count = inBytes.length - posIn;\n-\n-            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n-\n-            byte[] outBytes = recorder.get().get();\n-            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n-                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n-        }\n-    }\n-\n-    \/*\n-     * Creates an array of random size (between min and min + maxRandomAdditive)\n-     * filled with random bytes\n-     *\/\n-    static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n-        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n-        RND.nextBytes(bytes);\n-        return bytes;\n-    }\n-\n-    interface InputStreamProvider {\n-        InputStream input(byte... bytes) throws Exception;\n-    }\n-\n-    interface OutputStreamProvider {\n-        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n-    }\n-\n-    \/*\n-     * Creates a provider for an input stream which wraps a readable byte\n-     * channel but is not a file channel\n-     *\/\n-    static InputStreamProvider readableByteChannelInput() {\n-        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n-    }\n-\n-    \/*\n-     * Creates a provider for an output stream which wraps a file channel\n-     *\/\n-    static OutputStreamProvider fileChannelOutput() {\n-        return spy -> {\n-            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n-            FileChannel fileChannel = FileChannel.open(path, WRITE);\n-            spy.accept(() -> {\n-                try {\n-                    return Files.readAllBytes(path);\n-                } catch (IOException e) {\n-                    throw new AssertionError(\"Failed to verify output file\", e);\n-                }\n-            });\n-            return Channels.newOutputStream(fileChannel);\n-        };\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/AbstractTransferTo.java","additions":0,"deletions":191,"binary":false,"changes":191,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import java.nio.ByteBuffer;\n@@ -45,4 +44,0 @@\n-import static java.lang.String.format;\n-import static java.nio.file.StandardOpenOption.*;\n-\n-import static org.testng.Assert.assertEquals;\n@@ -61,1 +56,1 @@\n-public class TransferTo extends AbstractTransferTo {\n+public class TransferTo extends TransferToBase {\n@@ -98,5 +93,2 @@\n-     * Special test for file-to-stream transfer of more than 2 GB. This test\n-     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n-     * which ChannelInputStream.transferTo() only applies in this particular\n-     * case, and cannot get tested using a single byte[] due to size limitation\n-     * of arrays.\n+     * Testing API compliance: input stream must throw NullPointerException\n+     * when parameter \"out\" is null.\n@@ -104,7 +96,4 @@\n-    @Test\n-    public void testMoreThanTwoGB() throws IOException {\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBSource%s.tmp\",\n-            RND.nextInt(Integer.MAX_VALUE));\n-        Path sourceFile = CWD.resolve(sourceName);\n+    @Test(dataProvider = \"inputStreamProviders\")\n+    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n+        \/\/ tests empty input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n@@ -112,47 +101,31 @@\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBTarget%s.tmp\",\n-                RND.nextInt(Integer.MAX_VALUE));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ Add random bytes to the remainder of the file\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n-                    }\n-                }\n-\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n-                }\n-\n-                \/\/ perform actual transfer, effectively by multiple invocations\n-                \/\/ of FileChannel.transferTo(WritableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n-\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n-                }\n-\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n+        \/\/ tests single-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n+\n+        \/\/ tests dual-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n+    }\n+\n+    \/*\n+     * Testing API compliance: complete content of input stream must be\n+     * transferred to output stream.\n+     *\/\n+    @Test(dataProvider = \"streamCombinations\")\n+    public void testStreamContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider) throws Exception {\n+        \/\/ tests empty input stream\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n+\n+        \/\/ tests input stream with a length between 1k and 4k\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n+\n+        \/\/ tests input stream with several data chunks, as 16k is more than a\n+        \/\/ single chunk can hold\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n+\n+        \/\/ tests randomly chosen starting positions within source and\n+        \/\/ target stream\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n+            int posIn = RND.nextInt(inBytes.length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n@@ -160,0 +133,6 @@\n+\n+        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n+\n+        \/\/ tests writing beyond target EOF (must extend output stream)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":44,"deletions":65,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -24,3 +24,0 @@\n-import java.io.BufferedInputStream;\n-import java.io.InputStream;\n-import java.io.IOException;\n@@ -28,1 +25,1 @@\n-import java.nio.ByteBuffer;\n+import java.io.IOException;\n@@ -30,1 +27,0 @@\n-import java.nio.channels.FileChannel;\n@@ -32,2 +28,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -39,1 +33,0 @@\n-import static java.nio.file.StandardOpenOption.*;\n@@ -41,1 +34,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n@@ -52,1 +45,1 @@\n-public class TransferTo2 extends AbstractTransferTo {\n+public class TransferTo2 extends TransferToBase {\n@@ -81,5 +74,2 @@\n-     * Special test for stream-to-file transfer of more than 2 GB. This test\n-     * covers multiple iterations of FileChannel.transferFrom(ReadableByteChannel),\n-     * which ChannelInputStream.transferFrom() only applies in this particular\n-     * case, and cannot get tested using a single byte[] due to size limitation\n-     * of arrays.\n+     * Testing API compliance: input stream must throw NullPointerException\n+     * when parameter \"out\" is null.\n@@ -87,31 +77,4 @@\n-    @Test\n-    public void testMoreThanTwoGB() throws IOException {\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBSource%s.tmp\",\n-            RND.nextInt(Integer.MAX_VALUE));\n-        Path sourceFile = CWD.resolve(sourceName);\n-\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBTarget%s.tmp\",\n-                RND.nextInt(Integer.MAX_VALUE));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ Add random bytes to the remainder of the file\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n-                    }\n-                }\n+    @Test(dataProvider = \"inputStreamProviders\")\n+    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n+        \/\/ tests empty input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n@@ -119,3 +82,2 @@\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n-                }\n+        \/\/ tests single-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n@@ -123,6 +85,3 @@\n-                \/\/ performing actual transfer, effectively by multiple invocations of\n-                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n-                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n+        \/\/ tests dual-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n+    }\n@@ -130,4 +89,25 @@\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n-                }\n+    \/*\n+     * Testing API compliance: complete content of input stream must be\n+     * transferred to output stream.\n+     *\/\n+    @Test(dataProvider = \"streamCombinations\")\n+    public void testStreamContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider) throws Exception {\n+        \/\/ tests empty input stream\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n+\n+        \/\/ tests input stream with a length between 1k and 4k\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n+\n+        \/\/ tests input stream with several data chunks, as 16k is more than a\n+        \/\/ single chunk can hold\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n+\n+        \/\/ tests randomly chosen starting positions within source and\n+        \/\/ target stream\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n+            int posIn = RND.nextInt(inBytes.length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n+        }\n@@ -135,2 +115,2 @@\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n@@ -138,6 +118,2 @@\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n-        }\n+        \/\/ tests writing beyond target EOF (must extend output stream)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo2.java","additions":43,"deletions":67,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.lang.String.format;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+class TransferToBase {\n+    static final int MIN_SIZE      = 10_000;\n+    static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n+\n+    static final int ITERATIONS = 10;\n+\n+    static final int NUM_WRITES = 3*1024;\n+    static final int BYTES_PER_WRITE = 1024*1024;\n+    static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n+\n+    static final Random RND = RandomFactory.getRandom();\n+\n+    static final Path CWD = Path.of(\".\");\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i.e., compares the bytes\n+     * actually transferred to those expected. The position of the input and\n+     * output streams before the transfer are zero (BOF).\n+     *\/\n+    static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n+    }\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i.e. compares the bytes\n+     * actually transferred to those expected. The positions of the input and\n+     * output streams before the transfer are provided by the caller.\n+     *\/\n+    static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n+        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n+        try (InputStream in = inputStreamProvider.input(inBytes);\n+            OutputStream out = outputStreamProvider.output(recorder::set)) {\n+            \/\/ skip bytes until starting position\n+            in.skipNBytes(posIn);\n+            out.write(new byte[posOut]);\n+\n+            long reported = in.transferTo(out);\n+            int count = inBytes.length - posIn;\n+\n+            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n+\n+            byte[] outBytes = recorder.get().get();\n+            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n+                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n+        }\n+    }\n+\n+    \/*\n+     * Creates an array of random size (between min and min + maxRandomAdditive)\n+     * filled with random bytes\n+     *\/\n+    static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n+        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n+        RND.nextBytes(bytes);\n+        return bytes;\n+    }\n+\n+    interface InputStreamProvider {\n+        InputStream input(byte... bytes) throws Exception;\n+    }\n+\n+    interface OutputStreamProvider {\n+        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n+    }\n+\n+    \/*\n+     * Creates a provider for an input stream which wraps a readable byte\n+     * channel but is not a file channel\n+     *\/\n+    static InputStreamProvider readableByteChannelInput() {\n+        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n+    }\n+\n+    \/*\n+     * Creates a provider for an output stream which wraps a file channel\n+     *\/\n+    static OutputStreamProvider fileChannelOutput() {\n+        return spy -> {\n+            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n+            FileChannel fileChannel = FileChannel.open(path, WRITE);\n+            spy.accept(() -> {\n+                try {\n+                    return Files.readAllBytes(path);\n+                } catch (IOException e) {\n+                    throw new AssertionError(\"Failed to verify output file\", e);\n+                }\n+            });\n+            return Channels.newOutputStream(fileChannel);\n+        };\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferToBase.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.testng.annotations.Test;\n+\n+import static java.lang.String.format;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run testng\/othervm\/timeout=180 TransferTo_2GB_transferFrom\n+ * @bug 8278268\n+ * @summary Tests if ChannelInputStream.transferFrom correctly\n+ *     transfers 2GB+ using FileChannel.transferFrom(ReadableByteChannel).\n+ * @key randomness\n+ *\/\n+public class TransferTo_2GB_transferFrom extends TransferToBase {\n+\n+    \/*\n+     * Special test for stream-to-file transfer of more than 2 GB. This test\n+     * covers multiple iterations of FileChannel.transferFrom(ReadableByteChannel),\n+     * which ChannelInputStream.transferFrom() only applies in this particular\n+     * case, and cannot get tested using a single byte[] due to size limitation\n+     * of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGB() throws IOException {\n+        \/\/ prepare two temporary files to be compared at the end of the test\n+        \/\/ set the source file name\n+        String sourceName = String.format(\"test3GBSource_transferFrom%s.tmp\",\n+            RND.nextInt(Integer.MAX_VALUE));\n+        Path sourceFile = CWD.resolve(sourceName);\n+\n+        try {\n+            \/\/ set the target file name\n+            String targetName = String.format(\"test3GBTarget_transferFrom%s.tmp\",\n+                RND.nextInt(Integer.MAX_VALUE));\n+            Path targetFile = CWD.resolve(targetName);\n+\n+            try {\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the source file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ Add random bytes to the remainder of the file\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n+\n+                \/\/ create the target file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+                }\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n+                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n+                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n+                    long count = inputStream.transferTo(outputStream);\n+\n+                    \/\/ compare reported transferred bytes, must be 3 GB\n+                    \/\/ less the value of the initial position\n+                    assertEquals(count, BYTES_WRITTEN - initPos);\n+                }\n+\n+                \/\/ compare content of both files, failing if different\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo_2GB_transferFrom.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.testng.annotations.Test;\n+\n+import static java.lang.String.format;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run testng\/othervm\/timeout=180 TransferTo_2GB_transferTo\n+ * @bug 8265891\n+ * @summary Tests if ChannelInputStream.transferTo correctly\n+ *     transfers 2GB+ using FileChannel.transferTo(WritableByteChannel).\n+ * @key randomness\n+ *\/\n+public class TransferTo_2GB_transferTo extends TransferToBase {\n+\n+    \/*\n+     * Special test for file-to-stream transfer of more than 2 GB. This test\n+     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n+     * which ChannelInputStream.transferTo() only applies in this particular\n+     * case, and cannot get tested using a single byte[] due to size limitation\n+     * of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGB() throws IOException {\n+        \/\/ prepare two temporary files to be compared at the end of the test\n+        \/\/ set the source file name\n+        String sourceName = String.format(\"test3GBSource_transferTo%s.tmp\",\n+            RND.nextInt(Integer.MAX_VALUE));\n+        Path sourceFile = CWD.resolve(sourceName);\n+\n+        try {\n+            \/\/ set the target file name\n+            String targetName = String.format(\"test3GBTarget_transferTo%s.tmp\",\n+                RND.nextInt(Integer.MAX_VALUE));\n+            Path targetFile = CWD.resolve(targetName);\n+\n+            try {\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the source file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ Add random bytes to the remainder of the file\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n+\n+                \/\/ create the target file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+                }\n+\n+                \/\/ perform actual transfer, effectively by multiple invocations\n+                \/\/ of FileChannel.transferTo(WritableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n+                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n+                    long count = inputStream.transferTo(outputStream);\n+\n+                    \/\/ compare reported transferred bytes, must be 3 GB\n+                    \/\/ less the value of the initial position\n+                    assertEquals(count, BYTES_WRITTEN - initPos);\n+                }\n+\n+                \/\/ compare content of both files, failing if different\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo_2GB_transferTo.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}