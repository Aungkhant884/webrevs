{"files":[{"patch":"@@ -24,1 +24,0 @@\n-import java.io.BufferedInputStream;\n@@ -234,66 +233,0 @@\n-     * Special test for stream-to-file transfer of more than 2 GB. This test\n-     * covers multiple iterations of FileChannel.transferFrom(ReadableByteChannel),\n-     * which ChannelInputStream.transferFrom() only applies in this particular\n-     * case, and cannot get tested using a single byte[] due to size limitation\n-     * of arrays.\n-     *\/\n-    @Test\n-    public void testMoreThanTwoGBfromStream() throws IOException {\n-        \/\/ prepare two temporary files to be compared at the end of the test\n-        \/\/ set the source file name\n-        String sourceName = String.format(\"test3GBfromStreamSource%s.tmp\",\n-            RND.nextInt(Integer.MAX_VALUE));\n-        Path sourceFile = CWD.resolve(sourceName);\n-\n-        try {\n-            \/\/ set the target file name\n-            String targetName = String.format(\"test3GBfromStreamTarget%s.tmp\",\n-                RND.nextInt(Integer.MAX_VALUE));\n-            Path targetFile = CWD.resolve(targetName);\n-\n-            try {\n-                \/\/ calculate initial position to be just short of 2GB\n-                final long initPos = 2047*BYTES_PER_WRITE;\n-\n-                \/\/ create the source file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n-                    \/\/ set initial position to avoid writing nearly 2GB\n-                    fc.position(initPos);\n-\n-                    \/\/ fill the remainder of the file with random bytes\n-                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n-                    for (int i = 0; i < nw; i++) {\n-                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n-                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n-                        fc.write(src);\n-                    }\n-                }\n-\n-                \/\/ create the target file with a hint to be sparse\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n-                }\n-\n-                \/\/ performing actual transfer, effectively by multiple invocations of\n-                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n-                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n-                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n-                    long count = inputStream.transferTo(outputStream);\n-\n-                    \/\/ compare reported transferred bytes, must be 3 GB\n-                    \/\/ less the value of the initial position\n-                    assertEquals(count, BYTES_WRITTEN - initPos);\n-                }\n-\n-                \/\/ compare content of both files, failing if different\n-                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n-\n-            } finally {\n-                 Files.delete(targetFile);\n-            }\n-        } finally {\n-            Files.delete(sourceFile);\n-        }\n-    }\n-\n-    \/*\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"modified"}]}