{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.nio.file.StandardOpenOption;\n@@ -48,1 +47,0 @@\n-import java.util.function.Function;\n@@ -92,1 +90,1 @@\n-    public static Object[][] streamCombinations() throws Exception {\n+    public static Object[][] streamCombinations() {\n@@ -105,6 +103,0 @@\n-            \/\/ tests FileChannel.transferFrom(SelectableChannelOutput) optimized case\n-            { selectableChannelInput(), fileChannelOutput() },\n-\n-            \/\/ tests FileChannel.transferFrom(ReadableByteChannelInput) optimized case\n-            { readableByteChannelInput(), fileChannelOutput() },\n-\n@@ -116,0 +108,11 @@\n+    \/*\n+     * Input streams to be tested.\n+     *\/\n+    @DataProvider\n+    public static Object[][] inputStreamProviders() {\n+        return new Object[][] {\n+                { fileChannelInput()},\n+                { readableByteChannelInput()}\n+        };\n+    }\n+\n@@ -120,3 +123,2 @@\n-    @Test(dataProvider = \"streamCombinations\")\n-    public void testNullPointerException(InputStreamProvider inputStreamProvider,\n-            OutputStreamProvider outputStreamProvider) throws Exception {\n+    @Test(dataProvider = \"inputStreamProviders\")\n+    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n@@ -166,6 +168,9 @@\n-    @FunctionalInterface\n-    private interface CheckedFunction<T, R, E extends Throwable> {\n-        R apply(T t) throws E;\n-    }\n-\n-    private static void testMoreThanTwoGB(String testName, CheckedFunction<Path, ReadableByteChannel, IOException> factory) throws IOException {\n+    \/*\n+     * Special test for file-to-stream transfer of more than 2 GB. This test\n+     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n+     * which ChannelInputStream.transferTo() only applies in this particular\n+     * case, and cannot get tested using a single byte[] due to size limitation\n+     * of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGB() throws IOException {\n@@ -174,2 +179,2 @@\n-        String sourceName = String.format(\"test3GB%sSource%s.tmp\", testName,\n-            String.valueOf(RND.nextInt(Integer.MAX_VALUE)));\n+        String sourceName = String.format(\"test3GBSource%s.tmp\",\n+            RND.nextInt(Integer.MAX_VALUE));\n@@ -180,2 +185,2 @@\n-            String targetName = String.format(\"test3GB%sTarget%s.tmp\", testName,\n-                String.valueOf(RND.nextInt(Integer.MAX_VALUE)));\n+            String targetName = String.format(\"test3GBTarget%s.tmp\",\n+                RND.nextInt(Integer.MAX_VALUE));\n@@ -189,1 +194,1 @@\n-                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND);) {\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n@@ -203,1 +208,1 @@\n-                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE);) {\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n@@ -207,2 +212,2 @@\n-                \/\/ of FileChannel.transferTo(WritableByteChannel) or FileChannel.transferFrom(ReadableByteChannel)\n-                try (InputStream inputStream = Channels.newInputStream(factory.apply(sourceFile));\n+                \/\/ of FileChannel.transferTo(WritableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n@@ -228,12 +233,0 @@\n-    \/*\n-     * Special test for file-to-stream transfer of more than 2 GB. This test\n-     * covers multiple iterations of FileChannel.transferTo(WritableByteChannel),\n-     * which ChannelInputStream.transferTo() only applies in this particular\n-     * case, and cannot get tested using a single byte[] due to size limitation\n-     * of arrays.\n-     *\/\n-    @Test\n-    public void testMoreThanTwoGBtoStream() throws IOException {\n-        testMoreThanTwoGB(\"toStream\", FileChannel::open);\n-    }\n-\n@@ -249,2 +242,55 @@\n-        testMoreThanTwoGB(\"fromStream\", sourceFile -> Channels.newChannel(\n-                new BufferedInputStream(Files.newInputStream(sourceFile))));\n+        \/\/ prepare two temporary files to be compared at the end of the test\n+        \/\/ set the source file name\n+        String sourceName = String.format(\"test3GBfromStreamSource%s.tmp\",\n+            RND.nextInt(Integer.MAX_VALUE));\n+        Path sourceFile = CWD.resolve(sourceName);\n+\n+        try {\n+            \/\/ set the target file name\n+            String targetName = String.format(\"test3GBfromStreamTarget%s.tmp\",\n+                RND.nextInt(Integer.MAX_VALUE));\n+            Path targetFile = CWD.resolve(targetName);\n+\n+            try {\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the source file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ fill the remainder of the file with random bytes\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n+\n+                \/\/ create the target file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+                }\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n+                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n+                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n+                    long count = inputStream.transferTo(outputStream);\n+\n+                    \/\/ compare reported transferred bytes, must be 3 GB\n+                    \/\/ less the value of the initial position\n+                    assertEquals(count, BYTES_WRITTEN - initPos);\n+                }\n+\n+                \/\/ compare content of both files, failing if different\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n@@ -345,22 +391,4 @@\n-        return new OutputStreamProvider() {\n-            @Override\n-            public OutputStream output(Consumer<Supplier<byte[]>> spy) {\n-                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-                spy.accept(outputStream::toByteArray);\n-                return outputStream;\n-            }\n-        };\n-    }\n-\n-    \/*\n-     * Creates a provider for an input stream which wraps a file channel\n-     *\/\n-    private static InputStreamProvider fileChannelInput() {\n-        return new InputStreamProvider() {\n-            @Override\n-            public InputStream input(byte... bytes) throws Exception {\n-                Path path = Files.createTempFile(CWD, \"fileChannelInput\", null);\n-                Files.write(path, bytes);\n-                FileChannel fileChannel = FileChannel.open(path);\n-                return Channels.newInputStream(fileChannel);\n-            }\n+        return spy -> {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            spy.accept(outputStream::toByteArray);\n+            return outputStream;\n@@ -375,6 +403,1 @@\n-        return new InputStreamProvider() {\n-            @Override\n-            public InputStream input(byte... bytes) throws Exception {\n-                return Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n-            }\n-        };\n+        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n@@ -384,1 +407,1 @@\n-     * Creates a provider for an input stream which wraps a selectable channel\n+     * Creates a provider for an input stream which wraps a file channel\n@@ -386,13 +409,6 @@\n-    private static InputStreamProvider selectableChannelInput() throws IOException {\n-        return new InputStreamProvider() {\n-            public InputStream input(byte... bytes) throws Exception {\n-                Pipe pipe = Pipe.open();\n-                new Thread(() -> {\n-                    try (OutputStream os = Channels.newOutputStream(pipe.sink())) {\n-                      os.write(bytes);\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n-                }).start();\n-                return Channels.newInputStream(pipe.source());\n-            }\n+    private static InputStreamProvider fileChannelInput() {\n+        return bytes -> {\n+            Path path = Files.createTempFile(CWD, \"fileChannelInput\", null);\n+            Files.write(path, bytes);\n+            FileChannel fileChannel = FileChannel.open(path);\n+            return Channels.newInputStream(fileChannel);\n@@ -406,13 +422,11 @@\n-        return new OutputStreamProvider() {\n-            public OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception {\n-                Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n-                FileChannel fileChannel = FileChannel.open(path, WRITE);\n-                spy.accept(() -> {\n-                    try {\n-                        return Files.readAllBytes(path);\n-                    } catch (IOException e) {\n-                        throw new AssertionError(\"Failed to verify output file\", e);\n-                    }\n-                });\n-                return Channels.newOutputStream(fileChannel);\n-            }\n+        return spy -> {\n+            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n+            FileChannel fileChannel = FileChannel.open(path, WRITE);\n+            spy.accept(() -> {\n+                try {\n+                    return Files.readAllBytes(path);\n+                } catch (IOException e) {\n+                    throw new AssertionError(\"Failed to verify output file\", e);\n+                }\n+            });\n+            return Channels.newOutputStream(fileChannel);\n@@ -425,23 +439,21 @@\n-    private static OutputStreamProvider selectableChannelOutput() throws IOException {\n-        return new OutputStreamProvider() {\n-            public OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception {\n-                Pipe pipe = Pipe.open();\n-                Future<byte[]> bytes = CompletableFuture.supplyAsync(() -> {\n-                    try {\n-                        InputStream is = Channels.newInputStream(pipe.source());\n-                        return is.readAllBytes();\n-                    } catch (IOException e) {\n-                        throw new AssertionError(\"Exception while asserting content\", e);\n-                    }\n-                });\n-                final OutputStream os = Channels.newOutputStream(pipe.sink());\n-                spy.accept(() -> {\n-                    try {\n-                        os.close();\n-                        return bytes.get();\n-                    } catch (IOException | InterruptedException | ExecutionException e) {\n-                        throw new AssertionError(\"Exception while asserting content\", e);\n-                    }\n-                });\n-                return os;\n-            }\n+    private static OutputStreamProvider selectableChannelOutput() {\n+        return spy -> {\n+            Pipe pipe = Pipe.open();\n+            Future<byte[]> bytes = CompletableFuture.supplyAsync(() -> {\n+                try {\n+                    InputStream is = Channels.newInputStream(pipe.source());\n+                    return is.readAllBytes();\n+                } catch (IOException e) {\n+                    throw new AssertionError(\"Exception while asserting content\", e);\n+                }\n+            });\n+            final OutputStream os = Channels.newOutputStream(pipe.sink());\n+            spy.accept(() -> {\n+                try {\n+                    os.close();\n+                    return bytes.get();\n+                } catch (IOException | InterruptedException | ExecutionException e) {\n+                    throw new AssertionError(\"Exception while asserting content\", e);\n+                }\n+            });\n+            return os;\n@@ -455,6 +467,4 @@\n-        return new OutputStreamProvider() {\n-            public OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception {\n-                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-                spy.accept(outputStream::toByteArray);\n-                return Channels.newOutputStream(Channels.newChannel(outputStream));\n-            }\n+        return spy -> {\n+            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+            spy.accept(outputStream::toByteArray);\n+            return Channels.newOutputStream(Channels.newChannel(outputStream));\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":134,"deletions":124,"binary":false,"changes":258,"status":"modified"},{"patch":"@@ -0,0 +1,355 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.IllegalBlockingModeException;\n+import java.nio.channels.Pipe;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.SelectableChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import jdk.test.lib.RandomFactory;\n+\n+import static java.lang.String.format;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run testng\/othervm\/timeout=180 TransferTo\n+ * @bug 8265891\n+ * @summary Tests FileChannel.transferFrom() optimized case\n+ * @key randomness\n+ *\/\n+public class TransferTo2 {\n+    private static final int MIN_SIZE      = 10_000;\n+    private static final int MAX_SIZE_INCR = 100_000_000 - MIN_SIZE;\n+\n+    private static final int ITERATIONS = 10;\n+\n+    private static final int NUM_WRITES = 3*1024;\n+    private static final int BYTES_PER_WRITE = 1024*1024;\n+    private static final long BYTES_WRITTEN = (long) NUM_WRITES*BYTES_PER_WRITE;\n+\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    private static final Path CWD = Path.of(\".\");\n+\n+    \/*\n+     * Provides test scenarios, i.e., combinations of input and output streams\n+     * to be tested.\n+     *\/\n+    @DataProvider\n+    public static Object[][] streamCombinations() {\n+        return new Object[][] {\n+            \/\/ tests FileChannel.transferFrom(SelectableChannelOutput) optimized case\n+            { selectableChannelInput(), fileChannelOutput() },\n+\n+            \/\/ tests FileChannel.transferFrom(ReadableByteChannelInput) optimized case\n+            { readableByteChannelInput(), fileChannelOutput() },\n+        };\n+    }\n+\n+    \/*\n+     * Input streams to be tested.\n+     *\/\n+    @DataProvider\n+    public static Object[][] inputStreamProviders() {\n+        return new Object[][] {\n+            { selectableChannelInput()},\n+            { readableByteChannelInput()}\n+        };\n+    }\n+\n+    \/*\n+     * Testing API compliance: input stream must throw NullPointerException\n+     * when parameter \"out\" is null.\n+     *\/\n+    @Test(dataProvider = \"inputStreamProviders\")\n+    public void testNullPointerException(InputStreamProvider inputStreamProvider) {\n+        \/\/ tests empty input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input().transferTo(null));\n+\n+        \/\/ tests single-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1).transferTo(null));\n+\n+        \/\/ tests dual-byte input stream\n+        assertThrows(NullPointerException.class, () -> inputStreamProvider.input((byte) 1, (byte) 2).transferTo(null));\n+    }\n+\n+    \/*\n+     * Testing API compliance: complete content of input stream must be\n+     * transferred to output stream.\n+     *\/\n+    @Test(dataProvider = \"streamCombinations\")\n+    public void testStreamContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider) throws Exception {\n+        \/\/ tests empty input stream\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, new byte[0]);\n+\n+        \/\/ tests input stream with a length between 1k and 4k\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(1024, 4096));\n+\n+        \/\/ tests input stream with several data chunks, as 16k is more than a\n+        \/\/ single chunk can hold\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(16384, 16384));\n+\n+        \/\/ tests randomly chosen starting positions within source and\n+        \/\/ target stream\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            byte[] inBytes = createRandomBytes(MIN_SIZE, MAX_SIZE_INCR);\n+            int posIn = RND.nextInt(inBytes.length);\n+            int posOut = RND.nextInt(MIN_SIZE);\n+            checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, posIn, posOut);\n+        }\n+\n+        \/\/ tests reading beyond source EOF (must not transfer any bytes)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 4096, 0);\n+\n+        \/\/ tests writing beyond target EOF (must extend output stream)\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, createRandomBytes(4096, 0), 0, 4096);\n+    }\n+\n+    \/*\n+     * Special test for stream-to-file transfer of more than 2 GB. This test\n+     * covers multiple iterations of FileChannel.transferFrom(ReadableByteChannel),\n+     * which ChannelInputStream.transferFrom() only applies in this particular\n+     * case, and cannot get tested using a single byte[] due to size limitation\n+     * of arrays.\n+     *\/\n+    @Test\n+    public void testMoreThanTwoGB() throws IOException {\n+        \/\/ prepare two temporary files to be compared at the end of the test\n+        \/\/ set the source file name\n+        String sourceName = String.format(\"test3GBSource%s.tmp\",\n+            RND.nextInt(Integer.MAX_VALUE));\n+        Path sourceFile = CWD.resolve(sourceName);\n+\n+        try {\n+            \/\/ set the target file name\n+            String targetName = String.format(\"test3GBTarget%s.tmp\",\n+                RND.nextInt(Integer.MAX_VALUE));\n+            Path targetFile = CWD.resolve(targetName);\n+\n+            try {\n+                \/\/ calculate initial position to be just short of 2GB\n+                final long initPos = 2047*BYTES_PER_WRITE;\n+\n+                \/\/ create the source file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(sourceFile, CREATE_NEW, SPARSE, WRITE, APPEND)) {\n+                    \/\/ set initial position to avoid writing nearly 2GB\n+                    fc.position(initPos);\n+\n+                    \/\/ fill the remainder of the file with random bytes\n+                    int nw = (int)(NUM_WRITES - initPos\/BYTES_PER_WRITE);\n+                    for (int i = 0; i < nw; i++) {\n+                        byte[] rndBytes = createRandomBytes(BYTES_PER_WRITE, 0);\n+                        ByteBuffer src = ByteBuffer.wrap(rndBytes);\n+                        fc.write(src);\n+                    }\n+                }\n+\n+                \/\/ create the target file with a hint to be sparse\n+                try (FileChannel fc = FileChannel.open(targetFile, CREATE_NEW, WRITE, SPARSE)) {\n+                }\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of\n+                \/\/ FileChannel.transferFrom(ReadableByteChannel)\n+                try (InputStream inputStream = Channels.newInputStream(Channels.newChannel(\n+                        new BufferedInputStream(Files.newInputStream(sourceFile))));\n+                     OutputStream outputStream = Channels.newOutputStream(FileChannel.open(targetFile, WRITE))) {\n+                    long count = inputStream.transferTo(outputStream);\n+\n+                    \/\/ compare reported transferred bytes, must be 3 GB\n+                    \/\/ less the value of the initial position\n+                    assertEquals(count, BYTES_WRITTEN - initPos);\n+                }\n+\n+                \/\/ compare content of both files, failing if different\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n+            }\n+        } finally {\n+            Files.delete(sourceFile);\n+        }\n+    }\n+\n+    \/*\n+     * Special test whether selectable channel based transfer throws blocking mode exception.\n+     *\/\n+    @Test\n+    public void testIllegalBlockingMode() throws IOException {\n+        Pipe pipe = Pipe.open();\n+        try {\n+            \/\/ testing arbitrary input (here: empty file) to non-blocking\n+            \/\/ selectable output\n+            try (FileChannel fc = FileChannel.open(Files.createTempFile(CWD, \"testIllegalBlockingMode\", null));\n+                InputStream is = Channels.newInputStream(fc);\n+                SelectableChannel sc = pipe.sink().configureBlocking(false);\n+                OutputStream os = Channels.newOutputStream((WritableByteChannel) sc)) {\n+\n+                \/\/ IllegalBlockingMode must be thrown when trying to perform\n+                \/\/ a transfer\n+                assertThrows(IllegalBlockingModeException.class, () -> is.transferTo(os));\n+            }\n+\n+            \/\/ testing non-blocking selectable input to arbitrary output\n+            \/\/ (here: byte array)\n+            try (SelectableChannel sc = pipe.source().configureBlocking(false);\n+                InputStream is = Channels.newInputStream((ReadableByteChannel) sc);\n+                OutputStream os = new ByteArrayOutputStream()) {\n+\n+                \/\/ IllegalBlockingMode must be thrown when trying to perform\n+                \/\/ a transfer\n+                assertThrows(IllegalBlockingModeException.class, () -> is.transferTo(os));\n+            }\n+        } finally {\n+            pipe.source().close();\n+            pipe.sink().close();\n+        }\n+    }\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i.e., compares the bytes\n+     * actually transferred to those expected. The position of the input and\n+     * output streams before the transfer are zero (BOF).\n+     *\/\n+    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes) throws Exception {\n+        checkTransferredContents(inputStreamProvider, outputStreamProvider, inBytes, 0, 0);\n+    }\n+\n+    \/*\n+     * Asserts that the transferred content is correct, i. e. compares the bytes\n+     * actually transferred to those expected. The positions of the input and\n+     * output streams before the transfer are provided by the caller.\n+     *\/\n+    private static void checkTransferredContents(InputStreamProvider inputStreamProvider,\n+            OutputStreamProvider outputStreamProvider, byte[] inBytes, int posIn, int posOut) throws Exception {\n+        AtomicReference<Supplier<byte[]>> recorder = new AtomicReference<>();\n+        try (InputStream in = inputStreamProvider.input(inBytes);\n+            OutputStream out = outputStreamProvider.output(recorder::set)) {\n+            \/\/ skip bytes until starting position\n+            in.skipNBytes(posIn);\n+            out.write(new byte[posOut]);\n+\n+            long reported = in.transferTo(out);\n+            int count = inBytes.length - posIn;\n+\n+            assertEquals(reported, count, format(\"reported %d bytes but should report %d\", reported, count));\n+\n+            byte[] outBytes = recorder.get().get();\n+            assertTrue(Arrays.equals(inBytes, posIn, posIn + count, outBytes, posOut, posOut + count),\n+                format(\"inBytes.length=%d, outBytes.length=%d\", count, outBytes.length));\n+        }\n+    }\n+\n+    \/*\n+     * Creates an array of random size (between min and min + maxRandomAdditive)\n+     * filled with random bytes\n+     *\/\n+    private static byte[] createRandomBytes(int min, int maxRandomAdditive) {\n+        byte[] bytes = new byte[min + (maxRandomAdditive == 0 ? 0 : RND.nextInt(maxRandomAdditive))];\n+        RND.nextBytes(bytes);\n+        return bytes;\n+    }\n+\n+    private interface InputStreamProvider {\n+        InputStream input(byte... bytes) throws Exception;\n+    }\n+\n+    private interface OutputStreamProvider {\n+        OutputStream output(Consumer<Supplier<byte[]>> spy) throws Exception;\n+    }\n+\n+    \/*\n+     * Creates a provider for an input stream which wraps a readable byte\n+     * channel but is not a file channel\n+     *\/\n+    private static InputStreamProvider readableByteChannelInput() {\n+        return bytes -> Channels.newInputStream(Channels.newChannel(new ByteArrayInputStream(bytes)));\n+    }\n+\n+    \/*\n+     * Creates a provider for an input stream which wraps a selectable channel\n+     *\/\n+    private static InputStreamProvider selectableChannelInput() {\n+        return bytes -> {\n+            Pipe pipe = Pipe.open();\n+            new Thread(() -> {\n+                try (OutputStream os = Channels.newOutputStream(pipe.sink())) {\n+                  os.write(bytes);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }).start();\n+            return Channels.newInputStream(pipe.source());\n+        };\n+    }\n+\n+    \/*\n+     * Creates a provider for an output stream which wraps a file channel\n+     *\/\n+    private static OutputStreamProvider fileChannelOutput() {\n+        return spy -> {\n+            Path path = Files.createTempFile(CWD, \"fileChannelOutput\", null);\n+            FileChannel fileChannel = FileChannel.open(path, WRITE);\n+            spy.accept(() -> {\n+                try {\n+                    return Files.readAllBytes(path);\n+                } catch (IOException e) {\n+                    throw new AssertionError(\"Failed to verify output file\", e);\n+                }\n+            });\n+            return Channels.newOutputStream(fileChannel);\n+        };\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo2.java","additions":355,"deletions":0,"binary":false,"changes":355,"status":"added"}]}