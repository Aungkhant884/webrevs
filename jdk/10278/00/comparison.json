{"files":[{"patch":"@@ -82,1 +82,4 @@\n-    \/* check if SO_REUSEPORT is supported on this platform *\/\n+    \/*\n+     * Check if SO_REUSEPORT is supported on this platform.\n+     * Must be called after IPv6_available is initialized.\n+     *\/\n","filename":"src\/java.base\/share\/native\/libnet\/net_util.c","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -195,1 +195,5 @@\n-    s = socket(PF_INET, SOCK_STREAM, 0);\n+    if (ipv6_available()) {\n+      s = socket(PF_INET6, SOCK_STREAM, 0);\n+    } else {\n+      s = socket(PF_INET, SOCK_STREAM, 0);\n+    }\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.c","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n-    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+    \/* First try IPv6; fall back to IPv4. *\/\n+    s = socket(PF_INET6, SOCK_STREAM, IPPROTO_TCP);\n@@ -59,1 +60,6 @@\n-        return 0;\n+        if (errno == EPFNOSUPPORT || errno == EAFNOSUPPORT) {\n+            s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        }\n+        if (s < 0) {\n+            return 0;\n+        }\n","filename":"src\/jdk.net\/linux\/native\/libextnet\/LinuxSocketOptions.c","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n+    \/* First try IPv6; fall back to IPv4. *\/\n+    s = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);\n@@ -53,1 +54,6 @@\n-        return 0;\n+        if (errno == EPFNOSUPPORT || errno == EAFNOSUPPORT) {\n+            s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        }\n+        if (s < 0) {\n+            return 0;\n+        }\n","filename":"src\/jdk.net\/macosx\/native\/libextnet\/MacOSXSocketOptions.c","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}