{"files":[{"patch":"@@ -1652,0 +1652,1 @@\n+  InstructionMark im(this);\n@@ -5008,0 +5009,59 @@\n+void Assembler::sall(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(4), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(4), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sall(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(4), dst);\n+}\n+\n+void Assembler::sall(Register dst, int imm8) {\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  int encode = prefix_and_encode(dst->encoding());\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE0 | encode));\n+  } else {\n+    emit_int24((unsigned char)0xC1, (0xE0 | encode), imm8);\n+  }\n+}\n+\n+void Assembler::sall(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xD3, (0xE0 | encode));\n+}\n+\n+void Assembler::sarl(Address dst, int imm8) {\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  InstructionMark im(this);\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(7), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(7), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sarl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(7), dst);\n+}\n+\n@@ -5154,0 +5214,23 @@\n+void Assembler::shrl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(5), dst);\n+}\n+\n+void Assembler::shrl(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(5), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(5), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+\n@@ -10438,0 +10521,56 @@\n+#ifdef _LP64\n+void Assembler::salq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(4), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(4), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::salq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(4), dst);\n+}\n+\n+void Assembler::salq(Register dst, int imm8) {\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  int encode = prefixq_and_encode(dst->encoding());\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE0 | encode));\n+  } else {\n+    emit_int24((unsigned char)0xC1, (0xE0 | encode), imm8);\n+  }\n+}\n+\n+void Assembler::salq(Register dst) {\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xD3, (0xE0 | encode));\n+}\n+\n+void Assembler::sarq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(7), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(7), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sarq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(7), dst);\n+}\n+\n@@ -10452,0 +10591,1 @@\n+#endif\n@@ -10501,0 +10641,19 @@\n+void Assembler::shrq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(5), dst);\n+}\n+\n+void Assembler::shrq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(5), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(5), dst);\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":159,"deletions":0,"binary":false,"changes":159,"status":"modified"},{"patch":"@@ -1916,0 +1916,7 @@\n+  void sall(Register dst, int imm8);\n+  void sall(Register dst);\n+  void sall(Address dst, int imm8);\n+  void sall(Address dst);\n+\n+  void sarl(Address dst, int imm8);\n+  void sarl(Address dst);\n@@ -1919,0 +1926,8 @@\n+#ifdef _LP64\n+  void salq(Register dst, int imm8);\n+  void salq(Register dst);\n+  void salq(Address dst, int imm8);\n+  void salq(Address dst);\n+\n+  void sarq(Address dst, int imm8);\n+  void sarq(Address dst);\n@@ -1921,0 +1936,1 @@\n+#endif\n@@ -1963,0 +1979,2 @@\n+  void shrl(Address dst);\n+  void shrl(Address dst, int imm8);\n@@ -1966,0 +1984,2 @@\n+  void shrq(Address dst);\n+  void shrq(Address dst, int imm8);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1822,135 +1822,0 @@\n-  enc_class cdql_enc(no_rax_rdx_RegI div)\n-  %{\n-    \/\/ Full implementation of Java idiv and irem; checks for\n-    \/\/ special case as described in JVM spec., p.243 & p.271.\n-    \/\/\n-    \/\/         normal case                           special case\n-    \/\/\n-    \/\/ input : rax: dividend                         min_int\n-    \/\/         reg: divisor                          -1\n-    \/\/\n-    \/\/ output: rax: quotient  (= rax idiv reg)       min_int\n-    \/\/         rdx: remainder (= rax irem reg)       0\n-    \/\/\n-    \/\/  Code sequnce:\n-    \/\/\n-    \/\/    0:   3d 00 00 00 80          cmp    $0x80000000,%eax\n-    \/\/    5:   75 07\/08                jne    e <normal>\n-    \/\/    7:   33 d2                   xor    %edx,%edx\n-    \/\/  [div >= 8 -> offset + 1]\n-    \/\/  [REX_B]\n-    \/\/    9:   83 f9 ff                cmp    $0xffffffffffffffff,$div\n-    \/\/    c:   74 03\/04                je     11 <done>\n-    \/\/ 000000000000000e <normal>:\n-    \/\/    e:   99                      cltd\n-    \/\/  [div >= 8 -> offset + 1]\n-    \/\/  [REX_B]\n-    \/\/    f:   f7 f9                   idiv   $div\n-    \/\/ 0000000000000011 <done>:\n-\n-    \/\/ cmp    $0x80000000,%eax\n-    emit_opcode(cbuf, 0x3d);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x80);\n-\n-    \/\/ jne    e <normal>\n-    emit_opcode(cbuf, 0x75);\n-    emit_d8(cbuf, $div$$reg < 8 ? 0x07 : 0x08);\n-\n-    \/\/ xor    %edx,%edx\n-    emit_opcode(cbuf, 0x33);\n-    emit_d8(cbuf, 0xD2);\n-\n-    \/\/ cmp    $0xffffffffffffffff,%ecx\n-    if ($div$$reg >= 8) {\n-      emit_opcode(cbuf, Assembler::REX_B);\n-    }\n-    emit_opcode(cbuf, 0x83);\n-    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n-    emit_d8(cbuf, 0xFF);\n-\n-    \/\/ je     11 <done>\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, $div$$reg < 8 ? 0x03 : 0x04);\n-\n-    \/\/ <normal>\n-    \/\/ cltd\n-    emit_opcode(cbuf, 0x99);\n-\n-    \/\/ idivl (note: must be emitted by the user of this rule)\n-    \/\/ <done>\n-  %}\n-\n-  enc_class cdqq_enc(no_rax_rdx_RegL div)\n-  %{\n-    \/\/ Full implementation of Java ldiv and lrem; checks for\n-    \/\/ special case as described in JVM spec., p.243 & p.271.\n-    \/\/\n-    \/\/         normal case                           special case\n-    \/\/\n-    \/\/ input : rax: dividend                         min_long\n-    \/\/         reg: divisor                          -1\n-    \/\/\n-    \/\/ output: rax: quotient  (= rax idiv reg)       min_long\n-    \/\/         rdx: remainder (= rax irem reg)       0\n-    \/\/\n-    \/\/  Code sequnce:\n-    \/\/\n-    \/\/    0:   48 ba 00 00 00 00 00    mov    $0x8000000000000000,%rdx\n-    \/\/    7:   00 00 80\n-    \/\/    a:   48 39 d0                cmp    %rdx,%rax\n-    \/\/    d:   75 08                   jne    17 <normal>\n-    \/\/    f:   33 d2                   xor    %edx,%edx\n-    \/\/   11:   48 83 f9 ff             cmp    $0xffffffffffffffff,$div\n-    \/\/   15:   74 05                   je     1c <done>\n-    \/\/ 0000000000000017 <normal>:\n-    \/\/   17:   48 99                   cqto\n-    \/\/   19:   48 f7 f9                idiv   $div\n-    \/\/ 000000000000001c <done>:\n-\n-    \/\/ mov    $0x8000000000000000,%rdx\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0xBA);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x80);\n-\n-    \/\/ cmp    %rdx,%rax\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0x39);\n-    emit_d8(cbuf, 0xD0);\n-\n-    \/\/ jne    17 <normal>\n-    emit_opcode(cbuf, 0x75);\n-    emit_d8(cbuf, 0x08);\n-\n-    \/\/ xor    %edx,%edx\n-    emit_opcode(cbuf, 0x33);\n-    emit_d8(cbuf, 0xD2);\n-\n-    \/\/ cmp    $0xffffffffffffffff,$div\n-    emit_opcode(cbuf, $div$$reg < 8 ? Assembler::REX_W : Assembler::REX_WB);\n-    emit_opcode(cbuf, 0x83);\n-    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n-    emit_d8(cbuf, 0xFF);\n-\n-    \/\/ je     1e <done>\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x05);\n-\n-    \/\/ <normal>\n-    \/\/ cqto\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0x99);\n-\n-    \/\/ idivq (note: must be emitted by the user of this rule)\n-    \/\/ <done>\n-  %}\n-\n@@ -5033,2 +4898,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movl($dst$$Register, $mem$$Address);\n+  %}\n@@ -5046,2 +4912,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5072,2 +4939,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5368,2 +5236,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5379,2 +5248,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5384,11 +5254,0 @@\n-\/\/ instruct leaPIdx(rRegP dst, indIndex mem)\n-\/\/ %{\n-\/\/   match(Set dst mem);\n-\n-\/\/   ins_cost(110);\n-\/\/   format %{ \"leaq    $dst, $mem\\t# ptr idx\" %}\n-\/\/   opcode(0x8D);\n-\/\/   ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n-\/\/   ins_pipe(ialu_reg_reg_fat);\n-\/\/ %}\n-\n@@ -5401,2 +5260,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5412,2 +5272,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5423,2 +5284,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5434,2 +5296,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5445,2 +5308,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5456,2 +5320,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5481,2 +5346,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5493,2 +5359,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5505,2 +5372,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5517,2 +5385,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5529,2 +5398,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5541,2 +5411,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5553,2 +5424,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5563,1 +5435,3 @@\n-  ins_encode(load_immI(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -5574,2 +5448,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5596,2 +5471,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5636,2 +5512,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5734,1 +5611,1 @@\n-    __ xorpd ($dst$$XMMRegister, $dst$$XMMRegister);\n+    __ xorpd($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -5745,2 +5622,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, Address(rsp, $src$$disp));\n+  %}\n@@ -5756,2 +5634,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ movq($dst$$Register, Address(rsp, $src$$disp));\n+  %}\n@@ -5767,2 +5646,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ movq($dst$$Register, Address(rsp, $src$$disp));\n+  %}\n@@ -5857,2 +5737,3 @@\n-  opcode(0x88);\n-  ins_encode(REX_breg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$Register);\n+  %}\n@@ -5869,2 +5750,3 @@\n-  opcode(0x89);\n-  ins_encode(SizePrefix, REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movw($mem$$Address, $src$$Register);\n+  %}\n@@ -5881,2 +5763,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movl($mem$$Address, $src$$Register);\n+  %}\n@@ -5893,2 +5776,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$Register);\n+  %}\n@@ -5905,2 +5789,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$Register);\n+  %}\n@@ -6022,2 +5907,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movl($mem$$Address, $src$$constant);\n+  %}\n@@ -6098,2 +5984,3 @@\n-  opcode(0xC6); \/* C6 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con8or32(src));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$constant);\n+  %}\n@@ -6123,2 +6010,3 @@\n-  opcode(0xC6); \/* C6 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con8or32(src));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$constant);\n+  %}\n@@ -6211,2 +6099,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ movl(Address(rsp, $dst$$disp), $src$$Register);\n+  %}\n@@ -6222,2 +6111,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ movq(Address(rsp, $dst$$disp), $src$$Register);\n+  %}\n@@ -6233,2 +6123,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ movq(Address(rsp, $dst$$disp), $src$$Register);\n+  %}\n@@ -6308,2 +6199,3 @@\n-  opcode(0x0F, 0xC8);  \/*Opcode 0F \/C8 *\/\n-  ins_encode( REX_reg(dst), OpcP, opc2_reg(dst) );\n+  ins_encode %{\n+    __ bswapl($dst$$Register);\n+  %}\n@@ -6317,2 +6209,3 @@\n-  opcode(0x0F, 0xC8); \/* Opcode 0F \/C8 *\/\n-  ins_encode( REX_reg_wide(dst), OpcP, opc2_reg(dst) );\n+  ins_encode %{\n+    __ bswapq($dst$$Register);\n+  %}\n@@ -6836,2 +6729,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6846,2 +6740,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6865,2 +6760,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -6877,2 +6773,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -6897,2 +6794,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6909,2 +6807,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6929,2 +6828,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6941,2 +6841,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6987,2 +6888,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -6998,2 +6900,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem_wide(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7009,2 +6912,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7028,2 +6932,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem_wide(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7150,2 +7055,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$Register);\n+  %}\n@@ -7161,2 +7067,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$constant);\n+  %}\n@@ -7173,2 +7080,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$Address);\n+  %}\n@@ -7185,2 +7093,3 @@\n-  opcode(0x01); \/* Opcode 01 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ addl($dst$$Address, $src$$Register);\n+  %}\n@@ -7197,2 +7106,3 @@\n-  opcode(0x81); \/* Opcode 81 \/0 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src), RM_opc_mem(0x00, dst), Con8or32(src));\n+  ins_encode %{\n+    __ addl($dst$$Address, $src$$constant);\n+  %}\n@@ -7209,2 +7119,3 @@\n-  opcode(0xFF, 0x00); \/\/ FF \/0\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ incrementl($dst$$Register);\n+  %}\n@@ -7222,2 +7133,3 @@\n-  opcode(0xFF); \/* Opcode FF \/0 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(0x00, dst));\n+  ins_encode %{\n+    __ incrementl($dst$$Address);\n+  %}\n@@ -7235,2 +7147,3 @@\n-  opcode(0xFF, 0x01); \/\/ FF \/1\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ decrementl($dst$$Register);\n+  %}\n@@ -7249,2 +7162,3 @@\n-  opcode(0xFF); \/* Opcode FF \/1 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(0x01, dst));\n+  ins_encode %{\n+    __ decrementl($dst$$Address);\n+  %}\n@@ -7260,2 +7174,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(Opcode(0x67), REX_reg_reg(dst, src0), OpcP, reg_lea(dst, src0, src1)); \/\/ XXX\n+  ins_encode %{\n+    __ leal($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7271,2 +7186,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Register);\n+  %}\n@@ -7282,2 +7198,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$constant);\n+  %}\n@@ -7294,2 +7211,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Address);\n+  %}\n@@ -7306,2 +7224,3 @@\n-  opcode(0x01); \/* Opcode 01 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ addq($dst$$Address, $src$$Register);\n+  %}\n@@ -7318,3 +7237,3 @@\n-  opcode(0x81); \/* Opcode 81 \/0 id *\/\n-  ins_encode(REX_mem_wide(dst),\n-             OpcSE(src), RM_opc_mem(0x00, dst), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Address, $src$$constant);\n+  %}\n@@ -7331,2 +7250,3 @@\n-  opcode(0xFF, 0x00); \/\/ FF \/0\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ incrementq($dst$$Register);\n+  %}\n@@ -7344,2 +7264,3 @@\n-  opcode(0xFF); \/* Opcode FF \/0 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(0x00, dst));\n+  ins_encode %{\n+    __ incrementq($dst$$Address);\n+  %}\n@@ -7357,2 +7278,3 @@\n-  opcode(0xFF, 0x01); \/\/ FF \/1\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ decrementq($dst$$Register);\n+  %}\n@@ -7371,2 +7293,3 @@\n-  opcode(0xFF); \/* Opcode FF \/1 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(0x01, dst));\n+  ins_encode %{\n+    __ decrementq($dst$$Address);\n+  %}\n@@ -7382,2 +7305,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(REX_reg_reg_wide(dst, src0), OpcP, reg_lea(dst, src0, src1)); \/\/ XXX\n+  ins_encode %{\n+    __ leaq($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7393,2 +7317,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Register);\n+  %}\n@@ -7404,2 +7329,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$constant);\n+  %}\n@@ -7417,2 +7343,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(REX_reg_reg_wide(dst, src0), OpcP, reg_lea(dst, src0, src1));\/\/ XXX\n+  ins_encode %{\n+    __ leaq($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7471,2 +7398,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -7489,5 +7417,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, heap_top_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, heap_top_ptr));\n+  ins_encode %{\n+    __ cmpxchgq($newval$$Register, $heap_top_ptr$$Address);\n+  %}\n@@ -7505,5 +7431,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem));\n+  ins_encode %{\n+    __ cmpxchgl($newval$$Register, $mem$$Address);\n+  %}\n@@ -7521,5 +7445,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem));\n+  ins_encode %{\n+    __ cmpxchgq($newval$$Register, $mem$$Address);\n+  %}\n@@ -7687,6 +7609,3 @@\n-  opcode(0x0F, 0xB0);\n-  ins_encode(lock_prefix,\n-             REX_breg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n+  ins_encode %{\n+    __ cmpxchgb($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7726,6 +7645,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n+  ins_encode %{\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7746,6 +7662,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-            );\n+  ins_encode %{\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7764,6 +7677,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-          );\n+  ins_encode %{\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7784,6 +7694,3 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-          );\n+  ins_encode %{\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7995,2 +7902,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$Register);\n+  %}\n@@ -8006,2 +7914,3 @@\n-  opcode(0x81, 0x05);  \/* Opcode 81 \/5 *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$constant);\n+  %}\n@@ -8018,2 +7927,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$Address);\n+  %}\n@@ -8030,2 +7940,3 @@\n-  opcode(0x29); \/* Opcode 29 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ subl($dst$$Address, $src$$Register);\n+  %}\n@@ -8042,2 +7953,3 @@\n-  opcode(0x81); \/* Opcode 81 \/5 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src), RM_opc_mem(0x05, dst), Con8or32(src));\n+  ins_encode %{\n+    __ subl($dst$$Address, $src$$constant);\n+  %}\n@@ -8053,2 +7965,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$Register);\n+  %}\n@@ -8064,2 +7977,3 @@\n-  opcode(0x81, 0x05);  \/* Opcode 81 \/5 *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$constant);\n+  %}\n@@ -8076,2 +7990,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$Address);\n+  %}\n@@ -8088,2 +8003,3 @@\n-  opcode(0x29); \/* Opcode 29 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ subq($dst$$Address, $src$$Register);\n+  %}\n@@ -8100,3 +8016,3 @@\n-  opcode(0x81); \/* Opcode 81 \/5 id *\/\n-  ins_encode(REX_mem_wide(dst),\n-             OpcSE(src), RM_opc_mem(0x05, dst), Con8or32(src));\n+  ins_encode %{\n+    __ subq($dst$$Address, $src$$constant);\n+  %}\n@@ -8114,2 +8030,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$Register);\n+  %}\n@@ -8125,2 +8042,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ negl($dst$$Register);\n+  %}\n@@ -8159,2 +8077,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ negq($dst$$Register);\n+  %}\n@@ -8198,2 +8117,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Register);\n+  %}\n@@ -8210,3 +8130,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_reg(dst, src),\n-             OpcSE(imm), reg_reg(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Register, $imm$$constant);\n+  %}\n@@ -8223,2 +8143,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, OpcS, reg_mem(dst, src));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Address);\n+  %}\n@@ -8258,2 +8179,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Register);\n+  %}\n@@ -8270,3 +8192,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_reg_wide(dst, src),\n-             OpcSE(imm), reg_reg(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Register, $imm$$constant);\n+  %}\n@@ -8283,2 +8205,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, OpcS, reg_mem(dst, src));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Address);\n+  %}\n@@ -8328,2 +8251,13 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ cmpl($rax$$Register, 0x80000000);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpl($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdql();\n+    __ idivl($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8349,2 +8283,14 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ mov64($rdx$$Register, 0x8000000000000000);\n+    __ cmpq($rax$$Register, $rdx$$Register);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpq($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdqq();\n+    __ idivq($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8370,2 +8316,13 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ cmpl($rax$$Register, 0x80000000);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpl($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdql();\n+    __ idivl($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8392,2 +8349,14 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ mov64($rdx$$Register, 0x8000000000000000);\n+    __ cmpq($rax$$Register, $rdx$$Register);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpq($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdqq();\n+    __ idivq($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8425,2 +8394,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, 0x3F));\n+  ins_encode %{\n+    __ sarq($dst$$Register, 63);\n+  %}\n@@ -8435,2 +8405,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, 0x2));\n+  ins_encode %{\n+    __ sarq($dst$$Register, 2);\n+  %}\n@@ -8473,2 +8444,13 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ cmpl($rax$$Register, 0x80000000);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpl($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdql();\n+    __ idivl($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8494,2 +8476,14 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode %{\n+    Label normal;\n+    Label done;\n+    __ mov64($rdx$$Register, 0x8000000000000000);\n+    __ cmpq($rax$$Register, $rdx$$Register);\n+    __ jccb(Assembler::notEqual, normal);\n+    __ xorl($rdx$$Register, $rdx$$Register);\n+    __ cmpq($div$$Register, -1);\n+    __ jccb(Assembler::equal, done);\n+    __ bind(normal);\n+    __ cdqq();\n+    __ idivq($div$$Register);\n+    __ bind(done);\n+  %}\n@@ -8507,2 +8501,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sall($dst$$Register, $shift$$constant);\n+  %}\n@@ -8519,2 +8514,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sall($dst$$Address, $shift$$constant);\n+  %}\n@@ -8531,2 +8527,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ sall($dst$$Register, $shift$$constant);\n+  %}\n@@ -8543,2 +8540,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sall($dst$$Address, $shift$$constant);\n+  %}\n@@ -8555,2 +8553,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sall($dst$$Register);\n+  %}\n@@ -8567,2 +8566,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sall($dst$$Address);\n+  %}\n@@ -8579,2 +8579,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8591,2 +8592,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8603,2 +8605,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ sarl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8615,2 +8618,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sarl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8625,1 +8629,0 @@\n-\n@@ -8627,2 +8630,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarl($dst$$Register);\n+  %}\n@@ -8639,2 +8643,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarl($dst$$Address);\n+  %}\n@@ -8651,2 +8656,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8663,2 +8669,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8675,2 +8682,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ shrl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8687,2 +8695,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ shrl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8711,2 +8720,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrl($dst$$Address);\n+  %}\n@@ -8724,2 +8734,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ salq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8736,2 +8747,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ salq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8748,2 +8760,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ salq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8760,3 +8773,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ salq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8773,2 +8786,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ salq($dst$$Register);\n+  %}\n@@ -8785,2 +8799,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ salq($dst$$Address);\n+  %}\n@@ -8797,2 +8812,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8809,2 +8825,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8821,2 +8838,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ sarq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8833,3 +8851,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sarq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8846,2 +8864,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarq($dst$$Register);\n+  %}\n@@ -8858,2 +8877,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarq($dst$$Address);\n+  %}\n@@ -8870,2 +8890,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst ));\n+  ins_encode %{\n+    __ shrq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8882,2 +8903,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8894,2 +8916,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ shrq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8899,1 +8922,0 @@\n-\n@@ -8907,3 +8929,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ shrq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8920,2 +8942,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrq($dst$$Register);\n+  %}\n@@ -8932,2 +8955,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrq($dst$$Address);\n+  %}\n@@ -9107,2 +9131,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$Register);\n+  %}\n@@ -9118,2 +9143,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_breg(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9129,2 +9155,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_breg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movzbl($dst$$Register, $src$$Register);\n+  %}\n@@ -9140,2 +9167,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzwl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9151,2 +9179,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movzwl($dst$$Register, $src$$Register);\n+  %}\n@@ -9163,2 +9192,3 @@\n-  opcode(0x81, 0x04); \/* Opcode 81 \/4 *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$constant);\n+  %}\n@@ -9176,2 +9206,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$Address);\n+  %}\n@@ -9214,3 +9245,3 @@\n-  opcode(0x81, 0x4); \/* Opcode 81 \/4 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ andl($dst$$Address, $src$$constant);\n+  %}\n@@ -9344,2 +9375,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$Register);\n+  %}\n@@ -9356,2 +9388,3 @@\n-  opcode(0x81, 0x01); \/* Opcode 81 \/1 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$constant);\n+  %}\n@@ -9369,2 +9402,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$Address);\n+  %}\n@@ -9394,2 +9428,3 @@\n-  opcode(0x09); \/* Opcode 09 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orl($dst$$Address, $src$$Register);\n+  %}\n@@ -9407,3 +9442,3 @@\n-  opcode(0x81, 0x1); \/* Opcode 81 \/1 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ orl($dst$$Address, $src$$constant);\n+  %}\n@@ -9421,2 +9456,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$Register);\n+  %}\n@@ -9457,2 +9493,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$Address);\n+  %}\n@@ -9512,2 +9549,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$Register);\n+  %}\n@@ -9523,2 +9561,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_reg_wide(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzbq($dst$$Register, $dst$$Register);\n+  %}\n@@ -9534,2 +9573,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg_wide(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzwq($dst$$Register, $dst$$Register);\n+  %}\n@@ -9546,2 +9586,3 @@\n-  opcode(0x81, 0x04); \/* Opcode 81 \/4 *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$constant);\n+  %}\n@@ -9559,2 +9600,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$Address);\n+  %}\n@@ -9585,3 +9627,3 @@\n-  opcode(0x81, 0x4); \/* Opcode 81 \/4 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ andq($dst$$Address, $src$$constant);\n+  %}\n@@ -9732,2 +9774,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Register);\n+  %}\n@@ -9743,2 +9786,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Register);\n+  %}\n@@ -9756,2 +9800,3 @@\n-  opcode(0x81, 0x01); \/* Opcode 81 \/1 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$constant);\n+  %}\n@@ -9769,2 +9814,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Address);\n+  %}\n@@ -9795,3 +9841,3 @@\n-  opcode(0x81, 0x1); \/* Opcode 81 \/1 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ orq($dst$$Address, $src$$constant);\n+  %}\n@@ -9826,2 +9872,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$Register);\n+  %}\n@@ -9862,2 +9909,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$Address);\n+  %}\n@@ -9952,1 +10000,1 @@\n-  __ sarl($dst$$Register, 31);\n+    __ sarl($dst$$Register, 31);\n@@ -11386,2 +11434,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Register);\n+  %}\n@@ -11407,2 +11456,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Address);\n+  %}\n@@ -11417,2 +11467,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+  %}\n@@ -11437,2 +11488,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testl($src$$Register, $mem$$Address);\n+  %}\n@@ -11449,2 +11501,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Register);\n+  %}\n@@ -11470,2 +11523,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Address);\n+  %}\n@@ -11491,2 +11545,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+  %}\n@@ -11501,2 +11556,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -11513,2 +11569,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -11540,2 +11597,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -11552,2 +11610,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -11689,2 +11748,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -11709,2 +11769,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -11719,2 +11780,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -11739,2 +11801,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testq($src$$Register, $mem$$Address);\n+  %}\n@@ -11749,2 +11812,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testq($src$$Register, $mem$$Address);\n+  %}\n@@ -11779,2 +11843,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -11799,2 +11864,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -11809,2 +11875,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -12453,2 +12520,3 @@\n-  opcode(0xC3);\n-  ins_encode(OpcP);\n+  ins_encode %{\n+    __ ret(0);\n+  %}\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":641,"deletions":573,"binary":false,"changes":1214,"status":"modified"}]}