{"files":[{"patch":"@@ -1472,0 +1472,7 @@\n+void Assembler::andb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x20);\n+  emit_operand(src, dst);\n+}\n+\n@@ -1480,3 +1487,1 @@\n-  emit_int8((unsigned char)0x81);\n-  emit_operand(rsp, dst, 4);\n-  emit_int32(imm32);\n+  emit_arith_operand(0x81, as_Register(4), dst, imm32);\n@@ -1490,0 +1495,7 @@\n+void Assembler::andl(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x21);\n+  emit_operand(src, dst);\n+}\n+\n@@ -1652,0 +1664,1 @@\n+  InstructionMark im(this);\n@@ -1674,0 +1687,6 @@\n+void Assembler::cmp(Register dst, int32_t imm32) {\n+  prefix(dst);\n+  emit_int8((unsigned char)0x3D);\n+  emit_int32(imm32);\n+}\n+\n@@ -1709,0 +1728,8 @@\n+void Assembler::cmpxchgw(Register reg, Address adr) { \/\/ cmpxchg\n+  InstructionMark im(this);\n+  size_prefix();\n+  prefix(adr, reg);\n+  emit_int16(0x0F, (unsigned char)0xB1);\n+  emit_operand(reg, adr);\n+}\n+\n@@ -2171,0 +2198,13 @@\n+void Assembler::imull(Register dst, Address src, int32_t value) {\n+  InstructionMark im(this);\n+  prefix(src, dst);\n+  if (is8bit(value)) {\n+    emit_int8((unsigned char)0x6B);\n+    emit_operand(dst, src);\n+    emit_int8(value);\n+  } else {\n+    emit_int8((unsigned char)0x69);\n+    emit_operand(dst, src);\n+    emit_int32(value);\n+  }\n+}\n@@ -2354,0 +2394,4 @@\n+void Assembler::size_prefix() {\n+  emit_int8(0x66);\n+}\n+\n@@ -3249,0 +3293,7 @@\n+void Assembler::negl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xF7);\n+  emit_operand(as_Register(3), dst);\n+}\n+\n@@ -3603,0 +3654,7 @@\n+void Assembler::orb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src, true);\n+  emit_int8(0x08);\n+  emit_operand(src, dst);\n+}\n+\n@@ -5024,0 +5082,59 @@\n+void Assembler::sall(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(4), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(4), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sall(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(4), dst);\n+}\n+\n+void Assembler::sall(Register dst, int imm8) {\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  int encode = prefix_and_encode(dst->encoding());\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE0 | encode));\n+  } else {\n+    emit_int24((unsigned char)0xC1, (0xE0 | encode), imm8);\n+  }\n+}\n+\n+void Assembler::sall(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xD3, (0xE0 | encode));\n+}\n+\n+void Assembler::sarl(Address dst, int imm8) {\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  InstructionMark im(this);\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(7), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(7), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sarl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(7), dst);\n+}\n+\n@@ -5069,0 +5186,15 @@\n+void Assembler::sete(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x94, (0xC0 | encode));\n+}\n+\n+void Assembler::setl(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x9C, (0xC0 | encode));\n+}\n+\n+void Assembler::setne(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | encode));\n+}\n+\n@@ -5162,1 +5294,6 @@\n-  emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE8 | encode));\n+  }\n+  else {\n+    emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  }\n@@ -5170,0 +5307,23 @@\n+void Assembler::shrl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xD3);\n+  emit_operand(as_Register(5), dst);\n+}\n+\n+void Assembler::shrl(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8), \"illegal shift count\");\n+  prefix(dst);\n+  if (imm8 == 1) {\n+    emit_int8((unsigned char)0xD1);\n+    emit_operand(as_Register(5), dst);\n+  }\n+  else {\n+    emit_int8((unsigned char)0xC1);\n+    emit_operand(as_Register(5), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+\n@@ -5360,6 +5520,2 @@\n-  if (encode == 0) {\n-    emit_int8((unsigned char)0xA9);\n-  } else {\n-    encode = prefix_and_encode(encode);\n-    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  }\n+  encode = prefix_and_encode(encode);\n+  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n@@ -5510,0 +5666,6 @@\n+void Assembler::xorl(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_arith_operand(0x81, as_Register(6), dst, imm32);\n+}\n+\n@@ -5527,0 +5689,7 @@\n+void Assembler::xorl(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x31);\n+  emit_operand(src, dst);\n+}\n+\n@@ -5534,0 +5703,7 @@\n+void Assembler::xorb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src, true);\n+  emit_int8(0x30);\n+  emit_operand(src, dst);\n+}\n+\n@@ -9260,1 +9436,1 @@\n-  emit_int24(0x0F, (unsigned char)0x95, (0xE0 | dst->encoding()));\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | dst->encoding()));\n@@ -9267,1 +9443,1 @@\n-  emit_int24(0x0F, (unsigned char)0x95, (0xE0 | enc));\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | enc));\n@@ -9694,3 +9870,2 @@\n-  emit_int16(get_prefixq(dst), (unsigned char)0x81);\n-  emit_operand(rsp, dst, 4);\n-  emit_int32(imm32);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(4), dst, imm32);\n@@ -9715,0 +9890,6 @@\n+void Assembler::andq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), 0x21);\n+  emit_operand(src, dst);\n+}\n+\n@@ -9982,0 +10163,19 @@\n+void Assembler::imulq(Register src) {\n+  int encode = prefixq_and_encode(src->encoding());\n+  emit_int16((unsigned char)0xF7, (0xE8 | encode));\n+}\n+\n+void Assembler::imulq(Register dst, Address src, int32_t value) {\n+  InstructionMark im(this);\n+  prefixq(src, dst);\n+  if (is8bit(value)) {\n+    emit_int8((unsigned char)0x6B);\n+    emit_operand(dst, src);\n+    emit_int8(value);\n+  } else {\n+    emit_int8((unsigned char)0x69);\n+    emit_operand(dst, src);\n+    emit_int32(value);\n+  }\n+}\n+\n@@ -10036,0 +10236,7 @@\n+void Assembler::mov64(Register dst, int64_t imm64, relocInfo::relocType rtype, int format) {\n+  InstructionMark im(this);\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int8(0xB8 | encode);\n+  emit_data64(imm64, rtype, format);\n+}\n+\n@@ -10116,0 +10323,13 @@\n+void Assembler::movq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xC7);\n+  emit_operand(as_Register(0), dst);\n+  emit_int32(imm32);\n+}\n+\n+void Assembler::movq(Register dst, int32_t imm32) {\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xC7, (0xC0 | encode));\n+  emit_int32(imm32);\n+}\n+\n@@ -10221,0 +10441,6 @@\n+void Assembler::negq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xF7);\n+  emit_operand(as_Register(3), dst);\n+}\n+\n@@ -10248,3 +10474,8 @@\n-  emit_int16(get_prefixq(dst), (unsigned char)0x81);\n-  emit_operand(rcx, dst, 4);\n-  emit_int32(imm32);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(1), dst, imm32);\n+}\n+\n+void Assembler::orq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), (unsigned char)0x09);\n+  emit_operand(src, dst);\n@@ -10292,0 +10523,4 @@\n+void Assembler::popq(Register dst) {\n+  emit_int8((unsigned char)0x58 | dst->encoding());\n+}\n+\n@@ -10461,0 +10696,56 @@\n+#ifdef _LP64\n+void Assembler::salq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(4), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(4), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::salq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(4), dst);\n+}\n+\n+void Assembler::salq(Register dst, int imm8) {\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  int encode = prefixq_and_encode(dst->encoding());\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE0 | encode));\n+  } else {\n+    emit_int24((unsigned char)0xC1, (0xE0 | encode), imm8);\n+  }\n+}\n+\n+void Assembler::salq(Register dst) {\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xD3, (0xE0 | encode));\n+}\n+\n+void Assembler::sarq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(7), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(7), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n+void Assembler::sarq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(7), dst);\n+}\n+\n@@ -10475,0 +10766,1 @@\n+#endif\n@@ -10516,1 +10808,6 @@\n-  emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE8 | encode));\n+  }\n+  else {\n+    emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  }\n@@ -10524,0 +10821,20 @@\n+void Assembler::shrq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xD3);\n+  emit_operand(as_Register(5), dst);\n+}\n+\n+void Assembler::shrq(Address dst, int imm8) {\n+  InstructionMark im(this);\n+  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  if (imm8 == 1) {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xD1);\n+    emit_operand(as_Register(5), dst);\n+  }\n+  else {\n+    emit_int16(get_prefixq(dst), (unsigned char)0xC1);\n+    emit_operand(as_Register(5), dst);\n+    emit_int8(imm8);\n+  }\n+}\n+\n@@ -10558,0 +10875,7 @@\n+void Assembler::testq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xF7);\n+  emit_operand(as_Register(0), dst);\n+  emit_int32(imm32);\n+}\n+\n@@ -10563,6 +10887,2 @@\n-  if (encode == 0) {\n-    emit_int16(REX_W, (unsigned char)0xA9);\n-  } else {\n-    encode = prefixq_and_encode(encode);\n-    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  }\n+  encode = prefixq_and_encode(encode);\n+  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n@@ -10611,0 +10931,17 @@\n+void Assembler::xorq(Register dst, int32_t imm32) {\n+  (void) prefixq_and_encode(dst->encoding());\n+  emit_arith(0x81, 0xF0, dst, imm32);\n+}\n+\n+void Assembler::xorq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(6), dst, imm32);\n+}\n+\n+void Assembler::xorq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), 0x31);\n+  emit_operand(src, dst);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":362,"deletions":25,"binary":false,"changes":387,"status":"modified"},{"patch":"@@ -1015,0 +1015,1 @@\n+  void andb(Address dst, Register src);\n@@ -1020,0 +1021,1 @@\n+  void andl(Address dst, Register src);\n@@ -1025,0 +1027,1 @@\n+  void andq(Address dst, Register src);\n@@ -1084,0 +1087,1 @@\n+  void cmp(Register dst, int32_t imm32);\n@@ -1107,0 +1111,1 @@\n+  void cmpxchgw(Register reg, Address adr);\n@@ -1366,0 +1371,1 @@\n+  void imull(Register dst, Address src, int value);\n@@ -1371,0 +1377,1 @@\n+  void imulq(Register dst, Address src, int value);\n@@ -1372,0 +1379,1 @@\n+  void imulq(Register dst);\n@@ -1427,0 +1435,1 @@\n+  void size_prefix();\n@@ -1450,0 +1459,1 @@\n+  void mov64(Register dst, int64_t imm64, relocInfo::relocType rtype, int format);\n@@ -1549,0 +1559,2 @@\n+  void movq(Address  dst, int32_t imm32);\n+  void movq(Register  dst, int32_t imm32);\n@@ -1627,0 +1639,1 @@\n+  void negl(Address dst);\n@@ -1630,0 +1643,1 @@\n+  void negq(Address dst);\n@@ -1652,0 +1666,1 @@\n+  void orb(Address dst, Register src);\n@@ -1654,0 +1669,1 @@\n+  void orq(Address dst, Register src);\n@@ -1808,0 +1824,1 @@\n+  void popq(Register dst);\n@@ -1918,0 +1935,7 @@\n+  void sall(Register dst, int imm8);\n+  void sall(Register dst);\n+  void sall(Address dst, int imm8);\n+  void sall(Address dst);\n+\n+  void sarl(Address dst, int imm8);\n+  void sarl(Address dst);\n@@ -1921,0 +1945,8 @@\n+#ifdef _LP64\n+  void salq(Register dst, int imm8);\n+  void salq(Register dst);\n+  void salq(Address dst, int imm8);\n+  void salq(Address dst);\n+\n+  void sarq(Address dst, int imm8);\n+  void sarq(Address dst);\n@@ -1923,0 +1955,1 @@\n+#endif\n@@ -1936,0 +1969,4 @@\n+  void sete(Register dst);\n+  void setl(Register dst);\n+  void setne(Register dst);\n+\n@@ -1965,0 +2002,2 @@\n+  void shrl(Address dst);\n+  void shrl(Address dst, int imm8);\n@@ -1968,0 +2007,2 @@\n+  void shrq(Address dst);\n+  void shrq(Address dst, int imm8);\n@@ -2017,0 +2058,1 @@\n+  void testq(Address dst, int32_t imm32);\n@@ -2056,0 +2098,1 @@\n+  void xorl(Address dst, int32_t imm32);\n@@ -2058,0 +2101,1 @@\n+  void xorl(Address dst, Register src);\n@@ -2059,0 +2103,1 @@\n+  void xorb(Address dst, Register src);\n@@ -2063,0 +2108,1 @@\n+  void xorq(Address dst, int32_t imm32);\n@@ -2064,0 +2110,2 @@\n+  void xorq(Register dst, int32_t imm32);\n+  void xorq(Address dst, Register src);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1957,0 +1957,3 @@\n+    MacroAssembler _masm(&cbuf);\n+    Label normal;\n+    Label done;\n@@ -1959,5 +1962,1 @@\n-    emit_opcode(cbuf, 0x3d);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x80);\n+    __ cmp(as_Register(RAX_enc), 0x80000000);\n@@ -1966,2 +1965,1 @@\n-    emit_opcode(cbuf, 0x75);\n-    emit_d8(cbuf, $div$$reg < 8 ? 0x07 : 0x08);\n+    __ jccb(Assembler::notEqual, normal);\n@@ -1970,2 +1968,1 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_d8(cbuf, 0xD2);\n+    __ xorl(as_Register(RDX_enc), as_Register(RDX_enc));\n@@ -1974,6 +1971,1 @@\n-    if ($div$$reg >= 8) {\n-      emit_opcode(cbuf, Assembler::REX_B);\n-    }\n-    emit_opcode(cbuf, 0x83);\n-    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n-    emit_d8(cbuf, 0xFF);\n+    __ cmpl($div$$Register, -1);\n@@ -1982,2 +1974,1 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, $div$$reg < 8 ? 0x03 : 0x04);\n+    __ jccb(Assembler::equal, done);\n@@ -1987,1 +1978,2 @@\n-    emit_opcode(cbuf, 0x99);\n+    __ bind(normal);\n+    __ cdql();\n@@ -1989,1 +1981,1 @@\n-    \/\/ idivl (note: must be emitted by the user of this rule)\n+    \/\/ idivl\n@@ -1991,0 +1983,2 @@\n+    __ idivl($div$$Register);\n+    __ bind(done);\n@@ -2019,0 +2013,3 @@\n+    MacroAssembler _masm(&cbuf);\n+    Label normal;\n+    Label done;\n@@ -2021,10 +2018,1 @@\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0xBA);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x00);\n-    emit_d8(cbuf, 0x80);\n+    __ mov64(as_Register(RDX_enc), 0x8000000000000000);\n@@ -2033,3 +2021,1 @@\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0x39);\n-    emit_d8(cbuf, 0xD0);\n+    __ cmpq(as_Register(RAX_enc), as_Register(RDX_enc));\n@@ -2038,2 +2024,1 @@\n-    emit_opcode(cbuf, 0x75);\n-    emit_d8(cbuf, 0x08);\n+    __ jccb(Assembler::notEqual, normal);\n@@ -2042,2 +2027,1 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_d8(cbuf, 0xD2);\n+    __ xorl(as_Register(RDX_enc), as_Register(RDX_enc));\n@@ -2046,4 +2030,1 @@\n-    emit_opcode(cbuf, $div$$reg < 8 ? Assembler::REX_W : Assembler::REX_WB);\n-    emit_opcode(cbuf, 0x83);\n-    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n-    emit_d8(cbuf, 0xFF);\n+    __ cmpq($div$$Register, -1);\n@@ -2052,2 +2033,1 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x05);\n+    __ jccb(Assembler::equal, done);\n@@ -2057,2 +2037,2 @@\n-    emit_opcode(cbuf, Assembler::REX_W);\n-    emit_opcode(cbuf, 0x99);\n+    __ bind(normal);\n+    __ cdqq();\n@@ -2062,0 +2042,2 @@\n+    __ idivq($div$$Register);\n+    __ bind(done);\n@@ -5214,2 +5196,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movl($dst$$Register, $mem$$Address);\n+  %}\n@@ -5227,2 +5210,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5253,2 +5237,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5549,2 +5534,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5560,2 +5546,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5565,11 +5552,0 @@\n-\/\/ instruct leaPIdx(rRegP dst, indIndex mem)\n-\/\/ %{\n-\/\/   match(Set dst mem);\n-\n-\/\/   ins_cost(110);\n-\/\/   format %{ \"leaq    $dst, $mem\\t# ptr idx\" %}\n-\/\/   opcode(0x8D);\n-\/\/   ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n-\/\/   ins_pipe(ialu_reg_reg_fat);\n-\/\/ %}\n-\n@@ -5582,2 +5558,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5593,2 +5570,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5604,2 +5582,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5615,2 +5594,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5626,2 +5606,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5637,2 +5618,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5650,2 +5632,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5662,2 +5645,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5674,2 +5658,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5686,2 +5671,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5698,2 +5684,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5710,2 +5697,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5722,2 +5710,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5734,2 +5723,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5744,1 +5734,3 @@\n-  ins_encode(load_immI(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -5755,2 +5747,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5766,1 +5759,3 @@\n-  ins_encode(load_immL(dst, src));\n+  ins_encode %{\n+    __ mov64($dst$$Register, $src$$constant);\n+  %}\n@@ -5777,2 +5772,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5788,1 +5784,3 @@\n-  ins_encode(load_immUL32(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -5798,1 +5796,3 @@\n-  ins_encode(load_immL32(dst, src));\n+  ins_encode %{\n+    __ movq($dst$$Register, $src$$constant);\n+  %}\n@@ -5806,1 +5806,3 @@\n-  ins_encode(load_immP(dst, con));\n+  ins_encode %{\n+    __ mov64($dst$$Register, $con$$constant, $con->constant_reloc(), RELOC_IMM64);\n+  %}\n@@ -5817,2 +5819,3 @@\n-  opcode(0x33); \/* + rd *\/\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $dst$$Register);\n+  %}\n@@ -5829,1 +5832,3 @@\n-  ins_encode(load_immP31(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -6038,2 +6043,3 @@\n-  opcode(0x88);\n-  ins_encode(REX_breg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$Register);\n+  %}\n@@ -6050,2 +6056,3 @@\n-  opcode(0x89);\n-  ins_encode(SizePrefix, REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movw($mem$$Address, $src$$Register);\n+  %}\n@@ -6062,2 +6069,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movl($mem$$Address, $src$$Register);\n+  %}\n@@ -6074,2 +6082,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$Register);\n+  %}\n@@ -6086,2 +6095,3 @@\n-  opcode(0x89);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$Register);\n+  %}\n@@ -6111,2 +6121,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -6203,2 +6214,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movl($mem$$Address, $src$$constant);\n+  %}\n@@ -6228,2 +6240,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -6254,2 +6267,3 @@\n-  opcode(0xC7); \/* C7 \/0 Same as 32 store immediate with prefix *\/\n-  ins_encode(SizePrefix, REX_mem(mem), OpcP, RM_opc_mem(0x00, mem),Con16(src));\n+  ins_encode %{\n+    __ movw($mem$$Address, $src$$constant);\n+  %}\n@@ -6279,2 +6293,3 @@\n-  opcode(0xC6); \/* C6 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con8or32(src));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$constant);\n+  %}\n@@ -6304,2 +6319,3 @@\n-  opcode(0xC6); \/* C6 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con8or32(src));\n+  ins_encode %{\n+    __ movb($mem$$Address, $src$$constant);\n+  %}\n@@ -6342,2 +6358,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con32F_as_bits(src));\n+  ins_encode %{\n+    __ movl($mem$$Address, jint_cast($src$$constant));\n+  %}\n@@ -6368,2 +6385,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32F_as_bits(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -6489,2 +6507,3 @@\n-  opcode(0x0F, 0xC8);  \/*Opcode 0F \/C8 *\/\n-  ins_encode( REX_reg(dst), OpcP, opc2_reg(dst) );\n+  ins_encode %{\n+    __ bswapl($dst$$Register);\n+  %}\n@@ -6498,2 +6517,3 @@\n-  opcode(0x0F, 0xC8); \/* Opcode 0F \/C8 *\/\n-  ins_encode( REX_reg_wide(dst), OpcP, opc2_reg(dst) );\n+  ins_encode %{\n+    __ bswapq($dst$$Register);\n+  %}\n@@ -7017,2 +7037,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7027,2 +7048,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7046,2 +7068,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7058,2 +7081,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7078,2 +7102,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7090,2 +7115,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7110,2 +7136,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7122,2 +7149,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7168,2 +7196,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7179,2 +7208,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem_wide(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7190,2 +7220,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_reg_wide(dst, src), enc_cmov(cop), reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Register);\n+  %}\n@@ -7209,2 +7240,3 @@\n-  opcode(0x0F, 0x40);\n-  ins_encode(REX_reg_mem_wide(dst, src), enc_cmov(cop), reg_mem(dst, src));\n+  ins_encode %{\n+    __ cmovq((Assembler::Condition)($cop$$cmpcode), $dst$$Register, $src$$Address);\n+  %}\n@@ -7331,2 +7363,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$Register);\n+  %}\n@@ -7342,2 +7375,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$constant);\n+  %}\n@@ -7354,2 +7388,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ addl($dst$$Register, $src$$Address);\n+  %}\n@@ -7366,2 +7401,3 @@\n-  opcode(0x01); \/* Opcode 01 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ addl($dst$$Address, $src$$Register);\n+  %}\n@@ -7378,2 +7414,3 @@\n-  opcode(0x81); \/* Opcode 81 \/0 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src), RM_opc_mem(0x00, dst), Con8or32(src));\n+  ins_encode %{\n+    __ addl($dst$$Address, $src$$constant);\n+  %}\n@@ -7390,2 +7427,3 @@\n-  opcode(0xFF, 0x00); \/\/ FF \/0\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ incrementl($dst$$Register);\n+  %}\n@@ -7403,2 +7441,3 @@\n-  opcode(0xFF); \/* Opcode FF \/0 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(0x00, dst));\n+  ins_encode %{\n+    __ incrementl($dst$$Address);\n+  %}\n@@ -7416,2 +7455,3 @@\n-  opcode(0xFF, 0x01); \/\/ FF \/1\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ decrementl($dst$$Register);\n+  %}\n@@ -7430,2 +7470,3 @@\n-  opcode(0xFF); \/* Opcode FF \/1 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(0x01, dst));\n+  ins_encode %{\n+    __ decrementl($dst$$Address);\n+  %}\n@@ -7441,2 +7482,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(Opcode(0x67), REX_reg_reg(dst, src0), OpcP, reg_lea(dst, src0, src1)); \/\/ XXX\n+  ins_encode %{\n+    __ leal($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7452,2 +7494,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Register);\n+  %}\n@@ -7463,2 +7506,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$constant);\n+  %}\n@@ -7475,2 +7519,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Address);\n+  %}\n@@ -7487,2 +7532,3 @@\n-  opcode(0x01); \/* Opcode 01 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ addq($dst$$Address, $src$$Register);\n+  %}\n@@ -7499,3 +7545,3 @@\n-  opcode(0x81); \/* Opcode 81 \/0 id *\/\n-  ins_encode(REX_mem_wide(dst),\n-             OpcSE(src), RM_opc_mem(0x00, dst), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Address, $src$$constant);\n+  %}\n@@ -7512,2 +7558,3 @@\n-  opcode(0xFF, 0x00); \/\/ FF \/0\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ incrementq($dst$$Register);\n+  %}\n@@ -7525,2 +7572,3 @@\n-  opcode(0xFF); \/* Opcode FF \/0 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(0x00, dst));\n+  ins_encode %{\n+    __ incrementq($dst$$Address);\n+  %}\n@@ -7538,2 +7586,3 @@\n-  opcode(0xFF, 0x01); \/\/ FF \/1\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ decrementq($dst$$Register);\n+  %}\n@@ -7552,2 +7601,3 @@\n-  opcode(0xFF); \/* Opcode FF \/1 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(0x01, dst));\n+  ins_encode %{\n+    __ decrementq($dst$$Address);\n+  %}\n@@ -7563,2 +7613,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(REX_reg_reg_wide(dst, src0), OpcP, reg_lea(dst, src0, src1)); \/\/ XXX\n+  ins_encode %{\n+    __ leaq($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7574,2 +7625,3 @@\n-  opcode(0x03);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$Register);\n+  %}\n@@ -7585,2 +7637,3 @@\n-  opcode(0x81, 0x00); \/* \/0 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ addq($dst$$Register, $src$$constant);\n+  %}\n@@ -7598,2 +7651,3 @@\n-  opcode(0x8D); \/* 0x8D \/r *\/\n-  ins_encode(REX_reg_reg_wide(dst, src0), OpcP, reg_lea(dst, src0, src1));\/\/ XXX\n+  ins_encode %{\n+    __ leaq($dst$$Register, Address($src0$$Register, $src1$$constant));\n+  %}\n@@ -7652,2 +7706,3 @@\n-  opcode(0x8B);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ movq($dst$$Register, $mem$$Address);\n+  %}\n@@ -7670,5 +7725,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, heap_top_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, heap_top_ptr));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $heap_top_ptr$$Address);\n+  %}\n@@ -7702,5 +7756,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem$$Address);\n+  %}\n@@ -7726,8 +7779,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7751,8 +7802,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7775,8 +7824,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7799,8 +7846,6 @@\n-  opcode(0x0F, 0xB0);\n-  ins_encode(lock_prefix,\n-             REX_breg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgb($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7823,9 +7868,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             SizePrefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgw($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7847,8 +7889,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7868,6 +7908,4 @@\n-  opcode(0x0F, 0xB0);\n-  ins_encode(lock_prefix,\n-             REX_breg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgb($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7887,7 +7925,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             SizePrefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgw($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7907,7 +7942,5 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n-  ins_pipe( pipe_cmpxchg );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+  %}\n+  ins_pipe( pipe_cmpxchg );\n@@ -7927,6 +7960,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-            );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7945,6 +7976,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-          );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7965,6 +7994,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr)  \/\/ lock cmpxchg\n-          );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -8176,2 +8203,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$Register);\n+  %}\n@@ -8187,2 +8215,3 @@\n-  opcode(0x81, 0x05);  \/* Opcode 81 \/5 *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$constant);\n+  %}\n@@ -8199,2 +8228,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ subl($dst$$Register, $src$$Address);\n+  %}\n@@ -8211,2 +8241,3 @@\n-  opcode(0x29); \/* Opcode 29 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ subl($dst$$Address, $src$$Register);\n+  %}\n@@ -8223,2 +8254,3 @@\n-  opcode(0x81); \/* Opcode 81 \/5 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src), RM_opc_mem(0x05, dst), Con8or32(src));\n+  ins_encode %{\n+    __ subl($dst$$Address, $src$$constant);\n+  %}\n@@ -8234,2 +8266,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$Register);\n+  %}\n@@ -8245,2 +8278,3 @@\n-  opcode(0x81, 0x05);  \/* Opcode 81 \/5 *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$constant);\n+  %}\n@@ -8257,2 +8291,3 @@\n-  opcode(0x2B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ subq($dst$$Register, $src$$Address);\n+  %}\n@@ -8269,2 +8304,3 @@\n-  opcode(0x29); \/* Opcode 29 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ subq($dst$$Address, $src$$Register);\n+  %}\n@@ -8281,3 +8317,3 @@\n-  opcode(0x81); \/* Opcode 81 \/5 id *\/\n-  ins_encode(REX_mem_wide(dst),\n-             OpcSE(src), RM_opc_mem(0x05, dst), Con8or32(src));\n+  ins_encode %{\n+    __ subq($dst$$Address, $src$$constant);\n+  %}\n@@ -8306,2 +8342,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ negl($dst$$Register);\n+  %}\n@@ -8329,2 +8366,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ negl($dst$$Address);\n+  %}\n@@ -8340,2 +8378,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ negq($dst$$Register);\n+  %}\n@@ -8363,2 +8402,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ negq($dst$$Address);\n+  %}\n@@ -8379,2 +8419,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Register);\n+  %}\n@@ -8391,3 +8432,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_reg(dst, src),\n-             OpcSE(imm), reg_reg(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Register, $imm$$constant);\n+  %}\n@@ -8404,2 +8445,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, OpcS, reg_mem(dst, src));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Address);\n+  %}\n@@ -8416,3 +8458,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_mem(dst, src),\n-             OpcSE(imm), reg_mem(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Address, $imm$$constant);\n+  %}\n@@ -8439,2 +8481,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Register);\n+  %}\n@@ -8451,3 +8494,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_reg_wide(dst, src),\n-             OpcSE(imm), reg_reg(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Register, $imm$$constant);\n+  %}\n@@ -8464,2 +8507,3 @@\n-  opcode(0x0F, 0xAF);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, OpcS, reg_mem(dst, src));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Address);\n+  %}\n@@ -8476,3 +8520,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_mem_wide(dst, src),\n-             OpcSE(imm), reg_mem(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Address, $imm$$constant);\n+  %}\n@@ -8489,2 +8533,3 @@\n-  opcode(0xF7, 0x5); \/* Opcode F7 \/5 *\/\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src));\n+  ins_encode %{\n+    __ imulq($src$$Register);\n+  %}\n@@ -8509,2 +8554,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode(cdql_enc(div));\n@@ -8530,2 +8574,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode(cdqq_enc(div));\n@@ -8551,2 +8594,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode(cdql_enc(div));\n@@ -8573,2 +8615,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode(cdqq_enc(div));\n@@ -8596,2 +8637,3 @@\n-  opcode(0xF7, 0x5); \/* Opcode F7 \/5 *\/\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src));\n+  ins_encode %{\n+    __ imulq($src$$Register);\n+  %}\n@@ -8606,2 +8648,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, 0x3F));\n+  ins_encode %{\n+    __ sarq($dst$$Register, 63);\n+  %}\n@@ -8616,2 +8659,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, 0x2));\n+  ins_encode %{\n+    __ sarq($dst$$Register, 2);\n+  %}\n@@ -8654,2 +8698,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdql_enc(div), REX_reg(div), OpcP, reg_opc(div));\n+  ins_encode(cdql_enc(div));\n@@ -8675,2 +8718,1 @@\n-  opcode(0xF7, 0x7);  \/* Opcode F7 \/7 *\/\n-  ins_encode(cdqq_enc(div), REX_reg_wide(div), OpcP, reg_opc(div));\n+  ins_encode(cdqq_enc(div));\n@@ -8688,2 +8730,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sall($dst$$Register, $shift$$constant);\n+  %}\n@@ -8700,2 +8743,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sall($dst$$Address, $shift$$constant);\n+  %}\n@@ -8712,2 +8756,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ sall($dst$$Register, $shift$$constant);\n+  %}\n@@ -8724,2 +8769,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sall($dst$$Address, $shift$$constant);\n+  %}\n@@ -8736,2 +8782,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sall($dst$$Register);\n+  %}\n@@ -8748,2 +8795,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sall($dst$$Address);\n+  %}\n@@ -8760,2 +8808,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8772,2 +8821,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8784,2 +8834,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ sarl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8796,2 +8847,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sarl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8806,1 +8858,0 @@\n-\n@@ -8808,2 +8859,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarl($dst$$Register);\n+  %}\n@@ -8820,2 +8872,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarl($dst$$Address);\n+  %}\n@@ -8832,2 +8885,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8844,2 +8898,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8856,2 +8911,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(reg_opc_imm(dst, shift));\n+  ins_encode %{\n+    __ shrl($dst$$Register, $shift$$constant);\n+  %}\n@@ -8868,2 +8924,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ shrl($dst$$Address, $shift$$constant);\n+  %}\n@@ -8880,2 +8937,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrl($dst$$Register);\n+  %}\n@@ -8892,2 +8950,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrl($dst$$Address);\n+  %}\n@@ -8905,2 +8964,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ salq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8917,2 +8977,3 @@\n-  opcode(0xD1, 0x4); \/* D1 \/4 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ salq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8929,2 +8990,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ salq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8941,3 +9003,3 @@\n-  opcode(0xC1, 0x4); \/* C1 \/4 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ salq($dst$$Address, $shift$$constant);\n+  %}\n@@ -8954,2 +9016,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ salq($dst$$Register);\n+  %}\n@@ -8966,2 +9029,3 @@\n-  opcode(0xD3, 0x4); \/* D3 \/4 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ salq($dst$$Address);\n+  %}\n@@ -8978,2 +9042,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarq($dst$$Register, $shift$$constant);\n+  %}\n@@ -8990,2 +9055,3 @@\n-  opcode(0xD1, 0x7); \/* D1 \/7 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarq($dst$$Address, $shift$$constant);\n+  %}\n@@ -9002,2 +9068,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ sarq($dst$$Register, (unsigned char)($shift$$constant & 0x3F));\n+  %}\n@@ -9014,3 +9081,3 @@\n-  opcode(0xC1, 0x7); \/* C1 \/7 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ sarq($dst$$Address, (unsigned char)($shift$$constant & 0x3F));\n+  %}\n@@ -9027,2 +9094,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ sarq($dst$$Register);\n+  %}\n@@ -9039,2 +9107,3 @@\n-  opcode(0xD3, 0x7); \/* D3 \/7 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ sarq($dst$$Address);\n+  %}\n@@ -9051,2 +9120,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst ));\n+  ins_encode %{\n+    __ shrq($dst$$Register, $shift$$constant);\n+  %}\n@@ -9063,2 +9133,3 @@\n-  opcode(0xD1, 0x5); \/* D1 \/5 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrq($dst$$Address, $shift$$constant);\n+  %}\n@@ -9075,2 +9146,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(reg_opc_imm_wide(dst, shift));\n+  ins_encode %{\n+    __ shrq($dst$$Register, $shift$$constant);\n+  %}\n@@ -9080,1 +9152,0 @@\n-\n@@ -9088,3 +9159,3 @@\n-  opcode(0xC1, 0x5); \/* C1 \/5 ib *\/\n-  ins_encode(REX_mem_wide(dst), OpcP,\n-             RM_opc_mem(secondary, dst), Con8or32(shift));\n+  ins_encode %{\n+    __ shrq($dst$$Address, $shift$$constant);\n+  %}\n@@ -9101,2 +9172,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_reg_wide(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrq($dst$$Register);\n+  %}\n@@ -9113,2 +9185,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ shrq($dst$$Address);\n+  %}\n@@ -9125,2 +9198,3 @@\n-  opcode(0x0F, 0xBE);\n-  ins_encode(REX_reg_breg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movsbl($dst$$Register, $src$$Register);\n+  %}\n@@ -9137,2 +9211,3 @@\n-  opcode(0x0F, 0xBF);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movswl($dst$$Register, $src$$Register);\n+  %}\n@@ -9288,2 +9363,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$Register);\n+  %}\n@@ -9299,2 +9375,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_breg(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9310,2 +9387,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_breg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movzbl($dst$$Register, $src$$Register);\n+  %}\n@@ -9321,2 +9399,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzwl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9332,2 +9411,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movzwl($dst$$Register, $src$$Register);\n+  %}\n@@ -9359,2 +9439,3 @@\n-  opcode(0x81, 0x04); \/* Opcode 81 \/4 *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$constant);\n+  %}\n@@ -9372,2 +9453,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ andl($dst$$Register, $src$$Address);\n+  %}\n@@ -9385,2 +9467,3 @@\n-  opcode(0x20);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andb($dst$$Address, $src$$Register);\n+  %}\n@@ -9397,2 +9480,3 @@\n-  opcode(0x21); \/* Opcode 21 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andl($dst$$Address, $src$$Register);\n+  %}\n@@ -9410,3 +9494,3 @@\n-  opcode(0x81, 0x4); \/* Opcode 81 \/4 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ andl($dst$$Address, $src$$constant);\n+  %}\n@@ -9540,2 +9624,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$Register);\n+  %}\n@@ -9552,2 +9637,3 @@\n-  opcode(0x81, 0x01); \/* Opcode 81 \/1 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$constant);\n+  %}\n@@ -9565,2 +9651,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ orl($dst$$Register, $src$$Address);\n+  %}\n@@ -9578,2 +9665,3 @@\n-  opcode(0x08);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orb($dst$$Address, $src$$Register);\n+  %}\n@@ -9590,2 +9678,3 @@\n-  opcode(0x09); \/* Opcode 09 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orl($dst$$Address, $src$$Register);\n+  %}\n@@ -9603,3 +9692,3 @@\n-  opcode(0x81, 0x1); \/* Opcode 81 \/1 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ orl($dst$$Address, $src$$constant);\n+  %}\n@@ -9617,2 +9706,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$Register);\n+  %}\n@@ -9640,2 +9730,3 @@\n-  opcode(0x81, 0x06); \/* Opcode 81 \/6 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$constant);\n+  %}\n@@ -9653,2 +9744,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$Address);\n+  %}\n@@ -9666,2 +9758,3 @@\n-  opcode(0x30);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorb($dst$$Address, $src$$Register);\n+  %}\n@@ -9678,2 +9771,3 @@\n-  opcode(0x31); \/* Opcode 31 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Address, $src$$Register);\n+  %}\n@@ -9691,3 +9785,3 @@\n-  opcode(0x81, 0x6); \/* Opcode 81 \/6 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ xorl($dst$$Address, $src$$constant);\n+  %}\n@@ -9708,2 +9802,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$Register);\n+  %}\n@@ -9719,2 +9814,3 @@\n-  opcode(0x0F, 0xB6);\n-  ins_encode(REX_reg_reg_wide(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzbq($dst$$Register, $dst$$Register);\n+  %}\n@@ -9730,2 +9826,3 @@\n-  opcode(0x0F, 0xB7);\n-  ins_encode(REX_reg_reg_wide(dst, dst), OpcP, OpcS, reg_reg(dst, dst));\n+  ins_encode %{\n+    __ movzwq($dst$$Register, $dst$$Register);\n+  %}\n@@ -9742,2 +9839,3 @@\n-  opcode(0x81, 0x04); \/* Opcode 81 \/4 *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$constant);\n+  %}\n@@ -9755,2 +9853,3 @@\n-  opcode(0x23);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ andq($dst$$Register, $src$$Address);\n+  %}\n@@ -9768,2 +9867,3 @@\n-  opcode(0x21); \/* Opcode 21 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andq($dst$$Address, $src$$Register);\n+  %}\n@@ -9781,3 +9881,3 @@\n-  opcode(0x81, 0x4); \/* Opcode 81 \/4 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ andq($dst$$Address, $src$$constant);\n+  %}\n@@ -9928,2 +10028,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Register);\n+  %}\n@@ -9939,2 +10040,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Register);\n+  %}\n@@ -9952,2 +10054,3 @@\n-  opcode(0x81, 0x01); \/* Opcode 81 \/1 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$constant);\n+  %}\n@@ -9965,2 +10068,3 @@\n-  opcode(0x0B);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ orq($dst$$Register, $src$$Address);\n+  %}\n@@ -9978,2 +10082,3 @@\n-  opcode(0x09); \/* Opcode 09 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orq($dst$$Address, $src$$Register);\n+  %}\n@@ -9991,3 +10096,3 @@\n-  opcode(0x81, 0x1); \/* Opcode 81 \/1 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ orq($dst$$Address, $src$$constant);\n+  %}\n@@ -10022,2 +10127,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$Register);\n+  %}\n@@ -10045,2 +10151,3 @@\n-  opcode(0x81, 0x06); \/* Opcode 81 \/6 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$constant);\n+  %}\n@@ -10058,2 +10165,3 @@\n-  opcode(0x33);\n-  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$Address);\n+  %}\n@@ -10071,2 +10179,3 @@\n-  opcode(0x31); \/* Opcode 31 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorq($dst$$Address, $src$$Register);\n+  %}\n@@ -10084,3 +10193,3 @@\n-  opcode(0x81, 0x6); \/* Opcode 81 \/6 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ xorq($dst$$Address, $src$$constant);\n+  %}\n@@ -10099,4 +10208,5 @@\n-  ins_encode(REX_reg_reg(src, src), opc_reg_reg(0x85, src, src), \/\/ testl\n-             setNZ_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+    __ set_byte_if_not_zero($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -10115,4 +10225,5 @@\n-  ins_encode(REX_reg_reg_wide(src, src), opc_reg_reg(0x85, src, src), \/\/ testq\n-             setNZ_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+    __ set_byte_if_not_zero($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -10132,5 +10243,6 @@\n-  ins_encode(REX_reg_reg(p, q), opc_reg_reg(0x3B, p, q), \/\/ cmpl\n-             setLT_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst),\n-             neg_reg(dst));\n+  ins_encode %{\n+    __ cmpl($p$$Register, $q$$Register);\n+    __ setl($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+    __ negl($dst$$Register);\n+  %}\n@@ -10148,1 +10260,1 @@\n-  __ sarl($dst$$Register, 31);\n+    __ sarl($dst$$Register, 31);\n@@ -11863,2 +11975,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Register);\n+  %}\n@@ -11873,2 +11986,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$constant);\n+  %}\n@@ -11884,2 +11998,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Address);\n+  %}\n@@ -11894,2 +12009,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+  %}\n@@ -11904,2 +12020,3 @@\n-  opcode(0xF7, 0x00);\n-  ins_encode(REX_reg(src), OpcP, reg_opc(src), Con32(con));\n+  ins_encode %{\n+    __ testl($src$$Register, $con$$constant);\n+  %}\n@@ -11914,2 +12031,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testl($src$$Register, $mem$$Address);\n+  %}\n@@ -11926,2 +12044,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Register);\n+  %}\n@@ -11936,2 +12055,3 @@\n-  opcode(0x81,0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$constant);\n+  %}\n@@ -11947,2 +12067,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$Address);\n+  %}\n@@ -11968,2 +12089,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+  %}\n@@ -11978,2 +12100,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -11990,2 +12113,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -12017,2 +12141,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -12029,2 +12154,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -12044,3 +12170,3 @@\n-  opcode(0xF7); \/* Opcode F7 \/0 *\/\n-  ins_encode(REX_mem_wide(op),\n-             OpcP, RM_opc_mem(0x00, op), Con_d32(0xFFFFFFFF));\n+  ins_encode %{\n+    __ testq($op$$Address, 0xFFFFFFFF);\n+  %}\n@@ -12166,2 +12292,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -12176,2 +12303,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm_wide(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$constant);\n+  %}\n@@ -12186,2 +12314,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -12196,2 +12325,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -12206,2 +12336,3 @@\n-  opcode(0xF7, 0x00);\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src), Con32(con));\n+  ins_encode %{\n+    __ testq($src$$Register, $con$$constant);\n+  %}\n@@ -12216,2 +12347,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testq($src$$Register, $mem$$Address);\n+  %}\n@@ -12226,2 +12358,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_mem_wide(src, mem), OpcP, reg_mem(src, mem));\n+  ins_encode %{\n+    __ testq($src$$Register, $mem$$Address);\n+  %}\n@@ -12245,1 +12378,9 @@\n-  ins_encode(cmpl3_flag(src1, src2, dst));\n+  ins_encode %{\n+    Label done;\n+    __ cmpq($src1$$Register, $src2$$Register);\n+    __ movl($dst$$Register, -1);\n+    __ jccb(Assembler::less, done);\n+    __ setne($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+    __ bind(done);\n+  %}\n@@ -12256,2 +12397,3 @@\n-  opcode(0x3B);  \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_reg_wide(op1, op2), OpcP, reg_reg(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Register);\n+  %}\n@@ -12266,2 +12408,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm_wide(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$constant);\n+  %}\n@@ -12276,2 +12419,3 @@\n-  opcode(0x3B); \/* Opcode 3B \/r *\/\n-  ins_encode(REX_reg_mem_wide(op1, op2), OpcP, reg_mem(op1, op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$Address);\n+  %}\n@@ -12286,2 +12430,3 @@\n-  opcode(0x85);\n-  ins_encode(REX_reg_reg_wide(src, src), OpcP, reg_reg(src, src));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+  %}\n@@ -12329,2 +12474,3 @@\n-  opcode(0x0F, 0x4F);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl(Assembler::greater, $dst$$Register, $src$$Register);\n+  %}\n@@ -12352,2 +12498,3 @@\n-  opcode(0x0F, 0x4C);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl(Assembler::less, $dst$$Register, $src$$Register);\n+  %}\n@@ -12936,2 +13083,3 @@\n-  opcode(0xC3);\n-  ins_encode(OpcP);\n+  ins_encode %{\n+    __ ret(0);\n+  %}\n@@ -12951,2 +13099,3 @@\n-  opcode(0xFF, 0x4); \/* Opcode FF \/4 *\/\n-  ins_encode(REX_reg(jump_target), OpcP, reg_opc(jump_target));\n+  ins_encode %{\n+    __ jmp($jump_target$$Register);\n+  %}\n@@ -12965,3 +13114,4 @@\n-  opcode(0xFF, 0x4); \/* Opcode FF \/4 *\/\n-  ins_encode(Opcode(0x5a), \/\/ popq rdx\n-             REX_reg(jump_target), OpcP, reg_opc(jump_target));\n+  ins_encode %{\n+    __ popq(as_Register(RDX_enc));\n+    __ jmp($jump_target$$Register);\n+  %}\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":770,"deletions":620,"binary":false,"changes":1390,"status":"modified"}]}