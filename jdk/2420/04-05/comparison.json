{"files":[{"patch":"@@ -1472,0 +1472,7 @@\n+void Assembler::andb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x20);\n+  emit_operand(src, dst);\n+}\n+\n@@ -1480,3 +1487,1 @@\n-  emit_int8((unsigned char)0x81);\n-  emit_operand(rsp, dst, 4);\n-  emit_int32(imm32);\n+  emit_arith_operand(0x81, as_Register(4), dst, imm32);\n@@ -1490,0 +1495,7 @@\n+void Assembler::andl(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x21);\n+  emit_operand(src, dst);\n+}\n+\n@@ -1675,0 +1687,6 @@\n+void Assembler::cmp(Register dst, int32_t imm32) {\n+  prefix(dst);\n+  emit_int8((unsigned char)0x3D);\n+  emit_int32(imm32);\n+}\n+\n@@ -1710,0 +1728,8 @@\n+void Assembler::cmpxchgw(Register reg, Address adr) { \/\/ cmpxchg\n+  InstructionMark im(this);\n+  size_prefix();\n+  prefix(adr, reg);\n+  emit_int16(0x0F, (unsigned char)0xB1);\n+  emit_operand(reg, adr);\n+}\n+\n@@ -2172,0 +2198,13 @@\n+void Assembler::imull(Register dst, Address src, int32_t value) {\n+  InstructionMark im(this);\n+  prefix(src, dst);\n+  if (is8bit(value)) {\n+    emit_int8((unsigned char)0x6B);\n+    emit_operand(dst, src);\n+    emit_int8(value);\n+  } else {\n+    emit_int8((unsigned char)0x69);\n+    emit_operand(dst, src);\n+    emit_int32(value);\n+  }\n+}\n@@ -2355,0 +2394,4 @@\n+void Assembler::size_prefix() {\n+  emit_int8(0x66);\n+}\n+\n@@ -3234,0 +3277,7 @@\n+void Assembler::negl(Address dst) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_int8((unsigned char)0xF7);\n+  emit_operand(as_Register(3), dst);\n+}\n+\n@@ -3588,0 +3638,7 @@\n+void Assembler::orb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src, true);\n+  emit_int8(0x08);\n+  emit_operand(src, dst);\n+}\n+\n@@ -5113,0 +5170,15 @@\n+void Assembler::sete(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x94, (0xC0 | encode));\n+}\n+\n+void Assembler::setl(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x9C, (0xC0 | encode));\n+}\n+\n+void Assembler::setne(Register dst) {\n+  int encode = prefix_and_encode(dst->encoding(), true);\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | encode));\n+}\n+\n@@ -5206,1 +5278,6 @@\n-  emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE8 | encode));\n+  }\n+  else {\n+    emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  }\n@@ -5427,6 +5504,2 @@\n-  if (encode == 0) {\n-    emit_int8((unsigned char)0xA9);\n-  } else {\n-    encode = prefix_and_encode(encode);\n-    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  }\n+  encode = prefix_and_encode(encode);\n+  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n@@ -5577,0 +5650,6 @@\n+void Assembler::xorl(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  prefix(dst);\n+  emit_arith_operand(0x81, as_Register(6), dst, imm32);\n+}\n+\n@@ -5594,0 +5673,7 @@\n+void Assembler::xorl(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src);\n+  emit_int8(0x31);\n+  emit_operand(src, dst);\n+}\n+\n@@ -5601,0 +5687,7 @@\n+void Assembler::xorb(Address dst, Register src) {\n+  InstructionMark im(this);\n+  prefix(dst, src, true);\n+  emit_int8(0x30);\n+  emit_operand(src, dst);\n+}\n+\n@@ -9320,1 +9413,1 @@\n-  emit_int24(0x0F, (unsigned char)0x95, (0xE0 | dst->encoding()));\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | dst->encoding()));\n@@ -9327,1 +9420,1 @@\n-  emit_int24(0x0F, (unsigned char)0x95, (0xE0 | enc));\n+  emit_int24(0x0F, (unsigned char)0x95, (0xC0 | enc));\n@@ -9754,3 +9847,2 @@\n-  emit_int16(get_prefixq(dst), (unsigned char)0x81);\n-  emit_operand(rsp, dst, 4);\n-  emit_int32(imm32);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(4), dst, imm32);\n@@ -9775,0 +9867,6 @@\n+void Assembler::andq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), 0x21);\n+  emit_operand(src, dst);\n+}\n+\n@@ -10042,0 +10140,19 @@\n+void Assembler::imulq(Register src) {\n+  int encode = prefixq_and_encode(src->encoding());\n+  emit_int16((unsigned char)0xF7, (0xE8 | encode));\n+}\n+\n+void Assembler::imulq(Register dst, Address src, int32_t value) {\n+  InstructionMark im(this);\n+  prefixq(src, dst);\n+  if (is8bit(value)) {\n+    emit_int8((unsigned char)0x6B);\n+    emit_operand(dst, src);\n+    emit_int8(value);\n+  } else {\n+    emit_int8((unsigned char)0x69);\n+    emit_operand(dst, src);\n+    emit_int32(value);\n+  }\n+}\n+\n@@ -10096,0 +10213,7 @@\n+void Assembler::mov64(Register dst, int64_t imm64, relocInfo::relocType rtype, int format) {\n+  InstructionMark im(this);\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int8(0xB8 | encode);\n+  emit_data64(imm64, rtype, format);\n+}\n+\n@@ -10176,0 +10300,13 @@\n+void Assembler::movq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xC7);\n+  emit_operand(as_Register(0), dst);\n+  emit_int32(imm32);\n+}\n+\n+void Assembler::movq(Register dst, int32_t imm32) {\n+  int encode = prefixq_and_encode(dst->encoding());\n+  emit_int16((unsigned char)0xC7, (0xC0 | encode));\n+  emit_int32(imm32);\n+}\n+\n@@ -10281,0 +10418,6 @@\n+void Assembler::negq(Address dst) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), (unsigned char)0xF7);\n+  emit_operand(as_Register(3), dst);\n+}\n+\n@@ -10308,3 +10451,8 @@\n-  emit_int16(get_prefixq(dst), (unsigned char)0x81);\n-  emit_operand(rcx, dst, 4);\n-  emit_int32(imm32);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(1), dst, imm32);\n+}\n+\n+void Assembler::orq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), (unsigned char)0x09);\n+  emit_operand(src, dst);\n@@ -10352,0 +10500,4 @@\n+void Assembler::popq(Register dst) {\n+  emit_int8((unsigned char)0x58 | dst->encoding());\n+}\n+\n@@ -10543,1 +10695,1 @@\n-  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  assert(isByte(imm8), \"not a byte\");\n@@ -10559,1 +10711,1 @@\n-  assert(isShiftCount(imm8), \"illegal shift count\");\n+  assert(isByte(imm8), \"not a byte\");\n@@ -10578,1 +10730,1 @@\n-  assert(isShiftCount(imm8 >> 1), \"illegal shift count\");\n+  assert(isByte(imm8), \"not a byte\");\n@@ -10633,1 +10785,6 @@\n-  emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  if (imm8 == 1) {\n+    emit_int16((unsigned char)0xD1, (0xE8 | encode));\n+  }\n+  else {\n+    emit_int24((unsigned char)0xC1, (0xE8 | encode), imm8);\n+  }\n@@ -10649,1 +10806,1 @@\n-  assert(isShiftCount(imm8), \"illegal shift count\");\n+  assert(isByte(imm8), \"not a byte\");\n@@ -10657,0 +10814,1 @@\n+    emit_int8(imm8);\n@@ -10694,0 +10852,7 @@\n+void Assembler::testq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst), 0xF7);\n+  emit_operand(as_Register(0), dst);\n+  emit_int32(imm32);\n+}\n+\n@@ -10699,6 +10864,2 @@\n-  if (encode == 0) {\n-    emit_int16(REX_W, (unsigned char)0xA9);\n-  } else {\n-    encode = prefixq_and_encode(encode);\n-    emit_int16((unsigned char)0xF7, (0xC0 | encode));\n-  }\n+  encode = prefixq_and_encode(encode);\n+  emit_int16((unsigned char)0xF7, (0xC0 | encode));\n@@ -10747,0 +10908,17 @@\n+void Assembler::xorq(Register dst, int32_t imm32) {\n+  (void) prefixq_and_encode(dst->encoding());\n+  emit_arith(0x81, 0xF0, dst, imm32);\n+}\n+\n+void Assembler::xorq(Address dst, int32_t imm32) {\n+  InstructionMark im(this);\n+  prefixq(dst);\n+  emit_arith_operand(0x81, as_Register(6), dst, imm32);\n+}\n+\n+void Assembler::xorq(Address dst, Register src) {\n+  InstructionMark im(this);\n+  emit_int16(get_prefixq(dst, src), 0x31);\n+  emit_operand(src, dst);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":207,"deletions":29,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -1015,0 +1015,1 @@\n+  void andb(Address dst, Register src);\n@@ -1020,0 +1021,1 @@\n+  void andl(Address dst, Register src);\n@@ -1025,0 +1027,1 @@\n+  void andq(Address dst, Register src);\n@@ -1084,0 +1087,1 @@\n+  void cmp(Register dst, int32_t imm32);\n@@ -1107,0 +1111,1 @@\n+  void cmpxchgw(Register reg, Address adr);\n@@ -1366,0 +1371,1 @@\n+  void imull(Register dst, Address src, int value);\n@@ -1371,0 +1377,1 @@\n+  void imulq(Register dst, Address src, int value);\n@@ -1372,0 +1379,1 @@\n+  void imulq(Register dst);\n@@ -1427,0 +1435,1 @@\n+  void size_prefix();\n@@ -1450,0 +1459,1 @@\n+  void mov64(Register dst, int64_t imm64, relocInfo::relocType rtype, int format);\n@@ -1547,0 +1557,2 @@\n+  void movq(Address  dst, int32_t imm32);\n+  void movq(Register  dst, int32_t imm32);\n@@ -1625,0 +1637,1 @@\n+  void negl(Address dst);\n@@ -1628,0 +1641,1 @@\n+  void negq(Address dst);\n@@ -1650,0 +1664,1 @@\n+  void orb(Address dst, Register src);\n@@ -1652,0 +1667,1 @@\n+  void orq(Address dst, Register src);\n@@ -1806,0 +1822,1 @@\n+  void popq(Register dst);\n@@ -1950,0 +1967,4 @@\n+  void sete(Register dst);\n+  void setl(Register dst);\n+  void setne(Register dst);\n+\n@@ -2035,0 +2056,1 @@\n+  void testq(Address dst, int32_t imm32);\n@@ -2074,0 +2096,1 @@\n+  void xorl(Address dst, int32_t imm32);\n@@ -2076,0 +2099,1 @@\n+  void xorl(Address dst, Register src);\n@@ -2077,0 +2101,1 @@\n+  void xorb(Address dst, Register src);\n@@ -2081,0 +2106,1 @@\n+  void xorq(Address dst, int32_t imm32);\n@@ -2082,0 +2108,2 @@\n+  void xorq(Register dst, int32_t imm32);\n+  void xorq(Address dst, Register src);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1822,0 +1822,135 @@\n+  enc_class cdql_enc(no_rax_rdx_RegI div)\n+  %{\n+    \/\/ Full implementation of Java idiv and irem; checks for\n+    \/\/ special case as described in JVM spec., p.243 & p.271.\n+    \/\/\n+    \/\/         normal case                           special case\n+    \/\/\n+    \/\/ input : rax: dividend                         min_int\n+    \/\/         reg: divisor                          -1\n+    \/\/\n+    \/\/ output: rax: quotient  (= rax idiv reg)       min_int\n+    \/\/         rdx: remainder (= rax irem reg)       0\n+    \/\/\n+    \/\/  Code sequnce:\n+    \/\/\n+    \/\/    0:   3d 00 00 00 80          cmp    $0x80000000,%eax\n+    \/\/    5:   75 07\/08                jne    e <normal>\n+    \/\/    7:   33 d2                   xor    %edx,%edx\n+    \/\/  [div >= 8 -> offset + 1]\n+    \/\/  [REX_B]\n+    \/\/    9:   83 f9 ff                cmp    $0xffffffffffffffff,$div\n+    \/\/    c:   74 03\/04                je     11 <done>\n+    \/\/ 000000000000000e <normal>:\n+    \/\/    e:   99                      cltd\n+    \/\/  [div >= 8 -> offset + 1]\n+    \/\/  [REX_B]\n+    \/\/    f:   f7 f9                   idiv   $div\n+    \/\/ 0000000000000011 <done>:\n+\n+    \/\/ cmp    $0x80000000,%eax\n+    emit_opcode(cbuf, 0x3d);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x80);\n+\n+    \/\/ jne    e <normal>\n+    emit_opcode(cbuf, 0x75);\n+    emit_d8(cbuf, $div$$reg < 8 ? 0x07 : 0x08);\n+\n+    \/\/ xor    %edx,%edx\n+    emit_opcode(cbuf, 0x33);\n+    emit_d8(cbuf, 0xD2);\n+\n+    \/\/ cmp    $0xffffffffffffffff,%ecx\n+    if ($div$$reg >= 8) {\n+      emit_opcode(cbuf, Assembler::REX_B);\n+    }\n+    emit_opcode(cbuf, 0x83);\n+    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n+    emit_d8(cbuf, 0xFF);\n+\n+    \/\/ je     11 <done>\n+    emit_opcode(cbuf, 0x74);\n+    emit_d8(cbuf, $div$$reg < 8 ? 0x03 : 0x04);\n+\n+    \/\/ <normal>\n+    \/\/ cltd\n+    emit_opcode(cbuf, 0x99);\n+\n+    \/\/ idivl (note: must be emitted by the user of this rule)\n+    \/\/ <done>\n+  %}\n+\n+  enc_class cdqq_enc(no_rax_rdx_RegL div)\n+  %{\n+    \/\/ Full implementation of Java ldiv and lrem; checks for\n+    \/\/ special case as described in JVM spec., p.243 & p.271.\n+    \/\/\n+    \/\/         normal case                           special case\n+    \/\/\n+    \/\/ input : rax: dividend                         min_long\n+    \/\/         reg: divisor                          -1\n+    \/\/\n+    \/\/ output: rax: quotient  (= rax idiv reg)       min_long\n+    \/\/         rdx: remainder (= rax irem reg)       0\n+    \/\/\n+    \/\/  Code sequnce:\n+    \/\/\n+    \/\/    0:   48 ba 00 00 00 00 00    mov    $0x8000000000000000,%rdx\n+    \/\/    7:   00 00 80\n+    \/\/    a:   48 39 d0                cmp    %rdx,%rax\n+    \/\/    d:   75 08                   jne    17 <normal>\n+    \/\/    f:   33 d2                   xor    %edx,%edx\n+    \/\/   11:   48 83 f9 ff             cmp    $0xffffffffffffffff,$div\n+    \/\/   15:   74 05                   je     1c <done>\n+    \/\/ 0000000000000017 <normal>:\n+    \/\/   17:   48 99                   cqto\n+    \/\/   19:   48 f7 f9                idiv   $div\n+    \/\/ 000000000000001c <done>:\n+\n+    \/\/ mov    $0x8000000000000000,%rdx\n+    emit_opcode(cbuf, Assembler::REX_W);\n+    emit_opcode(cbuf, 0xBA);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x00);\n+    emit_d8(cbuf, 0x80);\n+\n+    \/\/ cmp    %rdx,%rax\n+    emit_opcode(cbuf, Assembler::REX_W);\n+    emit_opcode(cbuf, 0x39);\n+    emit_d8(cbuf, 0xD0);\n+\n+    \/\/ jne    17 <normal>\n+    emit_opcode(cbuf, 0x75);\n+    emit_d8(cbuf, 0x08);\n+\n+    \/\/ xor    %edx,%edx\n+    emit_opcode(cbuf, 0x33);\n+    emit_d8(cbuf, 0xD2);\n+\n+    \/\/ cmp    $0xffffffffffffffff,$div\n+    emit_opcode(cbuf, $div$$reg < 8 ? Assembler::REX_W : Assembler::REX_WB);\n+    emit_opcode(cbuf, 0x83);\n+    emit_rm(cbuf, 0x3, 0x7, $div$$reg & 7);\n+    emit_d8(cbuf, 0xFF);\n+\n+    \/\/ je     1e <done>\n+    emit_opcode(cbuf, 0x74);\n+    emit_d8(cbuf, 0x05);\n+\n+    \/\/ <normal>\n+    \/\/ cqto\n+    emit_opcode(cbuf, Assembler::REX_W);\n+    emit_opcode(cbuf, 0x99);\n+\n+    \/\/ idivq (note: must be emitted by the user of this rule)\n+    \/\/ <done>\n+  %}\n+\n@@ -5334,2 +5469,3 @@\n-  opcode(0x8D);\n-  ins_encode(REX_reg_mem_wide(dst, mem), OpcP, reg_mem(dst, mem));\n+  ins_encode %{\n+    __ leaq($dst$$Register, $mem$$Address);\n+  %}\n@@ -5460,1 +5596,3 @@\n-  ins_encode(load_immL(dst, src));\n+  ins_encode %{\n+    __ mov64($dst$$Register, $src$$constant);\n+  %}\n@@ -5483,1 +5621,3 @@\n-  ins_encode(load_immUL32(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -5493,1 +5633,3 @@\n-  ins_encode(load_immL32(dst, src));\n+  ins_encode %{\n+    __ movq($dst$$Register, $src$$constant);\n+  %}\n@@ -5501,1 +5643,3 @@\n-  ins_encode(load_immP(dst, con));\n+  ins_encode %{\n+    __ mov64($dst$$Register, $con$$constant, $con->constant_reloc(), RELOC_IMM64);\n+  %}\n@@ -5525,1 +5669,3 @@\n-  ins_encode(load_immP31(dst, src));\n+  ins_encode %{\n+    __ movl($dst$$Register, $src$$constant);\n+  %}\n@@ -5611,1 +5757,1 @@\n-    __ xorpd($dst$$XMMRegister, $dst$$XMMRegister);\n+    __ xorpd ($dst$$XMMRegister, $dst$$XMMRegister);\n@@ -5622,3 +5768,2 @@\n-  ins_encode %{\n-    __ movl($dst$$Register, Address(rsp, $src$$disp));\n-  %}\n+  opcode(0x8B);\n+  ins_encode(REX_reg_mem(dst, src), OpcP, reg_mem(dst, src));\n@@ -5634,3 +5779,2 @@\n-  ins_encode %{\n-    __ movq($dst$$Register, Address(rsp, $src$$disp));\n-  %}\n+  opcode(0x8B);\n+  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n@@ -5646,3 +5790,2 @@\n-  ins_encode %{\n-    __ movq($dst$$Register, Address(rsp, $src$$disp));\n-  %}\n+  opcode(0x8B);\n+  ins_encode(REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src));\n@@ -5815,2 +5958,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -5933,2 +6077,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -5959,2 +6104,3 @@\n-  opcode(0xC7); \/* C7 \/0 Same as 32 store immediate with prefix *\/\n-  ins_encode(SizePrefix, REX_mem(mem), OpcP, RM_opc_mem(0x00, mem),Con16(src));\n+  ins_encode %{\n+    __ movw($mem$$Address, $src$$constant);\n+  %}\n@@ -6049,2 +6195,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem(mem), OpcP, RM_opc_mem(0x00, mem), Con32F_as_bits(src));\n+  ins_encode %{\n+    __ movl($mem$$Address, jint_cast($src$$constant));\n+  %}\n@@ -6075,2 +6222,3 @@\n-  opcode(0xC7); \/* C7 \/0 *\/\n-  ins_encode(REX_mem_wide(mem), OpcP, RM_opc_mem(0x00, mem), Con32F_as_bits(src));\n+  ins_encode %{\n+    __ movq($mem$$Address, $src$$constant);\n+  %}\n@@ -6099,3 +6247,2 @@\n-  ins_encode %{\n-    __ movl(Address(rsp, $dst$$disp), $src$$Register);\n-  %}\n+  opcode(0x89);\n+  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n@@ -6111,3 +6258,2 @@\n-  ins_encode %{\n-    __ movq(Address(rsp, $dst$$disp), $src$$Register);\n-  %}\n+  opcode(0x89);\n+  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n@@ -6123,3 +6269,2 @@\n-  ins_encode %{\n-    __ movq(Address(rsp, $dst$$disp), $src$$Register);\n-  %}\n+  opcode(0x89);\n+  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n@@ -7418,0 +7563,1 @@\n+    __ lock();\n@@ -7431,3 +7577,5 @@\n-  ins_encode %{\n-    __ cmpxchgl($newval$$Register, $mem$$Address);\n-  %}\n+  opcode(0x0F, 0xB1);\n+  ins_encode(lock_prefix,\n+             REX_reg_mem(newval, mem),\n+             OpcP, OpcS,\n+             reg_mem(newval, mem));\n@@ -7446,0 +7594,1 @@\n+    __ lock();\n@@ -7467,8 +7616,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7492,8 +7639,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem_wide(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgq($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7516,8 +7661,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7540,8 +7683,6 @@\n-  opcode(0x0F, 0xB0);\n-  ins_encode(lock_prefix,\n-             REX_breg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgb($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7564,9 +7705,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             SizePrefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgw($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7588,8 +7726,6 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr),\n-             REX_breg(res), Opcode(0x0F), Opcode(0x94), reg(res), \/\/ sete\n-             REX_reg_breg(res, res), \/\/ movzbl\n-             Opcode(0xF), Opcode(0xB6), reg_reg(res, res));\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgl($newval$$Register, $mem_ptr$$Address);\n+    __ sete($res$$Register);\n+    __ movzbl($res$$Register, $res$$Register);\n+  %}\n@@ -7610,0 +7746,1 @@\n+    __ lock();\n@@ -7625,7 +7762,4 @@\n-  opcode(0x0F, 0xB1);\n-  ins_encode(lock_prefix,\n-             SizePrefix,\n-             REX_reg_mem(newval, mem_ptr),\n-             OpcP, OpcS,\n-             reg_mem(newval, mem_ptr) \/\/ lock cmpxchg\n-             );\n+  ins_encode %{\n+    __ lock();\n+    __ cmpxchgw($newval$$Register, $mem_ptr$$Address);\n+  %}\n@@ -7646,0 +7780,1 @@\n+    __ lock();\n@@ -7663,0 +7798,1 @@\n+    __ lock();\n@@ -7678,0 +7814,1 @@\n+    __ lock();\n@@ -7695,0 +7832,1 @@\n+    __ lock();\n@@ -8030,3 +8168,2 @@\n-  ins_encode %{\n-    __ subq($dst$$Register, $src$$Register);\n-  %}\n+  opcode(0x2B);\n+  ins_encode(REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src));\n@@ -8066,2 +8203,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_mem(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ negl($dst$$Address);\n+  %}\n@@ -8101,2 +8239,3 @@\n-  opcode(0xF7, 0x03);  \/\/ Opcode F7 \/3\n-  ins_encode(REX_mem_wide(dst), OpcP, RM_opc_mem(secondary, dst));\n+  ins_encode %{\n+    __ negq($dst$$Address);\n+  %}\n@@ -8156,3 +8295,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_mem(dst, src),\n-             OpcSE(imm), reg_mem(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imull($dst$$Register, $src$$Address, $imm$$constant);\n+  %}\n@@ -8218,3 +8357,3 @@\n-  opcode(0x69); \/* 69 \/r id *\/\n-  ins_encode(REX_reg_mem_wide(dst, src),\n-             OpcSE(imm), reg_mem(dst, src), Con8or32(imm));\n+  ins_encode %{\n+    __ imulq($dst$$Register, $src$$Address, $imm$$constant);\n+  %}\n@@ -8231,2 +8370,3 @@\n-  opcode(0xF7, 0x5); \/* Opcode F7 \/5 *\/\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src));\n+  ins_encode %{\n+    __ imulq($src$$Register);\n+  %}\n@@ -8254,1 +8394,1 @@\n-    __ cmpl($rax$$Register, 0x80000000);\n+    __ cmp($rax$$Register, 0x80000000);\n@@ -8319,1 +8459,1 @@\n-    __ cmpl($rax$$Register, 0x80000000);\n+    __ cmp($rax$$Register, 0x80000000);\n@@ -8384,2 +8524,3 @@\n-  opcode(0xF7, 0x5); \/* Opcode F7 \/5 *\/\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src));\n+  ins_encode %{\n+    __ imulq($src$$Register);\n+  %}\n@@ -8447,1 +8588,1 @@\n-    __ cmpl($rax$$Register, 0x80000000);\n+    __ cmp($rax$$Register, 0x80000000);\n@@ -8480,1 +8621,1 @@\n-    __ cmpq($rax$$Register, $rdx$$Register);\n+    __ cmpq($rdx$$Register, $rax$$Register);\n@@ -8708,2 +8849,3 @@\n-  opcode(0xD3, 0x5); \/* D3 \/5 *\/\n-  ins_encode(REX_reg(dst), OpcP, reg_opc(dst));\n+  ins_encode %{\n+    __ shrl($dst$$Register);\n+  %}\n@@ -8968,2 +9110,3 @@\n-  opcode(0x0F, 0xBE);\n-  ins_encode(REX_reg_breg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movsbl($dst$$Register, $src$$Register);\n+  %}\n@@ -8980,2 +9123,3 @@\n-  opcode(0x0F, 0xBF);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ movswl($dst$$Register, $src$$Register);\n+  %}\n@@ -9220,2 +9364,3 @@\n-  opcode(0x20);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andb($dst$$Address, $src$$Register);\n+  %}\n@@ -9232,2 +9377,3 @@\n-  opcode(0x21); \/* Opcode 21 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andl($dst$$Address, $src$$Register);\n+  %}\n@@ -9416,2 +9562,3 @@\n-  opcode(0x08);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orb($dst$$Address, $src$$Register);\n+  %}\n@@ -9480,2 +9627,3 @@\n-  opcode(0x81, 0x06); \/* Opcode 81 \/6 id *\/\n-  ins_encode(OpcSErm(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ xorl($dst$$Register, $src$$constant);\n+  %}\n@@ -9507,2 +9655,3 @@\n-  opcode(0x30);\n-  ins_encode(REX_breg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorb($dst$$Address, $src$$Register);\n+  %}\n@@ -9519,2 +9668,3 @@\n-  opcode(0x31); \/* Opcode 31 \/r *\/\n-  ins_encode(REX_reg_mem(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorl($dst$$Address, $src$$Register);\n+  %}\n@@ -9532,3 +9682,3 @@\n-  opcode(0x81, 0x6); \/* Opcode 81 \/6 id *\/\n-  ins_encode(REX_mem(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ xorl($dst$$Address, $src$$constant);\n+  %}\n@@ -9614,2 +9764,3 @@\n-  opcode(0x21); \/* Opcode 21 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ andq($dst$$Address, $src$$Register);\n+  %}\n@@ -9828,2 +9979,3 @@\n-  opcode(0x09); \/* Opcode 09 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ orq($dst$$Address, $src$$Register);\n+  %}\n@@ -9896,2 +10048,3 @@\n-  opcode(0x81, 0x06); \/* Opcode 81 \/6 id *\/\n-  ins_encode(OpcSErm_wide(dst, src), Con8or32(src));\n+  ins_encode %{\n+    __ xorq($dst$$Register, $src$$constant);\n+  %}\n@@ -9923,2 +10076,3 @@\n-  opcode(0x31); \/* Opcode 31 \/r *\/\n-  ins_encode(REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst));\n+  ins_encode %{\n+    __ xorq($dst$$Address, $src$$Register);\n+  %}\n@@ -9936,3 +10090,3 @@\n-  opcode(0x81, 0x6); \/* Opcode 81 \/6 id *\/\n-  ins_encode(REX_mem_wide(dst), OpcSE(src),\n-             RM_opc_mem(secondary, dst), Con8or32(src));\n+  ins_encode %{\n+    __ xorq($dst$$Address, $src$$constant);\n+  %}\n@@ -9951,4 +10105,5 @@\n-  ins_encode(REX_reg_reg(src, src), opc_reg_reg(0x85, src, src), \/\/ testl\n-             setNZ_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst));\n+  ins_encode %{\n+    __ testl($src$$Register, $src$$Register);\n+    __ set_byte_if_not_zero($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9967,4 +10122,5 @@\n-  ins_encode(REX_reg_reg_wide(src, src), opc_reg_reg(0x85, src, src), \/\/ testq\n-             setNZ_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst));\n+  ins_encode %{\n+    __ testq($src$$Register, $src$$Register);\n+    __ set_byte_if_not_zero($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+  %}\n@@ -9984,5 +10140,6 @@\n-  ins_encode(REX_reg_reg(p, q), opc_reg_reg(0x3B, p, q), \/\/ cmpl\n-             setLT_reg(dst),\n-             REX_reg_breg(dst, dst), \/\/ movzbl\n-             Opcode(0x0F), Opcode(0xB6), reg_reg(dst, dst),\n-             neg_reg(dst));\n+  ins_encode %{\n+    __ cmpl($p$$Register, $q$$Register);\n+    __ setl($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+    __ negl($dst$$Register);\n+  %}\n@@ -11445,2 +11602,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$constant);\n+  %}\n@@ -11478,2 +11636,3 @@\n-  opcode(0xF7, 0x00);\n-  ins_encode(REX_reg(src), OpcP, reg_opc(src), Con32(con));\n+  ins_encode %{\n+    __ testl($src$$Register, $con$$constant);\n+  %}\n@@ -11512,2 +11671,3 @@\n-  opcode(0x81,0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpl($op1$$Register, $op2$$constant);\n+  %}\n@@ -11626,3 +11786,3 @@\n-  opcode(0xF7); \/* Opcode F7 \/0 *\/\n-  ins_encode(REX_mem_wide(op),\n-             OpcP, RM_opc_mem(0x00, op), Con_d32(0xFFFFFFFF));\n+  ins_encode %{\n+    __ testq($op$$Address, 0xFFFFFFFF);\n+  %}\n@@ -11759,2 +11919,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm_wide(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$constant);\n+  %}\n@@ -11791,2 +11952,3 @@\n-  opcode(0xF7, 0x00);\n-  ins_encode(REX_reg_wide(src), OpcP, reg_opc(src), Con32(con));\n+  ins_encode %{\n+    __ testq($src$$Register, $con$$constant);\n+  %}\n@@ -11832,1 +11994,9 @@\n-  ins_encode(cmpl3_flag(src1, src2, dst));\n+  ins_encode %{\n+    Label done;\n+    __ cmpq($src1$$Register, $src2$$Register);\n+    __ movl($dst$$Register, -1);\n+    __ jccb(Assembler::less, done);\n+    __ setne($dst$$Register);\n+    __ movzbl($dst$$Register, $dst$$Register);\n+    __ bind(done);\n+  %}\n@@ -11854,2 +12024,3 @@\n-  opcode(0x81, 0x07); \/* Opcode 81 \/7 *\/\n-  ins_encode(OpcSErm_wide(op1, op2), Con8or32(op2));\n+  ins_encode %{\n+    __ cmpq($op1$$Register, $op2$$constant);\n+  %}\n@@ -11919,2 +12090,3 @@\n-  opcode(0x0F, 0x4F);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl(Assembler::greater, $dst$$Register, $src$$Register);\n+  %}\n@@ -11942,2 +12114,3 @@\n-  opcode(0x0F, 0x4C);\n-  ins_encode(REX_reg_reg(dst, src), OpcP, OpcS, reg_reg(dst, src));\n+  ins_encode %{\n+    __ cmovl(Assembler::less, $dst$$Register, $src$$Register);\n+  %}\n@@ -12536,2 +12709,3 @@\n-  opcode(0xFF, 0x4); \/* Opcode FF \/4 *\/\n-  ins_encode(REX_reg(jump_target), OpcP, reg_opc(jump_target));\n+  ins_encode %{\n+    __ jmp($jump_target$$Register);\n+  %}\n@@ -12550,3 +12724,4 @@\n-  opcode(0xFF, 0x4); \/* Opcode FF \/4 *\/\n-  ins_encode(Opcode(0x5a), \/\/ popq rdx\n-             REX_reg(jump_target), OpcP, reg_opc(jump_target));\n+  ins_encode %{\n+    __ popq(as_Register(RDX_enc));\n+    __ jmp($jump_target$$Register);\n+  %}\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":361,"deletions":186,"binary":false,"changes":547,"status":"modified"}]}