{"files":[{"patch":"@@ -3252,0 +3252,1 @@\n+        final int delimiterLength = delimiter.length();\n@@ -3255,1 +3256,1 @@\n-            len += (long) (size - 1) * delimiter.length();\n+            len += (long) (size - 1) * delimiterLength;\n@@ -3275,2 +3276,2 @@\n-        if (size > 0) {\n-            var el = elements[0];\n+        if (size > 1) {\n+            String el = elements[0];\n@@ -3278,2 +3279,14 @@\n-            for (int i = 1; i < size; i++) {\n-                delimiter.getBytes(value, off, coder); off += delimiter.length();\n+            final int delimiterBytesBegin = off << coder;\n+            delimiter.getBytes(value, off, coder); off += delimiterLength;\n+            el = elements[1];\n+            el.getBytes(value, off, coder); off += el.length();\n+            final int delimiterLengthWithCoder = (delimiterLength << coder);\n+            for (int i = 2; i < size; i++) {\n+                System.arraycopy(\n+                        value,\n+                        delimiterBytesBegin,\n+                        value,\n+                        off << coder,\n+                        delimiterLengthWithCoder\n+                );\n+                off += delimiterLength;\n@@ -3283,0 +3296,3 @@\n+        } else if (size == 1) {\n+            String el = elements[0];\n+            el.getBytes(value, off, coder); off += el.length();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.StringJoiner;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class StringJoinTestJMH {\n+\n+    private StringJoiner sample;\n+\n+    private static StringJoiner buildSample() {\n+        StringJoiner stringJoiner = new StringJoiner(\n+                \"1145141919870114514191987011451419198701145141919870114514191987011451419198701145141919870114514191987011451419198701145141919870\",\n+                \"\\u7530\\u6240\",\n+                \"\\u6d69\\u4e8c\"\n+        );\n+        for (int i = 0; i < 10000; ++i) {\n+            stringJoiner = stringJoiner.add(\"\");\n+        }\n+        return stringJoiner;\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        sample = buildSample();\n+    }\n+\n+    @Benchmark\n+    public String testStringJoin() {\n+        return sample.toString();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringJoin.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}