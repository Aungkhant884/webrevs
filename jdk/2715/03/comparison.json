{"files":[{"patch":"@@ -42,0 +42,3 @@\n+    \/**\n+     * The response code.\n+     *\/\n@@ -43,0 +46,4 @@\n+\n+    \/**\n+     * The URL to be redirected to.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpRetryException.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -560,5 +560,9 @@\n-     * @serialField ipaddress byte[]\n-     * @serialField scope_id int\n-     * @serialField scope_id_set boolean\n-     * @serialField scope_ifname_set boolean\n-     * @serialField ifname String\n+     * @serialField ipaddress byte[] holds a 128-bit (16 bytes) IPv6 address\n+     * @serialField scope_id int the address scope id. {@code 0} if undefined\n+     * @serialField scope_id_set boolean {@code true} when the scope_id field\n+     *              contains  a valid integer scope_id\n+     * @serialField scope_ifname_set boolean {@code true} if the object is\n+     *              constructed with a scoped interface instead of a numeric\n+     *              scope id\n+     * @serialField ifname String the name of the scoped network interface.\n+     *              {@code null} if undefined\n@@ -581,3 +585,7 @@\n-     * restore the state of this object from stream\n-     * including the scope information, only if the\n-     * scoped interface name is valid on this system\n+     * Restores the state of this object from the stream.\n+     * This includes the scope information, but only if the\n+     * scoped interface name is valid on this system.\n+     *\n+     * @param  s the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n@@ -645,3 +653,6 @@\n-     * default behavior is overridden in order to write the\n-     * scope_ifname field as a String, rather than a NetworkInterface\n-     * which is not serializable\n+     * The default behavior of this method is overridden in order to\n+     * write the scope_ifname field as a {@code String}, rather than a\n+     * {@code NetworkInterface} which is not serializable.\n+     *\n+     * @param  s the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n","filename":"src\/java.base\/share\/classes\/java\/net\/Inet6Address.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1715,0 +1715,3 @@\n+    \/**\n+     * Initializes an empty InetAddress.\n+     *\/\n@@ -1727,0 +1730,7 @@\n+    \/**\n+     * Restores the state of this object from the stream.\n+     *\n+     * @param  s the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n+     *\/\n@@ -1747,3 +1757,4 @@\n-     * @serialField hostName String\n-     * @serialField address int\n-     * @serialField family int\n+     * @serialField hostName String the hostname for this address\n+     * @serialField address int holds a 32-bit IPv4 address.\n+     * @serialField family int specifies the address family type, for instance,\n+     * {@code '1'} for IPv4 addresses, and {@code '2'} for IPv6 addresses.\n@@ -1758,0 +1769,6 @@\n+    \/**\n+     * Writes the state of this object to the stream.\n+     *\n+     * @param  s the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -267,3 +267,3 @@\n-     * @serialField hostname String\n-     * @serialField addr InetAddress\n-     * @serialField port int\n+     * @serialField hostname String the hostname of the Socket Address\n+     * @serialField addr InetAddress the IP address of the Socket Address\n+     * @serialField port int the port number of the Socket Address\n@@ -277,0 +277,6 @@\n+    \/**\n+     * Writes the state of this object to the stream.\n+     *\n+     * @param  out the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n+     *\/\n@@ -289,0 +295,7 @@\n+    \/**\n+     * Restores the state of this object from the stream.\n+     *\n+     * @param  in the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n+     *\/\n@@ -311,0 +324,4 @@\n+    \/**\n+     * Throws {@code InvalidObjectException}, always.\n+     * @throws ObjectStreamException always\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetSocketAddress.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1192,3 +1192,6 @@\n-     * WriteObject is called to save the state of the SocketPermission\n-     * to a stream. The actions are serialized, and the superclass\n-     * takes care of the name.\n+     * {@code writeObject} is called to save the state of the\n+     * {@code SocketPermission} to a stream. The actions are serialized,\n+     * and the superclass takes care of the name.\n+     *\n+     * @param  s the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n@@ -1208,2 +1211,6 @@\n-     * readObject is called to restore the state of the SocketPermission from\n-     * a stream.\n+     * {@code readObject} is called to restore the state of the\n+     * {@code SocketPermission} from a stream.\n+     *\n+     * @param  s the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n@@ -1491,0 +1498,1 @@\n+     * Writes the state of this object to the stream.\n@@ -1492,0 +1500,3 @@\n+     *\n+     * @param  out the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n@@ -1509,2 +1520,7 @@\n-    \/*\n-     * Reads in a Vector of SocketPermissions and saves them in the perms field.\n+    \/**\n+     * Reads in a {@code Vector} of {@code SocketPermission} and saves\n+     * them in the perms field.\n+     *\n+     * @param  in the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketPermission.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1780,0 +1780,3 @@\n+     *\n+     * @throws IOException\n+     *         If an I\/O error occurs\n@@ -1798,0 +1801,6 @@\n+     *\n+     * @throws IOException\n+     *         If an I\/O error occurs\n+     *\n+     * @throws ClassNotFoundException\n+     *         If a serialized class cannot be loaded\n","filename":"src\/java.base\/share\/classes\/java\/net\/URI.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,0 +44,3 @@\n+    \/**\n+     * The input string.\n+     *\/\n@@ -45,0 +48,5 @@\n+    \n+    \/**\n+     * The index at which the parse error occurred,\n+     * or {@code -1} if the index is not known.\n+     *\/\n","filename":"src\/java.base\/share\/classes\/java\/net\/URISyntaxException.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1484,1 +1484,1 @@\n-     * @serialField    protocol String\n+     * @serialField    protocol String the protocol to use (ftp, http, nntp, ... etc.)\n@@ -1486,1 +1486,1 @@\n-     * @serialField    host String\n+     * @serialField    host String the host name to connect to\n@@ -1488,1 +1488,1 @@\n-     * @serialField    port int\n+     * @serialField    port int the protocol port to connect to\n@@ -1490,1 +1490,1 @@\n-     * @serialField    authority String\n+     * @serialField    authority String the authority part of this URL\n@@ -1492,1 +1492,2 @@\n-     * @serialField    file String\n+     * @serialField    file String the specified file name on that host. {@code file} is\n+     *                 defined as {@code path[?query]}\n@@ -1494,1 +1495,1 @@\n-     * @serialField    ref String\n+     * @serialField    ref String the fragment part of this URL\n@@ -1496,1 +1497,1 @@\n-     * @serialField    hashCode int\n+     * @serialField    hashCode int the hashCode of this URL\n@@ -1518,0 +1519,3 @@\n+     *\n+     * @param  s the {@code ObjectOutputStream} to which data is written\n+     * @throws IOException if an I\/O error occurs\n@@ -1530,0 +1534,4 @@\n+     *\n+     * @param  s the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n","filename":"src\/java.base\/share\/classes\/java\/net\/URL.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -165,0 +165,3 @@\n+    \/**\n+     * The actions string\n+     *\/\n@@ -507,1 +510,5 @@\n-     * restore the state of this object from stream\n+     * Restores the state of this object from stream.\n+     *\n+     * @param  s the {@code ObjectInputStream} from which data is read\n+     * @throws IOException if an I\/O error occurs\n+     * @throws ClassNotFoundException if a serialized class cannot be loaded\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLPermission.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -96,2 +96,3 @@\n-     * @return a {@link Ser}\n-     * representing the path name of this instance\n+     * @return a {@link Ser} representing the path name of this instance\n+     *\n+     * @throws ObjectStreamException if an error occurs\n","filename":"src\/java.base\/share\/classes\/java\/net\/UnixDomainSocketAddress.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}