{"files":[{"patch":"@@ -419,1 +419,1 @@\n-  if (matches > 0) {\n+  if (matches > 0 && strcasecmp(option_buf, \"unknown\") != 0) {\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestInvalidCompileCommand\n+ * @bug 8263206\n+ * @summary Regression tests of -XX:CompileCommand\n+ * @library \/test\/lib\n+ * @run driver compiler.oracle.TestInvalidCompileCommand\n+ *\/\n+\n+package compiler.oracle;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestInvalidCompileCommand {\n+\n+    private static final String[][] ARGUMENTS = {\n+        {\n+            \"-XX:CompileCommand=unknown\",\n+            \"-version\"\n+        }\n+    };\n+\n+    private static final String[][] OUTPUTS = {\n+        {\n+            \"Unrecognized option 'unknown'\"\n+        }\n+    };\n+\n+    private static void verifyInvalidOption(String[] arguments, String[] expected_outputs) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        out = new OutputAnalyzer(pb.start());\n+\n+        for (String expected_output : expected_outputs) {\n+            out.shouldContain(expected_output);\n+        }\n+\n+        out.shouldContain(\"CompileCommand: An error occurred during parsing\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (ARGUMENTS.length != OUTPUTS.length) {\n+            throw new RuntimeException(\"Test is set up incorrectly: length of arguments and expected outputs does not match.\");\n+        }\n+\n+        for (int i = 0; i < ARGUMENTS.length; i++) {\n+            verifyInvalidOption(ARGUMENTS[i], OUTPUTS[i]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/oracle\/TestInvalidCompileCommand.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}