{"files":[{"patch":"@@ -1092,1 +1092,0 @@\n-  Arena *a = Thread::current()->resource_area();\n@@ -1094,1 +1093,1 @@\n-  Node_Stack stack(a, C->live_nodes() >> 4);\n+  Node_Stack stack(C->live_nodes() >> 4);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -262,2 +262,2 @@\n-  if (_loop_ctrl[n->_idx]) return;\n-  \/\/ Recursively set _loop_ctrl array to indicate where the Node goes\n+  if (_loop_or_ctrl[n->_idx]) return;\n+  \/\/ Recursively set _loop_or_ctrl array to indicate where the Node goes\n@@ -4271,2 +4271,2 @@\n-  _loop_ctrl.map(C->unique(), nullptr);\n-  memset(_loop_ctrl.adr(), 0, wordSize * C->unique());\n+  _loop_or_ctrl.map(C->unique(), nullptr);\n+  memset(_loop_or_ctrl.adr(), 0, wordSize * C->unique());\n@@ -4338,1 +4338,1 @@\n-      _loop_ctrl.clear();\n+      _loop_or_ctrl.clear();\n@@ -4368,1 +4368,1 @@\n-      if( !_loop_ctrl[C->root()->in(i)->_idx] ) {    \/\/ Dead path into Root?\n+      if (!_loop_or_ctrl[C->root()->in(i)->_idx]) { \/\/ Dead path into Root?\n@@ -4382,1 +4382,1 @@\n-  \/\/ node.  For CFG nodes, the _loop_ctrl array starts out and remains\n+  \/\/ node.  For CFG nodes, the _loop_or_ctrl array starts out and remains\n@@ -4384,1 +4384,1 @@\n-  \/\/ _loop_ctrl array holds the earliest legal controlling CFG node.\n+  \/\/ _loop_or_ctrl array holds the earliest legal controlling CFG node.\n@@ -4722,2 +4722,2 @@\n-\/\/ Verify \"_loop_ctrl\": control and loop membership.\n-\/\/  (0) _loop_ctrl[i] == nullptr -> node not reachable.\n+\/\/ Verify \"_loop_or_ctrl\": control and loop membership.\n+\/\/  (0) _loop_or_ctrl[i] == nullptr -> node not reachable.\n@@ -4732,2 +4732,2 @@\n-  if (_loop_ctrl[i] == nullptr || phase_verify->_loop_ctrl[i] == nullptr) {\n-    if (_loop_ctrl[i] != nullptr || phase_verify->_loop_ctrl[i] != nullptr) {\n+  if (_loop_or_ctrl[i] == nullptr || phase_verify->_loop_or_ctrl[i] == nullptr) {\n+    if (_loop_or_ctrl[i] != nullptr || phase_verify->_loop_or_ctrl[i] != nullptr) {\n@@ -4735,1 +4735,1 @@\n-                 _loop_ctrl[i] != nullptr, phase_verify->_loop_ctrl[i] != nullptr);\n+                 _loop_or_ctrl[i] != nullptr, phase_verify->_loop_or_ctrl[i] != nullptr);\n@@ -4764,1 +4764,1 @@\n-    if( _loop_ctrl[i] != loop_verify->_loop_ctrl[i] &&\n+    if( _loop_or_ctrl[i] != loop_verify->_loop_or_ctrl[i] &&\n@@ -4998,1 +4998,1 @@\n-      \/\/ heal _idom if it has a fwd mapping in _loop_ctrl\n+      \/\/ heal _idom if it has a fwd mapping in _loop_or_ctrl\n@@ -5069,1 +5069,1 @@\n-\/\/ bits.  The _loop_ctrl[] array is mapped by Node index and holds a null for\n+\/\/ bits.  The _loop_or_ctrl[] array is mapped by Node index and holds a null for\n@@ -5195,1 +5195,1 @@\n-      if (!_loop_ctrl[m->_idx]) continue; \/\/ Dead code has no loop\n+      if (!_loop_or_ctrl[m->_idx]) continue; \/\/ Dead code has no loop\n@@ -5422,1 +5422,1 @@\n-\/\/ Put Data nodes into some loop nest, by setting the _loop_ctrl[]->loop mapping.\n+\/\/ Put Data nodes into some loop nest, by setting the _loop_or_ctrl[]->loop mapping.\n@@ -5451,1 +5451,1 @@\n-            _loop_ctrl.map(n->_idx, (Node*)(ilt->_parent) );\n+            _loop_or_ctrl.map(n->_idx, (Node*)(ilt->_parent));\n@@ -5610,1 +5610,1 @@\n-    if (_loop_ctrl[c->_idx] == nullptr)\n+    if (_loop_or_ctrl[c->_idx] == nullptr)\n@@ -5873,1 +5873,1 @@\n-\/\/ Put Data nodes into some loop nest, by setting the _loop_ctrl[]->loop mapping.\n+\/\/ Put Data nodes into some loop nest, by setting the _loop_or_ctrl[]->loop mapping.\n@@ -5883,1 +5883,1 @@\n-      assert(_loop_ctrl[n->_idx], \"no dead nodes\");\n+      assert(_loop_or_ctrl[n->_idx], \"no dead nodes\");\n@@ -5891,1 +5891,1 @@\n-        if (_loop_ctrl[use->_idx] != nullptr || use->is_top()) { \/\/ Not dead?\n+        if (_loop_or_ctrl[use->_idx] != nullptr || use->is_top()) { \/\/ Not dead?\n@@ -5962,1 +5962,1 @@\n-\/\/ Put Data nodes into some loop nest, by setting the _loop_ctrl[]->loop mapping.\n+\/\/ Put Data nodes into some loop nest, by setting the _loop_or_ctrl[]->loop mapping.\n@@ -6031,1 +6031,1 @@\n-      _loop_ctrl.map(n->_idx,0);    \/\/ No block setting, it's globally dead\n+      _loop_or_ctrl.map(n->_idx,0);    \/\/ No block setting, it's globally dead\n@@ -6046,1 +6046,1 @@\n-      assert(_loop_ctrl[n->out(i1)->_idx] == nullptr, \"all uses must also be dead\");\n+      assert(_loop_or_ctrl[n->out(i1)->_idx] == nullptr, \"all uses must also be dead\");\n@@ -6049,1 +6049,1 @@\n-    _loop_ctrl.map(n->_idx, 0);     \/\/ This node is useless\n+    _loop_or_ctrl.map(n->_idx, 0);     \/\/ This node is useless\n@@ -6325,1 +6325,1 @@\n-    if (!_loop_ctrl[n->_idx])      \/\/ Skip dead nodes\n+    if (!_loop_or_ctrl[n->_idx])      \/\/ Skip dead nodes\n@@ -6358,1 +6358,1 @@\n-    for (uint k = 0; k < _loop_ctrl.max(); k++) {\n+    for (uint k = 0; k < _loop_or_ctrl.max(); k++) {\n@@ -6360,1 +6360,1 @@\n-      if (k < C->unique() && _loop_ctrl[k] == (Node*)((intptr_t)n + 1)) {\n+      if (k < C->unique() && _loop_or_ctrl[k] == (Node*)((intptr_t)n + 1)) {\n@@ -6364,2 +6364,2 @@\n-            tty->print_cr(\"*** BROKEN CTRL ACCESSOR!  _loop_ctrl[k] is %p, ctrl is %p\",\n-                          _loop_ctrl[k], has_ctrl(m) ? get_ctrl_no_update(m) : nullptr);\n+            tty->print_cr(\"*** BROKEN CTRL ACCESSOR!  _loop_or_ctrl[k] is %p, ctrl is %p\",\n+                          _loop_or_ctrl[k], has_ctrl(m) ? get_ctrl_no_update(m) : nullptr);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -835,1 +835,1 @@\n-  Node_List _loop_ctrl;\n+  Node_List _loop_or_ctrl;\n@@ -898,1 +898,1 @@\n-  bool has_ctrl(const Node* n) const { return ((intptr_t)_loop_ctrl[n->_idx]) & 1; }\n+  bool has_ctrl(const Node* n) const { return ((intptr_t)_loop_or_ctrl[n->_idx]) & 1; }\n@@ -977,1 +977,1 @@\n-    return _loop_ctrl[n->_idx] != nullptr;\n+    return _loop_or_ctrl[n->_idx] != nullptr;\n@@ -989,1 +989,1 @@\n-    _loop_ctrl.map( n->_idx, (Node*)((intptr_t)ctrl + 1) );\n+    _loop_or_ctrl.map(n->_idx, (Node*)((intptr_t)ctrl + 1));\n@@ -1009,1 +1009,1 @@\n-    _loop_ctrl.map( i->_idx, (Node*)((intptr_t)n + 1) );\n+    _loop_or_ctrl.map(i->_idx, (Node*)((intptr_t)n + 1));\n@@ -1028,1 +1028,1 @@\n-    return (Node*)(((intptr_t)_loop_ctrl[i->_idx]) & ~1);\n+    return (Node*)(((intptr_t)_loop_or_ctrl[i->_idx]) & ~1);\n@@ -1052,1 +1052,1 @@\n-    _loop_ctrl.map(n->_idx, (Node*)loop);\n+    _loop_or_ctrl.map(n->_idx, (Node*)loop);\n@@ -1062,1 +1062,1 @@\n-    _loop_ctrl.map(old_node->_idx, (Node*)((intptr_t)new_node + 1));\n+    _loop_or_ctrl.map(old_node->_idx, (Node*)((intptr_t)new_node + 1));\n@@ -1141,1 +1141,1 @@\n-      n = (Node*)(((intptr_t)_loop_ctrl[n->_idx]) & ~1);\n+      n = (Node*)(((intptr_t)_loop_or_ctrl[n->_idx]) & ~1);\n@@ -1237,1 +1237,1 @@\n-    return (IdealLoopTree*)_loop_ctrl[n->_idx];\n+    return (IdealLoopTree*)_loop_or_ctrl[n->_idx];\n@@ -1702,1 +1702,1 @@\n-    return _loop_ctrl[n->_idx] ? (IdealLoopTree*)_loop_ctrl[n->_idx] : _ltree_root;\n+    return _loop_or_ctrl[n->_idx] ? (IdealLoopTree*)_loop_or_ctrl[n->_idx] : _ltree_root;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -402,3 +402,3 @@\n-\/\/ (2) Type information (the field PhaseGVN::_types) maps type information to each\n-\/\/     node ID. The mapping is updated to use the new node IDs as well. Updated type\n-\/\/     information is returned in PhaseGVN::_types.\n+\/\/ (2) Type information \"gvn->types()\" (same as \"C->types()\") maps every node ID to\n+\/\/     the node's type. The mapping is updated to use the new node IDs as well. We\n+\/\/     create a new map, and swap it with the old one.\n@@ -407,2 +407,2 @@\n-\/\/ numbering (the field PhaseGVN::_table) is not updated because computing the hash\n-\/\/ values is not based on node IDs.\n+\/\/ numbering (\"C->node_hash()\", referenced by PhaseValue::_table) is not updated because\n+\/\/ computing the hash values is not based on node IDs.\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -417,2 +417,0 @@\n-  PhaseGVN() {}\n-\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-        if (_loop_ctrl[m->_idx] == nullptr) {\n+        if (_loop_or_ctrl[m->_idx] == nullptr) {\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}