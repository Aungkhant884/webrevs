{"files":[{"patch":"@@ -12,1 +12,1 @@\n-        default: \"Linux aarch64, Linux arm, Linux ppc64le, Linux s390x, Linux x64, Linux x86, Windows x64, macOS x64\"\n+        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows x64, macOS x64\"\n@@ -21,5 +21,1 @@\n-      platform_linux_aarch64: ${{ steps.check_platforms.outputs.platform_linux_aarch64 }}\n-      platform_linux_arm: ${{ steps.check_platforms.outputs.platform_linux_arm }}\n-      platform_linux_ppc64le: ${{ steps.check_platforms.outputs.platform_linux_ppc64le }}\n-      platform_linux_s390x: ${{ steps.check_platforms.outputs.platform_linux_s390x }}\n-      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}\n+      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional }}\n@@ -27,0 +23,1 @@\n+      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}\n@@ -39,4 +36,1 @@\n-          echo \"::set-output name=platform_linux_aarch64::${{ contains(github.event.inputs.platforms, 'linux aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux aarch64'))) }}\"\n-          echo \"::set-output name=platform_linux_arm::${{ contains(github.event.inputs.platforms, 'linux arm') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux arm'))) }}\"\n-          echo \"::set-output name=platform_linux_ppc64le::${{ contains(github.event.inputs.platforms, 'linux ppc64le') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux ppc64le'))) }}\"\n-          echo \"::set-output name=platform_linux_s390x::${{ contains(github.event.inputs.platforms, 'linux s390x') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux s390x'))) }}\"\n+          echo \"::set-output name=platform_linux_additional::${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}\"\n@@ -111,1 +105,1 @@\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x64 != 'false'\n+    if: needs.prerequisites.outputs.should_run != 'false' && (needs.prerequisites.outputs.platform_linux_x64 != 'false' || needs.prerequisites.outputs.platform_linux_additional == 'true')\n@@ -119,4 +113,0 @@\n-          - build hotspot no-pch\n-          - build hotspot zero\n-          - build hotspot minimal\n-          - build hotspot optimized\n@@ -127,12 +117,0 @@\n-          - flavor: build hotspot no-pch\n-            flags: --enable-debug --disable-precompiled-headers\n-            build-target: hotspot\n-          - flavor: build hotspot zero\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero\n-            build-target: hotspot\n-          - flavor: build hotspot minimal\n-            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal\n-            build-target: hotspot\n-          - flavor: build hotspot optimized\n-            flags: --with-debug-level=optimized --disable-precompiled-headers\n-            build-target: hotspot\n@@ -212,1 +190,1 @@\n-        run: make CONF_NAME=linux-x64 ${{ matrix.build-target }}\n+        run: make CONF_NAME=linux-x64\n@@ -222,1 +200,0 @@\n-        if: matrix.build-target == false\n@@ -403,2 +380,2 @@\n-  linux_aarch64_build:\n-    name: Linux aarch64\n+  linux_additional_build:\n+    name: Linux additional\n@@ -409,1 +386,1 @@\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_aarch64 != 'false'\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional != 'false'\n@@ -415,1 +392,8 @@\n-          - build hotspot no-pch\n+          - hs x64 build only\n+          - hs x64 zero build only\n+          - hs x64 minimal build only\n+          - hs x64 optimized build only\n+          - hs aarch64 build only\n+          - hs arm build only\n+          - hs s390x build only\n+          - hs ppc64le build only\n@@ -417,1 +401,1 @@\n-          - flavor: build hotspot no-pch\n+          - flavor: hs x64 build only\n@@ -419,2 +403,23 @@\n-            artifact: -debug\n-            build-target: hotspot\n+          - flavor: hs x64 zero build only\n+            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero\n+          - flavor: hs x64 minimal build only\n+            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal\n+          - flavor: hs x64 optimized build only\n+            flags: --with-debug-level=optimized --disable-precompiled-headers\n+          - flavor: hs aarch64 build only\n+            flags: --enable-debug --disable-precompiled-headers\n+            debian-arch: arm64\n+            gnu-arch: aarch64\n+          - flavor: hs arm build only\n+            flags: --enable-debug --disable-precompiled-headers\n+            debian-arch: armhf\n+            gnu-arch: arm\n+            gnu-flavor: eabihf\n+          - flavor: hs s390x build only\n+            flags: --enable-debug --disable-precompiled-headers\n+            debian-arch: s390x\n+            gnu-arch: s390x\n+          - flavor: hs ppc64le build only\n+            flags: --enable-debug --disable-precompiled-headers\n+            debian-arch: ppc64el\n+            gnu-arch: powerpc64le\n@@ -459,130 +464,1 @@\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-\n-      - name: Find root of build JDK image dir\n-        run: |\n-          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n-          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n-\n-      - name: Install cross-compilation host dependencies\n-        run: |\n-          sudo apt-get update\n-          sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu\n-\n-      - name: Cache sysroot\n-        id: cache-sysroot\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/sysroot-arm64\/\n-          key: sysroot-arm64-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n-\n-      - name: Install sysroot host dependencies\n-        run: |\n-          sudo apt-get install debootstrap qemu-user-static\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Create sysroot\n-        run: >\n-          sudo qemu-debootstrap\n-          --arch=arm64\n-          --verbose\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n-          --resolve-deps\n-          buster\n-          ~\/sysroot-arm64\n-          http:\/\/httpredir.debian.org\/debian\/\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Relativize symlinks in sysroot\n-        run: >\n-          sudo chroot ~\/sysroot-arm64 symlinks -cr .\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Fix permissions in sysroot\n-        run: >\n-          sudo chown ${USER} -R ~\/sysroot-arm64\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Remove special directories in sysroot\n-        run: >\n-          rm -rf ~\/sysroot-arm64\/{dev,proc,run,sys}\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Configure\n-        env:\n-          CC: aarch64-linux-gnu-gcc\n-          CXX: aarch64-linux-gnu-g++\n-        run: >\n-          bash configure\n-          ${{ matrix.flags }}\n-          --openjdk-target=aarch64-linux-gnu\n-          --with-sysroot=${HOME}\/sysroot-arm64\/\n-          --with-toolchain-path=${HOME}\/sysroot-arm64\/\n-          --with-freetype-lib=${HOME}\/sysroot-arm64\/usr\/lib\/aarch64-linux-gnu\/\n-          --with-freetype-include=${HOME}\/sysroot-arm64\/usr\/include\/freetype2\/\n-          --x-libraries=${HOME}\/sysroot-arm64\/usr\/lib\/aarch64-linux-gnu\/\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-conf-name=linux-aarch64\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-version-build=0\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-aarch64 ${{ matrix.build-target }}\n-        working-directory: jdk\n-\n-  linux_arm_build:\n-    name: Linux arm\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_arm != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build hotspot no-pch\n-        include:\n-          - flavor: build hotspot no-pch\n-            flags: --enable-debug --disable-precompiled-headers\n-            artifact: -debug\n-            build-target: hotspot\n-\n-    env:\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v2\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore build JDK\n-        id: build_restore\n+      - name: Restore build JDK (retry)\n@@ -593,1 +469,1 @@\n-        continue-on-error: true\n+        if: steps.build_restore.outcome == 'failure'\n@@ -595,1 +471,1 @@\n-      - name: Unpack jdk\n+      - name: Unpack build JDK\n@@ -605,1 +481,1 @@\n-      - name: Install cross-compilation host dependencies\n+      - name: Install native host dependencies\n@@ -607,133 +483,3 @@\n-          sudo apt-get update\n-          sudo apt-get install g++-arm-linux-gnueabihf gcc-arm-linux-gnueabihf\n-\n-      - name: Cache sysroot\n-        id: cache-sysroot\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/sysroot-armhf\/\n-          key: sysroot-armhf-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n-\n-      - name: Install sysroot host dependencies\n-        run: |\n-          sudo apt-get install debootstrap qemu-user-static\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Create sysroot\n-        run: >\n-          sudo qemu-debootstrap\n-          --arch=armhf\n-          --verbose\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n-          --resolve-deps\n-          buster\n-          ~\/sysroot-armhf\n-          http:\/\/httpredir.debian.org\/debian\/\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Relativize symlinks in sysroot\n-        run: >\n-          sudo chroot ~\/sysroot-armhf symlinks -cr .\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Fix permissions in sysroot\n-        run: >\n-          sudo chown ${USER} -R ~\/sysroot-armhf\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Remove special directories in sysroot\n-        run: >\n-          rm -rf ~\/sysroot-armhf\/{dev,proc,run,sys}\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Configure\n-        env:\n-          CC: arm-linux-gnueabihf-gcc\n-          CXX: arm-linux-gnueabihf-g++\n-        run: >\n-          bash configure\n-          ${{ matrix.flags }}\n-          --openjdk-target=arm-linux-gnueabihf\n-          --with-sysroot=${HOME}\/sysroot-armhf\/\n-          --with-toolchain-path=${HOME}\/sysroot-armhf\/\n-          --with-freetype-lib=${HOME}\/sysroot-armhf\/usr\/lib\/arm-linux-gnueabihf\/\n-          --with-freetype-include=${HOME}\/sysroot-armhf\/usr\/include\/freetype2\/\n-          --x-libraries=${HOME}\/sysroot-armhf\/usr\/lib\/arm-linux-gnueabihf\/\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-conf-name=linux-arm\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-version-build=0\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-arm ${{ matrix.build-target }}\n-        working-directory: jdk\n-\n-  linux_s390x_build:\n-    name: Linux s390x\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_s390x != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build hotspot no-pch\n-        include:\n-          - flavor: build hotspot no-pch\n-            flags: --enable-debug --disable-precompiled-headers\n-            artifact: -debug\n-            build-target: hotspot\n-\n-    env:\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v2\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore build JDK\n-        id: build_restore\n-        uses: actions\/download-artifact@v2\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        continue-on-error: true\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-\n-      - name: Find root of build JDK image dir\n-        run: |\n-          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n-          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n+          sudo apt-get install gcc-10=10.2.0-5ubuntu1~20.04 g++-10=10.2.0-5ubuntu1~20.04 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n+          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-10 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-10\n+        if: matrix.debian-arch == ''\n@@ -742,3 +488,2 @@\n-        run: |\n-          sudo apt-get update\n-          sudo apt-get install g++-s390x-linux-gnu gcc-s390x-linux-gnu\n+        run: sudo apt-get install gcc-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.2.0-5ubuntu1~20.04cross1 g++-10-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}=10.2.0-5ubuntu1~20.04cross1\n+        if: matrix.debian-arch != ''\n@@ -750,2 +495,3 @@\n-          path: ~\/sysroot-s390x\/\n-          key: sysroot-s390x-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+          path: ~\/sysroot-${{ matrix.debian-arch }}\/\n+          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+        if: matrix.debian-arch != ''\n@@ -754,3 +500,2 @@\n-        run: |\n-          sudo apt-get install debootstrap qemu-user-static\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+        run: sudo apt-get install debootstrap qemu-user-static\n+        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n@@ -761,1 +506,1 @@\n-          --arch=s390x\n+          --arch=${{ matrix.debian-arch }}\n@@ -766,1 +511,1 @@\n-          ~\/sysroot-s390x\n+          ~\/sysroot-${{ matrix.debian-arch }}\n@@ -768,42 +513,1 @@\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Relativize symlinks in sysroot\n-        run: >\n-          sudo chroot ~\/sysroot-s390x symlinks -cr .\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Fix permissions in sysroot\n-        run: >\n-          sudo chown ${USER} -R ~\/sysroot-s390x\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Remove special directories in sysroot\n-        run: >\n-          rm -rf ~\/sysroot-s390x\/{dev,proc,run,sys}\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Configure\n-        env:\n-          CC: s390x-linux-gnu-gcc\n-          CXX: s390x-linux-gnu-g++\n-        run: >\n-          bash configure\n-          ${{ matrix.flags }}\n-          --openjdk-target=s390x-linux-gnu\n-          --with-sysroot=${HOME}\/sysroot-s390x\/\n-          --with-toolchain-path=${HOME}\/sysroot-s390x\/\n-          --with-freetype-lib=${HOME}\/sysroot-s390x\/usr\/lib\/s390x-linux-gnu\/\n-          --with-freetype-include=${HOME}\/sysroot-s390x\/usr\/include\/freetype2\/\n-          --x-libraries=${HOME}\/sysroot-s390x\/usr\/lib\/s390x-linux-gnu\/\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-conf-name=linux-s390x\n-          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n-          --with-version-build=0\n-          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n-          --with-default-make-target=\"product-bundles test-bundles\"\n-          --with-zlib=system\n-        working-directory: jdk\n-\n-      - name: Build\n-        run: make CONF_NAME=linux-s390x ${{ matrix.build-target }}\n-        working-directory: jdk\n+        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n@@ -811,67 +515,1 @@\n-  linux_ppc64le_build:\n-    name: Linux ppc64le\n-    runs-on: \"ubuntu-20.04\"\n-    needs:\n-      - prerequisites\n-      - linux_x64_build\n-    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_ppc64le != 'false'\n-\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        flavor:\n-          - build hotspot no-pch\n-        include:\n-          - flavor: build hotspot no-pch\n-            flags: --enable-debug --disable-precompiled-headers\n-            artifact: -debug\n-            build-target: hotspot\n-\n-    env:\n-      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n-      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n-      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n-      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n-      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n-\n-    steps:\n-      - name: Checkout the source\n-        uses: actions\/checkout@v2\n-        with:\n-          path: jdk\n-\n-      - name: Restore boot JDK from cache\n-        id: bootjdk\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n-          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n-\n-      - name: Download boot JDK\n-        run: |\n-          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n-          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n-          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n-          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n-        if: steps.bootjdk.outputs.cache-hit != 'true'\n-\n-      - name: Restore build JDK\n-        id: build_restore\n-        uses: actions\/download-artifact@v2\n-        with:\n-          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n-          path: ~\/jdk-linux-x64\n-        continue-on-error: true\n-\n-      - name: Unpack jdk\n-        run: |\n-          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n-\n-      - name: Find root of build JDK image dir\n-        run: |\n-          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n-          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n-\n-      - name: Install cross-compilation host dependencies\n+      - name: Prepare sysroot for caching\n@@ -879,9 +517,4 @@\n-          sudo apt-get update\n-          sudo apt-get install g++-powerpc64le-linux-gnu gcc-powerpc64le-linux-gnu:\n-\n-      - name: Cache sysroot\n-        id: cache-sysroot\n-        uses: actions\/cache@v2\n-        with:\n-          path: ~\/sysroot-ppc64el\/\n-          key: sysroot-ppc64el-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+          sudo chroot ~\/sysroot-${{ matrix.debian-arch }} symlinks -cr .\n+          sudo chown ${USER} -R ~\/sysroot-${{ matrix.debian-arch }}\n+          rm -rf ~\/sysroot-${{ matrix.debian-arch }}\/{dev,proc,run,sys}\n+        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'\n@@ -889,1 +522,1 @@\n-      - name: Install sysroot host dependencies\n+      - name: Configure cross compiler\n@@ -891,19 +524,3 @@\n-          sudo apt-get install debootstrap qemu-user-static\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Create sysroot\n-        run: >\n-          sudo qemu-debootstrap\n-          --arch=ppc64el\n-          --verbose\n-          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n-          --resolve-deps\n-          buster\n-          ~\/sysroot-ppc64el\n-          http:\/\/httpredir.debian.org\/debian\/\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Relativize symlinks in sysroot\n-        run: >\n-          sudo chroot ~\/sysroot-ppc64el symlinks -cr .\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+          echo \"CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-10\" >> $GITHUB_ENV\n+          echo \"CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-10\" >> $GITHUB_ENV\n+        if: matrix.debian-arch != ''\n@@ -911,1 +528,1 @@\n-      - name: Fix permissions in sysroot\n+      - name: Configure cross specific flags\n@@ -913,7 +530,9 @@\n-          sudo chown ${USER} -R ~\/sysroot-ppc64el\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n-\n-      - name: Remove special directories in sysroot\n-        run: >\n-          rm -rf ~\/sysroot-ppc64el\/{dev,proc,run,sys}\n-        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+          echo \"cross_flags=\n+          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}\n+          --with-sysroot=${HOME}\/sysroot-${{ matrix.debian-arch }}\/\n+          --with-toolchain-path=${HOME}\/sysroot-${{ matrix.debian-arch }}\/\n+          --with-freetype-lib=${HOME}\/sysroot-${{ matrix.debian-arch }}\/usr\/lib\/${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}\/\n+          --with-freetype-include=${HOME}\/sysroot-${{ matrix.debian-arch }}\/usr\/include\/freetype2\/\n+          --x-libraries=${HOME}\/sysroot-${{ matrix.debian-arch }}\/usr\/lib\/${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}\/\n+          \" >> $GITHUB_ENV\n+        if: matrix.debian-arch != ''\n@@ -922,3 +541,0 @@\n-        env:\n-          CC: powerpc64le-linux-gnu-gcc\n-          CXX: powerpc64le-linux-gnu-g++\n@@ -927,0 +543,1 @@\n+          --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot\n@@ -928,8 +545,1 @@\n-          --openjdk-target=powerpc64le-linux-gnu\n-          --with-sysroot=${HOME}\/sysroot-ppc64el\/\n-          --with-toolchain-path=${HOME}\/sysroot-ppc64el\/\n-          --with-freetype-lib=${HOME}\/sysroot-ppc64el\/usr\/lib\/powerpc64le-linux-gnu\/\n-          --with-freetype-include=${HOME}\/sysroot-ppc64el\/usr\/include\/freetype2\/\n-          --x-libraries=${HOME}\/sysroot-ppc64el\/usr\/lib\/powerpc64le-linux-gnu\/\n-          --with-build-jdk=${{ env.build_jdk_root }}\n-          --with-conf-name=linux-ppc64le\n+          ${{ env.cross_flags }}\n@@ -939,1 +549,2 @@\n-          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-build-jdk=${{ env.build_jdk_root }}\n+          --with-default-make-target=\"hotspot\"\n@@ -944,1 +555,1 @@\n-        run: make CONF_NAME=linux-ppc64le ${{ matrix.build-target }}\n+        run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot\n@@ -1043,1 +654,1 @@\n-        run: make CONF_NAME=linux-x86 ${{ matrix.build-target }}\n+        run: make CONF_NAME=linux-x86\n@@ -1053,1 +664,0 @@\n-        if: matrix.build-target == false\n@@ -1319,2 +929,2 @@\n-          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList \n-          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet \n+          Start-Process -FilePath 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vs_installer.exe' -Wait -NoNewWindow -ArgumentList\n+          'modify --installPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\" --quiet\n@@ -1344,1 +954,1 @@\n-          & make CONF_NAME=windows-x64 ${{ matrix.build-target }}\n+          & make CONF_NAME=windows-x64\n@@ -1355,1 +965,0 @@\n-        if: matrix.build-target == false\n@@ -1649,1 +1258,1 @@\n-        run: make CONF_NAME=macos-x64 ${{ matrix.build-target }}\n+        run: make CONF_NAME=macos-x64\n@@ -1659,1 +1268,0 @@\n-        if: matrix.build-target == false\n@@ -1853,4 +1461,1 @@\n-      - linux_aarch64_build\n-      - linux_arm_build\n-      - linux_ppc64le_build\n-      - linux_s390x_build\n+      - linux_additional_build\n","filename":".github\/workflows\/submit.yml","additions":88,"deletions":483,"binary":false,"changes":571,"status":"modified"}]}