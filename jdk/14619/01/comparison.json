{"files":[{"patch":"@@ -82,1 +82,1 @@\n-  \/\/ constraint in AllocatePrefetchDistanceConstraintFunc.\n+  \/\/ static constraint of 512 defined in runtime\/globals.hpp.\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-    \/\/ constraint in AllocatePrefetchDistanceConstraintFunc.\n+    \/\/ static constraint of 512 defined in runtime\/globals.hpp.\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -354,0 +354,1 @@\n+  assert(sizeof(constant) == sizeof(jint), \"wrong size\");\n@@ -356,1 +357,9 @@\n-    constant++;\n+    if (constant == INT_MAX) {\n+      if (value == nullptr) {\n+        \/\/ Cannot represent c > INT_MAX, do not update bounds\n+        return;\n+      }\n+      constant = java_add((jint)constant, 1); \/\/ Java wrap semantics\n+    } else {\n+      constant++;\n+    }\n@@ -359,1 +368,9 @@\n-    constant--;\n+    if (constant == INT_MIN) {\n+      if (value == nullptr) {\n+        \/\/ Cannot represent c < INT_MIN, do not update bounds\n+        return;\n+      }\n+      constant = java_subtract((jint)constant, 1); \/\/ Java wrap semantics\n+    } else {\n+      constant--;\n+    }\n@@ -697,2 +714,1 @@\n-      lower++;\n-      lower = -lower;\n+      lower = java_subtract(-1, (jint)lower); \/\/ lower++; lower = -lower;\n@@ -742,1 +758,1 @@\n-      upper = -upper;\n+      upper = java_negate((jint)upper); \/\/ upper = -upper;\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-    double k = queue_size \/ (feedback_k * comp_count) + 1;\n+    double k = (double)queue_size \/ ((double)feedback_k * (double)comp_count) + 1;\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-  const jlong end_time_ticks = _start_time_ticks.value() + duration_ticks;\n-  _finish_time_ticks = end_time_ticks < 0 ? JfrTicks(max_jlong) : JfrTicks(end_time_ticks);\n+  const julong end_time_ticks = (julong)_start_time_ticks.value() + (julong)duration_ticks;\n+  _finish_time_ticks = end_time_ticks > (julong)max_jlong ? JfrTicks(max_jlong) : JfrTicks(end_time_ticks);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/utilities\/granularTimer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -901,1 +901,1 @@\n-            return new AndINode(lshift, phase->intcon(-(1 << con)));\n+            return new AndINode(lshift, phase->intcon(java_negate((jint)(1 << con))));\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,12 +70,0 @@\n-JVMFlag::Error AllocatePrefetchDistanceConstraintFunc(intx value, bool verbose) {\n-  if (value < 0 || value > 512) {\n-    JVMFlag::printError(verbose,\n-                        \"AllocatePrefetchDistance (\" INTX_FORMAT \") must be \"\n-                        \"between 0 and %d\\n\",\n-                        AllocatePrefetchDistance, 512);\n-    return JVMFlag::VIOLATES_CONSTRAINT;\n-  }\n-\n-  return JVMFlag::SUCCESS;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  f(intx,  AllocatePrefetchDistanceConstraintFunc)      \\\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1242,1 +1242,1 @@\n-          constraint(AllocatePrefetchDistanceConstraintFunc,AfterMemoryInit)\\\n+          range(-1, 512)                                                    \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}