[{"commit":{"message":"Merge branch 'master' into slpfix"},"files":[],"sha":"3af03a806ba5d37425785907788a11a35a61f611"},{"commit":{"message":"8286125: C2: \"bad AD file\" with PopulateIndex on x86_64\n\nA fuzzer test reports an assertion failure issue with PopulateIndexNode\non x86_64. It can be reproduced by the new jtreg case inside this patch.\nRoot cause is that C2 superword creates a PopulateIndexNode by mistake\nwhile vectorizing below loop.\n\n    for (int i = 304; i > 15; i -= 3) {\n        int c = 16;\n        do {\n            for (int t = 1; t < 1; t++) {}\n            arr[c + 1] >>= i;\n        } while (--c > 0);\n    }\n\nThis is a corner loop case with redundant code inside. After several C2\noptimizations, the do-while loop inside is unrolled and then isomorphic\nright shift statements can be combined in the superword optimization.\nSince all shift counts are the same loop IV value `i`, superword should\ngenerate a RShiftCntVNode to create a vector of scalar replications of\nthe loop IV. But after JDK-8280510, a PopulateIndexNode is generated by\nmistake because of the `opd == iv()` condition.\n\nTo fix this, we add a `have_same_inputs` condition here checking if all\ninputs at position `opd_idx` of nodes in the pack are the same. If true,\nC2 code should NOT run into this block to generate a PopulateIndexNode.\nInstead, it should run into the next block for scalar replications.\n\nAdditionally, only adding this condition here is still not good enough\nbecause it breaks the experimental post loop vectorization. As in post\nloops, all packs are singleton, i.e., `have_same_inputs` is always true.\nHence, we also add a pack size check here to make post loop logic run\ninto this block. It's safe to let it go because post loop never needs\nscalar replications of the loop IV - it never combines nodes in packs.\n\nWe also add two more assertions in the code.\n\nJtreg hotspot::hotspot_all_no_apps, jdk::tier1~3 and langtools::tier1\nare tested and no issue is found."},"files":[],"sha":"e91eb0bf851787d81958b20b4b1bb6fedda17fc4"}]