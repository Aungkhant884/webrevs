{"files":[{"patch":"@@ -541,2 +541,2 @@\n-            if (buffers.isEmpty()) return 0;\n-            return 1;\n+            if (!buffers.isEmpty() && buffers.peek() != LAST_LIST ) return 1;\n+            return available;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8306040\n+ * @summary HttpResponseInputStream.available() returns 1 on empty stream\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient\/lib\n+ * @run testng\/othervm HttpInputStreamAvailableTest\n+ *\n+ *\/\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import static org.testng.Assert.assertEquals;\n+\n+public class HttpInputStreamAvailableTest {\n+\n+    private HttpServer server;\n+    private int port;\n+    static final String TEST_MESSAGE = \"This is test message\";\n+    static final int ZERO = 0;\n+\n+    @BeforeTest\n+    void setup() throws Exception {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress(loopback, 0);\n+        server = HttpServer.create(addr, 0);\n+        port = server.getAddress().getPort();\n+        FirstHandler fHandler = new FirstHandler();\n+        server.createContext(\"\/NonZeroResponse\/\", fHandler);\n+        SecondHandler sHandler = new SecondHandler();\n+        server.createContext(\"\/ZeroResponse\/\", sHandler);\n+        server.start();\n+    }\n+\n+    @AfterTest\n+    void teardown() throws Exception {\n+        server.stop(0);\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .proxy(HttpClient.Builder.NO_PROXY)\n+                .build();\n+\n+        URI uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/NonZeroResponse\/\")\n+                .build();\n+\n+        HttpRequest request = HttpRequest\n+                .newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        \/\/ Send a httpRequest and assert the bytes available\n+        HttpResponse<InputStream> response = client.send(request,\n+                HttpResponse.BodyHandlers.ofInputStream());\n+        try ( InputStream in = response.body()) {\n+            \/\/ This is an estimate and implementation dependent.\n+            \/\/ If you use HttpURLConnection, then in.available() will return\n+            \/\/ different value.\n+            assertEquals(ZERO, in.available());\n+            in.readNBytes(2);\n+            assertEquals(TEST_MESSAGE.length() - 2, in.available());\n+            \/\/read the remaining data\n+            in.readAllBytes();\n+            \/\/available should return 0\n+            assertEquals(ZERO, in.available());\n+        }\n+    }\n+\n+    @Test\n+    public void test1() throws Exception {\n+        HttpClient client = HttpClient\n+                .newBuilder()\n+                .proxy(HttpClient.Builder.NO_PROXY)\n+                .build();\n+\n+        URI uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .path(\"\/ZeroResponse\/\")\n+                .build();\n+\n+        HttpRequest request = HttpRequest\n+                .newBuilder(uri)\n+                .GET()\n+                .build();\n+\n+        \/\/ Send a httpRequest and assert the bytes available\n+        HttpResponse<InputStream> response = client.send(request,\n+                HttpResponse.BodyHandlers.ofInputStream());\n+        try ( InputStream in = response.body()) {\n+            assertEquals(ZERO, in.available());\n+            in.readAllBytes();\n+            assertEquals(ZERO, in.available());\n+        }\n+    }\n+\n+    static class FirstHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            try ( OutputStream os = exchange.getResponseBody()) {\n+                byte[] workingResponse = TEST_MESSAGE.getBytes();\n+                exchange.sendResponseHeaders(200, workingResponse.length);\n+                os.write(workingResponse);\n+                os.flush();\n+            }\n+        }\n+    }\n+\n+    static class SecondHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(204, -1);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpInputStreamAvailableTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}