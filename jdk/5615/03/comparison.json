{"files":[{"patch":"@@ -30,0 +30,1 @@\n+<li><a href=\"#common-test-groups\">Common Test Groups<\/a><\/li>\n@@ -70,0 +71,12 @@\n+<h3 id=\"common-test-groups\">Common Test Groups<\/h3>\n+<p>In the ideal world, contributors would be advised to run all the tests for every change. But in real world, one could only be expected to run as many tests as practical, while being mindful of the scope for the change, the testing resources available, etc.<\/p>\n+<p>The source tree currently defines a few common test groups in the relevant <code>TEST.groups<\/code> files. There are test groups that cover a specific component, for example <code>hotspot_gc<\/code>. It is a good idea to look into <code>TEST.groups<\/code> files to get a sense what tests are relevant to a particular JDK component.<\/p>\n+<p>Component-specific tests may miss some unintended consequences of a change, so other tests should also be run. Again, it might be impractical to run all tests, and therefore <em>tiered<\/em> test groups exist. Tiered test groups are not component-specific, but rather cover the significant parts of the entire JDK.<\/p>\n+<p>Multiple tiers allow balancing test coverage and test costs. Lower test tiers are supposed to contain the simpler, quicker and more stable tests. Higher tiers are supposed to contain progressively more thorough, slower, and sometimes less stable tests, or the tests that require special configuration. When choosing which tiers to run, contributors are advised to run the first N tiers they can afford to run.<\/p>\n+<p>A brief description of the tiered test groups:<\/p>\n+<ul>\n+<li><p><code>tier1<\/code>: This is the lowest test tier. Multiple developers run these tests every day. Normally, at least this tier should be clean before integration. Because of the widespread use, the tests in <code>tier1<\/code> are carefully selected and optimized to run fast, and to run in the most stable manner. The test failures in <code>tier1<\/code> are usually followed up on quickly, either with fixes, or adding relevant tests to problem list. GitHub Actions workflows, if enabled, run <code>tier1<\/code> tests.<\/p><\/li>\n+<li><p><code>tier2<\/code>: This test group covers even more ground. These contain, among other things, tests that either run for too long to be at <code>tier1<\/code>, tests for less stable and\/or experimental features, tests for less essential JDK components (for example, jaxp).<\/p><\/li>\n+<li><p><code>tier3<\/code>: This test group includes more stressful tests, the tests for corner cases not covered by previous tiers, plus the tests that require GUIs. As such, this suite should either be run with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful tests (<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n+<li><p><code>tier4<\/code>: This test group includes every other test not covered by previous tiers. It includes, for example, <code>vmTestbase<\/code> suites for Hotspot, which run for many hours even on large machines. It also runs GUI tests, so the same <code>TEST_JOBS<\/code> and <code>JTREG_KEYWORDS<\/code> caveats apply.<\/p><\/li>\n+<\/ul>\n","filename":"doc\/testing.html","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -67,0 +67,45 @@\n+### Common Test Groups\n+\n+In the ideal world, contributors would be advised to run all the tests for every change. But in\n+real world, one could only be expected to run as many tests as practical, while being mindful\n+of the scope for the change, the testing resources available, etc.\n+\n+The source tree currently defines a few common test groups in the relevant `TEST.groups`\n+files. There are test groups that cover a specific component, for example `hotspot_gc`.\n+It is a good idea to look into `TEST.groups` files to get a sense what tests are relevant\n+to a particular JDK component.\n+\n+Component-specific tests may miss some unintended consequences of a change, so other\n+tests should also be run. Again, it might be impractical to run all tests, and therefore\n+_tiered_ test groups exist. Tiered test groups are not component-specific, but rather cover\n+the significant parts of the entire JDK.\n+\n+Multiple tiers allow balancing test coverage and test costs. Lower test tiers are supposed to\n+contain the simpler, quicker and more stable tests. Higher tiers are supposed to contain\n+progressively more thorough, slower, and sometimes less stable tests, or the tests that require\n+special configuration. When choosing which tiers to run, contributors are advised to run the\n+first N tiers they can afford to run.\n+\n+A brief description of the tiered test groups:\n+\n+- `tier1`: This is the lowest test tier. Multiple developers run these tests every day.\n+Normally, at least this tier should be clean before integration. Because of the widespread use,\n+the tests in `tier1` are carefully selected and optimized to run fast, and to run in the\n+most stable manner. The test failures in `tier1` are usually followed up on quickly, either\n+with fixes, or adding relevant tests to problem list. GitHub Actions workflows, if enabled,\n+run `tier1` tests.\n+\n+- `tier2`: This test group covers even more ground. These contain, among other things,\n+tests that either run for too long to be at `tier1`, tests for less stable and\/or experimental\n+features, tests for less essential JDK components (for example, jaxp).\n+\n+- `tier3`: This test group includes more stressful tests, the tests for corner cases\n+not covered by previous tiers, plus the tests that require GUIs. As such, this suite\n+should either be run with low concurrency (`TEST_JOBS=1`), or without headful tests\n+(`JTREG_KEYWORDS=\\!headful`), or both.\n+\n+- `tier4`: This test group includes every other test not covered by previous tiers. It includes,\n+for example, `vmTestbase` suites for Hotspot, which run for many hours even on large\n+machines. It also runs GUI tests, so the same `TEST_JOBS` and `JTREG_KEYWORDS` caveats\n+apply.\n+\n","filename":"doc\/testing.md","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}