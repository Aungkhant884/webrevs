{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n@@ -50,0 +53,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -97,1 +101,0 @@\n-    static final String HOST = \"localhost:62057\";\n@@ -99,0 +102,3 @@\n+    \/\/ A server that doesn't accept\n+    static volatile ServerSocket NOT_ACCEPTING;\n+\n@@ -100,0 +106,27 @@\n+        ServerSocket ss = NOT_ACCEPTING;\n+        if (ss == null) {\n+            synchronized (HttpGetInCancelledFuture.class) {\n+                if ((ss = NOT_ACCEPTING) == null) {\n+                    try {\n+                        ss = new ServerSocket();\n+                        var loopback = InetAddress.getLoopbackAddress();\n+                        ss.bind(new InetSocketAddress(loopback, 0), 10);\n+                        NOT_ACCEPTING = ss;\n+                    } catch (IOException io) {\n+                        throw new UncheckedIOException(io);\n+                    }\n+                }\n+            }\n+        }\n+        URI http = URIBuilder.newBuilder()\n+                .loopback()\n+                .scheme(\"http\")\n+                .port(ss.getLocalPort())\n+                .path(\"\/not-accepting\/\")\n+                .buildUnchecked();\n+        URI https = URIBuilder.newBuilder()\n+                .loopback()\n+                .scheme(\"https\")\n+                .port(ss.getLocalPort())\n+                .path(\"\/not-accepting\/\")\n+                .buildUnchecked();\n@@ -102,4 +135,4 @@\n-                new TestCase(\"http:\/\/%s\/greet\".formatted(HOST), 200, Version.HTTP_2),\n-                new TestCase(\"http:\/\/%s\/greet\".formatted(HOST), 200, Version.HTTP_1_1),\n-                new TestCase(\"https:\/\/%s\/greet\".formatted(HOST), 200, Version.HTTP_2),\n-                new TestCase(\"https:\/\/%s\/greet\".formatted(HOST), 200, Version.HTTP_1_1)\n+                new TestCase(http.toString(), 200, Version.HTTP_2),\n+                new TestCase(http.toString(), 200, Version.HTTP_1_1),\n+                new TestCase(https.toString(), 200, Version.HTTP_2),\n+                new TestCase(https.toString(), 200, Version.HTTP_1_1)\n@@ -275,1 +308,1 @@\n-                    + \"\\\"\" + HOST + \"\\\": \" + SUCCESS.get());\n+                    + \"\\\"\" + NOT_ACCEPTING.getLocalSocketAddress() + \"\\\": \" + SUCCESS.get());\n@@ -338,3 +371,18 @@\n-        System.gc();\n-        var error = TRACKER.check(5000);\n-        if (error != null) throw error;\n+        try {\n+            System.gc();\n+            var error = TRACKER.check(5000);\n+            if (error != null) throw error;\n+        } finally {\n+            ServerSocket ss;\n+            synchronized (HttpGetInCancelledFuture.class) {\n+                ss = NOT_ACCEPTING;\n+                NOT_ACCEPTING = null;\n+            }\n+            if (ss != null) {\n+                try {\n+                    ss.close();\n+                } catch (IOException io) {\n+                    throw new UncheckedIOException(io);\n+                }\n+            }\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpGetInCancelledFuture.java","additions":57,"deletions":9,"binary":false,"changes":66,"status":"modified"}]}