{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    private static int DEFAULT_BUFFER_SIZE = 8192;\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,2 +88,2 @@\n-    private static int defaultCharBufferSize = 8192;\n-    private static int defaultExpectedLineLength = 80;\n+    private static final int DEFAULT_CHAR_BUFFER_SIZE = 8192;\n+    private static final int DEFAULT_EXPECTED_LINE_LENGTH = 80;\n@@ -116,1 +116,1 @@\n-        this(in, defaultCharBufferSize);\n+        this(in, DEFAULT_CHAR_BUFFER_SIZE);\n@@ -417,1 +417,1 @@\n-                s = new StringBuilder(defaultExpectedLineLength);\n+                s = new StringBuilder(DEFAULT_EXPECTED_LINE_LENGTH);\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.Iterator;\n@@ -37,2 +36,5 @@\n-    private long millisUntilExpiration;\n-    private Map<String,Entry> map;\n+\n+    private static final int QUERY_OVERFLOW = 300;\n+    private static final int MAX_ENTRIES = 200;\n+    private final long millisUntilExpiration;\n+    private final Map<String,Entry> map;\n@@ -41,2 +43,0 @@\n-    private int queryOverflow = 300;\n-    private int MAX_ENTRIES = 200;\n@@ -45,1 +45,1 @@\n-        private long   timestamp;\n+        private long timestamp;\n@@ -75,1 +75,1 @@\n-        if (++queryCount >= queryOverflow) {\n+        if (++queryCount >= QUERY_OVERFLOW) {\n@@ -86,1 +86,1 @@\n-        if (++queryCount >= queryOverflow) {\n+        if (++queryCount >= QUERY_OVERFLOW) {\n","filename":"src\/java.base\/share\/classes\/java\/io\/ExpiringCache.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    private static final FileSystem fs = DefaultFileSystem.getFileSystem();\n+    private static final FileSystem FS = DefaultFileSystem.getFileSystem();\n@@ -188,1 +188,1 @@\n-            s = fs.isInvalid(this) ? PathStatus.INVALID : PathStatus.CHECKED;\n+            s = FS.isInvalid(this) ? PathStatus.INVALID : PathStatus.CHECKED;\n@@ -216,1 +216,1 @@\n-    public static final char separatorChar = fs.getSeparator();\n+    public static final char separatorChar = FS.getSeparator();\n@@ -235,1 +235,1 @@\n-    public static final char pathSeparatorChar = fs.getPathSeparator();\n+    public static final char pathSeparatorChar = FS.getPathSeparator();\n@@ -263,1 +263,1 @@\n-        this.path = fs.resolve(parent.path, child);\n+        this.path = FS.resolve(parent.path, child);\n@@ -280,2 +280,2 @@\n-        this.path = fs.normalize(pathname);\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.path = FS.normalize(pathname);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -322,2 +322,2 @@\n-                this.path = fs.resolve(fs.getDefaultParent(),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.getDefaultParent(),\n+                                       FS.normalize(child));\n@@ -325,2 +325,2 @@\n-                this.path = fs.resolve(fs.normalize(parent),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.normalize(parent),\n+                                       FS.normalize(child));\n@@ -329,1 +329,1 @@\n-            this.path = fs.normalize(child);\n+            this.path = FS.normalize(child);\n@@ -331,1 +331,1 @@\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -365,2 +365,2 @@\n-                this.path = fs.resolve(fs.getDefaultParent(),\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(FS.getDefaultParent(),\n+                                       FS.normalize(child));\n@@ -368,2 +368,2 @@\n-                this.path = fs.resolve(parent.path,\n-                                       fs.normalize(child));\n+                this.path = FS.resolve(parent.path,\n+                                       FS.normalize(child));\n@@ -372,1 +372,1 @@\n-            this.path = fs.normalize(child);\n+            this.path = FS.normalize(child);\n@@ -374,1 +374,1 @@\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -435,1 +435,1 @@\n-        p = fs.fromURIPath(p);\n+        p = FS.fromURIPath(p);\n@@ -438,2 +438,2 @@\n-        this.path = fs.normalize(p);\n-        this.prefixLength = fs.prefixLength(this.path);\n+        this.path = FS.normalize(p);\n+        this.prefixLength = FS.prefixLength(this.path);\n@@ -504,1 +504,1 @@\n-            p = fs.normalize(p);\n+            p = FS.normalize(p);\n@@ -534,1 +534,1 @@\n-        return fs.isAbsolute(this);\n+        return FS.isAbsolute(this);\n@@ -561,1 +561,1 @@\n-        return fs.resolve(this);\n+        return FS.resolve(this);\n@@ -579,1 +579,1 @@\n-            absPath = fs.normalize(absPath);\n+            absPath = FS.normalize(absPath);\n@@ -581,1 +581,1 @@\n-        return new File(absPath, fs.prefixLength(absPath));\n+        return new File(absPath, FS.prefixLength(absPath));\n@@ -626,1 +626,1 @@\n-        return fs.canonicalize(fs.resolve(this));\n+        return FS.canonicalize(FS.resolve(this));\n@@ -653,1 +653,1 @@\n-            canonPath = fs.normalize(canonPath);\n+            canonPath = FS.normalize(canonPath);\n@@ -655,1 +655,1 @@\n-        return new File(canonPath, fs.prefixLength(canonPath));\n+        return new File(canonPath, FS.prefixLength(canonPath));\n@@ -783,1 +783,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_READ);\n+        return FS.checkAccess(this, FileSystem.ACCESS_READ);\n@@ -812,1 +812,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_WRITE);\n+        return FS.checkAccess(this, FileSystem.ACCESS_WRITE);\n@@ -836,1 +836,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_EXISTS);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_EXISTS);\n@@ -867,1 +867,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_DIRECTORY);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_DIRECTORY);\n@@ -900,1 +900,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_REGULAR);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_REGULAR);\n@@ -930,1 +930,1 @@\n-        return fs.hasBooleanAttributes(this, FileSystem.BA_HIDDEN);\n+        return FS.hasBooleanAttributes(this, FileSystem.BA_HIDDEN);\n@@ -974,1 +974,1 @@\n-        return fs.getLastModifiedTime(this);\n+        return FS.getLastModifiedTime(this);\n@@ -1006,1 +1006,1 @@\n-        return fs.getLength(this);\n+        return FS.getLength(this);\n@@ -1045,1 +1045,1 @@\n-        return fs.createFileExclusively(path);\n+        return FS.createFileExclusively(path);\n@@ -1075,1 +1075,1 @@\n-        return fs.delete(this);\n+        return FS.delete(this);\n@@ -1178,1 +1178,1 @@\n-        String[] s = fs.list(this);\n+        String[] s = FS.list(this);\n@@ -1182,1 +1182,1 @@\n-                normalized[i] = fs.normalize(s[i]);\n+                normalized[i] = FS.normalize(s[i]);\n@@ -1381,1 +1381,1 @@\n-        return fs.createDirectory(this);\n+        return FS.createDirectory(this);\n@@ -1465,1 +1465,1 @@\n-        return fs.rename(this, dest);\n+        return FS.rename(this, dest);\n@@ -1504,1 +1504,1 @@\n-        return fs.setLastModifiedTime(this, time);\n+        return FS.setLastModifiedTime(this, time);\n@@ -1535,1 +1535,1 @@\n-        return fs.setReadOnly(this);\n+        return FS.setReadOnly(this);\n@@ -1579,1 +1579,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_WRITE, writable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_WRITE, writable, ownerOnly);\n@@ -1658,1 +1658,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_READ, readable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_READ, readable, ownerOnly);\n@@ -1740,1 +1740,1 @@\n-        return fs.setPermission(this, FileSystem.ACCESS_EXECUTE, executable, ownerOnly);\n+        return FS.setPermission(this, FileSystem.ACCESS_EXECUTE, executable, ownerOnly);\n@@ -1804,1 +1804,1 @@\n-        return fs.checkAccess(this, FileSystem.ACCESS_EXECUTE);\n+        return FS.checkAccess(this, FileSystem.ACCESS_EXECUTE);\n@@ -1853,1 +1853,1 @@\n-        return fs.listRoots();\n+        return FS.listRoots();\n@@ -1888,1 +1888,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_TOTAL);\n+        long space = FS.getSpace(this, FileSystem.SPACE_TOTAL);\n@@ -1932,1 +1932,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_FREE);\n+        long space = FS.getSpace(this, FileSystem.SPACE_FREE);\n@@ -1979,1 +1979,1 @@\n-        long space = fs.getSpace(this, FileSystem.SPACE_USABLE);\n+        long space = FS.getSpace(this, FileSystem.SPACE_USABLE);\n@@ -1989,1 +1989,1 @@\n-        private static final File tmpdir = new File(StaticProperty.javaIoTmpDir());\n+        private static final File TMPDIR = new File(StaticProperty.javaIoTmpDir());\n@@ -1992,1 +1992,1 @@\n-            return tmpdir;\n+            return TMPDIR;\n@@ -1996,1 +1996,1 @@\n-        private static final SecureRandom random = new SecureRandom();\n+        private static final SecureRandom RANDOM = new SecureRandom();\n@@ -2009,1 +2009,1 @@\n-            long n = random.nextLong();\n+            long n = RANDOM.nextLong();\n@@ -2020,1 +2020,1 @@\n-            int nameMax = fs.getNameMax(dir.getPath());\n+            int nameMax = FS.getNameMax(dir.getPath());\n@@ -2058,1 +2058,1 @@\n-            name = fs.normalize(name);\n+            name = FS.normalize(name);\n@@ -2179,1 +2179,1 @@\n-        } while (fs.hasBooleanAttributes(f, FileSystem.BA_EXISTS));\n+        } while (FS.hasBooleanAttributes(f, FileSystem.BA_EXISTS));\n@@ -2181,1 +2181,1 @@\n-        if (!fs.createFileExclusively(f.getPath()))\n+        if (!FS.createFileExclusively(f.getPath()))\n@@ -2250,1 +2250,1 @@\n-        return fs.compare(this, pathname);\n+        return FS.compare(this, pathname);\n@@ -2296,1 +2296,1 @@\n-        return fs.hashCode(this);\n+        return FS.hashCode(this);\n@@ -2346,1 +2346,1 @@\n-        String path = fs.normalize(pathField);\n+        String path = FS.normalize(pathField);\n@@ -2348,1 +2348,1 @@\n-        UNSAFE.putIntVolatile(this, PREFIX_LENGTH_OFFSET, fs.prefixLength(path));\n+        UNSAFE.putIntVolatile(this, PREFIX_LENGTH_OFFSET, FS.prefixLength(path));\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-    private static final JavaIOFileDescriptorAccess fdAccess =\n+    private static final JavaIOFileDescriptorAccess FD_ACCESS =\n@@ -319,1 +319,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n@@ -349,1 +349,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n@@ -370,1 +370,1 @@\n-        boolean append = fdAccess.getAppend(fd);\n+        boolean append = FD_ACCESS.getAppend(fd);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1908,1 +1908,1 @@\n-        private static final Unsafe unsafe = Unsafe.getUnsafe();\n+        private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n@@ -1947,1 +1947,1 @@\n-                    unsafe.objectFieldOffset(rf) : Unsafe.INVALID_FIELD_OFFSET;\n+                    UNSAFE.objectFieldOffset(rf) : Unsafe.INVALID_FIELD_OFFSET;\n@@ -1989,8 +1989,8 @@\n-                    case 'Z' -> Bits.putBoolean(buf, off, unsafe.getBoolean(obj, key));\n-                    case 'B' -> buf[off] = unsafe.getByte(obj, key);\n-                    case 'C' -> Bits.putChar(buf, off, unsafe.getChar(obj, key));\n-                    case 'S' -> Bits.putShort(buf, off, unsafe.getShort(obj, key));\n-                    case 'I' -> Bits.putInt(buf, off, unsafe.getInt(obj, key));\n-                    case 'F' -> Bits.putFloat(buf, off, unsafe.getFloat(obj, key));\n-                    case 'J' -> Bits.putLong(buf, off, unsafe.getLong(obj, key));\n-                    case 'D' -> Bits.putDouble(buf, off, unsafe.getDouble(obj, key));\n+                    case 'Z' -> Bits.putBoolean(buf, off, UNSAFE.getBoolean(obj, key));\n+                    case 'B' -> buf[off] = UNSAFE.getByte(obj, key);\n+                    case 'C' -> Bits.putChar(buf, off, UNSAFE.getChar(obj, key));\n+                    case 'S' -> Bits.putShort(buf, off, UNSAFE.getShort(obj, key));\n+                    case 'I' -> Bits.putInt(buf, off, UNSAFE.getInt(obj, key));\n+                    case 'F' -> Bits.putFloat(buf, off, UNSAFE.getFloat(obj, key));\n+                    case 'J' -> Bits.putLong(buf, off, UNSAFE.getLong(obj, key));\n+                    case 'D' -> Bits.putDouble(buf, off, UNSAFE.getDouble(obj, key));\n@@ -2018,8 +2018,8 @@\n-                    case 'Z' -> unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));\n-                    case 'B' -> unsafe.putByte(obj, key, buf[off]);\n-                    case 'C' -> unsafe.putChar(obj, key, Bits.getChar(buf, off));\n-                    case 'S' -> unsafe.putShort(obj, key, Bits.getShort(buf, off));\n-                    case 'I' -> unsafe.putInt(obj, key, Bits.getInt(buf, off));\n-                    case 'F' -> unsafe.putFloat(obj, key, Bits.getFloat(buf, off));\n-                    case 'J' -> unsafe.putLong(obj, key, Bits.getLong(buf, off));\n-                    case 'D' -> unsafe.putDouble(obj, key, Bits.getDouble(buf, off));\n+                    case 'Z' -> UNSAFE.putBoolean(obj, key, Bits.getBoolean(buf, off));\n+                    case 'B' -> UNSAFE.putByte(obj, key, buf[off]);\n+                    case 'C' -> UNSAFE.putChar(obj, key, Bits.getChar(buf, off));\n+                    case 'S' -> UNSAFE.putShort(obj, key, Bits.getShort(buf, off));\n+                    case 'I' -> UNSAFE.putInt(obj, key, Bits.getInt(buf, off));\n+                    case 'F' -> UNSAFE.putFloat(obj, key, Bits.getFloat(buf, off));\n+                    case 'J' -> UNSAFE.putLong(obj, key, Bits.getLong(buf, off));\n+                    case 'D' -> UNSAFE.putDouble(obj, key, Bits.getDouble(buf, off));\n@@ -2046,1 +2046,1 @@\n-                    case 'L', '[' -> unsafe.getReference(obj, readKeys[i]);\n+                    case 'L', '[' -> UNSAFE.getReference(obj, readKeys[i]);\n@@ -2097,1 +2097,1 @@\n-                            unsafe.putReference(obj, key, val);\n+                            UNSAFE.putReference(obj, key, val);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    private final int length;\n@@ -40,1 +41,0 @@\n-    private int length;\n@@ -50,1 +50,0 @@\n-        this.str = s;\n@@ -52,0 +51,1 @@\n+        this.str = s;\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private StringBuffer buf;\n+    private final StringBuffer buf;\n","filename":"src\/java.base\/share\/classes\/java\/io\/StringWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}