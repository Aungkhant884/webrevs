{"files":[{"patch":"@@ -97,1 +97,0 @@\n-#include \"runtime\/prefetch.inline.hpp\"\n@@ -858,1 +857,1 @@\n-  for (JavaThreadIteratorWithHandle jtiwh; JavaThread *tp = jtiwh.next(); ) {\n+  for (JavaThread* tp : ThreadsListHandle()) {\n@@ -919,1 +918,1 @@\n-    for (JavaThreadIteratorWithHandle jtiwh; JavaThread *tp = jtiwh.next(); ) {\n+    for (JavaThread* tp : ThreadsListHandle()) {\n@@ -2481,22 +2480,0 @@\n-static inline void *prefetch_and_load_ptr(void **addr, intx prefetch_interval) {\n-  Prefetch::read((void*)addr, prefetch_interval);\n-  return *addr;\n-}\n-\n-\/\/ Possibly the ugliest for loop the world has seen. C++ does not allow\n-\/\/ multiple types in the declaration section of the for loop. In this case\n-\/\/ we are only dealing with pointers and hence can cast them. It looks ugly\n-\/\/ but macros are ugly and therefore it's fine to make things absurdly ugly.\n-#define DO_JAVA_THREADS(LIST, X)                                                                                          \\\n-    for (JavaThread *MACRO_scan_interval = (JavaThread*)(uintptr_t)PrefetchScanIntervalInBytes,                           \\\n-             *MACRO_list = (JavaThread*)(LIST),                                                                           \\\n-             **MACRO_end = ((JavaThread**)((ThreadsList*)MACRO_list)->threads()) + ((ThreadsList*)MACRO_list)->length(),  \\\n-             **MACRO_current_p = (JavaThread**)((ThreadsList*)MACRO_list)->threads(),                                     \\\n-             *X = (JavaThread*)prefetch_and_load_ptr((void**)MACRO_current_p, (intx)MACRO_scan_interval);                 \\\n-         MACRO_current_p != MACRO_end;                                                                                    \\\n-         MACRO_current_p++,                                                                                               \\\n-             X = (JavaThread*)prefetch_and_load_ptr((void**)MACRO_current_p, (intx)MACRO_scan_interval))\n-\n-\/\/ All JavaThreads\n-#define ALL_JAVA_THREADS(X) DO_JAVA_THREADS(ThreadsSMRSupport::get_java_thread_list(), X)\n-\n@@ -2511,0 +2488,4 @@\n+\/\/ All JavaThreads\n+#define ALL_JAVA_THREADS(X) \\\n+  for (JavaThread* X : *ThreadsSMRSupport::get_java_thread_list())\n+\n@@ -3644,1 +3625,1 @@\n-  DO_JAVA_THREADS(t_list, p) {\n+  for (JavaThread* p : *t_list) {\n@@ -3665,1 +3646,1 @@\n-  DO_JAVA_THREADS(t_list, p) {\n+  for (JavaThread* p : *t_list) {\n@@ -3680,1 +3661,1 @@\n-  DO_JAVA_THREADS(t_list, q) {\n+  for (JavaThread* q : *t_list) {\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -632,0 +633,23 @@\n+#ifdef ASSERT\n+\n+ThreadsList::Iterator::Iterator() : _thread_ptr(nullptr), _list(nullptr) {}\n+\n+uint ThreadsList::Iterator::check_index(ThreadsList* list, uint i) {\n+  assert(i <= list->length(), \"invalid index %u\", i);\n+  return i;\n+}\n+\n+void ThreadsList::Iterator::assert_not_singular() const {\n+  assert(_list != nullptr, \"singular iterator\");\n+}\n+\n+void ThreadsList::Iterator::assert_dereferenceable() const {\n+  assert(_thread_ptr < (_list->threads() + _list->length()), \"not dereferenceable\");\n+}\n+\n+void ThreadsList::Iterator::assert_same_list(Iterator i) const {\n+  assert(_list == i._list, \"iterators from different lists\");\n+}\n+\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -195,0 +196,4 @@\n+  class Iterator;\n+  inline Iterator begin();\n+  inline Iterator end();\n+\n@@ -214,0 +219,23 @@\n+class ThreadsList::Iterator {\n+  JavaThread* const* _thread_ptr;\n+  DEBUG_ONLY(ThreadsList* _list;)\n+\n+  static uint check_index(ThreadsList* list, uint i) NOT_DEBUG({ return i; });\n+  void assert_not_singular() const NOT_DEBUG_RETURN;\n+  void assert_dereferenceable() const NOT_DEBUG_RETURN;\n+  void assert_same_list(Iterator i) const NOT_DEBUG_RETURN;\n+\n+public:\n+  Iterator() NOT_DEBUG(= default); \/\/ Singular iterator.\n+  inline Iterator(ThreadsList* list, uint i);\n+\n+  inline bool operator==(Iterator other) const;\n+  inline bool operator!=(Iterator other) const;\n+\n+  inline JavaThread* operator*() const;\n+  inline JavaThread* operator->() const;\n+\n+  inline Iterator& operator++();\n+  inline Iterator operator++(int);\n+};\n+\n@@ -303,0 +331,4 @@\n+  using Iterator = ThreadsList::Iterator;\n+  inline Iterator begin();\n+  inline Iterator end();\n+\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.hpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -36,0 +36,51 @@\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+ThreadsList::Iterator::Iterator(ThreadsList* list, uint i) :\n+  _thread_ptr(list->threads() + check_index(list, i))\n+  DEBUG_ONLY(COMMA _list(list))\n+{}\n+\n+bool ThreadsList::Iterator::operator==(Iterator i) const {\n+  assert_not_singular();\n+  assert_same_list(i);\n+  return _thread_ptr == i._thread_ptr;\n+}\n+\n+bool ThreadsList::Iterator::operator!=(Iterator i) const {\n+  return !operator==(i);\n+}\n+\n+JavaThread* ThreadsList::Iterator::operator*() const {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  Prefetch::read(const_cast<JavaThread**>(_thread_ptr), PrefetchScanIntervalInBytes);\n+  return *_thread_ptr;\n+}\n+\n+JavaThread* ThreadsList::Iterator::operator->() const {\n+  return operator*();\n+}\n+\n+ThreadsList::Iterator& ThreadsList::Iterator::operator++() {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  ++_thread_ptr;\n+  return *this;\n+}\n+\n+ThreadsList::Iterator ThreadsList::Iterator::operator++(int) {\n+  assert_not_singular();\n+  assert_dereferenceable();\n+  Iterator result = *this;\n+  ++_thread_ptr;\n+  return result;\n+}\n+\n+ThreadsList::Iterator ThreadsList::begin() {\n+  return Iterator(this, 0);\n+}\n+\n+ThreadsList::Iterator ThreadsList::end() {\n+  return Iterator(this, length());\n+}\n@@ -59,0 +110,3 @@\n+ThreadsListHandle::Iterator ThreadsListHandle::begin() { return list()->begin(); }\n+ThreadsListHandle::Iterator ThreadsListHandle::end() { return list()->end(); }\n+\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.inline.hpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}