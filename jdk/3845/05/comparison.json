{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.Arrays;\n+import jdk.internal.util.ArraysSupport;\n@@ -31,1 +33,0 @@\n-\n@@ -65,0 +66,2 @@\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+\n@@ -274,0 +277,86 @@\n+    public byte[] readAllBytes() throws IOException {\n+        long length = length();\n+        long position = position();\n+        long size = length - position;\n+\n+        if (length <= 0 || size <= 0)\n+            return super.readAllBytes();\n+\n+        if (size > (long) Integer.MAX_VALUE) {\n+            String msg =\n+                String.format(\"Required array size too large for %s: %d = %d - %d\",\n+                    path, size, length, position);\n+            throw new OutOfMemoryError(msg);\n+        }\n+\n+        int capacity = (int)size;\n+        byte[] buf = new byte[capacity];\n+\n+        int nread = 0;\n+        int n;\n+        for (;;) {\n+            \/\/ read to EOF which may read more or less than initial size, e.g.,\n+            \/\/ file is truncated while we are reading\n+            while ((n = read(buf, nread, capacity - nread)) > 0)\n+                nread += n;\n+\n+            \/\/ if last call to read() returned -1, we are done; otherwise,\n+            \/\/ try to read one more byte and if that fails we're done too\n+            if (n < 0 || (n = read()) < 0)\n+                break;\n+\n+            \/\/ one more byte was read; need to allocate a larger buffer\n+            capacity = Math.max(ArraysSupport.newLength(capacity,\n+                                                        1,         \/\/ min growth\n+                                                        capacity), \/\/ pref growth\n+                                DEFAULT_BUFFER_SIZE);\n+            buf = Arrays.copyOf(buf, capacity);\n+            buf[nread++] = (byte)n;\n+        }\n+        return (capacity == nread) ? buf : Arrays.copyOf(buf, nread);\n+    }\n+\n+    public byte[] readNBytes(int len) throws IOException {\n+        if (len < 0)\n+            throw new IllegalArgumentException(\"len < 0\");\n+\n+        long length = length();\n+        long position = position();\n+        long size = length - position;\n+\n+        if (length <= 0 || size <= 0)\n+            return super.readNBytes(len);\n+\n+        int capacity = (int)Math.min(len, size);\n+        byte[] buf = new byte[capacity];\n+\n+        int remaining = capacity;\n+        int nread = 0;\n+        int n;\n+        do {\n+            n = read(buf, nread, remaining);\n+            if (n > 0 ) {\n+                nread += n;\n+                remaining -= n;\n+            } else if (n == 0) {\n+                \/\/ Block until a byte is read or EOF is detected\n+                byte b = (byte)read();\n+                if (b == -1 )\n+                    break;\n+                buf[nread++] = b;\n+                remaining--;\n+            }\n+        } while (n >= 0 && remaining > 0);\n+        return (capacity == nread) ? buf : Arrays.copyOf(buf, nread);\n+    }\n+\n+    private long length() throws IOException {\n+        return length0();\n+    }\n+    private native long length0() throws IOException;\n+\n+    private long position() throws IOException {\n+        return position0();\n+    }\n+    private native long position0() throws IOException;\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":91,"deletions":2,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,1 +351,1 @@\n-     * method blocks until the requested number of bytes have been read, end\n+     * method blocks until the requested number of bytes has been read, end\n@@ -563,1 +563,1 @@\n-     * <p> This method blocks until the requested number of bytes have been\n+     * <p> This method blocks until the requested number of bytes has been\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,33 @@\n+JNIEXPORT jlong JNICALL\n+Java_java_io_FileInputStream_length0(JNIEnv *env, jobject this) {\n+\n+    FD fd;\n+    jlong length = jlong_zero;\n+\n+    fd = getFD(env, this, fis_fd);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return -1;\n+    }\n+    if ((length = IO_GetLength(fd)) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"GetLength failed\");\n+    }\n+    return length;\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_java_io_FileInputStream_position0(JNIEnv *env, jobject this) {\n+    FD fd;\n+    jlong ret;\n+\n+    fd = getFD(env, this, fis_fd);\n+    if (fd == -1) {\n+        JNU_ThrowIOException(env, \"Stream Closed\");\n+        return -1;\n+    }\n+    if ((ret = IO_Lseek(fd, 0L, SEEK_CUR)) == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Seek failed\");\n+    }\n+    return ret;\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/FileInputStream.c","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main ReadXBytes\n+ * @bug 8264777\n+ * @summary Test read{All,N}Bytes overrides (use -Dseed=X to set PRNG seed)\n+ * @key randomness\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.util.Arrays;\n+import java.util.Random;\n+import jdk.test.lib.RandomFactory;\n+\n+public class ReadXBytes {\n+    private static final int ITERATIONS = 10;\n+    private static final int MAX_FILE_SIZE = 1_000_000;\n+    private static final Random RND = RandomFactory.getRandom();\n+\n+    public static void main(String args[]) throws IOException {\n+        File dir = new File(System.getProperty(\"test.src\", \".\"));\n+        dir.deleteOnExit();\n+\n+        File empty = File.createTempFile(\"foo\", \"bar\", dir);\n+        empty.deleteOnExit();\n+        FileInputStream fis = new FileInputStream(empty);\n+        try {\n+            fis.readNBytes(-1);\n+            throw new RuntimeException(\"IllegalArgumentException expecte\");\n+        } catch (IllegalArgumentException expected) {\n+        }\n+\n+        byte[] b = fis.readNBytes(1);\n+        fis.close();\n+        if (b.length != 0)\n+            throw new RuntimeException(\"Zero-length byte[] expected\");\n+\n+        fis = new FileInputStream(empty);\n+        b = fis.readAllBytes();\n+        fis.close();\n+        if (b.length != 0)\n+            throw new RuntimeException(\"Zero-length byte[] expected\");\n+\n+        empty.delete();\n+\n+        for (int i = 0; i < ITERATIONS; i++) {\n+            File file = File.createTempFile(\"foo\", \"bar\", dir);\n+            file.deleteOnExit();\n+\n+            int size = 1 + RND.nextInt(MAX_FILE_SIZE);\n+            System.out.printf(\"size %d%n\", size);\n+            byte[] bytes = new byte[size];\n+            RND.nextBytes(bytes);\n+            RandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n+            raf.write(bytes);\n+            raf.close();\n+\n+            fis = new FileInputStream(file);\n+            int pos = RND.nextInt(size);\n+            int len = RND.nextInt(size - pos);\n+            fis.getChannel().position(pos);\n+            byte[] nbytes = fis.readNBytes(len);\n+            if (nbytes.length != len)\n+                throw new RuntimeException(\"readNBytes() length\");\n+            if (!Arrays.equals(nbytes, 0, len, bytes, pos, pos + len))\n+                throw new RuntimeException(\"readNBytes() content\");\n+            fis.close();\n+\n+            fis = new FileInputStream(file);\n+            pos = RND.nextInt(size);\n+            fis.getChannel().position(pos);\n+            byte[] allbytes = fis.readAllBytes();\n+            if (allbytes.length != size - pos)\n+                throw new RuntimeException(\"readAllBytes() length\");\n+            if (!Arrays.equals(allbytes, 0, allbytes.length,\n+                               bytes, pos, pos + allbytes.length))\n+                throw new RuntimeException(\"readAllBytes() content\");\n+            fis.close();\n+\n+            file.delete();\n+        }\n+        dir.delete();\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/FileInputStream\/ReadXBytes.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}