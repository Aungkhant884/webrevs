{"files":[{"patch":"@@ -279,11 +279,8 @@\n-        int capacity;\n-        if (length != 0L) {\n-            long position = position();\n-            long size = length - position;\n-            if (size > (long)Integer.MAX_VALUE)\n-                throw new OutOfMemoryError(\"Required array size too large\");\n-            if (size <= 0L)\n-                return new byte[0];\n-            capacity = (int)(length - position);\n-        } else {\n-            capacity = DEFAULT_BUFFER_SIZE;\n+        if (length <= 0)\n+            return super.readAllBytes();\n+\n+        long size = length - position();\n+        if (size > (long) Integer.MAX_VALUE) {\n+            String msg = String.format(\"Required array size too large: %d = %d + %d\",\n+                size, length, position());\n+            throw new OutOfMemoryError(msg);\n@@ -291,0 +288,2 @@\n+        if (size <= 0L)\n+            return new byte[0];\n@@ -292,0 +291,1 @@\n+        int capacity = (int)size;\n@@ -321,1 +321,6 @@\n-        if (len == 0L)\n+        long length = length();\n+        if (length <= 0)\n+            return super.readNBytes(len);\n+\n+        long size = length - position();\n+        if (size <= 0L)\n@@ -324,9 +329,1 @@\n-        long length = length();\n-        int capacity;\n-        if (length == 0L) {\n-            capacity = Math.min(len, DEFAULT_BUFFER_SIZE);\n-        } else {\n-            capacity = (int)Math.min(len, length - position());\n-            if (capacity <= 0L)\n-                return new byte[0];\n-        }\n+        int capacity = (int)Math.min(len, size);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"}]}