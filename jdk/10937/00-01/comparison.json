{"files":[{"patch":"@@ -41,1 +41,1 @@\n-  { \"CDSFileMapHeaderBase::_space[0]\",                     offset_of(CDSFileMapHeaderBase, _space)             },\n+  { \"CDSFileMapHeaderBase::_space[0]\",                     offset_of(CDSFileMapHeaderBase, _regions)             },\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    _header->set_base_region_crc(i, base_info->space_crc(i));\n+    _header->set_base_region_crc(i, base_info->region_crc(i));\n@@ -429,1 +429,1 @@\n-    if (dynamic_header->base_region_crc(i) != base_info->space_crc(i)) {\n+    if (dynamic_header->base_region_crc(i) != base_info->region_crc(i)) {\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1764,1 +1764,1 @@\n-                                         bitmaps->at(ptrmap_idx));\n+                                          bitmaps->at(ptrmap_idx));\n@@ -2613,1 +2613,1 @@\n-FileMapRegion* FileMapInfo::first_core_space() const {\n+FileMapRegion* FileMapInfo::first_core_region() const {\n@@ -2617,1 +2617,1 @@\n-FileMapRegion* FileMapInfo::last_core_space() const {\n+FileMapRegion* FileMapInfo::last_core_region() const {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-    return FileMapRegion::cast(&_space[i]);\n+    return FileMapRegion::cast(&_regions[i]);\n@@ -381,1 +381,1 @@\n-  int    space_crc(int i)      const { return region_at(i)->crc(); }\n+  int    region_crc(int i)      const { return region_at(i)->crc(); }\n@@ -530,1 +530,1 @@\n-  size_t mapping_base_offset() const { return first_core_space()->mapping_offset(); }\n+  size_t mapping_base_offset() const { return first_core_region()->mapping_offset(); }\n@@ -532,1 +532,1 @@\n-  size_t mapping_end_offset()  const { return last_core_space()->mapping_end_offset(); }\n+  size_t mapping_end_offset()  const { return last_core_region()->mapping_end_offset(); }\n@@ -534,2 +534,2 @@\n-  char* mapped_base()    const { return first_core_space()->mapped_base(); }\n-  char* mapped_end()     const { return last_core_space()->mapped_end();   }\n+  char* mapped_base()    const { return first_core_region()->mapped_base(); }\n+  char* mapped_end()     const { return last_core_region()->mapped_end();   }\n@@ -542,2 +542,2 @@\n-  FileMapRegion* first_core_space() const;\n-  FileMapRegion* last_core_space() const;\n+  FileMapRegion* first_core_region() const;\n+  FileMapRegion* last_core_region() const;\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#define CURRENT_CDS_ARCHIVE_VERSION 15\n+#define CURRENT_CDS_ARCHIVE_VERSION 16\n@@ -99,1 +99,1 @@\n-  CDSFileMapRegion _space[NUM_CDS_REGIONS];\n+  CDSFileMapRegion _regions[NUM_CDS_REGIONS];\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1050,1 +1050,1 @@\n-  CDS_ONLY(nonstatic_field(FileMapHeader,      _space[0],                 CDSFileMapRegion))                                         \\\n+  CDS_ONLY(nonstatic_field(FileMapHeader,      _regions[0],                 CDSFileMapRegion))                                         \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  \/\/ C equivalent:   return &header->_space[index];\n+  \/\/ C equivalent:   return &header->_regions[index];\n@@ -75,8 +75,8 @@\n-    AddressField spaceField = FileMapHeader_type.getAddressField(\"_space[0]\");\n-\n-    \/\/ size_t offset = offsetof(FileMapHeader, _space[0]);\n-    \/\/ CDSFileMapRegion* space_0 = ((char*)header) + offset; \/\/ space_0 = &header->_space[index];\n-    \/\/ return ((char*)space_0) + index * sizeof(CDSFileMapRegion);\n-    long offset = spaceField.getOffset();\n-    Address space_0 = header.addOffsetTo(offset);\n-    return space_0.addOffsetTo(index * spaceField.getSize());\n+    AddressField regionsField = FileMapHeader_type.getAddressField(\"_regions[0]\");\n+\n+    \/\/ size_t offset = offsetof(FileMapHeader, _regions[0]);\n+    \/\/ CDSFileMapRegion* regions_0 = ((char*)header) + offset; \/\/ regions_0 = &header->_regions[index];\n+    \/\/ return ((char*)regions_0) + index * sizeof(CDSFileMapRegion);\n+    long offset = regionsField.getOffset();\n+    Address regions_0 = header.addOffsetTo(offset);\n+    return regions_0.addOffsetTo(index * regionsField.getSize());\n@@ -103,3 +103,3 @@\n-    \/\/ CDSFileMapRegion* rw_space = &header->_space[rw];\n-    \/\/ char* rwRegionBaseAddress = rw_space->_mapped_base;\n-    \/\/ size_t used = rw_space->_used;\n+    \/\/ CDSFileMapRegion* rw_region = &header->_region[rw];\n+    \/\/ char* rwRegionBaseAddress = rw_region->_mapped_base;\n+    \/\/ size_t used = rw_region->_used;\n@@ -107,3 +107,3 @@\n-    Address rw_space = get_CDSFileMapRegion(FileMapHeader_type, header, 0);\n-    rwRegionBaseAddress = get_AddressField(CDSFileMapRegion_type, rw_space, \"_mapped_base\");\n-    long used = get_CIntegerField(CDSFileMapRegion_type, rw_space, \"_used\");\n+    Address rw_region = get_CDSFileMapRegion(FileMapHeader_type, header, 0);\n+    rwRegionBaseAddress = get_AddressField(CDSFileMapRegion_type, rw_region, \"_mapped_base\");\n+    long used = get_CIntegerField(CDSFileMapRegion_type, rw_region, \"_used\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -389,3 +389,3 @@\n-        if (header._space[m]._read_only &&\n-            !header._space[m]._is_heap_region &&\n-            !header._space[m]._is_bitmap_region) {\n+        if (header._regions[m]._read_only &&\n+            !header._regions[m]._is_heap_region &&\n+            !header._regions[m]._is_bitmap_region) {\n@@ -395,2 +395,2 @@\n-          uintptr_t base = sharedBaseAddress + (uintptr_t) header._space[m]._mapping_offset;\n-          size_t size = header._space[m]._used;\n+          uintptr_t base = sharedBaseAddress + (uintptr_t) header._regions[m]._mapping_offset;\n+          size_t size = header._regions[m]._used;\n@@ -399,1 +399,1 @@\n-          add_class_share_map_info(ph, (off_t) header._space[m]._file_offset,\n+          add_class_share_map_info(ph, (off_t) header._regions[m]._file_offset,\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}