{"files":[{"patch":"@@ -1224,2 +1224,2 @@\n-  const size_t bitmap_used = mapinfo->space_at(MetaspaceShared::bm)->used();\n-  const size_t bitmap_reserved = mapinfo->space_at(MetaspaceShared::bm)->used_aligned();\n+  const size_t bitmap_used = mapinfo->region_at(MetaspaceShared::bm)->used();\n+  const size_t bitmap_reserved = mapinfo->region_at(MetaspaceShared::bm)->used_aligned();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-    FileMapRegion* r = mapinfo->space_at(i);\n+    FileMapRegion* r = mapinfo->region_at(i);\n@@ -312,1 +312,1 @@\n-    FileMapRegion* r = mapinfo->space_at(ri->_region_index);\n+    FileMapRegion* r = mapinfo->region_at(ri->_region_index);\n@@ -468,1 +468,1 @@\n-    FileMapRegion* r = FileMapInfo::current_info()->space_at(i);\n+    FileMapRegion* r = FileMapInfo::current_info()->region_at(i);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  { \"CDSFileMapHeaderBase::_space[0]\",                     offset_of(CDSFileMapHeaderBase, _space)             },\n+  { \"CDSFileMapHeaderBase::_space[0]\",                     offset_of(CDSFileMapHeaderBase, _regions)             },\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-    _header->set_base_region_crc(i, base_info->space_crc(i));\n+    _header->set_base_region_crc(i, base_info->region_crc(i));\n@@ -429,1 +429,1 @@\n-    if (dynamic_header->base_region_crc(i) != base_info->space_crc(i)) {\n+    if (dynamic_header->base_region_crc(i) != base_info->region_crc(i)) {\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -326,2 +326,2 @@\n-    FileMapRegion* si = space_at(i);\n-    si->print(st, i);\n+    FileMapRegion* r = region_at(i);\n+    r->print(st, i);\n@@ -1466,2 +1466,2 @@\n-    FileMapRegion* si = space_at(i);\n-    if (si->file_offset() > len || len - si->file_offset() < si->used()) {\n+    FileMapRegion* r = region_at(i);\n+    if (r->file_offset() > len || len - r->file_offset() < r->used()) {\n@@ -1619,1 +1619,1 @@\n-  FileMapRegion* si = space_at(region);\n+  FileMapRegion* r = region_at(region);\n@@ -1646,1 +1646,1 @@\n-  si->set_file_offset(_file_offset);\n+  r->set_file_offset(_file_offset);\n@@ -1655,1 +1655,1 @@\n-  si->init(region, mapping_offset, size, read_only, allow_exec, crc);\n+  r->init(region, mapping_offset, size, read_only, allow_exec, crc);\n@@ -1763,2 +1763,2 @@\n-      space_at(region_idx)->init_bitmaps(bitmaps->at(oopmap_idx),\n-                                         bitmaps->at(ptrmap_idx));\n+      region_at(region_idx)->init_bitmaps(bitmaps->at(oopmap_idx),\n+                                          bitmaps->at(ptrmap_idx));\n@@ -1832,2 +1832,2 @@\n-  FileMapRegion* si = space_at(idx);\n-  if (!si->read_only()) {\n+  FileMapRegion* r = region_at(idx);\n+  if (!r->read_only()) {\n@@ -1837,1 +1837,1 @@\n-  size_t size = si->used_aligned();\n+  size_t size = r->used_aligned();\n@@ -1842,1 +1842,1 @@\n-  char *base = os::remap_memory(_fd, _full_path, si->file_offset(),\n+  char *base = os::remap_memory(_fd, _full_path, r->file_offset(),\n@@ -1844,1 +1844,1 @@\n-                                si->allow_exec());\n+                                r->allow_exec());\n@@ -1855,1 +1855,1 @@\n-  si->set_read_only(false);\n+  r->set_read_only(false);\n@@ -1871,2 +1871,2 @@\n-  for (int r = 0; r < num_regions; r++) {\n-    int idx = regions[r];\n+  for (int i = 0; i < num_regions; i++) {\n+    int idx = regions[i];\n@@ -1877,1 +1877,1 @@\n-    FileMapRegion* si = space_at(idx);\n+    FileMapRegion* r = region_at(idx);\n@@ -1881,1 +1881,1 @@\n-        assert(si->mapped_base() == last_region->mapped_end(), \"must have no gaps\");\n+        assert(r->mapped_base() == last_region->mapped_end(), \"must have no gaps\");\n@@ -1883,1 +1883,1 @@\n-      last_region = si;)\n+      last_region = r;)\n@@ -1885,1 +1885,1 @@\n-                  idx, p2i(si->mapped_base()), p2i(si->mapped_end()),\n+                  idx, p2i(r->mapped_base()), p2i(r->mapped_end()),\n@@ -1899,1 +1899,1 @@\n-  FileMapRegion* si = space_at(i);\n+  FileMapRegion* r = region_at(i);\n@@ -1903,2 +1903,2 @@\n-                  shared_region_name[i], si->allow_exec() ? \" exec\" : \"\");\n-    if (!os::commit_memory(base, size, si->allow_exec())) {\n+                  shared_region_name[i], r->allow_exec() ? \" exec\" : \"\");\n+    if (!os::commit_memory(base, size, r->allow_exec())) {\n@@ -1910,1 +1910,1 @@\n-  if (os::lseek(_fd, (long)si->file_offset(), SEEK_SET) != (int)si->file_offset() ||\n+  if (os::lseek(_fd, (long)r->file_offset(), SEEK_SET) != (int)r->file_offset() ||\n@@ -1915,1 +1915,1 @@\n-  if (VerifySharedSpaces && !region_crc_check(base, si->used(), si->crc())) {\n+  if (VerifySharedSpaces && !region_crc_check(base, r->used(), r->crc())) {\n@@ -1924,4 +1924,4 @@\n-  FileMapRegion* si = space_at(i);\n-  size_t size = si->used_aligned();\n-  char *requested_addr = mapped_base_address + si->mapping_offset();\n-  assert(si->mapped_base() == NULL, \"must be not mapped yet\");\n+  FileMapRegion* r = region_at(i);\n+  size_t size = r->used_aligned();\n+  char *requested_addr = mapped_base_address + r->mapping_offset();\n+  assert(r->mapped_base() == NULL, \"must be not mapped yet\");\n@@ -1930,1 +1930,1 @@\n-  si->set_mapped_from_file(false);\n+  r->set_mapped_from_file(false);\n@@ -1935,1 +1935,1 @@\n-    si->set_read_only(false);\n+    r->set_read_only(false);\n@@ -1939,1 +1939,1 @@\n-    si->set_read_only(false);\n+    r->set_read_only(false);\n@@ -1941,1 +1941,1 @@\n-    si->set_read_only(false); \/\/ Need to patch the pointers\n+    r->set_read_only(false); \/\/ Need to patch the pointers\n@@ -1958,3 +1958,3 @@\n-    char* base = os::map_memory(_fd, _full_path, si->file_offset(),\n-                                requested_addr, size, si->read_only(),\n-                                si->allow_exec(), mtClassShared);\n+    char* base = os::map_memory(_fd, _full_path, r->file_offset(),\n+                                requested_addr, size, r->read_only(),\n+                                r->allow_exec(), mtClassShared);\n@@ -1967,1 +1967,1 @@\n-    si->set_mapped_from_file(true);\n+    r->set_mapped_from_file(true);\n@@ -1969,1 +1969,1 @@\n-  si->set_mapped_base(requested_addr);\n+  r->set_mapped_base(requested_addr);\n@@ -1980,3 +1980,3 @@\n-  FileMapRegion* si = space_at(MetaspaceShared::bm);\n-  if (si->mapped_base() != NULL) {\n-    return si->mapped_base();\n+  FileMapRegion* r = region_at(MetaspaceShared::bm);\n+  if (r->mapped_base() != NULL) {\n+    return r->mapped_base();\n@@ -1986,2 +1986,2 @@\n-  char* bitmap_base = os::map_memory(_fd, _full_path, si->file_offset(),\n-                                     requested_addr, si->used_aligned(), read_only, allow_exec, mtClassShared);\n+  char* bitmap_base = os::map_memory(_fd, _full_path, r->file_offset(),\n+                                     requested_addr, r->used_aligned(), read_only, allow_exec, mtClassShared);\n@@ -1993,1 +1993,1 @@\n-  if (VerifySharedSpaces && !region_crc_check(bitmap_base, si->used(), si->crc())) {\n+  if (VerifySharedSpaces && !region_crc_check(bitmap_base, r->used(), r->crc())) {\n@@ -1995,1 +1995,1 @@\n-    if (!os::unmap_memory(bitmap_base, si->used_aligned())) {\n+    if (!os::unmap_memory(bitmap_base, r->used_aligned())) {\n@@ -2001,2 +2001,2 @@\n-  si->set_mapped_base(bitmap_base);\n-  si->set_mapped_from_file(true);\n+  r->set_mapped_base(bitmap_base);\n+  r->set_mapped_from_file(true);\n@@ -2005,1 +2005,1 @@\n-                MetaspaceShared::bm, p2i(si->mapped_base()), p2i(si->mapped_end()),\n+                MetaspaceShared::bm, p2i(r->mapped_base()), p2i(r->mapped_end()),\n@@ -2080,1 +2080,1 @@\n-  return (space_at(MetaspaceShared::first_closed_heap_region)->used() > 0);\n+  return (region_at(MetaspaceShared::first_closed_heap_region)->used() > 0);\n@@ -2094,2 +2094,2 @@\n-    FileMapRegion* si = space_at(i);\n-    size_t size = si->used();\n+    FileMapRegion* r = region_at(i);\n+    size_t size = r->used();\n@@ -2097,1 +2097,1 @@\n-      address s = start_address_as_decoded_with_current_oop_encoding_mode(si);\n+      address s = start_address_as_decoded_with_current_oop_encoding_mode(r);\n@@ -2274,2 +2274,2 @@\n-  FileMapRegion* si = space_at(MetaspaceShared::first_closed_heap_region);\n-  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si);\n+  FileMapRegion* r = region_at(MetaspaceShared::first_closed_heap_region);\n+  address relocated_closed_heap_region_bottom = heap_region_runtime_start_address(r);\n@@ -2288,1 +2288,1 @@\n-    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(si);\n+    relocated_closed_heap_region_bottom = heap_region_runtime_start_address(r);\n@@ -2348,1 +2348,1 @@\n-  FileMapRegion* si;\n+  FileMapRegion* r;\n@@ -2353,2 +2353,2 @@\n-    si = space_at(i);\n-    size_t size = si->used();\n+    r = region_at(i);\n+    size_t size = r->used();\n@@ -2356,1 +2356,1 @@\n-      HeapWord* start = (HeapWord*)heap_region_runtime_start_address(si);\n+      HeapWord* start = (HeapWord*)heap_region_runtime_start_address(r);\n@@ -2385,1 +2385,1 @@\n-    si = space_at(first + i);\n+    r = region_at(first + i);\n@@ -2387,3 +2387,3 @@\n-    char* base = os::map_memory(_fd, _full_path, si->file_offset(),\n-                                addr, regions[i].byte_size(), si->read_only(),\n-                                si->allow_exec());\n+    char* base = os::map_memory(_fd, _full_path, r->file_offset(),\n+                                addr, regions[i].byte_size(), r->read_only(),\n+                                r->allow_exec());\n@@ -2399,1 +2399,1 @@\n-    if (VerifySharedSpaces && !region_crc_check(addr, regions[i].byte_size(), si->crc())) {\n+    if (VerifySharedSpaces && !region_crc_check(addr, regions[i].byte_size(), r->crc())) {\n@@ -2406,1 +2406,1 @@\n-    si->set_mapped_base(base);\n+    r->set_mapped_base(base);\n@@ -2436,1 +2436,1 @@\n-    FileMapRegion* si = space_at(i + first_region_idx);\n+    FileMapRegion* r = region_at(i + first_region_idx);\n@@ -2439,2 +2439,2 @@\n-      (address)(space_at(MetaspaceShared::bm)->mapped_base()) + si->oopmap_offset(),\n-      si->oopmap_size_in_bits());\n+      (address)(region_at(MetaspaceShared::bm)->mapped_base()) + r->oopmap_offset(),\n+      r->oopmap_size_in_bits());\n@@ -2497,1 +2497,1 @@\n-  size_t sz = space_at(i)->used();\n+  size_t sz = region_at(i)->used();\n@@ -2502,1 +2502,1 @@\n-    return region_crc_check(region_addr(i), sz, space_at(i)->crc());\n+    return region_crc_check(region_addr(i), sz, region_at(i)->crc());\n@@ -2517,3 +2517,3 @@\n-  FileMapRegion* si = space_at(i);\n-  char* mapped_base = si->mapped_base();\n-  size_t size = si->used_aligned();\n+  FileMapRegion* r = region_at(i);\n+  char* mapped_base = r->mapped_base();\n+  size_t size = r->used_aligned();\n@@ -2522,1 +2522,1 @@\n-    if (size > 0 && si->mapped_from_file()) {\n+    if (size > 0 && r->mapped_from_file()) {\n@@ -2529,1 +2529,1 @@\n-    si->set_mapped_base(NULL);\n+    r->set_mapped_base(NULL);\n@@ -2602,1 +2602,1 @@\n-  FileMapRegion* si = space_at(idx);\n+  FileMapRegion* r = region_at(idx);\n@@ -2605,2 +2605,2 @@\n-    return si->used() > 0 ?\n-          (char*)start_address_as_decoded_with_current_oop_encoding_mode(si) : NULL;\n+    return r->used() > 0 ?\n+          (char*)start_address_as_decoded_with_current_oop_encoding_mode(r) : NULL;\n@@ -2608,1 +2608,1 @@\n-    return si->mapped_base();\n+    return r->mapped_base();\n@@ -2613,2 +2613,2 @@\n-FileMapRegion* FileMapInfo::first_core_space() const {\n-  return space_at(MetaspaceShared::rw);\n+FileMapRegion* FileMapInfo::first_core_region() const {\n+  return region_at(MetaspaceShared::rw);\n@@ -2617,2 +2617,2 @@\n-FileMapRegion* FileMapInfo::last_core_space() const {\n-  return space_at(MetaspaceShared::ro);\n+FileMapRegion* FileMapInfo::last_core_region() const {\n+  return region_at(MetaspaceShared::ro);\n@@ -2734,1 +2734,1 @@\n-  if (p >= base && p < base + space_at(idx)->used()) {\n+  if (p >= base && p < base + region_at(idx)->used()) {\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":85,"deletions":85,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-  FileMapRegion* space_at(int i) {\n+  FileMapRegion* region_at(int i) {\n@@ -312,1 +312,1 @@\n-    return FileMapRegion::cast(&_space[i]);\n+    return FileMapRegion::cast(&_regions[i]);\n@@ -381,1 +381,1 @@\n-  int    space_crc(int i)      const { return space_at(i)->crc(); }\n+  int    region_crc(int i)      const { return region_at(i)->crc(); }\n@@ -530,1 +530,1 @@\n-  size_t mapping_base_offset() const { return first_core_space()->mapping_offset(); }\n+  size_t mapping_base_offset() const { return first_core_region()->mapping_offset(); }\n@@ -532,1 +532,1 @@\n-  size_t mapping_end_offset()  const { return last_core_space()->mapping_end_offset(); }\n+  size_t mapping_end_offset()  const { return last_core_region()->mapping_end_offset(); }\n@@ -534,2 +534,2 @@\n-  char* mapped_base()    const { return first_core_space()->mapped_base(); }\n-  char* mapped_end()     const { return last_core_space()->mapped_end();   }\n+  char* mapped_base()    const { return first_core_region()->mapped_base(); }\n+  char* mapped_end()     const { return last_core_region()->mapped_end();   }\n@@ -542,2 +542,2 @@\n-  FileMapRegion* first_core_space() const;\n-  FileMapRegion* last_core_space() const;\n+  FileMapRegion* first_core_region() const;\n+  FileMapRegion* last_core_region() const;\n@@ -545,2 +545,2 @@\n-  FileMapRegion* space_at(int i) const {\n-    return header()->space_at(i);\n+  FileMapRegion* region_at(int i) const {\n+    return header()->region_at(i);\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#define CURRENT_CDS_ARCHIVE_VERSION 15\n+#define CURRENT_CDS_ARCHIVE_VERSION 16\n@@ -99,1 +99,1 @@\n-  CDSFileMapRegion _space[NUM_CDS_REGIONS];\n+  CDSFileMapRegion _regions[NUM_CDS_REGIONS];\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1050,1 +1050,1 @@\n-  CDS_ONLY(nonstatic_field(FileMapHeader,      _space[0],                 CDSFileMapRegion))                                         \\\n+  CDS_ONLY(nonstatic_field(FileMapHeader,      _regions[0],                 CDSFileMapRegion))                                         \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  \/\/ C equivalent:   return &header->_space[index];\n+  \/\/ C equivalent:   return &header->_regions[index];\n@@ -75,8 +75,8 @@\n-    AddressField spaceField = FileMapHeader_type.getAddressField(\"_space[0]\");\n-\n-    \/\/ size_t offset = offsetof(FileMapHeader, _space[0]);\n-    \/\/ CDSFileMapRegion* space_0 = ((char*)header) + offset; \/\/ space_0 = &header->_space[index];\n-    \/\/ return ((char*)space_0) + index * sizeof(CDSFileMapRegion);\n-    long offset = spaceField.getOffset();\n-    Address space_0 = header.addOffsetTo(offset);\n-    return space_0.addOffsetTo(index * spaceField.getSize());\n+    AddressField regionsField = FileMapHeader_type.getAddressField(\"_regions[0]\");\n+\n+    \/\/ size_t offset = offsetof(FileMapHeader, _regions[0]);\n+    \/\/ CDSFileMapRegion* regions_0 = ((char*)header) + offset; \/\/ regions_0 = &header->_regions[index];\n+    \/\/ return ((char*)regions_0) + index * sizeof(CDSFileMapRegion);\n+    long offset = regionsField.getOffset();\n+    Address regions_0 = header.addOffsetTo(offset);\n+    return regions_0.addOffsetTo(index * regionsField.getSize());\n@@ -103,3 +103,3 @@\n-    \/\/ CDSFileMapRegion* rw_space = &header->_space[rw];\n-    \/\/ char* rwRegionBaseAddress = rw_space->_mapped_base;\n-    \/\/ size_t used = rw_space->_used;\n+    \/\/ CDSFileMapRegion* rw_region = &header->_region[rw];\n+    \/\/ char* rwRegionBaseAddress = rw_region->_mapped_base;\n+    \/\/ size_t used = rw_region->_used;\n@@ -107,3 +107,3 @@\n-    Address rw_space = get_CDSFileMapRegion(FileMapHeader_type, header, 0);\n-    rwRegionBaseAddress = get_AddressField(CDSFileMapRegion_type, rw_space, \"_mapped_base\");\n-    long used = get_CIntegerField(CDSFileMapRegion_type, rw_space, \"_used\");\n+    Address rw_region = get_CDSFileMapRegion(FileMapHeader_type, header, 0);\n+    rwRegionBaseAddress = get_AddressField(CDSFileMapRegion_type, rw_region, \"_mapped_base\");\n+    long used = get_CIntegerField(CDSFileMapRegion_type, rw_region, \"_used\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/memory\/FileMapInfo.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -389,3 +389,3 @@\n-        if (header._space[m]._read_only &&\n-            !header._space[m]._is_heap_region &&\n-            !header._space[m]._is_bitmap_region) {\n+        if (header._regions[m]._read_only &&\n+            !header._regions[m]._is_heap_region &&\n+            !header._regions[m]._is_bitmap_region) {\n@@ -395,2 +395,2 @@\n-          uintptr_t base = sharedBaseAddress + (uintptr_t) header._space[m]._mapping_offset;\n-          size_t size = header._space[m]._used;\n+          uintptr_t base = sharedBaseAddress + (uintptr_t) header._regions[m]._mapping_offset;\n+          size_t size = header._regions[m]._used;\n@@ -399,1 +399,1 @@\n-          add_class_share_map_info(ph, (off_t) header._space[m]._file_offset,\n+          add_class_share_map_info(ph, (off_t) header._regions[m]._file_offset,\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}