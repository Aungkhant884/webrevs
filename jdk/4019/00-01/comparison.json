{"files":[{"patch":"@@ -952,1 +952,1 @@\n-                                  bool final_reduction, int index, Register isEncrypt, XMMRegister counter_inc_mask);\n+                                  bool final_reduction, int index, XMMRegister counter_inc_mask);\n@@ -959,2 +959,1 @@\n-                      Register processInChunks, Register isEncrypt, Register state,\n-                      Register subkeyHtbl, Register counter);\n+                      Register processInChunks, Register state, Register subkeyHtbl, Register counter);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1438,1 +1438,1 @@\n-    Register ghash_pos, bool final_reduction, int i, Register isEncrypt, XMMRegister counter_inc_mask) {\n+    Register ghash_pos, bool final_reduction, int i, XMMRegister counter_inc_mask) {\n@@ -1631,2 +1631,1 @@\n-                                    Register processInChunks, Register isEncrypt, Register state,\n-                                    Register subkeyHtbl, Register counter) {\n+                                    Register processInChunks, Register state, Register subkeyHtbl, Register counter) {\n@@ -1765,1 +1764,1 @@\n-    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, true, xmm24, true, rounds, ghash_pos, false, index, isEncrypt, COUNTER_INC_MASK);\n+    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, true, xmm24, true, rounds, ghash_pos, false, index, COUNTER_INC_MASK);\n@@ -1782,1 +1781,1 @@\n-    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, false, xmm24, false, rounds, ghash_pos, false, index, isEncrypt, COUNTER_INC_MASK);\n+    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, false, xmm24, false, rounds, ghash_pos, false, index, COUNTER_INC_MASK);\n@@ -1787,1 +1786,1 @@\n-    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, false, xmm24, false, rounds, ghash_pos, true, index, isEncrypt, COUNTER_INC_MASK);\n+    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, false, xmm24, false, rounds, ghash_pos, true, index, COUNTER_INC_MASK);\n@@ -1796,1 +1795,1 @@\n-    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, true, xmm24, true, rounds, ghash_pos, false, index, isEncrypt, COUNTER_INC_MASK);\n+    ghash16_encrypt16_parallel(key, subkeyHtbl, CTR_BLOCKx, AAD_HASHx, in, out, ct, pos, true, xmm24, true, rounds, ghash_pos, false, index, COUNTER_INC_MASK);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_aes.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -4414,3 +4414,1 @@\n-    const Register isEncrypt = r10;\n-    const Address isEncrypt_mem(rbp, 2 * wordSize);\n-    const Address state_mem(rbp, 3 * wordSize);\n+    const Address state_mem(rbp, 2 * wordSize);\n@@ -4418,1 +4416,1 @@\n-    const Address subkeyH_mem(rbp, 4 * wordSize);\n+    const Address subkeyH_mem(rbp, 3 * wordSize);\n@@ -4420,1 +4418,1 @@\n-    const Address counter_mem(rbp, 5 * wordSize);\n+    const Address counter_mem(rbp, 4 * wordSize);\n@@ -4427,3 +4425,1 @@\n-    const Address isEncrypt_mem(rbp, 8 * wordSize);\n-    const Register isEncrypt = r12;\n-    const Address state_mem(rbp, 9 * wordSize);\n+    const Address state_mem(rbp, 8 * wordSize);\n@@ -4431,1 +4427,1 @@\n-    const Address subkeyH_mem(rbp, 10 * wordSize);\n+    const Address subkeyH_mem(rbp, 9 * wordSize);\n@@ -4433,1 +4429,1 @@\n-    const Address counter_mem(rbp, 11 * wordSize);\n+    const Address counter_mem(rbp, 10 * wordSize);\n@@ -4448,1 +4444,0 @@\n-    __ movl(isEncrypt, isEncrypt_mem);\n@@ -4453,1 +4448,0 @@\n-    __ movptr(isEncrypt, isEncrypt_mem);\n@@ -4458,1 +4452,1 @@\n-    __ aesgcm_encrypt(in, len, ct, out, key, processInChunks, isEncrypt, state, subkeyHtbl, counter);\n+    __ aesgcm_encrypt(in, len, ct, out, key, processInChunks, state, subkeyHtbl, counter);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-   do_signature(aes_gcm_signature, \"([BII[BI[BIZZ[J[J[B)I\")                                                             \\\n+   do_signature(aes_gcm_signature, \"([BII[BI[BIZLcom\/sun\/crypto\/provider\/GCTR;Lcom\/sun\/crypto\/provider\/GHASH;)I\")                                                             \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2493,1 +2493,1 @@\n-                                  Node* parm8, Node* parm9) {\n+                                  Node* parm8) {\n@@ -2538,2 +2538,1 @@\n-  if (parm9 != NULL) { call->init_req(TypeFunc::Parms+9, parm9);\n-  \/* close each nested if ===> *\/  } } } } } } } } } }\n+    \/* close each nested if ===> *\/  } } } } } } } } }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-                          Node* parm8 = NULL, Node* parm9 = NULL);\n+                          Node* parm8 = NULL);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6531,4 +6531,2 @@\n-  Node* isEncrypt = argument(9);\n-  Node* state   = argument(10);\n-  Node* subkeyHtbl = argument(11);\n-  Node* counter = argument(12);\n+  Node* gctr_object = argument(9);\n+  Node* ghash_object = argument(10);\n@@ -6563,1 +6561,4 @@\n-  if (embeddedCipherObj == NULL) return false;\n+  Node* counter = load_field_from_object(gctr_object, \"counter\", \"[B\");\n+  Node* subkeyHtbl = load_field_from_object(ghash_object, \"subkeyHtbl\", \"[J\");\n+  Node* state = load_field_from_object(ghash_object, \"state\", \"[J\");\n+  if (embeddedCipherObj == NULL || counter == NULL || subkeyHtbl == NULL || state == NULL) return false;\n@@ -6588,1 +6589,1 @@\n-                               in_start, len, ct_start, out_start, k_start, processInChunks, isEncrypt, state_start, subkeyHtbl_start, cnt_start);\n+                               in_start, len, ct_start, out_start, k_start, processInChunks, state_start, subkeyHtbl_start, cnt_start);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -942,1 +942,1 @@\n-  int num_args = 10;\n+  int num_args = 9;\n@@ -952,1 +952,0 @@\n-  fields[argp++] = TypeInt::BOOL;    \/\/ bool isEncrypt\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -282,8 +282,0 @@\n-\n-    long[] getState() {\n-        return state;\n-    }\n-\n-    long[] getSubkeyHtbl() {\n-        return subkeyHtbl;\n-    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GHASH.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -93,3 +93,0 @@\n-    private long[] subkeyHtbl = null;\n-    private long[] state = null;\n-    private byte[] counter = null;\n@@ -337,4 +334,0 @@\n-        this.subkeyHtbl = ghashAllToS.getSubkeyHtbl();\n-        this.state = ghashAllToS.getState();\n-        this.counter = gctrPAndC.counter;\n-\n@@ -425,1 +418,1 @@\n-              tlen = implGCMCrypt(in, inOfs, len, ct, ctOfs, out, outOfs, true, isEncrypt, state, subkeyHtbl, counter);\n+              tlen = implGCMCrypt(in, inOfs, ilen, ct, ctOfs, out, outOfs, true, gctrPAndC, ghashAllToS);\n@@ -509,2 +502,1 @@\n-    private int implGCMCrypt(byte[] in, int inOfs, int len, byte[] ct, int ctOfs, byte[] out, int outOfs, boolean processInChunks, boolean isEncrypt,\n-                             long[] state, long[] subkeyHtbl, byte[] counter) {\n+    private int implGCMCrypt(byte[] in, int inOfs, int len, byte[] ct, int ctOfs, byte[] out, int outOfs, boolean processInChunks, GCTR gctrPAndC, GHASH ghashAllToS) {\n@@ -626,1 +618,1 @@\n-        int tlen = implGCMCrypt(in, inOfs, len, out, outOfs, out, outOfs, false, true, state, subkeyHtbl, counter);\n+        int tlen = implGCMCrypt(in, inOfs, len, out, outOfs, out, outOfs, false, gctrPAndC, ghashAllToS);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/GaloisCounterMode.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"}]}