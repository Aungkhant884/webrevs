{"files":[{"patch":"@@ -1414,1 +1414,1 @@\n-  if (!CompilerConfig::is_c1_or_interpreter_only_no_aot_or_jvmci()) {\n+  if (!CompilerConfig::is_c1_only_no_aot_or_jvmci()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  if (CompilerConfig::is_c1_or_interpreter_only_no_aot_or_jvmci()) {\n+  if (CompilerConfig::is_c1_only_no_aot_or_jvmci()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1009,1 +1009,1 @@\n-    if (!CompilerConfig::is_c2_available()) {\n+    if (!CompilerConfig::is_c2_enabled()) {\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,1 +481,1 @@\n-    } else if (is_c1_compile(comp_level) && !CompilerConfig::is_c1_available()) {\n+    } else if (is_c1_compile(comp_level) && !CompilerConfig::is_c1_enabled()) {\n@@ -484,1 +484,1 @@\n-    } else if (is_c2_compile(comp_level) && !CompilerConfig::is_c2_available()) {\n+    } else if (is_c2_compile(comp_level) && !CompilerConfig::is_c2_enabled()) {\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-    if (CompilerConfig::is_c2_or_jvmci_compiler_available()) {\n+    if (CompilerConfig::is_c2_or_jvmci_compiler_enabled()) {\n@@ -535,1 +535,1 @@\n-    } else if (CompilerConfig::is_c1_available()) {\n+    } else if (CompilerConfig::is_c1_enabled()) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -970,1 +970,3 @@\n-\n+#if !defined(ZERO)\n+  assert(_c2_count > 0 || _c1_count > 0, \"No compilers?\");\n+#endif \/\/ !ZERO\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+  \/\/ During parsing we want to be very careful not to use any methods of CompilerConfig that depend on\n+  \/\/ CompilationModeFlag.\n@@ -79,0 +81,1 @@\n+  \/\/ Now that the flag is parsed, we can use any methods of CompilerConfig.\n@@ -84,1 +87,1 @@\n-    } else if (CompilerConfig::is_jvmci_compiler() && !TieredCompilation) {\n+    } else if (CompilerConfig::is_jvmci_compiler_enabled() && CompilerConfig::is_c1_enabled() && !TieredCompilation) {\n@@ -392,1 +395,1 @@\n-  if (CompilerConfig::is_tiered() && CompilerConfig::is_c2_available()) {\n+  if (CompilerConfig::is_tiered() && CompilerConfig::is_c2_enabled()) {\n@@ -504,1 +507,1 @@\n-  if (Arguments::is_interpreter_only()) {\n+  if (CompilerConfig::is_interpreter_only()) {\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -143,0 +143,7 @@\n+  static bool is_aot()               { return AOT_ONLY(has_aot() && UseAOT) NOT_AOT(false);                 }\n+  static bool is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n+  static bool is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI) NOT_JVMCI(false);      }\n+  static bool is_interpreter_only() {\n+    return Arguments::is_interpreter_only() || TieredStopAtLevel == CompLevel_none;\n+  }\n+\n@@ -161,0 +168,9 @@\n+  static bool is_c1_or_interpreter_only_no_aot_or_jvmci() {\n+    assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n+    return !is_aot() && !is_jvmci() && (is_interpreter_only() || is_c1_only());\n+  }\n+\n+  static bool is_c1_only_no_aot_or_jvmci() {\n+    return is_c1_only() && !is_aot() && !is_jvmci();\n+  }\n+\n@@ -171,1 +187,1 @@\n-  static bool is_c2_available() {\n+  static bool is_c2_enabled() {\n@@ -175,1 +191,1 @@\n-  static bool is_jvmci_compiler_available() {\n+  static bool is_jvmci_compiler_enabled() {\n@@ -179,1 +195,0 @@\n-  \/\/ JVMCI compiler replaces C2.\n@@ -181,1 +196,1 @@\n-    if (is_c2_available()) {\n+    if (is_c2_enabled()) {\n@@ -194,1 +209,1 @@\n-    if (is_jvmci_compiler_available()) {\n+    if (is_jvmci_compiler_enabled()) {\n@@ -214,1 +229,1 @@\n-  static bool is_c1_available() {\n+  static bool is_c1_enabled() {\n@@ -225,2 +240,2 @@\n-  static bool is_c2_or_jvmci_compiler_available() {\n-    return is_c2_available() || is_jvmci_compiler_available();\n+  static bool is_c2_or_jvmci_compiler_enabled() {\n+    return is_c2_enabled() || is_jvmci_compiler_enabled();\n@@ -229,15 +244,0 @@\n-  static bool is_aot()               { return AOT_ONLY(has_aot() && UseAOT) NOT_AOT(false);                 }\n-  static bool is_jvmci_compiler()    { return JVMCI_ONLY(has_jvmci() && UseJVMCICompiler) NOT_JVMCI(false); }\n-  static bool is_jvmci()             { return JVMCI_ONLY(has_jvmci() && EnableJVMCI) NOT_JVMCI(false);      }\n-  static bool is_interpreter_only() {\n-    return Arguments::is_interpreter_only() || TieredStopAtLevel == CompLevel_none;\n-  }\n-\n-  static bool is_c1_or_interpreter_only_no_aot_or_jvmci() {\n-    assert(is_jvmci_compiler() && is_jvmci() || !is_jvmci_compiler(), \"JVMCI compiler implies enabled JVMCI\");\n-    return !is_aot() && !is_jvmci() && (is_interpreter_only() || is_c1_only());\n-  }\n-\n-  static bool is_c1_only_no_aot_or_jvmci() {\n-    return is_c1_only() && !is_aot() && !is_jvmci();\n-  }\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -545,1 +545,1 @@\n-  if (CompilerConfig::is_c2_available()) {\n+  if (CompilerConfig::is_c2_enabled()) {\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  _defer_initial_card_mark = CompilerConfig::is_c2_or_jvmci_compiler_available() && ReduceInitialCardMarks\n+  _defer_initial_card_mark = CompilerConfig::is_c2_or_jvmci_compiler_enabled() && ReduceInitialCardMarks\n","filename":"src\/hotspot\/share\/gc\/shared\/cardTableBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1262,1 +1262,1 @@\n-  guarantee(!CompilerConfig::is_c2_or_jvmci_compiler_available() || actual_gap > (size_t)FastAllocateSizeLimit, \"inline allocation wraps\");\n+  guarantee(!CompilerConfig::is_c2_or_jvmci_compiler_enabled() || actual_gap > (size_t)FastAllocateSizeLimit, \"inline allocation wraps\");\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  if (CompilerConfig::is_c2_or_jvmci_compiler_available()) {\n+  if (CompilerConfig::is_c2_or_jvmci_compiler_enabled()) {\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-  if (CompilerConfig::is_c2_or_jvmci_compiler_available()) {\n+  if (CompilerConfig::is_c2_or_jvmci_compiler_enabled()) {\n","filename":"src\/hotspot\/share\/gc\/shared\/threadLocalAllocBuffer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -788,1 +788,1 @@\n-    if (CompilerConfig::is_c2_available()) {\n+    if (CompilerConfig::is_c2_enabled()) {\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1487,1 +1487,1 @@\n-    if (CompilerConfig::is_c2_or_jvmci_compiler_available()) {\n+    if (CompilerConfig::is_c2_or_jvmci_compiler_enabled()) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2216,1 +2216,1 @@\n-    if (ProfileTraps && CompilerConfig::is_c2_or_jvmci_compiler_available() && update_trap_state && trap_mdo != NULL) {\n+    if (ProfileTraps && CompilerConfig::is_c2_or_jvmci_compiler_enabled() && update_trap_state && trap_mdo != NULL) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  } else {\n+  } else if (!CompilerConfig::is_interpreter_only()) {\n","filename":"src\/hotspot\/share\/runtime\/flags\/jvmFlagConstraintsCompiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -366,2 +366,2 @@\n-  public int interpreterInvocationCount() {\n-    return getMethodCounters().interpreterInvocationCount();\n+  public long interpreterInvocationCount() {\n+    return getInvocationCount();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/Method.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-      interpreterInvocationCountField = new CIntField(type.getCIntegerField(\"_interpreter_invocation_count\"), 0);\n@@ -62,1 +61,0 @@\n-  private static CIntField interpreterInvocationCountField;\n@@ -67,8 +65,0 @@\n-  public int interpreterInvocationCount() {\n-      if (interpreterInvocationCountField != null) {\n-        return (int) interpreterInvocationCountField.getValue(this);\n-      } else {\n-        return 0;\n-      }\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/MethodCounters.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -423,1 +423,1 @@\n-    int iic = method.interpreterInvocationCount();\n+    long iic = method.interpreterInvocationCount();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/MethodData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}