{"files":[{"patch":"@@ -846,3 +846,0 @@\n-  MutexLocker ml(Heap_lock);\n-  collect_locked(cause, max_generation);\n-}\n@@ -850,2 +847,2 @@\n-\/\/ this is the private collection interface\n-\/\/ The Heap_lock is expected to be held on entry.\n+  unsigned int gc_count_before;\n+  unsigned int full_gc_count_before;\n@@ -853,4 +850,6 @@\n-void GenCollectedHeap::collect_locked(GCCause::Cause cause, GenerationType max_generation) {\n-  \/\/ Read the GC count while holding the Heap_lock\n-  unsigned int gc_count_before      = total_collections();\n-  unsigned int full_gc_count_before = total_full_collections();\n+  {\n+    MutexLocker ml(Heap_lock);\n+    \/\/ Read the GC count while holding the Heap_lock\n+    gc_count_before      = total_collections();\n+    full_gc_count_before = total_full_collections();\n+  }\n@@ -862,6 +861,3 @@\n-  {\n-    MutexUnlocker mu(Heap_lock);  \/\/ give up heap lock, execute gets it back\n-    VM_GenCollectFull op(gc_count_before, full_gc_count_before,\n-                         cause, max_generation);\n-    VMThread::execute(&op);\n-  }\n+  VM_GenCollectFull op(gc_count_before, full_gc_count_before,\n+                       cause, max_generation);\n+  VMThread::execute(&op);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -420,5 +420,0 @@\n-  \/\/ Perform a full collection of the generations up to and including max_generation.\n-  \/\/ This is the low level interface used by the public versions of\n-  \/\/ collect() and collect_locked(). Caller holds the Heap_lock on entry.\n-  void collect_locked(GCCause::Cause cause, GenerationType max_generation);\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}