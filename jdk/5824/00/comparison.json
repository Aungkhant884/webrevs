{"files":[{"patch":"@@ -171,1 +171,1 @@\n-            return super.readAllBytes();\n+            return super.readNBytes(len);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8268435\n+ * @bug 8268435 8274780\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm -Xmx8G ReadXBytes\n+ * @run testng\/othervm\/timeout=3600 -Xmx8G ReadXBytes\n@@ -37,0 +37,1 @@\n+import java.io.FilterInputStream;\n@@ -40,0 +41,1 @@\n+import java.nio.channels.Channel;\n@@ -42,0 +44,1 @@\n+import java.nio.channels.ReadableByteChannel;\n@@ -130,0 +133,7 @@\n+        throws IOException {\n+        dataTestFileChannel(length, c, f);\n+        dataTestWrappedInputStream(length, c,f);\n+    }\n+\n+    \/\/ Runs test against an InputStream based on a FileChannel.\n+    public void dataTestFileChannel(long length, FileCreator c, DataTest f)\n@@ -141,0 +151,16 @@\n+    \/\/ Runs test against an InputStream where the FileChannel\n+    \/\/ relationship is obscured.\n+    public void dataTestWrappedInputStream(long length, FileCreator c,\n+        DataTest f) throws IOException {\n+        Path file = c.create(length);\n+        try (FileInputStream fis = new FileInputStream(file.toFile());\n+             FileInputStream fis2 = new FileInputStream(file.toFile());\n+             ReadableByteChannel ch = Channels.newChannel(\n+                 new FilterInputStream(fis2) {});\n+             InputStream cis = Channels.newInputStream(ch)) {\n+            f.test(length, cis, fis);\n+        } finally {\n+            Files.delete(file);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ReadXBytes.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}