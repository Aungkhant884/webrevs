{"files":[{"patch":"@@ -32,1 +32,1 @@\n- * @run testng\/othervm\/timeout=3600 -Xmx8G ReadXBytes\n+ * @run testng\/othervm\/timeout=900 -Xmx8G ReadXBytes\n@@ -45,0 +45,1 @@\n+import java.nio.channels.SeekableByteChannel;\n@@ -48,0 +49,1 @@\n+import java.util.List;\n@@ -57,0 +59,1 @@\n+import static org.testng.Assert.assertFalse;\n@@ -133,7 +136,0 @@\n-        throws IOException {\n-        dataTestFileChannel(length, c, f);\n-        dataTestWrappedInputStream(length, c,f);\n-    }\n-\n-    \/\/ Runs test against an InputStream based on a FileChannel.\n-    public void dataTestFileChannel(long length, FileCreator c, DataTest f)\n@@ -142,20 +138,16 @@\n-        try (FileInputStream fis = new FileInputStream(file.toFile());\n-             FileChannel fc = FileChannel.open(file, READ);\n-             InputStream cis = Channels.newInputStream(fc)) {\n-            f.test(length, cis, fis);\n-        } finally {\n-            Files.delete(file);\n-        }\n-    }\n-\n-    \/\/ Runs test against an InputStream where the FileChannel\n-    \/\/ relationship is obscured.\n-    public void dataTestWrappedInputStream(long length, FileCreator c,\n-        DataTest f) throws IOException {\n-        Path file = c.create(length);\n-        try (FileInputStream fis = new FileInputStream(file.toFile());\n-             FileInputStream fis2 = new FileInputStream(file.toFile());\n-             ReadableByteChannel ch = Channels.newChannel(\n-                 new FilterInputStream(fis2) {});\n-             InputStream cis = Channels.newInputStream(ch)) {\n-            f.test(length, cis, fis);\n+        try {\n+            for (boolean hideSeek : List.of(false, true)) {\n+                try (FileInputStream fis = new FileInputStream(file.toFile())) {\n+                    ReadableByteChannel ch;\n+                    if (hideSeek) {\n+                        InputStream fis2 = new FileInputStream(file.toFile());\n+                        ch = Channels.newChannel(new FilterInputStream(fis2) {});\n+                        assertFalse(ch instanceof SeekableByteChannel);\n+                    } else {\n+                        ch = FileChannel.open(file, READ);\n+                    }\n+                    try (InputStream cis = Channels.newInputStream(ch)) {\n+                        f.test(length, cis, fis);\n+                    }\n+                }\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ReadXBytes.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"}]}