{"files":[{"patch":"@@ -655,1 +655,2 @@\n-      add_local_var(n, PointsToNode::GlobalEscape);\n+      \/\/ All blackhole pointer arguments are globally escaping.\n+      \/\/ Only do this if there is at least one pointer argument.\n@@ -657,2 +658,12 @@\n-      \/\/ not defined yet.\n-      delayed_worklist->push(n);\n+      \/\/ not defined yet, defer to final step.\n+      for (uint i = 0; i < n->req(); i++) {\n+        Node* in = n->in(i);\n+        if (in != nullptr) {\n+          const Type* at = _igvn->type(in);\n+          if (!at->isa_ptr()) continue;\n+\n+          add_local_var(n, PointsToNode::GlobalEscape);\n+          delayed_worklist->push(n);\n+          break;\n+        }\n+      }\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -80,0 +80,9 @@\n+\n+        \/\/ Test calling static methods through instance method to exercise\n+        \/\/ unusual intrinsic shapes.\n+        TESTS.put(\"bh_is_int_0\",    BlackholeIntrinsicTest::test_is_int_0);\n+        TESTS.put(\"bh_is_Object_0\", BlackholeIntrinsicTest::test_is_Object_0);\n+        TESTS.put(\"bh_is_int_1\",    BlackholeIntrinsicTest::test_is_int_1);\n+        TESTS.put(\"bh_is_Object_1\", BlackholeIntrinsicTest::test_is_Object_1);\n+        TESTS.put(\"bh_is_int_2\",    BlackholeIntrinsicTest::test_is_int_2);\n+        TESTS.put(\"bh_is_Object_2\", BlackholeIntrinsicTest::test_is_Object_2);\n@@ -165,0 +174,7 @@\n+    private static void test_is_int_0() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            t.bh_is_int_0();\n+        }\n+    }\n+\n@@ -189,0 +205,7 @@\n+    private static void test_is_Object_0() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            t.bh_is_Object_0();\n+        }\n+    }\n+\n@@ -219,0 +242,7 @@\n+    private static void test_is_int_1() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            t.bh_is_int_1(c);\n+        }\n+    }\n+\n@@ -244,0 +274,8 @@\n+    private static void test_is_Object_1() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            Object o = new Object();\n+            t.bh_is_Object_1(o);\n+        }\n+    }\n+\n@@ -274,0 +312,7 @@\n+    private static void test_is_int_2() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            t.bh_is_int_2(c, c + 1);\n+        }\n+    }\n+\n@@ -299,0 +344,9 @@\n+\n+    private static void test_is_Object_2() {\n+        BlackholeTarget t = new BlackholeTarget();\n+        for (int c = 0; c < CYCLES; c++) {\n+            Object o1 = new Object();\n+            Object o2 = new Object();\n+            t.bh_is_Object_2(o1, o2);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeIntrinsicTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+    public static void    bh_is_int_0()              {}\n+    public static void    bh_is_Object_0()           {}\n+\n@@ -61,0 +64,3 @@\n+    public static void    bh_is_int_1(int v)         {}\n+    public static void    bh_is_Object_1(Object v)   {}\n+\n@@ -81,0 +87,3 @@\n+    public static void    bh_is_int_2(int v1, int v2)            {}\n+    public static void    bh_is_Object_2(Object v1, Object v2)   {}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeTarget.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}