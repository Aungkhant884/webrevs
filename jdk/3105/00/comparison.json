{"files":[{"patch":"@@ -159,53 +159,14 @@\n-void PhaseMacroExpand::extract_call_projections(CallNode *call) {\n-  _fallthroughproj = NULL;\n-  _fallthroughcatchproj = NULL;\n-  _ioproj_fallthrough = NULL;\n-  _ioproj_catchall = NULL;\n-  _catchallcatchproj = NULL;\n-  _memproj_fallthrough = NULL;\n-  _memproj_catchall = NULL;\n-  _resproj = NULL;\n-  for (DUIterator_Fast imax, i = call->fast_outs(imax); i < imax; i++) {\n-    ProjNode *pn = call->fast_out(i)->as_Proj();\n-    switch (pn->_con) {\n-      case TypeFunc::Control:\n-      {\n-        \/\/ For Control (fallthrough) and I_O (catch_all_index) we have CatchProj -> Catch -> Proj\n-        _fallthroughproj = pn;\n-        DUIterator_Fast jmax, j = pn->fast_outs(jmax);\n-        const Node *cn = pn->fast_out(j);\n-        if (cn->is_Catch()) {\n-          ProjNode *cpn = NULL;\n-          for (DUIterator_Fast kmax, k = cn->fast_outs(kmax); k < kmax; k++) {\n-            cpn = cn->fast_out(k)->as_Proj();\n-            assert(cpn->is_CatchProj(), \"must be a CatchProjNode\");\n-            if (cpn->_con == CatchProjNode::fall_through_index)\n-              _fallthroughcatchproj = cpn;\n-            else {\n-              assert(cpn->_con == CatchProjNode::catch_all_index, \"must be correct index.\");\n-              _catchallcatchproj = cpn;\n-            }\n-          }\n-        }\n-        break;\n-      }\n-      case TypeFunc::I_O:\n-        if (pn->_is_io_use)\n-          _ioproj_catchall = pn;\n-        else\n-          _ioproj_fallthrough = pn;\n-        break;\n-      case TypeFunc::Memory:\n-        if (pn->_is_io_use)\n-          _memproj_catchall = pn;\n-        else\n-          _memproj_fallthrough = pn;\n-        break;\n-      case TypeFunc::Parms:\n-        _resproj = pn;\n-        break;\n-      default:\n-        assert(false, \"unexpected projection from allocation node.\");\n-    }\n-  }\n-\n+void PhaseMacroExpand::extract_call_projections(CallNode* call) {\n+  CallProjections projs;\n+\n+  call->extract_projections(&projs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+#define PROJ_ASSIGNMENT(dst, src) dst = !src ? nullptr : (src->as_Proj());\n+  PROJ_ASSIGNMENT(_fallthroughproj,      projs.fallthrough_proj);\n+  PROJ_ASSIGNMENT(_fallthroughcatchproj, projs.fallthrough_catchproj);\n+  PROJ_ASSIGNMENT(_ioproj_fallthrough,   projs.fallthrough_ioproj);\n+  PROJ_ASSIGNMENT(_ioproj_catchall,      projs.catchall_ioproj);\n+  PROJ_ASSIGNMENT(_catchallcatchproj,    projs.catchall_catchproj);\n+  PROJ_ASSIGNMENT(_memproj_fallthrough,  projs.fallthrough_memproj);\n+  PROJ_ASSIGNMENT(_memproj_catchall,     projs.catchall_memproj);\n+  PROJ_ASSIGNMENT(_resproj,              projs.resproj);\n+#undef PROJ_ASSIGNMENT\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":14,"deletions":53,"binary":false,"changes":67,"status":"modified"}]}