{"files":[{"patch":"@@ -940,1 +940,1 @@\n-  if (_call_projects.resproj != NULL && _call_projects.resproj->outcnt() != 0) {\n+  if (_callprojs.resproj != NULL && _callprojs.resproj->outcnt() != 0) {\n@@ -944,2 +944,2 @@\n-    for (DUIterator_Fast jmax, j = _call_projects.resproj->fast_outs(jmax);  j < jmax; j++) {\n-      Node *use = _call_projects.resproj->fast_out(j);\n+    for (DUIterator_Fast jmax, j = _callprojs.resproj->fast_outs(jmax);  j < jmax; j++) {\n+      Node *use = _callprojs.resproj->fast_out(j);\n@@ -952,3 +952,3 @@\n-    for (DUIterator_Last jmin, j = _call_projects.resproj->last_outs(jmin); j >= jmin; ) {\n-      Node *use = _call_projects.resproj->last_out(j);\n-      uint oc1 = _call_projects.resproj->outcnt();\n+    for (DUIterator_Last jmin, j = _callprojs.resproj->last_outs(jmin); j >= jmin; ) {\n+      Node *use = _callprojs.resproj->last_out(j);\n+      uint oc1 = _callprojs.resproj->outcnt();\n@@ -964,1 +964,1 @@\n-          assert(tmp == _call_projects.fallthrough_catchproj, \"allocation control projection\");\n+          assert(tmp == _callprojs.fallthrough_catchproj, \"allocation control projection\");\n@@ -972,1 +972,1 @@\n-            assert(mem->in(TypeFunc::Memory) == _call_projects.fallthrough_memproj, \"allocation memory projection\");\n+            assert(mem->in(TypeFunc::Memory) == _callprojs.fallthrough_memproj, \"allocation memory projection\");\n@@ -974,1 +974,1 @@\n-            assert(mem == _call_projects.fallthrough_memproj, \"allocation memory projection\");\n+            assert(mem == _callprojs.fallthrough_memproj, \"allocation memory projection\");\n@@ -982,1 +982,1 @@\n-      j -= (oc1 - _call_projects.resproj->outcnt());\n+      j -= (oc1 - _callprojs.resproj->outcnt());\n@@ -985,2 +985,2 @@\n-  if (_call_projects.fallthrough_catchproj != NULL) {\n-    _igvn.replace_node(_call_projects.fallthrough_catchproj, alloc->in(TypeFunc::Control));\n+  if (_callprojs.fallthrough_catchproj != NULL) {\n+    _igvn.replace_node(_callprojs.fallthrough_catchproj, alloc->in(TypeFunc::Control));\n@@ -988,2 +988,2 @@\n-  if (_call_projects.fallthrough_memproj != NULL) {\n-    _igvn.replace_node(_call_projects.fallthrough_memproj, alloc->in(TypeFunc::Memory));\n+  if (_callprojs.fallthrough_memproj != NULL) {\n+    _igvn.replace_node(_callprojs.fallthrough_memproj, alloc->in(TypeFunc::Memory));\n@@ -991,2 +991,2 @@\n-  if (_call_projects.catchall_memproj != NULL) {\n-    _igvn.replace_node(_call_projects.catchall_memproj, C->top());\n+  if (_callprojs.catchall_memproj != NULL) {\n+    _igvn.replace_node(_callprojs.catchall_memproj, C->top());\n@@ -994,2 +994,2 @@\n-  if (_call_projects.fallthrough_ioproj != NULL) {\n-    _igvn.replace_node(_call_projects.fallthrough_ioproj, alloc->in(TypeFunc::I_O));\n+  if (_callprojs.fallthrough_ioproj != NULL) {\n+    _igvn.replace_node(_callprojs.fallthrough_ioproj, alloc->in(TypeFunc::I_O));\n@@ -997,2 +997,2 @@\n-  if (_call_projects.catchall_ioproj != NULL) {\n-    _igvn.replace_node(_call_projects.catchall_ioproj, C->top());\n+  if (_callprojs.catchall_ioproj != NULL) {\n+    _igvn.replace_node(_callprojs.catchall_ioproj, C->top());\n@@ -1000,2 +1000,2 @@\n-  if (_call_projects.catchall_catchproj != NULL) {\n-    _igvn.replace_node(_call_projects.catchall_catchproj, C->top());\n+  if (_callprojs.catchall_catchproj != NULL) {\n+    _igvn.replace_node(_callprojs.catchall_catchproj, C->top());\n@@ -1026,1 +1026,1 @@\n-  alloc->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  alloc->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n@@ -1081,1 +1081,1 @@\n-  boxing->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  boxing->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n@@ -1411,1 +1411,1 @@\n-  call->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  call->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n@@ -1417,2 +1417,2 @@\n-  if (expand_fast_path && _call_projects.fallthrough_memproj != NULL) {\n-    migrate_outs(_call_projects.fallthrough_memproj, result_phi_rawmem);\n+  if (expand_fast_path && _callprojs.fallthrough_memproj != NULL) {\n+    migrate_outs(_callprojs.fallthrough_memproj, result_phi_rawmem);\n@@ -1422,4 +1422,4 @@\n-  if (_call_projects.catchall_memproj != NULL ) {\n-    if (_call_projects.fallthrough_memproj == NULL) {\n-      _call_projects.fallthrough_memproj = new ProjNode(call, TypeFunc::Memory);\n-      transform_later(_call_projects.fallthrough_memproj);\n+  if (_callprojs.catchall_memproj != NULL ) {\n+    if (_callprojs.fallthrough_memproj == NULL) {\n+      _callprojs.fallthrough_memproj = new ProjNode(call, TypeFunc::Memory);\n+      transform_later(_callprojs.fallthrough_memproj);\n@@ -1427,2 +1427,2 @@\n-    migrate_outs(_call_projects.catchall_memproj, _call_projects.fallthrough_memproj);\n-    _igvn.remove_dead_node(_call_projects.catchall_memproj);\n+    migrate_outs(_callprojs.catchall_memproj, _callprojs.fallthrough_memproj);\n+    _igvn.remove_dead_node(_callprojs.catchall_memproj);\n@@ -1436,2 +1436,2 @@\n-  if (_call_projects.fallthrough_ioproj != NULL) {\n-    migrate_outs(_call_projects.fallthrough_ioproj, result_phi_i_o);\n+  if (_callprojs.fallthrough_ioproj != NULL) {\n+    migrate_outs(_callprojs.fallthrough_ioproj, result_phi_i_o);\n@@ -1441,4 +1441,4 @@\n-  if (_call_projects.catchall_ioproj != NULL ) {\n-    if (_call_projects.fallthrough_ioproj == NULL) {\n-      _call_projects.fallthrough_ioproj = new ProjNode(call, TypeFunc::I_O);\n-      transform_later(_call_projects.fallthrough_ioproj);\n+  if (_callprojs.catchall_ioproj != NULL ) {\n+    if (_callprojs.fallthrough_ioproj == NULL) {\n+      _callprojs.fallthrough_ioproj = new ProjNode(call, TypeFunc::I_O);\n+      transform_later(_callprojs.fallthrough_ioproj);\n@@ -1446,2 +1446,2 @@\n-    migrate_outs(_call_projects.catchall_ioproj, _call_projects.fallthrough_ioproj);\n-    _igvn.remove_dead_node(_call_projects.catchall_ioproj);\n+    migrate_outs(_callprojs.catchall_ioproj, _callprojs.fallthrough_ioproj);\n+    _igvn.remove_dead_node(_callprojs.catchall_ioproj);\n@@ -1466,2 +1466,2 @@\n-  if (_call_projects.fallthrough_catchproj != NULL) {\n-    ctrl = _call_projects.fallthrough_catchproj->clone();\n+  if (_callprojs.fallthrough_catchproj != NULL) {\n+    ctrl = _callprojs.fallthrough_catchproj->clone();\n@@ -1469,1 +1469,1 @@\n-    _igvn.replace_node(_call_projects.fallthrough_catchproj, result_region);\n+    _igvn.replace_node(_callprojs.fallthrough_catchproj, result_region);\n@@ -1474,1 +1474,1 @@\n-  if (_call_projects.resproj == NULL) {\n+  if (_callprojs.resproj == NULL) {\n@@ -1478,1 +1478,1 @@\n-    slow_result = _call_projects.resproj->clone();\n+    slow_result = _callprojs.resproj->clone();\n@@ -1480,1 +1480,1 @@\n-    _igvn.replace_node(_call_projects.resproj, result_phi_rawoop);\n+    _igvn.replace_node(_callprojs.resproj, result_phi_rawoop);\n@@ -1490,1 +1490,1 @@\n-  result_phi_rawmem->init_req(slow_result_path, _call_projects.fallthrough_memproj);\n+  result_phi_rawmem->init_req(slow_result_path, _callprojs.fallthrough_memproj);\n@@ -1502,4 +1502,4 @@\n-  alloc->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n-  if (_call_projects.resproj != NULL) {\n-    for (DUIterator_Fast imax, i = _call_projects.resproj->fast_outs(imax); i < imax; i++) {\n-      Node* use = _call_projects.resproj->fast_out(i);\n+  alloc->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  if (_callprojs.resproj != NULL) {\n+    for (DUIterator_Fast imax, i = _callprojs.resproj->fast_outs(imax); i < imax; i++) {\n+      Node* use = _callprojs.resproj->fast_out(i);\n@@ -1510,2 +1510,2 @@\n-    assert(_call_projects.resproj->outcnt() == 0, \"all uses must be deleted\");\n-    _igvn.remove_dead_node(_call_projects.resproj);\n+    assert(_callprojs.resproj->outcnt() == 0, \"all uses must be deleted\");\n+    _igvn.remove_dead_node(_callprojs.resproj);\n@@ -1513,3 +1513,3 @@\n-  if (_call_projects.fallthrough_catchproj != NULL) {\n-    migrate_outs(_call_projects.fallthrough_catchproj, ctrl);\n-    _igvn.remove_dead_node(_call_projects.fallthrough_catchproj);\n+  if (_callprojs.fallthrough_catchproj != NULL) {\n+    migrate_outs(_callprojs.fallthrough_catchproj, ctrl);\n+    _igvn.remove_dead_node(_callprojs.fallthrough_catchproj);\n@@ -1517,3 +1517,3 @@\n-  if (_call_projects.catchall_catchproj != NULL) {\n-    _igvn.rehash_node_delayed(_call_projects.catchall_catchproj);\n-    _call_projects.catchall_catchproj->set_req(0, top());\n+  if (_callprojs.catchall_catchproj != NULL) {\n+    _igvn.rehash_node_delayed(_callprojs.catchall_catchproj);\n+    _callprojs.catchall_catchproj->set_req(0, top());\n@@ -1521,2 +1521,2 @@\n-  if (_call_projects.fallthrough_proj != NULL) {\n-    Node* catchnode = _call_projects.fallthrough_proj->unique_ctrl_out();\n+  if (_callprojs.fallthrough_proj != NULL) {\n+    Node* catchnode = _callprojs.fallthrough_proj->unique_ctrl_out();\n@@ -1524,1 +1524,1 @@\n-    _igvn.remove_dead_node(_call_projects.fallthrough_proj);\n+    _igvn.remove_dead_node(_callprojs.fallthrough_proj);\n@@ -1526,3 +1526,3 @@\n-  if (_call_projects.fallthrough_memproj != NULL) {\n-    migrate_outs(_call_projects.fallthrough_memproj, mem);\n-    _igvn.remove_dead_node(_call_projects.fallthrough_memproj);\n+  if (_callprojs.fallthrough_memproj != NULL) {\n+    migrate_outs(_callprojs.fallthrough_memproj, mem);\n+    _igvn.remove_dead_node(_callprojs.fallthrough_memproj);\n@@ -1530,3 +1530,3 @@\n-  if (_call_projects.fallthrough_ioproj != NULL) {\n-    migrate_outs(_call_projects.fallthrough_ioproj, i_o);\n-    _igvn.remove_dead_node(_call_projects.fallthrough_ioproj);\n+  if (_callprojs.fallthrough_ioproj != NULL) {\n+    migrate_outs(_callprojs.fallthrough_ioproj, i_o);\n+    _igvn.remove_dead_node(_callprojs.fallthrough_ioproj);\n@@ -1534,3 +1534,3 @@\n-  if (_call_projects.catchall_memproj != NULL) {\n-    _igvn.rehash_node_delayed(_call_projects.catchall_memproj);\n-    _call_projects.catchall_memproj->set_req(0, top());\n+  if (_callprojs.catchall_memproj != NULL) {\n+    _igvn.rehash_node_delayed(_callprojs.catchall_memproj);\n+    _callprojs.catchall_memproj->set_req(0, top());\n@@ -1538,3 +1538,3 @@\n-  if (_call_projects.catchall_ioproj != NULL) {\n-    _igvn.rehash_node_delayed(_call_projects.catchall_ioproj);\n-    _call_projects.catchall_ioproj->set_req(0, top());\n+  if (_callprojs.catchall_ioproj != NULL) {\n+    _igvn.rehash_node_delayed(_callprojs.catchall_ioproj);\n+    _callprojs.catchall_ioproj->set_req(0, top());\n@@ -2099,1 +2099,1 @@\n-  alock->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  alock->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n@@ -2103,2 +2103,2 @@\n-         _call_projects.fallthrough_proj != NULL &&\n-         _call_projects.fallthrough_memproj != NULL,\n+         _callprojs.fallthrough_proj != NULL &&\n+         _callprojs.fallthrough_memproj != NULL,\n@@ -2107,2 +2107,2 @@\n-  Node* fallthroughproj = _call_projects.fallthrough_proj;\n-  Node* memproj_fallthrough = _call_projects.fallthrough_memproj;\n+  Node* fallthroughproj = _callprojs.fallthrough_proj;\n+  Node* memproj_fallthrough = _callprojs.fallthrough_memproj;\n@@ -2362,1 +2362,1 @@\n-  call->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  call->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n@@ -2368,2 +2368,2 @@\n-  assert ( _call_projects.fallthrough_ioproj == NULL && _call_projects.catchall_ioproj == NULL &&\n-           _call_projects.catchall_memproj == NULL && _call_projects.catchall_catchproj == NULL, \"Unexpected projection from Lock\");\n+  assert ( _callprojs.fallthrough_ioproj == NULL && _callprojs.catchall_ioproj == NULL &&\n+           _callprojs.catchall_memproj == NULL && _callprojs.catchall_catchproj == NULL, \"Unexpected projection from Lock\");\n@@ -2374,1 +2374,1 @@\n-  Node *slow_ctrl = _call_projects.fallthrough_proj->clone();\n+  Node *slow_ctrl = _callprojs.fallthrough_proj->clone();\n@@ -2376,2 +2376,2 @@\n-  _igvn.hash_delete(_call_projects.fallthrough_proj);\n-  _call_projects.fallthrough_proj->disconnect_inputs(C);\n+  _igvn.hash_delete(_callprojs.fallthrough_proj);\n+  _callprojs.fallthrough_proj->disconnect_inputs(C);\n@@ -2381,1 +2381,1 @@\n-  _igvn.replace_node(_call_projects.fallthrough_proj, region);\n+  _igvn.replace_node(_callprojs.fallthrough_proj, region);\n@@ -2386,1 +2386,1 @@\n-  _igvn.replace_node(_call_projects.fallthrough_memproj, mem_phi);\n+  _igvn.replace_node(_callprojs.fallthrough_memproj, mem_phi);\n@@ -2433,3 +2433,3 @@\n-  call->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n-  assert ( _call_projects.fallthrough_ioproj == NULL && _call_projects.catchall_ioproj == NULL &&\n-           _call_projects.catchall_memproj == NULL && _call_projects.catchall_catchproj == NULL, \"Unexpected projection from Lock\");\n+  call->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  assert ( _callprojs.fallthrough_ioproj == NULL && _callprojs.catchall_ioproj == NULL &&\n+           _callprojs.catchall_memproj == NULL && _callprojs.catchall_catchproj == NULL, \"Unexpected projection from Lock\");\n@@ -2441,1 +2441,1 @@\n-  Node *slow_ctrl = _call_projects.fallthrough_proj->clone();\n+  Node *slow_ctrl = _callprojs.fallthrough_proj->clone();\n@@ -2443,2 +2443,2 @@\n-  _igvn.hash_delete(_call_projects.fallthrough_proj);\n-  _call_projects.fallthrough_proj->disconnect_inputs(C);\n+  _igvn.hash_delete(_callprojs.fallthrough_proj);\n+  _callprojs.fallthrough_proj->disconnect_inputs(C);\n@@ -2448,1 +2448,1 @@\n-  _igvn.replace_node(_call_projects.fallthrough_proj, region);\n+  _igvn.replace_node(_callprojs.fallthrough_proj, region);\n@@ -2454,1 +2454,1 @@\n-  _igvn.replace_node(_call_projects.fallthrough_memproj, mem_phi);\n+  _igvn.replace_node(_callprojs.fallthrough_memproj, mem_phi);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":96,"deletions":96,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  CallProjections _call_projects;\n+  CallProjections _callprojs;\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -829,3 +829,3 @@\n-  _igvn.replace_node(_call_projects.fallthrough_memproj, out_mem);\n-  _igvn.replace_node(_call_projects.fallthrough_ioproj, *io);\n-  _igvn.replace_node(_call_projects.fallthrough_catchproj, *ctrl);\n+  _igvn.replace_node(_callprojs.fallthrough_memproj, out_mem);\n+  _igvn.replace_node(_callprojs.fallthrough_ioproj, *io);\n+  _igvn.replace_node(_callprojs.fallthrough_catchproj, *ctrl);\n@@ -1077,2 +1077,2 @@\n-  call->extract_projections(&_call_projects, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n-  *ctrl = _call_projects.fallthrough_catchproj->clone();\n+  call->extract_projections(&_callprojs, false\/*separate_io_proj*\/, false\/*do_asserts*\/);\n+  *ctrl = _callprojs.fallthrough_catchproj->clone();\n@@ -1081,1 +1081,1 @@\n-  Node* m = _call_projects.fallthrough_memproj->clone();\n+  Node* m = _callprojs.fallthrough_memproj->clone();\n@@ -1094,1 +1094,1 @@\n-  *io = _call_projects.fallthrough_ioproj->clone();\n+  *io = _callprojs.fallthrough_ioproj->clone();\n@@ -1329,3 +1329,3 @@\n-    _igvn.replace_node(_call_projects.fallthrough_memproj, merge_mem);\n-    _igvn.replace_node(_call_projects.fallthrough_ioproj, io);\n-    _igvn.replace_node(_call_projects.fallthrough_catchproj, ctrl);\n+    _igvn.replace_node(_callprojs.fallthrough_memproj, merge_mem);\n+    _igvn.replace_node(_callprojs.fallthrough_ioproj, io);\n+    _igvn.replace_node(_callprojs.fallthrough_catchproj, ctrl);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}