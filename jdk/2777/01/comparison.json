{"files":[{"patch":"@@ -203,0 +203,1 @@\n+macro(MachNullCheck)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -773,1 +773,18 @@\n-        assert(store->find_edge(load) != -1, \"missing precedence edge\");\n+#ifdef ASSERT\n+        \/\/ We expect an anti-dependence edge from 'load' to 'store', except when\n+        \/\/ implicit_null_check() has hoisted 'store' above its early block to\n+        \/\/ perform an implicit null check, and 'load' is placed in the null\n+        \/\/ block. In this case it is safe to ignore the anti-dependence, as the\n+        \/\/ null block is only reached if 'store' tries to write to null.\n+        Block* store_null_block = NULL;\n+        Node* store_null_check = store->find_out_with(Op_MachNullCheck);\n+        if (store_null_check != NULL) {\n+          Node* if_true = store_null_check->find_out_with(Op_IfTrue);\n+          assert(if_true != NULL, \"null check without null projection\");\n+          Node* null_block_region = if_true->find_out_with(Op_Region);\n+          assert(null_block_region != NULL, \"null check without null region\");\n+          store_null_block = get_block_for_node(null_block_region);\n+        }\n+#endif\n+        assert(LCA == store_null_block || store->find_edge(load) != -1,\n+               \"missing precedence edge\");\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -702,0 +702,1 @@\n+  virtual int Opcode() const;\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.uncommontrap;\n+\n+\/**\n+ * @test\n+ * @bug 8261730\n+ * @summary Test that no anti-dependence violation is reported between a store\n+ *          used as an implicit null check and a load placed in the null block.\n+ * @run main\/othervm -XX:-BackgroundCompilation\n+ *      compiler.uncommontrap.TestNullCheckAntiDependence\n+ *\/\n+\n+public class TestNullCheckAntiDependence {\n+\n+    private static class MyInteger {\n+        int val;\n+    }\n+\n+    private static MyInteger foo = new MyInteger();\n+    private static MyInteger bar = new MyInteger();\n+\n+    static void setFooToZero() {\n+        for (int i = 0; i < 1; i++) {\n+            \/\/ This load is placed in the null block.\n+            foo.val = -bar.val;\n+            for (int k = 0; k < 10; k++) {\n+                \/\/ This store is hoisted and used as an implicit null check.\n+                foo.val = 0;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            setFooToZero();\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/TestNullCheckAntiDependence.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}