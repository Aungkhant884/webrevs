{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -314,0 +314,7 @@\n+                if (codeLength >= 65536) {\n+                    throw new IllegalArgumentException(String.format(\n+                            \"Code is too large %d in %s%s\",\n+                            codeLength,\n+                            methodInfo.methodName().stringValue(),\n+                            methodInfo.methodTypeSymbol().displayDescriptor()));\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,0 +197,3 @@\n+        if (entryCount() >= 65536) {\n+            throw new IllegalArgumentException(String.format(\"Constant pool is too large %d\", entryCount()));\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-static final char JVM_SIGNATURE_SPECIAL = '<',\n+    static final char JVM_SIGNATURE_SPECIAL = '<',\n@@ -105,0 +105,1 @@\n+    static final int MAX_CODE_SIZE = 65535;\n@@ -302,0 +303,3 @@\n+        if (code_length < 1 || code_length > MAX_CODE_SIZE) {\n+            verifyError(String.format(\"Invalid method Code length %d\", code_length));\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/VerifierImpl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.constant.MethodTypeDesc;\n@@ -35,0 +36,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,0 +49,19 @@\n+    @Test\n+    void testCPOverLimit() {\n+        assertThrows(IllegalArgumentException.class, () -> Classfile.build(ClassDesc.of(\"BigClass\"), cb -> {\n+            for (int i = 1; i < 66000; i++) {\n+                cb.withField(\"field\" + i, ConstantDescs.CD_int, fb -> {});\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    void testCodeOverLimit() {\n+        assertThrows(IllegalArgumentException.class, () -> Classfile.build(ClassDesc.of(\"BigClass\"), cb -> cb.withMethodBody(\n+                \"bigMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, cob -> {\n+                    for (int i = 0; i < 65535; i++) {\n+                        cob.nop();\n+                    }\n+                    cob.return_();\n+                })));\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}