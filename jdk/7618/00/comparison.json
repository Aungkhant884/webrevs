{"files":[{"patch":"@@ -848,27 +848,0 @@\n-class PCReferenceProcessor: public ReferenceProcessor {\n-public:\n-  PCReferenceProcessor(\n-    BoolObjectClosure* is_subject_to_discovery,\n-    BoolObjectClosure* is_alive_non_header) :\n-      ReferenceProcessor(is_subject_to_discovery,\n-                         ParallelGCThreads,   \/\/ mt processing degree\n-                         ParallelGCThreads,   \/\/ mt discovery degree\n-                         false,               \/\/ concurrent_discovery\n-                         is_alive_non_header) {}\n-\n-  template<typename T> bool discover(oop obj, ReferenceType type) {\n-    T* referent_addr = (T*) java_lang_ref_Reference::referent_addr_raw(obj);\n-    T heap_oop = RawAccess<>::oop_load(referent_addr);\n-    oop referent = CompressedOops::decode_not_null(heap_oop);\n-    return PSParallelCompact::mark_bitmap()->is_unmarked(referent)\n-        && ReferenceProcessor::discover_reference(obj, type);\n-  }\n-  virtual bool discover_reference(oop obj, ReferenceType type) {\n-    if (UseCompressedOops) {\n-      return discover<narrowOop>(obj, type);\n-    } else {\n-      return discover<oop>(obj, type);\n-    }\n-  }\n-};\n-\n@@ -879,2 +852,5 @@\n-    new PCReferenceProcessor(&_span_based_discoverer,\n-                             &_is_alive_closure); \/\/ non-header is alive closure\n+    new ReferenceProcessor(&_span_based_discoverer,\n+                           ParallelGCThreads,   \/\/ mt processing degree\n+                           ParallelGCThreads,   \/\/ mt discovery degree\n+                           false,               \/\/ concurrent_discovery\n+                           &_is_alive_closure); \/\/ non-header is alive closure\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":5,"deletions":29,"binary":false,"changes":34,"status":"modified"}]}