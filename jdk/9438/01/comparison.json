{"files":[{"patch":"@@ -1263,1 +1263,1 @@\n-                    DCTree term = ch == '\"' ? quotedString() : inlineWord();\n+                    DCText term = ch == '\"' ? quotedString() : inlineWord();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/DocCommentParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,0 @@\n-import static jdk.javadoc.internal.doclets.toolkit.util.CommentHelper.SPACER;\n@@ -980,1 +979,0 @@\n-        String seeText = utils.normalizeNewlines(ch.getText(see)).toString();\n@@ -1000,2 +998,3 @@\n-                switch (ref.get(0).getKind()) {\n-                    case TEXT -> {\n+                DocTree ref0 = ref.get(0);\n+                switch (ref0.getKind()) {\n+                    case TEXT, START_ELEMENT -> {\n@@ -1003,3 +1002,0 @@\n-                        return Text.of(seeText);\n-                    }\n-                    case START_ELEMENT -> {\n@@ -1007,1 +1003,1 @@\n-                        return RawHtml.of(replaceDocRootDir(removeTrailingSlash(seeText)));\n+                        return commentTagsToContent(element, ref, false, false);\n@@ -1011,1 +1007,1 @@\n-                        refText = ref.get(0).toString();\n+                        refText = ref0.toString();\n@@ -1015,1 +1011,2 @@\n-                        return invalidTagOutput(resources.getText(\"doclet.tag.invalid_input\", seeText),\n+                        return invalidTagOutput(resources.getText(\"doclet.tag.invalid_input\",\n+                                        ref0.toString()),\n@@ -1019,1 +1016,1 @@\n-                        throw new IllegalStateException(ref.get(0).getKind().toString());\n+                        throw new IllegalStateException(ref0.getKind().toString());\n@@ -1110,1 +1107,1 @@\n-            if (ch.getText(see).trim().startsWith(\"#\") &&\n+            if (refText.trim().startsWith(\"#\") &&\n@@ -1479,0 +1476,20 @@\n+    {\n+        return commentTagsToContent(element, trees, context, true);\n+    }\n+\n+    \/**\n+     * Converts inline tags and text to content, expanding the\n+     * inline tags along the way.  Called wherever text can contain\n+     * an inline tag, such as in comments or in free-form text arguments\n+     * to block tags.\n+     *\n+     * @param element   specific element where comment resides\n+     * @param trees     list of text trees and inline tag trees (often alternating)\n+     * @param context   the enclosing context for the trees\n+     *\n+     * @return a Content object\n+     *\/\n+    public Content commentTagsToContent(Element element,\n+                                        List<? extends DocTree> trees,\n+                                        TagletWriterImpl.Context context,\n+                                        boolean redirectRelativeLinks)\n@@ -1503,1 +1520,1 @@\n-                        && ch.getText(tag).isBlank())\n+                        && ((tag instanceof TextTree tt) && tt.getBody().isBlank()))\n@@ -1569,1 +1586,1 @@\n-                            if (first && isHRef) {\n+                            if (first && isHRef && redirectRelativeLinks) {\n@@ -2465,1 +2482,0 @@\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import com.sun.source.doctree.SerialFieldTree;\n@@ -40,1 +41,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;\n@@ -133,3 +133,2 @@\n-    public void addMemberDescription(VariableElement field, DocTree serialFieldTag, Content content) {\n-        CommentHelper ch = utils.getCommentHelper(field);\n-        List<? extends DocTree> description = ch.getDescription(serialFieldTag);\n+    public void addMemberDescription(VariableElement field, SerialFieldTree serialFieldTag, Content content) {\n+        List<? extends DocTree> description = serialFieldTag.getDescription();\n@@ -137,1 +136,4 @@\n-            Content serialFieldContent = RawHtml.of(ch.getText(description)); \/\/ should interpret tags\n+            Content serialFieldContent = writer.commentTagsToContent(field,\n+                    description,\n+                    new TagletWriterImpl.Context(false, false),\n+                    false);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlSerialFieldWriter.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -199,3 +199,2 @@\n-    protected Content codeTagOutput(Element element, DocTree tag) {\n-        CommentHelper ch = utils.getCommentHelper(element);\n-        return HtmlTree.CODE(Text.of(utils.normalizeNewlines(ch.getText(tag))));\n+    protected Content codeTagOutput(Element element, LiteralTree tag) {\n+        return HtmlTree.CODE(Text.of(utils.normalizeNewlines(tag.getBody().getBody())));\n@@ -208,1 +207,2 @@\n-        String tagText = ch.getText(tag.getSearchTerm());\n+        DocTree searchTerm = tag.getSearchTerm();\n+        String tagText = (searchTerm instanceof TextTree tt) ? tt.getBody() : \"\";\n@@ -275,3 +275,1 @@\n-        CommentHelper ch = utils.getCommentHelper(element);\n-        Content result = Text.of(utils.normalizeNewlines(ch.getText(tag)));\n-        return result;\n+        return Text.of(utils.normalizeNewlines(tag.getBody().getBody()));\n@@ -349,2 +347,1 @@\n-        boolean hasLongLabels = links.stream()\n-                .anyMatch(c -> c.charCount() > SEE_TAG_MAX_INLINE_LENGTH || c.toString().contains(\",\"));\n+        boolean hasLongLabels = links.stream().anyMatch(this::isLongOrHasComma);\n@@ -361,0 +358,8 @@\n+    private boolean isLongOrHasComma(Content c) {\n+        String s = c.toString()\n+                .replaceAll(\"<.*?>\", \"\")            \/\/ ignore HTML\n+                .replaceAll(\"\\\\&[a-z0-9]+;?\", \" \")  \/\/ entities count as a single character\n+                .replaceAll(\"\\\\R\", \"\\n\");           \/\/ normalize newlines\n+        return s.length() > SEE_TAG_MAX_INLINE_LENGTH || s.contains(\",\");\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import com.sun.source.doctree.DocTree;\n+import com.sun.source.doctree.SerialFieldTree;\n@@ -203,1 +203,1 @@\n-        void addMemberDescription(VariableElement field, DocTree serialFieldTag, Content content);\n+        void addMemberDescription(VariableElement field, SerialFieldTree serialFieldTag, Content content);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/SerializedFormWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -555,1 +555,2 @@\n-            String serialtext = Utils.toLowerCase(ch.getText(serial.get(0)));\n+            \/\/ look for `@serial include|exclude`\n+            String serialtext = Utils.toLowerCase(serial.get(0).toString());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/SerializedFormBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.source.doctree.LiteralTree;\n@@ -56,1 +57,1 @@\n-        return writer.codeTagOutput(element, tag);\n+        return writer.codeTagOutput(element, (LiteralTree) tag);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/CodeTaglet.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    protected abstract Content codeTagOutput(Element element, DocTree tag);\n+    protected abstract Content codeTagOutput(Element element, LiteralTree tag);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-                    <li><span class=\"invalid-tag\">invalid input: '&lt;a href=\"'<\/span><\/li>\n+                    <li><span class=\"invalid-tag\">invalid input: '&lt;'<\/span><\/li>\n@@ -151,0 +151,10 @@\n+    }\n+\n+    @Test\n+    public void testSeeLongCommas(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+                \/** Comment. *\/\n+                public class C {\n+                    private C() { }\n@@ -152,0 +162,74 @@\n+                    \/**\n+                     * Comment.\n+                     * @see #noArgs() no args\n+                     * @see #oneArg(int) one arg\n+                     * @see #twoArgs(int, int) two args\n+                     *\/\n+                    public void noComma() { }\n+\n+                    \/**\n+                     * Comment.\n+                     * @see #noArgs() no args\n+                     * @see #oneArg(int) one arg\n+                     * @see #twoArgs(int, int) two args with a comma , in the description\n+                     *\/\n+                    public void commaInDescription() { }\n+\n+                    \/**\n+                     * Comment.\n+                     * @see #noArgs()\n+                     * @see #oneArg(int)\n+                     * @see #twoArgs(int, int)\n+                     *\/\n+                    public void commaInDefaultDescription() { }\n+\n+                    \/**\n+                     * No arg method.\n+                     *\/\n+                    public void noArgs() { }\n+\n+                    \/**\n+                     * One arg method.\n+                     * @param a1 an arg\n+                     *\/\n+                    public void oneArg(int a1) { }\n+\n+                    \/**\n+                     * Two arg method.\n+                     * @param a1 an arg\n+                     * @param a2 an arg\n+                     *\/\n+                    public void twoArgs(int a1, int a2) { }\n+                }\n+                \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"--no-platform-links\",\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOrder(\"p\/C.html\",\n+                \"<section class=\\\"detail\\\" id=\\\"noComma()\\\">\",\n+                \"\"\"\n+                    <ul class=\"see-list\">\n+                    <li><a href=\"#noArgs()\"><code>no args<\/code><\/a><\/li>\n+                    <li><a href=\"#oneArg(int)\"><code>one arg<\/code><\/a><\/li>\n+                    <li><a href=\"#twoArgs(int,int)\"><code>two args<\/code><\/a><\/li>\n+                    <\/ul>\"\"\",\n+\n+                \"<section class=\\\"detail\\\" id=\\\"commaInDescription()\\\">\",\n+                \"\"\"\n+                    <ul class=\"see-list-long\">\n+                    <li><a href=\"#noArgs()\"><code>no args<\/code><\/a><\/li>\n+                    <li><a href=\"#oneArg(int)\"><code>one arg<\/code><\/a><\/li>\n+                    <li><a href=\"#twoArgs(int,int)\"><code>two args with a comma , in the description<\/code><\/a><\/li>\n+                    <\/ul>\"\"\",\n+\n+                \"<section class=\\\"detail\\\" id=\\\"commaInDefaultDescription()\\\">\",\n+                \"\"\"\n+                    <ul class=\"see-list-long\">\n+                    <li><a href=\"#noArgs()\"><code>noArgs()<\/code><\/a><\/li>\n+                    <li><a href=\"#oneArg(int)\"><code>oneArg(int)<\/code><\/a><\/li>\n+                    <li><a href=\"#twoArgs(int,int)\"><code>twoArgs(int, int)<\/code><\/a><\/li>\n+                    <\/ul>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSeeTag\/TestSeeTag.java","additions":85,"deletions":1,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288624\n+ * @summary Test at-serial with {at-link}\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build javadoc.tester.* toolbox.ToolBox\n+ * @run main TestSerialWithLink\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import toolbox.ToolBox;\n+\n+import javadoc.tester.JavadocTester;\n+\n+public class TestSerialWithLink extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestSerialWithLink tester = new TestSerialWithLink();\n+        tester.runTests();\n+    }\n+\n+    private final ToolBox tb;\n+\n+    TestSerialWithLink() {\n+        tb = new ToolBox();\n+    }\n+\n+    @Test\n+    public void testSerialWithLink(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        package p;\n+                        import java.io.Serializable;\n+                        import java.io.ObjectStreamField;\n+                        \/** Comment, *\/\n+                        public class C implements Serializable {\n+                            \/** Comment. *\/\n+                            C() { }\n+                            \/**\n+                             * The serial persistent fields for this class.\n+                             * @serialField item Item An {@link Item} to be serialized.\n+                             *\/\n+                            private static final ObjectStreamField[] serialPersistentFields =\n+                                { new ObjectStreamField(\"item\", Item.class) };\n+                            \/**\n+                             * An item that is described in serialPersistentFields.\n+                             *\/\n+                            private Item item;\n+\n+                            \/** A dummy item, not described in serialPersistentFields. *\/\n+                            private int dummy;\n+                        }\n+                        \"\"\", \"\"\"\n+                        package p;\n+                        import java.io.Serializable;\n+                        \/** Comment. *\/\n+                        public class Item implements Serializable {\n+                            \/**\n+                             * Comment.\n+                             *\/\n+                            Item() { }\n+                        }\n+                        \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"api\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"--no-platform-links\",\n+                \"p\");\n+\n+        checkOutput(\"serialized-form.html\", true,\n+                \"\"\"\n+                    <section class=\"detail\">\n+                    <h4>Serialized Fields<\/h4>\n+                    <ul class=\"block-list\">\n+                    <li class=\"block-list\">\n+                    <h5>item<\/h5>\n+                    <pre><a href=\"p\/Item.html\" title=\"class in p\">Item<\/a> item<\/pre>\n+                    <div class=\"block\">An <a href=\"p\/Item.html\" title=\"class in p\"><code>Item<\/code><\/a> to be serialized.<\/div>\n+                    <\/li>\n+                    <\/ul>\n+                    <\/section>\"\"\");\n+\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSerialWithLink\/TestSerialWithLink.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}