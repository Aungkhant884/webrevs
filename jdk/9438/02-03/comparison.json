{"files":[{"patch":"@@ -173,156 +173,0 @@\n-    public String getText(List<? extends DocTree> list) {\n-        StringBuilder sb = new StringBuilder();\n-        for (DocTree dt : list) {\n-            sb.append(getText0(dt));\n-        }\n-        return sb.toString();\n-    }\n-\n-    public String getText(DocTree dt) {\n-        return getText0(dt).toString();\n-    }\n-\n-    private StringBuilder getText0(DocTree dt) {\n-        final StringBuilder sb = new StringBuilder();\n-        new SimpleDocTreeVisitor<Void, Void>() {\n-            @Override\n-            public Void visitAttribute(AttributeTree node, Void p) {\n-                sb.append(SPACER).append(node.getName().toString());\n-                if (node.getValueKind() == ValueKind.EMPTY) {\n-                    return null;\n-                }\n-\n-                sb.append(\"=\");\n-                String quote;\n-                switch (node.getValueKind()) {\n-                    case DOUBLE:\n-                        quote = \"\\\"\";\n-                        break;\n-                    case SINGLE:\n-                        quote = \"'\";\n-                        break;\n-                    default:\n-                        quote = \"\";\n-                        break;\n-                }\n-                sb.append(quote);\n-                node.getValue().forEach(dt -> dt.accept(this, null));\n-                sb.append(quote);\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitEndElement(EndElementTree node, Void p) {\n-                sb.append(\"<\/\")\n-                        .append(node.getName().toString())\n-                        .append(\">\");\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitEntity(EntityTree node, Void p) {\n-                sb.append(node.toString());\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitLink(LinkTree node, Void p) {\n-                if (node.getReference() == null) {\n-                    return null;\n-                }\n-\n-                node.getReference().accept(this, null);\n-                node.getLabel().forEach(dt -> dt.accept(this, null));\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitLiteral(LiteralTree node, Void p) {\n-                if (node.getKind() == CODE) {\n-                    sb.append(\"<\").append(node.getKind().tagName).append(\">\");\n-                }\n-                sb.append(node.getBody().toString());\n-                if (node.getKind() == CODE) {\n-                    sb.append(\"<\/\").append(node.getKind().tagName).append(\">\");\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitReference(ReferenceTree node, Void p) {\n-                sb.append(node.getSignature());\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitSee(SeeTree node, Void p) {\n-                node.getReference().forEach(dt -> dt.accept(this, null));\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitSerial(SerialTree node, Void p) {\n-                node.getDescription().forEach(dt -> dt.accept(this, null));\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitStartElement(StartElementTree node, Void p) {\n-                sb.append(\"<\");\n-                sb.append(node.getName().toString());\n-                node.getAttributes().forEach(dt -> dt.accept(this, null));\n-                sb.append(node.isSelfClosing() ? \"\/>\" : \">\");\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitText(TextTree node, Void p) {\n-                sb.append(node.getBody());\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitUnknownBlockTag(UnknownBlockTagTree node, Void p) {\n-                node.getContent().forEach(dt -> dt.accept(this, null));\n-                return null;\n-            }\n-\n-            @Override\n-            public Void visitValue(ValueTree node, Void p) {\n-                return node.getReference().accept(this, null);\n-            }\n-\n-            @Override\n-            protected Void defaultAction(DocTree node, Void p) {\n-                sb.append(node.toString());\n-                return null;\n-            }\n-        }.visit(dt, null);\n-        return sb;\n-    }\n-\n-    public String getLabel(DocTree dtree) {\n-        return new SimpleDocTreeVisitor<String, Void>() {\n-            @Override\n-            public String visitLink(LinkTree node, Void p) {\n-                return node.getLabel().stream()\n-                        .map(dt -> getText(dt))\n-                        .collect(Collectors.joining());\n-            }\n-\n-            @Override\n-            public String visitSee(SeeTree node, Void p) {\n-                Utils utils = configuration.utils;\n-                return node.getReference().stream()\n-                        .filter(dt -> dt.getKind() == DocTree.Kind.TEXT)\n-                        .map(dt -> ((TextTree) dt).getBody())\n-                        .collect(Collectors.joining());\n-            }\n-\n-            @Override\n-            protected String defaultAction(DocTree node, Void p) {\n-                return \"\";\n-            }\n-        }.visit(dtree, null);\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"modified"}]}