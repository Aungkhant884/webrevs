{"files":[{"patch":"@@ -140,0 +140,2 @@\n+    const tstring runtimeBinPath = FileUtils::mkpath()\n+            << appImageRoot << _T(\"runtime\") << _T(\"bin\");\n@@ -149,0 +151,4 @@\n+    \/\/ zip.dll may be loaded by java without full path\n+    \/\/ make sure it will look in runtime\/bin\n+    SetDllDirectory(runtimeBinPath.c_str());\n+\n","filename":"src\/jdk.incubator.jpackage\/windows\/native\/applauncher\/WinLauncher.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+        removeEnv = false;\n@@ -86,0 +87,5 @@\n+    public Executor setRemoveEnv(boolean value) {\n+        removeEnv = value;\n+        return this;\n+    }\n+\n@@ -292,0 +298,5 @@\n+        if (removeEnv) {\n+            \/\/ run this with cleared Environment\n+            TKit.trace(\"Clearing process environment\");\n+            builder.environment().clear();\n+        }\n@@ -417,0 +428,1 @@\n+    private boolean removeEnv;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -276,1 +276,2 @@\n-            av.executeAndVerifyOutput(args);\n+            \/\/ when running app launchers, clear users environment\n+            av.executeAndVerifyOutput(true, args);\n@@ -354,1 +355,5 @@\n-            getExecutor(args).dumpOutput().execute();\n+            executeAndVerifyOutput(false, args);\n+        }\n+\n+        public void executeAndVerifyOutput(boolean removeEnv, String... args) {\n+            getExecutor(args).dumpOutput().setRemoveEnv(removeEnv).execute();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.Functional;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.Executor;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --runtime-image\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.incubator.jpackage\/jdk.incubator.jpackage.internal\n+ * @compile RuntimeImageTest.java\n+ * @run main\/othervm\/timeout=1400 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=RuntimeImageTest\n+ *\/\n+\n+public class RuntimeImageTest {\n+\n+    @Test\n+    @Parameter(\"0\")\n+    @Parameter(\"1\")\n+    @Parameter(\"2\")\n+    public static void test(String compression) throws Exception {\n+        final Path workDir = TKit.createTempDirectory(\"runtime\").resolve(\"data\");\n+        final Path jlinkOutputDir = workDir.resolve(\"temp.runtime\");\n+        Files.createDirectories(jlinkOutputDir.getParent());\n+\n+        new Executor()\n+        .setToolProvider(JavaTool.JLINK)\n+        .dumpOutput()\n+        .addArguments(\n+                \"--output\", jlinkOutputDir.toString(),\n+                \"--compress=\" + compression,\n+                \"--add-modules\", \"ALL-MODULE-PATH\",\n+                \"--strip-debug\",\n+                \"--no-header-files\",\n+                \"--no-man-pages\",\n+                \"--strip-native-commands\")\n+        .execute();\n+\n+        JPackageCommand cmd = JPackageCommand.helloAppImage()\n+            .setArgumentValue(\"--runtime-image\", jlinkOutputDir.toString());\n+\n+        cmd.executeAndAssertHelloAppImageCreated();\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}