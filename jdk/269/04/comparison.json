{"files":[{"patch":"@@ -108,1 +108,1 @@\n-    res = deflateSetDictionary(jlong_to_ptr(addr), buf, len);\n+    res = deflateSetDictionary(jlong_to_ptr(addr), buf + off, len);\n","filename":"src\/java.base\/share\/native\/libzip\/Deflater.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,252 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertThrows;\n+\n+\/**\n+ * @test\n+ * @bug 8252739\n+ * @summary Verify Deflater.setDictionary(dictionary, offset, length) uses the offset\n+ * @run testng\/othervm DeflaterDictionaryTests\n+ *\/\n+public class DeflaterDictionaryTests {\n+    \/\/ Output buffer size\n+    private static final int RESULT_SIZE = 1024;\n+    \/\/ Data to compress\n+    private static final String SRC_DATA = \"Welcome to the US Open;\".repeat(6);\n+    \/\/ Dictionary to be used\n+    private static final String DICTIONARY = \"US Open\";\n+    private static final int DICTIONARY_OFFSET = 1;\n+    private static final int DICTIONARY_LENGTH = 3;\n+\n+    \/**\n+     * DataProvider with offsets which should be valid for setDictionary\n+     *\n+     * @return valid offset values\n+     *\/\n+    @DataProvider(name = \"validDictionaryOffsets\")\n+    protected Object[][] validDictionaryOffsets() {\n+        return new Object[][]{\n+                {0},\n+                {DICTIONARY_OFFSET},\n+                {DICTIONARY_LENGTH}\n+        };\n+    }\n+\n+    \/**\n+     * DataProvider with  invalid offsets for setDictionary\n+     *\n+     * @return invalid offset values\n+     *\/\n+    @DataProvider(name = \"invalidDictionaryOffsets\")\n+    protected Object[][] invalidDictionaryOffsets() {\n+        return new Object[][]{\n+                {-1},\n+                {DICTIONARY_LENGTH + 2},\n+                {DICTIONARY.length()}\n+        };\n+    }\n+\n+    \/**\n+     * Validate that an offset can be used with Deflater::setDictionary\n+     *\n+     * @param dictionary_offset offset value to be used\n+     * @throws Exception if an error occurs\n+     *\/\n+    @Test(dataProvider = \"validDictionaryOffsets\")\n+    public void testByteArray(int dictionary_offset) throws Exception {\n+        byte[] input = SRC_DATA.getBytes(UTF_8);\n+        byte[] output = new byte[RESULT_SIZE];\n+        Deflater deflater = new Deflater();\n+        Inflater inflater = new Inflater();\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(DICTIONARY.getBytes(UTF_8), dictionary_offset, DICTIONARY_LENGTH);\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(DICTIONARY.getBytes(UTF_8), dictionary_offset, DICTIONARY_LENGTH);\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n+        }\n+    }\n+\n+    \/**\n+     * Validate that a ByteBuffer can be used with Deflater::setDictionary\n+     *\n+     * @throws Exception if an error occurs\n+     *\/\n+    @Test\n+    public void testHeapByteBuffer() throws Exception {\n+        byte[] input = SRC_DATA.getBytes(UTF_8);\n+        byte[] output = new byte[RESULT_SIZE];\n+        ByteBuffer dictDef = ByteBuffer.wrap(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+        ByteBuffer dictInf = ByteBuffer.wrap(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+        Deflater deflater = new Deflater();\n+        Inflater inflater = new Inflater();\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(dictDef);\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(dictInf);\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n+        }\n+    }\n+\n+    \/**\n+     * Validate that ByteBuffer::allocateDirect can be used with Deflater::setDictionary\n+     *\n+     * @throws Exception if an error occurs\n+     *\/\n+    @Test\n+    public void testByteBufferDirect() throws Exception {\n+        byte[] input = SRC_DATA.getBytes(UTF_8);\n+        byte[] output = new byte[RESULT_SIZE];\n+        ByteBuffer dictDef = ByteBuffer.allocateDirect(DICTIONARY.length());\n+        ByteBuffer dictInf = ByteBuffer.allocateDirect(DICTIONARY.length());\n+        dictDef.put(DICTIONARY.getBytes(UTF_8));\n+        dictInf.put(DICTIONARY.getBytes(UTF_8));\n+        dictDef.position(DICTIONARY_OFFSET);\n+        dictDef.limit(DICTIONARY_LENGTH);\n+        dictInf.position(DICTIONARY_OFFSET);\n+        dictInf.limit(DICTIONARY_LENGTH);\n+        Deflater deflater = new Deflater();\n+        Inflater inflater = new Inflater();\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(dictDef.slice());\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(dictInf.slice());\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n+        }\n+    }\n+\n+    \/**\n+     * Validate that an invalid offset used with setDictionary will\n+     * throw an Exception\n+     *\n+     * @param dictionary_offset offset value to be used\n+     *\/\n+    @Test(dataProvider = \"invalidDictionaryOffsets\")\n+    public void testInvalidOffsets(int dictionary_offset) {\n+        byte[] dictionary = DICTIONARY.getBytes(UTF_8);\n+\n+        Deflater deflater = new Deflater();\n+        Inflater inflater = new Inflater();\n+        try {\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                    deflater.setDictionary(dictionary, dictionary_offset, DICTIONARY_LENGTH));\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                    inflater.setDictionary(dictionary, dictionary_offset, DICTIONARY_LENGTH));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterDictionaryTests.java","additions":252,"deletions":0,"binary":false,"changes":252,"status":"added"}]}