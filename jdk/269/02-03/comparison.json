{"files":[{"patch":"@@ -44,6 +44,1 @@\n-    private static final String SRC_DATA = \"Welcome to US Open;\"\n-            +\"Welcome to US Open;\"\n-            +\"Welcome to US Open;\"\n-            +\"Welcome to US Open;\"\n-            +\"Welcome to US Open;\"\n-            +\"Welcome to US Open;\";\n+    private static final String SRC_DATA = \"Welcome to the US Open;\".repeat(6);\n@@ -55,1 +50,0 @@\n-\n@@ -58,0 +52,1 @@\n+     *\n@@ -61,1 +56,1 @@\n-    public void ByteArrayTest() throws Exception {\n+    public void testByteArray() throws Exception {\n@@ -64,1 +59,0 @@\n-        \/\/ Compress the bytes\n@@ -66,10 +60,0 @@\n-        deflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n-        deflater.setInput(input);\n-        deflater.finish();\n-        int compressedDataLength = deflater.deflate(output,0 , output.length, Deflater.NO_FLUSH);\n-        System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n-                        \" compressed length: %s%n\", deflater.getTotalOut(),\n-                deflater.getTotalOut(), compressedDataLength);\n-        deflater.finished();\n-\n-        \/\/ Decompress the bytes\n@@ -77,9 +61,32 @@\n-        inflater.setInput(output, 0, compressedDataLength);\n-        byte[] result = new byte[RESULT_SIZE];\n-        int resultLength = inflater.inflate(result);\n-        if(inflater.needsDictionary()) {\n-            System.out.println(\"Specifying Dictionary\");\n-            inflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n-            resultLength = inflater.inflate(result);\n-        } else {\n-            System.out.println(\"Did not need to use a Dictionary\");\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n@@ -87,10 +94,0 @@\n-        inflater.finished();\n-        System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n-                inflater.getAdler(), resultLength);\n-\n-        Assert.assertEquals(SRC_DATA.length(), resultLength);\n-        Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n-\n-        \/\/ Release Resources\n-        deflater.end();\n-        inflater.end();\n@@ -101,0 +98,1 @@\n+     *\n@@ -104,1 +102,1 @@\n-    public void testByteBufferWrap() throws Exception {\n+    public void testHeapByteBuffer() throws Exception {\n@@ -107,1 +105,0 @@\n-        \/\/ Compress the bytes\n@@ -111,10 +108,0 @@\n-        deflater.setDictionary(dictDef);\n-        deflater.setInput(input);\n-        deflater.finish();\n-        int compressedDataLength = deflater.deflate(output,0 , output.length, Deflater.NO_FLUSH);\n-        System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n-                        \" compressed length: %s%n\", deflater.getTotalOut(),\n-                deflater.getTotalOut(), compressedDataLength);\n-        deflater.finished();\n-\n-        \/\/ Decompress the bytes\n@@ -122,9 +109,32 @@\n-        inflater.setInput(output, 0, compressedDataLength);\n-        byte[] result = new byte[RESULT_SIZE];\n-        int resultLength = inflater.inflate(result);\n-        if(inflater.needsDictionary()) {\n-            System.out.println(\"Specifying Dictionary\");\n-            inflater.setDictionary(dictInf);\n-            resultLength = inflater.inflate(result);\n-        } else {\n-            System.out.println(\"Did not need to use a Dictionary\");\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(dictDef);\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(dictInf);\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n@@ -132,10 +142,0 @@\n-        inflater.finished();\n-        System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n-                inflater.getAdler(), resultLength);\n-\n-        Assert.assertEquals(SRC_DATA.length(), resultLength);\n-        Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n-\n-        \/\/ Release Resources\n-        deflater.end();\n-        inflater.end();\n@@ -146,0 +146,1 @@\n+     *\n@@ -152,1 +153,0 @@\n-        \/\/ Compress the bytes\n@@ -162,10 +162,0 @@\n-        deflater.setDictionary(dictDef.slice());\n-        deflater.setInput(input);\n-        deflater.finish();\n-        int compressedDataLength = deflater.deflate(output,0 , output.length, Deflater.NO_FLUSH);\n-        System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n-                        \" compressed length: %s%n\", deflater.getTotalOut(),\n-                deflater.getTotalOut(), compressedDataLength);\n-        deflater.finished();\n-\n-        \/\/ Decompress the bytes\n@@ -173,9 +163,32 @@\n-        inflater.setInput(output, 0, compressedDataLength);\n-        byte[] result = new byte[RESULT_SIZE];\n-        int resultLength = inflater.inflate(result);\n-        if(inflater.needsDictionary()){\n-            System.out.println(\"Specifying Dictionary\");\n-            inflater.setDictionary(dictInf.slice());\n-            resultLength = inflater.inflate(result);\n-        } else {\n-            System.out.println(\"Did not need to use a Dictionary\");\n+        try {\n+            \/\/ Compress the bytes\n+            deflater.setDictionary(dictDef.slice());\n+            deflater.setInput(input);\n+            deflater.finish();\n+            int compressedDataLength = deflater.deflate(output, 0, output.length, Deflater.NO_FLUSH);\n+            System.out.printf(\"Deflater::getTotalOut:%s, Deflater::getAdler: %s,\" +\n+                            \" compressed length: %s%n\", deflater.getTotalOut(),\n+                    deflater.getTotalOut(), compressedDataLength);\n+            deflater.finished();\n+\n+            \/\/ Decompress the bytes\n+            inflater.setInput(output, 0, compressedDataLength);\n+            byte[] result = new byte[RESULT_SIZE];\n+            int resultLength = inflater.inflate(result);\n+            if (inflater.needsDictionary()) {\n+                System.out.println(\"Specifying Dictionary\");\n+                inflater.setDictionary(dictInf.slice());\n+                resultLength = inflater.inflate(result);\n+            } else {\n+                System.out.println(\"Did not need to use a Dictionary\");\n+            }\n+            inflater.finished();\n+            System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n+                    inflater.getAdler(), resultLength);\n+\n+            Assert.assertEquals(SRC_DATA.length(), resultLength);\n+            Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n@@ -183,10 +196,0 @@\n-        inflater.finished();\n-        System.out.printf(\"Inflater::getAdler:%s, length: %s%n\",\n-                inflater.getAdler(), resultLength);\n-\n-        Assert.assertEquals(SRC_DATA.length(), resultLength);\n-        Assert.assertEquals(input, Arrays.copyOf(result, resultLength));\n-\n-        \/\/ Release Resources\n-        deflater.end();\n-        inflater.end();\n@@ -194,1 +197,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterDictionaryTests.java","additions":103,"deletions":100,"binary":false,"changes":203,"status":"modified"}]}