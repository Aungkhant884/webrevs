{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -33,0 +34,1 @@\n+import static org.testng.Assert.assertThrows;\n@@ -50,0 +52,28 @@\n+    \/**\n+     * DataProvider with offsets which should be valid for setDictionary\n+     *\n+     * @return valid offset values\n+     *\/\n+    @DataProvider(name = \"validDictionaryOffsets\")\n+    protected Object[][] validDictionaryOffsets() {\n+        return new Object[][]{\n+                {0},\n+                {DICTIONARY_OFFSET},\n+                {DICTIONARY_LENGTH}\n+        };\n+    }\n+\n+    \/**\n+     * DataProvider with  invalid offsets for setDictionary\n+     *\n+     * @return invalid offset values\n+     *\/\n+    @DataProvider(name = \"invalidDictionaryOffsets\")\n+    protected Object[][] invalidDictionaryOffsets() {\n+        return new Object[][]{\n+                {-1},\n+                {DICTIONARY_LENGTH + 2},\n+                {DICTIONARY.length()}\n+        };\n+    }\n+\n@@ -53,0 +83,1 @@\n+     * @param dictionary_offset offset value to be used\n@@ -55,2 +86,2 @@\n-    @Test\n-    public void testByteArray() throws Exception {\n+    @Test(dataProvider = \"validDictionaryOffsets\")\n+    public void testByteArray(int dictionary_offset) throws Exception {\n@@ -63,1 +94,1 @@\n-            deflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+            deflater.setDictionary(DICTIONARY.getBytes(UTF_8), dictionary_offset, DICTIONARY_LENGTH);\n@@ -78,1 +109,1 @@\n-                inflater.setDictionary(DICTIONARY.getBytes(UTF_8), DICTIONARY_OFFSET, DICTIONARY_LENGTH);\n+                inflater.setDictionary(DICTIONARY.getBytes(UTF_8), dictionary_offset, DICTIONARY_LENGTH);\n@@ -197,0 +228,24 @@\n+\n+    \/**\n+     * Validate that an invalid offset used with setDictionary will\n+     * throw an Exception\n+     *\n+     * @param dictionary_offset offset value to be used\n+     *\/\n+    @Test(dataProvider = \"invalidDictionaryOffsets\")\n+    public void testInvalidOffsets(int dictionary_offset) {\n+        byte[] dictionary = DICTIONARY.getBytes(UTF_8);\n+\n+        Deflater deflater = new Deflater();\n+        Inflater inflater = new Inflater();\n+        try {\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                    deflater.setDictionary(dictionary, dictionary_offset, DICTIONARY_LENGTH));\n+            assertThrows(ArrayIndexOutOfBoundsException.class, () ->\n+                    inflater.setDictionary(dictionary, dictionary_offset, DICTIONARY_LENGTH));\n+        } finally {\n+            \/\/ Release Resources\n+            deflater.end();\n+            inflater.end();\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/DeflaterDictionaryTests.java","additions":59,"deletions":4,"binary":false,"changes":63,"status":"modified"}]}