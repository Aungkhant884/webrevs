{"files":[{"patch":"@@ -327,1 +327,1 @@\n-  int code_size() const                          { return _code_size; }\n+  u2 code_size() const                          { return _code_size; }\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -590,1 +590,1 @@\n-  int operand_bootstrap_method_ref_index_at(int bsms_attribute_index) {\n+  u2 operand_bootstrap_method_ref_index_at(int bsms_attribute_index) {\n@@ -594,1 +594,1 @@\n-  int operand_argument_count_at(int bsms_attribute_index) {\n+  u2 operand_argument_count_at(int bsms_attribute_index) {\n@@ -596,1 +596,1 @@\n-    int argc = operands()->at(offset + _indy_argc_offset);\n+    u2 argc = operands()->at(offset + _indy_argc_offset);\n@@ -599,1 +599,1 @@\n-  int operand_argument_index_at(int bsms_attribute_index, int j) {\n+  u2 operand_argument_index_at(int bsms_attribute_index, int j) {\n@@ -621,1 +621,1 @@\n-  int bootstrap_method_ref_index_at(int which) {\n+  u2 bootstrap_method_ref_index_at(int which) {\n@@ -626,1 +626,1 @@\n-  int bootstrap_argument_count_at(int which) {\n+  u2 bootstrap_argument_count_at(int which) {\n@@ -629,1 +629,1 @@\n-    int argc = operands()->at(op_base + _indy_argc_offset);\n+    u2 argc = operands()->at(op_base + _indy_argc_offset);\n@@ -635,1 +635,1 @@\n-  int bootstrap_argument_index_at(int which, int j) {\n+  u2 bootstrap_argument_index_at(int which, int j) {\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  int name_index() const {\n+  u2 name_index() const {\n@@ -148,1 +148,1 @@\n-  int signature_index() const {\n+  u2 signature_index() const {\n@@ -154,1 +154,1 @@\n-  int generic_signature_index() const {\n+  u2 generic_signature_index() const {\n@@ -162,1 +162,1 @@\n-  int initval_index() const {\n+  u2 initval_index() const {\n","filename":"src\/hotspot\/share\/oops\/fieldStreams.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-  int code_size() const                  { return constMethod()->code_size(); }\n+  u2 code_size() const                   { return constMethod()->code_size(); }\n@@ -268,3 +268,3 @@\n-  int  verifier_max_stack() const                { return constMethod()->max_stack(); }\n-  int           max_stack() const                { return constMethod()->max_stack() + extra_stack_entries(); }\n-  void      set_max_stack(int size)              {        constMethod()->set_max_stack(size); }\n+  u2  verifier_max_stack() const               { return constMethod()->max_stack(); }\n+  int          max_stack() const               { return constMethod()->max_stack() + extra_stack_entries(); }\n+  void      set_max_stack(int size)            {        constMethod()->set_max_stack(size); }\n@@ -273,2 +273,2 @@\n-  int  max_locals() const                        { return constMethod()->max_locals(); }\n-  void set_max_locals(int size)                  { constMethod()->set_max_locals(size); }\n+  u2  max_locals() const                       { return constMethod()->max_locals(); }\n+  void set_max_locals(int size)                { constMethod()->set_max_locals(size); }\n@@ -523,1 +523,1 @@\n-                          { return constMethod()->method_parameters_start(); }\n+                         { return constMethod()->method_parameters_start(); }\n@@ -526,1 +526,1 @@\n-  int checked_exceptions_length() const\n+  u2 checked_exceptions_length() const\n@@ -529,1 +529,1 @@\n-                          { return constMethod()->checked_exceptions_start(); }\n+                         { return constMethod()->checked_exceptions_start(); }\n@@ -534,1 +534,1 @@\n-  int localvariable_table_length() const\n+  u2 localvariable_table_length() const\n@@ -1041,1 +1041,1 @@\n-  int length() const {\n+  u2 length() const {\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-  write_u2(java_fields);\n+  write_u2(checked_cast<u2>(java_fields));\n@@ -70,3 +70,3 @@\n-    int name_index = fs.name_index();\n-    int signature_index = fs.signature_index();\n-    int initial_value_index = fs.initval_index();\n+    u2 name_index = fs.name_index();\n+    u2 signature_index = fs.signature_index();\n+    u2 initial_value_index = fs.initval_index();\n@@ -75,1 +75,1 @@\n-    int generic_signature_index = fs.generic_signature_index();\n+    u2 generic_signature_index = fs.generic_signature_index();\n@@ -87,1 +87,1 @@\n-    write_u2(access_flags.as_int() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n+    write_u2(access_flags.get_flags() & JVM_RECOGNIZED_FIELD_MODIFIERS);\n@@ -90,1 +90,1 @@\n-    int attr_count = 0;\n+    u2 attr_count = 0;\n@@ -150,2 +150,2 @@\n-  int local_variable_table_length = 0;\n-  int local_variable_type_table_length = 0;\n+  u2 local_variable_table_length = 0;\n+  u2 local_variable_type_table_length = 0;\n@@ -154,1 +154,1 @@\n-  int attr_count = 0;\n+  u2 attr_count = 0;\n@@ -232,1 +232,1 @@\n-  int exception_table_length = exception_table.length();\n+  u2 exception_table_length = exception_table.length();\n@@ -279,1 +279,1 @@\n-  int checked_exceptions_length = const_method->checked_exceptions_length();\n+  u2 checked_exceptions_length = const_method->checked_exceptions_length();\n@@ -310,1 +310,1 @@\n-  write_u1(length);\n+  write_u1((u1)length);\n@@ -364,1 +364,1 @@\n-  return iter.length();\n+  return checked_cast<u2>(iter.length());\n@@ -397,1 +397,1 @@\n-  int length = sizeof(u2); \/\/ num_bootstrap_methods\n+  u4 length = sizeof(u2); \/\/ num_bootstrap_methods\n@@ -402,1 +402,1 @@\n-    length += sizeof(u2) * num_bootstrap_arguments; \/\/ bootstrap_arguments[num_bootstrap_arguments]\n+    length += (u4)sizeof(u2) * num_bootstrap_arguments; \/\/ bootstrap_arguments[num_bootstrap_arguments]\n@@ -407,1 +407,1 @@\n-  write_u2(num_bootstrap_methods);\n+  write_u2(checked_cast<u2>(num_bootstrap_methods));\n@@ -427,1 +427,1 @@\n-  int host_class_index = ik()->nest_host_index();\n+  u2 host_class_index = ik()->nest_host_index();\n@@ -447,1 +447,1 @@\n-  write_u2(number_of_classes);\n+  write_u2(checked_cast<u2>(number_of_classes));\n@@ -467,1 +467,1 @@\n-  write_u2(number_of_classes);\n+  write_u2(checked_cast<u2>(number_of_classes));\n@@ -491,1 +491,1 @@\n-  int length = sizeof(u2) + (sizeof(u2) * 3 * number_of_components);\n+  u4 length = checked_cast<u4>(sizeof(u2) + (sizeof(u2) * 3 * number_of_components));\n@@ -508,1 +508,1 @@\n-  write_u2(number_of_components);\n+  write_u2(checked_cast<u2>(number_of_components));\n@@ -541,1 +541,1 @@\n-  u2 entry_count = length \/ InstanceKlass::inner_class_next_offset;\n+  u2 entry_count = checked_cast<u2>(length \/ InstanceKlass::inner_class_next_offset);\n@@ -595,2 +595,2 @@\n-    write_u2(stream.bci());\n-    write_u2(stream.line());\n+    write_u2(checked_cast<u2>(stream.bci()));\n+    write_u2(checked_cast<u2>(stream.line()));\n@@ -739,1 +739,1 @@\n-  write_u2(attr_count);\n+  write_u2(checked_cast<u2>(attr_count));\n@@ -779,1 +779,1 @@\n-  int attr_count = 0;\n+  u2 attr_count = 0;\n@@ -870,1 +870,1 @@\n-  write_u2(num_methods - num_overpass);\n+  write_u2(checked_cast<u2>(num_methods - num_overpass));\n@@ -914,1 +914,1 @@\n-  write_u2(cpool()->length());\n+  write_u2(checked_cast<u2>(cpool()->length()));\n@@ -931,1 +931,1 @@\n-  write_u2(num_interfaces);\n+  write_u2(checked_cast<u2>(num_interfaces));\n","filename":"src\/hotspot\/share\/prims\/jvmtiClassFileReconstituter.cpp","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -274,3 +274,1 @@\n-    int pcds_in_method;\n-\n-    pcds_in_method = (nm->scopes_pcs_end() - nm->scopes_pcs_begin());\n+    int pcds_in_method = pointer_delta_as_int(nm->scopes_pcs_end(), nm->scopes_pcs_begin());\n","filename":"src\/hotspot\/share\/prims\/jvmtiCodeBlobEvents.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  jint value = 0;\n+  jlong value = 0;\n@@ -619,1 +619,1 @@\n-    int offset = jfieldIDWorkaround::from_instance_jfieldID(k, field);\n+    int offset = checked_cast<int>(jfieldIDWorkaround::from_instance_jfieldID(k, field));\n@@ -799,1 +799,1 @@\n-    jshort vt_state = java_lang_VirtualThread::state(thread_oop);\n+    int vt_state = java_lang_VirtualThread::state(thread_oop);\n@@ -2552,1 +2552,1 @@\n-  jshort vthread_state = java_lang_VirtualThread::state(_vthread_h());\n+  int vthread_state = java_lang_VirtualThread::state(_vthread_h());\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  int new_bci = new_location - new_method->code_base();\n+  int new_bci = pointer_delta_as_int(new_location, new_method->code_base());\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -913,1 +913,1 @@\n-    _curr_len = *end_ptr - *data_ptr;\n+    _curr_len = pointer_delta_as_int(*end_ptr, *data_ptr);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,1 +185,1 @@\n-    *resultp++ = *ap++ & ~*bp++;\n+    *resultp++ = *ap++ & (char)~*bp++;\n","filename":"src\/hotspot\/share\/prims\/jvmtiManageCapabilities.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  int value = 0;\n+  jlong value = 0;\n@@ -385,1 +385,1 @@\n-  intptr_t save = _recursions;\n+  int save = _recursions;\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -625,1 +625,1 @@\n-int VM_RedefineClasses::find_or_append_indirect_entry(const constantPoolHandle& scratch_cp,\n+u2 VM_RedefineClasses::find_or_append_indirect_entry(const constantPoolHandle& scratch_cp,\n@@ -650,1 +650,3 @@\n-  return new_ref_i;\n+  \/\/ constant pool indices are u2, unless the merged constant pool overflows which\n+  \/\/ we don't check for.\n+  return checked_cast<u2>(new_ref_i);\n@@ -660,3 +662,3 @@\n-  int old_ref_i = scratch_cp->operand_bootstrap_method_ref_index_at(old_bs_i);\n-  int new_ref_i = find_or_append_indirect_entry(scratch_cp, old_ref_i, merge_cp_p,\n-                                                merge_cp_length_p);\n+  u2 old_ref_i = scratch_cp->operand_bootstrap_method_ref_index_at(old_bs_i);\n+  u2 new_ref_i = find_or_append_indirect_entry(scratch_cp, old_ref_i, merge_cp_p,\n+                                               merge_cp_length_p);\n@@ -674,1 +676,1 @@\n-  int argc     = scratch_cp->operand_argument_count_at(old_bs_i);\n+  u2 argc      = scratch_cp->operand_argument_count_at(old_bs_i);\n@@ -681,3 +683,3 @@\n-    int old_arg_ref_i = scratch_cp->operand_argument_index_at(old_bs_i, i);\n-    int new_arg_ref_i = find_or_append_indirect_entry(scratch_cp, old_arg_ref_i, merge_cp_p,\n-                                                      merge_cp_length_p);\n+    u2 old_arg_ref_i = scratch_cp->operand_argument_index_at(old_bs_i, i);\n+    u2 new_arg_ref_i = find_or_append_indirect_entry(scratch_cp, old_arg_ref_i, merge_cp_p,\n+                                                     merge_cp_length_p);\n@@ -1237,1 +1239,1 @@\n-int VM_RedefineClasses::find_new_index(int old_index) {\n+u2 VM_RedefineClasses::find_new_index(int old_index) {\n@@ -1256,1 +1258,3 @@\n-  return value;\n+  \/\/ constant pool indices are u2, unless the merged constant pool overflows which\n+  \/\/ we don't check for.\n+  return checked_cast<u2>(value);\n@@ -2191,2 +2195,2 @@\n-        int cp_index = *(bcp + 1);\n-        int new_index = find_new_index(cp_index);\n+        u1 cp_index = *(bcp + 1);\n+        u2 new_index = find_new_index(cp_index);\n@@ -2206,1 +2210,2 @@\n-            *(bcp + 1) = new_index;\n+            \/\/ We checked that new_index fits in a u1 so this cast is safe\n+            *(bcp + 1) = (u1)new_index;\n@@ -2265,1 +2270,1 @@\n-        int new_index = find_new_index(cp_index);\n+        u2 new_index = find_new_index(cp_index);\n@@ -3603,1 +3608,1 @@\n-    int new_index = find_new_index(cur_index);\n+    u2 new_index = find_new_index(cur_index);\n@@ -3629,1 +3634,1 @@\n-    int new_index = find_new_index(method->name_index());\n+    u2 new_index = find_new_index(method->name_index());\n@@ -3674,1 +3679,1 @@\n-      int new_index = find_new_index(cur_index);\n+      u2 new_index = find_new_index(cur_index);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  int find_or_append_indirect_entry(const constantPoolHandle& scratch_cp, int scratch_i,\n+  u2 find_or_append_indirect_entry(const constantPoolHandle& scratch_cp, int scratch_i,\n@@ -439,1 +439,1 @@\n-  int find_new_index(int old_index);\n+  u2 find_new_index(int old_index);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-              _trace_flags[i] &= ~bits;\n+              _trace_flags[i] &= (jbyte)~bits;\n@@ -234,1 +234,1 @@\n-            _event_trace_flags[i] &= ~bits;\n+            _event_trace_flags[i] &= (jbyte)~bits;\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,2 +78,2 @@\n-    u2 cpi_old = s_old->get_index_u2();\n-    u2 cpi_new = s_new->get_index_u2();\n+    int cpi_old = s_old->get_index_u2();\n+    int cpi_new = s_new->get_index_u2();\n@@ -158,2 +158,2 @@\n-    u2 cpi_old = s_old->get_index_u2();\n-    u2 cpi_new = s_new->get_index_u2();\n+    int cpi_old = s_old->get_index_u2();\n+    int cpi_new = s_new->get_index_u2();\n","filename":"src\/hotspot\/share\/prims\/methodComparator.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-    return (intptr_t)result;\n+    return result;\n","filename":"src\/hotspot\/share\/runtime\/jfieldIDWorkaround.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}