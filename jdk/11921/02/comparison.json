{"files":[{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -685,2 +685,2 @@\n-    patch((address)&insn, 6, 0, 0b001111);\n-    patch((address)&insn, 11, 7, 0b00000);\n+    patch((address)&insn, 6, 0, 0b001111);      \/\/ opcode\n+    patch((address)&insn, 11, 7, 0b00000);      \/\/ rd\n@@ -688,4 +688,4 @@\n-    patch((address)&insn, 19, 15, 0b00000);\n-    patch((address)&insn, 23, 20, successor);\n-    patch((address)&insn, 27, 24, predecessor);\n-    patch((address)&insn, 31, 28, 0b0000);\n+    patch((address)&insn, 19, 15, 0b00000);     \/\/ rs1\n+    patch((address)&insn, 23, 20, successor);   \/\/ succ\n+    patch((address)&insn, 27, 24, predecessor); \/\/ pred\n+    patch((address)&insn, 31, 28, 0b0000);      \/\/ fm\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -1927,1 +1927,1 @@\n-  Unimplemented();\n+  __ pause();\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -111,0 +111,2 @@\n+  product(bool, UseZihintpause, false, EXPERIMENTAL,                             \\\n+          \"Use Zihintpause instructions\")                                        \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -367,0 +367,4 @@\n+  void pause() {\n+    fence(w, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\/\/ Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -952,0 +952,1 @@\n+  int_def CACHE_MISS_COST      ( 2000, 20 * DEFAULT_COST);          \/\/ typicall cache miss penalty\n@@ -1818,0 +1819,2 @@\n+    case Op_OnSpinWait:\n+      return VM_Version::supports_on_spin_wait();\n@@ -7873,0 +7876,14 @@\n+instruct spin_wait() %{\n+  predicate(UseZihintpause);\n+  match(OnSpinWait);\n+  ins_cost(CACHE_MISS_COST);\n+\n+  format %{ \"spin_wait\" %}\n+\n+  ins_encode %{\n+    __ pause();\n+  %}\n+\n+  ins_pipe(pipe_serial);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -80,0 +80,3 @@\n+    if (FLAG_IS_DEFAULT(UseZihintpause)) {\n+      FLAG_SET_DEFAULT(UseZihintpause, true);\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -64,0 +64,2 @@\n+  static bool supports_on_spin_wait() { return UseZihintpause; }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * Copyright (c) 2023, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestOnSpinWaitRISCV64\n+ * @summary Checks that java.lang.Thread.onSpinWait is intrinsified with instructions\n+ * @library \/test\/lib\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"riscv64\"\n+ *\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitRISCV64 c1\n+ * @run driver compiler.onSpinWait.TestOnSpinWaitRISCV64 c2\n+ *\/\n+\n+package compiler.onSpinWait;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOnSpinWaitRISCV64 {\n+    public static void main(String[] args) throws Exception {\n+        String compiler = args[0];\n+        ArrayList<String> command = new ArrayList<String>();\n+        command.add(\"-XX:+IgnoreUnrecognizedVMOptions\");\n+        command.add(\"-showversion\");\n+        command.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        command.add(\"-XX:+PrintCompilation\");\n+        command.add(\"-XX:+PrintInlining\");\n+        command.add(\"-XX:+UnlockExperimentalVMOptions\");\n+        command.add(\"-XX:+UseZihintpause\");\n+        if (compiler.equals(\"c2\")) {\n+            command.add(\"-XX:-TieredCompilation\");\n+        } else if (compiler.equals(\"c1\")) {\n+            command.add(\"-XX:+TieredCompilation\");\n+            command.add(\"-XX:TieredStopAtLevel=1\");\n+        } else {\n+            throw new RuntimeException(\"Unknown compiler: \" + compiler);\n+        }\n+        command.add(\"-Xbatch\");\n+        command.add(Launcher.class.getName());\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(command);\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        if (compiler.equals(\"c2\")) {\n+            analyzer.shouldContain(\"java.lang.Thread::onSpinWait (1 bytes)   (intrinsic)\");\n+        } else {\n+            analyzer.shouldContain(\"java.lang.Thread::onSpinWait (1 bytes)   intrinsic\");\n+        }\n+    }\n+\n+    static class Launcher {\n+        public static void main(final String[] args) throws Exception {\n+            int end = 20_000;\n+\n+            for (int i=0; i < end; i++) {\n+                test();\n+            }\n+        }\n+        static void test() {\n+            java.lang.Thread.onSpinWait();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/onSpinWait\/TestOnSpinWaitRISCV64.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}