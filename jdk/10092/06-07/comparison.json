{"files":[{"patch":"@@ -51,1 +51,1 @@\n-AsyncLogWriter::Buffer::Buffer(size_t capacity) : _pos(0) {\n+AsyncLogWriter::Buffer::Buffer(size_t capacity) : _pos(0), _capacity(capacity) {\n@@ -53,1 +53,0 @@\n-  _capacity = capacity - AsyncLogWriter::TOKEN_SIZE;\n@@ -57,2 +56,4 @@\n-  size_t len = strlen(msg) + 1; \/\/ including trailing zero\n-  size_t sz = align_up(sizeof(Message) + len, sizeof(void*));\n+  const size_t sz = Message::calc_size(strlen(msg));\n+  const bool is_token = output == nullptr;\n+  \/\/ Always leave headroom for the flush token. Pushing a token must succeed.\n+  const size_t headroom = (!is_token) ? Message::calc_size(0) : 0;\n@@ -60,1 +61,1 @@\n-  if (_pos + sz <= _capacity || output == nullptr\/*token*\/) {\n+  if (_pos + sz <= (_capacity - headroom)) {\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -92,0 +92,5 @@\n+    \/\/ Calculate the size for a prospective Message object depending on its message length including the trailing zero\n+    static constexpr size_t calc_size(size_t message_len) {\n+      return align_up(sizeof(Message) + message_len + 1, sizeof(void*));\n+    }\n+\n@@ -93,2 +98,1 @@\n-      size_t len = strlen(message()) + 1;\n-      return align_up(sizeof(*this) + len, sizeof(void*));\n+      return calc_size(strlen(message()));\n@@ -97,1 +101,1 @@\n-    bool is_token() const { return _output == nullptr; }\n+    inline bool is_token() const { return _output == nullptr; }\n@@ -103,3 +107,0 @@\n-  \/\/ A flush TOKEN is Message(nullptr, None, \"\");\n-  static const size_t TOKEN_SIZE = {align_up(sizeof(Message) + 1, sizeof(void*))};\n-\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}