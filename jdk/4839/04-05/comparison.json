{"files":[{"patch":"@@ -2441,4 +2441,0 @@\n-    \/\/ We're not going to have VectorCast with bit_size less than 64 bits\n-    \/\/ support except for byte vector with vlen more than or equal to 4.\n-    case Op_VectorCastB2X:\n-    case Op_VectorCastS2X:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -202,1 +202,1 @@\n-    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -216,1 +216,1 @@\n-    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -230,1 +230,1 @@\n-    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -494,1 +494,1 @@\n-            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 4F to 4S vector\"\n+            \"xtn     $dst, T4H, $dst, T4S\\t# convert 4F to 4S vector\"\n@@ -508,1 +508,1 @@\n-            \"xtn     $dst, T2S, $dst, T2D\\n\\t# convert 2D to 2I vector\"\n+            \"xtn     $dst, T2S, $dst, T2D\\t# convert 2D to 2I vector\"\n@@ -522,1 +522,1 @@\n-            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n+            \"xtn     $dst, T8B, $dst, T8H\\t# convert 4F to 4B vector\"\n@@ -2029,1 +2029,1 @@\n-            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\\n\\t\"\n+            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\"\n@@ -4160,1 +4160,1 @@\n-            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -280,1 +280,1 @@\n-            \"xtn     $dst, T$7, $dst, T$6\\n\\t# convert $1$2 to $1$3 vector\"\n+            \"xtn     $dst, T$7, $dst, T$6\\t# convert $1$2 to $1$3 vector\"\n@@ -298,1 +298,1 @@\n-            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n+            \"xtn     $dst, T8B, $dst, T8H\\t# convert 4F to 4B vector\"\n@@ -979,1 +979,1 @@\n-            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\\n\\t\"\n+            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\"\n@@ -1850,1 +1850,1 @@\n-            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2824,1 +2824,1 @@\n-  void dups(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int index = 0)\n+  void dup(FloatRegister Vd, SIMD_RegVariant T, FloatRegister Vn, int index = 0)\n@@ -2827,0 +2827,1 @@\n+    assert(T != Q, \"invalid size\");\n@@ -2828,1 +2829,1 @@\n-    f(((1 << (T >> 1)) | (index << ((T >> 1) + 1))), 20, 16);\n+    f((1 << T) | (index << (T + 1)), 20, 16);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1525,1 +1525,1 @@\n-                        [\"dups\",   \"__ dups(v0, __ T2S, v1);\",                           \"dup\\ts0, v1.s[0]\"],\n+                        [\"dup\",    \"__ dup(v0, __ S, v1);\",                              \"dup\\ts0, v1.s[0]\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -715,1 +715,1 @@\n-    __ dups(v0, __ T2S, v1);                           \/\/       dup     s0, v1.s[0]\n+    __ dup(v0, __ S, v1);                              \/\/       dup     s0, v1.s[0]\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}