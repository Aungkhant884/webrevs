{"files":[{"patch":"@@ -2448,6 +2448,0 @@\n-    \/\/ Some types of VectorCast are not implemented for now.\n-    case Op_VectorCastI2X:\n-      if (bt == T_BYTE) {\n-        return false;\n-      }\n-      break;\n@@ -2459,6 +2453,0 @@\n-    case Op_VectorCastF2X:\n-    case Op_VectorCastD2X:\n-      if (bt == T_INT || bt == T_SHORT || bt == T_BYTE || bt == T_LONG) {\n-        return false;\n-      }\n-      break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,2 +155,1 @@\n-    \/\/ If registers are the same, no register move is required - the\n-    \/\/ upper 64 bits of 'src' are expected to have been initialized\n+    \/\/ The upper 64 bits of 'src' are expected to have been initialized\n@@ -158,5 +157,3 @@\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n+    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg),\n+           as_FloatRegister($src$$reg));\n@@ -184,3 +181,1 @@\n-\/\/ ------------------------------ Vector cast -------------------------------\n-\n-instruct vcvt4Bto4S(vecD dst, vecD src)\n+instruct reinterpretS2X(vecX dst, vecD src)\n@@ -188,3 +183,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\t# convert 4B to 4S vector\" %}\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 16 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# S2X\" %}\n@@ -192,1 +189,2 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    \/\/ The upper bits of \"src\" are expected to have been initialized to zero.\n+    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n@@ -194,1 +192,1 @@\n-  ins_pipe(pipe_class_default);\n+  ins_pipe(pipe_slow);\n@@ -197,0 +195,2 @@\n+\/\/ ------------------------------ Vector cast -------------------------------\n+\n@@ -208,11 +208,0 @@\n-instruct vcvt4Sto4B(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorCastS2X src));\n-  format %{ \"xtn  $dst, T8B, $src, T8H\\t# convert 4S to 4B vector\" %}\n-  ins_encode %{\n-    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg), __ T8H);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n@@ -274,1 +263,1 @@\n-instruct vcvt4Bto4I(vecX dst, vecD src)\n+instruct vcvt4Ito4B(vecD dst, vecX src)\n@@ -276,4 +265,4 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n-            \"sxtl  $dst, T4S, $dst, T4H\\t# convert 4B to 4I vector\"\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n+            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n@@ -282,2 +271,2 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n@@ -288,1 +277,2 @@\n-instruct vcvt4Ito4B(vecD dst, vecX src)\n+\n+instruct vcvt4Fto4B(vecD dst, vecX src)\n@@ -291,3 +281,4 @@\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n-            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzv  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n+            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n@@ -296,1 +287,2 @@\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n@@ -302,1 +294,1 @@\n-instruct vcvt4Bto4F(vecX dst, vecD src)\n+instruct vcvt2Dto2S(vecD dst, vecX src)\n@@ -304,5 +296,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n-            \"sxtl  $dst, T4S, $dst, T4H\\n\\t\"\n-            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzv  $dst, T2D, $src\\n\\t\"\n+            \"xtn     $dst, T2S, $dst, T2D\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 2D to 2S vector\"\n@@ -311,3 +303,3 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n-    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n@@ -346,0 +338,28 @@\n+instruct vcvt4Fto4S(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzv  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 4F to 4S vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvt2Dto2I(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzv  $dst, T2D, $src\\n\\t\"\n+            \"xtn     $dst, T2S, $dst, T2D\\n\\t# convert 2D to 2I vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -379,0 +399,33 @@\n+instruct vcvt2Fto2I(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzv  $dst, T2S, $src\\t# convert 2F to 2I vector\" %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vcvt4Fto4I(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzv  $dst, T4S, $src\\t# convert 4F to 4I vector\" %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vcvt2Dto2L(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzv  $dst, T2D, $src\\t# convert 2D to 2L vector\" %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -415,0 +468,14 @@\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzv  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":114,"deletions":47,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -107,2 +107,1 @@\n-    \/\/ If registers are the same, no register move is required - the\n-    \/\/ upper 64 bits of 'src' are expected to have been initialized\n+    \/\/ The upper 64 bits of 'src' are expected to have been initialized\n@@ -110,5 +109,3 @@\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n+    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg),\n+           as_FloatRegister($src$$reg));\n@@ -136,0 +133,14 @@\n+instruct reinterpretS2X(vecX dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 16 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# S2X\" %}\n+  ins_encode %{\n+    \/\/ The upper bits of \"src\" are expected to have been initialized to zero.\n+    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -150,1 +161,0 @@\n-VECTOR_CAST_I2I(4, B, S, D, D, sxtl, 8B, 8H)\n@@ -152,1 +162,0 @@\n-VECTOR_CAST_I2I(4, S, B, D, D, xtn,  8H, 8B)\n@@ -159,2 +168,2 @@\n-define(`VECTOR_CAST_B2I', `\n-instruct vcvt4$1to4$2`'(vec$3 dst, vec$4 src)\n+\n+instruct vcvt4Ito4B(vecD dst, vecX src)\n@@ -162,4 +171,4 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n-  match(Set dst (VectorCast$1`'2X src));\n-  format %{ \"$5  $dst, T$7, $src, T$6\\n\\t\"\n-            \"$5  $dst, T$9, $dst, T$8\\t# convert 4$1 to 4$2 vector\"\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n+            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n@@ -168,2 +177,2 @@\n-    __ $5(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($src$$reg), __ T$6);\n-    __ $5(as_FloatRegister($dst$$reg), __ T$9, as_FloatRegister($dst$$reg), __ T$8);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n@@ -172,4 +181,1 @@\n-%}')dnl\n-dnl             $1 $2 $3 $4 $5    $6  $7  $8  $9\n-VECTOR_CAST_B2I(B, I, X, D, sxtl, 8B, 8H, 4H, 4S)\n-VECTOR_CAST_B2I(I, B, D, X, xtn,  4S, 4H, 8H, 8B)\n+%}\n@@ -177,1 +183,3 @@\n-instruct vcvt4Bto4F(vecX dst, vecD src)\n+dnl\n+define(`VECTOR_CAST_F2I_LL', `\n+instruct vcvt$1$2to$1$3`'(vecD dst, vecX src)\n@@ -179,5 +187,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n-            \"sxtl  $dst, T4S, $dst, T4H\\n\\t\"\n-            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"fcvtzv  $dst, T$4, $src\\n\\t\"\n+            \"xtn     $dst, T$5, $dst, T$4\\n\\t\"\n+            \"xtn     $dst, T$7, $dst, T$6\\n\\t# convert $1$2 to $1$3 vector\"\n@@ -186,3 +194,3 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n-    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$4, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($dst$$reg), __ T$4);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($dst$$reg), __ T$6);\n@@ -191,1 +199,4 @@\n-%}\n+%}')dnl\n+dnl                $1 $2 $3 $4  $5  $6  $7\n+VECTOR_CAST_F2I_LL(4, F, B, 4S, 4H, 8H, 8B)\n+VECTOR_CAST_F2I_LL(2, D, S, 2D, 2S, 4S, 4H)\n@@ -194,1 +205,1 @@\n-instruct vcvt$1$2to$1$3`'(vecX dst, vecD src)\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n@@ -198,2 +209,2 @@\n-  format %{ \"sxtl    $dst, T$5, $src, T$4\\n\\t\"\n-            \"scvtfv  T$5, $dst, $dst\\t# convert $1$2 to $1$3 vector\"\n+  format %{ \"sxtl    $dst, T$7, $src, T$6\\n\\t\"\n+            \"scvtfv  T$7, $dst, $dst\\t# convert $1$2 to $1$3 vector\"\n@@ -202,2 +213,20 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg), __ T$4);\n-    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($src$$reg), __ T$6);\n+    __ scvtfv(__ T$7, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6  $7\n+VECTOR_CAST_I2F_L(4, S, F, X, D, 4H, 4S)\n+VECTOR_CAST_I2F_L(2, I, D, X, D, 2S, 2D)\n+dnl\n+define(`VECTOR_CAST_F2I_L', `\n+instruct vcvt$1$2to$1$3`'(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"fcvtzv  $dst, T$4, $src\\n\\t\"\n+            \"xtn     $dst, T$5, $dst, T$4\\n\\t# convert $1$2 to $1$3 vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$4, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($dst$$reg), __ T$4);\n@@ -208,2 +237,2 @@\n-VECTOR_CAST_I2F_L(4, S, F, 4H, 4S)\n-VECTOR_CAST_I2F_L(2, I, D, 2S, 2D)\n+VECTOR_CAST_F2I_L(4, F, S, 4S, 4H)\n+VECTOR_CAST_F2I_L(2, D, I, 2D, 2S)\n@@ -227,0 +256,16 @@\n+define(`VECTOR_CAST_F2I', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$4 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"fcvtzv  $dst, T$5, $src\\t# convert $1$2 to $1$3 vector\" %}\n+  ins_encode %{\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl             $1 $2 $3 $4 $5\n+VECTOR_CAST_F2I(2, F, I, D, 2S)\n+VECTOR_CAST_F2I(4, F, I, X, 4S)\n+VECTOR_CAST_F2I(2, D, L, X, 2D)\n+dnl\n@@ -257,0 +302,14 @@\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzv  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":97,"deletions":38,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -2823,0 +2823,9 @@\n+  \/\/ Advanced SIMD scalar copy\n+  void dups(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int index = 0)\n+  {\n+    starti;\n+    f(0b01011110000, 31, 21);\n+    f(((1 << (T >> 1)) | (index << ((T >> 1) + 1))), 20, 16);\n+    f(0b000001, 15, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n@@ -2901,0 +2910,1 @@\n+  INSN(fcvtzv, 0, 0b10, 0b01, 0b11011); \/\/ converts each element in a vector from a floating-point value to a signed integer value, and Arm's name is fcvtzs\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1525,0 +1525,1 @@\n+                        [\"dups\",   \"__ dups(v0, __ T2S, v1);\",                           \"dup\\ts0, v1.s[0]\"],\n@@ -1538,0 +1539,1 @@\n+                        [\"fcvtzv\", \"__ fcvtzv(v0, __ T4S, v1);\",                         \"fcvtzs\\tv0.4s, v1.4s\"],\n@@ -1539,1 +1541,1 @@\n-                        [\"cpy\",    \"__ sve_cpy(z0, __ S, p0, v1);\",                      \"mov\\tz0.s, p0\/m, s1\"],\n+                        [\"cpy\",    \"__ sve_cpy(z0, __ S, p0, v1);\",                      \"cpy\\tz0.s, p0\/m, s1\"],\n@@ -1690,1 +1692,2 @@\n-print \"\\n  };\"\n+print\n+print \"  };\"\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -715,0 +715,1 @@\n+    __ dups(v0, __ T2S, v1);                           \/\/       dup     s0, v1.s[0]\n@@ -728,1 +729,2 @@\n-    __ sve_cpy(z0, __ S, p0, v1);                      \/\/       mov     z0.s, p0\/m, s1\n+    __ fcvtzv(v0, __ T4S, v1);                         \/\/       fcvtzs  v0.4s, v1.4s\n+    __ sve_cpy(z0, __ S, p0, v1);                      \/\/       cpy     z0.s, p0\/m, s1\n@@ -982,7 +984,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400030d,     0x94000000,\n-    0x97ffffd4,     0x9400030a,     0x3400000a,     0x34fffa2a,\n-    0x340060ea,     0x35000008,     0x35fff9c8,     0x35006088,\n-    0xb400000b,     0xb4fff96b,     0xb400602b,     0xb500001d,\n-    0xb5fff91d,     0xb5005fdd,     0x10000013,     0x10fff8b3,\n-    0x10005f73,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305ef6,     0x3758000c,     0x375ff7cc,     0x37585e8c,\n+    0x14000000,     0x17ffffd7,     0x1400030f,     0x94000000,\n+    0x97ffffd4,     0x9400030c,     0x3400000a,     0x34fffa2a,\n+    0x3400612a,     0x35000008,     0x35fff9c8,     0x350060c8,\n+    0xb400000b,     0xb4fff96b,     0xb400606b,     0xb500001d,\n+    0xb5fff91d,     0xb500601d,     0x10000013,     0x10fff8b3,\n+    0x10005fb3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305f36,     0x3758000c,     0x375ff7cc,     0x37585ecc,\n@@ -993,13 +995,13 @@\n-    0x54005c60,     0x54000001,     0x54fff541,     0x54005c01,\n-    0x54000002,     0x54fff4e2,     0x54005ba2,     0x54000002,\n-    0x54fff482,     0x54005b42,     0x54000003,     0x54fff423,\n-    0x54005ae3,     0x54000003,     0x54fff3c3,     0x54005a83,\n-    0x54000004,     0x54fff364,     0x54005a24,     0x54000005,\n-    0x54fff305,     0x540059c5,     0x54000006,     0x54fff2a6,\n-    0x54005966,     0x54000007,     0x54fff247,     0x54005907,\n-    0x54000008,     0x54fff1e8,     0x540058a8,     0x54000009,\n-    0x54fff189,     0x54005849,     0x5400000a,     0x54fff12a,\n-    0x540057ea,     0x5400000b,     0x54fff0cb,     0x5400578b,\n-    0x5400000c,     0x54fff06c,     0x5400572c,     0x5400000d,\n-    0x54fff00d,     0x540056cd,     0x5400000e,     0x54ffefae,\n-    0x5400566e,     0x5400000f,     0x54ffef4f,     0x5400560f,\n+    0x54005ca0,     0x54000001,     0x54fff541,     0x54005c41,\n+    0x54000002,     0x54fff4e2,     0x54005be2,     0x54000002,\n+    0x54fff482,     0x54005b82,     0x54000003,     0x54fff423,\n+    0x54005b23,     0x54000003,     0x54fff3c3,     0x54005ac3,\n+    0x54000004,     0x54fff364,     0x54005a64,     0x54000005,\n+    0x54fff305,     0x54005a05,     0x54000006,     0x54fff2a6,\n+    0x540059a6,     0x54000007,     0x54fff247,     0x54005947,\n+    0x54000008,     0x54fff1e8,     0x540058e8,     0x54000009,\n+    0x54fff189,     0x54005889,     0x5400000a,     0x54fff12a,\n+    0x5400582a,     0x5400000b,     0x54fff0cb,     0x540057cb,\n+    0x5400000c,     0x54fff06c,     0x5400576c,     0x5400000d,\n+    0x54fff00d,     0x5400570d,     0x5400000e,     0x54ffefae,\n+    0x540056ae,     0x5400000f,     0x54ffef4f,     0x5400564f,\n@@ -1037,1 +1039,1 @@\n-    0xbd1b1869,     0x5800465b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800469b,     0x1800000b,     0xf8945060,\n@@ -1122,56 +1124,57 @@\n-    0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,     0x4e071fe1,\n-    0x4e042c20,     0x4e062c20,     0x4e052c20,     0x4e083c20,\n-    0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,     0x9eae0020,\n-    0x4cc0ac3f,     0x05a08020,     0x04b0e3e0,     0x0470e7e1,\n-    0x042f9c20,     0x043f9c35,     0x047f9c20,     0x04ff9c20,\n-    0x04299420,     0x04319160,     0x0461943e,     0x04a19020,\n-    0x042053ff,     0x047f5401,     0x25208028,     0x2538cfe0,\n-    0x2578d001,     0x25b8efe2,     0x25f8f007,     0x05203864,\n-    0x05603ace,     0xa400a3e0,     0xa4a8a7ea,     0xa547a814,\n-    0xa4084ffe,     0xa55c53e0,     0xa5e1540b,     0xe400fbf6,\n-    0xe408ffff,     0xe547e400,     0xe4014be0,     0xe4a84fe0,\n-    0xe5f15000,     0x858043e0,     0x85a043ff,     0xe59f5d08,\n-    0x0420e3e9,     0x0460e3ea,     0x04a0e3eb,     0x04e0e3ec,\n-    0x25104042,     0x25104871,     0x252c8840,     0x253c1420,\n-    0x25681572,     0x25a21ce3,     0x25ea1e34,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8208193,\n-    0xf83101b6,     0xf83c13fe,     0xf821239a,     0xf824309e,\n-    0xf826535e,     0xf8304109,     0xf82c7280,     0xf8216058,\n-    0xf8a08309,     0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,\n-    0xf8a2310b,     0xf8aa522f,     0xf8a2418a,     0xf8ac71af,\n-    0xf8a26287,     0xf8fa8090,     0xf8e20184,     0xf8f01215,\n-    0xf8f022ab,     0xf8f7334c,     0xf8f751dc,     0xf8eb4038,\n-    0xf8ec715f,     0xf8f06047,     0xf863826d,     0xf8710070,\n-    0xf86113cb,     0xf86521e8,     0xf87d301e,     0xf8745287,\n-    0xf87742bc,     0xf87b70b9,     0xf8616217,     0xb83f8185,\n-    0xb82901fc,     0xb83d13f6,     0xb83320bf,     0xb82e33f0,\n-    0xb830529b,     0xb830416c,     0xb82973c6,     0xb831639b,\n-    0xb8be8147,     0xb8b4008a,     0xb8b81231,     0xb8b623a3,\n-    0xb8af3276,     0xb8b35056,     0xb8af4186,     0xb8b071ab,\n-    0xb8b763c1,     0xb8f38225,     0xb8e202d0,     0xb8ed12aa,\n-    0xb8fd219b,     0xb8fb3023,     0xb8ff5278,     0xb8f14389,\n-    0xb8fb70ef,     0xb8f563f7,     0xb87983e2,     0xb87b0150,\n-    0xb8771073,     0xb8702320,     0xb87a3057,     0xb870508c,\n-    0xb87c43be,     0xb87070db,     0xb86961fd,     0xce273c87,\n-    0xce080ac9,     0xce7e8e9b,     0xce808b45,     0xce79806e,\n-    0xce758768,     0xcec0835a,     0xce608ad8,     0x043100c4,\n-    0x046105e3,     0x65c900a6,     0x65d60a87,     0x65c80545,\n-    0x0416a63e,     0x04001f8b,     0x0450979a,     0x04dabe0d,\n-    0x045381a5,     0x04918b4f,     0x049006cb,     0x0497a264,\n-    0x045eadd1,     0x04881062,     0x040a04d7,     0x04810f71,\n-    0x04dca450,     0x65c084c3,     0x65cd8d93,     0x65c69a68,\n-    0x65878ae0,     0x65c29db3,     0x049da0e6,     0x6582b911,\n-    0x65c0b6d6,     0x65c1a1e2,     0x65cda494,     0x65c18107,\n-    0x65af1493,     0x65e52b36,     0x65ab4ed0,     0x65f06a8d,\n-    0x0451448f,     0x049c7c86,     0x0429335d,     0x04bc3162,\n-    0x047a3027,     0x04e831d1,     0x2493b8a5,     0x249d9604,\n-    0x24d18095,     0x24d7b491,     0x045a2113,     0x04d83a2e,\n-    0x041927d5,     0x0408358a,     0x048a2709,     0x658738c4,\n-    0x65c639bb,     0x65d836de,     0x04413d3e,\n+    0x5e040420,     0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,\n+    0x4e071fe1,     0x4e042c20,     0x4e062c20,     0x4e052c20,\n+    0x4e083c20,     0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,\n+    0x9eae0020,     0x4cc0ac3f,     0x4ea1b820,     0x05a08020,\n+    0x04b0e3e0,     0x0470e7e1,     0x042f9c20,     0x043f9c35,\n+    0x047f9c20,     0x04ff9c20,     0x04299420,     0x04319160,\n+    0x0461943e,     0x04a19020,     0x042053ff,     0x047f5401,\n+    0x25208028,     0x2538cfe0,     0x2578d001,     0x25b8efe2,\n+    0x25f8f007,     0x05203864,     0x05603ace,     0xa400a3e0,\n+    0xa4a8a7ea,     0xa547a814,     0xa4084ffe,     0xa55c53e0,\n+    0xa5e1540b,     0xe400fbf6,     0xe408ffff,     0xe547e400,\n+    0xe4014be0,     0xe4a84fe0,     0xe5f15000,     0x858043e0,\n+    0x85a043ff,     0xe59f5d08,     0x0420e3e9,     0x0460e3ea,\n+    0x04a0e3eb,     0x04e0e3ec,     0x25104042,     0x25104871,\n+    0x252c8840,     0x253c1420,     0x25681572,     0x25a21ce3,\n+    0x25ea1e34,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8208193,     0xf83101b6,     0xf83c13fe,\n+    0xf821239a,     0xf824309e,     0xf826535e,     0xf8304109,\n+    0xf82c7280,     0xf8216058,     0xf8a08309,     0xf8ba03d0,\n+    0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,\n+    0xf8a2418a,     0xf8ac71af,     0xf8a26287,     0xf8fa8090,\n+    0xf8e20184,     0xf8f01215,     0xf8f022ab,     0xf8f7334c,\n+    0xf8f751dc,     0xf8eb4038,     0xf8ec715f,     0xf8f06047,\n+    0xf863826d,     0xf8710070,     0xf86113cb,     0xf86521e8,\n+    0xf87d301e,     0xf8745287,     0xf87742bc,     0xf87b70b9,\n+    0xf8616217,     0xb83f8185,     0xb82901fc,     0xb83d13f6,\n+    0xb83320bf,     0xb82e33f0,     0xb830529b,     0xb830416c,\n+    0xb82973c6,     0xb831639b,     0xb8be8147,     0xb8b4008a,\n+    0xb8b81231,     0xb8b623a3,     0xb8af3276,     0xb8b35056,\n+    0xb8af4186,     0xb8b071ab,     0xb8b763c1,     0xb8f38225,\n+    0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,\n+    0xb8ff5278,     0xb8f14389,     0xb8fb70ef,     0xb8f563f7,\n+    0xb87983e2,     0xb87b0150,     0xb8771073,     0xb8702320,\n+    0xb87a3057,     0xb870508c,     0xb87c43be,     0xb87070db,\n+    0xb86961fd,     0xce273c87,     0xce080ac9,     0xce7e8e9b,\n+    0xce808b45,     0xce79806e,     0xce758768,     0xcec0835a,\n+    0xce608ad8,     0x043100c4,     0x046105e3,     0x65c900a6,\n+    0x65d60a87,     0x65c80545,     0x0416a63e,     0x04001f8b,\n+    0x0450979a,     0x04dabe0d,     0x045381a5,     0x04918b4f,\n+    0x049006cb,     0x0497a264,     0x045eadd1,     0x04881062,\n+    0x040a04d7,     0x04810f71,     0x04dca450,     0x65c084c3,\n+    0x65cd8d93,     0x65c69a68,     0x65878ae0,     0x65c29db3,\n+    0x049da0e6,     0x6582b911,     0x65c0b6d6,     0x65c1a1e2,\n+    0x65cda494,     0x65c18107,     0x65af1493,     0x65e52b36,\n+    0x65ab4ed0,     0x65f06a8d,     0x0451448f,     0x049c7c86,\n+    0x0429335d,     0x04bc3162,     0x047a3027,     0x04e831d1,\n+    0x2493b8a5,     0x249d9604,     0x24d18095,     0x24d7b491,\n+    0x045a2113,     0x04d83a2e,     0x041927d5,     0x0408358a,\n+    0x048a2709,     0x658738c4,     0x65c639bb,     0x65d836de,\n+    0x04413d3e,\n@@ -1180,1 +1183,0 @@\n-\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":81,"deletions":79,"binary":false,"changes":160,"status":"modified"}]}