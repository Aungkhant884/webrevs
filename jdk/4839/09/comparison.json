{"files":[{"patch":"@@ -2404,3 +2404,0 @@\n-    \/\/ We don't have VectorReinterpret with bit_size less than 64 support for\n-    \/\/ now, even for byte type. To be refined with fully VectorCast support.\n-    case Op_VectorReinterpret:\n@@ -2424,17 +2421,0 @@\n-    \/\/ Some types of VectorCast are not implemented for now.\n-    case Op_VectorCastI2X:\n-      if (bt == T_BYTE) {\n-        return false;\n-      }\n-      break;\n-    case Op_VectorCastS2X:\n-      if (vlen < 4 || bit_size < 64) {\n-        return false;\n-      }\n-      break;\n-    case Op_VectorCastF2X:\n-    case Op_VectorCastD2X:\n-      if (bt == T_INT || bt == T_SHORT || bt == T_BYTE || bt == T_LONG) {\n-        return false;\n-      }\n-      break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# D2X\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# D to X\" %}\n@@ -155,8 +155,4 @@\n-    \/\/ If registers are the same, no register move is required - the\n-    \/\/ upper 64 bits of 'src' are expected to have been initialized\n-    \/\/ to zero.\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n+    \/\/ The higher 64-bits of the \"dst\" register must be cleared to zero.\n+    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg),\n+           as_FloatRegister($src$$reg));\n@@ -173,1 +169,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# X2D\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# X to D\" %}\n@@ -175,2 +171,1 @@\n-    \/\/ Resize the vector from 128-bits to 64-bits. The higher 64-bits of\n-    \/\/ the \"dst\" register must be cleared to zero.\n+    \/\/ The higher 64-bits of the \"dst\" register must be cleared to zero.\n@@ -184,1 +179,13 @@\n-\/\/ ------------------------------ Vector cast -------------------------------\n+instruct reinterpretS2X(vecX dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 16 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# S to X\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -186,1 +193,1 @@\n-instruct vcvt4Bto4S(vecD dst, vecD src)\n+instruct reinterpretX2S(vecD dst, vecX src)\n@@ -188,3 +195,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\t# convert 4B to 4S vector\" %}\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 4 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 16);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# X to S\" %}\n@@ -192,1 +201,2 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -194,1 +204,15 @@\n-  ins_pipe(pipe_class_default);\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reinterpretS2D(vecD dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 8 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# S to D\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n@@ -197,0 +221,16 @@\n+instruct reinterpretD2S(vecD dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 4 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 8);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# D to S\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ Vector cast -------------------------------\n+\n@@ -208,1 +248,1 @@\n-instruct vcvt4Sto4B(vecD dst, vecD src)\n+instruct vcvt4Bto4S(vecD dst, vecD src)\n@@ -210,3 +250,3 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorCastS2X src));\n-  format %{ \"xtn  $dst, T8B, $src, T8H\\t# convert 4S to 4B vector\" %}\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl  $dst, T8H, $src, T8B\\t# convert 4B to 4S vector\" %}\n@@ -214,1 +254,1 @@\n-    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg), __ T8H);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n@@ -230,0 +270,11 @@\n+instruct vcvt4Sto4B(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastS2X src));\n+  format %{ \"xtn  $dst, T8B, $src, T8H\\t# convert 4S to 4B vector\" %}\n+  ins_encode %{\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -274,0 +325,14 @@\n+instruct vcvt4Ito4B(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"xtn  $dst, T4H,  $src, T4S\\n\\t\"\n+            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n+  %}\n+  ins_encode %{\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -278,1 +343,1 @@\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n+  format %{ \"sxtl  $dst, T8H,  $src, T8B\\n\\t\"\n@@ -285,0 +350,13 @@\n+  ins_pipe(pipe_class_default);\n+%}\n+instruct vcvt2Lto2F(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n+            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n+  %}\n+  ins_encode %{\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n+  %}\n@@ -288,1 +366,1 @@\n-instruct vcvt4Ito4B(vecD dst, vecX src)\n+instruct vcvt2Ito2F(vecD dst, vecD src)\n@@ -290,1 +368,1 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n@@ -292,3 +370,1 @@\n-  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n-            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n-  %}\n+  format %{ \"scvtfv  T2S, $dst, $src\\t# convert 2I to 2F vector\" %}\n@@ -296,2 +372,1 @@\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n-    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+    __ scvtfv(__ T2S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -299,1 +374,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n@@ -302,1 +377,1 @@\n-instruct vcvt4Bto4F(vecX dst, vecD src)\n+instruct vcvt4Ito4F(vecX dst, vecX src)\n@@ -305,4 +380,4 @@\n-  match(Set dst (VectorCastB2X src));\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n-            \"sxtl  $dst, T4S, $dst, T4H\\n\\t\"\n-            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"scvtfv  T4S, $dst, $src\\t# convert 4I to 4F vector\" %}\n+  ins_encode %{\n+    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -310,0 +385,8 @@\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vcvt2Lto2D(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\t# convert 2L to 2D vector\" %}\n@@ -311,3 +394,1 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n-    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -315,1 +396,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n@@ -345,0 +426,15 @@\n+instruct vcvt4Bto4F(vecX dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl    $dst, T8H, $src, T8B\\n\\t\"\n+            \"sxtl    $dst, T4S, $dst, T4H\\n\\t\"\n+            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n+  %}\n+  ins_encode %{\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n+    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -346,1 +442,1 @@\n-instruct vcvt2Ito2F(vecD dst, vecD src)\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n@@ -348,3 +444,5 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"scvtfv  T2S, $dst, $src\\t# convert 2I to 2F vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzs  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n+  %}\n@@ -352,1 +450,13 @@\n-    __ scvtfv(__ T2S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvt2Fto2I(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T2S, $src\\t# convert 2F to 2I vector\" %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n@@ -357,1 +467,1 @@\n-instruct vcvt4Ito4F(vecX dst, vecX src)\n+instruct vcvt4Fto4I(vecX dst, vecX src)\n@@ -359,3 +469,3 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"scvtfv  T4S, $dst, $src\\t# convert 4I to 4F vector\" %}\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\t# convert 4F to 4I vector\" %}\n@@ -363,1 +473,1 @@\n-    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n@@ -368,1 +478,1 @@\n-instruct vcvt2Lto2D(vecX dst, vecX src)\n+instruct vcvt2Dto2L(vecX dst, vecX src)\n@@ -370,3 +480,3 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\t# convert 2L to 2D vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzs  $dst, T2D, $src\\t# convert 2D to 2L vector\" %}\n@@ -374,1 +484,1 @@\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n@@ -379,0 +489,43 @@\n+instruct vcvt4Fto4S(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\t# convert 4F to 4S vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vcvt2Dto2I(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzs  $dst, T2D, $src\\n\\t\"\n+            \"xtn     $dst, T2S, $dst, T2D\\t# convert 2D to 2I vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+instruct vcvt4Fto4B(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n+            \"xtn     $dst, T8B, $dst, T8H\\t# convert 4F to 4B vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -401,14 +554,0 @@\n-instruct vcvt2Lto2F(vecD dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n-            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n-  %}\n-  ins_encode %{\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n-    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -1890,1 +2029,1 @@\n-            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\\n\\t\"\n+            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\"\n@@ -4022,1 +4161,1 @@\n-            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":212,"deletions":73,"binary":false,"changes":285,"status":"modified"},{"patch":"@@ -98,2 +98,2 @@\n-\n-instruct reinterpretD2X(vecX dst, vecD src)\n+define(`REINTERPRET_DX', `\n+instruct reinterpret$1`'2$2`'(vec$2 dst, vec$1 src)\n@@ -101,2 +101,2 @@\n-  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 16 &&\n-            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 8);\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == $3 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == $4);\n@@ -105,1 +105,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# D2X\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# $1 to $2\" %}\n@@ -107,8 +107,4 @@\n-    \/\/ If registers are the same, no register move is required - the\n-    \/\/ upper 64 bits of 'src' are expected to have been initialized\n-    \/\/ to zero.\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n+    \/\/ The higher 64-bits of the \"dst\" register must be cleared to zero.\n+    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg),\n+           as_FloatRegister($src$$reg));\n@@ -117,3 +113,7 @@\n-%}\n-\n-instruct reinterpretX2D(vecD dst, vecX src)\n+%}')dnl\n+dnl            $1 $2 $3  $4\n+REINTERPRET_DX(D, X, 16, 8)\n+REINTERPRET_DX(X, D, 8,  16)\n+dnl\n+define(`REINTERPRET_SX', `\n+instruct reinterpret$1`'2$2`'(vec$3 dst, vec$4 src)\n@@ -121,2 +121,2 @@\n-  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 8 &&\n-            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 16);\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == $5 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == $6);\n@@ -125,1 +125,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# X2D\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# $1 to $2\" %}\n@@ -127,5 +127,2 @@\n-    \/\/ Resize the vector from 128-bits to 64-bits. The higher 64-bits of\n-    \/\/ the \"dst\" register must be cleared to zero.\n-    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg),\n-           as_FloatRegister($src$$reg));\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dup(as_FloatRegister($dst$$reg), __ S, as_FloatRegister($src$$reg));\n@@ -133,2 +130,8 @@\n-  ins_pipe(vlogical64);\n-%}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl            $1 $2 $3 $4 $5  $6\n+REINTERPRET_SX(S, X, X, D, 16, 4)\n+REINTERPRET_SX(X, S, D, X, 4,  16)\n+REINTERPRET_SX(S, D, D, D, 8,  4)\n+REINTERPRET_SX(D, S, D, D, 4,  8)\n+dnl\n@@ -150,1 +153,0 @@\n-VECTOR_CAST_I2I(4, B, S, D, D, sxtl, 8B, 8H)\n@@ -152,1 +154,1 @@\n-VECTOR_CAST_I2I(4, S, B, D, D, xtn,  8H, 8B)\n+VECTOR_CAST_I2I(4, B, S, D, D, sxtl, 8B, 8H)\n@@ -154,0 +156,1 @@\n+VECTOR_CAST_I2I(4, S, B, D, D, xtn,  8H, 8B)\n@@ -159,2 +162,2 @@\n-define(`VECTOR_CAST_B2I', `\n-instruct vcvt4$1to4$2`'(vec$3 dst, vec$4 src)\n+define(`VECTOR_CAST_I2I_L', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n@@ -162,4 +165,4 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n-  match(Set dst (VectorCast$1`'2X src));\n-  format %{ \"$5  $dst, T$7, $src, T$6\\n\\t\"\n-            \"$5  $dst, T$9, $dst, T$8\\t# convert 4$1 to 4$2 vector\"\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"$6  $dst, T$8,  $src, T$7\\n\\t\"\n+            \"$6  $dst, T$10, $dst, T$9\\t# convert $1$2 to $1$3 vector\"\n@@ -168,2 +171,19 @@\n-    __ $5(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($src$$reg), __ T$6);\n-    __ $5(as_FloatRegister($dst$$reg), __ T$9, as_FloatRegister($dst$$reg), __ T$8);\n+    __ $6(as_FloatRegister($dst$$reg), __ T$8, as_FloatRegister($src$$reg), __ T$7);\n+    __ $6(as_FloatRegister($dst$$reg), __ T$10, as_FloatRegister($dst$$reg), __ T$9);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6    $7  $8  $9  $10\n+VECTOR_CAST_I2I_L(4, I, B, D, X, xtn,  4S, 4H, 8H, 8B)\n+VECTOR_CAST_I2I_L(4, B, I, X, D, sxtl, 8B, 8H, 4H, 4S)\n+dnl\n+instruct vcvt2Lto2F(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n+            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n+  %}\n+  ins_encode %{\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n@@ -172,0 +192,12 @@\n+%}\n+dnl\n+define(`VECTOR_CAST_I2F', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$4 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"scvtfv  T$5, $dst, $src\\t# convert $1$2 to $1$3 vector\" %}\n+  ins_encode %{\n+    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n@@ -173,4 +205,23 @@\n-dnl             $1 $2 $3 $4 $5    $6  $7  $8  $9\n-VECTOR_CAST_B2I(B, I, X, D, sxtl, 8B, 8H, 4H, 4S)\n-VECTOR_CAST_B2I(I, B, D, X, xtn,  4S, 4H, 8H, 8B)\n-\n+dnl             $1 $2 $3 $4 $5\n+VECTOR_CAST_I2F(2, I, F, D, 2S)\n+VECTOR_CAST_I2F(4, I, F, X, 4S)\n+VECTOR_CAST_I2F(2, L, D, X, 2D)\n+dnl\n+define(`VECTOR_CAST_I2F_L', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"sxtl    $dst, T$7, $src, T$6\\n\\t\"\n+            \"scvtfv  T$7, $dst, $dst\\t# convert $1$2 to $1$3 vector\"\n+  %}\n+  ins_encode %{\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($src$$reg), __ T$6);\n+    __ scvtfv(__ T$7, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6  $7\n+VECTOR_CAST_I2F_L(4, S, F, X, D, 4H, 4S)\n+VECTOR_CAST_I2F_L(2, I, D, X, D, 2S, 2D)\n+dnl\n@@ -181,2 +232,2 @@\n-  format %{ \"sxtl  $dst, T8H, $src, T8B\\n\\t\"\n-            \"sxtl  $dst, T4S, $dst, T4H\\n\\t\"\n+  format %{ \"sxtl    $dst, T8H, $src, T8B\\n\\t\"\n+            \"sxtl    $dst, T4S, $dst, T4H\\n\\t\"\n@@ -192,3 +243,2 @@\n-dnl\n-define(`VECTOR_CAST_I2F_L', `\n-instruct vcvt$1$2to$1$3`'(vecX dst, vecD src)\n+\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n@@ -196,4 +246,4 @@\n-  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n-  match(Set dst (VectorCast$2`'2X src));\n-  format %{ \"sxtl    $dst, T$5, $src, T$4\\n\\t\"\n-            \"scvtfv  T$5, $dst, $dst\\t# convert $1$2 to $1$3 vector\"\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzs  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n@@ -202,2 +252,2 @@\n-    __ sxtl(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg), __ T$4);\n-    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n@@ -206,4 +256,1 @@\n-%}')dnl\n-dnl               $1 $2 $3 $4  $5\n-VECTOR_CAST_I2F_L(4, S, F, 4H, 4S)\n-VECTOR_CAST_I2F_L(2, I, D, 2S, 2D)\n+%}\n@@ -211,1 +258,1 @@\n-define(`VECTOR_CAST_I2F', `\n+define(`VECTOR_CAST_F2I', `\n@@ -216,1 +263,1 @@\n-  format %{ \"scvtfv  T$5, $dst, $src\\t# convert $1$2 to $1$3 vector\" %}\n+  format %{ \"fcvtzs  $dst, T$5, $src\\t# convert $1$2 to $1$3 vector\" %}\n@@ -218,1 +265,1 @@\n-    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg));\n@@ -223,3 +270,37 @@\n-VECTOR_CAST_I2F(2, I, F, D, 2S)\n-VECTOR_CAST_I2F(4, I, F, X, 4S)\n-VECTOR_CAST_I2F(2, L, D, X, 2D)\n+VECTOR_CAST_F2I(2, F, I, D, 2S)\n+VECTOR_CAST_F2I(4, F, I, X, 4S)\n+VECTOR_CAST_F2I(2, D, L, X, 2D)\n+dnl\n+define(`VECTOR_CAST_F2I_L', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"fcvtzs  $dst, T$6, $src\\n\\t\"\n+            \"xtn     $dst, T$7, $dst, T$6\\t# convert $1$2 to $1$3 vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T$6, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($dst$$reg), __ T$6);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6  $7\n+VECTOR_CAST_F2I_L(4, F, S, D, X, 4S, 4H)\n+VECTOR_CAST_F2I_L(2, D, I, D, X, 2D, 2S)\n+dnl\n+instruct vcvt4Fto4B(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n+            \"xtn     $dst, T8B, $dst, T8H\\t# convert 4F to 4B vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n@@ -243,14 +324,0 @@\n-instruct vcvt2Lto2F(vecD dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n-            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n-  %}\n-  ins_encode %{\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n-    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -912,1 +979,1 @@\n-            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\\n\\t\"\n+            \"mov    $dst,  T2D,   1, $tmp2\\t# insert into vector(2L)\"\n@@ -1785,1 +1852,1 @@\n-            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":144,"deletions":77,"binary":false,"changes":221,"status":"modified"},{"patch":"@@ -2826,0 +2826,10 @@\n+  \/\/ Advanced SIMD scalar copy\n+  void dup(FloatRegister Vd, SIMD_RegVariant T, FloatRegister Vn, int index = 0)\n+  {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    f(0b01011110000, 31, 21);\n+    f((1 << T) | (index << (T + 1)), 20, 16);\n+    f(0b000001, 15, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n@@ -2904,0 +2914,1 @@\n+  INSN(fcvtzs, 0, 0b10, 0b01, 0b11011);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1525,0 +1525,1 @@\n+                        [\"dup\",    \"__ dup(v0, __ S, v1);\",                              \"dup\\ts0, v1.s[0]\"],\n@@ -1538,0 +1539,1 @@\n+                        [\"fcvtzs\", \"__ fcvtzs(v0, __ T4S, v1);\",                         \"fcvtzs\\tv0.4s, v1.4s\"],\n@@ -1753,1 +1755,2 @@\n-print \"\\n  };\"\n+print\n+print \"  };\"\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -715,0 +715,1 @@\n+    __ dup(v0, __ S, v1);                              \/\/       dup     s0, v1.s[0]\n@@ -728,0 +729,1 @@\n+    __ fcvtzs(v0, __ T4S, v1);                         \/\/       fcvtzs  v0.4s, v1.4s\n@@ -759,0 +761,1 @@\n+    __ sve_ld1h(z10, __ H, p0, Address(r4, r2, Address::lsl(1))); \/\/    ld1h    {z10.h}, p0\/z, [x4, x2, LSL 1]\n@@ -1045,7 +1048,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400034c,     0x94000000,\n-    0x97ffffd4,     0x94000349,     0x3400000a,     0x34fffa2a,\n-    0x340068ca,     0x35000008,     0x35fff9c8,     0x35006868,\n-    0xb400000b,     0xb4fff96b,     0xb400680b,     0xb500001d,\n-    0xb5fff91d,     0xb50067bd,     0x10000013,     0x10fff8b3,\n-    0x10006753,     0x90000013,     0x36300016,     0x3637f836,\n-    0x363066d6,     0x3758000c,     0x375ff7cc,     0x3758666c,\n+    0x14000000,     0x17ffffd7,     0x1400034f,     0x94000000,\n+    0x97ffffd4,     0x9400034c,     0x3400000a,     0x34fffa2a,\n+    0x3400692a,     0x35000008,     0x35fff9c8,     0x350068c8,\n+    0xb400000b,     0xb4fff96b,     0xb400686b,     0xb500001d,\n+    0xb5fff91d,     0xb500681d,     0x10000013,     0x10fff8b3,\n+    0x100067b3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36306736,     0x3758000c,     0x375ff7cc,     0x375866cc,\n@@ -1056,13 +1059,13 @@\n-    0x54006440,     0x54000001,     0x54fff541,     0x540063e1,\n-    0x54000002,     0x54fff4e2,     0x54006382,     0x54000002,\n-    0x54fff482,     0x54006322,     0x54000003,     0x54fff423,\n-    0x540062c3,     0x54000003,     0x54fff3c3,     0x54006263,\n-    0x54000004,     0x54fff364,     0x54006204,     0x54000005,\n-    0x54fff305,     0x540061a5,     0x54000006,     0x54fff2a6,\n-    0x54006146,     0x54000007,     0x54fff247,     0x540060e7,\n-    0x54000008,     0x54fff1e8,     0x54006088,     0x54000009,\n-    0x54fff189,     0x54006029,     0x5400000a,     0x54fff12a,\n-    0x54005fca,     0x5400000b,     0x54fff0cb,     0x54005f6b,\n-    0x5400000c,     0x54fff06c,     0x54005f0c,     0x5400000d,\n-    0x54fff00d,     0x54005ead,     0x5400000e,     0x54ffefae,\n-    0x54005e4e,     0x5400000f,     0x54ffef4f,     0x54005def,\n+    0x540064a0,     0x54000001,     0x54fff541,     0x54006441,\n+    0x54000002,     0x54fff4e2,     0x540063e2,     0x54000002,\n+    0x54fff482,     0x54006382,     0x54000003,     0x54fff423,\n+    0x54006323,     0x54000003,     0x54fff3c3,     0x540062c3,\n+    0x54000004,     0x54fff364,     0x54006264,     0x54000005,\n+    0x54fff305,     0x54006205,     0x54000006,     0x54fff2a6,\n+    0x540061a6,     0x54000007,     0x54fff247,     0x54006147,\n+    0x54000008,     0x54fff1e8,     0x540060e8,     0x54000009,\n+    0x54fff189,     0x54006089,     0x5400000a,     0x54fff12a,\n+    0x5400602a,     0x5400000b,     0x54fff0cb,     0x54005fcb,\n+    0x5400000c,     0x54fff06c,     0x54005f6c,     0x5400000d,\n+    0x54fff00d,     0x54005f0d,     0x5400000e,     0x54ffefae,\n+    0x54005eae,     0x5400000f,     0x54ffef4f,     0x54005e4f,\n@@ -1100,1 +1103,1 @@\n-    0xbd1b1869,     0x58004e3b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x58004e9b,     0x1800000b,     0xf8945060,\n@@ -1185,72 +1188,73 @@\n-    0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,     0x4e071fe1,\n-    0x4e042c20,     0x4e062c20,     0x4e052c20,     0x4e083c20,\n-    0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,     0x9eae0020,\n-    0x4cc0ac3f,     0x05a08020,     0x05104fe0,     0x05505001,\n-    0x05906fe2,     0x05d03005,     0x05101fea,     0x05901feb,\n-    0x04b0e3e0,     0x0470e7e1,     0x042f9c20,     0x043f9c35,\n-    0x047f9c20,     0x04ff9c20,     0x04299420,     0x04319160,\n-    0x0461943e,     0x04a19020,     0x042053ff,     0x047f5401,\n-    0x25208028,     0x2538cfe0,     0x2578d001,     0x25b8efe2,\n-    0x25f8f007,     0x2538dfea,     0x25b8dfeb,     0xa400a3e0,\n-    0xa420a7e0,     0xa4484be0,     0xa467afe0,     0xa4a8a7ea,\n-    0xa547a814,     0xa4084ffe,     0xa55c53e0,     0xa5e1540b,\n-    0xe400fbf6,     0xe408ffff,     0xe420e7e0,     0xe4484be0,\n-    0xe460efe0,     0xe547e400,     0xe4014be0,     0xe4a84fe0,\n-    0xe5f15000,     0x858043e0,     0x85a043ff,     0xe59f5d08,\n-    0x0420e3e9,     0x0460e3ea,     0x04a0e3eb,     0x04e0e3ec,\n-    0x25104042,     0x25104871,     0x25904861,     0x25904c92,\n-    0x05344020,     0x05744041,     0x05b44062,     0x05f44083,\n-    0x252c8840,     0x253c1420,     0x25681572,     0x25a21ce3,\n-    0x25ea1e34,     0x0522c020,     0x05e6c0a4,     0x2401a001,\n-    0x2443a051,     0x24858881,     0x24c78cd1,     0x24850891,\n-    0x24c70cc1,     0x250f9001,     0x25508051,     0x25802491,\n-    0x25df28c1,     0x25850c81,     0x251e10d1,     0x65816001,\n-    0x65c36051,     0x65854891,     0x65c74cc1,     0x05733820,\n-    0x05b238a4,     0x05f138e6,     0x0570396a,     0x65d0a001,\n-    0x65d6a443,     0x65d4a826,     0x6594ac26,     0x6554ac26,\n-    0x6556ac26,     0x6552ac26,     0x65cbac85,     0x65caac01,\n-    0x65dea833,     0x659ca509,     0x65d8a801,     0x65dcac01,\n-    0x655cb241,     0x0520a1e0,     0x0521a601,     0x052281e0,\n-    0x05238601,     0x04a14026,     0x0568aca7,     0x05b23230,\n-    0x853040af,     0xc5b040af,     0xe57080af,     0xe5b080af,\n-    0x1e601000,     0x1e603000,     0x1e621000,     0x1e623000,\n-    0x1e641000,     0x1e643000,     0x1e661000,     0x1e663000,\n-    0x1e681000,     0x1e683000,     0x1e6a1000,     0x1e6a3000,\n-    0x1e6c1000,     0x1e6c3000,     0x1e6e1000,     0x1e6e3000,\n-    0x1e701000,     0x1e703000,     0x1e721000,     0x1e723000,\n-    0x1e741000,     0x1e743000,     0x1e761000,     0x1e763000,\n-    0x1e781000,     0x1e783000,     0x1e7a1000,     0x1e7a3000,\n-    0x1e7c1000,     0x1e7c3000,     0x1e7e1000,     0x1e7e3000,\n-    0xf8208193,     0xf83101b6,     0xf83c13fe,     0xf821239a,\n-    0xf824309e,     0xf826535e,     0xf8304109,     0xf82c7280,\n-    0xf8216058,     0xf8a08309,     0xf8ba03d0,     0xf8a312ea,\n-    0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,     0xf8a2418a,\n-    0xf8ac71af,     0xf8a26287,     0xf8fa8090,     0xf8e20184,\n-    0xf8f01215,     0xf8f022ab,     0xf8f7334c,     0xf8f751dc,\n-    0xf8eb4038,     0xf8ec715f,     0xf8f06047,     0xf863826d,\n-    0xf8710070,     0xf86113cb,     0xf86521e8,     0xf87d301e,\n-    0xf8745287,     0xf87742bc,     0xf87b70b9,     0xf8616217,\n-    0xb83f8185,     0xb82901fc,     0xb83d13f6,     0xb83320bf,\n-    0xb82e33f0,     0xb830529b,     0xb830416c,     0xb82973c6,\n-    0xb831639b,     0xb8be8147,     0xb8b4008a,     0xb8b81231,\n-    0xb8b623a3,     0xb8af3276,     0xb8b35056,     0xb8af4186,\n-    0xb8b071ab,     0xb8b763c1,     0xb8f38225,     0xb8e202d0,\n-    0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,     0xb8ff5278,\n-    0xb8f14389,     0xb8fb70ef,     0xb8f563f7,     0xb87983e2,\n-    0xb87b0150,     0xb8771073,     0xb8702320,     0xb87a3057,\n-    0xb870508c,     0xb87c43be,     0xb87070db,     0xb86961fd,\n-    0xce273c87,     0xce080ac9,     0xce7e8e9b,     0xce808b45,\n-    0xce79806e,     0xce758768,     0xcec0835a,     0xce608ad8,\n-    0x043100c4,     0x046105e3,     0x65c900a6,     0x65d60a87,\n-    0x65c80545,     0x0416a63e,     0x04001f8b,     0x0450979a,\n-    0x04dabe0d,     0x045381a5,     0x04918b4f,     0x049006cb,\n-    0x0497a264,     0x045eadd1,     0x04881062,     0x040a04d7,\n-    0x04810f71,     0x04dca450,     0x65c084c3,     0x65cd8d93,\n-    0x65c69a68,     0x65878ae0,     0x65c29db3,     0x049da0e6,\n-    0x6582b911,     0x65c0b6d6,     0x65c1a1e2,     0x65cda494,\n-    0x65c18107,     0x65af1493,     0x65e52b36,     0x65ab4ed0,\n-    0x65f06a8d,     0x0451448f,     0x049c7c86,     0x0429335d,\n-    0x04bc3162,     0x047a3027,     0x04e831d1,     0x05a56b15,\n-    0x05b66e35,     0x041a367d,     0x041832e4,     0x04d926f3,\n-    0x04482113,     0x04ca3a2e,     0x658727d5,     0x6586358a,\n-    0x65d82709,     0x044138c4,\n+    0x5e040420,     0x4e081fe1,     0x4e0c1fe1,     0x4e0a1fe1,\n+    0x4e071fe1,     0x4e042c20,     0x4e062c20,     0x4e052c20,\n+    0x4e083c20,     0x0e0c3c20,     0x0e0a3c20,     0x0e073c20,\n+    0x9eae0020,     0x4cc0ac3f,     0x4ea1b820,     0x05a08020,\n+    0x05104fe0,     0x05505001,     0x05906fe2,     0x05d03005,\n+    0x05101fea,     0x05901feb,     0x04b0e3e0,     0x0470e7e1,\n+    0x042f9c20,     0x043f9c35,     0x047f9c20,     0x04ff9c20,\n+    0x04299420,     0x04319160,     0x0461943e,     0x04a19020,\n+    0x042053ff,     0x047f5401,     0x25208028,     0x2538cfe0,\n+    0x2578d001,     0x25b8efe2,     0x25f8f007,     0x2538dfea,\n+    0x25b8dfeb,     0xa400a3e0,     0xa420a7e0,     0xa4484be0,\n+    0xa467afe0,     0xa4a8a7ea,     0xa4a2408a,     0xa547a814,\n+    0xa4084ffe,     0xa55c53e0,     0xa5e1540b,     0xe400fbf6,\n+    0xe408ffff,     0xe420e7e0,     0xe4484be0,     0xe460efe0,\n+    0xe547e400,     0xe4014be0,     0xe4a84fe0,     0xe5f15000,\n+    0x858043e0,     0x85a043ff,     0xe59f5d08,     0x0420e3e9,\n+    0x0460e3ea,     0x04a0e3eb,     0x04e0e3ec,     0x25104042,\n+    0x25104871,     0x25904861,     0x25904c92,     0x05344020,\n+    0x05744041,     0x05b44062,     0x05f44083,     0x252c8840,\n+    0x253c1420,     0x25681572,     0x25a21ce3,     0x25ea1e34,\n+    0x0522c020,     0x05e6c0a4,     0x2401a001,     0x2443a051,\n+    0x24858881,     0x24c78cd1,     0x24850891,     0x24c70cc1,\n+    0x250f9001,     0x25508051,     0x25802491,     0x25df28c1,\n+    0x25850c81,     0x251e10d1,     0x65816001,     0x65c36051,\n+    0x65854891,     0x65c74cc1,     0x05733820,     0x05b238a4,\n+    0x05f138e6,     0x0570396a,     0x65d0a001,     0x65d6a443,\n+    0x65d4a826,     0x6594ac26,     0x6554ac26,     0x6556ac26,\n+    0x6552ac26,     0x65cbac85,     0x65caac01,     0x65dea833,\n+    0x659ca509,     0x65d8a801,     0x65dcac01,     0x655cb241,\n+    0x0520a1e0,     0x0521a601,     0x052281e0,     0x05238601,\n+    0x04a14026,     0x0568aca7,     0x05b23230,     0x853040af,\n+    0xc5b040af,     0xe57080af,     0xe5b080af,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8208193,\n+    0xf83101b6,     0xf83c13fe,     0xf821239a,     0xf824309e,\n+    0xf826535e,     0xf8304109,     0xf82c7280,     0xf8216058,\n+    0xf8a08309,     0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,\n+    0xf8a2310b,     0xf8aa522f,     0xf8a2418a,     0xf8ac71af,\n+    0xf8a26287,     0xf8fa8090,     0xf8e20184,     0xf8f01215,\n+    0xf8f022ab,     0xf8f7334c,     0xf8f751dc,     0xf8eb4038,\n+    0xf8ec715f,     0xf8f06047,     0xf863826d,     0xf8710070,\n+    0xf86113cb,     0xf86521e8,     0xf87d301e,     0xf8745287,\n+    0xf87742bc,     0xf87b70b9,     0xf8616217,     0xb83f8185,\n+    0xb82901fc,     0xb83d13f6,     0xb83320bf,     0xb82e33f0,\n+    0xb830529b,     0xb830416c,     0xb82973c6,     0xb831639b,\n+    0xb8be8147,     0xb8b4008a,     0xb8b81231,     0xb8b623a3,\n+    0xb8af3276,     0xb8b35056,     0xb8af4186,     0xb8b071ab,\n+    0xb8b763c1,     0xb8f38225,     0xb8e202d0,     0xb8ed12aa,\n+    0xb8fd219b,     0xb8fb3023,     0xb8ff5278,     0xb8f14389,\n+    0xb8fb70ef,     0xb8f563f7,     0xb87983e2,     0xb87b0150,\n+    0xb8771073,     0xb8702320,     0xb87a3057,     0xb870508c,\n+    0xb87c43be,     0xb87070db,     0xb86961fd,     0xce273c87,\n+    0xce080ac9,     0xce7e8e9b,     0xce808b45,     0xce79806e,\n+    0xce758768,     0xcec0835a,     0xce608ad8,     0x043100c4,\n+    0x046105e3,     0x65c900a6,     0x65d60a87,     0x65c80545,\n+    0x0416a63e,     0x04001f8b,     0x0450979a,     0x04dabe0d,\n+    0x045381a5,     0x04918b4f,     0x049006cb,     0x0497a264,\n+    0x045eadd1,     0x04881062,     0x040a04d7,     0x04810f71,\n+    0x04dca450,     0x65c084c3,     0x65cd8d93,     0x65c69a68,\n+    0x65878ae0,     0x65c29db3,     0x049da0e6,     0x6582b911,\n+    0x65c0b6d6,     0x65c1a1e2,     0x65cda494,     0x65c18107,\n+    0x65af1493,     0x65e52b36,     0x65ab4ed0,     0x65f06a8d,\n+    0x0451448f,     0x049c7c86,     0x0429335d,     0x04bc3162,\n+    0x047a3027,     0x04e831d1,     0x05a56b15,     0x05b66e35,\n+    0x041a367d,     0x041832e4,     0x04d926f3,     0x04482113,\n+    0x04ca3a2e,     0x658727d5,     0x6586358a,     0x65d82709,\n+    0x044138c4,\n@@ -1259,1 +1263,0 @@\n-\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":97,"deletions":94,"binary":false,"changes":191,"status":"modified"}]}