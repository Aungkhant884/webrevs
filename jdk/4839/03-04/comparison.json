{"files":[{"patch":"@@ -2428,3 +2428,0 @@\n-    \/\/ We don't have VectorReinterpret with bit_size less than 64 support for\n-    \/\/ now, even for byte type. To be refined with fully VectorCast support.\n-    case Op_VectorReinterpret:\n@@ -2444,4 +2441,3 @@\n-      if (vlen < 4) {\n-        return false;\n-      }\n-      break;\n+    \/\/ We're not going to have VectorCast with bit_size less than 64 bits\n+    \/\/ support except for byte vector with vlen more than or equal to 4.\n+    case Op_VectorCastB2X:\n@@ -2449,1 +2445,1 @@\n-      if (vlen < 4 || bit_size < 64) {\n+      if (vlen < 4) {\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# S2X\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# S to X\" %}\n@@ -187,1 +187,43 @@\n-    \/\/ The upper bits of \"src\" are expected to have been initialized to zero.\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reinterpretX2S(vecD dst, vecX src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 4 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 16);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# X to S\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reinterpretS2D(vecD dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 8 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# S to D\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n+    __ dups(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reinterpretD2S(vecD dst, vecD src)\n+%{\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 4 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 8);\n+  match(Set dst (VectorReinterpret src));\n+  ins_cost(INSN_COST);\n+  format %{ \" # reinterpret $dst,$src\\t# D to S\" %}\n+  ins_encode %{\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n@@ -206,0 +248,11 @@\n+instruct vcvt4Bto4S(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl  $dst, T8H, $src, T8B\\t# convert 4B to 4S vector\" %}\n+  ins_encode %{\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -217,0 +270,11 @@\n+instruct vcvt4Sto4B(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastS2X src));\n+  format %{ \"xtn  $dst, T8B, $src, T8H\\t# convert 4S to 4B vector\" %}\n+  ins_encode %{\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n@@ -265,1 +329,1 @@\n-  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n+  format %{ \"xtn  $dst, T4H,  $src, T4S\\n\\t\"\n@@ -272,1 +336,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n@@ -275,2 +339,1 @@\n-\n-instruct vcvt4Fto4B(vecD dst, vecX src)\n+instruct vcvt4Bto4I(vecX dst, vecD src)\n@@ -278,5 +341,4 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorCastF2X src));\n-  format %{ \"fcvtzv  $dst, T4S, $src\\n\\t\"\n-            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n-            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl  $dst, T8H,  $src, T8B\\n\\t\"\n+            \"sxtl  $dst, T4S, $dst, T4H\\t# convert 4B to 4I vector\"\n@@ -285,3 +347,15 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n-    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+instruct vcvt2Lto2F(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n+            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n+  %}\n+  ins_encode %{\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n@@ -292,1 +366,1 @@\n-instruct vcvt2Dto2S(vecD dst, vecX src)\n+instruct vcvt2Ito2F(vecD dst, vecD src)\n@@ -294,5 +368,5 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorCastD2X src));\n-  format %{ \"fcvtzv  $dst, T2D, $src\\n\\t\"\n-            \"xtn     $dst, T2S, $dst, T2D\\n\\t\"\n-            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 2D to 2S vector\"\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"scvtfv  T2S, $dst, $src\\t# convert 2I to 2F vector\" %}\n+  ins_encode %{\n+    __ scvtfv(__ T2S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -300,0 +374,8 @@\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vcvt4Ito4F(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastI2X src));\n+  format %{ \"scvtfv  T4S, $dst, $src\\t# convert 4I to 4F vector\" %}\n@@ -301,3 +383,1 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -305,1 +385,12 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vcvt2Lto2D(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\t# convert 2L to 2D vector\" %}\n+  ins_encode %{\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n@@ -335,2 +426,1 @@\n-\n-instruct vcvt4Fto4S(vecD dst, vecX src)\n+instruct vcvt4Bto4F(vecX dst, vecD src)\n@@ -338,4 +428,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (VectorCastF2X src));\n-  format %{ \"fcvtzv  $dst, T4S, $src\\n\\t\"\n-            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 4F to 4S vector\"\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl    $dst, T8H, $src, T8B\\n\\t\"\n+            \"sxtl    $dst, T4S, $dst, T4H\\n\\t\"\n+            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n@@ -344,2 +435,3 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n+    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n@@ -350,1 +442,1 @@\n-instruct vcvt2Dto2I(vecD dst, vecX src)\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n@@ -352,4 +444,4 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorCastD2X src));\n-  format %{ \"fcvtzv  $dst, T2D, $src\\n\\t\"\n-            \"xtn     $dst, T2S, $dst, T2D\\n\\t# convert 2D to 2I vector\"\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzs  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n@@ -358,2 +450,2 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n@@ -364,1 +456,1 @@\n-instruct vcvt2Ito2F(vecD dst, vecD src)\n+instruct vcvt2Fto2I(vecD dst, vecD src)\n@@ -366,3 +458,3 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"scvtfv  T2S, $dst, $src\\t# convert 2I to 2F vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T2S, $src\\t# convert 2F to 2I vector\" %}\n@@ -370,1 +462,1 @@\n-    __ scvtfv(__ T2S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n@@ -375,1 +467,1 @@\n-instruct vcvt4Ito4F(vecX dst, vecX src)\n+instruct vcvt4Fto4I(vecX dst, vecX src)\n@@ -377,3 +469,3 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"scvtfv  T4S, $dst, $src\\t# convert 4I to 4F vector\" %}\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\t# convert 4F to 4I vector\" %}\n@@ -381,1 +473,1 @@\n-    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n@@ -386,1 +478,1 @@\n-instruct vcvt2Lto2D(vecX dst, vecX src)\n+instruct vcvt2Dto2L(vecX dst, vecX src)\n@@ -388,3 +480,3 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\t# convert 2L to 2D vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzs  $dst, T2D, $src\\t# convert 2D to 2L vector\" %}\n@@ -392,1 +484,1 @@\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n@@ -397,1 +489,1 @@\n-instruct vcvt2Fto2I(vecD dst, vecD src)\n+instruct vcvt4Fto4S(vecD dst, vecX src)\n@@ -399,1 +491,1 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n@@ -401,1 +493,3 @@\n-  format %{ \"fcvtzv  $dst, T2S, $src\\t# convert 2F to 2I vector\" %}\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t# convert 4F to 4S vector\"\n+  %}\n@@ -403,1 +497,2 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n@@ -405,1 +500,1 @@\n-  ins_pipe(pipe_class_default);\n+  ins_pipe(pipe_slow);\n@@ -408,1 +503,1 @@\n-instruct vcvt4Fto4I(vecX dst, vecX src)\n+instruct vcvt2Dto2I(vecD dst, vecX src)\n@@ -410,3 +505,5 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (VectorCastF2X src));\n-  format %{ \"fcvtzv  $dst, T4S, $src\\t# convert 4F to 4I vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"fcvtzs  $dst, T2D, $src\\n\\t\"\n+            \"xtn     $dst, T2S, $dst, T2D\\n\\t# convert 2D to 2I vector\"\n+  %}\n@@ -414,1 +511,2 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n@@ -416,1 +514,1 @@\n-  ins_pipe(pipe_class_default);\n+  ins_pipe(pipe_slow);\n@@ -418,2 +516,1 @@\n-\n-instruct vcvt2Dto2L(vecX dst, vecX src)\n+instruct vcvt4Fto4B(vecD dst, vecX src)\n@@ -421,3 +518,6 @@\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorCastD2X src));\n-  format %{ \"fcvtzv  $dst, T2D, $src\\t# convert 2D to 2L vector\" %}\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n+            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n+  %}\n@@ -425,1 +525,3 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n@@ -427,1 +529,1 @@\n-  ins_pipe(pipe_class_default);\n+  ins_pipe(pipe_slow);\n@@ -452,28 +554,0 @@\n-instruct vcvt2Lto2F(vecD dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n-            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n-  %}\n-  ins_encode %{\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n-    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcvt2Fto2L(vecX dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorCastF2X src));\n-  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n-            \"fcvtzv  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n-  %}\n-  ins_encode %{\n-    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":174,"deletions":100,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-\n-instruct reinterpretS2X(vecX dst, vecD src)\n+define(`REINTERPRET_SX', `\n+instruct reinterpret$1`'2$2`'(vec$3 dst, vec$4 src)\n@@ -121,2 +121,2 @@\n-  predicate(n->bottom_type()->is_vect()->length_in_bytes() == 16 &&\n-            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == 4);\n+  predicate(n->bottom_type()->is_vect()->length_in_bytes() == $5 &&\n+            n->in(1)->bottom_type()->is_vect()->length_in_bytes() == $6);\n@@ -125,1 +125,1 @@\n-  format %{ \" # reinterpret $dst,$src\\t# S2X\" %}\n+  format %{ \" # reinterpret $dst,$src\\t# $1 to $2\" %}\n@@ -127,1 +127,1 @@\n-    \/\/ The upper bits of \"src\" are expected to have been initialized to zero.\n+    \/\/ The higher bits of the \"dst\" register must be cleared to zero.\n@@ -131,1 +131,7 @@\n-%}\n+%}')dnl\n+dnl            $1 $2 $3 $4 $5  $6\n+REINTERPRET_SX(S, X, X, D, 16, 4)\n+REINTERPRET_SX(X, S, D, X, 4,  16)\n+REINTERPRET_SX(S, D, D, D, 8,  4)\n+REINTERPRET_SX(D, S, D, D, 4,  8)\n+dnl\n@@ -148,0 +154,1 @@\n+VECTOR_CAST_I2I(4, B, S, D, D, sxtl, 8B, 8H)\n@@ -149,0 +156,1 @@\n+VECTOR_CAST_I2I(4, S, B, D, D, xtn,  8H, 8B)\n@@ -154,2 +162,2 @@\n-\n-instruct vcvt4Ito4B(vecD dst, vecX src)\n+define(`VECTOR_CAST_I2I_L', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n@@ -157,4 +165,4 @@\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n-  match(Set dst (VectorCastI2X src));\n-  format %{ \"xtn  $dst, T4H, $src, T4S\\n\\t\"\n-            \"xtn  $dst, T8B, $dst, T8H\\t# convert 4I to 4B vector\"\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"$6  $dst, T$8,  $src, T$7\\n\\t\"\n+            \"$6  $dst, T$10, $dst, T$9\\t# convert $1$2 to $1$3 vector\"\n@@ -163,2 +171,19 @@\n-    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg), __ T4S);\n-    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+    __ $6(as_FloatRegister($dst$$reg), __ T$8, as_FloatRegister($src$$reg), __ T$7);\n+    __ $6(as_FloatRegister($dst$$reg), __ T$10, as_FloatRegister($dst$$reg), __ T$9);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6    $7  $8  $9  $10\n+VECTOR_CAST_I2I_L(4, I, B, D, X, xtn,  4S, 4H, 8H, 8B)\n+VECTOR_CAST_I2I_L(4, B, I, X, D, sxtl, 8B, 8H, 4H, 4S)\n+dnl\n+instruct vcvt2Lto2F(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastL2X src));\n+  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n+            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n+  %}\n+  ins_encode %{\n+    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n@@ -168,1 +193,0 @@\n-\n@@ -170,2 +194,2 @@\n-define(`VECTOR_CAST_F2I_LL', `\n-instruct vcvt$1$2to$1$3`'(vecD dst, vecX src)\n+define(`VECTOR_CAST_I2F', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$4 src)\n@@ -175,4 +199,1 @@\n-  format %{ \"fcvtzv  $dst, T$4, $src\\n\\t\"\n-            \"xtn     $dst, T$5, $dst, T$4\\n\\t\"\n-            \"xtn     $dst, T$7, $dst, T$6\\n\\t# convert $1$2 to $1$3 vector\"\n-  %}\n+  format %{ \"scvtfv  T$5, $dst, $src\\t# convert $1$2 to $1$3 vector\" %}\n@@ -180,3 +201,1 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$4, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($dst$$reg), __ T$4);\n-    __ xtn(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($dst$$reg), __ T$6);\n+    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n@@ -184,1 +203,1 @@\n-  ins_pipe(pipe_slow);\n+  ins_pipe(pipe_class_default);\n@@ -186,3 +205,4 @@\n-dnl                $1 $2 $3 $4  $5  $6  $7\n-VECTOR_CAST_F2I_LL(4, F, B, 4S, 4H, 8H, 8B)\n-VECTOR_CAST_F2I_LL(2, D, S, 2D, 2S, 4S, 4H)\n+dnl             $1 $2 $3 $4 $5\n+VECTOR_CAST_I2F(2, I, F, D, 2S)\n+VECTOR_CAST_I2F(4, I, F, X, 4S)\n+VECTOR_CAST_I2F(2, L, D, X, 2D)\n@@ -208,2 +228,1 @@\n-define(`VECTOR_CAST_F2I_L', `\n-instruct vcvt$1$2to$1$3`'(vecD dst, vecX src)\n+instruct vcvt4Bto4F(vecX dst, vecD src)\n@@ -211,4 +230,5 @@\n-  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n-  match(Set dst (VectorCast$2`'2X src));\n-  format %{ \"fcvtzv  $dst, T$4, $src\\n\\t\"\n-            \"xtn     $dst, T$5, $dst, T$4\\n\\t# convert $1$2 to $1$3 vector\"\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorCastB2X src));\n+  format %{ \"sxtl    $dst, T8H, $src, T8B\\n\\t\"\n+            \"sxtl    $dst, T4S, $dst, T4H\\n\\t\"\n+            \"scvtfv  T4S, $dst, $dst\\t# convert 4B to 4F vector\"\n@@ -217,2 +237,3 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$4, as_FloatRegister($src$$reg));\n-    __ xtn(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($dst$$reg), __ T$4);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg), __ T8B);\n+    __ sxtl(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($dst$$reg), __ T4H);\n+    __ scvtfv(__ T4S, as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n@@ -221,7 +242,3 @@\n-%}')dnl\n-dnl               $1 $2 $3 $4  $5\n-VECTOR_CAST_F2I_L(4, F, S, 4S, 4H)\n-VECTOR_CAST_F2I_L(2, D, I, 2D, 2S)\n-dnl\n-define(`VECTOR_CAST_I2F', `\n-instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$4 src)\n+%}\n+\n+instruct vcvt2Fto2L(vecX dst, vecD src)\n@@ -229,3 +246,5 @@\n-  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n-  match(Set dst (VectorCast$2`'2X src));\n-  format %{ \"scvtfv  T$5, $dst, $src\\t# convert $1$2 to $1$3 vector\" %}\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n+            \"fcvtzs  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n+  %}\n@@ -233,1 +252,2 @@\n-    __ scvtfv(__ T$5, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n+    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n@@ -235,6 +255,2 @@\n-  ins_pipe(pipe_class_default);\n-%}')dnl\n-dnl             $1 $2 $3 $4 $5\n-VECTOR_CAST_I2F(2, I, F, D, 2S)\n-VECTOR_CAST_I2F(4, I, F, X, 4S)\n-VECTOR_CAST_I2F(2, L, D, X, 2D)\n+  ins_pipe(pipe_slow);\n+%}\n@@ -247,1 +263,1 @@\n-  format %{ \"fcvtzv  $dst, T$5, $src\\t# convert $1$2 to $1$3 vector\" %}\n+  format %{ \"fcvtzs  $dst, T$5, $src\\t# convert $1$2 to $1$3 vector\" %}\n@@ -249,1 +265,1 @@\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg));\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T$5, as_FloatRegister($src$$reg));\n@@ -258,0 +274,34 @@\n+define(`VECTOR_CAST_F2I_L', `\n+instruct vcvt$1$2to$1$3`'(vec$4 dst, vec$5 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1 && n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($3));\n+  match(Set dst (VectorCast$2`'2X src));\n+  format %{ \"fcvtzs  $dst, T$6, $src\\n\\t\"\n+            \"xtn     $dst, T$7, $dst, T$6\\n\\t# convert $1$2 to $1$3 vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T$6, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T$7, as_FloatRegister($dst$$reg), __ T$6);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl               $1 $2 $3 $4 $5 $6  $7\n+VECTOR_CAST_F2I_L(4, F, S, D, X, 4S, 4H)\n+VECTOR_CAST_F2I_L(2, D, I, D, X, 2D, 2S)\n+dnl\n+instruct vcvt4Fto4B(vecD dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"fcvtzs  $dst, T4S, $src\\n\\t\"\n+            \"xtn     $dst, T4H, $dst, T4S\\n\\t\"\n+            \"xtn     $dst, T8B, $dst, T8H\\n\\t# convert 4F to 4B vector\"\n+  %}\n+  ins_encode %{\n+    __ fcvtzs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+    __ xtn(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($dst$$reg), __ T4S);\n+    __ xtn(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($dst$$reg), __ T8H);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+dnl\n@@ -274,28 +324,0 @@\n-instruct vcvt2Lto2F(vecD dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (VectorCastL2X src));\n-  format %{ \"scvtfv  T2D, $dst, $src\\n\\t\"\n-            \"fcvtn   $dst, T2S, $dst, T2D\\t# convert 2L to 2F vector\"\n-  %}\n-  ins_encode %{\n-    __ scvtfv(__ T2D, as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg));\n-    __ fcvtn(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($dst$$reg), __ T2D);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct vcvt2Fto2L(vecX dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorCastF2X src));\n-  format %{ \"fcvtl   $dst, T2D, $src, T2S\\n\\t\"\n-            \"fcvtzv  $dst, T2D, $dst\\t# convert 2F to 2L vector\"\n-  %}\n-  ins_encode %{\n-    __ fcvtl(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg), __ T2S);\n-    __ fcvtzv(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":106,"deletions":84,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -2910,1 +2910,1 @@\n-  INSN(fcvtzv, 0, 0b10, 0b01, 0b11011); \/\/ converts each element in a vector from a floating-point value to a signed integer value, and Arm's name is fcvtzs\n+  INSN(fcvtzs, 0, 0b10, 0b01, 0b11011);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1539,1 +1539,1 @@\n-                        [\"fcvtzv\", \"__ fcvtzv(v0, __ T4S, v1);\",                         \"fcvtzs\\tv0.4s, v1.4s\"],\n+                        [\"fcvtzs\", \"__ fcvtzs(v0, __ T4S, v1);\",                         \"fcvtzs\\tv0.4s, v1.4s\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -729,1 +729,1 @@\n-    __ fcvtzv(v0, __ T4S, v1);                         \/\/       fcvtzs  v0.4s, v1.4s\n+    __ fcvtzs(v0, __ T4S, v1);                         \/\/       fcvtzs  v0.4s, v1.4s\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}