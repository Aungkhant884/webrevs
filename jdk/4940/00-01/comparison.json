{"files":[{"patch":"@@ -625,1 +625,1 @@\n-    private long transferToArbitraryChannel(long position, int icount,\n+    private long transferToArbitraryChannel(long position, long count,\n@@ -630,1 +630,1 @@\n-        int c = Math.min(icount, TRANSFER_SIZE);\n+        int c = (int)Math.min(count, TRANSFER_SIZE);\n@@ -635,2 +635,2 @@\n-            while (tw < icount) {\n-                bb.limit(Math.min((int)(icount - tw), TRANSFER_SIZE));\n+            while (tw < count) {\n+                bb.limit((int)Math.min(count - tw, TRANSFER_SIZE));\n@@ -658,18 +658,0 @@\n-    private long transferTo(long position, int icount,\n-                            WritableByteChannel target)\n-        throws IOException\n-    {\n-        long n;\n-\n-        \/\/ Attempt a direct transfer, if the kernel supports it\n-        if ((n = transferToDirectly(position, icount, target)) >= 0)\n-            return n;\n-\n-        \/\/ Attempt a mapped transfer, but only to trusted channel types\n-        if ((n = transferToTrustedChannel(position, icount, target)) >= 0)\n-            return n;\n-\n-        \/\/ Slow path for untrusted targets\n-        return transferToArbitraryChannel(position, icount, target);\n-    }\n-\n@@ -694,13 +676,13 @@\n-        long bytesTransferred = 0L;\n-        final long maxTransferSize = maxTransferSize0();\n-        while (bytesTransferred < count) {\n-            int icount =\n-                (int)Math.min(count - bytesTransferred, maxTransferSize);\n-            if ((sz - position) < icount)\n-                icount = (int)(sz - position);\n-            long n = transferTo(position, icount, target);\n-            if (n <= 0)\n-                break;\n-            position += n;\n-            bytesTransferred += n;\n-        }\n+        if ((sz - position) < count)\n+            count = (int)(sz - position);\n+\n+        \/\/ Attempt a direct transfer, if the kernel supports it, limiting\n+        \/\/ the number of bytes according to which platform\n+        int icount = (int)Math.min(count, maxDirectTransferSize0());\n+        long n;\n+        if ((n = transferToDirectly(position, icount, target)) >= 0)\n+            return n;\n+\n+        \/\/ Attempt a mapped transfer, but only to trusted channel types\n+        if ((n = transferToTrustedChannel(position, count, target)) >= 0)\n+            return n;\n@@ -708,1 +690,2 @@\n-        return bytesTransferred;\n+        \/\/ Slow path for untrusted targets\n+        return transferToArbitraryChannel(position, count, target);\n@@ -1370,1 +1353,1 @@\n-    private native long maxTransferSize0();\n+    private native int maxDirectTransferSize0();\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":20,"deletions":37,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -255,2 +255,2 @@\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_FileChannelImpl_maxTransferSize0(JNIEnv* env, jobject this)\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_FileChannelImpl_maxDirectTransferSize0(JNIEnv* env, jobject this)\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileChannelImpl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,2 +197,2 @@\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_FileChannelImpl_maxTransferSize0(JNIEnv* env, jobject this)\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_FileChannelImpl_maxDirectTransferSize0(JNIEnv* env, jobject this)\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/FileChannelImpl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main Transfer2GPlus\n@@ -44,0 +47,1 @@\n+import jdk.test.lib.Platform;\n@@ -46,0 +50,2 @@\n+    private static final int LINUX_MAX_TRANSFER_SIZE = 0x7ffff000;\n+\n@@ -81,3 +87,9 @@\n-                if ((n = srcCh.transferTo(0, LENGTH, dstCh)) < LENGTH)\n-                    throw new RuntimeException(\"Too few bytes transferred: \" +\n-                        n + \" < \" + LENGTH);\n+                if ((n = srcCh.transferTo(0, LENGTH, dstCh)) < LENGTH) {\n+                    if (!Platform.isLinux())\n+                        throw new RuntimeException(\"Transfer too small: \" + n);\n+\n+                    if (n != 0x7ffff000)\n+                        throw new RuntimeException(\"Unexpected transfer size: \" + n);\n+                    if ((n += srcCh.transferTo(n, LENGTH, dstCh)) != LENGTH)\n+                        throw new RuntimeException(\"Unexpected total size: \" + n);\n+                }\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer2GPlus.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}