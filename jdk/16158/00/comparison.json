{"files":[{"patch":"@@ -2439,0 +2439,10 @@\n+C2V_VMENTRY(void, clearOopHandle, (JNIEnv* env, jobject, jlong oop_handle))\n+  if (oop_handle == 0L) {\n+    JVMCI_THROW(NullPointerException);\n+  }\n+  \/\/ Assert before nulling out, for better debugging.\n+  assert(JVMCIRuntime::is_oop_handle(oop_handle), \"precondition\");\n+  oop* oop_ptr = (oop*) oop_handle;\n+  NativeAccess<>::oop_store(oop_ptr, (oop) nullptr);\n+C2V_END\n+\n@@ -3263,0 +3273,1 @@\n+  {CC \"clearOopHandle\",                               CC \"(J)V\",                                                                            FN_PTR(clearOopHandle)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -890,0 +890,7 @@\n+#ifdef ASSERT\n+bool JVMCIRuntime::is_oop_handle(jlong handle) {\n+  const oop* ptr = (oop*) handle;\n+  return object_handles()->allocation_status(ptr) == OopStorage::ALLOCATED_ENTRY;\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -320,0 +320,3 @@\n+#ifdef ASSERT\n+  static bool is_oop_handle(jlong handle);\n+#endif\n@@ -323,2 +326,0 @@\n-  \/\/ The method also resets _last_found_oop_handle_index to -1\n-  \/\/ and _null_oop_handles to 0.\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1303,0 +1303,5 @@\n+    \/**\n+     * Clears the oop handle in {@code handle}.\n+     *\/\n+    native void clearOopHandle(long handle);\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -158,1 +158,2 @@\n-     * {@link CompilerToVM#releaseClearedOopHandles}.\n+     * {@link CompilerToVM#releaseClearedOopHandles}. This must be done with a VM call so\n+     * that the JNI handle is cleared at a safepoint.\n@@ -161,1 +162,1 @@\n-        UNSAFE.putLong(handle, 0);\n+        runtime().compilerToVm.clearOopHandle(handle);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/IndirectHotSpotObjectConstantImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}