{"files":[{"patch":"@@ -4255,2 +4255,1 @@\n-    _igvn.register_new_node_with_optimizer(identity_vector);\n-    set_ctrl(identity_vector, C->root());\n+    register_new_node(identity_vector, C->root());\n@@ -4265,1 +4264,8 @@\n-    \/\/ Traverse down the chain of UnorderedReductions, and create the vector_accumulators.\n+    \/\/ Turn the scalar phi into a vector phi.\n+    _igvn.rehash_node_delayed(phi);\n+    Node* init = phi->in(1); \/\/ Remember init before replacing it.\n+    phi->set_req_X(1, identity_vector, &_igvn);\n+    phi->as_Type()->set_type(vec_t);\n+    _igvn.set_type(phi, vec_t);\n+\n+    \/\/ Traverse down the chain of UnorderedReductions, and replace them with vector_accumulators.\n@@ -4267,1 +4273,0 @@\n-    Node* last_vector_accumulator = phi;\n@@ -4270,1 +4275,2 @@\n-      Node* vector_input = current->in(2);\n+      Node* last_vector_accumulator = current->in(1);\n+      Node* vector_input            = current->in(2);\n@@ -4272,9 +4278,2 @@\n-      _igvn.register_new_node_with_optimizer(vector_accumulator, current);\n-      set_ctrl(vector_accumulator, cl);\n-      last_vector_accumulator = vector_accumulator;\n-      if (current != last_ur) {\n-        \/\/ All UnorderedReductions except the last are now useless.\n-        _igvn.rehash_node_delayed(current);\n-        current->set_req_X(1, C->top(), &_igvn);\n-        current->set_req_X(2, C->top(), &_igvn);\n-      }\n+      register_new_node(vector_accumulator, cl);\n+      _igvn.replace_node(current, vector_accumulator);\n@@ -4287,5 +4286,1 @@\n-      \/\/ Iterate down, until we hit last_ur.\n-      if (current != last_ur) {\n-        current = current->unique_out()->as_UnorderedReduction();\n-      } else {\n-        current = nullptr;\n+      if (current == last_ur) {\n@@ -4294,0 +4289,1 @@\n+      current = vector_accumulator->unique_out()->as_UnorderedReduction();\n@@ -4295,7 +4291,0 @@\n-    assert(current == nullptr, \"terminated correctly\");\n-\n-    \/\/ After the loop, we can reduce the init and last_vector_accumulator.\n-    Node* init = phi->in(1);\n-    _igvn.rehash_node_delayed(last_ur);\n-    last_ur->set_req_X(1, init, &_igvn);\n-    last_ur->set_req_X(2, last_vector_accumulator, &_igvn);\n@@ -4303,12 +4292,3 @@\n-    \/\/ Turn the scalar phi into a vector phi.\n-    _igvn.rehash_node_delayed(phi);\n-    phi->set_req_X(1, identity_vector, &_igvn);\n-    phi->set_req_X(2, last_vector_accumulator, &_igvn);\n-    phi->as_Type()->set_type(vec_t);\n-    _igvn.set_type(phi, vec_t);\n-    assert(phi->outcnt() == 1, \"accumulator is only use of phi\");\n-\n-    \/\/ Update control to outside the loop.\n-    Node* new_ctrl = get_late_ctrl(last_ur, cl);\n-    set_ctrl(last_ur, new_ctrl);\n-    assert(new_ctrl != nullptr && new_ctrl != cl, \"new control of ur must be outside loop\");\n+    \/\/ Create post-loop reduction.\n+    Node* last_accumulator = phi->in(2);\n+    Node* post_loop_reduction = ReductionNode::make_from_vopc(first_ur->Opcode(), nullptr, init, last_accumulator, bt);\n@@ -4316,4 +4296,7 @@\n-#ifdef ASSERT\n-    if (TraceNewVectors) {\n-      tty->print(\"new Vector node: \");\n-      phi->dump();\n+    \/\/ Take over uses of last_accumulator that are not in the loop.\n+    for (DUIterator i = last_accumulator->outs(); last_accumulator->has_out(i); i++) {\n+      Node* use = last_accumulator->out(i);\n+      if (ctrl_or_self(use) != cl) {\n+        use->replace_edge(last_accumulator, post_loop_reduction,  &_igvn);\n+        --i;\n+      }\n@@ -4321,1 +4304,5 @@\n-#endif\n+    register_new_node(post_loop_reduction, get_late_ctrl(post_loop_reduction, cl));\n+\n+    assert(last_accumulator->outcnt() == 2, \"last_accumulator has 2 uses: phi and post_loop_reduction\");\n+    assert(post_loop_reduction->outcnt() > 0, \"should have taken over all non loop uses of last_accumulator\");\n+    assert(phi->outcnt() == 1, \"accumulator is the only use of phi\");\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":30,"deletions":43,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1268,1 +1268,1 @@\n-ReductionNode* ReductionNode::make(int opc, Node *ctrl, Node* n1, Node* n2, BasicType bt) {\n+ReductionNode* ReductionNode::make(int opc, Node* ctrl, Node* n1, Node* n2, BasicType bt) {\n@@ -1275,0 +1275,4 @@\n+  return ReductionNode::make_from_vopc(vopc, ctrl, n1, n2, bt);\n+}\n+\n+ReductionNode* ReductionNode::make_from_vopc(int vopc, Node* ctrl, Node* n1, Node* n2, BasicType bt) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -200,1 +200,2 @@\n-  static ReductionNode* make(int opc, Node *ctrl, Node* in1, Node* in2, BasicType bt);\n+  static ReductionNode* make(int opc, Node* ctrl, Node* in1, Node* in2, BasicType bt);\n+  static ReductionNode* make_from_vopc(int vopc, Node* ctrl, Node* in1, Node* in2, BasicType bt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}