{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -514,1 +514,1 @@\n-      \/\/ Note: code is robust but the dumped informationm may not be\n+      \/\/ Note: code is robust but the dumped information may not be\n@@ -521,1 +521,2 @@\n-      PRESERVE_EXCEPTION_MARK;\n+      \/\/ may not be needed by safer and unexpensive here\n+      PreserveExceptionMark pem(Thread::current());\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -522,1 +522,2 @@\n-      PRESERVE_EXCEPTION_MARK; \/\/ may not be needed by safer and unexpensive here\n+      \/\/ may not be needed by safer and unexpensive here\n+      PreserveExceptionMark pem(Thread::current());\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -571,1 +571,2 @@\n-    PRESERVE_EXCEPTION_MARK; \/\/ May not be needed by safer and unexpensive here.\n+    \/\/ may not be needed by safer and unexpensive here\n+    PreserveExceptionMark pem(Thread::current());\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -552,1 +552,2 @@\n-      PRESERVE_EXCEPTION_MARK; \/\/ may not be needed but safer and inexpensive here\n+      \/\/ may not be needed by safer and unexpensive here\n+      PreserveExceptionMark pem(Thread::current());\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2000,1 +2000,1 @@\n-  PRESERVE_EXCEPTION_MARK;  \/\/ Keep original exception\n+  PreserveExceptionMark pm(Thread::current());\n@@ -2190,1 +2190,1 @@\n-  void set_has_hidden_top_frame(TRAPS) {\n+  void set_has_hidden_top_frame() {\n@@ -2528,1 +2528,1 @@\n-          bt.set_has_hidden_top_frame(CHECK);\n+          bt.set_has_hidden_top_frame();\n@@ -2555,2 +2555,0 @@\n-  PRESERVE_EXCEPTION_MARK;\n-\n@@ -2558,0 +2556,2 @@\n+  PreserveExceptionMark pm(thread);\n+\n@@ -2560,1 +2560,1 @@\n-  CLEAR_PENDING_EXCEPTION;\n+  thread->clear_pending_exception();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-  CautiouslyPreserveExceptionMark cpe(THREAD);\n+  PreserveExceptionMark cpe(THREAD);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -445,1 +445,1 @@\n-      <xsl:text>CautiouslyPreserveExceptionMark __em(this_thread);<\/xsl:text>\n+      <xsl:text>PreserveExceptionMark __em(this_thread);<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -742,1 +742,1 @@\n-    PRESERVE_EXCEPTION_MARK;\n+    PreserveExceptionMark pm(thread);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -423,1 +423,1 @@\n-    CautiouslyPreserveExceptionMark pem(_handshakee);\n+    PreserveExceptionMark pem(_handshakee);\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1862,6 +1862,0 @@\n-  \/\/ FIXIT: This code should be moved into else part, when reliable 1.2\/1.3 check is in place\n-  {\n-    EXCEPTION_MARK;\n-\n-    CLEAR_PENDING_EXCEPTION;\n-  }\n@@ -3026,1 +3020,1 @@\n-  PRESERVE_EXCEPTION_MARK;\n+  PreserveExceptionMark pm(this);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -367,1 +367,1 @@\n-    \/\/ This is sort of like what PRESERVE_EXCEPTION_MARK does, except\n+    \/\/ This is sort of like what PreserveExceptionMark does, except\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -346,1 +346,1 @@\n-\/\/ See also preserveException.hpp for PRESERVE_EXCEPTION_MARK macro,\n+\/\/ See also preserveException.hpp for PreserveExceptionMark\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+#include \"memory\/resourceArea.hpp\"\n+#include \"oops\/oop.hpp\"\n@@ -29,4 +31,1 @@\n-\/\/ TODO: These three classes should be refactored\n-\n-PreserveExceptionMark::PreserveExceptionMark(Thread*& thread) {\n-  thread     = Thread::current();\n+PreserveExceptionMark::PreserveExceptionMark(Thread* thread) {\n@@ -37,1 +36,1 @@\n-  _thread->clear_pending_exception(); \/\/ Needed to avoid infinite recursion\n+  _thread->clear_pending_exception(); \/\/ Pending exceptions are checked in the destructor\n@@ -45,5 +44,3 @@\n-    exception->print();\n-    fatal(\"PreserveExceptionMark destructor expects no pending exceptions\");\n-  }\n-  if (_preserved_exception_oop() != NULL) {\n-    _thread->set_pending_exception(_preserved_exception_oop(), _preserved_exception_file, _preserved_exception_line);\n+    ResourceMark rm(_thread);\n+    assert(false, \"PreserveExceptionMark destructor expects no pending exceptions %s\",\n+                  exception->print_string());\n@@ -51,7 +48,0 @@\n-}\n-\n-\n-\/\/ This code is cloned from PreserveExceptionMark, except that:\n-\/\/   returned pending exceptions do not cause a crash.\n-\/\/   thread is passed in, not set (not a reference parameter)\n-\/\/   and bug 6431341 has been addressed.\n@@ -59,14 +49,0 @@\n-CautiouslyPreserveExceptionMark::CautiouslyPreserveExceptionMark(Thread* thread) {\n-  _thread    = thread;\n-  _preserved_exception_oop = Handle(thread, _thread->pending_exception());\n-  _preserved_exception_line = _thread->exception_line();\n-  _preserved_exception_file = _thread->exception_file();\n-  _thread->clear_pending_exception(); \/\/ Pending exceptions are checked in the destructor\n-}\n-\n-\n-CautiouslyPreserveExceptionMark::~CautiouslyPreserveExceptionMark() {\n-  assert(!_thread->has_pending_exception(), \"unexpected exception generated\");\n-  if (_thread->has_pending_exception()) {\n-    _thread->clear_pending_exception();\n-  }\n@@ -78,1 +54,0 @@\n-\n","filename":"src\/hotspot\/share\/utilities\/preserveException.cpp","additions":8,"deletions":33,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"runtime\/thread.hpp\"\n@@ -40,1 +39,1 @@\n-  PreserveExceptionMark(Thread*& thread);\n+  PreserveExceptionMark(Thread* thread);\n@@ -45,16 +44,0 @@\n-\/\/ This is a clone of PreserveExceptionMark which asserts instead\n-\/\/ of failing when what it wraps generates a pending exception.\n-\/\/ It also addresses bug 6431341.\n-class CautiouslyPreserveExceptionMark {\n- private:\n-  Thread*     _thread;\n-  Handle      _preserved_exception_oop;\n-  int         _preserved_exception_line;\n-  const char* _preserved_exception_file;\n-\n- public:\n-  CautiouslyPreserveExceptionMark(Thread* thread);\n-  ~CautiouslyPreserveExceptionMark();\n-};\n-\n-\n@@ -75,2 +58,2 @@\n-    WeakPreserveExceptionMark(Thread* pThread) :  _thread(pThread), _preserved_exception_oop()  {\n-      if (pThread->has_pending_exception()) {\n+    WeakPreserveExceptionMark(Thread* thread) :  _thread(thread) {\n+      if (thread->has_pending_exception()) {\n@@ -87,6 +70,0 @@\n-\n-\n-\/\/ use global exception mark when allowing pending exception to be set and\n-\/\/ saving and restoring them\n-#define PRESERVE_EXCEPTION_MARK                    Thread* THREAD; PreserveExceptionMark __em(THREAD);\n-\n","filename":"src\/hotspot\/share\/utilities\/preserveException.hpp","additions":4,"deletions":27,"binary":false,"changes":31,"status":"modified"}]}