{"files":[{"patch":"@@ -733,13 +733,0 @@\n-    \/** A handy method returning hexdump string with no colon or new line.\n-     *\n-     * @param in input byte array\n-     * @return the hexdump string\n-     *\/\n-    protected static String hex(byte[] in) {\n-        StringBuilder sb = new StringBuilder();\n-        for (byte b : in) {\n-            sb.append(String.format(\"%02x\", b&0xff));\n-        }\n-        return sb.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/AbstractDrbg.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/AbstractHashDrbg.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.HexFormat;\n@@ -184,2 +185,2 @@\n-            debug.println(this, \"Key = \" + hex(k));\n-            debug.println(this, \"V   = \" + hex(v));\n+            debug.println(this, \"Key = \" + HexFormat.of().formatHex(k));\n+            debug.println(this, \"V   = \" + HexFormat.of().formatHex(v));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/CtrDrbg.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.HexFormat;\n@@ -164,2 +165,2 @@\n-            debug.println(this, \"V = \" + hex(v));\n-            debug.println(this, \"C = \" + hex(c));\n+            debug.println(this, \"V = \" + HexFormat.of().formatHex(v));\n+            debug.println(this, \"C = \" + HexFormat.of().formatHex(c));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HashDrbg.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.HexFormat;\n@@ -54,2 +55,2 @@\n-            debug.println(this, \"V = \" + hex(v));\n-            debug.println(this, \"Key = \" + hex(k));\n+            debug.println(this, \"V = \" + HexFormat.of().formatHex(v));\n+            debug.println(this, \"Key = \" + HexFormat.of().formatHex(k));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HmacDrbg.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -777,1 +777,0 @@\n-    private static final String HEX_DIGITS = \"0123456789ABCDEFabcdef\";\n@@ -779,0 +778,1 @@\n+        HexFormat hex = HexFormat.of();\n@@ -782,1 +782,1 @@\n-            if (HEX_DIGITS.indexOf(chars[i]) != -1) {\n+            if (hex.isHexDigit(chars[i])) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/RevocationChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.HexFormat;\n@@ -583,1 +584,1 @@\n-                    Utilities.toHexString((byte)value) + \"\\\"\";\n+                        HexFormat.of().toHexDigits((byte)value) + \"\\\"\";\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.HexFormat;\n@@ -240,3 +241,2 @@\n-                cipherSuite.name + \"(\" +\n-                        Utilities.byte16HexString(cipherSuite.id) + \")\",\n-                Utilities.toHexString(compressionMethod),\n+                cipherSuite.name + \"(\" + Utilities.byte16HexString(cipherSuite.id) + \")\",\n+                HexFormat.of().toHexDigits(compressionMethod),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ServerHello.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-    static final char[] hexDigits = \"0123456789ABCDEF\".toCharArray();\n@@ -43,0 +42,2 @@\n+    private static final HexFormat HEX_FORMATTER =\n+            HexFormat.of().withUpperCase();\n@@ -167,5 +168,0 @@\n-    static String toHexString(byte b) {\n-        return String.valueOf(hexDigits[(b >> 4) & 0x0F]) +\n-                String.valueOf(hexDigits[b & 0x0F]);\n-    }\n-\n@@ -173,3 +169,1 @@\n-        return \"0x\" +\n-                hexDigits[(id >> 12) & 0x0F] + hexDigits[(id >> 8) & 0x0F] +\n-                hexDigits[(id >> 4) & 0x0F] + hexDigits[id & 0x0F];\n+        return \"0x\" + HEX_FORMATTER.toHexDigits((short)id);\n@@ -183,13 +177,1 @@\n-        StringBuilder builder = new StringBuilder(bytes.length * 3);\n-        boolean isFirst = true;\n-        for (byte b : bytes) {\n-            if (isFirst) {\n-                isFirst = false;\n-            } else {\n-                builder.append(' ');\n-            }\n-\n-            builder.append(hexDigits[(b >> 4) & 0x0F]);\n-            builder.append(hexDigits[b & 0x0F]);\n-        }\n-        return builder.toString();\n+        return HEX_FORMATTER.formatHex(bytes);\n@@ -209,4 +191,2 @@\n-            builder.append(hexDigits[(int)(lv & 0x0F)]);\n-            lv >>>= 4;\n-            builder.append(hexDigits[(int)(lv & 0x0F)]);\n-            lv >>>= 4;\n+            HEX_FORMATTER.toHexDigits(builder, (byte)lv);\n+            lv >>>= 8;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Utilities.java","additions":7,"deletions":27,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1448,1 +1448,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n@@ -2600,1 +2600,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n@@ -3510,27 +3510,0 @@\n-    \/**\n-     * Converts a byte to hex digit and writes to the supplied buffer\n-     *\/\n-    private void byte2hex(byte b, StringBuffer buf) {\n-        char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8',\n-                            '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n-        int high = ((b & 0xf0) >> 4);\n-        int low = (b & 0x0f);\n-        buf.append(hexChars[high]);\n-        buf.append(hexChars[low]);\n-    }\n-\n-    \/**\n-     * Converts a byte array to hex string\n-     *\/\n-    private String toHexString(byte[] block) {\n-        StringBuffer buf = new StringBuffer();\n-        int len = block.length;\n-        for (int i = 0; i < len; i++) {\n-             byte2hex(block[i], buf);\n-             if (i < len-1) {\n-                 buf.append(\":\");\n-             }\n-        }\n-        return buf.toString();\n-    }\n-\n@@ -3666,1 +3639,1 @@\n-        return toHexString(digest);\n+        return HexFormat.ofDelimiter(\":\").withUpperCase().formatHex(digest);\n@@ -4574,0 +4547,1 @@\n+                        HexFormat hexFmt = HexFormat.of();\n@@ -4579,8 +4553,1 @@\n-                                int hex;\n-                                if (c >= '0' && c <= '9') {\n-                                    hex = c - '0' ;\n-                                } else if (c >= 'A' && c <= 'F') {\n-                                    hex = c - 'A' + 10;\n-                                } else if (c >= 'a' && c <= 'f') {\n-                                    hex = c - 'a' + 10;\n-                                } else {\n+                                if (!hexFmt.isHexDigit(c)) {\n@@ -4589,0 +4556,1 @@\n+                                int hex = hexFmt.fromHexDigit(c);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":6,"deletions":38,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.HexFormat;\n@@ -321,2 +322,0 @@\n-    private static final char[] hexDigits = \"0123456789abcdef\".toCharArray();\n-\n@@ -327,10 +326,1 @@\n-        StringBuilder sb = new StringBuilder(b.length * 3);\n-        for (int i = 0; i < b.length; i++) {\n-            int k = b[i] & 0xff;\n-            if (i != 0) {\n-                sb.append(':');\n-            }\n-            sb.append(hexDigits[k >>> 4]);\n-            sb.append(hexDigits[k & 0xf]);\n-        }\n-        return sb.toString();\n+        return HexFormat.ofDelimiter(\":\").formatHex(b);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -217,2 +217,2 @@\n-                debug.println(\"  manifest \" + toHex(manHash));\n-                debug.println(\"  computed \" + toHex(theHash));\n+                debug.println(\"  manifest \" + HexFormat.of().formatHex(manHash));\n+                debug.println(\"  computed \" + HexFormat.of().formatHex(theHash));\n@@ -234,21 +234,0 @@\n-\n-    \/\/ for the toHex function\n-    private static final char[] hexc =\n-            {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n-    \/**\n-     * convert a byte array to a hex string for debugging purposes\n-     * @param data the binary data to be converted to a hex string\n-     * @return an ASCII hex string\n-     *\/\n-\n-    static String toHex(byte[] data) {\n-\n-        StringBuilder sb = new StringBuilder(data.length*2);\n-\n-        for (int i=0; i<data.length; i++) {\n-            sb.append(hexc[(data[i] >>4) & 0x0f]);\n-            sb.append(hexc[data[i] & 0x0f]);\n-        }\n-        return sb.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ManifestEntryVerifier.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.HexFormat;\n@@ -500,2 +501,2 @@\n-                        debug.println( \"  sigfile  \" + toHex(expectedHash));\n-                        debug.println( \"  computed \" + toHex(computedHash));\n+                        debug.println( \"  sigfile  \" + HexFormat.of().formatHex(expectedHash));\n+                        debug.println( \"  computed \" + HexFormat.of().formatHex(computedHash));\n@@ -571,2 +572,2 @@\n-                     debug.println( \"  sigfile  \" + toHex(expectedHash));\n-                     debug.println( \"  computed \" + toHex(computedHash));\n+                     debug.println( \"  sigfile  \" + HexFormat.of().formatHex(expectedHash));\n+                     debug.println( \"  computed \" + HexFormat.of().formatHex(computedHash));\n@@ -679,2 +680,2 @@\n-                          debug.println(\"  expected \" + toHex(expected));\n-                          debug.println(\"  computed \" + toHex(computed));\n+                          debug.println(\"  expected \" + HexFormat.of().formatHex(expected));\n+                          debug.println(\"  computed \" + HexFormat.of().formatHex(computed));\n@@ -693,1 +694,1 @@\n-                                       debug.println(\"  re-computed \" + toHex(computed));\n+                                       debug.println(\"  re-computed \" + HexFormat.of().formatHex(computed));\n@@ -766,20 +767,0 @@\n-    \/\/ for the toHex function\n-    private static final char[] hexc =\n-            {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n-    \/**\n-     * convert a byte array to a hex string for debugging purposes\n-     * @param data the binary data to be converted to a hex string\n-     * @return an ASCII hex string\n-     *\/\n-\n-    static String toHex(byte[] data) {\n-\n-        StringBuilder sb = new StringBuilder(data.length*2);\n-\n-        for (int i=0; i<data.length; i++) {\n-            sb.append(hexc[(data[i] >>4) & 0x0f]);\n-            sb.append(hexc[data[i] & 0x0f]);\n-        }\n-        return sb.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -111,6 +111,0 @@\n-    \/*\n-     * Values that aren't printable strings are emitted as BER-encoded\n-     * hex data.\n-     *\/\n-    private static final String hexDigits = \"0123456789ABCDEF\";\n-\n@@ -260,1 +254,1 @@\n-\n+        HexFormat hex = HexFormat.of();\n@@ -271,13 +265,11 @@\n-\n-            int cVal = hexDigits.indexOf(Character.toUpperCase((char)c));\n-\n-            if (cVal == -1) {\n-                throw new IOException(\"AVA parse, invalid hex \" +\n-                                              \"digit: \"+ (char)c);\n-            }\n-\n-            if ((cNdx % 2) == 1) {\n-                b = (byte)((b * 16) + (byte)(cVal));\n-                baos.write(b);\n-            } else {\n-                b = (byte)(cVal);\n+            try {\n+                int cVal = hex.fromHexDigit(c);     \/\/ throws on invalid character\n+                if ((cNdx % 2) == 1) {\n+                    b = (byte)((b * 16) + (byte)(cVal));\n+                    baos.write(b);\n+                } else {\n+                    b = (byte)(cVal);\n+                }\n+                cNdx++;\n+            } catch (NumberFormatException nfe) {\n+                throw new IOException(\"AVA parse, invalid hex digit: \"+ (char)c);\n@@ -285,1 +277,0 @@\n-            cNdx++;\n@@ -514,1 +505,2 @@\n-        if (hexDigits.indexOf(Character.toUpperCase((char)c1)) >= 0) {\n+        HexFormat hex = HexFormat.of();\n+        if (hex.isHexDigit(c1)) {\n@@ -518,3 +510,3 @@\n-            if (hexDigits.indexOf(Character.toUpperCase((char)c2)) >= 0) {\n-                int hi = Character.digit((char)c1, 16);\n-                int lo = Character.digit((char)c2, 16);\n+            if (hex.isHexDigit(c2)) {\n+                int hi = hex.fromHexDigit(c1);\n+                int lo = hex.fromHexDigit(c2);\n@@ -740,5 +732,1 @@\n-            for (int j = 0; j < data.length; j++) {\n-                byte b = data[j];\n-                typeAndValue.append(Character.forDigit(0xF & (b >>> 4), 16));\n-                typeAndValue.append(Character.forDigit(0xF & b, 16));\n-            }\n+            HexFormat.of().formatHex(typeAndValue, data);\n@@ -809,9 +797,1 @@\n-                    for (int j = 0; j < valueBytes.length; j++) {\n-                        sbuffer.append('\\\\');\n-                        char hexChar = Character.forDigit\n-                                (0xF & (valueBytes[j] >>> 4), 16);\n-                        sbuffer.append(Character.toUpperCase(hexChar));\n-                        hexChar = Character.forDigit\n-                                (0xF & (valueBytes[j]), 16);\n-                        sbuffer.append(Character.toUpperCase(hexChar));\n-                    }\n+                    HexFormat.of().withPrefix(\"\\\\\").withUpperCase().formatHex(sbuffer, valueBytes);\n@@ -887,5 +867,1 @@\n-            for (int j = 0; j < data.length; j++) {\n-                byte b = data[j];\n-                typeAndValue.append(Character.forDigit(0xF & (b >>> 4), 16));\n-                typeAndValue.append(Character.forDigit(0xF & b, 16));\n-            }\n+            HexFormat.of().formatHex(typeAndValue, data);\n@@ -963,1 +939,0 @@\n-\n@@ -965,7 +940,1 @@\n-                    for (int j = 0; j < valueBytes.length; j++) {\n-                        sbuffer.append('\\\\');\n-                        sbuffer.append(Character.forDigit\n-                                        (0xF & (valueBytes[j] >>> 4), 16));\n-                        sbuffer.append(Character.forDigit\n-                                        (0xF & (valueBytes[j]), 16));\n-                    }\n+                    HexFormat.of().withPrefix(\"\\\\\").withUpperCase().formatHex(sbuffer, valueBytes);\n@@ -1045,5 +1014,1 @@\n-                for (int i = 0; i < data.length; i++) {\n-                    retval.append(hexDigits.charAt((data [i] >> 4) & 0x0f));\n-                    retval.append(hexDigits.charAt(data [i] & 0x0f));\n-                }\n-\n+                HexFormat.of().formatHex(retval, data);\n@@ -1109,9 +1074,1 @@\n-                        for (int j = 0; j < valueBytes.length; j++) {\n-                            sbuffer.append('\\\\');\n-                            char hexChar = Character.forDigit\n-                                        (0xF & (valueBytes[j] >>> 4), 16);\n-                            sbuffer.append(Character.toUpperCase(hexChar));\n-                            hexChar = Character.forDigit\n-                                        (0xF & (valueBytes[j]), 16);\n-                            sbuffer.append(Character.toUpperCase(hexChar));\n-                        }\n+                        HexFormat.of().withPrefix(\"\\\\\").withUpperCase().formatHex(sbuffer, valueBytes);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AVA.java","additions":23,"deletions":66,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -1935,5 +1935,1 @@\n-            StringBuilder sb = new StringBuilder(digest.length * 2);\n-            for (int i = 0; i < digest.length; i++) {\n-                byte2hex(digest[i], sb);\n-            }\n-            return sb.toString();\n+            return HexFormat.of().withUpperCase().formatHex(digest);\n@@ -1945,12 +1941,0 @@\n-\n-    \/**\n-     * Converts a byte to hex digit and writes to the supplied builder\n-     *\/\n-    private static void byte2hex(byte b, StringBuilder buf) {\n-        char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8',\n-                '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n-        int high = ((b & 0xf0) >> 4);\n-        int low = (b & 0x0f);\n-        buf.append(hexChars[high])\n-            .append(hexChars[low]);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"}]}