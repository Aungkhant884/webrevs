{"files":[{"patch":"@@ -32,1 +32,1 @@\n-template <typename E, MEMFLAGS F>\n+template <typename E, MemoryType F>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-G1MonotonicArena::Segment::Segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS flag) :\n+G1MonotonicArena::Segment::Segment(uint slot_size, uint num_slots, Segment* next, MemoryType flag) :\n@@ -44,1 +44,1 @@\n-                                                                     MEMFLAGS mem_flag) {\n+                                                                     MemoryType mem_flag) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-  const MEMFLAGS _mem_flag;\n+  const MemoryType _mem_flag;\n@@ -139,1 +139,1 @@\n-  Segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS flag);\n+  Segment(uint slot_size, uint num_slots, Segment* next, MemoryType flag);\n@@ -176,1 +176,1 @@\n-  static Segment* create_segment(uint slot_size, uint num_slots, Segment* next, MEMFLAGS mem_flag);\n+  static Segment* create_segment(uint slot_size, uint num_slots, Segment* next, MemoryType mem_flag);\n@@ -225,1 +225,1 @@\n-  const MEMFLAGS _mem_flag;\n+  const MemoryType _mem_flag;\n@@ -233,1 +233,1 @@\n-  AllocOptions(MEMFLAGS mem_flag, uint slot_size, uint initial_num_slots, uint max_num_slots, uint alignment) :\n+  AllocOptions(MemoryType mem_flag, uint slot_size, uint initial_num_slots, uint max_num_slots, uint alignment) :\n@@ -253,1 +253,1 @@\n-  MEMFLAGS mem_flag() const {return _mem_flag; }\n+  MemoryType mem_flag() const {return _mem_flag; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                                             MEMFLAGS type) :\n+                                             MemoryType type) :\n@@ -76,1 +76,1 @@\n-                                      MEMFLAGS type) :\n+                                      MemoryType type) :\n@@ -168,1 +168,1 @@\n-                                       MEMFLAGS type) :\n+                                       MemoryType type) :\n@@ -267,1 +267,1 @@\n-                                                            MEMFLAGS type) {\n+                                                            MemoryType type) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  MEMFLAGS _memory_type;\n+  MemoryType _memory_type;\n@@ -58,1 +58,1 @@\n-  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MEMFLAGS type);\n+  G1RegionToSpaceMapper(ReservedSpace rs, size_t used_size, size_t page_size, size_t region_granularity, size_t commit_factor, MemoryType type);\n@@ -89,1 +89,1 @@\n-                                              MEMFLAGS type);\n+                                              MemoryType type);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -130,2 +130,2 @@\n-                                                         MEMFLAGS memflags,\n-                                                         AllocFailType alloc_fail) {\n+                                                         MemoryType mt,\n+                                                         AllocationFailureStrategy alloc_fail) {\n@@ -133,1 +133,1 @@\n-  void* mem = NEW_C_HEAP_ARRAY3(char, size_in_bytes, memflags, CURRENT_PC, alloc_fail);\n+  void* mem = NEW_C_HEAP_ARRAY3(char, size_in_bytes, mt, CURRENT_PC, alloc_fail);\n@@ -346,1 +346,1 @@\n-  void* memory = NEW_C_HEAP_ARRAY_RETURN_NULL(char, size_needed, owner->memflags());\n+  void* memory = NEW_C_HEAP_ARRAY_RETURN_NULL(char, size_needed, owner->memory_type());\n@@ -578,2 +578,2 @@\n-                                               memflags(),\n-                                               AllocFailStrategy::RETURN_NULL);\n+                                               memory_type(),\n+                                               AllocationFailureStrategy::RETURN_NULL);\n@@ -808,2 +808,2 @@\n-OopStorage* OopStorage::create(const char* name, MEMFLAGS memflags) {\n-  return new (memflags) OopStorage(name, memflags);\n+OopStorage* OopStorage::create(const char* name, MemoryType mt) {\n+  return new (mt) OopStorage(name, mt);\n@@ -822,1 +822,1 @@\n-OopStorage::OopStorage(const char* name, MEMFLAGS memflags) :\n+OopStorage::OopStorage(const char* name, MemoryType mt) :\n@@ -824,1 +824,1 @@\n-  _active_array(ActiveArray::create(initial_active_array_size, memflags)),\n+  _active_array(ActiveArray::create(initial_active_array_size, mt)),\n@@ -832,1 +832,1 @@\n-  _memflags(memflags),\n+  _memory_type(mt),\n@@ -1051,1 +1051,1 @@\n-MEMFLAGS OopStorage::memflags() const { return _memflags; }\n+MemoryType OopStorage::memory_type() const { return _memory_type; }\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  static OopStorage* create(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create(const char* name, MemoryType mt);\n@@ -93,1 +93,1 @@\n-  MEMFLAGS memflags() const;\n+  MemoryType memory_type() const;\n@@ -277,1 +277,1 @@\n-  MEMFLAGS _memflags;\n+  MemoryType _memory_type;\n@@ -283,1 +283,1 @@\n-  OopStorage(const char* name, MEMFLAGS memflags);\n+  OopStorage(const char* name, MemoryType mt);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,2 +63,2 @@\n-                             MEMFLAGS memflags = mtGC,\n-                             AllocFailType alloc_fail = AllocFailStrategy::EXIT_OOM);\n+                             MemoryType mt = mtGC,\n+                             AllocationFailureStrategy alloc_fail = AllocationFailureStrategy::EXIT_OOM);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-OopStorage* OopStorageSet::create_strong(const char* name, MEMFLAGS memflags) {\n+OopStorage* OopStorageSet::create_strong(const char* name, MemoryType mt) {\n@@ -37,1 +37,1 @@\n-  OopStorage* storage = OopStorage::create(name, memflags);\n+  OopStorage* storage = OopStorage::create(name, mt);\n@@ -42,1 +42,1 @@\n-OopStorage* OopStorageSet::create_weak(const char* name, MEMFLAGS memflags) {\n+OopStorage* OopStorageSet::create_weak(const char* name, MemoryType mt) {\n@@ -45,1 +45,1 @@\n-  OopStorage* storage = OopStorage::create(name, memflags);\n+  OopStorage* storage = OopStorage::create(name, mt);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-  static OopStorage* create_strong(const char* name, MEMFLAGS memflags);\n-  static OopStorage* create_weak(const char* name, MEMFLAGS memflags);\n+  static OopStorage* create_strong(const char* name, MemoryType mt);\n+  static OopStorage* create_weak(const char* name, MemoryType mt);\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorageSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-template <unsigned int N, MEMFLAGS F>\n+template <unsigned int N, MemoryType F>\n@@ -327,1 +327,1 @@\n-template <class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template <class E, MemoryType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -431,1 +431,1 @@\n-template<class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template<class E, MemoryType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -470,1 +470,1 @@\n-template <MEMFLAGS F> class TaskQueueSetSuperImpl: public CHeapObj<F>, public TaskQueueSetSuper {\n+template <MemoryType F> class TaskQueueSetSuperImpl: public CHeapObj<F>, public TaskQueueSetSuper {\n@@ -473,1 +473,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -521,1 +521,1 @@\n-template<class T, MEMFLAGS F> void\n+template<class T, MemoryType F> void\n@@ -527,1 +527,1 @@\n-template<class T, MEMFLAGS F> T*\n+template<class T, MemoryType F> T*\n@@ -534,1 +534,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -542,1 +542,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemoryType F>\n@@ -50,1 +50,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemoryType F>\n@@ -56,1 +56,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -63,1 +63,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -78,1 +78,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -86,1 +86,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemoryType F>\n@@ -100,1 +100,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n@@ -106,1 +106,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n@@ -111,1 +111,1 @@\n-template<class E, MEMFLAGS F, unsigned int N> inline bool\n+template<class E, MemoryType F, unsigned int N> inline bool\n@@ -137,1 +137,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n@@ -146,1 +146,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n@@ -157,1 +157,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n@@ -190,1 +190,1 @@\n-template<class E, MEMFLAGS F, unsigned int N> inline bool\n+template<class E, MemoryType F, unsigned int N> inline bool\n@@ -227,1 +227,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n@@ -256,1 +256,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n@@ -314,1 +314,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n@@ -319,1 +319,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -375,1 +375,1 @@\n-template<class T, MEMFLAGS F>\n+template<class T, MemoryType F>\n@@ -397,1 +397,1 @@\n-template<class E, MEMFLAGS F, unsigned int N>\n+template<class E, MemoryType F, unsigned int N>\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.inline.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-template<class E, MEMFLAGS F, unsigned int N = TASKQUEUE_SIZE>\n+template<class E, MemoryType F, unsigned int N = TASKQUEUE_SIZE>\n@@ -302,1 +302,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemoryType F>\n@@ -332,1 +332,1 @@\n-template <class T, MEMFLAGS F>\n+template <class T, MemoryType F>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n@@ -48,1 +48,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n@@ -61,1 +61,1 @@\n-template <class E, MEMFLAGS F, unsigned int N>\n+template <class E, MemoryType F, unsigned int N>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahTaskqueue.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-  char* const memory = ReallocateHeap(old, size, mtTracing, AllocFailStrategy::RETURN_NULL);\n+  char* const memory = ReallocateHeap(old, size, mtTracing, AllocationFailureStrategy::RETURN_NULL);\n@@ -138,1 +138,1 @@\n-  return AllocateHeap(elements * element_size, mtTracing, CALLER_PC, AllocFailStrategy::RETURN_NULL);\n+  return AllocateHeap(elements * element_size, mtTracing, CALLER_PC, AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrAllocation.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                   MEMFLAGS flags,\n+                   MemoryType flags,\n@@ -41,1 +41,1 @@\n-                   AllocFailType alloc_failmode \/* = AllocFailStrategy::EXIT_OOM*\/) {\n+                   AllocationFailureStrategy alloc_failmode \/* = AllocationFailureStrategy::EXIT_OOM*\/) {\n@@ -43,1 +43,1 @@\n-  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocationFailureStrategy::EXIT_OOM) {\n@@ -50,2 +50,2 @@\n-                   MEMFLAGS flags,\n-                   AllocFailType alloc_failmode \/* = AllocFailStrategy::EXIT_OOM*\/) {\n+                   MemoryType flags,\n+                   AllocationFailureStrategy alloc_failmode \/* = AllocationFailureStrategy::EXIT_OOM*\/) {\n@@ -57,2 +57,2 @@\n-                     MEMFLAGS flag,\n-                     AllocFailType alloc_failmode) {\n+                     MemoryType flag,\n+                     AllocationFailureStrategy alloc_failmode) {\n@@ -60,1 +60,1 @@\n-  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocationFailureStrategy::EXIT_OOM) {\n@@ -125,1 +125,1 @@\n-void* AnyObj::operator new(size_t size, MEMFLAGS flags) throw() {\n+void* AnyObj::operator new(size_t size, MemoryType flags) throw() {\n@@ -132,1 +132,1 @@\n-    MEMFLAGS flags) throw() {\n+    MemoryType flags) throw() {\n@@ -134,1 +134,1 @@\n-    address res = (address)AllocateHeap(size, flags, CALLER_PC, AllocFailStrategy::RETURN_NULL);\n+    address res = (address)AllocateHeap(size, flags, CALLER_PC, AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include \"memory\/allocationFailureStrategy.hpp\"\n+#include \"memory\/types.hpp\"\n@@ -39,6 +41,0 @@\n-class AllocFailStrategy {\n-public:\n-  enum AllocFailEnum { EXIT_OOM, RETURN_NULL };\n-};\n-typedef AllocFailStrategy::AllocFailEnum AllocFailType;\n-\n@@ -96,3 +92,3 @@\n-\/\/ char* AllocateHeap(size_t size, MEMFLAGS flags, const NativeCallStack& stack, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n-\/\/ char* AllocateHeap(size_t size, MEMFLAGS flags, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n-\/\/ char* ReallocateHeap(char *old, size_t size, MEMFLAGS flag, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+\/\/ char* AllocateHeap(size_t size, MemoryType flags, const NativeCallStack& stack, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n+\/\/ char* AllocateHeap(size_t size, MemoryType flags, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n+\/\/ char* ReallocateHeap(char *old, size_t size, MemoryType flag, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -100,58 +96,0 @@\n-\/\/\n-\n-#define MEMORY_TYPES_DO(f)                                                           \\\n-  \/* Memory type by sub systems. It occupies lower byte. *\/                          \\\n-  f(mtJavaHeap,       \"Java Heap\")   \/* Java heap                                 *\/ \\\n-  f(mtClass,          \"Class\")       \/* Java classes                              *\/ \\\n-  f(mtThread,         \"Thread\")      \/* thread objects                            *\/ \\\n-  f(mtThreadStack,    \"Thread Stack\")                                                \\\n-  f(mtCode,           \"Code\")        \/* generated code                            *\/ \\\n-  f(mtGC,             \"GC\")                                                          \\\n-  f(mtGCCardSet,      \"GCCardSet\")   \/* G1 card set remembered set                *\/ \\\n-  f(mtCompiler,       \"Compiler\")                                                    \\\n-  f(mtJVMCI,          \"JVMCI\")                                                       \\\n-  f(mtInternal,       \"Internal\")    \/* memory used by VM, but does not belong to *\/ \\\n-                                     \/* any of above categories, and not used by  *\/ \\\n-                                     \/* NMT                                       *\/ \\\n-  f(mtOther,          \"Other\")       \/* memory not used by VM                     *\/ \\\n-  f(mtSymbol,         \"Symbol\")                                                      \\\n-  f(mtNMT,            \"Native Memory Tracking\")  \/* memory used by NMT            *\/ \\\n-  f(mtClassShared,    \"Shared class space\")      \/* class data sharing            *\/ \\\n-  f(mtChunk,          \"Arena Chunk\") \/* chunk that holds content of arenas        *\/ \\\n-  f(mtTest,           \"Test\")        \/* Test type for verifying NMT               *\/ \\\n-  f(mtTracing,        \"Tracing\")                                                     \\\n-  f(mtLogging,        \"Logging\")                                                     \\\n-  f(mtStatistics,     \"Statistics\")                                                  \\\n-  f(mtArguments,      \"Arguments\")                                                   \\\n-  f(mtModule,         \"Module\")                                                      \\\n-  f(mtSafepoint,      \"Safepoint\")                                                   \\\n-  f(mtSynchronizer,   \"Synchronization\")                                             \\\n-  f(mtServiceability, \"Serviceability\")                                              \\\n-  f(mtMetaspace,      \"Metaspace\")                                                   \\\n-  f(mtStringDedup,    \"String Deduplication\")                                        \\\n-  f(mtObjectMonitor,  \"Object Monitors\")                                             \\\n-  f(mtNone,           \"Unknown\")                                                     \\\n-  \/\/end\n-\n-#define MEMORY_TYPE_DECLARE_ENUM(type, human_readable) \\\n-  type,\n-\n-\/*\n- * Memory types\n- *\/\n-enum class MEMFLAGS : uint8_t  {\n-  MEMORY_TYPES_DO(MEMORY_TYPE_DECLARE_ENUM)\n-  mt_number_of_types   \/\/ number of memory types (mtDontTrack\n-                       \/\/ is not included as validate type)\n-};\n-\/\/ Extra insurance that MEMFLAGS truly has the same size as uint8_t.\n-STATIC_ASSERT(sizeof(MEMFLAGS) == sizeof(uint8_t));\n-\n-#define MEMORY_TYPE_SHORTNAME(type, human_readable) \\\n-  constexpr MEMFLAGS type = MEMFLAGS::type;\n-\n-\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MEMFLAGS::mtGC.\n-MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME)\n-\n-\/\/ Make an int version of the sentinel end value.\n-constexpr int mt_number_of_types = static_cast<int>(MEMFLAGS::mt_number_of_types);\n@@ -165,1 +103,1 @@\n-                   MEMFLAGS flags,\n+                   MemoryType flags,\n@@ -167,1 +105,1 @@\n-                   AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                   AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -169,2 +107,2 @@\n-                   MEMFLAGS flags,\n-                   AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                   MemoryType flags,\n+                   AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -174,2 +112,2 @@\n-                     MEMFLAGS flag,\n-                     AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                     MemoryType flag,\n+                     AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -182,1 +120,1 @@\n-  ALWAYSINLINE void* operator new(size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new(size_t size, MemoryType f) throw() {\n@@ -187,1 +125,1 @@\n-                                  MEMFLAGS f,\n+                                  MemoryType f,\n@@ -193,1 +131,1 @@\n-                                  MEMFLAGS f,\n+                                  MemoryType f,\n@@ -196,1 +134,1 @@\n-    return AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n+    return AllocateHeap(size, f, stack, AllocationFailureStrategy::RETURN_NULL);\n@@ -200,1 +138,1 @@\n-                                  MEMFLAGS f,\n+                                  MemoryType f,\n@@ -202,1 +140,1 @@\n-    return AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n+    return AllocateHeap(size, f, AllocationFailureStrategy::RETURN_NULL);\n@@ -205,1 +143,1 @@\n-  ALWAYSINLINE void* operator new[](size_t size, MEMFLAGS f) throw() {\n+  ALWAYSINLINE void* operator new[](size_t size, MemoryType f) throw() {\n@@ -210,1 +148,1 @@\n-                                    MEMFLAGS f,\n+                                    MemoryType f,\n@@ -216,1 +154,1 @@\n-                                    MEMFLAGS f,\n+                                    MemoryType f,\n@@ -219,1 +157,1 @@\n-    return AllocateHeap(size, f, stack, AllocFailStrategy::RETURN_NULL);\n+    return AllocateHeap(size, f, stack, AllocationFailureStrategy::RETURN_NULL);\n@@ -223,1 +161,1 @@\n-                                    MEMFLAGS f,\n+                                    MemoryType f,\n@@ -225,1 +163,1 @@\n-    return AllocateHeap(size, f, AllocFailStrategy::RETURN_NULL);\n+    return AllocateHeap(size, f, AllocationFailureStrategy::RETURN_NULL);\n@@ -233,1 +171,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -424,1 +362,1 @@\n-    AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+    AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -426,1 +364,1 @@\n-    AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+    AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -428,1 +366,1 @@\n-    AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+    AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -440,1 +378,1 @@\n-    return resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n+    return resource_allocate_bytes(size, AllocationFailureStrategy::RETURN_NULL);\n@@ -497,4 +435,4 @@\n-  void* operator new(size_t size, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, MEMFLAGS flags) throw() = delete;\n-  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw() = delete;\n+  void* operator new(size_t size, MemoryType flags) throw();\n+  void* operator new [](size_t size, MemoryType flags) throw() = delete;\n+  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant, MemoryType flags) throw();\n+  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant, MemoryType flags) throw() = delete;\n@@ -513,1 +451,1 @@\n-    address res = (address)resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n+    address res = (address)resource_allocate_bytes(size, AllocationFailureStrategy::RETURN_NULL);\n@@ -538,1 +476,1 @@\n-  (type*) resource_allocate_bytes((size) * sizeof(type), AllocFailStrategy::RETURN_NULL)\n+  (type*) resource_allocate_bytes((size) * sizeof(type), AllocationFailureStrategy::RETURN_NULL)\n@@ -544,1 +482,1 @@\n-  (type*) resource_allocate_bytes(thread, (size) * sizeof(type), AllocFailStrategy::RETURN_NULL)\n+  (type*) resource_allocate_bytes(thread, (size) * sizeof(type), AllocationFailureStrategy::RETURN_NULL)\n@@ -551,1 +489,1 @@\n-                                    (new_size) * sizeof(type), AllocFailStrategy::RETURN_NULL)\n+                                    (new_size) * sizeof(type), AllocationFailureStrategy::RETURN_NULL)\n@@ -568,2 +506,2 @@\n-#define NEW_C_HEAP_ARRAY3(type, size, memflags, pc, allocfail)\\\n-  (type*) AllocateHeap((size) * sizeof(type), memflags, pc, allocfail)\n+#define NEW_C_HEAP_ARRAY3(type, size, MemoryType, pc, allocfail)\\\n+  (type*) AllocateHeap((size) * sizeof(type), MemoryType, pc, allocfail)\n@@ -571,2 +509,2 @@\n-#define NEW_C_HEAP_ARRAY2(type, size, memflags, pc)\\\n-  (type*) (AllocateHeap((size) * sizeof(type), memflags, pc))\n+#define NEW_C_HEAP_ARRAY2(type, size, MemoryType, pc)\\\n+  (type*) (AllocateHeap((size) * sizeof(type), MemoryType, pc))\n@@ -574,2 +512,2 @@\n-#define NEW_C_HEAP_ARRAY(type, size, memflags)\\\n-  (type*) (AllocateHeap((size) * sizeof(type), memflags))\n+#define NEW_C_HEAP_ARRAY(type, size, MemoryType)\\\n+  (type*) (AllocateHeap((size) * sizeof(type), MemoryType))\n@@ -577,2 +515,2 @@\n-#define NEW_C_HEAP_ARRAY2_RETURN_NULL(type, size, memflags, pc)\\\n-  NEW_C_HEAP_ARRAY3(type, (size), memflags, pc, AllocFailStrategy::RETURN_NULL)\n+#define NEW_C_HEAP_ARRAY2_RETURN_NULL(type, size, MemoryType, pc)\\\n+  NEW_C_HEAP_ARRAY3(type, (size), MemoryType, pc, AllocationFailureStrategy::RETURN_NULL)\n@@ -580,2 +518,2 @@\n-#define NEW_C_HEAP_ARRAY_RETURN_NULL(type, size, memflags)\\\n-  NEW_C_HEAP_ARRAY2(type, (size), memflags, AllocFailStrategy::RETURN_NULL)\n+#define NEW_C_HEAP_ARRAY_RETURN_NULL(type, size, MemoryType)\\\n+  NEW_C_HEAP_ARRAY2(type, (size), MemoryType, AllocationFailureStrategy::RETURN_NULL)\n@@ -583,2 +521,2 @@\n-#define REALLOC_C_HEAP_ARRAY(type, old, size, memflags)\\\n-  (type*) (ReallocateHeap((char*)(old), (size) * sizeof(type), memflags))\n+#define REALLOC_C_HEAP_ARRAY(type, old, size, MemoryType)\\\n+  (type*) (ReallocateHeap((char*)(old), (size) * sizeof(type), MemoryType))\n@@ -586,2 +524,2 @@\n-#define REALLOC_C_HEAP_ARRAY_RETURN_NULL(type, old, size, memflags)\\\n-  (type*) (ReallocateHeap((char*)(old), (size) * sizeof(type), memflags, AllocFailStrategy::RETURN_NULL))\n+#define REALLOC_C_HEAP_ARRAY_RETURN_NULL(type, old, size, MemoryType)\\\n+  (type*) (ReallocateHeap((char*)(old), (size) * sizeof(type), MemoryType, AllocationFailureStrategy::RETURN_NULL))\n@@ -593,2 +531,2 @@\n-#define NEW_C_HEAP_OBJ(type, memflags)\\\n-  NEW_C_HEAP_ARRAY(type, 1, memflags)\n+#define NEW_C_HEAP_OBJ(type, MemoryType)\\\n+  NEW_C_HEAP_ARRAY(type, 1, MemoryType)\n@@ -596,2 +534,2 @@\n-#define NEW_C_HEAP_OBJ_RETURN_NULL(type, memflags)\\\n-  NEW_C_HEAP_ARRAY_RETURN_NULL(type, 1, memflags)\n+#define NEW_C_HEAP_OBJ_RETURN_NULL(type, MemoryType)\\\n+  NEW_C_HEAP_ARRAY_RETURN_NULL(type, 1, MemoryType)\n@@ -630,2 +568,2 @@\n-  static E* allocate_malloc(size_t length, MEMFLAGS flags);\n-  static E* allocate_mmap(size_t length, MEMFLAGS flags);\n+  static E* allocate_malloc(size_t length, MemoryType flags);\n+  static E* allocate_mmap(size_t length, MemoryType flags);\n@@ -633,1 +571,1 @@\n-  static E* reallocate_malloc(E* addr, size_t new_length, MEMFLAGS flags);\n+  static E* reallocate_malloc(E* addr, size_t new_length, MemoryType flags);\n@@ -639,2 +577,2 @@\n-  static E* allocate(size_t length, MEMFLAGS flags);\n-  static E* reallocate(E* old_addr, size_t old_length, size_t new_length, MEMFLAGS flags);\n+  static E* allocate(size_t length, MemoryType flags);\n+  static E* reallocate(E* old_addr, size_t old_length, size_t new_length, MemoryType flags);\n@@ -652,2 +590,2 @@\n-  static E* allocate_or_null(size_t length, MEMFLAGS flags);\n-  static E* allocate(size_t length, MEMFLAGS flags);\n+  static E* allocate_or_null(size_t length, MemoryType flags);\n+  static E* allocate(size_t length, MemoryType flags);\n@@ -663,2 +601,2 @@\n-  static E* allocate(size_t length, MEMFLAGS flags);\n-  static E* reallocate(E* addr, size_t new_length, MEMFLAGS flags);\n+  static E* allocate(size_t length, MemoryType flags);\n+  static E* reallocate(E* addr, size_t new_length, MemoryType flags);\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":63,"deletions":125,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-E* MmapArrayAllocator<E>::allocate_or_null(size_t length, MEMFLAGS flags) {\n+E* MmapArrayAllocator<E>::allocate_or_null(size_t length, MemoryType flags) {\n@@ -75,1 +75,1 @@\n-E* MmapArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n+E* MmapArrayAllocator<E>::allocate(size_t length, MemoryType flags) {\n@@ -100,1 +100,1 @@\n-E* MallocArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n+E* MallocArrayAllocator<E>::allocate(size_t length, MemoryType flags) {\n@@ -105,1 +105,1 @@\n-E* MallocArrayAllocator<E>::reallocate(E* addr, size_t new_length, MEMFLAGS flags) {\n+E* MallocArrayAllocator<E>::reallocate(E* addr, size_t new_length, MemoryType flags) {\n@@ -120,1 +120,1 @@\n-E* ArrayAllocator<E>::allocate_malloc(size_t length, MEMFLAGS flags) {\n+E* ArrayAllocator<E>::allocate_malloc(size_t length, MemoryType flags) {\n@@ -125,1 +125,1 @@\n-E* ArrayAllocator<E>::allocate_mmap(size_t length, MEMFLAGS flags) {\n+E* ArrayAllocator<E>::allocate_mmap(size_t length, MemoryType flags) {\n@@ -130,1 +130,1 @@\n-E* ArrayAllocator<E>::allocate(size_t length, MEMFLAGS flags) {\n+E* ArrayAllocator<E>::allocate(size_t length, MemoryType flags) {\n@@ -139,1 +139,1 @@\n-E* ArrayAllocator<E>::reallocate_malloc(E* addr, size_t new_length, MEMFLAGS flags) {\n+E* ArrayAllocator<E>::reallocate_malloc(E* addr, size_t new_length, MemoryType flags) {\n@@ -144,1 +144,1 @@\n-E* ArrayAllocator<E>::reallocate(E* old_addr, size_t old_length, size_t new_length, MEMFLAGS flags) {\n+E* ArrayAllocator<E>::reallocate(E* old_addr, size_t old_length, size_t new_length, MemoryType flags) {\n","filename":"src\/hotspot\/share\/memory\/allocation.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_MEMORY_ALLOCATION_FAILURE_STRATEGY_HPP\n+#define SHARE_MEMORY_ALLOCATION_FAILURE_STRATEGY_HPP\n+\n+enum class AllocationFailureStrategy {\n+  EXIT_OOM,\n+  RETURN_NULL,\n+};\n+\n+#endif \/\/ SHARE_MEMORY_ALLOCATION_FAILURE_STRATEGY_HPP\n","filename":"src\/hotspot\/share\/memory\/allocationFailureStrategy.hpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -149,1 +149,1 @@\n-void* Chunk::operator new (size_t sizeofChunk, AllocFailType alloc_failmode, size_t length) throw() {\n+void* Chunk::operator new (size_t sizeofChunk, AllocationFailureStrategy alloc_failmode, size_t length) throw() {\n@@ -183,1 +183,1 @@\n-  if (p == nullptr && alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (p == nullptr && alloc_failmode == AllocationFailureStrategy::EXIT_OOM) {\n@@ -235,1 +235,1 @@\n-Arena::Arena(MEMFLAGS flag, size_t init_size) : _flags(flag), _size_in_bytes(0)  {\n+Arena::Arena(MemoryType flag, size_t init_size) : _flags(flag), _size_in_bytes(0)  {\n@@ -237,1 +237,1 @@\n-  _first = _chunk = new (AllocFailStrategy::EXIT_OOM, init_size) Chunk(init_size);\n+  _first = _chunk = new (AllocationFailureStrategy::EXIT_OOM, init_size) Chunk(init_size);\n@@ -244,2 +244,2 @@\n-Arena::Arena(MEMFLAGS flag) : _flags(flag), _size_in_bytes(0) {\n-  _first = _chunk = new (AllocFailStrategy::EXIT_OOM, Chunk::init_size) Chunk(Chunk::init_size);\n+Arena::Arena(MemoryType flag) : _flags(flag), _size_in_bytes(0) {\n+  _first = _chunk = new (AllocationFailureStrategy::EXIT_OOM, Chunk::init_size) Chunk(Chunk::init_size);\n@@ -307,1 +307,1 @@\n-void* Arena::grow(size_t x, AllocFailType alloc_failmode) {\n+void* Arena::grow(size_t x, AllocationFailureStrategy alloc_failmode) {\n@@ -332,1 +332,1 @@\n-void *Arena::Arealloc(void* old_ptr, size_t old_size, size_t new_size, AllocFailType alloc_failmode) {\n+void *Arena::Arealloc(void* old_ptr, size_t old_size, size_t new_size, AllocationFailureStrategy alloc_failmode) {\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  void* operator new(size_t size, AllocFailType alloc_failmode, size_t length) throw();\n+  void* operator new(size_t size, AllocationFailureStrategy alloc_failmode, size_t length) throw();\n@@ -95,1 +95,1 @@\n-  MEMFLAGS    _flags;           \/\/ Memory tracking flags\n+  MemoryType    _flags;           \/\/ Memory tracking flags\n@@ -101,1 +101,1 @@\n-  void* grow(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  void* grow(size_t x, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -104,1 +104,1 @@\n-  void* internal_amalloc(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM)  {\n+  void* internal_amalloc(size_t x, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM)  {\n@@ -116,2 +116,2 @@\n-  Arena(MEMFLAGS memflag);\n-  Arena(MEMFLAGS memflag, size_t init_size);\n+  Arena(MemoryType memflag);\n+  Arena(MemoryType memflag, size_t init_size);\n@@ -124,1 +124,1 @@\n-  void* Amalloc(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) {\n+  void* Amalloc(size_t x, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM) {\n@@ -136,1 +136,1 @@\n-  void* AmallocWords(size_t x, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM) {\n+  void* AmallocWords(size_t x, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM) {\n@@ -159,1 +159,1 @@\n-      AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+      AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-       mtInternal, CURRENT_PC, AllocFailStrategy::RETURN_NULL);\n+       mtInternal, CURRENT_PC, AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-MemRegion* MemRegion::create_array(size_t length, MEMFLAGS flags) {\n+MemRegion* MemRegion::create_array(size_t length, MemoryType flags) {\n","filename":"src\/hotspot\/share\/memory\/memRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static MemRegion* create_array(size_t length, MEMFLAGS flags);\n+  static MemRegion* create_array(size_t length, MemoryType flags);\n","filename":"src\/hotspot\/share\/memory\/memRegion.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MemoryType flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n@@ -103,1 +103,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MemoryType flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n@@ -115,1 +115,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MemoryType flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemoryType flags, size_t alignment>\n@@ -56,1 +56,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemoryType flags, size_t alignment>\n@@ -84,1 +84,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemoryType flags, size_t alignment>\n@@ -90,1 +90,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment>\n+template <class T, MemoryType flags, size_t alignment>\n","filename":"src\/hotspot\/share\/memory\/padded.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-void ResourceArea::bias_to(MEMFLAGS new_flags) {\n+void ResourceArea::bias_to(MemoryType new_flags) {\n@@ -66,1 +66,1 @@\n-extern char* resource_allocate_bytes(size_t size, AllocFailType alloc_failmode) {\n+extern char* resource_allocate_bytes(size_t size, AllocationFailureStrategy alloc_failmode) {\n@@ -69,1 +69,1 @@\n-extern char* resource_allocate_bytes(Thread* thread, size_t size, AllocFailType alloc_failmode) {\n+extern char* resource_allocate_bytes(Thread* thread, size_t size, AllocationFailureStrategy alloc_failmode) {\n@@ -73,1 +73,1 @@\n-extern char* resource_reallocate_bytes( char *old, size_t old_size, size_t new_size, AllocFailType alloc_failmode){\n+extern char* resource_reallocate_bytes( char *old, size_t old_size, size_t new_size, AllocationFailureStrategy alloc_failmode){\n","filename":"src\/hotspot\/share\/memory\/resourceArea.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  ResourceArea(MEMFLAGS flags = mtThread) :\n+  ResourceArea(MemoryType flags = mtThread) :\n@@ -56,1 +56,1 @@\n-  ResourceArea(size_t init_size, MEMFLAGS flags = mtThread) :\n+  ResourceArea(size_t init_size, MemoryType flags = mtThread) :\n@@ -59,1 +59,1 @@\n-  char* allocate_bytes(size_t size, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  char* allocate_bytes(size_t size, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -63,1 +63,1 @@\n-  void bias_to(MEMFLAGS flags);\n+  void bias_to(MemoryType flags);\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-inline char* ResourceArea::allocate_bytes(size_t size, AllocFailType alloc_failmode) {\n+inline char* ResourceArea::allocate_bytes(size_t size, AllocationFailureStrategy alloc_failmode) {\n","filename":"src\/hotspot\/share\/memory\/resourceArea.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"memory\/types.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+struct MemoryTypeInfo final {\n+  const char* const name;\n+  const char* const human_readable;\n+};\n+\n+static const MemoryTypeInfo _memory_type_infos[] = {\n+#define MEMORY_TYPE_INFO(type, human_readable) { #type, human_readable },\n+  MEMORY_TYPES_DO(MEMORY_TYPE_INFO)\n+#undef MEMORY_TYPE_INFO\n+};\n+\n+STATIC_ASSERT(MemoryTypes::count() == ARRAY_SIZE(_memory_type_infos));\n+\n+const char* MemoryTypes::name(MemoryType mt) {\n+  assert(is_valid(mt), \"invalid memory type (%d)\", mt);\n+  return _memory_type_infos[static_cast<int>(mt)].human_readable;\n+}\n+\n+MemoryType MemoryTypes::from_string(const char* s) {\n+  if ((s[0] == 'm' || s[0] == 'M') && (s[1] == 't' || s[1] == 'T')) {\n+    s += 2;\n+  }\n+  for (int index = 0; index < count(); index++) {\n+    const MemoryTypeInfo& info = _memory_type_infos[index];\n+    if (strcasecmp(info.human_readable, s) == 0 || strcasecmp(info.name, s) == 0) {\n+      return from_index(index);\n+    }\n+  }\n+  return mtNone;\n+}\n","filename":"src\/hotspot\/share\/memory\/types.cpp","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_MEMORY_TYPES_HPP\n+#define SHARE_MEMORY_TYPES_HPP\n+\n+#include \"memory\/allStatic.hpp\"\n+#include \"utilities\/debug.hpp\"\n+\n+#include <cstdint>\n+\n+#define MEMORY_TYPES_DO(f)                                                         \\\n+  \/* Memory type by sub systems. It occupies lower byte. *\/                        \\\n+  f(JavaHeap,       \"Java Heap\")   \/* Java heap                                 *\/ \\\n+  f(Class,          \"Class\")       \/* Java classes                              *\/ \\\n+  f(Thread,         \"Thread\")      \/* thread objects                            *\/ \\\n+  f(ThreadStack,    \"Thread Stack\")                                                \\\n+  f(Code,           \"Code\")        \/* generated code                            *\/ \\\n+  f(GC,             \"GC\")                                                          \\\n+  f(GCCardSet,      \"GCCardSet\")   \/* G1 card set remembered set                *\/ \\\n+  f(Compiler,       \"Compiler\")                                                    \\\n+  f(JVMCI,          \"JVMCI\")                                                       \\\n+  f(Internal,       \"Internal\")    \/* memory used by VM, but does not belong to *\/ \\\n+                                   \/* any of above categories, and not used by  *\/ \\\n+                                   \/* NMT                                       *\/ \\\n+  f(Other,          \"Other\")       \/* memory not used by VM                     *\/ \\\n+  f(Symbol,         \"Symbol\")                                                      \\\n+  f(NMT,            \"Native Memory Tracking\")  \/* memory used by NMT            *\/ \\\n+  f(ClassShared,    \"Shared class space\")      \/* class data sharing            *\/ \\\n+  f(Chunk,          \"Arena Chunk\") \/* chunk that holds content of arenas        *\/ \\\n+  f(Test,           \"Test\")        \/* Test type for verifying NMT               *\/ \\\n+  f(Tracing,        \"Tracing\")                                                     \\\n+  f(Logging,        \"Logging\")                                                     \\\n+  f(Statistics,     \"Statistics\")                                                  \\\n+  f(Arguments,      \"Arguments\")                                                   \\\n+  f(Module,         \"Module\")                                                      \\\n+  f(Safepoint,      \"Safepoint\")                                                   \\\n+  f(Synchronizer,   \"Synchronization\")                                             \\\n+  f(Serviceability, \"Serviceability\")                                              \\\n+  f(Metaspace,      \"Metaspace\")                                                   \\\n+  f(StringDedup,    \"String Deduplication\")                                        \\\n+  f(ObjectMonitor,  \"Object Monitors\")                                             \\\n+  f(None,           \"Unknown\")\n+\n+\/*\n+ * Memory types.\n+ *\/\n+enum class MemoryType : uint8_t {\n+#define MEMORY_TYPE_DECLARE_ENUM(type, human_readable) type,\n+  MEMORY_TYPES_DO(MEMORY_TYPE_DECLARE_ENUM)\n+#undef MEMORY_TYPE_DECLARE_ENUM\n+};\n+\n+\/\/ Extra insurance that MemoryType truly has the same size as uint8_t.\n+STATIC_ASSERT(sizeof(MemoryType) == sizeof(uint8_t));\n+\n+\/\/ Generate short aliases for the enum values. E.g. mtGC instead of MemoryType::GC.\n+#define MEMORY_TYPE_SHORTNAME(type, human_readable) \\\n+  constexpr MemoryType mt##type = MemoryType::type;\n+MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME)\n+#undef MEMORY_TYPE_SHORTNAME\n+\n+class MemoryTypes final : public AllStatic {\n+ public:\n+  static constexpr int count() {\n+#define MEMORY_TYPE_COUNT(type, human_readable) + 1\n+    return 0 MEMORY_TYPES_DO(MEMORY_TYPE_COUNT);\n+#undef MEMORY_TYPE_COUNT\n+  }\n+\n+  static const char* name(MemoryType mt);\n+\n+  static constexpr bool is_index_valid(int index) {\n+    return index >= 0 && index < count();\n+  }\n+\n+  static constexpr bool is_valid(MemoryType mt) {\n+    return is_index_valid(static_cast<int>(mt));\n+  }\n+\n+  static inline MemoryType from_index(int index) {\n+    assert(is_index_valid(index), \"invalid memory type index (%d)\", index);\n+    return static_cast<MemoryType>(index);\n+  }\n+\n+  static inline int to_index(MemoryType mt) {\n+    assert(is_valid(mt), \"invalid memory type (%d)\", mt);\n+    return static_cast<int>(mt);\n+  }\n+\n+  static MemoryType from_string(const char* s);\n+};\n+\n+\/\/ Legacy constant.\n+constexpr int mt_number_of_types = MemoryTypes::count();\n+\n+#endif \/\/ SHARE_MEMORY_TYPES_HPP\n","filename":"src\/hotspot\/share\/memory\/types.hpp","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -677,1 +677,1 @@\n-  jobject ret = JNIHandles::make_global(ref_handle, AllocFailStrategy::RETURN_NULL);\n+  jobject ret = JNIHandles::make_global(ref_handle, AllocationFailureStrategy::RETURN_NULL);\n@@ -714,1 +714,1 @@\n-                                       AllocFailStrategy::RETURN_NULL);\n+                                       AllocationFailureStrategy::RETURN_NULL);\n@@ -2235,1 +2235,1 @@\n-    result = AllocateHeap(length + 1, mtInternal, AllocFailStrategy::RETURN_NULL);\n+    result = AllocateHeap(length + 1, mtInternal, AllocationFailureStrategy::RETURN_NULL);\n@@ -2877,1 +2877,1 @@\n-  jweak ret = JNIHandles::make_weak_global(ref_handle, AllocFailStrategy::RETURN_NULL);\n+  jweak ret = JNIHandles::make_weak_global(ref_handle, AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4043,1 +4043,1 @@\n-        if (p->set_value(value_ptr, AllocFailStrategy::RETURN_NULL)) {\n+        if (p->set_value(value_ptr, AllocationFailureStrategy::RETURN_NULL)) {\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -664,1 +664,1 @@\n-  return (jlong)(uintptr_t)os::malloc(size, (MEMFLAGS)type, stack);\n+  return (jlong)(uintptr_t)os::malloc(size, (MemoryType)type, stack);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-bool PathString::set_value(const char *value, AllocFailType alloc_failmode) {\n+bool PathString::set_value(const char *value, AllocationFailureStrategy alloc_failmode) {\n@@ -134,1 +134,1 @@\n-    assert(alloc_failmode == AllocFailStrategy::RETURN_NULL, \"must be\");\n+    assert(alloc_failmode == AllocationFailureStrategy::RETURN_NULL, \"must be\");\n@@ -4291,1 +4291,1 @@\n-  MEMFLAGS f = NMTUtil::string_to_flag(expression);\n+  MemoryType f = NMTUtil::string_to_flag(expression);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-  \/\/ return false iff OOM && alloc_failmode == AllocFailStrategy::RETURN_NULL\n-  bool set_value(const char *value, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  \/\/ return false iff OOM && alloc_failmode == AllocationFailureStrategy::RETURN_NULL\n+  bool set_value(const char *value, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-jobject JNIHandles::make_local(JavaThread* thread, oop obj, AllocFailType alloc_failmode) {\n+jobject JNIHandles::make_local(JavaThread* thread, oop obj, AllocationFailureStrategy alloc_failmode) {\n@@ -74,1 +74,1 @@\n-static void report_handle_allocation_failure(AllocFailType alloc_failmode,\n+static void report_handle_allocation_failure(AllocationFailureStrategy alloc_failmode,\n@@ -76,1 +76,1 @@\n-  if (alloc_failmode == AllocFailStrategy::EXIT_OOM) {\n+  if (alloc_failmode == AllocationFailureStrategy::EXIT_OOM) {\n@@ -81,1 +81,1 @@\n-    assert(alloc_failmode == AllocFailStrategy::RETURN_NULL, \"invariant\");\n+    assert(alloc_failmode == AllocationFailureStrategy::RETURN_NULL, \"invariant\");\n@@ -85,1 +85,1 @@\n-jobject JNIHandles::make_global(Handle obj, AllocFailType alloc_failmode) {\n+jobject JNIHandles::make_global(Handle obj, AllocationFailureStrategy alloc_failmode) {\n@@ -107,1 +107,1 @@\n-jweak JNIHandles::make_weak_global(Handle obj, AllocFailType alloc_failmode) {\n+jweak JNIHandles::make_weak_global(Handle obj, AllocationFailureStrategy alloc_failmode) {\n@@ -323,1 +323,1 @@\n-JNIHandleBlock* JNIHandleBlock::allocate_block(JavaThread* thread, AllocFailType alloc_failmode)  {\n+JNIHandleBlock* JNIHandleBlock::allocate_block(JavaThread* thread, AllocationFailureStrategy alloc_failmode)  {\n@@ -335,1 +335,1 @@\n-    if (alloc_failmode == AllocFailStrategy::RETURN_NULL) {\n+    if (alloc_failmode == AllocationFailureStrategy::RETURN_NULL) {\n@@ -424,1 +424,1 @@\n-jobject JNIHandleBlock::allocate_handle(JavaThread* caller, oop obj, AllocFailType alloc_failmode) {\n+jobject JNIHandleBlock::allocate_handle(JavaThread* caller, oop obj, AllocationFailureStrategy alloc_failmode) {\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                            AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                            AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -102,1 +102,1 @@\n-                             AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                             AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -107,1 +107,1 @@\n-                                AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+                                AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -170,1 +170,1 @@\n-  jobject allocate_handle(JavaThread* caller, oop obj, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  jobject allocate_handle(JavaThread* caller, oop obj, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n@@ -173,1 +173,1 @@\n-  static JNIHandleBlock* allocate_block(JavaThread* thread = nullptr, AllocFailType alloc_failmode = AllocFailStrategy::EXIT_OOM);\n+  static JNIHandleBlock* allocate_block(JavaThread* thread = nullptr, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::EXIT_OOM);\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -593,1 +593,1 @@\n-char *os::strdup(const char *str, MEMFLAGS flags) {\n+char *os::strdup(const char *str, MemoryType flags) {\n@@ -601,1 +601,1 @@\n-char* os::strdup_check_oom(const char* str, MEMFLAGS flags) {\n+char* os::strdup_check_oom(const char* str, MemoryType flags) {\n@@ -639,1 +639,1 @@\n-void* os::malloc(size_t size, MEMFLAGS flags) {\n+void* os::malloc(size_t size, MemoryType flags) {\n@@ -643,1 +643,1 @@\n-void* os::malloc(size_t size, MEMFLAGS memflags, const NativeCallStack& stack) {\n+void* os::malloc(size_t size, MemoryType mt, const NativeCallStack& stack) {\n@@ -677,1 +677,1 @@\n-  void* const inner_ptr = MemTracker::record_malloc((address)outer_ptr, size, memflags, stack);\n+  void* const inner_ptr = MemTracker::record_malloc((address)outer_ptr, size, mt, stack);\n@@ -689,1 +689,1 @@\n-void* os::realloc(void *memblock, size_t size, MEMFLAGS flags) {\n+void* os::realloc(void *memblock, size_t size, MemoryType flags) {\n@@ -693,1 +693,1 @@\n-void* os::realloc(void *memblock, size_t size, MEMFLAGS memflags, const NativeCallStack& stack) {\n+void* os::realloc(void *memblock, size_t size, MemoryType mt, const NativeCallStack& stack) {\n@@ -702,1 +702,1 @@\n-    return os::malloc(size, memflags, stack);\n+    return os::malloc(size, mt, stack);\n@@ -747,1 +747,1 @@\n-    void* const new_inner_ptr = MemTracker::record_malloc(new_outer_ptr, size, memflags, stack);\n+    void* const new_inner_ptr = MemTracker::record_malloc(new_outer_ptr, size, mt, stack);\n@@ -1736,1 +1736,1 @@\n-char* os::reserve_memory(size_t bytes, bool executable, MEMFLAGS flags) {\n+char* os::reserve_memory(size_t bytes, bool executable, MemoryType flags) {\n@@ -1881,1 +1881,1 @@\n-                           bool allow_exec, MEMFLAGS flags) {\n+                           bool allow_exec, MemoryType flags) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -419,1 +419,1 @@\n-  static char*  reserve_memory(size_t bytes, bool executable = false, MEMFLAGS flags = mtNone);\n+  static char*  reserve_memory(size_t bytes, bool executable = false, MemoryType flags = mtNone);\n@@ -483,1 +483,1 @@\n-                           bool allow_exec = false, MEMFLAGS flags = mtNone);\n+                           bool allow_exec = false, MemoryType flags = mtNone);\n@@ -865,4 +865,4 @@\n-  static void* malloc  (size_t size, MEMFLAGS flags, const NativeCallStack& stack);\n-  static void* malloc  (size_t size, MEMFLAGS flags);\n-  static void* realloc (void *memblock, size_t size, MEMFLAGS flag, const NativeCallStack& stack);\n-  static void* realloc (void *memblock, size_t size, MEMFLAGS flag);\n+  static void* malloc  (size_t size, MemoryType flags, const NativeCallStack& stack);\n+  static void* malloc  (size_t size, MemoryType flags);\n+  static void* realloc (void *memblock, size_t size, MemoryType flag, const NativeCallStack& stack);\n+  static void* realloc (void *memblock, size_t size, MemoryType flag);\n@@ -872,1 +872,1 @@\n-  static char* strdup(const char *, MEMFLAGS flags = mtInternal);  \/\/ Like strdup\n+  static char* strdup(const char *, MemoryType flags = mtInternal);  \/\/ Like strdup\n@@ -874,1 +874,1 @@\n-  static char* strdup_check_oom(const char*, MEMFLAGS flags = mtInternal);\n+  static char* strdup_check_oom(const char*, MemoryType flags = mtInternal);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                        AllocFailStrategy::RETURN_NULL> {};\n+                        AllocationFailureStrategy::RETURN_NULL> {};\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-void* Thread::allocate(size_t size, bool throw_excpt, MEMFLAGS flags) {\n+void* Thread::allocate(size_t size, bool throw_excpt, MemoryType flags) {\n@@ -63,1 +63,1 @@\n-                       : AllocateHeap(size, flags, CURRENT_PC, AllocFailStrategy::RETURN_NULL);\n+                       : AllocateHeap(size, flags, CURRENT_PC, AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  static void* allocate(size_t size, bool throw_excpt, MEMFLAGS flags = mtThread);\n+  static void* allocate(size_t size, bool throw_excpt, MemoryType flags = mtThread);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  const MEMFLAGS         _flag;\n+  const MemoryType         _flag;\n@@ -38,1 +38,1 @@\n-  AllocationSite(const NativeCallStack& stack, MEMFLAGS flag) : _call_stack(stack), _flag(flag) { }\n+  AllocationSite(const NativeCallStack& stack, MemoryType flag) : _call_stack(stack), _flag(flag) { }\n@@ -52,1 +52,1 @@\n-  MEMFLAGS flag() const { return _flag; }\n+  MemoryType flag() const { return _flag; }\n","filename":"src\/hotspot\/share\/services\/allocationSite.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  const MEMFLAGS _flags;\n+  const MemoryType _flags;\n@@ -124,1 +124,1 @@\n-    const MEMFLAGS flags;\n+    const MemoryType flags;\n@@ -128,1 +128,1 @@\n-  inline MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker);\n+  inline MallocHeader(size_t size, MemoryType flags, uint32_t mst_marker);\n@@ -131,1 +131,1 @@\n-  inline MEMFLAGS flags() const { return _flags; }\n+  inline MemoryType flags() const { return _flags; }\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-inline MallocHeader::MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker)\n+inline MallocHeader::MallocHeader(size_t size, MemoryType flags, uint32_t mst_marker)\n","filename":"src\/hotspot\/share\/services\/mallocHeader.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags) {\n+MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MemoryType flags) {\n@@ -181,1 +181,1 @@\n-MallocSiteHashtableEntry* MallocSiteTable::new_entry(const NativeCallStack& key, MEMFLAGS flags) {\n+MallocSiteHashtableEntry* MallocSiteTable::new_entry(const NativeCallStack& key, MemoryType flags) {\n@@ -183,1 +183,1 @@\n-    *hash_entry_allocation_stack(), AllocFailStrategy::RETURN_NULL);\n+    *hash_entry_allocation_stack(), AllocationFailureStrategy::RETURN_NULL);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  MallocSite(const NativeCallStack& stack, MEMFLAGS flags) :\n+  MallocSite(const NativeCallStack& stack, MemoryType flags) :\n@@ -66,1 +66,1 @@\n-  MallocSiteHashtableEntry(NativeCallStack stack, MEMFLAGS flags):\n+  MallocSiteHashtableEntry(NativeCallStack stack, MemoryType flags):\n@@ -150,1 +150,1 @@\n-      uint32_t* marker, MEMFLAGS flags) {\n+      uint32_t* marker, MemoryType flags) {\n@@ -173,1 +173,1 @@\n-  static MallocSiteHashtableEntry* new_entry(const NativeCallStack& key, MEMFLAGS flags);\n+  static MallocSiteHashtableEntry* new_entry(const NativeCallStack& key, MemoryType flags);\n@@ -175,1 +175,1 @@\n-  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags);\n+  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MemoryType flags);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                      NMTUtil::flag_to_name((MEMFLAGS)i),\n+                      NMTUtil::flag_to_name((MemoryType)i),\n@@ -115,1 +115,1 @@\n-void MallocMemorySummary::category_limit_reached(size_t size, size_t limit, MEMFLAGS flag) {\n+void MallocMemorySummary::category_limit_reached(size_t size, size_t limit, MemoryType flag) {\n@@ -131,1 +131,1 @@\n-                  NMTUtil::flag_to_name((MEMFLAGS)i), _limits_per_category[i]);\n+                  NMTUtil::flag_to_name((MemoryType)i), _limits_per_category[i]);\n@@ -150,1 +150,1 @@\n-void* MallocTracker::record_malloc(void* malloc_base, size_t size, MEMFLAGS flags,\n+void* MallocTracker::record_malloc(void* malloc_base, size_t size, MemoryType flags,\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-  inline MallocMemory* by_type(MEMFLAGS flags) {\n+  inline MallocMemory* by_type(MemoryType flags) {\n@@ -161,1 +161,1 @@\n-  inline const MallocMemory* by_type(MEMFLAGS flags) const {\n+  inline const MallocMemory* by_type(MemoryType flags) const {\n@@ -218,1 +218,1 @@\n-  static void category_limit_reached(size_t size, size_t limit, MEMFLAGS flag);\n+  static void category_limit_reached(size_t size, size_t limit, MemoryType flag);\n@@ -220,1 +220,1 @@\n-  static void check_limits_after_allocation(MEMFLAGS flag) {\n+  static void check_limits_after_allocation(MemoryType flag) {\n@@ -243,1 +243,1 @@\n-   static inline void record_malloc(size_t size, MEMFLAGS flag) {\n+   static inline void record_malloc(size_t size, MemoryType flag) {\n@@ -249,1 +249,1 @@\n-   static inline void record_free(size_t size, MEMFLAGS flag) {\n+   static inline void record_free(size_t size, MemoryType flag) {\n@@ -254,1 +254,1 @@\n-   static inline void record_new_arena(MEMFLAGS flag) {\n+   static inline void record_new_arena(MemoryType flag) {\n@@ -258,1 +258,1 @@\n-   static inline void record_arena_free(MEMFLAGS flag) {\n+   static inline void record_arena_free(MemoryType flag) {\n@@ -262,1 +262,1 @@\n-   static inline void record_arena_size_change(ssize_t size, MEMFLAGS flag) {\n+   static inline void record_arena_size_change(ssize_t size, MemoryType flag) {\n@@ -303,1 +303,1 @@\n-  static void* record_malloc(void* malloc_base, size_t size, MEMFLAGS flags,\n+  static void* record_malloc(void* malloc_base, size_t size, MemoryType flags,\n@@ -312,1 +312,1 @@\n-  static inline void record_new_arena(MEMFLAGS flags) {\n+  static inline void record_new_arena(MemoryType flags) {\n@@ -316,1 +316,1 @@\n-  static inline void record_arena_free(MEMFLAGS flags) {\n+  static inline void record_arena_free(MemoryType flags) {\n@@ -320,1 +320,1 @@\n-  static inline void record_arena_size_change(ssize_t size, MEMFLAGS flags) {\n+  static inline void record_arena_size_change(ssize_t size, MemoryType flags) {\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-  MallocMemory* malloc_memory(MEMFLAGS flag) {\n+  MallocMemory* malloc_memory(MemoryType flag) {\n@@ -151,1 +151,1 @@\n-  VirtualMemory* virtual_memory(MEMFLAGS flag) {\n+  VirtualMemory* virtual_memory(MemoryType flag) {\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemoryType flag = NMTUtil::index_to_flag(index);\n","filename":"src\/hotspot\/share\/services\/memJfrReporter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-void MemReporterBase::print_malloc(const MemoryCounter* c, MEMFLAGS flag) const {\n+void MemReporterBase::print_malloc(const MemoryCounter* c, MemoryType flag) const {\n@@ -169,1 +169,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemoryType flag = NMTUtil::index_to_flag(index);\n@@ -179,1 +179,1 @@\n-void MemSummaryReporter::report_summary_of_type(MEMFLAGS flag,\n+void MemSummaryReporter::report_summary_of_type(MemoryType flag,\n@@ -330,1 +330,1 @@\n-    MEMFLAGS flag = malloc_site->flag();\n+    MemoryType flag = malloc_site->flag();\n@@ -362,1 +362,1 @@\n-    MEMFLAGS flag = virtual_memory_site->flag();\n+    MemoryType flag = virtual_memory_site->flag();\n@@ -452,1 +452,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    MemoryType flag = NMTUtil::index_to_flag(index);\n@@ -466,1 +466,1 @@\n-    size_t early_amount, size_t early_count, MEMFLAGS flags) const {\n+    size_t early_amount, size_t early_count, MemoryType flags) const {\n@@ -524,1 +524,1 @@\n-void MemSummaryDiffReporter::diff_summary_of_type(MEMFLAGS flag,\n+void MemSummaryDiffReporter::diff_summary_of_type(MemoryType flag,\n@@ -817,1 +817,1 @@\n-  size_t current_count, size_t early_size, size_t early_count, MEMFLAGS flags) const {\n+  size_t current_count, size_t early_size, size_t early_count, MemoryType flags) const {\n@@ -852,1 +852,1 @@\n-  size_t current_committed, size_t early_reserved, size_t early_committed, MEMFLAGS flag) const  {\n+  size_t current_committed, size_t early_reserved, size_t early_committed, MemoryType flag) const  {\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void print_malloc(const MemoryCounter* c, MEMFLAGS flag = mtNone) const;\n+  void print_malloc(const MemoryCounter* c, MemoryType flag = mtNone) const;\n@@ -145,1 +145,1 @@\n-  void report_summary_of_type(MEMFLAGS type, MallocMemory* malloc_memory,\n+  void report_summary_of_type(MemoryType type, MallocMemory* malloc_memory,\n@@ -207,1 +207,1 @@\n-  void diff_summary_of_type(MEMFLAGS type,\n+  void diff_summary_of_type(MemoryType type,\n@@ -215,1 +215,1 @@\n-    size_t early_amount, size_t early_count, MEMFLAGS flags) const;\n+    size_t early_amount, size_t early_count, MemoryType flags) const;\n@@ -263,1 +263,1 @@\n-    size_t currrent_count, size_t early_size, size_t early_count, MEMFLAGS flags) const;\n+    size_t currrent_count, size_t early_size, size_t early_count, MemoryType flags) const;\n@@ -265,1 +265,1 @@\n-    size_t current_committed, size_t early_reserved, size_t early_committed, MEMFLAGS flag) const;\n+    size_t current_committed, size_t early_reserved, size_t early_committed, MemoryType flag) const;\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  static inline void* record_malloc(void* mem_base, size_t size, MEMFLAGS flag,\n+  static inline void* record_malloc(void* mem_base, size_t size, MemoryType flag,\n@@ -120,1 +120,1 @@\n-  static inline void record_new_arena(MEMFLAGS flag) {\n+  static inline void record_new_arena(MemoryType flag) {\n@@ -126,1 +126,1 @@\n-  static inline void record_arena_free(MEMFLAGS flag) {\n+  static inline void record_arena_free(MemoryType flag) {\n@@ -133,1 +133,1 @@\n-  static inline void record_arena_size_change(ssize_t diff, MEMFLAGS flag) {\n+  static inline void record_arena_size_change(ssize_t diff, MemoryType flag) {\n@@ -142,1 +142,1 @@\n-    MEMFLAGS flag = mtNone) {\n+    MemoryType flag = mtNone) {\n@@ -152,1 +152,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag = mtNone) {\n+    const NativeCallStack& stack, MemoryType flag = mtNone) {\n@@ -187,1 +187,1 @@\n-  static inline void record_virtual_memory_type(void* addr, MEMFLAGS flag) {\n+  static inline void record_virtual_memory_type(void* addr, MemoryType flag) {\n","filename":"src\/hotspot\/share\/services\/memTracker.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,7 +32,0 @@\n-#define MEMORY_TYPE_DECLARE_NAME(type, human_readable) \\\n-  { #type, human_readable },\n-\n-NMTUtil::S NMTUtil::_strings[] = {\n-  MEMORY_TYPES_DO(MEMORY_TYPE_DECLARE_NAME)\n-};\n-\n@@ -89,13 +82,0 @@\n-\n-MEMFLAGS NMTUtil::string_to_flag(const char* s) {\n-  for (int i = 0; i < mt_number_of_types; i ++) {\n-    assert(::strlen(_strings[i].enum_s) > 2, \"Sanity\"); \/\/ should always start with \"mt\"\n-    if (::strcasecmp(_strings[i].human_readable, s) == 0 ||\n-        ::strcasecmp(_strings[i].enum_s, s) == 0 ||\n-        ::strcasecmp(_strings[i].enum_s + 2, s) == 0) \/\/ \"mtXXX\" -> match also \"XXX\" or \"xxx\"\n-    {\n-      return (MEMFLAGS)i;\n-    }\n-  }\n-  return mtNone;\n-}\n","filename":"src\/hotspot\/share\/services\/nmtCommon.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\" \/\/ for MEMFLAGS only\n+#include \"memory\/types.hpp\"\n@@ -77,1 +77,1 @@\n-  \/\/ Check if index is a valid MEMFLAGS enum value (including mtNone)\n+  \/\/ Check if index is a valid MemoryType enum value (including mtNone)\n@@ -79,1 +79,1 @@\n-    return index >= 0 && index < mt_number_of_types;\n+    return MemoryTypes::is_index_valid(index);\n@@ -82,4 +82,3 @@\n-  \/\/ Check if flag value is a valid MEMFLAGS enum value (including mtNone)\n-  static inline bool flag_is_valid(MEMFLAGS flag) {\n-    const int index = static_cast<int>(flag);\n-    return flag_index_is_valid(index);\n+  \/\/ Check if flag value is a valid MemoryType enum value (including mtNone)\n+  static inline bool flag_is_valid(MemoryType flag) {\n+    return MemoryTypes::is_valid(flag);\n@@ -89,3 +88,2 @@\n-  static inline int flag_to_index(MEMFLAGS flag) {\n-    assert(flag_is_valid(flag), \"Invalid flag (%u)\", (unsigned)flag);\n-    return static_cast<int>(flag);\n+  static inline int flag_to_index(MemoryType flag) {\n+    return MemoryTypes::to_index(flag);\n@@ -95,2 +93,2 @@\n-  static const char* flag_to_name(MEMFLAGS flag) {\n-    return _strings[flag_to_index(flag)].human_readable;\n+  static const char* flag_to_name(MemoryType flag) {\n+    return MemoryTypes::name(flag);\n@@ -100,3 +98,2 @@\n-  static MEMFLAGS index_to_flag(int index) {\n-    assert(flag_index_is_valid(index), \"Invalid flag index (%d)\", index);\n-    return static_cast<MEMFLAGS>(index);\n+  static MemoryType index_to_flag(int index) {\n+    return MemoryTypes::from_index(index);\n@@ -121,1 +118,3 @@\n-  static MEMFLAGS string_to_flag(const char* name);\n+  static MemoryType string_to_flag(const char* name) {\n+    return MemoryTypes::from_string(name);\n+  }\n@@ -125,7 +124,0 @@\n-\n- private:\n-  struct S {\n-    const char* enum_s; \/\/ e.g. \"mtNMT\"\n-    const char* human_readable; \/\/ e.g. \"Native Memory Tracking\"\n-  };\n-  static S _strings[mt_number_of_types];\n","filename":"src\/hotspot\/share\/services\/nmtCommon.hpp","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(i);\n+    MemoryType flag = NMTUtil::index_to_flag(i);\n@@ -87,1 +87,1 @@\n-    MEMFLAGS flag = NMTUtil::index_to_flag(i);\n+    MemoryType flag = NMTUtil::index_to_flag(i);\n@@ -121,1 +121,1 @@\n-size_t NMTUsage::reserved(MEMFLAGS flag) const {\n+size_t NMTUsage::reserved(MemoryType flag) const {\n@@ -126,1 +126,1 @@\n-size_t NMTUsage::committed(MEMFLAGS flag) const {\n+size_t NMTUsage::committed(MemoryType flag) const {\n","filename":"src\/hotspot\/share\/services\/nmtUsage.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  size_t reserved(MEMFLAGS flag) const;\n-  size_t committed(MEMFLAGS flag) const;\n+  size_t reserved(MemoryType flag) const;\n+  size_t committed(MemoryType flag) const;\n","filename":"src\/hotspot\/share\/services\/nmtUsage.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-void ReservedMemoryRegion::set_flag(MEMFLAGS f) {\n+void ReservedMemoryRegion::set_flag(MemoryType f) {\n@@ -334,1 +334,1 @@\n-    const NativeCallStack& stack, MEMFLAGS flag) {\n+    const NativeCallStack& stack, MemoryType flag) {\n@@ -409,1 +409,1 @@\n-void VirtualMemoryTracker::set_reserved_region_type(address addr, MEMFLAGS flag) {\n+void VirtualMemoryTracker::set_reserved_region_type(address addr, MemoryType flag) {\n@@ -563,1 +563,1 @@\n-  MEMFLAGS original_flags = reserved_rgn->flag();\n+  MemoryType original_flags = reserved_rgn->flag();\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  VirtualMemoryAllocationSite(const NativeCallStack& stack, MEMFLAGS flag) :\n+  VirtualMemoryAllocationSite(const NativeCallStack& stack, MemoryType flag) :\n@@ -95,1 +95,1 @@\n-  inline VirtualMemory* by_type(MEMFLAGS flag) {\n+  inline VirtualMemory* by_type(MemoryType flag) {\n@@ -100,1 +100,1 @@\n-  inline const VirtualMemory* by_type(MEMFLAGS flag) const {\n+  inline const VirtualMemory* by_type(MemoryType flag) const {\n@@ -132,1 +132,1 @@\n-  static inline void record_reserved_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_reserved_memory(size_t size, MemoryType flag) {\n@@ -136,1 +136,1 @@\n-  static inline void record_committed_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_committed_memory(size_t size, MemoryType flag) {\n@@ -140,1 +140,1 @@\n-  static inline void record_uncommitted_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_uncommitted_memory(size_t size, MemoryType flag) {\n@@ -144,1 +144,1 @@\n-  static inline void record_released_memory(size_t size, MEMFLAGS flag) {\n+  static inline void record_released_memory(size_t size, MemoryType flag) {\n@@ -152,1 +152,1 @@\n-  static inline void move_reserved_memory(MEMFLAGS from, MEMFLAGS to, size_t size) {\n+  static inline void move_reserved_memory(MemoryType from, MemoryType to, size_t size) {\n@@ -157,1 +157,1 @@\n-  static inline void move_committed_memory(MEMFLAGS from, MEMFLAGS to, size_t size) {\n+  static inline void move_committed_memory(MemoryType from, MemoryType to, size_t size) {\n@@ -291,1 +291,1 @@\n-  MEMFLAGS         _flag;\n+  MemoryType         _flag;\n@@ -295,1 +295,1 @@\n-    MEMFLAGS flag = mtNone) :\n+    MemoryType flag = mtNone) :\n@@ -311,2 +311,2 @@\n-  void  set_flag(MEMFLAGS flag);\n-  inline MEMFLAGS flag() const            { return _flag;  }\n+  void  set_flag(MemoryType flag);\n+  inline MemoryType flag() const            { return _flag;  }\n@@ -377,1 +377,1 @@\n-  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MEMFLAGS flag = mtNone);\n+  static bool add_reserved_region (address base_addr, size_t size, const NativeCallStack& stack, MemoryType flag = mtNone);\n@@ -383,1 +383,1 @@\n-  static void set_reserved_region_type  (address addr, MEMFLAGS flag);\n+  static void set_reserved_region_type  (address addr, MemoryType flag);\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-CHeapBitMap::CHeapBitMap(idx_t size_in_bits, MEMFLAGS flags, bool clear)\n+CHeapBitMap::CHeapBitMap(idx_t size_in_bits, MemoryType flags, bool clear)\n","filename":"src\/hotspot\/share\/utilities\/bitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-  const MEMFLAGS _flags;\n+  const MemoryType _flags;\n@@ -401,2 +401,2 @@\n-  explicit CHeapBitMap(MEMFLAGS flags) : GrowableBitMap(0, false), _flags(flags) {}\n-  CHeapBitMap(idx_t size_in_bits, MEMFLAGS flags, bool clear = true);\n+  explicit CHeapBitMap(MemoryType flags) : GrowableBitMap(0, false), _flags(flags) {}\n+  CHeapBitMap(idx_t size_in_bits, MemoryType flags, bool clear = true);\n","filename":"src\/hotspot\/share\/utilities\/bitMap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-template <class T, MEMFLAGS F> class ChunkedList : public CHeapObj<F> {\n+template <class T, MemoryType F> class ChunkedList : public CHeapObj<F> {\n","filename":"src\/hotspot\/share\/utilities\/chunkedList.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -63,1 +63,1 @@\n-  \/\/ Only constructed with placement new from memory allocated with MEMFLAGS of\n+  \/\/ Only constructed with placement new from memory allocated with MemoryType of\n@@ -95,1 +95,1 @@\n-  \/\/ Only constructed with placement new from an array allocated with MEMFLAGS\n+  \/\/ Only constructed with placement new from an array allocated with MemoryType\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -70,1 +70,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -78,1 +78,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -90,1 +90,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -99,1 +99,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -106,1 +106,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -113,1 +113,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -131,1 +131,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -144,1 +144,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -159,1 +159,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -174,1 +174,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -184,1 +184,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -193,1 +193,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -209,1 +209,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -217,1 +217,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -230,1 +230,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -237,1 +237,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -246,1 +246,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -274,1 +274,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -290,1 +290,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -307,1 +307,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -326,1 +326,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -351,1 +351,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -361,1 +361,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -377,1 +377,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -385,1 +385,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -393,1 +393,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -409,1 +409,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -449,1 +449,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -482,1 +482,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -537,1 +537,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -574,1 +574,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -588,1 +588,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -619,1 +619,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -645,1 +645,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -703,1 +703,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -720,1 +720,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -739,1 +739,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -776,1 +776,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -791,1 +791,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -805,1 +805,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -831,1 +831,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -849,1 +849,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -865,1 +865,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -886,1 +886,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -953,1 +953,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -969,1 +969,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -986,1 +986,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1017,1 +1017,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1037,1 +1037,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1047,1 +1047,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1055,1 +1055,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1063,1 +1063,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1072,1 +1072,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1080,1 +1080,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1088,1 +1088,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1103,1 +1103,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1123,1 +1123,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1136,1 +1136,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1150,1 +1150,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1174,1 +1174,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1199,1 +1199,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1213,1 +1213,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1225,1 +1225,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1256,1 +1256,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1271,1 +1271,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -1288,1 +1288,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -149,1 +149,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -193,1 +193,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n@@ -232,1 +232,1 @@\n-template <typename CONFIG, MEMFLAGS F>\n+template <typename CONFIG, MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTableTasks.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MEMFLAGS memflags) {\n+void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MemoryType mt) {\n@@ -50,2 +50,2 @@\n-  assert(memflags != mtNone, \"memory type not specified for C heap object\");\n-  return (void*)AllocateHeap(byte_size, memflags);\n+  assert(mt != mtNone, \"memory type not specified for C heap object\");\n+  return (void*)AllocateHeap(byte_size, mt);\n","filename":"src\/hotspot\/share\/utilities\/growableArray.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-  static void* allocate(int max, int element_size, MEMFLAGS memflags);\n+  static void* allocate(int max, int element_size, MemoryType mt);\n@@ -593,3 +593,3 @@\n-  static uintptr_t bits(MEMFLAGS memflags) {\n-    assert(memflags != mtNone, \"Must provide a proper MEMFLAGS\");\n-    return (uintptr_t(memflags) << 1) | 1;\n+  static uintptr_t bits(MemoryType mt) {\n+    assert(MemoryType != mtNone, \"Must provide a proper MemoryType\");\n+    return (uintptr_t(mt) << 1) | 1;\n@@ -618,2 +618,2 @@\n-  GrowableArrayMetadata(MEMFLAGS memflags) :\n-      _bits(bits(memflags))\n+  GrowableArrayMetadata(MemoryType mt) :\n+      _bits(bits(mt))\n@@ -648,1 +648,1 @@\n-  MEMFLAGS memflags() const { return MEMFLAGS(_bits >> 1); }\n+  MemoryType memory_type() const { return MemoryType(_bits >> 1); }\n@@ -655,1 +655,1 @@\n-\/\/  - CHeap allocation: if memflags is provided\n+\/\/  - CHeap allocation: if MemoryType is provided\n@@ -677,2 +677,2 @@\n-  static E* allocate(int max, MEMFLAGS memflags) {\n-    return (E*)GrowableArrayCHeapAllocator::allocate(max, sizeof(E), memflags);\n+  static E* allocate(int max, MemoryType mt) {\n+    return (E*)GrowableArrayCHeapAllocator::allocate(max, sizeof(E), mt);\n@@ -701,1 +701,1 @@\n-      return allocate(this->_capacity, _metadata.memflags());\n+      return allocate(this->_capacity, _metadata.memory_type());\n@@ -725,1 +725,1 @@\n-  GrowableArray(int initial_capacity, MEMFLAGS memflags) :\n+  GrowableArray(int initial_capacity, MemoryType mt) :\n@@ -727,1 +727,1 @@\n-          allocate(initial_capacity, memflags),\n+          allocate(initial_capacity, mt),\n@@ -729,1 +729,1 @@\n-      _metadata(memflags) {\n+      _metadata(mt) {\n@@ -741,1 +741,1 @@\n-  GrowableArray(int initial_capacity, int initial_len, const E& filler, MEMFLAGS memflags) :\n+  GrowableArray(int initial_capacity, int initial_len, const E& filler, MemoryType mt) :\n@@ -743,1 +743,1 @@\n-          allocate(initial_capacity, memflags),\n+          allocate(initial_capacity, mt),\n@@ -745,1 +745,1 @@\n-      _metadata(memflags) {\n+      _metadata(mt) {\n@@ -764,2 +764,2 @@\n-\/\/ Leaner GrowableArray for CHeap backed data arrays, with compile-time decided MEMFLAGS.\n-template <typename E, MEMFLAGS F>\n+\/\/ Leaner GrowableArray for CHeap backed data arrays, with compile-time decided MemoryType.\n+template <typename E, MemoryType F>\n@@ -771,1 +771,1 @@\n-  static E* allocate(int max, MEMFLAGS flags) {\n+  static E* allocate(int max, MemoryType flags) {\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-  MEMFLAGS F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  MemoryType F = mtNMT, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::RETURN_NULL>\n@@ -338,1 +338,1 @@\n-         if (alloc_failmode == AllocFailStrategy::RETURN_NULL) {\n+         if (alloc_failmode == AllocationFailureStrategy::RETURN_NULL) {\n@@ -344,1 +344,1 @@\n-         if (alloc_failmode == AllocFailStrategy::RETURN_NULL) {\n+         if (alloc_failmode == AllocationFailureStrategy::RETURN_NULL) {\n@@ -368,1 +368,1 @@\n-  MEMFLAGS F = mtNMT, AllocFailType alloc_failmode = AllocFailStrategy::RETURN_NULL>\n+  MemoryType F = mtNMT, AllocationFailureStrategy alloc_failmode = AllocationFailureStrategy::RETURN_NULL>\n","filename":"src\/hotspot\/share\/utilities\/linkedlist.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -84,1 +84,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -39,1 +39,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -47,1 +47,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -59,1 +59,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -64,1 +64,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -89,1 +89,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n@@ -96,1 +96,1 @@\n-template<MEMFLAGS F>\n+template<MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    MEMFLAGS MEM_TYPE>\n+    MemoryType MEM_TYPE>\n@@ -75,1 +75,1 @@\n-    MEMFLAGS MEM_TYPE = mtInternal,\n+    MemoryType MEM_TYPE = mtInternal,\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    MEMFLAGS MEM_TYPE,\n+    MemoryType MEM_TYPE,\n@@ -336,1 +336,1 @@\n-    MEMFLAGS MEM_TYPE = mtInternal,\n+    MemoryType MEM_TYPE = mtInternal,\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-template <class E, MEMFLAGS F> class StackIterator;\n+template <class E, MemoryType F> class StackIterator;\n@@ -58,1 +58,1 @@\n-template <MEMFLAGS F> class StackBase\n+template <MemoryType F> class StackBase\n@@ -88,1 +88,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -163,1 +163,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/stack.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-template <MEMFLAGS F> StackBase<F>::StackBase(size_t segment_size, size_t max_cache_size,\n+template <MemoryType F> StackBase<F>::StackBase(size_t segment_size, size_t max_cache_size,\n@@ -43,1 +43,1 @@\n-template <MEMFLAGS F> size_t StackBase<F>::adjust_max_size(size_t max_size, size_t seg_size)\n+template <MemoryType F> size_t StackBase<F>::adjust_max_size(size_t max_size, size_t seg_size)\n@@ -54,1 +54,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -61,1 +61,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -74,1 +74,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -88,1 +88,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -96,1 +96,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -108,1 +108,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -114,1 +114,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -120,1 +120,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -126,1 +126,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -132,1 +132,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -139,1 +139,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -145,1 +145,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -155,1 +155,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -176,1 +176,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -197,1 +197,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -208,1 +208,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -221,1 +221,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -237,1 +237,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -246,1 +246,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n@@ -254,1 +254,1 @@\n-template <class E, MEMFLAGS F>\n+template <class E, MemoryType F>\n","filename":"src\/hotspot\/share\/utilities\/stack.inline.hpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static void check_expected_malloc_header(const void* payload, MEMFLAGS type, size_t size) {\n+static void check_expected_malloc_header(const void* payload, MemoryType type, size_t size) {\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_cornercases.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    p[i] = NEW_C_HEAP_ARRAY(char, ALLOC_SIZE, (MEMFLAGS)category);\n+    p[i] = NEW_C_HEAP_ARRAY(char, ALLOC_SIZE, (MemoryType)category);\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_totals.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  WithEmbeddedArray(int initial_max, MEMFLAGS memflags) : _a(initial_max, memflags) {\n+  WithEmbeddedArray(int initial_max, MemoryType memflags) : _a(initial_max, memflags) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  const static MEMFLAGS MEM_TYPE = mtInternal;\n+  const static MemoryType MEM_TYPE = mtInternal;\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}