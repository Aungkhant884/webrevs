{"files":[{"patch":"@@ -1673,1 +1673,1 @@\n-\/\/ Currently only support Zba and Zbb.\n+\/\/ Currently only support Zba and Zbb bitmanip extensions.\n@@ -2755,1 +2755,1 @@\n-  \/\/ RVB pseudo instructions\n+  \/\/ Bit-manipulation extension pseudo instructions\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -673,90 +673,0 @@\n-void MacroAssembler::nop() {\n-  addi(x0, x0, 0);\n-}\n-\n-void MacroAssembler::mv(Register Rd, Register Rs) {\n-  if (Rd != Rs) {\n-    addi(Rd, Rs, 0);\n-  }\n-}\n-\n-void MacroAssembler::notr(Register Rd, Register Rs) {\n-  xori(Rd, Rs, -1);\n-}\n-\n-void MacroAssembler::neg(Register Rd, Register Rs) {\n-  sub(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::negw(Register Rd, Register Rs) {\n-  subw(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::sext_w(Register Rd, Register Rs) {\n-  addiw(Rd, Rs, 0);\n-}\n-\n-void MacroAssembler::zext_b(Register Rd, Register Rs) {\n-  andi(Rd, Rs, 0xFF);\n-}\n-\n-void MacroAssembler::seqz(Register Rd, Register Rs) {\n-  sltiu(Rd, Rs, 1);\n-}\n-\n-void MacroAssembler::snez(Register Rd, Register Rs) {\n-  sltu(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::sltz(Register Rd, Register Rs) {\n-  slt(Rd, Rs, x0);\n-}\n-\n-void MacroAssembler::sgtz(Register Rd, Register Rs) {\n-  slt(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::fmv_s(FloatRegister Rd, FloatRegister Rs) {\n-  if (Rd != Rs) {\n-    fsgnj_s(Rd, Rs, Rs);\n-  }\n-}\n-\n-void MacroAssembler::fabs_s(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjx_s(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fneg_s(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjn_s(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fmv_d(FloatRegister Rd, FloatRegister Rs) {\n-  if (Rd != Rs) {\n-    fsgnj_d(Rd, Rs, Rs);\n-  }\n-}\n-\n-void MacroAssembler::fabs_d(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjx_d(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fneg_d(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjn_d(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::vmnot_m(VectorRegister vd, VectorRegister vs) {\n-  vmnand_mm(vd, vs, vs);\n-}\n-\n-void MacroAssembler::vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm) {\n-  vnsrl_wx(vd, vs, x0, vm);\n-}\n-\n-void MacroAssembler::vneg_v(VectorRegister vd, VectorRegister vs) {\n-  vrsub_vx(vd, vs, x0);\n-}\n-\n-void MacroAssembler::vfneg_v(VectorRegister vd, VectorRegister vs) {\n-  vfsgnjn_vv(vd, vs, vs);\n-}\n-\n@@ -1628,15 +1538,0 @@\n-void MacroAssembler::mv(Register Rd, Address dest) {\n-  assert(dest.getMode() == Address::literal, \"Address mode should be Address::literal\");\n-  relocate(dest.rspec(), [&] {\n-    movptr(Rd, dest.target());\n-  });\n-}\n-\n-void MacroAssembler::mv(Register Rd, RegisterOrConstant src) {\n-  if (src.is_register()) {\n-    mv(Rd, src.as_register());\n-  } else {\n-    mv(Rd, src.as_constant());\n-  }\n-}\n-\n@@ -1672,10 +1567,0 @@\n-void MacroAssembler::movptr(Register Rd, uintptr_t imm64) {\n-  movptr(Rd, (address)imm64);\n-}\n-\n-void MacroAssembler::movptr(Register Rd, address addr) {\n-  int offset = 0;\n-  movptr(Rd, addr, offset);\n-  addi(Rd, Rd, offset);\n-}\n-\n@@ -3360,2 +3245,1 @@\n-                                   bool haystack_isL)\n-{\n+                                   bool haystack_isL) {\n@@ -3382,2 +3266,1 @@\n-                                        Register mask1, Register mask2)\n-{\n+                                        Register mask1, Register mask2) {\n@@ -3467,2 +3350,1 @@\n-void MacroAssembler::adc(Register dst, Register src1, Register src2, Register carry)\n-{\n+void MacroAssembler::adc(Register dst, Register src1, Register src2, Register carry) {\n@@ -3475,2 +3357,1 @@\n-void MacroAssembler::cadc(Register dst, Register src1, Register src2, Register carry)\n-{\n+void MacroAssembler::cadc(Register dst, Register src1, Register src2, Register carry) {\n@@ -3483,2 +3364,1 @@\n-                                     Register src1, Register src2, Register carry)\n-{\n+                                     Register src1, Register src2, Register carry) {\n@@ -3497,2 +3377,1 @@\n-                                           Register idx, Register kdx)\n-{\n+                                           Register idx, Register kdx) {\n@@ -3534,2 +3413,1 @@\n-                                           Register idx, Register kdx)\n-{\n+                                           Register idx, Register kdx) {\n@@ -3599,2 +3477,1 @@\n-                                             Register tmp6, Register product_hi)\n-{\n+                                             Register tmp6, Register product_hi) {\n@@ -3735,2 +3612,1 @@\n-                                     Register tmp5, Register tmp6, Register product_hi)\n-{\n+                                     Register tmp5, Register tmp6, Register product_hi) {\n@@ -3900,2 +3776,1 @@\n-void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2) {\n@@ -3910,0 +3785,1 @@\n+\n@@ -3927,2 +3803,1 @@\n-void MacroAssembler::inflate_lo32(Register Rd, Register Rs, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::inflate_lo32(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n@@ -3930,0 +3805,1 @@\n+\n@@ -3932,2 +3808,1 @@\n-  for (int i = 0; i <= 3; i++)\n-  {\n+  for (int i = 0; i <= 3; i++) {\n@@ -3949,2 +3824,1 @@\n-void MacroAssembler::inflate_hi32(Register Rd, Register Rs, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::inflate_hi32(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n@@ -3952,0 +3826,1 @@\n+\n@@ -3954,2 +3829,1 @@\n-  for (int i = 0; i <= 3; i++)\n-  {\n+  for (int i = 0; i <= 3; i++) {\n@@ -3978,2 +3852,1 @@\n-address MacroAssembler::zero_words(Register ptr, Register cnt)\n-{\n+address MacroAssembler::zero_words(Register ptr, Register cnt) {\n@@ -3985,0 +3858,1 @@\n+\n@@ -4020,0 +3894,1 @@\n+\n@@ -4029,2 +3904,1 @@\n-void MacroAssembler::zero_words(Register base, uint64_t cnt)\n-{\n+void MacroAssembler::zero_words(Register base, uint64_t cnt) {\n@@ -4068,2 +3942,1 @@\n-void MacroAssembler::fill_words(Register base, Register cnt, Register value)\n-{\n+void MacroAssembler::fill_words(Register base, Register cnt, Register value) {\n@@ -4416,0 +4289,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":23,"deletions":149,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -348,1 +348,2 @@\n-  static void membar_mask_to_pred_succ(uint32_t order_constraint, uint32_t& predecessor, uint32_t& successor) {\n+  static void membar_mask_to_pred_succ(uint32_t order_constraint,\n+                                       uint32_t& predecessor, uint32_t& successor) {\n@@ -413,11 +414,45 @@\n-  void nop();\n-  void mv(Register Rd, Register Rs);\n-  void notr(Register Rd, Register Rs);\n-  void neg(Register Rd, Register Rs);\n-  void negw(Register Rd, Register Rs);\n-  void sext_w(Register Rd, Register Rs);\n-  void zext_b(Register Rd, Register Rs);\n-  void seqz(Register Rd, Register Rs);          \/\/ set if = zero\n-  void snez(Register Rd, Register Rs);          \/\/ set if != zero\n-  void sltz(Register Rd, Register Rs);          \/\/ set if < zero\n-  void sgtz(Register Rd, Register Rs);          \/\/ set if > zero\n+  inline void nop() {\n+    addi(x0, x0, 0);\n+  }\n+\n+  inline void mv(Register Rd, Register Rs) {\n+    if (Rd != Rs) {\n+      addi(Rd, Rs, 0);\n+    }\n+  }\n+\n+  inline void notr(Register Rd, Register Rs) {\n+    xori(Rd, Rs, -1);\n+  }\n+\n+  inline void neg(Register Rd, Register Rs) {\n+    sub(Rd, x0, Rs);\n+  }\n+\n+  inline void negw(Register Rd, Register Rs) {\n+    subw(Rd, x0, Rs);\n+  }\n+\n+  inline void sext_w(Register Rd, Register Rs) {\n+    addiw(Rd, Rs, 0);\n+  }\n+\n+  inline void zext_b(Register Rd, Register Rs) {\n+    andi(Rd, Rs, 0xFF);\n+  }\n+\n+  inline void seqz(Register Rd, Register Rs) {\n+    sltiu(Rd, Rs, 1);\n+  }\n+\n+  inline void snez(Register Rd, Register Rs) {\n+    sltu(Rd, x0, Rs);\n+  }\n+\n+  inline void sltz(Register Rd, Register Rs) {\n+    slt(Rd, Rs, x0);\n+  }\n+\n+  inline void sgtz(Register Rd, Register Rs) {\n+    slt(Rd, x0, Rs);\n+  }\n@@ -426,6 +461,27 @@\n-  void fmv_s(FloatRegister Rd, FloatRegister Rs);\n-  void fabs_s(FloatRegister Rd, FloatRegister Rs);\n-  void fneg_s(FloatRegister Rd, FloatRegister Rs);\n-  void fmv_d(FloatRegister Rd, FloatRegister Rs);\n-  void fabs_d(FloatRegister Rd, FloatRegister Rs);\n-  void fneg_d(FloatRegister Rd, FloatRegister Rs);\n+  inline void fmv_s(FloatRegister Rd, FloatRegister Rs) {\n+    if (Rd != Rs) {\n+      fsgnj_s(Rd, Rs, Rs);\n+    }\n+  }\n+\n+  inline void fabs_s(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjx_s(Rd, Rs, Rs);\n+  }\n+\n+  inline void fneg_s(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjn_s(Rd, Rs, Rs);\n+  }\n+\n+  inline void fmv_d(FloatRegister Rd, FloatRegister Rs) {\n+    if (Rd != Rs) {\n+      fsgnj_d(Rd, Rs, Rs);\n+    }\n+  }\n+\n+  inline void fabs_d(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjx_d(Rd, Rs, Rs);\n+  }\n+\n+  inline void fneg_d(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjn_d(Rd, Rs, Rs);\n+  }\n@@ -630,2 +686,14 @@\n-  void mv(Register Rd, Address dest);\n-  void mv(Register Rd, RegisterOrConstant src);\n+  void mv(Register Rd, Address dest) {\n+    assert(dest.getMode() == Address::literal, \"Address mode should be Address::literal\");\n+    relocate(dest.rspec(), [&] {\n+      movptr(Rd, dest.target());\n+    });\n+  }\n+\n+  void mv(Register Rd, RegisterOrConstant src) {\n+    if (src.is_register()) {\n+      mv(Rd, src.as_register());\n+    } else {\n+      mv(Rd, src.as_constant());\n+    }\n+  }\n@@ -633,1 +701,0 @@\n-  void movptr(Register Rd, address addr);\n@@ -635,1 +702,10 @@\n-  void movptr(Register Rd, uintptr_t imm64);\n+\n+  void movptr(Register Rd, address addr) {\n+    int offset = 0;\n+    movptr(Rd, addr, offset);\n+    addi(Rd, Rd, offset);\n+  }\n+\n+  inline void movptr(Register Rd, uintptr_t imm64) {\n+    movptr(Rd, (address)imm64);\n+  }\n@@ -1161,0 +1237,17 @@\n+  \/\/ vector pseudo instructions\n+  inline void vmnot_m(VectorRegister vd, VectorRegister vs) {\n+    vmnand_mm(vd, vs, vs);\n+  }\n+\n+  inline void vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm) {\n+    vnsrl_wx(vd, vs, x0, vm);\n+  }\n+\n+  inline void vneg_v(VectorRegister vd, VectorRegister vs) {\n+    vrsub_vx(vd, vs, x0);\n+  }\n+\n+  inline void vfneg_v(VectorRegister vd, VectorRegister vs) {\n+    vfsgnjn_vv(vd, vs, vs);\n+  }\n+\n@@ -1202,7 +1295,0 @@\n-  \/\/ vext\n-  void vmnot_m(VectorRegister vd, VectorRegister vs);\n-  void vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm = unmasked);\n-  void vneg_v(VectorRegister vd, VectorRegister vs);\n-  void vfneg_v(VectorRegister vd, VectorRegister vs);\n-\n-\n@@ -1232,1 +1318,1 @@\n-  void ret() {\n+  inline void ret() {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":116,"deletions":30,"binary":false,"changes":146,"status":"modified"}]}