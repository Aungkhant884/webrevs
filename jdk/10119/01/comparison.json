{"files":[{"patch":"@@ -241,1 +241,0 @@\n-  assert(_hrm.at(region)->is_starts_humongous(), \"Must start a humongous object\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-class G1FreeHumongousRegionClosure : public HeapRegionClosure {\n+class G1FreeHumongousRegionClosure : public HeapRegionIndexClosure {\n@@ -187,2 +187,2 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n-    if (!r->is_starts_humongous()) {\n+  bool do_heap_region_index(uint region_index) override {\n+    if (!is_reclaimable(region_index)) {\n@@ -192,4 +192,2 @@\n-    uint region_idx = r->hrm_index();\n-    if (!is_reclaimable(region_idx)) {\n-      return false;\n-    }\n+    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n+    HeapRegion* r = g1h->region_at(region_index);\n@@ -203,1 +201,1 @@\n-                             region_idx,\n+                             region_index,\n@@ -208,1 +206,0 @@\n-    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n@@ -213,1 +210,1 @@\n-           region_idx,\n+           region_index,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}