{"files":[{"patch":"@@ -241,1 +241,0 @@\n-  assert(_hrm.at(region)->is_starts_humongous(), \"Must start a humongous object\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-class G1FreeHumongousRegionClosure : public HeapRegionClosure {\n+class G1FreeHumongousRegionClosure : public HeapRegionIndexClosure {\n@@ -144,0 +144,1 @@\n+  G1CollectedHeap* _g1h;\n@@ -184,2 +185,3 @@\n-    _freed_bytes(0) {\n-  }\n+    _freed_bytes(0),\n+    _g1h(G1CollectedHeap::heap())\n+  {}\n@@ -187,2 +189,2 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n-    if (!r->is_starts_humongous()) {\n+  bool do_heap_region_index(uint region_index) override {\n+    if (!is_reclaimable(region_index)) {\n@@ -192,4 +194,1 @@\n-    uint region_idx = r->hrm_index();\n-    if (!is_reclaimable(region_idx)) {\n-      return false;\n-    }\n+    HeapRegion* r = _g1h->region_at(region_index);\n@@ -203,1 +202,1 @@\n-                             region_idx,\n+                             region_index,\n@@ -208,2 +207,1 @@\n-    G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-    G1ConcurrentMark* const cm = g1h->concurrent_mark();\n+    G1ConcurrentMark* const cm = _g1h->concurrent_mark();\n@@ -213,1 +211,1 @@\n-           region_idx,\n+           region_index,\n@@ -217,1 +215,1 @@\n-      HeapRegion* next = g1h->next_region_in_humongous(r);\n+      HeapRegion* next = _g1h->next_region_in_humongous(r);\n@@ -221,2 +219,2 @@\n-      g1h->free_humongous_region(r, nullptr);\n-      g1h->hr_printer()->cleanup(r);\n+      _g1h->free_humongous_region(r, nullptr);\n+      _g1h->hr_printer()->cleanup(r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"}]}