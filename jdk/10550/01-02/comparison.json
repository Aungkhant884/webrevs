{"files":[{"patch":"@@ -1,33 +0,0 @@\n-\n-\/\/ should be granted\n-grant principal com.sun.security.auth.UnixPrincipal \"1\",\n-    principal Comparator$PCompare2 \"2\" {\n-    permission java.util.PropertyPermission \"foo\", \"read\";\n-};\n-\n-\/\/ should be granted\n-grant principal Comparator$PCompare1 \"1\",\n-    principal com.sun.security.auth.NTUserPrincipal \"4\" {\n-    permission java.util.PropertyPermission \"bar\", \"read\";\n-};\n-\n-\/\/ should be granted\n-grant principal com.sun.security.auth.UnixPrincipal \"1\",\n-    principal javax.security.auth.x500.X500Principal \"cn=x500\",\n-    principal Comparator$PCompare2 \"2\" {\n-    permission java.util.PropertyPermission \"hello\", \"read\";\n-};\n-\n-\/\/ should be granted\n-grant principal Comparator$PCompare1 \"1\",\n-    principal com.sun.security.auth.NTUserPrincipal \"4\",\n-    principal javax.security.auth.x500.X500Principal \"cn=x500\" {\n-    permission java.util.PropertyPermission \"world\", \"read\";\n-};\n-\n-\/\/ should not be granted\n-grant principal Comparator$PCompare1 \"1\",\n-    principal Comparator$PCompare3 \"3\" {\n-    permission java.util.PropertyPermission \"foobar\", \"read\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Comparator.Combined.Policy","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-\n-\/\/ should be granted\n-grant principal Comparator$PCompare1 \"1\" {\n-    permission java.util.PropertyPermission \"foo\", \"read\";\n-};\n-\n-\/\/ should be granted\n-grant principal Comparator$PCompare1 \"1\",\n-    principal Comparator$PCompare2 \"2\" {\n-    permission java.util.PropertyPermission \"bar\", \"read\";\n-};\n-\n-\/\/ should not be granted\n-grant principal Comparator$PCompare1 \"1\",\n-    principal Comparator$PCompare3 \"3\" {\n-    permission java.util.PropertyPermission \"foobar\", \"read\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Comparator.Comparator.Policy","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-\n-\/\/ should be granted\n-grant principal com.sun.security.auth.UnixPrincipal \"1\" {\n-    permission java.util.PropertyPermission \"foo\", \"read\";\n-};\n-\n-\/\/ should be granted\n-grant principal javax.security.auth.x500.X500Principal \"cn=2\",\n-    principal com.sun.security.auth.NTUserPrincipal \"2\" {\n-    permission java.util.PropertyPermission \"bar\", \"read\";\n-};\n-\n-\/\/ should not be granted\n-grant principal javax.security.auth.x500.X500Principal \"cn=2\",\n-    principal com.sun.security.auth.UnixPrincipal \"1\" {\n-    permission java.util.PropertyPermission \"foobar\", \"read\";\n-};\n-\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Comparator.Principal.Policy","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,368 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 5037004\n- * @summary Frivolous ClassCastExceptions thrown by SubjectCodeSource.implies\n- * @modules java.base\/sun.security.provider\n- * @run main\/othervm Comparator\n- *\n- * Note:  if you want to see the java.security.debug output,\n- *        you can not simply set the system property.\n- *        you must run this test by hand and pass -Djava.security.debug=...\n- *\n- * Note: SubjectCodeSource removed, but PolicyFile might have the same problem. Keep the test as-is\n- *\n- *\/\n-\n-import java.io.*;\n-import java.security.*;\n-import java.util.PropertyPermission;\n-import javax.security.auth.Subject;\n-import javax.security.auth.x500.X500Principal;\n-\n-import sun.security.provider.PolicyFile;\n-import com.sun.security.auth.UnixPrincipal;\n-import com.sun.security.auth.NTUserPrincipal;\n-\n-public class Comparator {\n-\n-    private static final PropertyPermission FOO =\n-                new PropertyPermission(\"foo\", \"read\");\n-    private static final PropertyPermission BAR =\n-                new PropertyPermission(\"bar\", \"read\");\n-    private static final PropertyPermission FOOBAR =\n-                new PropertyPermission(\"foobar\", \"read\");\n-    private static final PropertyPermission HELLO =\n-                new PropertyPermission(\"hello\", \"read\");\n-    private static final PropertyPermission WORLD =\n-                new PropertyPermission(\"world\", \"read\");\n-\n-    private static final CodeSource cs =\n-                new CodeSource(null, (java.security.cert.Certificate[])null);\n-\n-    private static final Principal[] p1 = new Principal[] {\n-                                new UnixPrincipal(\"1\") };\n-\n-    private static final Principal[] p2 = new Principal[] {\n-                                new X500Principal(\"cn=2\"),\n-                                new NTUserPrincipal(\"2\") };\n-\n-    private static final Principal[] p3 = new Principal[] {\n-                                new UnixPrincipal(\"1\"),\n-                                new X500Principal(\"cn=2\"),\n-                                new NTUserPrincipal(\"2\") };\n-\n-    private static final Principal[] p4 = new Principal[] {\n-                                new UnixPrincipal(\"1\"),\n-                                new NTUserPrincipal(\"4\") };\n-\n-    private static final Principal[] p5 = new Principal[] {\n-                                new UnixPrincipal(\"1\"),\n-                                new X500Principal(\"cn=2\"),\n-                                new NTUserPrincipal(\"2\"),\n-                                new X500Principal(\"cn=x500\") };\n-\n-    private static final Principal[] p6 = new Principal[] {\n-                                new UnixPrincipal(\"1\"),\n-                                new NTUserPrincipal(\"4\"),\n-                                new X500Principal(\"cn=x500\") };\n-\n-    private static final Principal[] badP = new Principal[] {\n-                                new UnixPrincipal(\"bad\") };\n-\n-    public static class PCompare1 implements Principal {\n-\n-        private String name;\n-\n-        public PCompare1(String name) {\n-            this.name = name;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-\n-        @Override\n-        public boolean implies (Subject subject) {\n-            if (subject.getPrincipals().contains(p1[0])) {\n-                return true;\n-            }\n-            return false;\n-        }\n-    }\n-\n-    public static class PCompare2 implements Principal {\n-        private String name;\n-\n-        public PCompare2(String name) {\n-            this.name = name;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-\n-        @Override\n-        public boolean implies (Subject subject) {\n-            if (subject.getPrincipals().contains(p2[0]) &&\n-                subject.getPrincipals().contains(p2[1])) {\n-                return true;\n-            }\n-            return false;\n-        }\n-    }\n-\n-    public static class PCompare3 implements Principal {\n-        private String name;\n-\n-        public PCompare3(String name) {\n-            this.name = name;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-\n-        @Override\n-        public boolean implies (Subject subject) {\n-            return false;\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-\n-        int testnum = 1;\n-\n-        \/\/ in case we run standalone\n-        String policyDir = System.getProperty(\"test.src\");\n-        if (policyDir == null) {\n-            policyDir = \".\";\n-        }\n-\n-        \/\/ do principal-only tests\n-        System.setProperty(\"java.security.policy\",\n-                        \"=\" +\n-                        policyDir +\n-                        File.separatorChar +\n-                        \"Comparator.Principal.Policy\");\n-        PolicyFile policy = new PolicyFile();\n-        testnum = doPrincipalTest(policy, testnum);\n-        System.out.println(\"============ Principal Test Passed ============\");\n-\n-        \/\/ do comparator-only tests\n-        System.setProperty(\"java.security.policy\",\n-                        \"=\" +\n-                        policyDir +\n-                        File.separatorChar +\n-                        \"Comparator.Comparator.Policy\");\n-        policy = new PolicyFile();\n-        testnum = doComparatorTest(policy, testnum);\n-        System.out.println(\"============ Comparator Test Passed ============\");\n-\n-        \/\/ combined principal\/comparator tests\n-        System.setProperty(\"java.security.policy\",\n-                        \"=\" +\n-                        policyDir +\n-                        File.separatorChar +\n-                        \"Comparator.Combined.Policy\");\n-        policy = new PolicyFile();\n-        testnum = doCombinedTest(policy, testnum);\n-        System.out.println(\"============ Combined Test Passed ============\");\n-    }\n-\n-    private static int doBadTest(PolicyFile policy, int testnum) {\n-\n-        \/\/ this principal is not in policy - should not match any policy grants\n-        ProtectionDomain pd = new ProtectionDomain(cs, null, null, badP);\n-        if (policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ this principal is not in policy - should not match any policy grants\n-        if (policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ this principal is not in policy - should not match any policy grants\n-        if (policy.implies(pd, FOOBAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        return testnum;\n-    }\n-\n-    private static int doPrincipalTest(PolicyFile policy, int testnum) {\n-\n-        \/\/ security check against one principal should pass\n-        ProtectionDomain pd = new ProtectionDomain(cs, null, null, p1);\n-        if (!policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match BAR grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p1);\n-        if (policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against two principals should pass\n-        pd = new ProtectionDomain(cs, null, null, p2);\n-        if (!policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match FOOBAR grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p1);\n-        if (policy.implies(pd, FOOBAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match FOOBAR grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p2);\n-        if (policy.implies(pd, FOOBAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        testnum = doBadTest(policy, testnum);\n-\n-        return testnum;\n-    }\n-\n-    private static int doComparatorTest(PolicyFile policy, int testnum) {\n-\n-        \/\/ security check against one comparator should pass\n-        ProtectionDomain pd = new ProtectionDomain(cs, null, null, p1);\n-        if (!policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match BAR grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p1);\n-        if (policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against two comparators should pass for FOO\n-        pd = new ProtectionDomain(cs, null, null, p3);\n-        if (!policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against two comparators should pass for BAR\n-        pd = new ProtectionDomain(cs, null, null, p3);\n-        if (!policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check should fail against FOOBAR\n-        pd = new ProtectionDomain(cs, null, null, p3);\n-        if (policy.implies(pd, FOOBAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        testnum = doBadTest(policy, testnum);\n-\n-        return testnum;\n-    }\n-\n-    private static int doCombinedTest(PolicyFile policy, int testnum) {\n-\n-        \/\/ security check against principal followed by comparator should pass\n-        ProtectionDomain pd = new ProtectionDomain(cs, null, null, p3);\n-        if (!policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match BAR grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p3);\n-        if (policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against comparator followed by principal should pass\n-        pd = new ProtectionDomain(cs, null, null, p4);\n-        if (!policy.implies(pd, BAR)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match FOO grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p4);\n-        if (policy.implies(pd, FOO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against principal-principal-comparator should pass\n-        pd = new ProtectionDomain(cs, null, null, p5);\n-        if (!policy.implies(pd, HELLO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match WORLD grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p5);\n-        if (policy.implies(pd, WORLD)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ security check against principal-principal-comparator should pass\n-        pd = new ProtectionDomain(cs, null, null, p6);\n-        if (!policy.implies(pd, WORLD)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        \/\/ should not match HELLO grant entry in policy\n-        pd = new ProtectionDomain(cs, null, null, p6);\n-        if (policy.implies(pd, HELLO)) {\n-            throw new SecurityException(\"test.\" + testnum + \" failed\");\n-        }\n-        testnum++;\n-\n-        testnum = doBadTest(policy, testnum);\n-\n-        return testnum;\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/PolicyFile\/Comparator.java","additions":0,"deletions":368,"binary":false,"changes":368,"status":"deleted"}]}