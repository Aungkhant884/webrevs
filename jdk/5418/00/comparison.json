{"files":[{"patch":"@@ -1970,1 +1970,3 @@\n-  case Op_FastLock:      \/\/ Revisit FastLocks for lock coarsening\n+  case Op_CallStaticJava:  \/\/ Give post-parse call devirtualization a chance\n+  case Op_CallDynamicJava:\n+  case Op_FastLock:        \/\/ Revisit FastLocks for lock coarsening\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8273409\n+ * @summary Test that post-parse call devirtualization works as intended.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestPostParseCallDevirtualization\n+ *\/\n+public class TestPostParseCallDevirtualization {\n+\n+    public static void main(String[] args) {\n+        TestFramework framework = new TestFramework();\n+        Scenario noOSR = new Scenario(0, \"-XX:-UseOnStackReplacement\");\n+        Scenario alwaysIncremental = new Scenario(1, \"-XX:-UseOnStackReplacement\", \"-XX:+AlwaysIncrementalInline\");\n+        framework.addScenarios(noOSR, alwaysIncremental).start();\n+    }\n+\n+    static interface I {\n+        public int method();\n+    }\n+\n+    static final class A implements I {\n+        @Override\n+        public int method() { return 0; };\n+    }\n+\n+    static final class B implements I {\n+        @Override\n+        public int method() { return 42; };\n+    }\n+\n+    static final class C implements I {\n+        @Override\n+        public int method() { return -1; };\n+    }\n+\n+    static final A a = new A();\n+    static final B b = new B();\n+    static final C c = new C();\n+\n+    static int callHelper(I recv) {\n+        \/\/ Receiver profile is polluted\n+        return recv.method();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.DYNAMIC_CALL_OF_METHOD, \"method\"},\n+        counts = {IRNode.STATIC_CALL_OF_METHOD, \"method\", \"= 1\"})\n+    public int testDynamicCallWithLoop(B val) {\n+        \/\/ Make sure val is non-null below\n+        if (val == null) {\n+          return 0;\n+        }\n+        \/\/ Loop that triggers loop opts\n+        I recv = a;\n+        for (int i = 0; i < 3; ++i) {\n+            if (i > 1) {\n+                recv = val;\n+            }\n+        }\n+        \/\/ We only know after loop opts that the receiver type is non-null B.\n+        \/\/ Post-parse call devirtualization should then convert the\n+        \/\/ virtual call in the helper method to a static call.\n+        return callHelper(recv);\n+    }\n+\n+    @Run(test = \"testDynamicCallWithLoop\")\n+    public void checkTestDynamicCallWithLoop() {\n+        \/\/ Pollute receiver profile with three different\n+        \/\/ types to prevent (bimorphic) inlining.\n+        callHelper(a);\n+        callHelper(b);\n+        callHelper(c);\n+        Asserts.assertEquals(testDynamicCallWithLoop(b), 42);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.DYNAMIC_CALL_OF_METHOD, \"method\"},\n+        counts = {IRNode.STATIC_CALL_OF_METHOD, \"method\", \"= 1\"})\n+    public int testDynamicCallWithCCP(B val) {\n+        \/\/ Make sure val is non-null below\n+        if (val == null) {\n+          return 0;\n+        }\n+        \/\/ Loop that triggers CCP\n+        I recv = a;\n+        for (int i = 0; i < 100; i++) {\n+            if ((i % 2) == 0) {\n+                recv = val;\n+            }\n+        }\n+        \/\/ We only know after CCP that the receiver type is non-null B.\n+        \/\/ Post-parse call devirtualization should then convert the\n+        \/\/ virtual call in the helper method to a static call.\n+        return callHelper(recv);\n+    }\n+\n+    @Run(test = \"testDynamicCallWithCCP\")\n+    public void checkTestDynamicCallWithCCP() {\n+        \/\/ Pollute receiver profile with three different\n+        \/\/ types to prevent (bimorphic) inlining.\n+        callHelper(a);\n+        callHelper(b);\n+        callHelper(c);\n+        Asserts.assertEquals(testDynamicCallWithCCP(b), 42);\n+    }\n+\n+    static final MethodHandle mh1;\n+    static final MethodHandle mh2;\n+\n+    static {\n+        try {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+            mh1 = lookup.findStatic(TestPostParseCallDevirtualization.class, \"method1\", MethodType.methodType(int.class));\n+            mh2 = lookup.findStatic(TestPostParseCallDevirtualization.class, \"method2\", MethodType.methodType(int.class));\n+        } catch (NoSuchMethodException | IllegalAccessException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        }\n+    }\n+\n+    static int method1() { return 0; }\n+    static int method2() { return 42; }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STATIC_CALL_OF_METHOD, \"invokeBasic\"},\n+        counts = {IRNode.STATIC_CALL_OF_METHOD, \"invokeStatic\", \"= 1\"})\n+    public int testMethodHandleCallWithLoop() throws Throwable {\n+        MethodHandle mh = mh1;\n+        for (int i = 0; i < 3; ++i) {\n+            if (i > 1) {\n+                mh = mh2;\n+            }\n+        }\n+        \/\/ We only know after loop opts that the receiver is mh2.\n+        \/\/ Post-parse call devirtualization should then convert the\n+        \/\/ virtual call to a static call.\n+        return (int)mh.invokeExact();\n+    }\n+\n+    @Run(test = \"testMethodHandleCallWithLoop\")\n+    public void checkTestMethodHandleCallWithLoop() throws Throwable {\n+        Asserts.assertEquals(testMethodHandleCallWithLoop(), 42);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.STATIC_CALL_OF_METHOD, \"invokeBasic\"},\n+        counts = {IRNode.STATIC_CALL_OF_METHOD, \"invokeStatic\", \"= 1\"})\n+    public int testMethodHandleCallWithCCP() throws Throwable {\n+        MethodHandle mh = mh1;\n+        int limit = 0;\n+        for (int i = 0; i < 100; i++) {\n+            if ((i % 2) == 0) {\n+                limit = 1;\n+            }\n+        }\n+        for (int i = 0; i < limit; ++i) {\n+            mh = mh2;\n+        }\n+        \/\/ We only know after CCP that the receiver is mh2.\n+        \/\/ Post-parse call devirtualization should then convert the\n+        \/\/ virtual call to a static call.\n+        return (int)mh.invokeExact();\n+    }\n+\n+    @Run(test = \"testMethodHandleCallWithCCP\")\n+    public void checkTestMethodHandleCallWithCCP() throws Throwable {\n+        Asserts.assertEquals(testMethodHandleCallWithCCP(), 42);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestPostParseCallDevirtualization.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"},{"patch":"@@ -118,0 +118,2 @@\n+    public static final String DYNAMIC_CALL_OF_METHOD = COMPOSITE_PREFIX + START + \"CallDynamicJava\" + MID + IS_REPLACED + END;\n+    public static final String STATIC_CALL_OF_METHOD = COMPOSITE_PREFIX + START + \"CallStaticJava\" + MID + IS_REPLACED + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}