{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -77,4 +78,14 @@\n-        test(CrasherIllegalAccess.class, \"\", true);\n-        test(CrasherIllegalAccess.class, \"\", false);\n-        test(CrasherHalt.class, \"\", true);\n-        test(CrasherHalt.class, \"\", false);\n+        test(CrasherIllegalAccess.class, \"\", true, null);\n+        test(CrasherIllegalAccess.class, \"\", false, null);\n+        test(CrasherHalt.class, \"\", true, null);\n+        test(CrasherHalt.class, \"\", false, null);\n+\n+        Path dumppath = Files.createTempDirectory(null);\n+        try {\n+            test(CrasherIllegalAccess.class, \"\", true, dumppath.toString());\n+            test(CrasherIllegalAccess.class, \"\", false, dumppath.toString());\n+            test(CrasherHalt.class, \"\", true, dumppath.toString());\n+            test(CrasherHalt.class, \"\", false, dumppath.toString());\n+        } finally {\n+            dumppath.toFile().delete();\n+        }\n@@ -87,1 +98,1 @@\n-    private static void test(Class<?> crasher, String signal, boolean disk) throws Exception {\n+    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n@@ -92,1 +103,1 @@\n-                verify(runProcess(crasher, signal, disk));\n+                verify(runProcess(crasher, signal, disk, dumppath), dumppath);\n@@ -108,1 +119,1 @@\n-    private static long runProcess(Class<?> crasher, String signal, boolean disk) throws Exception {\n+    private static long runProcess(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n@@ -110,9 +121,11 @@\n-        final String flightRecordingOptions = \"dumponexit=true,disk=\" + Boolean.toString(disk);\n-        Process p = ProcessTools.createTestJvm(\n-                \"-Xmx64m\",\n-                \"-XX:-CreateCoredumpOnCrash\",\n-                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                \"-XX:StartFlightRecording:\" + flightRecordingOptions,\n-                crasher.getName(),\n-                signal)\n-            .start();\n+        List<String> options = new ArrayList<>();\n+        options.add(\"-Xmx64m\");\n+        options.add(\"-XX:-CreateCoredumpOnCrash\");\n+        options.add(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        options.add(\"-XX:StartFlightRecording:dumponexit=true,disk=\" + Boolean.toString(disk));\n+        if (dumppath != null) {\n+            options.add(\"-XX:FlightRecorderOptions=dumppath=\" + dumppath);\n+        }\n+        options.add(crasher.getName());\n+        options.add(signal);\n+        Process p = ProcessTools.createTestJvm(options).start();\n@@ -128,1 +141,1 @@\n-    private static void verify(long pid) throws IOException {\n+    private static void verify(long pid, String dumppath) throws IOException {\n@@ -130,1 +143,2 @@\n-        Path file = Paths.get(fileName).toAbsolutePath().normalize();\n+        Path file = (dumppath == null) ? Paths.get(fileName) : Paths.get(dumppath, fileName);\n+        file = file.toAbsolutePath().normalize();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"}]}