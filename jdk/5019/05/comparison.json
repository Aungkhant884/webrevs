{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+#include \"jfr\/recorder\/repository\/jfrEmergencyDump.hpp\"\n@@ -318,0 +319,10 @@\n+NO_TRANSITION(void, jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath))\n+  const char* dump_path = env->GetStringUTFChars(dumppath, NULL);\n+  JfrEmergencyDump::set_dump_path(dump_path);\n+  env->ReleaseStringUTFChars(dumppath, dump_path);\n+NO_TRANSITION_END\n+\n+NO_TRANSITION(jstring, jfr_get_dump_path(JNIEnv* env, jobject jvm))\n+  return env->NewStringUTF(JfrEmergencyDump::get_dump_path());\n+NO_TRANSITION_END\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,0 +116,4 @@\n+void JNICALL jfr_set_dump_path(JNIEnv* env, jobject jvm, jstring dumppath);\n+\n+jstring JNICALL jfr_get_dump_path(JNIEnv* env, jobject jvm);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+      (char*)\"setDumpPath\", (char*)\"(Ljava\/lang\/String;)V\", (void*)jfr_set_dump_path,\n+      (char*)\"getDumpPath\", (char*)\"()Ljava\/lang\/String;\", (void*)jfr_get_dump_path,\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+char JfrEmergencyDump::_dump_path[JVM_MAXPATHLEN] = { 0 };\n+\n@@ -69,3 +71,8 @@\n-static size_t get_current_directory() {\n-  if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {\n-    return 0;\n+static size_t get_dump_directory() {\n+  const char* dump_path = JfrEmergencyDump::get_dump_path();\n+  if (*dump_path == '\\0') {\n+    if (os::get_current_directory(_path_buffer, sizeof(_path_buffer)) == NULL) {\n+      return 0;\n+    }\n+  } else {\n+    strcpy(_path_buffer, dump_path);\n@@ -73,2 +80,2 @@\n-  const size_t cwd_len = strlen(_path_buffer);\n-  const int result = jio_snprintf(_path_buffer + cwd_len,\n+  const size_t path_len = strlen(_path_buffer);\n+  const int result = jio_snprintf(_path_buffer + path_len,\n@@ -108,1 +115,1 @@\n-  const size_t path_len = get_current_directory();\n+  const size_t path_len = get_dump_directory();\n@@ -128,1 +135,1 @@\n-static bool open_emergency_dump_file() {\n+bool JfrEmergencyDump::open_emergency_dump_file() {\n@@ -133,1 +140,9 @@\n-  return open_emergency_dump_fd(create_emergency_dump_path());\n+\n+  bool result = open_emergency_dump_fd(create_emergency_dump_path());\n+  if (!result && *_dump_path != '\\0') {\n+    \/\/ Attempt to create emergency dump to current directory\n+    \/\/ if we couldn't create it on `dumppath=`.\n+    *_dump_path = '\\0';\n+    result = open_emergency_dump_fd(create_emergency_dump_path());\n+  }\n+  return result;\n@@ -153,0 +168,13 @@\n+void JfrEmergencyDump::set_dump_path(const char* dump_path) {\n+  if (dump_path != NULL) {\n+    if (strlen(dump_path) < JVM_MAXPATHLEN) {\n+      strncpy(_dump_path, dump_path, JVM_MAXPATHLEN);\n+      _dump_path[JVM_MAXPATHLEN - 1] = '\\0';\n+    }\n+  }\n+}\n+\n+const char* JfrEmergencyDump::get_dump_path() {\n+  return _dump_path;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":36,"deletions":8,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,5 @@\n+ private:\n+  static char _dump_path[JVM_MAXPATHLEN];\n+\n+  static bool open_emergency_dump_file();\n+\n@@ -36,0 +41,2 @@\n+  static void set_dump_path(const char* dump_path);\n+  static const char* get_dump_path();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -166,0 +166,1 @@\n+const char* const default_dumppath = NULL;\n@@ -185,0 +186,7 @@\n+static DCmdArgument<char*> _dcmd_dumppath(\n+  \"dumppath\",\n+  \"Path to emergency dump\",\n+  \"STRING\",\n+  false,\n+  default_dumppath);\n+\n@@ -261,0 +269,1 @@\n+  _parser.add_dcmd_option(&_dcmd_dumppath);\n@@ -349,0 +358,12 @@\n+  configure._dump_path.set_is_set(_dcmd_dumppath.is_set());\n+  char* dumppath = _dcmd_dumppath.value();\n+  if (dumppath != NULL) {\n+    const size_t len = strlen(dumppath);\n+    char* dumppath_copy = JfrCHeapObj::new_array<char>(len + 1);\n+    if (NULL == dumppath_copy) {\n+      return false;\n+    }\n+    strncpy(dumppath_copy, dumppath, len + 1);\n+    configure._dump_path.set_value(dumppath_copy);\n+  }\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -476,2 +476,1 @@\n-     * Sets the location of the disk repository, to be used at an emergency\n-     * dump.\n+     * Sets the location of the disk repository.\n@@ -483,0 +482,14 @@\n+    \/**\n+     * Sets the path to emergency dump.\n+     *\n+     * @param dumpPathText\n+     *\/\n+    public native void setDumpPath(String dumpPathText);\n+\n+    \/**\n+     * Gets the path to emergency dump.\n+     *\n+     * @return The path to emergency dump.\n+     *\/\n+    public native String getDumpPath();\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import java.io.IOException;\n+\n+import jdk.jfr.internal.LogLevel;\n+import jdk.jfr.internal.LogTag;\n+import jdk.jfr.internal.Logger;\n@@ -31,0 +36,2 @@\n+import static java.nio.file.LinkOption.*;\n+\n@@ -51,1 +58,1 @@\n-    private static final SafePath DEFAULT_DUMP_PATH = SecuritySupport.USER_HOME;\n+    private static final SafePath DEFAULT_DUMP_PATH = new SafePath(\".\");\n@@ -60,1 +67,0 @@\n-    private static SafePath dumpPath;\n@@ -117,1 +123,13 @@\n-        dumpPath = path;\n+        if (path.toFile().canWrite()) {\n+            try {\n+                jvm.setDumpPath(path.toPath().toRealPath(NOFOLLOW_LINKS).toString());\n+            } catch (IOException e) {\n+                if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n+                    Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Error occurred in path resolution: \" + e.toString());\n+                }\n+            }\n+        } else {\n+            if (Logger.shouldLog(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN)) {\n+                Logger.log(LogTag.JFR_SYSTEM_SETTING, LogLevel.WARN, \"Cannot write JFR emergency dump to \" + path.toString());\n+            }\n+        }\n@@ -121,1 +139,1 @@\n-        return dumpPath;\n+        return new SafePath(jvm.getDumpPath());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Options.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-    static final SafePath USER_HOME = getPathInProperty(\"user.home\", null);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/SecuritySupport.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.ArrayList;\n@@ -77,0 +78,1 @@\n+        \/\/ Test without dumppath\n@@ -82,0 +84,18 @@\n+        \/\/ Test with dumppath\n+        Path dumppath = Files.createTempDirectory(null);\n+        try {\n+            test(CrasherIllegalAccess.class, \"\", true, dumppath.toString());\n+            test(CrasherIllegalAccess.class, \"\", false, dumppath.toString());\n+            test(CrasherHalt.class, \"\", true, dumppath.toString());\n+            test(CrasherHalt.class, \"\", false, dumppath.toString());\n+        } finally {\n+            dumppath.toFile().delete();\n+        }\n+\n+        \/\/ Test with illegal dumppath\n+        Path illegalpath = Path.of(\"silverbullet\");\n+        test(CrasherIllegalAccess.class, \"\", true, illegalpath.toString(), null);\n+        test(CrasherIllegalAccess.class, \"\", false, illegalpath.toString(), null);\n+        test(CrasherHalt.class, \"\", true, illegalpath.toString(), null);\n+        test(CrasherHalt.class, \"\", false, illegalpath.toString(), null);\n+\n@@ -88,0 +108,8 @@\n+        test(crasher, signal, disk, null);\n+    }\n+\n+    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n+        test(crasher, signal, disk, dumppath, dumppath);\n+    }\n+\n+    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath, String expectedPath) throws Exception {\n@@ -92,1 +120,1 @@\n-                verify(runProcess(crasher, signal, disk));\n+                verify(runProcess(crasher, signal, disk, dumppath), expectedPath);\n@@ -108,1 +136,1 @@\n-    private static long runProcess(Class<?> crasher, String signal, boolean disk) throws Exception {\n+    private static long runProcess(Class<?> crasher, String signal, boolean disk, String dumppath) throws Exception {\n@@ -110,9 +138,11 @@\n-        final String flightRecordingOptions = \"dumponexit=true,disk=\" + Boolean.toString(disk);\n-        Process p = ProcessTools.createTestJvm(\n-                \"-Xmx64m\",\n-                \"-XX:-CreateCoredumpOnCrash\",\n-                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                \"-XX:StartFlightRecording:\" + flightRecordingOptions,\n-                crasher.getName(),\n-                signal)\n-            .start();\n+        List<String> options = new ArrayList<>();\n+        options.add(\"-Xmx64m\");\n+        options.add(\"-XX:-CreateCoredumpOnCrash\");\n+        options.add(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        options.add(\"-XX:StartFlightRecording:dumponexit=true,disk=\" + Boolean.toString(disk));\n+        if (dumppath != null) {\n+            options.add(\"-XX:FlightRecorderOptions=dumppath=\" + dumppath);\n+        }\n+        options.add(crasher.getName());\n+        options.add(signal);\n+        Process p = ProcessTools.createTestJvm(options).start();\n@@ -128,1 +158,1 @@\n-    private static void verify(long pid) throws IOException {\n+    private static void verify(long pid, String dumppath) throws IOException {\n@@ -130,1 +160,2 @@\n-        Path file = Paths.get(fileName).toAbsolutePath().normalize();\n+        Path file = (dumppath == null) ? Paths.get(fileName) : Paths.get(dumppath, fileName);\n+        file = file.toAbsolutePath().normalize();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":44,"deletions":13,"binary":false,"changes":57,"status":"modified"}]}