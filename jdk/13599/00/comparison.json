{"files":[{"patch":"@@ -39,0 +39,1 @@\n+    static final ClassDesc[] EMPTY_CLASSDESC = new ClassDesc[0];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Collection;\n@@ -58,0 +59,30 @@\n+    \/**\n+     * Returns a {@linkplain MethodTypeDesc} with the given return type and no\n+     * parameter types.\n+     *\n+     * @param returnDesc a {@linkplain ClassDesc} describing the return type\n+     * @return a {@linkplain MethodTypeDesc} describing the desired method type\n+     * @throws NullPointerException if {@code returnDesc} is {@code null}\n+     * @since 21\n+     *\/\n+    static MethodTypeDesc of(ClassDesc returnDesc) {\n+        return new MethodTypeDescImpl(returnDesc, ConstantUtils.EMPTY_CLASSDESC);\n+    }\n+\n+    \/**\n+     * Returns a {@linkplain MethodTypeDesc} given the return type and parameter\n+     * types.\n+     *\n+     * @param returnDesc a {@linkplain ClassDesc} describing the return type\n+     * @param paramDescs a {@linkplain Collection} of {@linkplain ClassDesc}s\n+     * describing the argument types, in its iteration order\n+     * @return a {@linkplain MethodTypeDesc} describing the desired method type\n+     * @throws NullPointerException if any argument or its contents are {@code null}\n+     * @throws IllegalArgumentException if any element of {@code paramDescs} is a\n+     * {@link ClassDesc} for {@code void}\n+     * @since 21\n+     *\/\n+    static MethodTypeDesc of(ClassDesc returnDesc, Collection<ClassDesc> paramDescs) {\n+        return of(returnDesc, paramDescs.toArray(ConstantUtils.EMPTY_CLASSDESC));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+        if (r.parameterCount() == 0) {\n+            assertEquals(r, MethodTypeDesc.of(r.returnType()));\n+        }\n@@ -62,0 +65,6 @@\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), r.parameterList()));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), List.copyOf(r.parameterList())));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), r.parameterList().stream().toList()));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), IntStream.range(0, r.parameterCount())\n+                                                                   .mapToObj(r::parameterType)\n+                                                                   .toList()));\n@@ -291,1 +300,1 @@\n-            MethodTypeDesc r = MethodTypeDesc.of(CD_int, null);\n+            MethodTypeDesc r = MethodTypeDesc.of(CD_int, (ClassDesc[]) null);\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}