{"files":[{"patch":"@@ -39,0 +39,1 @@\n+    static final ClassDesc[] EMPTY_CLASSDESC = new ClassDesc[0];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ConstantUtils.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,28 @@\n+    \/**\n+     * {@return a {@linkplain MethodTypeDesc} with the given return type and no\n+     * parameter types}\n+     *\n+     * @param returnDesc a {@linkplain ClassDesc} describing the return type\n+     * @throws NullPointerException if {@code returnDesc} is {@code null}\n+     * @since 21\n+     *\/\n+    static MethodTypeDesc of(ClassDesc returnDesc) {\n+        return new MethodTypeDescImpl(returnDesc, ConstantUtils.EMPTY_CLASSDESC);\n+    }\n+\n+    \/**\n+     * {@return a {@linkplain MethodTypeDesc} given the return type and a list of\n+     * parameter types}\n+     *\n+     * @param returnDesc a {@linkplain ClassDesc} describing the return type\n+     * @param paramDescs a {@linkplain List} of {@linkplain ClassDesc}s\n+     * describing the parameter types\n+     * @throws NullPointerException if any argument or its contents are {@code null}\n+     * @throws IllegalArgumentException if any element of {@code paramDescs} is a\n+     * {@link ClassDesc} for {@code void}\n+     * @since 21\n+     *\/\n+    static MethodTypeDesc of(ClassDesc returnDesc, List<ClassDesc> paramDescs) {\n+        return of(returnDesc, paramDescs.toArray(ConstantUtils.EMPTY_CLASSDESC));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/MethodTypeDesc.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -39,0 +40,1 @@\n+import static org.testng.Assert.assertThrows;\n@@ -55,0 +57,3 @@\n+        if (r.parameterCount() == 0) {\n+            assertEquals(r, MethodTypeDesc.of(r.returnType()));\n+        }\n@@ -62,0 +67,6 @@\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), r.parameterList()));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), List.copyOf(r.parameterList())));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), r.parameterList().stream().toList()));\n+        assertEquals(r, MethodTypeDesc.of(r.returnType(), IntStream.range(0, r.parameterCount())\n+                                                                   .mapToObj(r::parameterType)\n+                                                                   .toList()));\n@@ -258,0 +269,1 @@\n+        \/\/ ofDescriptor\n@@ -263,7 +275,1 @@\n-            try {\n-                MethodTypeDesc r = MethodTypeDesc.ofDescriptor(d);\n-                fail(d);\n-            }\n-            catch (IllegalArgumentException e) {\n-                \/\/ good\n-            }\n+            assertThrows(IllegalArgumentException.class, () -> MethodTypeDesc.ofDescriptor(d));\n@@ -271,0 +277,1 @@\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.ofDescriptor(null));\n@@ -272,7 +279,2 @@\n-        \/\/ try with null argument\n-        try {\n-            MethodTypeDesc r = MethodTypeDesc.ofDescriptor(null);\n-            fail(\"should fail with NPE\");\n-        } catch (NullPointerException ex) {\n-            \/\/ good\n-        }\n+        \/\/ of(ClassDesc)\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.of(null));\n@@ -280,0 +282,3 @@\n+        \/\/ of(ClassDesc, ClassDesc...)\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.of(CD_int, (ClassDesc[]) null));\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.of(CD_int, new ClassDesc[] {null}));\n@@ -282,7 +287,1 @@\n-        try {\n-            MethodTypeDesc r = MethodTypeDesc.of(CD_int, CD_void);\n-            fail(\"can't reach here\");\n-        }\n-        catch (IllegalArgumentException e) {\n-            \/\/ good\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> MethodTypeDesc.of(CD_int, CD_void));\n@@ -290,17 +289,4 @@\n-        try {\n-            MethodTypeDesc r = MethodTypeDesc.of(CD_int, null);\n-            fail(\"ClassDesc array should not be null\");\n-        }\n-        catch (NullPointerException e) {\n-            \/\/ good\n-        }\n-\n-        try {\n-            ClassDesc[] paramDescs = new ClassDesc[1];\n-            paramDescs[0] = null;\n-            MethodTypeDesc r = MethodTypeDesc.of(CD_int, paramDescs);\n-            fail(\"ClassDesc should not be null\");\n-        }\n-        catch (NullPointerException e) {\n-            \/\/ good\n-        }\n+        \/\/ of(ClassDesc, List<ClassDesc>)\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.of(CD_int, (List<ClassDesc>) null));\n+        assertThrows(NullPointerException.class, () -> MethodTypeDesc.of(CD_int, Collections.singletonList(null)));\n+        assertThrows(IllegalArgumentException.class, () -> MethodTypeDesc.of(CD_int, List.of(CD_void)));\n","filename":"test\/jdk\/java\/lang\/constant\/MethodTypeDescTest.java","additions":24,"deletions":38,"binary":false,"changes":62,"status":"modified"}]}