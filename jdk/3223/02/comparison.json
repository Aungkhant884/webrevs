{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,5 @@\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if {@code numBands} is not > 0\n@@ -82,1 +87,1 @@\n-     *         one of the supported data types\n+     *         one of the supported data types for this sample model.\n@@ -103,0 +108,13 @@\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if {@code scanlineStride} is less than 0\n+     * @throws NullPointerException if {@code bankIndices} is {@code null}\n+     * @throws NullPointerException if {@code bandOffsets} is {@code null}\n+     * @throws IllegalArgumentException if {@code bandOffsets.length} is 0\n+     * @throws IllegalArgumentException if the length of\n+     *         {@code bankIndices} does not equal the length of\n+     *         {@code bandOffsets}\n+     * @throws IllegalArgumentException if any of the bank indices\n+     *         of {@code bandIndices} is less than 0\n@@ -104,1 +122,1 @@\n-     *         one of the supported data types\n+     *         one of the supported data types for this sample model\n@@ -856,0 +874,3 @@\n+        if (numBands <= 0) {\n+            throw new IllegalArgumentException(\"numBands must be > 0\");\n+        }\n@@ -864,0 +885,3 @@\n+        if (numBands <= 0) {\n+            throw new IllegalArgumentException(\"numBands must be > 0\");\n+        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/BandedSampleModel.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -121,8 +121,2 @@\n-     * @throws IllegalArgumentException if {@code w} or\n-     *         {@code h} is not greater than 0\n-     * @throws IllegalArgumentException if {@code pixelStride}\n-     *         is less than 0\n-     * @throws IllegalArgumentException if {@code scanlineStride}\n-     *         is less than 0\n-     * @throws IllegalArgumentException if {@code numBands}\n-     *         is less than 1\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n@@ -130,2 +124,5 @@\n-     *         and {@code h} is greater than\n-     *         {@code Integer.MAX_VALUE}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if {@code pixelStride} is less than 0\n+     * @throws IllegalArgumentException if {@code scanlineStride} is less than 0\n+     * @throws NullPointerException if {@code bandOffsets} is {@code null}\n+     * @throws IllegalArgumentException if {@code bandOffsets.length} is 0\n@@ -133,1 +130,1 @@\n-     *         one of the supported data types\n+     *         one of the supported data types for this sample model.\n@@ -153,3 +150,0 @@\n-        if (numBands < 1) {\n-            throw new IllegalArgumentException(\"Must have at least one band.\");\n-        }\n@@ -184,6 +178,9 @@\n-     * @throws IllegalArgumentException if {@code w} or\n-     *         {@code h} is not greater than 0\n-     * @throws IllegalArgumentException if {@code pixelStride}\n-     *         is less than 0\n-     * @throws IllegalArgumentException if {@code scanlineStride}\n-     *         is less than 0\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if {@code pixelStride} is less than 0\n+     * @throws IllegalArgumentException if {@code scanlineStride} is less than 0\n+     * @throws NullPointerException if {@code bankIndices} is {@code null}\n+     * @throws NullPointerException if {@code bandOffsets} is {@code null}\n+     * @throws IllegalArgumentException if {@code bandOffsets.length} is 0\n@@ -192,1 +189,1 @@\n-     *         {@code bankOffsets}\n+     *         {@code bandOffsets}\n@@ -196,1 +193,1 @@\n-     *         one of the supported data types\n+     *         one of the supported data types for this sample model\n@@ -210,0 +207,4 @@\n+        if (this.bandOffsets.length != this.bankIndices.length) {\n+            throw new IllegalArgumentException(\"Length of bandOffsets must \"+\n+                                               \"equal length of bankIndices.\");\n+        }\n@@ -238,4 +239,0 @@\n-        if (this.bandOffsets.length != this.bankIndices.length) {\n-            throw new IllegalArgumentException(\"Length of bandOffsets must \"+\n-                                               \"equal length of bankIndices.\");\n-        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/ComponentSampleModel.java","additions":23,"deletions":26,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,2 +198,8 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n+     * @throws IllegalArgumentException if {@code dataType} is not\n+     *         one of the supported data types\n+     * @throws IllegalArgumentException if {@code bands} is less than 1\n+     * @throws IllegalArgumentException if {@code w} and {@code h} are not\n+     *         both > 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws RasterFormatException if computing either\n@@ -201,2 +207,1 @@\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n+     *         {@code location.y + h} results in integer overflow\n@@ -208,0 +213,8 @@\n+        if (w <= 0 || h <= 0) {\n+            throw new IllegalArgumentException(\"w and h must be > 0\");\n+        }\n+        long lsz = (long)w * h;\n+        if (lsz > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Dimensions (width=\"+w+\n+                                               \" height=\"+h+\") are too large\");\n+        }\n@@ -243,5 +256,0 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n-     *         {@code location.x + w} or\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n@@ -252,0 +260,11 @@\n+     * @throws IllegalArgumentException if {@code w} and {@code h} are not\n+     *         both > 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws RasterFormatException if computing either\n+     *         {@code location.x + w} or\n+     *         {@code location.y + h} results in integer overflow\n+     * @throws IllegalArgumentException if {@code scanlineStride}\n+     *         is less than 0\n+     * @throws IllegalArgumentException if {@code pixelStride} is less than 0\n+     * @throws NullPointerException if {@code bandOffsets} is null\n@@ -261,0 +280,14 @@\n+        if (w <= 0 || h <= 0) {\n+            throw new IllegalArgumentException(\"w and h must be > 0\");\n+        }\n+        long lsz = (long)w * h;\n+        if (lsz > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Dimensions (width=\"+w+\n+                                               \" height=\"+h+\") are too large\");\n+        }\n+        if (pixelStride < 0) {\n+            throw new IllegalArgumentException(\"pixelStride is < 0\");\n+        }\n+        if (scanlineStride < 0) {\n+            throw new IllegalArgumentException(\"scanlineStride is < 0\");\n+        }\n@@ -264,0 +297,11 @@\n+        if (location == null) {\n+            location = new Point(0, 0);\n+        } else {\n+            if ((w + location.getX() > Integer.MAX_VALUE) ||\n+                (h + location.getY() > Integer.MAX_VALUE)) {\n+              throw new RasterFormatException(\n+                 \"location.x + w and location.y + h \" +\n+                 \" cannot exceed Integer.MAX_VALUE\");\n+            }\n+        }\n+\n@@ -300,2 +344,10 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n+     * @throws IllegalArgumentException if {@code dataType} is not\n+     *         one of the supported data types, which are\n+     *         {@code DataBuffer.TYPE_BYTE},\n+     *         {@code DataBuffer.TYPE_USHORT}\n+     *         or {@code DataBuffer.TYPE_INT}\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if computing either\n@@ -303,2 +355,1 @@\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n+     *         {@code location.y + h} results in integer overflow\n@@ -352,5 +403,0 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n-     *         {@code location.x + w} or\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n@@ -362,0 +408,9 @@\n+     * @throws IllegalArgumentException if {@code w} and {@code h}\n+     *         are not both greater than 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws IllegalArgumentException if computing either\n+     *         {@code location.x + w} or\n+     *         {@code location.y + h} results in integer overflow\n+     * @throws IllegalArgumentException if {@code scanlineStride}\n+     *         is less than 0\n@@ -363,1 +418,2 @@\n-     *         or {@code bandOffsets} is {@code null}\n+     *         is {@code null}\n+     * @throws NullPointerException if {@code bandOffsets} is {@code null}\n@@ -374,0 +430,8 @@\n+        if (w <= 0 || h <= 0) {\n+             throw new IllegalArgumentException(\"w and h must be positive\");\n+        }\n+        long lsz = (long)w * h;\n+        if (lsz > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Dimensions (width=\"+w+\n+                                               \" height=\"+h+\") are too large\");\n+        }\n@@ -382,0 +446,8 @@\n+        if (location != null) {\n+            if ((w + location.getX() > Integer.MAX_VALUE) ||\n+                (h + location.getY() > Integer.MAX_VALUE)) {\n+              throw new IllegalArgumentException(\n+                 \"location.x + w and location.y + h \" +\n+                 \" cannot exceed Integer.MAX_VALUE\");\n+            }\n+        }\n@@ -614,5 +686,0 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n-     *         {@code location.x + w} or\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n@@ -623,0 +690,5 @@\n+     * @throws NullPointerException if {@code dataBuffer} is null\n+     * @throws IllegalArgumentException if {@code dataType} is not\n+     *         one of the supported data types, which are\n+     *         {@code DataBuffer.TYPE_BYTE}, or\n+     *         {@code DataBuffer.TYPE_USHORT}.\n@@ -625,1 +697,12 @@\n-     * @throws NullPointerException if {@code dataBuffer} is null\n+     * @throws IllegalArgumentException if {@code w} and {@code h} are not\n+     *         both > 0\n+     * @throws IllegalArgumentException if the product of {@code w}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n+     * @throws RasterFormatException if computing either\n+     *         {@code location.x + w} or\n+     *         {@code location.y + h} results in integer overflow\n+     * @throws IllegalArgumentException if {@code scanlineStride}\n+     *         is less than 0\n+     * @throws IllegalArgumentException if {@code pixelStride} is less than 0\n+     * @throws NullPointerException if {@code bandOffsets} is null\n+\n@@ -637,0 +720,1 @@\n+\n@@ -639,0 +723,7 @@\n+        } else {\n+            if ((w + location.getX() > Integer.MAX_VALUE) ||\n+                (h + location.getY() > Integer.MAX_VALUE)) {\n+              throw new RasterFormatException(\n+                 \"location.x + w and location.y + h \" +\n+                 \" cannot exceed Integer.MAX_VALUE\");\n+            }\n@@ -640,0 +731,1 @@\n+\n@@ -689,5 +781,2 @@\n-     * @throws RasterFormatException if {@code w} or {@code h}\n-     *         is less than or equal to zero, or computing either\n-     *         {@code location.x + w} or\n-     *         {@code location.y + h} results in integer\n-     *         overflow\n+     * @throws NullPointerException if {@code dataBuffer} is null,\n+     *         or {@code bankIndices} is null, or {@code bandOffsets} is null\n@@ -698,2 +787,10 @@\n-     *         or {@code DataBuffer.TYPE_INT}\n-     * @throws NullPointerException if {@code dataBuffer} is null\n+     *         or {@code DataBuffer.TYPE_INT},\n+     *         or if {@code w} or {@code h} is less than or equal to zero,\n+     *         or if the product of {@code w} and {@code h} is greater\n+     *         than {@code Integer.MAX_VALUE}\n+     *         or if {@code scanlineStride} is less than zero,\n+     *         or if the length of {@code bankIndices} does not\n+     *         equal the length of {@code bandOffsets}\n+     * @throws RasterFormatException if computing either\n+     *         {@code location.x + w} or\n+     *         {@code location.y + h} results in integer overflow\n@@ -711,2 +808,11 @@\n-        if (location == null) {\n-           location = new Point(0,0);\n+        if (bankIndices == null) {\n+            throw new NullPointerException(\"bankIndices cannot be null\");\n+        }\n+        if (bandOffsets == null) {\n+            throw new NullPointerException(\"bandOffsets cannot be null\");\n+        }\n+        if (w <= 0 || h <= 0) {\n+            throw new IllegalArgumentException(\"Width (\"+w+\") and height (\"+h+\") must be > 0\");\n+        }\n+        if (scanlineStride < 0) {\n+            throw new IllegalArgumentException(\"Scanline stride must be >= 0\");\n@@ -714,1 +820,0 @@\n-        int dataType = dataBuffer.getDataType();\n@@ -722,0 +827,12 @@\n+        if (location == null) {\n+           location = new Point(0,0);\n+        } else {\n+            if ((w + location.getX() > Integer.MAX_VALUE) ||\n+                (h + location.getY() > Integer.MAX_VALUE)) {\n+              throw new RasterFormatException(\n+                 \"location.x + w and location.y + h \" +\n+                 \" cannot exceed Integer.MAX_VALUE\");\n+            }\n+        }\n+\n+        int dataType = dataBuffer.getDataType();\n@@ -775,1 +892,1 @@\n-     * @throws IllegalArgumentException if {@code dataType} is not\n+     * @throws IllegalArgumentException if {@code dataBuffer} is not\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/Raster.java","additions":154,"deletions":37,"binary":false,"changes":191,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,2 +117,1 @@\n-     *         and {@code h} is greater than\n-     *         {@code Integer.MAX_VALUE}\n+     *         and {@code h} is greater than {@code Integer.MAX_VALUE}\n@@ -120,1 +119,3 @@\n-     *         one of the supported data types\n+     *         one of the pre-defined data type tags in the\n+     *         {@code DataBuffer} class\n+     * @throws IllegalArgumentException if {@code numBands} is less than 1\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/image\/SampleModel.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,1250 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+*\/\n+\n+\/*\n+ * @test\n+ * @bug 8255800\n+ * @summary verify Raster + SampleModel creation vs spec.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.image.BandedSampleModel;\n+import java.awt.image.ComponentSampleModel;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.DataBufferByte;\n+import java.awt.image.DataBufferFloat;\n+import java.awt.image.Raster;\n+import java.awt.image.RasterFormatException;\n+\n+public class CreateRasterExceptionTest {\n+\n+    static int[] bankIndices = new int[] { 0, 0};\n+    static int[] negBankIndices = new int[] { -1, 0};\n+    static int[] bandOffsets = new int[] { 0, 0};\n+    static int[] bandOffsets2 = new int[] { 0, 0, 0, 0};\n+    static int[] zeroBandOffsets = new int[] {};\n+    static DataBuffer dBuffer = new DataBufferByte(15);\n+\n+    static void noException() {\n+         Thread.dumpStack();\n+         throw new RuntimeException(\"No expected exception\");\n+    }\n+\n+    \/* Except a version starting with \"17\" or higher *\/\n+    static void checkIsOldVersion(Throwable t) {\n+        String version = System.getProperty(\"java.version\");\n+        version = version.split(\"\\\\D\")[0];\n+        int v = Integer.parseInt(version);\n+        if (v >= 17) {\n+            t.printStackTrace();\n+            throw new RuntimeException(\n+                           \"Unexpected exception for version \" + v);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+         componentSampleModelTests1();\n+         componentSampleModelTests2();\n+         bandedSampleModelTests1();\n+         bandedSampleModelTests2();\n+         bandedRasterTests1();\n+         bandedRasterTests2();\n+         bandedRasterTests3();\n+         interleavedRasterTests1();\n+         interleavedRasterTests2();\n+         interleavedRasterTests3();\n+         System.out.println();\n+         System.out.println(\" ** Test Passed **\");\n+    }\n+\n+\n+    \/*   public ComponentSampleModel(int dataType,\n+     *                          int w, int h,\n+     *                          int pixelStride,\n+     *                          int scanlineStride,\n+     *                          int[] bandOffsets);\n+     *\/\n+    static void componentSampleModelTests1() {\n+\n+        System.out.println();\n+        System.out.println(\"** componentSampleModelTests1\");\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, -5, 1, 3, 15,\n+                                     bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                         \"Got expected exception for negative width\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT,\n+                   Integer.MAX_VALUE \/ 2, Integer.MAX_VALUE \/ 2,\n+                   3, 15, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                        \"Got expected exception for exceeding max int\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if {@code pixelStride}\n+              * is less than 0\n+              *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, -3, 15,\n+                                     bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative pixel stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, -15,\n+                                     bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets} is\n+             * {@code null}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     bankIndices, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                        \"Got expected exception for null bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if\n+             * {@code bandOffsets.length}is 0\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     bankIndices, zeroBandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                        \"Got expected exception for 0 bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            new ComponentSampleModel(-1234, 5, 1, 3, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                      \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/* public ComponentSampleModel(int dataType,\n+     *                          int w, int h,\n+     *                          int pixelStride,\n+     *                          int scanlineStride,\n+     *                          int[] bankIndices,\n+     *                          int[] bandOffsets);\n+     *\/\n+    static void componentSampleModelTests2() {\n+\n+        System.out.println();\n+        System.out.println(\"** componentSampleModelTests2\");\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w}\n+             * and {@code h} are not both greater than 0\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, -5, 1, 3, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                     \"Got expected exception for negative width\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT,\n+                   Integer.MAX_VALUE \/ 2, Integer.MAX_VALUE \/ 2,\n+                   3, 15, bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                     \"Got expected exception for exceeding max int\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if {@code pixelStride}\n+              * is less than 0\n+              *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, -3, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative pixel stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, -15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+         \/*\n+          * @throws NullPointerException if {@code bankIndices}\n+          *  is {@code null}\n+          *\/\n+             new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                      null, bandOffsets);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bankIndices\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets} is\n+             * {@code null}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     bankIndices, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if\n+             * {@code bandOffsets.length} is 0\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     bankIndices, zeroBandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for 0 bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the length of\n+             * {@code bankIndices} does not equal the length of\n+             * {@code bandOffsets}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     bankIndices, bandOffsets2);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for \" +\n+                \"bandOffsets.length != bankIndices.length\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the length of\n+             * {@code bankIndices} does not equal the length of\n+             * {@code bandOffsets}\n+             *\/\n+            new ComponentSampleModel(DataBuffer.TYPE_INT, 5, 1, 3, 15,\n+                                     negBankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for \" +\n+                \"negative bank Index\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            new ComponentSampleModel(-1234, 5, 1, 3, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/* public BandedSampleModel(int dataType, int w, int h,\n+     * int numBands);\n+     *\/\n+    static void bandedSampleModelTests1() {\n+\n+        System.out.println();\n+        System.out.println(\"** bandedSampleModelTests1\");\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, -5, 1, 1);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for negative width\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT,\n+                   Integer.MAX_VALUE \/ 2, Integer.MAX_VALUE \/ 2, 1);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for exceeding max int\");\n+            System.out.println(t);\n+        }\n+\n+        \/* Testing this both with 0 and negative (next test) *\/\n+        try {\n+            \/* @throws IllegalArgumentException if {@code numBands}\n+             *  is <= 0\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 0);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for 0 numBands\");\n+            System.out.println(t);\n+        }\n+\n+        \/* Before JDK 17, a negative value for num bands would throw\n+         * NegativeArraySizeException, but a zero value would throw\n+         * IllegalArgumentException so allow NegativeArraySizeException\n+         * on < 17 here to make it easier to run this test on both\n+         * versions and verify all behaviours.\n+         *\/\n+        try {\n+            \/* @throws IllegalArgumentException if {@code numBands}\n+             *  is <= 0\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, -1);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for < 0 numBands\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\n+                   \"Got expected exception for < 0 numBands\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType}\n+             * is not one of the supported data types for this\n+             * sample model\n+             *\/\n+            new BandedSampleModel(-1234, 5, 1, 3);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/*\n+     * public BandedSampleModel(int dataType,\n+     *                          int w, int h,\n+     *                          int scanlineStride,\n+     *                          int[] bankIndices,\n+     *                          int[] bandOffsets);\n+     *\/\n+    static void bandedSampleModelTests2() {\n+\n+        System.out.println();\n+        System.out.println(\"** bandedSampleModelTests2\");\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, -5, 1, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                      \"Got expected exception for negative width\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT,\n+                   Integer.MAX_VALUE \/ 8, Integer.MAX_VALUE \/ 8,\n+                   Integer.MAX_VALUE, bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for exceeding max int\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, -15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+         \/*\n+          * @throws NullPointerException if {@code bankIndices}\n+          * is {@code null}\n+          *\/\n+             new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 15,\n+                                      null, bandOffsets);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bankIndices\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets} is\n+             * {@code null}\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 15,\n+                                     bankIndices, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if\n+             * {@code bandOffsets.length} is 0\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 15,\n+                                     bankIndices, zeroBandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for 0 bandOffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the length of\n+             * {@code bankIndices} does not equal the length of\n+             * {@code bandOffsets}\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 15,\n+                                     bankIndices, bandOffsets2);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for \" +\n+                \"bandOffsets.length != bankIndices.length\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the length of\n+             * {@code bankIndices} does not equal the length of\n+             * {@code bandOffsets}\n+             *\/\n+            new BandedSampleModel(DataBuffer.TYPE_INT, 5, 1, 15,\n+                                     negBankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for \" +\n+                \"negative bank Index\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            new BandedSampleModel(-1234, 5, 1, 15,\n+                                     bankIndices, bandOffsets);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+      \/* createBandedRaster(int dataType, int w, int h,\n+       *                    int bands, Point location);\n+       *\/\n+    static void bandedRasterTests1() {\n+\n+        System.out.println();\n+        System.out.println(\"** bandedRasterTests1\");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            \/* Old API had @throws RasterFormatException if w or h < 0\n+             * Old JDK never actually does. And it is worse.\n+             * If one or the other is zero, we get IAE.\n+             * If one is positive, the other negative\n+             * we get NegativeArraySizeException.\n+             * If BOTH are negative, we are back to IAE.\n+             * This needs to be consistent.\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                                      1,  -1, 3, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8, 3, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                    Integer.MAX_VALUE-2, 1, 1, pt);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException | OutOfMemoryError t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws ArrayIndexOutOfBoundsException if {@code bands}\n+             *         is less than 1\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                                      1, 1, 0, null);\n+            noException();\n+        } catch (ArrayIndexOutOfBoundsException t) {\n+            System.out.println(\"Got expected exception for zero bands\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_FLOAT,\n+                                       5, 1, 3, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/*\n+     *  createBandedRaster(int dataType,\n+     *                     int w, int h,\n+     *                     int scanlineStride,\n+     *                     int[] bankIndices,\n+     *                     int[] bandOffsets,\n+     *                     Point location)\n+     *\/\n+    static void bandedRasterTests2() {\n+\n+        System.out.println();\n+        System.out.println(\"** bandedRasterTests2\");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            \/* Old API had @throws RasterFormatException if w or h < 0\n+             * Old JDK never actually does. And it is worse.\n+             * If one or the other * is zero, we get IAE.\n+             * If one is positive, the other negative\n+             * we get NegativeArraySizeException.\n+             * If BOTH are negative, we are back to IAE.\n+             * This needs to be consistent.\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT, 1, -1, 3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8,\n+                    Integer.MAX_VALUE,\n+                    bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT,\n+                    Integer.MAX_VALUE-2, 1,\n+                    Integer.MAX_VALUE-2, bankIndices, bandOffsets, pt);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT, 1, 1, -3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws ArrayIndexOutOfBoundsException if\n+             * {@code bankIndices} is null\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT, 1, 1, 0,\n+                                      null, bandOffsets, null);\n+            noException();\n+        } catch (ArrayIndexOutOfBoundsException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bankIndices\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets}\n+             * is null\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_INT, 1, 1, 0,\n+                                      bankIndices, null, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandoffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            Raster.createBandedRaster(DataBuffer.TYPE_FLOAT, 5, 1, 3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/*\n+     *  createBandedRaster(DataBuffer dataBuffer,\n+     *                     int w, int h,\n+     *                     int scanlineStride,\n+     *                     int[] bankIndices,\n+     *                     int[] bandOffsets,\n+     *                     Point location)\n+     *\/\n+    static void bandedRasterTests3() {\n+\n+        System.out.println();\n+        System.out.println(\"** bandedRasterTests3\");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w} and\n+             * {@code h} are not both greater than 0\n+             *\/\n+            Raster.createBandedRaster(dBuffer, 1, -1, 3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createBandedRaster(dBuffer,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8,\n+                    Integer.MAX_VALUE, bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+        }\n+\n+        try {\n+            \/* @throws RasterFormatException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createBandedRaster(dBuffer,\n+                    Integer.MAX_VALUE-2, 1, Integer.MAX_VALUE,\n+                    bankIndices, bandOffsets, pt);\n+            noException();\n+        } catch (RasterFormatException t) {\n+            System.out.println(\n+                   \"Got expected raster exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            Raster.createBandedRaster(dBuffer, 1, 1, -3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bankIndices}\n+             *         is null\n+             *\/\n+            Raster.createBandedRaster(dBuffer, 1, 1, 0,\n+                                      null, bandOffsets, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bankIndices\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code dataBuffer}\n+             * is null\n+             *\/\n+            Raster.createBandedRaster(null, 1, 1, 3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null dataBuffer\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the length of\n+             * {@code bankIndices} does not  equal the length of\n+             *  {@code bandOffsets}\n+             *\/\n+            Raster.createBandedRaster(dBuffer, 1, 1, 3,\n+                                      bankIndices, bandOffsets2, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for different arrlen\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets}\n+             * is null\n+             *\/\n+            Raster.createBandedRaster(dBuffer, 1, 1, 0,\n+                                      bankIndices, null, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandoffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/*\n+             * @throws IllegalArgumentException if {@code dataType}\n+             * is not one of the supported data types, which are\n+             * {@code DataBuffer.TYPE_BYTE},\n+             * {@code DataBuffer.TYPE_USHORT}\n+             * or {@code DataBuffer.TYPE_INT},\n+             *\/\n+            DataBufferFloat dbFloat = new DataBufferFloat(20);\n+            Raster.createBandedRaster(dbFloat, 1, 1, 3,\n+                                      bankIndices, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad dataBuffer\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+    \/* createInterleavedRaster(int dataType, int w, int h,\n+     *                        int bands, Point location);\n+     *\/\n+    static void interleavedRasterTests1() {\n+\n+        System.out.println();\n+        System.out.println(\"** interleavedRasterTests1\");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w}\n+             * and {@code h} are not both greater than 0\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                            1, -1, 3, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8, 1, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws RasterFormatException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                    Integer.MAX_VALUE-2, 1, 1, pt);\n+            noException();\n+        } catch (RasterFormatException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code bands}\n+             *         is less than 1\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                            1, 1, 0, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception zero bands\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+             Raster.createInterleavedRaster(DataBuffer.TYPE_INT,\n+                                                5, 1, 3, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+     \/* createInterleavedRaster(int dataType,\n+      *                         int w, int h,\n+      *                         int scanlineStride,\n+      *                         int pixelStride,\n+      *                         int[] bandOffsets,\n+      *                         Point location)\n+      *\/\n+    static void interleavedRasterTests2() {\n+\n+        System.out.println();\n+        System.out.println(\"** interleavedRasterTests2 \");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w}\n+             * and {@code h} are not both greater than 0\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                       1, -1, 3, 1, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8,\n+                    Integer.MAX_VALUE\/2 , 1,\n+                    bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws RasterFormatException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                    Integer.MAX_VALUE-2, 1,\n+                    Integer.MAX_VALUE, 1, bandOffsets, pt);\n+            noException();\n+        } catch (RasterFormatException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if\n+              * {@code scanlineStride} is less than 0\n+              *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                      1, 1, -3, 1, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if {@code pixelStride}\n+              * is less than 0\n+              *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                      1, 1, 3, -1, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for pixelStride < 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+            checkIsOldVersion(t);\n+            System.out.println(\n+                   \"Got expected exception for pixelStride < 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets}\n+             * is null\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,\n+                                  1, 1, 0, 1, null, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandoffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataType} is\n+             * not one of the supported data types for this sample model\n+             *\/\n+            Raster.createInterleavedRaster(DataBuffer.TYPE_INT,\n+                                        5, 1, 3, 1, bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+\n+     \/* createInterleavedRaster(DataBuffer dBuffer,\n+      *                         int w, int h,\n+      *                         int scanlineStride,\n+      *                         int pixelStride,\n+      *                         int[] bandOffsets,\n+      *                         Point location)\n+      *\/\n+    static void interleavedRasterTests3() {\n+\n+        System.out.println();\n+        System.out.println(\"** interleavedRasterTests3 \");\n+\n+        Point p = new Point();\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code w}\n+             * and {@code h} are not both greater than 0\n+             *\/\n+            Raster.createInterleavedRaster(dBuffer, 1, -1, 3, 1,\n+                                      bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for width <= 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if the product of\n+             * {@code w} and {@code h} is greater than\n+             * {@code Integer.MAX_VALUE}\n+             *\/\n+            Raster.createInterleavedRaster(dBuffer,\n+                    Integer.MAX_VALUE\/8, Integer.MAX_VALUE\/8,\n+                     Integer.MAX_VALUE\/4, 1,\n+                    bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws RasterFormatException if computing either\n+             * {@code location.x + w} or\n+             * {@code location.y + h} results in integer overflow\n+             *\/\n+            Point pt = new Point(5, 1);\n+            Raster.createInterleavedRaster(dBuffer,\n+                    Integer.MAX_VALUE-2, 1,\n+                    Integer.MAX_VALUE, 1, bandOffsets, pt);\n+            noException();\n+        } catch (RasterFormatException t) {\n+            System.out.println(\"Got expected exception for overflow\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException\n+              * if {@code scanlineStride} is less than 0\n+              *\/\n+            Raster.createInterleavedRaster(dBuffer, 5, 1, -15, 1,\n+                                      bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                \"Got expected exception for negative scanline stride\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+             \/* @throws IllegalArgumentException if {@code pixelStride}\n+              * is less than 0\n+              *\/\n+            Raster.createInterleavedRaster(dBuffer, 5, 1, 15, -1,\n+                                      bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for pixelStride < 0\");\n+            System.out.println(t);\n+        } catch (NegativeArraySizeException t) {\n+if (t != null) throw t;\n+            checkIsOldVersion(t);\n+            System.out.println(\n+                   \"Got expected exception for pixelStride < 0\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws NullPointerException if {@code bandOffsets}\n+             * is null\n+             *\/\n+            Raster.createInterleavedRaster(dBuffer, 5, 1, 15, 1,\n+                                      null, null);\n+            noException();\n+        } catch (NullPointerException t) {\n+            System.out.println(\n+                   \"Got expected exception for null bandoffsets\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws IllegalArgumentException if {@code dataBuffer}\n+             * is not one of the supported data types\n+             *\/\n+            DataBufferFloat dbFloat = new DataBufferFloat(20);\n+            Raster.createInterleavedRaster(dbFloat, 5, 1, 15, 1,\n+                                      bandOffsets, null);\n+            noException();\n+        } catch (IllegalArgumentException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+\n+        try {\n+            \/* @throws RasterFormatException if {@code dataBuffer}\n+             * has more than one bank.\n+             *\/\n+            DataBufferByte dbb = new DataBufferByte(100, 2);\n+            Raster.createInterleavedRaster(dbb, 5, 1, 15, 1,\n+                                      bandOffsets, null);\n+            noException();\n+        } catch (RasterFormatException t) {\n+            System.out.println(\n+                   \"Got expected exception for bad databuffer type\");\n+            System.out.println(t);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/Raster\/CreateRasterExceptionTest.java","additions":1250,"deletions":0,"binary":false,"changes":1250,"status":"added"}]}