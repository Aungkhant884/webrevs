{"files":[{"patch":"@@ -8974,2 +8974,2 @@\n-instruct verify_alignment(rRegP r, rRegL mask, rRegP tmp) %{\n-  match(Set r (VerifyAlignment r mask));\n+instruct verify_vector_alignment(rRegP r, rRegL mask, rRegP tmp) %{\n+  match(Set r (VerifyVectorAlignment r mask));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-       !strcmp(_matrule->_rChild->_opType,\"VerifyAlignment\")||\n+       !strcmp(_matrule->_rChild->_opType,\"VerifyVectorAlignment\")||\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1797,1 +1797,1 @@\n-  if (derived->is_Mach() && derived->as_Mach()->ideal_Opcode() == Op_VerifyAlignment) {\n+  if (derived->is_Mach() && derived->as_Mach()->ideal_Opcode() == Op_VerifyVectorAlignment) {\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -452,1 +452,1 @@\n-macro(VerifyAlignment)\n+macro(VerifyVectorAlignment)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3670,2 +3670,2 @@\n-    \/\/ Add VerifyAlignment node between adr and load \/ store.\n-    if (VerifyAlignVector && Matcher::has_match_rule(Op_VerifyAlignment)) {\n+    \/\/ Add VerifyVectorAlignment node between adr and load \/ store.\n+    if (VerifyAlignVector && Matcher::has_match_rule(Op_VerifyVectorAlignment)) {\n@@ -3687,1 +3687,1 @@\n-        VerifyAlignmentNode* va = new VerifyAlignmentNode(n->in(MemNode::Address), mask_con);\n+        VerifyVectorAlignmentNode* va = new VerifyVectorAlignmentNode(n->in(MemNode::Address), mask_con);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -339,2 +339,2 @@\n-  if (base != nullptr && base->is_Mach() && base->as_Mach()->ideal_Opcode() == Op_VerifyAlignment) {\n-    \/\/ For VerifyAlignment we just pass the type through\n+  if (base != nullptr && base->is_Mach() && base->as_Mach()->ideal_Opcode() == Op_VerifyVectorAlignment) {\n+    \/\/ For VerifyVectorAlignment we just pass the type through\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-class VerifyAlignmentNode;\n+class VerifyVectorAlignmentNode;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1048,1 +1048,1 @@\n-class VerifyAlignmentNode : public Node {\n+class VerifyVectorAlignmentNode : public Node {\n@@ -1051,1 +1051,1 @@\n-  VerifyAlignmentNode(Node* adr, Node* mask) : Node(nullptr, adr, mask) {}\n+  VerifyVectorAlignmentNode(Node* adr, Node* mask) : Node(nullptr, adr, mask) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}