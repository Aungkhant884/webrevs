{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -40,0 +41,1 @@\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -54,1 +56,1 @@\n-    private static JTextArea editor;\n+    private static JTextArea textArea;\n@@ -56,1 +58,1 @@\n-    private static boolean passed = false;\n+    private static volatile boolean passed = false;\n@@ -71,1 +73,10 @@\n-                SwingUtilities.invokeAndWait(() -> frame = new JFrame());\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n@@ -73,1 +84,14 @@\n-                AtomicReference<Point> editorLoc = new AtomicReference<Point>();\n+\n+                SwingUtilities.invokeAndWait(() -> textArea.requestFocusInWindow());\n+                int waitCount = 0;\n+                \/\/ Waits until the textArea becomes the focus owner.\n+                while (!isFocusOwner()) {\n+                    robot.delay(100);\n+                    waitCount++;\n+                    if (waitCount > 20) {\n+                        throw new RuntimeException(\"Test Failed, waited for long, \" +\n+                                \"but the JTextArea can't gain focus for L&F: \" + laf);\n+                    }\n+                }\n+\n+                AtomicReference<Point> textAreaLoc = new AtomicReference<Point>();\n@@ -75,3 +99,1 @@\n-                    setLookAndFeel(laf);\n-                    createUI();\n-                    editorLoc.set(editor.getLocationOnScreen());\n+                    textAreaLoc.set(textArea.getLocationOnScreen());\n@@ -79,0 +101,1 @@\n+\n@@ -81,3 +104,3 @@\n-                final int x = editorLoc.get().x;\n-                final int y = editorLoc.get().y;\n-                robot.mouseMove(x, y);\n+                final int x = textAreaLoc.get().x;\n+                final int y = textAreaLoc.get().y;\n+                robot.mouseMove(x + 5, y + 5);\n@@ -85,1 +108,1 @@\n-                robot.mouseMove(x + 20, y);\n+                robot.mouseMove(x + 20, y + 5);\n@@ -89,0 +112,1 @@\n+\n@@ -100,0 +124,5 @@\n+    private static boolean isFocusOwner() throws Exception {\n+        AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n+        SwingUtilities.invokeAndWait(() -> isFocusOwner.set(textArea.isFocusOwner()));\n+        return isFocusOwner.get();\n+    }\n@@ -102,0 +131,1 @@\n+        frame = new JFrame();\n@@ -103,3 +133,3 @@\n-        editor = new JTextArea(\"I am a JTextArea\");\n-        editor.setEditable(false);\n-        panel.add(editor);\n+        textArea = new JTextArea(\"I am a JTextArea\");\n+        textArea.setEditable(false);\n+        panel.add(textArea);\n@@ -121,2 +151,0 @@\n-        editor.requestFocusInWindow();\n-\n@@ -125,1 +153,1 @@\n-    private static void setLookAndFeel(final String laf) {\n+    private static boolean setLookAndFeel(String lafName) {\n@@ -127,3 +155,6 @@\n-            UIManager.setLookAndFeel(laf);\n-            System.out.println(\"LookAndFeel: \" + laf);\n-        } catch (Exception e) {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n@@ -132,0 +163,1 @@\n+        return true;\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/4514331\/TabShiftsFocusToNextComponent.java","additions":52,"deletions":20,"binary":false,"changes":72,"status":"modified"}]}