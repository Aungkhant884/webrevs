{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.ref.Cleaner;\n@@ -40,0 +41,1 @@\n+    private final Cleaner.Cleanable cleanable;\n@@ -42,1 +44,1 @@\n-    long pCred; \/\/ Pointer to the gss_cred_id_t structure\n+    final long pCred; \/\/ Pointer to the gss_cred_id_t structure\n@@ -44,1 +46,1 @@\n-    private GSSLibStub cStub;\n+    private final GSSLibStub cStub;\n@@ -72,0 +74,1 @@\n+        cleanable = Krb5Util.cleaner.register(this, disposerFor(cStub, pCred));\n@@ -88,0 +91,2 @@\n+\n+        cleanable = Krb5Util.cleaner.register(this, disposerFor(cStub, pCred));\n@@ -94,1 +99,1 @@\n-    public void dispose() throws GSSException {\n+    public void dispose() {\n@@ -96,3 +101,7 @@\n-        if (pCred != 0) {\n-            pCred = cStub.releaseCred(pCred);\n-        }\n+        cleanable.clean();\n+    }\n+\n+    private static Runnable disposerFor(GSSLibStub stub, long pCredentials) {\n+        return () -> {\n+            stub.releaseCred(pCredentials);\n+        };\n@@ -135,5 +144,0 @@\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        dispose();\n-    }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/GSSCredElement.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.ref.Cleaner;\n@@ -51,0 +52,1 @@\n+    private final Cleaner.Cleanable cleanable;\n@@ -52,1 +54,1 @@\n-    long pName = 0; \/\/ Pointer to the gss_name_t structure\n+    final long pName; \/\/ Pointer to the gss_name_t structure\n@@ -55,1 +57,1 @@\n-    private GSSLibStub cStub;\n+    final private GSSLibStub cStub;\n@@ -97,0 +99,3 @@\n+        pName = 0;\n+        cleanable = null;\n+        cStub = null;\n@@ -109,0 +114,2 @@\n+\n+        cleanable = Krb5Util.cleaner.register(this, disposerFor(stub, pName));\n@@ -154,0 +161,2 @@\n+        cleanable = Krb5Util.cleaner.register(this, disposerFor(stub, pName));\n+\n@@ -287,3 +296,2 @@\n-        if (pName != 0) {\n-            cStub.releaseName(pName);\n-            pName = 0;\n+        if (cleanable != null) {\n+            cleanable.clean();\n@@ -293,3 +301,4 @@\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        dispose();\n+    private static Runnable disposerFor(GSSLibStub stub, long pName) {\n+        return () -> {\n+            stub.releaseName(pName);\n+        };\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/GSSNameElement.java","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.ref.Cleaner;\n@@ -36,0 +37,2 @@\n+    \/\/ A cleaner, shared within this module.\n+    static final Cleaner cleaner = Cleaner.create();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/Krb5Util.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.ref.Cleaner;\n@@ -49,0 +50,1 @@\n+    private Cleaner.Cleanable cleanable;\n@@ -241,1 +243,0 @@\n-        pContext = pCtxt;\n@@ -243,0 +244,1 @@\n+        setContext(pCtxt);\n@@ -362,1 +364,1 @@\n-    public void dispose() throws GSSException {\n+    public void dispose() {\n@@ -373,2 +375,2 @@\n-        if (pContext != 0) {\n-            pContext = cStub.deleteContext(pContext);\n+\n+        if (pContext != 0 && cleanable != null) {\n@@ -376,0 +378,18 @@\n+            cleanable.clean();\n+        }\n+    }\n+\n+    \/\/ Note: this method is also used in native code.\n+    private void setContext(long pContext) {\n+        \/\/ Dispose the existing context.\n+        if (this.pContext != 0L && cleanable != null) {\n+            cleanable.clean();\n+        }\n+\n+        \/\/ Reset the context\n+        this.pContext = pContext;\n+\n+        \/\/ Register the cleaner.\n+        if (pContext != 0L) {\n+            cleanable = Krb5Util.cleaner.register(this,\n+                    disposerFor(cStub, pContext));\n@@ -379,0 +399,6 @@\n+    private static Runnable disposerFor(GSSLibStub stub, long pContext) {\n+        return () -> {\n+            stub.deleteContext(pContext);\n+        };\n+    }\n+\n@@ -642,5 +668,0 @@\n-    @SuppressWarnings(\"removal\")\n-    protected void finalize() throws Throwable {\n-        dispose();\n-    }\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/jgss\/wrapper\/NativeGSSContext.java","additions":30,"deletions":9,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -940,1 +940,1 @@\n-    (*env)->SetLongField(env, jcontextSpi, FID_NativeGSSContext_pContext,\n+    (*env)->CallVoidMethod(env, jcontextSpi, MID_NativeGSSContext_setContext,\n@@ -1060,1 +1060,1 @@\n-    (*env)->SetLongField(env, jcontextSpi, FID_NativeGSSContext_pContext,\n+    (*env)->CallVoidMethod(env, jcontextSpi, MID_NativeGSSContext_setContext,\n","filename":"src\/java.security.jgss\/share\/native\/libj2gss\/GSSLibStub.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,1 @@\n+jmethodID MID_NativeGSSContext_setContext;\n@@ -293,0 +294,9 @@\n+\n+  MID_NativeGSSContext_setContext =\n+    (*env)->GetMethodID(env, CLS_NativeGSSContext, \"setContext\",\n+                        \"(J)V\");\n+  if (MID_NativeGSSContext_setContext == NULL) {\n+    printf(\"Couldn't find NativeGSSContext.setContext(long) method\\n\");\n+    return JNI_ERR;\n+  }\n+\n","filename":"src\/java.security.jgss\/share\/native\/libj2gss\/NativeUtil.c","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+  extern jmethodID MID_NativeGSSContext_setContext;\n","filename":"src\/java.security.jgss\/share\/native\/libj2gss\/NativeUtil.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284490\n+ * @summary Remove finalizer method in java.security.jgss\n+ * @run main\/othervm GssContextCleanup\n+ *\/\n+\n+import org.ietf.jgss.GSSContext;\n+import org.ietf.jgss.GSSCredential;\n+import org.ietf.jgss.GSSManager;\n+\n+import java.util.WeakHashMap;\n+\n+public final class GssContextCleanup {\n+    private final static WeakHashMap<GSSContext, ?> whm = new WeakHashMap<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Enable debug log so that the failure analysis could be easier.\n+        System.setProperty(\"sun.security.nativegss.debug\", \"true\");\n+\n+        \/\/ Use native provider\n+        System.setProperty(\"sun.security.jgss.native\", \"true\");\n+\n+        \/\/ Create an object\n+        GSSManager manager = GSSManager.getInstance();\n+        GSSContext context = manager.createContext((GSSCredential)null);\n+        whm.put(context, null);\n+        context = null;\n+\n+        \/\/ Wait to trigger the cleanup.\n+        for (int i = 0; i < 10 && whm.size() > 0; i++) {\n+            System.gc();\n+        }\n+\n+        \/\/ Check if the object has been collected.\n+        if (whm.size() > 0) {\n+            throw new RuntimeException(\"GSSContext object is not released\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/jgss\/GssContextCleanup.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284490\n+ * @summary Remove finalizer method in java.security.jgss\n+ * @run main\/othervm GssNameCleanup\n+ *\/\n+\n+import java.util.WeakHashMap;\n+import org.ietf.jgss.GSSManager;\n+import org.ietf.jgss.GSSName;\n+import org.ietf.jgss.GSSException;\n+\n+public final class GssNameCleanup {\n+    private final static WeakHashMap<GSSName, ?> whm = new WeakHashMap<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ Enable debug log so that the failure analysis could be easier.\n+        System.setProperty(\"sun.security.nativegss.debug\", \"true\");\n+\n+        \/\/ Use native provider\n+        System.setProperty(\"sun.security.jgss.native\", \"true\");\n+\n+        \/\/ Create an object\n+        GSSManager manager = GSSManager.getInstance();\n+        try {\n+            GSSName name =\n+                manager.createName(\"u1\", GSSName.NT_USER_NAME);\n+            whm.put(name, null);\n+            name = null;\n+        } catch (GSSException gsse) {\n+            \/\/ createName() could fail if the local default realm\n+            \/\/ cannot be located.  Just ignore the test case for\n+            \/\/ such circumstances.\n+            System.out.println(\"Ignore this test case: \" + gsse);\n+        }\n+\n+        \/\/ Wait to trigger the cleanup.\n+        for (int i = 0; i < 10 && whm.size() > 0; i++) {\n+            System.gc();\n+        }\n+\n+        \/\/ Check if the object has been collected.\n+        if (whm.size() > 0) {\n+            throw new RuntimeException(\"GSSName object is not released\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/jgss\/GssNameCleanup.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284490\n+ * @summary Remove finalizer method in java.security.jgss\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @compile -XDignore.symbol.file Cleaners.java\n+ * @run main\/othervm Cleaners launcher\n+ *\/\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.Arrays;\n+import java.util.Set;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.Proc;\n+import org.ietf.jgss.Oid;\n+import sun.security.krb5.Config;\n+\n+public class Cleaners {\n+\n+    private static final String CONF = \"krb5.conf\";\n+    private static final String KTAB_S = \"server.ktab\";\n+    private static final String KTAB_B = \"backend.ktab\";\n+\n+    private static final String HOST = \"localhost\";\n+    private static final String SERVER = \"server\/\" + HOST;\n+    private static final String BACKEND = \"backend\/\" + HOST;\n+    private static final String USER = \"user\";\n+    private static final char[] PASS = \"password\".toCharArray();\n+    private static final String REALM = \"REALM\";\n+\n+    private static final byte[] MSG = \"12345678\".repeat(128)\n+            .getBytes(StandardCharsets.UTF_8);\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        Oid oid = new Oid(\"1.2.840.113554.1.2.2\");\n+        byte[] token, msg;\n+\n+        switch (args[0]) {\n+            case \"launcher\" -> {\n+                KDC kdc = KDC.create(REALM, HOST, 0, true);\n+                kdc.addPrincipal(USER, PASS);\n+                kdc.addPrincipalRandKey(\"krbtgt\/\" + REALM);\n+                kdc.addPrincipalRandKey(SERVER);\n+                kdc.addPrincipalRandKey(BACKEND);\n+\n+                \/\/ Native lib might do some name lookup\n+                KDC.saveConfig(CONF, kdc,\n+                        \"dns_lookup_kdc = no\",\n+                        \"ticket_lifetime = 1h\",\n+                        \"dns_lookup_realm = no\",\n+                        \"dns_canonicalize_hostname = false\",\n+                        \"forwardable = true\");\n+                System.setProperty(\"java.security.krb5.conf\", CONF);\n+                Config.refresh();\n+\n+                \/\/ Create kaytab and ccache files for native clients\n+                kdc.writeKtab(KTAB_S, false, SERVER);\n+                kdc.writeKtab(KTAB_B, false, BACKEND);\n+                kdc.kinit(USER, \"ccache\");\n+                Files.setPosixFilePermissions(Paths.get(\"ccache\"),\n+                        Set.of(PosixFilePermission.OWNER_READ,\n+                                PosixFilePermission.OWNER_WRITE));\n+\n+                Proc pc = proc(\"client\")\n+                        .env(\"KRB5CCNAME\", \"FILE:ccache\")\n+                        .env(\"KRB5_KTNAME\", \"none\") \/\/ Do not try system ktab if ccache fails\n+                        .start();\n+                Proc ps = proc(\"server\")\n+                        .env(\"KRB5_KTNAME\", KTAB_S)\n+                        .start();\n+                Proc pb = proc(\"backend\")\n+                        .env(\"KRB5_KTNAME\", KTAB_B)\n+                        .start();\n+\n+                \/\/ Client and server\n+                ps.println(pc.readData()); \/\/ AP-REQ\n+                pc.println(ps.readData()); \/\/ AP-REP, mutual auth\n+                ps.println(pc.readData()); \/\/ wrap msg\n+                ps.println(pc.readData()); \/\/ mic msg\n+\n+                \/\/ Server and backend\n+                pb.println(ps.readData()); \/\/ AP-REQ\n+                ps.println(pb.readData()); \/\/ wrap msg\n+                ps.println(pb.readData()); \/\/ mic msg\n+\n+                ensureCleanersCalled(pc);\n+                ensureCleanersCalled(ps);\n+                ensureCleanersCalled(pb);\n+            }\n+            case \"client\" -> {\n+                Context c = Context.fromThinAir();\n+                c.startAsClient(SERVER, oid);\n+                c.x().requestCredDeleg(true);\n+                c.x().requestMutualAuth(true);\n+                Proc.binOut(c.take(new byte[0])); \/\/ AP-REQ\n+                c.take(Proc.binIn()); \/\/ AP-REP\n+                Proc.binOut(c.wrap(MSG, true));\n+                Proc.binOut(c.getMic(MSG));\n+            }\n+            case \"server\" -> {\n+                Context s = Context.fromThinAir();\n+                s.startAsServer(oid);\n+                token = Proc.binIn(); \/\/ AP-REQ\n+                Proc.binOut(s.take(token)); \/\/ AP-REP\n+                msg = s.unwrap(Proc.binIn(), true);\n+                Asserts.assertTrue(Arrays.equals(msg, MSG));\n+                s.verifyMic(Proc.binIn(), msg);\n+                Context s2 = s.delegated();\n+                s2.startAsClient(BACKEND, oid);\n+                s2.x().requestMutualAuth(false);\n+                Proc.binOut(s2.take(new byte[0])); \/\/ AP-REQ\n+                msg = s2.unwrap(Proc.binIn(), true);\n+                Asserts.assertTrue(Arrays.equals(msg, MSG));\n+                s2.verifyMic(Proc.binIn(), msg);\n+            }\n+            case \"backend\" -> {\n+                Context b = Context.fromThinAir();\n+                b.startAsServer(oid);\n+                token = b.take(Proc.binIn()); \/\/ AP-REQ\n+                Asserts.assertTrue(token == null);\n+                Proc.binOut(b.wrap(MSG, true));\n+                Proc.binOut(b.getMic(MSG));\n+            }\n+        }\n+        System.out.println(\"Prepare for GC\");\n+        for (int i = 0; i < 10; i++) {\n+            System.gc();\n+            Thread.sleep(100);\n+        }\n+    }\n+\n+    private static void ensureCleanersCalled(Proc p) throws Exception {\n+        p.output()\n+                .shouldHaveExitValue(0)\n+                .stdoutShouldMatch(\"Prepare for GC(.|\\\\n)*GSSLibStub_deleteContext\")\n+                .stdoutShouldMatch(\"Prepare for GC(.|\\\\n)*GSSLibStub_releaseName\")\n+                .stdoutShouldMatch(\"Prepare for GC(.|\\\\n)*GSSLibStub_releaseCred\");\n+    }\n+\n+    private static Proc proc(String type) throws Exception {\n+        return Proc.create(\"Cleaners\")\n+                .args(type)\n+                .debug(type)\n+                .env(\"KRB5_CONFIG\", CONF)\n+                .env(\"KRB5_TRACE\", \"\/dev\/stderr\")\n+                .prop(\"sun.security.jgss.native\", \"true\")\n+                .prop(\"javax.security.auth.useSubjectCredsOnly\", \"false\")\n+                .prop(\"sun.security.nativegss.debug\", \"true\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/Cleaners.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,1 @@\n+    private final StringBuilder stdout = new StringBuilder();\n@@ -361,0 +362,3 @@\n+        if (s != null) {\n+            stdout.append(s).append('\\n');\n+        }\n@@ -405,0 +409,10 @@\n+\n+    \/\/ Returns an OutputAnalyzer\n+    public OutputAnalyzer output() throws Exception {\n+        int exitCode = waitFor();\n+        Path stderr = Path.of(getId(\"stderr\"));\n+        return new OutputAnalyzer(stdout.toString(),\n+                Files.exists(stderr) ? Files.readString(stderr) : \"\",\n+                exitCode);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/Proc.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}