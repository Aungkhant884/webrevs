{"files":[{"patch":"@@ -233,1 +233,1 @@\n-     * @param s           ths Symbol on which to enter the annotations\n+     * @param s           the Symbol on which to enter the annotations\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3340,1 +3340,1 @@\n-        \/* the optional could be emtpy if the annotation is unknown in that case\n+        \/* the optional could be empty if the annotation is unknown in that case\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1124,1 +1124,1 @@\n-     * we get this ouput (singleton list):\n+     * we get this output (singleton list):\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-     * Sentinal for non-value.\n+     * Sentinel for non-value.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavaTokenizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-                throw new AssertionError(\"Cant split\" + kind);\n+                throw new AssertionError(\"Can't split\" + kind);\n@@ -329,1 +329,1 @@\n-                throw new AssertionError(\"Cant split - bad subtokens\");\n+                throw new AssertionError(\"Can't split - bad subtokens\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/Tokens.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-     * Skip over all occurances of character.\n+     * Skip over all occurrences of character.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/UnicodeReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-             * dependant nodes grouped by kind\n+             * dependent nodes grouped by kind\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Dependencies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-    public static <I, O> Iterator<O> createCompoundIterator(Iterable<I> inputs, Function<I, Iterator<O>> convertor) {\n-        return new CompoundIterator<>(inputs, convertor);\n+    public static <I, O> Iterator<O> createCompoundIterator(Iterable<I> inputs, Function<I, Iterator<O>> converter) {\n+        return new CompoundIterator<>(inputs, converter);\n@@ -49,1 +49,1 @@\n-        private final Function<I, Iterator<O>> convertor;\n+        private final Function<I, Iterator<O>> converter;\n@@ -53,1 +53,1 @@\n-        public CompoundIterator(Iterable<I> inputs, Function<I, Iterator<O>> convertor) {\n+        public CompoundIterator(Iterable<I> inputs, Function<I, Iterator<O>> converter) {\n@@ -55,1 +55,1 @@\n-            this.convertor = convertor;\n+            this.converter = converter;\n@@ -78,1 +78,1 @@\n-                currentIterator = convertor.apply(inputs.next());\n+                currentIterator = converter.apply(inputs.next());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Iterators.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -273,2 +273,2 @@\n-            b.append(\"# D S dependant -> source dependency\\n\");\n-            b.append(\"# D C dependant -> classpath dependency\\n\");\n+            b.append(\"# D S dependent -> source dependency\\n\");\n+            b.append(\"# D C dependent -> classpath dependency\\n\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/sjavac\/JavacState.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-        \/\/ TODO: or should we use null? Noone will use this object.\n+        \/\/ TODO: or should we use null? No one will use this object.\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/classfile\/TypeAnnotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}