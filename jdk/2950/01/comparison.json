{"files":[{"patch":"@@ -302,1 +302,1 @@\n-    EXCEPTION_MARK;\n+    ExceptionMark em(THREAD);\n@@ -1146,1 +1146,1 @@\n-    EXCEPTION_MARK;\n+    ExceptionMark em(THREAD);\n@@ -1173,1 +1173,1 @@\n-    EXCEPTION_MARK;\n+    ExceptionMark em(THREAD);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2385,1 +2385,1 @@\n-      EXCEPTION_MARK;\n+      ExceptionMark em(THREAD);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -478,1 +478,0 @@\n-    EXCEPTION_MARK;\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -606,1 +606,2 @@\n-      EXCEPTION_MARK;\n+      ExceptionMark em(thread);\n+      Thread* THREAD = thread; \/\/ For exception macros.\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2135,2 +2135,2 @@\n-void SharedRuntime::monitor_exit_helper(oopDesc* obj, BasicLock* lock, JavaThread* thread) {\n-  assert(JavaThread::current() == thread, \"invariant\");\n+void SharedRuntime::monitor_exit_helper(oopDesc* obj, BasicLock* lock, JavaThread* current) {\n+  assert(JavaThread::current() == current, \"invariant\");\n@@ -2138,1 +2138,1 @@\n-  EXCEPTION_MARK;\n+  ExceptionMark em(current);\n@@ -2147,1 +2147,1 @@\n-  ObjectSynchronizer::exit(obj, lock, thread);\n+  ObjectSynchronizer::exit(obj, lock, current);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-  static void monitor_exit_helper(oopDesc* obj, BasicLock* lock, JavaThread* thread);\n+  static void monitor_exit_helper(oopDesc* obj, BasicLock* lock, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,3 +502,12 @@\n-ExceptionMark::ExceptionMark(Thread*& thread) {\n-  thread     = Thread::current();\n-  _thread    = thread;\n+ExceptionMark::ExceptionMark(Thread* thread) {\n+  assert(thread == Thread::current(), \"must be\");\n+  _thread  = thread;\n+  check_no_pending_exception();\n+}\n+\n+ExceptionMark::ExceptionMark() {\n+  _thread = Thread::current();\n+  check_no_pending_exception();\n+}\n+\n+inline void ExceptionMark::check_no_pending_exception() {\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -334,0 +334,1 @@\n+  inline void check_no_pending_exception();\n@@ -336,1 +337,2 @@\n-  ExceptionMark(Thread*& thread);\n+  ExceptionMark();\n+  ExceptionMark(Thread* thread);\n@@ -338,2 +340,0 @@\n-};\n-\n@@ -341,0 +341,4 @@\n+  Thread* thread() {\n+    return _thread;\n+  }\n+};\n@@ -350,1 +354,1 @@\n-#define EXCEPTION_MARK                           Thread* THREAD = NULL; ExceptionMark __em(THREAD);\n+#define EXCEPTION_MARK                           ExceptionMark __em; Thread* THREAD = __em.thread();\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}