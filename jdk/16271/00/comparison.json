{"files":[{"patch":"@@ -1372,1 +1372,3 @@\n-                    if (node.getName().toString().matches(\"(?i)h[1-6]\")) {\n+                    if (node.getName().toString().matches(\"(?i)h[1-6]\")\n+                            && !(HtmlDocletWriter.this instanceof IndexWriter)\n+                            && !(HtmlDocletWriter.this instanceof SummaryListWriter<?>)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.IndexWriter;\n+import jdk.javadoc.internal.doclets.formats.html.SummaryListWriter;\n@@ -373,1 +375,4 @@\n-        if (context.isFirstSentence && context.inSummary || context.inTags.contains(DocTree.Kind.INDEX)) {\n+        if (context.isFirstSentence && context.inSummary\n+                || context.inTags.contains(DocTree.Kind.INDEX)\n+                || htmlWriter instanceof IndexWriter\n+                || htmlWriter instanceof SummaryListWriter<?>) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/TagletWriter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+\/*\n+ * @test\n+ * @bug 8318082\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestSelfIndexing\n+ *\/\n+public class TestSelfIndexing extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestSelfIndexing().runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    \/*\n+     * Pages derived from other pages must not be indexed and may not\n+     * cross-reference each other except for navigation ergonomics.\n+     *\n+     * For example, it's okay for all-index.html to reference deprecated-list.html;\n+     * but it is not okay, for all-index.html to reference an anchor, such as\n+     * deprecated-list.html#java.lang.Object.finalize()\n+     *\/\n+    @Test\n+    public void test(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        int i = 0;\n+        \/\/ try to start a search tag (i) with the same letter, H,\n+        \/\/ as the class, Hello, and (ii) with some other letter, P\n+        for (var l : List.of(\"H\", \"P\")) {\n+            \/\/ try all markup constructs that cause indexing\n+            for (var t : List.of(\"<h2>%s<\/h2>\", \"{@index %s}\", \"{@systemProperty %s}\")) {\n+                tb.writeJavaFiles(src, \"\"\"\n+                        package pkg;\n+\n+                        \/** @deprecated %s *\/\n+                        public class Hello { }\n+                        \"\"\".formatted(t.formatted(l)));\n+\n+                Path out = base.resolve(\"out-\" + i);\n+                checking(t.formatted(l) + \"; results in: \" + out);\n+                setAutomaticCheckNoStacktrace(true); \/\/ no exceptions\n+                javadoc(\"-d\", out.toString(),\n+                        \"--source-path\", src.toString(),\n+                        \"pkg\");\n+                \/\/ check that index pages do not refer to derived pages\n+                try (var s = findIndexFiles(out)) {\n+                    record PathAndString(Path path, String str) { }\n+                    Optional<PathAndString> r = s.map(p -> {\n+                                try {\n+                                    return new PathAndString(p, Files.readString(p));\n+                                } catch (IOException e) {\n+                                    throw new UncheckedIOException(e);\n+                                }\n+                            })\n+                            .flatMap(pac -> findLinksToDerivedPages(pac.str)\n+                                    .map(link -> new PathAndString(pac.path, link)))\n+                            .findAny();\n+                    r.ifPresentOrElse(p -> failed(p.toString()), () -> passed(t.formatted(l)));\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    \/\/ ----------- support and infrastructure -----------\n+\n+    private static Stream<Path> findIndexFiles(Path start) throws IOException {\n+        return Files.find(start, Integer.MAX_VALUE, (path, attr) -> {\n+            if (attr.isDirectory())\n+                return false;\n+            var fileName = path.getFileName().toString();\n+            if (!fileName.endsWith(\".html\") && !fileName.endsWith(\".js\"))\n+                return false;\n+            if (!fileName.contains(\"-index\") && !fileName.contains(\"index-\"))\n+                return false;\n+            var underDocFiles = StreamSupport.stream(Spliterators.spliterator(path.iterator(),\n+                            Integer.MAX_VALUE, Spliterator.ORDERED), false)\n+                    .anyMatch(p -> p.equals(DOC_FILES));\n+            return !underDocFiles;\n+        });\n+    }\n+\n+    private static final Path DOC_FILES = Path.of(\"doc-files\");\n+\n+    \/\/ good enough to capture relevant parts of URLs that javadoc uses,\n+    \/\/ from html and js files alike\n+    private static final Pattern URL = Pattern.compile(\n+            \"(?<path>([a-zA-Z.%0-9-]+\/)*+)(?<file>[a-zA-Z.%0-9-]+\\\\.html)#[a-zA-Z.%0-9-]+\");\n+\n+    static {\n+        assert findLinksToDerivedPages(\"module-summary.html#a\").findAny().isEmpty();\n+        assert findLinksToDerivedPages(\"package-summary.html#a\").findAny().isEmpty();\n+        assert findLinksToDerivedPages(\"Exception.html#a\").findAny().isEmpty();\n+        assert findLinksToDerivedPages(\"util\/doc-files\/coll-index.html#a\").findAny().isEmpty();\n+        assert findLinksToDerivedPages(\"util\/doc-files\/index-all.html#a\").findAny().isEmpty(); \/\/ tricky\n+\n+\n+        assert findLinksToDerivedPages(\"index-all.html#a\").findAny().isPresent();\n+        assert findLinksToDerivedPages(\"index-17.html#a\").findAny().isPresent();\n+    }\n+\n+    \/\/ NOTE: this will not find self-links that are allowed on some index pages.\n+    \/\/ For example, the quick-jump first-character links, such as #I:A,\n+    \/\/ #I:B, etc., on the top and at the bottom of index-all.html\n+    private static Stream<String> findLinksToDerivedPages(String content) {\n+        return URL.matcher(content).results()\n+                .filter(r -> {\n+                    String f = r.group(\"file\");\n+                    switch (f) {\n+                        case \"index-all.html\", \"deprecated-list.html\", \"overview-tree.html\",\n+                                \"package-use.html\", \"package-tree.html\", \"preview-list.html\",\n+                                \"new-list.html\", \"allclasses-index.html\", \"allpackages-index.html\",\n+                                \"constant-values.html\", \"system-properties.html\", \"serialized-form.html\"\n+                                -> { \/* nothing to do *\/}\n+                        default -> {\n+                            if (!f.matches(\"index-\\\\d+.html\"))\n+                                return false;\n+                        }\n+                    }\n+                    String p = r.group(\"path\");\n+                    return !p.contains(\"\/doc-files\/\") && !p.startsWith(\"doc-files\/\");\n+                })\n+                .map(r -> r.group(0));\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndex\/TestSelfIndexing.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n- *      8266808 8248863 8305710\n+ *      8266808 8248863 8305710 8318082\n@@ -506,8 +506,0 @@\n-        checkOutput(\"index-all.html\", true,\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">class_test1 passes. Search tag <span id=\"Search\\\n-                    TagDeprecatedClass\" class=\"search-tag-result\">SearchTagDeprecatedClass<\/span><\/d\\\n-                    iv>\"\"\",\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">error_test3 passes. Search tag for\n-                     method <span id=\"SearchTagDeprecatedMethod\" class=\"search-tag-result\">SearchTagDeprecatedMethod<\/span><\/div>\"\"\");\n@@ -624,7 +616,1 @@\n-                    Word<\/a> - Search tag in package pkg<\/dt>\"\"\",\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">class_test1 passes. Search tag <span id=\"Search\\\n-                    TagDeprecatedClass\">SearchTagDeprecatedClass<\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">error_test3 passes. Search tag for\n-                     method <span id=\"SearchTagDeprecatedMethod\">SearchTagDeprecatedMethod<\/span><\/div>\"\"\");\n+                    Word<\/a> - Search tag in package pkg<\/dt>\"\"\");\n@@ -668,7 +654,1 @@\n-                    nk\">SearchTagDeprecatedMethod<\/a> - Search tag in pkg2.TestError.TestError()<\/dt>\"\"\",\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">class_test1 passes. Search tag <span id=\"Search\\\n-                    TagDeprecatedClass\">SearchTagDeprecatedClass<\/span><\/div>\"\"\",\n-                \"\"\"\n-                    <div class=\"deprecation-comment\">error_test3 passes. Search tag for\n-                     method <span id=\"SearchTagDeprecatedMethod\">SearchTagDeprecatedMethod<\/span><\/div>\"\"\");\n+                    nk\">SearchTagDeprecatedMethod<\/a> - Search tag in pkg2.TestError.TestError()<\/dt>\"\"\");\n@@ -842,2 +822,0 @@\n-                \"\"\"\n-                    {\"l\":\"search phrase deprecated\",\"h\":\"pkg2.TestEnum.ONE\",\"u\":\"deprecated-list.html#searchphrasedeprecated\"}\"\"\",\n@@ -846,2 +824,0 @@\n-                \"\"\"\n-                    {\"l\":\"search phrase with desc deprecated\",\"h\":\"annotation interface pkg2.TestAnnotationType\",\"d\":\"description for phrase deprecated\",\"u\":\"deprecated-list.html#searchphrasewithdescdeprecated\"}\"\"\",\n@@ -850,2 +826,0 @@\n-                \"\"\"\n-                    {\"l\":\"SearchTagDeprecatedClass\",\"h\":\"class pkg2.TestClass\",\"u\":\"deprecated-list.html#SearchTagDeprecatedClass\"}\"\"\",\n@@ -854,2 +828,0 @@\n-                \"\"\"\n-                    {\"l\":\"SearchTagDeprecatedMethod\",\"h\":\"pkg2.TestError.TestError()\",\"d\":\"with description\",\"u\":\"deprecated-list.html#SearchTagDeprecatedMethod\"}\"\"\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSearch\/TestSearch.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"}]}