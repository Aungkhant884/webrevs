{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n-\n@@ -30,1 +28,0 @@\n-import javax.xml.transform.TransformerFactoryConfigurationError;\n@@ -32,0 +29,1 @@\n+import static jaxp.library.JAXPTestUtilities.runWithAllPerm;\n@@ -49,11 +47,5 @@\n-        try {\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n-            if (Bug6350682.class.getClassLoader() == null)\n-                System.out.println(\"this class loader is NULL\");\n-            else\n-                System.out.println(\"this class loader is NOT NULL\");\n-            SAXParserFactory factory = SAXParserFactory.newInstance();\n-            Assert.assertTrue(factory != null, \"Failed to get an instance of a SAXParserFactory\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Assert.fail(\"Exception occured: \" + e.getMessage());\n+        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        if (Bug6350682.class.getClassLoader() == null) {\n+            System.out.println(\"this class loader is NULL\");\n+        } else {\n+            System.out.println(\"this class loader is NOT NULL\");\n@@ -61,0 +53,2 @@\n+        SAXParserFactory factory = SAXParserFactory.newInstance();\n+        Assert.assertNotNull(factory, \"Failed to get an instance of a SAXParserFactory\");\n@@ -65,11 +59,3 @@\n-        try {\n-            runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n-            TransformerFactory factory = TransformerFactory.newInstance();\n-            Assert.assertTrue(factory != null, \"Failed to get an instance of a TransformerFactory\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            Assert.fail(\"Exception occured: \" + e.getMessage());\n-        } catch (TransformerFactoryConfigurationError error) {\n-            error.printStackTrace();\n-            Assert.fail(error.toString());\n-        }\n+        runWithAllPerm(() -> Thread.currentThread().setContextClassLoader(null));\n+        TransformerFactory factory = TransformerFactory.newInstance();\n+        Assert.assertNotNull(factory, \"Failed to get an instance of a TransformerFactory\");\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug6350682.java","additions":12,"deletions":26,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import org.testng.annotations.Listeners;\n-import org.testng.annotations.Test;\n-import org.testng.Assert;\n@@ -34,0 +31,4 @@\n+import org.testng.Assert;\n+import org.testng.annotations.Listeners;\n+import org.testng.annotations.Test;\n+\n@@ -44,0 +45,1 @@\n+    private static final String ERR_MSG = \"org.apache.xerces.jaxp.SAXParserFactoryImpl not found\";\n@@ -46,1 +48,1 @@\n-    public void test1() {\n+    public void testSAXParserFactoryCreationWithDefaultContextClassLoader() {\n@@ -50,1 +52,1 @@\n-            if (e.getMessage().indexOf(\"org.apache.xerces.jaxp.SAXParserFactoryImpl not found\") > 0) {\n+            if (e.getMessage().contains(ERR_MSG)) {\n@@ -57,1 +59,1 @@\n-    public void test2() {\n+    public void testSAXParserFactoryCreationWithGivenURLContextClassLoader() {\n@@ -64,1 +66,1 @@\n-            if (e.getMessage().indexOf(\"org.apache.xerces.jaxp.SAXParserFactoryImpl not found\") > 0) {\n+            if (e.getMessage().contains(ERR_MSG)) {\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug6723276Test.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,5 +26,3 @@\n-import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n-import static jaxp.library.JAXPTestUtilities.getSystemProperty;\n-import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n-\n-import java.io.FilePermission;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n@@ -38,0 +36,1 @@\n+import javax.xml.transform.TransformerException;\n@@ -47,0 +46,1 @@\n+import javax.xml.xpath.XPathExpressionException;\n@@ -48,0 +48,1 @@\n+import javax.xml.xpath.XPathFactoryConfigurationException;\n@@ -49,2 +50,2 @@\n-import jaxp.library.JAXPTestUtilities;\n-\n+import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n+import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n@@ -56,0 +57,1 @@\n+import org.xml.sax.SAXException;\n@@ -68,2 +70,2 @@\n-    static final String SCHEMA_LANGUAGE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\";\n-    static final String SCHEMA_SOURCE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaSource\";\n+    private static final String SCHEMA_LANGUAGE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\";\n+    private static final String SCHEMA_SOURCE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaSource\";\n@@ -73,0 +75,2 @@\n+    private static final String SAX_FACTORY_IMP = \"MySAXFactoryImpl\";\n+    private static final String DOM_FACTORY_IMP = \"MyDOMFactoryImpl\";\n@@ -75,1 +79,1 @@\n-    final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n+    private static final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n@@ -77,2 +81,4 @@\n-    static String _xml = Bug6941169Test.class.getResource(\"Bug6941169.xml\").getPath();\n-    static String _xsd = Bug6941169Test.class.getResource(\"Bug6941169.xsd\").getPath();\n+    private static final String _XML = Bug6941169Test.class.getResource(\"Bug6941169.xml\").getPath();\n+    private static final String _XSD = Bug6941169Test.class.getResource(\"Bug6941169.xsd\").getPath();\n+    private static final String FACT_CONF_ERR_MSG = \"javax.xml.parsers.FactoryConfigurationError: Provider MySAXFactoryImpl not found\";\n+    private static final String DOM_FACT_ERR_MSG = \"Provider MyDOMFactoryImpl not found\";\n@@ -81,1 +87,1 @@\n-    public void testValidation_SAX_withoutServiceMech() {\n+    public void testValidation_SAX_withoutServiceMech() throws FileNotFoundException {\n@@ -83,1 +89,1 @@\n-        InputSource is = new InputSource(Bug6941169Test.class.getResourceAsStream(\"Bug6941169.xml\"));\n+        InputSource is = new InputSource(new FileInputStream(_XML));\n@@ -85,1 +91,1 @@\n-        setSystemProperty(SAX_FACTORY_ID, \"MySAXFactoryImpl\");\n+        setSystemProperty(SAX_FACTORY_ID, SAX_FACTORY_IMP);\n@@ -88,5 +94,1 @@\n-            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            factory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, false);\n-            Schema schema = factory.newSchema(new StreamSource(_xsd));\n-            Validator validator = schema.newValidator();\n-            validator.validate(ss, null);\n+            saxValidator(ss, true);\n@@ -94,10 +96,3 @@\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"javax.xml.parsers.FactoryConfigurationError: Provider MySAXFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+            domSaxErrorHandler(e, FACT_CONF_ERR_MSG, \"Default impl is used\");\n+        } finally {\n+            clearSystemProperty(SAX_FACTORY_ID);\n@@ -105,4 +100,1 @@\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(SAX_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -116,1 +108,1 @@\n-        setSystemProperty(SAX_FACTORY_ID, \"MySAXFactoryImpl\");\n+        setSystemProperty(SAX_FACTORY_ID, SAX_FACTORY_IMP);\n@@ -119,4 +111,1 @@\n-            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            Schema schema = factory.newSchema(new StreamSource(_xsd));\n-            Validator validator = schema.newValidator();\n-            validator.validate(ss, null);\n+            saxValidator(ss, false);\n@@ -126,1 +115,1 @@\n-            if (error.indexOf(\"javax.xml.parsers.FactoryConfigurationError: Provider MySAXFactoryImpl not found\") > 0) {\n+            if (error.contains(FACT_CONF_ERR_MSG)) {\n@@ -129,2 +118,2 @@\n-            \/\/ System.out.println(e.getMessage());\n-\n+        } finally {\n+            clearSystemProperty(SAX_FACTORY_ID);\n@@ -132,4 +121,1 @@\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(SAX_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -140,1 +126,1 @@\n-        if(System.getSecurityManager() == null)\n+        if(System.getSecurityManager() == null) {\n@@ -142,1 +128,1 @@\n-\n+        }\n@@ -146,2 +132,1 @@\n-        setSystemProperty(SAX_FACTORY_ID, \"MySAXFactoryImpl\");\n-\n+        setSystemProperty(SAX_FACTORY_ID, SAX_FACTORY_IMP);\n@@ -150,5 +135,1 @@\n-            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-            factory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, false);\n-            Schema schema = factory.newSchema(new StreamSource(_xsd));\n-            Validator validator = schema.newValidator();\n-            validator.validate(ss, null);\n+            saxValidator(ss, false);\n@@ -156,9 +137,1 @@\n-            String error = e.getMessage();\n-            if (error.indexOf(\"javax.xml.parsers.FactoryConfigurationError: Provider MySAXFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+            domSaxErrorHandler(e, FACT_CONF_ERR_MSG, \"Default impl is used\");\n@@ -168,4 +141,1 @@\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-\n+        testExecutionTime(start);\n@@ -177,6 +147,2 @@\n-        DOMSource domSource = new DOMSource();\n-        domSource.setSystemId(_xml);\n-\n-        \/\/ DOMSource domSource = new\n-        \/\/ DOMSource(getDocument(Bug6941169Test.class.getResourceAsStream(\"Bug6941169.xml\")));\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        DOMSource domSource = new DOMSource(getDocument(Bug6941169Test.class.getResourceAsStream(\"Bug6941169.xml\")));\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -195,12 +161,1 @@\n-        } catch (Exception e) {\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n-        } catch (Error e) {\n+        } catch (Exception | Error e) {\n@@ -208,9 +163,3 @@\n-            String error = e.getMessage();\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+            domSaxErrorHandler(e, DOM_FACT_ERR_MSG, \"Default impl is used\");\n+        } finally {\n+            clearSystemProperty(DOM_FACTORY_ID);\n@@ -218,5 +167,1 @@\n-\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(DOM_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -230,5 +175,2 @@\n-        domSource.setSystemId(_xml);\n-\n-        \/\/ DOMSource domSource = new\n-        \/\/ DOMSource(getDocument(Bug6941169Test.class.getResourceAsStream(\"Bug6941169.xml\")));\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        domSource.setSystemId(_XML);\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -238,7 +180,1 @@\n-            Transformer t = factory.newTransformer();\n-\n-            StringWriter result = new StringWriter();\n-            StreamResult streamResult = new StreamResult(result);\n-            t.transform(domSource, streamResult);\n-            System.out.println(\"Writing to \" + result.toString());\n-\n+            domTransformer(domSource, factory);\n@@ -246,9 +182,1 @@\n-\n-        } catch (Exception e) {\n-            String error = e.getMessage();\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n-                \/\/ expected\n-            }\n-            System.out.println(error);\n-\n-        } catch (Error e) {\n+        } catch (Exception | Error e) {\n@@ -256,1 +184,1 @@\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n+            if (error.contains(DOM_FACT_ERR_MSG)) {\n@@ -260,1 +188,2 @@\n-\n+        } finally {\n+            clearSystemProperty(DOM_FACTORY_ID);\n@@ -262,5 +191,1 @@\n-\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(DOM_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -270,1 +195,1 @@\n-    public void testTransform_DOM_withSM() throws Exception {\n+    public void testTransform_DOM_withSM() {\n@@ -275,5 +200,2 @@\n-        domSource.setSystemId(_xml);\n-\n-        \/\/ DOMSource domSource = new\n-        \/\/ DOMSource(getDocument(Bug6941169Test.class.getResourceAsStream(\"Bug6941169.xml\")));\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        domSource.setSystemId(_XML);\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -284,27 +206,3 @@\n-            Transformer t = factory.newTransformer();\n-\n-            StringWriter result = new StringWriter();\n-            StreamResult streamResult = new StreamResult(result);\n-            t.transform(domSource, streamResult);\n-            System.out.println(\"Writing to \" + result.toString());\n-\n-        } catch (Exception e) {\n-            String error = e.getMessage();\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n-        } catch (Error e) {\n-            String error = e.getMessage();\n-            if (error.indexOf(\"Provider MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+            domTransformer(domSource, factory);\n+        } catch (Exception | Error e) {\n+            domSaxErrorHandler(e, DOM_FACT_ERR_MSG, \"Default impl is used\");\n@@ -314,4 +212,1 @@\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-\n+        testExecutionTime(start);\n@@ -325,1 +220,1 @@\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -329,18 +224,2 @@\n-            xPathFactory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, false);\n-\n-            XPath xPath = xPathFactory.newXPath();\n-\n-            String xPathResult = xPath.evaluate(XPATH_EXPRESSION, doc);\n-\n-        } catch (Exception e) {\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n-        } catch (Error e) {\n+            xPathEvaluator(XPATH_EXPRESSION, doc, xPathFactory, true, null);\n+        } catch (Exception | Error e) {\n@@ -348,9 +227,3 @@\n-            String error = e.getMessage();\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl is used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+            domSaxErrorHandler(e, DOM_FACT_ERR_MSG, \"Default impl is used\");\n+        } finally {\n+            clearSystemProperty(DOM_FACTORY_ID);\n@@ -358,5 +231,1 @@\n-\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(DOM_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -379,1 +248,1 @@\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -383,4 +252,1 @@\n-\n-            XPath xPath = xPathFactory.newXPath();\n-\n-            String xPathResult = xPath.evaluate(XPATH_EXPRESSION, source);\n+            xPathEvaluator(XPATH_EXPRESSION, null, xPathFactory, false, source);\n@@ -388,14 +254,1 @@\n-\n-        } catch (Exception e) {\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n-                System.out.println(\"Tried to locate MyDOMFactoryImpl\");\n-            } else {\n-                Assert.fail(e.getMessage());\n-\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n-        } catch (Error e) {\n+        } catch (Exception  | Error e) {\n@@ -404,1 +257,1 @@\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n+            if (error.contains(DOM_FACT_ERR_MSG)) {\n@@ -408,1 +261,0 @@\n-\n@@ -410,3 +262,2 @@\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+        } finally {\n+            clearSystemProperty(DOM_FACTORY_ID);\n@@ -414,5 +265,1 @@\n-\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-        clearSystemProperty(DOM_FACTORY_ID);\n+        testExecutionTime(start);\n@@ -429,1 +276,1 @@\n-        setSystemProperty(DOM_FACTORY_ID, \"MyDOMFactoryImpl\");\n+        setSystemProperty(DOM_FACTORY_ID, DOM_FACTORY_IMP);\n@@ -434,4 +281,1 @@\n-\n-            XPath xPath = xPathFactory.newXPath();\n-\n-            String xPathResult = xPath.evaluate(XPATH_EXPRESSION, source);\n+            xPathEvaluator(XPATH_EXPRESSION, null, xPathFactory, false, source);\n@@ -439,22 +283,2 @@\n-        } catch (Exception e) {\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl should be used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n-        } catch (Error e) {\n-            \/\/ e.printStackTrace();\n-            String error = e.getMessage();\n-            if (error.indexOf(\"MyDOMFactoryImpl not found\") > 0) {\n-                Assert.fail(e.getMessage());\n-            } else {\n-                System.out.println(\"Default impl should be used\");\n-            }\n-\n-            \/\/ System.out.println(e.getMessage());\n-\n+        } catch (Exception | Error e) {\n+            domSaxErrorHandler(e, DOM_FACT_ERR_MSG, \"Default impl should be used\");\n@@ -464,4 +288,1 @@\n-        long end = System.currentTimeMillis();\n-        double elapsedTime = ((end - start));\n-        System.out.println(\"Time elapsed: \" + elapsedTime);\n-\n+        testExecutionTime(start);\n@@ -480,1 +301,8 @@\n-    private static Document getDocument(InputStream in) {\n+    private void domSaxErrorHandler(Throwable e, String domFactErrMsg, String s) {\n+        String error = e.getMessage();\n+        if (error.contains(domFactErrMsg)) {\n+            Assert.fail(e.getMessage());\n+        } else {\n+            System.out.println(s);\n+        }\n+    }\n@@ -482,1 +310,9 @@\n-        Document document = null;\n+    private void saxValidator(SAXSource ss, boolean setFeature) throws SAXException, IOException {\n+        SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        if(setFeature) {\n+            factory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, false);\n+        }\n+        Schema schema = factory.newSchema(new StreamSource(_XSD));\n+        Validator validator = schema.newValidator();\n+        validator.validate(ss, null);\n+    }\n@@ -484,0 +320,30 @@\n+    private void xPathEvaluator(String XPATH_EXPRESSION, Document doc, XPathFactory xPathFactory, boolean setFeature, InputSource source) throws\n+            XPathFactoryConfigurationException, XPathExpressionException {\n+        if(setFeature) {\n+            xPathFactory.setFeature(ORACLE_FEATURE_SERVICE_MECHANISM, false);\n+        }\n+        XPath xPath = xPathFactory.newXPath();\n+        String xPathResult;\n+        if(doc != null) {\n+            xPathResult = xPath.evaluate(XPATH_EXPRESSION, doc);\n+        } else {\n+            xPathResult = xPath.evaluate(XPATH_EXPRESSION, source);\n+        }\n+    }\n+\n+    private void testExecutionTime(long start) {\n+        long end = System.currentTimeMillis();\n+        double elapsedTime = ((end - start));\n+        System.out.println(\"Time elapsed: \" + elapsedTime + \" milli seconds\");\n+    }\n+\n+    private void domTransformer(DOMSource domSource, TransformerFactory factory) throws TransformerException {\n+        Transformer t = factory.newTransformer();\n+        StringWriter result = new StringWriter();\n+        StreamResult streamResult = new StreamResult(result);\n+        t.transform(domSource, streamResult);\n+        System.out.println(\"Writing to \" + result.toString());\n+    }\n+\n+    private static Document getDocument(InputStream in) {\n+        Document document = null;\n@@ -493,1 +359,0 @@\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug6941169Test.java","additions":126,"deletions":261,"binary":false,"changes":387,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n-import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n-\n@@ -34,0 +31,2 @@\n+import static jaxp.library.JAXPTestUtilities.clearSystemProperty;\n+import static jaxp.library.JAXPTestUtilities.setSystemProperty;\n@@ -48,2 +47,2 @@\n-    static final String SCHEMA_LANGUAGE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\";\n-    static final String SCHEMA_SOURCE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaSource\";\n+    private static final String SCHEMA_LANGUAGE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaLanguage\";\n+    private static final String SCHEMA_SOURCE = \"http:\/\/java.sun.com\/xml\/jaxp\/properties\/schemaSource\";\n@@ -55,1 +54,1 @@\n-    final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n+    private static final String ORACLE_FEATURE_SERVICE_MECHANISM = \"http:\/\/www.oracle.com\/feature\/use-service-mechanism\";\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/Bug7143711Test.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.testng.annotations.BeforeClass;\n@@ -47,0 +48,5 @@\n+    @BeforeClass\n+    public void createDataTypeFactory() throws DatatypeConfigurationException {\n+        df = DatatypeFactory.newInstance();\n+    }\n+\n@@ -49,11 +55,5 @@\n-        try {\n-            df = DatatypeFactory.newInstance();\n-        } catch (DatatypeConfigurationException e) {\n-            Assert.fail(e.getMessage());\n-        }\n-\n-        try {\n-            XMLGregorianCalendar calendar = df.newXMLGregorianCalendar(1970, 1, 1, 24, 0, 0, 0, 0);\n-        } catch (IllegalArgumentException e) {\n-            Assert.fail(e.getMessage());\n-        }\n+        XMLGregorianCalendar calendar = df.newXMLGregorianCalendar(1970, 1, 1, 24, 0, 0, 0, 0);\n+        Assert.assertEquals(calendar.getYear(), 1970);\n+        Assert.assertEquals(calendar.getMonth(), 1);\n+        Assert.assertEquals(calendar.getDay(), 2);\n+        Assert.assertEquals(calendar.getHour(), 0, \"hour 24 needs to be treated as hour 0 of next day\");\n@@ -64,11 +64,2 @@\n-        try {\n-            df = DatatypeFactory.newInstance();\n-        } catch (DatatypeConfigurationException e) {\n-            Assert.fail(e.getMessage());\n-        }\n-\n-        try {\n-            XMLGregorianCalendar calendar = df.newXMLGregorianCalendarTime(24, 0, 0, 0);\n-        } catch (IllegalArgumentException e) {\n-            Assert.fail(e.getMessage());\n-        }\n+        XMLGregorianCalendar calendar = df.newXMLGregorianCalendarTime(24, 0, 0, 0);\n+        Assert.assertEquals(calendar.getHour(), 0, \"hour 24 needs to be treated as hour 0 of next day\");\n@@ -77,1 +68,1 @@\n-    @Test\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n@@ -79,13 +70,3 @@\n-        try {\n-            df = DatatypeFactory.newInstance();\n-        } catch (DatatypeConfigurationException e) {\n-            Assert.fail(e.getMessage());\n-        }\n-        try {\n-            XMLGregorianCalendar calendar = df.newXMLGregorianCalendar();\n-            \/\/ Must fail as other params are not 0 but undefined\n-            calendar.setHour(24);\n-            Assert.fail(\"test3() - Expected IllegalArgumentException not thrown\");\n-        } catch (IllegalArgumentException e) {\n-            \/\/ falls through\n-        }\n+        XMLGregorianCalendar calendar = df.newXMLGregorianCalendar();\n+        \/\/ Must fail as other params are not 0 but undefined\n+        calendar.setHour(24);\n@@ -96,12 +77,3 @@\n-        try {\n-            df = DatatypeFactory.newInstance();\n-        } catch (DatatypeConfigurationException e) {\n-            Assert.fail(e.getMessage());\n-        }\n-\n-        try {\n-            XMLGregorianCalendar calendar = df.newXMLGregorianCalendar();\n-            calendar.setTime(24, 0, 0, 0);\n-        } catch (IllegalArgumentException e) {\n-            Assert.fail(e.getMessage());\n-        }\n+        XMLGregorianCalendar calendar = df.newXMLGregorianCalendar();\n+        calendar.setTime(24, 0, 0, 0);\n+        Assert.assertEquals(calendar.getHour(), 0, \"hour 24 needs to be treated as hour 0 of next day\");\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug6320118.java","additions":20,"deletions":48,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -59,1 +60,1 @@\n-    static final DatatypeConstants.Field[] fields = { DatatypeConstants.YEARS, DatatypeConstants.MONTHS, DatatypeConstants.DAYS, DatatypeConstants.HOURS,\n+    private static final DatatypeConstants.Field[] FIELDS = { DatatypeConstants.YEARS, DatatypeConstants.MONTHS, DatatypeConstants.DAYS, DatatypeConstants.HOURS,\n@@ -75,1 +76,1 @@\n-        Assert.assertTrue(years == 21, \"Return value should be normalized\");\n+        Assert.assertEquals(years, 21, \"Return value should be normalized\");\n@@ -84,1 +85,1 @@\n-        Assert.assertTrue(years == 21, \"Return value should be normalized\");\n+        Assert.assertEquals(years, 21, \"Return value should be normalized\");\n@@ -94,1 +95,1 @@\n-        Assert.assertTrue(years == 21, \"Return value should be normalized\");\n+        Assert.assertEquals(years, 21, \"Return value should be normalized\");\n@@ -102,1 +103,1 @@\n-        Assert.assertTrue(years == 21, \"Return value should be normalized\");\n+        Assert.assertEquals(years, 21, \"Return value should be normalized\");\n@@ -110,1 +111,1 @@\n-        Assert.assertTrue(days == 2, \"Return value should be normalized\");\n+        Assert.assertEquals(days, 2, \"Return value should be normalized\");\n@@ -118,1 +119,1 @@\n-        Assert.assertTrue(days == 2, \"Return value should be normalized\");\n+        Assert.assertEquals(days, 2, \"Return value should be normalized\");\n@@ -131,1 +132,1 @@\n-        Assert.assertTrue(days == 2, \"Return value should be normalized\");\n+        Assert.assertEquals(days, 2, \"Return value should be normalized\");\n@@ -140,1 +141,1 @@\n-        Assert.assertTrue(days == 2, \"Return value should be normalized\");\n+        Assert.assertEquals(days, 2, \"Return value should be normalized\");\n@@ -143,2 +144,12 @@\n-    @Test\n-    public final void testNewDurationYearMonthLexicalRepresentation1() {\n+    @DataProvider(name = \"lexicalvalues\")\n+    public Object[][] actualAndExpectedLexicals() {\n+        Object actualAndExpected [][] = {\n+                {\"P13M\", \"P1Y1M\"},\n+                {\"-P13M\", \"-P1Y1M\"},\n+                {\"P1Y\", \"P1Y\"},\n+                {\"-P1Y\", \"-P1Y\"},\n+                {\"P1Y25M\", \"P3Y1M\"},\n+                {\"-P1Y25M\", \"-P3Y1M\"}\n+        };\n+        return actualAndExpected;\n+    }\n@@ -146,0 +157,2 @@\n+    @Test(dataProvider = \"lexicalvalues\")\n+    public void testNewDurationYearMonthLexicalRepresentation1(String actualLex, String expectedLex) {\n@@ -149,1 +162,0 @@\n-        final String[] TEST_VALUES_LEXICAL = { \"P13M\", \"P1Y1M\", \"-P13M\", \"-P1Y1M\", \"P1Y\", \"P1Y\", \"-P1Y\", \"-P1Y\", \"P1Y25M\", \"P3Y1M\", \"-P1Y25M\", \"-P3Y1M\" };\n@@ -161,0 +173,3 @@\n+        if (DEBUG) {\n+            System.err.println(\"testing value: \\\"\" + actualLex + \"\\\", expecting: \\\"\" + expectedLex + \"\\\"\");\n+        }\n@@ -162,2 +177,2 @@\n-        \/\/ test each value\n-        for (int onTestValue = 0; onTestValue < TEST_VALUES_LEXICAL.length; onTestValue = onTestValue + 2) {\n+        try {\n+            Duration duration = datatypeFactory.newDurationYearMonth(actualLex);\n@@ -166,1 +181,1 @@\n-                System.err.println(\"testing value: \\\"\" + TEST_VALUES_LEXICAL[onTestValue] + \"\\\", expecting: \\\"\" + TEST_VALUES_LEXICAL[onTestValue + 1] + \"\\\"\");\n+                System.err.println(\"Duration created: \\\"\" + duration.toString() + \"\\\"\");\n@@ -169,11 +184,4 @@\n-            try {\n-                Duration duration = datatypeFactory.newDurationYearMonth(TEST_VALUES_LEXICAL[onTestValue]);\n-\n-                if (DEBUG) {\n-                    System.err.println(\"Duration created: \\\"\" + duration.toString() + \"\\\"\");\n-                }\n-\n-                \/\/ was this expected to fail?\n-                if (TEST_VALUES_LEXICAL[onTestValue + 1].equals(TEST_VALUE_FAIL)) {\n-                    Assert.fail(\"the value \\\"\" + TEST_VALUES_LEXICAL[onTestValue] + \"\\\" is invalid yet it created the Duration \\\"\" + duration.toString() + \"\\\"\");\n-                }\n+            \/\/ was this expected to fail?\n+            if (expectedLex.equals(TEST_VALUE_FAIL)) {\n+                Assert.fail(\"the value \\\"\" + actualLex + \"\\\" is invalid yet it created the Duration \\\"\" + duration.toString() + \"\\\"\");\n+            }\n@@ -181,7 +189,7 @@\n-                \/\/ right XMLSchemaType?\n-                \/\/ TODO: enable test, it should pass, it fails with Exception(s)\n-                \/\/ for now due to a bug\n-                try {\n-                    QName xmlSchemaType = duration.getXMLSchemaType();\n-                    if (!xmlSchemaType.equals(DatatypeConstants.DURATION_YEARMONTH)) {\n-                        Assert.fail(\"Duration created with XMLSchemaType of\\\"\" + xmlSchemaType + \"\\\" was expected to be \\\"\"\n+            \/\/ right XMLSchemaType?\n+            \/\/ TODO: enable test, it should pass, it fails with Exception(s)\n+            \/\/ for now due to a bug\n+            try {\n+                QName xmlSchemaType = duration.getXMLSchemaType();\n+                if (!xmlSchemaType.equals(DatatypeConstants.DURATION_YEARMONTH)) {\n+                    Assert.fail(\"Duration created with XMLSchemaType of\\\"\" + xmlSchemaType + \"\\\" was expected to be \\\"\"\n@@ -189,1 +197,1 @@\n-                    }\n+                }\n@@ -196,3 +204,3 @@\n-                if (!TEST_VALUES_LEXICAL[onTestValue + 1].equals(duration.toString())) {\n-                    Assert.fail(\"Duration created with \\\"\" + TEST_VALUES_LEXICAL[onTestValue] + \"\\\" was expected to be \\\"\"\n-                            + TEST_VALUES_LEXICAL[onTestValue + 1] + \"\\\" and has the value \\\"\" + duration.toString() + \"\\\"\");\n+                if (!expectedLex.equals(duration.toString())) {\n+                    Assert.fail(\"Duration created with \\\"\" + actualLex + \"\\\" was expected to be \\\"\"\n+                            + expectedLex + \"\\\" and has the value \\\"\" + duration.toString() + \"\\\"\");\n@@ -209,2 +217,2 @@\n-                if (!TEST_VALUES_LEXICAL[onTestValue + 1].equals(TEST_VALUE_FAIL)) {\n-                    Assert.fail(\"the value \\\"\" + TEST_VALUES_LEXICAL[onTestValue] + \"\\\" is valid yet it failed with \\\"\" + exception.toString() + \"\\\"\");\n+                if (!expectedLex.equals(TEST_VALUE_FAIL)) {\n+                    Assert.fail(\"the value \\\"\" + actualLex + \"\\\" is valid yet it failed with \\\"\" + exception.toString() + \"\\\"\");\n@@ -214,1 +222,0 @@\n-        }\n@@ -217,5 +224,2 @@\n-    \/**\n-     * TCK test failure\n-     *\/\n-    @Test\n-    public void testNewDurationDayTime005() {\n+    @DataProvider(name = \"lexDayTime\")\n+    public Object[][] lexDayTimeData() {\n@@ -226,1 +230,0 @@\n-\n@@ -232,0 +235,2 @@\n+        return values;\n+    }\n@@ -233,0 +238,6 @@\n+    \/**\n+     * TCK test failure\n+     *\/\n+    @Test(dataProvider = \"lexDayTime\")\n+    public void testNewDurationDayTime005(String lex, boolean isPositive, BigInteger year, BigInteger month, BigInteger days,\n+                                          BigInteger hour, BigInteger minutes, BigDecimal seconds) {\n@@ -242,8 +253,9 @@\n-        for (int valueIndex = 0; valueIndex < values.length; ++valueIndex) {\n-            Duration duration = null;\n-            try {\n-                duration = df.newDurationDayTime(values[valueIndex][1].equals(Boolean.TRUE), ((BigInteger) values[valueIndex][4]).intValue(),\n-                        ((BigInteger) values[valueIndex][5]).intValue(), ((BigInteger) values[valueIndex][6]).intValue(),\n-                        ((BigDecimal) values[valueIndex][7]).intValue());\n-            } catch (IllegalArgumentException e) {\n-                result.append(\"; unexpected \" + e + \" trying to create duration \\'\" + values[valueIndex][0] + \"\\'\");\n+        Duration duration = null;\n+        try {\n+            duration = df.newDurationDayTime(isPositive, days, hour, minutes, seconds.toBigInteger());\n+        } catch (IllegalArgumentException e) {\n+            result.append(\"; unexpected \" + e + \" trying to create duration \\'\" + lex + \"\\'\");\n+        }\n+        if (duration != null) {\n+            if ((duration.getSign() == 1) != isPositive) {\n+                result.append(\"; \" + lex + \": wrong sign \" + duration.getSign() + \", expected \" + isPositive);\n@@ -251,12 +263,5 @@\n-            if (duration != null) {\n-                if ((duration.getSign() == 1) != values[valueIndex][1].equals(Boolean.TRUE)) {\n-                    result.append(\"; \" + values[valueIndex][0] + \": wrong sign \" + duration.getSign() + \", expected \" + values[valueIndex][1]);\n-                }\n-                for (int i = 0; i < fields.length; ++i) {\n-                    Number value = duration.getField(fields[i]);\n-                    if ((value != null && values[valueIndex][2 + i] == null) || (value == null && values[valueIndex][2 + i] != null)\n-                            || (value != null && !value.equals(values[valueIndex][2 + i]))) {\n-                        result.append(\"; \" + values[valueIndex][0] + \": wrong value of the field \" + fields[i] + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n-                                + values[valueIndex][2 + i] + \"\\'\");\n-                    }\n-                }\n+\n+            Number value = duration.getField(DatatypeConstants.YEARS);\n+            if ((value != null && year == null) || (value == null && year != null) || (value != null && !value.equals(year))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.YEARS + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + year + \"\\'\");\n@@ -264,1 +269,0 @@\n-        }\n@@ -266,0 +270,30 @@\n+            value = duration.getField(DatatypeConstants.MONTHS);\n+            if ((value != null && month == null) || (value == null && month != null) || (value != null && !value.equals(month))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.MONTHS + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + month + \"\\'\");\n+            }\n+\n+            value = duration.getField(DatatypeConstants.DAYS);\n+            if ((value != null && days == null) || (value == null && days != null) || (value != null && !value.equals(days))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.DAYS + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + days + \"\\'\");\n+            }\n+\n+            value = duration.getField(DatatypeConstants.HOURS);\n+            if ((value != null && hour == null) || (value == null && hour != null) || (value != null && !value.equals(hour))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.HOURS + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + hour + \"\\'\");\n+            }\n+\n+            value = duration.getField(DatatypeConstants.MINUTES);\n+            if ((value != null && minutes == null) || (value == null && minutes != null) || (value != null && !value.equals(minutes))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.MINUTES + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + minutes + \"\\'\");\n+            }\n+\n+            value = duration.getField(DatatypeConstants.SECONDS);\n+            if ((value != null && seconds == null) || (value == null && seconds != null) || (value != null && !value.equals(seconds))) {\n+                result.append(\"; \" + lex + \": wrong value of the field \" + DatatypeConstants.SECONDS + \": \\'\" + value + \"\\'\" + \", expected \\'\"\n+                        + seconds + \"\\'\");\n+            }\n+        }\n@@ -270,1 +304,0 @@\n-\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/datatype\/Bug6937964Test.java","additions":101,"deletions":68,"binary":false,"changes":169,"status":"modified"}]}