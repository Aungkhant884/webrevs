{"files":[{"patch":"@@ -1148,1 +1148,1 @@\n-  mem = StoreNode::make(_igvn, ctl, mem, adr, NULL, value, bt);\n+  mem = StoreNode::make(_igvn, ctl, mem, adr, NULL, value, bt, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -962,1 +962,1 @@\n-        mem = StoreNode::make(_igvn, ctrl, mem, p1, adr_type, intcon(0), T_INT);\n+        mem = StoreNode::make(_igvn, ctrl, mem, p1, adr_type, intcon(0), T_INT, MemNode::unordered);\n@@ -1022,1 +1022,2 @@\n-          StoreNode::make(_igvn, *ctrl, (*mem)->memory_at(d_alias_idx), dptr, adr_type, sval, T_INT));\n+          StoreNode::make(_igvn, *ctrl, (*mem)->memory_at(d_alias_idx), dptr, adr_type,\n+                          sval, T_INT, MemNode::unordered));\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1299,2 +1299,3 @@\n-  bool require_atomic_access = (Opcode() == Op_LoadL && ((LoadLNode*)this)->require_atomic_access()) ||\n-                               (Opcode() == Op_LoadD && ((LoadDNode*)this)->require_atomic_access());\n+  const int op = Opcode();\n+  bool require_atomic_access = (op == Op_LoadL && ((LoadLNode*)this)->require_atomic_access()) ||\n+                               (op == Op_LoadD && ((LoadDNode*)this)->require_atomic_access());\n@@ -1321,2 +1322,3 @@\n-  bool require_atomic_access = (Opcode() == Op_StoreL && ((StoreLNode*)this)->require_atomic_access()) ||\n-                               (Opcode() == Op_StoreD && ((StoreDNode*)this)->require_atomic_access());\n+  const int op = Opcode();\n+  bool require_atomic_access = (op == Op_StoreL && ((StoreLNode*)this)->require_atomic_access()) ||\n+                               (op == Op_StoreD && ((StoreDNode*)this)->require_atomic_access());\n@@ -3158,1 +3160,1 @@\n-    mem = StoreNode::make(*phase, ctl, mem, adr, atp, phase->zerocon(T_INT), T_INT);\n+    mem = StoreNode::make(*phase, ctl, mem, adr, atp, phase->zerocon(T_INT), T_INT, MemNode::unordered);\n@@ -3217,1 +3219,1 @@\n-    mem = StoreNode::make(*phase, ctl, mem, adr, atp, phase->zerocon(T_INT), T_INT);\n+    mem = StoreNode::make(*phase, ctl, mem, adr, atp, phase->zerocon(T_INT), T_INT, MemNode::unordered);\n@@ -4241,1 +4243,1 @@\n-                                  phase->longcon(con), T_LONG);\n+                                  phase->longcon(con), T_LONG, MemNode::unordered);\n@@ -4248,1 +4250,1 @@\n-                                    phase->intcon(con0), T_INT);\n+                                    phase->intcon(con0), T_INT, MemNode::unordered);\n@@ -4256,1 +4258,1 @@\n-                                    phase->intcon(con1), T_INT);\n+                                    phase->intcon(con1), T_INT, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -610,1 +610,1 @@\n-                         MemOrd mo = MemNode::unordered, bool require_atomic_access = false);\n+                         MemOrd mo, bool require_atomic_access = false);\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary Test memory accesses with AlwaysAtomicAccesses.\n+ * @summary Test memory accesses from compiled code with AlwaysAtomicAccesses.\n@@ -37,0 +37,1 @@\n+        \/\/ Nothing to do here. Compilations are triggered by -Xcomp.\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestAlwaysAtomicAccesses.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}