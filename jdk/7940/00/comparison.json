{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/*\n+ \/*\n@@ -26,1 +26,1 @@\n- * @bug 8039951\n+ * @bug 8039951 8281717\n@@ -30,1 +30,0 @@\n-\n@@ -37,0 +36,5 @@\n+\n+    private static final String OS = System.getProperty(\"os.name\").toLowerCase();\n+    private static final String UNIX_MODULE = \"UnixLoginModule\";\n+    private static final String NT_MODULE = \"NTLoginModule\";\n+\n@@ -39,13 +43,3 @@\n-                \"UnixLoginModule\", \"optional\",\n-                \"NTLoginModule\", \"optional\",\n-                \"SolarisLoginModule\", \"optional\");\n-        try {\n-            login(\"windows\", \"NTLoginModule\", \"required\");\n-            login(\"unix\", \"UnixLoginModule\", \"required\");\n-            login(\"solaris\", \"SolarisLoginModule\", \"required\");\n-        } catch (Exception e) {\n-            e.printStackTrace(System.out);\n-            if (e.toString().contains(\"UnsatisfiedLinkError\")) {\n-                throw new Exception(\"This is ugly\");\n-            }\n-        }\n+                UNIX_MODULE, \"optional\",\n+                NT_MODULE, \"optional\");\n+        login(OS.replaceAll(\"[^a-zA-Z0-9]\", \"\"), getPlatformLoginModule(), \"required\");\n@@ -59,3 +53,4 @@\n-        for (int i=0; i<conf.length; i+=2) {\n-            sb.append(\"    com.sun.security.auth.module.\" + conf[i]\n-                    + \" \" + conf[i+1] + \";\\n\");\n+        for (int i = 0; i < conf.length; i += 2) {\n+            sb.append(\"    com.sun.security.auth.module.\")\n+                    .append(conf[i]).append(\" \")\n+                    .append(conf[i + 1]).append(\";\\n\");\n@@ -73,0 +68,23 @@\n+        lc.logout();\n+    }\n+\n+    private static String getPlatformLoginModule() {\n+        if (isWindows()) {\n+            return NT_MODULE;\n+        } else if (isUnix()) {\n+            return UNIX_MODULE;\n+        } else {\n+            throw new RuntimeException(\"Unsupported Platform: \" + OS);\n+        }\n+    }\n+\n+    private static boolean isWindows() {\n+        return OS.contains(\"win\");\n+    }\n+\n+    private static boolean isUnix() {\n+        return (OS.contains(\"mac\")\n+                || OS.contains(\"sunos\")\n+                || OS.contains(\"nix\")\n+                || OS.contains(\"nux\")\n+                || OS.contains(\"aix\"));\n","filename":"test\/jdk\/com\/sun\/security\/auth\/module\/AllPlatforms.java","additions":38,"deletions":20,"binary":false,"changes":58,"status":"modified"}]}