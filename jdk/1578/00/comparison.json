{"files":[{"patch":"@@ -1,205 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-# @test\n-# @bug 4833089 4992454\n-# @summary Check for proper handling of uncaught exceptions\n-# @author Martin Buchholz\n-#\n-# @run shell UncaughtExceptions.sh\n-\n-# To run this test manually, simply do .\/UncaughtExceptions.sh\n-\n- java=\"${TESTJAVA+${TESTJAVA}\/bin\/}java\"\n-javac=\"${COMPILEJAVA+${COMPILEJAVA}\/bin\/}javac\"\n-\n-failed=\"\"\n-Fail() { echo \"FAIL: $1\"; failed=\"${failed}.\"; }\n-\n-Die() { printf \"%s\\n\" \"$*\"; exit 1; }\n-\n-Sys() {\n-    \"$@\"; rc=\"$?\";\n-    test \"$rc\" -eq 0 || Die \"Command \\\"$*\\\" failed with exitValue $rc\";\n-}\n-\n-HorizontalRule() {\n-    echo \"-----------------------------------------------------------------\"\n-}\n-\n-Bottom() {\n-    test \"$#\" = 1 -a \"$1\" = \"Line\" || Die \"Usage: Bottom Line\"\n-\n-    HorizontalRule\n-    if test -n \"$failed\"; then\n-\tcount=`printf \"%s\" \"$failed\" | wc -c | tr -d ' '`\n-\techo \"FAIL: $count tests failed\"\n-\texit 1\n-    else\n-\techo \"PASS: all tests gave expected results\"\n-\texit 0\n-    fi\n-}\n-\n-Cleanup() { Sys rm -f Seppuku* OK.class; }\n-\n-set -u\n-\n-checkOutput() {\n-    name=\"$1\" expected=\"$2\" got=\"$3\"\n-    printf \"$name:\\n\"; cat \"$got\"\n-    if test -z \"$expected\"; then\n-\ttest \"`cat $got`\" != \"\" && \\\n-\t    Fail \"Unexpected $name: `cat $got`\"\n-    else\n-\tgrep \"$expected\" \"$got\" >\/dev\/null || \\\n-\t    Fail \"Expected \\\"$expected\\\", got `cat $got`\"\n-    fi\n-}\n-\n-CheckCommandResults() {\n-    expectedRC=\"$1\" expectedOut=\"$2\" expectedErr=\"$3\"; shift 3\n-    saveFailed=\"${failed}\"\n-    \"$@\" >TmpTest.Out 2>TmpTest.Err; rc=\"$?\";\n-    printf \"==> %s (rc=%d)\\n\" \"$*\" \"$rc\"\n-    checkOutput \"stdout\" \"$expectedOut\" \"TmpTest.Out\"\n-    checkOutput \"stderr\" \"$expectedErr\" \"TmpTest.Err\"\n-    test \"${saveFailed}\" = \"${failed}\" && \\\n-\techo \"PASS: command completed as expected\"\n-    Sys rm -f TmpTest.Out TmpTest.Err\n-}\n-\n-Run() {\n-    expectedRC=\"$1\" expectedOut=\"$2\" expectedErr=\"$3\" mainBody=\"$4\"\n-    cat > Seppuku.java <<EOJAVA\n-import static java.lang.Thread.*;\n-import static java.lang.System.*;\n-\n-class OK implements UncaughtExceptionHandler {\n-    public void uncaughtException(Thread t, Throwable e) {\n-\tout.println(\"OK\");\n-    }\n-}\n-\n-class NeverInvoked implements UncaughtExceptionHandler {\n-    public void uncaughtException(Thread t, Throwable e) {\n-\terr.println(\"Test failure: This handler should never be invoked!\");\n-    }\n-}\n-\n-public class Seppuku extends Thread implements Runnable {\n-    public static void seppuku() { throw new RuntimeException(\"Seppuku!\"); }\n-\n-    public void run() {\tseppuku(); }\n-\n-    public static void main(String[] args) throws Exception {\n-\t$mainBody\n-    }\n-}\n-EOJAVA\n-\n-    Sys \"$javac\" ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} \"Seppuku.java\"\n-    CheckCommandResults \"$expectedRC\" \"$expectedOut\" \"$expectedErr\" \\\n-\t\"$java\" \"Seppuku\"\n-    Cleanup\n-}\n-\n-#----------------------------------------------------------------\n-# A thread is never alive after you've join()ed it.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"Exception in thread \\\"Thread-0\\\".*Seppuku\" \"\n-    Thread t = new Seppuku();\n-    t.start(); t.join();\n-    if (! t.isAlive())\n-\tout.println(\\\"OK\\\");\"\n-\n-#----------------------------------------------------------------\n-# Even the main thread is mortal - here it terminates \"abruptly\"\n-#----------------------------------------------------------------\n-Run 1 \"OK\" \"Exception in thread \\\"main\\\".*Seppuku\" \"\n-    final Thread mainThread = currentThread();\n-    new Thread() { public void run() {\n-\ttry { mainThread.join(); }\n-\tcatch (InterruptedException e) {}\n-\tif (! mainThread.isAlive())\n-\t    out.println(\\\"OK\\\");\n-    }}.start();\n-    seppuku();\"\n-\n-#----------------------------------------------------------------\n-# Even the main thread is mortal - here it terminates normally.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    final Thread mainThread = currentThread();\n-    new Thread() { public void run() {\n-\ttry { mainThread.join(); }\n-\tcatch (InterruptedException e) {}\n-\tif (! mainThread.isAlive())\n-\t    out.println(\\\"OK\\\");\n-    }}.start();\"\n-\n-#----------------------------------------------------------------\n-# Check uncaught exception handler mechanism on the main thread.\n-# Check that thread-level handler overrides global default handler.\n-#----------------------------------------------------------------\n-Run 1 \"OK\" \"\" \"\n-    currentThread().setUncaughtExceptionHandler(new OK());\n-    setDefaultUncaughtExceptionHandler(new NeverInvoked());\n-    seppuku();\"\n-\n-Run 1 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new OK());\n-    seppuku();\"\n-\n-#----------------------------------------------------------------\n-# Check uncaught exception handler mechanism on non-main threads.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    Thread t = new Seppuku();\n-    t.setUncaughtExceptionHandler(new OK());\n-    t.start();\"\n-\n-Run 0 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new OK());\n-    new Seppuku().start();\"\n-\n-#----------------------------------------------------------------\n-# Test ThreadGroup based uncaught exception handler mechanism.\n-# Since the handler for the main thread group cannot be changed,\n-# there are no tests for the main thread here.\n-#----------------------------------------------------------------\n-Run 0 \"OK\" \"\" \"\n-    setDefaultUncaughtExceptionHandler(new NeverInvoked());\n-    new Thread(\n-\tnew ThreadGroup(\\\"OK\\\") {\n-\t    public void uncaughtException(Thread t, Throwable e) {\n-\t\tout.println(\\\"OK\\\");}},\n-\tnew Seppuku()\n-    ).start();\"\n-\n-Cleanup\n-\n-Bottom Line\n","filename":"test\/jdk\/java\/lang\/Thread\/UncaughtExceptions.sh","additions":0,"deletions":205,"binary":false,"changes":205,"status":"deleted"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2004, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import static java.lang.System.err;\n+import static java.lang.System.out;\n+\n+\/*\n+ * @test\n+ * @bug 4833089 4992454\n+ * @summary Check for proper handling of uncaught exceptions\n+ * @author Martin Buchholz\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.*\n+ * @run testng UncaughtExceptionsTest\n+ *\/\n+public class UncaughtExceptionsTest {\n+\n+    @DataProvider\n+    public Object[][] testCases() {\n+        return new Object[][]{\n+            new Object[] { \"ThreadIsDeadAfterJoin\",\n+                           0,\n+                           Seppuku.EXPECTED_RESULT,\n+                           \"Exception in thread \\\"Thread-0\\\".*Seppuku\"\n+            },\n+            new Object[] {\n+                            \"MainThreadAbruptTermination\",\n+                            1,\n+                            Seppuku.EXPECTED_RESULT,\n+                            \"Exception in thread \\\"main\\\".*Seppuku\"\n+            },\n+            new Object[] { \"MainThreadNormalTermination\", 0, Seppuku.EXPECTED_RESULT, \"\"},\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThread\", 1, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnMainThreadOverride\", 1, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThreadOverride\", 0, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"DefaultUncaughtExceptionHandlerOnNonMainThread\", 0, Seppuku.EXPECTED_RESULT, \"\" },\n+            new Object[] { \"ThreadGroupUncaughtExceptionHandlerOnNonMainThread\", 0, Seppuku.EXPECTED_RESULT, \"\" }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"testCases\")\n+    public void test(String className, int exitValue, String stdOutMatch, String stdErrMatch) throws Throwable {\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(String.format(\"Seppuku$%s\",className));\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeCommand(processBuilder);\n+        outputAnalyzer.shouldHaveExitValue(exitValue);\n+        outputAnalyzer.stderrShouldMatch(stdErrMatch);\n+        outputAnalyzer.stdoutShouldMatch(stdOutMatch);\n+    }\n+\n+}\n+\n+\n+class OK implements Thread.UncaughtExceptionHandler {\n+    public void uncaughtException(Thread t, Throwable e) {\n+        out.println(Seppuku.EXPECTED_RESULT);\n+    }\n+}\n+\n+class NeverInvoked implements Thread.UncaughtExceptionHandler {\n+    public void uncaughtException(Thread t, Throwable e) {\n+        err.println(\"Test failure: This handler should never be invoked!\");\n+    }\n+}\n+\n+class Seppuku extends Thread implements Runnable {\n+\n+    final static String EXPECTED_RESULT = \"OK\";\n+\n+    public static void seppuku() { throw new RuntimeException(\"Seppuku!\"); }\n+\n+    public void run() { seppuku(); }\n+\n+    \/**\n+     * A thread is never alive after you've join()ed it.\n+     *\/\n+    public static class ThreadIsDeadAfterJoin extends Seppuku {\n+        public static void main(String[] args) throws Exception {\n+            Thread t = new Seppuku();\n+            t.start(); t.join();\n+            if (! t.isAlive()) {\n+                out.println(EXPECTED_RESULT);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Even the main thread is mortal - here it terminates \"abruptly\"\n+     *\/\n+    public static class MainThreadAbruptTermination extends Seppuku {\n+        public static void main(String[] args) {\n+            final Thread mainThread = currentThread();\n+            new Thread() { public void run() {\n+                try { mainThread.join(); }\n+                catch (InterruptedException e) {}\n+                if (! mainThread.isAlive())\n+                    out.println(EXPECTED_RESULT);\n+            }}.start();\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Even the main thread is mortal - here it terminates normally.\n+     *\/\n+    public static class MainThreadNormalTermination extends Seppuku {\n+        public static void main(String[] args) {\n+            final Thread mainThread = currentThread();\n+            new Thread() {\n+                public void run() {\n+                    try {\n+                        mainThread.join();\n+                    } catch (InterruptedException e) {\n+                    }\n+                    if (!mainThread.isAlive())\n+                        out.println(EXPECTED_RESULT);\n+                }\n+            }.start();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on the main thread.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            currentThread().setUncaughtExceptionHandler(new OK());\n+            setDefaultUncaughtExceptionHandler(new NeverInvoked());\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Check that thread-level handler overrides global default handler.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnMainThreadOverride extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new OK());\n+            seppuku();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on non-main threads.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnNonMainThreadOverride extends Seppuku {\n+        public static void main(String[] args) {\n+            Thread t = new Seppuku();\n+            t.setUncaughtExceptionHandler(new OK());\n+            t.start();\n+        }\n+    }\n+\n+    \/**\n+     * Check uncaught exception handler mechanism on non-main threads.\n+     *\/\n+    public static class DefaultUncaughtExceptionHandlerOnNonMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new OK());\n+            new Seppuku().start();\n+        }\n+    }\n+\n+    \/**\n+     * Test ThreadGroup based uncaught exception handler mechanism.\n+     * Since the handler for the main thread group cannot be changed,\n+     * there are no tests for the main thread here.\n+     *\/\n+    public static class ThreadGroupUncaughtExceptionHandlerOnNonMainThread extends Seppuku {\n+        public static void main(String[] args) {\n+            setDefaultUncaughtExceptionHandler(new NeverInvoked());\n+            new Thread(\n+                    new ThreadGroup(EXPECTED_RESULT) {\n+                        public void uncaughtException(Thread t, Throwable e) {\n+                            out.println(EXPECTED_RESULT);\n+                        }\n+                    },\n+                    new Seppuku()\n+            ).start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/UncaughtExceptionsTest.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"}]}