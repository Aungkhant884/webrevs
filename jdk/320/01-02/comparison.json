{"files":[{"patch":"@@ -815,3 +815,1 @@\n-    call_VM(noreg,\n-            CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            lock_reg);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), lock_reg);\n@@ -853,3 +851,1 @@\n-    call_VM(noreg,\n-            CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            lock_reg);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), lock_reg);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -993,1 +993,1 @@\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), Rlock);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), Rlock);\n@@ -1034,1 +1034,1 @@\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), Rlock);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), Rlock);\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1000,2 +1000,1 @@\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            monitor, check_for_exceptions);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n@@ -1014,1 +1013,1 @@\n-    \/\/   InterpreterRuntime::monitorexit(THREAD, monitor);\n+    \/\/   InterpreterRuntime::monitorexit(monitor);\n@@ -1068,1 +1067,1 @@\n-    \/\/   InterpreterRuntime::monitorexit(THREAD, monitor);\n+    \/\/   InterpreterRuntime::monitorexit(monitor);\n@@ -1073,2 +1072,1 @@\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            monitor, check_for_exceptions);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1083,1 +1083,1 @@\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n@@ -1098,1 +1098,1 @@\n-  \/\/   InterpreterRuntime::monitorexit(THREAD, monitor);\n+  \/\/   InterpreterRuntime::monitorexit(monitor);\n@@ -1152,1 +1152,1 @@\n-  \/\/   InterpreterRuntime::monitorexit(THREAD, monitor);\n+  \/\/   InterpreterRuntime::monitorexit(monitor);\n@@ -1157,1 +1157,1 @@\n-  call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n+  call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), monitor);\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1284,3 +1284,1 @@\n-    call_VM(noreg,\n-            CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            lock_reg);\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), lock_reg);\n@@ -1327,0 +1325,1 @@\n+\n@@ -1328,5 +1327,2 @@\n-    movptr(Address(lock_reg, BasicObjectLock::obj_offset_in_bytes()),\n-         obj_reg); \/\/ restore obj\n-    call_VM(noreg,\n-            CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit),\n-            lock_reg);\n+    movptr(Address(lock_reg, BasicObjectLock::obj_offset_in_bytes()), obj_reg); \/\/ restore obj\n+    call_VM_leaf(CAST_FROM_FN_PTR(address, InterpreterRuntime::monitorexit), lock_reg);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -462,4 +462,2 @@\n-        monitor->set_obj(rcvr); {\n-          HandleMark hm(thread);\n-          CALL_VM_NOCHECK(InterpreterRuntime::monitorexit(thread, monitor));\n-        }\n+        monitor->set_obj(rcvr);\n+        InterpreterRuntime::monitorexit(monitor);\n","filename":"src\/hotspot\/cpu\/zero\/zeroInterpreter_zero.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -736,4 +736,1 @@\n-JRT_LEAF(void, InterpreterRuntime::monitorexit(JavaThread* thread, BasicObjectLock* elem))\n-#ifdef ASSERT\n-  thread->last_frame().interpreter_frame_verify_monitor(elem);\n-#endif\n+JRT_LEAF(void, InterpreterRuntime::monitorexit(BasicObjectLock* elem))\n@@ -741,1 +738,1 @@\n-  assert(Universe::heap()->is_in(obj), \"must an object\");\n+  assert(Universe::heap()->is_in(obj), \"must be an object\");\n@@ -743,1 +740,1 @@\n-  \/\/ Give a message if CheckJNICalls but ignore.\n+  \/\/ Give a fatal message if CheckJNICalls. Otherwise we ignore it.\n@@ -750,1 +747,1 @@\n-  ObjectSynchronizer::exit(obj, elem->lock(), thread);\n+  ObjectSynchronizer::exit(obj, elem->lock(), Thread::current());\n@@ -754,3 +751,0 @@\n-#ifdef ASSERT\n-  thread->last_frame().interpreter_frame_verify_monitor(elem);\n-#endif\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-  static void    monitorexit (JavaThread* thread, BasicObjectLock* elem);\n+  static void    monitorexit (BasicObjectLock* elem);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -630,1 +630,1 @@\n-              CALL_VM(InterpreterRuntime::monitorenter(THREAD, mon), handle_exception);\n+              InterpreterRuntime::monitorenter(THREAD, mon);\n@@ -1825,1 +1825,1 @@\n-                  CALL_VM(InterpreterRuntime::monitorexit(THREAD, most_recent), handle_exception);\n+                  InterpreterRuntime::monitorexit(most_recent);\n@@ -2962,5 +2962,1 @@\n-                {\n-                  \/\/ Prevent any HandleMarkCleaner from freeing our live handles\n-                  HandleMark __hm(THREAD);\n-                  CALL_VM_NOCHECK(InterpreterRuntime::monitorexit(THREAD, end));\n-                }\n+                InterpreterRuntime::monitorexit(end);\n@@ -3016,5 +3012,1 @@\n-            {\n-              \/\/ Prevent any HandleMarkCleaner from freeing our live handles.\n-              HandleMark __hm(THREAD);\n-              CALL_VM_NOCHECK(InterpreterRuntime::monitorexit(THREAD, base));\n-            }\n+            InterpreterRuntime::monitorexit(base);\n@@ -3038,5 +3030,1 @@\n-                  {\n-                    \/\/ Prevent any HandleMarkCleaner from freeing our live handles\n-                    HandleMark __hm(THREAD);\n-                    CALL_VM_NOCHECK(InterpreterRuntime::monitorexit(THREAD, base));\n-                  }\n+                  InterpreterRuntime::monitorexit(base);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2100,5 +2100,0 @@\n-  ObjectSynchronizer::exit(obj, lock, THREAD);\n-}\n-\n-\/\/ Handles the uncommon cases of monitor unlocking in compiled code\n-JRT_LEAF(void, SharedRuntime::complete_monitor_unlocking_C(oopDesc* obj, BasicLock* lock, JavaThread* thread))\n@@ -2106,1 +2101,1 @@\n-  \/\/ Give a message if CheckJNICalls but ignore.\n+  \/\/ Give a fatal message if CheckJNICalls. Otherwise we ignore it.\n@@ -2113,0 +2108,5 @@\n+  ObjectSynchronizer::exit(obj, lock, THREAD);\n+}\n+\n+\/\/ Handles the uncommon cases of monitor unlocking in compiled code\n+JRT_LEAF(void, SharedRuntime::complete_monitor_unlocking_C(oopDesc* obj, BasicLock* lock, JavaThread* thread))\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}