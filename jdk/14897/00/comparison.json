{"files":[{"patch":"@@ -103,1 +103,1 @@\n-  if (AllocatePrefetchDistance !=-1 && (AllocatePrefetchDistance & 7)) {\n+  if (AllocatePrefetchDistance != -1 && (AllocatePrefetchDistance & 7)) {\n@@ -209,3 +209,3 @@\n-  if (_cpu == CPU_ARM && ((_model == 0xd0c || _model2 == 0xd0c)\n-                          || (_model == 0xd49 || _model2 == 0xd49)\n-                          || (_model == 0xd40 || _model2 == 0xd40))) {\n+  if (_cpu == CPU_ARM && ((_model == 0xd0c || _model2 == 0xd0c) ||\n+                          (_model == 0xd49 || _model2 == 0xd49) ||\n+                          (_model == 0xd40 || _model2 == 0xd40))) {\n@@ -231,9 +231,0 @@\n-  char buf[512];\n-  int buf_used_len = os::snprintf_checked(buf, sizeof(buf), \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n-  if (_model2) os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \"(0x%03x)\", _model2);\n-#define ADD_FEATURE_IF_SUPPORTED(id, name, bit) if (VM_Version::supports_##name()) strcat(buf, \", \" #name);\n-  CPU_FEATURE_FLAGS(ADD_FEATURE_IF_SUPPORTED)\n-#undef ADD_FEATURE_IF_SUPPORTED\n-\n-  _features_string = os::strdup(buf);\n-\n@@ -393,3 +384,3 @@\n-      if (FLAG_IS_DEFAULT(UseChaCha20Intrinsics)) {\n-          UseChaCha20Intrinsics = true;\n-      }\n+    if (FLAG_IS_DEFAULT(UseChaCha20Intrinsics)) {\n+      UseChaCha20Intrinsics = true;\n+    }\n@@ -397,4 +388,4 @@\n-      if (!FLAG_IS_DEFAULT(UseChaCha20Intrinsics)) {\n-          warning(\"ChaCha20 intrinsic requires ASIMD instructions\");\n-      }\n-      FLAG_SET_DEFAULT(UseChaCha20Intrinsics, false);\n+    if (!FLAG_IS_DEFAULT(UseChaCha20Intrinsics)) {\n+      warning(\"ChaCha20 intrinsic requires ASIMD instructions\");\n+    }\n+    FLAG_SET_DEFAULT(UseChaCha20Intrinsics, false);\n@@ -577,0 +568,19 @@\n+\n+  \/\/ Sync SVE related CPU features with flags\n+  if (UseSVE < 2) {\n+    _features &= ~CPU_SVE2;\n+    _features &= ~CPU_SVEBITPERM;\n+  }\n+  if (UseSVE < 1) {\n+    _features &= ~CPU_SVE;\n+  }\n+\n+  \/\/ Construct the \"features\" string\n+  char buf[512];\n+  int buf_used_len = os::snprintf_checked(buf, sizeof(buf), \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n+  if (_model2) os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \"(0x%03x)\", _model2);\n+#define ADD_FEATURE_IF_SUPPORTED(id, name, bit) if (VM_Version::supports_##name()) strcat(buf, \", \" #name);\n+  CPU_FEATURE_FLAGS(ADD_FEATURE_IF_SUPPORTED)\n+#undef ADD_FEATURE_IF_SUPPORTED\n+\n+  _features_string = os::strdup(buf);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":30,"deletions":20,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311130\n+ * @summary Test synchronization between SVE arguments and CPU features\n+ *\n+ * @requires os.arch == \"aarch64\" & vm.compiler2.enabled\n+ * @library \/test\/lib \/\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller\n+ *             jdk.test.whitebox.WhiteBox\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:UseSVE=0\n+ *                   compiler.arguments.TestSyncCPUFeaturesWithSVEFlags\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:UseSVE=1\n+ *                   compiler.arguments.TestSyncCPUFeaturesWithSVEFlags\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:UseSVE=2\n+ *                   compiler.arguments.TestSyncCPUFeaturesWithSVEFlags\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:MaxVectorSize=8\n+ *                   compiler.arguments.TestSyncCPUFeaturesWithSVEFlags\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public class TestSyncCPUFeaturesWithSVEFlags {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    public static void main(String[] args) {\n+        int sve_level = WB.getUintVMFlag(\"UseSVE\").intValue();\n+        List<String> features = Arrays.asList(WB.getCPUFeatures().split(\", \"));\n+        boolean has_sve = features.contains(\"sve\");\n+        boolean has_sve2 = features.contains(\"sve2\");\n+        switch (sve_level) {\n+            case 0: {\n+                \/\/ No sve and sve2\n+                Asserts.assertFalse(has_sve);\n+                Asserts.assertFalse(has_sve2);\n+                break;\n+            }\n+            case 1: {\n+                \/\/ Only has sve, no sve2\n+                Asserts.assertTrue(has_sve);\n+                Asserts.assertFalse(has_sve2);\n+                break;\n+            }\n+            case 2: {\n+                \/\/ Has both sve and sve2\n+                Asserts.assertTrue(has_sve);\n+                Asserts.assertTrue(has_sve2);\n+                break;\n+            }\n+            default: {\n+                \/\/ Should not reach here\n+                Asserts.assertTrue(false);\n+                break;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestSyncCPUFeaturesWithSVEFlags.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -167,1 +167,1 @@\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -188,1 +188,1 @@\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -305,2 +305,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -327,2 +326,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -349,2 +347,1 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -415,1 +412,1 @@\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -474,1 +471,1 @@\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n@@ -572,2 +569,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -594,2 +590,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -616,2 +611,1 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n@@ -656,1 +650,1 @@\n-    @IR(failOn = IRNode.XOR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n+    @IR(failOn = IRNode.XOR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"}]}