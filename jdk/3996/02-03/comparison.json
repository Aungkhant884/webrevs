{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import sun.security.action.GetBooleanAction;\n+import sun.security.action.GetPropertyAction;\n@@ -44,0 +46,2 @@\n+import static java.lang.System.Logger.Level.TRACE;\n+import static java.lang.System.Logger.Level.INFO;\n@@ -56,2 +60,2 @@\n- * <p>To protect the JVM against deserialization vulnerabilities, application developers\n- * need a clear description of the objects that can be serialized or deserialized\n+ * <p>To protect against deserialization vulnerabilities, application developers\n+ * need a clear description of the objects that can be deserialized\n@@ -74,3 +78,3 @@\n- * is constructed, the filter factory can identify the execution context based upon\n- * the current thread-local state, hierarchy of callers, library, module, and class loader.\n- * At that point, a policy for creating or selecting filters can choose a specific filter\n+ * is constructed, the filter factory can identify the execution context on the available\n+ * information, for example, the current thread-local state, hierarchy of callers, library, module,\n+ * and class loader. At that point, a policy for creating or selecting filters can choose a specific filter\n@@ -98,2 +102,2 @@\n- *     provides the {@link Config#getSerialFilter static JVM-wide filter} when invoked from the\n- *     {@link ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}\n+ *     provides the {@linkplain Config#getSerialFilter static JVM-wide filter} when invoked from the\n+ *     {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}\n@@ -102,1 +106,1 @@\n- *     See {@link Config#getSerialFilterFactory() getSerialFilterFactory}.\n+ *     See {@linkplain Config#getSerialFilterFactory() getSerialFilterFactory}.\n@@ -197,1 +201,1 @@\n- * <h2>Using the Filter Factory<\/h2>\n+ * <h3>Using the Filter Factory<\/h3>\n@@ -263,1 +267,1 @@\n-     * {@code Status.UNDECIDED} to {@code Status.REJECTED}, otherwise returns the status of the other filter.\n+     * {@code Status.UNDECIDED} to {@code Status.REJECTED}, otherwise returns the status of this filter.\n@@ -265,1 +269,1 @@\n-     * Appending a filter to reject undecided results for classes that have not been\n+     * Adding a filter to reject undecided results for classes that have not been\n@@ -273,1 +277,1 @@\n-     *     <li>Otherwise, return the status<\/li>\n+     *     <li>Otherwise, return the status of this filter<\/li>\n@@ -365,0 +369,2 @@\n+     * The static filter factory and the static filter apply to the whole Java runtime,\n+     * or \"JVM-wide\", there is only one of each.\n@@ -371,1 +377,7 @@\n-     * is invoked to determine the initial filter for the stream. A stream-specific filter can be set with\n+     * is invoked to determine the initial filter for the stream.\n+     * When called from the constructor, the current filter is `null` and the new filter is the\n+     * {@linkplain Config#getSerialFilter() static JVM-wide filter}. The factory determines and\n+     * returns the initial filter for the stream. The factory can create a composite filter\n+     * with other context-specific controls or just return the static JVM-wide filter.\n+     * <p>\n+     * A stream-specific filter can be set with\n@@ -373,2 +385,3 @@\n-     * The {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory} is also\n-     * invoked when a stream-specific filter is set to enable combining that filter with the initial filter.\n+     * If {@code ObjectInputStream.setObjectInputFilter} is called, the filter factory is called a second time\n+     * with the initial filter returned from the first call and the requested new filter.\n+     * The factory determines how to combine the two filters and returns a filter, replacing the filter on the stream.\n@@ -384,1 +397,1 @@\n-     * {@link Config#getSerialFilter() static JVM-wide filter}.\n+     * {@linkplain Config#getSerialFilter() static JVM-wide filter}.\n@@ -408,3 +421,3 @@\n-     * The class must have a public zero-argument constructor, implement the\n-     * {@link BinaryOperator} interface,\n-     * and provide its implementation.\n+     * The class must be public, must have a public zero-argument constructor, implement the\n+     * {@link BinaryOperator {@literal BinaryOperator<ObjectInputFilter>}} interface, provide its implementation and\n+     * be accessible via the {@linkplain ClassLoader#getSystemClassLoader() the application class loader}.\n@@ -431,1 +444,1 @@\n-        private final static String SERIAL_FILTER_PROPNAME = \"jdk.serialFilter\";\n+        private static final String SERIAL_FILTER_PROPNAME = \"jdk.serialFilter\";\n@@ -437,1 +450,6 @@\n-        private final static String SERIAL_FILTER_FACTORY_PROPNAME = \"jdk.serialFilterFactory\";\n+        private static final String SERIAL_FILTER_FACTORY_PROPNAME = \"jdk.serialFilterFactory\";\n+\n+        \/**\n+         * The property name to enable tracing of filters.\n+         *\/\n+        private static final String SERIAL_FILTER_TRACE_PROPNAME = \"jdk.serialFilterTrace\";\n@@ -456,0 +474,5 @@\n+        \/**\n+         * True when tracing of filters is enabled.\n+         *\/\n+        private static final boolean traceFilters;\n+\n@@ -483,0 +506,2 @@\n+            traceFilters = GetBooleanAction.privilegedGetProperty(SERIAL_FILTER_TRACE_PROPNAME);\n+\n@@ -484,1 +509,1 @@\n-            configLog = (filterString != null || factoryClassName != null)\n+            configLog = (filterString != null || factoryClassName != null || traceFilters)\n@@ -490,1 +515,1 @@\n-                configLog.log(System.Logger.Level.INFO,\n+                configLog.log(INFO,\n@@ -505,1 +530,1 @@\n-                configLog.log(System.Logger.Level.INFO,\n+                configLog.log(INFO,\n@@ -548,1 +573,1 @@\n-         * Logger for debugging.\n+         * Logger for filter actions.\n@@ -550,3 +575,3 @@\n-        private static void filterLog(System.Logger.Level level, String msg, Object... args) {\n-            if (configLog != null) {\n-                configLog.log(level, msg, args);\n+        private static void traceFilter(String msg, Object... args) {\n+            if (traceFilters && configLog != null) {\n+                configLog.log(TRACE, msg, args);\n@@ -589,1 +614,1 @@\n-         * If the filter factory has been {@link #setSerialFilterFactory(BinaryOperator) set} it is returned,\n+         * If the filter factory has been {@linkplain #setSerialFilterFactory(BinaryOperator) set} it is returned,\n@@ -592,1 +617,1 @@\n-         * {@link ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}\n+         * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}\n@@ -598,2 +623,2 @@\n-         * {@link #getSerialFilter static JVM-wide filter} when invoked from\n-         * {@link ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}.\n+         * {plain#getSerialFilter static JVM-wide filter} when invoked from\n+         * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}.\n@@ -602,2 +627,1 @@\n-         * unless it has already been set. The stream-specific filter can only be set once,\n-         * if it has already been set, an {@link IllegalStateException} is thrown.\n+         * unless it has already been set.\n@@ -756,1 +780,1 @@\n-         *                                          || cl.getClassLoader() == null);\n+         *                                          || cl.getClassLoader() == null, Status.UNDECIDED);\n@@ -784,1 +808,2 @@\n-         *     ObjectInputFilter f = rejectFilter(cl -> cl.getClassLoader() == ClassLoader.ClassLoader.getSystemClassLoader());\n+         *     ObjectInputFilter f = rejectFilter(cl ->\n+         *          cl.getClassLoader() == ClassLoader.ClassLoader.getSystemClassLoader(), Status.UNDECIDED);\n@@ -1057,0 +1082,1 @@\n+                            traceFilter(\"Pattern array class: {0}, filter: {1}\", clazz, this);\n@@ -1067,1 +1093,2 @@\n-                        return Status.UNDECIDED;\n+                        traceFilter(\"Pattern ALLOWED, primitive class: {0}, filter: {1}\", clazz, this);\n+                        return Status.ALLOWED;\n@@ -1075,1 +1102,3 @@\n-                        return status.orElse(Status.UNDECIDED);\n+                        Status s = status.orElse(Status.UNDECIDED);\n+                        traceFilter(\"Pattern {0}, class: {1}, filter: {2}\", s, cl, this);\n+                        return s;\n@@ -1079,1 +1108,1 @@\n-                return Status.ALLOWED;\n+                return UNDECIDED;\n@@ -1126,2 +1155,4 @@\n-                return (info.serialClass() != null &&\n-                        predicate.test(info.serialClass())) ? ifTrueStatus : ifFalseStatus;\n+                Class<?> clazz = info.serialClass();\n+                Status status = (clazz != null && predicate.test(clazz)) ? ifTrueStatus : ifFalseStatus;\n+                traceFilter(\"PredicateFilter {0}, filter: {1}\", status, this);\n+                return status;\n@@ -1188,1 +1219,3 @@\n-                if (REJECTED.equals(firstStatus))\n+                if (REJECTED.equals(firstStatus)) {\n+                    traceFilter(\"MergeFilter REJECT first: {0}, filter: {1}\",\n+                            firstStatus, this);\n@@ -1190,0 +1223,1 @@\n+                }\n@@ -1191,1 +1225,3 @@\n-                if (REJECTED.equals(secondStatus))\n+                if (REJECTED.equals(secondStatus)) {\n+                    traceFilter(\"MergeFilter REJECT {0}, {1}, filter: {2}\",\n+                            firstStatus, secondStatus, this);\n@@ -1193,0 +1229,1 @@\n+                }\n@@ -1194,0 +1231,2 @@\n+                    traceFilter(\"MergeFilter ALLOW either: {0}, {1}, filter: {2}\",\n+                            firstStatus, secondStatus, this);\n@@ -1196,0 +1235,2 @@\n+                traceFilter(\"MergeFilter UNDECIDED {0}, {1}, filter: {2}\",\n+                        firstStatus, secondStatus, this);\n@@ -1206,1 +1247,1 @@\n-         * A filter that maps the status {@code UNDECIDED} to {@code REJECTED}.\n+         * A filter that maps the status {@code UNDECIDED} to {@code REJECTED} when checking a class.\n@@ -1216,3 +1257,2 @@\n-             * Apply the filter and return the status if ALLOWED, otherwise REJECTED.\n-             * The effect is to map UNDECIDED to REJECTED, and otherwise return the status.\n-             *\n+             * Apply the filter and return the status if not UNDECIDED and checking a class.\n+             * Make an exception for Primitive classes that are implicitly allowed by the pattern based filte.\n@@ -1220,1 +1260,1 @@\n-             * @return the status of applying the filter if ALLOWED, otherwise REJECTED\n+             * @return the status of applying the filter and checking the class\n@@ -1223,3 +1263,8 @@\n-                return ALLOWED.equals(Objects.requireNonNull(filter.checkInput(info), \"status\"))\n-                        ? ALLOWED\n-                        : REJECTED;\n+                Status status = Objects.requireNonNull(filter.checkInput(info), \"status\");\n+                Class<?> clazz = info.serialClass();\n+                if (clazz == null || !UNDECIDED.equals(status))\n+                    return status;\n+                status = (clazz.isPrimitive()) ? ALLOWED : REJECTED;\n+                traceFilter(\"RejectUndecidedClass {0} class: {1}, filter: {2}\",\n+                        status, clazz, this);\n+                return status;\n@@ -1236,2 +1281,2 @@\n-         * {@link #getSerialFilter static serial filter} when invoked from\n-         * {@link ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}.\n+         * {@linkplain #getSerialFilter static serial filter} when invoked from\n+         * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}.\n@@ -1269,3 +1314,2 @@\n-             * @throws SecurityException if there is security manager and the\n-             *       {@code SerializablePermission(\"serialFilter\")} is not granted\n-             *\/@Override\n+             *\/\n+            @Override\n@@ -1282,1 +1326,5 @@\n-                    return Config.getSerialFilter();\n+                    ObjectInputFilter filter = Config.getSerialFilter();\n+                    if (filter != null)\n+                        traceFilter(\"Builtin factory: {0} -> conf: {1}\",\n+                            oldFilter, Config.getSerialFilter());\n+                    return filter;\n@@ -1284,0 +1332,3 @@\n+                if (newFilter != null)\n+                    traceFilter(\"Builtin factory: {0} -> new: {1}\",\n+                        oldFilter, newFilter);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":108,"deletions":57,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -192,23 +192,6 @@\n- *\n- * The deserialization filter for a stream is determined in one of the following ways:\n- * <ul>\n- * <li>A JVM-wide filter factory can be set via {@link Config#setSerialFilterFactory(BinaryOperator)}\n- *     or the system property {@code jdk.serialFilterFactory} or\n- *     the security property {@code jdk.serialFilterFactory}.\n- *     The filter factory is invoked for each new ObjectInputStream and\n- *     when a filter is set for a stream.\n- *     The filter factory determines the filter to be used for each stream based\n- *     on its inputs, thread context, other filters, or state that is available.\n- * <li>If a JVM-wide filter factory is not set, a builtin deserialization filter factory\n- *     provides the {@link Config#getSerialFilter static JVM-wide filter} when invoked from the\n- *     {@link ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}\n- *     and replaces the static filter when invoked from\n- *     {@link ObjectInputStream#setObjectInputFilter(ObjectInputFilter)}.\n- *     See {@link Config#getSerialFilterFactory() getSerialFilterFactory}.\n- * <li>A stream-specific filter can be set for an individual ObjectInputStream\n- *     via {@link ObjectInputStream#setObjectInputFilter setObjectInputFilter}.\n- *     Note that the filter may be used directly or combined with other filters by the\n- *     {@linkplain Config#setSerialFilterFactory(BinaryOperator) JVM-wide filter factory}.\n- * <\/ul>\n- *\n- * The JVM-wide factory ensures that a filter can be set on every {@link ObjectInputStream}\n+ * <p>\n+ * The key to disabling deserialization attacks is to prevent instances of\n+ * arbitrary classes from being deserialized, thereby preventing the direct or\n+ * indirect execution of their methods.  Each stream has an optional deserialization filter\n+ * to check the classes and resource limits during deserialization.\n+ * The JVM-wide filter factory ensures that a filter can be set on every {@link ObjectInputStream}\n@@ -216,0 +199,5 @@\n+ * The {@linkplain #ObjectInputStream() ObjectInputStream constructors} invoke the filter factory\n+ * to select the initial filter and it is updated by {@link #setObjectInputFilter}.\n+ * {@link ObjectInputFilter} describes how to use filters and\n+ * {@link ObjectInputFilter.Config} describes how to configure the filter and filter factory.\n+ * <p>\n@@ -1268,1 +1256,1 @@\n-     * The filter must be set before reading any objects from the stream;\n+     * The filter must be set and only set once before reading any objects from the stream;\n@@ -1274,2 +1262,2 @@\n-     * If there is a non-null filter for the stream, one was set in the constructor, then the filter factory\n-     * must return a replacement filter, it is not permitted to remove filtering once established.\n+     * If there is a non-null filter for the stream, one was set in the constructor, and the filter factory\n+     * must return a non-null filter, it is not permitted to remove filtering once established.\n@@ -1339,1 +1327,1 @@\n-     *       if the filter can not be replaced.\n+     *       if the filter has already been.\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":15,"deletions":27,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n- * @run testng  SerialFactoryExample\n- * @run testng\/othervm SerialFactoryExample\n- * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread  SerialFactoryExample\n+ * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFactoryExample\n+ * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFactoryExample\n+ * @run testng\/othervm -Djdk.serialFilterFactory=SerialFactoryExample$FilterInThread -Djdk.serialFilterTrace=true SerialFactoryExample\n@@ -92,1 +92,11 @@\n-                {10, Filters.allowPlatformClasses().merge(ObjectInputFilter.Config.allowMaxLimits()),\n+                {10, Filters.allowPlatformClasses(),\n+                        NO_EXCEPTION},\n+                {new Integer[10], ObjectInputFilter.Config.createFilter(\"SerialFactoryExample$Point\"),\n+                        InvalidClassException.class},       \/\/ Component type is tested and not allowed\n+                {new int[10], ObjectInputFilter.Config.createFilter(\"SerialFactoryExample$Point\"),\n+                        NO_EXCEPTION},\n+                {int.class, ObjectInputFilter.Config.createFilter(\"SerialFactoryExample$Point\"),\n+                        NO_EXCEPTION},\n+                {int.class, Filters.allowPlatformClasses(),\n+                        NO_EXCEPTION},\n+                {new Point[] {new Point(1, 1)}, ObjectInputFilter.Config.createFilter(\"SerialFactoryExample$Point\"),\n@@ -269,1 +279,0 @@\n-                \/\/ Prepend next to the threadFilter, both may be null or non-null\n@@ -276,2 +285,2 @@\n-                    \/\/ Prepend the next filter to the thread filter, if any\n-                    \/\/ Initially this would be the static JVM-wide filter passed from the OIS constructor\n+                    \/\/ Prepend the `next` filter to the thread filter, if any\n+                    \/\/ Initially this is the static JVM-wide filter passed from the OIS constructor\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryExample.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}