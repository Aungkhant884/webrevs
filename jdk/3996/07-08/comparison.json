{"files":[{"patch":"@@ -66,3 +66,3 @@\n- * The parts of deserialization filtering are the filters, composite filters, and the filter factory.\n- * Each filter performs checks on classes and resource limits and decides whether to\n- * reject, allow, or undecided the class or resource.\n+ * The parts of deserialization filtering are the filters, composite filters, and filter factory.\n+ * Each filter performs checks on classes and resource limits to determine the status as\n+ * rejected, allowed, or undecided.\n@@ -73,2 +73,3 @@\n- * <p>For simple cases, a static JVM-wide filter can be set for the entire application.\n- * It can be set either with a system property on the command line or by\n+ * <p>For simple cases, a static JVM-wide filter can be set for the entire application,\n+ * without setting a filter factory.\n+ * The JVM-wide filter can be set either with a system property on the command line or by\n@@ -76,2 +77,2 @@\n- * In this simple case, the {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory}\n- * is the builtin filter factory; it provides the {@linkplain Config#getSerialFilter static JVM-wide filter}\n+ * No custom filter factory needs to be specified, defaulting to the builtin filter factory.\n+ * The builtin filter factory provides the {@linkplain Config#getSerialFilter static JVM-wide filter}\n@@ -79,2 +80,3 @@\n- * For example, a filter that allows example classes, allows classes in the\n- * {@code java.base} module, and rejects all other classes:\n+ *\n+ * <p>For example, a filter that allows example classes, allows classes in the\n+ * {@code java.base} module, and rejects all other classes can be set:\n@@ -84,2 +86,2 @@\n- * Or\n- * <pre>{@code Programmatically:\n+ *\n+ * <pre>{@code Or programmatically:\n@@ -89,2 +91,2 @@\n- * <p>In an application with multiple execution contexts, the\n- * {@linkplain Config#setSerialFilterFactory(BinaryOperator) filter factory} can better\n+ * <p>In an application with multiple execution contexts, the application can provide a\n+ * {@linkplain Config#setSerialFilterFactory(BinaryOperator) filter factory} to\n@@ -92,1 +94,1 @@\n- * is constructed, the filter factory can identify the execution context from the available\n+ * is constructed, the filter factory is called to identify the execution context from the available\n@@ -94,2 +96,2 @@\n- * and class loader. At that point, a policy for creating or selecting filters can choose a specific filter\n- * or composition of filters based on the context.\n+ * and class loader. At that point, the filter factory policy for creating or selecting filters\n+ * can choose a specific filter or composition of filters based on the context.\n@@ -110,2 +112,1 @@\n- * the first parameter is the filter currently set on the stream (which may have been set in the constructor,\n- * or by a previous invocation of {@code ObjectInputStream.setObjectInputFilter},\n+ * the first parameter is the filter currently set on the stream (which was set in the constructor),\n@@ -123,2 +124,0 @@\n- *     The filter factory is invoked for each new {@link ObjectInputStream} and\n- *     when a filter is set for a stream.\n@@ -135,3 +134,4 @@\n- * or to {@linkplain #allowFilter(Predicate, Status) allow} or\n- * {@linkplain #rejectFilter(Predicate, Status) reject} classes based on a\n- * {@linkplain Predicate predicate of a class}.\n+ * or based on a {@linkplain Predicate predicate of a class} to\n+ * {@linkplain #allowFilter(Predicate, Status) allow} or\n+ * {@linkplain #rejectFilter(Predicate, Status) reject} classes.\n+ *.\n@@ -189,1 +189,1 @@\n- * to filter every deserialization operation that takes place in a thread.\n+ * to check every deserialization operation that takes place in a thread.\n@@ -207,1 +207,1 @@\n- *             \/\/ Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no previous filter\n+ *             \/\/ Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no current filter\n@@ -210,1 +210,1 @@\n- *                 \/\/ Prepend a filter to assert that all classes have been Allowed or Rejected\n+ *                 \/\/ Prepend a filter to reject all UNDECIDED results\n@@ -676,1 +676,2 @@\n-                    throw new ExceptionInInitializerError(ex);\n+                    throw new ExceptionInInitializerError(\n+                            \"FilterFactory configuration: jdk.serialFilterFactory: \" + ex.getMessage());\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1343,0 +1343,1 @@\n+        streamFilterSet = true;\n@@ -1344,1 +1345,1 @@\n-        ObjectInputFilter next =  Config.getSerialFilterFactory()\n+        ObjectInputFilter next = Config.getSerialFilterFactory()\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -982,0 +982,12 @@\n+\n+#\n+# Deserialization system-wide filter factory\n+#\n+# A filter factory class name is used to configure the system-wide filter factory.\n+# The class must be public, must have a public zero-argument constructor, implement the\n+# java.util.stream.BinaryOperator<ObjectInputFilter> interface, provide its implementation and\n+# be accessible via the application class loader.\n+# See java.io.ObjectInputFilter for more information.\n+#\n+#jdk.serialFilterFactory=<classname>\n+\n@@ -983,1 +995,1 @@\n-# Serialization system-wide filter\n+# Deserialization system-wide filter\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,102 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.ObjectInputFilter;\n-import java.io.ObjectInputStream;\n-import java.security.AccessControlException;\n-\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-import org.testng.Assert;\n-\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n-\/* @test\n- * @build FactoryWithSecurityManagerTest SerialFilterTest\n- * @run testng\/othervm FactoryWithSecurityManagerTest\n- * @run testng\/othervm\/policy=security.policy.without.globalFilter\n- *          -Djava.security.manager=default FactoryWithSecurityManagerTest\n- * @run testng\/othervm\/policy=security.policy\n- *          -Djava.security.manager=default\n- *          -Djdk.serialFilter=java.lang.Integer FactoryWithSecurityManagerTest\n- *\n- * @summary Test that setting specific filter is checked by security manager,\n- *          setting process-wide filter is checked by security manager.\n- *\/\n-\n-@Test\n-public class FactoryWithSecurityManagerTest {\n-\n-    byte[] bytes;\n-    boolean setSecurityManager;\n-    ObjectInputFilter filter;\n-\n-    @BeforeClass\n-    public void setup() throws Exception {\n-        setSecurityManager = System.getSecurityManager() != null;\n-        Object toDeserialized = Long.MAX_VALUE;\n-        bytes = SerialFilterTest.writeObjects(toDeserialized);\n-        filter = ObjectInputFilter.Config.createFilter(\"java.lang.Long\");\n-    }\n-\n-    \/**\n-     * Test that setting process-wide filter is checked by security manager.\n-     *\/\n-    @Test\n-    public void testGlobalFilter() throws Exception {\n-        ObjectInputFilter global = ObjectInputFilter.Config.getSerialFilter();\n-\n-        try  {\n-            ObjectInputFilter.Config.setSerialFilter(filter);\n-            assertFalse(setSecurityManager,\n-                    \"When SecurityManager exists, without \"\n-                            + \"java.io.SerializablePermission(serialFilter) \"\n-                            + \"IllegalStateException should be thrown\");\n-        } catch (AccessControlException ex) {\n-            assertTrue(setSecurityManager);\n-            assertTrue(ex.getMessage().contains(\"java.io.SerializablePermission\"));\n-            assertTrue(ex.getMessage().contains(\"serialFilter\"));\n-        } catch (IllegalStateException ise) {\n-            \/\/ ISE should occur only if global filter already set\n-            Assert.assertNotNull(global, \"Global filter should be non-null\");\n-        }\n-    }\n-\n-    \/**\n-     * Test that setting specific filter is checked by security manager.\n-     *\/\n-    @Test(dependsOnMethods = { \"testGlobalFilter\" })\n-    public void testSpecificFilter() throws Exception {\n-        try (ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n-             ObjectInputStream ois = new ObjectInputStream(bais)) {\n-            ois.setObjectInputFilter(filter);\n-            Object o = ois.readObject();\n-        } catch (AccessControlException ex) {\n-            assertTrue(setSecurityManager);\n-            assertTrue(ex.getMessage().contains(\"java.io.SerializablePermission\"));\n-            assertTrue(ex.getMessage().contains(\"serialFilter\"));\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/FactoryWithSecurityManagerTest.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -266,1 +266,1 @@\n-                \/\/ Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no previous filter\n+                \/\/ Called from the OIS constructor or perhaps OIS.setObjectInputFilter with no current filter\n@@ -276,1 +276,1 @@\n-                    \/\/ Prepend a filter to assert that all classes have been Allowed or Rejected\n+                    \/\/ Prepend a filter to reject all UNDECIDED results\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,3 @@\n+import java.io.SerializablePermission;\n+import java.security.AccessControlException;\n+import java.security.Permission;\n@@ -54,0 +57,7 @@\n+ * @run testng\/othervm\/policy=security.policy\n+ *        -Djava.security.properties=${test.src}\/java.security-extra-factory\n+ *        -Djava.security.debug=properties SerialFilterFactoryTest\n+ * @run testng\/othervm\/fail  -Djdk.serialFilterFactory=ForcedError_NoSuchClass SerialFilterFactoryTest\n+ * @run testng\/othervm\/policy=security.policy SerialFilterFactoryTest\n+ * @run testng\/othervm\/policy=security.policy.without.globalFilter SerialFilterFactoryTest\n+\n@@ -118,0 +128,18 @@\n+    \/**\n+     * Returns true if serialFilter actions are ok, either no SM or SM has serialFilter Permission\n+     *\/\n+    private static boolean hasFilterPerm() {\n+        boolean hasSerialPerm = true;\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            try {\n+                Permission p = new SerializablePermission(\"serialFilter\");\n+                sm.checkPermission(p);\n+                hasSerialPerm = true;\n+            } catch (AccessControlException ace2) {\n+                hasSerialPerm = false;      \/\/ SM and serialFilter not allowed\n+            }\n+        }\n+        return hasSerialPerm;\n+    }\n+\n@@ -134,1 +162,1 @@\n-    static void testNull() {\n+    void testNull() {\n@@ -145,1 +173,5 @@\n-    static void testSecondSetShouldThrow() {\n+    void testSecondSetShouldThrow() {\n+        if (System.getSecurityManager() != null) {\n+            \/\/ Skip test when running with SM\n+            return;\n+        }\n@@ -176,1 +208,1 @@\n-    static void testCase(MyFilterFactory dynFilterFactory, Validator dynFilter, Validator streamFilter)\n+    void testCase(MyFilterFactory dynFilterFactory, Validator dynFilter, Validator streamFilter)\n@@ -180,2 +212,12 @@\n-        final ObjectInputFilter configFilter = setupFilter(dynFilter);\n-        final MyFilterFactory factory = setupFilterFactory(dynFilterFactory);\n+        ObjectInputFilter configFilter;\n+        MyFilterFactory factory;\n+        try {\n+            configFilter = setupFilter(dynFilter);\n+            factory = setupFilterFactory(dynFilterFactory);\n+            Assert.assertTrue(hasFilterPerm(),\n+                    \"setSerialFilterFactory and setFilterFactory succeeded without serialFilter permission\");\n+        } catch (AccessControlException ace) {\n+            Assert.assertFalse(hasFilterPerm(),\n+                    \"setSerialFilterFactory failed even with serialFilter permission\");\n+            return;         \/\/ test complete\n+        }\n@@ -205,0 +247,3 @@\n+\n+            \/\/ Verify that it can not be set again\n+            Assert.assertThrows(IllegalStateException.class, () -> ois.setObjectInputFilter(streamFilter));\n@@ -228,3 +273,6 @@\n-        BinaryOperator<ObjectInputFilter> factory = Config.getSerialFilterFactory();\n-        IllegalStateException ise = Assert.expectThrows(IllegalStateException.class, () -> Config.setSerialFilterFactory(factory));\n-        Assert.assertEquals(ise.getMessage(), \"FilterFactory can not be set after any deserialization\");\n+        if (hasFilterPerm()) {\n+            \/\/ Only test if is allowed by SM.\n+            BinaryOperator<ObjectInputFilter> factory = Config.getSerialFilterFactory();\n+            IllegalStateException ise = Assert.expectThrows(IllegalStateException.class, () -> Config.setSerialFilterFactory(factory));\n+            Assert.assertEquals(ise.getMessage(), \"FilterFactory can not be set after any deserialization\");\n+        }\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":56,"deletions":8,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n- * @summary Test ObjectInputFilters\n+ * @summary Test ObjectInputFilters using Builtin Filter Factory\n@@ -284,2 +284,4 @@\n-        try {\n-            byte[] bytes = writeObjects(\"text1\");    \/\/ an object\n+        Validator[] filterCases = {\n+                validator1,     \/\/ setting filter to a non-null filter\n+                null,           \/\/ setting stream-specific filter to null\n+        };\n@@ -287,6 +289,3 @@\n-            try (ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n-                 ObjectInputStream ois = new ObjectInputStream(bais)) {\n-                \/\/ Check the initial filter is the global filter; may be null\n-                ObjectInputFilter global = ObjectInputFilter.Config.getSerialFilter();\n-                ObjectInputFilter initial = ois.getObjectInputFilter();\n-                Assert.assertEquals(global, initial, \"initial filter should be the global filter\");\n+        for (Validator validator : filterCases) {\n+            try {\n+                byte[] bytes = writeObjects(\"text1\");    \/\/ an object\n@@ -294,4 +293,5 @@\n-                \/\/ Check if it can be set to null\n-                ois.setObjectInputFilter(null);\n-                ObjectInputFilter filter = ois.getObjectInputFilter();\n-                Assert.assertNull(filter, \"set to null should be null\");\n+                try (ByteArrayInputStream bais = new ByteArrayInputStream(bytes); ObjectInputStream ois = new ObjectInputStream(bais)) {\n+                    \/\/ Check the initial filter is the global filter; may be null\n+                    ObjectInputFilter global = ObjectInputFilter.Config.getSerialFilter();\n+                    ObjectInputFilter initial = ois.getObjectInputFilter();\n+                    Assert.assertEquals(global, initial, \"initial filter should be the global filter\");\n@@ -299,7 +299,12 @@\n-                ois.setObjectInputFilter(validator1);\n-                Object o = ois.readObject();\n-                try {\n-                    ois.setObjectInputFilter(validator2);\n-                    Assert.fail(\"Should not be able to set filter twice\");\n-                } catch (IllegalStateException ise) {\n-                    \/\/ success, the exception was expected\n+                    ois.setObjectInputFilter(validator);\n+                    Object o = ois.readObject();\n+                    try {\n+                        ois.setObjectInputFilter(validator2);\n+                        Assert.fail(\"Should not be able to set filter twice\");\n+                    } catch (IllegalStateException ise) {\n+                        \/\/ success, the exception was expected\n+                    }\n+                } catch (EOFException eof) {\n+                    Assert.fail(\"Should not reach end-of-file\", eof);\n+                } catch (ClassNotFoundException cnf) {\n+                    Assert.fail(\"Deserializing\", cnf);\n@@ -307,4 +312,2 @@\n-            } catch (EOFException eof) {\n-                Assert.fail(\"Should not reach end-of-file\", eof);\n-            } catch (ClassNotFoundException cnf) {\n-                Assert.fail(\"Deserializing\", cnf);\n+            } catch (IOException ex) {\n+                Assert.fail(\"Unexpected IOException\", ex);\n@@ -312,2 +315,0 @@\n-        } catch (IOException ex) {\n-            Assert.fail(\"Unexpected IOException\", ex);\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+# Deserialization Input Filter Factory\n+# See conf\/security\/java.security for pattern synatx\n+#\n+jdk.serialFilterFactory=SerialFilterFactoryTest$PropertyFilterFactory\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/java.security-extra-factory","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}