{"files":[{"patch":"@@ -127,1 +127,1 @@\n- *     and replaces the static filter and when invoked from\n+ *     and replaces the static filter when invoked from\n@@ -211,1 +211,1 @@\n- *                 filter = ObjectInputFilter.Config.rejectUndecidedClass(filter);\n+ *                 filter = ObjectInputFilter.rejectUndecidedClass(filter);\n@@ -217,2 +217,2 @@\n- *                 filter = ObjectInputFilter.Config.merge(next, filter);\n- *                 filter = ObjectInputFilter.Config.rejectUndecidedClass(filter);\n+ *                 filter = ObjectInputFilter.merge(next, filter);\n+ *                 filter = ObjectInputFilter.rejectUndecidedClass(filter);\n@@ -227,2 +227,2 @@\n- *                 next = ObjectInputFilter.Config.merge(next, curr);\n- *                 next = ObjectInputFilter.Config.rejectUndecidedClass(next);\n+ *                 next = ObjectInputFilter.merge(next, curr);\n+ *                 next = ObjectInputFilter.rejectUndecidedClass(next);\n@@ -513,1 +513,1 @@\n-     * or \"JVM-wide\", there is only one of each, for a complete description of\n+     * or \"JVM-wide\", there is only one of each. For a complete description of\n@@ -584,1 +584,2 @@\n-         * Boolean to indicate that the filter factory has been used and cannot be changed thereafter.\n+         * Boolean to indicate that the filter factory has been used by an ObjectInputStream\n+         * constructor and cannot be changed thereafter.\n@@ -768,1 +769,3 @@\n-         * {@link ObjectInputFilter.Config#serialFilterFactory} does the enforcement.\n+         * {@link ObjectInputFilter.Config#setSerialFilterFactory(BinaryOperator)} enforces\n+         * the requirement that the filter factory can not be changed after an ObjectInputStream\n+         * is created.\n@@ -792,1 +795,3 @@\n-         * The current and new filter may each be {@code null} and the factory may return {@code null}.\n+         * If the current filter is {@code non-null}, the filter factory must return a\n+         * {@code non-null} filter; this is to prevent unintentional disabling of filtering\n+         * after it has been enabled.\n@@ -816,4 +821,6 @@\n-            if (serialFilterFactory instanceof BuiltinFilterFactory) {\n-                \/\/ The factory can be set only if it has been initialized to the builtin.\n-                serialFilterFactory = filterFactory;\n-                return;\n+            synchronized (serialFilterLock) {\n+                if (serialFilterFactory instanceof BuiltinFilterFactory) {\n+                    \/\/ The factory can be set only if it has been initialized to the builtin.\n+                    serialFilterFactory = filterFactory;\n+                    return;\n+                }\n@@ -1250,1 +1257,1 @@\n-             * otherwise, ALLOWED if either of the filters returns ALLOWED.\n+             * otherwise, ALLOWED if either of the filters returns ALLOWED,\n@@ -1255,1 +1262,1 @@\n-             *          otherwise, ALLOWED if either of the filters returns ALLOWED.\n+             *          otherwise, ALLOWED if either of the filters returns ALLOWED,\n@@ -1377,7 +1384,0 @@\n-         * The builtin deserialization filter factory provides the\n-         * {@linkplain #getSerialFilter static serial filter} when invoked from\n-         * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors}.\n-         * When invoked from {@link ObjectInputStream#setObjectInputFilter(ObjectInputFilter) setObjectInputFilter}\n-         * to set the stream-specific filter the requested filter replaces the static serial filter,\n-         * unless it has already been set. The stream-specific filter can only be set once,\n-         * if it has already been set, {@link IllegalStateException} is thrown.\n@@ -1386,1 +1386,5 @@\n-         * {@link ObjectInputStream#setObjectInputFilter}.\n+         * {@link ObjectInputStream#setObjectInputFilter} in cooperation with {@code ObjectInputStream}.\n+         * Checking that the stream-specific filter can only be set once and throwing\n+         * {@link IllegalStateException} is handled by\n+         * {@link ObjectInputStream#setObjectInputFilter(ObjectInputFilter)}.\n+         *\n@@ -1391,9 +1395,1 @@\n-             * Returns the ObjectInputFilter to be used for an ObjectInputStream.\n-             * This method implements the builtin deserialization filter factory.\n-             * If the {@code oldFilter} and {@code newFilter} are null,\n-             *     the {@link Config#getSerialFilter()} is returned.\n-             * If the {@code oldFilter} is {@code null} and {@code newFilter} is {@code not null},\n-             *     the {@code newFilter} is returned.\n-             * If the {@code oldFilter} is equal to {@link Config#getSerialFilter},\n-             *     the {@code newFilter} is returned.\n-             * Otherwise {@code IllegalStateException} exception is thrown.\n+             * Returns the {@code ObjectInputFilter} to be used for an ObjectInputStream.\n@@ -1401,3 +1397,10 @@\n-             * <p>This is backward compatible behavior with earlier versions of\n-             * {@link ObjectInputStream#setObjectInputFilter},\n-             * and the initial filter in the {@link ObjectInputStream} constructor.\n+             * <p>When invoked from the\n+             * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) ObjectInputStream constructors},\n+             * the first parameter is {@code null} and the second parameter is the\n+             * {@linkplain ObjectInputFilter.Config#getSerialFilter() static JVM-wide filter};\n+             * the value returned is {@code newFilter}, the static JVM-wide filter.\n+             * <p>\n+             * When invoked from\n+             * {@link ObjectInputStream#setObjectInputFilter(ObjectInputFilter) setObjectInputFilter}\n+             * to set the stream-specific filter, the value is {@code newFilter} to replace the\n+             * previous filter.\n@@ -1407,3 +1410,1 @@\n-             * @return an ObjectInputFilter, the new Filter\n-             * @throws IllegalStateException if the {@linkplain ObjectInputStream#getObjectInputFilter() current filter}\n-             *       is not {@code null} and is not the JVM-wide filter\n+             * @return an ObjectInputFilter, the new Filter, may be null\n@@ -1413,18 +1414,1 @@\n-                if (oldFilter != null) {\n-                    \/\/ JEP 290 spec restricts setting the stream-specific filter more than once.\n-                    \/\/ Allow replacement of the JVM-wide filter but not replacement\n-                    \/\/ of a stream-specific filter that has been set.\n-                    if (oldFilter != getSerialFilter()) {\n-                        throw new IllegalStateException(\"filter can not be set more than once\");\n-                    }\n-                } else if (newFilter == null) {\n-                    \/\/ Called from constructor, default to the configured filter, (may be null)\n-                    ObjectInputFilter filter = Config.getSerialFilter();\n-                    if (filter != null)\n-                        traceFilter(\"Builtin factory: {0} -> conf: {1}\",\n-                            oldFilter, Config.getSerialFilter());\n-                    return filter;\n-                }\n-                if (newFilter != null)\n-                    traceFilter(\"Builtin factory: {0} -> new: {1}\",\n-                        oldFilter, newFilter);\n+                traceFilter(\"Builtin factory: {0} -> new: {1}\", oldFilter, newFilter);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":41,"deletions":57,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n- * to select the initial filter and it is updated by {@link #setObjectInputFilter}.\n+ * to select the initial filter which may be updated or replaced by {@link #setObjectInputFilter}.\n@@ -1256,1 +1256,9 @@\n-     * The filter can be set and only set once before reading any objects from the stream;\n+     *\n+     * The deserialization filter is set to the filter returned by invoking the\n+     * {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory}\n+     * with the {@linkplain #getObjectInputFilter() current filter} and the {@code filter} parameter.\n+     * The current filter was set in the\n+     * {@linkplain #ObjectInputStream() ObjectInputStream constructors} by invoking the\n+     * {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory} and may be {@code null}.\n+     * {@linkplain #setObjectInputFilter(ObjectInputFilter)} This method} can be called\n+     * once and only once before reading any objects from the stream;\n@@ -1259,6 +1267,3 @@\n-     * <p>The deserialization filter is set to the filter returned\n-     * by invoking the {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory}\n-     * with the current filter and the {@code filter} parameter.\n-     * If there is a non-null filter for the stream, one was set in the constructor, and the filter factory\n-     * must return a non-null filter. It is not permitted to remove filtering once established.\n-     * See the {@linkplain ObjectInputFilter filter models} for examples of composition and delegation.\n+     * <p>It is not permitted to replace a {@code non-null} filter with a {@code null} filter.\n+     * If the {@linkplain #getObjectInputFilter() current filter} is {@code non-null},\n+     * the value returned from the filter factory must be {@code non-null}.\n@@ -1333,1 +1338,0 @@\n-            \/\/ TBD double checks, here and in the default serialFilterFactory\n@@ -1341,1 +1345,1 @@\n-            throw new IllegalStateException(\"filter can not be replaced\");\n+            throw new IllegalStateException(\"filter can not be set more than once\");\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -82,2 +82,0 @@\n-    private static final Class<? extends Exception> NO_EXCEPTION = null;\n-\n@@ -137,1 +135,1 @@\n-            Assert.assertTrue(expected.equals(REJECTED), \"Exception should not have occurred\");\n+            Assert.assertEquals(REJECTED, expected, \"Exception should not have occurred\");\n@@ -255,1 +253,1 @@\n-         * The method mayy be called a second time from {@code ObjectInputStream.setObjectInputFilter(next)}\n+         * The method may be called a second time from {@code ObjectInputStream.setObjectInputFilter(next)}\n@@ -303,0 +301,1 @@\n+\n@@ -334,1 +333,1 @@\n-                    \/\/ Prepend a filter to assert that all classes have been Allowed or Rejected\n+                    \/\/ Prepend a filter to reject all UNDECIDED results\n@@ -360,1 +359,1 @@\n-         * Apply the filter and invoke the runnable.\n+         * Applies the filter to the thread and invokes the runnable.\n@@ -611,2 +610,1 @@\n-                Status status = (clazz != null && predicate.test(clazz)) ? ifTrueStatus : ifFalseStatus;\n-                return status;\n+                return (clazz != null && predicate.test(clazz)) ? ifTrueStatus : ifFalseStatus;\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFactoryExample.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}