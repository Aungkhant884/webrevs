{"files":[{"patch":"@@ -47,1 +47,1 @@\n-import static java.lang.System.Logger.Level.INFO;\n+import static java.lang.System.Logger.Level.DEBUG;\n@@ -103,2 +103,2 @@\n- * <p>The JVM-wide filter factory is a function invoked when each {@link ObjectInputStream}\n- * {@linkplain ObjectInputStream#ObjectInputStream() is constructed} and when the\n+ * <p>The JVM-wide filter factory is a function invoked when each {@link ObjectInputStream} is\n+ * {@linkplain ObjectInputStream#ObjectInputStream() constructed} and when the\n@@ -137,1 +137,0 @@\n- *.\n@@ -170,1 +169,1 @@\n- * by each {@linkplain ObjectInputStream} in each context of the application.\n+ * by each {@link ObjectInputStream} in each context of the application.\n@@ -318,1 +317,1 @@\n-     * @param predicate a predicate to test a non-null Class, non-null\n+     * @param predicate a predicate to test a non-null Class\n@@ -351,1 +350,1 @@\n-     * @param predicate a predicate to test a non-null Class, non-null\n+     * @param predicate a predicate to test a non-null Class\n@@ -380,1 +379,1 @@\n-     * @param filter a filter, non-null\n+     * @param filter a filter\n@@ -395,1 +394,1 @@\n-     * if the class is an array and the base component type is not allowed,\n+     * the class is an array and the base component type is not {@code ALLOWED},\n@@ -420,1 +419,1 @@\n-     * @param filter a filter, non-null\n+     * @param filter a filter\n@@ -530,0 +529,4 @@\n+     *\n+     * <p> If only `jdk.serialFilter` is set and not `jdk.serialFilterFactory` the builtin\n+     * filter factory, compatible with previous versions, is set and can not be replaced,\n+     * see below to override the builtin filter factory.\n@@ -532,2 +535,3 @@\n-     * {@systemProperty jdk.serialFilterFactory}, its value names the class to configure the\n-     * JVM-wide deserialization filter factory.\n+     * {@systemProperty jdk.serialFilterFactory} or the {@link java.security.Security} property\n+     * of the same name, its value names the class to configure the JVM-wide deserialization\n+     * filter factory or the special value `OVERRIDE`.\n@@ -536,1 +540,7 @@\n-     * The class must be public, must have a public zero-argument constructor, implement the\n+     *\n+     * If the value is `OVERRIDE`, the filter factory can be set by the application before\n+     * the first deserialization using {@link Config#setSerialFilterFactory(BinaryOperator)};\n+     * If it remains unset, the filter factory is a builtin filter factory compatible\n+     * with previous versions.\n+     *\n+     * <p>If not `OVERRIDE`, the class must be public, must have a public zero-argument constructor, implement the\n@@ -543,1 +553,2 @@\n-     * Setting the {@code jdk.serialFilterFactory} with {@link System#setProperty(String, String)\n+     *\n+     * <p>Setting the {@code jdk.serialFilterFactory} with {@link System#setProperty(String, String)\n@@ -584,2 +595,4 @@\n-         * Boolean to indicate that the filter factory has been used by an ObjectInputStream\n-         * constructor and cannot be changed thereafter.\n+         * Boolean to indicate that the filter factory can not be set or replaced.\n+         * - an ObjectInputStream has already been created using the current filter factory\n+         * - has been set on the command line\n+         * - jdk.serialFilter is set and jdk.serialFilterFactory is unset, the builtin can not be replaced\n@@ -588,1 +601,1 @@\n-        private static final AtomicBoolean filterFactoryUsed = new AtomicBoolean(false);\n+        private static final AtomicBoolean filterFactoryNoReplace = new AtomicBoolean(false);\n@@ -637,1 +650,1 @@\n-                configLog.log(INFO,\n+                configLog.log(DEBUG,\n@@ -650,3 +663,10 @@\n-            BinaryOperator<ObjectInputFilter> factory;\n-            if (factoryClassName != null) {\n-                configLog.log(INFO,\n+            if (factoryClassName == null || \"OVERRIDE\".equals(factoryClassName)) {\n+                serialFilterFactory = new BuiltinFilterFactory();\n+                if (serialFilter != null && factoryClassName == null) {\n+                    \/\/ Ensure backward compatibility, unless factory is explicitly allowed to override\n+                    \/\/ Do not allow factory to be overridden by Config.setSerialFilterFactory\n+                    filterFactoryNoReplace.set(true);\n+                }\n+\n+            } else {\n+                configLog.log(DEBUG,\n@@ -659,1 +679,1 @@\n-                    Class<?> factoryClass= Class.forName(factoryClassName, true,\n+                    Class<?> factoryClass = Class.forName(factoryClassName, true,\n@@ -666,0 +686,1 @@\n+                        \/\/ Init cycle if Config.setSerialFilterFactory called from class initialization\n@@ -669,1 +690,2 @@\n-                        throw new ExceptionInInitializerError(\"FilterFactory provided on the command line can not be overridden\");\n+                        throw new ExceptionInInitializerError(\n+                                \"FilterFactory provided on the command line can not be overridden\");\n@@ -671,1 +693,2 @@\n-                    factory = f;\n+                    serialFilterFactory = f;\n+                    filterFactoryNoReplace.set(true);\n@@ -680,2 +703,0 @@\n-            } else {\n-                factory = new BuiltinFilterFactory();\n@@ -683,2 +704,0 @@\n-            serialFilterFactory = factory;\n-\n@@ -719,1 +738,1 @@\n-         * @throws IllegalStateException if the filter has already been set {@code non-null}\n+         * @throws IllegalStateException if the filter has already been set\n@@ -777,1 +796,1 @@\n-            filterFactoryUsed.set(true);\n+            filterFactoryNoReplace.set(true);\n@@ -818,9 +837,3 @@\n-            if (filterFactoryUsed.getAndSet(true)) {\n-                throw new IllegalStateException(\"FilterFactory can not be set after any deserialization\");\n-            }\n-            synchronized (serialFilterLock) {\n-                if (serialFilterFactory instanceof BuiltinFilterFactory) {\n-                    \/\/ The factory can be set only if it has been initialized to the builtin.\n-                    serialFilterFactory = filterFactory;\n-                    return;\n-                }\n+            if (filterFactoryNoReplace.getAndSet(true)) {\n+                throw new IllegalStateException(\"Cannot replace filter factory: \" +\n+                        serialFilterFactory.getClass().getName());\n@@ -828,5 +841,1 @@\n-            \/\/ Either the serialFilterFactory has already been set by setSerialFilterFactory\n-            \/\/ or it is {@code null}, because the Config static initialization has not completed.\n-            \/\/ In either case, the serialFilterFactory can not be set.\n-            throw new IllegalStateException(\"Serial filter factory can not replace: \" +\n-                    serialFilterFactory.getClass().getName());\n+            serialFilterFactory = filterFactory;\n@@ -1228,1 +1237,2 @@\n-                Status status = (clazz != null && predicate.test(clazz)) ? ifTrueStatus : ifFalseStatus;\n+                Status status = (clazz == null) ? UNDECIDED\n+                        : (predicate.test(clazz)) ? ifTrueStatus : ifFalseStatus;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":55,"deletions":45,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- * @run testng\/othervm -Djdk.serialFilter=\"*\" SerialFilterFactoryTest\n+ * @run testng\/othervm -Djdk.serialFilter=\"*\" -Djdk.serialFilterFactory=OVERRIDE SerialFilterFactoryTest\n@@ -256,1 +256,1 @@\n-        if (jdkSerialFilterFactoryProp != null) {\n+        if (jdkSerialFilterFactoryProp != null && !jdkSerialFilterFactoryProp.equals(\"OVERRIDE\")) {\n@@ -270,1 +270,1 @@\n-            Assert.assertEquals(ise.getMessage(), \"FilterFactory can not be set after any deserialization\");\n+            Assert.assertTrue(ise.getMessage().startsWith(\"Cannot replace filter factory: \"));\n@@ -333,8 +333,0 @@\n-        public void current(ObjectInputFilter current) {\n-            this.current = current;\n-        }\n-\n-        public void next(ObjectInputFilter next) {\n-            this. next = next;\n-        }\n-\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @run testng SerialFilterFunctionTest\n+ * @run testng\/othervm -Djdk.serialFilterTrace=true SerialFilterFunctionTest\n@@ -89,4 +89,5 @@\n-                { Integer.class, isInteger(), Status.ALLOWED},\n-                { Double.class, isInteger(), Status.UNDECIDED},\n-                { Double.class, isInteger(), null},         \/\/ NPE\n-                { Double.class, null, Status.UNDECIDED},    \/\/ NPE\n+                { Integer.class, isInteger(), REJECTED, ALLOWED},\n+                { Double.class, isInteger(), REJECTED, REJECTED},\n+                { null, isInteger(), REJECTED, UNDECIDED},      \/\/ no class -> UNDECIDED\n+                { Double.class, isInteger(), null, null},       \/\/ NPE\n+                { Double.class, null, REJECTED, null},          \/\/ NPE\n@@ -97,1 +98,1 @@\n-    void testAllowPredicates(Class<?> clazz, Predicate<Class<?>> predicate, Status expected) {\n+    void testAllowPredicates(Class<?> clazz, Predicate<Class<?>> predicate, Status otherStatus, Status expected) {\n@@ -102,1 +103,1 @@\n-            Assert.assertEquals(ObjectInputFilter.allowFilter(predicate, Status.UNDECIDED).checkInput(info),\n+            Assert.assertEquals(ObjectInputFilter.allowFilter(predicate, otherStatus).checkInput(info),\n@@ -110,4 +111,5 @@\n-                { Integer.class, isInteger(), REJECTED},\n-                { Double.class, isInteger(), Status.UNDECIDED},\n-                { Double.class, isInteger(), null},         \/\/ NPE\n-                { Double.class, null, Status.UNDECIDED},    \/\/ NPE\n+                { Integer.class, isInteger(), REJECTED, REJECTED},\n+                { Double.class, isInteger(), ALLOWED, ALLOWED},\n+                { null, isInteger(), REJECTED, UNDECIDED},      \/\/ no class -> UNDECIDED\n+                { Double.class, isInteger(), null, null},         \/\/ NPE\n+                { Double.class, null, UNDECIDED, null},    \/\/ NPE\n@@ -118,1 +120,1 @@\n-    void testRejectPredicates(Class<?> clazz, Predicate<Class<?>> predicate, Status expected) {\n+    void testRejectPredicates(Class<?> clazz, Predicate<Class<?>> predicate, Status otherStatus, Status expected) {\n@@ -123,1 +125,2 @@\n-            Assert.assertEquals(ObjectInputFilter.rejectFilter(predicate, Status.UNDECIDED).checkInput(info), expected, \"Predicate result\");\n+            Assert.assertEquals(ObjectInputFilter.rejectFilter(predicate, otherStatus)\n+                    .checkInput(info), expected, \"Predicate result\");\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFunctionTest.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"}]}