{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.io.ObjectInputFilter.FilterInfo;\n@@ -44,6 +43,0 @@\n-import java.util.function.Predicate;\n-\n-import static java.io.ObjectInputFilter.Status;\n-import static java.io.ObjectInputFilter.Status.ALLOWED;\n-import static java.io.ObjectInputFilter.Status.REJECTED;\n-import static java.io.ObjectInputFilter.Status.UNDECIDED;\n@@ -116,1 +109,1 @@\n-        if (configFilter == null && serialFilter != null) {\n+        if (configFilter == null) {\n@@ -272,1 +265,1 @@\n-    void testSetFactoryAfterDeserialization() throws IOException {\n+    void testSetFactoryAfterDeserialization() {\n@@ -281,7 +274,21 @@\n-    \/**\n-     * Returns an ObjectInputFilter that returns the requested Status.\n-     * @param status a Status, may be null\n-     * @return  an ObjectInputFilter that returns the requested Status\n-     *\/\n-    private static ObjectInputFilter getFilter(ObjectInputFilter.Status status) {\n-        return (info) -> status;\n+\n+    \/\/ Test that OIS.setObjectInputFilter does not allow a null filter to replace\n+    \/\/ a non-null filter.  And does allow a null filter to replace a null filter\n+    @Test\n+    void testDisableFailFilter() throws IOException {\n+        if (hasFilterPerm()) {\n+            \/\/ Only test if is allowed by SM.\n+            ObjectInputFilter curr = null;\n+            try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(simpleStream))) {\n+                curr = ois.getObjectInputFilter();\n+                \/\/ Try to set the filter to null\n+                ois.setObjectInputFilter(null);\n+                if (curr != null) {\n+                    Assert.fail(\"setting filter to null after a non-null filter should throw\");\n+                }\n+            } catch (IllegalStateException ise) {\n+                if (curr == null) {\n+                    Assert.fail(\"setting filter to null after a null filter should not throw\");\n+                }\n+            }\n+        }\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFactoryTest.java","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -137,0 +137,31 @@\n+\n+        \/\/ Specific cases of Classes the result in allowed, rejected, and undecided status\n+        ObjectInputFilter numberFilter = ObjectInputFilter.Config.createFilter(\"java.lang.Integer;!java.lang.Double\");\n+        Object[] testObjs = {\n+                Integer.valueOf(1),         \/\/ Integer is allowed -> allowed\n+                new Integer[1],             \/\/ Integer is allowed -> allowed\n+                new Integer[0][0][0],       \/\/ Integer is allowed -> allowed\n+                Long.valueOf(2),            \/\/ Long is undecided -> rejected\n+                new Long[1],                \/\/ Long is undecided -> rejected\n+                new Long[0][0][0],          \/\/ Long is undecided -> rejected\n+                Double.valueOf(2.0d),       \/\/ Double is rejected -> rejected\n+                new Double[1],              \/\/ Double is rejected -> rejected\n+                new Double[0][0][0],        \/\/ Double is rejected -> rejected\n+                new int[1],                 \/\/ int is primitive undecided -> undecided\n+                new int[1][1][1],           \/\/ int is primitive undecided -> undecided\n+                };\n+\n+        for (Object obj : testObjs) {\n+            Class<?> clazz = obj.getClass();\n+            info = new SerialInfo(clazz);\n+            Status rawSt = numberFilter.checkInput(info);\n+            Status st = ObjectInputFilter.rejectUndecidedClass(numberFilter).checkInput(info);\n+            if (UNDECIDED.equals(rawSt)) {\n+                while (clazz.isArray())\n+                    clazz = clazz.getComponentType();\n+                Status expected = (clazz.isPrimitive()) ? UNDECIDED : REJECTED;\n+                Assert.assertEquals(st, expected, \"Wrong status for class: \" + obj.getClass());\n+            } else {\n+                Assert.assertEquals(rawSt, st, \"raw filter and rejectUndecided filter disagree\");\n+            }\n+        }\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterFunctionTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.io.Serial;\n@@ -63,0 +64,1 @@\n+    @Serial\n@@ -777,0 +779,1 @@\n+        @Serial\n@@ -788,0 +791,1 @@\n+        @Serial\n@@ -848,0 +852,1 @@\n+        @Serial\n@@ -851,0 +856,1 @@\n+        @Serial\n@@ -854,0 +860,1 @@\n+        @Serial\n@@ -857,0 +864,1 @@\n+        @Serial\n@@ -860,0 +868,1 @@\n+        @Serial\n@@ -863,0 +872,1 @@\n+        @Serial\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}