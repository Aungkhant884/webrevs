{"files":[{"patch":"@@ -392,6 +392,5 @@\n-     * The filter returned checks that classes not {@code ALLOWED} by the filter\n-     * are {@code REJECTED}.  Either the class is not {@code ALLOWED} or\n-     * the class is an array and the base component type is not {@code ALLOWED},\n-     * otherwise the result is {@code UNDECIDED}.\n-     * <p>\n-     * Object deserialization accepts a class if the filter returns {@code UNDECIDED}.\n+     * If the class is not a primitive class and not an array, the status returned is REJECTED.\n+     * If the class is a primitive class or an array class additional checks are performed;\n+     * see the list below for details.\n+     *\n+     * <p>Object deserialization accepts a class if the filter returns {@code UNDECIDED}.\n@@ -409,0 +408,1 @@\n+     *     <li>Return {@code REJECTED} if the class is not an {@linkplain Class#isArray() array};\n@@ -549,0 +549,2 @@\n+     * If the filter factory constructor is not invoked successfully, an {@link ExceptionInInitializerError}\n+     * is thrown.\n@@ -601,1 +603,1 @@\n-        private static final AtomicBoolean filterFactoryNoReplace = new AtomicBoolean(false);\n+        private static final AtomicBoolean filterFactoryNoReplace = new AtomicBoolean();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -987,0 +987,2 @@\n+# The filter factory value \"OVERRIDE\" in combination with setting \"jdk.serialFilter\"\n+# indicates that the builtin filter factory can be overridden by the application.\n@@ -990,1 +992,5 @@\n-# See java.io.ObjectInputFilter for more information.\n+# A builtin filter factory is used if no filter factory is defined.\n+# See java.io.ObjectInputFilter.Config for more information.\n+#\n+# If the system property jdk.serialFilterFactory is also specified, it supersedes\n+# the security property value defined here.\n@@ -997,2 +1003,2 @@\n-# A filter, if configured, is used by java.io.ObjectInputStream during\n-# deserialization to check the contents of the stream.\n+# A filter, if configured, is used by the filter factory to provide the filter used by\n+# java.io.ObjectInputStream during deserialization to check the contents of the stream.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}