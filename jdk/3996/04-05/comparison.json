{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -82,7 +83,1 @@\n- * <p>\n- * If a filter is set on an ObjectInputStream, the filter's {@link #checkInput checkInput(FilterInfo)}\n- * method is invoked zero or more times while {@linkplain ObjectInputStream#readObject() reading objects}.\n- * The method is called to validate classes, the length of each array,\n- * the number of objects being read from the stream, the depth of the graph,\n- * and the total number of bytes read from the stream.\n- * The JVM-wide deserialization filter factory ensures that a deserialization filter can be set\n+ * <p>The JVM-wide deserialization filter factory ensures that a deserialization filter can be set\n@@ -91,1 +86,1 @@\n- * The deserialization filter for a stream is determined in one of the following ways:\n+ * The deserialization filter factory either:\n@@ -93,1 +88,1 @@\n- * <li>A JVM-wide filter factory can be set via {@link Config#setSerialFilterFactory(BinaryOperator)}\n+ * <li>The filter factory can be set via {@link Config#setSerialFilterFactory(BinaryOperator)}\n@@ -100,1 +95,1 @@\n- * <li>If a JVM-wide filter factory is not set, a builtin deserialization filter factory\n+ * <li>Otherwise, a builtin deserialization filter factory\n@@ -106,4 +101,0 @@\n- * <li>A stream-specific filter can be set for an individual ObjectInputStream\n- *     via {@link ObjectInputStream#setObjectInputFilter setObjectInputFilter}.\n- *     Note that the filter may be used directly or combined with other filters by the\n- *     {@linkplain Config#setSerialFilterFactory(BinaryOperator) JVM-wide filter factory}.\n@@ -111,0 +102,10 @@\n+ * <p>The filter factory determines the filter for each stream when the stream is\n+ * {@linkplain ObjectInputStream#ObjectInputStream(InputStream) constructed} and when\n+ * a stream-specific filter is set via {@link ObjectInputStream#setObjectInputFilter setObjectInputFilter}.\n+ * Note that the filter may be used directly or combined with other filters by the filter factory.\n+ *\n+ * <p>The filter's {@link #checkInput checkInput(FilterInfo)} method is invoked\n+ * zero or more times while {@linkplain ObjectInputStream#readObject() reading objects}.\n+ * The method is called to validate classes, the length of each array,\n+ * the number of objects being read from the stream, the depth of the graph,\n+ * and the total number of bytes read from the stream.\n@@ -131,1 +132,1 @@\n- * The JVM-wide deserialization filter factory is invoked when each stream is constructed and\n+ * The deserialization filter factory is invoked when each stream is constructed and\n@@ -234,0 +235,5 @@\n+     * <p>If {@code filterInfo.serialClass()} is {@code non-null}, there is a class to be checked.\n+     * If {@code serialClass()} is {@code null}, there is no class and the info contains\n+     * only metrics related to the depth of the graph being deserialized, the number of\n+     * references, and the size of the stream read.\n+     *\n@@ -249,2 +255,4 @@\n-     * When used as an ObjectInputFilter by invoking the {@link ObjectInputFilter#checkInput} method,\n-     * the result is:\n+     *\n+     * @implSpec\n+     * The filter returned implements the {@link ObjectInputFilter#checkInput(FilterInfo)} method\n+     * as follows:\n@@ -252,3 +260,7 @@\n-     *     <li>{@link Status#REJECTED}, if either filter returns {@link Status#REJECTED}, <\/li>\n-     *     <li>Otherwise, {@link Status#ALLOWED}, if either filter returned {@link Status#ALLOWED}, <\/li>\n-     *     <li>Otherwise, return {@link Status#UNDECIDED}<\/li>\n+     *     <li>Invoke this filter on the {@code FilterInfo} to get its {@code status};\n+     *     <li>Return  {@code REJECTED} if the {@code status} is {@code REJECTED};\n+     *     <li>Invoke the {@code otherFilter} to get the {@code otherStatus};\n+     *     <li>Return {@code REJECTED} if the {@code otherStatus} is {@code REJECTED};\n+     *     <li>Return {@code ALLOWED}, if either {@code status} or {@code otherStatus}\n+     *          is {@code ALLOWED}, <\/li>\n+     *     <li>Otherwise, return {@code UNDECIDED}<\/li>\n@@ -259,0 +271,1 @@\n+     * @since 17\n@@ -265,3 +278,3 @@\n-     * Returns a filter that invokes this filter and maps UNDECIDED to REJECTED for classes,\n-     * with some exceptions, and otherwise returns the status.\n-     * The filter ensures that classes not ALLOWED and not REJECTED by this filter\n+     * Returns a filter that invokes this filter and maps {@code UNDECIDED} to {@code REJECTED}\n+     * for classes, with some exceptions, and otherwise returns the status.\n+     * The filter ensures that classes not {@code ALLOWED} and not {@code REJECTED} by this filter\n@@ -269,1 +282,1 @@\n-     * otherwise the result is UNDECIDED.\n+     * otherwise the result is {@code UNDECIDED}.\n@@ -275,3 +288,4 @@\n-     * <p>\n-     * When used as an ObjectInputFilter by invoking the {@link ObjectInputFilter#checkInput} method,\n-     * the result is:\n+     *\n+     * @implSpec\n+     * The filter returned implements the {@link ObjectInputFilter#checkInput(FilterInfo)} method\n+     * as follows:\n@@ -279,3 +293,12 @@\n-     *     <li>{@link ObjectInputFilter.Status#REJECTED}, if the filter is checking a class\n-     *     and the filter returns {@link ObjectInputFilter.Status#UNDECIDED}, <\/li>\n-     *     <li>Otherwise, return the status of this filter<\/li>\n+     *     <li>Invoke this filter on the {@code FilterInfo} to get its {@code status};\n+     *     <li>Return the {@code status} if the status is {@code REJECTED} or {@code ALLOWED};\n+     *     <li>Return {@code UNDECIDED} if the {@code filterInfo.getSerialClass() serialClass}\n+     *          is {@code null};\n+     *     <li>Determine the base component type if the {@code serialClass} is\n+     *          an {@linkplain Class#isArray() array};\n+     *     <li>Return {@code UNDECIDED} if the base component type is\n+     *          a {@linkplain Class#isPrimitive() primitive class};\n+     *     <li>Invoke this filter on the {@code base component type} to get its\n+     *          {@code component status};<\/li>\n+     *     <li>Return {@code ALLOWED} if the component status is {@code ALLOWED};\n+     *     <li>Otherwise, return {@code REJECTED}.<\/li>\n@@ -287,0 +310,1 @@\n+     * @since 17\n@@ -372,1 +396,1 @@\n-     * the static JVM-wide filter, or to create a filter from a pattern string.\n+     * the static JVM-wide filter, or to create filters, including creating a filter from a pattern string.\n@@ -378,0 +402,7 @@\n+     *\n+     * <p>Filters can be created from a {@linkplain Config#createFilter(String) pattern string},\n+     * to {@linkplain #allowFilter(Predicate, Status) allow} or\n+     * {@linkplain #rejectFilter(Predicate, Status) reject} classes based on a\n+     * {@linkplain Predicate predicate}.\n+     * The {@linkplain #allowMaxLimits() limits allow} filter converts {@code UNDECIDED} to\n+     * {@code ALLOWED} for limit checks that are not {@code REJECTED}.\n@@ -385,1 +416,1 @@\n-     * with other context-specific controls or just return the static JVM-wide filter.\n+     * with other context-specific controls or just return the static filter.\n@@ -397,1 +428,1 @@\n-     * the {@linkplain #getSerialFilter() JVM-wide filter}.\n+     * the {@linkplain #getSerialFilter() static JVM-wide filter}.\n@@ -406,1 +437,1 @@\n-     * The JVM-wide filter is configured during the initialization of the\n+     * The static JVM-wide filter is configured during the initialization of the\n@@ -439,1 +470,1 @@\n-         * Lock object for JVM-wide filter and filter factory.\n+         * Lock object for filter and filter factory.\n@@ -444,1 +475,1 @@\n-         * The property name for the JVM-wide filter.\n+         * The property name for the filter.\n@@ -450,1 +481,1 @@\n-         * The property name for the JVM-wide filter factory.\n+         * The property name for the filter factory.\n@@ -469,2 +500,7 @@\n-        private static volatile BinaryOperator<ObjectInputFilter>\n-                serialFilterFactory;\n+        private static volatile BinaryOperator<ObjectInputFilter> serialFilterFactory;\n+\n+        \/**\n+         * Boolean to indicate that the filter factory has been used and cannot be changed thereafter.\n+         * @see Config#setSerialFilterFactory(BinaryOperator)\n+         *\/\n+        private static final AtomicBoolean filterFactoryUsed = new AtomicBoolean(false);\n@@ -484,1 +520,1 @@\n-             * Initialize the configuration containing the filter factory, JVM-wide filter, and logger.\n+             * Initialize the configuration containing the filter factory, static filter, and logger.\n@@ -490,1 +526,2 @@\n-             * <li>If either property is defined, the logger is created.\n+             * <li>The property jdk.serialFilterTrace, is read, and if set enables tracing of filters.\n+             * <li>If either property is defined or tracing is enabled, the logger is created.\n@@ -515,1 +552,1 @@\n-            \/\/ Initialize the JVM-wide filter if the jdk.serialFilter is present\n+            \/\/ Initialize the static filter if the jdk.serialFilter is present\n@@ -636,1 +673,1 @@\n-         * @since TBD\n+         * @since 17\n@@ -645,5 +682,5 @@\n-         * Set the {@linkplain #getSerialFilterFactory() JVM-wide deserialization filter factory}.\n-         * The filter factory can be configured exactly once with one of:\n-         * setting the {@code jdk.serialFilterFactory} property on the command line,\n-         * setting the {@code jdk.serialFilterFactory} property in the {@link java.security.Security}\n-         * file, or using this {@code setSerialFilterFactory} method.\n+         * Returns the serial filter factory singleton and prevents it from changing\n+         * thereafter.\n+         * This package private method is *only* called by {@link ObjectInputStream#ObjectInputStream()}\n+         * and  {@link ObjectInputStream#ObjectInputStream(InputStream)}.\n+         * {@link ObjectInputFilter.Config#serialFilterFactory} does the enforcement.\n@@ -651,16 +688,1 @@\n-         * <p>The JVM-wide filter factory is invoked when an ObjectInputStream\n-         * {@linkplain ObjectInputStream#ObjectInputStream() is constructed} and when the\n-         * {@linkplain ObjectInputStream#setObjectInputFilter(ObjectInputFilter) stream-specific filter is set}.\n-         * The parameters are the current filter and a requested filter and it\n-         * returns the filter to be used for the stream.\n-         * The current and new filter may each be {@code null} and the factory may return {@code null}.\n-         * The factory determines the filter to be used for {@code ObjectInputStream} streams based\n-         * on its inputs, and any other filters, context, or state that is available.\n-         * The factory may throw runtime exceptions to signal incorrect use or invalid parameters.\n-         * See the {@linkplain ObjectInputFilter filter models} for examples of composition and delegation.\n-         *\n-         * @param filterFactory the deserialization filter factory to set as the JVM-wide filter factory; not null\n-         * @throws IllegalStateException if the builtin deserialization filter factory has already been set once\n-         * @throws SecurityException if there is security manager and the\n-         *       {@code SerializablePermission(\"serialFilter\")} is not granted\n-         * @since TBD\n+         * @return the serial filter factory\n@@ -668,2 +690,37 @@\n-        public static void setSerialFilterFactory(\n-                BinaryOperator<ObjectInputFilter> filterFactory) {\n+        \/* package-private *\/\n+        static BinaryOperator<ObjectInputFilter> getSerialFilterFactorySingleton() {\n+            filterFactoryUsed.set(true);\n+            return getSerialFilterFactory();\n+        }\n+\n+\n+            \/**\n+             * Set the {@linkplain #getSerialFilterFactory() JVM-wide deserialization filter factory}.\n+             * The filter factory can be configured exactly once with one of:\n+             * setting the {@code jdk.serialFilterFactory} property on the command line,\n+             * setting the {@code jdk.serialFilterFactory} property in the {@link java.security.Security}\n+             * file, or using this {@code setSerialFilterFactory} method.\n+             * The filter factory can be set only before any {@link ObjectInputStream} has been\n+             * created to avoid any inconsistency in which filter factory is being used.\n+             *\n+             * <p>The JVM-wide filter factory is invoked when an ObjectInputStream\n+             * {@linkplain ObjectInputStream#ObjectInputStream() is constructed} and when the\n+             * {@linkplain ObjectInputStream#setObjectInputFilter(ObjectInputFilter) stream-specific filter is set}.\n+             * The parameters are the current filter and a requested filter and it\n+             * returns the filter to be used for the stream.\n+             * The current and new filter may each be {@code null} and the factory may return {@code null}.\n+             * The factory determines the filter to be used for {@code ObjectInputStream} streams based\n+             * on its inputs, and any other filters, context, or state that is available.\n+             * The factory may throw runtime exceptions to signal incorrect use or invalid parameters.\n+             * See the {@linkplain ObjectInputFilter filter models} for examples of composition and delegation.\n+             *\n+             * @param filterFactory the deserialization filter factory to set as the\n+             *         JVM-wide filter factory; not null\n+             * @throws IllegalStateException if the builtin deserialization filter factory\n+             *         has already been replaced or any instance of {@link ObjectInputStream}\n+             *         has been created.\n+             * @throws SecurityException if there is security manager and the\n+             *       {@code SerializablePermission(\"serialFilter\")} is not granted\n+             * @since 17\n+             *\/\n+        public static void setSerialFilterFactory(BinaryOperator<ObjectInputFilter> filterFactory) {\n@@ -675,0 +732,3 @@\n+            if (filterFactoryUsed.getAndSet(true)) {\n+                throw new IllegalStateException(\"FilterFactory can not be set after any deserialization\");\n+            }\n@@ -769,2 +829,4 @@\n-         * Returns a filter that returns {@code Status.ALLOWED} if the predicate on the class is {@code true},\n-         * otherwise the {@code otherStatus}.\n+         * Returns a filter that returns {@code Status.ALLOWED} if the predicate\n+         * on the class is {@code true}.\n+         * The filter returns {@code ALLOWED} or the {@code otherStatus} based on the predicate\n+         * of the {@code non-null} class and {@code UNDECIDED} if the class is {@code null}.\n@@ -772,2 +834,3 @@\n-         * When the filter's {@link ObjectInputFilter#checkInput} method is invoked,\n-         * the predicate is applied to the {@link FilterInfo#serialClass()}, the return Status is:\n+         * <p>When the filter's {@link ObjectInputFilter#checkInput checkInput(info)} method is invoked,\n+         * the predicate is applied to the {@link FilterInfo#serialClass() info.serialClass()},\n+         * the return Status is:\n@@ -775,1 +838,1 @@\n-         *     <li>{@link Status#UNDECIDED}, if the {@code serialClass} is {@code null},<\/li>\n+         *     <li>{@link Status#UNDECIDED UNDECIDED}, if the {@code serialClass} is {@code null},<\/li>\n@@ -788,2 +851,3 @@\n-         * @return {@link Status#ALLOWED} if the predicate on the class returns {@code true},\n-         *          otherwise {@link Status#UNDECIDED}\n+         * @return a filter than returns {@code ALLOWED} if the predicate on the class returns {@code true},\n+         *          otherwise the {@code otherStatus}\n+         * @since 17\n@@ -798,2 +862,4 @@\n-         * Returns a filter that returns {@code Status.REJECTED} if the predicate on the class is {@code true},\n-         * otherwise the {@code otherStatus}.\n+         * Returns a filter that returns {@code Status.REJECTED} if the predicate\n+         * on the class is {@code true}.\n+         * The filter returns {@code ALLOWED} or the {@code otherStatus} based on the predicate\n+         * of the {@code non-null} class and {@code UNDECIDED} if the class is {@code null}.\n@@ -801,2 +867,3 @@\n-         * When the filter's {@link ObjectInputFilter#checkInput} method is invoked,\n-         * the predicate is applied to the {@link FilterInfo#serialClass()}, the return Status is:\n+         * When the filter's {@link ObjectInputFilter#checkInput checkInput(info)} method is invoked,\n+         * the predicate is applied to the {@link FilterInfo#serialClass() serialClass()},\n+         * the return Status is:\n@@ -804,2 +871,2 @@\n-         *     <li>{@link Status#UNDECIDED}, if the {@code serialClass} is {@code null},<\/li>\n-         *     <li>{@link Status#REJECTED}, if the predicate on the class returns {@code true},<\/li>\n+         *     <li>{@link Status#UNDECIDED UNDECIDED}, if the {@code serialClass} is {@code null},<\/li>\n+         *     <li>{@link Status#REJECTED REJECTED}, if the predicate on the class returns {@code true},<\/li>\n@@ -817,2 +884,3 @@\n-         * @return {@link Status#REJECTED} if the predicate on the class returns {@code true},\n-         *          otherwise {@link Status#UNDECIDED}\n+         * @return returns a filter that returns {@link Status#REJECTED REJECTED} if the predicate on the class\n+         *          returns {@code true}, otherwise {@link Status#UNDECIDED UNDECIDED}\n+         * @since 17\n@@ -829,1 +897,1 @@\n-         * If the {@link FilterInfo#serialClass()} is {@code null}, the filter returns\n+         * If the {@link FilterInfo#serialClass() serialClass()} is {@code null}, the filter returns\n@@ -831,2 +899,3 @@\n-         * The limit values of {@link FilterInfo#arrayLength()}, {@link FilterInfo#depth()},\n-         * {@link FilterInfo#references()}, and {@link FilterInfo#streamBytes()} are not checked.\n+         * The limit values of {@link FilterInfo#arrayLength() arrayLength()},\n+         * {@link FilterInfo#depth() depth()}, {@link FilterInfo#references() references()},\n+         * and {@link FilterInfo#streamBytes() streamBytes()} are not checked.\n@@ -839,1 +908,1 @@\n-         * the {@link FilterInfo#serialClass()} is checked for {@code null}.\n+         * the Status returned is:\n@@ -841,2 +910,2 @@\n-         *     <li>{@link Status#ALLOWED}, if the {@code serialClass} is {@code null},<\/li>\n-         *     <li>Otherwise, return {@link Status#UNDECIDED}<\/li>\n+         *     <li>{@link Status#ALLOWED ALLOWED}, if the {@code serialClass} is {@code null},<\/li>\n+         *     <li>Otherwise, return {@link Status#UNDECIDED UNDECIDED}<\/li>\n@@ -845,2 +914,3 @@\n-         * @return {@link Status#REJECTED} if {@linkplain FilterInfo#serialClass()} serialClass is null}\n-         * {@code true}, otherwise {@link Status#UNDECIDED}\n+         * @return a filter that returns {@code Status.ALLOWED} if the check is for limits\n+         *          and not checking a class; otherwise {@code Status.UNDECIDED}\n+         * @since 17\n@@ -1284,2 +1354,1 @@\n-                    if (!ALLOWED.equals(clazzStatus))\n-                        status = REJECTED;\n+                    status = (ALLOWED.equals(clazzStatus)) ? ALLOWED : REJECTED;\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":160,"deletions":91,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import java.util.function.BinaryOperator;\n@@ -395,1 +394,1 @@\n-        serialFilter = Config.getSerialFilterFactory().apply(null, Config.getSerialFilter());\n+        serialFilter = Config.getSerialFilterFactorySingleton().apply(null, Config.getSerialFilter());\n@@ -431,1 +430,1 @@\n-        serialFilter = Config.getSerialFilterFactory().apply(null, Config.getSerialFilter());\n+        serialFilter = Config.getSerialFilterFactorySingleton().apply(null, Config.getSerialFilter());\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}