{"files":[{"patch":"@@ -410,2 +410,2 @@\n-     *         Stream<Object> stream = ...;\n-     *         Stream<Object> expandedStream = stream.mapMulti(C::expandIterable);\n+     *         var nestedList = ...;\n+     *         Stream<Object> expandedStream = nestedList.stream().mapMulti(C::expandIterable);\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Stream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -23,0 +23,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -28,0 +30,2 @@\n+import static org.testng.Assert.assertEquals;\n+\n@@ -33,1 +37,1 @@\n- * @compile JavadocExamples.java\n+ * @run testng\/othervm JavadocExamples\n@@ -39,2 +43,3 @@\n-    public void fromMapMulti() {\n-        \/\/ Number\/Integer Example\n+    \/\/ From mapMulti\n+    @Test\n+    public void testNumberIntegerExample() {\n@@ -47,0 +52,2 @@\n+\n+        assertEquals(integers, List.of(1,2));\n@@ -48,7 +55,15 @@\n-}\n-\/\/ mapMulti - Expand Iterable Example\n-class C {\n-    static void expandIterable(Object e, Consumer<Object> c) {\n-        if (e instanceof Iterable<?> elements) {\n-            for (Object ie : elements) {\n-                expandIterable(ie, c);\n+    @Test\n+    public void testExpandIterableExample() {\n+        var nestedList = List.of(1, List.of(2, List.of(3, 4)), 5);\n+        Stream<Object> expandedStream = nestedList.stream().mapMulti(C::expandIterable);\n+\n+        assertEquals(expandedStream.toList(), List.of(1,2,3,4,5));\n+    }\n+    static class C {\n+        static void expandIterable(Object e, Consumer<Object> c) {\n+            if (e instanceof Iterable<?> elements) {\n+                for (Object ie : elements) {\n+                    expandIterable(ie, c);\n+                }\n+            } else if (e != null) {\n+                c.accept(e);\n@@ -56,2 +71,0 @@\n-        } else if (e != null) {\n-            c.accept(e);\n@@ -60,4 +73,0 @@\n-    public static void main(String[] args) {\n-        Stream<Object> stream = Stream.of(1, List.of(2, List.of(3, 4)), 5);\n-        Stream<Object> expandedStream = stream.mapMulti(C::expandIterable);\n-    }\n","filename":"test\/jdk\/java\/util\/stream\/examples\/JavadocExamples.java","additions":25,"deletions":16,"binary":false,"changes":41,"status":"modified"}]}