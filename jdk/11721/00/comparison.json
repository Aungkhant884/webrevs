{"files":[{"patch":"@@ -156,0 +156,5 @@\n+        \/\/ Generate dump filename if user has specified a time-bound recording\n+        if (duration != null && path == null) {\n+            path = resolvePath(recording, null).toString();\n+        }\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.jfr.FlightRecorder;\n@@ -44,0 +45,3 @@\n+    public static final String RECORDING_NAME = \"TestStartDuration\";\n+    public static final String WAIT_FOR_RUNNING = \"wait-for-running\";\n+    public static final String WAIT_FOR_CLOSED = \"wait-for-closed\";\n@@ -47,4 +51,7 @@\n-            Recording r = StartupHelper.getRecording(\"TestStartDuration\");\n-            Asserts.assertEquals(r.getDuration(), Duration.parse(args[0]));\n-            if (args.length > 1 && args[1].equals(\"wait\")) {\n-                CommonHelper.waitForRecordingState(r, RecordingState.STOPPED);\n+            String action = args[0];\n+            Duration duration = Duration.parse(args[1]);\n+            if (action.equals(WAIT_FOR_RUNNING)) {\n+                Recording r = StartupHelper.getRecording(\"TestStartDuration\");\n+                Asserts.assertEquals(r.getDuration(), duration);\n+                CommonHelper.waitForRecordingState(r, RecordingState.RUNNING);\n+                return;\n@@ -52,0 +59,9 @@\n+            if (action.equals(WAIT_FOR_CLOSED)) {\n+                while (!FlightRecorder.getFlightRecorder().getRecordings().isEmpty()) {\n+                    Thread.sleep(200);\n+                    System.out.println(\"A recording still running\");\n+                }\n+                return;\n+            }\n+            System.out.println(\"Unknown action: \" + action);\n+            System.exit(1);\n@@ -55,1 +71,1 @@\n-    private static void testDurationInRange(String duration, Duration durationString, boolean wait) throws Exception {\n+    private static void testDurationInRange(String durationText, Duration duration, String action) throws Exception {\n@@ -57,2 +73,4 @@\n-            \"-XX:StartFlightRecording:name=TestStartDuration,duration=\" + duration, TestValues.class.getName(),\n-            durationString.toString(), wait ? \"wait\" : \"\");\n+            \"-XX:StartFlightRecording:name=\" + RECORDING_NAME + \",duration=\" + durationText,\n+            TestValues.class.getName(),\n+            action,\n+            duration.toString());\n@@ -87,6 +105,7 @@\n-        testDurationInRange(\"1s\", Duration.ofSeconds(1), true);\n-        testDurationInRange(\"1234003005ns\", Duration.ofNanos(1234003005L), true);\n-        testDurationInRange(\"1034ms\", Duration.ofMillis(1034), false);\n-        testDurationInRange(\"32m\", Duration.ofMinutes(32), false);\n-        testDurationInRange(\"65h\", Duration.ofHours(65), false);\n-        testDurationInRange(\"354d\", Duration.ofDays(354), false);\n+        testDurationInRange(\"1s\", Duration.ofSeconds(1), WAIT_FOR_CLOSED);\n+        testDurationInRange(\"1234003005ns\", Duration.ofNanos(1234003005L), WAIT_FOR_CLOSED);\n+        testDurationInRange(\"1034ms\", Duration.ofMillis(1034), WAIT_FOR_CLOSED);\n+        testDurationInRange(\"3500s\", Duration.ofSeconds(3500), WAIT_FOR_RUNNING);\n+        testDurationInRange(\"59m\", Duration.ofMinutes(59), WAIT_FOR_RUNNING);\n+        testDurationInRange(\"65h\", Duration.ofHours(65), WAIT_FOR_RUNNING);\n+        testDurationInRange(\"354d\", Duration.ofDays(354), WAIT_FOR_RUNNING);\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartDuration.java","additions":33,"deletions":14,"binary":false,"changes":47,"status":"modified"}]}