{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,0 +153,1 @@\n+  \/\/ This line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n@@ -235,2 +236,2 @@\n-    \/\/ it's set again later in set_interpreter_frame_bottom, but we need to set the locals now so that\n-    \/\/ we could call ContinuationHelper::InterpretedFrame::frame_bottom\n+    \/\/ we need to set the locals now so that the caller of new_stack_frame() can call\n+    \/\/ ContinuationHelper::InterpretedFrame::frame_bottom\n@@ -239,2 +240,2 @@\n-    \/\/ derelativize locals\n-    *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = fp + padding + offset;\n+    \/\/ set relativized locals\n+    *f.addr_at(frame::interpreter_frame_locals_offset) = padding + offset;\n@@ -303,1 +304,3 @@\n-  *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = bottom - 1;\n+  \/\/ set relativized locals\n+  \/\/ this line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n+  *f.addr_at(frame::interpreter_frame_locals_offset) = (bottom - 1) - f.fp();\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,0 @@\n-\n@@ -134,1 +133,1 @@\n-  return (intptr_t*)f.at(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n+  return (intptr_t*)f.at_relative(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -317,0 +317,8 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized locals\n+  ptr_at_put(interpreter_frame_locals_offset, (intptr_t) (locs - fp()));\n+}\n+\n@@ -318,0 +326,1 @@\n+\n@@ -529,1 +538,1 @@\n-  address locals =  (address) *interpreter_frame_locals_addr();\n+  address locals =  (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,2 +260,3 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**)addr_at(interpreter_frame_locals_offset);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  intptr_t n = *addr_at(interpreter_frame_locals_offset);\n+  return &fp()[n]; \/\/ return relativized locals\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+    lea(rlocals, Address(rfp, rlocals, Address::lsl(3)));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -814,5 +814,0 @@\n-  __ ldr(rcpool, Address(rmethod, Method::const_offset()));\n-  __ ldr(rcpool, Address(rcpool, ConstMethod::constants_offset()));\n-  __ ldr(rcpool, Address(rcpool, ConstantPool::cache_offset_in_bytes()));\n-  __ stp(rlocals, rcpool, Address(sp, 2 * wordSize));\n-\n@@ -823,0 +818,8 @@\n+  __ ldr(rcpool, Address(rmethod, Method::const_offset()));\n+  __ ldr(rcpool, Address(rcpool, ConstMethod::constants_offset()));\n+  __ ldr(rcpool, Address(rcpool, ConstantPool::cache_offset_in_bytes()));\n+  __ sub(rscratch1, rlocals, rfp);\n+  __ lsr(rscratch1, rscratch1, Interpreter::logStackElementSize);   \/\/ rscratch1 = rlocals - fp();\n+  \/\/ Now &fp()[rscratch1] == rlocals\n+  __ stp(rscratch1, rcpool, Address(sp, 2 * wordSize));\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,0 +255,8 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized locals\n+  ptr_at_put(interpreter_frame_locals_offset, (intptr_t) (locs - fp()));\n+}\n+\n@@ -256,0 +264,1 @@\n+\n@@ -439,1 +448,1 @@\n-  address locals =  (address) *interpreter_frame_locals_addr();\n+  address locals =  (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,2 +125,3 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**)addr_at(interpreter_frame_locals_offset);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  intptr_t n = *addr_at(interpreter_frame_locals_offset);\n+  return &fp()[n]; \/\/ return relativized locals\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-\n@@ -76,1 +75,4 @@\n-  void restore_locals()                                    { ldr(Rlocals, Address(FP, frame::interpreter_frame_locals_offset * wordSize)); }\n+  void restore_locals() {\n+    ldr(Rlocals, Address(FP, frame::interpreter_frame_locals_offset * wordSize));\n+    add(Rlocals, FP, AsmOperand(Rlocals, lsl, LogBytesPerWord));\n+  }\n","filename":"src\/hotspot\/cpu\/arm\/interp_masm_arm.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -657,1 +657,4 @@\n-  __ push(Rlocals);                                    \/\/ set locals pointer\n+  __ sub(Rtemp, Rlocals, FP);\n+  __ logical_shift_right(Rtemp, Rtemp, Interpreter::logStackElementSize); \/\/ Rtemp = Rlocals - fp();\n+  \/\/ Now &fp()[Rtemp] == Rlocals\n+  __ push(Rtemp);                                      \/\/ set relativized locals\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,1 @@\n+  \/\/ This line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n@@ -507,2 +508,2 @@\n-    \/\/ it's set again later in set_interpreter_frame_bottom, but we need to set the locals now so that\n-    \/\/ we could call ContinuationHelper::InterpretedFrame::frame_bottom\n+    \/\/ we need to set the locals now so that the caller of new_stack_frame() can call\n+    \/\/ ContinuationHelper::InterpretedFrame::frame_bottom\n@@ -511,1 +512,2 @@\n-    *(intptr_t**)f.addr_at(ijava_idx(locals)) = fp + offset;\n+    \/\/ set relativized locals\n+    *f.addr_at(ijava_idx(locals)) = offset;\n@@ -551,1 +553,3 @@\n-  *(intptr_t**)f.addr_at(ijava_idx(locals)) = bottom - 1;\n+  \/\/ set relativized locals\n+  \/\/ This line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n+  *f.addr_at(ijava_idx(locals)) = (bottom - 1) - f.fp();\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n-  return (intptr_t*)f.at(ijava_idx(locals)) + 1; \/\/ exclusive (will not be copied), so we add 1 word\n+  return (intptr_t*)f.at_relative(ijava_idx(locals)) + 1; \/\/ exclusive (will not be copied), so we add 1 word\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,0 +233,10 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized locals\n+  *addr_at(ijava_idx(locals)) = (intptr_t) (locs - fp());\n+}\n+\n+\/\/ sender_sp\n+\n@@ -325,1 +335,1 @@\n-  address locals =  (address) *interpreter_frame_locals_addr();\n+  address locals =  (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,2 +190,3 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**)addr_at(ijava_idx(locals));\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  intptr_t n = *addr_at(ijava_idx(locals));\n+  return &fp()[n]; \/\/ return relativized locals\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2173,1 +2173,1 @@\n-  ld(scratch, 0, R1_SP);\n+  ld_ptr(scratch, _abi0(callers_sp), R1_SP);   \/\/ Load frame pointer.\n@@ -2192,0 +2192,2 @@\n+    sldi(R18_locals, R18_locals, Interpreter::logStackElementSize);\n+    add(R18_locals, R18_locals, scratch);\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -856,1 +856,1 @@\n-    __ ld(Robj_to_lock, _abi0(callers_sp), R1_SP);\n+    __ ld(Robj_to_lock, _abi0(callers_sp), R1_SP); \/\/ Sets Robj_to_lock = fp.\n@@ -1033,1 +1033,4 @@\n-  __ std(R18_locals, _ijava_state_neg(locals), R1_SP);\n+  __ sub(R12_scratch2, R18_locals, R1_SP);\n+  __ srdi(R12_scratch2, R12_scratch2, Interpreter::logStackElementSize);\n+  \/\/ Now &fp()[R12_scratch2] == R18_locals\n+  __ std(R12_scratch2, _ijava_state_neg(locals), R1_SP);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,0 +152,1 @@\n+  \/\/ this line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n@@ -238,2 +239,2 @@\n-    \/\/ it's set again later in set_interpreter_frame_bottom, but we need to set the locals now so that\n-    \/\/ we could call ContinuationHelper::InterpretedFrame::frame_bottom\n+    \/\/ we need to set the locals now so that the caller of new_stack_frame() can call\n+    \/\/ ContinuationHelper::InterpretedFrame::frame_bottom\n@@ -242,2 +243,2 @@\n-    \/\/ derelativize locals\n-    *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = fp + padding + offset;\n+    \/\/ set relativized locals\n+    *f.addr_at(frame::interpreter_frame_locals_offset) = padding + offset;\n@@ -306,1 +307,3 @@\n-  *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = bottom - 1;\n+  \/\/ set relativized locals\n+  \/\/ This line can be changed into an assert when we have fixed the \"frame padding problem\", see JDK-8300197\n+  *f.addr_at(frame::interpreter_frame_locals_offset) = (bottom - 1) - f.fp();\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-  return (intptr_t*)f.at(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n+  return (intptr_t*)f.at_relative(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n","filename":"src\/hotspot\/cpu\/riscv\/continuationHelper_riscv.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,0 +293,8 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized locals\n+  ptr_at_put(interpreter_frame_locals_offset, (intptr_t) (locs - fp()));\n+}\n+\n@@ -294,0 +302,1 @@\n+\n@@ -484,1 +493,1 @@\n-    address locals = (address) *interpreter_frame_locals_addr();\n+    address locals = (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,2 +251,3 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**)addr_at(interpreter_frame_locals_offset);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  intptr_t n = *addr_at(interpreter_frame_locals_offset);\n+  return &fp()[n]; \/\/ return relativized locals\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+    shadd(xlocals, xlocals, fp,  t0,  LogBytesPerWord);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -749,0 +749,4 @@\n+  __ sd(ra, Address(sp, 11 * wordSize));\n+  __ sd(fp, Address(sp, 10 * wordSize));\n+  __ la(fp, Address(sp, 12 * wordSize)); \/\/ include ra & fp\n+\n@@ -753,5 +757,4 @@\n-  __ sd(xlocals, Address(sp, 2 * wordSize));\n-\n-  __ sd(ra, Address(sp, 11 * wordSize));\n-  __ sd(fp, Address(sp, 10 * wordSize));\n-  __ la(fp, Address(sp, 12 * wordSize)); \/\/ include ra & fp\n+  __ sub(t0, xlocals, fp);\n+  __ srli(t0, t0, Interpreter::logStackElementSize);   \/\/ t0 = xlocals - fp();\n+  \/\/ Now &fp()[t0] == xlocals\n+  __ sd(t0, Address(sp, 2 * wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,0 +185,7 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  ijava_state_unchecked()->locals = (uint64_t)locs;\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,2 +182,2 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**) &(ijava_state()->locals);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  return (intptr_t*) (ijava_state()->locals);\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,3 +143,0 @@\n-  \/\/ We compute the locals as below rather than relativize the value in the frame because then we can use the same\n-  \/\/ code on AArch64, which has an added complication (see this method in continuation_aarch64.inline.hpp)\n-\n@@ -148,1 +145,3 @@\n-  *hf.addr_at(frame::interpreter_frame_locals_offset) = frame::sender_sp_offset + f.interpreter_frame_method()->max_locals() - 1;\n+\n+  \/\/ Make sure that locals is already relativized.\n+  assert((*hf.addr_at(frame::interpreter_frame_locals_offset) == frame::sender_sp_offset + f.interpreter_frame_method()->max_locals() - 1), \"\");\n@@ -225,2 +224,2 @@\n-    \/\/ it's set again later in set_interpreter_frame_bottom, but we need to set the locals now so that\n-    \/\/ we could call ContinuationHelper::InterpretedFrame::frame_bottom\n+    \/\/ we need to set the locals now so that the caller of new_stack_frame() can call\n+    \/\/ ContinuationHelper::InterpretedFrame::frame_bottom\n@@ -229,2 +228,2 @@\n-    \/\/ derelativize locals\n-    *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = fp + offset;\n+    \/\/ set relativized locals\n+    *f.addr_at(frame::interpreter_frame_locals_offset) = offset;\n@@ -290,1 +289,2 @@\n-  *(intptr_t**)f.addr_at(frame::interpreter_frame_locals_offset) = bottom - 1;\n+  \/\/ Nothing to do. Just make sure the relativized locals is already set.\n+  assert((*f.addr_at(frame::interpreter_frame_locals_offset) == (bottom - 1) - f.fp()), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-  return (intptr_t*)f.at(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n+  return (intptr_t*)f.at_relative(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n","filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -311,0 +311,8 @@\n+\/\/ locals\n+\n+void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized locals\n+  ptr_at_put(interpreter_frame_locals_offset, (intptr_t) (locs - fp()));\n+}\n+\n@@ -515,1 +523,1 @@\n-  address locals =  (address) *interpreter_frame_locals_addr();\n+  address locals =  (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+\/\/    [klass of method       ]                   = mirror()             mirror_offset\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,2 +248,3 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return (intptr_t**)addr_at(interpreter_frame_locals_offset);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  intptr_t n = *addr_at(interpreter_frame_locals_offset);\n+  return &fp()[n]; \/\/ return relativized locals\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+    lea(_locals_register, Address(rbp, _locals_register, Address::times_ptr));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -647,1 +647,7 @@\n-  __ push(rlocals); \/\/ set locals pointer\n+\n+  __ movptr(rax, rlocals);\n+  __ subptr(rax, rbp);\n+  __ shrptr(rax, Interpreter::logStackElementSize);  \/\/ rax = rlocals - fp();\n+  \/\/ Now &fp()[rax] == rlocals\n+  __ push(rax); \/\/ set relativized locals\n+\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-  address locals = (address) *interpreter_frame_locals_addr();\n+  address locals = (address)interpreter_frame_locals();\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,2 +102,2 @@\n-inline intptr_t** frame::interpreter_frame_locals_addr() const {\n-  return &(get_interpreterState()->_locals);\n+inline intptr_t* frame::interpreter_frame_locals() const {\n+  return get_interpreterState()->_locals;\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -393,5 +393,0 @@\n-void frame::interpreter_frame_set_locals(intptr_t* locs)  {\n-  assert(is_interpreted_frame(), \"Not an interpreted frame\");\n-  *interpreter_frame_locals_addr() = locs;\n-}\n-\n@@ -467,2 +462,1 @@\n-  intptr_t* first = _on_heap ? fp() + (intptr_t)*interpreter_frame_locals_addr()\n-                             : *interpreter_frame_locals_addr();\n+  intptr_t* first = interpreter_frame_locals();\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,3 +296,3 @@\n-  intptr_t** interpreter_frame_locals_addr() const;\n-  intptr_t*  interpreter_frame_bcp_addr() const;\n-  intptr_t*  interpreter_frame_mdp_addr() const;\n+  intptr_t* interpreter_frame_locals() const;\n+  intptr_t* interpreter_frame_bcp_addr() const;\n+  intptr_t* interpreter_frame_mdp_addr() const;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,1 +279,1 @@\n-    return addressOfInterpreterFrameLocals().getAddressAt(0).addOffsetTo(-slot * VM.getVM().getAddressSize());\n+    return addressOfInterpreterFrameLocals().addOffsetTo(-slot * VM.getVM().getAddressSize());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/Frame.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -476,1 +476,2 @@\n-    return addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET);\n+    long n = addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET).getCIntegerAt(0, VM.getVM().getAddressSize(), false);\n+    return getFP().addOffsetTo(n * VM.getVM().getAddressSize());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/aarch64\/AARCH64Frame.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -388,1 +388,2 @@\n-    return addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET);\n+    long n = addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET).getCIntegerAt(0, VM.getVM().getAddressSize(), false);\n+    return getFP().addOffsetTo(n * VM.getVM().getAddressSize());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/ppc64\/PPC64Frame.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,1 +451,2 @@\n-    return addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET);\n+    long n = addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET).getCIntegerAt(0, VM.getVM().getAddressSize(), false);\n+    return getFP().addOffsetTo(n * VM.getVM().getAddressSize());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/riscv64\/RISCV64Frame.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -436,1 +436,2 @@\n-    return addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET);\n+    long n = addressOfStackSlot(INTERPRETER_FRAME_LOCALS_OFFSET).getCIntegerAt(0, VM.getVM().getAddressSize(), false);\n+    return getFP().addOffsetTo(n * VM.getVM().getAddressSize());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/x86\/X86Frame.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}