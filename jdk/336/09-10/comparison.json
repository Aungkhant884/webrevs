{"files":[{"patch":"@@ -50,11 +50,0 @@\n-static bool use_class_space(bool is_class) {\n-  if (Metaspace::using_class_space() && is_class) {\n-    return true;\n-  }\n-  return false;\n-}\n-\n-static bool use_class_space(Metaspace::MetadataType mdType) {\n-  return use_class_space(Metaspace::is_class_space_allocation(mdType));\n-}\n-\n@@ -90,1 +79,1 @@\n-  UL2(debug, \"born (SpcMgr nonclass: \" PTR_FORMAT \", SpcMgr class: \" PTR_FORMAT \".\",\n+  UL2(debug, \"born (nonclass arena: \" PTR_FORMAT \", class arena: \" PTR_FORMAT \".\",\n@@ -107,1 +96,1 @@\n-  if (use_class_space(mdType)) {\n+  if (Metaspace::is_class_space_allocation(mdType)) {\n@@ -149,1 +138,0 @@\n-\n@@ -151,2 +139,1 @@\n-\n-  if (use_class_space(is_class)) {\n+  if (Metaspace::using_class_space() && is_class) {\n@@ -157,1 +144,0 @@\n-\n@@ -159,1 +145,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -78,4 +78,0 @@\n-  metaspace::MetaspaceArena* get_arena(bool is_class) {\n-    return is_class ? class_space_arena() : non_class_space_arena();\n-  }\n-\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-      (using_class_space() ? metaspace::MetaspaceContext::context_class() != NULL : true);\n+      (using_class_space() ? Metaspace::class_space_is_initialized() : true);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-                                   MetaspaceObj::Type type, Metaspace::MetadataType mdtype, TRAPS);\n+                                   MetaspaceObj::Type type, MetadataType mdtype, TRAPS);\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-\/\/  in deallocation-heavvy scenarios (e.g. lots of class redefinitions).\n+\/\/  in deallocation-heavy scenarios (e.g. lots of class redefinitions).\n","filename":"src\/hotspot\/share\/memory\/metaspace\/allocationGuard.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,0 @@\n-      \/\/ count leading zeros would be helpful.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/binList.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -155,20 +155,0 @@\n-  \/\/ Given a node n, return its predecessor in the tree\n-  \/\/ (node with the next-smaller size).\n-  static Node* predecessor(Node* n) {\n-    Node* pred = NULL;\n-    if (n->_left != NULL) {\n-      pred = n->_left;\n-      while (pred->_right != NULL) {\n-        pred = pred->_right;\n-      }\n-    } else {\n-      pred = n->_parent;\n-      Node* n2 = n;\n-      while (pred != NULL && n2 == pred->_left) {\n-        n2 = pred;\n-        pred = pred->_parent;\n-      }\n-    }\n-    return pred;\n-  }\n-\n@@ -219,1 +199,1 @@\n-  void insert(Node* insertion_point, Node* n) {\n+  static void insert(Node* insertion_point, Node* n) {\n@@ -246,1 +226,0 @@\n-\n@@ -248,1 +227,0 @@\n-\n@@ -260,1 +238,0 @@\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/blockTree.hpp","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-  const chunklevel_t lvl = c->level();\n@@ -130,1 +129,0 @@\n-  assert(max_level >= preferred_level, \"invalid level.\");\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  \/\/  The first first <min_committed_words> of the chunk are guaranteed to be committed.\n+  \/\/  The first <min_committed_words> of the chunk are guaranteed to be committed.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-  \/\/   to cover the second halfof the old chunk.\n+  \/\/   to cover the second half of the old chunk.\n@@ -99,7 +99,0 @@\n-  \/\/ As an optimization, since we usually do not split once but multiple times,\n-  \/\/ to not do each split separately, since we would have to wire up prev_in_vs\/next_in_vs\n-  \/\/ on every level just to tear it open in the next level when we reintroduce a new\n-  \/\/ half chunk splinter.\n-  \/\/ Instead, just split split split and delay building up the double linked list of the\n-  \/\/ new chunks at the end of all splits.\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace\/rootChunkArea.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"}]}