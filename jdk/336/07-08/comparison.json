{"files":[{"patch":"@@ -61,0 +61,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcVMOperations.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"src\/hotspot\/share\/memory\/metaspace\/classLoaderMetaspace.cpp","status":"renamed"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_MEMORY_CLASSLOADERMETASPACE_HPP\n+#define SHARE_MEMORY_CLASSLOADERMETASPACE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/metaspace.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+class outputStream;\n+\n+namespace metaspace {\n+  struct ClmsStats;\n+  class MetaspaceArena;\n+}\n+\n+\/\/ A ClassLoaderMetaspace manages MetaspaceArena(s) for a CLD.\n+\/\/\n+\/\/ A CLD owns one MetaspaceArena if UseCompressedClassPointers is false. Otherwise\n+\/\/ it owns two - one for the Klass* objects from the class space, one for the other\n+\/\/ types of MetaspaceObjs from the non-class space.\n+\/\/\n+\/\/ +------+       +----------------------+       +-------------------+\n+\/\/ | CLD  | --->  | ClassLoaderMetaspace | ----> | (non class) Arena |\n+\/\/ +------+       +----------------------+  |    +-------------------+     allocation top\n+\/\/                                          |       |                        v\n+\/\/                                          |       + chunk -- chunk ... -- chunk\n+\/\/                                          |\n+\/\/                                          |    +-------------------+\n+\/\/                                          +--> | (class) Arena     |\n+\/\/                                               +-------------------+\n+\/\/                                                  |\n+\/\/                                                  + chunk ... chunk\n+\/\/                                                               ^\n+\/\/                                                               alloc top\n+\/\/\n+class ClassLoaderMetaspace : public CHeapObj<mtClass> {\n+\n+  \/\/ A reference to an outside lock, held by the CLD.\n+  Mutex* const _lock;\n+\n+  const Metaspace::MetaspaceType _space_type;\n+\n+  \/\/ Arena for allocations from non-class  metaspace\n+  \/\/  (resp. for all allocations if -XX:-UseCompressedClassPointers).\n+  metaspace::MetaspaceArena* _non_class_space_arena;\n+\n+  \/\/ Arena for allocations from class space\n+  \/\/  (NULL if -XX:-UseCompressedClassPointers).\n+  metaspace::MetaspaceArena* _class_space_arena;\n+\n+  Mutex* lock() const                             { return _lock; }\n+  metaspace::MetaspaceArena* non_class_space_arena() const   { return _non_class_space_arena; }\n+  metaspace::MetaspaceArena* class_space_arena() const       { return _class_space_arena; }\n+\n+  metaspace::MetaspaceArena* get_arena(bool is_class) {\n+    return is_class ? class_space_arena() : non_class_space_arena();\n+  }\n+\n+public:\n+\n+  ClassLoaderMetaspace(Mutex* lock, Metaspace::MetaspaceType space_type);\n+\n+  ~ClassLoaderMetaspace();\n+\n+  Metaspace::MetaspaceType space_type() const { return _space_type; }\n+\n+  \/\/ Allocate word_size words from Metaspace.\n+  MetaWord* allocate(size_t word_size, Metaspace::MetadataType mdType);\n+\n+  \/\/ Attempt to expand the GC threshold to be good for at least another word_size words\n+  \/\/ and allocate. Returns NULL if failure. Used during Metaspace GC.\n+  MetaWord* expand_and_allocate(size_t word_size, Metaspace::MetadataType mdType);\n+\n+  \/\/ Prematurely returns a metaspace allocation to the _block_freelists\n+  \/\/ because it is not needed anymore.\n+  void deallocate(MetaWord* ptr, size_t word_size, bool is_class);\n+\n+  \/\/ Update statistics. This walks all in-use chunks.\n+  void add_to_statistics(metaspace::ClmsStats* out) const;\n+\n+  DEBUG_ONLY(void verify() const;)\n+\n+  \/\/ This only exists for JFR and jcmd VM.classloader_stats. We may want to\n+  \/\/  change this. Capacity as a stat is of questionable use since it may\n+  \/\/  contain committed and uncommitted areas. For now we do this to maintain\n+  \/\/  backward compatibility with JFR.\n+  void calculate_jfr_stats(size_t* p_used_bytes, size_t* p_capacity_bytes) const;\n+\n+}; \/\/ end: ClassLoaderMetaspace\n+\n+\n+#endif \/\/ SHARE_MEMORY_CLASSLOADERMETASPACE_HPP\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.hpp","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-  class MetaspaceArena;\n@@ -44,1 +43,0 @@\n-  struct ClmsStats;\n@@ -157,75 +155,0 @@\n-\/\/ A ClassLoaderMetaspace manages MetaspaceArena(s) for a CLD.\n-\/\/\n-\/\/ A CLD owns one MetaspaceArena if UseCompressedClassPointers is false. Otherwise\n-\/\/ it owns two - one for the Klass* objects from the class space, one for the other\n-\/\/ types of MetaspaceObjs from the non-class space.\n-\/\/\n-\/\/ +------+       +----------------------+       +-------------------+\n-\/\/ | CLD  | --->  | ClassLoaderMetaspace | ----> | (non class) Arena |\n-\/\/ +------+       +----------------------+  |    +-------------------+     allocation top\n-\/\/                                          |       |                        v\n-\/\/                                          |       + chunk -- chunk ... -- chunk\n-\/\/                                          |\n-\/\/                                          |    +-------------------+\n-\/\/                                          +--> | (class) Arena     |\n-\/\/                                               +-------------------+\n-\/\/                                                  |\n-\/\/                                                  + chunk ... chunk\n-\/\/                                                               ^\n-\/\/                                                               alloc top\n-\/\/\n-class ClassLoaderMetaspace : public CHeapObj<mtClass> {\n-\n-  \/\/ A reference to an outside lock, held by the CLD.\n-  Mutex* const _lock;\n-\n-  const Metaspace::MetaspaceType _space_type;\n-\n-  \/\/ Arena for allocations from non-class  metaspace\n-  \/\/  (resp. for all allocations if -XX:-UseCompressedClassPointers).\n-  metaspace::MetaspaceArena* _non_class_space_arena;\n-\n-  \/\/ Arena for allocations from class space\n-  \/\/  (NULL if -XX:-UseCompressedClassPointers).\n-  metaspace::MetaspaceArena* _class_space_arena;\n-\n-  Mutex* lock() const                             { return _lock; }\n-  metaspace::MetaspaceArena* non_class_space_arena() const   { return _non_class_space_arena; }\n-  metaspace::MetaspaceArena* class_space_arena() const       { return _class_space_arena; }\n-\n-  metaspace::MetaspaceArena* get_arena(bool is_class) {\n-    return is_class ? class_space_arena() : non_class_space_arena();\n-  }\n-\n-public:\n-\n-  ClassLoaderMetaspace(Mutex* lock, Metaspace::MetaspaceType space_type);\n-\n-  ~ClassLoaderMetaspace();\n-\n-  Metaspace::MetaspaceType space_type() const { return _space_type; }\n-\n-  \/\/ Allocate word_size words from Metaspace.\n-  MetaWord* allocate(size_t word_size, Metaspace::MetadataType mdType);\n-\n-  \/\/ Attempt to expand the GC threshold to be good for at least another word_size words\n-  \/\/ and allocate. Returns NULL if failure. Used during Metaspace GC.\n-  MetaWord* expand_and_allocate(size_t word_size, Metaspace::MetadataType mdType);\n-\n-  \/\/ Prematurely returns a metaspace allocation to the _block_freelists\n-  \/\/ because it is not needed anymore.\n-  void deallocate(MetaWord* ptr, size_t word_size, bool is_class);\n-\n-  \/\/ Update statistics. This walks all in-use chunks.\n-  void add_to_statistics(metaspace::ClmsStats* out) const;\n-\n-  DEBUG_ONLY(void verify() const;)\n-\n-  \/\/ This only exists for JFR and jcmd VM.classloader_stats. We may want to\n-  \/\/  change this. Capacity as a stat is of questionable use since it may\n-  \/\/  contain committed and uncommitted areas. For now we do this to maintain\n-  \/\/  backward compatibility with JFR.\n-  void calculate_jfr_stats(size_t* p_used_bytes, size_t* p_capacity_bytes) const;\n-\n-}; \/\/ end: ClassLoaderMetaspace\n-\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":0,"deletions":77,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  const int growth_step = _chunks.count();\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,1 +66,6 @@\n-  \/\/ If true, we handle deallocated blocks (default).\n+  \/\/ This enables or disables premature deallocation of metaspace allocated blocks. Using\n+  \/\/  Metaspace::deallocate(), blocks can be returned prematurely (before the associated\n+  \/\/  Arena dies, e.g. after class unloading) and can be reused by the arena.\n+  \/\/  If disabled, those blocks will not be reused until the Arena dies.\n+  \/\/ Note that premature deallocation is rare under normal circumstances.\n+  \/\/ By default deallocation handling is enabled.\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/printCLDMetaspaceInfoClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_is_metaspace_obj.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/classLoaderMetaspace.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspace_misc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}